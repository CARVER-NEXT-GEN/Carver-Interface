
Carver-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001880c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  080189f0  080189f0  000199f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019880  08019880  0001b194  2**0
                  CONTENTS
  4 .ARM          00000008  08019880  08019880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019888  08019888  0001b194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08019888  08019888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019894  08019894  0001a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08019898  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb78  20000198  08019a2c  0001b198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000cd10  08019a2c  0001bd10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e5d  00000000  00000000  0001b1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000553e  00000000  00000000  00043021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f60  00000000  00000000  00048560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000181a  00000000  00000000  0004a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f356  00000000  00000000  0004bcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f4b  00000000  00000000  0007b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012995a  00000000  00000000  000a1f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001cb8d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091a4  00000000  00000000  001cb94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001d4af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000198 	.word	0x20000198
 80001fc:	00000000 	.word	0x00000000
 8000200:	080189d4 	.word	0x080189d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000019c 	.word	0x2000019c
 800021c:	080189d4 	.word	0x080189d4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	@ 0x30
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2220      	movs	r2, #32
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f017 f9fd 	bl	8017a98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800069e:	4b33      	ldr	r3, [pc, #204]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a6:	4b31      	ldr	r3, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <MX_ADC1_Init+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b4:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_ADC1_Init+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <MX_ADC1_Init+0xec>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_ADC1_Init+0xec>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <MX_ADC1_Init+0xec>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <MX_ADC1_Init+0xec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_ADC1_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <MX_ADC1_Init+0xec>)
 80006da:	2201      	movs	r2, #1
 80006dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b23      	ldr	r3, [pc, #140]	@ (800076c <MX_ADC1_Init+0xec>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_ADC1_Init+0xec>)
 80006e8:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_ADC1_Init+0xec>)
 80006f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_ADC1_Init+0xec>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_ADC1_Init+0xec>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_ADC1_Init+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070c:	4817      	ldr	r0, [pc, #92]	@ (800076c <MX_ADC1_Init+0xec>)
 800070e:	f001 ff1d 	bl	800254c <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000718:	f000 ffea 	bl	80016f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	@ (800076c <MX_ADC1_Init+0xec>)
 8000728:	f003 f9ea 	bl	8003b00 <HAL_ADCEx_MultiModeConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000732:	f000 ffdd 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_ADC1_Init+0xf0>)
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800073e:	2307      	movs	r3, #7
 8000740:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	@ 0x7f
 8000744:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	@ (800076c <MX_ADC1_Init+0xec>)
 8000754:	f002 fc12 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800075e:	f000 ffc7 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	@ 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001b4 	.word	0x200001b4
 8000770:	04300002 	.word	0x04300002

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09e      	sub	sp, #120	@ 0x78
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2254      	movs	r2, #84	@ 0x54
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f017 f97f 	bl	8017a98 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007a2:	d167      	bne.n	8000874 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007ae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 ff0f 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007c0:	f000 ff96 	bl	80016f0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007c4:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c8:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Vout_Poten_Pin;
 80007f4:	2301      	movs	r3, #1
 80007f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Vout_Poten_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f003 fecf 	bl	80045ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000810:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <HAL_ADC_MspInit+0x110>)
 8000812:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000816:	2205      	movs	r2, #5
 8000818:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800082e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000832:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800083c:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800083e:	2220      	movs	r2, #32
 8000840:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800084a:	f003 fb71 	bl	8003f30 <HAL_DMA_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000854:	f000 ff4c 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a09      	ldr	r2, [pc, #36]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800085c:	655a      	str	r2, [r3, #84]	@ 0x54
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2012      	movs	r0, #18
 800086a:	f003 fb2c 	bl	8003ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800086e:	2012      	movs	r0, #18
 8000870:	f003 fb43 	bl	8003efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000874:	bf00      	nop
 8000876:	3778      	adds	r7, #120	@ 0x78
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	20000220 	.word	0x20000220
 8000884:	40020030 	.word	0x40020030

08000888 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
 800088c:	2228      	movs	r2, #40	@ 0x28
 800088e:	4907      	ldr	r1, [pc, #28]	@ (80008ac <MX_FREERTOS_Init+0x24>)
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <MX_FREERTOS_Init+0x28>)
 8000892:	f002 f817 	bl	80028c4 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000896:	4a07      	ldr	r2, [pc, #28]	@ (80008b4 <MX_FREERTOS_Init+0x2c>)
 8000898:	2100      	movs	r1, #0
 800089a:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <MX_FREERTOS_Init+0x30>)
 800089c:	f007 fcd6 	bl	800824c <osThreadNew>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <MX_FREERTOS_Init+0x34>)
 80008a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002b0 	.word	0x200002b0
 80008b0:	200001b4 	.word	0x200001b4
 80008b4:	08018aa8 	.word	0x08018aa8
 80008b8:	080008c1 	.word	0x080008c1
 80008bc:	20000300 	.word	0x20000300

080008c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008c4:	b0ec      	sub	sp, #432	@ 0x1b0
 80008c6:	af02      	add	r7, sp, #8
 80008c8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80008cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008d0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 80008d2:	4b64      	ldr	r3, [pc, #400]	@ (8000a64 <StartDefaultTask+0x1a4>)
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	4b64      	ldr	r3, [pc, #400]	@ (8000a68 <StartDefaultTask+0x1a8>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4b64      	ldr	r3, [pc, #400]	@ (8000a6c <StartDefaultTask+0x1ac>)
 80008dc:	4a64      	ldr	r2, [pc, #400]	@ (8000a70 <StartDefaultTask+0x1b0>)
 80008de:	4965      	ldr	r1, [pc, #404]	@ (8000a74 <StartDefaultTask+0x1b4>)
 80008e0:	2001      	movs	r0, #1
 80008e2:	f00b fc01 	bl	800c0e8 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80008e6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00b fb18 	bl	800bf20 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80008f0:	4b61      	ldr	r3, [pc, #388]	@ (8000a78 <StartDefaultTask+0x1b8>)
 80008f2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	freeRTOS_allocator.deallocate = microros_deallocate;
 80008f6:	4b61      	ldr	r3, [pc, #388]	@ (8000a7c <StartDefaultTask+0x1bc>)
 80008f8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.reallocate = microros_reallocate;
 80008fc:	4b60      	ldr	r3, [pc, #384]	@ (8000a80 <StartDefaultTask+0x1c0>)
 80008fe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000902:	4b60      	ldr	r3, [pc, #384]	@ (8000a84 <StartDefaultTask+0x1c4>)
 8000904:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000908:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800090c:	4618      	mov	r0, r3
 800090e:	f00b fb15 	bl	800bf3c <rcutils_set_default_allocator>
 8000912:	4603      	mov	r3, r0
 8000914:	f083 0301 	eor.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800091e:	21cf      	movs	r1, #207	@ 0xcf
 8000920:	4859      	ldr	r0, [pc, #356]	@ (8000a88 <StartDefaultTask+0x1c8>)
 8000922:	f016 ffcd 	bl	80178c0 <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(8);
 8000926:	4b59      	ldr	r3, [pc, #356]	@ (8000a8c <StartDefaultTask+0x1cc>)
 8000928:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 800092c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000930:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * uint16_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16);
 800093a:	f00c fd69 	bl	800d410 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>
 800093e:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	const rosidl_message_type_support_t * bool_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool);
 8000942:	f00c fd4d 	bl	800d3e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>
 8000946:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194


	allocator = rcl_get_default_allocator();
 800094a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800094e:	4618      	mov	r0, r3
 8000950:	f00b fb12 	bl	800bf78 <rcutils_get_default_allocator>
 8000954:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000958:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800095c:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8000960:	461d      	mov	r5, r3
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 800096a:	463b      	mov	r3, r7
 800096c:	4618      	mov	r0, r3
 800096e:	f00a ff29 	bl	800b7c4 <rclc_executor_get_zero_initialized_executor>
 8000972:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000976:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 800097a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800097e:	4611      	mov	r1, r2
 8000980:	2288      	movs	r2, #136	@ 0x88
 8000982:	4618      	mov	r0, r3
 8000984:	f017 f951 	bl	8017c2a <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8000988:	f00a f9be 	bl	800ad08 <rcl_get_zero_initialized_init_options>
 800098c:	4602      	mov	r2, r0
 800098e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000992:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000996:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000998:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800099c:	466a      	mov	r2, sp
 800099e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80009a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009a6:	e882 0003 	stmia.w	r2, {r0, r1}
 80009aa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b0:	4620      	mov	r0, r4
 80009b2:	f00a f9ab 	bl	800ad0c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 80009b6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80009ba:	21c6      	movs	r1, #198	@ 0xc6
 80009bc:	4618      	mov	r0, r3
 80009be:	f00a faa1 	bl	800af04 <rcl_init_options_set_domain_id>

	// create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80009c2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80009c6:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80009ca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	4613      	mov	r3, r2
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	f00b f9c7 	bl	800bd68 <rclc_support_init_with_options>

	// create timer
	rclc_timer_init_default(&XLR8_timer, &support, timer_period, timer_callback);
 80009da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80009de:	2200      	movs	r2, #0
 80009e0:	4698      	mov	r8, r3
 80009e2:	4691      	mov	r9, r2
 80009e4:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80009e8:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 80009ec:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <StartDefaultTask+0x1d0>)
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	4642      	mov	r2, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	f00b fa5c 	bl	800beb0 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "uros_H7_Node", "", &support);
 80009f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009fc:	4a25      	ldr	r2, [pc, #148]	@ (8000a94 <StartDefaultTask+0x1d4>)
 80009fe:	4926      	ldr	r1, [pc, #152]	@ (8000a98 <StartDefaultTask+0x1d8>)
 8000a00:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <StartDefaultTask+0x1dc>)
 8000a02:	f00b f9e5 	bl	800bdd0 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&xrl8_publisher, &node, uint16_type_support, "accl_publisher");
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <StartDefaultTask+0x1e0>)
 8000a08:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000a0c:	4923      	ldr	r1, [pc, #140]	@ (8000a9c <StartDefaultTask+0x1dc>)
 8000a0e:	4825      	ldr	r0, [pc, #148]	@ (8000aa4 <StartDefaultTask+0x1e4>)
 8000a10:	f00b fa1a 	bl	800be48 <rclc_publisher_init_best_effort>
	rclc_publisher_init_best_effort(&emer_publisher, &node, bool_type_support, "H7_Emergency");
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <StartDefaultTask+0x1e8>)
 8000a16:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000a1a:	4920      	ldr	r1, [pc, #128]	@ (8000a9c <StartDefaultTask+0x1dc>)
 8000a1c:	4823      	ldr	r0, [pc, #140]	@ (8000aac <StartDefaultTask+0x1ec>)
 8000a1e:	f00b fa13 	bl	800be48 <rclc_publisher_init_best_effort>
	// create service server

	// create service client

	// create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8000a22:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000a26:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a2a:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000a2e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8000a32:	f00a fed1 	bl	800b7d8 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &XLR8_timer);
 8000a36:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 8000a3a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f00a ff39 	bl	800b8b8 <rclc_executor_add_timer>

	rclc_executor_spin(&executor);
 8000a46:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00b f94a 	bl	800bce4 <rclc_executor_spin>
	rmw_uros_sync_session(timeout_ms);
 8000a50:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8000a54:	f00c f940 	bl	800ccd8 <rmw_uros_sync_session>
//	for(;;)
//	{
//	//	osDelay(10);
//	}
  /* USER CODE END StartDefaultTask */
}
 8000a58:	bf00      	nop
 8000a5a:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a64:	08001341 	.word	0x08001341
 8000a68:	080012dd 	.word	0x080012dd
 8000a6c:	080012bd 	.word	0x080012bd
 8000a70:	08001291 	.word	0x08001291
 8000a74:	20006610 	.word	0x20006610
 8000a78:	080016fd 	.word	0x080016fd
 8000a7c:	08001741 	.word	0x08001741
 8000a80:	08001779 	.word	0x08001779
 8000a84:	080017e5 	.word	0x080017e5
 8000a88:	080189fc 	.word	0x080189fc
 8000a8c:	007a1200 	.word	0x007a1200
 8000a90:	08000ab1 	.word	0x08000ab1
 8000a94:	08018a24 	.word	0x08018a24
 8000a98:	08018a28 	.word	0x08018a28
 8000a9c:	20000280 	.word	0x20000280
 8000aa0:	08018a38 	.word	0x08018a38
 8000aa4:	20000288 	.word	0x20000288
 8000aa8:	08018a48 	.word	0x08018a48
 8000aac:	20000290 	.word	0x20000290

08000ab0 <timer_callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80bd 	beq.w	8000c3e <timer_callback+0x18e>


		if (sync_counter++ >= 254) {  // Sync session at lower frequency
 8000ac4:	4b60      	ldr	r3, [pc, #384]	@ (8000c48 <timer_callback+0x198>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	b2d1      	uxtb	r1, r2
 8000acc:	4a5e      	ldr	r2, [pc, #376]	@ (8000c48 <timer_callback+0x198>)
 8000ace:	7011      	strb	r1, [r2, #0]
 8000ad0:	2bfd      	cmp	r3, #253	@ 0xfd
 8000ad2:	d906      	bls.n	8000ae2 <timer_callback+0x32>
			rmw_uros_sync_session(1000);
 8000ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad8:	f00c f8fe 	bl	800ccd8 <rmw_uros_sync_session>
			sync_counter = 0;
 8000adc:	4b5a      	ldr	r3, [pc, #360]	@ (8000c48 <timer_callback+0x198>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
		}

		accelerator = calculate_average(adc_buffer, BUFFER_SIZE);
 8000ae2:	2128      	movs	r1, #40	@ 0x28
 8000ae4:	4859      	ldr	r0, [pc, #356]	@ (8000c4c <timer_callback+0x19c>)
 8000ae6:	f000 f923 	bl	8000d30 <calculate_average>
 8000aea:	4603      	mov	r3, r0
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af4:	4b56      	ldr	r3, [pc, #344]	@ (8000c50 <timer_callback+0x1a0>)
 8000af6:	edc3 7a00 	vstr	s15, [r3]
		xlr8_publish(accelerator);
 8000afa:	4b55      	ldr	r3, [pc, #340]	@ (8000c50 <timer_callback+0x1a0>)
 8000afc:	edd3 7a00 	vldr	s15, [r3]
 8000b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b04:	ee17 3a90 	vmov	r3, s15
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f8ca 	bl	8000ca4 <xlr8_publish>
		emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 8000b10:	2120      	movs	r1, #32
 8000b12:	4850      	ldr	r0, [pc, #320]	@ (8000c54 <timer_callback+0x1a4>)
 8000b14:	f003 fecc 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c58 <timer_callback+0x1a8>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		emergency_publish(emer);
 8000b20:	4b4d      	ldr	r3, [pc, #308]	@ (8000c58 <timer_callback+0x1a8>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f8dd 	bl	8000ce4 <emergency_publish>

		mode1 = HAL_GPIO_ReadPin(Mode1_GPIO_Port, Mode1_Pin);
 8000b2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f003 febd 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b48      	ldr	r3, [pc, #288]	@ (8000c5c <timer_callback+0x1ac>)
 8000b3c:	701a      	strb	r2, [r3, #0]
		mode2 = HAL_GPIO_ReadPin(Mode2_GPIO_Port, Mode2_Pin);
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	4844      	ldr	r0, [pc, #272]	@ (8000c54 <timer_callback+0x1a4>)
 8000b42:	f003 feb5 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b45      	ldr	r3, [pc, #276]	@ (8000c60 <timer_callback+0x1b0>)
 8000b4c:	701a      	strb	r2, [r3, #0]
		mode3 = HAL_GPIO_ReadPin(Mode3_GPIO_Port, Mode3_Pin);
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b54:	f003 feac 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b41      	ldr	r3, [pc, #260]	@ (8000c64 <timer_callback+0x1b4>)
 8000b5e:	701a      	strb	r2, [r3, #0]
		mode4 = HAL_GPIO_ReadPin(Mode4_GPIO_Port, Mode4_Pin);
 8000b60:	2140      	movs	r1, #64	@ 0x40
 8000b62:	4841      	ldr	r0, [pc, #260]	@ (8000c68 <timer_callback+0x1b8>)
 8000b64:	f003 fea4 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c6c <timer_callback+0x1bc>)
 8000b6e:	701a      	strb	r2, [r3, #0]
		forward = HAL_GPIO_ReadPin(Forward_GPIO_Port, Forward_Pin);
 8000b70:	2140      	movs	r1, #64	@ 0x40
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f003 fe9b 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c70 <timer_callback+0x1c0>)
 8000b80:	701a      	strb	r2, [r3, #0]
		backward = HAL_GPIO_ReadPin(Backward_GPIO_Port, Backward_Pin);
 8000b82:	2120      	movs	r1, #32
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b88:	f003 fe92 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b38      	ldr	r3, [pc, #224]	@ (8000c74 <timer_callback+0x1c4>)
 8000b92:	701a      	strb	r2, [r3, #0]
		l_switch = HAL_GPIO_ReadPin(L_Switch_GPIO_Port, L_Switch_Pin);
 8000b94:	2102      	movs	r1, #2
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9a:	f003 fe89 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b35      	ldr	r3, [pc, #212]	@ (8000c78 <timer_callback+0x1c8>)
 8000ba4:	701a      	strb	r2, [r3, #0]
		r_switch = HAL_GPIO_ReadPin(R_Switch_GPIO_Port, R_Switch_Pin);
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f003 fe80 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <timer_callback+0x1cc>)
 8000bb6:	701a      	strb	r2, [r3, #0]
		l_break = HAL_GPIO_ReadPin(L_Break_GPIO_Port, L_Break_Pin);
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	4826      	ldr	r0, [pc, #152]	@ (8000c54 <timer_callback+0x1a4>)
 8000bbc:	f003 fe78 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c80 <timer_callback+0x1d0>)
 8000bc6:	701a      	strb	r2, [r3, #0]
		r_break = HAL_GPIO_ReadPin(R_Break_GPIO_Port, R_Break_Pin);
 8000bc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bcc:	4821      	ldr	r0, [pc, #132]	@ (8000c54 <timer_callback+0x1a4>)
 8000bce:	f003 fe6f 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <timer_callback+0x1d4>)
 8000bd8:	701a      	strb	r2, [r3, #0]


		HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, cmd_mode1);
 8000bda:	4b2b      	ldr	r3, [pc, #172]	@ (8000c88 <timer_callback+0x1d8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be8:	f003 fe7a 	bl	80048e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Lamp_Mode2_GPIO_Port, Lamp_Mode2_Pin, cmd_mode2);
 8000bec:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <timer_callback+0x1dc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	481c      	ldr	r0, [pc, #112]	@ (8000c68 <timer_callback+0x1b8>)
 8000bf6:	f003 fe73 	bl	80048e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Lamp_Mode3_GPIO_Port, Lamp_Mode3_Pin, cmd_mode3);
 8000bfa:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <timer_callback+0x1e0>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2110      	movs	r1, #16
 8000c02:	4819      	ldr	r0, [pc, #100]	@ (8000c68 <timer_callback+0x1b8>)
 8000c04:	f003 fe6c 	bl	80048e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Lamp_Mode4_GPIO_Port, Lamp_Mode4_Pin, cmd_mode4);
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <timer_callback+0x1e4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2120      	movs	r1, #32
 8000c10:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <timer_callback+0x1b8>)
 8000c12:	f003 fe65 	bl	80048e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Lamp_Forward_GPIO_Port, Lamp_Forward_Pin, cmd_forward);
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <timer_callback+0x1e8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c20:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <timer_callback+0x1b8>)
 8000c22:	f003 fe5d 	bl	80048e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Lamp_Backward_GPIO_Port, Lamp_Backward_Pin, cmd_backward);
 8000c26:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <timer_callback+0x1ec>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c34:	f003 fe54 	bl	80048e0 <HAL_GPIO_WritePin>

		HAL_IWDG_Refresh(&hiwdg);
 8000c38:	4819      	ldr	r0, [pc, #100]	@ (8000ca0 <timer_callback+0x1f0>)
 8000c3a:	f003 fedb 	bl	80049f4 <HAL_IWDG_Refresh>
	}

}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000295 	.word	0x20000295
 8000c4c:	200002b0 	.word	0x200002b0
 8000c50:	200002a8 	.word	0x200002a8
 8000c54:	48000800 	.word	0x48000800
 8000c58:	200002ac 	.word	0x200002ac
 8000c5c:	20000296 	.word	0x20000296
 8000c60:	20000297 	.word	0x20000297
 8000c64:	20000298 	.word	0x20000298
 8000c68:	48000400 	.word	0x48000400
 8000c6c:	20000299 	.word	0x20000299
 8000c70:	2000029a 	.word	0x2000029a
 8000c74:	2000029b 	.word	0x2000029b
 8000c78:	2000029c 	.word	0x2000029c
 8000c7c:	2000029d 	.word	0x2000029d
 8000c80:	2000029e 	.word	0x2000029e
 8000c84:	2000029f 	.word	0x2000029f
 8000c88:	200002a0 	.word	0x200002a0
 8000c8c:	200002a1 	.word	0x200002a1
 8000c90:	200002a2 	.word	0x200002a2
 8000c94:	200002a3 	.word	0x200002a3
 8000c98:	200002a4 	.word	0x200002a4
 8000c9c:	200002a5 	.word	0x200002a5
 8000ca0:	200065a0 	.word	0x200065a0

08000ca4 <xlr8_publish>:

void xlr8_publish(uint16_t xlr8)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
	XRL8_msg.data = xlr8;
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <xlr8_publish+0x34>)
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	8013      	strh	r3, [r2, #0]
	rcl_ret_t ret = rcl_publish(&xrl8_publisher, &XRL8_msg, NULL);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <xlr8_publish+0x34>)
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <xlr8_publish+0x38>)
 8000cba:	f00a f9f5 	bl	800b0a8 <rcl_publish>
 8000cbe:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <xlr8_publish+0x2c>
 8000cc6:	f240 113b 	movw	r1, #315	@ 0x13b
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <xlr8_publish+0x3c>)
 8000ccc:	f016 fdf8 	bl	80178c0 <iprintf>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000028c 	.word	0x2000028c
 8000cdc:	20000288 	.word	0x20000288
 8000ce0:	08018a58 	.word	0x08018a58

08000ce4 <emergency_publish>:

void emergency_publish(GPIO_PinState emer_state)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	emer_msg.data = !emer_state;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bf0c      	ite	eq
 8000cf4:	2301      	moveq	r3, #1
 8000cf6:	2300      	movne	r3, #0
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <emergency_publish+0x40>)
 8000cfc:	701a      	strb	r2, [r3, #0]
	rcl_ret_t ret = rcl_publish(&emer_publisher, &emer_msg, NULL);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <emergency_publish+0x40>)
 8000d02:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <emergency_publish+0x44>)
 8000d04:	f00a f9d0 	bl	800b0a8 <rcl_publish>
 8000d08:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d004      	beq.n	8000d1a <emergency_publish+0x36>
 8000d10:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <emergency_publish+0x48>)
 8000d16:	f016 fdd3 	bl	80178c0 <iprintf>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000294 	.word	0x20000294
 8000d28:	20000290 	.word	0x20000290
 8000d2c:	08018a58 	.word	0x08018a58

08000d30 <calculate_average>:

uint16_t calculate_average(uint16_t *buffer, uint16_t length) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
    uint32_t sum = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	817b      	strh	r3, [r7, #10]
 8000d44:	e00b      	b.n	8000d5e <calculate_average+0x2e>
        sum += buffer[i];
 8000d46:	897b      	ldrh	r3, [r7, #10]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000d58:	897b      	ldrh	r3, [r7, #10]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	817b      	strh	r3, [r7, #10]
 8000d5e:	897a      	ldrh	r2, [r7, #10]
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3ef      	bcc.n	8000d46 <calculate_average+0x16>
    }
    return (uint16_t)(sum / length);
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	b29b      	uxth	r3, r3
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000d88:	f008 fb34 	bl	80093f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ef8 <pvPortMallocMicroROS+0x17c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d94:	f000 f986 	bl	80010a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d98:	4b58      	ldr	r3, [pc, #352]	@ (8000efc <pvPortMallocMicroROS+0x180>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f040 8090 	bne.w	8000ec6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d01e      	beq.n	8000dea <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000dac:	2208      	movs	r2, #8
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d015      	beq.n	8000dea <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f023 0307 	bic.w	r3, r3, #7
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00b      	beq.n	8000dea <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dd6:	f383 8811 	msr	BASEPRI, r3
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	f3bf 8f4f 	dsb	sy
 8000de2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	e7fd      	b.n	8000de6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d06a      	beq.n	8000ec6 <pvPortMallocMicroROS+0x14a>
 8000df0:	4b43      	ldr	r3, [pc, #268]	@ (8000f00 <pvPortMallocMicroROS+0x184>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d865      	bhi.n	8000ec6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000dfa:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <pvPortMallocMicroROS+0x188>)
 8000dfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000dfe:	4b41      	ldr	r3, [pc, #260]	@ (8000f04 <pvPortMallocMicroROS+0x188>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e04:	e004      	b.n	8000e10 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d903      	bls.n	8000e22 <pvPortMallocMicroROS+0xa6>
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f1      	bne.n	8000e06 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000e22:	4b35      	ldr	r3, [pc, #212]	@ (8000ef8 <pvPortMallocMicroROS+0x17c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d04c      	beq.n	8000ec6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2208      	movs	r2, #8
 8000e32:	4413      	add	r3, r2
 8000e34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	1ad2      	subs	r2, r2, r3
 8000e46:	2308      	movs	r3, #8
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d920      	bls.n	8000e90 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00b      	beq.n	8000e78 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e64:	f383 8811 	msr	BASEPRI, r3
 8000e68:	f3bf 8f6f 	isb	sy
 8000e6c:	f3bf 8f4f 	dsb	sy
 8000e70:	613b      	str	r3, [r7, #16]
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e8a:	69b8      	ldr	r0, [r7, #24]
 8000e8c:	f000 f96c 	bl	8001168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <pvPortMallocMicroROS+0x184>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	4a19      	ldr	r2, [pc, #100]	@ (8000f00 <pvPortMallocMicroROS+0x184>)
 8000e9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <pvPortMallocMicroROS+0x184>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <pvPortMallocMicroROS+0x18c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d203      	bcs.n	8000eb2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <pvPortMallocMicroROS+0x184>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a16      	ldr	r2, [pc, #88]	@ (8000f08 <pvPortMallocMicroROS+0x18c>)
 8000eb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <pvPortMallocMicroROS+0x180>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000ec6:	f008 faa3 	bl	8009410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ed8:	f383 8811 	msr	BASEPRI, r3
 8000edc:	f3bf 8f6f 	isb	sy
 8000ee0:	f3bf 8f4f 	dsb	sy
 8000ee4:	60fb      	str	r3, [r7, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000eec:	69fb      	ldr	r3, [r7, #28]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20005d88 	.word	0x20005d88
 8000efc:	20005d94 	.word	0x20005d94
 8000f00:	20005d8c 	.word	0x20005d8c
 8000f04:	20005d80 	.word	0x20005d80
 8000f08:	20005d90 	.word	0x20005d90

08000f0c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d04a      	beq.n	8000fb4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	425b      	negs	r3, r3
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4413      	add	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <vPortFreeMicroROS+0xb0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10b      	bne.n	8000f52 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f3e:	f383 8811 	msr	BASEPRI, r3
 8000f42:	f3bf 8f6f 	isb	sy
 8000f46:	f3bf 8f4f 	dsb	sy
 8000f4a:	60fb      	str	r3, [r7, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	e7fd      	b.n	8000f4e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f5e:	f383 8811 	msr	BASEPRI, r3
 8000f62:	f3bf 8f6f 	isb	sy
 8000f66:	f3bf 8f4f 	dsb	sy
 8000f6a:	60bb      	str	r3, [r7, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	e7fd      	b.n	8000f6e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <vPortFreeMicroROS+0xb0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d019      	beq.n	8000fb4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d115      	bne.n	8000fb4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <vPortFreeMicroROS+0xb0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f98:	f008 fa2c 	bl	80093f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <vPortFreeMicroROS+0xb4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <vPortFreeMicroROS+0xb4>)
 8000fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000faa:	6938      	ldr	r0, [r7, #16]
 8000fac:	f000 f8dc 	bl	8001168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000fb0:	f008 fa2e 	bl	8009410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20005d94 	.word	0x20005d94
 8000fc0:	20005d8c 	.word	0x20005d8c

08000fc4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <getBlockSize+0x38>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

	return count;
 8000fec:	68fb      	ldr	r3, [r7, #12]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20005d94 	.word	0x20005d94

08001000 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800100a:	f008 f9f3 	bl	80093f4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f7ff feb4 	bl	8000d7c <pvPortMallocMicroROS>
 8001014:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d017      	beq.n	800104c <pvPortReallocMicroROS+0x4c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d014      	beq.n	800104c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffce 	bl	8000fc4 <getBlockSize>
 8001028:	4603      	mov	r3, r0
 800102a:	2208      	movs	r2, #8
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d201      	bcs.n	800103c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f016 fdf2 	bl	8017c2a <memcpy>

		vPortFreeMicroROS(pv);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff60 	bl	8000f0c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800104c:	f008 f9e0 	bl	8009410 <xTaskResumeAll>

	return newmem;
 8001050:	68bb      	ldr	r3, [r7, #8]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001064:	f008 f9c6 	bl	80093f4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	fb02 f303 	mul.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff fe82 	bl	8000d7c <pvPortMallocMicroROS>
 8001078:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800107e:	e004      	b.n	800108a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	613a      	str	r2, [r7, #16]
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	617a      	str	r2, [r7, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f5      	bne.n	8001080 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001094:	f008 f9bc 	bl	8009410 <xTaskResumeAll>
  	return mem;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80010aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <prvHeapInit+0xac>)
 80010b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00c      	beq.n	80010d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3307      	adds	r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f023 0307 	bic.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001150 <prvHeapInit+0xac>)
 80010d4:	4413      	add	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001154 <prvHeapInit+0xb0>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <prvHeapInit+0xb0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80010f0:	2208      	movs	r2, #8
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f023 0307 	bic.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <prvHeapInit+0xb4>)
 8001104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <prvHeapInit+0xb4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <prvHeapInit+0xb4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <prvHeapInit+0xb4>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <prvHeapInit+0xb8>)
 8001132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <prvHeapInit+0xbc>)
 800113a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <prvHeapInit+0xc0>)
 800113e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	20005180 	.word	0x20005180
 8001154:	20005d80 	.word	0x20005d80
 8001158:	20005d88 	.word	0x20005d88
 800115c:	20005d90 	.word	0x20005d90
 8001160:	20005d8c 	.word	0x20005d8c
 8001164:	20005d94 	.word	0x20005d94

08001168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001170:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <prvInsertBlockIntoFreeList+0xac>)
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e002      	b.n	800117c <prvInsertBlockIntoFreeList+0x14>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d8f7      	bhi.n	8001176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	429a      	cmp	r2, r3
 8001196:	d108      	bne.n	80011aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	441a      	add	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	441a      	add	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d118      	bne.n	80011f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <prvInsertBlockIntoFreeList+0xb0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d00d      	beq.n	80011e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	441a      	add	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e008      	b.n	80011f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <prvInsertBlockIntoFreeList+0xb0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e003      	b.n	80011f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d002      	beq.n	8001206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20005d80 	.word	0x20005d80
 8001218:	20005d88 	.word	0x20005d88

0800121c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <MX_DMA_Init+0x70>)
 8001224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001226:	4a19      	ldr	r2, [pc, #100]	@ (800128c <MX_DMA_Init+0x70>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6493      	str	r3, [r2, #72]	@ 0x48
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <MX_DMA_Init+0x70>)
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <MX_DMA_Init+0x70>)
 800123c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123e:	4a13      	ldr	r2, [pc, #76]	@ (800128c <MX_DMA_Init+0x70>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6493      	str	r3, [r2, #72]	@ 0x48
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_DMA_Init+0x70>)
 8001248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	200b      	movs	r0, #11
 8001258:	f002 fe35 	bl	8003ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800125c:	200b      	movs	r0, #11
 800125e:	f002 fe4c 	bl	8003efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	200c      	movs	r0, #12
 8001268:	f002 fe2d 	bl	8003ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800126c:	200c      	movs	r0, #12
 800126e:	f002 fe44 	bl	8003efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	200d      	movs	r0, #13
 8001278:	f002 fe25 	bl	8003ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800127c:	200d      	movs	r0, #13
 800127e:	f002 fe3c 	bl	8003efa <HAL_NVIC_EnableIRQ>

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800129e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80012a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012a4:	4904      	ldr	r1, [pc, #16]	@ (80012b8 <cubemx_transport_open+0x28>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f005 fa3e 	bl	8006728 <HAL_UART_Receive_DMA>
    return true;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20005d98 	.word	0x20005d98

080012bc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80012ca:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f005 fa77 	bl	80067c0 <HAL_UART_DMAStop>
    return true;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80012f0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d11b      	bne.n	8001334 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f005 f98f 	bl	8006628 <HAL_UART_Transmit_DMA>
 800130a:	4603      	mov	r3, r0
 800130c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800130e:	e002      	b.n	8001316 <cubemx_transport_write+0x3a>
            osDelay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f007 f82d 	bl	8008370 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001316:	7cfb      	ldrb	r3, [r7, #19]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d104      	bne.n	8001326 <cubemx_transport_write+0x4a>
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	2b20      	cmp	r3, #32
 8001324:	d1f4      	bne.n	8001310 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001326:	7cfb      	ldrb	r3, [r7, #19]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <cubemx_transport_write+0x54>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	e002      	b.n	8001336 <cubemx_transport_write+0x5a>
 8001330:	2300      	movs	r3, #0
 8001332:	e000      	b.n	8001336 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001334:	2300      	movs	r3, #0
    }
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001354:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135a:	b672      	cpsid	i
}
 800135c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800136c:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <cubemx_transport_read+0x9c>)
 800136e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001370:	b662      	cpsie	i
}
 8001372:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800137a:	2001      	movs	r0, #1
 800137c:	f006 fff8 	bl	8008370 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <cubemx_transport_read+0xa0>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <cubemx_transport_read+0x9c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d103      	bne.n	8001394 <cubemx_transport_read+0x54>
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbe2      	blt.n	800135a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001398:	e011      	b.n	80013be <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <cubemx_transport_read+0xa0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	440b      	add	r3, r1
 80013a4:	490f      	ldr	r1, [pc, #60]	@ (80013e4 <cubemx_transport_read+0xa4>)
 80013a6:	5c8a      	ldrb	r2, [r1, r2]
 80013a8:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <cubemx_transport_read+0xa0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b4:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <cubemx_transport_read+0xa0>)
 80013b6:	6013      	str	r3, [r2, #0]
        wrote++;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	3301      	adds	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <cubemx_transport_read+0xa0>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <cubemx_transport_read+0x9c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d003      	beq.n	80013d2 <cubemx_transport_read+0x92>
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3e3      	bcc.n	800139a <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80013d2:	69bb      	ldr	r3, [r7, #24]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000659c 	.word	0x2000659c
 80013e0:	20006598 	.word	0x20006598
 80013e4:	20005d98 	.word	0x20005d98

080013e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b67      	ldr	r3, [pc, #412]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a66      	ldr	r2, [pc, #408]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b64      	ldr	r3, [pc, #400]	@ (800159c <MX_GPIO_Init+0x1b4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001416:	4b61      	ldr	r3, [pc, #388]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a60      	ldr	r2, [pc, #384]	@ (800159c <MX_GPIO_Init+0x1b4>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b5e      	ldr	r3, [pc, #376]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b5b      	ldr	r3, [pc, #364]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a5a      	ldr	r2, [pc, #360]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b58      	ldr	r3, [pc, #352]	@ (800159c <MX_GPIO_Init+0x1b4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b55      	ldr	r3, [pc, #340]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a54      	ldr	r2, [pc, #336]	@ (800159c <MX_GPIO_Init+0x1b4>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b52      	ldr	r3, [pc, #328]	@ (800159c <MX_GPIO_Init+0x1b4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp_Forward_Pin|Lamp_Mode3_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001464:	484e      	ldr	r0, [pc, #312]	@ (80015a0 <MX_GPIO_Init+0x1b8>)
 8001466:	f003 fa3b 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Backward_GPIO_Port, Lamp_Backward_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001474:	f003 fa34 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f003 fa2d 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp_Mode2_Pin|Lamp_Mode4_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2128      	movs	r1, #40	@ 0x28
 800148a:	4845      	ldr	r0, [pc, #276]	@ (80015a0 <MX_GPIO_Init+0x1b8>)
 800148c:	f003 fa28 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	483f      	ldr	r0, [pc, #252]	@ (80015a4 <MX_GPIO_Init+0x1bc>)
 80014a8:	f003 f880 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L_Switch_Pin|R_Switch_Pin;
 80014ac:	2312      	movs	r3, #18
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f003 f873 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Backward_Pin|Forward_Pin|Mode3_Pin|Mode1_Pin;
 80014c6:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f003 f865 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80014e2:	2320      	movs	r3, #32
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	482b      	ldr	r0, [pc, #172]	@ (80015a4 <MX_GPIO_Init+0x1bc>)
 80014f6:	f003 f859 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Lamp_Forward_Pin|Lamp_Mode2_Pin|Lamp_Mode3_Pin|Lamp_Mode4_Pin;
 80014fa:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001504:	2302      	movs	r3, #2
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <MX_GPIO_Init+0x1b8>)
 8001514:	f003 f84a 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = L_Break_Pin|R_Break_Pin;
 8001518:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001522:	2301      	movs	r3, #1
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	481d      	ldr	r0, [pc, #116]	@ (80015a4 <MX_GPIO_Init+0x1bc>)
 800152e:	f003 f83d 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mode2_Pin;
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800153a:	2302      	movs	r3, #2
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode2_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <MX_GPIO_Init+0x1bc>)
 8001546:	f003 f831 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Lamp_Backward_Pin|Lamp_Mode1_Pin;
 800154a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001566:	f003 f821 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mode4_Pin;
 800156a:	2340      	movs	r3, #64	@ 0x40
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001572:	2302      	movs	r3, #2
 8001574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode4_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <MX_GPIO_Init+0x1b8>)
 800157e:	f003 f815 	bl	80045ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	2028      	movs	r0, #40	@ 0x28
 8001588:	f002 fc9d 	bl	8003ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800158c:	2028      	movs	r0, #40	@ 0x28
 800158e:	f002 fcb4 	bl	8003efa <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000400 	.word	0x48000400
 80015a4:	48000800 	.word	0x48000800

080015a8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_IWDG_Init+0x34>)
 80015ae:	4a0c      	ldr	r2, [pc, #48]	@ (80015e0 <MX_IWDG_Init+0x38>)
 80015b0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_IWDG_Init+0x34>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_IWDG_Init+0x34>)
 80015ba:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80015be:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_IWDG_Init+0x34>)
 80015c2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80015c6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_IWDG_Init+0x34>)
 80015ca:	f003 f9c4 	bl	8004956 <HAL_IWDG_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80015d4:	f000 f88c 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200065a0 	.word	0x200065a0
 80015e0:	40003000 	.word	0x40003000

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fcff 	bl	8001fea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f81a 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f7ff fefa 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f4:	f7ff fe12 	bl	800121c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80015f8:	f000 fbc6 	bl	8001d88 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80015fc:	f7ff f840 	bl	8000680 <MX_ADC1_Init>
  MX_IWDG_Init();
 8001600:	f7ff ffd2 	bl	80015a8 <MX_IWDG_Init>
  MX_TIM2_Init();
 8001604:	f000 fb4e 	bl	8001ca4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <main+0x3c>)
 800160a:	f004 fa8b 	bl	8005b24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800160e:	f006 fdd3 	bl	80081b8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001612:	f7ff f939 	bl	8000888 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001616:	f006 fdf3 	bl	8008200 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800161a:	bf00      	nop
 800161c:	e7fd      	b.n	800161a <main+0x36>
 800161e:	bf00      	nop
 8001620:	200065c4 	.word	0x200065c4

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	@ 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2238      	movs	r2, #56	@ 0x38
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f016 fa30 	bl	8017a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001646:	2000      	movs	r0, #0
 8001648:	f003 f9e4 	bl	8004a14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800164c:	230a      	movs	r3, #10
 800164e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001656:	2340      	movs	r3, #64	@ 0x40
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800165a:	2301      	movs	r3, #1
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165e:	2302      	movs	r3, #2
 8001660:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001662:	2302      	movs	r3, #2
 8001664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001666:	2304      	movs	r3, #4
 8001668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800166a:	2355      	movs	r3, #85	@ 0x55
 800166c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800166e:	2302      	movs	r3, #2
 8001670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001672:	2302      	movs	r3, #2
 8001674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001676:	2302      	movs	r3, #2
 8001678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fa7c 	bl	8004b7c <HAL_RCC_OscConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800168a:	f000 f831 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	230f      	movs	r3, #15
 8001690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001692:	2303      	movs	r3, #3
 8001694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2104      	movs	r1, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fd7a 	bl	80051a0 <HAL_RCC_ClockConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016b2:	f000 f81d 	bl	80016f0 <Error_Handler>
  }
}
 80016b6:	bf00      	nop
 80016b8:	3750      	adds	r7, #80	@ 0x50
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d105      	bne.n	80016dc <HAL_TIM_PeriodElapsedCallback+0x1c>
		test +=1;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016da:	701a      	strb	r2, [r3, #0]
//		pinState  = HAL_GPIO_ReadPin(Mode1_GPIO_Port, Mode1_Pin);
//		pinState1 = HAL_GPIO_ReadPin(Mode2_GPIO_Port, Mode2_Pin);
//		pinState2 = HAL_GPIO_ReadPin(Mode3_GPIO_Port, Mode3_Pin);
//		pinState3 = HAL_GPIO_ReadPin(Mode4_GPIO_Port, Mode4_Pin);
	}
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	200065c4 	.word	0x200065c4
 80016ec:	200065b0 	.word	0x200065b0

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <Error_Handler+0x8>

080016fc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <microros_allocate+0x3c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <microros_allocate+0x3c>)
 8001714:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <microros_allocate+0x40>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <microros_allocate+0x40>)
 8001724:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fb28 	bl	8000d7c <pvPortMallocMicroROS>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200065b4 	.word	0x200065b4
 800173c:	200065b8 	.word	0x200065b8

08001740 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fc37 	bl	8000fc4 <getBlockSize>
 8001756:	4603      	mov	r3, r0
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <microros_deallocate+0x34>)
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	461a      	mov	r2, r3
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <microros_deallocate+0x34>)
 8001762:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fbd1 	bl	8000f0c <vPortFreeMicroROS>
  }
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200065b8 	.word	0x200065b8

08001778 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <microros_reallocate+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	4413      	add	r3, r2
 800178e:	461a      	mov	r2, r3
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <microros_reallocate+0x64>)
 8001792:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <microros_reallocate+0x68>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	4413      	add	r3, r2
 800179e:	461a      	mov	r2, r3
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <microros_reallocate+0x68>)
 80017a2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d104      	bne.n	80017b4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80017aa:	68b8      	ldr	r0, [r7, #8]
 80017ac:	f7ff fae6 	bl	8000d7c <pvPortMallocMicroROS>
 80017b0:	4603      	mov	r3, r0
 80017b2:	e00e      	b.n	80017d2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7ff fc05 	bl	8000fc4 <getBlockSize>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <microros_reallocate+0x68>)
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <microros_reallocate+0x68>)
 80017c6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fc18 	bl	8001000 <pvPortReallocMicroROS>
 80017d0:	4603      	mov	r3, r0
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200065b4 	.word	0x200065b4
 80017e0:	200065b8 	.word	0x200065b8

080017e4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <microros_zero_allocate+0x48>)
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	461a      	mov	r2, r3
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <microros_zero_allocate+0x48>)
 8001802:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <microros_zero_allocate+0x4c>)
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	4413      	add	r3, r2
 8001812:	461a      	mov	r2, r3
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <microros_zero_allocate+0x4c>)
 8001816:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff fc1d 	bl	800105a <pvPortCallocMicroROS>
 8001820:	4603      	mov	r3, r0
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200065b4 	.word	0x200065b4
 8001830:	200065b8 	.word	0x200065b8
 8001834:	00000000 	.word	0x00000000

08001838 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800184a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800184e:	a320      	add	r3, pc, #128	@ (adr r3, 80018d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fd4c 	bl	80002f0 <__aeabi_ldivmod>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001866:	a31a      	add	r3, pc, #104	@ (adr r3, 80018d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fd40 	bl	80002f0 <__aeabi_ldivmod>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	da20      	bge.n	80018be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a11      	ldr	r2, [pc, #68]	@ (80018c8 <UTILS_NanosecondsToTimespec+0x90>)
 8001882:	fb82 1203 	smull	r1, r2, r2, r3
 8001886:	1712      	asrs	r2, r2, #28
 8001888:	17db      	asrs	r3, r3, #31
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	6979      	ldr	r1, [r7, #20]
 8001898:	17c8      	asrs	r0, r1, #31
 800189a:	460c      	mov	r4, r1
 800189c:	4605      	mov	r5, r0
 800189e:	ebb2 0804 	subs.w	r8, r2, r4
 80018a2:	eb63 0905 	sbc.w	r9, r3, r5
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	4906      	ldr	r1, [pc, #24]	@ (80018cc <UTILS_NanosecondsToTimespec+0x94>)
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	441a      	add	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
    }
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018c8:	44b82fa1 	.word	0x44b82fa1
 80018cc:	3b9aca00 	.word	0x3b9aca00
 80018d0:	3b9aca00 	.word	0x3b9aca00
 80018d4:	00000000 	.word	0x00000000

080018d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80018d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018dc:	b08e      	sub	sp, #56	@ 0x38
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80018e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80018e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80018e8:	2300      	movs	r3, #0
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80018fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018fe:	4618      	mov	r0, r3
 8001900:	f008 f802 	bl	8009908 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001906:	17da      	asrs	r2, r3, #31
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	61fa      	str	r2, [r7, #28]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	69b9      	ldr	r1, [r7, #24]
 8001916:	000b      	movs	r3, r1
 8001918:	2200      	movs	r2, #0
 800191a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800191e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001920:	2200      	movs	r2, #0
 8001922:	461c      	mov	r4, r3
 8001924:	4615      	mov	r5, r2
 8001926:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800192a:	1911      	adds	r1, r2, r4
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	416b      	adcs	r3, r5
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001936:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800193a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	f04f 0500 	mov.w	r5, #0
 800194a:	015d      	lsls	r5, r3, #5
 800194c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001950:	0154      	lsls	r4, r2, #5
 8001952:	4622      	mov	r2, r4
 8001954:	462b      	mov	r3, r5
 8001956:	ebb2 0800 	subs.w	r8, r2, r0
 800195a:	eb63 0901 	sbc.w	r9, r3, r1
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800196a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800196e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001972:	4690      	mov	r8, r2
 8001974:	4699      	mov	r9, r3
 8001976:	eb18 0a00 	adds.w	sl, r8, r0
 800197a:	eb49 0b01 	adc.w	fp, r9, r1
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800198a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800198e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001992:	ebb2 040a 	subs.w	r4, r2, sl
 8001996:	603c      	str	r4, [r7, #0]
 8001998:	eb63 030b 	sbc.w	r3, r3, fp
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019a2:	4623      	mov	r3, r4
 80019a4:	181b      	adds	r3, r3, r0
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	462b      	mov	r3, r5
 80019aa:	eb41 0303 	adc.w	r3, r1, r3
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	6a3a      	ldr	r2, [r7, #32]
 80019b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b6:	f7ff ff3f 	bl	8001838 <UTILS_NanosecondsToTimespec>

    return 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	3738      	adds	r7, #56	@ 0x38
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_MspInit+0x50>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	4a11      	ldr	r2, [pc, #68]	@ (8001a18 <HAL_MspInit+0x50>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019da:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_MspInit+0x50>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_MspInit+0x50>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_MspInit+0x50>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_MspInit+0x50>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	210f      	movs	r1, #15
 8001a02:	f06f 0001 	mvn.w	r0, #1
 8001a06:	f002 fa5e 	bl	8003ec6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a0a:	f003 f8a7 	bl	8004b5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <NMI_Handler+0x4>

08001a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <MemManage_Handler+0x4>

08001a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a56:	f000 fb1b 	bl	8002090 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a5a:	f008 f8d9 	bl	8009c10 <xTaskGetSchedulerState>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d001      	beq.n	8001a68 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a64:	f008 fed0 	bl	800a808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <DMA1_Channel1_IRQHandler+0x10>)
 8001a72:	f002 fc40 	bl	80042f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200066a4 	.word	0x200066a4

08001a80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <DMA1_Channel2_IRQHandler+0x10>)
 8001a86:	f002 fc36 	bl	80042f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20006704 	.word	0x20006704

08001a94 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <DMA1_Channel3_IRQHandler+0x10>)
 8001a9a:	f002 fc2c 	bl	80042f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000220 	.word	0x20000220

08001aa8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <ADC1_2_IRQHandler+0x10>)
 8001aae:	f000 ffdd 	bl	8002a6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200001b4 	.word	0x200001b4

08001abc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <TIM2_IRQHandler+0x10>)
 8001ac2:	f004 f8a7 	bl	8005c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200065c4 	.word	0x200065c4

08001ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ad4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ad8:	f002 ff1a 	bl	8004910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <LPUART1_IRQHandler+0x10>)
 8001ae6:	f004 ff01 	bl	80068ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20006610 	.word	0x20006610

08001af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_kill>:

int _kill(int pid, int sig)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0e:	f016 f857 	bl	8017bc0 <__errno>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2216      	movs	r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
  return -1;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_exit>:

void _exit (int status)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffe7 	bl	8001b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b36:	bf00      	nop
 8001b38:	e7fd      	b.n	8001b36 <_exit+0x12>

08001b3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e00a      	b.n	8001b62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b4c:	f3af 8000 	nop.w
 8001b50:	4601      	mov	r1, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	b2ca      	uxtb	r2, r1
 8001b5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dbf0      	blt.n	8001b4c <_read+0x12>
  }

  return len;
 8001b6a:	687b      	ldr	r3, [r7, #4]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e009      	b.n	8001b9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	60ba      	str	r2, [r7, #8]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbf1      	blt.n	8001b86 <_write+0x12>
  }
  return len;
 8001ba2:	687b      	ldr	r3, [r7, #4]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_close>:

int _close(int file)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_isatty>:

int _isatty(int file)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f015 ffbc 	bl	8017bc0 <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20020000 	.word	0x20020000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	200065c0 	.word	0x200065c0
 8001c7c:	2000cd10 	.word	0x2000cd10

08001c80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <SystemInit+0x20>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <SystemInit+0x20>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001ccc:	22a9      	movs	r2, #169	@ 0xa9
 8001cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001cd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cea:	4814      	ldr	r0, [pc, #80]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001cec:	f003 fec2 	bl	8005a74 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cf6:	f7ff fcfb 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001d08:	f004 f8d4 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d12:	f7ff fced 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d16:	2320      	movs	r3, #32
 8001d18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	@ (8001d3c <MX_TIM2_Init+0x98>)
 8001d24:	f004 fb54 	bl	80063d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d2e:	f7ff fcdf 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200065c4 	.word	0x200065c4

08001d40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d50:	d113      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <HAL_TIM_Base_MspInit+0x44>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <HAL_TIM_Base_MspInit+0x44>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <HAL_TIM_Base_MspInit+0x44>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	201c      	movs	r0, #28
 8001d70:	f002 f8a9 	bl	8003ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d74:	201c      	movs	r0, #28
 8001d76:	f002 f8c0 	bl	8003efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000

08001d88 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001d8e:	4a22      	ldr	r2, [pc, #136]	@ (8001e18 <MX_LPUART1_UART_Init+0x90>)
 8001d90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001d94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001dca:	4812      	ldr	r0, [pc, #72]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001dcc:	f004 fbdc 	bl	8006588 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dd6:	f7ff fc8b 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	480d      	ldr	r0, [pc, #52]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001dde:	f006 f8ec 	bl	8007fba <HAL_UARTEx_SetTxFifoThreshold>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001de8:	f7ff fc82 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dec:	2100      	movs	r1, #0
 8001dee:	4809      	ldr	r0, [pc, #36]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001df0:	f006 f921 	bl	8008036 <HAL_UARTEx_SetRxFifoThreshold>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001dfa:	f7ff fc79 	bl	80016f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_LPUART1_UART_Init+0x8c>)
 8001e00:	f006 f8a2 	bl	8007f48 <HAL_UARTEx_DisableFifoMode>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001e0a:	f7ff fc71 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20006610 	.word	0x20006610
 8001e18:	40008000 	.word	0x40008000

08001e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09e      	sub	sp, #120	@ 0x78
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2254      	movs	r2, #84	@ 0x54
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f015 fe2b 	bl	8017a98 <memset>
  if(uartHandle->Instance==LPUART1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4e      	ldr	r2, [pc, #312]	@ (8001f80 <HAL_UART_MspInit+0x164>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f040 8094 	bne.w	8001f76 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fbbc 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e66:	f7ff fc43 	bl	80016f0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <HAL_UART_MspInit+0x168>)
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6e:	4a45      	ldr	r2, [pc, #276]	@ (8001f84 <HAL_UART_MspInit+0x168>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001e76:	4b43      	ldr	r3, [pc, #268]	@ (8001f84 <HAL_UART_MspInit+0x168>)
 8001e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b40      	ldr	r3, [pc, #256]	@ (8001f84 <HAL_UART_MspInit+0x168>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	4a3f      	ldr	r2, [pc, #252]	@ (8001f84 <HAL_UART_MspInit+0x168>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f84 <HAL_UART_MspInit+0x168>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001eaa:	230c      	movs	r3, #12
 8001eac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb8:	f002 fb78 	bl	80045ac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001ebc:	4b32      	ldr	r3, [pc, #200]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ebe:	4a33      	ldr	r2, [pc, #204]	@ (8001f8c <HAL_UART_MspInit+0x170>)
 8001ec0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001ec2:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ec4:	2223      	movs	r2, #35	@ 0x23
 8001ec6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001eca:	2210      	movs	r2, #16
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ece:	4b2e      	ldr	r3, [pc, #184]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eda:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee0:	4b29      	ldr	r3, [pc, #164]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001ee6:	4b28      	ldr	r3, [pc, #160]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eec:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001eee:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001ef2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001ef4:	4824      	ldr	r0, [pc, #144]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ef6:	f002 f81b 	bl	8003f30 <HAL_DMA_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001f00:	f7ff fbf6 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a20      	ldr	r2, [pc, #128]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001f08:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f12:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <HAL_UART_MspInit+0x178>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f18:	2222      	movs	r2, #34	@ 0x22
 8001f1a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f34:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f42:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001f46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001f48:	4811      	ldr	r0, [pc, #68]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f4a:	f001 fff1 	bl	8003f30 <HAL_DMA_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001f54:	f7ff fbcc 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001f60:	4a0b      	ldr	r2, [pc, #44]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	205b      	movs	r0, #91	@ 0x5b
 8001f6c:	f001 ffab 	bl	8003ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001f70:	205b      	movs	r0, #91	@ 0x5b
 8001f72:	f001 ffc2 	bl	8003efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001f76:	bf00      	nop
 8001f78:	3778      	adds	r7, #120	@ 0x78
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40008000 	.word	0x40008000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	200066a4 	.word	0x200066a4
 8001f8c:	40020008 	.word	0x40020008
 8001f90:	20006704 	.word	0x20006704
 8001f94:	4002001c 	.word	0x4002001c

08001f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f98:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f9c:	f7ff fe70 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480c      	ldr	r0, [pc, #48]	@ (8001fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa2:	490d      	ldr	r1, [pc, #52]	@ (8001fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <LoopForever+0xe>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe4 <LoopForever+0x16>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f015 fe01 	bl	8017bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fca:	f7ff fb0b 	bl	80015e4 <main>

08001fce <LoopForever>:

LoopForever:
    b LoopForever
 8001fce:	e7fe      	b.n	8001fce <LoopForever>
  ldr   r0, =_estack
 8001fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8001fdc:	08019898 	.word	0x08019898
  ldr r2, =_sbss
 8001fe0:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001fe4:	2000cd10 	.word	0x2000cd10

08001fe8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC3_IRQHandler>

08001fea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f001 ff5b 	bl	8003eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f000 f80e 	bl	800201c <HAL_InitTick>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	e001      	b.n	8002010 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800200c:	f7ff fcdc 	bl	80019c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002010:	79fb      	ldrb	r3, [r7, #7]

}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002028:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <HAL_InitTick+0x68>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d022      	beq.n	8002076 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002030:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_InitTick+0x6c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <HAL_InitTick+0x68>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800203c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	4618      	mov	r0, r3
 8002046:	f001 ff66 	bl	8003f16 <HAL_SYSTICK_Config>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10f      	bne.n	8002070 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	d809      	bhi.n	800206a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002056:	2200      	movs	r2, #0
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800205e:	f001 ff32 	bl	8003ec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <HAL_InitTick+0x70>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e007      	b.n	800207a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e004      	b.n	800207a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e001      	b.n	800207a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000000c 	.word	0x2000000c
 8002088:	20000004 	.word	0x20000004
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <HAL_IncTick+0x1c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_IncTick+0x20>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4413      	add	r3, r2
 800209e:	4a03      	ldr	r2, [pc, #12]	@ (80020ac <HAL_IncTick+0x1c>)
 80020a0:	6013      	str	r3, [r2, #0]
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	20006764 	.word	0x20006764
 80020b0:	2000000c 	.word	0x2000000c

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20006764 	.word	0x20006764

080020cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3360      	adds	r3, #96	@ 0x60
 8002146:	461a      	mov	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <LL_ADC_SetOffset+0x44>)
 8002156:	4013      	ands	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	4313      	orrs	r3, r2
 8002164:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	03fff000 	.word	0x03fff000

0800217c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3360      	adds	r3, #96	@ 0x60
 800218a:	461a      	mov	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3360      	adds	r3, #96	@ 0x60
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021de:	b480      	push	{r7}
 80021e0:	b087      	sub	sp, #28
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3360      	adds	r3, #96	@ 0x60
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	431a      	orrs	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3360      	adds	r3, #96	@ 0x60
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	615a      	str	r2, [r3, #20]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002296:	b480      	push	{r7}
 8002298:	b087      	sub	sp, #28
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3330      	adds	r3, #48	@ 0x30
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	4413      	add	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	211f      	movs	r1, #31
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	401a      	ands	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	f003 011f 	and.w	r1, r3, #31
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	431a      	orrs	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3314      	adds	r3, #20
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	0e5b      	lsrs	r3, r3, #25
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	0d1b      	lsrs	r3, r3, #20
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2107      	movs	r1, #7
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	401a      	ands	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	0d1b      	lsrs	r3, r3, #20
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	431a      	orrs	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002384:	43db      	mvns	r3, r3
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0318 	and.w	r3, r3, #24
 800238e:	4908      	ldr	r1, [pc, #32]	@ (80023b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002390:	40d9      	lsrs	r1, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	400b      	ands	r3, r1
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	0007ffff 	.word	0x0007ffff

080023b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 031f 	and.w	r3, r3, #31
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6093      	str	r3, [r2, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002424:	d101      	bne.n	800242a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800244c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002474:	d101      	bne.n	800247a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002498:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <LL_ADC_IsEnabled+0x18>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <LL_ADC_IsEnabled+0x1a>
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024ea:	f043 0204 	orr.w	r2, r3, #4
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b04      	cmp	r3, #4
 8002510:	d101      	bne.n	8002516 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b08      	cmp	r3, #8
 8002536:	d101      	bne.n	800253c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1a9      	b.n	80028ba <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe f8fd 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff3f 	bl	8002410 <LL_ADC_IsDeepPowerDownEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff25 	bl	80023ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff5a 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d115      	bne.n	80025de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff3e 	bl	8002438 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002830 <HAL_ADC_Init+0x2e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	4a9c      	ldr	r2, [pc, #624]	@ (8002834 <HAL_ADC_Init+0x2e8>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	3301      	adds	r3, #1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f9      	bne.n	80025d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff3c 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff75 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 8002614:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8142 	bne.w	80028a8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 813e 	bne.w	80028a8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002634:	f043 0202 	orr.w	r2, r3, #2
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff35 	bl	80024b0 <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d141      	bne.n	80026d0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002654:	d004      	beq.n	8002660 <HAL_ADC_Init+0x114>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a77      	ldr	r2, [pc, #476]	@ (8002838 <HAL_ADC_Init+0x2ec>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10f      	bne.n	8002680 <HAL_ADC_Init+0x134>
 8002660:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002664:	f7ff ff24 	bl	80024b0 <LL_ADC_IsEnabled>
 8002668:	4604      	mov	r4, r0
 800266a:	4873      	ldr	r0, [pc, #460]	@ (8002838 <HAL_ADC_Init+0x2ec>)
 800266c:	f7ff ff20 	bl	80024b0 <LL_ADC_IsEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	4323      	orrs	r3, r4
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e012      	b.n	80026a6 <HAL_ADC_Init+0x15a>
 8002680:	486e      	ldr	r0, [pc, #440]	@ (800283c <HAL_ADC_Init+0x2f0>)
 8002682:	f7ff ff15 	bl	80024b0 <LL_ADC_IsEnabled>
 8002686:	4604      	mov	r4, r0
 8002688:	486d      	ldr	r0, [pc, #436]	@ (8002840 <HAL_ADC_Init+0x2f4>)
 800268a:	f7ff ff11 	bl	80024b0 <LL_ADC_IsEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	431c      	orrs	r4, r3
 8002692:	486c      	ldr	r0, [pc, #432]	@ (8002844 <HAL_ADC_Init+0x2f8>)
 8002694:	f7ff ff0c 	bl	80024b0 <LL_ADC_IsEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	4323      	orrs	r3, r4
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026b2:	d004      	beq.n	80026be <HAL_ADC_Init+0x172>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a5f      	ldr	r2, [pc, #380]	@ (8002838 <HAL_ADC_Init+0x2ec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Init+0x176>
 80026be:	4a62      	ldr	r2, [pc, #392]	@ (8002848 <HAL_ADC_Init+0x2fc>)
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_Init+0x178>
 80026c2:	4a62      	ldr	r2, [pc, #392]	@ (800284c <HAL_ADC_Init+0x300>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f7ff fcfe 	bl	80020cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7f5b      	ldrb	r3, [r3, #29]
 80026d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d106      	bne.n	800270c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	045b      	lsls	r3, r3, #17
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	4b48      	ldr	r3, [pc, #288]	@ (8002850 <HAL_ADC_Init+0x304>)
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	430b      	orrs	r3, r1
 800273a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fee4 	bl	8002524 <LL_ADC_INJ_IsConversionOngoing>
 800275c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d17f      	bne.n	8002864 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d17c      	bne.n	8002864 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800276e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002776:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002786:	f023 0302 	bic.w	r3, r3, #2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	430b      	orrs	r3, r1
 8002792:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80027aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6911      	ldr	r1, [r2, #16]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80027ca:	e013      	b.n	80027f4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027f0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d12a      	bne.n	8002854 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800281a:	4311      	orrs	r1, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002820:	430a      	orrs	r2, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	611a      	str	r2, [r3, #16]
 800282e:	e019      	b.n	8002864 <HAL_ADC_Init+0x318>
 8002830:	20000004 	.word	0x20000004
 8002834:	053e2d63 	.word	0x053e2d63
 8002838:	50000100 	.word	0x50000100
 800283c:	50000400 	.word	0x50000400
 8002840:	50000500 	.word	0x50000500
 8002844:	50000600 	.word	0x50000600
 8002848:	50000300 	.word	0x50000300
 800284c:	50000700 	.word	0x50000700
 8002850:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d10c      	bne.n	8002886 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f023 010f 	bic.w	r1, r3, #15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
 8002884:	e007      	b.n	8002896 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020f 	bic.w	r2, r2, #15
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028a6:	e007      	b.n	80028b8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ac:	f043 0210 	orr.w	r2, r3, #16
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	@ 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	bf00      	nop

080028c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d8:	d004      	beq.n	80028e4 <HAL_ADC_Start_DMA+0x20>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5a      	ldr	r2, [pc, #360]	@ (8002a48 <HAL_ADC_Start_DMA+0x184>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_Start_DMA+0x24>
 80028e4:	4b59      	ldr	r3, [pc, #356]	@ (8002a4c <HAL_ADC_Start_DMA+0x188>)
 80028e6:	e000      	b.n	80028ea <HAL_ADC_Start_DMA+0x26>
 80028e8:	4b59      	ldr	r3, [pc, #356]	@ (8002a50 <HAL_ADC_Start_DMA+0x18c>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fd62 	bl	80023b4 <LL_ADC_GetMultimode>
 80028f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fe01 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 809b 	bne.w	8002a3a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_Start_DMA+0x4e>
 800290e:	2302      	movs	r3, #2
 8002910:	e096      	b.n	8002a40 <HAL_ADC_Start_DMA+0x17c>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4d      	ldr	r2, [pc, #308]	@ (8002a54 <HAL_ADC_Start_DMA+0x190>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d008      	beq.n	8002936 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d002      	beq.n	8002936 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b09      	cmp	r3, #9
 8002934:	d17a      	bne.n	8002a2c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 ff60 	bl	80037fc <ADC_Enable>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d16d      	bne.n	8002a22 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a48 <HAL_ADC_Start_DMA+0x184>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_ADC_Start_DMA+0xb4>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a3b      	ldr	r2, [pc, #236]	@ (8002a58 <HAL_ADC_Start_DMA+0x194>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d002      	beq.n	8002974 <HAL_ADC_Start_DMA+0xb0>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e003      	b.n	800297c <HAL_ADC_Start_DMA+0xb8>
 8002974:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <HAL_ADC_Start_DMA+0x198>)
 8002976:	e001      	b.n	800297c <HAL_ADC_Start_DMA+0xb8>
 8002978:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4293      	cmp	r3, r2
 8002982:	d002      	beq.n	800298a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	f023 0206 	bic.w	r2, r3, #6
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80029ae:	e002      	b.n	80029b6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	4a29      	ldr	r2, [pc, #164]	@ (8002a60 <HAL_ADC_Start_DMA+0x19c>)
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	4a28      	ldr	r2, [pc, #160]	@ (8002a64 <HAL_ADC_Start_DMA+0x1a0>)
 80029c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <HAL_ADC_Start_DMA+0x1a4>)
 80029cc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	221c      	movs	r2, #28
 80029d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0210 	orr.w	r2, r2, #16
 80029ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3340      	adds	r3, #64	@ 0x40
 8002a08:	4619      	mov	r1, r3
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f001 fb37 	bl	8004080 <HAL_DMA_Start_IT>
 8002a12:	4603      	mov	r3, r0
 8002a14:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fd5b 	bl	80024d6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a20:	e00d      	b.n	8002a3e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002a2a:	e008      	b.n	8002a3e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002a38:	e001      	b.n	8002a3e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	50000100 	.word	0x50000100
 8002a4c:	50000300 	.word	0x50000300
 8002a50:	50000700 	.word	0x50000700
 8002a54:	50000600 	.word	0x50000600
 8002a58:	50000500 	.word	0x50000500
 8002a5c:	50000400 	.word	0x50000400
 8002a60:	08003929 	.word	0x08003929
 8002a64:	08003a01 	.word	0x08003a01
 8002a68:	08003a1d 	.word	0x08003a1d

08002a6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a90:	d004      	beq.n	8002a9c <HAL_ADC_IRQHandler+0x30>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a8e      	ldr	r2, [pc, #568]	@ (8002cd0 <HAL_ADC_IRQHandler+0x264>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0x34>
 8002a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd4 <HAL_ADC_IRQHandler+0x268>)
 8002a9e:	e000      	b.n	8002aa2 <HAL_ADC_IRQHandler+0x36>
 8002aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd8 <HAL_ADC_IRQHandler+0x26c>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fc86 	bl	80023b4 <LL_ADC_GetMultimode>
 8002aa8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d017      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x78>
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d012      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ace:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 f808 	bl	8003aec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x8c>
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8094 	beq.w	8002c2c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 808e 	beq.w	8002c2c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fb9f 	bl	8002270 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d072      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a64      	ldr	r2, [pc, #400]	@ (8002cd0 <HAL_ADC_IRQHandler+0x264>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_ADC_IRQHandler+0xea>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a65      	ldr	r2, [pc, #404]	@ (8002cdc <HAL_ADC_IRQHandler+0x270>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_IRQHandler+0xe6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e003      	b.n	8002b5a <HAL_ADC_IRQHandler+0xee>
 8002b52:	4b63      	ldr	r3, [pc, #396]	@ (8002ce0 <HAL_ADC_IRQHandler+0x274>)
 8002b54:	e001      	b.n	8002b5a <HAL_ADC_IRQHandler+0xee>
 8002b56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d008      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d002      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d104      	bne.n	8002b7e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	623b      	str	r3, [r7, #32]
 8002b7c:	e014      	b.n	8002ba8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a53      	ldr	r2, [pc, #332]	@ (8002cd0 <HAL_ADC_IRQHandler+0x264>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x130>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a53      	ldr	r2, [pc, #332]	@ (8002cdc <HAL_ADC_IRQHandler+0x270>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d002      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x12c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_IRQHandler+0x134>
 8002b98:	4b51      	ldr	r3, [pc, #324]	@ (8002ce0 <HAL_ADC_IRQHandler+0x274>)
 8002b9a:	e001      	b.n	8002ba0 <HAL_ADC_IRQHandler+0x134>
 8002b9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ba0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d135      	bne.n	8002c1e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d12e      	bne.n	8002c1e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fc9a 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11a      	bne.n	8002c06 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 020c 	bic.w	r2, r2, #12
 8002bde:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d112      	bne.n	8002c1e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c04:	e00b      	b.n	8002c1e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f984 	bl	8002f2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	220c      	movs	r2, #12
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <HAL_ADC_IRQHandler+0x1d4>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80b3 	beq.w	8002db2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80ad 	beq.w	8002db2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fb3a 	bl	80022ee <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c7a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff faf5 	bl	8002270 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c86:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a10      	ldr	r2, [pc, #64]	@ (8002cd0 <HAL_ADC_IRQHandler+0x264>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_ADC_IRQHandler+0x23a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a11      	ldr	r2, [pc, #68]	@ (8002cdc <HAL_ADC_IRQHandler+0x270>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d002      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x236>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_IRQHandler+0x23e>
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <HAL_ADC_IRQHandler+0x274>)
 8002ca4:	e001      	b.n	8002caa <HAL_ADC_IRQHandler+0x23e>
 8002ca6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d008      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d002      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	e01f      	b.n	8002d0e <HAL_ADC_IRQHandler+0x2a2>
 8002cce:	bf00      	nop
 8002cd0:	50000100 	.word	0x50000100
 8002cd4:	50000300 	.word	0x50000300
 8002cd8:	50000700 	.word	0x50000700
 8002cdc:	50000500 	.word	0x50000500
 8002ce0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a8b      	ldr	r2, [pc, #556]	@ (8002f18 <HAL_ADC_IRQHandler+0x4ac>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_ADC_IRQHandler+0x296>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a8a      	ldr	r2, [pc, #552]	@ (8002f1c <HAL_ADC_IRQHandler+0x4b0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d002      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x292>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	e003      	b.n	8002d06 <HAL_ADC_IRQHandler+0x29a>
 8002cfe:	4b88      	ldr	r3, [pc, #544]	@ (8002f20 <HAL_ADC_IRQHandler+0x4b4>)
 8002d00:	e001      	b.n	8002d06 <HAL_ADC_IRQHandler+0x29a>
 8002d02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d06:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d047      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x2c2>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03f      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d13a      	bne.n	8002da4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d133      	bne.n	8002da4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d12e      	bne.n	8002da4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fbea 	bl	8002524 <LL_ADC_INJ_IsConversionOngoing>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11a      	bne.n	8002d8c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d64:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d112      	bne.n	8002da4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d8a:	e00b      	b.n	8002da4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	f043 0210 	orr.w	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fe79 	bl	8003a9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2260      	movs	r2, #96	@ 0x60
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d011      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x374>
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8be 	bl	8002f54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <HAL_ADC_IRQHandler+0x3a4>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fe5f 	bl	8003ac4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x3d4>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fe51 	bl	8003ad8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d043      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0x466>
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d03e      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	e021      	b.n	8002ea6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e70:	d004      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x410>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a28      	ldr	r2, [pc, #160]	@ (8002f18 <HAL_ADC_IRQHandler+0x4ac>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x414>
 8002e7c:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <HAL_ADC_IRQHandler+0x4b8>)
 8002e7e:	e000      	b.n	8002e82 <HAL_ADC_IRQHandler+0x416>
 8002e80:	4b29      	ldr	r3, [pc, #164]	@ (8002f28 <HAL_ADC_IRQHandler+0x4bc>)
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff faa4 	bl	80023d0 <LL_ADC_GetMultiDMATransfer>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	e008      	b.n	8002ea6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10e      	bne.n	8002eca <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebc:	f043 0202 	orr.w	r2, r3, #2
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f84f 	bl	8002f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2210      	movs	r2, #16
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x4a2>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d013      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef6:	f043 0208 	orr.w	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f06:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fdd1 	bl	8003ab0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f0e:	bf00      	nop
 8002f10:	3728      	adds	r7, #40	@ 0x28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	50000100 	.word	0x50000100
 8002f1c:	50000500 	.word	0x50000500
 8002f20:	50000400 	.word	0x50000400
 8002f24:	50000300 	.word	0x50000300
 8002f28:	50000700 	.word	0x50000700

08002f2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0b6      	sub	sp, #216	@ 0xd8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x24>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f000 bc13 	b.w	80037c6 <HAL_ADC_ConfigChannel+0x84a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff faa6 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 83f3 	bne.w	80037a0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7ff f965 	bl	8002296 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fa94 	bl	80024fe <LL_ADC_REG_IsConversionOngoing>
 8002fd6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff faa0 	bl	8002524 <LL_ADC_INJ_IsConversionOngoing>
 8002fe4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fe8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 81d9 	bne.w	80033a4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 81d4 	bne.w	80033a4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003004:	d10f      	bne.n	8003026 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	4619      	mov	r1, r3
 8003012:	f7ff f97f 	bl	8002314 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f913 	bl	800224a <LL_ADC_SetSamplingTimeCommonConfig>
 8003024:	e00e      	b.n	8003044 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	461a      	mov	r2, r3
 8003034:	f7ff f96e 	bl	8002314 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f903 	bl	800224a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	08db      	lsrs	r3, r3, #3
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b04      	cmp	r3, #4
 8003064:	d022      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6919      	ldr	r1, [r3, #16]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003076:	f7ff f85d 	bl	8002134 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	461a      	mov	r2, r3
 8003088:	f7ff f8a9 	bl	80021de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003098:	2b01      	cmp	r3, #1
 800309a:	d102      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x126>
 800309c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030a0:	e000      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x128>
 80030a2:	2300      	movs	r3, #0
 80030a4:	461a      	mov	r2, r3
 80030a6:	f7ff f8b5 	bl	8002214 <LL_ADC_SetOffsetSaturation>
 80030aa:	e17b      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f862 	bl	800217c <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x15c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff f857 	bl	800217c <LL_ADC_GetOffsetChannel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	e01e      	b.n	8003116 <HAL_ADC_ConfigChannel+0x19a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f84c 	bl	800217c <LL_ADC_GetOffsetChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e004      	b.n	8003114 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800310a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_ADC_ConfigChannel+0x1b2>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	e018      	b.n	8003160 <HAL_ADC_ConfigChannel+0x1e4>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800314a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e004      	b.n	8003160 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003160:	429a      	cmp	r2, r3
 8003162:	d106      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff f81b 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe ffff 	bl	800217c <LL_ADC_GetOffsetChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <HAL_ADC_ConfigChannel+0x222>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fff4 	bl	800217c <LL_ADC_GetOffsetChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	0e9b      	lsrs	r3, r3, #26
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	e01e      	b.n	80031dc <HAL_ADC_ConfigChannel+0x260>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2101      	movs	r1, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe ffe9 	bl	800217c <LL_ADC_GetOffsetChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80031bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80031c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e004      	b.n	80031da <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x278>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	e018      	b.n	8003226 <HAL_ADC_ConfigChannel+0x2aa>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003208:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800320c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e004      	b.n	8003226 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800321c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003226:	429a      	cmp	r2, r3
 8003228:	d106      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe ffb8 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe ff9c 	bl	800217c <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x2e8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2102      	movs	r1, #2
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe ff91 	bl	800217c <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	f003 021f 	and.w	r2, r3, #31
 8003262:	e01e      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x326>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2102      	movs	r1, #2
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ff86 	bl	800217c <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003282:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003286:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800328a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003292:	2320      	movs	r3, #32
 8003294:	e004      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003296:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x33e>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	e016      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x36c>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80032cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80032d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e004      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80032de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d106      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2200      	movs	r2, #0
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe ff57 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2103      	movs	r1, #3
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe ff3b 	bl	800217c <LL_ADC_GetOffsetChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x3aa>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2103      	movs	r1, #3
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe ff30 	bl	800217c <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	0e9b      	lsrs	r3, r3, #26
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	e017      	b.n	8003356 <HAL_ADC_ConfigChannel+0x3da>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2103      	movs	r1, #3
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe ff25 	bl	800217c <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800333e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003340:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	e003      	b.n	8003354 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800334c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <HAL_ADC_ConfigChannel+0x3f2>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	e011      	b.n	8003392 <HAL_ADC_ConfigChannel+0x416>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800337c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800337e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e003      	b.n	8003392 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800338a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003392:	429a      	cmp	r2, r3
 8003394:	d106      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	2103      	movs	r1, #3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe ff02 	bl	80021a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f881 	bl	80024b0 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f040 813d 	bne.w	8003630 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f7fe ffd2 	bl	800236c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4aa2      	ldr	r2, [pc, #648]	@ (8003658 <HAL_ADC_ConfigChannel+0x6dc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	f040 812e 	bne.w	8003630 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x480>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	3301      	adds	r3, #1
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	bf94      	ite	ls
 80033f4:	2301      	movls	r3, #1
 80033f6:	2300      	movhi	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e019      	b.n	8003430 <HAL_ADC_ConfigChannel+0x4b4>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800340a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800340c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800340e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003414:	2320      	movs	r3, #32
 8003416:	e003      	b.n	8003420 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3301      	adds	r3, #1
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2b09      	cmp	r3, #9
 8003428:	bf94      	ite	ls
 800342a:	2301      	movls	r3, #1
 800342c:	2300      	movhi	r3, #0
 800342e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003430:	2b00      	cmp	r3, #0
 8003432:	d079      	beq.n	8003528 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x4d4>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	3301      	adds	r3, #1
 8003448:	069b      	lsls	r3, r3, #26
 800344a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800344e:	e015      	b.n	800347c <HAL_ADC_ConfigChannel+0x500>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800345e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003460:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003468:	2320      	movs	r3, #32
 800346a:	e003      	b.n	8003474 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	3301      	adds	r3, #1
 8003476:	069b      	lsls	r3, r3, #26
 8003478:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_ADC_ConfigChannel+0x520>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	3301      	adds	r3, #1
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	e017      	b.n	80034cc <HAL_ADC_ConfigChannel+0x550>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80034aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80034ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e003      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	ea42 0103 	orr.w	r1, r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x576>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0e9b      	lsrs	r3, r3, #26
 80034e2:	3301      	adds	r3, #1
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	051b      	lsls	r3, r3, #20
 80034f0:	e018      	b.n	8003524 <HAL_ADC_ConfigChannel+0x5a8>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e003      	b.n	8003516 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800350e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003524:	430b      	orrs	r3, r1
 8003526:	e07e      	b.n	8003626 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x5c8>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	3301      	adds	r3, #1
 800353c:	069b      	lsls	r3, r3, #26
 800353e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003542:	e015      	b.n	8003570 <HAL_ADC_ConfigChannel+0x5f4>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800355c:	2320      	movs	r3, #32
 800355e:	e003      	b.n	8003568 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	3301      	adds	r3, #1
 800356a:	069b      	lsls	r3, r3, #26
 800356c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x614>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	0e9b      	lsrs	r3, r3, #26
 8003582:	3301      	adds	r3, #1
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	e017      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x644>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	61fb      	str	r3, [r7, #28]
  return result;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e003      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	ea42 0103 	orr.w	r1, r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x670>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	3301      	adds	r3, #1
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	3b1e      	subs	r3, #30
 80035e4:	051b      	lsls	r3, r3, #20
 80035e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	e01b      	b.n	8003624 <HAL_ADC_ConfigChannel+0x6a8>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	613b      	str	r3, [r7, #16]
  return result;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f003 021f 	and.w	r2, r3, #31
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	3b1e      	subs	r3, #30
 800361e:	051b      	lsls	r3, r3, #20
 8003620:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003624:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362a:	4619      	mov	r1, r3
 800362c:	f7fe fe72 	bl	8002314 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b09      	ldr	r3, [pc, #36]	@ (800365c <HAL_ADC_ConfigChannel+0x6e0>)
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80be 	beq.w	80037ba <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003646:	d004      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x6d6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <HAL_ADC_ConfigChannel+0x6e4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10a      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x6ec>
 8003652:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <HAL_ADC_ConfigChannel+0x6e8>)
 8003654:	e009      	b.n	800366a <HAL_ADC_ConfigChannel+0x6ee>
 8003656:	bf00      	nop
 8003658:	407f0000 	.word	0x407f0000
 800365c:	80080000 	.word	0x80080000
 8003660:	50000100 	.word	0x50000100
 8003664:	50000300 	.word	0x50000300
 8003668:	4b59      	ldr	r3, [pc, #356]	@ (80037d0 <HAL_ADC_ConfigChannel+0x854>)
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fd54 	bl	8002118 <LL_ADC_GetCommonPathInternalCh>
 8003670:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a56      	ldr	r2, [pc, #344]	@ (80037d4 <HAL_ADC_ConfigChannel+0x858>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_ADC_ConfigChannel+0x70c>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a55      	ldr	r2, [pc, #340]	@ (80037d8 <HAL_ADC_ConfigChannel+0x85c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d13a      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800368c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d134      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800369c:	d005      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x72e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a4e      	ldr	r2, [pc, #312]	@ (80037dc <HAL_ADC_ConfigChannel+0x860>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	f040 8085 	bne.w	80037b4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b2:	d004      	beq.n	80036be <HAL_ADC_ConfigChannel+0x742>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a49      	ldr	r2, [pc, #292]	@ (80037e0 <HAL_ADC_ConfigChannel+0x864>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x746>
 80036be:	4a49      	ldr	r2, [pc, #292]	@ (80037e4 <HAL_ADC_ConfigChannel+0x868>)
 80036c0:	e000      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x748>
 80036c2:	4a43      	ldr	r2, [pc, #268]	@ (80037d0 <HAL_ADC_ConfigChannel+0x854>)
 80036c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f7fe fd0f 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d4:	4b44      	ldr	r3, [pc, #272]	@ (80037e8 <HAL_ADC_ConfigChannel+0x86c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	4a44      	ldr	r2, [pc, #272]	@ (80037ec <HAL_ADC_ConfigChannel+0x870>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ee:	e002      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036fc:	e05a      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a3b      	ldr	r2, [pc, #236]	@ (80037f0 <HAL_ADC_ConfigChannel+0x874>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d125      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11f      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a31      	ldr	r2, [pc, #196]	@ (80037e0 <HAL_ADC_ConfigChannel+0x864>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d104      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x7ac>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a34      	ldr	r2, [pc, #208]	@ (80037f4 <HAL_ADC_ConfigChannel+0x878>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d047      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003730:	d004      	beq.n	800373c <HAL_ADC_ConfigChannel+0x7c0>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2a      	ldr	r2, [pc, #168]	@ (80037e0 <HAL_ADC_ConfigChannel+0x864>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x7c4>
 800373c:	4a29      	ldr	r2, [pc, #164]	@ (80037e4 <HAL_ADC_ConfigChannel+0x868>)
 800373e:	e000      	b.n	8003742 <HAL_ADC_ConfigChannel+0x7c6>
 8003740:	4a23      	ldr	r2, [pc, #140]	@ (80037d0 <HAL_ADC_ConfigChannel+0x854>)
 8003742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374a:	4619      	mov	r1, r3
 800374c:	4610      	mov	r0, r2
 800374e:	f7fe fcd0 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003752:	e031      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <HAL_ADC_ConfigChannel+0x87c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12d      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800375e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d127      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1c      	ldr	r2, [pc, #112]	@ (80037e0 <HAL_ADC_ConfigChannel+0x864>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d022      	beq.n	80037ba <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800377c:	d004      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x80c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <HAL_ADC_ConfigChannel+0x864>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_ADC_ConfigChannel+0x810>
 8003788:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <HAL_ADC_ConfigChannel+0x868>)
 800378a:	e000      	b.n	800378e <HAL_ADC_ConfigChannel+0x812>
 800378c:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <HAL_ADC_ConfigChannel+0x854>)
 800378e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003792:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7fe fcaa 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
 800379e:	e00c      	b.n	80037ba <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80037b2:	e002      	b.n	80037ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b4:	bf00      	nop
 80037b6:	e000      	b.n	80037ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	37d8      	adds	r7, #216	@ 0xd8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	50000700 	.word	0x50000700
 80037d4:	c3210000 	.word	0xc3210000
 80037d8:	90c00010 	.word	0x90c00010
 80037dc:	50000600 	.word	0x50000600
 80037e0:	50000100 	.word	0x50000100
 80037e4:	50000300 	.word	0x50000300
 80037e8:	20000004 	.word	0x20000004
 80037ec:	053e2d63 	.word	0x053e2d63
 80037f0:	c7520000 	.word	0xc7520000
 80037f4:	50000500 	.word	0x50000500
 80037f8:	cb840000 	.word	0xcb840000

080037fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fe4f 	bl	80024b0 <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d176      	bne.n	8003906 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	4b3c      	ldr	r3, [pc, #240]	@ (8003910 <ADC_Enable+0x114>)
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	f043 0210 	orr.w	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e062      	b.n	8003908 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fe1e 	bl	8002488 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003854:	d004      	beq.n	8003860 <ADC_Enable+0x64>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2e      	ldr	r2, [pc, #184]	@ (8003914 <ADC_Enable+0x118>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <ADC_Enable+0x68>
 8003860:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <ADC_Enable+0x11c>)
 8003862:	e000      	b.n	8003866 <ADC_Enable+0x6a>
 8003864:	4b2d      	ldr	r3, [pc, #180]	@ (800391c <ADC_Enable+0x120>)
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fc56 	bl	8002118 <LL_ADC_GetCommonPathInternalCh>
 800386c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800386e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003872:	2b00      	cmp	r3, #0
 8003874:	d013      	beq.n	800389e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003876:	4b2a      	ldr	r3, [pc, #168]	@ (8003920 <ADC_Enable+0x124>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	4a29      	ldr	r2, [pc, #164]	@ (8003924 <ADC_Enable+0x128>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003890:	e002      	b.n	8003898 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	3b01      	subs	r3, #1
 8003896:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f9      	bne.n	8003892 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800389e:	f7fe fc09 	bl	80020b4 <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038a4:	e028      	b.n	80038f8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fe00 	bl	80024b0 <LL_ADC_IsEnabled>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fde4 	bl	8002488 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038c0:	f7fe fbf8 	bl	80020b4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d914      	bls.n	80038f8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d00d      	beq.n	80038f8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f043 0210 	orr.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e007      	b.n	8003908 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d1cf      	bne.n	80038a6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	8000003f 	.word	0x8000003f
 8003914:	50000100 	.word	0x50000100
 8003918:	50000300 	.word	0x50000300
 800391c:	50000700 	.word	0x50000700
 8003920:	20000004 	.word	0x20000004
 8003924:	053e2d63 	.word	0x053e2d63

08003928 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	d14b      	bne.n	80039da <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003946:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d021      	beq.n	80039a0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fc85 	bl	8002270 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d032      	beq.n	80039d2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d12b      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11f      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800399e:	e018      	b.n	80039d2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d111      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff faaa 	bl	8002f2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039d8:	e00e      	b.n	80039f8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f7ff fabe 	bl	8002f68 <HAL_ADC_ErrorCallback>
}
 80039ec:	e004      	b.n	80039f8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff fa96 	bl	8002f40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fa90 	bl	8002f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <LL_ADC_IsEnabled>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <LL_ADC_IsEnabled+0x18>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <LL_ADC_IsEnabled+0x1a>
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d101      	bne.n	8003a8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b0a1      	sub	sp, #132	@ 0x84
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0e7      	b.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b26:	2300      	movs	r3, #0
 8003b28:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b36:	d102      	bne.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b38:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	e009      	b.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6e      	ldr	r2, [pc, #440]	@ (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d102      	bne.n	8003b4e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003b48:	4b6d      	ldr	r3, [pc, #436]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	e001      	b.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0be      	b.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ff7f 	bl	8003a76 <LL_ADC_REG_IsConversionOngoing>
 8003b78:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff ff79 	bl	8003a76 <LL_ADC_REG_IsConversionOngoing>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 80a0 	bne.w	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 809c 	bne.w	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b9c:	d004      	beq.n	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a55      	ldr	r2, [pc, #340]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ba8:	4b56      	ldr	r3, [pc, #344]	@ (8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003baa:	e000      	b.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003bac:	4b56      	ldr	r3, [pc, #344]	@ (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003bae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d04b      	beq.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bca:	035b      	lsls	r3, r3, #13
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a45      	ldr	r2, [pc, #276]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10f      	bne.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003be8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bec:	f7ff ff30 	bl	8003a50 <LL_ADC_IsEnabled>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	4841      	ldr	r0, [pc, #260]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bf4:	f7ff ff2c 	bl	8003a50 <LL_ADC_IsEnabled>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4323      	orrs	r3, r4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e012      	b.n	8003c2e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003c08:	483c      	ldr	r0, [pc, #240]	@ (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c0a:	f7ff ff21 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	483b      	ldr	r0, [pc, #236]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c12:	f7ff ff1d 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c16:	4603      	mov	r3, r0
 8003c18:	431c      	orrs	r4, r3
 8003c1a:	483c      	ldr	r0, [pc, #240]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c1c:	f7ff ff18 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4323      	orrs	r3, r4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d056      	beq.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c3a:	f023 030f 	bic.w	r3, r3, #15
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	6811      	ldr	r1, [r2, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c4c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4e:	e047      	b.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c64:	d004      	beq.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a23      	ldr	r2, [pc, #140]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d10f      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003c70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c74:	f7ff feec 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c78:	4604      	mov	r4, r0
 8003c7a:	481f      	ldr	r0, [pc, #124]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c7c:	f7ff fee8 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4323      	orrs	r3, r4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e012      	b.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c90:	481a      	ldr	r0, [pc, #104]	@ (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c92:	f7ff fedd 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c96:	4604      	mov	r4, r0
 8003c98:	4819      	ldr	r0, [pc, #100]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c9a:	f7ff fed9 	bl	8003a50 <LL_ADC_IsEnabled>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	431c      	orrs	r4, r3
 8003ca2:	481a      	ldr	r0, [pc, #104]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ca4:	f7ff fed4 	bl	8003a50 <LL_ADC_IsEnabled>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4323      	orrs	r3, r4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d012      	beq.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cc2:	f023 030f 	bic.w	r3, r3, #15
 8003cc6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cc8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cca:	e009      	b.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003cde:	e000      	b.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ce0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3784      	adds	r7, #132	@ 0x84
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd90      	pop	{r4, r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	50000100 	.word	0x50000100
 8003cfc:	50000400 	.word	0x50000400
 8003d00:	50000500 	.word	0x50000500
 8003d04:	50000300 	.word	0x50000300
 8003d08:	50000700 	.word	0x50000700
 8003d0c:	50000600 	.word	0x50000600

08003d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d42:	4a04      	ldr	r2, [pc, #16]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	60d3      	str	r3, [r2, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d5c:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <__NVIC_GetPriorityGrouping+0x18>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f003 0307 	and.w	r3, r3, #7
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db0b      	blt.n	8003d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	f003 021f 	and.w	r2, r3, #31
 8003d8c:	4907      	ldr	r1, [pc, #28]	@ (8003dac <__NVIC_EnableIRQ+0x38>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2001      	movs	r0, #1
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e100 	.word	0xe000e100

08003db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db0a      	blt.n	8003dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	490c      	ldr	r1, [pc, #48]	@ (8003dfc <__NVIC_SetPriority+0x4c>)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd8:	e00a      	b.n	8003df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4908      	ldr	r1, [pc, #32]	@ (8003e00 <__NVIC_SetPriority+0x50>)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	3b04      	subs	r3, #4
 8003de8:	0112      	lsls	r2, r2, #4
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	440b      	add	r3, r1
 8003dee:	761a      	strb	r2, [r3, #24]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000e100 	.word	0xe000e100
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	@ 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f1c3 0307 	rsb	r3, r3, #7
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	bf28      	it	cs
 8003e22:	2304      	movcs	r3, #4
 8003e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d902      	bls.n	8003e34 <NVIC_EncodePriority+0x30>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3b03      	subs	r3, #3
 8003e32:	e000      	b.n	8003e36 <NVIC_EncodePriority+0x32>
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	401a      	ands	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	43d9      	mvns	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	4313      	orrs	r3, r2
         );
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	@ 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e7c:	d301      	bcc.n	8003e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00f      	b.n	8003ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e82:	4a0a      	ldr	r2, [pc, #40]	@ (8003eac <SysTick_Config+0x40>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e8a:	210f      	movs	r1, #15
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e90:	f7ff ff8e 	bl	8003db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <SysTick_Config+0x40>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e9a:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <SysTick_Config+0x40>)
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	e000e010 	.word	0xe000e010

08003eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff29 	bl	8003d10 <__NVIC_SetPriorityGrouping>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4603      	mov	r3, r0
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed4:	f7ff ff40 	bl	8003d58 <__NVIC_GetPriorityGrouping>
 8003ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	6978      	ldr	r0, [r7, #20]
 8003ee0:	f7ff ff90 	bl	8003e04 <NVIC_EncodePriority>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff5f 	bl	8003db0 <__NVIC_SetPriority>
}
 8003ef2:	bf00      	nop
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff33 	bl	8003d74 <__NVIC_EnableIRQ>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ffa4 	bl	8003e6c <SysTick_Config>
 8003f24:	4603      	mov	r3, r0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e08d      	b.n	800405e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b47      	ldr	r3, [pc, #284]	@ (8004068 <HAL_DMA_Init+0x138>)
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d80f      	bhi.n	8003f6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b45      	ldr	r3, [pc, #276]	@ (800406c <HAL_DMA_Init+0x13c>)
 8003f56:	4413      	add	r3, r2
 8003f58:	4a45      	ldr	r2, [pc, #276]	@ (8004070 <HAL_DMA_Init+0x140>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a42      	ldr	r2, [pc, #264]	@ (8004074 <HAL_DMA_Init+0x144>)
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f6c:	e00e      	b.n	8003f8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b40      	ldr	r3, [pc, #256]	@ (8004078 <HAL_DMA_Init+0x148>)
 8003f76:	4413      	add	r3, r2
 8003f78:	4a3d      	ldr	r2, [pc, #244]	@ (8004070 <HAL_DMA_Init+0x140>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	009a      	lsls	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	@ (800407c <HAL_DMA_Init+0x14c>)
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fa82 	bl	80044e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fec:	d102      	bne.n	8003ff4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004008:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d010      	beq.n	8004034 <HAL_DMA_Init+0x104>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d80c      	bhi.n	8004034 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 faa2 	bl	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	e008      	b.n	8004046 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40020407 	.word	0x40020407
 800406c:	bffdfff8 	.word	0xbffdfff8
 8004070:	cccccccd 	.word	0xcccccccd
 8004074:	40020000 	.word	0x40020000
 8004078:	bffdfbf8 	.word	0xbffdfbf8
 800407c:	40020400 	.word	0x40020400

08004080 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Start_IT+0x20>
 800409c:	2302      	movs	r3, #2
 800409e:	e066      	b.n	800416e <HAL_DMA_Start_IT+0xee>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d155      	bne.n	8004160 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f9c7 	bl	800446c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 020e 	orr.w	r2, r2, #14
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e00f      	b.n	8004118 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0204 	bic.w	r2, r2, #4
 8004106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 020a 	orr.w	r2, r2, #10
 8004116:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004134:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800414c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e005      	b.n	800416c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004168:	2302      	movs	r3, #2
 800416a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800416c:	7dfb      	ldrb	r3, [r7, #23]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d005      	beq.n	800419a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2204      	movs	r2, #4
 8004192:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e037      	b.n	800420a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 020e 	bic.w	r2, r2, #14
 80041a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f003 021f 	and.w	r2, r3, #31
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f202 	lsl.w	r2, r1, r2
 80041dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00c      	beq.n	800420a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004208:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d00d      	beq.n	800425c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e047      	b.n	80042ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 020e 	bic.w	r2, r2, #14
 800426a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004286:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800428a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	2101      	movs	r1, #1
 800429a:	fa01 f202 	lsl.w	r2, r1, r2
 800429e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
    }
  }
  return status;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2204      	movs	r2, #4
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d026      	beq.n	8004370 <HAL_DMA_IRQHandler+0x7a>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d021      	beq.n	8004370 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0204 	bic.w	r2, r2, #4
 8004348:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f003 021f 	and.w	r2, r3, #31
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2104      	movs	r1, #4
 8004358:	fa01 f202 	lsl.w	r2, r1, r2
 800435c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	2b00      	cmp	r3, #0
 8004364:	d071      	beq.n	800444a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800436e:	e06c      	b.n	800444a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2202      	movs	r2, #2
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d02e      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d029      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 020a 	bic.w	r2, r2, #10
 80043aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	2102      	movs	r1, #2
 80043c2:	fa01 f202 	lsl.w	r2, r1, r2
 80043c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d038      	beq.n	800444a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043e0:	e033      	b.n	800444a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2208      	movs	r2, #8
 80043ec:	409a      	lsls	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02a      	beq.n	800444c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d025      	beq.n	800444c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 020e 	bic.w	r2, r2, #14
 800440e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004414:	f003 021f 	and.w	r2, r3, #31
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	2101      	movs	r1, #1
 800441e:	fa01 f202 	lsl.w	r2, r1, r2
 8004422:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800444a:	bf00      	nop
 800444c:	bf00      	nop
}
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004482:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	f003 021f 	and.w	r2, r3, #31
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	2101      	movs	r1, #1
 80044a4:	fa01 f202 	lsl.w	r2, r1, r2
 80044a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d108      	bne.n	80044cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044ca:	e007      	b.n	80044dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b16      	ldr	r3, [pc, #88]	@ (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d802      	bhi.n	8004502 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044fc:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	e001      	b.n	8004506 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004502:	4b15      	ldr	r3, [pc, #84]	@ (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004504:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	3b08      	subs	r3, #8
 8004512:	4a12      	ldr	r2, [pc, #72]	@ (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	461a      	mov	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a0b      	ldr	r2, [pc, #44]	@ (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004532:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	2201      	movs	r2, #1
 800453c:	409a      	lsls	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40020407 	.word	0x40020407
 8004554:	40020800 	.word	0x40020800
 8004558:	40020820 	.word	0x40020820
 800455c:	cccccccd 	.word	0xcccccccd
 8004560:	40020880 	.word	0x40020880

08004564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004586:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	1000823f 	.word	0x1000823f
 80045a8:	40020940 	.word	0x40020940

080045ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045ba:	e15a      	b.n	8004872 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 814c 	beq.w	800486c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d005      	beq.n	80045ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d130      	bne.n	800464e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2203      	movs	r2, #3
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004622:	2201      	movs	r2, #1
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0201 	and.w	r2, r3, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b03      	cmp	r3, #3
 8004658:	d017      	beq.n	800468a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d123      	bne.n	80046de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	220f      	movs	r2, #15
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4013      	ands	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80a6 	beq.w	800486c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004720:	4b5b      	ldr	r3, [pc, #364]	@ (8004890 <HAL_GPIO_Init+0x2e4>)
 8004722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004724:	4a5a      	ldr	r2, [pc, #360]	@ (8004890 <HAL_GPIO_Init+0x2e4>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6613      	str	r3, [r2, #96]	@ 0x60
 800472c:	4b58      	ldr	r3, [pc, #352]	@ (8004890 <HAL_GPIO_Init+0x2e4>)
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004738:	4a56      	ldr	r2, [pc, #344]	@ (8004894 <HAL_GPIO_Init+0x2e8>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004762:	d01f      	beq.n	80047a4 <HAL_GPIO_Init+0x1f8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a4c      	ldr	r2, [pc, #304]	@ (8004898 <HAL_GPIO_Init+0x2ec>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d019      	beq.n	80047a0 <HAL_GPIO_Init+0x1f4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a4b      	ldr	r2, [pc, #300]	@ (800489c <HAL_GPIO_Init+0x2f0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_GPIO_Init+0x1f0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a4a      	ldr	r2, [pc, #296]	@ (80048a0 <HAL_GPIO_Init+0x2f4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00d      	beq.n	8004798 <HAL_GPIO_Init+0x1ec>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a49      	ldr	r2, [pc, #292]	@ (80048a4 <HAL_GPIO_Init+0x2f8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <HAL_GPIO_Init+0x1e8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a48      	ldr	r2, [pc, #288]	@ (80048a8 <HAL_GPIO_Init+0x2fc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <HAL_GPIO_Init+0x1e4>
 800478c:	2305      	movs	r3, #5
 800478e:	e00a      	b.n	80047a6 <HAL_GPIO_Init+0x1fa>
 8004790:	2306      	movs	r3, #6
 8004792:	e008      	b.n	80047a6 <HAL_GPIO_Init+0x1fa>
 8004794:	2304      	movs	r3, #4
 8004796:	e006      	b.n	80047a6 <HAL_GPIO_Init+0x1fa>
 8004798:	2303      	movs	r3, #3
 800479a:	e004      	b.n	80047a6 <HAL_GPIO_Init+0x1fa>
 800479c:	2302      	movs	r3, #2
 800479e:	e002      	b.n	80047a6 <HAL_GPIO_Init+0x1fa>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_GPIO_Init+0x1fa>
 80047a4:	2300      	movs	r3, #0
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	f002 0203 	and.w	r2, r2, #3
 80047ac:	0092      	lsls	r2, r2, #2
 80047ae:	4093      	lsls	r3, r2
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b6:	4937      	ldr	r1, [pc, #220]	@ (8004894 <HAL_GPIO_Init+0x2e8>)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	3302      	adds	r3, #2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047c4:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <HAL_GPIO_Init+0x300>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047e8:	4a30      	ldr	r2, [pc, #192]	@ (80048ac <HAL_GPIO_Init+0x300>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047ee:	4b2f      	ldr	r3, [pc, #188]	@ (80048ac <HAL_GPIO_Init+0x300>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004812:	4a26      	ldr	r2, [pc, #152]	@ (80048ac <HAL_GPIO_Init+0x300>)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004818:	4b24      	ldr	r3, [pc, #144]	@ (80048ac <HAL_GPIO_Init+0x300>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	43db      	mvns	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800483c:	4a1b      	ldr	r2, [pc, #108]	@ (80048ac <HAL_GPIO_Init+0x300>)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004842:	4b1a      	ldr	r3, [pc, #104]	@ (80048ac <HAL_GPIO_Init+0x300>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004866:	4a11      	ldr	r2, [pc, #68]	@ (80048ac <HAL_GPIO_Init+0x300>)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3301      	adds	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	f47f ae9d 	bne.w	80045bc <HAL_GPIO_Init+0x10>
  }
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40021000 	.word	0x40021000
 8004894:	40010000 	.word	0x40010000
 8004898:	48000400 	.word	0x48000400
 800489c:	48000800 	.word	0x48000800
 80048a0:	48000c00 	.word	0x48000c00
 80048a4:	48001000 	.word	0x48001000
 80048a8:	48001400 	.word	0x48001400
 80048ac:	40010400 	.word	0x40010400

080048b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
 80048cc:	e001      	b.n	80048d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]
 80048ec:	4613      	mov	r3, r2
 80048ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f0:	787b      	ldrb	r3, [r7, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048fc:	e002      	b.n	8004904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800491a:	4b08      	ldr	r3, [pc, #32]	@ (800493c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004926:	4a05      	ldr	r2, [pc, #20]	@ (800493c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f806 	bl	8004940 <HAL_GPIO_EXTI_Callback>
  }
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40010400 	.word	0x40010400

08004940 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e041      	b.n	80049ec <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004970:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f245 5255 	movw	r2, #21845	@ 0x5555
 800497a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6852      	ldr	r2, [r2, #4]
 8004984:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6892      	ldr	r2, [r2, #8]
 800498e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004990:	f7fd fb90 	bl	80020b4 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004996:	e00f      	b.n	80049b8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004998:	f7fd fb8c 	bl	80020b4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b31      	cmp	r3, #49	@ 0x31
 80049a4:	d908      	bls.n	80049b8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e019      	b.n	80049ec <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e8      	bne.n	8004998 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d005      	beq.n	80049e0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68d2      	ldr	r2, [r2, #12]
 80049dc:	611a      	str	r2, [r3, #16]
 80049de:	e004      	b.n	80049ea <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80049e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004a04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d141      	bne.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a22:	4b4b      	ldr	r3, [pc, #300]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2e:	d131      	bne.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a30:	4b47      	ldr	r3, [pc, #284]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a36:	4a46      	ldr	r2, [pc, #280]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a40:	4b43      	ldr	r3, [pc, #268]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a48:	4a41      	ldr	r2, [pc, #260]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a50:	4b40      	ldr	r3, [pc, #256]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2232      	movs	r2, #50	@ 0x32
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	0c9b      	lsrs	r3, r3, #18
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a66:	e002      	b.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6e:	4b38      	ldr	r3, [pc, #224]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7a:	d102      	bne.n	8004a82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f2      	bne.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a82:	4b33      	ldr	r3, [pc, #204]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8e:	d158      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e057      	b.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a94:	4b2e      	ldr	r3, [pc, #184]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004aa4:	e04d      	b.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aac:	d141      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aae:	4b28      	ldr	r3, [pc, #160]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aba:	d131      	bne.n	8004b20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004abc:	4b24      	ldr	r3, [pc, #144]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac2:	4a23      	ldr	r2, [pc, #140]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004acc:	4b20      	ldr	r3, [pc, #128]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004adc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2232      	movs	r2, #50	@ 0x32
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	0c9b      	lsrs	r3, r3, #18
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af2:	e002      	b.n	8004afa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004afa:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b06:	d102      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f2      	bne.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b0e:	4b10      	ldr	r3, [pc, #64]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b1a:	d112      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e011      	b.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b26:	4a0a      	ldr	r2, [pc, #40]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b30:	e007      	b.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b32:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b3a:	4a05      	ldr	r2, [pc, #20]	@ (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40007000 	.word	0x40007000
 8004b54:	20000004 	.word	0x20000004
 8004b58:	431bde83 	.word	0x431bde83

08004b5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a04      	ldr	r2, [pc, #16]	@ (8004b78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b6a:	6093      	str	r3, [r2, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40007000 	.word	0x40007000

08004b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e2fe      	b.n	800518c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d075      	beq.n	8004c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b9a:	4b97      	ldr	r3, [pc, #604]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba4:	4b94      	ldr	r3, [pc, #592]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	d102      	bne.n	8004bba <HAL_RCC_OscConfig+0x3e>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d002      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x44>
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d10b      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc0:	4b8d      	ldr	r3, [pc, #564]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05b      	beq.n	8004c84 <HAL_RCC_OscConfig+0x108>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d157      	bne.n	8004c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e2d9      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be0:	d106      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x74>
 8004be2:	4b85      	ldr	r3, [pc, #532]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a84      	ldr	r2, [pc, #528]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e01d      	b.n	8004c2c <HAL_RCC_OscConfig+0xb0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x98>
 8004bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b7c      	ldr	r3, [pc, #496]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a7b      	ldr	r2, [pc, #492]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e00b      	b.n	8004c2c <HAL_RCC_OscConfig+0xb0>
 8004c14:	4b78      	ldr	r3, [pc, #480]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a77      	ldr	r2, [pc, #476]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b75      	ldr	r3, [pc, #468]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a74      	ldr	r2, [pc, #464]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fa3e 	bl	80020b4 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fa3a 	bl	80020b4 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e29e      	b.n	800518c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0xc0>
 8004c5a:	e014      	b.n	8004c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fa2a 	bl	80020b4 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7fd fa26 	bl	80020b4 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	@ 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e28a      	b.n	800518c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c76:	4b60      	ldr	r3, [pc, #384]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0xe8>
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d075      	beq.n	8004d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c92:	4b59      	ldr	r3, [pc, #356]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c9c:	4b56      	ldr	r3, [pc, #344]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	d102      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x136>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d002      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x13c>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d11f      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x154>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e25d      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd0:	4b49      	ldr	r3, [pc, #292]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	4946      	ldr	r1, [pc, #280]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ce4:	4b45      	ldr	r3, [pc, #276]	@ (8004dfc <HAL_RCC_OscConfig+0x280>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd f997 	bl	800201c <HAL_InitTick>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d043      	beq.n	8004d7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e249      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d023      	beq.n	8004d48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d00:	4b3d      	ldr	r3, [pc, #244]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3c      	ldr	r2, [pc, #240]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fd f9d2 	bl	80020b4 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d14:	f7fd f9ce 	bl	80020b4 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e232      	b.n	800518c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d26:	4b34      	ldr	r3, [pc, #208]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d32:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	061b      	lsls	r3, r3, #24
 8004d40:	492d      	ldr	r1, [pc, #180]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
 8004d46:	e01a      	b.n	8004d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d48:	4b2b      	ldr	r3, [pc, #172]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd f9ae 	bl	80020b4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5c:	f7fd f9aa 	bl	80020b4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e20e      	b.n	800518c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d6e:	4b22      	ldr	r3, [pc, #136]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x1e0>
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d041      	beq.n	8004e0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d92:	4b19      	ldr	r3, [pc, #100]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d98:	4a17      	ldr	r2, [pc, #92]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da2:	f7fd f987 	bl	80020b4 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004daa:	f7fd f983 	bl	80020b4 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e1e7      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ef      	beq.n	8004daa <HAL_RCC_OscConfig+0x22e>
 8004dca:	e020      	b.n	8004e0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd2:	4a09      	ldr	r2, [pc, #36]	@ (8004df8 <HAL_RCC_OscConfig+0x27c>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd f96a 	bl	80020b4 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de2:	e00d      	b.n	8004e00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de4:	f7fd f966 	bl	80020b4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d906      	bls.n	8004e00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e1ca      	b.n	800518c <HAL_RCC_OscConfig+0x610>
 8004df6:	bf00      	nop
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e00:	4b8c      	ldr	r3, [pc, #560]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ea      	bne.n	8004de4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80a6 	beq.w	8004f68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e20:	4b84      	ldr	r3, [pc, #528]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2b4>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <HAL_RCC_OscConfig+0x2b6>
 8004e30:	2300      	movs	r3, #0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	4b7f      	ldr	r3, [pc, #508]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e42:	4b7c      	ldr	r3, [pc, #496]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e52:	4b79      	ldr	r3, [pc, #484]	@ (8005038 <HAL_RCC_OscConfig+0x4bc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e5e:	4b76      	ldr	r3, [pc, #472]	@ (8005038 <HAL_RCC_OscConfig+0x4bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a75      	ldr	r2, [pc, #468]	@ (8005038 <HAL_RCC_OscConfig+0x4bc>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fd f923 	bl	80020b4 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fd f91f 	bl	80020b4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e183      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e84:	4b6c      	ldr	r3, [pc, #432]	@ (8005038 <HAL_RCC_OscConfig+0x4bc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d108      	bne.n	8004eaa <HAL_RCC_OscConfig+0x32e>
 8004e98:	4b66      	ldr	r3, [pc, #408]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	4a65      	ldr	r2, [pc, #404]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea8:	e024      	b.n	8004ef4 <HAL_RCC_OscConfig+0x378>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d110      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x358>
 8004eb2:	4b60      	ldr	r3, [pc, #384]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb8:	4a5e      	ldr	r2, [pc, #376]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004eba:	f043 0304 	orr.w	r3, r3, #4
 8004ebe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec8:	4a5a      	ldr	r2, [pc, #360]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ed2:	e00f      	b.n	8004ef4 <HAL_RCC_OscConfig+0x378>
 8004ed4:	4b57      	ldr	r3, [pc, #348]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	4a56      	ldr	r2, [pc, #344]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee4:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eea:	4a52      	ldr	r2, [pc, #328]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d016      	beq.n	8004f2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fd f8da 	bl	80020b4 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f04:	f7fd f8d6 	bl	80020b4 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e138      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1a:	4b46      	ldr	r3, [pc, #280]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ed      	beq.n	8004f04 <HAL_RCC_OscConfig+0x388>
 8004f28:	e015      	b.n	8004f56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fd f8c3 	bl	80020b4 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fd f8bf 	bl	80020b4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e121      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f48:	4b3a      	ldr	r3, [pc, #232]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ed      	bne.n	8004f32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5c:	4b35      	ldr	r3, [pc, #212]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f60:	4a34      	ldr	r2, [pc, #208]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d03c      	beq.n	8004fee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f82:	4a2c      	ldr	r2, [pc, #176]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fd f892 	bl	80020b4 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f94:	f7fd f88e 	bl	80020b4 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0f2      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fa6:	4b23      	ldr	r3, [pc, #140]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ef      	beq.n	8004f94 <HAL_RCC_OscConfig+0x418>
 8004fb4:	e01b      	b.n	8004fee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7fd f875 	bl	80020b4 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fce:	f7fd f871 	bl	80020b4 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0d5      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fe0:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ef      	bne.n	8004fce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80c9 	beq.w	800518a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	2b0c      	cmp	r3, #12
 8005002:	f000 8083 	beq.w	800510c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d15e      	bne.n	80050cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <HAL_RCC_OscConfig+0x4b8>)
 8005014:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fd f84b 	bl	80020b4 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005020:	e00c      	b.n	800503c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005022:	f7fd f847 	bl	80020b4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d905      	bls.n	800503c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e0ab      	b.n	800518c <HAL_RCC_OscConfig+0x610>
 8005034:	40021000 	.word	0x40021000
 8005038:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503c:	4b55      	ldr	r3, [pc, #340]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ec      	bne.n	8005022 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005048:	4b52      	ldr	r3, [pc, #328]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	4b52      	ldr	r3, [pc, #328]	@ (8005198 <HAL_RCC_OscConfig+0x61c>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6a11      	ldr	r1, [r2, #32]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005058:	3a01      	subs	r2, #1
 800505a:	0112      	lsls	r2, r2, #4
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005062:	0212      	lsls	r2, r2, #8
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800506a:	0852      	lsrs	r2, r2, #1
 800506c:	3a01      	subs	r2, #1
 800506e:	0552      	lsls	r2, r2, #21
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0652      	lsls	r2, r2, #25
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005082:	06d2      	lsls	r2, r2, #27
 8005084:	430a      	orrs	r2, r1
 8005086:	4943      	ldr	r1, [pc, #268]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 8005088:	4313      	orrs	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b41      	ldr	r3, [pc, #260]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a40      	ldr	r2, [pc, #256]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005098:	4b3e      	ldr	r3, [pc, #248]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a3d      	ldr	r2, [pc, #244]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd f806 	bl	80020b4 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd f802 	bl	80020b4 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e066      	b.n	800518c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4b35      	ldr	r3, [pc, #212]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x530>
 80050ca:	e05e      	b.n	800518a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050cc:	4b31      	ldr	r3, [pc, #196]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a30      	ldr	r2, [pc, #192]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fc ffec 	bl	80020b4 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fc ffe8 	bl	80020b4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e04c      	b.n	800518c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f2:	4b28      	ldr	r3, [pc, #160]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050fe:	4b25      	ldr	r3, [pc, #148]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	4924      	ldr	r1, [pc, #144]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 8005104:	4b25      	ldr	r3, [pc, #148]	@ (800519c <HAL_RCC_OscConfig+0x620>)
 8005106:	4013      	ands	r3, r2
 8005108:	60cb      	str	r3, [r1, #12]
 800510a:	e03e      	b.n	800518a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e039      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005118:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <HAL_RCC_OscConfig+0x618>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 0203 	and.w	r2, r3, #3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	429a      	cmp	r2, r3
 800512a:	d12c      	bne.n	8005186 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	3b01      	subs	r3, #1
 8005138:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d123      	bne.n	8005186 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d11b      	bne.n	8005186 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d113      	bne.n	8005186 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d109      	bne.n	8005186 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	3b01      	subs	r3, #1
 8005180:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d001      	beq.n	800518a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40021000 	.word	0x40021000
 8005198:	019f800c 	.word	0x019f800c
 800519c:	feeefffc 	.word	0xfeeefffc

080051a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e11e      	b.n	80053f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b8:	4b91      	ldr	r3, [pc, #580]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d910      	bls.n	80051e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 020f 	bic.w	r2, r3, #15
 80051ce:	498c      	ldr	r1, [pc, #560]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e106      	b.n	80053f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d073      	beq.n	80052dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d129      	bne.n	8005250 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fc:	4b81      	ldr	r3, [pc, #516]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0f4      	b.n	80053f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800520c:	f000 f99e 	bl	800554c <RCC_GetSysClockFreqFromPLLSource>
 8005210:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4a7c      	ldr	r2, [pc, #496]	@ (8005408 <HAL_RCC_ClockConfig+0x268>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d93f      	bls.n	800529a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800521a:	4b7a      	ldr	r3, [pc, #488]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800522e:	2b00      	cmp	r3, #0
 8005230:	d033      	beq.n	800529a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005236:	2b00      	cmp	r3, #0
 8005238:	d12f      	bne.n	800529a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800523a:	4b72      	ldr	r3, [pc, #456]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005242:	4a70      	ldr	r2, [pc, #448]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 8005244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005248:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800524a:	2380      	movs	r3, #128	@ 0x80
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e024      	b.n	800529a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d107      	bne.n	8005268 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005258:	4b6a      	ldr	r3, [pc, #424]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0c6      	b.n	80053f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005268:	4b66      	ldr	r3, [pc, #408]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0be      	b.n	80053f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005278:	f000 f8ce 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800527c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4a61      	ldr	r2, [pc, #388]	@ (8005408 <HAL_RCC_ClockConfig+0x268>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d909      	bls.n	800529a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005286:	4b5f      	ldr	r3, [pc, #380]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800528e:	4a5d      	ldr	r2, [pc, #372]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 8005290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005294:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005296:	2380      	movs	r3, #128	@ 0x80
 8005298:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4b5a      	ldr	r3, [pc, #360]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4957      	ldr	r1, [pc, #348]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ac:	f7fc ff02 	bl	80020b4 <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fc fefe 	bl	80020b4 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e095      	b.n	80053f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 020c 	and.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1eb      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f4:	4b43      	ldr	r3, [pc, #268]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a42      	ldr	r2, [pc, #264]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80052fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800530c:	4b3d      	ldr	r3, [pc, #244]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005314:	4a3b      	ldr	r2, [pc, #236]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 8005316:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800531a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4936      	ldr	r1, [pc, #216]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
 800532e:	e008      	b.n	8005342 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b80      	cmp	r3, #128	@ 0x80
 8005334:	d105      	bne.n	8005342 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005336:	4b33      	ldr	r3, [pc, #204]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4a32      	ldr	r2, [pc, #200]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800533c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005340:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005342:	4b2f      	ldr	r3, [pc, #188]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d21d      	bcs.n	800538c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005350:	4b2b      	ldr	r3, [pc, #172]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f023 020f 	bic.w	r2, r3, #15
 8005358:	4929      	ldr	r1, [pc, #164]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	4313      	orrs	r3, r2
 800535e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005360:	f7fc fea8 	bl	80020b4 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	e00a      	b.n	800537e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005368:	f7fc fea4 	bl	80020b4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e03b      	b.n	80053f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b20      	ldr	r3, [pc, #128]	@ (8005400 <HAL_RCC_ClockConfig+0x260>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d1ed      	bne.n	8005368 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005398:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4917      	ldr	r1, [pc, #92]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053b6:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	490f      	ldr	r1, [pc, #60]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ca:	f000 f825 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <HAL_RCC_ClockConfig+0x264>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	490c      	ldr	r1, [pc, #48]	@ (800540c <HAL_RCC_ClockConfig+0x26c>)
 80053dc:	5ccb      	ldrb	r3, [r1, r3]
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	fa22 f303 	lsr.w	r3, r2, r3
 80053e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <HAL_RCC_ClockConfig+0x270>)
 80053e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <HAL_RCC_ClockConfig+0x274>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc fe14 	bl	800201c <HAL_InitTick>
 80053f4:	4603      	mov	r3, r0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40022000 	.word	0x40022000
 8005404:	40021000 	.word	0x40021000
 8005408:	04c4b400 	.word	0x04c4b400
 800540c:	08018acc 	.word	0x08018acc
 8005410:	20000004 	.word	0x20000004
 8005414:	20000008 	.word	0x20000008

08005418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800541e:	4b2c      	ldr	r3, [pc, #176]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b04      	cmp	r3, #4
 8005428:	d102      	bne.n	8005430 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800542a:	4b2a      	ldr	r3, [pc, #168]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	e047      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005430:	4b27      	ldr	r3, [pc, #156]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d102      	bne.n	8005442 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800543c:	4b26      	ldr	r3, [pc, #152]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	e03e      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005442:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d136      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800544e:	4b20      	ldr	r3, [pc, #128]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005458:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	3301      	adds	r3, #1
 8005464:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d10c      	bne.n	8005486 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800546c:	4a1a      	ldr	r2, [pc, #104]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	4a16      	ldr	r2, [pc, #88]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005476:	68d2      	ldr	r2, [r2, #12]
 8005478:	0a12      	lsrs	r2, r2, #8
 800547a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	617b      	str	r3, [r7, #20]
      break;
 8005484:	e00c      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005486:	4a13      	ldr	r2, [pc, #76]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	4a10      	ldr	r2, [pc, #64]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005490:	68d2      	ldr	r2, [r2, #12]
 8005492:	0a12      	lsrs	r2, r2, #8
 8005494:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005498:	fb02 f303 	mul.w	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]
      break;
 800549e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	0e5b      	lsrs	r3, r3, #25
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e001      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054c0:	693b      	ldr	r3, [r7, #16]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	016e3600 	.word	0x016e3600

080054dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e0:	4b03      	ldr	r3, [pc, #12]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000004 	.word	0x20000004

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054f8:	f7ff fff0 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4904      	ldr	r1, [pc, #16]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x28>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	08018adc 	.word	0x08018adc

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005524:	f7ff ffda 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0adb      	lsrs	r3, r3, #11
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4904      	ldr	r1, [pc, #16]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	08018adc 	.word	0x08018adc

0800554c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005552:	4b1e      	ldr	r3, [pc, #120]	@ (80055cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d10c      	bne.n	800558a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005570:	4a17      	ldr	r2, [pc, #92]	@ (80055d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	4a14      	ldr	r2, [pc, #80]	@ (80055cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800557a:	68d2      	ldr	r2, [r2, #12]
 800557c:	0a12      	lsrs	r2, r2, #8
 800557e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
    break;
 8005588:	e00c      	b.n	80055a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800558a:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	4a0e      	ldr	r2, [pc, #56]	@ (80055cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005594:	68d2      	ldr	r2, [r2, #12]
 8005596:	0a12      	lsrs	r2, r2, #8
 8005598:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
    break;
 80055a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055a4:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	0e5b      	lsrs	r3, r3, #25
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	3301      	adds	r3, #1
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80055be:	687b      	ldr	r3, [r7, #4]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40021000 	.word	0x40021000
 80055d0:	016e3600 	.word	0x016e3600
 80055d4:	00f42400 	.word	0x00f42400

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e0:	2300      	movs	r3, #0
 80055e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e4:	2300      	movs	r3, #0
 80055e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8098 	beq.w	8005726 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f6:	2300      	movs	r3, #0
 80055f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fa:	4b43      	ldr	r3, [pc, #268]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	4b40      	ldr	r3, [pc, #256]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560a:	4a3f      	ldr	r2, [pc, #252]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005610:	6593      	str	r3, [r2, #88]	@ 0x58
 8005612:	4b3d      	ldr	r3, [pc, #244]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561e:	2301      	movs	r3, #1
 8005620:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005622:	4b3a      	ldr	r3, [pc, #232]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a39      	ldr	r2, [pc, #228]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800562e:	f7fc fd41 	bl	80020b4 <HAL_GetTick>
 8005632:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005634:	e009      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005636:	f7fc fd3d 	bl	80020b4 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d902      	bls.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	74fb      	strb	r3, [r7, #19]
        break;
 8005648:	e005      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800564a:	4b30      	ldr	r3, [pc, #192]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0ef      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d159      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800565c:	4b2a      	ldr	r3, [pc, #168]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005666:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01e      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	429a      	cmp	r2, r3
 8005676:	d019      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005678:	4b23      	ldr	r3, [pc, #140]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005682:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005684:	4b20      	ldr	r3, [pc, #128]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568a:	4a1f      	ldr	r2, [pc, #124]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005694:	4b1c      	ldr	r3, [pc, #112]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569a:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056a4:	4a18      	ldr	r2, [pc, #96]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fc fcfd 	bl	80020b4 <HAL_GetTick>
 80056ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056bc:	e00b      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fc fcf9 	bl	80020b4 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d902      	bls.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	74fb      	strb	r3, [r7, #19]
            break;
 80056d4:	e006      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ec      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ea:	4b07      	ldr	r3, [pc, #28]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	4903      	ldr	r1, [pc, #12]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005700:	e008      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	74bb      	strb	r3, [r7, #18]
 8005706:	e005      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005714:	7c7b      	ldrb	r3, [r7, #17]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d105      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4ba7      	ldr	r3, [pc, #668]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	4aa6      	ldr	r2, [pc, #664]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005720:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005724:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005732:	4ba1      	ldr	r3, [pc, #644]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	f023 0203 	bic.w	r2, r3, #3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	499d      	ldr	r1, [pc, #628]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005754:	4b98      	ldr	r3, [pc, #608]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f023 020c 	bic.w	r2, r3, #12
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4995      	ldr	r1, [pc, #596]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005776:	4b90      	ldr	r3, [pc, #576]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	498c      	ldr	r1, [pc, #560]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005798:	4b87      	ldr	r3, [pc, #540]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	4984      	ldr	r1, [pc, #528]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057ba:	4b7f      	ldr	r3, [pc, #508]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	497b      	ldr	r1, [pc, #492]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057dc:	4b76      	ldr	r3, [pc, #472]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	4973      	ldr	r1, [pc, #460]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057fe:	4b6e      	ldr	r3, [pc, #440]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	496a      	ldr	r1, [pc, #424]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005820:	4b65      	ldr	r3, [pc, #404]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	4962      	ldr	r1, [pc, #392]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005842:	4b5d      	ldr	r3, [pc, #372]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	4959      	ldr	r1, [pc, #356]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005864:	4b54      	ldr	r3, [pc, #336]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800586a:	f023 0203 	bic.w	r2, r3, #3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005872:	4951      	ldr	r1, [pc, #324]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005886:	4b4c      	ldr	r3, [pc, #304]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005894:	4948      	ldr	r1, [pc, #288]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a8:	4b43      	ldr	r3, [pc, #268]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	4940      	ldr	r1, [pc, #256]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c6:	d105      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c8:	4b3b      	ldr	r3, [pc, #236]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a3a      	ldr	r2, [pc, #232]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d015      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058e0:	4b35      	ldr	r3, [pc, #212]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ee:	4932      	ldr	r1, [pc, #200]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fe:	d105      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005900:	4b2d      	ldr	r3, [pc, #180]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4a2c      	ldr	r2, [pc, #176]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800590a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005918:	4b27      	ldr	r3, [pc, #156]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	4924      	ldr	r1, [pc, #144]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005936:	d105      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005938:	4b1f      	ldr	r3, [pc, #124]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a1e      	ldr	r2, [pc, #120]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005942:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d015      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005950:	4b19      	ldr	r3, [pc, #100]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595e:	4916      	ldr	r1, [pc, #88]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596e:	d105      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005970:	4b11      	ldr	r3, [pc, #68]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a10      	ldr	r2, [pc, #64]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800597a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d019      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005988:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	4908      	ldr	r1, [pc, #32]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059a6:	d109      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a8:	4b03      	ldr	r3, [pc, #12]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a02      	ldr	r2, [pc, #8]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059b2:	60d3      	str	r3, [r2, #12]
 80059b4:	e002      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059c8:	4b29      	ldr	r3, [pc, #164]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d6:	4926      	ldr	r1, [pc, #152]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059e6:	d105      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059e8:	4b21      	ldr	r3, [pc, #132]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a20      	ldr	r2, [pc, #128]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d015      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005a00:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0e:	4918      	ldr	r1, [pc, #96]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1e:	d105      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a20:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4a12      	ldr	r2, [pc, #72]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d015      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a38:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	490a      	ldr	r1, [pc, #40]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a56:	d105      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a58:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4a04      	ldr	r2, [pc, #16]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a64:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e049      	b.n	8005b1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fc f950 	bl	8001d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 fb3c 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d001      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e054      	b.n	8005be6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a26      	ldr	r2, [pc, #152]	@ (8005bf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d022      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b66:	d01d      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a22      	ldr	r2, [pc, #136]	@ (8005bf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a21      	ldr	r2, [pc, #132]	@ (8005bfc <HAL_TIM_Base_Start_IT+0xd8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	@ (8005c00 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	@ (8005c08 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c0c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d115      	bne.n	8005bd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <HAL_TIM_Base_Start_IT+0xec>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d015      	beq.n	8005be2 <HAL_TIM_Base_Start_IT+0xbe>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbc:	d011      	beq.n	8005be2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	e008      	b.n	8005be2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e000      	b.n	8005be4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40015000 	.word	0x40015000
 8005c10:	00010007 	.word	0x00010007

08005c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d020      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0202 	mvn.w	r2, #2
 8005c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa48 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa3a 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fa4b 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d020      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01b      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0204 	mvn.w	r2, #4
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa22 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa14 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fa25 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d020      	beq.n	8005d10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0208 	mvn.w	r2, #8
 8005ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f9fc 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9ee 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9ff 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d020      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01b      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0210 	mvn.w	r2, #16
 8005d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2208      	movs	r2, #8
 8005d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9d6 	bl	80060f4 <HAL_TIM_IC_CaptureCallback>
 8005d48:	e005      	b.n	8005d56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9c8 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f9d9 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0201 	mvn.w	r2, #1
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fb fca0 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00c      	beq.n	8005dae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fbb1 	bl	8006510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00c      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fba9 	bl	8006524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f993 	bl	800611c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f06f 0220 	mvn.w	r2, #32
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb71 	bl	80064fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb7d 	bl	8006538 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00c      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fb75 	bl	800654c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb6d 	bl	8006560 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb65 	bl	8006574 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e0f6      	b.n	80060be <HAL_TIM_ConfigClockSource+0x20a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005eee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005efa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6f      	ldr	r2, [pc, #444]	@ (80060c8 <HAL_TIM_ConfigClockSource+0x214>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f000 80c1 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f10:	4a6d      	ldr	r2, [pc, #436]	@ (80060c8 <HAL_TIM_ConfigClockSource+0x214>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f200 80c6 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f18:	4a6c      	ldr	r2, [pc, #432]	@ (80060cc <HAL_TIM_ConfigClockSource+0x218>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	f000 80b9 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f20:	4a6a      	ldr	r2, [pc, #424]	@ (80060cc <HAL_TIM_ConfigClockSource+0x218>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	f200 80be 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f28:	4a69      	ldr	r2, [pc, #420]	@ (80060d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	f000 80b1 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f30:	4a67      	ldr	r2, [pc, #412]	@ (80060d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f200 80b6 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f38:	4a66      	ldr	r2, [pc, #408]	@ (80060d4 <HAL_TIM_ConfigClockSource+0x220>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	f000 80a9 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f40:	4a64      	ldr	r2, [pc, #400]	@ (80060d4 <HAL_TIM_ConfigClockSource+0x220>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f200 80ae 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f48:	4a63      	ldr	r2, [pc, #396]	@ (80060d8 <HAL_TIM_ConfigClockSource+0x224>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	f000 80a1 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f50:	4a61      	ldr	r2, [pc, #388]	@ (80060d8 <HAL_TIM_ConfigClockSource+0x224>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	f200 80a6 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f58:	4a60      	ldr	r2, [pc, #384]	@ (80060dc <HAL_TIM_ConfigClockSource+0x228>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	f000 8099 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f60:	4a5e      	ldr	r2, [pc, #376]	@ (80060dc <HAL_TIM_ConfigClockSource+0x228>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	f200 809e 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f6c:	f000 8091 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f74:	f200 8096 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f7c:	f000 8089 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f84:	f200 808e 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f8c:	d03e      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x158>
 8005f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f92:	f200 8087 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9a:	f000 8086 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x1f6>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa2:	d87f      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa4:	2b70      	cmp	r3, #112	@ 0x70
 8005fa6:	d01a      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x12a>
 8005fa8:	2b70      	cmp	r3, #112	@ 0x70
 8005faa:	d87b      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fac:	2b60      	cmp	r3, #96	@ 0x60
 8005fae:	d050      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x19e>
 8005fb0:	2b60      	cmp	r3, #96	@ 0x60
 8005fb2:	d877      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fb4:	2b50      	cmp	r3, #80	@ 0x50
 8005fb6:	d03c      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x17e>
 8005fb8:	2b50      	cmp	r3, #80	@ 0x50
 8005fba:	d873      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fbc:	2b40      	cmp	r3, #64	@ 0x40
 8005fbe:	d058      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x1be>
 8005fc0:	2b40      	cmp	r3, #64	@ 0x40
 8005fc2:	d86f      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fc4:	2b30      	cmp	r3, #48	@ 0x30
 8005fc6:	d064      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005fc8:	2b30      	cmp	r3, #48	@ 0x30
 8005fca:	d86b      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d060      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d867      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05c      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d05a      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x1de>
 8005fdc:	e062      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fee:	f000 f9cf 	bl	8006390 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	609a      	str	r2, [r3, #8]
      break;
 800600a:	e04f      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800601c:	f000 f9b8 	bl	8006390 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800602e:	609a      	str	r2, [r3, #8]
      break;
 8006030:	e03c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603e:	461a      	mov	r2, r3
 8006040:	f000 f92a 	bl	8006298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2150      	movs	r1, #80	@ 0x50
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f983 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 8006050:	e02c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800605e:	461a      	mov	r2, r3
 8006060:	f000 f949 	bl	80062f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2160      	movs	r1, #96	@ 0x60
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f973 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 8006070:	e01c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607e:	461a      	mov	r2, r3
 8006080:	f000 f90a 	bl	8006298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2140      	movs	r1, #64	@ 0x40
 800608a:	4618      	mov	r0, r3
 800608c:	f000 f963 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 8006090:	e00c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f000 f95a 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80060a2:	e003      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]
      break;
 80060a8:	e000      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80060aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	00100070 	.word	0x00100070
 80060cc:	00100060 	.word	0x00100060
 80060d0:	00100050 	.word	0x00100050
 80060d4:	00100040 	.word	0x00100040
 80060d8:	00100030 	.word	0x00100030
 80060dc:	00100020 	.word	0x00100020

080060e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a4c      	ldr	r2, [pc, #304]	@ (8006274 <TIM_Base_SetConfig+0x144>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d017      	beq.n	8006178 <TIM_Base_SetConfig+0x48>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800614e:	d013      	beq.n	8006178 <TIM_Base_SetConfig+0x48>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a49      	ldr	r2, [pc, #292]	@ (8006278 <TIM_Base_SetConfig+0x148>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00f      	beq.n	8006178 <TIM_Base_SetConfig+0x48>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a48      	ldr	r2, [pc, #288]	@ (800627c <TIM_Base_SetConfig+0x14c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00b      	beq.n	8006178 <TIM_Base_SetConfig+0x48>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a47      	ldr	r2, [pc, #284]	@ (8006280 <TIM_Base_SetConfig+0x150>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_Base_SetConfig+0x48>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a46      	ldr	r2, [pc, #280]	@ (8006284 <TIM_Base_SetConfig+0x154>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_Base_SetConfig+0x48>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a45      	ldr	r2, [pc, #276]	@ (8006288 <TIM_Base_SetConfig+0x158>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d108      	bne.n	800618a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a39      	ldr	r2, [pc, #228]	@ (8006274 <TIM_Base_SetConfig+0x144>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d023      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006198:	d01f      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a36      	ldr	r2, [pc, #216]	@ (8006278 <TIM_Base_SetConfig+0x148>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01b      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a35      	ldr	r2, [pc, #212]	@ (800627c <TIM_Base_SetConfig+0x14c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d017      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a34      	ldr	r2, [pc, #208]	@ (8006280 <TIM_Base_SetConfig+0x150>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a33      	ldr	r2, [pc, #204]	@ (8006284 <TIM_Base_SetConfig+0x154>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00f      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a33      	ldr	r2, [pc, #204]	@ (800628c <TIM_Base_SetConfig+0x15c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00b      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a32      	ldr	r2, [pc, #200]	@ (8006290 <TIM_Base_SetConfig+0x160>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a31      	ldr	r2, [pc, #196]	@ (8006294 <TIM_Base_SetConfig+0x164>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_Base_SetConfig+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006288 <TIM_Base_SetConfig+0x158>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a18      	ldr	r2, [pc, #96]	@ (8006274 <TIM_Base_SetConfig+0x144>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <TIM_Base_SetConfig+0x110>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a1a      	ldr	r2, [pc, #104]	@ (8006284 <TIM_Base_SetConfig+0x154>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_Base_SetConfig+0x110>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a1a      	ldr	r2, [pc, #104]	@ (800628c <TIM_Base_SetConfig+0x15c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_Base_SetConfig+0x110>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a19      	ldr	r2, [pc, #100]	@ (8006290 <TIM_Base_SetConfig+0x160>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_Base_SetConfig+0x110>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <TIM_Base_SetConfig+0x164>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0x110>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a13      	ldr	r2, [pc, #76]	@ (8006288 <TIM_Base_SetConfig+0x158>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d103      	bne.n	8006248 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d105      	bne.n	8006266 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]
  }
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40015000 	.word	0x40015000
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800

08006298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f023 0201 	bic.w	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f023 030a 	bic.w	r3, r3, #10
 80062d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b087      	sub	sp, #28
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f023 0210 	bic.w	r2, r3, #16
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	031b      	lsls	r3, r3, #12
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006332:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800636c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	f043 0307 	orr.w	r3, r3, #7
 800637c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	609a      	str	r2, [r3, #8]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	609a      	str	r2, [r3, #8]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e074      	b.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a34      	ldr	r2, [pc, #208]	@ (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a33      	ldr	r2, [pc, #204]	@ (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d004      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a31      	ldr	r2, [pc, #196]	@ (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800642c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800643e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a21      	ldr	r2, [pc, #132]	@ (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d022      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006468:	d01d      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d018      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00e      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a15      	ldr	r2, [pc, #84]	@ (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d009      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a18      	ldr	r2, [pc, #96]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a11      	ldr	r2, [pc, #68]	@ (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10c      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40013400 	.word	0x40013400
 80064e8:	40015000 	.word	0x40015000
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40014000 	.word	0x40014000

080064fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e042      	b.n	8006620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fb fc35 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2224      	movs	r2, #36	@ 0x24
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 f806 	bl	80075e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fd07 	bl	8006fec <UART_SetConfig>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e01b      	b.n	8006620 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f885 	bl	8007728 <UART_CheckIdleState>
 800661e:	4603      	mov	r3, r0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	@ 0x28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663c:	2b20      	cmp	r3, #32
 800663e:	d167      	bne.n	8006710 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Transmit_DMA+0x24>
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e060      	b.n	8006712 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	88fa      	ldrh	r2, [r7, #6]
 8006662:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2221      	movs	r2, #33	@ 0x21
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d028      	beq.n	80066d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006682:	4a26      	ldr	r2, [pc, #152]	@ (800671c <HAL_UART_Transmit_DMA+0xf4>)
 8006684:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800668a:	4a25      	ldr	r2, [pc, #148]	@ (8006720 <HAL_UART_Transmit_DMA+0xf8>)
 800668c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006692:	4a24      	ldr	r2, [pc, #144]	@ (8006724 <HAL_UART_Transmit_DMA+0xfc>)
 8006694:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800669a:	2200      	movs	r2, #0
 800669c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a6:	4619      	mov	r1, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3328      	adds	r3, #40	@ 0x28
 80066ae:	461a      	mov	r2, r3
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	f7fd fce5 	bl	8004080 <HAL_DMA_Start_IT>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2210      	movs	r2, #16
 80066c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e020      	b.n	8006712 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2240      	movs	r2, #64	@ 0x40
 80066d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	613b      	str	r3, [r7, #16]
   return(result);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f8:	623a      	str	r2, [r7, #32]
 80066fa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	69f9      	ldr	r1, [r7, #28]
 80066fe:	6a3a      	ldr	r2, [r7, #32]
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	61bb      	str	r3, [r7, #24]
   return(result);
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e000      	b.n	8006712 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006710:	2302      	movs	r3, #2
  }
}
 8006712:	4618      	mov	r0, r3
 8006714:	3728      	adds	r7, #40	@ 0x28
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	08007bf3 	.word	0x08007bf3
 8006720:	08007c8d 	.word	0x08007c8d
 8006724:	08007e13 	.word	0x08007e13

08006728 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	@ 0x28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800673c:	2b20      	cmp	r3, #32
 800673e:	d137      	bne.n	80067b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_UART_Receive_DMA+0x24>
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e030      	b.n	80067b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a18      	ldr	r2, [pc, #96]	@ (80067bc <HAL_UART_Receive_DMA+0x94>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d01f      	beq.n	80067a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d018      	beq.n	80067a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	613b      	str	r3, [r7, #16]
   return(result);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	623b      	str	r3, [r7, #32]
 800678e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	69f9      	ldr	r1, [r7, #28]
 8006792:	6a3a      	ldr	r2, [r7, #32]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	61bb      	str	r3, [r7, #24]
   return(result);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e6      	bne.n	800676e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	461a      	mov	r2, r3
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f001 f8d6 	bl	8007958 <UART_Start_Receive_DMA>
 80067ac:	4603      	mov	r3, r0
 80067ae:	e000      	b.n	80067b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067b0:	2302      	movs	r3, #2
  }
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3728      	adds	r7, #40	@ 0x28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40008000 	.word	0x40008000

080067c0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b090      	sub	sp, #64	@ 0x40
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e2:	2b80      	cmp	r3, #128	@ 0x80
 80067e4:	d139      	bne.n	800685a <HAL_UART_DMAStop+0x9a>
 80067e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e8:	2b21      	cmp	r3, #33	@ 0x21
 80067ea:	d136      	bne.n	800685a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006802:	637b      	str	r3, [r7, #52]	@ 0x34
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800680c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800680e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d015      	beq.n	8006854 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800682c:	4618      	mov	r0, r3
 800682e:	f7fd fca2 	bl	8004176 <HAL_DMA_Abort>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00d      	beq.n	8006854 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800683c:	4618      	mov	r0, r3
 800683e:	f7fd fe09 	bl	8004454 <HAL_DMA_GetError>
 8006842:	4603      	mov	r3, r0
 8006844:	2b20      	cmp	r3, #32
 8006846:	d105      	bne.n	8006854 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2210      	movs	r2, #16
 800684c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e047      	b.n	80068e4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 f925 	bl	8007aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006864:	2b40      	cmp	r3, #64	@ 0x40
 8006866:	d13c      	bne.n	80068e2 <HAL_UART_DMAStop+0x122>
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	2b22      	cmp	r3, #34	@ 0x22
 800686c:	d139      	bne.n	80068e2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	60bb      	str	r3, [r7, #8]
   return(result);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006884:	633b      	str	r3, [r7, #48]	@ 0x30
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3308      	adds	r3, #8
 800688c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800688e:	61ba      	str	r2, [r7, #24]
 8006890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	613b      	str	r3, [r7, #16]
   return(result);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e5      	bne.n	800686e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d017      	beq.n	80068dc <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fd fc5f 	bl	8004176 <HAL_DMA_Abort>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00e      	beq.n	80068dc <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fd fdc5 	bl	8004454 <HAL_DMA_GetError>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d105      	bne.n	80068dc <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2210      	movs	r2, #16
 80068d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e003      	b.n	80068e4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f922 	bl	8007b26 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3740      	adds	r7, #64	@ 0x40
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b0ba      	sub	sp, #232	@ 0xe8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006916:	f640 030f 	movw	r3, #2063	@ 0x80f
 800691a:	4013      	ands	r3, r2
 800691c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11b      	bne.n	8006960 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d015      	beq.n	8006960 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d105      	bne.n	800694c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8300 	beq.w	8006f56 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
      }
      return;
 800695e:	e2fa      	b.n	8006f56 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8123 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800696a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800696e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ba4 <HAL_UART_IRQHandler+0x2b8>)
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800697a:	4b8b      	ldr	r3, [pc, #556]	@ (8006ba8 <HAL_UART_IRQHandler+0x2bc>)
 800697c:	4013      	ands	r3, r2
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8116 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d011      	beq.n	80069b4 <HAL_UART_IRQHandler+0xc8>
 8006990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2201      	movs	r2, #1
 80069a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d011      	beq.n	80069e4 <HAL_UART_IRQHandler+0xf8>
 80069c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2202      	movs	r2, #2
 80069d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d011      	beq.n	8006a14 <HAL_UART_IRQHandler+0x128>
 80069f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2204      	movs	r2, #4
 8006a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0a:	f043 0202 	orr.w	r2, r3, #2
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d105      	bne.n	8006a38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a30:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba4 <HAL_UART_IRQHandler+0x2b8>)
 8006a32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a46:	f043 0208 	orr.w	r2, r3, #8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d012      	beq.n	8006a82 <HAL_UART_IRQHandler+0x196>
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00c      	beq.n	8006a82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8266 	beq.w	8006f5a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d013      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d105      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad6:	2b40      	cmp	r3, #64	@ 0x40
 8006ad8:	d005      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ade:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d054      	beq.n	8006b90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f81d 	bl	8007b26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d146      	bne.n	8006b88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3308      	adds	r3, #8
 8006b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1d9      	bne.n	8006afa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d017      	beq.n	8006b80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b56:	4a15      	ldr	r2, [pc, #84]	@ (8006bac <HAL_UART_IRQHandler+0x2c0>)
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fd fb61 	bl	8004228 <HAL_DMA_Abort_IT>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d019      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7e:	e00f      	b.n	8006ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa1d 	bl	8006fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b86:	e00b      	b.n	8006ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fa19 	bl	8006fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8e:	e007      	b.n	8006ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa15 	bl	8006fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b9e:	e1dc      	b.n	8006f5a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	bf00      	nop
    return;
 8006ba2:	e1da      	b.n	8006f5a <HAL_UART_IRQHandler+0x66e>
 8006ba4:	10000001 	.word	0x10000001
 8006ba8:	04000120 	.word	0x04000120
 8006bac:	08007e93 	.word	0x08007e93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	f040 8170 	bne.w	8006e9a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 8169 	beq.w	8006e9a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8162 	beq.w	8006e9a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2210      	movs	r2, #16
 8006bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be8:	2b40      	cmp	r3, #64	@ 0x40
 8006bea:	f040 80d8 	bne.w	8006d9e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80af 	beq.w	8006d64 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c10:	429a      	cmp	r2, r3
 8006c12:	f080 80a7 	bcs.w	8006d64 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 8087 	bne.w	8006d42 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1da      	bne.n	8006c34 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ca2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e1      	bne.n	8006c7e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ce4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d10:	f023 0310 	bic.w	r3, r3, #16
 8006d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e4      	bne.n	8006d00 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fd fa1a 	bl	8004176 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f939 	bl	8006fd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d62:	e0fc      	b.n	8006f5e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	f040 80f5 	bne.w	8006f5e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	f040 80eb 	bne.w	8006f5e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f91c 	bl	8006fd4 <HAL_UARTEx_RxEventCallback>
      return;
 8006d9c:	e0df      	b.n	8006f5e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80d1 	beq.w	8006f62 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 80cc 	beq.w	8006f62 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e4      	bne.n	8006dca <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e28:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e1      	bne.n	8006e00 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 0310 	bic.w	r3, r3, #16
 8006e64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e4      	bne.n	8006e50 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f89e 	bl	8006fd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e98:	e063      	b.n	8006f62 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00e      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x5d8>
 8006ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d008      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f825 	bl	8007f0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ec2:	e051      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d014      	beq.n	8006efa <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d105      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d03a      	beq.n	8006f66 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
    }
    return;
 8006ef8:	e035      	b.n	8006f66 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <HAL_UART_IRQHandler+0x62e>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 ffcf 	bl	8007eb6 <UART_EndTransmit_IT>
    return;
 8006f18:	e026      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <HAL_UART_IRQHandler+0x64e>
 8006f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f2a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fffe 	bl	8007f34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f38:	e016      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d010      	beq.n	8006f68 <HAL_UART_IRQHandler+0x67c>
 8006f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da0c      	bge.n	8006f68 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 ffe6 	bl	8007f20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f54:	e008      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f56:	bf00      	nop
 8006f58:	e006      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f66:	bf00      	nop
  }
}
 8006f68:	37e8      	adds	r7, #232	@ 0xe8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop

08006f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff0:	b08c      	sub	sp, #48	@ 0x30
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	431a      	orrs	r2, r3
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	431a      	orrs	r2, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	4313      	orrs	r3, r2
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4baa      	ldr	r3, [pc, #680]	@ (80072c4 <UART_SetConfig+0x2d8>)
 800701c:	4013      	ands	r3, r2
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	6812      	ldr	r2, [r2, #0]
 8007022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007024:	430b      	orrs	r3, r1
 8007026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a9f      	ldr	r2, [pc, #636]	@ (80072c8 <UART_SetConfig+0x2dc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d004      	beq.n	8007058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007054:	4313      	orrs	r3, r2
 8007056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007062:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706c:	430b      	orrs	r3, r1
 800706e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	f023 010f 	bic.w	r1, r3, #15
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a90      	ldr	r2, [pc, #576]	@ (80072cc <UART_SetConfig+0x2e0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d125      	bne.n	80070dc <UART_SetConfig+0xf0>
 8007090:	4b8f      	ldr	r3, [pc, #572]	@ (80072d0 <UART_SetConfig+0x2e4>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b03      	cmp	r3, #3
 800709c:	d81a      	bhi.n	80070d4 <UART_SetConfig+0xe8>
 800709e:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <UART_SetConfig+0xb8>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070b5 	.word	0x080070b5
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e116      	b.n	80072ea <UART_SetConfig+0x2fe>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e112      	b.n	80072ea <UART_SetConfig+0x2fe>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ca:	e10e      	b.n	80072ea <UART_SetConfig+0x2fe>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d2:	e10a      	b.n	80072ea <UART_SetConfig+0x2fe>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070da:	e106      	b.n	80072ea <UART_SetConfig+0x2fe>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a7c      	ldr	r2, [pc, #496]	@ (80072d4 <UART_SetConfig+0x2e8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d138      	bne.n	8007158 <UART_SetConfig+0x16c>
 80070e6:	4b7a      	ldr	r3, [pc, #488]	@ (80072d0 <UART_SetConfig+0x2e4>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ec:	f003 030c 	and.w	r3, r3, #12
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	d82d      	bhi.n	8007150 <UART_SetConfig+0x164>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <UART_SetConfig+0x110>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007151 	.word	0x08007151
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007141 	.word	0x08007141
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007139 	.word	0x08007139
 8007120:	08007151 	.word	0x08007151
 8007124:	08007151 	.word	0x08007151
 8007128:	08007151 	.word	0x08007151
 800712c:	08007149 	.word	0x08007149
 8007130:	2300      	movs	r3, #0
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e0d8      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007138:	2302      	movs	r3, #2
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713e:	e0d4      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007146:	e0d0      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714e:	e0cc      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007156:	e0c8      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5e      	ldr	r2, [pc, #376]	@ (80072d8 <UART_SetConfig+0x2ec>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d125      	bne.n	80071ae <UART_SetConfig+0x1c2>
 8007162:	4b5b      	ldr	r3, [pc, #364]	@ (80072d0 <UART_SetConfig+0x2e4>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800716c:	2b30      	cmp	r3, #48	@ 0x30
 800716e:	d016      	beq.n	800719e <UART_SetConfig+0x1b2>
 8007170:	2b30      	cmp	r3, #48	@ 0x30
 8007172:	d818      	bhi.n	80071a6 <UART_SetConfig+0x1ba>
 8007174:	2b20      	cmp	r3, #32
 8007176:	d00a      	beq.n	800718e <UART_SetConfig+0x1a2>
 8007178:	2b20      	cmp	r3, #32
 800717a:	d814      	bhi.n	80071a6 <UART_SetConfig+0x1ba>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <UART_SetConfig+0x19a>
 8007180:	2b10      	cmp	r3, #16
 8007182:	d008      	beq.n	8007196 <UART_SetConfig+0x1aa>
 8007184:	e00f      	b.n	80071a6 <UART_SetConfig+0x1ba>
 8007186:	2300      	movs	r3, #0
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718c:	e0ad      	b.n	80072ea <UART_SetConfig+0x2fe>
 800718e:	2302      	movs	r3, #2
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007194:	e0a9      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007196:	2304      	movs	r3, #4
 8007198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719c:	e0a5      	b.n	80072ea <UART_SetConfig+0x2fe>
 800719e:	2308      	movs	r3, #8
 80071a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a4:	e0a1      	b.n	80072ea <UART_SetConfig+0x2fe>
 80071a6:	2310      	movs	r3, #16
 80071a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ac:	e09d      	b.n	80072ea <UART_SetConfig+0x2fe>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a4a      	ldr	r2, [pc, #296]	@ (80072dc <UART_SetConfig+0x2f0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d125      	bne.n	8007204 <UART_SetConfig+0x218>
 80071b8:	4b45      	ldr	r3, [pc, #276]	@ (80072d0 <UART_SetConfig+0x2e4>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c4:	d016      	beq.n	80071f4 <UART_SetConfig+0x208>
 80071c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c8:	d818      	bhi.n	80071fc <UART_SetConfig+0x210>
 80071ca:	2b80      	cmp	r3, #128	@ 0x80
 80071cc:	d00a      	beq.n	80071e4 <UART_SetConfig+0x1f8>
 80071ce:	2b80      	cmp	r3, #128	@ 0x80
 80071d0:	d814      	bhi.n	80071fc <UART_SetConfig+0x210>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <UART_SetConfig+0x1f0>
 80071d6:	2b40      	cmp	r3, #64	@ 0x40
 80071d8:	d008      	beq.n	80071ec <UART_SetConfig+0x200>
 80071da:	e00f      	b.n	80071fc <UART_SetConfig+0x210>
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e082      	b.n	80072ea <UART_SetConfig+0x2fe>
 80071e4:	2302      	movs	r3, #2
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e07e      	b.n	80072ea <UART_SetConfig+0x2fe>
 80071ec:	2304      	movs	r3, #4
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	e07a      	b.n	80072ea <UART_SetConfig+0x2fe>
 80071f4:	2308      	movs	r3, #8
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	e076      	b.n	80072ea <UART_SetConfig+0x2fe>
 80071fc:	2310      	movs	r3, #16
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007202:	e072      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a35      	ldr	r2, [pc, #212]	@ (80072e0 <UART_SetConfig+0x2f4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d12a      	bne.n	8007264 <UART_SetConfig+0x278>
 800720e:	4b30      	ldr	r3, [pc, #192]	@ (80072d0 <UART_SetConfig+0x2e4>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800721c:	d01a      	beq.n	8007254 <UART_SetConfig+0x268>
 800721e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007222:	d81b      	bhi.n	800725c <UART_SetConfig+0x270>
 8007224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007228:	d00c      	beq.n	8007244 <UART_SetConfig+0x258>
 800722a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800722e:	d815      	bhi.n	800725c <UART_SetConfig+0x270>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <UART_SetConfig+0x250>
 8007234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007238:	d008      	beq.n	800724c <UART_SetConfig+0x260>
 800723a:	e00f      	b.n	800725c <UART_SetConfig+0x270>
 800723c:	2300      	movs	r3, #0
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007242:	e052      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007244:	2302      	movs	r3, #2
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724a:	e04e      	b.n	80072ea <UART_SetConfig+0x2fe>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007252:	e04a      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725a:	e046      	b.n	80072ea <UART_SetConfig+0x2fe>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007262:	e042      	b.n	80072ea <UART_SetConfig+0x2fe>
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	@ (80072c8 <UART_SetConfig+0x2dc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d13a      	bne.n	80072e4 <UART_SetConfig+0x2f8>
 800726e:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <UART_SetConfig+0x2e4>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007274:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800727c:	d01a      	beq.n	80072b4 <UART_SetConfig+0x2c8>
 800727e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007282:	d81b      	bhi.n	80072bc <UART_SetConfig+0x2d0>
 8007284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007288:	d00c      	beq.n	80072a4 <UART_SetConfig+0x2b8>
 800728a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728e:	d815      	bhi.n	80072bc <UART_SetConfig+0x2d0>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <UART_SetConfig+0x2b0>
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007298:	d008      	beq.n	80072ac <UART_SetConfig+0x2c0>
 800729a:	e00f      	b.n	80072bc <UART_SetConfig+0x2d0>
 800729c:	2300      	movs	r3, #0
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e022      	b.n	80072ea <UART_SetConfig+0x2fe>
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e01e      	b.n	80072ea <UART_SetConfig+0x2fe>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b2:	e01a      	b.n	80072ea <UART_SetConfig+0x2fe>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ba:	e016      	b.n	80072ea <UART_SetConfig+0x2fe>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c2:	e012      	b.n	80072ea <UART_SetConfig+0x2fe>
 80072c4:	cfff69f3 	.word	0xcfff69f3
 80072c8:	40008000 	.word	0x40008000
 80072cc:	40013800 	.word	0x40013800
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40004400 	.word	0x40004400
 80072d8:	40004800 	.word	0x40004800
 80072dc:	40004c00 	.word	0x40004c00
 80072e0:	40005000 	.word	0x40005000
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4aae      	ldr	r2, [pc, #696]	@ (80075a8 <UART_SetConfig+0x5bc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	f040 8097 	bne.w	8007424 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d823      	bhi.n	8007346 <UART_SetConfig+0x35a>
 80072fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <UART_SetConfig+0x318>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007329 	.word	0x08007329
 8007308:	08007347 	.word	0x08007347
 800730c:	08007331 	.word	0x08007331
 8007310:	08007347 	.word	0x08007347
 8007314:	08007337 	.word	0x08007337
 8007318:	08007347 	.word	0x08007347
 800731c:	08007347 	.word	0x08007347
 8007320:	08007347 	.word	0x08007347
 8007324:	0800733f 	.word	0x0800733f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007328:	f7fe f8e4 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 800732c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800732e:	e010      	b.n	8007352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007330:	4b9e      	ldr	r3, [pc, #632]	@ (80075ac <UART_SetConfig+0x5c0>)
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007334:	e00d      	b.n	8007352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007336:	f7fe f86f 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800733a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007344:	e005      	b.n	8007352 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8130 	beq.w	80075ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	4a94      	ldr	r2, [pc, #592]	@ (80075b0 <UART_SetConfig+0x5c4>)
 8007360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007364:	461a      	mov	r2, r3
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	fbb3 f3f2 	udiv	r3, r3, r2
 800736c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4413      	add	r3, r2
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	429a      	cmp	r2, r3
 800737c:	d305      	bcc.n	800738a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	429a      	cmp	r2, r3
 8007388:	d903      	bls.n	8007392 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007390:	e113      	b.n	80075ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	2200      	movs	r2, #0
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	60fa      	str	r2, [r7, #12]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	4a84      	ldr	r2, [pc, #528]	@ (80075b0 <UART_SetConfig+0x5c4>)
 80073a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2200      	movs	r2, #0
 80073a8:	603b      	str	r3, [r7, #0]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073b4:	f7f8 ffec 	bl	8000390 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4610      	mov	r0, r2
 80073be:	4619      	mov	r1, r3
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	020b      	lsls	r3, r1, #8
 80073ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073ce:	0202      	lsls	r2, r0, #8
 80073d0:	6979      	ldr	r1, [r7, #20]
 80073d2:	6849      	ldr	r1, [r1, #4]
 80073d4:	0849      	lsrs	r1, r1, #1
 80073d6:	2000      	movs	r0, #0
 80073d8:	460c      	mov	r4, r1
 80073da:	4605      	mov	r5, r0
 80073dc:	eb12 0804 	adds.w	r8, r2, r4
 80073e0:	eb43 0905 	adc.w	r9, r3, r5
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	469a      	mov	sl, r3
 80073ec:	4693      	mov	fp, r2
 80073ee:	4652      	mov	r2, sl
 80073f0:	465b      	mov	r3, fp
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f8 ffcb 	bl	8000390 <__aeabi_uldivmod>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4613      	mov	r3, r2
 8007400:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007408:	d308      	bcc.n	800741c <UART_SetConfig+0x430>
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007410:	d204      	bcs.n	800741c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a3a      	ldr	r2, [r7, #32]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	e0ce      	b.n	80075ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007422:	e0ca      	b.n	80075ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800742c:	d166      	bne.n	80074fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800742e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007432:	2b08      	cmp	r3, #8
 8007434:	d827      	bhi.n	8007486 <UART_SetConfig+0x49a>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <UART_SetConfig+0x450>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007461 	.word	0x08007461
 8007440:	08007469 	.word	0x08007469
 8007444:	08007471 	.word	0x08007471
 8007448:	08007487 	.word	0x08007487
 800744c:	08007477 	.word	0x08007477
 8007450:	08007487 	.word	0x08007487
 8007454:	08007487 	.word	0x08007487
 8007458:	08007487 	.word	0x08007487
 800745c:	0800747f 	.word	0x0800747f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007460:	f7fe f848 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007466:	e014      	b.n	8007492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007468:	f7fe f85a 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 800746c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800746e:	e010      	b.n	8007492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007470:	4b4e      	ldr	r3, [pc, #312]	@ (80075ac <UART_SetConfig+0x5c0>)
 8007472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007474:	e00d      	b.n	8007492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007476:	f7fd ffcf 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800747a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800747c:	e009      	b.n	8007492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007484:	e005      	b.n	8007492 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8090 	beq.w	80075ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749e:	4a44      	ldr	r2, [pc, #272]	@ (80075b0 <UART_SetConfig+0x5c4>)
 80074a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ac:	005a      	lsls	r2, r3, #1
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	441a      	add	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	2b0f      	cmp	r3, #15
 80074c4:	d916      	bls.n	80074f4 <UART_SetConfig+0x508>
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074cc:	d212      	bcs.n	80074f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f023 030f 	bic.w	r3, r3, #15
 80074d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	8bfb      	ldrh	r3, [r7, #30]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	8bfa      	ldrh	r2, [r7, #30]
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	e062      	b.n	80075ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074fa:	e05e      	b.n	80075ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007500:	2b08      	cmp	r3, #8
 8007502:	d828      	bhi.n	8007556 <UART_SetConfig+0x56a>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <UART_SetConfig+0x520>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007531 	.word	0x08007531
 8007510:	08007539 	.word	0x08007539
 8007514:	08007541 	.word	0x08007541
 8007518:	08007557 	.word	0x08007557
 800751c:	08007547 	.word	0x08007547
 8007520:	08007557 	.word	0x08007557
 8007524:	08007557 	.word	0x08007557
 8007528:	08007557 	.word	0x08007557
 800752c:	0800754f 	.word	0x0800754f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007530:	f7fd ffe0 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8007534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007536:	e014      	b.n	8007562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007538:	f7fd fff2 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 800753c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800753e:	e010      	b.n	8007562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007540:	4b1a      	ldr	r3, [pc, #104]	@ (80075ac <UART_SetConfig+0x5c0>)
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007544:	e00d      	b.n	8007562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007546:	f7fd ff67 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 800754a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800754c:	e009      	b.n	8007562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007554:	e005      	b.n	8007562 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007560:	bf00      	nop
    }

    if (pclk != 0U)
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	d028      	beq.n	80075ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	4a10      	ldr	r2, [pc, #64]	@ (80075b0 <UART_SetConfig+0x5c4>)
 800756e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007572:	461a      	mov	r2, r3
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	fbb3 f2f2 	udiv	r2, r3, r2
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	441a      	add	r2, r3
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2b0f      	cmp	r3, #15
 8007590:	d910      	bls.n	80075b4 <UART_SetConfig+0x5c8>
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007598:	d20c      	bcs.n	80075b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	b29a      	uxth	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60da      	str	r2, [r3, #12]
 80075a4:	e009      	b.n	80075ba <UART_SetConfig+0x5ce>
 80075a6:	bf00      	nop
 80075a8:	40008000 	.word	0x40008000
 80075ac:	00f42400 	.word	0x00f42400
 80075b0:	08018ae4 	.word	0x08018ae4
      }
      else
      {
        ret = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2201      	movs	r2, #1
 80075be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2200      	movs	r2, #0
 80075ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2200      	movs	r2, #0
 80075d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3730      	adds	r7, #48	@ 0x30
 80075de:	46bd      	mov	sp, r7
 80075e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01a      	beq.n	80076fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e2:	d10a      	bne.n	80076fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
  }
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b098      	sub	sp, #96	@ 0x60
 800772c:	af02      	add	r7, sp, #8
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007738:	f7fa fcbc 	bl	80020b4 <HAL_GetTick>
 800773c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b08      	cmp	r3, #8
 800774a:	d12f      	bne.n	80077ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800774c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007754:	2200      	movs	r2, #0
 8007756:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f88e 	bl	800787c <UART_WaitOnFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d022      	beq.n	80077ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800777a:	653b      	str	r3, [r7, #80]	@ 0x50
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007784:	647b      	str	r3, [r7, #68]	@ 0x44
 8007786:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800778a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e6      	bne.n	8007766 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e063      	b.n	8007874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d149      	bne.n	800784e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c2:	2200      	movs	r2, #0
 80077c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f857 	bl	800787c <UART_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d03c      	beq.n	800784e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	623b      	str	r3, [r7, #32]
   return(result);
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80077f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e6      	bne.n	80077d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	60fb      	str	r3, [r7, #12]
   return(result);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f023 0301 	bic.w	r3, r3, #1
 800781c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007826:	61fa      	str	r2, [r7, #28]
 8007828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	69b9      	ldr	r1, [r7, #24]
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	617b      	str	r3, [r7, #20]
   return(result);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e5      	bne.n	8007806 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e012      	b.n	8007874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3758      	adds	r7, #88	@ 0x58
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800788c:	e04f      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007894:	d04b      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007896:	f7fa fc0d 	bl	80020b4 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d302      	bcc.n	80078ac <UART_WaitOnFlagUntilTimeout+0x30>
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e04e      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d037      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b80      	cmp	r3, #128	@ 0x80
 80078c2:	d034      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b40      	cmp	r3, #64	@ 0x40
 80078c8:	d031      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d110      	bne.n	80078fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2208      	movs	r2, #8
 80078de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f920 	bl	8007b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2208      	movs	r2, #8
 80078ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e029      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007908:	d111      	bne.n	800792e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f906 	bl	8007b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e00f      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69da      	ldr	r2, [r3, #28]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4013      	ands	r3, r2
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	bf0c      	ite	eq
 800793e:	2301      	moveq	r3, #1
 8007940:	2300      	movne	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	429a      	cmp	r2, r3
 800794a:	d0a0      	beq.n	800788e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b096      	sub	sp, #88	@ 0x58
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2222      	movs	r2, #34	@ 0x22
 8007980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800798a:	2b00      	cmp	r3, #0
 800798c:	d02d      	beq.n	80079ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007994:	4a40      	ldr	r2, [pc, #256]	@ (8007a98 <UART_Start_Receive_DMA+0x140>)
 8007996:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a9c <UART_Start_Receive_DMA+0x144>)
 80079a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079a8:	4a3d      	ldr	r2, [pc, #244]	@ (8007aa0 <UART_Start_Receive_DMA+0x148>)
 80079aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079b2:	2200      	movs	r2, #0
 80079b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3324      	adds	r3, #36	@ 0x24
 80079c2:	4619      	mov	r1, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c8:	461a      	mov	r2, r3
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	f7fc fb58 	bl	8004080 <HAL_DMA_Start_IT>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2210      	movs	r2, #16
 80079da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e051      	b.n	8007a8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d018      	beq.n	8007a24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a12:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e6      	bne.n	80079f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a44:	637a      	str	r2, [r7, #52]	@ 0x34
 8007a46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	613b      	str	r3, [r7, #16]
   return(result);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a78:	623a      	str	r2, [r7, #32]
 8007a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	69f9      	ldr	r1, [r7, #28]
 8007a7e:	6a3a      	ldr	r2, [r7, #32]
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e5      	bne.n	8007a58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3758      	adds	r7, #88	@ 0x58
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	08007ca9 	.word	0x08007ca9
 8007a9c:	08007dd5 	.word	0x08007dd5
 8007aa0:	08007e13 	.word	0x08007e13

08007aa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b08f      	sub	sp, #60	@ 0x3c
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007acc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e6      	bne.n	8007aac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007afe:	61ba      	str	r2, [r7, #24]
 8007b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6979      	ldr	r1, [r7, #20]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e5      	bne.n	8007ade <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007b1a:	bf00      	nop
 8007b1c:	373c      	adds	r7, #60	@ 0x3c
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b095      	sub	sp, #84	@ 0x54
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e6      	bne.n	8007b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e3      	bne.n	8007b60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d118      	bne.n	8007bd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f023 0310 	bic.w	r3, r3, #16
 8007bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bbe:	61bb      	str	r3, [r7, #24]
 8007bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6979      	ldr	r1, [r7, #20]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	613b      	str	r3, [r7, #16]
   return(result);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e6      	bne.n	8007ba0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007be6:	bf00      	nop
 8007be8:	3754      	adds	r7, #84	@ 0x54
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b090      	sub	sp, #64	@ 0x40
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d137      	bne.n	8007c7e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	623b      	str	r3, [r7, #32]
   return(result);
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c68:	61fb      	str	r3, [r7, #28]
 8007c6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	69b9      	ldr	r1, [r7, #24]
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	617b      	str	r3, [r7, #20]
   return(result);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e6      	bne.n	8007c4a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c7c:	e002      	b.n	8007c84 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007c80:	f7ff f976 	bl	8006f70 <HAL_UART_TxCpltCallback>
}
 8007c84:	bf00      	nop
 8007c86:	3740      	adds	r7, #64	@ 0x40
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c98:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff f972 	bl	8006f84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b09c      	sub	sp, #112	@ 0x70
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d171      	bne.n	8007da8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e6      	bne.n	8007ccc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e5      	bne.n	8007cfe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	623b      	str	r3, [r7, #32]
   return(result);
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e5      	bne.n	8007d32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d118      	bne.n	8007da8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0310 	bic.w	r3, r3, #16
 8007d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d94:	61fb      	str	r3, [r7, #28]
 8007d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	69b9      	ldr	r1, [r7, #24]
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	617b      	str	r3, [r7, #20]
   return(result);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e6      	bne.n	8007d76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007daa:	2200      	movs	r2, #0
 8007dac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d107      	bne.n	8007dc6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007dc0:	f7ff f908 	bl	8006fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dc4:	e002      	b.n	8007dcc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007dc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007dc8:	f7ff f8e6 	bl	8006f98 <HAL_UART_RxCpltCallback>
}
 8007dcc:	bf00      	nop
 8007dce:	3770      	adds	r7, #112	@ 0x70
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d109      	bne.n	8007e04 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7ff f8e9 	bl	8006fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e02:	e002      	b.n	8007e0a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff f8d1 	bl	8006fac <HAL_UART_RxHalfCpltCallback>
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3a:	2b80      	cmp	r3, #128	@ 0x80
 8007e3c:	d109      	bne.n	8007e52 <UART_DMAError+0x40>
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b21      	cmp	r3, #33	@ 0x21
 8007e42:	d106      	bne.n	8007e52 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007e4c:	6978      	ldr	r0, [r7, #20]
 8007e4e:	f7ff fe29 	bl	8007aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	2b40      	cmp	r3, #64	@ 0x40
 8007e5e:	d109      	bne.n	8007e74 <UART_DMAError+0x62>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b22      	cmp	r3, #34	@ 0x22
 8007e64:	d106      	bne.n	8007e74 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007e6e:	6978      	ldr	r0, [r7, #20]
 8007e70:	f7ff fe59 	bl	8007b26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e7a:	f043 0210 	orr.w	r2, r3, #16
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e84:	6978      	ldr	r0, [r7, #20]
 8007e86:	f7ff f89b 	bl	8006fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8a:	bf00      	nop
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff f889 	bl	8006fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b088      	sub	sp, #32
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	61bb      	str	r3, [r7, #24]
 8007ede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6979      	ldr	r1, [r7, #20]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e6      	bne.n	8007ebe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff f836 	bl	8006f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f04:	bf00      	nop
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <HAL_UARTEx_DisableFifoMode+0x16>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e027      	b.n	8007fae <HAL_UARTEx_DisableFifoMode+0x66>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2224      	movs	r2, #36	@ 0x24
 8007f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0201 	bic.w	r2, r2, #1
 8007f84:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e02d      	b.n	800802e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2224      	movs	r2, #36	@ 0x24
 8007fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0201 	bic.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f850 	bl	80080b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800804a:	2302      	movs	r3, #2
 800804c:	e02d      	b.n	80080aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2224      	movs	r2, #36	@ 0x24
 800805a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0201 	bic.w	r2, r2, #1
 8008074:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f812 	bl	80080b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080d4:	e031      	b.n	800813a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080d6:	2308      	movs	r3, #8
 80080d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080da:	2308      	movs	r3, #8
 80080dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	0e5b      	lsrs	r3, r3, #25
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	0f5b      	lsrs	r3, r3, #29
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	7b3a      	ldrb	r2, [r7, #12]
 8008102:	4911      	ldr	r1, [pc, #68]	@ (8008148 <UARTEx_SetNbDataToProcess+0x94>)
 8008104:	5c8a      	ldrb	r2, [r1, r2]
 8008106:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800810a:	7b3a      	ldrb	r2, [r7, #12]
 800810c:	490f      	ldr	r1, [pc, #60]	@ (800814c <UARTEx_SetNbDataToProcess+0x98>)
 800810e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008110:	fb93 f3f2 	sdiv	r3, r3, r2
 8008114:	b29a      	uxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	7b7a      	ldrb	r2, [r7, #13]
 8008120:	4909      	ldr	r1, [pc, #36]	@ (8008148 <UARTEx_SetNbDataToProcess+0x94>)
 8008122:	5c8a      	ldrb	r2, [r1, r2]
 8008124:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008128:	7b7a      	ldrb	r2, [r7, #13]
 800812a:	4908      	ldr	r1, [pc, #32]	@ (800814c <UARTEx_SetNbDataToProcess+0x98>)
 800812c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800812e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800813a:	bf00      	nop
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	08018afc 	.word	0x08018afc
 800814c:	08018b04 	.word	0x08018b04

08008150 <__NVIC_SetPriority>:
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800815c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008160:	2b00      	cmp	r3, #0
 8008162:	db0a      	blt.n	800817a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	490c      	ldr	r1, [pc, #48]	@ (800819c <__NVIC_SetPriority+0x4c>)
 800816a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800816e:	0112      	lsls	r2, r2, #4
 8008170:	b2d2      	uxtb	r2, r2
 8008172:	440b      	add	r3, r1
 8008174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008178:	e00a      	b.n	8008190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	4908      	ldr	r1, [pc, #32]	@ (80081a0 <__NVIC_SetPriority+0x50>)
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	3b04      	subs	r3, #4
 8008188:	0112      	lsls	r2, r2, #4
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	440b      	add	r3, r1
 800818e:	761a      	strb	r2, [r3, #24]
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	e000e100 	.word	0xe000e100
 80081a0:	e000ed00 	.word	0xe000ed00

080081a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081a8:	2100      	movs	r1, #0
 80081aa:	f06f 0004 	mvn.w	r0, #4
 80081ae:	f7ff ffcf 	bl	8008150 <__NVIC_SetPriority>
#endif
}
 80081b2:	bf00      	nop
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081be:	f3ef 8305 	mrs	r3, IPSR
 80081c2:	603b      	str	r3, [r7, #0]
  return(result);
 80081c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081ca:	f06f 0305 	mvn.w	r3, #5
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	e00c      	b.n	80081ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081d2:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <osKernelInitialize+0x44>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081da:	4b08      	ldr	r3, [pc, #32]	@ (80081fc <osKernelInitialize+0x44>)
 80081dc:	2201      	movs	r2, #1
 80081de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	e002      	b.n	80081ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081ec:	687b      	ldr	r3, [r7, #4]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20006768 	.word	0x20006768

08008200 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008206:	f3ef 8305 	mrs	r3, IPSR
 800820a:	603b      	str	r3, [r7, #0]
  return(result);
 800820c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008212:	f06f 0305 	mvn.w	r3, #5
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	e010      	b.n	800823c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800821a:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <osKernelStart+0x48>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d109      	bne.n	8008236 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008222:	f7ff ffbf 	bl	80081a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008226:	4b08      	ldr	r3, [pc, #32]	@ (8008248 <osKernelStart+0x48>)
 8008228:	2202      	movs	r2, #2
 800822a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800822c:	f001 f87a 	bl	8009324 <vTaskStartScheduler>
      stat = osOK;
 8008230:	2300      	movs	r3, #0
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	e002      	b.n	800823c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800823a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800823c:	687b      	ldr	r3, [r7, #4]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20006768 	.word	0x20006768

0800824c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800824c:	b580      	push	{r7, lr}
 800824e:	b08e      	sub	sp, #56	@ 0x38
 8008250:	af04      	add	r7, sp, #16
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800825c:	f3ef 8305 	mrs	r3, IPSR
 8008260:	617b      	str	r3, [r7, #20]
  return(result);
 8008262:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008264:	2b00      	cmp	r3, #0
 8008266:	d17e      	bne.n	8008366 <osThreadNew+0x11a>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d07b      	beq.n	8008366 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800826e:	2380      	movs	r3, #128	@ 0x80
 8008270:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008272:	2318      	movs	r3, #24
 8008274:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800827a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800827e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d045      	beq.n	8008312 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <osThreadNew+0x48>
        name = attr->name;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <osThreadNew+0x6e>
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	2b38      	cmp	r3, #56	@ 0x38
 80082ac:	d805      	bhi.n	80082ba <osThreadNew+0x6e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <osThreadNew+0x72>
        return (NULL);
 80082ba:	2300      	movs	r3, #0
 80082bc:	e054      	b.n	8008368 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	089b      	lsrs	r3, r3, #2
 80082cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00e      	beq.n	80082f4 <osThreadNew+0xa8>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b5b      	cmp	r3, #91	@ 0x5b
 80082dc:	d90a      	bls.n	80082f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d006      	beq.n	80082f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <osThreadNew+0xa8>
        mem = 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	e010      	b.n	8008316 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10c      	bne.n	8008316 <osThreadNew+0xca>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d108      	bne.n	8008316 <osThreadNew+0xca>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <osThreadNew+0xca>
          mem = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]
 8008310:	e001      	b.n	8008316 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d110      	bne.n	800833e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008324:	9202      	str	r2, [sp, #8]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	6a3a      	ldr	r2, [r7, #32]
 8008330:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 fe1a 	bl	8008f6c <xTaskCreateStatic>
 8008338:	4603      	mov	r3, r0
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	e013      	b.n	8008366 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d110      	bne.n	8008366 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	b29a      	uxth	r2, r3
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fe68 	bl	800902c <xTaskCreate>
 800835c:	4603      	mov	r3, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	d001      	beq.n	8008366 <osThreadNew+0x11a>
            hTask = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008366:	693b      	ldr	r3, [r7, #16]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3728      	adds	r7, #40	@ 0x28
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008378:	f3ef 8305 	mrs	r3, IPSR
 800837c:	60bb      	str	r3, [r7, #8]
  return(result);
 800837e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <osDelay+0x1c>
    stat = osErrorISR;
 8008384:	f06f 0305 	mvn.w	r3, #5
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e007      	b.n	800839c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 ff8e 	bl	80092b8 <vTaskDelay>
    }
  }

  return (stat);
 800839c:	68fb      	ldr	r3, [r7, #12]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4a07      	ldr	r2, [pc, #28]	@ (80083d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80083b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	4a06      	ldr	r2, [pc, #24]	@ (80083d8 <vApplicationGetIdleTaskMemory+0x30>)
 80083be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2280      	movs	r2, #128	@ 0x80
 80083c4:	601a      	str	r2, [r3, #0]
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	2000676c 	.word	0x2000676c
 80083d8:	200067c8 	.word	0x200067c8

080083dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a07      	ldr	r2, [pc, #28]	@ (8008408 <vApplicationGetTimerTaskMemory+0x2c>)
 80083ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4a06      	ldr	r2, [pc, #24]	@ (800840c <vApplicationGetTimerTaskMemory+0x30>)
 80083f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083fa:	601a      	str	r2, [r3, #0]
}
 80083fc:	bf00      	nop
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	200069c8 	.word	0x200069c8
 800840c:	20006a24 	.word	0x20006a24

08008410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f103 0208 	add.w	r2, r3, #8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f103 0208 	add.w	r2, r3, #8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f103 0208 	add.w	r2, r3, #8
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084c8:	d103      	bne.n	80084d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	e00c      	b.n	80084ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3308      	adds	r3, #8
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e002      	b.n	80084e0 <vListInsert+0x2e>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d2f6      	bcs.n	80084da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	601a      	str	r2, [r3, #0]
}
 8008518:	bf00      	nop
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6892      	ldr	r2, [r2, #8]
 800853a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6852      	ldr	r2, [r2, #4]
 8008544:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d103      	bne.n	8008558 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	1e5a      	subs	r2, r3, #1
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <xQueueGenericReset+0x2c>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	60bb      	str	r3, [r7, #8]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085a4:	f002 f8a0 	bl	800a6e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b0:	68f9      	ldr	r1, [r7, #12]
 80085b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	441a      	add	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	3b01      	subs	r3, #1
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	441a      	add	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	22ff      	movs	r2, #255	@ 0xff
 80085e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	22ff      	movs	r2, #255	@ 0xff
 80085f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d114      	bne.n	8008624 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d01a      	beq.n	8008638 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3310      	adds	r3, #16
 8008606:	4618      	mov	r0, r3
 8008608:	f001 f91a 	bl	8009840 <xTaskRemoveFromEventList>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d012      	beq.n	8008638 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008612:	4b0d      	ldr	r3, [pc, #52]	@ (8008648 <xQueueGenericReset+0xd0>)
 8008614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	e009      	b.n	8008638 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3310      	adds	r3, #16
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fef1 	bl	8008410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3324      	adds	r3, #36	@ 0x24
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff feec 	bl	8008410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008638:	f002 f888 	bl	800a74c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800863c:	2301      	movs	r3, #1
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	e000ed04 	.word	0xe000ed04

0800864c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08e      	sub	sp, #56	@ 0x38
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10b      	bne.n	8008678 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008672:	bf00      	nop
 8008674:	bf00      	nop
 8008676:	e7fd      	b.n	8008674 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10b      	bne.n	8008696 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	e7fd      	b.n	8008692 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <xQueueGenericCreateStatic+0x56>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <xQueueGenericCreateStatic+0x5a>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <xQueueGenericCreateStatic+0x5c>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10b      	bne.n	80086c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	623b      	str	r3, [r7, #32]
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	e7fd      	b.n	80086c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <xQueueGenericCreateStatic+0x84>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <xQueueGenericCreateStatic+0x88>
 80086d0:	2301      	movs	r3, #1
 80086d2:	e000      	b.n	80086d6 <xQueueGenericCreateStatic+0x8a>
 80086d4:	2300      	movs	r3, #0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	61fb      	str	r3, [r7, #28]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086f2:	2350      	movs	r3, #80	@ 0x50
 80086f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b50      	cmp	r3, #80	@ 0x50
 80086fa:	d00b      	beq.n	8008714 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	61bb      	str	r3, [r7, #24]
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008714:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00d      	beq.n	800873c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008728:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800872c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	4613      	mov	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f805 	bl	8008746 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800873e:	4618      	mov	r0, r3
 8008740:	3730      	adds	r7, #48	@ 0x30
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
 8008752:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d103      	bne.n	8008762 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	e002      	b.n	8008768 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008774:	2101      	movs	r1, #1
 8008776:	69b8      	ldr	r0, [r7, #24]
 8008778:	f7ff fefe 	bl	8008578 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08e      	sub	sp, #56	@ 0x38
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800879a:	2300      	movs	r3, #0
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10b      	bne.n	80087c0 <xQueueGenericSend+0x34>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d103      	bne.n	80087ce <xQueueGenericSend+0x42>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <xQueueGenericSend+0x46>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <xQueueGenericSend+0x48>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10b      	bne.n	80087f0 <xQueueGenericSend+0x64>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	e7fd      	b.n	80087ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d103      	bne.n	80087fe <xQueueGenericSend+0x72>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <xQueueGenericSend+0x76>
 80087fe:	2301      	movs	r3, #1
 8008800:	e000      	b.n	8008804 <xQueueGenericSend+0x78>
 8008802:	2300      	movs	r3, #0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10b      	bne.n	8008820 <xQueueGenericSend+0x94>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	623b      	str	r3, [r7, #32]
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	e7fd      	b.n	800881c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008820:	f001 f9f6 	bl	8009c10 <xTaskGetSchedulerState>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d102      	bne.n	8008830 <xQueueGenericSend+0xa4>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <xQueueGenericSend+0xa8>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <xQueueGenericSend+0xaa>
 8008834:	2300      	movs	r3, #0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <xQueueGenericSend+0xc6>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	61fb      	str	r3, [r7, #28]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008852:	f001 ff49 	bl	800a6e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885e:	429a      	cmp	r2, r3
 8008860:	d302      	bcc.n	8008868 <xQueueGenericSend+0xdc>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d129      	bne.n	80088bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800886e:	f000 fa0f 	bl	8008c90 <prvCopyDataToQueue>
 8008872:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d010      	beq.n	800889e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	3324      	adds	r3, #36	@ 0x24
 8008880:	4618      	mov	r0, r3
 8008882:	f000 ffdd 	bl	8009840 <xTaskRemoveFromEventList>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d013      	beq.n	80088b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800888c:	4b3f      	ldr	r3, [pc, #252]	@ (800898c <xQueueGenericSend+0x200>)
 800888e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	e00a      	b.n	80088b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800889e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088a4:	4b39      	ldr	r3, [pc, #228]	@ (800898c <xQueueGenericSend+0x200>)
 80088a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088b4:	f001 ff4a 	bl	800a74c <vPortExitCritical>
				return pdPASS;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e063      	b.n	8008984 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088c2:	f001 ff43 	bl	800a74c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e05c      	b.n	8008984 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d106      	bne.n	80088de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088d0:	f107 0314 	add.w	r3, r7, #20
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 f83f 	bl	8009958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088da:	2301      	movs	r3, #1
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088de:	f001 ff35 	bl	800a74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088e2:	f000 fd87 	bl	80093f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088e6:	f001 feff 	bl	800a6e8 <vPortEnterCritical>
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088f0:	b25b      	sxtb	r3, r3
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088f6:	d103      	bne.n	8008900 <xQueueGenericSend+0x174>
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008906:	b25b      	sxtb	r3, r3
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800890c:	d103      	bne.n	8008916 <xQueueGenericSend+0x18a>
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008916:	f001 ff19 	bl	800a74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800891a:	1d3a      	adds	r2, r7, #4
 800891c:	f107 0314 	add.w	r3, r7, #20
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f001 f82e 	bl	8009984 <xTaskCheckForTimeOut>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d124      	bne.n	8008978 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800892e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008930:	f000 faa6 	bl	8008e80 <prvIsQueueFull>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d018      	beq.n	800896c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	3310      	adds	r3, #16
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f000 ff2a 	bl	800979c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008948:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800894a:	f000 fa31 	bl	8008db0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800894e:	f000 fd5f 	bl	8009410 <xTaskResumeAll>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	f47f af7c 	bne.w	8008852 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800895a:	4b0c      	ldr	r3, [pc, #48]	@ (800898c <xQueueGenericSend+0x200>)
 800895c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	e772      	b.n	8008852 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800896c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800896e:	f000 fa1f 	bl	8008db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008972:	f000 fd4d 	bl	8009410 <xTaskResumeAll>
 8008976:	e76c      	b.n	8008852 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008978:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800897a:	f000 fa19 	bl	8008db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800897e:	f000 fd47 	bl	8009410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008982:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008984:	4618      	mov	r0, r3
 8008986:	3738      	adds	r7, #56	@ 0x38
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	e000ed04 	.word	0xe000ed04

08008990 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b090      	sub	sp, #64	@ 0x40
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80089a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10b      	bne.n	80089c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089ba:	bf00      	nop
 80089bc:	bf00      	nop
 80089be:	e7fd      	b.n	80089bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d103      	bne.n	80089ce <xQueueGenericSendFromISR+0x3e>
 80089c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <xQueueGenericSendFromISR+0x42>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <xQueueGenericSendFromISR+0x44>
 80089d2:	2300      	movs	r3, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10b      	bne.n	80089f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	e7fd      	b.n	80089ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d103      	bne.n	80089fe <xQueueGenericSendFromISR+0x6e>
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <xQueueGenericSendFromISR+0x72>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e000      	b.n	8008a04 <xQueueGenericSendFromISR+0x74>
 8008a02:	2300      	movs	r3, #0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10b      	bne.n	8008a20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	623b      	str	r3, [r7, #32]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a20:	f001 ff42 	bl	800a8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a24:	f3ef 8211 	mrs	r2, BASEPRI
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	61fa      	str	r2, [r7, #28]
 8008a3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d302      	bcc.n	8008a52 <xQueueGenericSendFromISR+0xc2>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d12f      	bne.n	8008ab2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a68:	f000 f912 	bl	8008c90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a74:	d112      	bne.n	8008a9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d016      	beq.n	8008aac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	3324      	adds	r3, #36	@ 0x24
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fedc 	bl	8009840 <xTaskRemoveFromEventList>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00e      	beq.n	8008aac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	e007      	b.n	8008aac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	b25a      	sxtb	r2, r3
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008aac:	2301      	movs	r3, #1
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ab0:	e001      	b.n	8008ab6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ac0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3740      	adds	r7, #64	@ 0x40
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08c      	sub	sp, #48	@ 0x30
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10b      	bne.n	8008afe <xQueueReceive+0x32>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	623b      	str	r3, [r7, #32]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <xQueueReceive+0x40>
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <xQueueReceive+0x44>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <xQueueReceive+0x46>
 8008b10:	2300      	movs	r3, #0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <xQueueReceive+0x62>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	61fb      	str	r3, [r7, #28]
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e7fd      	b.n	8008b2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b2e:	f001 f86f 	bl	8009c10 <xTaskGetSchedulerState>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <xQueueReceive+0x72>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <xQueueReceive+0x76>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <xQueueReceive+0x78>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <xQueueReceive+0x94>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	61bb      	str	r3, [r7, #24]
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b60:	f001 fdc2 	bl	800a6e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d01f      	beq.n	8008bb0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b74:	f000 f8f6 	bl	8008d64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	1e5a      	subs	r2, r3, #1
 8008b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00f      	beq.n	8008ba8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	3310      	adds	r3, #16
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 fe57 	bl	8009840 <xTaskRemoveFromEventList>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b98:	4b3c      	ldr	r3, [pc, #240]	@ (8008c8c <xQueueReceive+0x1c0>)
 8008b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ba8:	f001 fdd0 	bl	800a74c <vPortExitCritical>
				return pdPASS;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e069      	b.n	8008c84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d103      	bne.n	8008bbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bb6:	f001 fdc9 	bl	800a74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e062      	b.n	8008c84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d106      	bne.n	8008bd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bc4:	f107 0310 	add.w	r3, r7, #16
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fec5 	bl	8009958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bd2:	f001 fdbb 	bl	800a74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bd6:	f000 fc0d 	bl	80093f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bda:	f001 fd85 	bl	800a6e8 <vPortEnterCritical>
 8008bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008be4:	b25b      	sxtb	r3, r3
 8008be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bea:	d103      	bne.n	8008bf4 <xQueueReceive+0x128>
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bfa:	b25b      	sxtb	r3, r3
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c00:	d103      	bne.n	8008c0a <xQueueReceive+0x13e>
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c0a:	f001 fd9f 	bl	800a74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c0e:	1d3a      	adds	r2, r7, #4
 8008c10:	f107 0310 	add.w	r3, r7, #16
 8008c14:	4611      	mov	r1, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 feb4 	bl	8009984 <xTaskCheckForTimeOut>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d123      	bne.n	8008c6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c24:	f000 f916 	bl	8008e54 <prvIsQueueEmpty>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d017      	beq.n	8008c5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	3324      	adds	r3, #36	@ 0x24
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fdb0 	bl	800979c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c3e:	f000 f8b7 	bl	8008db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c42:	f000 fbe5 	bl	8009410 <xTaskResumeAll>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d189      	bne.n	8008b60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c8c <xQueueReceive+0x1c0>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	e780      	b.n	8008b60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c60:	f000 f8a6 	bl	8008db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c64:	f000 fbd4 	bl	8009410 <xTaskResumeAll>
 8008c68:	e77a      	b.n	8008b60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c6c:	f000 f8a0 	bl	8008db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c70:	f000 fbce 	bl	8009410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c76:	f000 f8ed 	bl	8008e54 <prvIsQueueEmpty>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f43f af6f 	beq.w	8008b60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3730      	adds	r7, #48	@ 0x30
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10d      	bne.n	8008cca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d14d      	bne.n	8008d52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 ffc6 	bl	8009c4c <xTaskPriorityDisinherit>
 8008cc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	609a      	str	r2, [r3, #8]
 8008cc8:	e043      	b.n	8008d52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d119      	bne.n	8008d04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6858      	ldr	r0, [r3, #4]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd8:	461a      	mov	r2, r3
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	f00e ffa5 	bl	8017c2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce8:	441a      	add	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d32b      	bcc.n	8008d52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	605a      	str	r2, [r3, #4]
 8008d02:	e026      	b.n	8008d52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68d8      	ldr	r0, [r3, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	f00e ff8b 	bl	8017c2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1c:	425b      	negs	r3, r3
 8008d1e:	441a      	add	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d207      	bcs.n	8008d40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d38:	425b      	negs	r3, r3
 8008d3a:	441a      	add	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d105      	bne.n	8008d52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d5a:	697b      	ldr	r3, [r7, #20]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d018      	beq.n	8008da8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7e:	441a      	add	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d303      	bcc.n	8008d98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68d9      	ldr	r1, [r3, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da0:	461a      	mov	r2, r3
 8008da2:	6838      	ldr	r0, [r7, #0]
 8008da4:	f00e ff41 	bl	8017c2a <memcpy>
	}
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008db8:	f001 fc96 	bl	800a6e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dc4:	e011      	b.n	8008dea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d012      	beq.n	8008df4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3324      	adds	r3, #36	@ 0x24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fd34 	bl	8009840 <xTaskRemoveFromEventList>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008dde:	f000 fe35 	bl	8009a4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	dce9      	bgt.n	8008dc6 <prvUnlockQueue+0x16>
 8008df2:	e000      	b.n	8008df6 <prvUnlockQueue+0x46>
					break;
 8008df4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	22ff      	movs	r2, #255	@ 0xff
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008dfe:	f001 fca5 	bl	800a74c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e02:	f001 fc71 	bl	800a6e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e0e:	e011      	b.n	8008e34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d012      	beq.n	8008e3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fd0f 	bl	8009840 <xTaskRemoveFromEventList>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e28:	f000 fe10 	bl	8009a4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dce9      	bgt.n	8008e10 <prvUnlockQueue+0x60>
 8008e3c:	e000      	b.n	8008e40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	22ff      	movs	r2, #255	@ 0xff
 8008e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e48:	f001 fc80 	bl	800a74c <vPortExitCritical>
}
 8008e4c:	bf00      	nop
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e5c:	f001 fc44 	bl	800a6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	e001      	b.n	8008e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e72:	f001 fc6b 	bl	800a74c <vPortExitCritical>

	return xReturn;
 8008e76:	68fb      	ldr	r3, [r7, #12]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e88:	f001 fc2e 	bl	800a6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d102      	bne.n	8008e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e001      	b.n	8008ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ea2:	f001 fc53 	bl	800a74c <vPortExitCritical>

	return xReturn;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e014      	b.n	8008eea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8008f00 <vQueueAddToRegistry+0x50>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10b      	bne.n	8008ee4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ecc:	490c      	ldr	r1, [pc, #48]	@ (8008f00 <vQueueAddToRegistry+0x50>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8008f00 <vQueueAddToRegistry+0x50>)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	4413      	add	r3, r2
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ee2:	e006      	b.n	8008ef2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b07      	cmp	r3, #7
 8008eee:	d9e7      	bls.n	8008ec0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20006e24 	.word	0x20006e24

08008f04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f14:	f001 fbe8 	bl	800a6e8 <vPortEnterCritical>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f24:	d103      	bne.n	8008f2e <vQueueWaitForMessageRestricted+0x2a>
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f34:	b25b      	sxtb	r3, r3
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f3a:	d103      	bne.n	8008f44 <vQueueWaitForMessageRestricted+0x40>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f44:	f001 fc02 	bl	800a74c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d106      	bne.n	8008f5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	3324      	adds	r3, #36	@ 0x24
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fc45 	bl	80097e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f5e:	6978      	ldr	r0, [r7, #20]
 8008f60:	f7ff ff26 	bl	8008db0 <prvUnlockQueue>
	}
 8008f64:	bf00      	nop
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	@ 0x38
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10b      	bne.n	8008f98 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	623b      	str	r3, [r7, #32]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10b      	bne.n	8008fb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	61fb      	str	r3, [r7, #28]
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	e7fd      	b.n	8008fb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fb6:	235c      	movs	r3, #92	@ 0x5c
 8008fb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8008fbe:	d00b      	beq.n	8008fd8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	61bb      	str	r3, [r7, #24]
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	e7fd      	b.n	8008fd4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01e      	beq.n	800901e <xTaskCreateStatic+0xb2>
 8008fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d01b      	beq.n	800901e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	9303      	str	r3, [sp, #12]
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	f107 0314 	add.w	r3, r7, #20
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f850 	bl	80090b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009016:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009018:	f000 f8de 	bl	80091d8 <prvAddNewTaskToReadyList>
 800901c:	e001      	b.n	8009022 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009022:	697b      	ldr	r3, [r7, #20]
	}
 8009024:	4618      	mov	r0, r3
 8009026:	3728      	adds	r7, #40	@ 0x28
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08c      	sub	sp, #48	@ 0x30
 8009030:	af04      	add	r7, sp, #16
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	4613      	mov	r3, r2
 800903a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4618      	mov	r0, r3
 8009042:	f001 fc73 	bl	800a92c <pvPortMalloc>
 8009046:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00e      	beq.n	800906c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800904e:	205c      	movs	r0, #92	@ 0x5c
 8009050:	f001 fc6c 	bl	800a92c <pvPortMalloc>
 8009054:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	631a      	str	r2, [r3, #48]	@ 0x30
 8009062:	e005      	b.n	8009070 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009064:	6978      	ldr	r0, [r7, #20]
 8009066:	f001 fd2f 	bl	800aac8 <vPortFree>
 800906a:	e001      	b.n	8009070 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800906c:	2300      	movs	r3, #0
 800906e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d017      	beq.n	80090a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800907e:	88fa      	ldrh	r2, [r7, #6]
 8009080:	2300      	movs	r3, #0
 8009082:	9303      	str	r3, [sp, #12]
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	9302      	str	r3, [sp, #8]
 8009088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f80e 	bl	80090b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800909a:	69f8      	ldr	r0, [r7, #28]
 800909c:	f000 f89c 	bl	80091d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090a0:	2301      	movs	r3, #1
 80090a2:	61bb      	str	r3, [r7, #24]
 80090a4:	e002      	b.n	80090ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090ac:	69bb      	ldr	r3, [r7, #24]
	}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	461a      	mov	r2, r3
 80090ce:	21a5      	movs	r1, #165	@ 0xa5
 80090d0:	f00e fce2 	bl	8017a98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090de:	3b01      	subs	r3, #1
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f023 0307 	bic.w	r3, r3, #7
 80090ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	617b      	str	r3, [r7, #20]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01f      	beq.n	8009156 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009116:	2300      	movs	r3, #0
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	e012      	b.n	8009142 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	4413      	add	r3, r2
 8009122:	7819      	ldrb	r1, [r3, #0]
 8009124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	4413      	add	r3, r2
 800912a:	3334      	adds	r3, #52	@ 0x34
 800912c:	460a      	mov	r2, r1
 800912e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	4413      	add	r3, r2
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d006      	beq.n	800914a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	3301      	adds	r3, #1
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	2b0f      	cmp	r3, #15
 8009146:	d9e9      	bls.n	800911c <prvInitialiseNewTask+0x66>
 8009148:	e000      	b.n	800914c <prvInitialiseNewTask+0x96>
			{
				break;
 800914a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009154:	e003      	b.n	800915e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	2b37      	cmp	r3, #55	@ 0x37
 8009162:	d901      	bls.n	8009168 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009164:	2337      	movs	r3, #55	@ 0x37
 8009166:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800916c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009172:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009176:	2200      	movs	r2, #0
 8009178:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	3304      	adds	r3, #4
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff f966 	bl	8008450 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	3318      	adds	r3, #24
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff f961 	bl	8008450 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009192:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009196:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	2200      	movs	r2, #0
 80091a8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	68f9      	ldr	r1, [r7, #12]
 80091b6:	69b8      	ldr	r0, [r7, #24]
 80091b8:	f001 f966 	bl	800a488 <pxPortInitialiseStack>
 80091bc:	4602      	mov	r2, r0
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ce:	bf00      	nop
 80091d0:	3720      	adds	r7, #32
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091e0:	f001 fa82 	bl	800a6e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091e4:	4b2d      	ldr	r3, [pc, #180]	@ (800929c <prvAddNewTaskToReadyList+0xc4>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	4a2c      	ldr	r2, [pc, #176]	@ (800929c <prvAddNewTaskToReadyList+0xc4>)
 80091ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091ee:	4b2c      	ldr	r3, [pc, #176]	@ (80092a0 <prvAddNewTaskToReadyList+0xc8>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091f6:	4a2a      	ldr	r2, [pc, #168]	@ (80092a0 <prvAddNewTaskToReadyList+0xc8>)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091fc:	4b27      	ldr	r3, [pc, #156]	@ (800929c <prvAddNewTaskToReadyList+0xc4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d110      	bne.n	8009226 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009204:	f000 fc46 	bl	8009a94 <prvInitialiseTaskLists>
 8009208:	e00d      	b.n	8009226 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800920a:	4b26      	ldr	r3, [pc, #152]	@ (80092a4 <prvAddNewTaskToReadyList+0xcc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009212:	4b23      	ldr	r3, [pc, #140]	@ (80092a0 <prvAddNewTaskToReadyList+0xc8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921c:	429a      	cmp	r2, r3
 800921e:	d802      	bhi.n	8009226 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009220:	4a1f      	ldr	r2, [pc, #124]	@ (80092a0 <prvAddNewTaskToReadyList+0xc8>)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009226:	4b20      	ldr	r3, [pc, #128]	@ (80092a8 <prvAddNewTaskToReadyList+0xd0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3301      	adds	r3, #1
 800922c:	4a1e      	ldr	r2, [pc, #120]	@ (80092a8 <prvAddNewTaskToReadyList+0xd0>)
 800922e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009230:	4b1d      	ldr	r3, [pc, #116]	@ (80092a8 <prvAddNewTaskToReadyList+0xd0>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800923c:	4b1b      	ldr	r3, [pc, #108]	@ (80092ac <prvAddNewTaskToReadyList+0xd4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d903      	bls.n	800924c <prvAddNewTaskToReadyList+0x74>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009248:	4a18      	ldr	r2, [pc, #96]	@ (80092ac <prvAddNewTaskToReadyList+0xd4>)
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4a15      	ldr	r2, [pc, #84]	@ (80092b0 <prvAddNewTaskToReadyList+0xd8>)
 800925a:	441a      	add	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7ff f901 	bl	800846a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009268:	f001 fa70 	bl	800a74c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800926c:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <prvAddNewTaskToReadyList+0xcc>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00e      	beq.n	8009292 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009274:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <prvAddNewTaskToReadyList+0xc8>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927e:	429a      	cmp	r2, r3
 8009280:	d207      	bcs.n	8009292 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009282:	4b0c      	ldr	r3, [pc, #48]	@ (80092b4 <prvAddNewTaskToReadyList+0xdc>)
 8009284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20007338 	.word	0x20007338
 80092a0:	20006e64 	.word	0x20006e64
 80092a4:	20007344 	.word	0x20007344
 80092a8:	20007354 	.word	0x20007354
 80092ac:	20007340 	.word	0x20007340
 80092b0:	20006e68 	.word	0x20006e68
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d018      	beq.n	80092fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092ca:	4b14      	ldr	r3, [pc, #80]	@ (800931c <vTaskDelay+0x64>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <vTaskDelay+0x32>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	60bb      	str	r3, [r7, #8]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092ea:	f000 f883 	bl	80093f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092ee:	2100      	movs	r1, #0
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fd1b 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092f6:	f000 f88b 	bl	8009410 <xTaskResumeAll>
 80092fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d107      	bne.n	8009312 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009302:	4b07      	ldr	r3, [pc, #28]	@ (8009320 <vTaskDelay+0x68>)
 8009304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20007360 	.word	0x20007360
 8009320:	e000ed04 	.word	0xe000ed04

08009324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08a      	sub	sp, #40	@ 0x28
 8009328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800932a:	2300      	movs	r3, #0
 800932c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800932e:	2300      	movs	r3, #0
 8009330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009332:	463a      	mov	r2, r7
 8009334:	1d39      	adds	r1, r7, #4
 8009336:	f107 0308 	add.w	r3, r7, #8
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff f834 	bl	80083a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	9202      	str	r2, [sp, #8]
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	2300      	movs	r3, #0
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	460a      	mov	r2, r1
 8009352:	4922      	ldr	r1, [pc, #136]	@ (80093dc <vTaskStartScheduler+0xb8>)
 8009354:	4822      	ldr	r0, [pc, #136]	@ (80093e0 <vTaskStartScheduler+0xbc>)
 8009356:	f7ff fe09 	bl	8008f6c <xTaskCreateStatic>
 800935a:	4603      	mov	r3, r0
 800935c:	4a21      	ldr	r2, [pc, #132]	@ (80093e4 <vTaskStartScheduler+0xc0>)
 800935e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009360:	4b20      	ldr	r3, [pc, #128]	@ (80093e4 <vTaskStartScheduler+0xc0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009368:	2301      	movs	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e001      	b.n	8009372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d102      	bne.n	800937e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009378:	f000 fd2c 	bl	8009dd4 <xTimerCreateTimerTask>
 800937c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d116      	bne.n	80093b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	613b      	str	r3, [r7, #16]
}
 8009396:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009398:	4b13      	ldr	r3, [pc, #76]	@ (80093e8 <vTaskStartScheduler+0xc4>)
 800939a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800939e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093a0:	4b12      	ldr	r3, [pc, #72]	@ (80093ec <vTaskStartScheduler+0xc8>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093a6:	4b12      	ldr	r3, [pc, #72]	@ (80093f0 <vTaskStartScheduler+0xcc>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093ac:	f001 f8f8 	bl	800a5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093b0:	e00f      	b.n	80093d2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093b8:	d10b      	bne.n	80093d2 <vTaskStartScheduler+0xae>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60fb      	str	r3, [r7, #12]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <vTaskStartScheduler+0xaa>
}
 80093d2:	bf00      	nop
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	08018a74 	.word	0x08018a74
 80093e0:	08009a65 	.word	0x08009a65
 80093e4:	2000735c 	.word	0x2000735c
 80093e8:	20007358 	.word	0x20007358
 80093ec:	20007344 	.word	0x20007344
 80093f0:	2000733c 	.word	0x2000733c

080093f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093f8:	4b04      	ldr	r3, [pc, #16]	@ (800940c <vTaskSuspendAll+0x18>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3301      	adds	r3, #1
 80093fe:	4a03      	ldr	r2, [pc, #12]	@ (800940c <vTaskSuspendAll+0x18>)
 8009400:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009402:	bf00      	nop
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	20007360 	.word	0x20007360

08009410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800941a:	2300      	movs	r3, #0
 800941c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800941e:	4b42      	ldr	r3, [pc, #264]	@ (8009528 <xTaskResumeAll+0x118>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <xTaskResumeAll+0x2e>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	603b      	str	r3, [r7, #0]
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	e7fd      	b.n	800943a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800943e:	f001 f953 	bl	800a6e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009442:	4b39      	ldr	r3, [pc, #228]	@ (8009528 <xTaskResumeAll+0x118>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3b01      	subs	r3, #1
 8009448:	4a37      	ldr	r2, [pc, #220]	@ (8009528 <xTaskResumeAll+0x118>)
 800944a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944c:	4b36      	ldr	r3, [pc, #216]	@ (8009528 <xTaskResumeAll+0x118>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d162      	bne.n	800951a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009454:	4b35      	ldr	r3, [pc, #212]	@ (800952c <xTaskResumeAll+0x11c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d05e      	beq.n	800951a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800945c:	e02f      	b.n	80094be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945e:	4b34      	ldr	r3, [pc, #208]	@ (8009530 <xTaskResumeAll+0x120>)
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3318      	adds	r3, #24
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff f85a 	bl	8008524 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3304      	adds	r3, #4
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff f855 	bl	8008524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947e:	4b2d      	ldr	r3, [pc, #180]	@ (8009534 <xTaskResumeAll+0x124>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d903      	bls.n	800948e <xTaskResumeAll+0x7e>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948a:	4a2a      	ldr	r2, [pc, #168]	@ (8009534 <xTaskResumeAll+0x124>)
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4a27      	ldr	r2, [pc, #156]	@ (8009538 <xTaskResumeAll+0x128>)
 800949c:	441a      	add	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3304      	adds	r3, #4
 80094a2:	4619      	mov	r1, r3
 80094a4:	4610      	mov	r0, r2
 80094a6:	f7fe ffe0 	bl	800846a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ae:	4b23      	ldr	r3, [pc, #140]	@ (800953c <xTaskResumeAll+0x12c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d302      	bcc.n	80094be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80094b8:	4b21      	ldr	r3, [pc, #132]	@ (8009540 <xTaskResumeAll+0x130>)
 80094ba:	2201      	movs	r2, #1
 80094bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094be:	4b1c      	ldr	r3, [pc, #112]	@ (8009530 <xTaskResumeAll+0x120>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1cb      	bne.n	800945e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094cc:	f000 fb80 	bl	8009bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009544 <xTaskResumeAll+0x134>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d010      	beq.n	80094fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094dc:	f000 f846 	bl	800956c <xTaskIncrementTick>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80094e6:	4b16      	ldr	r3, [pc, #88]	@ (8009540 <xTaskResumeAll+0x130>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f1      	bne.n	80094dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80094f8:	4b12      	ldr	r3, [pc, #72]	@ (8009544 <xTaskResumeAll+0x134>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094fe:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <xTaskResumeAll+0x130>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d009      	beq.n	800951a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009506:	2301      	movs	r3, #1
 8009508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800950a:	4b0f      	ldr	r3, [pc, #60]	@ (8009548 <xTaskResumeAll+0x138>)
 800950c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800951a:	f001 f917 	bl	800a74c <vPortExitCritical>

	return xAlreadyYielded;
 800951e:	68bb      	ldr	r3, [r7, #8]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20007360 	.word	0x20007360
 800952c:	20007338 	.word	0x20007338
 8009530:	200072f8 	.word	0x200072f8
 8009534:	20007340 	.word	0x20007340
 8009538:	20006e68 	.word	0x20006e68
 800953c:	20006e64 	.word	0x20006e64
 8009540:	2000734c 	.word	0x2000734c
 8009544:	20007348 	.word	0x20007348
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009552:	4b05      	ldr	r3, [pc, #20]	@ (8009568 <xTaskGetTickCount+0x1c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009558:	687b      	ldr	r3, [r7, #4]
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	2000733c 	.word	0x2000733c

0800956c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009572:	2300      	movs	r3, #0
 8009574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009576:	4b4f      	ldr	r3, [pc, #316]	@ (80096b4 <xTaskIncrementTick+0x148>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	f040 8090 	bne.w	80096a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009580:	4b4d      	ldr	r3, [pc, #308]	@ (80096b8 <xTaskIncrementTick+0x14c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3301      	adds	r3, #1
 8009586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009588:	4a4b      	ldr	r2, [pc, #300]	@ (80096b8 <xTaskIncrementTick+0x14c>)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d121      	bne.n	80095d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009594:	4b49      	ldr	r3, [pc, #292]	@ (80096bc <xTaskIncrementTick+0x150>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	603b      	str	r3, [r7, #0]
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	e7fd      	b.n	80095b2 <xTaskIncrementTick+0x46>
 80095b6:	4b41      	ldr	r3, [pc, #260]	@ (80096bc <xTaskIncrementTick+0x150>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	4b40      	ldr	r3, [pc, #256]	@ (80096c0 <xTaskIncrementTick+0x154>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a3e      	ldr	r2, [pc, #248]	@ (80096bc <xTaskIncrementTick+0x150>)
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	4a3e      	ldr	r2, [pc, #248]	@ (80096c0 <xTaskIncrementTick+0x154>)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	4b3e      	ldr	r3, [pc, #248]	@ (80096c4 <xTaskIncrementTick+0x158>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3301      	adds	r3, #1
 80095d0:	4a3c      	ldr	r2, [pc, #240]	@ (80096c4 <xTaskIncrementTick+0x158>)
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	f000 fafc 	bl	8009bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095d8:	4b3b      	ldr	r3, [pc, #236]	@ (80096c8 <xTaskIncrementTick+0x15c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d349      	bcc.n	8009676 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e2:	4b36      	ldr	r3, [pc, #216]	@ (80096bc <xTaskIncrementTick+0x150>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d104      	bne.n	80095f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ec:	4b36      	ldr	r3, [pc, #216]	@ (80096c8 <xTaskIncrementTick+0x15c>)
 80095ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095f2:	601a      	str	r2, [r3, #0]
					break;
 80095f4:	e03f      	b.n	8009676 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f6:	4b31      	ldr	r3, [pc, #196]	@ (80096bc <xTaskIncrementTick+0x150>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	429a      	cmp	r2, r3
 800960c:	d203      	bcs.n	8009616 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800960e:	4a2e      	ldr	r2, [pc, #184]	@ (80096c8 <xTaskIncrementTick+0x15c>)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009614:	e02f      	b.n	8009676 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	3304      	adds	r3, #4
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe ff82 	bl	8008524 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	3318      	adds	r3, #24
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe ff79 	bl	8008524 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009636:	4b25      	ldr	r3, [pc, #148]	@ (80096cc <xTaskIncrementTick+0x160>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d903      	bls.n	8009646 <xTaskIncrementTick+0xda>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	4a22      	ldr	r2, [pc, #136]	@ (80096cc <xTaskIncrementTick+0x160>)
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4a1f      	ldr	r2, [pc, #124]	@ (80096d0 <xTaskIncrementTick+0x164>)
 8009654:	441a      	add	r2, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	3304      	adds	r3, #4
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f7fe ff04 	bl	800846a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009666:	4b1b      	ldr	r3, [pc, #108]	@ (80096d4 <xTaskIncrementTick+0x168>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	429a      	cmp	r2, r3
 800966e:	d3b8      	bcc.n	80095e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009670:	2301      	movs	r3, #1
 8009672:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009674:	e7b5      	b.n	80095e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009676:	4b17      	ldr	r3, [pc, #92]	@ (80096d4 <xTaskIncrementTick+0x168>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967c:	4914      	ldr	r1, [pc, #80]	@ (80096d0 <xTaskIncrementTick+0x164>)
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d901      	bls.n	8009692 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800968e:	2301      	movs	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009692:	4b11      	ldr	r3, [pc, #68]	@ (80096d8 <xTaskIncrementTick+0x16c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d007      	beq.n	80096aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800969a:	2301      	movs	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
 800969e:	e004      	b.n	80096aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096a0:	4b0e      	ldr	r3, [pc, #56]	@ (80096dc <xTaskIncrementTick+0x170>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	4a0d      	ldr	r2, [pc, #52]	@ (80096dc <xTaskIncrementTick+0x170>)
 80096a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096aa:	697b      	ldr	r3, [r7, #20]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20007360 	.word	0x20007360
 80096b8:	2000733c 	.word	0x2000733c
 80096bc:	200072f0 	.word	0x200072f0
 80096c0:	200072f4 	.word	0x200072f4
 80096c4:	20007350 	.word	0x20007350
 80096c8:	20007358 	.word	0x20007358
 80096cc:	20007340 	.word	0x20007340
 80096d0:	20006e68 	.word	0x20006e68
 80096d4:	20006e64 	.word	0x20006e64
 80096d8:	2000734c 	.word	0x2000734c
 80096dc:	20007348 	.word	0x20007348

080096e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096e6:	4b28      	ldr	r3, [pc, #160]	@ (8009788 <vTaskSwitchContext+0xa8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096ee:	4b27      	ldr	r3, [pc, #156]	@ (800978c <vTaskSwitchContext+0xac>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096f4:	e042      	b.n	800977c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80096f6:	4b25      	ldr	r3, [pc, #148]	@ (800978c <vTaskSwitchContext+0xac>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fc:	4b24      	ldr	r3, [pc, #144]	@ (8009790 <vTaskSwitchContext+0xb0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	e011      	b.n	8009728 <vTaskSwitchContext+0x48>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <vTaskSwitchContext+0x42>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	607b      	str	r3, [r7, #4]
}
 800971c:	bf00      	nop
 800971e:	bf00      	nop
 8009720:	e7fd      	b.n	800971e <vTaskSwitchContext+0x3e>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3b01      	subs	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	491a      	ldr	r1, [pc, #104]	@ (8009794 <vTaskSwitchContext+0xb4>)
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	4613      	mov	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0e3      	beq.n	8009704 <vTaskSwitchContext+0x24>
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4a13      	ldr	r2, [pc, #76]	@ (8009794 <vTaskSwitchContext+0xb4>)
 8009748:	4413      	add	r3, r2
 800974a:	60bb      	str	r3, [r7, #8]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	605a      	str	r2, [r3, #4]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	3308      	adds	r3, #8
 800975e:	429a      	cmp	r2, r3
 8009760:	d104      	bne.n	800976c <vTaskSwitchContext+0x8c>
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	605a      	str	r2, [r3, #4]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	4a09      	ldr	r2, [pc, #36]	@ (8009798 <vTaskSwitchContext+0xb8>)
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	4a06      	ldr	r2, [pc, #24]	@ (8009790 <vTaskSwitchContext+0xb0>)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6013      	str	r3, [r2, #0]
}
 800977c:	bf00      	nop
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	20007360 	.word	0x20007360
 800978c:	2000734c 	.word	0x2000734c
 8009790:	20007340 	.word	0x20007340
 8009794:	20006e68 	.word	0x20006e68
 8009798:	20006e64 	.word	0x20006e64

0800979c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60fb      	str	r3, [r7, #12]
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097c4:	4b07      	ldr	r3, [pc, #28]	@ (80097e4 <vTaskPlaceOnEventList+0x48>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3318      	adds	r3, #24
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7fe fe70 	bl	80084b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097d2:	2101      	movs	r1, #1
 80097d4:	6838      	ldr	r0, [r7, #0]
 80097d6:	f000 faa9 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20006e64 	.word	0x20006e64

080097e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10b      	bne.n	8009812 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	617b      	str	r3, [r7, #20]
}
 800980c:	bf00      	nop
 800980e:	bf00      	nop
 8009810:	e7fd      	b.n	800980e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009812:	4b0a      	ldr	r3, [pc, #40]	@ (800983c <vTaskPlaceOnEventListRestricted+0x54>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3318      	adds	r3, #24
 8009818:	4619      	mov	r1, r3
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7fe fe25 	bl	800846a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800982a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	68b8      	ldr	r0, [r7, #8]
 8009830:	f000 fa7c 	bl	8009d2c <prvAddCurrentTaskToDelayedList>
	}
 8009834:	bf00      	nop
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20006e64 	.word	0x20006e64

08009840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10b      	bne.n	800986e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	60fb      	str	r3, [r7, #12]
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	3318      	adds	r3, #24
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fe56 	bl	8008524 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009878:	4b1d      	ldr	r3, [pc, #116]	@ (80098f0 <xTaskRemoveFromEventList+0xb0>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d11d      	bne.n	80098bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	3304      	adds	r3, #4
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fe4d 	bl	8008524 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988e:	4b19      	ldr	r3, [pc, #100]	@ (80098f4 <xTaskRemoveFromEventList+0xb4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d903      	bls.n	800989e <xTaskRemoveFromEventList+0x5e>
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989a:	4a16      	ldr	r2, [pc, #88]	@ (80098f4 <xTaskRemoveFromEventList+0xb4>)
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4a13      	ldr	r2, [pc, #76]	@ (80098f8 <xTaskRemoveFromEventList+0xb8>)
 80098ac:	441a      	add	r2, r3
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4619      	mov	r1, r3
 80098b4:	4610      	mov	r0, r2
 80098b6:	f7fe fdd8 	bl	800846a <vListInsertEnd>
 80098ba:	e005      	b.n	80098c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3318      	adds	r3, #24
 80098c0:	4619      	mov	r1, r3
 80098c2:	480e      	ldr	r0, [pc, #56]	@ (80098fc <xTaskRemoveFromEventList+0xbc>)
 80098c4:	f7fe fdd1 	bl	800846a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009900 <xTaskRemoveFromEventList+0xc0>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d905      	bls.n	80098e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098d6:	2301      	movs	r3, #1
 80098d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098da:	4b0a      	ldr	r3, [pc, #40]	@ (8009904 <xTaskRemoveFromEventList+0xc4>)
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	e001      	b.n	80098e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098e6:	697b      	ldr	r3, [r7, #20]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20007360 	.word	0x20007360
 80098f4:	20007340 	.word	0x20007340
 80098f8:	20006e68 	.word	0x20006e68
 80098fc:	200072f8 	.word	0x200072f8
 8009900:	20006e64 	.word	0x20006e64
 8009904:	2000734c 	.word	0x2000734c

08009908 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10b      	bne.n	800992e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60fb      	str	r3, [r7, #12]
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	e7fd      	b.n	800992a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800992e:	f000 fedb 	bl	800a6e8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009932:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <vTaskSetTimeOutState+0x48>)
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800993a:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <vTaskSetTimeOutState+0x4c>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009942:	f000 ff03 	bl	800a74c <vPortExitCritical>
}
 8009946:	bf00      	nop
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20007350 	.word	0x20007350
 8009954:	2000733c 	.word	0x2000733c

08009958 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009960:	4b06      	ldr	r3, [pc, #24]	@ (800997c <vTaskInternalSetTimeOutState+0x24>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009968:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <vTaskInternalSetTimeOutState+0x28>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	605a      	str	r2, [r3, #4]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	20007350 	.word	0x20007350
 8009980:	2000733c 	.word	0x2000733c

08009984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10b      	bne.n	80099ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	613b      	str	r3, [r7, #16]
}
 80099a6:	bf00      	nop
 80099a8:	bf00      	nop
 80099aa:	e7fd      	b.n	80099a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	60fb      	str	r3, [r7, #12]
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	e7fd      	b.n	80099c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80099ca:	f000 fe8d 	bl	800a6e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099ce:	4b1d      	ldr	r3, [pc, #116]	@ (8009a44 <xTaskCheckForTimeOut+0xc0>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e6:	d102      	bne.n	80099ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61fb      	str	r3, [r7, #28]
 80099ec:	e023      	b.n	8009a36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b15      	ldr	r3, [pc, #84]	@ (8009a48 <xTaskCheckForTimeOut+0xc4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d007      	beq.n	8009a0a <xTaskCheckForTimeOut+0x86>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d302      	bcc.n	8009a0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a04:	2301      	movs	r3, #1
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	e015      	b.n	8009a36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d20b      	bcs.n	8009a2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	1ad2      	subs	r2, r2, r3
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7ff ff99 	bl	8009958 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61fb      	str	r3, [r7, #28]
 8009a2a:	e004      	b.n	8009a36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a32:	2301      	movs	r3, #1
 8009a34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a36:	f000 fe89 	bl	800a74c <vPortExitCritical>

	return xReturn;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	2000733c 	.word	0x2000733c
 8009a48:	20007350 	.word	0x20007350

08009a4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a50:	4b03      	ldr	r3, [pc, #12]	@ (8009a60 <vTaskMissedYield+0x14>)
 8009a52:	2201      	movs	r2, #1
 8009a54:	601a      	str	r2, [r3, #0]
}
 8009a56:	bf00      	nop
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	2000734c 	.word	0x2000734c

08009a64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a6c:	f000 f852 	bl	8009b14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a70:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <prvIdleTask+0x28>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d9f9      	bls.n	8009a6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <prvIdleTask+0x2c>)
 8009a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a88:	e7f0      	b.n	8009a6c <prvIdleTask+0x8>
 8009a8a:	bf00      	nop
 8009a8c:	20006e68 	.word	0x20006e68
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	607b      	str	r3, [r7, #4]
 8009a9e:	e00c      	b.n	8009aba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4a12      	ldr	r2, [pc, #72]	@ (8009af4 <prvInitialiseTaskLists+0x60>)
 8009aac:	4413      	add	r3, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fcae 	bl	8008410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	607b      	str	r3, [r7, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b37      	cmp	r3, #55	@ 0x37
 8009abe:	d9ef      	bls.n	8009aa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ac0:	480d      	ldr	r0, [pc, #52]	@ (8009af8 <prvInitialiseTaskLists+0x64>)
 8009ac2:	f7fe fca5 	bl	8008410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ac6:	480d      	ldr	r0, [pc, #52]	@ (8009afc <prvInitialiseTaskLists+0x68>)
 8009ac8:	f7fe fca2 	bl	8008410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009acc:	480c      	ldr	r0, [pc, #48]	@ (8009b00 <prvInitialiseTaskLists+0x6c>)
 8009ace:	f7fe fc9f 	bl	8008410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ad2:	480c      	ldr	r0, [pc, #48]	@ (8009b04 <prvInitialiseTaskLists+0x70>)
 8009ad4:	f7fe fc9c 	bl	8008410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ad8:	480b      	ldr	r0, [pc, #44]	@ (8009b08 <prvInitialiseTaskLists+0x74>)
 8009ada:	f7fe fc99 	bl	8008410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ade:	4b0b      	ldr	r3, [pc, #44]	@ (8009b0c <prvInitialiseTaskLists+0x78>)
 8009ae0:	4a05      	ldr	r2, [pc, #20]	@ (8009af8 <prvInitialiseTaskLists+0x64>)
 8009ae2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8009b10 <prvInitialiseTaskLists+0x7c>)
 8009ae6:	4a05      	ldr	r2, [pc, #20]	@ (8009afc <prvInitialiseTaskLists+0x68>)
 8009ae8:	601a      	str	r2, [r3, #0]
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20006e68 	.word	0x20006e68
 8009af8:	200072c8 	.word	0x200072c8
 8009afc:	200072dc 	.word	0x200072dc
 8009b00:	200072f8 	.word	0x200072f8
 8009b04:	2000730c 	.word	0x2000730c
 8009b08:	20007324 	.word	0x20007324
 8009b0c:	200072f0 	.word	0x200072f0
 8009b10:	200072f4 	.word	0x200072f4

08009b14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b1a:	e019      	b.n	8009b50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b1c:	f000 fde4 	bl	800a6e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b20:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <prvCheckTasksWaitingTermination+0x50>)
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe fcf9 	bl	8008524 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b32:	4b0d      	ldr	r3, [pc, #52]	@ (8009b68 <prvCheckTasksWaitingTermination+0x54>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	4a0b      	ldr	r2, [pc, #44]	@ (8009b68 <prvCheckTasksWaitingTermination+0x54>)
 8009b3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b6c <prvCheckTasksWaitingTermination+0x58>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	4a0a      	ldr	r2, [pc, #40]	@ (8009b6c <prvCheckTasksWaitingTermination+0x58>)
 8009b44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b46:	f000 fe01 	bl	800a74c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f810 	bl	8009b70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b50:	4b06      	ldr	r3, [pc, #24]	@ (8009b6c <prvCheckTasksWaitingTermination+0x58>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e1      	bne.n	8009b1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	2000730c 	.word	0x2000730c
 8009b68:	20007338 	.word	0x20007338
 8009b6c:	20007320 	.word	0x20007320

08009b70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d108      	bne.n	8009b94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 ff9e 	bl	800aac8 <vPortFree>
				vPortFree( pxTCB );
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 ff9b 	bl	800aac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b92:	e019      	b.n	8009bc8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d103      	bne.n	8009ba6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 ff92 	bl	800aac8 <vPortFree>
	}
 8009ba4:	e010      	b.n	8009bc8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d00b      	beq.n	8009bc8 <prvDeleteTCB+0x58>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	60fb      	str	r3, [r7, #12]
}
 8009bc2:	bf00      	nop
 8009bc4:	bf00      	nop
 8009bc6:	e7fd      	b.n	8009bc4 <prvDeleteTCB+0x54>
	}
 8009bc8:	bf00      	nop
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8009c08 <prvResetNextTaskUnblockTime+0x38>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d104      	bne.n	8009bea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009be0:	4b0a      	ldr	r3, [pc, #40]	@ (8009c0c <prvResetNextTaskUnblockTime+0x3c>)
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009be6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009be8:	e008      	b.n	8009bfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bea:	4b07      	ldr	r3, [pc, #28]	@ (8009c08 <prvResetNextTaskUnblockTime+0x38>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	4a04      	ldr	r2, [pc, #16]	@ (8009c0c <prvResetNextTaskUnblockTime+0x3c>)
 8009bfa:	6013      	str	r3, [r2, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	200072f0 	.word	0x200072f0
 8009c0c:	20007358 	.word	0x20007358

08009c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c16:	4b0b      	ldr	r3, [pc, #44]	@ (8009c44 <xTaskGetSchedulerState+0x34>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d102      	bne.n	8009c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e008      	b.n	8009c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c24:	4b08      	ldr	r3, [pc, #32]	@ (8009c48 <xTaskGetSchedulerState+0x38>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	607b      	str	r3, [r7, #4]
 8009c30:	e001      	b.n	8009c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c32:	2300      	movs	r3, #0
 8009c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c36:	687b      	ldr	r3, [r7, #4]
	}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	20007344 	.word	0x20007344
 8009c48:	20007360 	.word	0x20007360

08009c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d058      	beq.n	8009d14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c62:	4b2f      	ldr	r3, [pc, #188]	@ (8009d20 <xTaskPriorityDisinherit+0xd4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d00b      	beq.n	8009c84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60fb      	str	r3, [r7, #12]
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10b      	bne.n	8009ca4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	60bb      	str	r3, [r7, #8]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ca8:	1e5a      	subs	r2, r3, #1
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d02c      	beq.n	8009d14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d128      	bne.n	8009d14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fc2c 	bl	8008524 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8009d24 <xTaskPriorityDisinherit+0xd8>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d903      	bls.n	8009cf4 <xTaskPriorityDisinherit+0xa8>
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8009d24 <xTaskPriorityDisinherit+0xd8>)
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4a09      	ldr	r2, [pc, #36]	@ (8009d28 <xTaskPriorityDisinherit+0xdc>)
 8009d02:	441a      	add	r2, r3
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7fe fbad 	bl	800846a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d10:	2301      	movs	r3, #1
 8009d12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d14:	697b      	ldr	r3, [r7, #20]
	}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20006e64 	.word	0x20006e64
 8009d24:	20007340 	.word	0x20007340
 8009d28:	20006e68 	.word	0x20006e68

08009d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d36:	4b21      	ldr	r3, [pc, #132]	@ (8009dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d3c:	4b20      	ldr	r3, [pc, #128]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3304      	adds	r3, #4
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fbee 	bl	8008524 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d4e:	d10a      	bne.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d56:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4819      	ldr	r0, [pc, #100]	@ (8009dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d60:	f7fe fb83 	bl	800846a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d64:	e026      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d6e:	4b14      	ldr	r3, [pc, #80]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d209      	bcs.n	8009d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d7e:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fe fb91 	bl	80084b2 <vListInsert>
}
 8009d90:	e010      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d92:	4b0e      	ldr	r3, [pc, #56]	@ (8009dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7fe fb87 	bl	80084b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009da4:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d202      	bcs.n	8009db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dae:	4a08      	ldr	r2, [pc, #32]	@ (8009dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6013      	str	r3, [r2, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	2000733c 	.word	0x2000733c
 8009dc0:	20006e64 	.word	0x20006e64
 8009dc4:	20007324 	.word	0x20007324
 8009dc8:	200072f4 	.word	0x200072f4
 8009dcc:	200072f0 	.word	0x200072f0
 8009dd0:	20007358 	.word	0x20007358

08009dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	@ 0x28
 8009dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dde:	f000 fb13 	bl	800a408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009de2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e58 <xTimerCreateTimerTask+0x84>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d021      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009df2:	1d3a      	adds	r2, r7, #4
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	f107 030c 	add.w	r3, r7, #12
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe faed 	bl	80083dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	9202      	str	r2, [sp, #8]
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2300      	movs	r3, #0
 8009e12:	460a      	mov	r2, r1
 8009e14:	4911      	ldr	r1, [pc, #68]	@ (8009e5c <xTimerCreateTimerTask+0x88>)
 8009e16:	4812      	ldr	r0, [pc, #72]	@ (8009e60 <xTimerCreateTimerTask+0x8c>)
 8009e18:	f7ff f8a8 	bl	8008f6c <xTaskCreateStatic>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	4a11      	ldr	r2, [pc, #68]	@ (8009e64 <xTimerCreateTimerTask+0x90>)
 8009e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e22:	4b10      	ldr	r3, [pc, #64]	@ (8009e64 <xTimerCreateTimerTask+0x90>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10b      	bne.n	8009e4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	613b      	str	r3, [r7, #16]
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e4c:	697b      	ldr	r3, [r7, #20]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20007394 	.word	0x20007394
 8009e5c:	08018a7c 	.word	0x08018a7c
 8009e60:	08009fa1 	.word	0x08009fa1
 8009e64:	20007398 	.word	0x20007398

08009e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08a      	sub	sp, #40	@ 0x28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10b      	bne.n	8009e98 <xTimerGenericCommand+0x30>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	623b      	str	r3, [r7, #32]
}
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	e7fd      	b.n	8009e94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e98:	4b19      	ldr	r3, [pc, #100]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02a      	beq.n	8009ef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	dc18      	bgt.n	8009ee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eb2:	f7ff fead 	bl	8009c10 <xTaskGetSchedulerState>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d109      	bne.n	8009ed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ebc:	4b10      	ldr	r3, [pc, #64]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	f107 0110 	add.w	r1, r7, #16
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec8:	f7fe fc60 	bl	800878c <xQueueGenericSend>
 8009ecc:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ece:	e012      	b.n	8009ef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	f107 0110 	add.w	r1, r7, #16
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2200      	movs	r2, #0
 8009edc:	f7fe fc56 	bl	800878c <xQueueGenericSend>
 8009ee0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ee2:	e008      	b.n	8009ef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ee4:	4b06      	ldr	r3, [pc, #24]	@ (8009f00 <xTimerGenericCommand+0x98>)
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	f107 0110 	add.w	r1, r7, #16
 8009eec:	2300      	movs	r3, #0
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	f7fe fd4e 	bl	8008990 <xQueueGenericSendFromISR>
 8009ef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3728      	adds	r7, #40	@ 0x28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20007394 	.word	0x20007394

08009f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0e:	4b23      	ldr	r3, [pc, #140]	@ (8009f9c <prvProcessExpiredTimer+0x98>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fb01 	bl	8008524 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d023      	beq.n	8009f78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	18d1      	adds	r1, r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	6978      	ldr	r0, [r7, #20]
 8009f3e:	f000 f8d5 	bl	800a0ec <prvInsertTimerInActiveList>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d020      	beq.n	8009f8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	2100      	movs	r1, #0
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff ff88 	bl	8009e68 <xTimerGenericCommand>
 8009f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d114      	bne.n	8009f8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	60fb      	str	r3, [r7, #12]
}
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	e7fd      	b.n	8009f74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	6978      	ldr	r0, [r7, #20]
 8009f90:	4798      	blx	r3
}
 8009f92:	bf00      	nop
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	2000738c 	.word	0x2000738c

08009fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fa8:	f107 0308 	add.w	r3, r7, #8
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f859 	bl	800a064 <prvGetNextExpireTime>
 8009fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f805 	bl	8009fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fbe:	f000 f8d7 	bl	800a170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fc2:	bf00      	nop
 8009fc4:	e7f0      	b.n	8009fa8 <prvTimerTask+0x8>
	...

08009fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fd2:	f7ff fa0f 	bl	80093f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f866 	bl	800a0ac <prvSampleTimeNow>
 8009fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d130      	bne.n	800a04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <prvProcessTimerOrBlockTask+0x3c>
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d806      	bhi.n	800a004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ff6:	f7ff fa0b 	bl	8009410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ff81 	bl	8009f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a002:	e024      	b.n	800a04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d008      	beq.n	800a01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a00a:	4b13      	ldr	r3, [pc, #76]	@ (800a058 <prvProcessTimerOrBlockTask+0x90>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <prvProcessTimerOrBlockTask+0x50>
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <prvProcessTimerOrBlockTask+0x52>
 800a018:	2300      	movs	r3, #0
 800a01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a01c:	4b0f      	ldr	r3, [pc, #60]	@ (800a05c <prvProcessTimerOrBlockTask+0x94>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	4619      	mov	r1, r3
 800a02a:	f7fe ff6b 	bl	8008f04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a02e:	f7ff f9ef 	bl	8009410 <xTaskResumeAll>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10a      	bne.n	800a04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a038:	4b09      	ldr	r3, [pc, #36]	@ (800a060 <prvProcessTimerOrBlockTask+0x98>)
 800a03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	f3bf 8f6f 	isb	sy
}
 800a048:	e001      	b.n	800a04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a04a:	f7ff f9e1 	bl	8009410 <xTaskResumeAll>
}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20007390 	.word	0x20007390
 800a05c:	20007394 	.word	0x20007394
 800a060:	e000ed04 	.word	0xe000ed04

0800a064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a06c:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a8 <prvGetNextExpireTime+0x44>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <prvGetNextExpireTime+0x16>
 800a076:	2201      	movs	r2, #1
 800a078:	e000      	b.n	800a07c <prvGetNextExpireTime+0x18>
 800a07a:	2200      	movs	r2, #0
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d105      	bne.n	800a094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a088:	4b07      	ldr	r3, [pc, #28]	@ (800a0a8 <prvGetNextExpireTime+0x44>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	e001      	b.n	800a098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a098:	68fb      	ldr	r3, [r7, #12]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	2000738c 	.word	0x2000738c

0800a0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0b4:	f7ff fa4a 	bl	800954c <xTaskGetTickCount>
 800a0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e8 <prvSampleTimeNow+0x3c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d205      	bcs.n	800a0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0c4:	f000 f93a 	bl	800a33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e002      	b.n	800a0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0d6:	4a04      	ldr	r2, [pc, #16]	@ (800a0e8 <prvSampleTimeNow+0x3c>)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000739c 	.word	0x2000739c

0800a0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d812      	bhi.n	800a138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d302      	bcc.n	800a126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a120:	2301      	movs	r3, #1
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	e01b      	b.n	800a15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a126:	4b10      	ldr	r3, [pc, #64]	@ (800a168 <prvInsertTimerInActiveList+0x7c>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4619      	mov	r1, r3
 800a130:	4610      	mov	r0, r2
 800a132:	f7fe f9be 	bl	80084b2 <vListInsert>
 800a136:	e012      	b.n	800a15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d206      	bcs.n	800a14e <prvInsertTimerInActiveList+0x62>
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d302      	bcc.n	800a14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e007      	b.n	800a15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a14e:	4b07      	ldr	r3, [pc, #28]	@ (800a16c <prvInsertTimerInActiveList+0x80>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3304      	adds	r3, #4
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f7fe f9aa 	bl	80084b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a15e:	697b      	ldr	r3, [r7, #20]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20007390 	.word	0x20007390
 800a16c:	2000738c 	.word	0x2000738c

0800a170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08e      	sub	sp, #56	@ 0x38
 800a174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a176:	e0ce      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	da19      	bge.n	800a1b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a17e:	1d3b      	adds	r3, r7, #4
 800a180:	3304      	adds	r3, #4
 800a182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	61fb      	str	r3, [r7, #28]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1a8:	6850      	ldr	r0, [r2, #4]
 800a1aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ac:	6892      	ldr	r2, [r2, #8]
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f2c0 80ae 	blt.w	800a316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe f9aa 	bl	8008524 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff ff6a 	bl	800a0ac <prvSampleTimeNow>
 800a1d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	f200 8097 	bhi.w	800a310 <prvProcessReceivedCommands+0x1a0>
 800a1e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e8 <prvProcessReceivedCommands+0x78>)
 800a1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e8:	0800a211 	.word	0x0800a211
 800a1ec:	0800a211 	.word	0x0800a211
 800a1f0:	0800a211 	.word	0x0800a211
 800a1f4:	0800a287 	.word	0x0800a287
 800a1f8:	0800a29b 	.word	0x0800a29b
 800a1fc:	0800a2e7 	.word	0x0800a2e7
 800a200:	0800a211 	.word	0x0800a211
 800a204:	0800a211 	.word	0x0800a211
 800a208:	0800a287 	.word	0x0800a287
 800a20c:	0800a29b 	.word	0x0800a29b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	18d1      	adds	r1, r2, r3
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a22e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a230:	f7ff ff5c 	bl	800a0ec <prvInsertTimerInActiveList>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d06c      	beq.n	800a314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d061      	beq.n	800a314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	441a      	add	r2, r3
 800a258:	2300      	movs	r3, #0
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	2300      	movs	r3, #0
 800a25e:	2100      	movs	r1, #0
 800a260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a262:	f7ff fe01 	bl	8009e68 <xTimerGenericCommand>
 800a266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d152      	bne.n	800a314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	61bb      	str	r3, [r7, #24]
}
 800a280:	bf00      	nop
 800a282:	bf00      	nop
 800a284:	e7fd      	b.n	800a282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a28c:	f023 0301 	bic.w	r3, r3, #1
 800a290:	b2da      	uxtb	r2, r3
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a298:	e03d      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2a0:	f043 0301 	orr.w	r3, r3, #1
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10b      	bne.n	800a2d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	617b      	str	r3, [r7, #20]
}
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
 800a2d0:	e7fd      	b.n	800a2ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	18d1      	adds	r1, r2, r3
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2e0:	f7ff ff04 	bl	800a0ec <prvInsertTimerInActiveList>
					break;
 800a2e4:	e017      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d103      	bne.n	800a2fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a2f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2f6:	f000 fbe7 	bl	800aac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2fa:	e00c      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a302:	f023 0301 	bic.w	r3, r3, #1
 800a306:	b2da      	uxtb	r2, r3
 800a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a30e:	e002      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a310:	bf00      	nop
 800a312:	e000      	b.n	800a316 <prvProcessReceivedCommands+0x1a6>
					break;
 800a314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a316:	4b08      	ldr	r3, [pc, #32]	@ (800a338 <prvProcessReceivedCommands+0x1c8>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	1d39      	adds	r1, r7, #4
 800a31c:	2200      	movs	r2, #0
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fbd4 	bl	8008acc <xQueueReceive>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	f47f af26 	bne.w	800a178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	3730      	adds	r7, #48	@ 0x30
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20007394 	.word	0x20007394

0800a33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a342:	e049      	b.n	800a3d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a344:	4b2e      	ldr	r3, [pc, #184]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a34e:	4b2c      	ldr	r3, [pc, #176]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fe f8e1 	bl	8008524 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d02f      	beq.n	800a3d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4413      	add	r3, r2
 800a380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	429a      	cmp	r2, r3
 800a388:	d90e      	bls.n	800a3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a396:	4b1a      	ldr	r3, [pc, #104]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3304      	adds	r3, #4
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	f7fe f886 	bl	80084b2 <vListInsert>
 800a3a6:	e017      	b.n	800a3d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7ff fd58 	bl	8009e68 <xTimerGenericCommand>
 800a3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10b      	bne.n	800a3d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	603b      	str	r3, [r7, #0]
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	e7fd      	b.n	800a3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3d8:	4b09      	ldr	r3, [pc, #36]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1b0      	bne.n	800a344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3e2:	4b07      	ldr	r3, [pc, #28]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3e8:	4b06      	ldr	r3, [pc, #24]	@ (800a404 <prvSwitchTimerLists+0xc8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a04      	ldr	r2, [pc, #16]	@ (800a400 <prvSwitchTimerLists+0xc4>)
 800a3ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3f0:	4a04      	ldr	r2, [pc, #16]	@ (800a404 <prvSwitchTimerLists+0xc8>)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	6013      	str	r3, [r2, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	2000738c 	.word	0x2000738c
 800a404:	20007390 	.word	0x20007390

0800a408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a40e:	f000 f96b 	bl	800a6e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a412:	4b15      	ldr	r3, [pc, #84]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d120      	bne.n	800a45c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a41a:	4814      	ldr	r0, [pc, #80]	@ (800a46c <prvCheckForValidListAndQueue+0x64>)
 800a41c:	f7fd fff8 	bl	8008410 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a420:	4813      	ldr	r0, [pc, #76]	@ (800a470 <prvCheckForValidListAndQueue+0x68>)
 800a422:	f7fd fff5 	bl	8008410 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a426:	4b13      	ldr	r3, [pc, #76]	@ (800a474 <prvCheckForValidListAndQueue+0x6c>)
 800a428:	4a10      	ldr	r2, [pc, #64]	@ (800a46c <prvCheckForValidListAndQueue+0x64>)
 800a42a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a42c:	4b12      	ldr	r3, [pc, #72]	@ (800a478 <prvCheckForValidListAndQueue+0x70>)
 800a42e:	4a10      	ldr	r2, [pc, #64]	@ (800a470 <prvCheckForValidListAndQueue+0x68>)
 800a430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a432:	2300      	movs	r3, #0
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	4b11      	ldr	r3, [pc, #68]	@ (800a47c <prvCheckForValidListAndQueue+0x74>)
 800a438:	4a11      	ldr	r2, [pc, #68]	@ (800a480 <prvCheckForValidListAndQueue+0x78>)
 800a43a:	2110      	movs	r1, #16
 800a43c:	200a      	movs	r0, #10
 800a43e:	f7fe f905 	bl	800864c <xQueueGenericCreateStatic>
 800a442:	4603      	mov	r3, r0
 800a444:	4a08      	ldr	r2, [pc, #32]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a448:	4b07      	ldr	r3, [pc, #28]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	490b      	ldr	r1, [pc, #44]	@ (800a484 <prvCheckForValidListAndQueue+0x7c>)
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe fd2a 	bl	8008eb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a45c:	f000 f976 	bl	800a74c <vPortExitCritical>
}
 800a460:	bf00      	nop
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20007394 	.word	0x20007394
 800a46c:	20007364 	.word	0x20007364
 800a470:	20007378 	.word	0x20007378
 800a474:	2000738c 	.word	0x2000738c
 800a478:	20007390 	.word	0x20007390
 800a47c:	20007440 	.word	0x20007440
 800a480:	200073a0 	.word	0x200073a0
 800a484:	08018a84 	.word	0x08018a84

0800a488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3b04      	subs	r3, #4
 800a498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3b04      	subs	r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f023 0201 	bic.w	r2, r3, #1
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3b04      	subs	r3, #4
 800a4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4b8:	4a0c      	ldr	r2, [pc, #48]	@ (800a4ec <pxPortInitialiseStack+0x64>)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3b14      	subs	r3, #20
 800a4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3b04      	subs	r3, #4
 800a4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f06f 0202 	mvn.w	r2, #2
 800a4d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3b20      	subs	r3, #32
 800a4dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4de:	68fb      	ldr	r3, [r7, #12]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	0800a4f1 	.word	0x0800a4f1

0800a4f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4fa:	4b13      	ldr	r3, [pc, #76]	@ (800a548 <prvTaskExitError+0x58>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a502:	d00b      	beq.n	800a51c <prvTaskExitError+0x2c>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	60fb      	str	r3, [r7, #12]
}
 800a516:	bf00      	nop
 800a518:	bf00      	nop
 800a51a:	e7fd      	b.n	800a518 <prvTaskExitError+0x28>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	60bb      	str	r3, [r7, #8]
}
 800a52e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a530:	bf00      	nop
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0fc      	beq.n	800a532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000010 	.word	0x20000010
 800a54c:	00000000 	.word	0x00000000

0800a550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a550:	4b07      	ldr	r3, [pc, #28]	@ (800a570 <pxCurrentTCBConst2>)
 800a552:	6819      	ldr	r1, [r3, #0]
 800a554:	6808      	ldr	r0, [r1, #0]
 800a556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	f380 8809 	msr	PSP, r0
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8811 	msr	BASEPRI, r0
 800a56a:	4770      	bx	lr
 800a56c:	f3af 8000 	nop.w

0800a570 <pxCurrentTCBConst2>:
 800a570:	20006e64 	.word	0x20006e64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop

0800a578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a578:	4808      	ldr	r0, [pc, #32]	@ (800a59c <prvPortStartFirstTask+0x24>)
 800a57a:	6800      	ldr	r0, [r0, #0]
 800a57c:	6800      	ldr	r0, [r0, #0]
 800a57e:	f380 8808 	msr	MSP, r0
 800a582:	f04f 0000 	mov.w	r0, #0
 800a586:	f380 8814 	msr	CONTROL, r0
 800a58a:	b662      	cpsie	i
 800a58c:	b661      	cpsie	f
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	df00      	svc	0
 800a598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a59a:	bf00      	nop
 800a59c:	e000ed08 	.word	0xe000ed08

0800a5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5a6:	4b47      	ldr	r3, [pc, #284]	@ (800a6c4 <xPortStartScheduler+0x124>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a47      	ldr	r2, [pc, #284]	@ (800a6c8 <xPortStartScheduler+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10b      	bne.n	800a5c8 <xPortStartScheduler+0x28>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	613b      	str	r3, [r7, #16]
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5c8:	4b3e      	ldr	r3, [pc, #248]	@ (800a6c4 <xPortStartScheduler+0x124>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a3f      	ldr	r2, [pc, #252]	@ (800a6cc <xPortStartScheduler+0x12c>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d10b      	bne.n	800a5ea <xPortStartScheduler+0x4a>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	60fb      	str	r3, [r7, #12]
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5ea:	4b39      	ldr	r3, [pc, #228]	@ (800a6d0 <xPortStartScheduler+0x130>)
 800a5ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	22ff      	movs	r2, #255	@ 0xff
 800a5fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	4b31      	ldr	r3, [pc, #196]	@ (800a6d4 <xPortStartScheduler+0x134>)
 800a610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a612:	4b31      	ldr	r3, [pc, #196]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a614:	2207      	movs	r2, #7
 800a616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a618:	e009      	b.n	800a62e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a61a:	4b2f      	ldr	r3, [pc, #188]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3b01      	subs	r3, #1
 800a620:	4a2d      	ldr	r2, [pc, #180]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a624:	78fb      	ldrb	r3, [r7, #3]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a636:	2b80      	cmp	r3, #128	@ 0x80
 800a638:	d0ef      	beq.n	800a61a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a63a:	4b27      	ldr	r3, [pc, #156]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f1c3 0307 	rsb	r3, r3, #7
 800a642:	2b04      	cmp	r3, #4
 800a644:	d00b      	beq.n	800a65e <xPortStartScheduler+0xbe>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	60bb      	str	r3, [r7, #8]
}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	e7fd      	b.n	800a65a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a65e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a668:	4b1b      	ldr	r3, [pc, #108]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a670:	4a19      	ldr	r2, [pc, #100]	@ (800a6d8 <xPortStartScheduler+0x138>)
 800a672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a67c:	4b17      	ldr	r3, [pc, #92]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a16      	ldr	r2, [pc, #88]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a688:	4b14      	ldr	r3, [pc, #80]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a13      	ldr	r2, [pc, #76]	@ (800a6dc <xPortStartScheduler+0x13c>)
 800a68e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a694:	f000 f8da 	bl	800a84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a698:	4b11      	ldr	r3, [pc, #68]	@ (800a6e0 <xPortStartScheduler+0x140>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a69e:	f000 f8f9 	bl	800a894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6a2:	4b10      	ldr	r3, [pc, #64]	@ (800a6e4 <xPortStartScheduler+0x144>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a6e4 <xPortStartScheduler+0x144>)
 800a6a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6ae:	f7ff ff63 	bl	800a578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6b2:	f7ff f815 	bl	80096e0 <vTaskSwitchContext>
	prvTaskExitError();
 800a6b6:	f7ff ff1b 	bl	800a4f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3718      	adds	r7, #24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	e000ed00 	.word	0xe000ed00
 800a6c8:	410fc271 	.word	0x410fc271
 800a6cc:	410fc270 	.word	0x410fc270
 800a6d0:	e000e400 	.word	0xe000e400
 800a6d4:	20007490 	.word	0x20007490
 800a6d8:	20007494 	.word	0x20007494
 800a6dc:	e000ed20 	.word	0xe000ed20
 800a6e0:	20000010 	.word	0x20000010
 800a6e4:	e000ef34 	.word	0xe000ef34

0800a6e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	607b      	str	r3, [r7, #4]
}
 800a700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a702:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <vPortEnterCritical+0x5c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3301      	adds	r3, #1
 800a708:	4a0e      	ldr	r2, [pc, #56]	@ (800a744 <vPortEnterCritical+0x5c>)
 800a70a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a70c:	4b0d      	ldr	r3, [pc, #52]	@ (800a744 <vPortEnterCritical+0x5c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d110      	bne.n	800a736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a714:	4b0c      	ldr	r3, [pc, #48]	@ (800a748 <vPortEnterCritical+0x60>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00b      	beq.n	800a736 <vPortEnterCritical+0x4e>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	603b      	str	r3, [r7, #0]
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <vPortEnterCritical+0x4a>
	}
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	20000010 	.word	0x20000010
 800a748:	e000ed04 	.word	0xe000ed04

0800a74c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a752:	4b12      	ldr	r3, [pc, #72]	@ (800a79c <vPortExitCritical+0x50>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <vPortExitCritical+0x26>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	607b      	str	r3, [r7, #4]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a772:	4b0a      	ldr	r3, [pc, #40]	@ (800a79c <vPortExitCritical+0x50>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3b01      	subs	r3, #1
 800a778:	4a08      	ldr	r2, [pc, #32]	@ (800a79c <vPortExitCritical+0x50>)
 800a77a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a77c:	4b07      	ldr	r3, [pc, #28]	@ (800a79c <vPortExitCritical+0x50>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <vPortExitCritical+0x44>
 800a784:	2300      	movs	r3, #0
 800a786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f383 8811 	msr	BASEPRI, r3
}
 800a78e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	20000010 	.word	0x20000010

0800a7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7a0:	f3ef 8009 	mrs	r0, PSP
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4b15      	ldr	r3, [pc, #84]	@ (800a800 <pxCurrentTCBConst>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f01e 0f10 	tst.w	lr, #16
 800a7b0:	bf08      	it	eq
 800a7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	6010      	str	r0, [r2, #0]
 800a7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7c4:	f380 8811 	msr	BASEPRI, r0
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f7fe ff86 	bl	80096e0 <vTaskSwitchContext>
 800a7d4:	f04f 0000 	mov.w	r0, #0
 800a7d8:	f380 8811 	msr	BASEPRI, r0
 800a7dc:	bc09      	pop	{r0, r3}
 800a7de:	6819      	ldr	r1, [r3, #0]
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e6:	f01e 0f10 	tst.w	lr, #16
 800a7ea:	bf08      	it	eq
 800a7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7f0:	f380 8809 	msr	PSP, r0
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w

0800a800 <pxCurrentTCBConst>:
 800a800:	20006e64 	.word	0x20006e64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop

0800a808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	607b      	str	r3, [r7, #4]
}
 800a820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a822:	f7fe fea3 	bl	800956c <xTaskIncrementTick>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a82c:	4b06      	ldr	r3, [pc, #24]	@ (800a848 <xPortSysTickHandler+0x40>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f383 8811 	msr	BASEPRI, r3
}
 800a83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a850:	4b0b      	ldr	r3, [pc, #44]	@ (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a856:	4b0b      	ldr	r3, [pc, #44]	@ (800a884 <vPortSetupTimerInterrupt+0x38>)
 800a858:	2200      	movs	r2, #0
 800a85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a85c:	4b0a      	ldr	r3, [pc, #40]	@ (800a888 <vPortSetupTimerInterrupt+0x3c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a0a      	ldr	r2, [pc, #40]	@ (800a88c <vPortSetupTimerInterrupt+0x40>)
 800a862:	fba2 2303 	umull	r2, r3, r2, r3
 800a866:	099b      	lsrs	r3, r3, #6
 800a868:	4a09      	ldr	r2, [pc, #36]	@ (800a890 <vPortSetupTimerInterrupt+0x44>)
 800a86a:	3b01      	subs	r3, #1
 800a86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a86e:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a870:	2207      	movs	r2, #7
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	e000e010 	.word	0xe000e010
 800a884:	e000e018 	.word	0xe000e018
 800a888:	20000004 	.word	0x20000004
 800a88c:	10624dd3 	.word	0x10624dd3
 800a890:	e000e014 	.word	0xe000e014

0800a894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a8a4 <vPortEnableVFP+0x10>
 800a898:	6801      	ldr	r1, [r0, #0]
 800a89a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a89e:	6001      	str	r1, [r0, #0]
 800a8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8a2:	bf00      	nop
 800a8a4:	e000ed88 	.word	0xe000ed88

0800a8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8ae:	f3ef 8305 	mrs	r3, IPSR
 800a8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b0f      	cmp	r3, #15
 800a8b8:	d915      	bls.n	800a8e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8ba:	4a18      	ldr	r2, [pc, #96]	@ (800a91c <vPortValidateInterruptPriority+0x74>)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8c4:	4b16      	ldr	r3, [pc, #88]	@ (800a920 <vPortValidateInterruptPriority+0x78>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	7afa      	ldrb	r2, [r7, #11]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d20b      	bcs.n	800a8e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	607b      	str	r3, [r7, #4]
}
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	e7fd      	b.n	800a8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a924 <vPortValidateInterruptPriority+0x7c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a928 <vPortValidateInterruptPriority+0x80>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d90b      	bls.n	800a90e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	603b      	str	r3, [r7, #0]
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <vPortValidateInterruptPriority+0x62>
	}
 800a90e:	bf00      	nop
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	e000e3f0 	.word	0xe000e3f0
 800a920:	20007490 	.word	0x20007490
 800a924:	e000ed0c 	.word	0xe000ed0c
 800a928:	20007494 	.word	0x20007494

0800a92c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08a      	sub	sp, #40	@ 0x28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a938:	f7fe fd5c 	bl	80093f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a93c:	4b5c      	ldr	r3, [pc, #368]	@ (800aab0 <pvPortMalloc+0x184>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a944:	f000 f924 	bl	800ab90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a948:	4b5a      	ldr	r3, [pc, #360]	@ (800aab4 <pvPortMalloc+0x188>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4013      	ands	r3, r2
 800a950:	2b00      	cmp	r3, #0
 800a952:	f040 8095 	bne.w	800aa80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01e      	beq.n	800a99a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a95c:	2208      	movs	r2, #8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4413      	add	r3, r2
 800a962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d015      	beq.n	800a99a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f023 0307 	bic.w	r3, r3, #7
 800a974:	3308      	adds	r3, #8
 800a976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <pvPortMalloc+0x6e>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	617b      	str	r3, [r7, #20]
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop
 800a998:	e7fd      	b.n	800a996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d06f      	beq.n	800aa80 <pvPortMalloc+0x154>
 800a9a0:	4b45      	ldr	r3, [pc, #276]	@ (800aab8 <pvPortMalloc+0x18c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d86a      	bhi.n	800aa80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9aa:	4b44      	ldr	r3, [pc, #272]	@ (800aabc <pvPortMalloc+0x190>)
 800a9ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9ae:	4b43      	ldr	r3, [pc, #268]	@ (800aabc <pvPortMalloc+0x190>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9b4:	e004      	b.n	800a9c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d903      	bls.n	800a9d2 <pvPortMalloc+0xa6>
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1f1      	bne.n	800a9b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9d2:	4b37      	ldr	r3, [pc, #220]	@ (800aab0 <pvPortMalloc+0x184>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d051      	beq.n	800aa80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	4413      	add	r3, r2
 800a9e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	1ad2      	subs	r2, r2, r3
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d920      	bls.n	800aa40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4413      	add	r3, r2
 800aa04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00b      	beq.n	800aa28 <pvPortMalloc+0xfc>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	613b      	str	r3, [r7, #16]
}
 800aa22:	bf00      	nop
 800aa24:	bf00      	nop
 800aa26:	e7fd      	b.n	800aa24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa3a:	69b8      	ldr	r0, [r7, #24]
 800aa3c:	f000 f90a 	bl	800ac54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa40:	4b1d      	ldr	r3, [pc, #116]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	4a1b      	ldr	r2, [pc, #108]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa4e:	4b1a      	ldr	r3, [pc, #104]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	4b1b      	ldr	r3, [pc, #108]	@ (800aac0 <pvPortMalloc+0x194>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d203      	bcs.n	800aa62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa5a:	4b17      	ldr	r3, [pc, #92]	@ (800aab8 <pvPortMalloc+0x18c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a18      	ldr	r2, [pc, #96]	@ (800aac0 <pvPortMalloc+0x194>)
 800aa60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	4b13      	ldr	r3, [pc, #76]	@ (800aab4 <pvPortMalloc+0x188>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa76:	4b13      	ldr	r3, [pc, #76]	@ (800aac4 <pvPortMalloc+0x198>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	4a11      	ldr	r2, [pc, #68]	@ (800aac4 <pvPortMalloc+0x198>)
 800aa7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa80:	f7fe fcc6 	bl	8009410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00b      	beq.n	800aaa6 <pvPortMalloc+0x17a>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	60fb      	str	r3, [r7, #12]
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	e7fd      	b.n	800aaa2 <pvPortMalloc+0x176>
	return pvReturn;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3728      	adds	r7, #40	@ 0x28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	200080a0 	.word	0x200080a0
 800aab4:	200080b4 	.word	0x200080b4
 800aab8:	200080a4 	.word	0x200080a4
 800aabc:	20008098 	.word	0x20008098
 800aac0:	200080a8 	.word	0x200080a8
 800aac4:	200080ac 	.word	0x200080ac

0800aac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d04f      	beq.n	800ab7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aada:	2308      	movs	r3, #8
 800aadc:	425b      	negs	r3, r3
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	4413      	add	r3, r2
 800aae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	4b25      	ldr	r3, [pc, #148]	@ (800ab84 <vPortFree+0xbc>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10b      	bne.n	800ab0e <vPortFree+0x46>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	60fb      	str	r3, [r7, #12]
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	e7fd      	b.n	800ab0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00b      	beq.n	800ab2e <vPortFree+0x66>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	4b14      	ldr	r3, [pc, #80]	@ (800ab84 <vPortFree+0xbc>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4013      	ands	r3, r2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d01e      	beq.n	800ab7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d11a      	bne.n	800ab7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	4b0e      	ldr	r3, [pc, #56]	@ (800ab84 <vPortFree+0xbc>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	43db      	mvns	r3, r3
 800ab4e:	401a      	ands	r2, r3
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab54:	f7fe fc4e 	bl	80093f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <vPortFree+0xc0>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4413      	add	r3, r2
 800ab62:	4a09      	ldr	r2, [pc, #36]	@ (800ab88 <vPortFree+0xc0>)
 800ab64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab66:	6938      	ldr	r0, [r7, #16]
 800ab68:	f000 f874 	bl	800ac54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab6c:	4b07      	ldr	r3, [pc, #28]	@ (800ab8c <vPortFree+0xc4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3301      	adds	r3, #1
 800ab72:	4a06      	ldr	r2, [pc, #24]	@ (800ab8c <vPortFree+0xc4>)
 800ab74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab76:	f7fe fc4b 	bl	8009410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab7a:	bf00      	nop
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200080b4 	.word	0x200080b4
 800ab88:	200080a4 	.word	0x200080a4
 800ab8c:	200080b0 	.word	0x200080b0

0800ab90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ab9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab9c:	4b27      	ldr	r3, [pc, #156]	@ (800ac3c <prvHeapInit+0xac>)
 800ab9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00c      	beq.n	800abc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3307      	adds	r3, #7
 800abae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f023 0307 	bic.w	r3, r3, #7
 800abb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	4a1f      	ldr	r2, [pc, #124]	@ (800ac3c <prvHeapInit+0xac>)
 800abc0:	4413      	add	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abc8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac40 <prvHeapInit+0xb0>)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abce:	4b1c      	ldr	r3, [pc, #112]	@ (800ac40 <prvHeapInit+0xb0>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	4413      	add	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abdc:	2208      	movs	r2, #8
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	1a9b      	subs	r3, r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0307 	bic.w	r3, r3, #7
 800abea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4a15      	ldr	r2, [pc, #84]	@ (800ac44 <prvHeapInit+0xb4>)
 800abf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abf2:	4b14      	ldr	r3, [pc, #80]	@ (800ac44 <prvHeapInit+0xb4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2200      	movs	r2, #0
 800abf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abfa:	4b12      	ldr	r3, [pc, #72]	@ (800ac44 <prvHeapInit+0xb4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	1ad2      	subs	r2, r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac10:	4b0c      	ldr	r3, [pc, #48]	@ (800ac44 <prvHeapInit+0xb4>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	4a0a      	ldr	r2, [pc, #40]	@ (800ac48 <prvHeapInit+0xb8>)
 800ac1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	4a09      	ldr	r2, [pc, #36]	@ (800ac4c <prvHeapInit+0xbc>)
 800ac26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac28:	4b09      	ldr	r3, [pc, #36]	@ (800ac50 <prvHeapInit+0xc0>)
 800ac2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac2e:	601a      	str	r2, [r3, #0]
}
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	20007498 	.word	0x20007498
 800ac40:	20008098 	.word	0x20008098
 800ac44:	200080a0 	.word	0x200080a0
 800ac48:	200080a8 	.word	0x200080a8
 800ac4c:	200080a4 	.word	0x200080a4
 800ac50:	200080b4 	.word	0x200080b4

0800ac54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac5c:	4b28      	ldr	r3, [pc, #160]	@ (800ad00 <prvInsertBlockIntoFreeList+0xac>)
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e002      	b.n	800ac68 <prvInsertBlockIntoFreeList+0x14>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d8f7      	bhi.n	800ac62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d108      	bne.n	800ac96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	441a      	add	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	441a      	add	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d118      	bne.n	800acdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	4b15      	ldr	r3, [pc, #84]	@ (800ad04 <prvInsertBlockIntoFreeList+0xb0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d00d      	beq.n	800acd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	441a      	add	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	e008      	b.n	800ace4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ad04 <prvInsertBlockIntoFreeList+0xb0>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	e003      	b.n	800ace4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d002      	beq.n	800acf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20008098 	.word	0x20008098
 800ad04:	200080a0 	.word	0x200080a0

0800ad08 <rcl_get_zero_initialized_init_options>:
 800ad08:	2000      	movs	r0, #0
 800ad0a:	4770      	bx	lr

0800ad0c <rcl_init_options_init>:
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad10:	b097      	sub	sp, #92	@ 0x5c
 800ad12:	ae1d      	add	r6, sp, #116	@ 0x74
 800ad14:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d058      	beq.n	800adce <rcl_init_options_init+0xc2>
 800ad1c:	6803      	ldr	r3, [r0, #0]
 800ad1e:	4605      	mov	r5, r0
 800ad20:	b133      	cbz	r3, 800ad30 <rcl_init_options_init+0x24>
 800ad22:	2464      	movs	r4, #100	@ 0x64
 800ad24:	4620      	mov	r0, r4
 800ad26:	b017      	add	sp, #92	@ 0x5c
 800ad28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ad2c:	b004      	add	sp, #16
 800ad2e:	4770      	bx	lr
 800ad30:	4630      	mov	r0, r6
 800ad32:	f001 f92f 	bl	800bf94 <rcutils_allocator_is_valid>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d049      	beq.n	800adce <rcl_init_options_init+0xc2>
 800ad3a:	46b4      	mov	ip, r6
 800ad3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ad40:	ac11      	add	r4, sp, #68	@ 0x44
 800ad42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad44:	f8dc 3000 	ldr.w	r3, [ip]
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ad4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad4e:	2050      	movs	r0, #80	@ 0x50
 800ad50:	4798      	blx	r3
 800ad52:	4604      	mov	r4, r0
 800ad54:	6028      	str	r0, [r5, #0]
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d03b      	beq.n	800add2 <rcl_init_options_init+0xc6>
 800ad5a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800ad5e:	4686      	mov	lr, r0
 800ad60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ad64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ad68:	f8dc 3000 	ldr.w	r3, [ip]
 800ad6c:	f8ce 3000 	str.w	r3, [lr]
 800ad70:	a802      	add	r0, sp, #8
 800ad72:	f001 f9a1 	bl	800c0b8 <rmw_get_zero_initialized_init_options>
 800ad76:	f10d 0e08 	add.w	lr, sp, #8
 800ad7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ad7e:	f104 0c18 	add.w	ip, r4, #24
 800ad82:	682f      	ldr	r7, [r5, #0]
 800ad84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ad8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ad94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ad9c:	ac20      	add	r4, sp, #128	@ 0x80
 800ad9e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ada2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ada6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800adaa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800adae:	f107 0018 	add.w	r0, r7, #24
 800adb2:	f001 f9af 	bl	800c114 <rmw_init_options_init>
 800adb6:	4604      	mov	r4, r0
 800adb8:	2800      	cmp	r0, #0
 800adba:	d0b3      	beq.n	800ad24 <rcl_init_options_init+0x18>
 800adbc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800adbe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800adc0:	6828      	ldr	r0, [r5, #0]
 800adc2:	4798      	blx	r3
 800adc4:	4620      	mov	r0, r4
 800adc6:	f007 f831 	bl	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 800adca:	4604      	mov	r4, r0
 800adcc:	e7aa      	b.n	800ad24 <rcl_init_options_init+0x18>
 800adce:	240b      	movs	r4, #11
 800add0:	e7a8      	b.n	800ad24 <rcl_init_options_init+0x18>
 800add2:	240a      	movs	r4, #10
 800add4:	e7a6      	b.n	800ad24 <rcl_init_options_init+0x18>
 800add6:	bf00      	nop

0800add8 <rcl_init_options_fini>:
 800add8:	b530      	push	{r4, r5, lr}
 800adda:	b087      	sub	sp, #28
 800addc:	b1f0      	cbz	r0, 800ae1c <rcl_init_options_fini+0x44>
 800adde:	6803      	ldr	r3, [r0, #0]
 800ade0:	4604      	mov	r4, r0
 800ade2:	b1db      	cbz	r3, 800ae1c <rcl_init_options_fini+0x44>
 800ade4:	469c      	mov	ip, r3
 800ade6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800adea:	f10d 0e04 	add.w	lr, sp, #4
 800adee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800adf2:	f8dc 3000 	ldr.w	r3, [ip]
 800adf6:	f8ce 3000 	str.w	r3, [lr]
 800adfa:	a801      	add	r0, sp, #4
 800adfc:	f001 f8ca 	bl	800bf94 <rcutils_allocator_is_valid>
 800ae00:	b160      	cbz	r0, 800ae1c <rcl_init_options_fini+0x44>
 800ae02:	6820      	ldr	r0, [r4, #0]
 800ae04:	3018      	adds	r0, #24
 800ae06:	f001 fa35 	bl	800c274 <rmw_init_options_fini>
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	b950      	cbnz	r0, 800ae24 <rcl_init_options_fini+0x4c>
 800ae0e:	6820      	ldr	r0, [r4, #0]
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	9905      	ldr	r1, [sp, #20]
 800ae14:	4798      	blx	r3
 800ae16:	4628      	mov	r0, r5
 800ae18:	b007      	add	sp, #28
 800ae1a:	bd30      	pop	{r4, r5, pc}
 800ae1c:	250b      	movs	r5, #11
 800ae1e:	4628      	mov	r0, r5
 800ae20:	b007      	add	sp, #28
 800ae22:	bd30      	pop	{r4, r5, pc}
 800ae24:	f007 f802 	bl	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 800ae28:	4605      	mov	r5, r0
 800ae2a:	e7f8      	b.n	800ae1e <rcl_init_options_fini+0x46>

0800ae2c <rcl_init_options_copy>:
 800ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	b094      	sub	sp, #80	@ 0x50
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d058      	beq.n	800aee8 <rcl_init_options_copy+0xbc>
 800ae36:	4604      	mov	r4, r0
 800ae38:	6800      	ldr	r0, [r0, #0]
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d054      	beq.n	800aee8 <rcl_init_options_copy+0xbc>
 800ae3e:	460e      	mov	r6, r1
 800ae40:	f001 f8a8 	bl	800bf94 <rcutils_allocator_is_valid>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d04f      	beq.n	800aee8 <rcl_init_options_copy+0xbc>
 800ae48:	2e00      	cmp	r6, #0
 800ae4a:	d04d      	beq.n	800aee8 <rcl_init_options_copy+0xbc>
 800ae4c:	6833      	ldr	r3, [r6, #0]
 800ae4e:	b123      	cbz	r3, 800ae5a <rcl_init_options_copy+0x2e>
 800ae50:	2464      	movs	r4, #100	@ 0x64
 800ae52:	4620      	mov	r0, r4
 800ae54:	b014      	add	sp, #80	@ 0x50
 800ae56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5a:	6827      	ldr	r7, [r4, #0]
 800ae5c:	46bc      	mov	ip, r7
 800ae5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ae62:	ad0f      	add	r5, sp, #60	@ 0x3c
 800ae64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae66:	f8dc 3000 	ldr.w	r3, [ip]
 800ae6a:	f8d7 8000 	ldr.w	r8, [r7]
 800ae6e:	602b      	str	r3, [r5, #0]
 800ae70:	4619      	mov	r1, r3
 800ae72:	2050      	movs	r0, #80	@ 0x50
 800ae74:	47c0      	blx	r8
 800ae76:	4605      	mov	r5, r0
 800ae78:	6030      	str	r0, [r6, #0]
 800ae7a:	b3d0      	cbz	r0, 800aef2 <rcl_init_options_copy+0xc6>
 800ae7c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ae80:	4686      	mov	lr, r0
 800ae82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ae86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ae8a:	f8dc 3000 	ldr.w	r3, [ip]
 800ae8e:	f8ce 3000 	str.w	r3, [lr]
 800ae92:	4668      	mov	r0, sp
 800ae94:	f001 f910 	bl	800c0b8 <rmw_get_zero_initialized_init_options>
 800ae98:	46ee      	mov	lr, sp
 800ae9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae9e:	f105 0c18 	add.w	ip, r5, #24
 800aea2:	6824      	ldr	r4, [r4, #0]
 800aea4:	6835      	ldr	r5, [r6, #0]
 800aea6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aeaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aeae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aeb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aeb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aeba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800aebe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800aec2:	f104 0018 	add.w	r0, r4, #24
 800aec6:	f105 0118 	add.w	r1, r5, #24
 800aeca:	f001 f98b 	bl	800c1e4 <rmw_init_options_copy>
 800aece:	4604      	mov	r4, r0
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d0be      	beq.n	800ae52 <rcl_init_options_copy+0x26>
 800aed4:	f001 f86c 	bl	800bfb0 <rcutils_get_error_string>
 800aed8:	f001 f882 	bl	800bfe0 <rcutils_reset_error>
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff ff7b 	bl	800add8 <rcl_init_options_fini>
 800aee2:	b140      	cbz	r0, 800aef6 <rcl_init_options_copy+0xca>
 800aee4:	4604      	mov	r4, r0
 800aee6:	e7b4      	b.n	800ae52 <rcl_init_options_copy+0x26>
 800aee8:	240b      	movs	r4, #11
 800aeea:	4620      	mov	r0, r4
 800aeec:	b014      	add	sp, #80	@ 0x50
 800aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef2:	240a      	movs	r4, #10
 800aef4:	e7ad      	b.n	800ae52 <rcl_init_options_copy+0x26>
 800aef6:	4620      	mov	r0, r4
 800aef8:	b014      	add	sp, #80	@ 0x50
 800aefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefe:	f006 bf95 	b.w	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 800af02:	bf00      	nop

0800af04 <rcl_init_options_set_domain_id>:
 800af04:	b120      	cbz	r0, 800af10 <rcl_init_options_set_domain_id+0xc>
 800af06:	6803      	ldr	r3, [r0, #0]
 800af08:	b113      	cbz	r3, 800af10 <rcl_init_options_set_domain_id+0xc>
 800af0a:	6259      	str	r1, [r3, #36]	@ 0x24
 800af0c:	2000      	movs	r0, #0
 800af0e:	4770      	bx	lr
 800af10:	200b      	movs	r0, #11
 800af12:	4770      	bx	lr

0800af14 <rcl_get_zero_initialized_publisher>:
 800af14:	4b01      	ldr	r3, [pc, #4]	@ (800af1c <rcl_get_zero_initialized_publisher+0x8>)
 800af16:	6818      	ldr	r0, [r3, #0]
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	08018b0c 	.word	0x08018b0c

0800af20 <rcl_publisher_init>:
 800af20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af24:	b088      	sub	sp, #32
 800af26:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800af28:	2d00      	cmp	r5, #0
 800af2a:	d069      	beq.n	800b000 <rcl_publisher_init+0xe0>
 800af2c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800af30:	4604      	mov	r4, r0
 800af32:	4648      	mov	r0, r9
 800af34:	460e      	mov	r6, r1
 800af36:	4690      	mov	r8, r2
 800af38:	461f      	mov	r7, r3
 800af3a:	f001 f82b 	bl	800bf94 <rcutils_allocator_is_valid>
 800af3e:	2800      	cmp	r0, #0
 800af40:	d05e      	beq.n	800b000 <rcl_publisher_init+0xe0>
 800af42:	2c00      	cmp	r4, #0
 800af44:	d05c      	beq.n	800b000 <rcl_publisher_init+0xe0>
 800af46:	f8d4 a000 	ldr.w	sl, [r4]
 800af4a:	f1ba 0f00 	cmp.w	sl, #0
 800af4e:	d004      	beq.n	800af5a <rcl_publisher_init+0x3a>
 800af50:	2764      	movs	r7, #100	@ 0x64
 800af52:	4638      	mov	r0, r7
 800af54:	b008      	add	sp, #32
 800af56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5a:	4630      	mov	r0, r6
 800af5c:	f007 fa60 	bl	8012420 <rcl_node_is_valid>
 800af60:	2800      	cmp	r0, #0
 800af62:	d052      	beq.n	800b00a <rcl_publisher_init+0xea>
 800af64:	f1b8 0f00 	cmp.w	r8, #0
 800af68:	d04a      	beq.n	800b000 <rcl_publisher_init+0xe0>
 800af6a:	2f00      	cmp	r7, #0
 800af6c:	d048      	beq.n	800b000 <rcl_publisher_init+0xe0>
 800af6e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800af72:	aa07      	add	r2, sp, #28
 800af74:	9205      	str	r2, [sp, #20]
 800af76:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800af7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af7e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800af82:	f8cd a01c 	str.w	sl, [sp, #28]
 800af86:	4639      	mov	r1, r7
 800af88:	e899 000c 	ldmia.w	r9, {r2, r3}
 800af8c:	4630      	mov	r0, r6
 800af8e:	f007 fa9b 	bl	80124c8 <rcl_node_resolve_name>
 800af92:	4607      	mov	r7, r0
 800af94:	2800      	cmp	r0, #0
 800af96:	d14f      	bne.n	800b038 <rcl_publisher_init+0x118>
 800af98:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800af9a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800af9c:	20c8      	movs	r0, #200	@ 0xc8
 800af9e:	4798      	blx	r3
 800afa0:	6020      	str	r0, [r4, #0]
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d04e      	beq.n	800b044 <rcl_publisher_init+0x124>
 800afa6:	4630      	mov	r0, r6
 800afa8:	f007 fa5c 	bl	8012464 <rcl_node_get_rmw_handle>
 800afac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	9a07      	ldr	r2, [sp, #28]
 800afb4:	6827      	ldr	r7, [r4, #0]
 800afb6:	462b      	mov	r3, r5
 800afb8:	4641      	mov	r1, r8
 800afba:	f001 fc83 	bl	800c8c4 <rmw_create_publisher>
 800afbe:	6823      	ldr	r3, [r4, #0]
 800afc0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800afc4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800afc8:	b370      	cbz	r0, 800b028 <rcl_publisher_init+0x108>
 800afca:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800afce:	f001 fd57 	bl	800ca80 <rmw_publisher_get_actual_qos>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	4607      	mov	r7, r0
 800afd6:	b9d0      	cbnz	r0, 800b00e <rcl_publisher_init+0xee>
 800afd8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800afdc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800afe0:	4629      	mov	r1, r5
 800afe2:	2270      	movs	r2, #112	@ 0x70
 800afe4:	4618      	mov	r0, r3
 800afe6:	f00c fe20 	bl	8017c2a <memcpy>
 800afea:	6832      	ldr	r2, [r6, #0]
 800afec:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800aff0:	9807      	ldr	r0, [sp, #28]
 800aff2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800aff4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800aff6:	4798      	blx	r3
 800aff8:	4638      	mov	r0, r7
 800affa:	b008      	add	sp, #32
 800affc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b000:	270b      	movs	r7, #11
 800b002:	4638      	mov	r0, r7
 800b004:	b008      	add	sp, #32
 800b006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00a:	27c8      	movs	r7, #200	@ 0xc8
 800b00c:	e7a1      	b.n	800af52 <rcl_publisher_init+0x32>
 800b00e:	b18b      	cbz	r3, 800b034 <rcl_publisher_init+0x114>
 800b010:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b014:	b142      	cbz	r2, 800b028 <rcl_publisher_init+0x108>
 800b016:	4630      	mov	r0, r6
 800b018:	f007 fa24 	bl	8012464 <rcl_node_get_rmw_handle>
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b022:	f001 fd3d 	bl	800caa0 <rmw_destroy_publisher>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b02a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b02c:	4618      	mov	r0, r3
 800b02e:	4790      	blx	r2
 800b030:	2300      	movs	r3, #0
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	2701      	movs	r7, #1
 800b036:	e7db      	b.n	800aff0 <rcl_publisher_init+0xd0>
 800b038:	2867      	cmp	r0, #103	@ 0x67
 800b03a:	d0d9      	beq.n	800aff0 <rcl_publisher_init+0xd0>
 800b03c:	2869      	cmp	r0, #105	@ 0x69
 800b03e:	d003      	beq.n	800b048 <rcl_publisher_init+0x128>
 800b040:	280a      	cmp	r0, #10
 800b042:	d1f7      	bne.n	800b034 <rcl_publisher_init+0x114>
 800b044:	270a      	movs	r7, #10
 800b046:	e7d3      	b.n	800aff0 <rcl_publisher_init+0xd0>
 800b048:	2767      	movs	r7, #103	@ 0x67
 800b04a:	e7d1      	b.n	800aff0 <rcl_publisher_init+0xd0>

0800b04c <rcl_publisher_get_default_options>:
 800b04c:	b570      	push	{r4, r5, r6, lr}
 800b04e:	4d14      	ldr	r5, [pc, #80]	@ (800b0a0 <rcl_publisher_get_default_options+0x54>)
 800b050:	4914      	ldr	r1, [pc, #80]	@ (800b0a4 <rcl_publisher_get_default_options+0x58>)
 800b052:	b088      	sub	sp, #32
 800b054:	4604      	mov	r4, r0
 800b056:	2250      	movs	r2, #80	@ 0x50
 800b058:	4628      	mov	r0, r5
 800b05a:	f00c fde6 	bl	8017c2a <memcpy>
 800b05e:	a802      	add	r0, sp, #8
 800b060:	f000 ff8a 	bl	800bf78 <rcutils_get_default_allocator>
 800b064:	f10d 0c08 	add.w	ip, sp, #8
 800b068:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b06c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b070:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b074:	466e      	mov	r6, sp
 800b076:	f8dc 3000 	ldr.w	r3, [ip]
 800b07a:	f8ce 3000 	str.w	r3, [lr]
 800b07e:	4630      	mov	r0, r6
 800b080:	f001 f82a 	bl	800c0d8 <rmw_get_default_publisher_options>
 800b084:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b088:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b08c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b090:	2270      	movs	r2, #112	@ 0x70
 800b092:	4629      	mov	r1, r5
 800b094:	4620      	mov	r0, r4
 800b096:	f00c fdc8 	bl	8017c2a <memcpy>
 800b09a:	4620      	mov	r0, r4
 800b09c:	b008      	add	sp, #32
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	200080b8 	.word	0x200080b8
 800b0a4:	08018b10 	.word	0x08018b10

0800b0a8 <rcl_publish>:
 800b0a8:	b1f8      	cbz	r0, 800b0ea <rcl_publish+0x42>
 800b0aa:	6803      	ldr	r3, [r0, #0]
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	b1b3      	cbz	r3, 800b0e0 <rcl_publish+0x38>
 800b0b2:	4616      	mov	r6, r2
 800b0b4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b0b8:	b192      	cbz	r2, 800b0e0 <rcl_publish+0x38>
 800b0ba:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	f006 fed2 	bl	8011e68 <rcl_context_is_valid>
 800b0c4:	b160      	cbz	r0, 800b0e0 <rcl_publish+0x38>
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b0cc:	b140      	cbz	r0, 800b0e0 <rcl_publish+0x38>
 800b0ce:	b155      	cbz	r5, 800b0e6 <rcl_publish+0x3e>
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	f001 fb96 	bl	800c804 <rmw_publish>
 800b0d8:	3800      	subs	r0, #0
 800b0da:	bf18      	it	ne
 800b0dc:	2001      	movne	r0, #1
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b0e4:	bd70      	pop	{r4, r5, r6, pc}
 800b0e6:	200b      	movs	r0, #11
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b0ee:	4770      	bx	lr

0800b0f0 <rcl_publisher_is_valid>:
 800b0f0:	b1a0      	cbz	r0, 800b11c <rcl_publisher_is_valid+0x2c>
 800b0f2:	6803      	ldr	r3, [r0, #0]
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	b173      	cbz	r3, 800b118 <rcl_publisher_is_valid+0x28>
 800b0fa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b0fe:	b15a      	cbz	r2, 800b118 <rcl_publisher_is_valid+0x28>
 800b100:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b104:	f006 feb0 	bl	8011e68 <rcl_context_is_valid>
 800b108:	b130      	cbz	r0, 800b118 <rcl_publisher_is_valid+0x28>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b110:	3800      	subs	r0, #0
 800b112:	bf18      	it	ne
 800b114:	2001      	movne	r0, #1
 800b116:	bd10      	pop	{r4, pc}
 800b118:	2000      	movs	r0, #0
 800b11a:	bd10      	pop	{r4, pc}
 800b11c:	2000      	movs	r0, #0
 800b11e:	4770      	bx	lr

0800b120 <rcl_publisher_is_valid_except_context>:
 800b120:	b130      	cbz	r0, 800b130 <rcl_publisher_is_valid_except_context+0x10>
 800b122:	6800      	ldr	r0, [r0, #0]
 800b124:	b120      	cbz	r0, 800b130 <rcl_publisher_is_valid_except_context+0x10>
 800b126:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b12a:	3800      	subs	r0, #0
 800b12c:	bf18      	it	ne
 800b12e:	2001      	movne	r0, #1
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop

0800b134 <_rclc_check_for_new_data>:
 800b134:	2800      	cmp	r0, #0
 800b136:	d046      	beq.n	800b1c6 <_rclc_check_for_new_data+0x92>
 800b138:	b510      	push	{r4, lr}
 800b13a:	7802      	ldrb	r2, [r0, #0]
 800b13c:	b084      	sub	sp, #16
 800b13e:	4603      	mov	r3, r0
 800b140:	2a0a      	cmp	r2, #10
 800b142:	d842      	bhi.n	800b1ca <_rclc_check_for_new_data+0x96>
 800b144:	e8df f002 	tbb	[pc, r2]
 800b148:	14181212 	.word	0x14181212
 800b14c:	06060614 	.word	0x06060614
 800b150:	2e1a      	.short	0x2e1a
 800b152:	16          	.byte	0x16
 800b153:	00          	.byte	0x00
 800b154:	6a0a      	ldr	r2, [r1, #32]
 800b156:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b158:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b15c:	2000      	movs	r0, #0
 800b15e:	1a12      	subs	r2, r2, r0
 800b160:	bf18      	it	ne
 800b162:	2201      	movne	r2, #1
 800b164:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b168:	b004      	add	sp, #16
 800b16a:	bd10      	pop	{r4, pc}
 800b16c:	680a      	ldr	r2, [r1, #0]
 800b16e:	e7f2      	b.n	800b156 <_rclc_check_for_new_data+0x22>
 800b170:	698a      	ldr	r2, [r1, #24]
 800b172:	e7f0      	b.n	800b156 <_rclc_check_for_new_data+0x22>
 800b174:	688a      	ldr	r2, [r1, #8]
 800b176:	e7ee      	b.n	800b156 <_rclc_check_for_new_data+0x22>
 800b178:	690a      	ldr	r2, [r1, #16]
 800b17a:	e7ec      	b.n	800b156 <_rclc_check_for_new_data+0x22>
 800b17c:	685c      	ldr	r4, [r3, #4]
 800b17e:	4608      	mov	r0, r1
 800b180:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800b184:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800b188:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800b18c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800b196:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800b19a:	f104 0110 	add.w	r1, r4, #16
 800b19e:	f008 ff8f 	bl	80140c0 <rcl_action_client_wait_set_get_entities_ready>
 800b1a2:	e7e1      	b.n	800b168 <_rclc_check_for_new_data+0x34>
 800b1a4:	685c      	ldr	r4, [r3, #4]
 800b1a6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800b1aa:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800b1ae:	e9cd 3200 	strd	r3, r2, [sp]
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800b1b8:	f104 0220 	add.w	r2, r4, #32
 800b1bc:	f104 0110 	add.w	r1, r4, #16
 800b1c0:	f009 f996 	bl	80144f0 <rcl_action_server_wait_set_get_entities_ready>
 800b1c4:	e7d0      	b.n	800b168 <_rclc_check_for_new_data+0x34>
 800b1c6:	200b      	movs	r0, #11
 800b1c8:	4770      	bx	lr
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	e7cc      	b.n	800b168 <_rclc_check_for_new_data+0x34>
 800b1ce:	bf00      	nop

0800b1d0 <_rclc_take_new_data>:
 800b1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1d2:	b09b      	sub	sp, #108	@ 0x6c
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f000 8088 	beq.w	800b2ea <_rclc_take_new_data+0x11a>
 800b1da:	7803      	ldrb	r3, [r0, #0]
 800b1dc:	4604      	mov	r4, r0
 800b1de:	2b0a      	cmp	r3, #10
 800b1e0:	f200 8167 	bhi.w	800b4b2 <_rclc_take_new_data+0x2e2>
 800b1e4:	e8df f003 	tbb	[pc, r3]
 800b1e8:	44152d2d 	.word	0x44152d2d
 800b1ec:	19191944 	.word	0x19191944
 800b1f0:	065a      	.short	0x065a
 800b1f2:	15          	.byte	0x15
 800b1f3:	00          	.byte	0x00
 800b1f4:	6840      	ldr	r0, [r0, #4]
 800b1f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f040 80b2 	bne.w	800b364 <_rclc_take_new_data+0x194>
 800b200:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800b204:	2b00      	cmp	r3, #0
 800b206:	f040 80e4 	bne.w	800b3d2 <_rclc_take_new_data+0x202>
 800b20a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d16f      	bne.n	800b2f2 <_rclc_take_new_data+0x122>
 800b212:	2500      	movs	r5, #0
 800b214:	4628      	mov	r0, r5
 800b216:	b01b      	add	sp, #108	@ 0x6c
 800b218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b21a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b21c:	6a0b      	ldr	r3, [r1, #32]
 800b21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0f5      	beq.n	800b212 <_rclc_take_new_data+0x42>
 800b226:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b22a:	f104 0110 	add.w	r1, r4, #16
 800b22e:	f007 faf5 	bl	801281c <rcl_take_request>
 800b232:	4605      	mov	r5, r0
 800b234:	2800      	cmp	r0, #0
 800b236:	d0ec      	beq.n	800b212 <_rclc_take_new_data+0x42>
 800b238:	f240 2359 	movw	r3, #601	@ 0x259
 800b23c:	4298      	cmp	r0, r3
 800b23e:	d013      	beq.n	800b268 <_rclc_take_new_data+0x98>
 800b240:	e029      	b.n	800b296 <_rclc_take_new_data+0xc6>
 800b242:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b244:	680b      	ldr	r3, [r1, #0]
 800b246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0e1      	beq.n	800b212 <_rclc_take_new_data+0x42>
 800b24e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b252:	2300      	movs	r3, #0
 800b254:	aa0a      	add	r2, sp, #40	@ 0x28
 800b256:	f007 fb43 	bl	80128e0 <rcl_take>
 800b25a:	4605      	mov	r5, r0
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d0d9      	beq.n	800b214 <_rclc_take_new_data+0x44>
 800b260:	f240 1391 	movw	r3, #401	@ 0x191
 800b264:	4298      	cmp	r0, r3
 800b266:	d116      	bne.n	800b296 <_rclc_take_new_data+0xc6>
 800b268:	2300      	movs	r3, #0
 800b26a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800b26e:	e7d1      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b270:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b272:	698b      	ldr	r3, [r1, #24]
 800b274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0ca      	beq.n	800b212 <_rclc_take_new_data+0x42>
 800b27c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b280:	f104 0110 	add.w	r1, r4, #16
 800b284:	f006 fd80 	bl	8011d88 <rcl_take_response>
 800b288:	4605      	mov	r5, r0
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0c1      	beq.n	800b212 <_rclc_take_new_data+0x42>
 800b28e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800b292:	4298      	cmp	r0, r3
 800b294:	d0be      	beq.n	800b214 <_rclc_take_new_data+0x44>
 800b296:	f000 fea3 	bl	800bfe0 <rcutils_reset_error>
 800b29a:	e7bb      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b29c:	6840      	ldr	r0, [r0, #4]
 800b29e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d17d      	bne.n	800b3a2 <_rclc_take_new_data+0x1d2>
 800b2a6:	69c3      	ldr	r3, [r0, #28]
 800b2a8:	b11b      	cbz	r3, 800b2b2 <_rclc_take_new_data+0xe2>
 800b2aa:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d144      	bne.n	800b33c <_rclc_take_new_data+0x16c>
 800b2b2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f040 80ac 	bne.w	800b414 <_rclc_take_new_data+0x244>
 800b2bc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0a6      	beq.n	800b212 <_rclc_take_new_data+0x42>
 800b2c4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b2c6:	a90a      	add	r1, sp, #40	@ 0x28
 800b2c8:	3010      	adds	r0, #16
 800b2ca:	f008 fdd1 	bl	8013e70 <rcl_action_take_result_response>
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d1e0      	bne.n	800b296 <_rclc_take_new_data+0xc6>
 800b2d4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2d8:	6860      	ldr	r0, [r4, #4]
 800b2da:	f009 fa2d 	bl	8014738 <rclc_action_find_handle_by_result_request_sequence_number>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d098      	beq.n	800b214 <_rclc_take_new_data+0x44>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800b2e8:	e794      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b2ea:	250b      	movs	r5, #11
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	b01b      	add	sp, #108	@ 0x6c
 800b2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f2:	ae04      	add	r6, sp, #16
 800b2f4:	aa0a      	add	r2, sp, #40	@ 0x28
 800b2f6:	3010      	adds	r0, #16
 800b2f8:	4631      	mov	r1, r6
 800b2fa:	f009 f82d 	bl	8014358 <rcl_action_take_cancel_request>
 800b2fe:	4605      	mov	r5, r0
 800b300:	2800      	cmp	r0, #0
 800b302:	d1c8      	bne.n	800b296 <_rclc_take_new_data+0xc6>
 800b304:	6860      	ldr	r0, [r4, #4]
 800b306:	a90a      	add	r1, sp, #40	@ 0x28
 800b308:	f009 f9d4 	bl	80146b4 <rclc_action_find_goal_handle_by_uuid>
 800b30c:	4607      	mov	r7, r0
 800b30e:	2800      	cmp	r0, #0
 800b310:	f000 80bb 	beq.w	800b48a <_rclc_take_new_data+0x2ba>
 800b314:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800b318:	2101      	movs	r1, #1
 800b31a:	f009 f955 	bl	80145c8 <rcl_action_transition_goal_state>
 800b31e:	2803      	cmp	r0, #3
 800b320:	4684      	mov	ip, r0
 800b322:	f040 80a7 	bne.w	800b474 <_rclc_take_new_data+0x2a4>
 800b326:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b328:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800b32c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b32e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b332:	e884 0003 	stmia.w	r4, {r0, r1}
 800b336:	f887 c008 	strb.w	ip, [r7, #8]
 800b33a:	e76b      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b33c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b33e:	3010      	adds	r0, #16
 800b340:	f008 fe16 	bl	8013f70 <rcl_action_take_feedback>
 800b344:	4605      	mov	r5, r0
 800b346:	2800      	cmp	r0, #0
 800b348:	d1a5      	bne.n	800b296 <_rclc_take_new_data+0xc6>
 800b34a:	6860      	ldr	r0, [r4, #4]
 800b34c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b34e:	f009 f9b1 	bl	80146b4 <rclc_action_find_goal_handle_by_uuid>
 800b352:	4603      	mov	r3, r0
 800b354:	2800      	cmp	r0, #0
 800b356:	f000 80a3 	beq.w	800b4a0 <_rclc_take_new_data+0x2d0>
 800b35a:	2201      	movs	r2, #1
 800b35c:	6860      	ldr	r0, [r4, #4]
 800b35e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800b362:	e7a6      	b.n	800b2b2 <_rclc_take_new_data+0xe2>
 800b364:	f009 f980 	bl	8014668 <rclc_action_take_goal_handle>
 800b368:	4606      	mov	r6, r0
 800b36a:	6860      	ldr	r0, [r4, #4]
 800b36c:	2e00      	cmp	r6, #0
 800b36e:	f43f af47 	beq.w	800b200 <_rclc_take_new_data+0x30>
 800b372:	6070      	str	r0, [r6, #4]
 800b374:	69f2      	ldr	r2, [r6, #28]
 800b376:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800b37a:	3010      	adds	r0, #16
 800b37c:	f008 ff34 	bl	80141e8 <rcl_action_take_goal_request>
 800b380:	4605      	mov	r5, r0
 800b382:	2800      	cmp	r0, #0
 800b384:	f040 808e 	bne.w	800b4a4 <_rclc_take_new_data+0x2d4>
 800b388:	69f7      	ldr	r7, [r6, #28]
 800b38a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b38c:	7235      	strb	r5, [r6, #8]
 800b38e:	f8c6 0009 	str.w	r0, [r6, #9]
 800b392:	f8c6 100d 	str.w	r1, [r6, #13]
 800b396:	6860      	ldr	r0, [r4, #4]
 800b398:	f8c6 2011 	str.w	r2, [r6, #17]
 800b39c:	f8c6 3015 	str.w	r3, [r6, #21]
 800b3a0:	e72e      	b.n	800b200 <_rclc_take_new_data+0x30>
 800b3a2:	aa04      	add	r2, sp, #16
 800b3a4:	a90a      	add	r1, sp, #40	@ 0x28
 800b3a6:	3010      	adds	r0, #16
 800b3a8:	f008 fcea 	bl	8013d80 <rcl_action_take_goal_response>
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	f47f af71 	bne.w	800b296 <_rclc_take_new_data+0xc6>
 800b3b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b3b8:	6860      	ldr	r0, [r4, #4]
 800b3ba:	f009 f9ab 	bl	8014714 <rclc_action_find_handle_by_goal_request_sequence_number>
 800b3be:	b130      	cbz	r0, 800b3ce <_rclc_take_new_data+0x1fe>
 800b3c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b3c4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f880 2020 	strb.w	r2, [r0, #32]
 800b3ce:	6860      	ldr	r0, [r4, #4]
 800b3d0:	e769      	b.n	800b2a6 <_rclc_take_new_data+0xd6>
 800b3d2:	aa04      	add	r2, sp, #16
 800b3d4:	3010      	adds	r0, #16
 800b3d6:	a90a      	add	r1, sp, #40	@ 0x28
 800b3d8:	f008 ff7e 	bl	80142d8 <rcl_action_take_result_request>
 800b3dc:	4605      	mov	r5, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	f47f af59 	bne.w	800b296 <_rclc_take_new_data+0xc6>
 800b3e4:	6860      	ldr	r0, [r4, #4]
 800b3e6:	a904      	add	r1, sp, #16
 800b3e8:	f009 f964 	bl	80146b4 <rclc_action_find_goal_handle_by_uuid>
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	b160      	cbz	r0, 800b40a <_rclc_take_new_data+0x23a>
 800b3f0:	ad0a      	add	r5, sp, #40	@ 0x28
 800b3f2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800b3f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b3fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b3fe:	f04f 0c02 	mov.w	ip, #2
 800b402:	e886 0003 	stmia.w	r6, {r0, r1}
 800b406:	f887 c008 	strb.w	ip, [r7, #8]
 800b40a:	6860      	ldr	r0, [r4, #4]
 800b40c:	2300      	movs	r3, #0
 800b40e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800b412:	e6fa      	b.n	800b20a <_rclc_take_new_data+0x3a>
 800b414:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800b418:	a90a      	add	r1, sp, #40	@ 0x28
 800b41a:	3010      	adds	r0, #16
 800b41c:	f008 fd68 	bl	8013ef0 <rcl_action_take_cancel_response>
 800b420:	4605      	mov	r5, r0
 800b422:	2800      	cmp	r0, #0
 800b424:	f47f af37 	bne.w	800b296 <_rclc_take_new_data+0xc6>
 800b428:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b42c:	6860      	ldr	r0, [r4, #4]
 800b42e:	f009 f995 	bl	801475c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800b432:	4606      	mov	r6, r0
 800b434:	6860      	ldr	r0, [r4, #4]
 800b436:	2e00      	cmp	r6, #0
 800b438:	f43f af40 	beq.w	800b2bc <_rclc_take_new_data+0xec>
 800b43c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b43e:	2701      	movs	r7, #1
 800b440:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800b442:	2b00      	cmp	r3, #0
 800b444:	f43f af3a 	beq.w	800b2bc <_rclc_take_new_data+0xec>
 800b448:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b44a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b44e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b452:	f009 f92f 	bl	80146b4 <rclc_action_find_goal_handle_by_uuid>
 800b456:	b138      	cbz	r0, 800b468 <_rclc_take_new_data+0x298>
 800b458:	6860      	ldr	r0, [r4, #4]
 800b45a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b45c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800b460:	3501      	adds	r5, #1
 800b462:	42ab      	cmp	r3, r5
 800b464:	d8f0      	bhi.n	800b448 <_rclc_take_new_data+0x278>
 800b466:	e729      	b.n	800b2bc <_rclc_take_new_data+0xec>
 800b468:	6860      	ldr	r0, [r4, #4]
 800b46a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b46c:	3501      	adds	r5, #1
 800b46e:	42ab      	cmp	r3, r5
 800b470:	d8ea      	bhi.n	800b448 <_rclc_take_new_data+0x278>
 800b472:	e723      	b.n	800b2bc <_rclc_take_new_data+0xec>
 800b474:	ab06      	add	r3, sp, #24
 800b476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b478:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b47c:	2103      	movs	r1, #3
 800b47e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b482:	6860      	ldr	r0, [r4, #4]
 800b484:	f009 f9e0 	bl	8014848 <rclc_action_server_goal_cancel_reject>
 800b488:	e6c4      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b48a:	ab06      	add	r3, sp, #24
 800b48c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b48e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b492:	2102      	movs	r1, #2
 800b494:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b498:	6860      	ldr	r0, [r4, #4]
 800b49a:	f009 f9d5 	bl	8014848 <rclc_action_server_goal_cancel_reject>
 800b49e:	e6b9      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b4a0:	6860      	ldr	r0, [r4, #4]
 800b4a2:	e706      	b.n	800b2b2 <_rclc_take_new_data+0xe2>
 800b4a4:	6860      	ldr	r0, [r4, #4]
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	f009 f8ee 	bl	8014688 <rclc_action_remove_used_goal_handle>
 800b4ac:	f000 fd98 	bl	800bfe0 <rcutils_reset_error>
 800b4b0:	e6b0      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b4b2:	2501      	movs	r5, #1
 800b4b4:	e6ae      	b.n	800b214 <_rclc_take_new_data+0x44>
 800b4b6:	bf00      	nop

0800b4b8 <_rclc_execute.part.0>:
 800b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ba:	7803      	ldrb	r3, [r0, #0]
 800b4bc:	b087      	sub	sp, #28
 800b4be:	4604      	mov	r4, r0
 800b4c0:	2b0a      	cmp	r3, #10
 800b4c2:	f200 8136 	bhi.w	800b732 <_rclc_execute.part.0+0x27a>
 800b4c6:	e8df f003 	tbb	[pc, r3]
 800b4ca:	435e      	.short	0x435e
 800b4cc:	06a1664f 	.word	0x06a1664f
 800b4d0:	6c1e0606 	.word	0x6c1e0606
 800b4d4:	59          	.byte	0x59
 800b4d5:	00          	.byte	0x00
 800b4d6:	2b06      	cmp	r3, #6
 800b4d8:	f000 8122 	beq.w	800b720 <_rclc_execute.part.0+0x268>
 800b4dc:	2b07      	cmp	r3, #7
 800b4de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b4e0:	f040 8118 	bne.w	800b714 <_rclc_execute.part.0+0x25c>
 800b4e4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800b4e8:	6880      	ldr	r0, [r0, #8]
 800b4ea:	4798      	blx	r3
 800b4ec:	f104 0110 	add.w	r1, r4, #16
 800b4f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b4f2:	6860      	ldr	r0, [r4, #4]
 800b4f4:	f007 f9d2 	bl	801289c <rcl_send_response>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d033      	beq.n	800b564 <_rclc_execute.part.0+0xac>
 800b4fc:	9005      	str	r0, [sp, #20]
 800b4fe:	f000 fd6f 	bl	800bfe0 <rcutils_reset_error>
 800b502:	9805      	ldr	r0, [sp, #20]
 800b504:	e02e      	b.n	800b564 <_rclc_execute.part.0+0xac>
 800b506:	6840      	ldr	r0, [r0, #4]
 800b508:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8086 	beq.w	800b61e <_rclc_execute.part.0+0x166>
 800b512:	2600      	movs	r6, #0
 800b514:	2701      	movs	r7, #1
 800b516:	e004      	b.n	800b522 <_rclc_execute.part.0+0x6a>
 800b518:	f009 f880 	bl	801461c <rclc_action_send_result_request>
 800b51c:	b998      	cbnz	r0, 800b546 <_rclc_execute.part.0+0x8e>
 800b51e:	722f      	strb	r7, [r5, #8]
 800b520:	6860      	ldr	r0, [r4, #4]
 800b522:	f009 f92d 	bl	8014780 <rclc_action_find_first_handle_with_goal_response>
 800b526:	4605      	mov	r5, r0
 800b528:	2800      	cmp	r0, #0
 800b52a:	d077      	beq.n	800b61c <_rclc_execute.part.0+0x164>
 800b52c:	6863      	ldr	r3, [r4, #4]
 800b52e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800b536:	f885 6020 	strb.w	r6, [r5, #32]
 800b53a:	4798      	blx	r3
 800b53c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800b540:	4628      	mov	r0, r5
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e8      	bne.n	800b518 <_rclc_execute.part.0+0x60>
 800b546:	6860      	ldr	r0, [r4, #4]
 800b548:	4629      	mov	r1, r5
 800b54a:	f009 f89d 	bl	8014688 <rclc_action_remove_used_goal_handle>
 800b54e:	e7e7      	b.n	800b520 <_rclc_execute.part.0+0x68>
 800b550:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800b554:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800b558:	2d00      	cmp	r5, #0
 800b55a:	f000 80c9 	beq.w	800b6f0 <_rclc_execute.part.0+0x238>
 800b55e:	6880      	ldr	r0, [r0, #8]
 800b560:	4798      	blx	r3
 800b562:	2000      	movs	r0, #0
 800b564:	b007      	add	sp, #28
 800b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b568:	6840      	ldr	r0, [r0, #4]
 800b56a:	f007 fcc7 	bl	8012efc <rcl_timer_call>
 800b56e:	f240 3321 	movw	r3, #801	@ 0x321
 800b572:	4298      	cmp	r0, r3
 800b574:	d004      	beq.n	800b580 <_rclc_execute.part.0+0xc8>
 800b576:	2800      	cmp	r0, #0
 800b578:	d0f4      	beq.n	800b564 <_rclc_execute.part.0+0xac>
 800b57a:	e7bf      	b.n	800b4fc <_rclc_execute.part.0+0x44>
 800b57c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b57e:	4798      	blx	r3
 800b580:	2000      	movs	r0, #0
 800b582:	b007      	add	sp, #28
 800b584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b586:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800b58a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b58c:	b925      	cbnz	r5, 800b598 <_rclc_execute.part.0+0xe0>
 800b58e:	4628      	mov	r0, r5
 800b590:	4798      	blx	r3
 800b592:	4628      	mov	r0, r5
 800b594:	e7e6      	b.n	800b564 <_rclc_execute.part.0+0xac>
 800b596:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b598:	68a0      	ldr	r0, [r4, #8]
 800b59a:	4798      	blx	r3
 800b59c:	2000      	movs	r0, #0
 800b59e:	b007      	add	sp, #28
 800b5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a2:	6840      	ldr	r0, [r0, #4]
 800b5a4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b5a8:	bb3b      	cbnz	r3, 800b5fa <_rclc_execute.part.0+0x142>
 800b5aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d07b      	beq.n	800b6aa <_rclc_execute.part.0+0x1f2>
 800b5b2:	f640 0634 	movw	r6, #2100	@ 0x834
 800b5b6:	2701      	movs	r7, #1
 800b5b8:	e007      	b.n	800b5ca <_rclc_execute.part.0+0x112>
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f009 f8f8 	bl	80147b0 <rclc_action_server_response_goal_request>
 800b5c0:	6860      	ldr	r0, [r4, #4]
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f009 f860 	bl	8014688 <rclc_action_remove_used_goal_handle>
 800b5c8:	6860      	ldr	r0, [r4, #4]
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	f009 f88a 	bl	80146e4 <rclc_action_find_first_handle_by_status>
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d066      	beq.n	800b6a4 <_rclc_execute.part.0+0x1ec>
 800b5d6:	6863      	ldr	r3, [r4, #4]
 800b5d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	4798      	blx	r3
 800b5de:	42b0      	cmp	r0, r6
 800b5e0:	f04f 0100 	mov.w	r1, #0
 800b5e4:	d1e9      	bne.n	800b5ba <_rclc_execute.part.0+0x102>
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f009 f8e1 	bl	80147b0 <rclc_action_server_response_goal_request>
 800b5ee:	722f      	strb	r7, [r5, #8]
 800b5f0:	e7ea      	b.n	800b5c8 <_rclc_execute.part.0+0x110>
 800b5f2:	6848      	ldr	r0, [r1, #4]
 800b5f4:	f009 f848 	bl	8014688 <rclc_action_remove_used_goal_handle>
 800b5f8:	6860      	ldr	r0, [r4, #4]
 800b5fa:	f009 f87f 	bl	80146fc <rclc_action_find_first_terminated_handle>
 800b5fe:	4601      	mov	r1, r0
 800b600:	2800      	cmp	r0, #0
 800b602:	d1f6      	bne.n	800b5f2 <_rclc_execute.part.0+0x13a>
 800b604:	6860      	ldr	r0, [r4, #4]
 800b606:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800b60a:	e7ce      	b.n	800b5aa <_rclc_execute.part.0+0xf2>
 800b60c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b60e:	6880      	ldr	r0, [r0, #8]
 800b610:	f104 0110 	add.w	r1, r4, #16
 800b614:	4798      	blx	r3
 800b616:	2000      	movs	r0, #0
 800b618:	b007      	add	sp, #28
 800b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b61c:	6860      	ldr	r0, [r4, #4]
 800b61e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b622:	b18b      	cbz	r3, 800b648 <_rclc_execute.part.0+0x190>
 800b624:	68c5      	ldr	r5, [r0, #12]
 800b626:	b32d      	cbz	r5, 800b674 <_rclc_execute.part.0+0x1bc>
 800b628:	2600      	movs	r6, #0
 800b62a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800b62e:	b143      	cbz	r3, 800b642 <_rclc_execute.part.0+0x18a>
 800b630:	69c3      	ldr	r3, [r0, #28]
 800b632:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800b636:	b123      	cbz	r3, 800b642 <_rclc_execute.part.0+0x18a>
 800b638:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b63a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b63c:	4628      	mov	r0, r5
 800b63e:	4798      	blx	r3
 800b640:	6860      	ldr	r0, [r4, #4]
 800b642:	682d      	ldr	r5, [r5, #0]
 800b644:	2d00      	cmp	r5, #0
 800b646:	d1f0      	bne.n	800b62a <_rclc_execute.part.0+0x172>
 800b648:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b64c:	b193      	cbz	r3, 800b674 <_rclc_execute.part.0+0x1bc>
 800b64e:	68c5      	ldr	r5, [r0, #12]
 800b650:	b185      	cbz	r5, 800b674 <_rclc_execute.part.0+0x1bc>
 800b652:	2600      	movs	r6, #0
 800b654:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800b658:	b14b      	cbz	r3, 800b66e <_rclc_execute.part.0+0x1b6>
 800b65a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b65c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800b660:	b12b      	cbz	r3, 800b66e <_rclc_execute.part.0+0x1b6>
 800b662:	4628      	mov	r0, r5
 800b664:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800b668:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b66a:	4798      	blx	r3
 800b66c:	6860      	ldr	r0, [r4, #4]
 800b66e:	682d      	ldr	r5, [r5, #0]
 800b670:	2d00      	cmp	r5, #0
 800b672:	d1ef      	bne.n	800b654 <_rclc_execute.part.0+0x19c>
 800b674:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d081      	beq.n	800b580 <_rclc_execute.part.0+0xc8>
 800b67c:	2700      	movs	r7, #0
 800b67e:	e00b      	b.n	800b698 <_rclc_execute.part.0+0x1e0>
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b684:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b686:	6a1e      	ldr	r6, [r3, #32]
 800b688:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800b68c:	47b0      	blx	r6
 800b68e:	6860      	ldr	r0, [r4, #4]
 800b690:	4629      	mov	r1, r5
 800b692:	f008 fff9 	bl	8014688 <rclc_action_remove_used_goal_handle>
 800b696:	6860      	ldr	r0, [r4, #4]
 800b698:	f009 f87e 	bl	8014798 <rclc_action_find_first_handle_with_result_response>
 800b69c:	4605      	mov	r5, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d1ee      	bne.n	800b680 <_rclc_execute.part.0+0x1c8>
 800b6a2:	e76d      	b.n	800b580 <_rclc_execute.part.0+0xc8>
 800b6a4:	6860      	ldr	r0, [r4, #4]
 800b6a6:	f880 5020 	strb.w	r5, [r0, #32]
 800b6aa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f43f af66 	beq.w	800b580 <_rclc_execute.part.0+0xc8>
 800b6b4:	68c5      	ldr	r5, [r0, #12]
 800b6b6:	b1b5      	cbz	r5, 800b6e6 <_rclc_execute.part.0+0x22e>
 800b6b8:	2602      	movs	r6, #2
 800b6ba:	e001      	b.n	800b6c0 <_rclc_execute.part.0+0x208>
 800b6bc:	682d      	ldr	r5, [r5, #0]
 800b6be:	b195      	cbz	r5, 800b6e6 <_rclc_execute.part.0+0x22e>
 800b6c0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d1f9      	bne.n	800b6bc <_rclc_execute.part.0+0x204>
 800b6c8:	69c3      	ldr	r3, [r0, #28]
 800b6ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	4798      	blx	r3
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b6dc:	b163      	cbz	r3, 800b6f8 <_rclc_execute.part.0+0x240>
 800b6de:	f009 f887 	bl	80147f0 <rclc_action_server_goal_cancel_accept>
 800b6e2:	6860      	ldr	r0, [r4, #4]
 800b6e4:	e7ea      	b.n	800b6bc <_rclc_execute.part.0+0x204>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	e739      	b.n	800b564 <_rclc_execute.part.0+0xac>
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	4798      	blx	r3
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	e735      	b.n	800b564 <_rclc_execute.part.0+0xac>
 800b6f8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b6fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b6fe:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800b702:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b706:	6860      	ldr	r0, [r4, #4]
 800b708:	2101      	movs	r1, #1
 800b70a:	f009 f89d 	bl	8014848 <rclc_action_server_goal_cancel_reject>
 800b70e:	722e      	strb	r6, [r5, #8]
 800b710:	6860      	ldr	r0, [r4, #4]
 800b712:	e7d3      	b.n	800b6bc <_rclc_execute.part.0+0x204>
 800b714:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b716:	6880      	ldr	r0, [r0, #8]
 800b718:	4798      	blx	r3
 800b71a:	f104 0110 	add.w	r1, r4, #16
 800b71e:	e6e7      	b.n	800b4f0 <_rclc_execute.part.0+0x38>
 800b720:	f100 0110 	add.w	r1, r0, #16
 800b724:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b726:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800b728:	6880      	ldr	r0, [r0, #8]
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	4798      	blx	r3
 800b72e:	9905      	ldr	r1, [sp, #20]
 800b730:	e6de      	b.n	800b4f0 <_rclc_execute.part.0+0x38>
 800b732:	2001      	movs	r0, #1
 800b734:	e716      	b.n	800b564 <_rclc_execute.part.0+0xac>
 800b736:	bf00      	nop

0800b738 <rclc_executor_trigger_any>:
 800b738:	2800      	cmp	r0, #0
 800b73a:	d03f      	beq.n	800b7bc <rclc_executor_trigger_any+0x84>
 800b73c:	2900      	cmp	r1, #0
 800b73e:	d03e      	beq.n	800b7be <rclc_executor_trigger_any+0x86>
 800b740:	4603      	mov	r3, r0
 800b742:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800b746:	2200      	movs	r2, #0
 800b748:	2800      	cmp	r0, #0
 800b74a:	d037      	beq.n	800b7bc <rclc_executor_trigger_any+0x84>
 800b74c:	b430      	push	{r4, r5}
 800b74e:	f893 c000 	ldrb.w	ip, [r3]
 800b752:	f1bc 0f08 	cmp.w	ip, #8
 800b756:	d11e      	bne.n	800b796 <rclc_executor_trigger_any+0x5e>
 800b758:	685c      	ldr	r4, [r3, #4]
 800b75a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b75c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b760:	d105      	bne.n	800b76e <rclc_executor_trigger_any+0x36>
 800b762:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b766:	b910      	cbnz	r0, 800b76e <rclc_executor_trigger_any+0x36>
 800b768:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b76c:	b128      	cbz	r0, 800b77a <rclc_executor_trigger_any+0x42>
 800b76e:	bc30      	pop	{r4, r5}
 800b770:	4770      	bx	lr
 800b772:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b776:	2800      	cmp	r0, #0
 800b778:	d1f9      	bne.n	800b76e <rclc_executor_trigger_any+0x36>
 800b77a:	3201      	adds	r2, #1
 800b77c:	4291      	cmp	r1, r2
 800b77e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b782:	d018      	beq.n	800b7b6 <rclc_executor_trigger_any+0x7e>
 800b784:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b788:	2800      	cmp	r0, #0
 800b78a:	d0f0      	beq.n	800b76e <rclc_executor_trigger_any+0x36>
 800b78c:	f893 c000 	ldrb.w	ip, [r3]
 800b790:	f1bc 0f08 	cmp.w	ip, #8
 800b794:	d0e0      	beq.n	800b758 <rclc_executor_trigger_any+0x20>
 800b796:	f1bc 0f09 	cmp.w	ip, #9
 800b79a:	d1ea      	bne.n	800b772 <rclc_executor_trigger_any+0x3a>
 800b79c:	685c      	ldr	r4, [r3, #4]
 800b79e:	6a25      	ldr	r5, [r4, #32]
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	d1e4      	bne.n	800b76e <rclc_executor_trigger_any+0x36>
 800b7a4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d1e0      	bne.n	800b76e <rclc_executor_trigger_any+0x36>
 800b7ac:	3201      	adds	r2, #1
 800b7ae:	4291      	cmp	r1, r2
 800b7b0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b7b4:	d1e6      	bne.n	800b784 <rclc_executor_trigger_any+0x4c>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	bc30      	pop	{r4, r5}
 800b7ba:	4770      	bx	lr
 800b7bc:	4770      	bx	lr
 800b7be:	4608      	mov	r0, r1
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop

0800b7c4 <rclc_executor_get_zero_initialized_executor>:
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	4903      	ldr	r1, [pc, #12]	@ (800b7d4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	2288      	movs	r2, #136	@ 0x88
 800b7cc:	f00c fa2d 	bl	8017c2a <memcpy>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	08018b60 	.word	0x08018b60

0800b7d8 <rclc_executor_init>:
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d05f      	beq.n	800b89c <rclc_executor_init+0xc4>
 800b7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e0:	460c      	mov	r4, r1
 800b7e2:	b0b0      	sub	sp, #192	@ 0xc0
 800b7e4:	2900      	cmp	r1, #0
 800b7e6:	d051      	beq.n	800b88c <rclc_executor_init+0xb4>
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	4616      	mov	r6, r2
 800b7ee:	461f      	mov	r7, r3
 800b7f0:	f000 fbd0 	bl	800bf94 <rcutils_allocator_is_valid>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d049      	beq.n	800b88c <rclc_executor_init+0xb4>
 800b7f8:	2e00      	cmp	r6, #0
 800b7fa:	d047      	beq.n	800b88c <rclc_executor_init+0xb4>
 800b7fc:	492c      	ldr	r1, [pc, #176]	@ (800b8b0 <rclc_executor_init+0xd8>)
 800b7fe:	2288      	movs	r2, #136	@ 0x88
 800b800:	a80e      	add	r0, sp, #56	@ 0x38
 800b802:	f00c fa12 	bl	8017c2a <memcpy>
 800b806:	a90e      	add	r1, sp, #56	@ 0x38
 800b808:	2288      	movs	r2, #136	@ 0x88
 800b80a:	4628      	mov	r0, r5
 800b80c:	f00c fa0d 	bl	8017c2a <memcpy>
 800b810:	602c      	str	r4, [r5, #0]
 800b812:	4668      	mov	r0, sp
 800b814:	60ae      	str	r6, [r5, #8]
 800b816:	466c      	mov	r4, sp
 800b818:	f007 fce2 	bl	80131e0 <rcl_get_zero_initialized_wait_set>
 800b81c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b81e:	f105 0c14 	add.w	ip, r5, #20
 800b822:	f8d7 8000 	ldr.w	r8, [r7]
 800b826:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b82a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b82c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b832:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b836:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b8a8 <rclc_executor_init+0xd0>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	f8cc 3000 	str.w	r3, [ip]
 800b840:	6939      	ldr	r1, [r7, #16]
 800b842:	612f      	str	r7, [r5, #16]
 800b844:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b848:	01b0      	lsls	r0, r6, #6
 800b84a:	47c0      	blx	r8
 800b84c:	6068      	str	r0, [r5, #4]
 800b84e:	b338      	cbz	r0, 800b8a0 <rclc_executor_init+0xc8>
 800b850:	2400      	movs	r4, #0
 800b852:	e000      	b.n	800b856 <rclc_executor_init+0x7e>
 800b854:	6868      	ldr	r0, [r5, #4]
 800b856:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b85a:	4631      	mov	r1, r6
 800b85c:	3401      	adds	r4, #1
 800b85e:	f000 fa6b 	bl	800bd38 <rclc_executor_handle_init>
 800b862:	42a6      	cmp	r6, r4
 800b864:	d1f6      	bne.n	800b854 <rclc_executor_init+0x7c>
 800b866:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b86a:	f000 fa59 	bl	800bd20 <rclc_executor_handle_counters_zero_init>
 800b86e:	4a11      	ldr	r2, [pc, #68]	@ (800b8b4 <rclc_executor_init+0xdc>)
 800b870:	686b      	ldr	r3, [r5, #4]
 800b872:	2000      	movs	r0, #0
 800b874:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b878:	b163      	cbz	r3, 800b894 <rclc_executor_init+0xbc>
 800b87a:	692b      	ldr	r3, [r5, #16]
 800b87c:	b153      	cbz	r3, 800b894 <rclc_executor_init+0xbc>
 800b87e:	68ab      	ldr	r3, [r5, #8]
 800b880:	b143      	cbz	r3, 800b894 <rclc_executor_init+0xbc>
 800b882:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b886:	b030      	add	sp, #192	@ 0xc0
 800b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88c:	200b      	movs	r0, #11
 800b88e:	b030      	add	sp, #192	@ 0xc0
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	4618      	mov	r0, r3
 800b896:	b030      	add	sp, #192	@ 0xc0
 800b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89c:	200b      	movs	r0, #11
 800b89e:	4770      	bx	lr
 800b8a0:	200a      	movs	r0, #10
 800b8a2:	e7f4      	b.n	800b88e <rclc_executor_init+0xb6>
 800b8a4:	f3af 8000 	nop.w
 800b8a8:	3b9aca00 	.word	0x3b9aca00
 800b8ac:	00000000 	.word	0x00000000
 800b8b0:	08018b60 	.word	0x08018b60
 800b8b4:	0800b739 	.word	0x0800b739

0800b8b8 <rclc_executor_add_timer>:
 800b8b8:	b300      	cbz	r0, 800b8fc <rclc_executor_add_timer+0x44>
 800b8ba:	b1f9      	cbz	r1, 800b8fc <rclc_executor_add_timer+0x44>
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	d301      	bcc.n	800b8cc <rclc_executor_add_timer+0x14>
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	6840      	ldr	r0, [r0, #4]
 800b8ce:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800b8d2:	019d      	lsls	r5, r3, #6
 800b8d4:	6051      	str	r1, [r2, #4]
 800b8d6:	2102      	movs	r1, #2
 800b8d8:	5341      	strh	r1, [r0, r5]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	2000      	movs	r0, #0
 800b8de:	2101      	movs	r1, #1
 800b8e0:	f104 0514 	add.w	r5, r4, #20
 800b8e4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800b8e6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	60e3      	str	r3, [r4, #12]
 800b8ec:	f007 fc8c 	bl	8013208 <rcl_wait_set_is_valid>
 800b8f0:	b930      	cbnz	r0, 800b900 <rclc_executor_add_timer+0x48>
 800b8f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	200b      	movs	r0, #11
 800b8fe:	4770      	bx	lr
 800b900:	4628      	mov	r0, r5
 800b902:	f007 fc87 	bl	8013214 <rcl_wait_set_fini>
 800b906:	2800      	cmp	r0, #0
 800b908:	d0f3      	beq.n	800b8f2 <rclc_executor_add_timer+0x3a>
 800b90a:	bd38      	pop	{r3, r4, r5, pc}

0800b90c <rclc_executor_prepare>:
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d044      	beq.n	800b99a <rclc_executor_prepare+0x8e>
 800b910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b912:	f100 0514 	add.w	r5, r0, #20
 800b916:	b09b      	sub	sp, #108	@ 0x6c
 800b918:	4604      	mov	r4, r0
 800b91a:	4628      	mov	r0, r5
 800b91c:	f007 fc74 	bl	8013208 <rcl_wait_set_is_valid>
 800b920:	b110      	cbz	r0, 800b928 <rclc_executor_prepare+0x1c>
 800b922:	2000      	movs	r0, #0
 800b924:	b01b      	add	sp, #108	@ 0x6c
 800b926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b928:	4628      	mov	r0, r5
 800b92a:	f007 fc73 	bl	8013214 <rcl_wait_set_fini>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d130      	bne.n	800b994 <rclc_executor_prepare+0x88>
 800b932:	a80c      	add	r0, sp, #48	@ 0x30
 800b934:	f007 fc54 	bl	80131e0 <rcl_get_zero_initialized_wait_set>
 800b938:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b93c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b940:	46ae      	mov	lr, r5
 800b942:	6927      	ldr	r7, [r4, #16]
 800b944:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b948:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b94c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b950:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b954:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b958:	f8dc 3000 	ldr.w	r3, [ip]
 800b95c:	f8ce 3000 	str.w	r3, [lr]
 800b960:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b962:	ae04      	add	r6, sp, #16
 800b964:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	6822      	ldr	r2, [r4, #0]
 800b96a:	6033      	str	r3, [r6, #0]
 800b96c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b96e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b970:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b974:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b978:	e9cd 2100 	strd	r2, r1, [sp]
 800b97c:	4628      	mov	r0, r5
 800b97e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b980:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b982:	f007 ff45 	bl	8013810 <rcl_wait_set_init>
 800b986:	2800      	cmp	r0, #0
 800b988:	d0cc      	beq.n	800b924 <rclc_executor_prepare+0x18>
 800b98a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b98c:	f000 fb28 	bl	800bfe0 <rcutils_reset_error>
 800b990:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b992:	e7c7      	b.n	800b924 <rclc_executor_prepare+0x18>
 800b994:	f000 fb24 	bl	800bfe0 <rcutils_reset_error>
 800b998:	e7cb      	b.n	800b932 <rclc_executor_prepare+0x26>
 800b99a:	200b      	movs	r0, #11
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop

0800b9a0 <rclc_executor_spin_some.part.0>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	f100 0614 	add.w	r6, r0, #20
 800b9a8:	b083      	sub	sp, #12
 800b9aa:	4691      	mov	r9, r2
 800b9ac:	4698      	mov	r8, r3
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	f7ff ffac 	bl	800b90c <rclc_executor_prepare>
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f007 fcf9 	bl	80133ac <rcl_wait_set_clear>
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	f040 80ed 	bne.w	800bb9c <rclc_executor_spin_some.part.0+0x1fc>
 800b9c2:	68ab      	ldr	r3, [r5, #8]
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	b303      	cbz	r3, 800ba0a <rclc_executor_spin_some.part.0+0x6a>
 800b9c8:	6869      	ldr	r1, [r5, #4]
 800b9ca:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b9ce:	01a2      	lsls	r2, r4, #6
 800b9d0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b9d4:	b1cb      	cbz	r3, 800ba0a <rclc_executor_spin_some.part.0+0x6a>
 800b9d6:	5c8b      	ldrb	r3, [r1, r2]
 800b9d8:	2b0a      	cmp	r3, #10
 800b9da:	f200 80d8 	bhi.w	800bb8e <rclc_executor_spin_some.part.0+0x1ee>
 800b9de:	e8df f003 	tbb	[pc, r3]
 800b9e2:	9c9c      	.short	0x9c9c
 800b9e4:	068c8ca7 	.word	0x068c8ca7
 800b9e8:	bdc90606 	.word	0xbdc90606
 800b9ec:	b2          	.byte	0xb2
 800b9ed:	00          	.byte	0x00
 800b9ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b9f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f008 f820 	bl	8013a3c <rcl_wait_set_add_service>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	f040 8086 	bne.w	800bb0e <rclc_executor_spin_some.part.0+0x16e>
 800ba02:	68ab      	ldr	r3, [r5, #8]
 800ba04:	3401      	adds	r4, #1
 800ba06:	429c      	cmp	r4, r3
 800ba08:	d3de      	bcc.n	800b9c8 <rclc_executor_spin_some.part.0+0x28>
 800ba0a:	4643      	mov	r3, r8
 800ba0c:	464a      	mov	r2, r9
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f008 f842 	bl	8013a98 <rcl_wait>
 800ba14:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 80c7 	beq.w	800bbac <rclc_executor_spin_some.part.0+0x20c>
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	f040 80b5 	bne.w	800bb8e <rclc_executor_spin_some.part.0+0x1ee>
 800ba24:	68ab      	ldr	r3, [r5, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 8159 	beq.w	800bcde <rclc_executor_spin_some.part.0+0x33e>
 800ba2c:	2400      	movs	r4, #0
 800ba2e:	46a0      	mov	r8, r4
 800ba30:	f240 1991 	movw	r9, #401	@ 0x191
 800ba34:	e00a      	b.n	800ba4c <rclc_executor_spin_some.part.0+0xac>
 800ba36:	f7ff fb7d 	bl	800b134 <_rclc_check_for_new_data>
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	b110      	cbz	r0, 800ba44 <rclc_executor_spin_some.part.0+0xa4>
 800ba3e:	4548      	cmp	r0, r9
 800ba40:	f040 80b2 	bne.w	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800ba44:	68ab      	ldr	r3, [r5, #8]
 800ba46:	4598      	cmp	r8, r3
 800ba48:	f080 8126 	bcs.w	800bc98 <rclc_executor_spin_some.part.0+0x2f8>
 800ba4c:	686a      	ldr	r2, [r5, #4]
 800ba4e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ba52:	4631      	mov	r1, r6
 800ba54:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ba58:	f108 0801 	add.w	r8, r8, #1
 800ba5c:	f1bc 0f00 	cmp.w	ip, #0
 800ba60:	d1e9      	bne.n	800ba36 <rclc_executor_spin_some.part.0+0x96>
 800ba62:	4619      	mov	r1, r3
 800ba64:	4610      	mov	r0, r2
 800ba66:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ba6a:	4798      	blx	r3
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	f000 809b 	beq.w	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800ba72:	68ab      	ldr	r3, [r5, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 8097 	beq.w	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800ba7a:	f04f 0800 	mov.w	r8, #0
 800ba7e:	f240 1991 	movw	r9, #401	@ 0x191
 800ba82:	e009      	b.n	800ba98 <rclc_executor_spin_some.part.0+0xf8>
 800ba84:	f7ff fba4 	bl	800b1d0 <_rclc_take_new_data>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	b110      	cbz	r0, 800ba92 <rclc_executor_spin_some.part.0+0xf2>
 800ba8c:	4548      	cmp	r0, r9
 800ba8e:	f040 808b 	bne.w	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800ba92:	68ab      	ldr	r3, [r5, #8]
 800ba94:	4598      	cmp	r8, r3
 800ba96:	d209      	bcs.n	800baac <rclc_executor_spin_some.part.0+0x10c>
 800ba98:	6868      	ldr	r0, [r5, #4]
 800ba9a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ba9e:	4631      	mov	r1, r6
 800baa0:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800baa4:	f108 0801 	add.w	r8, r8, #1
 800baa8:	2a00      	cmp	r2, #0
 800baaa:	d1eb      	bne.n	800ba84 <rclc_executor_spin_some.part.0+0xe4>
 800baac:	2600      	movs	r6, #0
 800baae:	b97b      	cbnz	r3, 800bad0 <rclc_executor_spin_some.part.0+0x130>
 800bab0:	e07a      	b.n	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800bab2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800bab6:	2a08      	cmp	r2, #8
 800bab8:	f000 80fd 	beq.w	800bcb6 <rclc_executor_spin_some.part.0+0x316>
 800babc:	2a09      	cmp	r2, #9
 800babe:	f000 80ef 	beq.w	800bca0 <rclc_executor_spin_some.part.0+0x300>
 800bac2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800bac6:	b98a      	cbnz	r2, 800baec <rclc_executor_spin_some.part.0+0x14c>
 800bac8:	3601      	adds	r6, #1
 800baca:	429e      	cmp	r6, r3
 800bacc:	d262      	bcs.n	800bb94 <rclc_executor_spin_some.part.0+0x1f4>
 800bace:	2400      	movs	r4, #0
 800bad0:	686a      	ldr	r2, [r5, #4]
 800bad2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800bad6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800bada:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800bade:	2900      	cmp	r1, #0
 800bae0:	d062      	beq.n	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800bae2:	7841      	ldrb	r1, [r0, #1]
 800bae4:	2900      	cmp	r1, #0
 800bae6:	d0e4      	beq.n	800bab2 <rclc_executor_spin_some.part.0+0x112>
 800bae8:	2901      	cmp	r1, #1
 800baea:	d1ed      	bne.n	800bac8 <rclc_executor_spin_some.part.0+0x128>
 800baec:	f7ff fce4 	bl	800b4b8 <_rclc_execute.part.0>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	f040 80b6 	bne.w	800bc62 <rclc_executor_spin_some.part.0+0x2c2>
 800baf6:	68ab      	ldr	r3, [r5, #8]
 800baf8:	e7e6      	b.n	800bac8 <rclc_executor_spin_some.part.0+0x128>
 800bafa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bafe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb02:	4630      	mov	r0, r6
 800bb04:	f007 ff6e 	bl	80139e4 <rcl_wait_set_add_client>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	f43f af7a 	beq.w	800ba02 <rclc_executor_spin_some.part.0+0x62>
 800bb0e:	9001      	str	r0, [sp, #4]
 800bb10:	f000 fa66 	bl	800bfe0 <rcutils_reset_error>
 800bb14:	9801      	ldr	r0, [sp, #4]
 800bb16:	4607      	mov	r7, r0
 800bb18:	e03c      	b.n	800bb94 <rclc_executor_spin_some.part.0+0x1f4>
 800bb1a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb1e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb22:	4630      	mov	r0, r6
 800bb24:	f007 fc16 	bl	8013354 <rcl_wait_set_add_subscription>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	f43f af6a 	beq.w	800ba02 <rclc_executor_spin_some.part.0+0x62>
 800bb2e:	e7ee      	b.n	800bb0e <rclc_executor_spin_some.part.0+0x16e>
 800bb30:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb34:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f007 ff23 	bl	8013984 <rcl_wait_set_add_timer>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	f43f af5f 	beq.w	800ba02 <rclc_executor_spin_some.part.0+0x62>
 800bb44:	e7e3      	b.n	800bb0e <rclc_executor_spin_some.part.0+0x16e>
 800bb46:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb4a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f007 feec 	bl	801392c <rcl_wait_set_add_guard_condition>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	f43f af54 	beq.w	800ba02 <rclc_executor_spin_some.part.0+0x62>
 800bb5a:	e7d8      	b.n	800bb0e <rclc_executor_spin_some.part.0+0x16e>
 800bb5c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb60:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb64:	3110      	adds	r1, #16
 800bb66:	4630      	mov	r0, r6
 800bb68:	f008 fc6e 	bl	8014448 <rcl_action_wait_set_add_action_server>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	f43f af48 	beq.w	800ba02 <rclc_executor_spin_some.part.0+0x62>
 800bb72:	e7cc      	b.n	800bb0e <rclc_executor_spin_some.part.0+0x16e>
 800bb74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bb78:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bb7c:	3110      	adds	r1, #16
 800bb7e:	2300      	movs	r3, #0
 800bb80:	4630      	mov	r0, r6
 800bb82:	f008 fa39 	bl	8013ff8 <rcl_action_wait_set_add_action_client>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	f43f af3b 	beq.w	800ba02 <rclc_executor_spin_some.part.0+0x62>
 800bb8c:	e7bf      	b.n	800bb0e <rclc_executor_spin_some.part.0+0x16e>
 800bb8e:	f000 fa27 	bl	800bfe0 <rcutils_reset_error>
 800bb92:	2701      	movs	r7, #1
 800bb94:	4638      	mov	r0, r7
 800bb96:	b003      	add	sp, #12
 800bb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9c:	f000 fa20 	bl	800bfe0 <rcutils_reset_error>
 800bba0:	4638      	mov	r0, r7
 800bba2:	b003      	add	sp, #12
 800bba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba8:	4627      	mov	r7, r4
 800bbaa:	e7f3      	b.n	800bb94 <rclc_executor_spin_some.part.0+0x1f4>
 800bbac:	68ab      	ldr	r3, [r5, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 8092 	beq.w	800bcd8 <rclc_executor_spin_some.part.0+0x338>
 800bbb4:	2400      	movs	r4, #0
 800bbb6:	46a0      	mov	r8, r4
 800bbb8:	f240 1991 	movw	r9, #401	@ 0x191
 800bbbc:	e008      	b.n	800bbd0 <rclc_executor_spin_some.part.0+0x230>
 800bbbe:	f7ff fab9 	bl	800b134 <_rclc_check_for_new_data>
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	b108      	cbz	r0, 800bbca <rclc_executor_spin_some.part.0+0x22a>
 800bbc6:	4548      	cmp	r0, r9
 800bbc8:	d1ee      	bne.n	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800bbca:	68ab      	ldr	r3, [r5, #8]
 800bbcc:	4598      	cmp	r8, r3
 800bbce:	d265      	bcs.n	800bc9c <rclc_executor_spin_some.part.0+0x2fc>
 800bbd0:	686a      	ldr	r2, [r5, #4]
 800bbd2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800bbdc:	f108 0801 	add.w	r8, r8, #1
 800bbe0:	f1bc 0f00 	cmp.w	ip, #0
 800bbe4:	d1eb      	bne.n	800bbbe <rclc_executor_spin_some.part.0+0x21e>
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	4610      	mov	r0, r2
 800bbea:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800bbee:	4798      	blx	r3
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d0d9      	beq.n	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800bbf4:	68ab      	ldr	r3, [r5, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0d6      	beq.n	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800bbfa:	f04f 0800 	mov.w	r8, #0
 800bbfe:	f240 1991 	movw	r9, #401	@ 0x191
 800bc02:	f240 2a59 	movw	sl, #601	@ 0x259
 800bc06:	e00e      	b.n	800bc26 <rclc_executor_spin_some.part.0+0x286>
 800bc08:	f813 300b 	ldrb.w	r3, [r3, fp]
 800bc0c:	2b08      	cmp	r3, #8
 800bc0e:	d033      	beq.n	800bc78 <rclc_executor_spin_some.part.0+0x2d8>
 800bc10:	2b09      	cmp	r3, #9
 800bc12:	d028      	beq.n	800bc66 <rclc_executor_spin_some.part.0+0x2c6>
 800bc14:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800bc18:	b9fb      	cbnz	r3, 800bc5a <rclc_executor_spin_some.part.0+0x2ba>
 800bc1a:	68ab      	ldr	r3, [r5, #8]
 800bc1c:	f108 0801 	add.w	r8, r8, #1
 800bc20:	4598      	cmp	r8, r3
 800bc22:	d2b7      	bcs.n	800bb94 <rclc_executor_spin_some.part.0+0x1f4>
 800bc24:	2400      	movs	r4, #0
 800bc26:	6868      	ldr	r0, [r5, #4]
 800bc28:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800bc2c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800bc30:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0b7      	beq.n	800bba8 <rclc_executor_spin_some.part.0+0x208>
 800bc38:	4631      	mov	r1, r6
 800bc3a:	f7ff fac9 	bl	800b1d0 <_rclc_take_new_data>
 800bc3e:	b118      	cbz	r0, 800bc48 <rclc_executor_spin_some.part.0+0x2a8>
 800bc40:	4548      	cmp	r0, r9
 800bc42:	d001      	beq.n	800bc48 <rclc_executor_spin_some.part.0+0x2a8>
 800bc44:	4550      	cmp	r0, sl
 800bc46:	d10c      	bne.n	800bc62 <rclc_executor_spin_some.part.0+0x2c2>
 800bc48:	686b      	ldr	r3, [r5, #4]
 800bc4a:	eb13 000b 	adds.w	r0, r3, fp
 800bc4e:	d021      	beq.n	800bc94 <rclc_executor_spin_some.part.0+0x2f4>
 800bc50:	7842      	ldrb	r2, [r0, #1]
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	d0d8      	beq.n	800bc08 <rclc_executor_spin_some.part.0+0x268>
 800bc56:	2a01      	cmp	r2, #1
 800bc58:	d1df      	bne.n	800bc1a <rclc_executor_spin_some.part.0+0x27a>
 800bc5a:	f7ff fc2d 	bl	800b4b8 <_rclc_execute.part.0>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d0db      	beq.n	800bc1a <rclc_executor_spin_some.part.0+0x27a>
 800bc62:	4607      	mov	r7, r0
 800bc64:	e796      	b.n	800bb94 <rclc_executor_spin_some.part.0+0x1f4>
 800bc66:	6843      	ldr	r3, [r0, #4]
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	2a00      	cmp	r2, #0
 800bc6c:	d1f5      	bne.n	800bc5a <rclc_executor_spin_some.part.0+0x2ba>
 800bc6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0d1      	beq.n	800bc1a <rclc_executor_spin_some.part.0+0x27a>
 800bc76:	e7f0      	b.n	800bc5a <rclc_executor_spin_some.part.0+0x2ba>
 800bc78:	6843      	ldr	r3, [r0, #4]
 800bc7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc7c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800bc80:	d1eb      	bne.n	800bc5a <rclc_executor_spin_some.part.0+0x2ba>
 800bc82:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	d1e7      	bne.n	800bc5a <rclc_executor_spin_some.part.0+0x2ba>
 800bc8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0c3      	beq.n	800bc1a <rclc_executor_spin_some.part.0+0x27a>
 800bc92:	e7e2      	b.n	800bc5a <rclc_executor_spin_some.part.0+0x2ba>
 800bc94:	270b      	movs	r7, #11
 800bc96:	e77d      	b.n	800bb94 <rclc_executor_spin_some.part.0+0x1f4>
 800bc98:	686a      	ldr	r2, [r5, #4]
 800bc9a:	e6e2      	b.n	800ba62 <rclc_executor_spin_some.part.0+0xc2>
 800bc9c:	686a      	ldr	r2, [r5, #4]
 800bc9e:	e7a2      	b.n	800bbe6 <rclc_executor_spin_some.part.0+0x246>
 800bca0:	6842      	ldr	r2, [r0, #4]
 800bca2:	6a11      	ldr	r1, [r2, #32]
 800bca4:	2900      	cmp	r1, #0
 800bca6:	f47f af21 	bne.w	800baec <rclc_executor_spin_some.part.0+0x14c>
 800bcaa:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	f43f af0a 	beq.w	800bac8 <rclc_executor_spin_some.part.0+0x128>
 800bcb4:	e71a      	b.n	800baec <rclc_executor_spin_some.part.0+0x14c>
 800bcb6:	6842      	ldr	r2, [r0, #4]
 800bcb8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800bcba:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800bcbe:	f47f af15 	bne.w	800baec <rclc_executor_spin_some.part.0+0x14c>
 800bcc2:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	f47f af10 	bne.w	800baec <rclc_executor_spin_some.part.0+0x14c>
 800bccc:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800bcd0:	2a00      	cmp	r2, #0
 800bcd2:	f43f aef9 	beq.w	800bac8 <rclc_executor_spin_some.part.0+0x128>
 800bcd6:	e709      	b.n	800baec <rclc_executor_spin_some.part.0+0x14c>
 800bcd8:	686a      	ldr	r2, [r5, #4]
 800bcda:	461c      	mov	r4, r3
 800bcdc:	e783      	b.n	800bbe6 <rclc_executor_spin_some.part.0+0x246>
 800bcde:	686a      	ldr	r2, [r5, #4]
 800bce0:	461c      	mov	r4, r3
 800bce2:	e6be      	b.n	800ba62 <rclc_executor_spin_some.part.0+0xc2>

0800bce4 <rclc_executor_spin>:
 800bce4:	b1d0      	cbz	r0, 800bd1c <rclc_executor_spin+0x38>
 800bce6:	b510      	push	{r4, lr}
 800bce8:	4604      	mov	r4, r0
 800bcea:	b082      	sub	sp, #8
 800bcec:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800bcf0:	6820      	ldr	r0, [r4, #0]
 800bcf2:	e9cd 2300 	strd	r2, r3, [sp]
 800bcf6:	f006 f8b7 	bl	8011e68 <rcl_context_is_valid>
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd00:	4620      	mov	r0, r4
 800bd02:	b131      	cbz	r1, 800bd12 <rclc_executor_spin+0x2e>
 800bd04:	f7ff fe4c 	bl	800b9a0 <rclc_executor_spin_some.part.0>
 800bd08:	f030 0302 	bics.w	r3, r0, #2
 800bd0c:	d0ee      	beq.n	800bcec <rclc_executor_spin+0x8>
 800bd0e:	b002      	add	sp, #8
 800bd10:	bd10      	pop	{r4, pc}
 800bd12:	f000 f965 	bl	800bfe0 <rcutils_reset_error>
 800bd16:	2001      	movs	r0, #1
 800bd18:	b002      	add	sp, #8
 800bd1a:	bd10      	pop	{r4, pc}
 800bd1c:	200b      	movs	r0, #11
 800bd1e:	4770      	bx	lr

0800bd20 <rclc_executor_handle_counters_zero_init>:
 800bd20:	b130      	cbz	r0, 800bd30 <rclc_executor_handle_counters_zero_init+0x10>
 800bd22:	b508      	push	{r3, lr}
 800bd24:	2220      	movs	r2, #32
 800bd26:	2100      	movs	r1, #0
 800bd28:	f00b feb6 	bl	8017a98 <memset>
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	bd08      	pop	{r3, pc}
 800bd30:	200b      	movs	r0, #11
 800bd32:	4770      	bx	lr
 800bd34:	0000      	movs	r0, r0
	...

0800bd38 <rclc_executor_handle_init>:
 800bd38:	b168      	cbz	r0, 800bd56 <rclc_executor_handle_init+0x1e>
 800bd3a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800bd60 <rclc_executor_handle_init+0x28>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	220b      	movs	r2, #11
 800bd42:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800bd46:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800bd4a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800bd4e:	8002      	strh	r2, [r0, #0]
 800bd50:	8703      	strh	r3, [r0, #56]	@ 0x38
 800bd52:	4618      	mov	r0, r3
 800bd54:	4770      	bx	lr
 800bd56:	200b      	movs	r0, #11
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	f3af 8000 	nop.w
	...

0800bd68 <rclc_support_init_with_options>:
 800bd68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bd70:	b340      	cbz	r0, 800bdc4 <rclc_support_init_with_options+0x5c>
 800bd72:	461d      	mov	r5, r3
 800bd74:	b333      	cbz	r3, 800bdc4 <rclc_support_init_with_options+0x5c>
 800bd76:	b32e      	cbz	r6, 800bdc4 <rclc_support_init_with_options+0x5c>
 800bd78:	46e9      	mov	r9, sp
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4648      	mov	r0, r9
 800bd7e:	460f      	mov	r7, r1
 800bd80:	4690      	mov	r8, r2
 800bd82:	f006 f867 	bl	8011e54 <rcl_get_zero_initialized_context>
 800bd86:	e899 0003 	ldmia.w	r9, {r0, r1}
 800bd8a:	462a      	mov	r2, r5
 800bd8c:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd90:	4623      	mov	r3, r4
 800bd92:	4641      	mov	r1, r8
 800bd94:	4638      	mov	r0, r7
 800bd96:	f006 f8cd 	bl	8011f34 <rcl_init>
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	b960      	cbnz	r0, 800bdb8 <rclc_support_init_with_options+0x50>
 800bd9e:	60a6      	str	r6, [r4, #8]
 800bda0:	4632      	mov	r2, r6
 800bda2:	f104 010c 	add.w	r1, r4, #12
 800bda6:	2003      	movs	r0, #3
 800bda8:	f006 fe1a 	bl	80129e0 <rcl_clock_init>
 800bdac:	4605      	mov	r5, r0
 800bdae:	b918      	cbnz	r0, 800bdb8 <rclc_support_init_with_options+0x50>
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	b003      	add	sp, #12
 800bdb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb8:	f000 f912 	bl	800bfe0 <rcutils_reset_error>
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	b003      	add	sp, #12
 800bdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdc4:	250b      	movs	r5, #11
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	b003      	add	sp, #12
 800bdca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdce:	bf00      	nop

0800bdd0 <rclc_node_init_default>:
 800bdd0:	b3b8      	cbz	r0, 800be42 <rclc_node_init_default+0x72>
 800bdd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	b0a1      	sub	sp, #132	@ 0x84
 800bdda:	b329      	cbz	r1, 800be28 <rclc_node_init_default+0x58>
 800bddc:	4616      	mov	r6, r2
 800bdde:	b31a      	cbz	r2, 800be28 <rclc_node_init_default+0x58>
 800bde0:	461f      	mov	r7, r3
 800bde2:	b30b      	cbz	r3, 800be28 <rclc_node_init_default+0x58>
 800bde4:	f10d 0810 	add.w	r8, sp, #16
 800bde8:	4604      	mov	r4, r0
 800bdea:	4640      	mov	r0, r8
 800bdec:	f006 f9c8 	bl	8012180 <rcl_get_zero_initialized_node>
 800bdf0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bdf4:	f10d 0918 	add.w	r9, sp, #24
 800bdf8:	e884 0003 	stmia.w	r4, {r0, r1}
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	f006 fb37 	bl	8012470 <rcl_node_get_default_options>
 800be02:	4640      	mov	r0, r8
 800be04:	f006 f9bc 	bl	8012180 <rcl_get_zero_initialized_node>
 800be08:	f8cd 9000 	str.w	r9, [sp]
 800be0c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800be10:	463b      	mov	r3, r7
 800be12:	e884 0003 	stmia.w	r4, {r0, r1}
 800be16:	4632      	mov	r2, r6
 800be18:	4629      	mov	r1, r5
 800be1a:	4620      	mov	r0, r4
 800be1c:	f006 f9ba 	bl	8012194 <rcl_node_init>
 800be20:	b930      	cbnz	r0, 800be30 <rclc_node_init_default+0x60>
 800be22:	b021      	add	sp, #132	@ 0x84
 800be24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be28:	200b      	movs	r0, #11
 800be2a:	b021      	add	sp, #132	@ 0x84
 800be2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be30:	9003      	str	r0, [sp, #12]
 800be32:	f000 f8d5 	bl	800bfe0 <rcutils_reset_error>
 800be36:	f000 f8d3 	bl	800bfe0 <rcutils_reset_error>
 800be3a:	9803      	ldr	r0, [sp, #12]
 800be3c:	b021      	add	sp, #132	@ 0x84
 800be3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be42:	200b      	movs	r0, #11
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop

0800be48 <rclc_publisher_init_best_effort>:
 800be48:	b368      	cbz	r0, 800bea6 <rclc_publisher_init_best_effort+0x5e>
 800be4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be4e:	460d      	mov	r5, r1
 800be50:	b0a0      	sub	sp, #128	@ 0x80
 800be52:	b321      	cbz	r1, 800be9e <rclc_publisher_init_best_effort+0x56>
 800be54:	4616      	mov	r6, r2
 800be56:	b312      	cbz	r2, 800be9e <rclc_publisher_init_best_effort+0x56>
 800be58:	461f      	mov	r7, r3
 800be5a:	b303      	cbz	r3, 800be9e <rclc_publisher_init_best_effort+0x56>
 800be5c:	4604      	mov	r4, r0
 800be5e:	f7ff f859 	bl	800af14 <rcl_get_zero_initialized_publisher>
 800be62:	f10d 0810 	add.w	r8, sp, #16
 800be66:	6020      	str	r0, [r4, #0]
 800be68:	4640      	mov	r0, r8
 800be6a:	f7ff f8ef 	bl	800b04c <rcl_publisher_get_default_options>
 800be6e:	490f      	ldr	r1, [pc, #60]	@ (800beac <rclc_publisher_init_best_effort+0x64>)
 800be70:	2250      	movs	r2, #80	@ 0x50
 800be72:	4640      	mov	r0, r8
 800be74:	f00b fed9 	bl	8017c2a <memcpy>
 800be78:	f8cd 8000 	str.w	r8, [sp]
 800be7c:	463b      	mov	r3, r7
 800be7e:	4632      	mov	r2, r6
 800be80:	4629      	mov	r1, r5
 800be82:	4620      	mov	r0, r4
 800be84:	f7ff f84c 	bl	800af20 <rcl_publisher_init>
 800be88:	b910      	cbnz	r0, 800be90 <rclc_publisher_init_best_effort+0x48>
 800be8a:	b020      	add	sp, #128	@ 0x80
 800be8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be90:	9003      	str	r0, [sp, #12]
 800be92:	f000 f8a5 	bl	800bfe0 <rcutils_reset_error>
 800be96:	9803      	ldr	r0, [sp, #12]
 800be98:	b020      	add	sp, #128	@ 0x80
 800be9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9e:	200b      	movs	r0, #11
 800bea0:	b020      	add	sp, #128	@ 0x80
 800bea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea6:	200b      	movs	r0, #11
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	08018be8 	.word	0x08018be8

0800beb0 <rclc_timer_init_default>:
 800beb0:	b360      	cbz	r0, 800bf0c <rclc_timer_init_default+0x5c>
 800beb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb6:	460e      	mov	r6, r1
 800beb8:	b08a      	sub	sp, #40	@ 0x28
 800beba:	b319      	cbz	r1, 800bf04 <rclc_timer_init_default+0x54>
 800bebc:	4690      	mov	r8, r2
 800bebe:	461f      	mov	r7, r3
 800bec0:	4605      	mov	r5, r0
 800bec2:	f006 ff6b 	bl	8012d9c <rcl_get_zero_initialized_timer>
 800bec6:	68b4      	ldr	r4, [r6, #8]
 800bec8:	6028      	str	r0, [r5, #0]
 800beca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800becc:	f10d 0c0c 	add.w	ip, sp, #12
 800bed0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	f8cc 3000 	str.w	r3, [ip]
 800beda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bedc:	9302      	str	r3, [sp, #8]
 800bede:	e9cd 8700 	strd	r8, r7, [sp]
 800bee2:	4628      	mov	r0, r5
 800bee4:	4632      	mov	r2, r6
 800bee6:	f106 010c 	add.w	r1, r6, #12
 800beea:	f006 ff5d 	bl	8012da8 <rcl_timer_init>
 800beee:	b910      	cbnz	r0, 800bef6 <rclc_timer_init_default+0x46>
 800bef0:	b00a      	add	sp, #40	@ 0x28
 800bef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef6:	9009      	str	r0, [sp, #36]	@ 0x24
 800bef8:	f000 f872 	bl	800bfe0 <rcutils_reset_error>
 800befc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800befe:	b00a      	add	sp, #40	@ 0x28
 800bf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf04:	200b      	movs	r0, #11
 800bf06:	b00a      	add	sp, #40	@ 0x28
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	200b      	movs	r0, #11
 800bf0e:	4770      	bx	lr

0800bf10 <__default_zero_allocate>:
 800bf10:	f00b b9d8 	b.w	80172c4 <calloc>

0800bf14 <__default_reallocate>:
 800bf14:	f00b bb64 	b.w	80175e0 <realloc>

0800bf18 <__default_deallocate>:
 800bf18:	f00b ba40 	b.w	801739c <free>

0800bf1c <__default_allocate>:
 800bf1c:	f00b ba36 	b.w	801738c <malloc>

0800bf20 <rcutils_get_zero_initialized_allocator>:
 800bf20:	b510      	push	{r4, lr}
 800bf22:	4c05      	ldr	r4, [pc, #20]	@ (800bf38 <rcutils_get_zero_initialized_allocator+0x18>)
 800bf24:	4686      	mov	lr, r0
 800bf26:	4684      	mov	ip, r0
 800bf28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	f8cc 3000 	str.w	r3, [ip]
 800bf34:	4670      	mov	r0, lr
 800bf36:	bd10      	pop	{r4, pc}
 800bf38:	08018c38 	.word	0x08018c38

0800bf3c <rcutils_set_default_allocator>:
 800bf3c:	b1a8      	cbz	r0, 800bf6a <rcutils_set_default_allocator+0x2e>
 800bf3e:	6802      	ldr	r2, [r0, #0]
 800bf40:	b1a2      	cbz	r2, 800bf6c <rcutils_set_default_allocator+0x30>
 800bf42:	6841      	ldr	r1, [r0, #4]
 800bf44:	b1a1      	cbz	r1, 800bf70 <rcutils_set_default_allocator+0x34>
 800bf46:	b410      	push	{r4}
 800bf48:	68c4      	ldr	r4, [r0, #12]
 800bf4a:	b164      	cbz	r4, 800bf66 <rcutils_set_default_allocator+0x2a>
 800bf4c:	6880      	ldr	r0, [r0, #8]
 800bf4e:	b138      	cbz	r0, 800bf60 <rcutils_set_default_allocator+0x24>
 800bf50:	4b08      	ldr	r3, [pc, #32]	@ (800bf74 <rcutils_set_default_allocator+0x38>)
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	2200      	movs	r2, #0
 800bf56:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800bf5a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800bf5e:	2001      	movs	r0, #1
 800bf60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	4620      	mov	r0, r4
 800bf68:	e7fa      	b.n	800bf60 <rcutils_set_default_allocator+0x24>
 800bf6a:	4770      	bx	lr
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	4770      	bx	lr
 800bf70:	4608      	mov	r0, r1
 800bf72:	4770      	bx	lr
 800bf74:	20000014 	.word	0x20000014

0800bf78 <rcutils_get_default_allocator>:
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	4c05      	ldr	r4, [pc, #20]	@ (800bf90 <rcutils_get_default_allocator+0x18>)
 800bf7c:	4686      	mov	lr, r0
 800bf7e:	4684      	mov	ip, r0
 800bf80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	f8cc 3000 	str.w	r3, [ip]
 800bf8c:	4670      	mov	r0, lr
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	20000014 	.word	0x20000014

0800bf94 <rcutils_allocator_is_valid>:
 800bf94:	b158      	cbz	r0, 800bfae <rcutils_allocator_is_valid+0x1a>
 800bf96:	6803      	ldr	r3, [r0, #0]
 800bf98:	b143      	cbz	r3, 800bfac <rcutils_allocator_is_valid+0x18>
 800bf9a:	6843      	ldr	r3, [r0, #4]
 800bf9c:	b133      	cbz	r3, 800bfac <rcutils_allocator_is_valid+0x18>
 800bf9e:	68c3      	ldr	r3, [r0, #12]
 800bfa0:	b123      	cbz	r3, 800bfac <rcutils_allocator_is_valid+0x18>
 800bfa2:	6880      	ldr	r0, [r0, #8]
 800bfa4:	3800      	subs	r0, #0
 800bfa6:	bf18      	it	ne
 800bfa8:	2001      	movne	r0, #1
 800bfaa:	4770      	bx	lr
 800bfac:	4618      	mov	r0, r3
 800bfae:	4770      	bx	lr

0800bfb0 <rcutils_get_error_string>:
 800bfb0:	4b06      	ldr	r3, [pc, #24]	@ (800bfcc <rcutils_get_error_string+0x1c>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	b13b      	cbz	r3, 800bfc6 <rcutils_get_error_string+0x16>
 800bfb6:	4b06      	ldr	r3, [pc, #24]	@ (800bfd0 <rcutils_get_error_string+0x20>)
 800bfb8:	781a      	ldrb	r2, [r3, #0]
 800bfba:	b90a      	cbnz	r2, 800bfc0 <rcutils_get_error_string+0x10>
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	701a      	strb	r2, [r3, #0]
 800bfc0:	4b04      	ldr	r3, [pc, #16]	@ (800bfd4 <rcutils_get_error_string+0x24>)
 800bfc2:	7818      	ldrb	r0, [r3, #0]
 800bfc4:	4770      	bx	lr
 800bfc6:	4b04      	ldr	r3, [pc, #16]	@ (800bfd8 <rcutils_get_error_string+0x28>)
 800bfc8:	7818      	ldrb	r0, [r3, #0]
 800bfca:	4770      	bx	lr
 800bfcc:	20008128 	.word	0x20008128
 800bfd0:	20008141 	.word	0x20008141
 800bfd4:	20008140 	.word	0x20008140
 800bfd8:	08018c4c 	.word	0x08018c4c
 800bfdc:	00000000 	.word	0x00000000

0800bfe0 <rcutils_reset_error>:
 800bfe0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800c000 <rcutils_reset_error+0x20>
 800bfe4:	4a08      	ldr	r2, [pc, #32]	@ (800c008 <rcutils_reset_error+0x28>)
 800bfe6:	4809      	ldr	r0, [pc, #36]	@ (800c00c <rcutils_reset_error+0x2c>)
 800bfe8:	4909      	ldr	r1, [pc, #36]	@ (800c010 <rcutils_reset_error+0x30>)
 800bfea:	2300      	movs	r3, #0
 800bfec:	8013      	strh	r3, [r2, #0]
 800bfee:	ed82 7b02 	vstr	d7, [r2, #8]
 800bff2:	4a08      	ldr	r2, [pc, #32]	@ (800c014 <rcutils_reset_error+0x34>)
 800bff4:	7003      	strb	r3, [r0, #0]
 800bff6:	700b      	strb	r3, [r1, #0]
 800bff8:	7013      	strb	r3, [r2, #0]
 800bffa:	4770      	bx	lr
 800bffc:	f3af 8000 	nop.w
	...
 800c008:	20008130 	.word	0x20008130
 800c00c:	20008141 	.word	0x20008141
 800c010:	20008140 	.word	0x20008140
 800c014:	20008128 	.word	0x20008128

0800c018 <rcutils_system_time_now>:
 800c018:	b308      	cbz	r0, 800c05e <rcutils_system_time_now+0x46>
 800c01a:	b570      	push	{r4, r5, r6, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	4604      	mov	r4, r0
 800c020:	4669      	mov	r1, sp
 800c022:	2001      	movs	r0, #1
 800c024:	f7f5 fc58 	bl	80018d8 <clock_gettime>
 800c028:	e9dd 3500 	ldrd	r3, r5, [sp]
 800c02c:	2d00      	cmp	r5, #0
 800c02e:	db13      	blt.n	800c058 <rcutils_system_time_now+0x40>
 800c030:	9902      	ldr	r1, [sp, #8]
 800c032:	2900      	cmp	r1, #0
 800c034:	db0d      	blt.n	800c052 <rcutils_system_time_now+0x3a>
 800c036:	4e0b      	ldr	r6, [pc, #44]	@ (800c064 <rcutils_system_time_now+0x4c>)
 800c038:	fba3 3206 	umull	r3, r2, r3, r6
 800c03c:	185b      	adds	r3, r3, r1
 800c03e:	fb06 2205 	mla	r2, r6, r5, r2
 800c042:	f04f 0000 	mov.w	r0, #0
 800c046:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800c04a:	e9c4 3200 	strd	r3, r2, [r4]
 800c04e:	b004      	add	sp, #16
 800c050:	bd70      	pop	{r4, r5, r6, pc}
 800c052:	ea53 0205 	orrs.w	r2, r3, r5
 800c056:	d1ee      	bne.n	800c036 <rcutils_system_time_now+0x1e>
 800c058:	2002      	movs	r0, #2
 800c05a:	b004      	add	sp, #16
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	200b      	movs	r0, #11
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	3b9aca00 	.word	0x3b9aca00

0800c068 <rcutils_steady_time_now>:
 800c068:	b308      	cbz	r0, 800c0ae <rcutils_steady_time_now+0x46>
 800c06a:	b570      	push	{r4, r5, r6, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	4604      	mov	r4, r0
 800c070:	4669      	mov	r1, sp
 800c072:	2000      	movs	r0, #0
 800c074:	f7f5 fc30 	bl	80018d8 <clock_gettime>
 800c078:	e9dd 3500 	ldrd	r3, r5, [sp]
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	db13      	blt.n	800c0a8 <rcutils_steady_time_now+0x40>
 800c080:	9902      	ldr	r1, [sp, #8]
 800c082:	2900      	cmp	r1, #0
 800c084:	db0d      	blt.n	800c0a2 <rcutils_steady_time_now+0x3a>
 800c086:	4e0b      	ldr	r6, [pc, #44]	@ (800c0b4 <rcutils_steady_time_now+0x4c>)
 800c088:	fba3 3206 	umull	r3, r2, r3, r6
 800c08c:	185b      	adds	r3, r3, r1
 800c08e:	fb06 2205 	mla	r2, r6, r5, r2
 800c092:	f04f 0000 	mov.w	r0, #0
 800c096:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800c09a:	e9c4 3200 	strd	r3, r2, [r4]
 800c09e:	b004      	add	sp, #16
 800c0a0:	bd70      	pop	{r4, r5, r6, pc}
 800c0a2:	ea53 0205 	orrs.w	r2, r3, r5
 800c0a6:	d1ee      	bne.n	800c086 <rcutils_steady_time_now+0x1e>
 800c0a8:	2002      	movs	r0, #2
 800c0aa:	b004      	add	sp, #16
 800c0ac:	bd70      	pop	{r4, r5, r6, pc}
 800c0ae:	200b      	movs	r0, #11
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	3b9aca00 	.word	0x3b9aca00

0800c0b8 <rmw_get_zero_initialized_init_options>:
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	2238      	movs	r2, #56	@ 0x38
 800c0bc:	4604      	mov	r4, r0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	f00b fcea 	bl	8017a98 <memset>
 800c0c4:	f104 0010 	add.w	r0, r4, #16
 800c0c8:	f000 f80a 	bl	800c0e0 <rmw_get_default_security_options>
 800c0cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0d0:	60e3      	str	r3, [r4, #12]
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	bd10      	pop	{r4, pc}
 800c0d6:	bf00      	nop

0800c0d8 <rmw_get_default_publisher_options>:
 800c0d8:	2200      	movs	r2, #0
 800c0da:	6002      	str	r2, [r0, #0]
 800c0dc:	7102      	strb	r2, [r0, #4]
 800c0de:	4770      	bx	lr

0800c0e0 <rmw_get_default_security_options>:
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	7002      	strb	r2, [r0, #0]
 800c0e4:	6042      	str	r2, [r0, #4]
 800c0e6:	4770      	bx	lr

0800c0e8 <rmw_uros_set_custom_transport>:
 800c0e8:	b470      	push	{r4, r5, r6}
 800c0ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c0ee:	b162      	cbz	r2, 800c10a <rmw_uros_set_custom_transport+0x22>
 800c0f0:	b15b      	cbz	r3, 800c10a <rmw_uros_set_custom_transport+0x22>
 800c0f2:	b155      	cbz	r5, 800c10a <rmw_uros_set_custom_transport+0x22>
 800c0f4:	b14e      	cbz	r6, 800c10a <rmw_uros_set_custom_transport+0x22>
 800c0f6:	4c06      	ldr	r4, [pc, #24]	@ (800c110 <rmw_uros_set_custom_transport+0x28>)
 800c0f8:	7020      	strb	r0, [r4, #0]
 800c0fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c0fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c102:	6166      	str	r6, [r4, #20]
 800c104:	2000      	movs	r0, #0
 800c106:	bc70      	pop	{r4, r5, r6}
 800c108:	4770      	bx	lr
 800c10a:	200b      	movs	r0, #11
 800c10c:	bc70      	pop	{r4, r5, r6}
 800c10e:	4770      	bx	lr
 800c110:	20008144 	.word	0x20008144

0800c114 <rmw_init_options_init>:
 800c114:	b084      	sub	sp, #16
 800c116:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c118:	b083      	sub	sp, #12
 800c11a:	ad09      	add	r5, sp, #36	@ 0x24
 800c11c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800c120:	b130      	cbz	r0, 800c130 <rmw_init_options_init+0x1c>
 800c122:	4604      	mov	r4, r0
 800c124:	4628      	mov	r0, r5
 800c126:	f7ff ff35 	bl	800bf94 <rcutils_allocator_is_valid>
 800c12a:	b108      	cbz	r0, 800c130 <rmw_init_options_init+0x1c>
 800c12c:	68a6      	ldr	r6, [r4, #8]
 800c12e:	b12e      	cbz	r6, 800c13c <rmw_init_options_init+0x28>
 800c130:	200b      	movs	r0, #11
 800c132:	b003      	add	sp, #12
 800c134:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c138:	b004      	add	sp, #16
 800c13a:	4770      	bx	lr
 800c13c:	2200      	movs	r2, #0
 800c13e:	2300      	movs	r3, #0
 800c140:	e9c4 2300 	strd	r2, r3, [r4]
 800c144:	4b22      	ldr	r3, [pc, #136]	@ (800c1d0 <rmw_init_options_init+0xbc>)
 800c146:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800c1e0 <rmw_init_options_init+0xcc>
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	60a3      	str	r3, [r4, #8]
 800c14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c150:	f104 0c20 	add.w	ip, r4, #32
 800c154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c158:	466f      	mov	r7, sp
 800c15a:	682b      	ldr	r3, [r5, #0]
 800c15c:	f8cc 3000 	str.w	r3, [ip]
 800c160:	4638      	mov	r0, r7
 800c162:	f8c4 e01c 	str.w	lr, [r4, #28]
 800c166:	60e6      	str	r6, [r4, #12]
 800c168:	f7ff ffba 	bl	800c0e0 <rmw_get_default_security_options>
 800c16c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c170:	f104 0310 	add.w	r3, r4, #16
 800c174:	e883 0003 	stmia.w	r3, {r0, r1}
 800c178:	2203      	movs	r2, #3
 800c17a:	4816      	ldr	r0, [pc, #88]	@ (800c1d4 <rmw_init_options_init+0xc0>)
 800c17c:	4916      	ldr	r1, [pc, #88]	@ (800c1d8 <rmw_init_options_init+0xc4>)
 800c17e:	7626      	strb	r6, [r4, #24]
 800c180:	f000 febc 	bl	800cefc <rmw_uxrce_init_init_options_impl_memory>
 800c184:	4813      	ldr	r0, [pc, #76]	@ (800c1d4 <rmw_init_options_init+0xc0>)
 800c186:	f009 f993 	bl	80154b0 <get_memory>
 800c18a:	b1f0      	cbz	r0, 800c1ca <rmw_init_options_init+0xb6>
 800c18c:	4a13      	ldr	r2, [pc, #76]	@ (800c1dc <rmw_init_options_init+0xc8>)
 800c18e:	6883      	ldr	r3, [r0, #8]
 800c190:	6851      	ldr	r1, [r2, #4]
 800c192:	7810      	ldrb	r0, [r2, #0]
 800c194:	6363      	str	r3, [r4, #52]	@ 0x34
 800c196:	7418      	strb	r0, [r3, #16]
 800c198:	6159      	str	r1, [r3, #20]
 800c19a:	68d1      	ldr	r1, [r2, #12]
 800c19c:	61d9      	str	r1, [r3, #28]
 800c19e:	6911      	ldr	r1, [r2, #16]
 800c1a0:	6219      	str	r1, [r3, #32]
 800c1a2:	6951      	ldr	r1, [r2, #20]
 800c1a4:	6892      	ldr	r2, [r2, #8]
 800c1a6:	619a      	str	r2, [r3, #24]
 800c1a8:	6259      	str	r1, [r3, #36]	@ 0x24
 800c1aa:	f004 fc67 	bl	8010a7c <uxr_nanos>
 800c1ae:	f00b f9ab 	bl	8017508 <srand>
 800c1b2:	f00b f9d7 	bl	8017564 <rand>
 800c1b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1b8:	6298      	str	r0, [r3, #40]	@ 0x28
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d0f9      	beq.n	800c1b2 <rmw_init_options_init+0x9e>
 800c1be:	2000      	movs	r0, #0
 800c1c0:	b003      	add	sp, #12
 800c1c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c1c6:	b004      	add	sp, #16
 800c1c8:	4770      	bx	lr
 800c1ca:	2001      	movs	r0, #1
 800c1cc:	e7b1      	b.n	800c132 <rmw_init_options_init+0x1e>
 800c1ce:	bf00      	nop
 800c1d0:	08019648 	.word	0x08019648
 800c1d4:	2000ca5c 	.word	0x2000ca5c
 800c1d8:	200082f8 	.word	0x200082f8
 800c1dc:	20008144 	.word	0x20008144
 800c1e0:	08018c50 	.word	0x08018c50

0800c1e4 <rmw_init_options_copy>:
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	b158      	cbz	r0, 800c200 <rmw_init_options_copy+0x1c>
 800c1e8:	460d      	mov	r5, r1
 800c1ea:	b149      	cbz	r1, 800c200 <rmw_init_options_copy+0x1c>
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	6880      	ldr	r0, [r0, #8]
 800c1f0:	b120      	cbz	r0, 800c1fc <rmw_init_options_copy+0x18>
 800c1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800c26c <rmw_init_options_copy+0x88>)
 800c1f4:	6819      	ldr	r1, [r3, #0]
 800c1f6:	f7f4 f813 	bl	8000220 <strcmp>
 800c1fa:	bb90      	cbnz	r0, 800c262 <rmw_init_options_copy+0x7e>
 800c1fc:	68ab      	ldr	r3, [r5, #8]
 800c1fe:	b113      	cbz	r3, 800c206 <rmw_init_options_copy+0x22>
 800c200:	250b      	movs	r5, #11
 800c202:	4628      	mov	r0, r5
 800c204:	bd70      	pop	{r4, r5, r6, pc}
 800c206:	4623      	mov	r3, r4
 800c208:	462a      	mov	r2, r5
 800c20a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800c20e:	f8d3 c000 	ldr.w	ip, [r3]
 800c212:	6858      	ldr	r0, [r3, #4]
 800c214:	6899      	ldr	r1, [r3, #8]
 800c216:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c21a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800c21e:	3310      	adds	r3, #16
 800c220:	42b3      	cmp	r3, r6
 800c222:	f8c2 c000 	str.w	ip, [r2]
 800c226:	6050      	str	r0, [r2, #4]
 800c228:	6091      	str	r1, [r2, #8]
 800c22a:	f102 0210 	add.w	r2, r2, #16
 800c22e:	d1ee      	bne.n	800c20e <rmw_init_options_copy+0x2a>
 800c230:	6819      	ldr	r1, [r3, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	480e      	ldr	r0, [pc, #56]	@ (800c270 <rmw_init_options_copy+0x8c>)
 800c236:	6053      	str	r3, [r2, #4]
 800c238:	6011      	str	r1, [r2, #0]
 800c23a:	f009 f939 	bl	80154b0 <get_memory>
 800c23e:	b198      	cbz	r0, 800c268 <rmw_init_options_copy+0x84>
 800c240:	6883      	ldr	r3, [r0, #8]
 800c242:	636b      	str	r3, [r5, #52]	@ 0x34
 800c244:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c246:	f102 0c10 	add.w	ip, r2, #16
 800c24a:	f103 0410 	add.w	r4, r3, #16
 800c24e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c254:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800c258:	2500      	movs	r5, #0
 800c25a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c25e:	4628      	mov	r0, r5
 800c260:	bd70      	pop	{r4, r5, r6, pc}
 800c262:	250c      	movs	r5, #12
 800c264:	4628      	mov	r0, r5
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	2501      	movs	r5, #1
 800c26a:	e7ca      	b.n	800c202 <rmw_init_options_copy+0x1e>
 800c26c:	08019648 	.word	0x08019648
 800c270:	2000ca5c 	.word	0x2000ca5c

0800c274 <rmw_init_options_fini>:
 800c274:	2800      	cmp	r0, #0
 800c276:	d03d      	beq.n	800c2f4 <rmw_init_options_fini+0x80>
 800c278:	b510      	push	{r4, lr}
 800c27a:	4604      	mov	r4, r0
 800c27c:	b08e      	sub	sp, #56	@ 0x38
 800c27e:	3020      	adds	r0, #32
 800c280:	f7ff fe88 	bl	800bf94 <rcutils_allocator_is_valid>
 800c284:	b360      	cbz	r0, 800c2e0 <rmw_init_options_fini+0x6c>
 800c286:	68a0      	ldr	r0, [r4, #8]
 800c288:	b120      	cbz	r0, 800c294 <rmw_init_options_fini+0x20>
 800c28a:	4b1c      	ldr	r3, [pc, #112]	@ (800c2fc <rmw_init_options_fini+0x88>)
 800c28c:	6819      	ldr	r1, [r3, #0]
 800c28e:	f7f3 ffc7 	bl	8000220 <strcmp>
 800c292:	bb68      	cbnz	r0, 800c2f0 <rmw_init_options_fini+0x7c>
 800c294:	4b1a      	ldr	r3, [pc, #104]	@ (800c300 <rmw_init_options_fini+0x8c>)
 800c296:	6819      	ldr	r1, [r3, #0]
 800c298:	b331      	cbz	r1, 800c2e8 <rmw_init_options_fini+0x74>
 800c29a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c29c:	e001      	b.n	800c2a2 <rmw_init_options_fini+0x2e>
 800c29e:	6849      	ldr	r1, [r1, #4]
 800c2a0:	b311      	cbz	r1, 800c2e8 <rmw_init_options_fini+0x74>
 800c2a2:	688b      	ldr	r3, [r1, #8]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d1fa      	bne.n	800c29e <rmw_init_options_fini+0x2a>
 800c2a8:	4815      	ldr	r0, [pc, #84]	@ (800c300 <rmw_init_options_fini+0x8c>)
 800c2aa:	f009 f911 	bl	80154d0 <put_memory>
 800c2ae:	4668      	mov	r0, sp
 800c2b0:	f7ff ff02 	bl	800c0b8 <rmw_get_zero_initialized_init_options>
 800c2b4:	46ee      	mov	lr, sp
 800c2b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2ba:	46a4      	mov	ip, r4
 800c2bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c2d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4618      	mov	r0, r3
 800c2dc:	b00e      	add	sp, #56	@ 0x38
 800c2de:	bd10      	pop	{r4, pc}
 800c2e0:	230b      	movs	r3, #11
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	b00e      	add	sp, #56	@ 0x38
 800c2e6:	bd10      	pop	{r4, pc}
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	b00e      	add	sp, #56	@ 0x38
 800c2ee:	bd10      	pop	{r4, pc}
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	e7f2      	b.n	800c2da <rmw_init_options_fini+0x66>
 800c2f4:	230b      	movs	r3, #11
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	08019648 	.word	0x08019648
 800c300:	2000ca5c 	.word	0x2000ca5c

0800c304 <rmw_init>:
 800c304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c308:	b083      	sub	sp, #12
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f000 80d3 	beq.w	800c4b6 <rmw_init+0x1b2>
 800c310:	460e      	mov	r6, r1
 800c312:	2900      	cmp	r1, #0
 800c314:	f000 80cf 	beq.w	800c4b6 <rmw_init+0x1b2>
 800c318:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c31a:	4605      	mov	r5, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f000 80ca 	beq.w	800c4b6 <rmw_init+0x1b2>
 800c322:	4b78      	ldr	r3, [pc, #480]	@ (800c504 <rmw_init+0x200>)
 800c324:	6880      	ldr	r0, [r0, #8]
 800c326:	681f      	ldr	r7, [r3, #0]
 800c328:	b128      	cbz	r0, 800c336 <rmw_init+0x32>
 800c32a:	4639      	mov	r1, r7
 800c32c:	f7f3 ff78 	bl	8000220 <strcmp>
 800c330:	2800      	cmp	r0, #0
 800c332:	f040 80ca 	bne.w	800c4ca <rmw_init+0x1c6>
 800c336:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c33a:	4c73      	ldr	r4, [pc, #460]	@ (800c508 <rmw_init+0x204>)
 800c33c:	4973      	ldr	r1, [pc, #460]	@ (800c50c <rmw_init+0x208>)
 800c33e:	4874      	ldr	r0, [pc, #464]	@ (800c510 <rmw_init+0x20c>)
 800c340:	60b7      	str	r7, [r6, #8]
 800c342:	e9c6 2300 	strd	r2, r3, [r6]
 800c346:	68eb      	ldr	r3, [r5, #12]
 800c348:	64b3      	str	r3, [r6, #72]	@ 0x48
 800c34a:	2201      	movs	r2, #1
 800c34c:	f000 fd76 	bl	800ce3c <rmw_uxrce_init_session_memory>
 800c350:	4620      	mov	r0, r4
 800c352:	4970      	ldr	r1, [pc, #448]	@ (800c514 <rmw_init+0x210>)
 800c354:	2204      	movs	r2, #4
 800c356:	f000 fdb1 	bl	800cebc <rmw_uxrce_init_static_input_buffer_memory>
 800c35a:	f04f 0800 	mov.w	r8, #0
 800c35e:	486c      	ldr	r0, [pc, #432]	@ (800c510 <rmw_init+0x20c>)
 800c360:	f884 800d 	strb.w	r8, [r4, #13]
 800c364:	f009 f8a4 	bl	80154b0 <get_memory>
 800c368:	2800      	cmp	r0, #0
 800c36a:	f000 80a9 	beq.w	800c4c0 <rmw_init+0x1bc>
 800c36e:	6884      	ldr	r4, [r0, #8]
 800c370:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800c372:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c374:	f890 c010 	ldrb.w	ip, [r0, #16]
 800c378:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800c37c:	9101      	str	r1, [sp, #4]
 800c37e:	6a00      	ldr	r0, [r0, #32]
 800c380:	9000      	str	r0, [sp, #0]
 800c382:	f104 0910 	add.w	r9, r4, #16
 800c386:	4661      	mov	r1, ip
 800c388:	4648      	mov	r0, r9
 800c38a:	f002 faf9 	bl	800e980 <uxr_set_custom_transport_callbacks>
 800c38e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800c392:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c396:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800c39a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800c39e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800c3a2:	495d      	ldr	r1, [pc, #372]	@ (800c518 <rmw_init+0x214>)
 800c3a4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800c3a8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800c3ac:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800c3b0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800c3b4:	4859      	ldr	r0, [pc, #356]	@ (800c51c <rmw_init+0x218>)
 800c3b6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800c3be:	f000 fd1d 	bl	800cdfc <rmw_uxrce_init_node_memory>
 800c3c2:	4957      	ldr	r1, [pc, #348]	@ (800c520 <rmw_init+0x21c>)
 800c3c4:	4857      	ldr	r0, [pc, #348]	@ (800c524 <rmw_init+0x220>)
 800c3c6:	2205      	movs	r2, #5
 800c3c8:	f000 fcf8 	bl	800cdbc <rmw_uxrce_init_subscription_memory>
 800c3cc:	4956      	ldr	r1, [pc, #344]	@ (800c528 <rmw_init+0x224>)
 800c3ce:	4857      	ldr	r0, [pc, #348]	@ (800c52c <rmw_init+0x228>)
 800c3d0:	220a      	movs	r2, #10
 800c3d2:	f000 fcd3 	bl	800cd7c <rmw_uxrce_init_publisher_memory>
 800c3d6:	4956      	ldr	r1, [pc, #344]	@ (800c530 <rmw_init+0x22c>)
 800c3d8:	4856      	ldr	r0, [pc, #344]	@ (800c534 <rmw_init+0x230>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f000 fc8e 	bl	800ccfc <rmw_uxrce_init_service_memory>
 800c3e0:	4955      	ldr	r1, [pc, #340]	@ (800c538 <rmw_init+0x234>)
 800c3e2:	4856      	ldr	r0, [pc, #344]	@ (800c53c <rmw_init+0x238>)
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f000 fca9 	bl	800cd3c <rmw_uxrce_init_client_memory>
 800c3ea:	4955      	ldr	r1, [pc, #340]	@ (800c540 <rmw_init+0x23c>)
 800c3ec:	4855      	ldr	r0, [pc, #340]	@ (800c544 <rmw_init+0x240>)
 800c3ee:	220f      	movs	r2, #15
 800c3f0:	f000 fd44 	bl	800ce7c <rmw_uxrce_init_topic_memory>
 800c3f4:	4954      	ldr	r1, [pc, #336]	@ (800c548 <rmw_init+0x244>)
 800c3f6:	4855      	ldr	r0, [pc, #340]	@ (800c54c <rmw_init+0x248>)
 800c3f8:	2203      	movs	r2, #3
 800c3fa:	f000 fd7f 	bl	800cefc <rmw_uxrce_init_init_options_impl_memory>
 800c3fe:	4954      	ldr	r1, [pc, #336]	@ (800c550 <rmw_init+0x24c>)
 800c400:	4854      	ldr	r0, [pc, #336]	@ (800c554 <rmw_init+0x250>)
 800c402:	2204      	movs	r2, #4
 800c404:	f000 fd9a 	bl	800cf3c <rmw_uxrce_init_wait_set_memory>
 800c408:	4953      	ldr	r1, [pc, #332]	@ (800c558 <rmw_init+0x254>)
 800c40a:	4854      	ldr	r0, [pc, #336]	@ (800c55c <rmw_init+0x258>)
 800c40c:	2204      	movs	r2, #4
 800c40e:	f000 fdb5 	bl	800cf7c <rmw_uxrce_init_guard_condition_memory>
 800c412:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800c414:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800c416:	4642      	mov	r2, r8
 800c418:	f000 fc38 	bl	800cc8c <rmw_uxrce_transport_init>
 800c41c:	4607      	mov	r7, r0
 800c41e:	2800      	cmp	r0, #0
 800c420:	d158      	bne.n	800c4d4 <rmw_init+0x1d0>
 800c422:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c424:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800c428:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c42a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800c42e:	4628      	mov	r0, r5
 800c430:	f002 fca2 	bl	800ed78 <uxr_init_session>
 800c434:	494a      	ldr	r1, [pc, #296]	@ (800c560 <rmw_init+0x25c>)
 800c436:	4622      	mov	r2, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	f002 fcc1 	bl	800edc0 <uxr_set_topic_callback>
 800c43e:	4949      	ldr	r1, [pc, #292]	@ (800c564 <rmw_init+0x260>)
 800c440:	463a      	mov	r2, r7
 800c442:	4628      	mov	r0, r5
 800c444:	f002 fcb8 	bl	800edb8 <uxr_set_status_callback>
 800c448:	4947      	ldr	r1, [pc, #284]	@ (800c568 <rmw_init+0x264>)
 800c44a:	463a      	mov	r2, r7
 800c44c:	4628      	mov	r0, r5
 800c44e:	f002 fcbb 	bl	800edc8 <uxr_set_request_callback>
 800c452:	4946      	ldr	r1, [pc, #280]	@ (800c56c <rmw_init+0x268>)
 800c454:	463a      	mov	r2, r7
 800c456:	4628      	mov	r0, r5
 800c458:	f002 fcba 	bl	800edd0 <uxr_set_reply_callback>
 800c45c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c460:	2304      	movs	r3, #4
 800c462:	0092      	lsls	r2, r2, #2
 800c464:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800c468:	4628      	mov	r0, r5
 800c46a:	f002 fcef 	bl	800ee4c <uxr_create_input_reliable_stream>
 800c46e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c472:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800c476:	0092      	lsls	r2, r2, #2
 800c478:	2304      	movs	r3, #4
 800c47a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800c47e:	4628      	mov	r0, r5
 800c480:	f002 fcbc 	bl	800edfc <uxr_create_output_reliable_stream>
 800c484:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800c488:	4628      	mov	r0, r5
 800c48a:	f002 fcd9 	bl	800ee40 <uxr_create_input_best_effort_stream>
 800c48e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800c492:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800c496:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c49a:	3114      	adds	r1, #20
 800c49c:	4628      	mov	r0, r5
 800c49e:	f002 fc9b 	bl	800edd8 <uxr_create_output_best_effort_stream>
 800c4a2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	f003 fa7a 	bl	800f9a0 <uxr_create_session>
 800c4ac:	b1f8      	cbz	r0, 800c4ee <rmw_init+0x1ea>
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	b003      	add	sp, #12
 800c4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4b6:	270b      	movs	r7, #11
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	b003      	add	sp, #12
 800c4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4c0:	2701      	movs	r7, #1
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	b003      	add	sp, #12
 800c4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ca:	270c      	movs	r7, #12
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	b003      	add	sp, #12
 800c4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4d4:	4648      	mov	r0, r9
 800c4d6:	f002 fa95 	bl	800ea04 <uxr_close_custom_transport>
 800c4da:	480d      	ldr	r0, [pc, #52]	@ (800c510 <rmw_init+0x20c>)
 800c4dc:	4621      	mov	r1, r4
 800c4de:	f008 fff7 	bl	80154d0 <put_memory>
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800c4e8:	b003      	add	sp, #12
 800c4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ee:	4648      	mov	r0, r9
 800c4f0:	f002 fa88 	bl	800ea04 <uxr_close_custom_transport>
 800c4f4:	4806      	ldr	r0, [pc, #24]	@ (800c510 <rmw_init+0x20c>)
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	f008 ffea 	bl	80154d0 <put_memory>
 800c4fc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800c4fe:	2701      	movs	r7, #1
 800c500:	e7d5      	b.n	800c4ae <rmw_init+0x1aa>
 800c502:	bf00      	nop
 800c504:	08019648 	.word	0x08019648
 800c508:	2000caac 	.word	0x2000caac
 800c50c:	20008d58 	.word	0x20008d58
 800c510:	2000ca9c 	.word	0x2000ca9c
 800c514:	2000a300 	.word	0x2000a300
 800c518:	2000837c 	.word	0x2000837c
 800c51c:	2000ca6c 	.word	0x2000ca6c
 800c520:	2000c400 	.word	0x2000c400
 800c524:	2000cabc 	.word	0x2000cabc
 800c528:	20008420 	.word	0x20008420
 800c52c:	2000ca7c 	.word	0x2000ca7c
 800c530:	20008c90 	.word	0x20008c90
 800c534:	2000ca8c 	.word	0x2000ca8c
 800c538:	200081b0 	.word	0x200081b0
 800c53c:	2000819c 	.word	0x2000819c
 800c540:	2000c838 	.word	0x2000c838
 800c544:	2000cacc 	.word	0x2000cacc
 800c548:	200082f8 	.word	0x200082f8
 800c54c:	2000ca5c 	.word	0x2000ca5c
 800c550:	2000c9dc 	.word	0x2000c9dc
 800c554:	2000cadc 	.word	0x2000cadc
 800c558:	20008278 	.word	0x20008278
 800c55c:	2000ca4c 	.word	0x2000ca4c
 800c560:	080152e9 	.word	0x080152e9
 800c564:	080152e1 	.word	0x080152e1
 800c568:	08015381 	.word	0x08015381
 800c56c:	0801541d 	.word	0x0801541d

0800c570 <rmw_context_fini>:
 800c570:	4b17      	ldr	r3, [pc, #92]	@ (800c5d0 <rmw_context_fini+0x60>)
 800c572:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	681c      	ldr	r4, [r3, #0]
 800c578:	4605      	mov	r5, r0
 800c57a:	b334      	cbz	r4, 800c5ca <rmw_context_fini+0x5a>
 800c57c:	2600      	movs	r6, #0
 800c57e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800c582:	6902      	ldr	r2, [r0, #16]
 800c584:	428a      	cmp	r2, r1
 800c586:	d018      	beq.n	800c5ba <rmw_context_fini+0x4a>
 800c588:	2c00      	cmp	r4, #0
 800c58a:	d1f8      	bne.n	800c57e <rmw_context_fini+0xe>
 800c58c:	b189      	cbz	r1, 800c5b2 <rmw_context_fini+0x42>
 800c58e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800c592:	789b      	ldrb	r3, [r3, #2]
 800c594:	2b01      	cmp	r3, #1
 800c596:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800c59a:	bf14      	ite	ne
 800c59c:	210a      	movne	r1, #10
 800c59e:	2100      	moveq	r1, #0
 800c5a0:	f003 f9d6 	bl	800f950 <uxr_delete_session_retries>
 800c5a4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c5a6:	f000 fd09 	bl	800cfbc <rmw_uxrce_fini_session_memory>
 800c5aa:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c5ac:	3010      	adds	r0, #16
 800c5ae:	f002 fa29 	bl	800ea04 <uxr_close_custom_transport>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ba:	3018      	adds	r0, #24
 800c5bc:	f000 f89c 	bl	800c6f8 <rmw_destroy_node>
 800c5c0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	2c00      	cmp	r4, #0
 800c5c6:	d1da      	bne.n	800c57e <rmw_context_fini+0xe>
 800c5c8:	e7e0      	b.n	800c58c <rmw_context_fini+0x1c>
 800c5ca:	4626      	mov	r6, r4
 800c5cc:	e7de      	b.n	800c58c <rmw_context_fini+0x1c>
 800c5ce:	bf00      	nop
 800c5d0:	2000ca6c 	.word	0x2000ca6c

0800c5d4 <create_node>:
 800c5d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	b083      	sub	sp, #12
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d05f      	beq.n	800c69e <create_node+0xca>
 800c5de:	4606      	mov	r6, r0
 800c5e0:	4835      	ldr	r0, [pc, #212]	@ (800c6b8 <create_node+0xe4>)
 800c5e2:	460f      	mov	r7, r1
 800c5e4:	4690      	mov	r8, r2
 800c5e6:	461d      	mov	r5, r3
 800c5e8:	f008 ff62 	bl	80154b0 <get_memory>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d056      	beq.n	800c69e <create_node+0xca>
 800c5f0:	6884      	ldr	r4, [r0, #8]
 800c5f2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800c5f4:	6123      	str	r3, [r4, #16]
 800c5f6:	f008 ffc3 	bl	8015580 <rmw_get_implementation_identifier>
 800c5fa:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800c5fe:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800c602:	f8c4 9020 	str.w	r9, [r4, #32]
 800c606:	4630      	mov	r0, r6
 800c608:	f7f3 fe14 	bl	8000234 <strlen>
 800c60c:	1c42      	adds	r2, r0, #1
 800c60e:	2a3c      	cmp	r2, #60	@ 0x3c
 800c610:	f104 0518 	add.w	r5, r4, #24
 800c614:	d840      	bhi.n	800c698 <create_node+0xc4>
 800c616:	4648      	mov	r0, r9
 800c618:	4631      	mov	r1, r6
 800c61a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800c61e:	f00b fb04 	bl	8017c2a <memcpy>
 800c622:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800c626:	4638      	mov	r0, r7
 800c628:	f7f3 fe04 	bl	8000234 <strlen>
 800c62c:	1c42      	adds	r2, r0, #1
 800c62e:	2a3c      	cmp	r2, #60	@ 0x3c
 800c630:	d832      	bhi.n	800c698 <create_node+0xc4>
 800c632:	4639      	mov	r1, r7
 800c634:	4648      	mov	r0, r9
 800c636:	f00b faf8 	bl	8017c2a <memcpy>
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c640:	2101      	movs	r1, #1
 800c642:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800c646:	1842      	adds	r2, r0, r1
 800c648:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800c64c:	f002 f9de 	bl	800ea0c <uxr_object_id>
 800c650:	6160      	str	r0, [r4, #20]
 800c652:	783b      	ldrb	r3, [r7, #0]
 800c654:	2b2f      	cmp	r3, #47	@ 0x2f
 800c656:	d127      	bne.n	800c6a8 <create_node+0xd4>
 800c658:	787b      	ldrb	r3, [r7, #1]
 800c65a:	bb2b      	cbnz	r3, 800c6a8 <create_node+0xd4>
 800c65c:	4a17      	ldr	r2, [pc, #92]	@ (800c6bc <create_node+0xe8>)
 800c65e:	4818      	ldr	r0, [pc, #96]	@ (800c6c0 <create_node+0xec>)
 800c660:	4633      	mov	r3, r6
 800c662:	213c      	movs	r1, #60	@ 0x3c
 800c664:	f00b f93e 	bl	80178e4 <sniprintf>
 800c668:	6920      	ldr	r0, [r4, #16]
 800c66a:	4915      	ldr	r1, [pc, #84]	@ (800c6c0 <create_node+0xec>)
 800c66c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800c670:	9100      	str	r1, [sp, #0]
 800c672:	2106      	movs	r1, #6
 800c674:	9101      	str	r1, [sp, #4]
 800c676:	6811      	ldr	r1, [r2, #0]
 800c678:	6962      	ldr	r2, [r4, #20]
 800c67a:	fa1f f388 	uxth.w	r3, r8
 800c67e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c682:	f001 fff3 	bl	800e66c <uxr_buffer_create_participant_bin>
 800c686:	4602      	mov	r2, r0
 800c688:	6920      	ldr	r0, [r4, #16]
 800c68a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c68e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c692:	f000 fe0b 	bl	800d2ac <run_xrce_session>
 800c696:	b918      	cbnz	r0, 800c6a0 <create_node+0xcc>
 800c698:	4628      	mov	r0, r5
 800c69a:	f000 fc95 	bl	800cfc8 <rmw_uxrce_fini_node_memory>
 800c69e:	2500      	movs	r5, #0
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	b003      	add	sp, #12
 800c6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6a8:	4a06      	ldr	r2, [pc, #24]	@ (800c6c4 <create_node+0xf0>)
 800c6aa:	9600      	str	r6, [sp, #0]
 800c6ac:	463b      	mov	r3, r7
 800c6ae:	213c      	movs	r1, #60	@ 0x3c
 800c6b0:	4803      	ldr	r0, [pc, #12]	@ (800c6c0 <create_node+0xec>)
 800c6b2:	f00b f917 	bl	80178e4 <sniprintf>
 800c6b6:	e7d7      	b.n	800c668 <create_node+0x94>
 800c6b8:	2000ca6c 	.word	0x2000ca6c
 800c6bc:	08018c90 	.word	0x08018c90
 800c6c0:	20008160 	.word	0x20008160
 800c6c4:	08018c54 	.word	0x08018c54

0800c6c8 <rmw_create_node>:
 800c6c8:	b199      	cbz	r1, 800c6f2 <rmw_create_node+0x2a>
 800c6ca:	780b      	ldrb	r3, [r1, #0]
 800c6cc:	468c      	mov	ip, r1
 800c6ce:	b183      	cbz	r3, 800c6f2 <rmw_create_node+0x2a>
 800c6d0:	b410      	push	{r4}
 800c6d2:	4614      	mov	r4, r2
 800c6d4:	b14a      	cbz	r2, 800c6ea <rmw_create_node+0x22>
 800c6d6:	7813      	ldrb	r3, [r2, #0]
 800c6d8:	b13b      	cbz	r3, 800c6ea <rmw_create_node+0x22>
 800c6da:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4660      	mov	r0, ip
 800c6e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6e6:	f7ff bf75 	b.w	800c5d4 <create_node>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop

0800c6f8 <rmw_destroy_node>:
 800c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fa:	b328      	cbz	r0, 800c748 <rmw_destroy_node+0x50>
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	6800      	ldr	r0, [r0, #0]
 800c700:	b120      	cbz	r0, 800c70c <rmw_destroy_node+0x14>
 800c702:	4b36      	ldr	r3, [pc, #216]	@ (800c7dc <rmw_destroy_node+0xe4>)
 800c704:	6819      	ldr	r1, [r3, #0]
 800c706:	f7f3 fd8b 	bl	8000220 <strcmp>
 800c70a:	b9e8      	cbnz	r0, 800c748 <rmw_destroy_node+0x50>
 800c70c:	687d      	ldr	r5, [r7, #4]
 800c70e:	b1dd      	cbz	r5, 800c748 <rmw_destroy_node+0x50>
 800c710:	4b33      	ldr	r3, [pc, #204]	@ (800c7e0 <rmw_destroy_node+0xe8>)
 800c712:	681c      	ldr	r4, [r3, #0]
 800c714:	2c00      	cmp	r4, #0
 800c716:	d05f      	beq.n	800c7d8 <rmw_destroy_node+0xe0>
 800c718:	2600      	movs	r6, #0
 800c71a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c71e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800c722:	429d      	cmp	r5, r3
 800c724:	d013      	beq.n	800c74e <rmw_destroy_node+0x56>
 800c726:	2c00      	cmp	r4, #0
 800c728:	d1f7      	bne.n	800c71a <rmw_destroy_node+0x22>
 800c72a:	4b2e      	ldr	r3, [pc, #184]	@ (800c7e4 <rmw_destroy_node+0xec>)
 800c72c:	681c      	ldr	r4, [r3, #0]
 800c72e:	b1c4      	cbz	r4, 800c762 <rmw_destroy_node+0x6a>
 800c730:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c734:	6a0b      	ldr	r3, [r1, #32]
 800c736:	429d      	cmp	r5, r3
 800c738:	d1f9      	bne.n	800c72e <rmw_destroy_node+0x36>
 800c73a:	317c      	adds	r1, #124	@ 0x7c
 800c73c:	4638      	mov	r0, r7
 800c73e:	f000 fa45 	bl	800cbcc <rmw_destroy_subscription>
 800c742:	2801      	cmp	r0, #1
 800c744:	4606      	mov	r6, r0
 800c746:	d1f2      	bne.n	800c72e <rmw_destroy_node+0x36>
 800c748:	2601      	movs	r6, #1
 800c74a:	4630      	mov	r0, r6
 800c74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c74e:	3184      	adds	r1, #132	@ 0x84
 800c750:	4638      	mov	r0, r7
 800c752:	f000 f9a5 	bl	800caa0 <rmw_destroy_publisher>
 800c756:	2801      	cmp	r0, #1
 800c758:	4606      	mov	r6, r0
 800c75a:	d0f5      	beq.n	800c748 <rmw_destroy_node+0x50>
 800c75c:	2c00      	cmp	r4, #0
 800c75e:	d1dc      	bne.n	800c71a <rmw_destroy_node+0x22>
 800c760:	e7e3      	b.n	800c72a <rmw_destroy_node+0x32>
 800c762:	4b21      	ldr	r3, [pc, #132]	@ (800c7e8 <rmw_destroy_node+0xf0>)
 800c764:	681c      	ldr	r4, [r3, #0]
 800c766:	b16c      	cbz	r4, 800c784 <rmw_destroy_node+0x8c>
 800c768:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c76c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c76e:	429d      	cmp	r5, r3
 800c770:	d1f9      	bne.n	800c766 <rmw_destroy_node+0x6e>
 800c772:	317c      	adds	r1, #124	@ 0x7c
 800c774:	4638      	mov	r0, r7
 800c776:	f000 f9e5 	bl	800cb44 <rmw_destroy_service>
 800c77a:	2801      	cmp	r0, #1
 800c77c:	4606      	mov	r6, r0
 800c77e:	d0e3      	beq.n	800c748 <rmw_destroy_node+0x50>
 800c780:	2c00      	cmp	r4, #0
 800c782:	d1f1      	bne.n	800c768 <rmw_destroy_node+0x70>
 800c784:	4b19      	ldr	r3, [pc, #100]	@ (800c7ec <rmw_destroy_node+0xf4>)
 800c786:	681c      	ldr	r4, [r3, #0]
 800c788:	b16c      	cbz	r4, 800c7a6 <rmw_destroy_node+0xae>
 800c78a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c78e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c790:	429d      	cmp	r5, r3
 800c792:	d1f9      	bne.n	800c788 <rmw_destroy_node+0x90>
 800c794:	317c      	adds	r1, #124	@ 0x7c
 800c796:	4638      	mov	r0, r7
 800c798:	f008 feae 	bl	80154f8 <rmw_destroy_client>
 800c79c:	2801      	cmp	r0, #1
 800c79e:	4606      	mov	r6, r0
 800c7a0:	d0d2      	beq.n	800c748 <rmw_destroy_node+0x50>
 800c7a2:	2c00      	cmp	r4, #0
 800c7a4:	d1f1      	bne.n	800c78a <rmw_destroy_node+0x92>
 800c7a6:	6928      	ldr	r0, [r5, #16]
 800c7a8:	696a      	ldr	r2, [r5, #20]
 800c7aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c7ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c7b2:	6819      	ldr	r1, [r3, #0]
 800c7b4:	f001 ff0e 	bl	800e5d4 <uxr_buffer_delete_entity>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	6928      	ldr	r0, [r5, #16]
 800c7bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c7c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c7c4:	f000 fd72 	bl	800d2ac <run_xrce_session>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	bf08      	it	eq
 800c7cc:	2602      	moveq	r6, #2
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	f000 fbfa 	bl	800cfc8 <rmw_uxrce_fini_node_memory>
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d8:	4626      	mov	r6, r4
 800c7da:	e7a6      	b.n	800c72a <rmw_destroy_node+0x32>
 800c7dc:	08019648 	.word	0x08019648
 800c7e0:	2000ca7c 	.word	0x2000ca7c
 800c7e4:	2000cabc 	.word	0x2000cabc
 800c7e8:	2000ca8c 	.word	0x2000ca8c
 800c7ec:	2000819c 	.word	0x2000819c

0800c7f0 <rmw_node_get_graph_guard_condition>:
 800c7f0:	6843      	ldr	r3, [r0, #4]
 800c7f2:	6918      	ldr	r0, [r3, #16]
 800c7f4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop

0800c7fc <flush_session>:
 800c7fc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c7fe:	f002 bf0b 	b.w	800f618 <uxr_run_session_until_confirm_delivery>
 800c802:	bf00      	nop

0800c804 <rmw_publish>:
 800c804:	2800      	cmp	r0, #0
 800c806:	d053      	beq.n	800c8b0 <rmw_publish+0xac>
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	460d      	mov	r5, r1
 800c80c:	b08e      	sub	sp, #56	@ 0x38
 800c80e:	2900      	cmp	r1, #0
 800c810:	d04b      	beq.n	800c8aa <rmw_publish+0xa6>
 800c812:	4604      	mov	r4, r0
 800c814:	6800      	ldr	r0, [r0, #0]
 800c816:	f000 fdc9 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d045      	beq.n	800c8aa <rmw_publish+0xa6>
 800c81e:	6866      	ldr	r6, [r4, #4]
 800c820:	2e00      	cmp	r6, #0
 800c822:	d042      	beq.n	800c8aa <rmw_publish+0xa6>
 800c824:	69b4      	ldr	r4, [r6, #24]
 800c826:	4628      	mov	r0, r5
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	4798      	blx	r3
 800c82c:	69f3      	ldr	r3, [r6, #28]
 800c82e:	9005      	str	r0, [sp, #20]
 800c830:	b113      	cbz	r3, 800c838 <rmw_publish+0x34>
 800c832:	a805      	add	r0, sp, #20
 800c834:	4798      	blx	r3
 800c836:	9805      	ldr	r0, [sp, #20]
 800c838:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	9000      	str	r0, [sp, #0]
 800c840:	6972      	ldr	r2, [r6, #20]
 800c842:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c844:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c848:	ab06      	add	r3, sp, #24
 800c84a:	f004 f9b7 	bl	8010bbc <uxr_prepare_output_stream>
 800c84e:	b1d8      	cbz	r0, 800c888 <rmw_publish+0x84>
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	a906      	add	r1, sp, #24
 800c854:	4628      	mov	r0, r5
 800c856:	4798      	blx	r3
 800c858:	6a33      	ldr	r3, [r6, #32]
 800c85a:	4604      	mov	r4, r0
 800c85c:	b10b      	cbz	r3, 800c862 <rmw_publish+0x5e>
 800c85e:	a806      	add	r0, sp, #24
 800c860:	4798      	blx	r3
 800c862:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c866:	2b01      	cmp	r3, #1
 800c868:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c86c:	d022      	beq.n	800c8b4 <rmw_publish+0xb0>
 800c86e:	6918      	ldr	r0, [r3, #16]
 800c870:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c872:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c876:	f002 fecf 	bl	800f618 <uxr_run_session_until_confirm_delivery>
 800c87a:	4020      	ands	r0, r4
 800c87c:	b2c4      	uxtb	r4, r0
 800c87e:	f084 0001 	eor.w	r0, r4, #1
 800c882:	b2c0      	uxtb	r0, r0
 800c884:	b00e      	add	sp, #56	@ 0x38
 800c886:	bd70      	pop	{r4, r5, r6, pc}
 800c888:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c88c:	6918      	ldr	r0, [r3, #16]
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c0 <rmw_publish+0xbc>)
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	9602      	str	r6, [sp, #8]
 800c898:	6972      	ldr	r2, [r6, #20]
 800c89a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c89c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c8a0:	ab06      	add	r3, sp, #24
 800c8a2:	f004 f9bb 	bl	8010c1c <uxr_prepare_output_stream_fragmented>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d1d2      	bne.n	800c850 <rmw_publish+0x4c>
 800c8aa:	2001      	movs	r0, #1
 800c8ac:	b00e      	add	sp, #56	@ 0x38
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	2001      	movs	r0, #1
 800c8b2:	4770      	bx	lr
 800c8b4:	6918      	ldr	r0, [r3, #16]
 800c8b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c8ba:	f002 faed 	bl	800ee98 <uxr_flash_output_streams>
 800c8be:	e7de      	b.n	800c87e <rmw_publish+0x7a>
 800c8c0:	0800c7fd 	.word	0x0800c7fd

0800c8c4 <rmw_create_publisher>:
 800c8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c8:	b087      	sub	sp, #28
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	f000 80cc 	beq.w	800ca68 <rmw_create_publisher+0x1a4>
 800c8d0:	460e      	mov	r6, r1
 800c8d2:	2900      	cmp	r1, #0
 800c8d4:	f000 80c8 	beq.w	800ca68 <rmw_create_publisher+0x1a4>
 800c8d8:	4604      	mov	r4, r0
 800c8da:	6800      	ldr	r0, [r0, #0]
 800c8dc:	4615      	mov	r5, r2
 800c8de:	4698      	mov	r8, r3
 800c8e0:	f000 fd64 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	f000 80bf 	beq.w	800ca68 <rmw_create_publisher+0x1a4>
 800c8ea:	2d00      	cmp	r5, #0
 800c8ec:	f000 80bc 	beq.w	800ca68 <rmw_create_publisher+0x1a4>
 800c8f0:	782b      	ldrb	r3, [r5, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f000 80b8 	beq.w	800ca68 <rmw_create_publisher+0x1a4>
 800c8f8:	f1b8 0f00 	cmp.w	r8, #0
 800c8fc:	f000 80b4 	beq.w	800ca68 <rmw_create_publisher+0x1a4>
 800c900:	485c      	ldr	r0, [pc, #368]	@ (800ca74 <rmw_create_publisher+0x1b0>)
 800c902:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c906:	f008 fdd3 	bl	80154b0 <get_memory>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	f000 80ac 	beq.w	800ca68 <rmw_create_publisher+0x1a4>
 800c910:	6884      	ldr	r4, [r0, #8]
 800c912:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c916:	f008 fe33 	bl	8015580 <rmw_get_implementation_identifier>
 800c91a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c91e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c922:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c926:	4628      	mov	r0, r5
 800c928:	f7f3 fc84 	bl	8000234 <strlen>
 800c92c:	3001      	adds	r0, #1
 800c92e:	283c      	cmp	r0, #60	@ 0x3c
 800c930:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800c934:	f200 8091 	bhi.w	800ca5a <rmw_create_publisher+0x196>
 800c938:	4a4f      	ldr	r2, [pc, #316]	@ (800ca78 <rmw_create_publisher+0x1b4>)
 800c93a:	462b      	mov	r3, r5
 800c93c:	213c      	movs	r1, #60	@ 0x3c
 800c93e:	4650      	mov	r0, sl
 800c940:	f00a ffd0 	bl	80178e4 <sniprintf>
 800c944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c948:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c94a:	4641      	mov	r1, r8
 800c94c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c950:	2250      	movs	r2, #80	@ 0x50
 800c952:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c956:	f00b f968 	bl	8017c2a <memcpy>
 800c95a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c95e:	4947      	ldr	r1, [pc, #284]	@ (800ca7c <rmw_create_publisher+0x1b8>)
 800c960:	2b02      	cmp	r3, #2
 800c962:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c966:	bf0c      	ite	eq
 800c968:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c96c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c970:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c972:	2300      	movs	r3, #0
 800c974:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c978:	4630      	mov	r0, r6
 800c97a:	f000 fd25 	bl	800d3c8 <get_message_typesupport_handle>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d06b      	beq.n	800ca5a <rmw_create_publisher+0x196>
 800c982:	6842      	ldr	r2, [r0, #4]
 800c984:	61a2      	str	r2, [r4, #24]
 800c986:	2a00      	cmp	r2, #0
 800c988:	d067      	beq.n	800ca5a <rmw_create_publisher+0x196>
 800c98a:	4629      	mov	r1, r5
 800c98c:	4643      	mov	r3, r8
 800c98e:	4648      	mov	r0, r9
 800c990:	f008 fdfc 	bl	801558c <create_topic>
 800c994:	6260      	str	r0, [r4, #36]	@ 0x24
 800c996:	2800      	cmp	r0, #0
 800c998:	d063      	beq.n	800ca62 <rmw_create_publisher+0x19e>
 800c99a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c99e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9a2:	2103      	movs	r1, #3
 800c9a4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c9a8:	1c42      	adds	r2, r0, #1
 800c9aa:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c9ae:	f002 f82d 	bl	800ea0c <uxr_object_id>
 800c9b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c9b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9ba:	6120      	str	r0, [r4, #16]
 800c9bc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c9c0:	6910      	ldr	r0, [r2, #16]
 800c9c2:	2506      	movs	r5, #6
 800c9c4:	9500      	str	r5, [sp, #0]
 800c9c6:	6819      	ldr	r1, [r3, #0]
 800c9c8:	6922      	ldr	r2, [r4, #16]
 800c9ca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c9ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c9d2:	f001 feb3 	bl	800e73c <uxr_buffer_create_publisher_bin>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c9dc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c9e0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c9e4:	f000 fc62 	bl	800d2ac <run_xrce_session>
 800c9e8:	b3b8      	cbz	r0, 800ca5a <rmw_create_publisher+0x196>
 800c9ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9f2:	2105      	movs	r1, #5
 800c9f4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c9f8:	1c42      	adds	r2, r0, #1
 800c9fa:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c9fe:	f002 f805 	bl	800ea0c <uxr_object_id>
 800ca02:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ca06:	6160      	str	r0, [r4, #20]
 800ca08:	691e      	ldr	r6, [r3, #16]
 800ca0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca0e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ca12:	f10d 0a10 	add.w	sl, sp, #16
 800ca16:	4641      	mov	r1, r8
 800ca18:	4650      	mov	r0, sl
 800ca1a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ca1e:	f000 fc61 	bl	800d2e4 <convert_qos_profile>
 800ca22:	9503      	str	r5, [sp, #12]
 800ca24:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ca28:	9001      	str	r0, [sp, #4]
 800ca2a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ca2e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800ca38:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ca3c:	f8d8 1000 	ldr.w	r1, [r8]
 800ca40:	4630      	mov	r0, r6
 800ca42:	f001 feab 	bl	800e79c <uxr_buffer_create_datawriter_bin>
 800ca46:	4602      	mov	r2, r0
 800ca48:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ca4c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ca50:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ca54:	f000 fc2a 	bl	800d2ac <run_xrce_session>
 800ca58:	b938      	cbnz	r0, 800ca6a <rmw_create_publisher+0x1a6>
 800ca5a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ca5c:	b108      	cbz	r0, 800ca62 <rmw_create_publisher+0x19e>
 800ca5e:	f000 fb23 	bl	800d0a8 <rmw_uxrce_fini_topic_memory>
 800ca62:	4638      	mov	r0, r7
 800ca64:	f000 fac8 	bl	800cff8 <rmw_uxrce_fini_publisher_memory>
 800ca68:	2700      	movs	r7, #0
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	b007      	add	sp, #28
 800ca6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca72:	bf00      	nop
 800ca74:	2000ca7c 	.word	0x2000ca7c
 800ca78:	08018c90 	.word	0x08018c90
 800ca7c:	08018c5c 	.word	0x08018c5c

0800ca80 <rmw_publisher_get_actual_qos>:
 800ca80:	b150      	cbz	r0, 800ca98 <rmw_publisher_get_actual_qos+0x18>
 800ca82:	b508      	push	{r3, lr}
 800ca84:	460b      	mov	r3, r1
 800ca86:	b149      	cbz	r1, 800ca9c <rmw_publisher_get_actual_qos+0x1c>
 800ca88:	6841      	ldr	r1, [r0, #4]
 800ca8a:	2250      	movs	r2, #80	@ 0x50
 800ca8c:	3128      	adds	r1, #40	@ 0x28
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f00b f8cb 	bl	8017c2a <memcpy>
 800ca94:	2000      	movs	r0, #0
 800ca96:	bd08      	pop	{r3, pc}
 800ca98:	200b      	movs	r0, #11
 800ca9a:	4770      	bx	lr
 800ca9c:	200b      	movs	r0, #11
 800ca9e:	bd08      	pop	{r3, pc}

0800caa0 <rmw_destroy_publisher>:
 800caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa2:	b128      	cbz	r0, 800cab0 <rmw_destroy_publisher+0x10>
 800caa4:	4604      	mov	r4, r0
 800caa6:	6800      	ldr	r0, [r0, #0]
 800caa8:	460d      	mov	r5, r1
 800caaa:	f000 fc7f 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800caae:	b910      	cbnz	r0, 800cab6 <rmw_destroy_publisher+0x16>
 800cab0:	2401      	movs	r4, #1
 800cab2:	4620      	mov	r0, r4
 800cab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab6:	6863      	ldr	r3, [r4, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0f9      	beq.n	800cab0 <rmw_destroy_publisher+0x10>
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	d0f7      	beq.n	800cab0 <rmw_destroy_publisher+0x10>
 800cac0:	6828      	ldr	r0, [r5, #0]
 800cac2:	f000 fc73 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d0f2      	beq.n	800cab0 <rmw_destroy_publisher+0x10>
 800caca:	686c      	ldr	r4, [r5, #4]
 800cacc:	2c00      	cmp	r4, #0
 800cace:	d0ef      	beq.n	800cab0 <rmw_destroy_publisher+0x10>
 800cad0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cad2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800cad6:	f008 fda9 	bl	801562c <destroy_topic>
 800cada:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cade:	6962      	ldr	r2, [r4, #20]
 800cae0:	6918      	ldr	r0, [r3, #16]
 800cae2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cae6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800caea:	6819      	ldr	r1, [r3, #0]
 800caec:	f001 fd72 	bl	800e5d4 <uxr_buffer_delete_entity>
 800caf0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800caf4:	6922      	ldr	r2, [r4, #16]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cafc:	4604      	mov	r4, r0
 800cafe:	6809      	ldr	r1, [r1, #0]
 800cb00:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cb04:	f001 fd66 	bl	800e5d4 <uxr_buffer_delete_entity>
 800cb08:	693e      	ldr	r6, [r7, #16]
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cb10:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cb14:	4604      	mov	r4, r0
 800cb16:	4630      	mov	r0, r6
 800cb18:	f000 fbc8 	bl	800d2ac <run_xrce_session>
 800cb1c:	693e      	ldr	r6, [r7, #16]
 800cb1e:	4622      	mov	r2, r4
 800cb20:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cb24:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cb28:	4604      	mov	r4, r0
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f000 fbbe 	bl	800d2ac <run_xrce_session>
 800cb30:	b12c      	cbz	r4, 800cb3e <rmw_destroy_publisher+0x9e>
 800cb32:	b120      	cbz	r0, 800cb3e <rmw_destroy_publisher+0x9e>
 800cb34:	2400      	movs	r4, #0
 800cb36:	4628      	mov	r0, r5
 800cb38:	f000 fa5e 	bl	800cff8 <rmw_uxrce_fini_publisher_memory>
 800cb3c:	e7b9      	b.n	800cab2 <rmw_destroy_publisher+0x12>
 800cb3e:	2402      	movs	r4, #2
 800cb40:	e7f9      	b.n	800cb36 <rmw_destroy_publisher+0x96>
 800cb42:	bf00      	nop

0800cb44 <rmw_destroy_service>:
 800cb44:	b570      	push	{r4, r5, r6, lr}
 800cb46:	b128      	cbz	r0, 800cb54 <rmw_destroy_service+0x10>
 800cb48:	4604      	mov	r4, r0
 800cb4a:	6800      	ldr	r0, [r0, #0]
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	f000 fc2d 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800cb52:	b910      	cbnz	r0, 800cb5a <rmw_destroy_service+0x16>
 800cb54:	2401      	movs	r4, #1
 800cb56:	4620      	mov	r0, r4
 800cb58:	bd70      	pop	{r4, r5, r6, pc}
 800cb5a:	6863      	ldr	r3, [r4, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d0f9      	beq.n	800cb54 <rmw_destroy_service+0x10>
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	d0f7      	beq.n	800cb54 <rmw_destroy_service+0x10>
 800cb64:	6828      	ldr	r0, [r5, #0]
 800cb66:	f000 fc21 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d0f2      	beq.n	800cb54 <rmw_destroy_service+0x10>
 800cb6e:	686e      	ldr	r6, [r5, #4]
 800cb70:	2e00      	cmp	r6, #0
 800cb72:	d0ef      	beq.n	800cb54 <rmw_destroy_service+0x10>
 800cb74:	6864      	ldr	r4, [r4, #4]
 800cb76:	6932      	ldr	r2, [r6, #16]
 800cb78:	6920      	ldr	r0, [r4, #16]
 800cb7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cb7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb82:	6819      	ldr	r1, [r3, #0]
 800cb84:	f001 ff72 	bl	800ea6c <uxr_buffer_cancel_data>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6920      	ldr	r0, [r4, #16]
 800cb8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cb90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cb94:	f000 fb8a 	bl	800d2ac <run_xrce_session>
 800cb98:	6920      	ldr	r0, [r4, #16]
 800cb9a:	6932      	ldr	r2, [r6, #16]
 800cb9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cba0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cba4:	6819      	ldr	r1, [r3, #0]
 800cba6:	f001 fd15 	bl	800e5d4 <uxr_buffer_delete_entity>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	6920      	ldr	r0, [r4, #16]
 800cbae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cbb2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cbb6:	f000 fb79 	bl	800d2ac <run_xrce_session>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	bf14      	ite	ne
 800cbc0:	2400      	movne	r4, #0
 800cbc2:	2402      	moveq	r4, #2
 800cbc4:	f000 fa44 	bl	800d050 <rmw_uxrce_fini_service_memory>
 800cbc8:	e7c5      	b.n	800cb56 <rmw_destroy_service+0x12>
 800cbca:	bf00      	nop

0800cbcc <rmw_destroy_subscription>:
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	b128      	cbz	r0, 800cbdc <rmw_destroy_subscription+0x10>
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	6800      	ldr	r0, [r0, #0]
 800cbd4:	460d      	mov	r5, r1
 800cbd6:	f000 fbe9 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800cbda:	b910      	cbnz	r0, 800cbe2 <rmw_destroy_subscription+0x16>
 800cbdc:	2401      	movs	r4, #1
 800cbde:	4620      	mov	r0, r4
 800cbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe2:	6863      	ldr	r3, [r4, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0f9      	beq.n	800cbdc <rmw_destroy_subscription+0x10>
 800cbe8:	2d00      	cmp	r5, #0
 800cbea:	d0f7      	beq.n	800cbdc <rmw_destroy_subscription+0x10>
 800cbec:	6828      	ldr	r0, [r5, #0]
 800cbee:	f000 fbdd 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0f2      	beq.n	800cbdc <rmw_destroy_subscription+0x10>
 800cbf6:	686c      	ldr	r4, [r5, #4]
 800cbf8:	2c00      	cmp	r4, #0
 800cbfa:	d0ef      	beq.n	800cbdc <rmw_destroy_subscription+0x10>
 800cbfc:	6a26      	ldr	r6, [r4, #32]
 800cbfe:	6962      	ldr	r2, [r4, #20]
 800cc00:	6930      	ldr	r0, [r6, #16]
 800cc02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cc06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc0a:	6819      	ldr	r1, [r3, #0]
 800cc0c:	f001 ff2e 	bl	800ea6c <uxr_buffer_cancel_data>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6930      	ldr	r0, [r6, #16]
 800cc14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cc18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cc1c:	f000 fb46 	bl	800d2ac <run_xrce_session>
 800cc20:	69e0      	ldr	r0, [r4, #28]
 800cc22:	f008 fd03 	bl	801562c <destroy_topic>
 800cc26:	6a23      	ldr	r3, [r4, #32]
 800cc28:	6962      	ldr	r2, [r4, #20]
 800cc2a:	6918      	ldr	r0, [r3, #16]
 800cc2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cc30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc34:	6819      	ldr	r1, [r3, #0]
 800cc36:	f001 fccd 	bl	800e5d4 <uxr_buffer_delete_entity>
 800cc3a:	6a23      	ldr	r3, [r4, #32]
 800cc3c:	6922      	ldr	r2, [r4, #16]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cc44:	4604      	mov	r4, r0
 800cc46:	6809      	ldr	r1, [r1, #0]
 800cc48:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cc4c:	f001 fcc2 	bl	800e5d4 <uxr_buffer_delete_entity>
 800cc50:	6937      	ldr	r7, [r6, #16]
 800cc52:	4622      	mov	r2, r4
 800cc54:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800cc58:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	4638      	mov	r0, r7
 800cc60:	f000 fb24 	bl	800d2ac <run_xrce_session>
 800cc64:	6936      	ldr	r6, [r6, #16]
 800cc66:	4622      	mov	r2, r4
 800cc68:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cc6c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cc70:	4604      	mov	r4, r0
 800cc72:	4630      	mov	r0, r6
 800cc74:	f000 fb1a 	bl	800d2ac <run_xrce_session>
 800cc78:	b12c      	cbz	r4, 800cc86 <rmw_destroy_subscription+0xba>
 800cc7a:	b120      	cbz	r0, 800cc86 <rmw_destroy_subscription+0xba>
 800cc7c:	2400      	movs	r4, #0
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 f9d0 	bl	800d024 <rmw_uxrce_fini_subscription_memory>
 800cc84:	e7ab      	b.n	800cbde <rmw_destroy_subscription+0x12>
 800cc86:	2402      	movs	r4, #2
 800cc88:	e7f9      	b.n	800cc7e <rmw_destroy_subscription+0xb2>
 800cc8a:	bf00      	nop

0800cc8c <rmw_uxrce_transport_init>:
 800cc8c:	b508      	push	{r3, lr}
 800cc8e:	b108      	cbz	r0, 800cc94 <rmw_uxrce_transport_init+0x8>
 800cc90:	f100 0210 	add.w	r2, r0, #16
 800cc94:	b139      	cbz	r1, 800cca6 <rmw_uxrce_transport_init+0x1a>
 800cc96:	6949      	ldr	r1, [r1, #20]
 800cc98:	4610      	mov	r0, r2
 800cc9a:	f001 fe7f 	bl	800e99c <uxr_init_custom_transport>
 800cc9e:	f080 0001 	eor.w	r0, r0, #1
 800cca2:	b2c0      	uxtb	r0, r0
 800cca4:	bd08      	pop	{r3, pc}
 800cca6:	4b04      	ldr	r3, [pc, #16]	@ (800ccb8 <rmw_uxrce_transport_init+0x2c>)
 800cca8:	4610      	mov	r0, r2
 800ccaa:	6859      	ldr	r1, [r3, #4]
 800ccac:	f001 fe76 	bl	800e99c <uxr_init_custom_transport>
 800ccb0:	f080 0001 	eor.w	r0, r0, #1
 800ccb4:	b2c0      	uxtb	r0, r0
 800ccb6:	bd08      	pop	{r3, pc}
 800ccb8:	20008144 	.word	0x20008144

0800ccbc <rmw_uros_epoch_nanos>:
 800ccbc:	4b05      	ldr	r3, [pc, #20]	@ (800ccd4 <rmw_uros_epoch_nanos+0x18>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	b123      	cbz	r3, 800cccc <rmw_uros_epoch_nanos+0x10>
 800ccc2:	6898      	ldr	r0, [r3, #8]
 800ccc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ccc8:	f002 b8dc 	b.w	800ee84 <uxr_epoch_nanos>
 800cccc:	2000      	movs	r0, #0
 800ccce:	2100      	movs	r1, #0
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	2000ca9c 	.word	0x2000ca9c

0800ccd8 <rmw_uros_sync_session>:
 800ccd8:	b508      	push	{r3, lr}
 800ccda:	4b07      	ldr	r3, [pc, #28]	@ (800ccf8 <rmw_uros_sync_session+0x20>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	b14b      	cbz	r3, 800ccf4 <rmw_uros_sync_session+0x1c>
 800cce0:	4601      	mov	r1, r0
 800cce2:	6898      	ldr	r0, [r3, #8]
 800cce4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cce8:	f002 fd0e 	bl	800f708 <uxr_sync_session>
 800ccec:	f080 0001 	eor.w	r0, r0, #1
 800ccf0:	b2c0      	uxtb	r0, r0
 800ccf2:	bd08      	pop	{r3, pc}
 800ccf4:	2001      	movs	r0, #1
 800ccf6:	bd08      	pop	{r3, pc}
 800ccf8:	2000ca9c 	.word	0x2000ca9c

0800ccfc <rmw_uxrce_init_service_memory>:
 800ccfc:	b1e2      	cbz	r2, 800cd38 <rmw_uxrce_init_service_memory+0x3c>
 800ccfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd02:	7b05      	ldrb	r5, [r0, #12]
 800cd04:	4606      	mov	r6, r0
 800cd06:	b9ad      	cbnz	r5, 800cd34 <rmw_uxrce_init_service_memory+0x38>
 800cd08:	23c8      	movs	r3, #200	@ 0xc8
 800cd0a:	e9c0 5500 	strd	r5, r5, [r0]
 800cd0e:	6083      	str	r3, [r0, #8]
 800cd10:	f240 1301 	movw	r3, #257	@ 0x101
 800cd14:	4617      	mov	r7, r2
 800cd16:	8183      	strh	r3, [r0, #12]
 800cd18:	460c      	mov	r4, r1
 800cd1a:	46a8      	mov	r8, r5
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	4630      	mov	r0, r6
 800cd20:	3501      	adds	r5, #1
 800cd22:	f008 fbd5 	bl	80154d0 <put_memory>
 800cd26:	42af      	cmp	r7, r5
 800cd28:	60a4      	str	r4, [r4, #8]
 800cd2a:	f884 800c 	strb.w	r8, [r4, #12]
 800cd2e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cd32:	d1f3      	bne.n	800cd1c <rmw_uxrce_init_service_memory+0x20>
 800cd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop

0800cd3c <rmw_uxrce_init_client_memory>:
 800cd3c:	b1e2      	cbz	r2, 800cd78 <rmw_uxrce_init_client_memory+0x3c>
 800cd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd42:	7b05      	ldrb	r5, [r0, #12]
 800cd44:	4606      	mov	r6, r0
 800cd46:	b9ad      	cbnz	r5, 800cd74 <rmw_uxrce_init_client_memory+0x38>
 800cd48:	23c8      	movs	r3, #200	@ 0xc8
 800cd4a:	e9c0 5500 	strd	r5, r5, [r0]
 800cd4e:	6083      	str	r3, [r0, #8]
 800cd50:	f240 1301 	movw	r3, #257	@ 0x101
 800cd54:	4617      	mov	r7, r2
 800cd56:	8183      	strh	r3, [r0, #12]
 800cd58:	460c      	mov	r4, r1
 800cd5a:	46a8      	mov	r8, r5
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	4630      	mov	r0, r6
 800cd60:	3501      	adds	r5, #1
 800cd62:	f008 fbb5 	bl	80154d0 <put_memory>
 800cd66:	42af      	cmp	r7, r5
 800cd68:	60a4      	str	r4, [r4, #8]
 800cd6a:	f884 800c 	strb.w	r8, [r4, #12]
 800cd6e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cd72:	d1f3      	bne.n	800cd5c <rmw_uxrce_init_client_memory+0x20>
 800cd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop

0800cd7c <rmw_uxrce_init_publisher_memory>:
 800cd7c:	b1e2      	cbz	r2, 800cdb8 <rmw_uxrce_init_publisher_memory+0x3c>
 800cd7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd82:	7b05      	ldrb	r5, [r0, #12]
 800cd84:	4606      	mov	r6, r0
 800cd86:	b9ad      	cbnz	r5, 800cdb4 <rmw_uxrce_init_publisher_memory+0x38>
 800cd88:	23d8      	movs	r3, #216	@ 0xd8
 800cd8a:	e9c0 5500 	strd	r5, r5, [r0]
 800cd8e:	6083      	str	r3, [r0, #8]
 800cd90:	f240 1301 	movw	r3, #257	@ 0x101
 800cd94:	4617      	mov	r7, r2
 800cd96:	8183      	strh	r3, [r0, #12]
 800cd98:	460c      	mov	r4, r1
 800cd9a:	46a8      	mov	r8, r5
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	4630      	mov	r0, r6
 800cda0:	3501      	adds	r5, #1
 800cda2:	f008 fb95 	bl	80154d0 <put_memory>
 800cda6:	42af      	cmp	r7, r5
 800cda8:	60a4      	str	r4, [r4, #8]
 800cdaa:	f884 800c 	strb.w	r8, [r4, #12]
 800cdae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cdb2:	d1f3      	bne.n	800cd9c <rmw_uxrce_init_publisher_memory+0x20>
 800cdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop

0800cdbc <rmw_uxrce_init_subscription_memory>:
 800cdbc:	b1e2      	cbz	r2, 800cdf8 <rmw_uxrce_init_subscription_memory+0x3c>
 800cdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	7b05      	ldrb	r5, [r0, #12]
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	b9ad      	cbnz	r5, 800cdf4 <rmw_uxrce_init_subscription_memory+0x38>
 800cdc8:	23d8      	movs	r3, #216	@ 0xd8
 800cdca:	e9c0 5500 	strd	r5, r5, [r0]
 800cdce:	6083      	str	r3, [r0, #8]
 800cdd0:	f240 1301 	movw	r3, #257	@ 0x101
 800cdd4:	4617      	mov	r7, r2
 800cdd6:	8183      	strh	r3, [r0, #12]
 800cdd8:	460c      	mov	r4, r1
 800cdda:	46a8      	mov	r8, r5
 800cddc:	4621      	mov	r1, r4
 800cdde:	4630      	mov	r0, r6
 800cde0:	3501      	adds	r5, #1
 800cde2:	f008 fb75 	bl	80154d0 <put_memory>
 800cde6:	42af      	cmp	r7, r5
 800cde8:	60a4      	str	r4, [r4, #8]
 800cdea:	f884 800c 	strb.w	r8, [r4, #12]
 800cdee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cdf2:	d1f3      	bne.n	800cddc <rmw_uxrce_init_subscription_memory+0x20>
 800cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop

0800cdfc <rmw_uxrce_init_node_memory>:
 800cdfc:	b1e2      	cbz	r2, 800ce38 <rmw_uxrce_init_node_memory+0x3c>
 800cdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce02:	7b05      	ldrb	r5, [r0, #12]
 800ce04:	4606      	mov	r6, r0
 800ce06:	b9ad      	cbnz	r5, 800ce34 <rmw_uxrce_init_node_memory+0x38>
 800ce08:	23a4      	movs	r3, #164	@ 0xa4
 800ce0a:	e9c0 5500 	strd	r5, r5, [r0]
 800ce0e:	6083      	str	r3, [r0, #8]
 800ce10:	f240 1301 	movw	r3, #257	@ 0x101
 800ce14:	4617      	mov	r7, r2
 800ce16:	8183      	strh	r3, [r0, #12]
 800ce18:	460c      	mov	r4, r1
 800ce1a:	46a8      	mov	r8, r5
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4630      	mov	r0, r6
 800ce20:	3501      	adds	r5, #1
 800ce22:	f008 fb55 	bl	80154d0 <put_memory>
 800ce26:	42af      	cmp	r7, r5
 800ce28:	60a4      	str	r4, [r4, #8]
 800ce2a:	f884 800c 	strb.w	r8, [r4, #12]
 800ce2e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ce32:	d1f3      	bne.n	800ce1c <rmw_uxrce_init_node_memory+0x20>
 800ce34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop

0800ce3c <rmw_uxrce_init_session_memory>:
 800ce3c:	b1ea      	cbz	r2, 800ce7a <rmw_uxrce_init_session_memory+0x3e>
 800ce3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce42:	7b05      	ldrb	r5, [r0, #12]
 800ce44:	4606      	mov	r6, r0
 800ce46:	b9b5      	cbnz	r5, 800ce76 <rmw_uxrce_init_session_memory+0x3a>
 800ce48:	e9c0 5500 	strd	r5, r5, [r0]
 800ce4c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ce50:	f240 1301 	movw	r3, #257	@ 0x101
 800ce54:	4617      	mov	r7, r2
 800ce56:	f8c0 8008 	str.w	r8, [r0, #8]
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	8183      	strh	r3, [r0, #12]
 800ce5e:	46a9      	mov	r9, r5
 800ce60:	4621      	mov	r1, r4
 800ce62:	4630      	mov	r0, r6
 800ce64:	3501      	adds	r5, #1
 800ce66:	f008 fb33 	bl	80154d0 <put_memory>
 800ce6a:	42af      	cmp	r7, r5
 800ce6c:	60a4      	str	r4, [r4, #8]
 800ce6e:	f884 900c 	strb.w	r9, [r4, #12]
 800ce72:	4444      	add	r4, r8
 800ce74:	d1f4      	bne.n	800ce60 <rmw_uxrce_init_session_memory+0x24>
 800ce76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce7a:	4770      	bx	lr

0800ce7c <rmw_uxrce_init_topic_memory>:
 800ce7c:	b1e2      	cbz	r2, 800ceb8 <rmw_uxrce_init_topic_memory+0x3c>
 800ce7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce82:	7b05      	ldrb	r5, [r0, #12]
 800ce84:	4606      	mov	r6, r0
 800ce86:	b9ad      	cbnz	r5, 800ceb4 <rmw_uxrce_init_topic_memory+0x38>
 800ce88:	231c      	movs	r3, #28
 800ce8a:	e9c0 5500 	strd	r5, r5, [r0]
 800ce8e:	6083      	str	r3, [r0, #8]
 800ce90:	f240 1301 	movw	r3, #257	@ 0x101
 800ce94:	4617      	mov	r7, r2
 800ce96:	8183      	strh	r3, [r0, #12]
 800ce98:	460c      	mov	r4, r1
 800ce9a:	46a8      	mov	r8, r5
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	4630      	mov	r0, r6
 800cea0:	3501      	adds	r5, #1
 800cea2:	f008 fb15 	bl	80154d0 <put_memory>
 800cea6:	42af      	cmp	r7, r5
 800cea8:	60a4      	str	r4, [r4, #8]
 800ceaa:	f884 800c 	strb.w	r8, [r4, #12]
 800ceae:	f104 041c 	add.w	r4, r4, #28
 800ceb2:	d1f3      	bne.n	800ce9c <rmw_uxrce_init_topic_memory+0x20>
 800ceb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop

0800cebc <rmw_uxrce_init_static_input_buffer_memory>:
 800cebc:	b1ea      	cbz	r2, 800cefa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800cebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	7b05      	ldrb	r5, [r0, #12]
 800cec4:	4606      	mov	r6, r0
 800cec6:	b9b5      	cbnz	r5, 800cef6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800cec8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800cecc:	e9c0 5500 	strd	r5, r5, [r0]
 800ced0:	6083      	str	r3, [r0, #8]
 800ced2:	f240 1301 	movw	r3, #257	@ 0x101
 800ced6:	4617      	mov	r7, r2
 800ced8:	8183      	strh	r3, [r0, #12]
 800ceda:	460c      	mov	r4, r1
 800cedc:	46a8      	mov	r8, r5
 800cede:	4621      	mov	r1, r4
 800cee0:	4630      	mov	r0, r6
 800cee2:	3501      	adds	r5, #1
 800cee4:	f008 faf4 	bl	80154d0 <put_memory>
 800cee8:	42af      	cmp	r7, r5
 800ceea:	60a4      	str	r4, [r4, #8]
 800ceec:	f884 800c 	strb.w	r8, [r4, #12]
 800cef0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800cef4:	d1f3      	bne.n	800cede <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800cef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cefa:	4770      	bx	lr

0800cefc <rmw_uxrce_init_init_options_impl_memory>:
 800cefc:	b1e2      	cbz	r2, 800cf38 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800cefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf02:	7b05      	ldrb	r5, [r0, #12]
 800cf04:	4606      	mov	r6, r0
 800cf06:	b9ad      	cbnz	r5, 800cf34 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800cf08:	232c      	movs	r3, #44	@ 0x2c
 800cf0a:	e9c0 5500 	strd	r5, r5, [r0]
 800cf0e:	6083      	str	r3, [r0, #8]
 800cf10:	f240 1301 	movw	r3, #257	@ 0x101
 800cf14:	4617      	mov	r7, r2
 800cf16:	8183      	strh	r3, [r0, #12]
 800cf18:	460c      	mov	r4, r1
 800cf1a:	46a8      	mov	r8, r5
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4630      	mov	r0, r6
 800cf20:	3501      	adds	r5, #1
 800cf22:	f008 fad5 	bl	80154d0 <put_memory>
 800cf26:	42af      	cmp	r7, r5
 800cf28:	60a4      	str	r4, [r4, #8]
 800cf2a:	f884 800c 	strb.w	r8, [r4, #12]
 800cf2e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800cf32:	d1f3      	bne.n	800cf1c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop

0800cf3c <rmw_uxrce_init_wait_set_memory>:
 800cf3c:	b1e2      	cbz	r2, 800cf78 <rmw_uxrce_init_wait_set_memory+0x3c>
 800cf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf42:	7b05      	ldrb	r5, [r0, #12]
 800cf44:	4606      	mov	r6, r0
 800cf46:	b9ad      	cbnz	r5, 800cf74 <rmw_uxrce_init_wait_set_memory+0x38>
 800cf48:	231c      	movs	r3, #28
 800cf4a:	e9c0 5500 	strd	r5, r5, [r0]
 800cf4e:	6083      	str	r3, [r0, #8]
 800cf50:	f240 1301 	movw	r3, #257	@ 0x101
 800cf54:	4617      	mov	r7, r2
 800cf56:	8183      	strh	r3, [r0, #12]
 800cf58:	460c      	mov	r4, r1
 800cf5a:	46a8      	mov	r8, r5
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	4630      	mov	r0, r6
 800cf60:	3501      	adds	r5, #1
 800cf62:	f008 fab5 	bl	80154d0 <put_memory>
 800cf66:	42af      	cmp	r7, r5
 800cf68:	60a4      	str	r4, [r4, #8]
 800cf6a:	f884 800c 	strb.w	r8, [r4, #12]
 800cf6e:	f104 041c 	add.w	r4, r4, #28
 800cf72:	d1f3      	bne.n	800cf5c <rmw_uxrce_init_wait_set_memory+0x20>
 800cf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop

0800cf7c <rmw_uxrce_init_guard_condition_memory>:
 800cf7c:	b1e2      	cbz	r2, 800cfb8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf82:	7b05      	ldrb	r5, [r0, #12]
 800cf84:	4606      	mov	r6, r0
 800cf86:	b9ad      	cbnz	r5, 800cfb4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800cf88:	2320      	movs	r3, #32
 800cf8a:	e9c0 5500 	strd	r5, r5, [r0]
 800cf8e:	6083      	str	r3, [r0, #8]
 800cf90:	f240 1301 	movw	r3, #257	@ 0x101
 800cf94:	4617      	mov	r7, r2
 800cf96:	8183      	strh	r3, [r0, #12]
 800cf98:	460c      	mov	r4, r1
 800cf9a:	46a8      	mov	r8, r5
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	3501      	adds	r5, #1
 800cfa2:	f008 fa95 	bl	80154d0 <put_memory>
 800cfa6:	42af      	cmp	r7, r5
 800cfa8:	60a4      	str	r4, [r4, #8]
 800cfaa:	f884 800c 	strb.w	r8, [r4, #12]
 800cfae:	f104 0420 	add.w	r4, r4, #32
 800cfb2:	d1f3      	bne.n	800cf9c <rmw_uxrce_init_guard_condition_memory+0x20>
 800cfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop

0800cfbc <rmw_uxrce_fini_session_memory>:
 800cfbc:	4601      	mov	r1, r0
 800cfbe:	4801      	ldr	r0, [pc, #4]	@ (800cfc4 <rmw_uxrce_fini_session_memory+0x8>)
 800cfc0:	f008 ba86 	b.w	80154d0 <put_memory>
 800cfc4:	2000ca9c 	.word	0x2000ca9c

0800cfc8 <rmw_uxrce_fini_node_memory>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4604      	mov	r4, r0
 800cfcc:	6800      	ldr	r0, [r0, #0]
 800cfce:	b128      	cbz	r0, 800cfdc <rmw_uxrce_fini_node_memory+0x14>
 800cfd0:	4b07      	ldr	r3, [pc, #28]	@ (800cff0 <rmw_uxrce_fini_node_memory+0x28>)
 800cfd2:	6819      	ldr	r1, [r3, #0]
 800cfd4:	f7f3 f924 	bl	8000220 <strcmp>
 800cfd8:	b940      	cbnz	r0, 800cfec <rmw_uxrce_fini_node_memory+0x24>
 800cfda:	6020      	str	r0, [r4, #0]
 800cfdc:	6861      	ldr	r1, [r4, #4]
 800cfde:	b129      	cbz	r1, 800cfec <rmw_uxrce_fini_node_memory+0x24>
 800cfe0:	2500      	movs	r5, #0
 800cfe2:	4804      	ldr	r0, [pc, #16]	@ (800cff4 <rmw_uxrce_fini_node_memory+0x2c>)
 800cfe4:	610d      	str	r5, [r1, #16]
 800cfe6:	f008 fa73 	bl	80154d0 <put_memory>
 800cfea:	6065      	str	r5, [r4, #4]
 800cfec:	bd38      	pop	{r3, r4, r5, pc}
 800cfee:	bf00      	nop
 800cff0:	08019648 	.word	0x08019648
 800cff4:	2000ca6c 	.word	0x2000ca6c

0800cff8 <rmw_uxrce_fini_publisher_memory>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	4604      	mov	r4, r0
 800cffc:	6800      	ldr	r0, [r0, #0]
 800cffe:	b128      	cbz	r0, 800d00c <rmw_uxrce_fini_publisher_memory+0x14>
 800d000:	4b06      	ldr	r3, [pc, #24]	@ (800d01c <rmw_uxrce_fini_publisher_memory+0x24>)
 800d002:	6819      	ldr	r1, [r3, #0]
 800d004:	f7f3 f90c 	bl	8000220 <strcmp>
 800d008:	b938      	cbnz	r0, 800d01a <rmw_uxrce_fini_publisher_memory+0x22>
 800d00a:	6020      	str	r0, [r4, #0]
 800d00c:	6861      	ldr	r1, [r4, #4]
 800d00e:	b121      	cbz	r1, 800d01a <rmw_uxrce_fini_publisher_memory+0x22>
 800d010:	4803      	ldr	r0, [pc, #12]	@ (800d020 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d012:	f008 fa5d 	bl	80154d0 <put_memory>
 800d016:	2300      	movs	r3, #0
 800d018:	6063      	str	r3, [r4, #4]
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	08019648 	.word	0x08019648
 800d020:	2000ca7c 	.word	0x2000ca7c

0800d024 <rmw_uxrce_fini_subscription_memory>:
 800d024:	b510      	push	{r4, lr}
 800d026:	4604      	mov	r4, r0
 800d028:	6800      	ldr	r0, [r0, #0]
 800d02a:	b128      	cbz	r0, 800d038 <rmw_uxrce_fini_subscription_memory+0x14>
 800d02c:	4b06      	ldr	r3, [pc, #24]	@ (800d048 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d02e:	6819      	ldr	r1, [r3, #0]
 800d030:	f7f3 f8f6 	bl	8000220 <strcmp>
 800d034:	b938      	cbnz	r0, 800d046 <rmw_uxrce_fini_subscription_memory+0x22>
 800d036:	6020      	str	r0, [r4, #0]
 800d038:	6861      	ldr	r1, [r4, #4]
 800d03a:	b121      	cbz	r1, 800d046 <rmw_uxrce_fini_subscription_memory+0x22>
 800d03c:	4803      	ldr	r0, [pc, #12]	@ (800d04c <rmw_uxrce_fini_subscription_memory+0x28>)
 800d03e:	f008 fa47 	bl	80154d0 <put_memory>
 800d042:	2300      	movs	r3, #0
 800d044:	6063      	str	r3, [r4, #4]
 800d046:	bd10      	pop	{r4, pc}
 800d048:	08019648 	.word	0x08019648
 800d04c:	2000cabc 	.word	0x2000cabc

0800d050 <rmw_uxrce_fini_service_memory>:
 800d050:	b510      	push	{r4, lr}
 800d052:	4604      	mov	r4, r0
 800d054:	6800      	ldr	r0, [r0, #0]
 800d056:	b128      	cbz	r0, 800d064 <rmw_uxrce_fini_service_memory+0x14>
 800d058:	4b06      	ldr	r3, [pc, #24]	@ (800d074 <rmw_uxrce_fini_service_memory+0x24>)
 800d05a:	6819      	ldr	r1, [r3, #0]
 800d05c:	f7f3 f8e0 	bl	8000220 <strcmp>
 800d060:	b938      	cbnz	r0, 800d072 <rmw_uxrce_fini_service_memory+0x22>
 800d062:	6020      	str	r0, [r4, #0]
 800d064:	6861      	ldr	r1, [r4, #4]
 800d066:	b121      	cbz	r1, 800d072 <rmw_uxrce_fini_service_memory+0x22>
 800d068:	4803      	ldr	r0, [pc, #12]	@ (800d078 <rmw_uxrce_fini_service_memory+0x28>)
 800d06a:	f008 fa31 	bl	80154d0 <put_memory>
 800d06e:	2300      	movs	r3, #0
 800d070:	6063      	str	r3, [r4, #4]
 800d072:	bd10      	pop	{r4, pc}
 800d074:	08019648 	.word	0x08019648
 800d078:	2000ca8c 	.word	0x2000ca8c

0800d07c <rmw_uxrce_fini_client_memory>:
 800d07c:	b510      	push	{r4, lr}
 800d07e:	4604      	mov	r4, r0
 800d080:	6800      	ldr	r0, [r0, #0]
 800d082:	b128      	cbz	r0, 800d090 <rmw_uxrce_fini_client_memory+0x14>
 800d084:	4b06      	ldr	r3, [pc, #24]	@ (800d0a0 <rmw_uxrce_fini_client_memory+0x24>)
 800d086:	6819      	ldr	r1, [r3, #0]
 800d088:	f7f3 f8ca 	bl	8000220 <strcmp>
 800d08c:	b938      	cbnz	r0, 800d09e <rmw_uxrce_fini_client_memory+0x22>
 800d08e:	6020      	str	r0, [r4, #0]
 800d090:	6861      	ldr	r1, [r4, #4]
 800d092:	b121      	cbz	r1, 800d09e <rmw_uxrce_fini_client_memory+0x22>
 800d094:	4803      	ldr	r0, [pc, #12]	@ (800d0a4 <rmw_uxrce_fini_client_memory+0x28>)
 800d096:	f008 fa1b 	bl	80154d0 <put_memory>
 800d09a:	2300      	movs	r3, #0
 800d09c:	6063      	str	r3, [r4, #4]
 800d09e:	bd10      	pop	{r4, pc}
 800d0a0:	08019648 	.word	0x08019648
 800d0a4:	2000819c 	.word	0x2000819c

0800d0a8 <rmw_uxrce_fini_topic_memory>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	4803      	ldr	r0, [pc, #12]	@ (800d0bc <rmw_uxrce_fini_topic_memory+0x14>)
 800d0b0:	f008 fa0e 	bl	80154d0 <put_memory>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	61a3      	str	r3, [r4, #24]
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	bf00      	nop
 800d0bc:	2000cacc 	.word	0x2000cacc

0800d0c0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	b530      	push	{r4, r5, lr}
 800d0c4:	4925      	ldr	r1, [pc, #148]	@ (800d15c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d0c6:	680d      	ldr	r5, [r1, #0]
 800d0c8:	ac03      	add	r4, sp, #12
 800d0ca:	e884 000c 	stmia.w	r4, {r2, r3}
 800d0ce:	461c      	mov	r4, r3
 800d0d0:	2d00      	cmp	r5, #0
 800d0d2:	d041      	beq.n	800d158 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d0d4:	462b      	mov	r3, r5
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	689a      	ldr	r2, [r3, #8]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d0e0:	4290      	cmp	r0, r2
 800d0e2:	bf08      	it	eq
 800d0e4:	3101      	addeq	r1, #1
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d1f6      	bne.n	800d0d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d0ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d029      	beq.n	800d146 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d0f2:	d907      	bls.n	800d104 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d005      	beq.n	800d104 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0fe:	4608      	mov	r0, r1
 800d100:	b002      	add	sp, #8
 800d102:	4770      	bx	lr
 800d104:	b314      	cbz	r4, 800d14c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d106:	428c      	cmp	r4, r1
 800d108:	d820      	bhi.n	800d14c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d10a:	2d00      	cmp	r5, #0
 800d10c:	d0f4      	beq.n	800d0f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d10e:	2100      	movs	r1, #0
 800d110:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d114:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d118:	e002      	b.n	800d120 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d11a:	686d      	ldr	r5, [r5, #4]
 800d11c:	2d00      	cmp	r5, #0
 800d11e:	d0ec      	beq.n	800d0fa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d120:	68ab      	ldr	r3, [r5, #8]
 800d122:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d126:	4290      	cmp	r0, r2
 800d128:	d1f7      	bne.n	800d11a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d12a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d12e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d132:	4562      	cmp	r2, ip
 800d134:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d138:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d13c:	daed      	bge.n	800d11a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d13e:	4694      	mov	ip, r2
 800d140:	461c      	mov	r4, r3
 800d142:	4629      	mov	r1, r5
 800d144:	e7e9      	b.n	800d11a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d146:	b10c      	cbz	r4, 800d14c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d148:	428c      	cmp	r4, r1
 800d14a:	d9d5      	bls.n	800d0f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d150:	4802      	ldr	r0, [pc, #8]	@ (800d15c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d152:	b002      	add	sp, #8
 800d154:	f008 b9ac 	b.w	80154b0 <get_memory>
 800d158:	4629      	mov	r1, r5
 800d15a:	e7c6      	b.n	800d0ea <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d15c:	2000caac 	.word	0x2000caac

0800d160 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d160:	4b11      	ldr	r3, [pc, #68]	@ (800d1a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	b530      	push	{r4, r5, lr}
 800d166:	b1e3      	cbz	r3, 800d1a2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d168:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d16c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d170:	2400      	movs	r4, #0
 800d172:	e001      	b.n	800d178 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	b193      	cbz	r3, 800d19e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d178:	689a      	ldr	r2, [r3, #8]
 800d17a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d17e:	4288      	cmp	r0, r1
 800d180:	d1f8      	bne.n	800d174 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d182:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d186:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d18a:	4571      	cmp	r1, lr
 800d18c:	eb72 050c 	sbcs.w	r5, r2, ip
 800d190:	daf0      	bge.n	800d174 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d192:	461c      	mov	r4, r3
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	468e      	mov	lr, r1
 800d198:	4694      	mov	ip, r2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1ec      	bne.n	800d178 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d19e:	4620      	mov	r0, r4
 800d1a0:	bd30      	pop	{r4, r5, pc}
 800d1a2:	461c      	mov	r4, r3
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	bd30      	pop	{r4, r5, pc}
 800d1a8:	2000caac 	.word	0x2000caac
 800d1ac:	00000000 	.word	0x00000000

0800d1b0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	4b3c      	ldr	r3, [pc, #240]	@ (800d2a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d1b6:	ed2d 8b06 	vpush	{d8-d10}
 800d1ba:	681f      	ldr	r7, [r3, #0]
 800d1bc:	b08d      	sub	sp, #52	@ 0x34
 800d1be:	f7ff fd7d 	bl	800ccbc <rmw_uros_epoch_nanos>
 800d1c2:	2f00      	cmp	r7, #0
 800d1c4:	d05d      	beq.n	800d282 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d1c6:	46b8      	mov	r8, r7
 800d1c8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d290 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d1cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d1d0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d1d4:	2b04      	cmp	r3, #4
 800d1d6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d298 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d1da:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d2a0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d1de:	4681      	mov	r9, r0
 800d1e0:	468a      	mov	sl, r1
 800d1e2:	ac04      	add	r4, sp, #16
 800d1e4:	d03f      	beq.n	800d266 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d1e6:	2b05      	cmp	r3, #5
 800d1e8:	d044      	beq.n	800d274 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d1ea:	2b03      	cmp	r3, #3
 800d1ec:	d03b      	beq.n	800d266 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d1ee:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d1f2:	ed8d ab06 	vstr	d10, [sp, #24]
 800d1f6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d1fa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d1fe:	ab08      	add	r3, sp, #32
 800d200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d202:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d206:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d20a:	f007 fe9d 	bl	8014f48 <rmw_time_equal>
 800d20e:	b118      	cbz	r0, 800d218 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d210:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d214:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d218:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d21c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d220:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d224:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d228:	f007 fee2 	bl	8014ff0 <rmw_time_total_nsec>
 800d22c:	1830      	adds	r0, r6, r0
 800d22e:	eb47 0101 	adc.w	r1, r7, r1
 800d232:	4548      	cmp	r0, r9
 800d234:	eb71 030a 	sbcs.w	r3, r1, sl
 800d238:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d23c:	db05      	blt.n	800d24a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d23e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d242:	4591      	cmp	r9, r2
 800d244:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d248:	da03      	bge.n	800d252 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d24a:	4817      	ldr	r0, [pc, #92]	@ (800d2a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d24c:	4641      	mov	r1, r8
 800d24e:	f008 f93f 	bl	80154d0 <put_memory>
 800d252:	f1bb 0f00 	cmp.w	fp, #0
 800d256:	d014      	beq.n	800d282 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d258:	46d8      	mov	r8, fp
 800d25a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d25e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d262:	2b04      	cmp	r3, #4
 800d264:	d1bf      	bne.n	800d1e6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d266:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d26a:	3340      	adds	r3, #64	@ 0x40
 800d26c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d26e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d272:	e7c0      	b.n	800d1f6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d274:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d278:	3348      	adds	r3, #72	@ 0x48
 800d27a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d27c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d280:	e7b9      	b.n	800d1f6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d282:	b00d      	add	sp, #52	@ 0x34
 800d284:	ecbd 8b06 	vpop	{d8-d10}
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	f3af 8000 	nop.w
	...
 800d298:	00000001 	.word	0x00000001
 800d29c:	00000000 	.word	0x00000000
 800d2a0:	0000001e 	.word	0x0000001e
 800d2a4:	00000000 	.word	0x00000000
 800d2a8:	2000caac 	.word	0x2000caac

0800d2ac <run_xrce_session>:
 800d2ac:	b510      	push	{r4, lr}
 800d2ae:	788c      	ldrb	r4, [r1, #2]
 800d2b0:	b086      	sub	sp, #24
 800d2b2:	2c01      	cmp	r4, #1
 800d2b4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d2b8:	d00c      	beq.n	800d2d4 <run_xrce_session+0x28>
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	2301      	movs	r3, #1
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	f10d 020e 	add.w	r2, sp, #14
 800d2c4:	f10d 0317 	add.w	r3, sp, #23
 800d2c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d2cc:	f002 f9ca 	bl	800f664 <uxr_run_session_until_all_status>
 800d2d0:	b006      	add	sp, #24
 800d2d2:	bd10      	pop	{r4, pc}
 800d2d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d2d8:	f001 fdde 	bl	800ee98 <uxr_flash_output_streams>
 800d2dc:	4620      	mov	r0, r4
 800d2de:	b006      	add	sp, #24
 800d2e0:	bd10      	pop	{r4, pc}
 800d2e2:	bf00      	nop

0800d2e4 <convert_qos_profile>:
 800d2e4:	7a4a      	ldrb	r2, [r1, #9]
 800d2e6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d2ea:	2a02      	cmp	r2, #2
 800d2ec:	bf18      	it	ne
 800d2ee:	2200      	movne	r2, #0
 800d2f0:	7002      	strb	r2, [r0, #0]
 800d2f2:	780a      	ldrb	r2, [r1, #0]
 800d2f4:	8889      	ldrh	r1, [r1, #4]
 800d2f6:	8081      	strh	r1, [r0, #4]
 800d2f8:	f1ac 0c02 	sub.w	ip, ip, #2
 800d2fc:	f1a2 0202 	sub.w	r2, r2, #2
 800d300:	fabc fc8c 	clz	ip, ip
 800d304:	fab2 f282 	clz	r2, r2
 800d308:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d30c:	0952      	lsrs	r2, r2, #5
 800d30e:	f880 c001 	strb.w	ip, [r0, #1]
 800d312:	7082      	strb	r2, [r0, #2]
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop

0800d318 <generate_type_name>:
 800d318:	b530      	push	{r4, r5, lr}
 800d31a:	2300      	movs	r3, #0
 800d31c:	700b      	strb	r3, [r1, #0]
 800d31e:	6803      	ldr	r3, [r0, #0]
 800d320:	b087      	sub	sp, #28
 800d322:	4614      	mov	r4, r2
 800d324:	b1d3      	cbz	r3, 800d35c <generate_type_name+0x44>
 800d326:	4a0f      	ldr	r2, [pc, #60]	@ (800d364 <generate_type_name+0x4c>)
 800d328:	4615      	mov	r5, r2
 800d32a:	9203      	str	r2, [sp, #12]
 800d32c:	9500      	str	r5, [sp, #0]
 800d32e:	6842      	ldr	r2, [r0, #4]
 800d330:	480d      	ldr	r0, [pc, #52]	@ (800d368 <generate_type_name+0x50>)
 800d332:	9001      	str	r0, [sp, #4]
 800d334:	4608      	mov	r0, r1
 800d336:	490d      	ldr	r1, [pc, #52]	@ (800d36c <generate_type_name+0x54>)
 800d338:	9204      	str	r2, [sp, #16]
 800d33a:	9105      	str	r1, [sp, #20]
 800d33c:	9102      	str	r1, [sp, #8]
 800d33e:	4a0c      	ldr	r2, [pc, #48]	@ (800d370 <generate_type_name+0x58>)
 800d340:	4621      	mov	r1, r4
 800d342:	f00a facf 	bl	80178e4 <sniprintf>
 800d346:	2800      	cmp	r0, #0
 800d348:	db05      	blt.n	800d356 <generate_type_name+0x3e>
 800d34a:	4284      	cmp	r4, r0
 800d34c:	bfd4      	ite	le
 800d34e:	2000      	movle	r0, #0
 800d350:	2001      	movgt	r0, #1
 800d352:	b007      	add	sp, #28
 800d354:	bd30      	pop	{r4, r5, pc}
 800d356:	2000      	movs	r0, #0
 800d358:	b007      	add	sp, #28
 800d35a:	bd30      	pop	{r4, r5, pc}
 800d35c:	4b05      	ldr	r3, [pc, #20]	@ (800d374 <generate_type_name+0x5c>)
 800d35e:	4a01      	ldr	r2, [pc, #4]	@ (800d364 <generate_type_name+0x4c>)
 800d360:	461d      	mov	r5, r3
 800d362:	e7e2      	b.n	800d32a <generate_type_name+0x12>
 800d364:	08018c80 	.word	0x08018c80
 800d368:	08018c98 	.word	0x08018c98
 800d36c:	08018c94 	.word	0x08018c94
 800d370:	08018c84 	.word	0x08018c84
 800d374:	08019420 	.word	0x08019420

0800d378 <generate_topic_name>:
 800d378:	b510      	push	{r4, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	4614      	mov	r4, r2
 800d37e:	9000      	str	r0, [sp, #0]
 800d380:	4b08      	ldr	r3, [pc, #32]	@ (800d3a4 <generate_topic_name+0x2c>)
 800d382:	4a09      	ldr	r2, [pc, #36]	@ (800d3a8 <generate_topic_name+0x30>)
 800d384:	4608      	mov	r0, r1
 800d386:	4621      	mov	r1, r4
 800d388:	f00a faac 	bl	80178e4 <sniprintf>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	db05      	blt.n	800d39c <generate_topic_name+0x24>
 800d390:	4284      	cmp	r4, r0
 800d392:	bfd4      	ite	le
 800d394:	2000      	movle	r0, #0
 800d396:	2001      	movgt	r0, #1
 800d398:	b002      	add	sp, #8
 800d39a:	bd10      	pop	{r4, pc}
 800d39c:	2000      	movs	r0, #0
 800d39e:	b002      	add	sp, #8
 800d3a0:	bd10      	pop	{r4, pc}
 800d3a2:	bf00      	nop
 800d3a4:	08018ca4 	.word	0x08018ca4
 800d3a8:	08018c9c 	.word	0x08018c9c

0800d3ac <is_uxrce_rmw_identifier_valid>:
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	b140      	cbz	r0, 800d3c4 <is_uxrce_rmw_identifier_valid+0x18>
 800d3b2:	f008 f8e5 	bl	8015580 <rmw_get_implementation_identifier>
 800d3b6:	4601      	mov	r1, r0
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f7f2 ff31 	bl	8000220 <strcmp>
 800d3be:	fab0 f080 	clz	r0, r0
 800d3c2:	0940      	lsrs	r0, r0, #5
 800d3c4:	bd10      	pop	{r4, pc}
 800d3c6:	bf00      	nop

0800d3c8 <get_message_typesupport_handle>:
 800d3c8:	6883      	ldr	r3, [r0, #8]
 800d3ca:	4718      	bx	r3

0800d3cc <get_message_typesupport_handle_function>:
 800d3cc:	b510      	push	{r4, lr}
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	6800      	ldr	r0, [r0, #0]
 800d3d2:	f7f2 ff25 	bl	8000220 <strcmp>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	bf0c      	ite	eq
 800d3da:	4620      	moveq	r0, r4
 800d3dc:	2000      	movne	r0, #0
 800d3de:	bd10      	pop	{r4, pc}

0800d3e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d3e0:	4b04      	ldr	r3, [pc, #16]	@ (800d3f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	b10a      	cbz	r2, 800d3ea <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800d3e6:	4803      	ldr	r0, [pc, #12]	@ (800d3f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d3e8:	4770      	bx	lr
 800d3ea:	4a03      	ldr	r2, [pc, #12]	@ (800d3f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800d3ec:	4801      	ldr	r0, [pc, #4]	@ (800d3f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d3ee:	6812      	ldr	r2, [r2, #0]
 800d3f0:	601a      	str	r2, [r3, #0]
 800d3f2:	4770      	bx	lr
 800d3f4:	20000030 	.word	0x20000030
 800d3f8:	20000130 	.word	0x20000130

0800d3fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d3fc:	4a02      	ldr	r2, [pc, #8]	@ (800d408 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xc>)
 800d3fe:	4b03      	ldr	r3, [pc, #12]	@ (800d40c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x10>)
 800d400:	6812      	ldr	r2, [r2, #0]
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	20000130 	.word	0x20000130
 800d40c:	20000030 	.word	0x20000030

0800d410 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d410:	4b04      	ldr	r3, [pc, #16]	@ (800d424 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	b10a      	cbz	r2, 800d41a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800d416:	4803      	ldr	r0, [pc, #12]	@ (800d424 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d418:	4770      	bx	lr
 800d41a:	4a03      	ldr	r2, [pc, #12]	@ (800d428 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800d41c:	4801      	ldr	r0, [pc, #4]	@ (800d424 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d41e:	6812      	ldr	r2, [r2, #0]
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	4770      	bx	lr
 800d424:	20000044 	.word	0x20000044
 800d428:	20000130 	.word	0x20000130

0800d42c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d42c:	4a02      	ldr	r2, [pc, #8]	@ (800d438 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xc>)
 800d42e:	4b03      	ldr	r3, [pc, #12]	@ (800d43c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x10>)
 800d430:	6812      	ldr	r2, [r2, #0]
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	20000130 	.word	0x20000130
 800d43c:	20000044 	.word	0x20000044

0800d440 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 800d440:	f008 bc80 	b.w	8015d44 <std_msgs__msg__Bool__init>

0800d444 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 800d444:	f008 bc82 	b.w	8015d4c <std_msgs__msg__Bool__fini>

0800d448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d448:	4b04      	ldr	r3, [pc, #16]	@ (800d45c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	b10a      	cbz	r2, 800d452 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800d44e:	4803      	ldr	r0, [pc, #12]	@ (800d45c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d450:	4770      	bx	lr
 800d452:	4a03      	ldr	r2, [pc, #12]	@ (800d460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800d454:	4801      	ldr	r0, [pc, #4]	@ (800d45c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d456:	6812      	ldr	r2, [r2, #0]
 800d458:	601a      	str	r2, [r3, #0]
 800d45a:	4770      	bx	lr
 800d45c:	2000008c 	.word	0x2000008c
 800d460:	20000134 	.word	0x20000134

0800d464 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_init_function>:
 800d464:	f008 bc74 	b.w	8015d50 <std_msgs__msg__UInt16__init>

0800d468 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_fini_function>:
 800d468:	f008 bc76 	b.w	8015d58 <std_msgs__msg__UInt16__fini>

0800d46c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d46c:	4b04      	ldr	r3, [pc, #16]	@ (800d480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	b10a      	cbz	r2, 800d476 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800d472:	4803      	ldr	r0, [pc, #12]	@ (800d480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d474:	4770      	bx	lr
 800d476:	4a03      	ldr	r2, [pc, #12]	@ (800d484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800d478:	4801      	ldr	r0, [pc, #4]	@ (800d480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d47a:	6812      	ldr	r2, [r2, #0]
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	4770      	bx	lr
 800d480:	200000d4 	.word	0x200000d4
 800d484:	20000134 	.word	0x20000134

0800d488 <_Bool__max_serialized_size>:
 800d488:	b508      	push	{r3, lr}
 800d48a:	2101      	movs	r1, #1
 800d48c:	2000      	movs	r0, #0
 800d48e:	f001 f835 	bl	800e4fc <ucdr_alignment>
 800d492:	3001      	adds	r0, #1
 800d494:	bd08      	pop	{r3, pc}
 800d496:	bf00      	nop

0800d498 <_Bool__cdr_deserialize>:
 800d498:	b109      	cbz	r1, 800d49e <_Bool__cdr_deserialize+0x6>
 800d49a:	f000 b867 	b.w	800d56c <ucdr_deserialize_bool>
 800d49e:	4608      	mov	r0, r1
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop

0800d4a4 <get_serialized_size_std_msgs__msg__Bool>:
 800d4a4:	b138      	cbz	r0, 800d4b6 <get_serialized_size_std_msgs__msg__Bool+0x12>
 800d4a6:	b508      	push	{r3, lr}
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	2101      	movs	r1, #1
 800d4ae:	f001 f825 	bl	800e4fc <ucdr_alignment>
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	bd08      	pop	{r3, pc}
 800d4b6:	4770      	bx	lr

0800d4b8 <_Bool__cdr_serialize>:
 800d4b8:	460a      	mov	r2, r1
 800d4ba:	b118      	cbz	r0, 800d4c4 <_Bool__cdr_serialize+0xc>
 800d4bc:	7801      	ldrb	r1, [r0, #0]
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f000 b83e 	b.w	800d540 <ucdr_serialize_bool>
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop

0800d4c8 <_Bool__get_serialized_size>:
 800d4c8:	b130      	cbz	r0, 800d4d8 <_Bool__get_serialized_size+0x10>
 800d4ca:	b508      	push	{r3, lr}
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	f001 f814 	bl	800e4fc <ucdr_alignment>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	bd08      	pop	{r3, pc}
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop

0800d4dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d4dc:	4800      	ldr	r0, [pc, #0]	@ (800d4e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 800d4de:	4770      	bx	lr
 800d4e0:	200000e0 	.word	0x200000e0

0800d4e4 <_UInt16__max_serialized_size>:
 800d4e4:	b508      	push	{r3, lr}
 800d4e6:	2102      	movs	r1, #2
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	f001 f807 	bl	800e4fc <ucdr_alignment>
 800d4ee:	3002      	adds	r0, #2
 800d4f0:	bd08      	pop	{r3, pc}
 800d4f2:	bf00      	nop

0800d4f4 <_UInt16__cdr_deserialize>:
 800d4f4:	b109      	cbz	r1, 800d4fa <_UInt16__cdr_deserialize+0x6>
 800d4f6:	f000 b97d 	b.w	800d7f4 <ucdr_deserialize_uint16_t>
 800d4fa:	4608      	mov	r0, r1
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop

0800d500 <get_serialized_size_std_msgs__msg__UInt16>:
 800d500:	b138      	cbz	r0, 800d512 <get_serialized_size_std_msgs__msg__UInt16+0x12>
 800d502:	b508      	push	{r3, lr}
 800d504:	460b      	mov	r3, r1
 800d506:	4618      	mov	r0, r3
 800d508:	2102      	movs	r1, #2
 800d50a:	f000 fff7 	bl	800e4fc <ucdr_alignment>
 800d50e:	3002      	adds	r0, #2
 800d510:	bd08      	pop	{r3, pc}
 800d512:	4770      	bx	lr

0800d514 <_UInt16__cdr_serialize>:
 800d514:	460a      	mov	r2, r1
 800d516:	b118      	cbz	r0, 800d520 <_UInt16__cdr_serialize+0xc>
 800d518:	8801      	ldrh	r1, [r0, #0]
 800d51a:	4610      	mov	r0, r2
 800d51c:	f000 b86a 	b.w	800d5f4 <ucdr_serialize_uint16_t>
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop

0800d524 <_UInt16__get_serialized_size>:
 800d524:	b130      	cbz	r0, 800d534 <_UInt16__get_serialized_size+0x10>
 800d526:	b508      	push	{r3, lr}
 800d528:	2102      	movs	r1, #2
 800d52a:	2000      	movs	r0, #0
 800d52c:	f000 ffe6 	bl	800e4fc <ucdr_alignment>
 800d530:	3002      	adds	r0, #2
 800d532:	bd08      	pop	{r3, pc}
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop

0800d538 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d538:	4800      	ldr	r0, [pc, #0]	@ (800d53c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x4>)
 800d53a:	4770      	bx	lr
 800d53c:	20000108 	.word	0x20000108

0800d540 <ucdr_serialize_bool>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	460d      	mov	r5, r1
 800d544:	2101      	movs	r1, #1
 800d546:	4604      	mov	r4, r0
 800d548:	f000 ff8c 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d54c:	b148      	cbz	r0, 800d562 <ucdr_serialize_bool+0x22>
 800d54e:	68a3      	ldr	r3, [r4, #8]
 800d550:	701d      	strb	r5, [r3, #0]
 800d552:	68a2      	ldr	r2, [r4, #8]
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	2101      	movs	r1, #1
 800d558:	440a      	add	r2, r1
 800d55a:	440b      	add	r3, r1
 800d55c:	60a2      	str	r2, [r4, #8]
 800d55e:	6123      	str	r3, [r4, #16]
 800d560:	7561      	strb	r1, [r4, #21]
 800d562:	7da0      	ldrb	r0, [r4, #22]
 800d564:	f080 0001 	eor.w	r0, r0, #1
 800d568:	bd38      	pop	{r3, r4, r5, pc}
 800d56a:	bf00      	nop

0800d56c <ucdr_deserialize_bool>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	460d      	mov	r5, r1
 800d570:	2101      	movs	r1, #1
 800d572:	4604      	mov	r4, r0
 800d574:	f000 ff76 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d578:	b160      	cbz	r0, 800d594 <ucdr_deserialize_bool+0x28>
 800d57a:	68a2      	ldr	r2, [r4, #8]
 800d57c:	6923      	ldr	r3, [r4, #16]
 800d57e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d582:	3900      	subs	r1, #0
 800d584:	bf18      	it	ne
 800d586:	2101      	movne	r1, #1
 800d588:	7029      	strb	r1, [r5, #0]
 800d58a:	3301      	adds	r3, #1
 800d58c:	2101      	movs	r1, #1
 800d58e:	60a2      	str	r2, [r4, #8]
 800d590:	6123      	str	r3, [r4, #16]
 800d592:	7561      	strb	r1, [r4, #21]
 800d594:	7da0      	ldrb	r0, [r4, #22]
 800d596:	f080 0001 	eor.w	r0, r0, #1
 800d59a:	bd38      	pop	{r3, r4, r5, pc}

0800d59c <ucdr_serialize_uint8_t>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	460d      	mov	r5, r1
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	f000 ff5e 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d5a8:	b148      	cbz	r0, 800d5be <ucdr_serialize_uint8_t+0x22>
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	701d      	strb	r5, [r3, #0]
 800d5ae:	68a2      	ldr	r2, [r4, #8]
 800d5b0:	6923      	ldr	r3, [r4, #16]
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	440a      	add	r2, r1
 800d5b6:	440b      	add	r3, r1
 800d5b8:	60a2      	str	r2, [r4, #8]
 800d5ba:	6123      	str	r3, [r4, #16]
 800d5bc:	7561      	strb	r1, [r4, #21]
 800d5be:	7da0      	ldrb	r0, [r4, #22]
 800d5c0:	f080 0001 	eor.w	r0, r0, #1
 800d5c4:	bd38      	pop	{r3, r4, r5, pc}
 800d5c6:	bf00      	nop

0800d5c8 <ucdr_deserialize_uint8_t>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	460d      	mov	r5, r1
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	f000 ff48 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d5d4:	b150      	cbz	r0, 800d5ec <ucdr_deserialize_uint8_t+0x24>
 800d5d6:	68a3      	ldr	r3, [r4, #8]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	702b      	strb	r3, [r5, #0]
 800d5dc:	68a2      	ldr	r2, [r4, #8]
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	2101      	movs	r1, #1
 800d5e2:	440a      	add	r2, r1
 800d5e4:	440b      	add	r3, r1
 800d5e6:	60a2      	str	r2, [r4, #8]
 800d5e8:	6123      	str	r3, [r4, #16]
 800d5ea:	7561      	strb	r1, [r4, #21]
 800d5ec:	7da0      	ldrb	r0, [r4, #22]
 800d5ee:	f080 0001 	eor.w	r0, r0, #1
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}

0800d5f4 <ucdr_serialize_uint16_t>:
 800d5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	2102      	movs	r1, #2
 800d5fe:	4604      	mov	r4, r0
 800d600:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d604:	f000 ff82 	bl	800e50c <ucdr_buffer_alignment>
 800d608:	4601      	mov	r1, r0
 800d60a:	4620      	mov	r0, r4
 800d60c:	7d67      	ldrb	r7, [r4, #21]
 800d60e:	f000 ffc1 	bl	800e594 <ucdr_advance_buffer>
 800d612:	2102      	movs	r1, #2
 800d614:	4620      	mov	r0, r4
 800d616:	f000 ff19 	bl	800e44c <ucdr_check_buffer_available_for>
 800d61a:	bb78      	cbnz	r0, 800d67c <ucdr_serialize_uint16_t+0x88>
 800d61c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d620:	42ab      	cmp	r3, r5
 800d622:	d926      	bls.n	800d672 <ucdr_serialize_uint16_t+0x7e>
 800d624:	1b5e      	subs	r6, r3, r5
 800d626:	60a3      	str	r3, [r4, #8]
 800d628:	6923      	ldr	r3, [r4, #16]
 800d62a:	f1c6 0802 	rsb	r8, r6, #2
 800d62e:	4433      	add	r3, r6
 800d630:	6123      	str	r3, [r4, #16]
 800d632:	4641      	mov	r1, r8
 800d634:	4620      	mov	r0, r4
 800d636:	f000 ff15 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d03b      	beq.n	800d6b6 <ucdr_serialize_uint16_t+0xc2>
 800d63e:	7d23      	ldrb	r3, [r4, #20]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d04a      	beq.n	800d6da <ucdr_serialize_uint16_t+0xe6>
 800d644:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d648:	702b      	strb	r3, [r5, #0]
 800d64a:	2e00      	cmp	r6, #0
 800d64c:	d040      	beq.n	800d6d0 <ucdr_serialize_uint16_t+0xdc>
 800d64e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d652:	706b      	strb	r3, [r5, #1]
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	68a2      	ldr	r2, [r4, #8]
 800d658:	7da0      	ldrb	r0, [r4, #22]
 800d65a:	3302      	adds	r3, #2
 800d65c:	1b9e      	subs	r6, r3, r6
 800d65e:	4442      	add	r2, r8
 800d660:	2302      	movs	r3, #2
 800d662:	f080 0001 	eor.w	r0, r0, #1
 800d666:	60a2      	str	r2, [r4, #8]
 800d668:	6126      	str	r6, [r4, #16]
 800d66a:	7563      	strb	r3, [r4, #21]
 800d66c:	b002      	add	sp, #8
 800d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d672:	2102      	movs	r1, #2
 800d674:	4620      	mov	r0, r4
 800d676:	f000 fef5 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d67a:	b190      	cbz	r0, 800d6a2 <ucdr_serialize_uint16_t+0xae>
 800d67c:	7d23      	ldrb	r3, [r4, #20]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	68a3      	ldr	r3, [r4, #8]
 800d682:	d014      	beq.n	800d6ae <ucdr_serialize_uint16_t+0xba>
 800d684:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d688:	701a      	strb	r2, [r3, #0]
 800d68a:	68a3      	ldr	r3, [r4, #8]
 800d68c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d690:	705a      	strb	r2, [r3, #1]
 800d692:	68a2      	ldr	r2, [r4, #8]
 800d694:	6923      	ldr	r3, [r4, #16]
 800d696:	3202      	adds	r2, #2
 800d698:	3302      	adds	r3, #2
 800d69a:	2102      	movs	r1, #2
 800d69c:	60a2      	str	r2, [r4, #8]
 800d69e:	6123      	str	r3, [r4, #16]
 800d6a0:	7561      	strb	r1, [r4, #21]
 800d6a2:	7da0      	ldrb	r0, [r4, #22]
 800d6a4:	f080 0001 	eor.w	r0, r0, #1
 800d6a8:	b002      	add	sp, #8
 800d6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6b2:	801a      	strh	r2, [r3, #0]
 800d6b4:	e7ed      	b.n	800d692 <ucdr_serialize_uint16_t+0x9e>
 800d6b6:	68a2      	ldr	r2, [r4, #8]
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	7da0      	ldrb	r0, [r4, #22]
 800d6bc:	7567      	strb	r7, [r4, #21]
 800d6be:	1b92      	subs	r2, r2, r6
 800d6c0:	1b9b      	subs	r3, r3, r6
 800d6c2:	f080 0001 	eor.w	r0, r0, #1
 800d6c6:	60a2      	str	r2, [r4, #8]
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	b002      	add	sp, #8
 800d6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d0:	68a3      	ldr	r3, [r4, #8]
 800d6d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6d6:	701a      	strb	r2, [r3, #0]
 800d6d8:	e7bc      	b.n	800d654 <ucdr_serialize_uint16_t+0x60>
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f10d 0506 	add.w	r5, sp, #6
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	4632      	mov	r2, r6
 800d6e4:	f00a faa1 	bl	8017c2a <memcpy>
 800d6e8:	68a0      	ldr	r0, [r4, #8]
 800d6ea:	4642      	mov	r2, r8
 800d6ec:	19a9      	adds	r1, r5, r6
 800d6ee:	f00a fa9c 	bl	8017c2a <memcpy>
 800d6f2:	e7af      	b.n	800d654 <ucdr_serialize_uint16_t+0x60>

0800d6f4 <ucdr_serialize_endian_uint16_t>:
 800d6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	b083      	sub	sp, #12
 800d6fa:	460d      	mov	r5, r1
 800d6fc:	2102      	movs	r1, #2
 800d6fe:	4604      	mov	r4, r0
 800d700:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d704:	f000 ff02 	bl	800e50c <ucdr_buffer_alignment>
 800d708:	4601      	mov	r1, r0
 800d70a:	4620      	mov	r0, r4
 800d70c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d710:	f000 ff40 	bl	800e594 <ucdr_advance_buffer>
 800d714:	2102      	movs	r1, #2
 800d716:	4620      	mov	r0, r4
 800d718:	f000 fe98 	bl	800e44c <ucdr_check_buffer_available_for>
 800d71c:	bb70      	cbnz	r0, 800d77c <ucdr_serialize_endian_uint16_t+0x88>
 800d71e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d722:	42be      	cmp	r6, r7
 800d724:	d925      	bls.n	800d772 <ucdr_serialize_endian_uint16_t+0x7e>
 800d726:	6923      	ldr	r3, [r4, #16]
 800d728:	60a6      	str	r6, [r4, #8]
 800d72a:	1bf6      	subs	r6, r6, r7
 800d72c:	4433      	add	r3, r6
 800d72e:	f1c6 0902 	rsb	r9, r6, #2
 800d732:	6123      	str	r3, [r4, #16]
 800d734:	4649      	mov	r1, r9
 800d736:	4620      	mov	r0, r4
 800d738:	f000 fe94 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d039      	beq.n	800d7b4 <ucdr_serialize_endian_uint16_t+0xc0>
 800d740:	2d01      	cmp	r5, #1
 800d742:	d04a      	beq.n	800d7da <ucdr_serialize_endian_uint16_t+0xe6>
 800d744:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d748:	703b      	strb	r3, [r7, #0]
 800d74a:	2e00      	cmp	r6, #0
 800d74c:	d040      	beq.n	800d7d0 <ucdr_serialize_endian_uint16_t+0xdc>
 800d74e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d752:	707b      	strb	r3, [r7, #1]
 800d754:	6923      	ldr	r3, [r4, #16]
 800d756:	68a2      	ldr	r2, [r4, #8]
 800d758:	7da0      	ldrb	r0, [r4, #22]
 800d75a:	3302      	adds	r3, #2
 800d75c:	444a      	add	r2, r9
 800d75e:	1b9b      	subs	r3, r3, r6
 800d760:	2102      	movs	r1, #2
 800d762:	f080 0001 	eor.w	r0, r0, #1
 800d766:	60a2      	str	r2, [r4, #8]
 800d768:	6123      	str	r3, [r4, #16]
 800d76a:	7561      	strb	r1, [r4, #21]
 800d76c:	b003      	add	sp, #12
 800d76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d772:	2102      	movs	r1, #2
 800d774:	4620      	mov	r0, r4
 800d776:	f000 fe75 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d77a:	b188      	cbz	r0, 800d7a0 <ucdr_serialize_endian_uint16_t+0xac>
 800d77c:	2d01      	cmp	r5, #1
 800d77e:	68a3      	ldr	r3, [r4, #8]
 800d780:	d014      	beq.n	800d7ac <ucdr_serialize_endian_uint16_t+0xb8>
 800d782:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d786:	701a      	strb	r2, [r3, #0]
 800d788:	68a3      	ldr	r3, [r4, #8]
 800d78a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d78e:	705a      	strb	r2, [r3, #1]
 800d790:	68a2      	ldr	r2, [r4, #8]
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	3202      	adds	r2, #2
 800d796:	3302      	adds	r3, #2
 800d798:	2102      	movs	r1, #2
 800d79a:	60a2      	str	r2, [r4, #8]
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	7561      	strb	r1, [r4, #21]
 800d7a0:	7da0      	ldrb	r0, [r4, #22]
 800d7a2:	f080 0001 	eor.w	r0, r0, #1
 800d7a6:	b003      	add	sp, #12
 800d7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d7b0:	801a      	strh	r2, [r3, #0]
 800d7b2:	e7ed      	b.n	800d790 <ucdr_serialize_endian_uint16_t+0x9c>
 800d7b4:	68a2      	ldr	r2, [r4, #8]
 800d7b6:	6923      	ldr	r3, [r4, #16]
 800d7b8:	7da0      	ldrb	r0, [r4, #22]
 800d7ba:	f884 8015 	strb.w	r8, [r4, #21]
 800d7be:	1b92      	subs	r2, r2, r6
 800d7c0:	1b9b      	subs	r3, r3, r6
 800d7c2:	f080 0001 	eor.w	r0, r0, #1
 800d7c6:	60a2      	str	r2, [r4, #8]
 800d7c8:	6123      	str	r3, [r4, #16]
 800d7ca:	b003      	add	sp, #12
 800d7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7d0:	68a3      	ldr	r3, [r4, #8]
 800d7d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d7d6:	701a      	strb	r2, [r3, #0]
 800d7d8:	e7bc      	b.n	800d754 <ucdr_serialize_endian_uint16_t+0x60>
 800d7da:	f10d 0506 	add.w	r5, sp, #6
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4632      	mov	r2, r6
 800d7e2:	4638      	mov	r0, r7
 800d7e4:	f00a fa21 	bl	8017c2a <memcpy>
 800d7e8:	68a0      	ldr	r0, [r4, #8]
 800d7ea:	464a      	mov	r2, r9
 800d7ec:	19a9      	adds	r1, r5, r6
 800d7ee:	f00a fa1c 	bl	8017c2a <memcpy>
 800d7f2:	e7af      	b.n	800d754 <ucdr_serialize_endian_uint16_t+0x60>

0800d7f4 <ucdr_deserialize_uint16_t>:
 800d7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	2102      	movs	r1, #2
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	f000 fe85 	bl	800e50c <ucdr_buffer_alignment>
 800d802:	4601      	mov	r1, r0
 800d804:	4620      	mov	r0, r4
 800d806:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d80a:	f000 fec3 	bl	800e594 <ucdr_advance_buffer>
 800d80e:	2102      	movs	r1, #2
 800d810:	4620      	mov	r0, r4
 800d812:	f000 fe1b 	bl	800e44c <ucdr_check_buffer_available_for>
 800d816:	bb60      	cbnz	r0, 800d872 <ucdr_deserialize_uint16_t+0x7e>
 800d818:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d81c:	42be      	cmp	r6, r7
 800d81e:	d923      	bls.n	800d868 <ucdr_deserialize_uint16_t+0x74>
 800d820:	6923      	ldr	r3, [r4, #16]
 800d822:	60a6      	str	r6, [r4, #8]
 800d824:	1bf6      	subs	r6, r6, r7
 800d826:	4433      	add	r3, r6
 800d828:	f1c6 0902 	rsb	r9, r6, #2
 800d82c:	6123      	str	r3, [r4, #16]
 800d82e:	4649      	mov	r1, r9
 800d830:	4620      	mov	r0, r4
 800d832:	f000 fe17 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d836:	2800      	cmp	r0, #0
 800d838:	d034      	beq.n	800d8a4 <ucdr_deserialize_uint16_t+0xb0>
 800d83a:	7d23      	ldrb	r3, [r4, #20]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d042      	beq.n	800d8c6 <ucdr_deserialize_uint16_t+0xd2>
 800d840:	787b      	ldrb	r3, [r7, #1]
 800d842:	702b      	strb	r3, [r5, #0]
 800d844:	2e00      	cmp	r6, #0
 800d846:	d03a      	beq.n	800d8be <ucdr_deserialize_uint16_t+0xca>
 800d848:	783b      	ldrb	r3, [r7, #0]
 800d84a:	706b      	strb	r3, [r5, #1]
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	68a2      	ldr	r2, [r4, #8]
 800d850:	7da0      	ldrb	r0, [r4, #22]
 800d852:	2102      	movs	r1, #2
 800d854:	3302      	adds	r3, #2
 800d856:	444a      	add	r2, r9
 800d858:	1b9b      	subs	r3, r3, r6
 800d85a:	7561      	strb	r1, [r4, #21]
 800d85c:	60a2      	str	r2, [r4, #8]
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	f080 0001 	eor.w	r0, r0, #1
 800d864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d868:	2102      	movs	r1, #2
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 fdfa 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d870:	b180      	cbz	r0, 800d894 <ucdr_deserialize_uint16_t+0xa0>
 800d872:	7d23      	ldrb	r3, [r4, #20]
 800d874:	2b01      	cmp	r3, #1
 800d876:	68a3      	ldr	r3, [r4, #8]
 800d878:	d011      	beq.n	800d89e <ucdr_deserialize_uint16_t+0xaa>
 800d87a:	785b      	ldrb	r3, [r3, #1]
 800d87c:	702b      	strb	r3, [r5, #0]
 800d87e:	68a3      	ldr	r3, [r4, #8]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	706b      	strb	r3, [r5, #1]
 800d884:	68a2      	ldr	r2, [r4, #8]
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	3202      	adds	r2, #2
 800d88a:	3302      	adds	r3, #2
 800d88c:	2102      	movs	r1, #2
 800d88e:	60a2      	str	r2, [r4, #8]
 800d890:	6123      	str	r3, [r4, #16]
 800d892:	7561      	strb	r1, [r4, #21]
 800d894:	7da0      	ldrb	r0, [r4, #22]
 800d896:	f080 0001 	eor.w	r0, r0, #1
 800d89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d89e:	881b      	ldrh	r3, [r3, #0]
 800d8a0:	802b      	strh	r3, [r5, #0]
 800d8a2:	e7ef      	b.n	800d884 <ucdr_deserialize_uint16_t+0x90>
 800d8a4:	68a2      	ldr	r2, [r4, #8]
 800d8a6:	6923      	ldr	r3, [r4, #16]
 800d8a8:	7da0      	ldrb	r0, [r4, #22]
 800d8aa:	f884 8015 	strb.w	r8, [r4, #21]
 800d8ae:	1b92      	subs	r2, r2, r6
 800d8b0:	1b9b      	subs	r3, r3, r6
 800d8b2:	60a2      	str	r2, [r4, #8]
 800d8b4:	6123      	str	r3, [r4, #16]
 800d8b6:	f080 0001 	eor.w	r0, r0, #1
 800d8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8be:	68a3      	ldr	r3, [r4, #8]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	706b      	strb	r3, [r5, #1]
 800d8c4:	e7c2      	b.n	800d84c <ucdr_deserialize_uint16_t+0x58>
 800d8c6:	4639      	mov	r1, r7
 800d8c8:	4632      	mov	r2, r6
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f00a f9ad 	bl	8017c2a <memcpy>
 800d8d0:	68a1      	ldr	r1, [r4, #8]
 800d8d2:	464a      	mov	r2, r9
 800d8d4:	19a8      	adds	r0, r5, r6
 800d8d6:	f00a f9a8 	bl	8017c2a <memcpy>
 800d8da:	e7b7      	b.n	800d84c <ucdr_deserialize_uint16_t+0x58>

0800d8dc <ucdr_deserialize_endian_uint16_t>:
 800d8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e0:	460e      	mov	r6, r1
 800d8e2:	2102      	movs	r1, #2
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	4615      	mov	r5, r2
 800d8e8:	f000 fe10 	bl	800e50c <ucdr_buffer_alignment>
 800d8ec:	4601      	mov	r1, r0
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d8f4:	f000 fe4e 	bl	800e594 <ucdr_advance_buffer>
 800d8f8:	2102      	movs	r1, #2
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f000 fda6 	bl	800e44c <ucdr_check_buffer_available_for>
 800d900:	bb70      	cbnz	r0, 800d960 <ucdr_deserialize_endian_uint16_t+0x84>
 800d902:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d906:	4547      	cmp	r7, r8
 800d908:	d925      	bls.n	800d956 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d90a:	6923      	ldr	r3, [r4, #16]
 800d90c:	60a7      	str	r7, [r4, #8]
 800d90e:	eba7 0708 	sub.w	r7, r7, r8
 800d912:	443b      	add	r3, r7
 800d914:	f1c7 0a02 	rsb	sl, r7, #2
 800d918:	6123      	str	r3, [r4, #16]
 800d91a:	4651      	mov	r1, sl
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 fda1 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d922:	2800      	cmp	r0, #0
 800d924:	d034      	beq.n	800d990 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d926:	2e01      	cmp	r6, #1
 800d928:	d043      	beq.n	800d9b2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d92a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d92e:	702b      	strb	r3, [r5, #0]
 800d930:	2f00      	cmp	r7, #0
 800d932:	d03a      	beq.n	800d9aa <ucdr_deserialize_endian_uint16_t+0xce>
 800d934:	f898 3000 	ldrb.w	r3, [r8]
 800d938:	706b      	strb	r3, [r5, #1]
 800d93a:	6923      	ldr	r3, [r4, #16]
 800d93c:	68a2      	ldr	r2, [r4, #8]
 800d93e:	7da0      	ldrb	r0, [r4, #22]
 800d940:	2102      	movs	r1, #2
 800d942:	3302      	adds	r3, #2
 800d944:	4452      	add	r2, sl
 800d946:	1bdb      	subs	r3, r3, r7
 800d948:	7561      	strb	r1, [r4, #21]
 800d94a:	60a2      	str	r2, [r4, #8]
 800d94c:	6123      	str	r3, [r4, #16]
 800d94e:	f080 0001 	eor.w	r0, r0, #1
 800d952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d956:	2102      	movs	r1, #2
 800d958:	4620      	mov	r0, r4
 800d95a:	f000 fd83 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800d95e:	b178      	cbz	r0, 800d980 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d960:	2e01      	cmp	r6, #1
 800d962:	68a3      	ldr	r3, [r4, #8]
 800d964:	d011      	beq.n	800d98a <ucdr_deserialize_endian_uint16_t+0xae>
 800d966:	785b      	ldrb	r3, [r3, #1]
 800d968:	702b      	strb	r3, [r5, #0]
 800d96a:	68a3      	ldr	r3, [r4, #8]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	706b      	strb	r3, [r5, #1]
 800d970:	68a2      	ldr	r2, [r4, #8]
 800d972:	6923      	ldr	r3, [r4, #16]
 800d974:	3202      	adds	r2, #2
 800d976:	3302      	adds	r3, #2
 800d978:	2102      	movs	r1, #2
 800d97a:	60a2      	str	r2, [r4, #8]
 800d97c:	6123      	str	r3, [r4, #16]
 800d97e:	7561      	strb	r1, [r4, #21]
 800d980:	7da0      	ldrb	r0, [r4, #22]
 800d982:	f080 0001 	eor.w	r0, r0, #1
 800d986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	802b      	strh	r3, [r5, #0]
 800d98e:	e7ef      	b.n	800d970 <ucdr_deserialize_endian_uint16_t+0x94>
 800d990:	68a2      	ldr	r2, [r4, #8]
 800d992:	6923      	ldr	r3, [r4, #16]
 800d994:	7da0      	ldrb	r0, [r4, #22]
 800d996:	f884 9015 	strb.w	r9, [r4, #21]
 800d99a:	1bd2      	subs	r2, r2, r7
 800d99c:	1bdb      	subs	r3, r3, r7
 800d99e:	60a2      	str	r2, [r4, #8]
 800d9a0:	6123      	str	r3, [r4, #16]
 800d9a2:	f080 0001 	eor.w	r0, r0, #1
 800d9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	706b      	strb	r3, [r5, #1]
 800d9b0:	e7c3      	b.n	800d93a <ucdr_deserialize_endian_uint16_t+0x5e>
 800d9b2:	4641      	mov	r1, r8
 800d9b4:	463a      	mov	r2, r7
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f00a f937 	bl	8017c2a <memcpy>
 800d9bc:	68a1      	ldr	r1, [r4, #8]
 800d9be:	4652      	mov	r2, sl
 800d9c0:	19e8      	adds	r0, r5, r7
 800d9c2:	f00a f932 	bl	8017c2a <memcpy>
 800d9c6:	e7b8      	b.n	800d93a <ucdr_deserialize_endian_uint16_t+0x5e>

0800d9c8 <ucdr_serialize_uint32_t>:
 800d9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	9101      	str	r1, [sp, #4]
 800d9d2:	2104      	movs	r1, #4
 800d9d4:	f000 fd9a 	bl	800e50c <ucdr_buffer_alignment>
 800d9d8:	4601      	mov	r1, r0
 800d9da:	4620      	mov	r0, r4
 800d9dc:	7d67      	ldrb	r7, [r4, #21]
 800d9de:	f000 fdd9 	bl	800e594 <ucdr_advance_buffer>
 800d9e2:	2104      	movs	r1, #4
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fd31 	bl	800e44c <ucdr_check_buffer_available_for>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d139      	bne.n	800da62 <ucdr_serialize_uint32_t+0x9a>
 800d9ee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d9f2:	42ab      	cmp	r3, r5
 800d9f4:	d930      	bls.n	800da58 <ucdr_serialize_uint32_t+0x90>
 800d9f6:	1b5e      	subs	r6, r3, r5
 800d9f8:	60a3      	str	r3, [r4, #8]
 800d9fa:	6923      	ldr	r3, [r4, #16]
 800d9fc:	f1c6 0804 	rsb	r8, r6, #4
 800da00:	4433      	add	r3, r6
 800da02:	6123      	str	r3, [r4, #16]
 800da04:	4641      	mov	r1, r8
 800da06:	4620      	mov	r0, r4
 800da08:	f000 fd2c 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d04c      	beq.n	800daaa <ucdr_serialize_uint32_t+0xe2>
 800da10:	7d23      	ldrb	r3, [r4, #20]
 800da12:	2b01      	cmp	r3, #1
 800da14:	d063      	beq.n	800dade <ucdr_serialize_uint32_t+0x116>
 800da16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da1a:	702b      	strb	r3, [r5, #0]
 800da1c:	2e00      	cmp	r6, #0
 800da1e:	d051      	beq.n	800dac4 <ucdr_serialize_uint32_t+0xfc>
 800da20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da24:	706b      	strb	r3, [r5, #1]
 800da26:	2e01      	cmp	r6, #1
 800da28:	d050      	beq.n	800dacc <ucdr_serialize_uint32_t+0x104>
 800da2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da2e:	70ab      	strb	r3, [r5, #2]
 800da30:	2e02      	cmp	r6, #2
 800da32:	d04f      	beq.n	800dad4 <ucdr_serialize_uint32_t+0x10c>
 800da34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da38:	70eb      	strb	r3, [r5, #3]
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	68a2      	ldr	r2, [r4, #8]
 800da3e:	7da0      	ldrb	r0, [r4, #22]
 800da40:	3304      	adds	r3, #4
 800da42:	1b9e      	subs	r6, r3, r6
 800da44:	4442      	add	r2, r8
 800da46:	2304      	movs	r3, #4
 800da48:	f080 0001 	eor.w	r0, r0, #1
 800da4c:	60a2      	str	r2, [r4, #8]
 800da4e:	6126      	str	r6, [r4, #16]
 800da50:	7563      	strb	r3, [r4, #21]
 800da52:	b002      	add	sp, #8
 800da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da58:	2104      	movs	r1, #4
 800da5a:	4620      	mov	r0, r4
 800da5c:	f000 fd02 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800da60:	b1d0      	cbz	r0, 800da98 <ucdr_serialize_uint32_t+0xd0>
 800da62:	7d23      	ldrb	r3, [r4, #20]
 800da64:	2b01      	cmp	r3, #1
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	d01c      	beq.n	800daa4 <ucdr_serialize_uint32_t+0xdc>
 800da6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da6e:	701a      	strb	r2, [r3, #0]
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da76:	705a      	strb	r2, [r3, #1]
 800da78:	68a3      	ldr	r3, [r4, #8]
 800da7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da7e:	709a      	strb	r2, [r3, #2]
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da86:	70da      	strb	r2, [r3, #3]
 800da88:	68a2      	ldr	r2, [r4, #8]
 800da8a:	6923      	ldr	r3, [r4, #16]
 800da8c:	3204      	adds	r2, #4
 800da8e:	3304      	adds	r3, #4
 800da90:	2104      	movs	r1, #4
 800da92:	60a2      	str	r2, [r4, #8]
 800da94:	6123      	str	r3, [r4, #16]
 800da96:	7561      	strb	r1, [r4, #21]
 800da98:	7da0      	ldrb	r0, [r4, #22]
 800da9a:	f080 0001 	eor.w	r0, r0, #1
 800da9e:	b002      	add	sp, #8
 800daa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa4:	9a01      	ldr	r2, [sp, #4]
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	e7ee      	b.n	800da88 <ucdr_serialize_uint32_t+0xc0>
 800daaa:	68a2      	ldr	r2, [r4, #8]
 800daac:	6923      	ldr	r3, [r4, #16]
 800daae:	7da0      	ldrb	r0, [r4, #22]
 800dab0:	7567      	strb	r7, [r4, #21]
 800dab2:	1b92      	subs	r2, r2, r6
 800dab4:	1b9b      	subs	r3, r3, r6
 800dab6:	f080 0001 	eor.w	r0, r0, #1
 800daba:	60a2      	str	r2, [r4, #8]
 800dabc:	6123      	str	r3, [r4, #16]
 800dabe:	b002      	add	sp, #8
 800dac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac4:	68a3      	ldr	r3, [r4, #8]
 800dac6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800daca:	701a      	strb	r2, [r3, #0]
 800dacc:	68a3      	ldr	r3, [r4, #8]
 800dace:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dad2:	701a      	strb	r2, [r3, #0]
 800dad4:	68a3      	ldr	r3, [r4, #8]
 800dad6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dada:	701a      	strb	r2, [r3, #0]
 800dadc:	e7ad      	b.n	800da3a <ucdr_serialize_uint32_t+0x72>
 800dade:	4628      	mov	r0, r5
 800dae0:	ad01      	add	r5, sp, #4
 800dae2:	4629      	mov	r1, r5
 800dae4:	4632      	mov	r2, r6
 800dae6:	f00a f8a0 	bl	8017c2a <memcpy>
 800daea:	68a0      	ldr	r0, [r4, #8]
 800daec:	4642      	mov	r2, r8
 800daee:	19a9      	adds	r1, r5, r6
 800daf0:	f00a f89b 	bl	8017c2a <memcpy>
 800daf4:	e7a1      	b.n	800da3a <ucdr_serialize_uint32_t+0x72>
 800daf6:	bf00      	nop

0800daf8 <ucdr_serialize_endian_uint32_t>:
 800daf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dafc:	b083      	sub	sp, #12
 800dafe:	460d      	mov	r5, r1
 800db00:	2104      	movs	r1, #4
 800db02:	4604      	mov	r4, r0
 800db04:	9201      	str	r2, [sp, #4]
 800db06:	f000 fd01 	bl	800e50c <ucdr_buffer_alignment>
 800db0a:	4601      	mov	r1, r0
 800db0c:	4620      	mov	r0, r4
 800db0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db12:	f000 fd3f 	bl	800e594 <ucdr_advance_buffer>
 800db16:	2104      	movs	r1, #4
 800db18:	4620      	mov	r0, r4
 800db1a:	f000 fc97 	bl	800e44c <ucdr_check_buffer_available_for>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d138      	bne.n	800db94 <ucdr_serialize_endian_uint32_t+0x9c>
 800db22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800db26:	42b7      	cmp	r7, r6
 800db28:	d92f      	bls.n	800db8a <ucdr_serialize_endian_uint32_t+0x92>
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	60a7      	str	r7, [r4, #8]
 800db2e:	1bbf      	subs	r7, r7, r6
 800db30:	443b      	add	r3, r7
 800db32:	f1c7 0904 	rsb	r9, r7, #4
 800db36:	6123      	str	r3, [r4, #16]
 800db38:	4649      	mov	r1, r9
 800db3a:	4620      	mov	r0, r4
 800db3c:	f000 fc92 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800db40:	2800      	cmp	r0, #0
 800db42:	d04a      	beq.n	800dbda <ucdr_serialize_endian_uint32_t+0xe2>
 800db44:	2d01      	cmp	r5, #1
 800db46:	d063      	beq.n	800dc10 <ucdr_serialize_endian_uint32_t+0x118>
 800db48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800db4c:	7033      	strb	r3, [r6, #0]
 800db4e:	2f00      	cmp	r7, #0
 800db50:	d051      	beq.n	800dbf6 <ucdr_serialize_endian_uint32_t+0xfe>
 800db52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800db56:	7073      	strb	r3, [r6, #1]
 800db58:	2f01      	cmp	r7, #1
 800db5a:	d050      	beq.n	800dbfe <ucdr_serialize_endian_uint32_t+0x106>
 800db5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800db60:	70b3      	strb	r3, [r6, #2]
 800db62:	2f02      	cmp	r7, #2
 800db64:	d04f      	beq.n	800dc06 <ucdr_serialize_endian_uint32_t+0x10e>
 800db66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db6a:	70f3      	strb	r3, [r6, #3]
 800db6c:	6923      	ldr	r3, [r4, #16]
 800db6e:	68a2      	ldr	r2, [r4, #8]
 800db70:	7da0      	ldrb	r0, [r4, #22]
 800db72:	3304      	adds	r3, #4
 800db74:	444a      	add	r2, r9
 800db76:	1bdb      	subs	r3, r3, r7
 800db78:	2104      	movs	r1, #4
 800db7a:	f080 0001 	eor.w	r0, r0, #1
 800db7e:	60a2      	str	r2, [r4, #8]
 800db80:	6123      	str	r3, [r4, #16]
 800db82:	7561      	strb	r1, [r4, #21]
 800db84:	b003      	add	sp, #12
 800db86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db8a:	2104      	movs	r1, #4
 800db8c:	4620      	mov	r0, r4
 800db8e:	f000 fc69 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800db92:	b1c8      	cbz	r0, 800dbc8 <ucdr_serialize_endian_uint32_t+0xd0>
 800db94:	2d01      	cmp	r5, #1
 800db96:	68a3      	ldr	r3, [r4, #8]
 800db98:	d01c      	beq.n	800dbd4 <ucdr_serialize_endian_uint32_t+0xdc>
 800db9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800db9e:	701a      	strb	r2, [r3, #0]
 800dba0:	68a3      	ldr	r3, [r4, #8]
 800dba2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dba6:	705a      	strb	r2, [r3, #1]
 800dba8:	68a3      	ldr	r3, [r4, #8]
 800dbaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dbae:	709a      	strb	r2, [r3, #2]
 800dbb0:	68a3      	ldr	r3, [r4, #8]
 800dbb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dbb6:	70da      	strb	r2, [r3, #3]
 800dbb8:	68a2      	ldr	r2, [r4, #8]
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	3204      	adds	r2, #4
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	2104      	movs	r1, #4
 800dbc2:	60a2      	str	r2, [r4, #8]
 800dbc4:	6123      	str	r3, [r4, #16]
 800dbc6:	7561      	strb	r1, [r4, #21]
 800dbc8:	7da0      	ldrb	r0, [r4, #22]
 800dbca:	f080 0001 	eor.w	r0, r0, #1
 800dbce:	b003      	add	sp, #12
 800dbd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbd4:	9a01      	ldr	r2, [sp, #4]
 800dbd6:	601a      	str	r2, [r3, #0]
 800dbd8:	e7ee      	b.n	800dbb8 <ucdr_serialize_endian_uint32_t+0xc0>
 800dbda:	68a2      	ldr	r2, [r4, #8]
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	7da0      	ldrb	r0, [r4, #22]
 800dbe0:	f884 8015 	strb.w	r8, [r4, #21]
 800dbe4:	1bd2      	subs	r2, r2, r7
 800dbe6:	1bdb      	subs	r3, r3, r7
 800dbe8:	f080 0001 	eor.w	r0, r0, #1
 800dbec:	60a2      	str	r2, [r4, #8]
 800dbee:	6123      	str	r3, [r4, #16]
 800dbf0:	b003      	add	sp, #12
 800dbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbf6:	68a3      	ldr	r3, [r4, #8]
 800dbf8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dbfc:	701a      	strb	r2, [r3, #0]
 800dbfe:	68a3      	ldr	r3, [r4, #8]
 800dc00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc04:	701a      	strb	r2, [r3, #0]
 800dc06:	68a3      	ldr	r3, [r4, #8]
 800dc08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc0c:	701a      	strb	r2, [r3, #0]
 800dc0e:	e7ad      	b.n	800db6c <ucdr_serialize_endian_uint32_t+0x74>
 800dc10:	ad01      	add	r5, sp, #4
 800dc12:	4629      	mov	r1, r5
 800dc14:	463a      	mov	r2, r7
 800dc16:	4630      	mov	r0, r6
 800dc18:	f00a f807 	bl	8017c2a <memcpy>
 800dc1c:	68a0      	ldr	r0, [r4, #8]
 800dc1e:	464a      	mov	r2, r9
 800dc20:	19e9      	adds	r1, r5, r7
 800dc22:	f00a f802 	bl	8017c2a <memcpy>
 800dc26:	e7a1      	b.n	800db6c <ucdr_serialize_endian_uint32_t+0x74>

0800dc28 <ucdr_deserialize_uint32_t>:
 800dc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	2104      	movs	r1, #4
 800dc30:	4604      	mov	r4, r0
 800dc32:	f000 fc6b 	bl	800e50c <ucdr_buffer_alignment>
 800dc36:	4601      	mov	r1, r0
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dc3e:	f000 fca9 	bl	800e594 <ucdr_advance_buffer>
 800dc42:	2104      	movs	r1, #4
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 fc01 	bl	800e44c <ucdr_check_buffer_available_for>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d138      	bne.n	800dcc0 <ucdr_deserialize_uint32_t+0x98>
 800dc4e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dc52:	42b7      	cmp	r7, r6
 800dc54:	d92f      	bls.n	800dcb6 <ucdr_deserialize_uint32_t+0x8e>
 800dc56:	6923      	ldr	r3, [r4, #16]
 800dc58:	60a7      	str	r7, [r4, #8]
 800dc5a:	1bbf      	subs	r7, r7, r6
 800dc5c:	443b      	add	r3, r7
 800dc5e:	f1c7 0904 	rsb	r9, r7, #4
 800dc62:	6123      	str	r3, [r4, #16]
 800dc64:	4649      	mov	r1, r9
 800dc66:	4620      	mov	r0, r4
 800dc68:	f000 fbfc 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d046      	beq.n	800dcfe <ucdr_deserialize_uint32_t+0xd6>
 800dc70:	7d23      	ldrb	r3, [r4, #20]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d05c      	beq.n	800dd30 <ucdr_deserialize_uint32_t+0x108>
 800dc76:	78f3      	ldrb	r3, [r6, #3]
 800dc78:	702b      	strb	r3, [r5, #0]
 800dc7a:	2f00      	cmp	r7, #0
 800dc7c:	d04c      	beq.n	800dd18 <ucdr_deserialize_uint32_t+0xf0>
 800dc7e:	78b3      	ldrb	r3, [r6, #2]
 800dc80:	706b      	strb	r3, [r5, #1]
 800dc82:	2f01      	cmp	r7, #1
 800dc84:	f105 0302 	add.w	r3, r5, #2
 800dc88:	d04a      	beq.n	800dd20 <ucdr_deserialize_uint32_t+0xf8>
 800dc8a:	7873      	ldrb	r3, [r6, #1]
 800dc8c:	70ab      	strb	r3, [r5, #2]
 800dc8e:	2f02      	cmp	r7, #2
 800dc90:	f105 0303 	add.w	r3, r5, #3
 800dc94:	d048      	beq.n	800dd28 <ucdr_deserialize_uint32_t+0x100>
 800dc96:	7833      	ldrb	r3, [r6, #0]
 800dc98:	70eb      	strb	r3, [r5, #3]
 800dc9a:	6923      	ldr	r3, [r4, #16]
 800dc9c:	68a2      	ldr	r2, [r4, #8]
 800dc9e:	7da0      	ldrb	r0, [r4, #22]
 800dca0:	2104      	movs	r1, #4
 800dca2:	3304      	adds	r3, #4
 800dca4:	444a      	add	r2, r9
 800dca6:	1bdb      	subs	r3, r3, r7
 800dca8:	7561      	strb	r1, [r4, #21]
 800dcaa:	60a2      	str	r2, [r4, #8]
 800dcac:	6123      	str	r3, [r4, #16]
 800dcae:	f080 0001 	eor.w	r0, r0, #1
 800dcb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcb6:	2104      	movs	r1, #4
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f000 fbd3 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800dcbe:	b1b0      	cbz	r0, 800dcee <ucdr_deserialize_uint32_t+0xc6>
 800dcc0:	7d23      	ldrb	r3, [r4, #20]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	68a3      	ldr	r3, [r4, #8]
 800dcc6:	d017      	beq.n	800dcf8 <ucdr_deserialize_uint32_t+0xd0>
 800dcc8:	78db      	ldrb	r3, [r3, #3]
 800dcca:	702b      	strb	r3, [r5, #0]
 800dccc:	68a3      	ldr	r3, [r4, #8]
 800dcce:	789b      	ldrb	r3, [r3, #2]
 800dcd0:	706b      	strb	r3, [r5, #1]
 800dcd2:	68a3      	ldr	r3, [r4, #8]
 800dcd4:	785b      	ldrb	r3, [r3, #1]
 800dcd6:	70ab      	strb	r3, [r5, #2]
 800dcd8:	68a3      	ldr	r3, [r4, #8]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	70eb      	strb	r3, [r5, #3]
 800dcde:	68a2      	ldr	r2, [r4, #8]
 800dce0:	6923      	ldr	r3, [r4, #16]
 800dce2:	3204      	adds	r2, #4
 800dce4:	3304      	adds	r3, #4
 800dce6:	2104      	movs	r1, #4
 800dce8:	60a2      	str	r2, [r4, #8]
 800dcea:	6123      	str	r3, [r4, #16]
 800dcec:	7561      	strb	r1, [r4, #21]
 800dcee:	7da0      	ldrb	r0, [r4, #22]
 800dcf0:	f080 0001 	eor.w	r0, r0, #1
 800dcf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	602b      	str	r3, [r5, #0]
 800dcfc:	e7ef      	b.n	800dcde <ucdr_deserialize_uint32_t+0xb6>
 800dcfe:	68a2      	ldr	r2, [r4, #8]
 800dd00:	6923      	ldr	r3, [r4, #16]
 800dd02:	7da0      	ldrb	r0, [r4, #22]
 800dd04:	f884 8015 	strb.w	r8, [r4, #21]
 800dd08:	1bd2      	subs	r2, r2, r7
 800dd0a:	1bdb      	subs	r3, r3, r7
 800dd0c:	60a2      	str	r2, [r4, #8]
 800dd0e:	6123      	str	r3, [r4, #16]
 800dd10:	f080 0001 	eor.w	r0, r0, #1
 800dd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd18:	68a3      	ldr	r3, [r4, #8]
 800dd1a:	789b      	ldrb	r3, [r3, #2]
 800dd1c:	706b      	strb	r3, [r5, #1]
 800dd1e:	1cab      	adds	r3, r5, #2
 800dd20:	68a2      	ldr	r2, [r4, #8]
 800dd22:	7852      	ldrb	r2, [r2, #1]
 800dd24:	f803 2b01 	strb.w	r2, [r3], #1
 800dd28:	68a2      	ldr	r2, [r4, #8]
 800dd2a:	7812      	ldrb	r2, [r2, #0]
 800dd2c:	701a      	strb	r2, [r3, #0]
 800dd2e:	e7b4      	b.n	800dc9a <ucdr_deserialize_uint32_t+0x72>
 800dd30:	4631      	mov	r1, r6
 800dd32:	463a      	mov	r2, r7
 800dd34:	4628      	mov	r0, r5
 800dd36:	f009 ff78 	bl	8017c2a <memcpy>
 800dd3a:	68a1      	ldr	r1, [r4, #8]
 800dd3c:	464a      	mov	r2, r9
 800dd3e:	19e8      	adds	r0, r5, r7
 800dd40:	f009 ff73 	bl	8017c2a <memcpy>
 800dd44:	e7a9      	b.n	800dc9a <ucdr_deserialize_uint32_t+0x72>
 800dd46:	bf00      	nop

0800dd48 <ucdr_deserialize_endian_uint32_t>:
 800dd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd4c:	460e      	mov	r6, r1
 800dd4e:	2104      	movs	r1, #4
 800dd50:	4604      	mov	r4, r0
 800dd52:	4615      	mov	r5, r2
 800dd54:	f000 fbda 	bl	800e50c <ucdr_buffer_alignment>
 800dd58:	4601      	mov	r1, r0
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dd60:	f000 fc18 	bl	800e594 <ucdr_advance_buffer>
 800dd64:	2104      	movs	r1, #4
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fb70 	bl	800e44c <ucdr_check_buffer_available_for>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d13c      	bne.n	800ddea <ucdr_deserialize_endian_uint32_t+0xa2>
 800dd70:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800dd74:	42bb      	cmp	r3, r7
 800dd76:	d933      	bls.n	800dde0 <ucdr_deserialize_endian_uint32_t+0x98>
 800dd78:	eba3 0807 	sub.w	r8, r3, r7
 800dd7c:	60a3      	str	r3, [r4, #8]
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	f1c8 0a04 	rsb	sl, r8, #4
 800dd84:	4443      	add	r3, r8
 800dd86:	6123      	str	r3, [r4, #16]
 800dd88:	4651      	mov	r1, sl
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f000 fb6a 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d048      	beq.n	800de26 <ucdr_deserialize_endian_uint32_t+0xde>
 800dd94:	2e01      	cmp	r6, #1
 800dd96:	d061      	beq.n	800de5c <ucdr_deserialize_endian_uint32_t+0x114>
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	702b      	strb	r3, [r5, #0]
 800dd9c:	f1b8 0f00 	cmp.w	r8, #0
 800dda0:	d050      	beq.n	800de44 <ucdr_deserialize_endian_uint32_t+0xfc>
 800dda2:	78bb      	ldrb	r3, [r7, #2]
 800dda4:	706b      	strb	r3, [r5, #1]
 800dda6:	f1b8 0f01 	cmp.w	r8, #1
 800ddaa:	f105 0302 	add.w	r3, r5, #2
 800ddae:	d04d      	beq.n	800de4c <ucdr_deserialize_endian_uint32_t+0x104>
 800ddb0:	787b      	ldrb	r3, [r7, #1]
 800ddb2:	70ab      	strb	r3, [r5, #2]
 800ddb4:	f1b8 0f02 	cmp.w	r8, #2
 800ddb8:	f105 0303 	add.w	r3, r5, #3
 800ddbc:	d04a      	beq.n	800de54 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ddbe:	783b      	ldrb	r3, [r7, #0]
 800ddc0:	70eb      	strb	r3, [r5, #3]
 800ddc2:	6923      	ldr	r3, [r4, #16]
 800ddc4:	68a2      	ldr	r2, [r4, #8]
 800ddc6:	7da0      	ldrb	r0, [r4, #22]
 800ddc8:	2104      	movs	r1, #4
 800ddca:	3304      	adds	r3, #4
 800ddcc:	4452      	add	r2, sl
 800ddce:	eba3 0308 	sub.w	r3, r3, r8
 800ddd2:	7561      	strb	r1, [r4, #21]
 800ddd4:	60a2      	str	r2, [r4, #8]
 800ddd6:	6123      	str	r3, [r4, #16]
 800ddd8:	f080 0001 	eor.w	r0, r0, #1
 800dddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde0:	2104      	movs	r1, #4
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 fb3e 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800dde8:	b1a8      	cbz	r0, 800de16 <ucdr_deserialize_endian_uint32_t+0xce>
 800ddea:	2e01      	cmp	r6, #1
 800ddec:	68a3      	ldr	r3, [r4, #8]
 800ddee:	d017      	beq.n	800de20 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ddf0:	78db      	ldrb	r3, [r3, #3]
 800ddf2:	702b      	strb	r3, [r5, #0]
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	789b      	ldrb	r3, [r3, #2]
 800ddf8:	706b      	strb	r3, [r5, #1]
 800ddfa:	68a3      	ldr	r3, [r4, #8]
 800ddfc:	785b      	ldrb	r3, [r3, #1]
 800ddfe:	70ab      	strb	r3, [r5, #2]
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	70eb      	strb	r3, [r5, #3]
 800de06:	68a2      	ldr	r2, [r4, #8]
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	3204      	adds	r2, #4
 800de0c:	3304      	adds	r3, #4
 800de0e:	2104      	movs	r1, #4
 800de10:	60a2      	str	r2, [r4, #8]
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	7561      	strb	r1, [r4, #21]
 800de16:	7da0      	ldrb	r0, [r4, #22]
 800de18:	f080 0001 	eor.w	r0, r0, #1
 800de1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	602b      	str	r3, [r5, #0]
 800de24:	e7ef      	b.n	800de06 <ucdr_deserialize_endian_uint32_t+0xbe>
 800de26:	68a2      	ldr	r2, [r4, #8]
 800de28:	6923      	ldr	r3, [r4, #16]
 800de2a:	7da0      	ldrb	r0, [r4, #22]
 800de2c:	f884 9015 	strb.w	r9, [r4, #21]
 800de30:	eba2 0208 	sub.w	r2, r2, r8
 800de34:	eba3 0308 	sub.w	r3, r3, r8
 800de38:	60a2      	str	r2, [r4, #8]
 800de3a:	6123      	str	r3, [r4, #16]
 800de3c:	f080 0001 	eor.w	r0, r0, #1
 800de40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de44:	68a3      	ldr	r3, [r4, #8]
 800de46:	789b      	ldrb	r3, [r3, #2]
 800de48:	706b      	strb	r3, [r5, #1]
 800de4a:	1cab      	adds	r3, r5, #2
 800de4c:	68a2      	ldr	r2, [r4, #8]
 800de4e:	7852      	ldrb	r2, [r2, #1]
 800de50:	f803 2b01 	strb.w	r2, [r3], #1
 800de54:	68a2      	ldr	r2, [r4, #8]
 800de56:	7812      	ldrb	r2, [r2, #0]
 800de58:	701a      	strb	r2, [r3, #0]
 800de5a:	e7b2      	b.n	800ddc2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800de5c:	4639      	mov	r1, r7
 800de5e:	4642      	mov	r2, r8
 800de60:	4628      	mov	r0, r5
 800de62:	f009 fee2 	bl	8017c2a <memcpy>
 800de66:	68a1      	ldr	r1, [r4, #8]
 800de68:	4652      	mov	r2, sl
 800de6a:	eb05 0008 	add.w	r0, r5, r8
 800de6e:	f009 fedc 	bl	8017c2a <memcpy>
 800de72:	e7a6      	b.n	800ddc2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800de74 <ucdr_serialize_uint64_t>:
 800de74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de78:	2108      	movs	r1, #8
 800de7a:	b082      	sub	sp, #8
 800de7c:	4604      	mov	r4, r0
 800de7e:	e9cd 2300 	strd	r2, r3, [sp]
 800de82:	f000 fb43 	bl	800e50c <ucdr_buffer_alignment>
 800de86:	4601      	mov	r1, r0
 800de88:	4620      	mov	r0, r4
 800de8a:	7d67      	ldrb	r7, [r4, #21]
 800de8c:	f000 fb82 	bl	800e594 <ucdr_advance_buffer>
 800de90:	2108      	movs	r1, #8
 800de92:	4620      	mov	r0, r4
 800de94:	f000 fada 	bl	800e44c <ucdr_check_buffer_available_for>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d14e      	bne.n	800df3a <ucdr_serialize_uint64_t+0xc6>
 800de9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dea0:	42ab      	cmp	r3, r5
 800dea2:	d945      	bls.n	800df30 <ucdr_serialize_uint64_t+0xbc>
 800dea4:	1b5e      	subs	r6, r3, r5
 800dea6:	60a3      	str	r3, [r4, #8]
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	f1c6 0808 	rsb	r8, r6, #8
 800deae:	4433      	add	r3, r6
 800deb0:	6123      	str	r3, [r4, #16]
 800deb2:	4641      	mov	r1, r8
 800deb4:	4620      	mov	r0, r4
 800deb6:	f000 fad5 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800deba:	2800      	cmp	r0, #0
 800debc:	d074      	beq.n	800dfa8 <ucdr_serialize_uint64_t+0x134>
 800debe:	7d23      	ldrb	r3, [r4, #20]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	f000 809b 	beq.w	800dffc <ucdr_serialize_uint64_t+0x188>
 800dec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800deca:	702b      	strb	r3, [r5, #0]
 800decc:	2e00      	cmp	r6, #0
 800dece:	d078      	beq.n	800dfc2 <ucdr_serialize_uint64_t+0x14e>
 800ded0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ded4:	706b      	strb	r3, [r5, #1]
 800ded6:	2e01      	cmp	r6, #1
 800ded8:	d077      	beq.n	800dfca <ucdr_serialize_uint64_t+0x156>
 800deda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dede:	70ab      	strb	r3, [r5, #2]
 800dee0:	2e02      	cmp	r6, #2
 800dee2:	d076      	beq.n	800dfd2 <ucdr_serialize_uint64_t+0x15e>
 800dee4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dee8:	70eb      	strb	r3, [r5, #3]
 800deea:	2e03      	cmp	r6, #3
 800deec:	d075      	beq.n	800dfda <ucdr_serialize_uint64_t+0x166>
 800deee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800def2:	712b      	strb	r3, [r5, #4]
 800def4:	2e04      	cmp	r6, #4
 800def6:	d074      	beq.n	800dfe2 <ucdr_serialize_uint64_t+0x16e>
 800def8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800defc:	716b      	strb	r3, [r5, #5]
 800defe:	2e05      	cmp	r6, #5
 800df00:	d073      	beq.n	800dfea <ucdr_serialize_uint64_t+0x176>
 800df02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800df06:	71ab      	strb	r3, [r5, #6]
 800df08:	2e06      	cmp	r6, #6
 800df0a:	d072      	beq.n	800dff2 <ucdr_serialize_uint64_t+0x17e>
 800df0c:	f89d 3000 	ldrb.w	r3, [sp]
 800df10:	71eb      	strb	r3, [r5, #7]
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	68a2      	ldr	r2, [r4, #8]
 800df16:	7da0      	ldrb	r0, [r4, #22]
 800df18:	3308      	adds	r3, #8
 800df1a:	1b9e      	subs	r6, r3, r6
 800df1c:	4442      	add	r2, r8
 800df1e:	2308      	movs	r3, #8
 800df20:	f080 0001 	eor.w	r0, r0, #1
 800df24:	60a2      	str	r2, [r4, #8]
 800df26:	6126      	str	r6, [r4, #16]
 800df28:	7563      	strb	r3, [r4, #21]
 800df2a:	b002      	add	sp, #8
 800df2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df30:	2108      	movs	r1, #8
 800df32:	4620      	mov	r0, r4
 800df34:	f000 fa96 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800df38:	b350      	cbz	r0, 800df90 <ucdr_serialize_uint64_t+0x11c>
 800df3a:	7d23      	ldrb	r3, [r4, #20]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d02d      	beq.n	800df9c <ucdr_serialize_uint64_t+0x128>
 800df40:	68a3      	ldr	r3, [r4, #8]
 800df42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800df46:	701a      	strb	r2, [r3, #0]
 800df48:	68a3      	ldr	r3, [r4, #8]
 800df4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df4e:	705a      	strb	r2, [r3, #1]
 800df50:	68a3      	ldr	r3, [r4, #8]
 800df52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df56:	709a      	strb	r2, [r3, #2]
 800df58:	68a3      	ldr	r3, [r4, #8]
 800df5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df5e:	70da      	strb	r2, [r3, #3]
 800df60:	68a3      	ldr	r3, [r4, #8]
 800df62:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df66:	711a      	strb	r2, [r3, #4]
 800df68:	68a3      	ldr	r3, [r4, #8]
 800df6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800df6e:	715a      	strb	r2, [r3, #5]
 800df70:	68a3      	ldr	r3, [r4, #8]
 800df72:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800df76:	719a      	strb	r2, [r3, #6]
 800df78:	68a3      	ldr	r3, [r4, #8]
 800df7a:	f89d 2000 	ldrb.w	r2, [sp]
 800df7e:	71da      	strb	r2, [r3, #7]
 800df80:	68a2      	ldr	r2, [r4, #8]
 800df82:	6923      	ldr	r3, [r4, #16]
 800df84:	3208      	adds	r2, #8
 800df86:	3308      	adds	r3, #8
 800df88:	2108      	movs	r1, #8
 800df8a:	60a2      	str	r2, [r4, #8]
 800df8c:	6123      	str	r3, [r4, #16]
 800df8e:	7561      	strb	r1, [r4, #21]
 800df90:	7da0      	ldrb	r0, [r4, #22]
 800df92:	f080 0001 	eor.w	r0, r0, #1
 800df96:	b002      	add	sp, #8
 800df98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df9c:	466b      	mov	r3, sp
 800df9e:	cb03      	ldmia	r3!, {r0, r1}
 800dfa0:	68a3      	ldr	r3, [r4, #8]
 800dfa2:	6018      	str	r0, [r3, #0]
 800dfa4:	6059      	str	r1, [r3, #4]
 800dfa6:	e7eb      	b.n	800df80 <ucdr_serialize_uint64_t+0x10c>
 800dfa8:	68a2      	ldr	r2, [r4, #8]
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	7da0      	ldrb	r0, [r4, #22]
 800dfae:	7567      	strb	r7, [r4, #21]
 800dfb0:	1b92      	subs	r2, r2, r6
 800dfb2:	1b9b      	subs	r3, r3, r6
 800dfb4:	f080 0001 	eor.w	r0, r0, #1
 800dfb8:	60a2      	str	r2, [r4, #8]
 800dfba:	6123      	str	r3, [r4, #16]
 800dfbc:	b002      	add	sp, #8
 800dfbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc2:	68a3      	ldr	r3, [r4, #8]
 800dfc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	68a3      	ldr	r3, [r4, #8]
 800dfcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dfd0:	701a      	strb	r2, [r3, #0]
 800dfd2:	68a3      	ldr	r3, [r4, #8]
 800dfd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dfd8:	701a      	strb	r2, [r3, #0]
 800dfda:	68a3      	ldr	r3, [r4, #8]
 800dfdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dfe0:	701a      	strb	r2, [r3, #0]
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dfe8:	701a      	strb	r2, [r3, #0]
 800dfea:	68a3      	ldr	r3, [r4, #8]
 800dfec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dff0:	701a      	strb	r2, [r3, #0]
 800dff2:	68a3      	ldr	r3, [r4, #8]
 800dff4:	f89d 2000 	ldrb.w	r2, [sp]
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	e78a      	b.n	800df12 <ucdr_serialize_uint64_t+0x9e>
 800dffc:	4628      	mov	r0, r5
 800dffe:	466d      	mov	r5, sp
 800e000:	4629      	mov	r1, r5
 800e002:	4632      	mov	r2, r6
 800e004:	f009 fe11 	bl	8017c2a <memcpy>
 800e008:	68a0      	ldr	r0, [r4, #8]
 800e00a:	4642      	mov	r2, r8
 800e00c:	19a9      	adds	r1, r5, r6
 800e00e:	f009 fe0c 	bl	8017c2a <memcpy>
 800e012:	e77e      	b.n	800df12 <ucdr_serialize_uint64_t+0x9e>

0800e014 <ucdr_serialize_int16_t>:
 800e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e018:	b082      	sub	sp, #8
 800e01a:	460b      	mov	r3, r1
 800e01c:	2102      	movs	r1, #2
 800e01e:	4604      	mov	r4, r0
 800e020:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e024:	f000 fa72 	bl	800e50c <ucdr_buffer_alignment>
 800e028:	4601      	mov	r1, r0
 800e02a:	4620      	mov	r0, r4
 800e02c:	7d67      	ldrb	r7, [r4, #21]
 800e02e:	f000 fab1 	bl	800e594 <ucdr_advance_buffer>
 800e032:	2102      	movs	r1, #2
 800e034:	4620      	mov	r0, r4
 800e036:	f000 fa09 	bl	800e44c <ucdr_check_buffer_available_for>
 800e03a:	bb78      	cbnz	r0, 800e09c <ucdr_serialize_int16_t+0x88>
 800e03c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e040:	42ab      	cmp	r3, r5
 800e042:	d926      	bls.n	800e092 <ucdr_serialize_int16_t+0x7e>
 800e044:	1b5e      	subs	r6, r3, r5
 800e046:	60a3      	str	r3, [r4, #8]
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	f1c6 0802 	rsb	r8, r6, #2
 800e04e:	4433      	add	r3, r6
 800e050:	6123      	str	r3, [r4, #16]
 800e052:	4641      	mov	r1, r8
 800e054:	4620      	mov	r0, r4
 800e056:	f000 fa05 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e05a:	2800      	cmp	r0, #0
 800e05c:	d03b      	beq.n	800e0d6 <ucdr_serialize_int16_t+0xc2>
 800e05e:	7d23      	ldrb	r3, [r4, #20]
 800e060:	2b01      	cmp	r3, #1
 800e062:	d04a      	beq.n	800e0fa <ucdr_serialize_int16_t+0xe6>
 800e064:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e068:	702b      	strb	r3, [r5, #0]
 800e06a:	2e00      	cmp	r6, #0
 800e06c:	d040      	beq.n	800e0f0 <ucdr_serialize_int16_t+0xdc>
 800e06e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e072:	706b      	strb	r3, [r5, #1]
 800e074:	6923      	ldr	r3, [r4, #16]
 800e076:	68a2      	ldr	r2, [r4, #8]
 800e078:	7da0      	ldrb	r0, [r4, #22]
 800e07a:	3302      	adds	r3, #2
 800e07c:	1b9e      	subs	r6, r3, r6
 800e07e:	4442      	add	r2, r8
 800e080:	2302      	movs	r3, #2
 800e082:	f080 0001 	eor.w	r0, r0, #1
 800e086:	60a2      	str	r2, [r4, #8]
 800e088:	6126      	str	r6, [r4, #16]
 800e08a:	7563      	strb	r3, [r4, #21]
 800e08c:	b002      	add	sp, #8
 800e08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e092:	2102      	movs	r1, #2
 800e094:	4620      	mov	r0, r4
 800e096:	f000 f9e5 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e09a:	b190      	cbz	r0, 800e0c2 <ucdr_serialize_int16_t+0xae>
 800e09c:	7d23      	ldrb	r3, [r4, #20]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	d014      	beq.n	800e0ce <ucdr_serialize_int16_t+0xba>
 800e0a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e0a8:	701a      	strb	r2, [r3, #0]
 800e0aa:	68a3      	ldr	r3, [r4, #8]
 800e0ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0b0:	705a      	strb	r2, [r3, #1]
 800e0b2:	68a2      	ldr	r2, [r4, #8]
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	3202      	adds	r2, #2
 800e0b8:	3302      	adds	r3, #2
 800e0ba:	2102      	movs	r1, #2
 800e0bc:	60a2      	str	r2, [r4, #8]
 800e0be:	6123      	str	r3, [r4, #16]
 800e0c0:	7561      	strb	r1, [r4, #21]
 800e0c2:	7da0      	ldrb	r0, [r4, #22]
 800e0c4:	f080 0001 	eor.w	r0, r0, #1
 800e0c8:	b002      	add	sp, #8
 800e0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e0d2:	801a      	strh	r2, [r3, #0]
 800e0d4:	e7ed      	b.n	800e0b2 <ucdr_serialize_int16_t+0x9e>
 800e0d6:	68a2      	ldr	r2, [r4, #8]
 800e0d8:	6923      	ldr	r3, [r4, #16]
 800e0da:	7da0      	ldrb	r0, [r4, #22]
 800e0dc:	7567      	strb	r7, [r4, #21]
 800e0de:	1b92      	subs	r2, r2, r6
 800e0e0:	1b9b      	subs	r3, r3, r6
 800e0e2:	f080 0001 	eor.w	r0, r0, #1
 800e0e6:	60a2      	str	r2, [r4, #8]
 800e0e8:	6123      	str	r3, [r4, #16]
 800e0ea:	b002      	add	sp, #8
 800e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f0:	68a3      	ldr	r3, [r4, #8]
 800e0f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0f6:	701a      	strb	r2, [r3, #0]
 800e0f8:	e7bc      	b.n	800e074 <ucdr_serialize_int16_t+0x60>
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f10d 0506 	add.w	r5, sp, #6
 800e100:	4629      	mov	r1, r5
 800e102:	4632      	mov	r2, r6
 800e104:	f009 fd91 	bl	8017c2a <memcpy>
 800e108:	68a0      	ldr	r0, [r4, #8]
 800e10a:	4642      	mov	r2, r8
 800e10c:	19a9      	adds	r1, r5, r6
 800e10e:	f009 fd8c 	bl	8017c2a <memcpy>
 800e112:	e7af      	b.n	800e074 <ucdr_serialize_int16_t+0x60>

0800e114 <ucdr_deserialize_int16_t>:
 800e114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e118:	460d      	mov	r5, r1
 800e11a:	2102      	movs	r1, #2
 800e11c:	4604      	mov	r4, r0
 800e11e:	f000 f9f5 	bl	800e50c <ucdr_buffer_alignment>
 800e122:	4601      	mov	r1, r0
 800e124:	4620      	mov	r0, r4
 800e126:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e12a:	f000 fa33 	bl	800e594 <ucdr_advance_buffer>
 800e12e:	2102      	movs	r1, #2
 800e130:	4620      	mov	r0, r4
 800e132:	f000 f98b 	bl	800e44c <ucdr_check_buffer_available_for>
 800e136:	bb60      	cbnz	r0, 800e192 <ucdr_deserialize_int16_t+0x7e>
 800e138:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e13c:	42be      	cmp	r6, r7
 800e13e:	d923      	bls.n	800e188 <ucdr_deserialize_int16_t+0x74>
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	60a6      	str	r6, [r4, #8]
 800e144:	1bf6      	subs	r6, r6, r7
 800e146:	4433      	add	r3, r6
 800e148:	f1c6 0902 	rsb	r9, r6, #2
 800e14c:	6123      	str	r3, [r4, #16]
 800e14e:	4649      	mov	r1, r9
 800e150:	4620      	mov	r0, r4
 800e152:	f000 f987 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e156:	2800      	cmp	r0, #0
 800e158:	d034      	beq.n	800e1c4 <ucdr_deserialize_int16_t+0xb0>
 800e15a:	7d23      	ldrb	r3, [r4, #20]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d042      	beq.n	800e1e6 <ucdr_deserialize_int16_t+0xd2>
 800e160:	787b      	ldrb	r3, [r7, #1]
 800e162:	702b      	strb	r3, [r5, #0]
 800e164:	2e00      	cmp	r6, #0
 800e166:	d03a      	beq.n	800e1de <ucdr_deserialize_int16_t+0xca>
 800e168:	783b      	ldrb	r3, [r7, #0]
 800e16a:	706b      	strb	r3, [r5, #1]
 800e16c:	6923      	ldr	r3, [r4, #16]
 800e16e:	68a2      	ldr	r2, [r4, #8]
 800e170:	7da0      	ldrb	r0, [r4, #22]
 800e172:	2102      	movs	r1, #2
 800e174:	3302      	adds	r3, #2
 800e176:	444a      	add	r2, r9
 800e178:	1b9b      	subs	r3, r3, r6
 800e17a:	7561      	strb	r1, [r4, #21]
 800e17c:	60a2      	str	r2, [r4, #8]
 800e17e:	6123      	str	r3, [r4, #16]
 800e180:	f080 0001 	eor.w	r0, r0, #1
 800e184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e188:	2102      	movs	r1, #2
 800e18a:	4620      	mov	r0, r4
 800e18c:	f000 f96a 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e190:	b180      	cbz	r0, 800e1b4 <ucdr_deserialize_int16_t+0xa0>
 800e192:	7d23      	ldrb	r3, [r4, #20]
 800e194:	2b01      	cmp	r3, #1
 800e196:	68a3      	ldr	r3, [r4, #8]
 800e198:	d011      	beq.n	800e1be <ucdr_deserialize_int16_t+0xaa>
 800e19a:	785b      	ldrb	r3, [r3, #1]
 800e19c:	702b      	strb	r3, [r5, #0]
 800e19e:	68a3      	ldr	r3, [r4, #8]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	706b      	strb	r3, [r5, #1]
 800e1a4:	68a2      	ldr	r2, [r4, #8]
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	3202      	adds	r2, #2
 800e1aa:	3302      	adds	r3, #2
 800e1ac:	2102      	movs	r1, #2
 800e1ae:	60a2      	str	r2, [r4, #8]
 800e1b0:	6123      	str	r3, [r4, #16]
 800e1b2:	7561      	strb	r1, [r4, #21]
 800e1b4:	7da0      	ldrb	r0, [r4, #22]
 800e1b6:	f080 0001 	eor.w	r0, r0, #1
 800e1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1be:	881b      	ldrh	r3, [r3, #0]
 800e1c0:	802b      	strh	r3, [r5, #0]
 800e1c2:	e7ef      	b.n	800e1a4 <ucdr_deserialize_int16_t+0x90>
 800e1c4:	68a2      	ldr	r2, [r4, #8]
 800e1c6:	6923      	ldr	r3, [r4, #16]
 800e1c8:	7da0      	ldrb	r0, [r4, #22]
 800e1ca:	f884 8015 	strb.w	r8, [r4, #21]
 800e1ce:	1b92      	subs	r2, r2, r6
 800e1d0:	1b9b      	subs	r3, r3, r6
 800e1d2:	60a2      	str	r2, [r4, #8]
 800e1d4:	6123      	str	r3, [r4, #16]
 800e1d6:	f080 0001 	eor.w	r0, r0, #1
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	68a3      	ldr	r3, [r4, #8]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	706b      	strb	r3, [r5, #1]
 800e1e4:	e7c2      	b.n	800e16c <ucdr_deserialize_int16_t+0x58>
 800e1e6:	4639      	mov	r1, r7
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f009 fd1d 	bl	8017c2a <memcpy>
 800e1f0:	68a1      	ldr	r1, [r4, #8]
 800e1f2:	464a      	mov	r2, r9
 800e1f4:	19a8      	adds	r0, r5, r6
 800e1f6:	f009 fd18 	bl	8017c2a <memcpy>
 800e1fa:	e7b7      	b.n	800e16c <ucdr_deserialize_int16_t+0x58>

0800e1fc <ucdr_serialize_int32_t>:
 800e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e200:	b082      	sub	sp, #8
 800e202:	4604      	mov	r4, r0
 800e204:	9101      	str	r1, [sp, #4]
 800e206:	2104      	movs	r1, #4
 800e208:	f000 f980 	bl	800e50c <ucdr_buffer_alignment>
 800e20c:	4601      	mov	r1, r0
 800e20e:	4620      	mov	r0, r4
 800e210:	7d67      	ldrb	r7, [r4, #21]
 800e212:	f000 f9bf 	bl	800e594 <ucdr_advance_buffer>
 800e216:	2104      	movs	r1, #4
 800e218:	4620      	mov	r0, r4
 800e21a:	f000 f917 	bl	800e44c <ucdr_check_buffer_available_for>
 800e21e:	2800      	cmp	r0, #0
 800e220:	d139      	bne.n	800e296 <ucdr_serialize_int32_t+0x9a>
 800e222:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e226:	42ab      	cmp	r3, r5
 800e228:	d930      	bls.n	800e28c <ucdr_serialize_int32_t+0x90>
 800e22a:	1b5e      	subs	r6, r3, r5
 800e22c:	60a3      	str	r3, [r4, #8]
 800e22e:	6923      	ldr	r3, [r4, #16]
 800e230:	f1c6 0804 	rsb	r8, r6, #4
 800e234:	4433      	add	r3, r6
 800e236:	6123      	str	r3, [r4, #16]
 800e238:	4641      	mov	r1, r8
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 f912 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e240:	2800      	cmp	r0, #0
 800e242:	d04c      	beq.n	800e2de <ucdr_serialize_int32_t+0xe2>
 800e244:	7d23      	ldrb	r3, [r4, #20]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d063      	beq.n	800e312 <ucdr_serialize_int32_t+0x116>
 800e24a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e24e:	702b      	strb	r3, [r5, #0]
 800e250:	2e00      	cmp	r6, #0
 800e252:	d051      	beq.n	800e2f8 <ucdr_serialize_int32_t+0xfc>
 800e254:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e258:	706b      	strb	r3, [r5, #1]
 800e25a:	2e01      	cmp	r6, #1
 800e25c:	d050      	beq.n	800e300 <ucdr_serialize_int32_t+0x104>
 800e25e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e262:	70ab      	strb	r3, [r5, #2]
 800e264:	2e02      	cmp	r6, #2
 800e266:	d04f      	beq.n	800e308 <ucdr_serialize_int32_t+0x10c>
 800e268:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e26c:	70eb      	strb	r3, [r5, #3]
 800e26e:	6923      	ldr	r3, [r4, #16]
 800e270:	68a2      	ldr	r2, [r4, #8]
 800e272:	7da0      	ldrb	r0, [r4, #22]
 800e274:	3304      	adds	r3, #4
 800e276:	1b9e      	subs	r6, r3, r6
 800e278:	4442      	add	r2, r8
 800e27a:	2304      	movs	r3, #4
 800e27c:	f080 0001 	eor.w	r0, r0, #1
 800e280:	60a2      	str	r2, [r4, #8]
 800e282:	6126      	str	r6, [r4, #16]
 800e284:	7563      	strb	r3, [r4, #21]
 800e286:	b002      	add	sp, #8
 800e288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e28c:	2104      	movs	r1, #4
 800e28e:	4620      	mov	r0, r4
 800e290:	f000 f8e8 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e294:	b1d0      	cbz	r0, 800e2cc <ucdr_serialize_int32_t+0xd0>
 800e296:	7d23      	ldrb	r3, [r4, #20]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	68a3      	ldr	r3, [r4, #8]
 800e29c:	d01c      	beq.n	800e2d8 <ucdr_serialize_int32_t+0xdc>
 800e29e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	68a3      	ldr	r3, [r4, #8]
 800e2a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2aa:	705a      	strb	r2, [r3, #1]
 800e2ac:	68a3      	ldr	r3, [r4, #8]
 800e2ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e2b2:	709a      	strb	r2, [r3, #2]
 800e2b4:	68a3      	ldr	r3, [r4, #8]
 800e2b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e2ba:	70da      	strb	r2, [r3, #3]
 800e2bc:	68a2      	ldr	r2, [r4, #8]
 800e2be:	6923      	ldr	r3, [r4, #16]
 800e2c0:	3204      	adds	r2, #4
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	2104      	movs	r1, #4
 800e2c6:	60a2      	str	r2, [r4, #8]
 800e2c8:	6123      	str	r3, [r4, #16]
 800e2ca:	7561      	strb	r1, [r4, #21]
 800e2cc:	7da0      	ldrb	r0, [r4, #22]
 800e2ce:	f080 0001 	eor.w	r0, r0, #1
 800e2d2:	b002      	add	sp, #8
 800e2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d8:	9a01      	ldr	r2, [sp, #4]
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	e7ee      	b.n	800e2bc <ucdr_serialize_int32_t+0xc0>
 800e2de:	68a2      	ldr	r2, [r4, #8]
 800e2e0:	6923      	ldr	r3, [r4, #16]
 800e2e2:	7da0      	ldrb	r0, [r4, #22]
 800e2e4:	7567      	strb	r7, [r4, #21]
 800e2e6:	1b92      	subs	r2, r2, r6
 800e2e8:	1b9b      	subs	r3, r3, r6
 800e2ea:	f080 0001 	eor.w	r0, r0, #1
 800e2ee:	60a2      	str	r2, [r4, #8]
 800e2f0:	6123      	str	r3, [r4, #16]
 800e2f2:	b002      	add	sp, #8
 800e2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f8:	68a3      	ldr	r3, [r4, #8]
 800e2fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2fe:	701a      	strb	r2, [r3, #0]
 800e300:	68a3      	ldr	r3, [r4, #8]
 800e302:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e306:	701a      	strb	r2, [r3, #0]
 800e308:	68a3      	ldr	r3, [r4, #8]
 800e30a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e30e:	701a      	strb	r2, [r3, #0]
 800e310:	e7ad      	b.n	800e26e <ucdr_serialize_int32_t+0x72>
 800e312:	4628      	mov	r0, r5
 800e314:	ad01      	add	r5, sp, #4
 800e316:	4629      	mov	r1, r5
 800e318:	4632      	mov	r2, r6
 800e31a:	f009 fc86 	bl	8017c2a <memcpy>
 800e31e:	68a0      	ldr	r0, [r4, #8]
 800e320:	4642      	mov	r2, r8
 800e322:	19a9      	adds	r1, r5, r6
 800e324:	f009 fc81 	bl	8017c2a <memcpy>
 800e328:	e7a1      	b.n	800e26e <ucdr_serialize_int32_t+0x72>
 800e32a:	bf00      	nop

0800e32c <ucdr_deserialize_int32_t>:
 800e32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e330:	460d      	mov	r5, r1
 800e332:	2104      	movs	r1, #4
 800e334:	4604      	mov	r4, r0
 800e336:	f000 f8e9 	bl	800e50c <ucdr_buffer_alignment>
 800e33a:	4601      	mov	r1, r0
 800e33c:	4620      	mov	r0, r4
 800e33e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e342:	f000 f927 	bl	800e594 <ucdr_advance_buffer>
 800e346:	2104      	movs	r1, #4
 800e348:	4620      	mov	r0, r4
 800e34a:	f000 f87f 	bl	800e44c <ucdr_check_buffer_available_for>
 800e34e:	2800      	cmp	r0, #0
 800e350:	d138      	bne.n	800e3c4 <ucdr_deserialize_int32_t+0x98>
 800e352:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e356:	42b7      	cmp	r7, r6
 800e358:	d92f      	bls.n	800e3ba <ucdr_deserialize_int32_t+0x8e>
 800e35a:	6923      	ldr	r3, [r4, #16]
 800e35c:	60a7      	str	r7, [r4, #8]
 800e35e:	1bbf      	subs	r7, r7, r6
 800e360:	443b      	add	r3, r7
 800e362:	f1c7 0904 	rsb	r9, r7, #4
 800e366:	6123      	str	r3, [r4, #16]
 800e368:	4649      	mov	r1, r9
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 f87a 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e370:	2800      	cmp	r0, #0
 800e372:	d046      	beq.n	800e402 <ucdr_deserialize_int32_t+0xd6>
 800e374:	7d23      	ldrb	r3, [r4, #20]
 800e376:	2b01      	cmp	r3, #1
 800e378:	d05c      	beq.n	800e434 <ucdr_deserialize_int32_t+0x108>
 800e37a:	78f3      	ldrb	r3, [r6, #3]
 800e37c:	702b      	strb	r3, [r5, #0]
 800e37e:	2f00      	cmp	r7, #0
 800e380:	d04c      	beq.n	800e41c <ucdr_deserialize_int32_t+0xf0>
 800e382:	78b3      	ldrb	r3, [r6, #2]
 800e384:	706b      	strb	r3, [r5, #1]
 800e386:	2f01      	cmp	r7, #1
 800e388:	f105 0302 	add.w	r3, r5, #2
 800e38c:	d04a      	beq.n	800e424 <ucdr_deserialize_int32_t+0xf8>
 800e38e:	7873      	ldrb	r3, [r6, #1]
 800e390:	70ab      	strb	r3, [r5, #2]
 800e392:	2f02      	cmp	r7, #2
 800e394:	f105 0303 	add.w	r3, r5, #3
 800e398:	d048      	beq.n	800e42c <ucdr_deserialize_int32_t+0x100>
 800e39a:	7833      	ldrb	r3, [r6, #0]
 800e39c:	70eb      	strb	r3, [r5, #3]
 800e39e:	6923      	ldr	r3, [r4, #16]
 800e3a0:	68a2      	ldr	r2, [r4, #8]
 800e3a2:	7da0      	ldrb	r0, [r4, #22]
 800e3a4:	2104      	movs	r1, #4
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	444a      	add	r2, r9
 800e3aa:	1bdb      	subs	r3, r3, r7
 800e3ac:	7561      	strb	r1, [r4, #21]
 800e3ae:	60a2      	str	r2, [r4, #8]
 800e3b0:	6123      	str	r3, [r4, #16]
 800e3b2:	f080 0001 	eor.w	r0, r0, #1
 800e3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ba:	2104      	movs	r1, #4
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 f851 	bl	800e464 <ucdr_check_final_buffer_behavior>
 800e3c2:	b1b0      	cbz	r0, 800e3f2 <ucdr_deserialize_int32_t+0xc6>
 800e3c4:	7d23      	ldrb	r3, [r4, #20]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	68a3      	ldr	r3, [r4, #8]
 800e3ca:	d017      	beq.n	800e3fc <ucdr_deserialize_int32_t+0xd0>
 800e3cc:	78db      	ldrb	r3, [r3, #3]
 800e3ce:	702b      	strb	r3, [r5, #0]
 800e3d0:	68a3      	ldr	r3, [r4, #8]
 800e3d2:	789b      	ldrb	r3, [r3, #2]
 800e3d4:	706b      	strb	r3, [r5, #1]
 800e3d6:	68a3      	ldr	r3, [r4, #8]
 800e3d8:	785b      	ldrb	r3, [r3, #1]
 800e3da:	70ab      	strb	r3, [r5, #2]
 800e3dc:	68a3      	ldr	r3, [r4, #8]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	70eb      	strb	r3, [r5, #3]
 800e3e2:	68a2      	ldr	r2, [r4, #8]
 800e3e4:	6923      	ldr	r3, [r4, #16]
 800e3e6:	3204      	adds	r2, #4
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	2104      	movs	r1, #4
 800e3ec:	60a2      	str	r2, [r4, #8]
 800e3ee:	6123      	str	r3, [r4, #16]
 800e3f0:	7561      	strb	r1, [r4, #21]
 800e3f2:	7da0      	ldrb	r0, [r4, #22]
 800e3f4:	f080 0001 	eor.w	r0, r0, #1
 800e3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	602b      	str	r3, [r5, #0]
 800e400:	e7ef      	b.n	800e3e2 <ucdr_deserialize_int32_t+0xb6>
 800e402:	68a2      	ldr	r2, [r4, #8]
 800e404:	6923      	ldr	r3, [r4, #16]
 800e406:	7da0      	ldrb	r0, [r4, #22]
 800e408:	f884 8015 	strb.w	r8, [r4, #21]
 800e40c:	1bd2      	subs	r2, r2, r7
 800e40e:	1bdb      	subs	r3, r3, r7
 800e410:	60a2      	str	r2, [r4, #8]
 800e412:	6123      	str	r3, [r4, #16]
 800e414:	f080 0001 	eor.w	r0, r0, #1
 800e418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e41c:	68a3      	ldr	r3, [r4, #8]
 800e41e:	789b      	ldrb	r3, [r3, #2]
 800e420:	706b      	strb	r3, [r5, #1]
 800e422:	1cab      	adds	r3, r5, #2
 800e424:	68a2      	ldr	r2, [r4, #8]
 800e426:	7852      	ldrb	r2, [r2, #1]
 800e428:	f803 2b01 	strb.w	r2, [r3], #1
 800e42c:	68a2      	ldr	r2, [r4, #8]
 800e42e:	7812      	ldrb	r2, [r2, #0]
 800e430:	701a      	strb	r2, [r3, #0]
 800e432:	e7b4      	b.n	800e39e <ucdr_deserialize_int32_t+0x72>
 800e434:	4631      	mov	r1, r6
 800e436:	463a      	mov	r2, r7
 800e438:	4628      	mov	r0, r5
 800e43a:	f009 fbf6 	bl	8017c2a <memcpy>
 800e43e:	68a1      	ldr	r1, [r4, #8]
 800e440:	464a      	mov	r2, r9
 800e442:	19e8      	adds	r0, r5, r7
 800e444:	f009 fbf1 	bl	8017c2a <memcpy>
 800e448:	e7a9      	b.n	800e39e <ucdr_deserialize_int32_t+0x72>
 800e44a:	bf00      	nop

0800e44c <ucdr_check_buffer_available_for>:
 800e44c:	7d83      	ldrb	r3, [r0, #22]
 800e44e:	b93b      	cbnz	r3, 800e460 <ucdr_check_buffer_available_for+0x14>
 800e450:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e454:	4419      	add	r1, r3
 800e456:	4288      	cmp	r0, r1
 800e458:	bf34      	ite	cc
 800e45a:	2000      	movcc	r0, #0
 800e45c:	2001      	movcs	r0, #1
 800e45e:	4770      	bx	lr
 800e460:	2000      	movs	r0, #0
 800e462:	4770      	bx	lr

0800e464 <ucdr_check_final_buffer_behavior>:
 800e464:	7d83      	ldrb	r3, [r0, #22]
 800e466:	b943      	cbnz	r3, 800e47a <ucdr_check_final_buffer_behavior+0x16>
 800e468:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e46c:	4291      	cmp	r1, r2
 800e46e:	b510      	push	{r4, lr}
 800e470:	4604      	mov	r4, r0
 800e472:	d205      	bcs.n	800e480 <ucdr_check_final_buffer_behavior+0x1c>
 800e474:	2301      	movs	r3, #1
 800e476:	4618      	mov	r0, r3
 800e478:	bd10      	pop	{r4, pc}
 800e47a:	2300      	movs	r3, #0
 800e47c:	4618      	mov	r0, r3
 800e47e:	4770      	bx	lr
 800e480:	6982      	ldr	r2, [r0, #24]
 800e482:	b13a      	cbz	r2, 800e494 <ucdr_check_final_buffer_behavior+0x30>
 800e484:	69c1      	ldr	r1, [r0, #28]
 800e486:	4790      	blx	r2
 800e488:	f080 0301 	eor.w	r3, r0, #1
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	75a0      	strb	r0, [r4, #22]
 800e490:	4618      	mov	r0, r3
 800e492:	bd10      	pop	{r4, pc}
 800e494:	2001      	movs	r0, #1
 800e496:	75a0      	strb	r0, [r4, #22]
 800e498:	e7fa      	b.n	800e490 <ucdr_check_final_buffer_behavior+0x2c>
 800e49a:	bf00      	nop

0800e49c <ucdr_set_on_full_buffer_callback>:
 800e49c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop

0800e4a4 <ucdr_init_buffer_origin_offset_endian>:
 800e4a4:	b410      	push	{r4}
 800e4a6:	9c01      	ldr	r4, [sp, #4]
 800e4a8:	6001      	str	r1, [r0, #0]
 800e4aa:	440a      	add	r2, r1
 800e4ac:	6042      	str	r2, [r0, #4]
 800e4ae:	190a      	adds	r2, r1, r4
 800e4b0:	441c      	add	r4, r3
 800e4b2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e4b6:	6082      	str	r2, [r0, #8]
 800e4b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e4bc:	7503      	strb	r3, [r0, #20]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c8:	7542      	strb	r2, [r0, #21]
 800e4ca:	7582      	strb	r2, [r0, #22]
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop

0800e4d0 <ucdr_init_buffer_origin_offset>:
 800e4d0:	b510      	push	{r4, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	9c04      	ldr	r4, [sp, #16]
 800e4d6:	9400      	str	r4, [sp, #0]
 800e4d8:	2401      	movs	r4, #1
 800e4da:	9401      	str	r4, [sp, #4]
 800e4dc:	f7ff ffe2 	bl	800e4a4 <ucdr_init_buffer_origin_offset_endian>
 800e4e0:	b002      	add	sp, #8
 800e4e2:	bd10      	pop	{r4, pc}

0800e4e4 <ucdr_init_buffer_origin>:
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	2400      	movs	r4, #0
 800e4ea:	9400      	str	r4, [sp, #0]
 800e4ec:	f7ff fff0 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 800e4f0:	b002      	add	sp, #8
 800e4f2:	bd10      	pop	{r4, pc}

0800e4f4 <ucdr_init_buffer>:
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f7ff bff5 	b.w	800e4e4 <ucdr_init_buffer_origin>
 800e4fa:	bf00      	nop

0800e4fc <ucdr_alignment>:
 800e4fc:	fbb0 f3f1 	udiv	r3, r0, r1
 800e500:	fb03 0011 	mls	r0, r3, r1, r0
 800e504:	1a08      	subs	r0, r1, r0
 800e506:	3901      	subs	r1, #1
 800e508:	4008      	ands	r0, r1
 800e50a:	4770      	bx	lr

0800e50c <ucdr_buffer_alignment>:
 800e50c:	7d43      	ldrb	r3, [r0, #21]
 800e50e:	428b      	cmp	r3, r1
 800e510:	d208      	bcs.n	800e524 <ucdr_buffer_alignment+0x18>
 800e512:	6900      	ldr	r0, [r0, #16]
 800e514:	fbb0 f3f1 	udiv	r3, r0, r1
 800e518:	fb01 0013 	mls	r0, r1, r3, r0
 800e51c:	1a08      	subs	r0, r1, r0
 800e51e:	3901      	subs	r1, #1
 800e520:	4008      	ands	r0, r1
 800e522:	4770      	bx	lr
 800e524:	2000      	movs	r0, #0
 800e526:	4770      	bx	lr

0800e528 <ucdr_align_to>:
 800e528:	b538      	push	{r3, r4, r5, lr}
 800e52a:	4604      	mov	r4, r0
 800e52c:	460d      	mov	r5, r1
 800e52e:	f7ff ffed 	bl	800e50c <ucdr_buffer_alignment>
 800e532:	68a3      	ldr	r3, [r4, #8]
 800e534:	6921      	ldr	r1, [r4, #16]
 800e536:	7565      	strb	r5, [r4, #21]
 800e538:	181a      	adds	r2, r3, r0
 800e53a:	6863      	ldr	r3, [r4, #4]
 800e53c:	4293      	cmp	r3, r2
 800e53e:	4408      	add	r0, r1
 800e540:	bf28      	it	cs
 800e542:	4613      	movcs	r3, r2
 800e544:	6120      	str	r0, [r4, #16]
 800e546:	60a3      	str	r3, [r4, #8]
 800e548:	bd38      	pop	{r3, r4, r5, pc}
 800e54a:	bf00      	nop

0800e54c <ucdr_buffer_length>:
 800e54c:	6882      	ldr	r2, [r0, #8]
 800e54e:	6800      	ldr	r0, [r0, #0]
 800e550:	1a10      	subs	r0, r2, r0
 800e552:	4770      	bx	lr

0800e554 <ucdr_buffer_remaining>:
 800e554:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e558:	1a10      	subs	r0, r2, r0
 800e55a:	4770      	bx	lr

0800e55c <ucdr_check_final_buffer_behavior_array>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	7d83      	ldrb	r3, [r0, #22]
 800e560:	b963      	cbnz	r3, 800e57c <ucdr_check_final_buffer_behavior_array+0x20>
 800e562:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e566:	429a      	cmp	r2, r3
 800e568:	4604      	mov	r4, r0
 800e56a:	460d      	mov	r5, r1
 800e56c:	d308      	bcc.n	800e580 <ucdr_check_final_buffer_behavior_array+0x24>
 800e56e:	b139      	cbz	r1, 800e580 <ucdr_check_final_buffer_behavior_array+0x24>
 800e570:	6983      	ldr	r3, [r0, #24]
 800e572:	b163      	cbz	r3, 800e58e <ucdr_check_final_buffer_behavior_array+0x32>
 800e574:	69c1      	ldr	r1, [r0, #28]
 800e576:	4798      	blx	r3
 800e578:	75a0      	strb	r0, [r4, #22]
 800e57a:	b108      	cbz	r0, 800e580 <ucdr_check_final_buffer_behavior_array+0x24>
 800e57c:	2000      	movs	r0, #0
 800e57e:	bd38      	pop	{r3, r4, r5, pc}
 800e580:	4620      	mov	r0, r4
 800e582:	f7ff ffe7 	bl	800e554 <ucdr_buffer_remaining>
 800e586:	42a8      	cmp	r0, r5
 800e588:	bf28      	it	cs
 800e58a:	4628      	movcs	r0, r5
 800e58c:	bd38      	pop	{r3, r4, r5, pc}
 800e58e:	2301      	movs	r3, #1
 800e590:	7583      	strb	r3, [r0, #22]
 800e592:	e7f3      	b.n	800e57c <ucdr_check_final_buffer_behavior_array+0x20>

0800e594 <ucdr_advance_buffer>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	4604      	mov	r4, r0
 800e598:	460d      	mov	r5, r1
 800e59a:	f7ff ff57 	bl	800e44c <ucdr_check_buffer_available_for>
 800e59e:	b178      	cbz	r0, 800e5c0 <ucdr_advance_buffer+0x2c>
 800e5a0:	6923      	ldr	r3, [r4, #16]
 800e5a2:	68a2      	ldr	r2, [r4, #8]
 800e5a4:	442b      	add	r3, r5
 800e5a6:	6123      	str	r3, [r4, #16]
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	442a      	add	r2, r5
 800e5ac:	7563      	strb	r3, [r4, #21]
 800e5ae:	60a2      	str	r2, [r4, #8]
 800e5b0:	bd38      	pop	{r3, r4, r5, pc}
 800e5b2:	68a2      	ldr	r2, [r4, #8]
 800e5b4:	6923      	ldr	r3, [r4, #16]
 800e5b6:	4402      	add	r2, r0
 800e5b8:	4403      	add	r3, r0
 800e5ba:	1a2d      	subs	r5, r5, r0
 800e5bc:	60a2      	str	r2, [r4, #8]
 800e5be:	6123      	str	r3, [r4, #16]
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f7ff ffc9 	bl	800e55c <ucdr_check_final_buffer_behavior_array>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d1f1      	bne.n	800e5b2 <ucdr_advance_buffer+0x1e>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	7563      	strb	r3, [r4, #21]
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}

0800e5d4 <uxr_buffer_delete_entity>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	b08e      	sub	sp, #56	@ 0x38
 800e5da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e5de:	2303      	movs	r3, #3
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	2204      	movs	r2, #4
 800e5e4:	ab06      	add	r3, sp, #24
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	9103      	str	r1, [sp, #12]
 800e5ea:	f001 fab7 	bl	800fb5c <uxr_prepare_stream_to_write_submessage>
 800e5ee:	b918      	cbnz	r0, 800e5f8 <uxr_buffer_delete_entity+0x24>
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	b00e      	add	sp, #56	@ 0x38
 800e5f6:	bd10      	pop	{r4, pc}
 800e5f8:	9902      	ldr	r1, [sp, #8]
 800e5fa:	aa05      	add	r2, sp, #20
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f001 fbe3 	bl	800fdc8 <uxr_init_base_object_request>
 800e602:	a905      	add	r1, sp, #20
 800e604:	4604      	mov	r4, r0
 800e606:	a806      	add	r0, sp, #24
 800e608:	f003 f9da 	bl	80119c0 <uxr_serialize_DELETE_Payload>
 800e60c:	4620      	mov	r0, r4
 800e60e:	b00e      	add	sp, #56	@ 0x38
 800e610:	bd10      	pop	{r4, pc}
 800e612:	bf00      	nop

0800e614 <uxr_common_create_entity>:
 800e614:	b510      	push	{r4, lr}
 800e616:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e61a:	b08c      	sub	sp, #48	@ 0x30
 800e61c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e620:	f1bc 0f01 	cmp.w	ip, #1
 800e624:	bf0c      	ite	eq
 800e626:	f003 0201 	andeq.w	r2, r3, #1
 800e62a:	2200      	movne	r2, #0
 800e62c:	330e      	adds	r3, #14
 800e62e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e632:	9101      	str	r1, [sp, #4]
 800e634:	441a      	add	r2, r3
 800e636:	2301      	movs	r3, #1
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	9903      	ldr	r1, [sp, #12]
 800e63c:	ab04      	add	r3, sp, #16
 800e63e:	b292      	uxth	r2, r2
 800e640:	4604      	mov	r4, r0
 800e642:	f001 fa8b 	bl	800fb5c <uxr_prepare_stream_to_write_submessage>
 800e646:	b918      	cbnz	r0, 800e650 <uxr_common_create_entity+0x3c>
 800e648:	4604      	mov	r4, r0
 800e64a:	4620      	mov	r0, r4
 800e64c:	b00c      	add	sp, #48	@ 0x30
 800e64e:	bd10      	pop	{r4, pc}
 800e650:	9902      	ldr	r1, [sp, #8]
 800e652:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e654:	4620      	mov	r0, r4
 800e656:	f001 fbb7 	bl	800fdc8 <uxr_init_base_object_request>
 800e65a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e65c:	4604      	mov	r4, r0
 800e65e:	a804      	add	r0, sp, #16
 800e660:	f003 f90a 	bl	8011878 <uxr_serialize_CREATE_Payload>
 800e664:	4620      	mov	r0, r4
 800e666:	b00c      	add	sp, #48	@ 0x30
 800e668:	bd10      	pop	{r4, pc}
 800e66a:	bf00      	nop

0800e66c <uxr_buffer_create_participant_bin>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e672:	ac11      	add	r4, sp, #68	@ 0x44
 800e674:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e678:	2303      	movs	r3, #3
 800e67a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e67e:	7223      	strb	r3, [r4, #8]
 800e680:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e682:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e686:	2201      	movs	r2, #1
 800e688:	2100      	movs	r1, #0
 800e68a:	4605      	mov	r5, r0
 800e68c:	7122      	strb	r2, [r4, #4]
 800e68e:	f88d 1014 	strb.w	r1, [sp, #20]
 800e692:	b1cb      	cbz	r3, 800e6c8 <uxr_buffer_create_participant_bin+0x5c>
 800e694:	f88d 201c 	strb.w	r2, [sp, #28]
 800e698:	9308      	str	r3, [sp, #32]
 800e69a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e69e:	a915      	add	r1, sp, #84	@ 0x54
 800e6a0:	a809      	add	r0, sp, #36	@ 0x24
 800e6a2:	f7ff ff27 	bl	800e4f4 <ucdr_init_buffer>
 800e6a6:	a905      	add	r1, sp, #20
 800e6a8:	a809      	add	r0, sp, #36	@ 0x24
 800e6aa:	f002 fdb3 	bl	8011214 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e6ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6b0:	9600      	str	r6, [sp, #0]
 800e6b2:	9401      	str	r4, [sp, #4]
 800e6b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e6b8:	60e3      	str	r3, [r4, #12]
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	f7ff ffa9 	bl	800e614 <uxr_common_create_entity>
 800e6c2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e6c6:	bd70      	pop	{r4, r5, r6, pc}
 800e6c8:	f88d 301c 	strb.w	r3, [sp, #28]
 800e6cc:	e7e5      	b.n	800e69a <uxr_buffer_create_participant_bin+0x2e>
 800e6ce:	bf00      	nop

0800e6d0 <uxr_buffer_create_topic_bin>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e6d6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e6da:	9105      	str	r1, [sp, #20]
 800e6dc:	4605      	mov	r5, r0
 800e6de:	a997      	add	r1, sp, #604	@ 0x25c
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	2302      	movs	r3, #2
 800e6e4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e6e8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e6ec:	f000 f9b0 	bl	800ea50 <uxr_object_id_to_raw>
 800e6f0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e6f2:	9306      	str	r3, [sp, #24]
 800e6f4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6f8:	2303      	movs	r3, #3
 800e6fa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e6fe:	2301      	movs	r3, #1
 800e700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e704:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e708:	a917      	add	r1, sp, #92	@ 0x5c
 800e70a:	2300      	movs	r3, #0
 800e70c:	a80b      	add	r0, sp, #44	@ 0x2c
 800e70e:	f88d 301c 	strb.w	r3, [sp, #28]
 800e712:	f7ff feef 	bl	800e4f4 <ucdr_init_buffer>
 800e716:	a906      	add	r1, sp, #24
 800e718:	a80b      	add	r0, sp, #44	@ 0x2c
 800e71a:	f002 fd9d 	bl	8011258 <uxr_serialize_OBJK_Topic_Binary>
 800e71e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e720:	9316      	str	r3, [sp, #88]	@ 0x58
 800e722:	ac13      	add	r4, sp, #76	@ 0x4c
 800e724:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e728:	9600      	str	r6, [sp, #0]
 800e72a:	9401      	str	r4, [sp, #4]
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	4628      	mov	r0, r5
 800e730:	f7ff ff70 	bl	800e614 <uxr_common_create_entity>
 800e734:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e738:	bd70      	pop	{r4, r5, r6, pc}
 800e73a:	bf00      	nop

0800e73c <uxr_buffer_create_publisher_bin>:
 800e73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e73e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e742:	4605      	mov	r5, r0
 800e744:	9105      	str	r1, [sp, #20]
 800e746:	4618      	mov	r0, r3
 800e748:	2603      	movs	r6, #3
 800e74a:	a992      	add	r1, sp, #584	@ 0x248
 800e74c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e750:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e754:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e758:	f000 f97a 	bl	800ea50 <uxr_object_id_to_raw>
 800e75c:	2300      	movs	r3, #0
 800e75e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e762:	a912      	add	r1, sp, #72	@ 0x48
 800e764:	a806      	add	r0, sp, #24
 800e766:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e76a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e76e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e772:	f7ff febf 	bl	800e4f4 <ucdr_init_buffer>
 800e776:	a993      	add	r1, sp, #588	@ 0x24c
 800e778:	a806      	add	r0, sp, #24
 800e77a:	f002 fe21 	bl	80113c0 <uxr_serialize_OBJK_Publisher_Binary>
 800e77e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e780:	9311      	str	r3, [sp, #68]	@ 0x44
 800e782:	ac0e      	add	r4, sp, #56	@ 0x38
 800e784:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e788:	9700      	str	r7, [sp, #0]
 800e78a:	9401      	str	r4, [sp, #4]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	4628      	mov	r0, r5
 800e790:	f7ff ff40 	bl	800e614 <uxr_common_create_entity>
 800e794:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e79a:	bf00      	nop

0800e79c <uxr_buffer_create_datawriter_bin>:
 800e79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a0:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e7a4:	ac1d      	add	r4, sp, #116	@ 0x74
 800e7a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e7aa:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e7ae:	9105      	str	r1, [sp, #20]
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	a9a1      	add	r1, sp, #644	@ 0x284
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	2305      	movs	r3, #5
 800e7b8:	7123      	strb	r3, [r4, #4]
 800e7ba:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e7be:	2703      	movs	r7, #3
 800e7c0:	f000 f946 	bl	800ea50 <uxr_object_id_to_raw>
 800e7c4:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e7c6:	7227      	strb	r7, [r4, #8]
 800e7c8:	a90e      	add	r1, sp, #56	@ 0x38
 800e7ca:	f000 f941 	bl	800ea50 <uxr_object_id_to_raw>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e7d4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e7d8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e7dc:	3d00      	subs	r5, #0
 800e7de:	bf18      	it	ne
 800e7e0:	2501      	movne	r5, #1
 800e7e2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e7e6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e7ea:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e7ee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e7f8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e7fc:	bb8a      	cbnz	r2, 800e862 <uxr_buffer_create_datawriter_bin+0xc6>
 800e7fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e802:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e806:	f04f 0c13 	mov.w	ip, #19
 800e80a:	250b      	movs	r5, #11
 800e80c:	2221      	movs	r2, #33	@ 0x21
 800e80e:	2111      	movs	r1, #17
 800e810:	2009      	movs	r0, #9
 800e812:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800e816:	b923      	cbnz	r3, 800e822 <uxr_buffer_create_datawriter_bin+0x86>
 800e818:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e81c:	4672      	mov	r2, lr
 800e81e:	4661      	mov	r1, ip
 800e820:	4628      	mov	r0, r5
 800e822:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800e826:	2b01      	cmp	r3, #1
 800e828:	d025      	beq.n	800e876 <uxr_buffer_create_datawriter_bin+0xda>
 800e82a:	2b03      	cmp	r3, #3
 800e82c:	d029      	beq.n	800e882 <uxr_buffer_create_datawriter_bin+0xe6>
 800e82e:	b32b      	cbz	r3, 800e87c <uxr_buffer_create_datawriter_bin+0xe0>
 800e830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e834:	a921      	add	r1, sp, #132	@ 0x84
 800e836:	a806      	add	r0, sp, #24
 800e838:	f7ff fe5c 	bl	800e4f4 <ucdr_init_buffer>
 800e83c:	a90e      	add	r1, sp, #56	@ 0x38
 800e83e:	a806      	add	r0, sp, #24
 800e840:	f002 fe34 	bl	80114ac <uxr_serialize_OBJK_DataWriter_Binary>
 800e844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e846:	f8cd 8000 	str.w	r8, [sp]
 800e84a:	9401      	str	r4, [sp, #4]
 800e84c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e850:	60e3      	str	r3, [r4, #12]
 800e852:	4630      	mov	r0, r6
 800e854:	b29b      	uxth	r3, r3
 800e856:	f7ff fedd 	bl	800e614 <uxr_common_create_entity>
 800e85a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e862:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e866:	f04f 0c12 	mov.w	ip, #18
 800e86a:	250a      	movs	r5, #10
 800e86c:	2220      	movs	r2, #32
 800e86e:	2110      	movs	r1, #16
 800e870:	2008      	movs	r0, #8
 800e872:	2702      	movs	r7, #2
 800e874:	e7cd      	b.n	800e812 <uxr_buffer_create_datawriter_bin+0x76>
 800e876:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e87a:	e7d9      	b.n	800e830 <uxr_buffer_create_datawriter_bin+0x94>
 800e87c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e880:	e7d6      	b.n	800e830 <uxr_buffer_create_datawriter_bin+0x94>
 800e882:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e886:	e7d3      	b.n	800e830 <uxr_buffer_create_datawriter_bin+0x94>

0800e888 <get_custom_error>:
 800e888:	4b01      	ldr	r3, [pc, #4]	@ (800e890 <get_custom_error+0x8>)
 800e88a:	7818      	ldrb	r0, [r3, #0]
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	2000caec 	.word	0x2000caec

0800e894 <recv_custom_msg>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	4693      	mov	fp, r2
 800e89a:	b089      	sub	sp, #36	@ 0x24
 800e89c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e8a0:	9305      	str	r3, [sp, #20]
 800e8a2:	468a      	mov	sl, r1
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	f88d 101e 	strb.w	r1, [sp, #30]
 800e8ac:	b322      	cbz	r2, 800e8f8 <recv_custom_msg+0x64>
 800e8ae:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e8b2:	f10d 081f 	add.w	r8, sp, #31
 800e8b6:	af05      	add	r7, sp, #20
 800e8b8:	f10d 061e 	add.w	r6, sp, #30
 800e8bc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e8c0:	e002      	b.n	800e8c8 <recv_custom_msg+0x34>
 800e8c2:	9b05      	ldr	r3, [sp, #20]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dd0f      	ble.n	800e8e8 <recv_custom_msg+0x54>
 800e8c8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e8cc:	4623      	mov	r3, r4
 800e8ce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e8d2:	e9cd 5600 	strd	r5, r6, [sp]
 800e8d6:	4622      	mov	r2, r4
 800e8d8:	4648      	mov	r0, r9
 800e8da:	f001 fca3 	bl	8010224 <uxr_read_framed_msg>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d0ef      	beq.n	800e8c2 <recv_custom_msg+0x2e>
 800e8e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e8e6:	b1b3      	cbz	r3, 800e916 <recv_custom_msg+0x82>
 800e8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e928 <recv_custom_msg+0x94>)
 800e8ea:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e8ee:	701a      	strb	r2, [r3, #0]
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	b009      	add	sp, #36	@ 0x24
 800e8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f8:	f10d 021f 	add.w	r2, sp, #31
 800e8fc:	9200      	str	r2, [sp, #0]
 800e8fe:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e906:	4601      	mov	r1, r0
 800e908:	47a8      	blx	r5
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d0ec      	beq.n	800e8e8 <recv_custom_msg+0x54>
 800e90e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1e8      	bne.n	800e8e8 <recv_custom_msg+0x54>
 800e916:	f8cb 0000 	str.w	r0, [fp]
 800e91a:	2001      	movs	r0, #1
 800e91c:	f8ca 4000 	str.w	r4, [sl]
 800e920:	b009      	add	sp, #36	@ 0x24
 800e922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e926:	bf00      	nop
 800e928:	2000caec 	.word	0x2000caec

0800e92c <send_custom_msg>:
 800e92c:	b530      	push	{r4, r5, lr}
 800e92e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e932:	b087      	sub	sp, #28
 800e934:	4615      	mov	r5, r2
 800e936:	b974      	cbnz	r4, 800e956 <send_custom_msg+0x2a>
 800e938:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e93c:	f10d 0317 	add.w	r3, sp, #23
 800e940:	47a0      	blx	r4
 800e942:	b108      	cbz	r0, 800e948 <send_custom_msg+0x1c>
 800e944:	42a8      	cmp	r0, r5
 800e946:	d015      	beq.n	800e974 <send_custom_msg+0x48>
 800e948:	4b0c      	ldr	r3, [pc, #48]	@ (800e97c <send_custom_msg+0x50>)
 800e94a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e94e:	701a      	strb	r2, [r3, #0]
 800e950:	2000      	movs	r0, #0
 800e952:	b007      	add	sp, #28
 800e954:	bd30      	pop	{r4, r5, pc}
 800e956:	460b      	mov	r3, r1
 800e958:	2200      	movs	r2, #0
 800e95a:	f10d 0117 	add.w	r1, sp, #23
 800e95e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e962:	4602      	mov	r2, r0
 800e964:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e968:	9500      	str	r5, [sp, #0]
 800e96a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e96e:	f001 fa61 	bl	800fe34 <uxr_write_framed_msg>
 800e972:	e7e6      	b.n	800e942 <send_custom_msg+0x16>
 800e974:	2001      	movs	r0, #1
 800e976:	b007      	add	sp, #28
 800e978:	bd30      	pop	{r4, r5, pc}
 800e97a:	bf00      	nop
 800e97c:	2000caec 	.word	0x2000caec

0800e980 <uxr_set_custom_transport_callbacks>:
 800e980:	b410      	push	{r4}
 800e982:	9c01      	ldr	r4, [sp, #4]
 800e984:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e988:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e98c:	9b02      	ldr	r3, [sp, #8]
 800e98e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e996:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e99a:	4770      	bx	lr

0800e99c <uxr_init_custom_transport>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e9a2:	b303      	cbz	r3, 800e9e6 <uxr_init_custom_transport+0x4a>
 800e9a4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	b1e2      	cbz	r2, 800e9e6 <uxr_init_custom_transport+0x4a>
 800e9ac:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e9b0:	b1ca      	cbz	r2, 800e9e6 <uxr_init_custom_transport+0x4a>
 800e9b2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e9b6:	b1b2      	cbz	r2, 800e9e6 <uxr_init_custom_transport+0x4a>
 800e9b8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e9bc:	4798      	blx	r3
 800e9be:	4605      	mov	r5, r0
 800e9c0:	b188      	cbz	r0, 800e9e6 <uxr_init_custom_transport+0x4a>
 800e9c2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e9c6:	b98b      	cbnz	r3, 800e9ec <uxr_init_custom_transport+0x50>
 800e9c8:	490b      	ldr	r1, [pc, #44]	@ (800e9f8 <uxr_init_custom_transport+0x5c>)
 800e9ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e9fc <uxr_init_custom_transport+0x60>)
 800e9cc:	4a0c      	ldr	r2, [pc, #48]	@ (800ea00 <uxr_init_custom_transport+0x64>)
 800e9ce:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e9d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9d6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e9da:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e9de:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	bd38      	pop	{r3, r4, r5, pc}
 800e9e6:	2500      	movs	r5, #0
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	bd38      	pop	{r3, r4, r5, pc}
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e9f2:	f001 fa19 	bl	800fe28 <uxr_init_framing_io>
 800e9f6:	e7e7      	b.n	800e9c8 <uxr_init_custom_transport+0x2c>
 800e9f8:	0800e92d 	.word	0x0800e92d
 800e9fc:	0800e895 	.word	0x0800e895
 800ea00:	0800e889 	.word	0x0800e889

0800ea04 <uxr_close_custom_transport>:
 800ea04:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ea08:	4718      	bx	r3
 800ea0a:	bf00      	nop

0800ea0c <uxr_object_id>:
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	2300      	movs	r3, #0
 800ea10:	f88d 1006 	strb.w	r1, [sp, #6]
 800ea14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ea18:	f360 030f 	bfi	r3, r0, #0, #16
 800ea1c:	f362 431f 	bfi	r3, r2, #16, #16
 800ea20:	4618      	mov	r0, r3
 800ea22:	b002      	add	sp, #8
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop

0800ea28 <uxr_object_id_from_raw>:
 800ea28:	7843      	ldrb	r3, [r0, #1]
 800ea2a:	7801      	ldrb	r1, [r0, #0]
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	f003 020f 	and.w	r2, r3, #15
 800ea32:	f88d 2006 	strb.w	r2, [sp, #6]
 800ea36:	091b      	lsrs	r3, r3, #4
 800ea38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ea3c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ea40:	2000      	movs	r0, #0
 800ea42:	f363 000f 	bfi	r0, r3, #0, #16
 800ea46:	f362 401f 	bfi	r0, r2, #16, #16
 800ea4a:	b002      	add	sp, #8
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop

0800ea50 <uxr_object_id_to_raw>:
 800ea50:	4602      	mov	r2, r0
 800ea52:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ea56:	b082      	sub	sp, #8
 800ea58:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ea5c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ea60:	f881 c000 	strb.w	ip, [r1]
 800ea64:	7048      	strb	r0, [r1, #1]
 800ea66:	b002      	add	sp, #8
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop

0800ea6c <uxr_buffer_cancel_data>:
 800ea6c:	b510      	push	{r4, lr}
 800ea6e:	b094      	sub	sp, #80	@ 0x50
 800ea70:	2300      	movs	r3, #0
 800ea72:	9202      	str	r2, [sp, #8]
 800ea74:	9205      	str	r2, [sp, #20]
 800ea76:	9301      	str	r3, [sp, #4]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ea7e:	f88d 301e 	strb.w	r3, [sp, #30]
 800ea82:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ea86:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ea8a:	2308      	movs	r3, #8
 800ea8c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	2210      	movs	r2, #16
 800ea94:	ab0c      	add	r3, sp, #48	@ 0x30
 800ea96:	4604      	mov	r4, r0
 800ea98:	9103      	str	r1, [sp, #12]
 800ea9a:	f001 f85f 	bl	800fb5c <uxr_prepare_stream_to_write_submessage>
 800ea9e:	b918      	cbnz	r0, 800eaa8 <uxr_buffer_cancel_data+0x3c>
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	b014      	add	sp, #80	@ 0x50
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	9905      	ldr	r1, [sp, #20]
 800eaaa:	aa06      	add	r2, sp, #24
 800eaac:	4620      	mov	r0, r4
 800eaae:	f001 f98b 	bl	800fdc8 <uxr_init_base_object_request>
 800eab2:	a906      	add	r1, sp, #24
 800eab4:	4604      	mov	r4, r0
 800eab6:	a80c      	add	r0, sp, #48	@ 0x30
 800eab8:	f003 f82c 	bl	8011b14 <uxr_serialize_READ_DATA_Payload>
 800eabc:	4620      	mov	r0, r4
 800eabe:	b014      	add	sp, #80	@ 0x50
 800eac0:	bd10      	pop	{r4, pc}
 800eac2:	bf00      	nop

0800eac4 <read_submessage_format>:
 800eac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eac8:	b095      	sub	sp, #84	@ 0x54
 800eaca:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800eace:	b113      	cbz	r3, 800ead6 <read_submessage_format+0x12>
 800ead0:	b015      	add	sp, #84	@ 0x54
 800ead2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ead6:	460c      	mov	r4, r1
 800ead8:	4615      	mov	r5, r2
 800eada:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800eade:	4607      	mov	r7, r0
 800eae0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800eae2:	9004      	str	r0, [sp, #16]
 800eae4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800eae6:	9005      	str	r0, [sp, #20]
 800eae8:	1a52      	subs	r2, r2, r1
 800eaea:	a80c      	add	r0, sp, #48	@ 0x30
 800eaec:	4699      	mov	r9, r3
 800eaee:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800eaf2:	f7ff fcff 	bl	800e4f4 <ucdr_init_buffer>
 800eaf6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800eafa:	a80c      	add	r0, sp, #48	@ 0x30
 800eafc:	f7ff fcce 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 800eb00:	69e2      	ldr	r2, [r4, #28]
 800eb02:	b19a      	cbz	r2, 800eb2c <read_submessage_format+0x68>
 800eb04:	f1b8 0f07 	cmp.w	r8, #7
 800eb08:	f882 9014 	strb.w	r9, [r2, #20]
 800eb0c:	d040      	beq.n	800eb90 <read_submessage_format+0xcc>
 800eb0e:	f1b8 0f08 	cmp.w	r8, #8
 800eb12:	d02e      	beq.n	800eb72 <read_submessage_format+0xae>
 800eb14:	f1b8 0f06 	cmp.w	r8, #6
 800eb18:	d011      	beq.n	800eb3e <read_submessage_format+0x7a>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	7513      	strb	r3, [r2, #20]
 800eb1e:	4629      	mov	r1, r5
 800eb20:	4620      	mov	r0, r4
 800eb22:	f7ff fd37 	bl	800e594 <ucdr_advance_buffer>
 800eb26:	b015      	add	sp, #84	@ 0x54
 800eb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb2c:	f1b8 0f07 	cmp.w	r8, #7
 800eb30:	d02e      	beq.n	800eb90 <read_submessage_format+0xcc>
 800eb32:	f1b8 0f08 	cmp.w	r8, #8
 800eb36:	d01c      	beq.n	800eb72 <read_submessage_format+0xae>
 800eb38:	f1b8 0f06 	cmp.w	r8, #6
 800eb3c:	d1ef      	bne.n	800eb1e <read_submessage_format+0x5a>
 800eb3e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800eb42:	f1b8 0f00 	cmp.w	r8, #0
 800eb46:	d011      	beq.n	800eb6c <read_submessage_format+0xa8>
 800eb48:	ab0c      	add	r3, sp, #48	@ 0x30
 800eb4a:	e9cd 3500 	strd	r3, r5, [sp]
 800eb4e:	2306      	movs	r3, #6
 800eb50:	f88d 3016 	strb.w	r3, [sp, #22]
 800eb54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb58:	9302      	str	r3, [sp, #8]
 800eb5a:	4632      	mov	r2, r6
 800eb5c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800eb60:	4638      	mov	r0, r7
 800eb62:	47c0      	blx	r8
 800eb64:	2301      	movs	r3, #1
 800eb66:	69e2      	ldr	r2, [r4, #28]
 800eb68:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	d1d4      	bne.n	800eb1a <read_submessage_format+0x56>
 800eb70:	e7d5      	b.n	800eb1e <read_submessage_format+0x5a>
 800eb72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d0f8      	beq.n	800eb6c <read_submessage_format+0xa8>
 800eb7a:	a906      	add	r1, sp, #24
 800eb7c:	a80c      	add	r0, sp, #48	@ 0x30
 800eb7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800eb82:	f003 f89b 	bl	8011cbc <uxr_deserialize_SampleIdentity>
 800eb86:	b9a0      	cbnz	r0, 800ebb2 <read_submessage_format+0xee>
 800eb88:	69e2      	ldr	r2, [r4, #28]
 800eb8a:	2a00      	cmp	r2, #0
 800eb8c:	d1c5      	bne.n	800eb1a <read_submessage_format+0x56>
 800eb8e:	e7c6      	b.n	800eb1e <read_submessage_format+0x5a>
 800eb90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb94:	b13b      	cbz	r3, 800eba6 <read_submessage_format+0xe2>
 800eb96:	a906      	add	r1, sp, #24
 800eb98:	a80c      	add	r0, sp, #48	@ 0x30
 800eb9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800eb9e:	f002 fd53 	bl	8011648 <uxr_deserialize_BaseObjectRequest>
 800eba2:	bb60      	cbnz	r0, 800ebfe <read_submessage_format+0x13a>
 800eba4:	69e2      	ldr	r2, [r4, #28]
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	442b      	add	r3, r5
 800ebaa:	60a3      	str	r3, [r4, #8]
 800ebac:	2a00      	cmp	r2, #0
 800ebae:	d1b4      	bne.n	800eb1a <read_submessage_format+0x56>
 800ebb0:	e7b5      	b.n	800eb1e <read_submessage_format+0x5a>
 800ebb2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ebb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ebb8:	1a52      	subs	r2, r2, r1
 800ebba:	eba8 0803 	sub.w	r8, r8, r3
 800ebbe:	a80c      	add	r0, sp, #48	@ 0x30
 800ebc0:	f7ff fc98 	bl	800e4f4 <ucdr_init_buffer>
 800ebc4:	44a8      	add	r8, r5
 800ebc6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ebca:	a80c      	add	r0, sp, #48	@ 0x30
 800ebcc:	f7ff fc66 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 800ebd0:	fa1f f888 	uxth.w	r8, r8
 800ebd4:	ab0c      	add	r3, sp, #48	@ 0x30
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	f8cd 8004 	str.w	r8, [sp, #4]
 800ebdc:	2108      	movs	r1, #8
 800ebde:	f88d 1016 	strb.w	r1, [sp, #22]
 800ebe2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800ebe6:	9102      	str	r1, [sp, #8]
 800ebe8:	ab06      	add	r3, sp, #24
 800ebea:	4632      	mov	r2, r6
 800ebec:	9905      	ldr	r1, [sp, #20]
 800ebee:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	47b0      	blx	r6
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ebfc:	e7c4      	b.n	800eb88 <read_submessage_format+0xc4>
 800ebfe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ec02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec04:	1a52      	subs	r2, r2, r1
 800ec06:	a80c      	add	r0, sp, #48	@ 0x30
 800ec08:	eba8 0803 	sub.w	r8, r8, r3
 800ec0c:	f7ff fc72 	bl	800e4f4 <ucdr_init_buffer>
 800ec10:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ec14:	a80c      	add	r0, sp, #48	@ 0x30
 800ec16:	f7ff fc41 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 800ec1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ec22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ec26:	44a8      	add	r8, r5
 800ec28:	fa1f f888 	uxth.w	r8, r8
 800ec2c:	f8cd 8004 	str.w	r8, [sp, #4]
 800ec30:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ec34:	2107      	movs	r1, #7
 800ec36:	f88d 1016 	strb.w	r1, [sp, #22]
 800ec3a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800ec3e:	9102      	str	r1, [sp, #8]
 800ec40:	4632      	mov	r2, r6
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800ec48:	9905      	ldr	r1, [sp, #20]
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	47b0      	blx	r6
 800ec4e:	2301      	movs	r3, #1
 800ec50:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ec54:	e7a6      	b.n	800eba4 <read_submessage_format+0xe0>
 800ec56:	bf00      	nop

0800ec58 <on_get_fragmentation_info>:
 800ec58:	b500      	push	{lr}
 800ec5a:	b08b      	sub	sp, #44	@ 0x2c
 800ec5c:	4601      	mov	r1, r0
 800ec5e:	2204      	movs	r2, #4
 800ec60:	a802      	add	r0, sp, #8
 800ec62:	f7ff fc47 	bl	800e4f4 <ucdr_init_buffer>
 800ec66:	f10d 0305 	add.w	r3, sp, #5
 800ec6a:	f10d 0206 	add.w	r2, sp, #6
 800ec6e:	a901      	add	r1, sp, #4
 800ec70:	a802      	add	r0, sp, #8
 800ec72:	f001 febd 	bl	80109f0 <uxr_read_submessage_header>
 800ec76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec7a:	2b0d      	cmp	r3, #13
 800ec7c:	d003      	beq.n	800ec86 <on_get_fragmentation_info+0x2e>
 800ec7e:	2000      	movs	r0, #0
 800ec80:	b00b      	add	sp, #44	@ 0x2c
 800ec82:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ec8a:	f013 0f02 	tst.w	r3, #2
 800ec8e:	bf14      	ite	ne
 800ec90:	2002      	movne	r0, #2
 800ec92:	2001      	moveq	r0, #1
 800ec94:	b00b      	add	sp, #44	@ 0x2c
 800ec96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec9a:	bf00      	nop

0800ec9c <read_submessage_get_info>:
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	2500      	movs	r5, #0
 800eca0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800eca4:	4604      	mov	r4, r0
 800eca6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ecaa:	460e      	mov	r6, r1
 800ecac:	a810      	add	r0, sp, #64	@ 0x40
 800ecae:	4629      	mov	r1, r5
 800ecb0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ecb4:	f008 fef0 	bl	8017a98 <memset>
 800ecb8:	a903      	add	r1, sp, #12
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f002 fe6c 	bl	8011998 <uxr_deserialize_GET_INFO_Payload>
 800ecc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ecc4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ecc8:	4620      	mov	r0, r4
 800ecca:	f001 f875 	bl	800fdb8 <uxr_session_header_offset>
 800ecce:	462b      	mov	r3, r5
 800ecd0:	9000      	str	r0, [sp, #0]
 800ecd2:	220c      	movs	r2, #12
 800ecd4:	a905      	add	r1, sp, #20
 800ecd6:	a808      	add	r0, sp, #32
 800ecd8:	f7ff fbfa 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 800ecdc:	a910      	add	r1, sp, #64	@ 0x40
 800ecde:	a808      	add	r0, sp, #32
 800ece0:	f002 fecc 	bl	8011a7c <uxr_serialize_INFO_Payload>
 800ece4:	9b08      	ldr	r3, [sp, #32]
 800ece6:	462a      	mov	r2, r5
 800ece8:	4629      	mov	r1, r5
 800ecea:	4620      	mov	r0, r4
 800ecec:	f001 f80e 	bl	800fd0c <uxr_stamp_session_header>
 800ecf0:	a808      	add	r0, sp, #32
 800ecf2:	f7ff fc2b 	bl	800e54c <ucdr_buffer_length>
 800ecf6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	a905      	add	r1, sp, #20
 800ecfc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ed00:	47a0      	blx	r4
 800ed02:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ed06:	bd70      	pop	{r4, r5, r6, pc}

0800ed08 <write_submessage_acknack.isra.0>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	b092      	sub	sp, #72	@ 0x48
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	460e      	mov	r6, r1
 800ed10:	4614      	mov	r4, r2
 800ed12:	f001 f851 	bl	800fdb8 <uxr_session_header_offset>
 800ed16:	a905      	add	r1, sp, #20
 800ed18:	9000      	str	r0, [sp, #0]
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	a80a      	add	r0, sp, #40	@ 0x28
 800ed1e:	2211      	movs	r2, #17
 800ed20:	f7ff fbd6 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 800ed24:	2218      	movs	r2, #24
 800ed26:	fb02 5404 	mla	r4, r2, r4, r5
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	2205      	movs	r2, #5
 800ed2e:	3450      	adds	r4, #80	@ 0x50
 800ed30:	210a      	movs	r1, #10
 800ed32:	a80a      	add	r0, sp, #40	@ 0x28
 800ed34:	f001 fe42 	bl	80109bc <uxr_buffer_submessage_header>
 800ed38:	a903      	add	r1, sp, #12
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f007 fb4c 	bl	80163d8 <uxr_compute_acknack>
 800ed40:	ba40      	rev16	r0, r0
 800ed42:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ed46:	a903      	add	r1, sp, #12
 800ed48:	a80a      	add	r0, sp, #40	@ 0x28
 800ed4a:	f88d 6010 	strb.w	r6, [sp, #16]
 800ed4e:	f002 ff05 	bl	8011b5c <uxr_serialize_ACKNACK_Payload>
 800ed52:	2200      	movs	r2, #0
 800ed54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed56:	4611      	mov	r1, r2
 800ed58:	4628      	mov	r0, r5
 800ed5a:	f000 ffd7 	bl	800fd0c <uxr_stamp_session_header>
 800ed5e:	a80a      	add	r0, sp, #40	@ 0x28
 800ed60:	f7ff fbf4 	bl	800e54c <ucdr_buffer_length>
 800ed64:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ed66:	4602      	mov	r2, r0
 800ed68:	a905      	add	r1, sp, #20
 800ed6a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ed6e:	47a0      	blx	r4
 800ed70:	b012      	add	sp, #72	@ 0x48
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
 800ed74:	0000      	movs	r0, r0
	...

0800ed78 <uxr_init_session>:
 800ed78:	b510      	push	{r4, lr}
 800ed7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800edb0 <uxr_init_session+0x38>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ed84:	4604      	mov	r4, r0
 800ed86:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ed8a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ed8e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800ed92:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800ed96:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800ed9a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800ed9e:	2181      	movs	r1, #129	@ 0x81
 800eda0:	f000 ff20 	bl	800fbe4 <uxr_init_session_info>
 800eda4:	f104 0008 	add.w	r0, r4, #8
 800eda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edac:	f001 bd22 	b.w	80107f4 <uxr_init_stream_storage>
	...

0800edb8 <uxr_set_status_callback>:
 800edb8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop

0800edc0 <uxr_set_topic_callback>:
 800edc0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop

0800edc8 <uxr_set_request_callback>:
 800edc8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop

0800edd0 <uxr_set_reply_callback>:
 800edd0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop

0800edd8 <uxr_create_output_best_effort_stream>:
 800edd8:	b510      	push	{r4, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	e9cd 2100 	strd	r2, r1, [sp]
 800ede0:	4604      	mov	r4, r0
 800ede2:	f000 ffe9 	bl	800fdb8 <uxr_session_header_offset>
 800ede6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800edea:	4603      	mov	r3, r0
 800edec:	f104 0008 	add.w	r0, r4, #8
 800edf0:	b004      	add	sp, #16
 800edf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edf6:	f001 bd47 	b.w	8010888 <uxr_add_output_best_effort_buffer>
 800edfa:	bf00      	nop

0800edfc <uxr_create_output_reliable_stream>:
 800edfc:	b510      	push	{r4, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ee04:	4604      	mov	r4, r0
 800ee06:	9303      	str	r3, [sp, #12]
 800ee08:	f000 ffd6 	bl	800fdb8 <uxr_session_header_offset>
 800ee0c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ee10:	9000      	str	r0, [sp, #0]
 800ee12:	9905      	ldr	r1, [sp, #20]
 800ee14:	f104 0008 	add.w	r0, r4, #8
 800ee18:	f001 fd4a 	bl	80108b0 <uxr_add_output_reliable_buffer>
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	b2c3      	uxtb	r3, r0
 800ee20:	f363 0207 	bfi	r2, r3, #0, #8
 800ee24:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ee28:	f363 220f 	bfi	r2, r3, #8, #8
 800ee2c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ee30:	f363 4217 	bfi	r2, r3, #16, #8
 800ee34:	0e03      	lsrs	r3, r0, #24
 800ee36:	f363 621f 	bfi	r2, r3, #24, #8
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	b008      	add	sp, #32
 800ee3e:	bd10      	pop	{r4, pc}

0800ee40 <uxr_create_input_best_effort_stream>:
 800ee40:	b082      	sub	sp, #8
 800ee42:	3008      	adds	r0, #8
 800ee44:	b002      	add	sp, #8
 800ee46:	f001 bd4d 	b.w	80108e4 <uxr_add_input_best_effort_buffer>
 800ee4a:	bf00      	nop

0800ee4c <uxr_create_input_reliable_stream>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	4c0b      	ldr	r4, [pc, #44]	@ (800ee80 <uxr_create_input_reliable_stream+0x34>)
 800ee52:	9400      	str	r4, [sp, #0]
 800ee54:	3008      	adds	r0, #8
 800ee56:	f001 fd5b 	bl	8010910 <uxr_add_input_reliable_buffer>
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	b2c3      	uxtb	r3, r0
 800ee5e:	f363 0207 	bfi	r2, r3, #0, #8
 800ee62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ee66:	f363 220f 	bfi	r2, r3, #8, #8
 800ee6a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ee6e:	f363 4217 	bfi	r2, r3, #16, #8
 800ee72:	0e03      	lsrs	r3, r0, #24
 800ee74:	f363 621f 	bfi	r2, r3, #24, #8
 800ee78:	4610      	mov	r0, r2
 800ee7a:	b004      	add	sp, #16
 800ee7c:	bd10      	pop	{r4, pc}
 800ee7e:	bf00      	nop
 800ee80:	0800ec59 	.word	0x0800ec59

0800ee84 <uxr_epoch_nanos>:
 800ee84:	b510      	push	{r4, lr}
 800ee86:	4604      	mov	r4, r0
 800ee88:	f001 fdf8 	bl	8010a7c <uxr_nanos>
 800ee8c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ee90:	1ac0      	subs	r0, r0, r3
 800ee92:	eb61 0102 	sbc.w	r1, r1, r2
 800ee96:	bd10      	pop	{r4, pc}

0800ee98 <uxr_flash_output_streams>:
 800ee98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee9c:	7e03      	ldrb	r3, [r0, #24]
 800ee9e:	b084      	sub	sp, #16
 800eea0:	4604      	mov	r4, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d035      	beq.n	800ef12 <uxr_flash_output_streams+0x7a>
 800eea6:	f04f 0900 	mov.w	r9, #0
 800eeaa:	4648      	mov	r0, r9
 800eeac:	f10d 0802 	add.w	r8, sp, #2
 800eeb0:	af03      	add	r7, sp, #12
 800eeb2:	ae02      	add	r6, sp, #8
 800eeb4:	e006      	b.n	800eec4 <uxr_flash_output_streams+0x2c>
 800eeb6:	7e23      	ldrb	r3, [r4, #24]
 800eeb8:	f109 0901 	add.w	r9, r9, #1
 800eebc:	fa5f f089 	uxtb.w	r0, r9
 800eec0:	4283      	cmp	r3, r0
 800eec2:	d926      	bls.n	800ef12 <uxr_flash_output_streams+0x7a>
 800eec4:	2201      	movs	r2, #1
 800eec6:	4611      	mov	r1, r2
 800eec8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800eecc:	f001 fc3e 	bl	801074c <uxr_stream_id>
 800eed0:	3508      	adds	r5, #8
 800eed2:	4684      	mov	ip, r0
 800eed4:	4643      	mov	r3, r8
 800eed6:	463a      	mov	r2, r7
 800eed8:	4631      	mov	r1, r6
 800eeda:	4628      	mov	r0, r5
 800eedc:	f8cd c004 	str.w	ip, [sp, #4]
 800eee0:	f007 fb00 	bl	80164e4 <uxr_prepare_best_effort_buffer_to_send>
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d0e6      	beq.n	800eeb6 <uxr_flash_output_streams+0x1e>
 800eee8:	9b02      	ldr	r3, [sp, #8]
 800eeea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800eeee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 ff0a 	bl	800fd0c <uxr_stamp_session_header>
 800eef8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eefa:	9a03      	ldr	r2, [sp, #12]
 800eefc:	685d      	ldr	r5, [r3, #4]
 800eefe:	6818      	ldr	r0, [r3, #0]
 800ef00:	9902      	ldr	r1, [sp, #8]
 800ef02:	47a8      	blx	r5
 800ef04:	f109 0901 	add.w	r9, r9, #1
 800ef08:	7e23      	ldrb	r3, [r4, #24]
 800ef0a:	fa5f f089 	uxtb.w	r0, r9
 800ef0e:	4283      	cmp	r3, r0
 800ef10:	d8d8      	bhi.n	800eec4 <uxr_flash_output_streams+0x2c>
 800ef12:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ef16:	b38b      	cbz	r3, 800ef7c <uxr_flash_output_streams+0xe4>
 800ef18:	f04f 0900 	mov.w	r9, #0
 800ef1c:	f10d 0802 	add.w	r8, sp, #2
 800ef20:	af03      	add	r7, sp, #12
 800ef22:	ae02      	add	r6, sp, #8
 800ef24:	4648      	mov	r0, r9
 800ef26:	2201      	movs	r2, #1
 800ef28:	2102      	movs	r1, #2
 800ef2a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ef2e:	f001 fc0d 	bl	801074c <uxr_stream_id>
 800ef32:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ef36:	3520      	adds	r5, #32
 800ef38:	9001      	str	r0, [sp, #4]
 800ef3a:	e00d      	b.n	800ef58 <uxr_flash_output_streams+0xc0>
 800ef3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ef40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ef44:	9b02      	ldr	r3, [sp, #8]
 800ef46:	f000 fee1 	bl	800fd0c <uxr_stamp_session_header>
 800ef4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ef4c:	9a03      	ldr	r2, [sp, #12]
 800ef4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ef52:	9902      	ldr	r1, [sp, #8]
 800ef54:	6818      	ldr	r0, [r3, #0]
 800ef56:	47d0      	blx	sl
 800ef58:	4643      	mov	r3, r8
 800ef5a:	463a      	mov	r2, r7
 800ef5c:	4631      	mov	r1, r6
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f007 fcde 	bl	8016920 <uxr_prepare_next_reliable_buffer_to_send>
 800ef64:	4603      	mov	r3, r0
 800ef66:	4620      	mov	r0, r4
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1e7      	bne.n	800ef3c <uxr_flash_output_streams+0xa4>
 800ef6c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ef70:	f109 0901 	add.w	r9, r9, #1
 800ef74:	fa5f f089 	uxtb.w	r0, r9
 800ef78:	4283      	cmp	r3, r0
 800ef7a:	d8d4      	bhi.n	800ef26 <uxr_flash_output_streams+0x8e>
 800ef7c:	b004      	add	sp, #16
 800ef7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef82:	bf00      	nop

0800ef84 <read_submessage_info>:
 800ef84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef88:	460d      	mov	r5, r1
 800ef8a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ef8e:	4669      	mov	r1, sp
 800ef90:	4607      	mov	r7, r0
 800ef92:	4628      	mov	r0, r5
 800ef94:	f002 fc0e 	bl	80117b4 <uxr_deserialize_BaseObjectReply>
 800ef98:	a902      	add	r1, sp, #8
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800efa2:	f7fe fae3 	bl	800d56c <ucdr_deserialize_bool>
 800efa6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800efaa:	4004      	ands	r4, r0
 800efac:	b2e4      	uxtb	r4, r4
 800efae:	b95b      	cbnz	r3, 800efc8 <read_submessage_info+0x44>
 800efb0:	a987      	add	r1, sp, #540	@ 0x21c
 800efb2:	4628      	mov	r0, r5
 800efb4:	f7fe fada 	bl	800d56c <ucdr_deserialize_bool>
 800efb8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800efbc:	4606      	mov	r6, r0
 800efbe:	b94b      	cbnz	r3, 800efd4 <read_submessage_info+0x50>
 800efc0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800efc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc8:	a903      	add	r1, sp, #12
 800efca:	4628      	mov	r0, r5
 800efcc:	f002 fa9a 	bl	8011504 <uxr_deserialize_ObjectVariant>
 800efd0:	4004      	ands	r4, r0
 800efd2:	e7ed      	b.n	800efb0 <read_submessage_info+0x2c>
 800efd4:	a988      	add	r1, sp, #544	@ 0x220
 800efd6:	4628      	mov	r0, r5
 800efd8:	f7fe faf6 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 800efdc:	4234      	tst	r4, r6
 800efde:	d0ef      	beq.n	800efc0 <read_submessage_info+0x3c>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d0ed      	beq.n	800efc0 <read_submessage_info+0x3c>
 800efe4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800efe8:	2b0d      	cmp	r3, #13
 800efea:	d1e9      	bne.n	800efc0 <read_submessage_info+0x3c>
 800efec:	a98a      	add	r1, sp, #552	@ 0x228
 800efee:	4628      	mov	r0, r5
 800eff0:	f7ff f890 	bl	800e114 <ucdr_deserialize_int16_t>
 800eff4:	b140      	cbz	r0, 800f008 <read_submessage_info+0x84>
 800eff6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800effa:	2b00      	cmp	r3, #0
 800effc:	dd07      	ble.n	800f00e <read_submessage_info+0x8a>
 800effe:	f1b8 0f00 	cmp.w	r8, #0
 800f002:	bf14      	ite	ne
 800f004:	2001      	movne	r0, #1
 800f006:	2002      	moveq	r0, #2
 800f008:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f00c:	e7d8      	b.n	800efc0 <read_submessage_info+0x3c>
 800f00e:	2000      	movs	r0, #0
 800f010:	e7fa      	b.n	800f008 <read_submessage_info+0x84>
 800f012:	bf00      	nop

0800f014 <read_submessage_list>:
 800f014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f018:	b097      	sub	sp, #92	@ 0x5c
 800f01a:	4ec1      	ldr	r6, [pc, #772]	@ (800f320 <read_submessage_list+0x30c>)
 800f01c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f01e:	4604      	mov	r4, r0
 800f020:	460d      	mov	r5, r1
 800f022:	f04f 0801 	mov.w	r8, #1
 800f026:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f02a:	aa0c      	add	r2, sp, #48	@ 0x30
 800f02c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f030:	4628      	mov	r0, r5
 800f032:	f001 fcdd 	bl	80109f0 <uxr_read_submessage_header>
 800f036:	2800      	cmp	r0, #0
 800f038:	f000 813e 	beq.w	800f2b8 <read_submessage_list+0x2a4>
 800f03c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f040:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f044:	3b02      	subs	r3, #2
 800f046:	2b0d      	cmp	r3, #13
 800f048:	d8ed      	bhi.n	800f026 <read_submessage_list+0x12>
 800f04a:	a101      	add	r1, pc, #4	@ (adr r1, 800f050 <read_submessage_list+0x3c>)
 800f04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f050:	0800f2af 	.word	0x0800f2af
 800f054:	0800f027 	.word	0x0800f027
 800f058:	0800f29f 	.word	0x0800f29f
 800f05c:	0800f23d 	.word	0x0800f23d
 800f060:	0800f233 	.word	0x0800f233
 800f064:	0800f027 	.word	0x0800f027
 800f068:	0800f027 	.word	0x0800f027
 800f06c:	0800f193 	.word	0x0800f193
 800f070:	0800f123 	.word	0x0800f123
 800f074:	0800f0e3 	.word	0x0800f0e3
 800f078:	0800f027 	.word	0x0800f027
 800f07c:	0800f027 	.word	0x0800f027
 800f080:	0800f027 	.word	0x0800f027
 800f084:	0800f089 	.word	0x0800f089
 800f088:	a910      	add	r1, sp, #64	@ 0x40
 800f08a:	4628      	mov	r0, r5
 800f08c:	f002 fdc4 	bl	8011c18 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f090:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f094:	f1b9 0f00 	cmp.w	r9, #0
 800f098:	f000 8116 	beq.w	800f2c8 <read_submessage_list+0x2b4>
 800f09c:	f001 fcee 	bl	8010a7c <uxr_nanos>
 800f0a0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	468c      	mov	ip, r1
 800f0ac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f0b0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f0b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f0b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f0b8:	468c      	mov	ip, r1
 800f0ba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f0be:	46e2      	mov	sl, ip
 800f0c0:	46bc      	mov	ip, r7
 800f0c2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f0c6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f0ca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f0ce:	e9cd 7100 	strd	r7, r1, [sp]
 800f0d2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f0d6:	9106      	str	r1, [sp, #24]
 800f0d8:	4620      	mov	r0, r4
 800f0da:	47c8      	blx	r9
 800f0dc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f0e0:	e7a1      	b.n	800f026 <read_submessage_list+0x12>
 800f0e2:	a910      	add	r1, sp, #64	@ 0x40
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	f002 fd77 	bl	8011bd8 <uxr_deserialize_HEARTBEAT_Payload>
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f0f0:	f001 fb56 	bl	80107a0 <uxr_stream_id_from_raw>
 800f0f4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f0f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	f104 0008 	add.w	r0, r4, #8
 800f100:	f001 fc3c 	bl	801097c <uxr_get_input_reliable_stream>
 800f104:	2800      	cmp	r0, #0
 800f106:	d08e      	beq.n	800f026 <read_submessage_list+0x12>
 800f108:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f10c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f110:	f007 f956 	bl	80163c0 <uxr_process_heartbeat>
 800f114:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f118:	463a      	mov	r2, r7
 800f11a:	4620      	mov	r0, r4
 800f11c:	f7ff fdf4 	bl	800ed08 <write_submessage_acknack.isra.0>
 800f120:	e781      	b.n	800f026 <read_submessage_list+0x12>
 800f122:	a910      	add	r1, sp, #64	@ 0x40
 800f124:	4628      	mov	r0, r5
 800f126:	f002 fd2f 	bl	8011b88 <uxr_deserialize_ACKNACK_Payload>
 800f12a:	2100      	movs	r1, #0
 800f12c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f130:	f001 fb36 	bl	80107a0 <uxr_stream_id_from_raw>
 800f134:	900d      	str	r0, [sp, #52]	@ 0x34
 800f136:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f13a:	f104 0008 	add.w	r0, r4, #8
 800f13e:	f001 fc09 	bl	8010954 <uxr_get_output_reliable_stream>
 800f142:	4607      	mov	r7, r0
 800f144:	2800      	cmp	r0, #0
 800f146:	f43f af6e 	beq.w	800f026 <read_submessage_list+0x12>
 800f14a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f14e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f152:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f156:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f15a:	b289      	uxth	r1, r1
 800f15c:	f007 fc8a 	bl	8016a74 <uxr_process_acknack>
 800f160:	4638      	mov	r0, r7
 800f162:	f007 fc47 	bl	80169f4 <uxr_begin_output_nack_buffer_it>
 800f166:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f16a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f16e:	e006      	b.n	800f17e <read_submessage_list+0x16a>
 800f170:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f172:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f174:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f17a:	6818      	ldr	r0, [r3, #0]
 800f17c:	47c8      	blx	r9
 800f17e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f182:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f184:	4651      	mov	r1, sl
 800f186:	4638      	mov	r0, r7
 800f188:	f007 fc36 	bl	80169f8 <uxr_next_reliable_nack_buffer_to_send>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d1ef      	bne.n	800f170 <read_submessage_list+0x15c>
 800f190:	e749      	b.n	800f026 <read_submessage_list+0x12>
 800f192:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f196:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f19a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f19e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f1a2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f1a6:	4651      	mov	r1, sl
 800f1a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f1ac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800f1b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800f1b4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f1be:	f002 fa43 	bl	8011648 <uxr_deserialize_BaseObjectRequest>
 800f1c2:	4650      	mov	r0, sl
 800f1c4:	a90f      	add	r1, sp, #60	@ 0x3c
 800f1c6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f1ca:	f000 fe1b 	bl	800fe04 <uxr_parse_base_object_request>
 800f1ce:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800f1d2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f1d4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800f1d8:	9110      	str	r1, [sp, #64]	@ 0x40
 800f1da:	3f04      	subs	r7, #4
 800f1dc:	f009 090e 	and.w	r9, r9, #14
 800f1e0:	b2bf      	uxth	r7, r7
 800f1e2:	f1bb 0f00 	cmp.w	fp, #0
 800f1e6:	d006      	beq.n	800f1f6 <read_submessage_list+0x1e2>
 800f1e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	4652      	mov	r2, sl
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	47d8      	blx	fp
 800f1f6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f1f8:	b16a      	cbz	r2, 800f216 <read_submessage_list+0x202>
 800f1fa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	3802      	subs	r0, #2
 800f200:	e002      	b.n	800f208 <read_submessage_list+0x1f4>
 800f202:	3101      	adds	r1, #1
 800f204:	4291      	cmp	r1, r2
 800f206:	d006      	beq.n	800f216 <read_submessage_list+0x202>
 800f208:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f20c:	4553      	cmp	r3, sl
 800f20e:	d1f8      	bne.n	800f202 <read_submessage_list+0x1ee>
 800f210:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f212:	2200      	movs	r2, #0
 800f214:	545a      	strb	r2, [r3, r1]
 800f216:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f21a:	9102      	str	r1, [sp, #8]
 800f21c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f21e:	9101      	str	r1, [sp, #4]
 800f220:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f222:	9100      	str	r1, [sp, #0]
 800f224:	464b      	mov	r3, r9
 800f226:	463a      	mov	r2, r7
 800f228:	4629      	mov	r1, r5
 800f22a:	4620      	mov	r0, r4
 800f22c:	f7ff fc4a 	bl	800eac4 <read_submessage_format>
 800f230:	e6f9      	b.n	800f026 <read_submessage_list+0x12>
 800f232:	4629      	mov	r1, r5
 800f234:	4620      	mov	r0, r4
 800f236:	f7ff fea5 	bl	800ef84 <read_submessage_info>
 800f23a:	e6f4      	b.n	800f026 <read_submessage_list+0x12>
 800f23c:	2a00      	cmp	r2, #0
 800f23e:	d03e      	beq.n	800f2be <read_submessage_list+0x2aa>
 800f240:	a910      	add	r1, sp, #64	@ 0x40
 800f242:	4628      	mov	r0, r5
 800f244:	f002 fbfc 	bl	8011a40 <uxr_deserialize_STATUS_Payload>
 800f248:	a90e      	add	r1, sp, #56	@ 0x38
 800f24a:	aa0d      	add	r2, sp, #52	@ 0x34
 800f24c:	a810      	add	r0, sp, #64	@ 0x40
 800f24e:	f000 fdd9 	bl	800fe04 <uxr_parse_base_object_request>
 800f252:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f256:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f258:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f25c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f260:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f262:	f1ba 0f00 	cmp.w	sl, #0
 800f266:	d006      	beq.n	800f276 <read_submessage_list+0x262>
 800f268:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f26c:	9300      	str	r3, [sp, #0]
 800f26e:	463a      	mov	r2, r7
 800f270:	464b      	mov	r3, r9
 800f272:	4620      	mov	r0, r4
 800f274:	47d0      	blx	sl
 800f276:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f278:	2a00      	cmp	r2, #0
 800f27a:	f43f aed4 	beq.w	800f026 <read_submessage_list+0x12>
 800f27e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f280:	2100      	movs	r1, #0
 800f282:	3802      	subs	r0, #2
 800f284:	e003      	b.n	800f28e <read_submessage_list+0x27a>
 800f286:	3101      	adds	r1, #1
 800f288:	4291      	cmp	r1, r2
 800f28a:	f43f aecc 	beq.w	800f026 <read_submessage_list+0x12>
 800f28e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f292:	42bb      	cmp	r3, r7
 800f294:	d1f7      	bne.n	800f286 <read_submessage_list+0x272>
 800f296:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f298:	f803 9001 	strb.w	r9, [r3, r1]
 800f29c:	e6c3      	b.n	800f026 <read_submessage_list+0x12>
 800f29e:	2a00      	cmp	r2, #0
 800f2a0:	f47f aec1 	bne.w	800f026 <read_submessage_list+0x12>
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fcf2 	bl	800fc90 <uxr_read_create_session_status>
 800f2ac:	e6bb      	b.n	800f026 <read_submessage_list+0x12>
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f7ff fcf3 	bl	800ec9c <read_submessage_get_info>
 800f2b6:	e6b6      	b.n	800f026 <read_submessage_list+0x12>
 800f2b8:	b017      	add	sp, #92	@ 0x5c
 800f2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2be:	4629      	mov	r1, r5
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f000 fcf1 	bl	800fca8 <uxr_read_delete_session_status>
 800f2c6:	e6ae      	b.n	800f026 <read_submessage_list+0x12>
 800f2c8:	f001 fbd8 	bl	8010a7c <uxr_nanos>
 800f2cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f2ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f2d0:	464f      	mov	r7, r9
 800f2d2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f2d6:	1812      	adds	r2, r2, r0
 800f2d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f2da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f2dc:	eb47 0101 	adc.w	r1, r7, r1
 800f2e0:	464f      	mov	r7, r9
 800f2e2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f2e6:	463b      	mov	r3, r7
 800f2e8:	4684      	mov	ip, r0
 800f2ea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f2ee:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f2f2:	eb1c 0c00 	adds.w	ip, ip, r0
 800f2f6:	464f      	mov	r7, r9
 800f2f8:	eb43 0307 	adc.w	r3, r3, r7
 800f2fc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f300:	eb61 0303 	sbc.w	r3, r1, r3
 800f304:	0fda      	lsrs	r2, r3, #31
 800f306:	eb12 020c 	adds.w	r2, r2, ip
 800f30a:	f143 0300 	adc.w	r3, r3, #0
 800f30e:	0852      	lsrs	r2, r2, #1
 800f310:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f314:	105b      	asrs	r3, r3, #1
 800f316:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f31a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f31e:	e6dd      	b.n	800f0dc <read_submessage_list+0xc8>
 800f320:	3b9aca00 	.word	0x3b9aca00

0800f324 <listen_message_reliably>:
 800f324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f328:	1e0b      	subs	r3, r1, #0
 800f32a:	b09d      	sub	sp, #116	@ 0x74
 800f32c:	bfb8      	it	lt
 800f32e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f332:	4680      	mov	r8, r0
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	f001 fb87 	bl	8010a48 <uxr_millis>
 800f33a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f33e:	4681      	mov	r9, r0
 800f340:	2a00      	cmp	r2, #0
 800f342:	f000 80a1 	beq.w	800f488 <listen_message_reliably+0x164>
 800f346:	2600      	movs	r6, #0
 800f348:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f34c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f350:	9303      	str	r3, [sp, #12]
 800f352:	4630      	mov	r0, r6
 800f354:	460f      	mov	r7, r1
 800f356:	e00f      	b.n	800f378 <listen_message_reliably+0x54>
 800f358:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f35c:	9903      	ldr	r1, [sp, #12]
 800f35e:	455a      	cmp	r2, fp
 800f360:	f106 0601 	add.w	r6, r6, #1
 800f364:	eb73 0101 	sbcs.w	r1, r3, r1
 800f368:	b2f0      	uxtb	r0, r6
 800f36a:	da01      	bge.n	800f370 <listen_message_reliably+0x4c>
 800f36c:	4693      	mov	fp, r2
 800f36e:	9303      	str	r3, [sp, #12]
 800f370:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f374:	4283      	cmp	r3, r0
 800f376:	d960      	bls.n	800f43a <listen_message_reliably+0x116>
 800f378:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f37c:	2102      	movs	r1, #2
 800f37e:	2201      	movs	r2, #1
 800f380:	f001 f9e4 	bl	801074c <uxr_stream_id>
 800f384:	00e4      	lsls	r4, r4, #3
 800f386:	f104 0520 	add.w	r5, r4, #32
 800f38a:	4445      	add	r5, r8
 800f38c:	4601      	mov	r1, r0
 800f38e:	463b      	mov	r3, r7
 800f390:	464a      	mov	r2, r9
 800f392:	4628      	mov	r0, r5
 800f394:	9109      	str	r1, [sp, #36]	@ 0x24
 800f396:	f007 fb03 	bl	80169a0 <uxr_update_output_stream_heartbeat_timestamp>
 800f39a:	eb08 0304 	add.w	r3, r8, r4
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d0da      	beq.n	800f358 <listen_message_reliably+0x34>
 800f3a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f3a6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f3aa:	9304      	str	r3, [sp, #16]
 800f3ac:	4640      	mov	r0, r8
 800f3ae:	f000 fd03 	bl	800fdb8 <uxr_session_header_offset>
 800f3b2:	3501      	adds	r5, #1
 800f3b4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f3b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f3bc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	2211      	movs	r2, #17
 800f3c4:	9000      	str	r0, [sp, #0]
 800f3c6:	a90c      	add	r1, sp, #48	@ 0x30
 800f3c8:	4650      	mov	r0, sl
 800f3ca:	f7ff f881 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	2205      	movs	r2, #5
 800f3d2:	210b      	movs	r1, #11
 800f3d4:	4650      	mov	r0, sl
 800f3d6:	f001 faf1 	bl	80109bc <uxr_buffer_submessage_header>
 800f3da:	8968      	ldrh	r0, [r5, #10]
 800f3dc:	2101      	movs	r1, #1
 800f3de:	f007 fba1 	bl	8016b24 <uxr_seq_num_add>
 800f3e2:	892b      	ldrh	r3, [r5, #8]
 800f3e4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	9b04      	ldr	r3, [sp, #16]
 800f3ec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f3f0:	a90a      	add	r1, sp, #40	@ 0x28
 800f3f2:	4650      	mov	r0, sl
 800f3f4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f3f8:	f002 fbda 	bl	8011bb0 <uxr_serialize_HEARTBEAT_Payload>
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4611      	mov	r1, r2
 800f400:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f402:	4640      	mov	r0, r8
 800f404:	f000 fc82 	bl	800fd0c <uxr_stamp_session_header>
 800f408:	4650      	mov	r0, sl
 800f40a:	f7ff f89f 	bl	800e54c <ucdr_buffer_length>
 800f40e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f412:	4602      	mov	r2, r0
 800f414:	a90c      	add	r1, sp, #48	@ 0x30
 800f416:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f41a:	4444      	add	r4, r8
 800f41c:	47a8      	blx	r5
 800f41e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f422:	9903      	ldr	r1, [sp, #12]
 800f424:	455a      	cmp	r2, fp
 800f426:	f106 0601 	add.w	r6, r6, #1
 800f42a:	eb73 0101 	sbcs.w	r1, r3, r1
 800f42e:	b2f0      	uxtb	r0, r6
 800f430:	db9c      	blt.n	800f36c <listen_message_reliably+0x48>
 800f432:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f436:	4283      	cmp	r3, r0
 800f438:	d89e      	bhi.n	800f378 <listen_message_reliably+0x54>
 800f43a:	9a03      	ldr	r2, [sp, #12]
 800f43c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f440:	429a      	cmp	r2, r3
 800f442:	bf08      	it	eq
 800f444:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f448:	d01e      	beq.n	800f488 <listen_message_reliably+0x164>
 800f44a:	ebab 0309 	sub.w	r3, fp, r9
 800f44e:	9905      	ldr	r1, [sp, #20]
 800f450:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f454:	2b00      	cmp	r3, #0
 800f456:	bf08      	it	eq
 800f458:	2301      	moveq	r3, #1
 800f45a:	4299      	cmp	r1, r3
 800f45c:	bfa8      	it	ge
 800f45e:	4619      	movge	r1, r3
 800f460:	6894      	ldr	r4, [r2, #8]
 800f462:	6810      	ldr	r0, [r2, #0]
 800f464:	4689      	mov	r9, r1
 800f466:	460b      	mov	r3, r1
 800f468:	aa08      	add	r2, sp, #32
 800f46a:	a907      	add	r1, sp, #28
 800f46c:	47a0      	blx	r4
 800f46e:	b968      	cbnz	r0, 800f48c <listen_message_reliably+0x168>
 800f470:	9b05      	ldr	r3, [sp, #20]
 800f472:	eba3 0309 	sub.w	r3, r3, r9
 800f476:	2b00      	cmp	r3, #0
 800f478:	9305      	str	r3, [sp, #20]
 800f47a:	f73f af5c 	bgt.w	800f336 <listen_message_reliably+0x12>
 800f47e:	4604      	mov	r4, r0
 800f480:	4620      	mov	r0, r4
 800f482:	b01d      	add	sp, #116	@ 0x74
 800f484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f488:	9b05      	ldr	r3, [sp, #20]
 800f48a:	e7e0      	b.n	800f44e <listen_message_reliably+0x12a>
 800f48c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f490:	4604      	mov	r4, r0
 800f492:	a80c      	add	r0, sp, #48	@ 0x30
 800f494:	f7ff f82e 	bl	800e4f4 <ucdr_init_buffer>
 800f498:	2500      	movs	r5, #0
 800f49a:	f10d 031a 	add.w	r3, sp, #26
 800f49e:	aa06      	add	r2, sp, #24
 800f4a0:	a90c      	add	r1, sp, #48	@ 0x30
 800f4a2:	4640      	mov	r0, r8
 800f4a4:	f88d 5018 	strb.w	r5, [sp, #24]
 800f4a8:	f000 fc44 	bl	800fd34 <uxr_read_session_header>
 800f4ac:	b918      	cbnz	r0, 800f4b6 <listen_message_reliably+0x192>
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	b01d      	add	sp, #116	@ 0x74
 800f4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f4bc:	f001 f970 	bl	80107a0 <uxr_stream_id_from_raw>
 800f4c0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f4c4:	2d01      	cmp	r5, #1
 800f4c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f4ca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f4ce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f4d2:	d04b      	beq.n	800f56c <listen_message_reliably+0x248>
 800f4d4:	2d02      	cmp	r5, #2
 800f4d6:	d00f      	beq.n	800f4f8 <listen_message_reliably+0x1d4>
 800f4d8:	2d00      	cmp	r5, #0
 800f4da:	d1e8      	bne.n	800f4ae <listen_message_reliably+0x18a>
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f001 f95e 	bl	80107a0 <uxr_stream_id_from_raw>
 800f4e4:	a90c      	add	r1, sp, #48	@ 0x30
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	920a      	str	r2, [sp, #40]	@ 0x28
 800f4ec:	f7ff fd92 	bl	800f014 <read_submessage_list>
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	b01d      	add	sp, #116	@ 0x74
 800f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f8:	4631      	mov	r1, r6
 800f4fa:	f108 0008 	add.w	r0, r8, #8
 800f4fe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f502:	f001 fa3b 	bl	801097c <uxr_get_input_reliable_stream>
 800f506:	4607      	mov	r7, r0
 800f508:	b338      	cbz	r0, 800f55a <listen_message_reliably+0x236>
 800f50a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f50c:	9203      	str	r2, [sp, #12]
 800f50e:	a80c      	add	r0, sp, #48	@ 0x30
 800f510:	f7ff f820 	bl	800e554 <ucdr_buffer_remaining>
 800f514:	4603      	mov	r3, r0
 800f516:	f10d 0019 	add.w	r0, sp, #25
 800f51a:	9000      	str	r0, [sp, #0]
 800f51c:	9a03      	ldr	r2, [sp, #12]
 800f51e:	4651      	mov	r1, sl
 800f520:	4638      	mov	r0, r7
 800f522:	f006 fe53 	bl	80161cc <uxr_receive_reliable_message>
 800f526:	b1c0      	cbz	r0, 800f55a <listen_message_reliably+0x236>
 800f528:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f52c:	b393      	cbz	r3, 800f594 <listen_message_reliably+0x270>
 800f52e:	ad14      	add	r5, sp, #80	@ 0x50
 800f530:	f04f 0a02 	mov.w	sl, #2
 800f534:	e00a      	b.n	800f54c <listen_message_reliably+0x228>
 800f536:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f53a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f53e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f544:	4629      	mov	r1, r5
 800f546:	4640      	mov	r0, r8
 800f548:	f7ff fd64 	bl	800f014 <read_submessage_list>
 800f54c:	2204      	movs	r2, #4
 800f54e:	4629      	mov	r1, r5
 800f550:	4638      	mov	r0, r7
 800f552:	f006 febb 	bl	80162cc <uxr_next_input_reliable_buffer_available>
 800f556:	2800      	cmp	r0, #0
 800f558:	d1ed      	bne.n	800f536 <listen_message_reliably+0x212>
 800f55a:	4640      	mov	r0, r8
 800f55c:	4632      	mov	r2, r6
 800f55e:	4649      	mov	r1, r9
 800f560:	f7ff fbd2 	bl	800ed08 <write_submessage_acknack.isra.0>
 800f564:	4620      	mov	r0, r4
 800f566:	b01d      	add	sp, #116	@ 0x74
 800f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56c:	4631      	mov	r1, r6
 800f56e:	f108 0008 	add.w	r0, r8, #8
 800f572:	f001 f9f9 	bl	8010968 <uxr_get_input_best_effort_stream>
 800f576:	2800      	cmp	r0, #0
 800f578:	d099      	beq.n	800f4ae <listen_message_reliably+0x18a>
 800f57a:	4651      	mov	r1, sl
 800f57c:	f006 fd92 	bl	80160a4 <uxr_receive_best_effort_message>
 800f580:	2800      	cmp	r0, #0
 800f582:	d094      	beq.n	800f4ae <listen_message_reliably+0x18a>
 800f584:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f588:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f58a:	a90c      	add	r1, sp, #48	@ 0x30
 800f58c:	4640      	mov	r0, r8
 800f58e:	f7ff fd41 	bl	800f014 <read_submessage_list>
 800f592:	e78c      	b.n	800f4ae <listen_message_reliably+0x18a>
 800f594:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f59a:	a90c      	add	r1, sp, #48	@ 0x30
 800f59c:	4640      	mov	r0, r8
 800f59e:	f7ff fd39 	bl	800f014 <read_submessage_list>
 800f5a2:	e7c4      	b.n	800f52e <listen_message_reliably+0x20a>

0800f5a4 <uxr_run_session_timeout>:
 800f5a4:	b570      	push	{r4, r5, r6, lr}
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	460d      	mov	r5, r1
 800f5aa:	f001 fa4d 	bl	8010a48 <uxr_millis>
 800f5ae:	4606      	mov	r6, r0
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f7ff fc71 	bl	800ee98 <uxr_flash_output_streams>
 800f5b6:	4629      	mov	r1, r5
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f7ff feb3 	bl	800f324 <listen_message_reliably>
 800f5be:	f001 fa43 	bl	8010a48 <uxr_millis>
 800f5c2:	1b83      	subs	r3, r0, r6
 800f5c4:	1ae9      	subs	r1, r5, r3
 800f5c6:	2900      	cmp	r1, #0
 800f5c8:	dcf6      	bgt.n	800f5b8 <uxr_run_session_timeout+0x14>
 800f5ca:	f104 0008 	add.w	r0, r4, #8
 800f5ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5d2:	f001 b9dd 	b.w	8010990 <uxr_output_streams_confirmed>
 800f5d6:	bf00      	nop

0800f5d8 <uxr_run_session_until_data>:
 800f5d8:	b570      	push	{r4, r5, r6, lr}
 800f5da:	4604      	mov	r4, r0
 800f5dc:	460d      	mov	r5, r1
 800f5de:	f001 fa33 	bl	8010a48 <uxr_millis>
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff fc57 	bl	800ee98 <uxr_flash_output_streams>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	e005      	b.n	800f600 <uxr_run_session_until_data+0x28>
 800f5f4:	f001 fa28 	bl	8010a48 <uxr_millis>
 800f5f8:	1b83      	subs	r3, r0, r6
 800f5fa:	1ae9      	subs	r1, r5, r3
 800f5fc:	2900      	cmp	r1, #0
 800f5fe:	dd07      	ble.n	800f610 <uxr_run_session_until_data+0x38>
 800f600:	4620      	mov	r0, r4
 800f602:	f7ff fe8f 	bl	800f324 <listen_message_reliably>
 800f606:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d0f2      	beq.n	800f5f4 <uxr_run_session_until_data+0x1c>
 800f60e:	bd70      	pop	{r4, r5, r6, pc}
 800f610:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f614:	bd70      	pop	{r4, r5, r6, pc}
 800f616:	bf00      	nop

0800f618 <uxr_run_session_until_confirm_delivery>:
 800f618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f61c:	4606      	mov	r6, r0
 800f61e:	460d      	mov	r5, r1
 800f620:	f001 fa12 	bl	8010a48 <uxr_millis>
 800f624:	4607      	mov	r7, r0
 800f626:	4630      	mov	r0, r6
 800f628:	f7ff fc36 	bl	800ee98 <uxr_flash_output_streams>
 800f62c:	2d00      	cmp	r5, #0
 800f62e:	f106 0808 	add.w	r8, r6, #8
 800f632:	bfa8      	it	ge
 800f634:	462c      	movge	r4, r5
 800f636:	da07      	bge.n	800f648 <uxr_run_session_until_confirm_delivery+0x30>
 800f638:	e00e      	b.n	800f658 <uxr_run_session_until_confirm_delivery+0x40>
 800f63a:	f7ff fe73 	bl	800f324 <listen_message_reliably>
 800f63e:	f001 fa03 	bl	8010a48 <uxr_millis>
 800f642:	1bc3      	subs	r3, r0, r7
 800f644:	1aec      	subs	r4, r5, r3
 800f646:	d407      	bmi.n	800f658 <uxr_run_session_until_confirm_delivery+0x40>
 800f648:	4640      	mov	r0, r8
 800f64a:	f001 f9a1 	bl	8010990 <uxr_output_streams_confirmed>
 800f64e:	4603      	mov	r3, r0
 800f650:	4621      	mov	r1, r4
 800f652:	4630      	mov	r0, r6
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0f0      	beq.n	800f63a <uxr_run_session_until_confirm_delivery+0x22>
 800f658:	4640      	mov	r0, r8
 800f65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f65e:	f001 b997 	b.w	8010990 <uxr_output_streams_confirmed>
 800f662:	bf00      	nop

0800f664 <uxr_run_session_until_all_status>:
 800f664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f668:	9c08      	ldr	r4, [sp, #32]
 800f66a:	4606      	mov	r6, r0
 800f66c:	460f      	mov	r7, r1
 800f66e:	4691      	mov	r9, r2
 800f670:	461d      	mov	r5, r3
 800f672:	f7ff fc11 	bl	800ee98 <uxr_flash_output_streams>
 800f676:	b124      	cbz	r4, 800f682 <uxr_run_session_until_all_status+0x1e>
 800f678:	4622      	mov	r2, r4
 800f67a:	21ff      	movs	r1, #255	@ 0xff
 800f67c:	4628      	mov	r0, r5
 800f67e:	f008 fa0b 	bl	8017a98 <memset>
 800f682:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f686:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f688:	f001 f9de 	bl	8010a48 <uxr_millis>
 800f68c:	3d01      	subs	r5, #1
 800f68e:	f1a9 0902 	sub.w	r9, r9, #2
 800f692:	4680      	mov	r8, r0
 800f694:	4639      	mov	r1, r7
 800f696:	4630      	mov	r0, r6
 800f698:	f7ff fe44 	bl	800f324 <listen_message_reliably>
 800f69c:	f001 f9d4 	bl	8010a48 <uxr_millis>
 800f6a0:	eba0 0008 	sub.w	r0, r0, r8
 800f6a4:	1a39      	subs	r1, r7, r0
 800f6a6:	b344      	cbz	r4, 800f6fa <uxr_run_session_until_all_status+0x96>
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	46ac      	mov	ip, r5
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e002      	b.n	800f6b6 <uxr_run_session_until_all_status+0x52>
 800f6b0:	42a3      	cmp	r3, r4
 800f6b2:	d20d      	bcs.n	800f6d0 <uxr_run_session_until_all_status+0x6c>
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f6ba:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f6be:	d1f7      	bne.n	800f6b0 <uxr_run_session_until_all_status+0x4c>
 800f6c0:	42a3      	cmp	r3, r4
 800f6c2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f6c6:	d213      	bcs.n	800f6f0 <uxr_run_session_until_all_status+0x8c>
 800f6c8:	2a00      	cmp	r2, #0
 800f6ca:	d0f3      	beq.n	800f6b4 <uxr_run_session_until_all_status+0x50>
 800f6cc:	2900      	cmp	r1, #0
 800f6ce:	dce2      	bgt.n	800f696 <uxr_run_session_until_all_status+0x32>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f6d4:	442c      	add	r4, r5
 800f6d6:	e001      	b.n	800f6dc <uxr_run_session_until_all_status+0x78>
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d812      	bhi.n	800f702 <uxr_run_session_until_all_status+0x9e>
 800f6dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f6e0:	4284      	cmp	r4, r0
 800f6e2:	d1f9      	bne.n	800f6d8 <uxr_run_session_until_all_status+0x74>
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	bf8c      	ite	hi
 800f6e8:	2000      	movhi	r0, #0
 800f6ea:	2001      	movls	r0, #1
 800f6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6f0:	2900      	cmp	r1, #0
 800f6f2:	dded      	ble.n	800f6d0 <uxr_run_session_until_all_status+0x6c>
 800f6f4:	2a00      	cmp	r2, #0
 800f6f6:	d1ce      	bne.n	800f696 <uxr_run_session_until_all_status+0x32>
 800f6f8:	e7ea      	b.n	800f6d0 <uxr_run_session_until_all_status+0x6c>
 800f6fa:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f6fc:	2001      	movs	r0, #1
 800f6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f702:	2000      	movs	r0, #0
 800f704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f708 <uxr_sync_session>:
 800f708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f70a:	b093      	sub	sp, #76	@ 0x4c
 800f70c:	4604      	mov	r4, r0
 800f70e:	460d      	mov	r5, r1
 800f710:	f000 fb52 	bl	800fdb8 <uxr_session_header_offset>
 800f714:	2214      	movs	r2, #20
 800f716:	eb0d 0102 	add.w	r1, sp, r2
 800f71a:	9000      	str	r0, [sp, #0]
 800f71c:	2300      	movs	r3, #0
 800f71e:	a80a      	add	r0, sp, #40	@ 0x28
 800f720:	f7fe fed6 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 800f724:	2300      	movs	r3, #0
 800f726:	2208      	movs	r2, #8
 800f728:	210e      	movs	r1, #14
 800f72a:	a80a      	add	r0, sp, #40	@ 0x28
 800f72c:	f001 f946 	bl	80109bc <uxr_buffer_submessage_header>
 800f730:	f001 f9a4 	bl	8010a7c <uxr_nanos>
 800f734:	a31c      	add	r3, pc, #112	@ (adr r3, 800f7a8 <uxr_sync_session+0xa0>)
 800f736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73a:	460e      	mov	r6, r1
 800f73c:	4607      	mov	r7, r0
 800f73e:	f7f0 fdd7 	bl	80002f0 <__aeabi_ldivmod>
 800f742:	4631      	mov	r1, r6
 800f744:	9003      	str	r0, [sp, #12]
 800f746:	a318      	add	r3, pc, #96	@ (adr r3, 800f7a8 <uxr_sync_session+0xa0>)
 800f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74c:	4638      	mov	r0, r7
 800f74e:	f7f0 fdcf 	bl	80002f0 <__aeabi_ldivmod>
 800f752:	a903      	add	r1, sp, #12
 800f754:	a80a      	add	r0, sp, #40	@ 0x28
 800f756:	9204      	str	r2, [sp, #16]
 800f758:	f002 fa50 	bl	8011bfc <uxr_serialize_TIMESTAMP_Payload>
 800f75c:	2200      	movs	r2, #0
 800f75e:	4611      	mov	r1, r2
 800f760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f762:	4620      	mov	r0, r4
 800f764:	f000 fad2 	bl	800fd0c <uxr_stamp_session_header>
 800f768:	a80a      	add	r0, sp, #40	@ 0x28
 800f76a:	f7fe feef 	bl	800e54c <ucdr_buffer_length>
 800f76e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f770:	4602      	mov	r2, r0
 800f772:	a905      	add	r1, sp, #20
 800f774:	e9d3 0600 	ldrd	r0, r6, [r3]
 800f778:	47b0      	blx	r6
 800f77a:	f001 f965 	bl	8010a48 <uxr_millis>
 800f77e:	2300      	movs	r3, #0
 800f780:	4606      	mov	r6, r0
 800f782:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800f786:	4629      	mov	r1, r5
 800f788:	e000      	b.n	800f78c <uxr_sync_session+0x84>
 800f78a:	b950      	cbnz	r0, 800f7a2 <uxr_sync_session+0x9a>
 800f78c:	4620      	mov	r0, r4
 800f78e:	f7ff fdc9 	bl	800f324 <listen_message_reliably>
 800f792:	f001 f959 	bl	8010a48 <uxr_millis>
 800f796:	1b83      	subs	r3, r0, r6
 800f798:	1ae9      	subs	r1, r5, r3
 800f79a:	2900      	cmp	r1, #0
 800f79c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800f7a0:	dcf3      	bgt.n	800f78a <uxr_sync_session+0x82>
 800f7a2:	b013      	add	sp, #76	@ 0x4c
 800f7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	3b9aca00 	.word	0x3b9aca00
 800f7ac:	00000000 	.word	0x00000000

0800f7b0 <wait_session_status>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	b09d      	sub	sp, #116	@ 0x74
 800f7b8:	20ff      	movs	r0, #255	@ 0xff
 800f7ba:	7160      	strb	r0, [r4, #5]
 800f7bc:	9303      	str	r3, [sp, #12]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f000 80b6 	beq.w	800f930 <wait_session_status+0x180>
 800f7c4:	468a      	mov	sl, r1
 800f7c6:	4691      	mov	r9, r2
 800f7c8:	f04f 0b00 	mov.w	fp, #0
 800f7cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f7ce:	464a      	mov	r2, r9
 800f7d0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f7d4:	4651      	mov	r1, sl
 800f7d6:	47a8      	blx	r5
 800f7d8:	f001 f936 	bl	8010a48 <uxr_millis>
 800f7dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	e009      	b.n	800f7f8 <wait_session_status+0x48>
 800f7e4:	f001 f930 	bl	8010a48 <uxr_millis>
 800f7e8:	1b40      	subs	r0, r0, r5
 800f7ea:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	dd40      	ble.n	800f874 <wait_session_status+0xc4>
 800f7f2:	7960      	ldrb	r0, [r4, #5]
 800f7f4:	28ff      	cmp	r0, #255	@ 0xff
 800f7f6:	d145      	bne.n	800f884 <wait_session_status+0xd4>
 800f7f8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f7fa:	a908      	add	r1, sp, #32
 800f7fc:	6896      	ldr	r6, [r2, #8]
 800f7fe:	6810      	ldr	r0, [r2, #0]
 800f800:	aa09      	add	r2, sp, #36	@ 0x24
 800f802:	47b0      	blx	r6
 800f804:	2800      	cmp	r0, #0
 800f806:	d0ed      	beq.n	800f7e4 <wait_session_status+0x34>
 800f808:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f80c:	a80c      	add	r0, sp, #48	@ 0x30
 800f80e:	f7fe fe71 	bl	800e4f4 <ucdr_init_buffer>
 800f812:	2600      	movs	r6, #0
 800f814:	f10d 031e 	add.w	r3, sp, #30
 800f818:	aa07      	add	r2, sp, #28
 800f81a:	a90c      	add	r1, sp, #48	@ 0x30
 800f81c:	4620      	mov	r0, r4
 800f81e:	f88d 601c 	strb.w	r6, [sp, #28]
 800f822:	f000 fa87 	bl	800fd34 <uxr_read_session_header>
 800f826:	2800      	cmp	r0, #0
 800f828:	d0dc      	beq.n	800f7e4 <wait_session_status+0x34>
 800f82a:	4631      	mov	r1, r6
 800f82c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f830:	f000 ffb6 	bl	80107a0 <uxr_stream_id_from_raw>
 800f834:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f838:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f83c:	9302      	str	r3, [sp, #8]
 800f83e:	2f01      	cmp	r7, #1
 800f840:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f844:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f848:	d05c      	beq.n	800f904 <wait_session_status+0x154>
 800f84a:	2f02      	cmp	r7, #2
 800f84c:	d020      	beq.n	800f890 <wait_session_status+0xe0>
 800f84e:	2f00      	cmp	r7, #0
 800f850:	d1c8      	bne.n	800f7e4 <wait_session_status+0x34>
 800f852:	4639      	mov	r1, r7
 800f854:	4638      	mov	r0, r7
 800f856:	f000 ffa3 	bl	80107a0 <uxr_stream_id_from_raw>
 800f85a:	a90c      	add	r1, sp, #48	@ 0x30
 800f85c:	4602      	mov	r2, r0
 800f85e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f860:	4620      	mov	r0, r4
 800f862:	f7ff fbd7 	bl	800f014 <read_submessage_list>
 800f866:	f001 f8ef 	bl	8010a48 <uxr_millis>
 800f86a:	1b40      	subs	r0, r0, r5
 800f86c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f870:	2b00      	cmp	r3, #0
 800f872:	dcbe      	bgt.n	800f7f2 <wait_session_status+0x42>
 800f874:	9b03      	ldr	r3, [sp, #12]
 800f876:	7960      	ldrb	r0, [r4, #5]
 800f878:	f10b 0b01 	add.w	fp, fp, #1
 800f87c:	455b      	cmp	r3, fp
 800f87e:	d001      	beq.n	800f884 <wait_session_status+0xd4>
 800f880:	28ff      	cmp	r0, #255	@ 0xff
 800f882:	d0a3      	beq.n	800f7cc <wait_session_status+0x1c>
 800f884:	38ff      	subs	r0, #255	@ 0xff
 800f886:	bf18      	it	ne
 800f888:	2001      	movne	r0, #1
 800f88a:	b01d      	add	sp, #116	@ 0x74
 800f88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f890:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f894:	9304      	str	r3, [sp, #16]
 800f896:	4631      	mov	r1, r6
 800f898:	f104 0008 	add.w	r0, r4, #8
 800f89c:	f001 f86e 	bl	801097c <uxr_get_input_reliable_stream>
 800f8a0:	4680      	mov	r8, r0
 800f8a2:	b348      	cbz	r0, 800f8f8 <wait_session_status+0x148>
 800f8a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f8a6:	9205      	str	r2, [sp, #20]
 800f8a8:	a80c      	add	r0, sp, #48	@ 0x30
 800f8aa:	f7fe fe53 	bl	800e554 <ucdr_buffer_remaining>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	f10d 001d 	add.w	r0, sp, #29
 800f8b4:	9000      	str	r0, [sp, #0]
 800f8b6:	9a05      	ldr	r2, [sp, #20]
 800f8b8:	9902      	ldr	r1, [sp, #8]
 800f8ba:	4640      	mov	r0, r8
 800f8bc:	f006 fc86 	bl	80161cc <uxr_receive_reliable_message>
 800f8c0:	b1d0      	cbz	r0, 800f8f8 <wait_session_status+0x148>
 800f8c2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d03a      	beq.n	800f940 <wait_session_status+0x190>
 800f8ca:	9f04      	ldr	r7, [sp, #16]
 800f8cc:	e00a      	b.n	800f8e4 <wait_session_status+0x134>
 800f8ce:	f04f 0302 	mov.w	r3, #2
 800f8d2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f8d6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f8da:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f8de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8e0:	f7ff fb98 	bl	800f014 <read_submessage_list>
 800f8e4:	a914      	add	r1, sp, #80	@ 0x50
 800f8e6:	2204      	movs	r2, #4
 800f8e8:	4640      	mov	r0, r8
 800f8ea:	f006 fcef 	bl	80162cc <uxr_next_input_reliable_buffer_available>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	a914      	add	r1, sp, #80	@ 0x50
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1ea      	bne.n	800f8ce <wait_session_status+0x11e>
 800f8f8:	9904      	ldr	r1, [sp, #16]
 800f8fa:	4632      	mov	r2, r6
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f7ff fa03 	bl	800ed08 <write_submessage_acknack.isra.0>
 800f902:	e76f      	b.n	800f7e4 <wait_session_status+0x34>
 800f904:	4631      	mov	r1, r6
 800f906:	f104 0008 	add.w	r0, r4, #8
 800f90a:	f001 f82d 	bl	8010968 <uxr_get_input_best_effort_stream>
 800f90e:	2800      	cmp	r0, #0
 800f910:	f43f af68 	beq.w	800f7e4 <wait_session_status+0x34>
 800f914:	9902      	ldr	r1, [sp, #8]
 800f916:	f006 fbc5 	bl	80160a4 <uxr_receive_best_effort_message>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	f43f af62 	beq.w	800f7e4 <wait_session_status+0x34>
 800f920:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f924:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f926:	a90c      	add	r1, sp, #48	@ 0x30
 800f928:	4620      	mov	r0, r4
 800f92a:	f7ff fb73 	bl	800f014 <read_submessage_list>
 800f92e:	e759      	b.n	800f7e4 <wait_session_status+0x34>
 800f930:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f932:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f936:	47a0      	blx	r4
 800f938:	2001      	movs	r0, #1
 800f93a:	b01d      	add	sp, #116	@ 0x74
 800f93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f940:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f944:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f946:	a90c      	add	r1, sp, #48	@ 0x30
 800f948:	4620      	mov	r0, r4
 800f94a:	f7ff fb63 	bl	800f014 <read_submessage_list>
 800f94e:	e7bc      	b.n	800f8ca <wait_session_status+0x11a>

0800f950 <uxr_delete_session_retries>:
 800f950:	b530      	push	{r4, r5, lr}
 800f952:	b08f      	sub	sp, #60	@ 0x3c
 800f954:	4604      	mov	r4, r0
 800f956:	460d      	mov	r5, r1
 800f958:	f000 fa2e 	bl	800fdb8 <uxr_session_header_offset>
 800f95c:	2300      	movs	r3, #0
 800f95e:	2210      	movs	r2, #16
 800f960:	9000      	str	r0, [sp, #0]
 800f962:	a902      	add	r1, sp, #8
 800f964:	a806      	add	r0, sp, #24
 800f966:	f7fe fdb3 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 800f96a:	a906      	add	r1, sp, #24
 800f96c:	4620      	mov	r0, r4
 800f96e:	f000 f973 	bl	800fc58 <uxr_buffer_delete_session>
 800f972:	2200      	movs	r2, #0
 800f974:	4611      	mov	r1, r2
 800f976:	9b06      	ldr	r3, [sp, #24]
 800f978:	4620      	mov	r0, r4
 800f97a:	f000 f9c7 	bl	800fd0c <uxr_stamp_session_header>
 800f97e:	a806      	add	r0, sp, #24
 800f980:	f7fe fde4 	bl	800e54c <ucdr_buffer_length>
 800f984:	462b      	mov	r3, r5
 800f986:	4602      	mov	r2, r0
 800f988:	a902      	add	r1, sp, #8
 800f98a:	4620      	mov	r0, r4
 800f98c:	f7ff ff10 	bl	800f7b0 <wait_session_status>
 800f990:	b118      	cbz	r0, 800f99a <uxr_delete_session_retries+0x4a>
 800f992:	7960      	ldrb	r0, [r4, #5]
 800f994:	fab0 f080 	clz	r0, r0
 800f998:	0940      	lsrs	r0, r0, #5
 800f99a:	b00f      	add	sp, #60	@ 0x3c
 800f99c:	bd30      	pop	{r4, r5, pc}
 800f99e:	bf00      	nop

0800f9a0 <uxr_create_session>:
 800f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	f100 0b08 	add.w	fp, r0, #8
 800f9a8:	b0ab      	sub	sp, #172	@ 0xac
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	4658      	mov	r0, fp
 800f9ae:	f000 ff2b 	bl	8010808 <uxr_reset_stream_storage>
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 fa00 	bl	800fdb8 <uxr_session_header_offset>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	9000      	str	r0, [sp, #0]
 800f9bc:	221c      	movs	r2, #28
 800f9be:	a90b      	add	r1, sp, #44	@ 0x2c
 800f9c0:	a812      	add	r0, sp, #72	@ 0x48
 800f9c2:	f7fe fd85 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 800f9c6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f9c8:	8a1a      	ldrh	r2, [r3, #16]
 800f9ca:	3a04      	subs	r2, #4
 800f9cc:	b292      	uxth	r2, r2
 800f9ce:	a912      	add	r1, sp, #72	@ 0x48
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f000 f917 	bl	800fc04 <uxr_buffer_create_session>
 800f9d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f000 f983 	bl	800fce4 <uxr_stamp_create_session_header>
 800f9de:	a812      	add	r0, sp, #72	@ 0x48
 800f9e0:	f7fe fdb4 	bl	800e54c <ucdr_buffer_length>
 800f9e4:	23ff      	movs	r3, #255	@ 0xff
 800f9e6:	7163      	strb	r3, [r4, #5]
 800f9e8:	230a      	movs	r3, #10
 800f9ea:	46da      	mov	sl, fp
 800f9ec:	9303      	str	r3, [sp, #12]
 800f9ee:	4683      	mov	fp, r0
 800f9f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f9f2:	465a      	mov	r2, fp
 800f9f4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f9f8:	a90b      	add	r1, sp, #44	@ 0x2c
 800f9fa:	47a8      	blx	r5
 800f9fc:	f001 f824 	bl	8010a48 <uxr_millis>
 800fa00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa04:	4605      	mov	r5, r0
 800fa06:	e009      	b.n	800fa1c <uxr_create_session+0x7c>
 800fa08:	f001 f81e 	bl	8010a48 <uxr_millis>
 800fa0c:	1b40      	subs	r0, r0, r5
 800fa0e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	7962      	ldrb	r2, [r4, #5]
 800fa16:	dd38      	ble.n	800fa8a <uxr_create_session+0xea>
 800fa18:	2aff      	cmp	r2, #255	@ 0xff
 800fa1a:	d13c      	bne.n	800fa96 <uxr_create_session+0xf6>
 800fa1c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fa1e:	a907      	add	r1, sp, #28
 800fa20:	6896      	ldr	r6, [r2, #8]
 800fa22:	6810      	ldr	r0, [r2, #0]
 800fa24:	aa08      	add	r2, sp, #32
 800fa26:	47b0      	blx	r6
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d0ed      	beq.n	800fa08 <uxr_create_session+0x68>
 800fa2c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fa30:	a81a      	add	r0, sp, #104	@ 0x68
 800fa32:	f7fe fd5f 	bl	800e4f4 <ucdr_init_buffer>
 800fa36:	2600      	movs	r6, #0
 800fa38:	f10d 031a 	add.w	r3, sp, #26
 800fa3c:	aa06      	add	r2, sp, #24
 800fa3e:	a91a      	add	r1, sp, #104	@ 0x68
 800fa40:	4620      	mov	r0, r4
 800fa42:	f88d 6018 	strb.w	r6, [sp, #24]
 800fa46:	f000 f975 	bl	800fd34 <uxr_read_session_header>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d0dc      	beq.n	800fa08 <uxr_create_session+0x68>
 800fa4e:	4631      	mov	r1, r6
 800fa50:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fa54:	f000 fea4 	bl	80107a0 <uxr_stream_id_from_raw>
 800fa58:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fa5c:	2e01      	cmp	r6, #1
 800fa5e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fa62:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800fa66:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fa6a:	d053      	beq.n	800fb14 <uxr_create_session+0x174>
 800fa6c:	2e02      	cmp	r6, #2
 800fa6e:	d018      	beq.n	800faa2 <uxr_create_session+0x102>
 800fa70:	2e00      	cmp	r6, #0
 800fa72:	d1c9      	bne.n	800fa08 <uxr_create_session+0x68>
 800fa74:	4631      	mov	r1, r6
 800fa76:	4630      	mov	r0, r6
 800fa78:	f000 fe92 	bl	80107a0 <uxr_stream_id_from_raw>
 800fa7c:	a91a      	add	r1, sp, #104	@ 0x68
 800fa7e:	4602      	mov	r2, r0
 800fa80:	900a      	str	r0, [sp, #40]	@ 0x28
 800fa82:	4620      	mov	r0, r4
 800fa84:	f7ff fac6 	bl	800f014 <read_submessage_list>
 800fa88:	e7be      	b.n	800fa08 <uxr_create_session+0x68>
 800fa8a:	9b03      	ldr	r3, [sp, #12]
 800fa8c:	3b01      	subs	r3, #1
 800fa8e:	9303      	str	r3, [sp, #12]
 800fa90:	d001      	beq.n	800fa96 <uxr_create_session+0xf6>
 800fa92:	2aff      	cmp	r2, #255	@ 0xff
 800fa94:	d0ac      	beq.n	800f9f0 <uxr_create_session+0x50>
 800fa96:	2a00      	cmp	r2, #0
 800fa98:	d051      	beq.n	800fb3e <uxr_create_session+0x19e>
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	b02b      	add	sp, #172	@ 0xac
 800fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800faa6:	9304      	str	r3, [sp, #16]
 800faa8:	4639      	mov	r1, r7
 800faaa:	4650      	mov	r0, sl
 800faac:	f000 ff66 	bl	801097c <uxr_get_input_reliable_stream>
 800fab0:	4680      	mov	r8, r0
 800fab2:	b348      	cbz	r0, 800fb08 <uxr_create_session+0x168>
 800fab4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fab6:	9205      	str	r2, [sp, #20]
 800fab8:	a81a      	add	r0, sp, #104	@ 0x68
 800faba:	f7fe fd4b 	bl	800e554 <ucdr_buffer_remaining>
 800fabe:	4603      	mov	r3, r0
 800fac0:	f10d 0019 	add.w	r0, sp, #25
 800fac4:	9000      	str	r0, [sp, #0]
 800fac6:	9a05      	ldr	r2, [sp, #20]
 800fac8:	4649      	mov	r1, r9
 800faca:	4640      	mov	r0, r8
 800facc:	f006 fb7e 	bl	80161cc <uxr_receive_reliable_message>
 800fad0:	b1d0      	cbz	r0, 800fb08 <uxr_create_session+0x168>
 800fad2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d038      	beq.n	800fb4c <uxr_create_session+0x1ac>
 800fada:	9e04      	ldr	r6, [sp, #16]
 800fadc:	e00a      	b.n	800faf4 <uxr_create_session+0x154>
 800fade:	f04f 0302 	mov.w	r3, #2
 800fae2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800fae6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800faea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800faee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faf0:	f7ff fa90 	bl	800f014 <read_submessage_list>
 800faf4:	a922      	add	r1, sp, #136	@ 0x88
 800faf6:	2204      	movs	r2, #4
 800faf8:	4640      	mov	r0, r8
 800fafa:	f006 fbe7 	bl	80162cc <uxr_next_input_reliable_buffer_available>
 800fafe:	4603      	mov	r3, r0
 800fb00:	a922      	add	r1, sp, #136	@ 0x88
 800fb02:	4620      	mov	r0, r4
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1ea      	bne.n	800fade <uxr_create_session+0x13e>
 800fb08:	9904      	ldr	r1, [sp, #16]
 800fb0a:	463a      	mov	r2, r7
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f7ff f8fb 	bl	800ed08 <write_submessage_acknack.isra.0>
 800fb12:	e779      	b.n	800fa08 <uxr_create_session+0x68>
 800fb14:	4639      	mov	r1, r7
 800fb16:	4650      	mov	r0, sl
 800fb18:	f000 ff26 	bl	8010968 <uxr_get_input_best_effort_stream>
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	f43f af73 	beq.w	800fa08 <uxr_create_session+0x68>
 800fb22:	4649      	mov	r1, r9
 800fb24:	f006 fabe 	bl	80160a4 <uxr_receive_best_effort_message>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	f43f af6d 	beq.w	800fa08 <uxr_create_session+0x68>
 800fb2e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fb32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb34:	a91a      	add	r1, sp, #104	@ 0x68
 800fb36:	4620      	mov	r0, r4
 800fb38:	f7ff fa6c 	bl	800f014 <read_submessage_list>
 800fb3c:	e764      	b.n	800fa08 <uxr_create_session+0x68>
 800fb3e:	4650      	mov	r0, sl
 800fb40:	f000 fe62 	bl	8010808 <uxr_reset_stream_storage>
 800fb44:	2001      	movs	r0, #1
 800fb46:	b02b      	add	sp, #172	@ 0xac
 800fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fb50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb52:	a91a      	add	r1, sp, #104	@ 0x68
 800fb54:	4620      	mov	r0, r4
 800fb56:	f7ff fa5d 	bl	800f014 <read_submessage_list>
 800fb5a:	e7be      	b.n	800fada <uxr_create_session+0x13a>

0800fb5c <uxr_prepare_stream_to_write_submessage>:
 800fb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb60:	b082      	sub	sp, #8
 800fb62:	4682      	mov	sl, r0
 800fb64:	4610      	mov	r0, r2
 800fb66:	4615      	mov	r5, r2
 800fb68:	461e      	mov	r6, r3
 800fb6a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800fb6e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800fb72:	9101      	str	r1, [sp, #4]
 800fb74:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800fb78:	f000 ff60 	bl	8010a3c <uxr_submessage_padding>
 800fb7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb80:	f105 0904 	add.w	r9, r5, #4
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	4481      	add	r9, r0
 800fb88:	d01d      	beq.n	800fbc6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800fb8a:	2b02      	cmp	r3, #2
 800fb8c:	d116      	bne.n	800fbbc <uxr_prepare_stream_to_write_submessage+0x60>
 800fb8e:	4621      	mov	r1, r4
 800fb90:	f10a 0008 	add.w	r0, sl, #8
 800fb94:	f000 fede 	bl	8010954 <uxr_get_output_reliable_stream>
 800fb98:	4604      	mov	r4, r0
 800fb9a:	b158      	cbz	r0, 800fbb4 <uxr_prepare_stream_to_write_submessage+0x58>
 800fb9c:	4649      	mov	r1, r9
 800fb9e:	4632      	mov	r2, r6
 800fba0:	f006 fd50 	bl	8016644 <uxr_prepare_reliable_buffer_to_write>
 800fba4:	4604      	mov	r4, r0
 800fba6:	b12c      	cbz	r4, 800fbb4 <uxr_prepare_stream_to_write_submessage+0x58>
 800fba8:	4643      	mov	r3, r8
 800fbaa:	b2aa      	uxth	r2, r5
 800fbac:	4639      	mov	r1, r7
 800fbae:	4630      	mov	r0, r6
 800fbb0:	f000 ff04 	bl	80109bc <uxr_buffer_submessage_header>
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	b002      	add	sp, #8
 800fbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbbc:	2400      	movs	r4, #0
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	b002      	add	sp, #8
 800fbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	f10a 0008 	add.w	r0, sl, #8
 800fbcc:	f000 feba 	bl	8010944 <uxr_get_output_best_effort_stream>
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d0ee      	beq.n	800fbb4 <uxr_prepare_stream_to_write_submessage+0x58>
 800fbd6:	4649      	mov	r1, r9
 800fbd8:	4632      	mov	r2, r6
 800fbda:	f006 fc63 	bl	80164a4 <uxr_prepare_best_effort_buffer_to_write>
 800fbde:	4604      	mov	r4, r0
 800fbe0:	e7e1      	b.n	800fba6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800fbe2:	bf00      	nop

0800fbe4 <uxr_init_session_info>:
 800fbe4:	0e13      	lsrs	r3, r2, #24
 800fbe6:	7043      	strb	r3, [r0, #1]
 800fbe8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800fbec:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fbf0:	7001      	strb	r1, [r0, #0]
 800fbf2:	70c3      	strb	r3, [r0, #3]
 800fbf4:	2109      	movs	r1, #9
 800fbf6:	23ff      	movs	r3, #255	@ 0xff
 800fbf8:	f880 c002 	strb.w	ip, [r0, #2]
 800fbfc:	7102      	strb	r2, [r0, #4]
 800fbfe:	80c1      	strh	r1, [r0, #6]
 800fc00:	7143      	strb	r3, [r0, #5]
 800fc02:	4770      	bx	lr

0800fc04 <uxr_buffer_create_session>:
 800fc04:	b530      	push	{r4, r5, lr}
 800fc06:	b089      	sub	sp, #36	@ 0x24
 800fc08:	2300      	movs	r3, #0
 800fc0a:	4d12      	ldr	r5, [pc, #72]	@ (800fc54 <uxr_buffer_create_session+0x50>)
 800fc0c:	9307      	str	r3, [sp, #28]
 800fc0e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fc12:	2201      	movs	r2, #1
 800fc14:	9301      	str	r3, [sp, #4]
 800fc16:	80c2      	strh	r2, [r0, #6]
 800fc18:	f88d 2004 	strb.w	r2, [sp, #4]
 800fc1c:	682a      	ldr	r2, [r5, #0]
 800fc1e:	9200      	str	r2, [sp, #0]
 800fc20:	88aa      	ldrh	r2, [r5, #4]
 800fc22:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fc26:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800fc2a:	9202      	str	r2, [sp, #8]
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	7802      	ldrb	r2, [r0, #0]
 800fc30:	9303      	str	r3, [sp, #12]
 800fc32:	4619      	mov	r1, r3
 800fc34:	f88d 200c 	strb.w	r2, [sp, #12]
 800fc38:	4620      	mov	r0, r4
 800fc3a:	2210      	movs	r2, #16
 800fc3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800fc40:	9306      	str	r3, [sp, #24]
 800fc42:	f000 febb 	bl	80109bc <uxr_buffer_submessage_header>
 800fc46:	4669      	mov	r1, sp
 800fc48:	4620      	mov	r0, r4
 800fc4a:	f001 fe13 	bl	8011874 <uxr_serialize_CREATE_CLIENT_Payload>
 800fc4e:	b009      	add	sp, #36	@ 0x24
 800fc50:	bd30      	pop	{r4, r5, pc}
 800fc52:	bf00      	nop
 800fc54:	08018a8c 	.word	0x08018a8c

0800fc58 <uxr_buffer_delete_session>:
 800fc58:	b510      	push	{r4, lr}
 800fc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc8c <uxr_buffer_delete_session+0x34>)
 800fc5c:	b082      	sub	sp, #8
 800fc5e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800fc62:	f8ad c006 	strh.w	ip, [sp, #6]
 800fc66:	460c      	mov	r4, r1
 800fc68:	2202      	movs	r2, #2
 800fc6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc6e:	80c2      	strh	r2, [r0, #6]
 800fc70:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fc74:	2204      	movs	r2, #4
 800fc76:	2300      	movs	r3, #0
 800fc78:	2103      	movs	r1, #3
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f000 fe9e 	bl	80109bc <uxr_buffer_submessage_header>
 800fc80:	a901      	add	r1, sp, #4
 800fc82:	4620      	mov	r0, r4
 800fc84:	f001 fe9c 	bl	80119c0 <uxr_serialize_DELETE_Payload>
 800fc88:	b002      	add	sp, #8
 800fc8a:	bd10      	pop	{r4, pc}
 800fc8c:	08018a8c 	.word	0x08018a8c

0800fc90 <uxr_read_create_session_status>:
 800fc90:	b510      	push	{r4, lr}
 800fc92:	b088      	sub	sp, #32
 800fc94:	4604      	mov	r4, r0
 800fc96:	4608      	mov	r0, r1
 800fc98:	a901      	add	r1, sp, #4
 800fc9a:	f001 fea1 	bl	80119e0 <uxr_deserialize_STATUS_AGENT_Payload>
 800fc9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fca2:	7163      	strb	r3, [r4, #5]
 800fca4:	b008      	add	sp, #32
 800fca6:	bd10      	pop	{r4, pc}

0800fca8 <uxr_read_delete_session_status>:
 800fca8:	b510      	push	{r4, lr}
 800fcaa:	4604      	mov	r4, r0
 800fcac:	b084      	sub	sp, #16
 800fcae:	4608      	mov	r0, r1
 800fcb0:	a902      	add	r1, sp, #8
 800fcb2:	f001 fec5 	bl	8011a40 <uxr_deserialize_STATUS_Payload>
 800fcb6:	88e3      	ldrh	r3, [r4, #6]
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d001      	beq.n	800fcc0 <uxr_read_delete_session_status+0x18>
 800fcbc:	b004      	add	sp, #16
 800fcbe:	bd10      	pop	{r4, pc}
 800fcc0:	f10d 000a 	add.w	r0, sp, #10
 800fcc4:	f7fe feb0 	bl	800ea28 <uxr_object_id_from_raw>
 800fcc8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800fccc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800fcd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	bf04      	itt	eq
 800fcda:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800fcde:	7163      	strbeq	r3, [r4, #5]
 800fce0:	b004      	add	sp, #16
 800fce2:	bd10      	pop	{r4, pc}

0800fce4 <uxr_stamp_create_session_header>:
 800fce4:	b510      	push	{r4, lr}
 800fce6:	2208      	movs	r2, #8
 800fce8:	b08a      	sub	sp, #40	@ 0x28
 800fcea:	4604      	mov	r4, r0
 800fcec:	eb0d 0002 	add.w	r0, sp, r2
 800fcf0:	f7fe fc00 	bl	800e4f4 <ucdr_init_buffer>
 800fcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcf8:	9400      	str	r4, [sp, #0]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800fd02:	a802      	add	r0, sp, #8
 800fd04:	f001 f854 	bl	8010db0 <uxr_serialize_message_header>
 800fd08:	b00a      	add	sp, #40	@ 0x28
 800fd0a:	bd10      	pop	{r4, pc}

0800fd0c <uxr_stamp_session_header>:
 800fd0c:	b530      	push	{r4, r5, lr}
 800fd0e:	b08d      	sub	sp, #52	@ 0x34
 800fd10:	4604      	mov	r4, r0
 800fd12:	460d      	mov	r5, r1
 800fd14:	9203      	str	r2, [sp, #12]
 800fd16:	4619      	mov	r1, r3
 800fd18:	a804      	add	r0, sp, #16
 800fd1a:	2208      	movs	r2, #8
 800fd1c:	f7fe fbea 	bl	800e4f4 <ucdr_init_buffer>
 800fd20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd24:	9b03      	ldr	r3, [sp, #12]
 800fd26:	9400      	str	r4, [sp, #0]
 800fd28:	462a      	mov	r2, r5
 800fd2a:	a804      	add	r0, sp, #16
 800fd2c:	f001 f840 	bl	8010db0 <uxr_serialize_message_header>
 800fd30:	b00d      	add	sp, #52	@ 0x34
 800fd32:	bd30      	pop	{r4, r5, pc}

0800fd34 <uxr_read_session_header>:
 800fd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd38:	4607      	mov	r7, r0
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	4608      	mov	r0, r1
 800fd3e:	460c      	mov	r4, r1
 800fd40:	4615      	mov	r5, r2
 800fd42:	461e      	mov	r6, r3
 800fd44:	f7fe fc06 	bl	800e554 <ucdr_buffer_remaining>
 800fd48:	2808      	cmp	r0, #8
 800fd4a:	d803      	bhi.n	800fd54 <uxr_read_session_header+0x20>
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	b004      	add	sp, #16
 800fd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd54:	f10d 080c 	add.w	r8, sp, #12
 800fd58:	4633      	mov	r3, r6
 800fd5a:	462a      	mov	r2, r5
 800fd5c:	f8cd 8000 	str.w	r8, [sp]
 800fd60:	4620      	mov	r0, r4
 800fd62:	f10d 010b 	add.w	r1, sp, #11
 800fd66:	f001 f841 	bl	8010dec <uxr_deserialize_message_header>
 800fd6a:	783a      	ldrb	r2, [r7, #0]
 800fd6c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d1eb      	bne.n	800fd4c <uxr_read_session_header+0x18>
 800fd74:	061b      	lsls	r3, r3, #24
 800fd76:	d41c      	bmi.n	800fdb2 <uxr_read_session_header+0x7e>
 800fd78:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800fd7c:	787b      	ldrb	r3, [r7, #1]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d003      	beq.n	800fd8a <uxr_read_session_header+0x56>
 800fd82:	2001      	movs	r0, #1
 800fd84:	f080 0001 	eor.w	r0, r0, #1
 800fd88:	e7e1      	b.n	800fd4e <uxr_read_session_header+0x1a>
 800fd8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800fd8e:	78bb      	ldrb	r3, [r7, #2]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	f107 0102 	add.w	r1, r7, #2
 800fd96:	d1f4      	bne.n	800fd82 <uxr_read_session_header+0x4e>
 800fd98:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800fd9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d1ee      	bne.n	800fd82 <uxr_read_session_header+0x4e>
 800fda4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800fda8:	784b      	ldrb	r3, [r1, #1]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d1e9      	bne.n	800fd82 <uxr_read_session_header+0x4e>
 800fdae:	2000      	movs	r0, #0
 800fdb0:	e7e8      	b.n	800fd84 <uxr_read_session_header+0x50>
 800fdb2:	2001      	movs	r0, #1
 800fdb4:	e7cb      	b.n	800fd4e <uxr_read_session_header+0x1a>
 800fdb6:	bf00      	nop

0800fdb8 <uxr_session_header_offset>:
 800fdb8:	f990 3000 	ldrsb.w	r3, [r0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	bfac      	ite	ge
 800fdc0:	2008      	movge	r0, #8
 800fdc2:	2004      	movlt	r0, #4
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop

0800fdc8 <uxr_init_base_object_request>:
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	88c3      	ldrh	r3, [r0, #6]
 800fdcc:	b082      	sub	sp, #8
 800fdce:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800fdd2:	9101      	str	r1, [sp, #4]
 800fdd4:	f1a3 010a 	sub.w	r1, r3, #10
 800fdd8:	b289      	uxth	r1, r1
 800fdda:	42a1      	cmp	r1, r4
 800fddc:	d80e      	bhi.n	800fdfc <uxr_init_base_object_request+0x34>
 800fdde:	3301      	adds	r3, #1
 800fde0:	b29c      	uxth	r4, r3
 800fde2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	80c4      	strh	r4, [r0, #6]
 800fdea:	9801      	ldr	r0, [sp, #4]
 800fdec:	7011      	strb	r1, [r2, #0]
 800fdee:	7053      	strb	r3, [r2, #1]
 800fdf0:	1c91      	adds	r1, r2, #2
 800fdf2:	f7fe fe2d 	bl	800ea50 <uxr_object_id_to_raw>
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	b002      	add	sp, #8
 800fdfa:	bd10      	pop	{r4, pc}
 800fdfc:	230a      	movs	r3, #10
 800fdfe:	2100      	movs	r1, #0
 800fe00:	461c      	mov	r4, r3
 800fe02:	e7f1      	b.n	800fde8 <uxr_init_base_object_request+0x20>

0800fe04 <uxr_parse_base_object_request>:
 800fe04:	b570      	push	{r4, r5, r6, lr}
 800fe06:	4604      	mov	r4, r0
 800fe08:	3002      	adds	r0, #2
 800fe0a:	460d      	mov	r5, r1
 800fe0c:	4616      	mov	r6, r2
 800fe0e:	f7fe fe0b 	bl	800ea28 <uxr_object_id_from_raw>
 800fe12:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800fe16:	8028      	strh	r0, [r5, #0]
 800fe18:	806b      	strh	r3, [r5, #2]
 800fe1a:	7822      	ldrb	r2, [r4, #0]
 800fe1c:	7863      	ldrb	r3, [r4, #1]
 800fe1e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fe22:	8033      	strh	r3, [r6, #0]
 800fe24:	bd70      	pop	{r4, r5, r6, pc}
 800fe26:	bf00      	nop

0800fe28 <uxr_init_framing_io>:
 800fe28:	2300      	movs	r3, #0
 800fe2a:	7041      	strb	r1, [r0, #1]
 800fe2c:	7003      	strb	r3, [r0, #0]
 800fe2e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fe30:	4770      	bx	lr
 800fe32:	bf00      	nop

0800fe34 <uxr_write_framed_msg>:
 800fe34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe38:	4617      	mov	r7, r2
 800fe3a:	7842      	ldrb	r2, [r0, #1]
 800fe3c:	b083      	sub	sp, #12
 800fe3e:	460e      	mov	r6, r1
 800fe40:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800fe44:	469a      	mov	sl, r3
 800fe46:	2901      	cmp	r1, #1
 800fe48:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800fe52:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800fe56:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800fe5a:	f240 8137 	bls.w	80100cc <uxr_write_framed_msg+0x298>
 800fe5e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fe62:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800fe66:	2901      	cmp	r1, #1
 800fe68:	f04f 0202 	mov.w	r2, #2
 800fe6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe70:	f240 808f 	bls.w	800ff92 <uxr_write_framed_msg+0x15e>
 800fe74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe76:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800fe7a:	b2dd      	uxtb	r5, r3
 800fe7c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fe80:	2203      	movs	r2, #3
 800fe82:	2901      	cmp	r1, #1
 800fe84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe88:	f240 809a 	bls.w	800ffc0 <uxr_write_framed_msg+0x18c>
 800fe8c:	18a1      	adds	r1, r4, r2
 800fe8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe90:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800fe94:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fe98:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fe9c:	3201      	adds	r2, #1
 800fe9e:	2801      	cmp	r0, #1
 800fea0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fea4:	f240 80a0 	bls.w	800ffe8 <uxr_write_framed_msg+0x1b4>
 800fea8:	18a0      	adds	r0, r4, r2
 800feaa:	3201      	adds	r2, #1
 800feac:	b2d2      	uxtb	r2, r2
 800feae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800feb2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f000 80a9 	beq.w	801000e <uxr_write_framed_msg+0x1da>
 800febc:	f04f 0900 	mov.w	r9, #0
 800fec0:	46c8      	mov	r8, r9
 800fec2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fec6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800feca:	2901      	cmp	r1, #1
 800fecc:	f240 80c3 	bls.w	8010056 <uxr_write_framed_msg+0x222>
 800fed0:	2a29      	cmp	r2, #41	@ 0x29
 800fed2:	f200 809f 	bhi.w	8010014 <uxr_write_framed_msg+0x1e0>
 800fed6:	18a1      	adds	r1, r4, r2
 800fed8:	3201      	adds	r2, #1
 800feda:	b2d2      	uxtb	r2, r2
 800fedc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800fee0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fee4:	ea89 0303 	eor.w	r3, r9, r3
 800fee8:	498c      	ldr	r1, [pc, #560]	@ (801011c <uxr_write_framed_msg+0x2e8>)
 800feea:	b2db      	uxtb	r3, r3
 800feec:	f108 0801 	add.w	r8, r8, #1
 800fef0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fef4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fefa:	4543      	cmp	r3, r8
 800fefc:	d8e1      	bhi.n	800fec2 <uxr_write_framed_msg+0x8e>
 800fefe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800ff02:	fa5f f889 	uxtb.w	r8, r9
 800ff06:	9301      	str	r3, [sp, #4]
 800ff08:	f04f 0900 	mov.w	r9, #0
 800ff0c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800ff10:	fa5f f18a 	uxtb.w	r1, sl
 800ff14:	2901      	cmp	r1, #1
 800ff16:	d921      	bls.n	800ff5c <uxr_write_framed_msg+0x128>
 800ff18:	2a29      	cmp	r2, #41	@ 0x29
 800ff1a:	f240 80af 	bls.w	801007c <uxr_write_framed_msg+0x248>
 800ff1e:	2500      	movs	r5, #0
 800ff20:	e000      	b.n	800ff24 <uxr_write_framed_msg+0xf0>
 800ff22:	b160      	cbz	r0, 800ff3e <uxr_write_framed_msg+0x10a>
 800ff24:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ff28:	1b52      	subs	r2, r2, r5
 800ff2a:	465b      	mov	r3, fp
 800ff2c:	4421      	add	r1, r4
 800ff2e:	4638      	mov	r0, r7
 800ff30:	47b0      	blx	r6
 800ff32:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ff36:	4405      	add	r5, r0
 800ff38:	4295      	cmp	r5, r2
 800ff3a:	d3f2      	bcc.n	800ff22 <uxr_write_framed_msg+0xee>
 800ff3c:	d003      	beq.n	800ff46 <uxr_write_framed_msg+0x112>
 800ff3e:	2000      	movs	r0, #0
 800ff40:	b003      	add	sp, #12
 800ff42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff46:	fa5f f18a 	uxtb.w	r1, sl
 800ff4a:	f04f 0300 	mov.w	r3, #0
 800ff4e:	2901      	cmp	r1, #1
 800ff50:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ff54:	f04f 0200 	mov.w	r2, #0
 800ff58:	f200 8090 	bhi.w	801007c <uxr_write_framed_msg+0x248>
 800ff5c:	1c51      	adds	r1, r2, #1
 800ff5e:	b2c9      	uxtb	r1, r1
 800ff60:	2929      	cmp	r1, #41	@ 0x29
 800ff62:	d8dc      	bhi.n	800ff1e <uxr_write_framed_msg+0xea>
 800ff64:	18a5      	adds	r5, r4, r2
 800ff66:	4421      	add	r1, r4
 800ff68:	3202      	adds	r2, #2
 800ff6a:	f088 0820 	eor.w	r8, r8, #32
 800ff6e:	4648      	mov	r0, r9
 800ff70:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800ff74:	b2d2      	uxtb	r2, r2
 800ff76:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800ff7a:	f04f 0901 	mov.w	r9, #1
 800ff7e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800ff82:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ff86:	2800      	cmp	r0, #0
 800ff88:	f040 8085 	bne.w	8010096 <uxr_write_framed_msg+0x262>
 800ff8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ff90:	e7bc      	b.n	800ff0c <uxr_write_framed_msg+0xd8>
 800ff92:	4611      	mov	r1, r2
 800ff94:	f04f 0c03 	mov.w	ip, #3
 800ff98:	2204      	movs	r2, #4
 800ff9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff9c:	4421      	add	r1, r4
 800ff9e:	b2dd      	uxtb	r5, r3
 800ffa0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800ffa4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800ffa8:	44a4      	add	ip, r4
 800ffaa:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ffae:	f080 0020 	eor.w	r0, r0, #32
 800ffb2:	2901      	cmp	r1, #1
 800ffb4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800ffb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ffbc:	f63f af66 	bhi.w	800fe8c <uxr_write_framed_msg+0x58>
 800ffc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffc2:	18a0      	adds	r0, r4, r2
 800ffc4:	f085 0520 	eor.w	r5, r5, #32
 800ffc8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ffcc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ffd0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800ffd4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800ffd8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ffdc:	3202      	adds	r2, #2
 800ffde:	2801      	cmp	r0, #1
 800ffe0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ffe4:	f63f af60 	bhi.w	800fea8 <uxr_write_framed_msg+0x74>
 800ffe8:	1c50      	adds	r0, r2, #1
 800ffea:	18a5      	adds	r5, r4, r2
 800ffec:	fa54 f080 	uxtab	r0, r4, r0
 800fff0:	3202      	adds	r2, #2
 800fff2:	f081 0120 	eor.w	r1, r1, #32
 800fff6:	b2d2      	uxtb	r2, r2
 800fff8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fffc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8010000:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010004:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010008:	2b00      	cmp	r3, #0
 801000a:	f47f af57 	bne.w	800febc <uxr_write_framed_msg+0x88>
 801000e:	9301      	str	r3, [sp, #4]
 8010010:	4698      	mov	r8, r3
 8010012:	e779      	b.n	800ff08 <uxr_write_framed_msg+0xd4>
 8010014:	2500      	movs	r5, #0
 8010016:	e001      	b.n	801001c <uxr_write_framed_msg+0x1e8>
 8010018:	2800      	cmp	r0, #0
 801001a:	d090      	beq.n	800ff3e <uxr_write_framed_msg+0x10a>
 801001c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010020:	1b52      	subs	r2, r2, r5
 8010022:	465b      	mov	r3, fp
 8010024:	4421      	add	r1, r4
 8010026:	4638      	mov	r0, r7
 8010028:	47b0      	blx	r6
 801002a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801002e:	4405      	add	r5, r0
 8010030:	4295      	cmp	r5, r2
 8010032:	d3f1      	bcc.n	8010018 <uxr_write_framed_msg+0x1e4>
 8010034:	d183      	bne.n	800ff3e <uxr_write_framed_msg+0x10a>
 8010036:	f04f 0300 	mov.w	r3, #0
 801003a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801003e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010040:	4543      	cmp	r3, r8
 8010042:	d964      	bls.n	801010e <uxr_write_framed_msg+0x2da>
 8010044:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010048:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801004c:	2901      	cmp	r1, #1
 801004e:	f04f 0200 	mov.w	r2, #0
 8010052:	f63f af3d 	bhi.w	800fed0 <uxr_write_framed_msg+0x9c>
 8010056:	1c51      	adds	r1, r2, #1
 8010058:	b2c9      	uxtb	r1, r1
 801005a:	2929      	cmp	r1, #41	@ 0x29
 801005c:	d8da      	bhi.n	8010014 <uxr_write_framed_msg+0x1e0>
 801005e:	18a0      	adds	r0, r4, r2
 8010060:	4421      	add	r1, r4
 8010062:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8010066:	3202      	adds	r2, #2
 8010068:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801006c:	b2d2      	uxtb	r2, r2
 801006e:	f083 0020 	eor.w	r0, r3, #32
 8010072:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8010076:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801007a:	e733      	b.n	800fee4 <uxr_write_framed_msg+0xb0>
 801007c:	18a1      	adds	r1, r4, r2
 801007e:	3201      	adds	r2, #1
 8010080:	4648      	mov	r0, r9
 8010082:	b2d2      	uxtb	r2, r2
 8010084:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010088:	f04f 0901 	mov.w	r9, #1
 801008c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010090:	2800      	cmp	r0, #0
 8010092:	f43f af7b 	beq.w	800ff8c <uxr_write_framed_msg+0x158>
 8010096:	2500      	movs	r5, #0
 8010098:	e002      	b.n	80100a0 <uxr_write_framed_msg+0x26c>
 801009a:	2800      	cmp	r0, #0
 801009c:	f43f af4f 	beq.w	800ff3e <uxr_write_framed_msg+0x10a>
 80100a0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80100a4:	1b52      	subs	r2, r2, r5
 80100a6:	465b      	mov	r3, fp
 80100a8:	4421      	add	r1, r4
 80100aa:	4638      	mov	r0, r7
 80100ac:	47b0      	blx	r6
 80100ae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80100b2:	4405      	add	r5, r0
 80100b4:	4295      	cmp	r5, r2
 80100b6:	d3f0      	bcc.n	801009a <uxr_write_framed_msg+0x266>
 80100b8:	f47f af41 	bne.w	800ff3e <uxr_write_framed_msg+0x10a>
 80100bc:	2300      	movs	r3, #0
 80100be:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80100c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100c4:	b298      	uxth	r0, r3
 80100c6:	b003      	add	sp, #12
 80100c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100cc:	217d      	movs	r1, #125	@ 0x7d
 80100ce:	f082 0220 	eor.w	r2, r2, #32
 80100d2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80100d6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80100da:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80100de:	2901      	cmp	r1, #1
 80100e0:	f04f 0203 	mov.w	r2, #3
 80100e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80100e8:	d804      	bhi.n	80100f4 <uxr_write_framed_msg+0x2c0>
 80100ea:	4611      	mov	r1, r2
 80100ec:	f04f 0c04 	mov.w	ip, #4
 80100f0:	2205      	movs	r2, #5
 80100f2:	e752      	b.n	800ff9a <uxr_write_framed_msg+0x166>
 80100f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100f6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80100fa:	b2dd      	uxtb	r5, r3
 80100fc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010100:	2204      	movs	r2, #4
 8010102:	2901      	cmp	r1, #1
 8010104:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010108:	f63f aec0 	bhi.w	800fe8c <uxr_write_framed_msg+0x58>
 801010c:	e758      	b.n	800ffc0 <uxr_write_framed_msg+0x18c>
 801010e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010112:	fa5f f889 	uxtb.w	r8, r9
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	2200      	movs	r2, #0
 801011a:	e6f5      	b.n	800ff08 <uxr_write_framed_msg+0xd4>
 801011c:	08018eec 	.word	0x08018eec

08010120 <uxr_framing_read_transport>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	4604      	mov	r4, r0
 8010126:	b083      	sub	sp, #12
 8010128:	461f      	mov	r7, r3
 801012a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801012e:	4689      	mov	r9, r1
 8010130:	4692      	mov	sl, r2
 8010132:	f000 fc89 	bl	8010a48 <uxr_millis>
 8010136:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801013a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801013e:	42b3      	cmp	r3, r6
 8010140:	4680      	mov	r8, r0
 8010142:	d061      	beq.n	8010208 <uxr_framing_read_transport+0xe8>
 8010144:	d81c      	bhi.n	8010180 <uxr_framing_read_transport+0x60>
 8010146:	1e75      	subs	r5, r6, #1
 8010148:	1aed      	subs	r5, r5, r3
 801014a:	b2ed      	uxtb	r5, r5
 801014c:	2600      	movs	r6, #0
 801014e:	455d      	cmp	r5, fp
 8010150:	d81f      	bhi.n	8010192 <uxr_framing_read_transport+0x72>
 8010152:	19ab      	adds	r3, r5, r6
 8010154:	455b      	cmp	r3, fp
 8010156:	bf84      	itt	hi
 8010158:	ebab 0605 	subhi.w	r6, fp, r5
 801015c:	b2f6      	uxtbhi	r6, r6
 801015e:	b9ed      	cbnz	r5, 801019c <uxr_framing_read_transport+0x7c>
 8010160:	f04f 0b00 	mov.w	fp, #0
 8010164:	f000 fc70 	bl	8010a48 <uxr_millis>
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	eba0 0808 	sub.w	r8, r0, r8
 801016e:	eba3 0308 	sub.w	r3, r3, r8
 8010172:	4658      	mov	r0, fp
 8010174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010178:	603b      	str	r3, [r7, #0]
 801017a:	b003      	add	sp, #12
 801017c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010180:	2e00      	cmp	r6, #0
 8010182:	d049      	beq.n	8010218 <uxr_framing_read_transport+0xf8>
 8010184:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8010188:	b2ed      	uxtb	r5, r5
 801018a:	3e01      	subs	r6, #1
 801018c:	455d      	cmp	r5, fp
 801018e:	b2f6      	uxtb	r6, r6
 8010190:	d9df      	bls.n	8010152 <uxr_framing_read_transport+0x32>
 8010192:	fa5f f58b 	uxtb.w	r5, fp
 8010196:	2600      	movs	r6, #0
 8010198:	2d00      	cmp	r5, #0
 801019a:	d0e1      	beq.n	8010160 <uxr_framing_read_transport+0x40>
 801019c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80101a0:	3102      	adds	r1, #2
 80101a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	4421      	add	r1, r4
 80101aa:	462a      	mov	r2, r5
 80101ac:	4650      	mov	r0, sl
 80101ae:	47c8      	blx	r9
 80101b0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80101b4:	4a1a      	ldr	r2, [pc, #104]	@ (8010220 <uxr_framing_read_transport+0x100>)
 80101b6:	4403      	add	r3, r0
 80101b8:	0859      	lsrs	r1, r3, #1
 80101ba:	fba2 2101 	umull	r2, r1, r2, r1
 80101be:	0889      	lsrs	r1, r1, #2
 80101c0:	222a      	movs	r2, #42	@ 0x2a
 80101c2:	fb02 3111 	mls	r1, r2, r1, r3
 80101c6:	4683      	mov	fp, r0
 80101c8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d0c7      	beq.n	8010160 <uxr_framing_read_transport+0x40>
 80101d0:	42a8      	cmp	r0, r5
 80101d2:	d1c7      	bne.n	8010164 <uxr_framing_read_transport+0x44>
 80101d4:	2e00      	cmp	r6, #0
 80101d6:	d0c5      	beq.n	8010164 <uxr_framing_read_transport+0x44>
 80101d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	3102      	adds	r1, #2
 80101de:	4632      	mov	r2, r6
 80101e0:	4421      	add	r1, r4
 80101e2:	2300      	movs	r3, #0
 80101e4:	4650      	mov	r0, sl
 80101e6:	47c8      	blx	r9
 80101e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80101ec:	4a0c      	ldr	r2, [pc, #48]	@ (8010220 <uxr_framing_read_transport+0x100>)
 80101ee:	180b      	adds	r3, r1, r0
 80101f0:	0859      	lsrs	r1, r3, #1
 80101f2:	fba2 1201 	umull	r1, r2, r2, r1
 80101f6:	0892      	lsrs	r2, r2, #2
 80101f8:	212a      	movs	r1, #42	@ 0x2a
 80101fa:	fb01 3312 	mls	r3, r1, r2, r3
 80101fe:	eb00 0b05 	add.w	fp, r0, r5
 8010202:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010206:	e7ad      	b.n	8010164 <uxr_framing_read_transport+0x44>
 8010208:	2600      	movs	r6, #0
 801020a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801020e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8010210:	d9bf      	bls.n	8010192 <uxr_framing_read_transport+0x72>
 8010212:	2102      	movs	r1, #2
 8010214:	2529      	movs	r5, #41	@ 0x29
 8010216:	e7c4      	b.n	80101a2 <uxr_framing_read_transport+0x82>
 8010218:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801021c:	b2ed      	uxtb	r5, r5
 801021e:	e796      	b.n	801014e <uxr_framing_read_transport+0x2e>
 8010220:	30c30c31 	.word	0x30c30c31

08010224 <uxr_read_framed_msg>:
 8010224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010228:	461e      	mov	r6, r3
 801022a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801022e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8010232:	429d      	cmp	r5, r3
 8010234:	b083      	sub	sp, #12
 8010236:	4604      	mov	r4, r0
 8010238:	4688      	mov	r8, r1
 801023a:	4691      	mov	r9, r2
 801023c:	f000 8188 	beq.w	8010550 <uxr_read_framed_msg+0x32c>
 8010240:	7823      	ldrb	r3, [r4, #0]
 8010242:	4dc1      	ldr	r5, [pc, #772]	@ (8010548 <uxr_read_framed_msg+0x324>)
 8010244:	4fc1      	ldr	r7, [pc, #772]	@ (801054c <uxr_read_framed_msg+0x328>)
 8010246:	2b07      	cmp	r3, #7
 8010248:	d8fd      	bhi.n	8010246 <uxr_read_framed_msg+0x22>
 801024a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801024e:	0115      	.short	0x0115
 8010250:	00d600f6 	.word	0x00d600f6
 8010254:	009000b9 	.word	0x009000b9
 8010258:	0030004d 	.word	0x0030004d
 801025c:	0008      	.short	0x0008
 801025e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010262:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010266:	4299      	cmp	r1, r3
 8010268:	f000 814a 	beq.w	8010500 <uxr_read_framed_msg+0x2dc>
 801026c:	18e2      	adds	r2, r4, r3
 801026e:	7892      	ldrb	r2, [r2, #2]
 8010270:	2a7d      	cmp	r2, #125	@ 0x7d
 8010272:	f000 8199 	beq.w	80105a8 <uxr_read_framed_msg+0x384>
 8010276:	3301      	adds	r3, #1
 8010278:	0858      	lsrs	r0, r3, #1
 801027a:	fba5 1000 	umull	r1, r0, r5, r0
 801027e:	0880      	lsrs	r0, r0, #2
 8010280:	212a      	movs	r1, #42	@ 0x2a
 8010282:	fb01 3310 	mls	r3, r1, r0, r3
 8010286:	2a7e      	cmp	r2, #126	@ 0x7e
 8010288:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801028c:	f000 8252 	beq.w	8010734 <uxr_read_framed_msg+0x510>
 8010290:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010292:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8010294:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010298:	b29b      	uxth	r3, r3
 801029a:	2200      	movs	r2, #0
 801029c:	4299      	cmp	r1, r3
 801029e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80102a0:	7022      	strb	r2, [r4, #0]
 80102a2:	f000 8179 	beq.w	8010598 <uxr_read_framed_msg+0x374>
 80102a6:	2000      	movs	r0, #0
 80102a8:	b003      	add	sp, #12
 80102aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80102b2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80102b6:	4299      	cmp	r1, r3
 80102b8:	f000 8131 	beq.w	801051e <uxr_read_framed_msg+0x2fa>
 80102bc:	18e2      	adds	r2, r4, r3
 80102be:	7890      	ldrb	r0, [r2, #2]
 80102c0:	287d      	cmp	r0, #125	@ 0x7d
 80102c2:	f000 8190 	beq.w	80105e6 <uxr_read_framed_msg+0x3c2>
 80102c6:	3301      	adds	r3, #1
 80102c8:	085a      	lsrs	r2, r3, #1
 80102ca:	fba5 1202 	umull	r1, r2, r5, r2
 80102ce:	0892      	lsrs	r2, r2, #2
 80102d0:	212a      	movs	r1, #42	@ 0x2a
 80102d2:	fb01 3312 	mls	r3, r1, r2, r3
 80102d6:	287e      	cmp	r0, #126	@ 0x7e
 80102d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80102dc:	f000 821a 	beq.w	8010714 <uxr_read_framed_msg+0x4f0>
 80102e0:	2307      	movs	r3, #7
 80102e2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80102e4:	7023      	strb	r3, [r4, #0]
 80102e6:	e7ae      	b.n	8010246 <uxr_read_framed_msg+0x22>
 80102e8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80102ea:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80102ee:	459e      	cmp	lr, r3
 80102f0:	d938      	bls.n	8010364 <uxr_read_framed_msg+0x140>
 80102f2:	ee07 8a90 	vmov	s15, r8
 80102f6:	212a      	movs	r1, #42	@ 0x2a
 80102f8:	e020      	b.n	801033c <uxr_read_framed_msg+0x118>
 80102fa:	f89b c002 	ldrb.w	ip, [fp, #2]
 80102fe:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8010302:	f000 80d4 	beq.w	80104ae <uxr_read_framed_msg+0x28a>
 8010306:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801030a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801030e:	f000 8219 	beq.w	8010744 <uxr_read_framed_msg+0x520>
 8010312:	f806 c003 	strb.w	ip, [r6, r3]
 8010316:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801031a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801031c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010320:	ea8a 000c 	eor.w	r0, sl, ip
 8010324:	b2c0      	uxtb	r0, r0
 8010326:	3301      	adds	r3, #1
 8010328:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801032c:	b29b      	uxth	r3, r3
 801032e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8010332:	4573      	cmp	r3, lr
 8010334:	8663      	strh	r3, [r4, #50]	@ 0x32
 8010336:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010338:	f080 8120 	bcs.w	801057c <uxr_read_framed_msg+0x358>
 801033c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8010340:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010344:	f100 0c01 	add.w	ip, r0, #1
 8010348:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801034c:	fba5 8202 	umull	r8, r2, r5, r2
 8010350:	0892      	lsrs	r2, r2, #2
 8010352:	4582      	cmp	sl, r0
 8010354:	eb04 0b00 	add.w	fp, r4, r0
 8010358:	fb01 c212 	mls	r2, r1, r2, ip
 801035c:	d1cd      	bne.n	80102fa <uxr_read_framed_msg+0xd6>
 801035e:	ee17 8a90 	vmov	r8, s15
 8010362:	459e      	cmp	lr, r3
 8010364:	f040 8111 	bne.w	801058a <uxr_read_framed_msg+0x366>
 8010368:	2306      	movs	r3, #6
 801036a:	7023      	strb	r3, [r4, #0]
 801036c:	e76b      	b.n	8010246 <uxr_read_framed_msg+0x22>
 801036e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010372:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010376:	4298      	cmp	r0, r3
 8010378:	f000 80c2 	beq.w	8010500 <uxr_read_framed_msg+0x2dc>
 801037c:	18e2      	adds	r2, r4, r3
 801037e:	7891      	ldrb	r1, [r2, #2]
 8010380:	297d      	cmp	r1, #125	@ 0x7d
 8010382:	f000 814c 	beq.w	801061e <uxr_read_framed_msg+0x3fa>
 8010386:	3301      	adds	r3, #1
 8010388:	085a      	lsrs	r2, r3, #1
 801038a:	fba5 0202 	umull	r0, r2, r5, r2
 801038e:	0892      	lsrs	r2, r2, #2
 8010390:	202a      	movs	r0, #42	@ 0x2a
 8010392:	fb00 3312 	mls	r3, r0, r2, r3
 8010396:	297e      	cmp	r1, #126	@ 0x7e
 8010398:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801039c:	f000 81ca 	beq.w	8010734 <uxr_read_framed_msg+0x510>
 80103a0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80103a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80103a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	2000      	movs	r0, #0
 80103ac:	428b      	cmp	r3, r1
 80103ae:	8623      	strh	r3, [r4, #48]	@ 0x30
 80103b0:	8660      	strh	r0, [r4, #50]	@ 0x32
 80103b2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80103b4:	f240 80df 	bls.w	8010576 <uxr_read_framed_msg+0x352>
 80103b8:	7020      	strb	r0, [r4, #0]
 80103ba:	b003      	add	sp, #12
 80103bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80103c4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80103c8:	4299      	cmp	r1, r3
 80103ca:	f000 80a8 	beq.w	801051e <uxr_read_framed_msg+0x2fa>
 80103ce:	18e2      	adds	r2, r4, r3
 80103d0:	7890      	ldrb	r0, [r2, #2]
 80103d2:	287d      	cmp	r0, #125	@ 0x7d
 80103d4:	f000 8164 	beq.w	80106a0 <uxr_read_framed_msg+0x47c>
 80103d8:	3301      	adds	r3, #1
 80103da:	085a      	lsrs	r2, r3, #1
 80103dc:	fba5 1202 	umull	r1, r2, r5, r2
 80103e0:	0892      	lsrs	r2, r2, #2
 80103e2:	212a      	movs	r1, #42	@ 0x2a
 80103e4:	fb01 3312 	mls	r3, r1, r2, r3
 80103e8:	287e      	cmp	r0, #126	@ 0x7e
 80103ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80103ee:	f000 8191 	beq.w	8010714 <uxr_read_framed_msg+0x4f0>
 80103f2:	2304      	movs	r3, #4
 80103f4:	8620      	strh	r0, [r4, #48]	@ 0x30
 80103f6:	7023      	strb	r3, [r4, #0]
 80103f8:	e725      	b.n	8010246 <uxr_read_framed_msg+0x22>
 80103fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80103fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010402:	4290      	cmp	r0, r2
 8010404:	f000 80b3 	beq.w	801056e <uxr_read_framed_msg+0x34a>
 8010408:	18a3      	adds	r3, r4, r2
 801040a:	7899      	ldrb	r1, [r3, #2]
 801040c:	297d      	cmp	r1, #125	@ 0x7d
 801040e:	f000 8164 	beq.w	80106da <uxr_read_framed_msg+0x4b6>
 8010412:	3201      	adds	r2, #1
 8010414:	0850      	lsrs	r0, r2, #1
 8010416:	fba5 3000 	umull	r3, r0, r5, r0
 801041a:	0880      	lsrs	r0, r0, #2
 801041c:	232a      	movs	r3, #42	@ 0x2a
 801041e:	fb03 2210 	mls	r2, r3, r0, r2
 8010422:	297e      	cmp	r1, #126	@ 0x7e
 8010424:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010428:	f000 8188 	beq.w	801073c <uxr_read_framed_msg+0x518>
 801042c:	7863      	ldrb	r3, [r4, #1]
 801042e:	428b      	cmp	r3, r1
 8010430:	bf0c      	ite	eq
 8010432:	2303      	moveq	r3, #3
 8010434:	2300      	movne	r3, #0
 8010436:	7023      	strb	r3, [r4, #0]
 8010438:	e705      	b.n	8010246 <uxr_read_framed_msg+0x22>
 801043a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801043e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010442:	2200      	movs	r2, #0
 8010444:	4299      	cmp	r1, r3
 8010446:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801044a:	d06c      	beq.n	8010526 <uxr_read_framed_msg+0x302>
 801044c:	18e2      	adds	r2, r4, r3
 801044e:	7890      	ldrb	r0, [r2, #2]
 8010450:	287d      	cmp	r0, #125	@ 0x7d
 8010452:	f000 8101 	beq.w	8010658 <uxr_read_framed_msg+0x434>
 8010456:	3301      	adds	r3, #1
 8010458:	085a      	lsrs	r2, r3, #1
 801045a:	fba5 1202 	umull	r1, r2, r5, r2
 801045e:	0892      	lsrs	r2, r2, #2
 8010460:	212a      	movs	r1, #42	@ 0x2a
 8010462:	fb01 3312 	mls	r3, r1, r2, r3
 8010466:	287e      	cmp	r0, #126	@ 0x7e
 8010468:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801046c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010470:	d059      	beq.n	8010526 <uxr_read_framed_msg+0x302>
 8010472:	2302      	movs	r3, #2
 8010474:	7023      	strb	r3, [r4, #0]
 8010476:	e6e6      	b.n	8010246 <uxr_read_framed_msg+0x22>
 8010478:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801047c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010480:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8010484:	1c51      	adds	r1, r2, #1
 8010486:	084b      	lsrs	r3, r1, #1
 8010488:	fba5 c303 	umull	ip, r3, r5, r3
 801048c:	089b      	lsrs	r3, r3, #2
 801048e:	fb0e 1313 	mls	r3, lr, r3, r1
 8010492:	4592      	cmp	sl, r2
 8010494:	eb04 0002 	add.w	r0, r4, r2
 8010498:	b2da      	uxtb	r2, r3
 801049a:	f43f af04 	beq.w	80102a6 <uxr_read_framed_msg+0x82>
 801049e:	7883      	ldrb	r3, [r0, #2]
 80104a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80104a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80104a6:	d1ed      	bne.n	8010484 <uxr_read_framed_msg+0x260>
 80104a8:	2301      	movs	r3, #1
 80104aa:	7023      	strb	r3, [r4, #0]
 80104ac:	e6cb      	b.n	8010246 <uxr_read_framed_msg+0x22>
 80104ae:	f100 0c01 	add.w	ip, r0, #1
 80104b2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80104b6:	fba5 8202 	umull	r8, r2, r5, r2
 80104ba:	0892      	lsrs	r2, r2, #2
 80104bc:	fb01 c212 	mls	r2, r1, r2, ip
 80104c0:	eb04 0c02 	add.w	ip, r4, r2
 80104c4:	b2d2      	uxtb	r2, r2
 80104c6:	4592      	cmp	sl, r2
 80104c8:	f100 0002 	add.w	r0, r0, #2
 80104cc:	f43f af47 	beq.w	801035e <uxr_read_framed_msg+0x13a>
 80104d0:	0842      	lsrs	r2, r0, #1
 80104d2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80104d6:	fba5 8202 	umull	r8, r2, r5, r2
 80104da:	0892      	lsrs	r2, r2, #2
 80104dc:	fb01 0012 	mls	r0, r1, r2, r0
 80104e0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80104e4:	f08a 0c20 	eor.w	ip, sl, #32
 80104e8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80104ec:	f47f af11 	bne.w	8010312 <uxr_read_framed_msg+0xee>
 80104f0:	459e      	cmp	lr, r3
 80104f2:	ee17 8a90 	vmov	r8, s15
 80104f6:	f43f af37 	beq.w	8010368 <uxr_read_framed_msg+0x144>
 80104fa:	2301      	movs	r3, #1
 80104fc:	7023      	strb	r3, [r4, #0]
 80104fe:	e6a2      	b.n	8010246 <uxr_read_framed_msg+0x22>
 8010500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	2301      	movs	r3, #1
 8010506:	9301      	str	r3, [sp, #4]
 8010508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801050a:	464a      	mov	r2, r9
 801050c:	4641      	mov	r1, r8
 801050e:	4620      	mov	r0, r4
 8010510:	f7ff fe06 	bl	8010120 <uxr_framing_read_transport>
 8010514:	2800      	cmp	r0, #0
 8010516:	f43f aec6 	beq.w	80102a6 <uxr_read_framed_msg+0x82>
 801051a:	7823      	ldrb	r3, [r4, #0]
 801051c:	e693      	b.n	8010246 <uxr_read_framed_msg+0x22>
 801051e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	2302      	movs	r3, #2
 8010524:	e7ef      	b.n	8010506 <uxr_read_framed_msg+0x2e2>
 8010526:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	2304      	movs	r3, #4
 801052c:	9301      	str	r3, [sp, #4]
 801052e:	464a      	mov	r2, r9
 8010530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010532:	4641      	mov	r1, r8
 8010534:	4620      	mov	r0, r4
 8010536:	f7ff fdf3 	bl	8010120 <uxr_framing_read_transport>
 801053a:	2800      	cmp	r0, #0
 801053c:	d1ed      	bne.n	801051a <uxr_read_framed_msg+0x2f6>
 801053e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010542:	2b7e      	cmp	r3, #126	@ 0x7e
 8010544:	d0e9      	beq.n	801051a <uxr_read_framed_msg+0x2f6>
 8010546:	e6ae      	b.n	80102a6 <uxr_read_framed_msg+0x82>
 8010548:	30c30c31 	.word	0x30c30c31
 801054c:	08018eec 	.word	0x08018eec
 8010550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	2305      	movs	r3, #5
 8010556:	9301      	str	r3, [sp, #4]
 8010558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801055a:	f7ff fde1 	bl	8010120 <uxr_framing_read_transport>
 801055e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010562:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010566:	429a      	cmp	r2, r3
 8010568:	f43f ae9d 	beq.w	80102a6 <uxr_read_framed_msg+0x82>
 801056c:	e668      	b.n	8010240 <uxr_read_framed_msg+0x1c>
 801056e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010570:	9300      	str	r3, [sp, #0]
 8010572:	2303      	movs	r3, #3
 8010574:	e7c7      	b.n	8010506 <uxr_read_framed_msg+0x2e2>
 8010576:	2305      	movs	r3, #5
 8010578:	7023      	strb	r3, [r4, #0]
 801057a:	e664      	b.n	8010246 <uxr_read_framed_msg+0x22>
 801057c:	ee17 8a90 	vmov	r8, s15
 8010580:	f43f aef2 	beq.w	8010368 <uxr_read_framed_msg+0x144>
 8010584:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010588:	d08e      	beq.n	80104a8 <uxr_read_framed_msg+0x284>
 801058a:	ebae 0303 	sub.w	r3, lr, r3
 801058e:	3302      	adds	r3, #2
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	e7b7      	b.n	8010508 <uxr_read_framed_msg+0x2e4>
 8010598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801059a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801059e:	7013      	strb	r3, [r2, #0]
 80105a0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80105a2:	b003      	add	sp, #12
 80105a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a8:	f103 0c01 	add.w	ip, r3, #1
 80105ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80105b0:	fba5 0202 	umull	r0, r2, r5, r2
 80105b4:	0892      	lsrs	r2, r2, #2
 80105b6:	202a      	movs	r0, #42	@ 0x2a
 80105b8:	fb00 c212 	mls	r2, r0, r2, ip
 80105bc:	fa5f fc82 	uxtb.w	ip, r2
 80105c0:	4561      	cmp	r1, ip
 80105c2:	d09d      	beq.n	8010500 <uxr_read_framed_msg+0x2dc>
 80105c4:	3302      	adds	r3, #2
 80105c6:	4422      	add	r2, r4
 80105c8:	0859      	lsrs	r1, r3, #1
 80105ca:	7892      	ldrb	r2, [r2, #2]
 80105cc:	fba5 c101 	umull	ip, r1, r5, r1
 80105d0:	0889      	lsrs	r1, r1, #2
 80105d2:	fb00 3311 	mls	r3, r0, r1, r3
 80105d6:	2a7e      	cmp	r2, #126	@ 0x7e
 80105d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80105dc:	f000 80aa 	beq.w	8010734 <uxr_read_framed_msg+0x510>
 80105e0:	f082 0220 	eor.w	r2, r2, #32
 80105e4:	e654      	b.n	8010290 <uxr_read_framed_msg+0x6c>
 80105e6:	1c58      	adds	r0, r3, #1
 80105e8:	0842      	lsrs	r2, r0, #1
 80105ea:	fba5 c202 	umull	ip, r2, r5, r2
 80105ee:	0892      	lsrs	r2, r2, #2
 80105f0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80105f4:	fb0c 0212 	mls	r2, ip, r2, r0
 80105f8:	b2d0      	uxtb	r0, r2
 80105fa:	4281      	cmp	r1, r0
 80105fc:	d08f      	beq.n	801051e <uxr_read_framed_msg+0x2fa>
 80105fe:	4422      	add	r2, r4
 8010600:	3302      	adds	r3, #2
 8010602:	7890      	ldrb	r0, [r2, #2]
 8010604:	085a      	lsrs	r2, r3, #1
 8010606:	fba5 1202 	umull	r1, r2, r5, r2
 801060a:	0892      	lsrs	r2, r2, #2
 801060c:	fb0c 3312 	mls	r3, ip, r2, r3
 8010610:	287e      	cmp	r0, #126	@ 0x7e
 8010612:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010616:	d07d      	beq.n	8010714 <uxr_read_framed_msg+0x4f0>
 8010618:	f080 0020 	eor.w	r0, r0, #32
 801061c:	e660      	b.n	80102e0 <uxr_read_framed_msg+0xbc>
 801061e:	1c59      	adds	r1, r3, #1
 8010620:	084a      	lsrs	r2, r1, #1
 8010622:	fba5 c202 	umull	ip, r2, r5, r2
 8010626:	0892      	lsrs	r2, r2, #2
 8010628:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801062c:	fb0c 1212 	mls	r2, ip, r2, r1
 8010630:	b2d1      	uxtb	r1, r2
 8010632:	4288      	cmp	r0, r1
 8010634:	f43f af64 	beq.w	8010500 <uxr_read_framed_msg+0x2dc>
 8010638:	4422      	add	r2, r4
 801063a:	3302      	adds	r3, #2
 801063c:	7891      	ldrb	r1, [r2, #2]
 801063e:	085a      	lsrs	r2, r3, #1
 8010640:	fba5 0202 	umull	r0, r2, r5, r2
 8010644:	0892      	lsrs	r2, r2, #2
 8010646:	fb0c 3312 	mls	r3, ip, r2, r3
 801064a:	297e      	cmp	r1, #126	@ 0x7e
 801064c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010650:	d070      	beq.n	8010734 <uxr_read_framed_msg+0x510>
 8010652:	f081 0120 	eor.w	r1, r1, #32
 8010656:	e6a3      	b.n	80103a0 <uxr_read_framed_msg+0x17c>
 8010658:	f103 0c01 	add.w	ip, r3, #1
 801065c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010660:	fba5 0202 	umull	r0, r2, r5, r2
 8010664:	0892      	lsrs	r2, r2, #2
 8010666:	202a      	movs	r0, #42	@ 0x2a
 8010668:	fb00 c212 	mls	r2, r0, r2, ip
 801066c:	fa5f fc82 	uxtb.w	ip, r2
 8010670:	4561      	cmp	r1, ip
 8010672:	f43f af58 	beq.w	8010526 <uxr_read_framed_msg+0x302>
 8010676:	4422      	add	r2, r4
 8010678:	3302      	adds	r3, #2
 801067a:	7891      	ldrb	r1, [r2, #2]
 801067c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010680:	085a      	lsrs	r2, r3, #1
 8010682:	fba5 c202 	umull	ip, r2, r5, r2
 8010686:	0892      	lsrs	r2, r2, #2
 8010688:	fb00 3312 	mls	r3, r0, r2, r3
 801068c:	297e      	cmp	r1, #126	@ 0x7e
 801068e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010692:	f43f af48 	beq.w	8010526 <uxr_read_framed_msg+0x302>
 8010696:	f081 0120 	eor.w	r1, r1, #32
 801069a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801069e:	e6e8      	b.n	8010472 <uxr_read_framed_msg+0x24e>
 80106a0:	1c58      	adds	r0, r3, #1
 80106a2:	0842      	lsrs	r2, r0, #1
 80106a4:	fba5 c202 	umull	ip, r2, r5, r2
 80106a8:	0892      	lsrs	r2, r2, #2
 80106aa:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80106ae:	fb0c 0212 	mls	r2, ip, r2, r0
 80106b2:	b2d0      	uxtb	r0, r2
 80106b4:	4281      	cmp	r1, r0
 80106b6:	f43f af32 	beq.w	801051e <uxr_read_framed_msg+0x2fa>
 80106ba:	4422      	add	r2, r4
 80106bc:	3302      	adds	r3, #2
 80106be:	7890      	ldrb	r0, [r2, #2]
 80106c0:	085a      	lsrs	r2, r3, #1
 80106c2:	fba5 1202 	umull	r1, r2, r5, r2
 80106c6:	0892      	lsrs	r2, r2, #2
 80106c8:	fb0c 3312 	mls	r3, ip, r2, r3
 80106cc:	287e      	cmp	r0, #126	@ 0x7e
 80106ce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80106d2:	d01f      	beq.n	8010714 <uxr_read_framed_msg+0x4f0>
 80106d4:	f080 0020 	eor.w	r0, r0, #32
 80106d8:	e68b      	b.n	80103f2 <uxr_read_framed_msg+0x1ce>
 80106da:	1c51      	adds	r1, r2, #1
 80106dc:	084b      	lsrs	r3, r1, #1
 80106de:	fba5 c303 	umull	ip, r3, r5, r3
 80106e2:	089b      	lsrs	r3, r3, #2
 80106e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80106e8:	fb0c 1313 	mls	r3, ip, r3, r1
 80106ec:	b2d9      	uxtb	r1, r3
 80106ee:	4288      	cmp	r0, r1
 80106f0:	f43f af3d 	beq.w	801056e <uxr_read_framed_msg+0x34a>
 80106f4:	3202      	adds	r2, #2
 80106f6:	4423      	add	r3, r4
 80106f8:	0850      	lsrs	r0, r2, #1
 80106fa:	789b      	ldrb	r3, [r3, #2]
 80106fc:	fba5 1000 	umull	r1, r0, r5, r0
 8010700:	0880      	lsrs	r0, r0, #2
 8010702:	fb0c 2210 	mls	r2, ip, r0, r2
 8010706:	2b7e      	cmp	r3, #126	@ 0x7e
 8010708:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801070c:	d016      	beq.n	801073c <uxr_read_framed_msg+0x518>
 801070e:	f083 0120 	eor.w	r1, r3, #32
 8010712:	e68b      	b.n	801042c <uxr_read_framed_msg+0x208>
 8010714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	2302      	movs	r3, #2
 801071a:	9301      	str	r3, [sp, #4]
 801071c:	464a      	mov	r2, r9
 801071e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010720:	4641      	mov	r1, r8
 8010722:	4620      	mov	r0, r4
 8010724:	f7ff fcfc 	bl	8010120 <uxr_framing_read_transport>
 8010728:	2800      	cmp	r0, #0
 801072a:	f47f aef6 	bne.w	801051a <uxr_read_framed_msg+0x2f6>
 801072e:	2301      	movs	r3, #1
 8010730:	7023      	strb	r3, [r4, #0]
 8010732:	e588      	b.n	8010246 <uxr_read_framed_msg+0x22>
 8010734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	2301      	movs	r3, #1
 801073a:	e7ee      	b.n	801071a <uxr_read_framed_msg+0x4f6>
 801073c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	2303      	movs	r3, #3
 8010742:	e7ea      	b.n	801071a <uxr_read_framed_msg+0x4f6>
 8010744:	ee17 8a90 	vmov	r8, s15
 8010748:	e6ae      	b.n	80104a8 <uxr_read_framed_msg+0x284>
 801074a:	bf00      	nop

0801074c <uxr_stream_id>:
 801074c:	2901      	cmp	r1, #1
 801074e:	b082      	sub	sp, #8
 8010750:	d01d      	beq.n	801078e <uxr_stream_id+0x42>
 8010752:	2902      	cmp	r1, #2
 8010754:	f04f 0c00 	mov.w	ip, #0
 8010758:	d01e      	beq.n	8010798 <uxr_stream_id+0x4c>
 801075a:	2300      	movs	r3, #0
 801075c:	f36c 0307 	bfi	r3, ip, #0, #8
 8010760:	f360 230f 	bfi	r3, r0, #8, #8
 8010764:	f361 4317 	bfi	r3, r1, #16, #8
 8010768:	f362 631f 	bfi	r3, r2, #24, #8
 801076c:	b2da      	uxtb	r2, r3
 801076e:	2000      	movs	r0, #0
 8010770:	f362 0007 	bfi	r0, r2, #0, #8
 8010774:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010778:	f362 200f 	bfi	r0, r2, #8, #8
 801077c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010780:	f362 4017 	bfi	r0, r2, #16, #8
 8010784:	0e1b      	lsrs	r3, r3, #24
 8010786:	f363 601f 	bfi	r0, r3, #24, #8
 801078a:	b002      	add	sp, #8
 801078c:	4770      	bx	lr
 801078e:	f100 0c01 	add.w	ip, r0, #1
 8010792:	fa5f fc8c 	uxtb.w	ip, ip
 8010796:	e7e0      	b.n	801075a <uxr_stream_id+0xe>
 8010798:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 801079c:	e7dd      	b.n	801075a <uxr_stream_id+0xe>
 801079e:	bf00      	nop

080107a0 <uxr_stream_id_from_raw>:
 80107a0:	b082      	sub	sp, #8
 80107a2:	b130      	cbz	r0, 80107b2 <uxr_stream_id_from_raw+0x12>
 80107a4:	0603      	lsls	r3, r0, #24
 80107a6:	d420      	bmi.n	80107ea <uxr_stream_id_from_raw+0x4a>
 80107a8:	1e42      	subs	r2, r0, #1
 80107aa:	b2d2      	uxtb	r2, r2
 80107ac:	f04f 0c01 	mov.w	ip, #1
 80107b0:	e001      	b.n	80107b6 <uxr_stream_id_from_raw+0x16>
 80107b2:	4684      	mov	ip, r0
 80107b4:	4602      	mov	r2, r0
 80107b6:	2300      	movs	r3, #0
 80107b8:	f360 0307 	bfi	r3, r0, #0, #8
 80107bc:	f362 230f 	bfi	r3, r2, #8, #8
 80107c0:	f36c 4317 	bfi	r3, ip, #16, #8
 80107c4:	f361 631f 	bfi	r3, r1, #24, #8
 80107c8:	b2da      	uxtb	r2, r3
 80107ca:	2000      	movs	r0, #0
 80107cc:	f362 0007 	bfi	r0, r2, #0, #8
 80107d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80107d4:	f362 200f 	bfi	r0, r2, #8, #8
 80107d8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80107dc:	f362 4017 	bfi	r0, r2, #16, #8
 80107e0:	0e1b      	lsrs	r3, r3, #24
 80107e2:	f363 601f 	bfi	r0, r3, #24, #8
 80107e6:	b002      	add	sp, #8
 80107e8:	4770      	bx	lr
 80107ea:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80107ee:	f04f 0c02 	mov.w	ip, #2
 80107f2:	e7e0      	b.n	80107b6 <uxr_stream_id_from_raw+0x16>

080107f4 <uxr_init_stream_storage>:
 80107f4:	2300      	movs	r3, #0
 80107f6:	7403      	strb	r3, [r0, #16]
 80107f8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80107fc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010800:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop

08010808 <uxr_reset_stream_storage>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	7c03      	ldrb	r3, [r0, #16]
 801080c:	4604      	mov	r4, r0
 801080e:	b153      	cbz	r3, 8010826 <uxr_reset_stream_storage+0x1e>
 8010810:	4606      	mov	r6, r0
 8010812:	2500      	movs	r5, #0
 8010814:	4630      	mov	r0, r6
 8010816:	f005 fe3f 	bl	8016498 <uxr_reset_output_best_effort_stream>
 801081a:	7c23      	ldrb	r3, [r4, #16]
 801081c:	3501      	adds	r5, #1
 801081e:	42ab      	cmp	r3, r5
 8010820:	f106 0610 	add.w	r6, r6, #16
 8010824:	d8f6      	bhi.n	8010814 <uxr_reset_stream_storage+0xc>
 8010826:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801082a:	b163      	cbz	r3, 8010846 <uxr_reset_stream_storage+0x3e>
 801082c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010830:	2500      	movs	r5, #0
 8010832:	4630      	mov	r0, r6
 8010834:	f005 fc32 	bl	801609c <uxr_reset_input_best_effort_stream>
 8010838:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801083c:	3501      	adds	r5, #1
 801083e:	42ab      	cmp	r3, r5
 8010840:	f106 0602 	add.w	r6, r6, #2
 8010844:	d8f5      	bhi.n	8010832 <uxr_reset_stream_storage+0x2a>
 8010846:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801084a:	b163      	cbz	r3, 8010866 <uxr_reset_stream_storage+0x5e>
 801084c:	f104 0618 	add.w	r6, r4, #24
 8010850:	2500      	movs	r5, #0
 8010852:	4630      	mov	r0, r6
 8010854:	f005 fecc 	bl	80165f0 <uxr_reset_output_reliable_stream>
 8010858:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801085c:	3501      	adds	r5, #1
 801085e:	42ab      	cmp	r3, r5
 8010860:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010864:	d8f5      	bhi.n	8010852 <uxr_reset_stream_storage+0x4a>
 8010866:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801086a:	b163      	cbz	r3, 8010886 <uxr_reset_stream_storage+0x7e>
 801086c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010870:	2500      	movs	r5, #0
 8010872:	4630      	mov	r0, r6
 8010874:	f005 fc86 	bl	8016184 <uxr_reset_input_reliable_stream>
 8010878:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801087c:	3501      	adds	r5, #1
 801087e:	42ab      	cmp	r3, r5
 8010880:	f106 0618 	add.w	r6, r6, #24
 8010884:	d8f5      	bhi.n	8010872 <uxr_reset_stream_storage+0x6a>
 8010886:	bd70      	pop	{r4, r5, r6, pc}

08010888 <uxr_add_output_best_effort_buffer>:
 8010888:	b510      	push	{r4, lr}
 801088a:	7c04      	ldrb	r4, [r0, #16]
 801088c:	f104 0c01 	add.w	ip, r4, #1
 8010890:	b082      	sub	sp, #8
 8010892:	f880 c010 	strb.w	ip, [r0, #16]
 8010896:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801089a:	f005 fdf3 	bl	8016484 <uxr_init_output_best_effort_stream>
 801089e:	2201      	movs	r2, #1
 80108a0:	4611      	mov	r1, r2
 80108a2:	4620      	mov	r0, r4
 80108a4:	b002      	add	sp, #8
 80108a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108aa:	f7ff bf4f 	b.w	801074c <uxr_stream_id>
 80108ae:	bf00      	nop

080108b0 <uxr_add_output_reliable_buffer>:
 80108b0:	b510      	push	{r4, lr}
 80108b2:	b084      	sub	sp, #16
 80108b4:	4684      	mov	ip, r0
 80108b6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80108ba:	9000      	str	r0, [sp, #0]
 80108bc:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80108c0:	2028      	movs	r0, #40	@ 0x28
 80108c2:	fb00 c004 	mla	r0, r0, r4, ip
 80108c6:	f104 0e01 	add.w	lr, r4, #1
 80108ca:	3018      	adds	r0, #24
 80108cc:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80108d0:	f005 fe56 	bl	8016580 <uxr_init_output_reliable_stream>
 80108d4:	2201      	movs	r2, #1
 80108d6:	2102      	movs	r1, #2
 80108d8:	4620      	mov	r0, r4
 80108da:	b004      	add	sp, #16
 80108dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e0:	f7ff bf34 	b.w	801074c <uxr_stream_id>

080108e4 <uxr_add_input_best_effort_buffer>:
 80108e4:	b510      	push	{r4, lr}
 80108e6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80108ea:	4603      	mov	r3, r0
 80108ec:	1c62      	adds	r2, r4, #1
 80108ee:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80108f2:	b082      	sub	sp, #8
 80108f4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80108f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80108fc:	f005 fbca 	bl	8016094 <uxr_init_input_best_effort_stream>
 8010900:	2200      	movs	r2, #0
 8010902:	2101      	movs	r1, #1
 8010904:	4620      	mov	r0, r4
 8010906:	b002      	add	sp, #8
 8010908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801090c:	f7ff bf1e 	b.w	801074c <uxr_stream_id>

08010910 <uxr_add_input_reliable_buffer>:
 8010910:	b510      	push	{r4, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	4684      	mov	ip, r0
 8010916:	9806      	ldr	r0, [sp, #24]
 8010918:	9000      	str	r0, [sp, #0]
 801091a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801091e:	2018      	movs	r0, #24
 8010920:	fb00 c004 	mla	r0, r0, r4, ip
 8010924:	f104 0e01 	add.w	lr, r4, #1
 8010928:	3048      	adds	r0, #72	@ 0x48
 801092a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801092e:	f005 fbfd 	bl	801612c <uxr_init_input_reliable_stream>
 8010932:	2200      	movs	r2, #0
 8010934:	2102      	movs	r1, #2
 8010936:	4620      	mov	r0, r4
 8010938:	b004      	add	sp, #16
 801093a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801093e:	f7ff bf05 	b.w	801074c <uxr_stream_id>
 8010942:	bf00      	nop

08010944 <uxr_get_output_best_effort_stream>:
 8010944:	7c03      	ldrb	r3, [r0, #16]
 8010946:	428b      	cmp	r3, r1
 8010948:	bf8c      	ite	hi
 801094a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801094e:	2000      	movls	r0, #0
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop

08010954 <uxr_get_output_reliable_stream>:
 8010954:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010958:	428b      	cmp	r3, r1
 801095a:	bf83      	ittte	hi
 801095c:	2328      	movhi	r3, #40	@ 0x28
 801095e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010962:	3018      	addhi	r0, #24
 8010964:	2000      	movls	r0, #0
 8010966:	4770      	bx	lr

08010968 <uxr_get_input_best_effort_stream>:
 8010968:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801096c:	428b      	cmp	r3, r1
 801096e:	bf86      	itte	hi
 8010970:	3121      	addhi	r1, #33	@ 0x21
 8010972:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010976:	2000      	movls	r0, #0
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop

0801097c <uxr_get_input_reliable_stream>:
 801097c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010980:	428b      	cmp	r3, r1
 8010982:	bf83      	ittte	hi
 8010984:	2318      	movhi	r3, #24
 8010986:	fb03 0001 	mlahi	r0, r3, r1, r0
 801098a:	3048      	addhi	r0, #72	@ 0x48
 801098c:	2000      	movls	r0, #0
 801098e:	4770      	bx	lr

08010990 <uxr_output_streams_confirmed>:
 8010990:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010994:	b183      	cbz	r3, 80109b8 <uxr_output_streams_confirmed+0x28>
 8010996:	b570      	push	{r4, r5, r6, lr}
 8010998:	4606      	mov	r6, r0
 801099a:	f100 0518 	add.w	r5, r0, #24
 801099e:	2400      	movs	r4, #0
 80109a0:	e001      	b.n	80109a6 <uxr_output_streams_confirmed+0x16>
 80109a2:	3528      	adds	r5, #40	@ 0x28
 80109a4:	b138      	cbz	r0, 80109b6 <uxr_output_streams_confirmed+0x26>
 80109a6:	4628      	mov	r0, r5
 80109a8:	f006 f892 	bl	8016ad0 <uxr_is_output_up_to_date>
 80109ac:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80109b0:	3401      	adds	r4, #1
 80109b2:	42a3      	cmp	r3, r4
 80109b4:	d8f5      	bhi.n	80109a2 <uxr_output_streams_confirmed+0x12>
 80109b6:	bd70      	pop	{r4, r5, r6, pc}
 80109b8:	2001      	movs	r0, #1
 80109ba:	4770      	bx	lr

080109bc <uxr_buffer_submessage_header>:
 80109bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109be:	4604      	mov	r4, r0
 80109c0:	460e      	mov	r6, r1
 80109c2:	2104      	movs	r1, #4
 80109c4:	4615      	mov	r5, r2
 80109c6:	461f      	mov	r7, r3
 80109c8:	f7fd fdae 	bl	800e528 <ucdr_align_to>
 80109cc:	2301      	movs	r3, #1
 80109ce:	ea47 0203 	orr.w	r2, r7, r3
 80109d2:	4631      	mov	r1, r6
 80109d4:	7523      	strb	r3, [r4, #20]
 80109d6:	4620      	mov	r0, r4
 80109d8:	462b      	mov	r3, r5
 80109da:	f000 fa27 	bl	8010e2c <uxr_serialize_submessage_header>
 80109de:	4620      	mov	r0, r4
 80109e0:	f7fd fdb8 	bl	800e554 <ucdr_buffer_remaining>
 80109e4:	42a8      	cmp	r0, r5
 80109e6:	bf34      	ite	cc
 80109e8:	2000      	movcc	r0, #0
 80109ea:	2001      	movcs	r0, #1
 80109ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ee:	bf00      	nop

080109f0 <uxr_read_submessage_header>:
 80109f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f4:	4604      	mov	r4, r0
 80109f6:	460d      	mov	r5, r1
 80109f8:	2104      	movs	r1, #4
 80109fa:	4616      	mov	r6, r2
 80109fc:	4698      	mov	r8, r3
 80109fe:	f7fd fd93 	bl	800e528 <ucdr_align_to>
 8010a02:	4620      	mov	r0, r4
 8010a04:	f7fd fda6 	bl	800e554 <ucdr_buffer_remaining>
 8010a08:	2803      	cmp	r0, #3
 8010a0a:	bf8c      	ite	hi
 8010a0c:	2701      	movhi	r7, #1
 8010a0e:	2700      	movls	r7, #0
 8010a10:	d802      	bhi.n	8010a18 <uxr_read_submessage_header+0x28>
 8010a12:	4638      	mov	r0, r7
 8010a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a18:	4633      	mov	r3, r6
 8010a1a:	4642      	mov	r2, r8
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	4629      	mov	r1, r5
 8010a20:	f000 fa18 	bl	8010e54 <uxr_deserialize_submessage_header>
 8010a24:	f898 3000 	ldrb.w	r3, [r8]
 8010a28:	f003 0201 	and.w	r2, r3, #1
 8010a2c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010a30:	f888 3000 	strb.w	r3, [r8]
 8010a34:	7522      	strb	r2, [r4, #20]
 8010a36:	4638      	mov	r0, r7
 8010a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a3c <uxr_submessage_padding>:
 8010a3c:	f010 0003 	ands.w	r0, r0, #3
 8010a40:	bf18      	it	ne
 8010a42:	f1c0 0004 	rsbne	r0, r0, #4
 8010a46:	4770      	bx	lr

08010a48 <uxr_millis>:
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	4669      	mov	r1, sp
 8010a4e:	2001      	movs	r0, #1
 8010a50:	f7f0 ff42 	bl	80018d8 <clock_gettime>
 8010a54:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010a58:	4906      	ldr	r1, [pc, #24]	@ (8010a74 <uxr_millis+0x2c>)
 8010a5a:	fba0 0301 	umull	r0, r3, r0, r1
 8010a5e:	1900      	adds	r0, r0, r4
 8010a60:	fb01 3102 	mla	r1, r1, r2, r3
 8010a64:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010a68:	4a03      	ldr	r2, [pc, #12]	@ (8010a78 <uxr_millis+0x30>)
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	f7ef fc40 	bl	80002f0 <__aeabi_ldivmod>
 8010a70:	b004      	add	sp, #16
 8010a72:	bd10      	pop	{r4, pc}
 8010a74:	3b9aca00 	.word	0x3b9aca00
 8010a78:	000f4240 	.word	0x000f4240

08010a7c <uxr_nanos>:
 8010a7c:	b510      	push	{r4, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	4669      	mov	r1, sp
 8010a82:	2001      	movs	r0, #1
 8010a84:	f7f0 ff28 	bl	80018d8 <clock_gettime>
 8010a88:	4a06      	ldr	r2, [pc, #24]	@ (8010aa4 <uxr_nanos+0x28>)
 8010a8a:	9800      	ldr	r0, [sp, #0]
 8010a8c:	9902      	ldr	r1, [sp, #8]
 8010a8e:	9c01      	ldr	r4, [sp, #4]
 8010a90:	fba0 0302 	umull	r0, r3, r0, r2
 8010a94:	1840      	adds	r0, r0, r1
 8010a96:	fb02 3304 	mla	r3, r2, r4, r3
 8010a9a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010a9e:	b004      	add	sp, #16
 8010aa0:	bd10      	pop	{r4, pc}
 8010aa2:	bf00      	nop
 8010aa4:	3b9aca00 	.word	0x3b9aca00

08010aa8 <on_full_output_buffer_fragmented>:
 8010aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aac:	460c      	mov	r4, r1
 8010aae:	b08a      	sub	sp, #40	@ 0x28
 8010ab0:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010ab4:	4606      	mov	r6, r0
 8010ab6:	f104 0008 	add.w	r0, r4, #8
 8010aba:	f7ff ff4b 	bl	8010954 <uxr_get_output_reliable_stream>
 8010abe:	4605      	mov	r5, r0
 8010ac0:	f006 f810 	bl	8016ae4 <get_available_free_slots>
 8010ac4:	b968      	cbnz	r0, 8010ae2 <on_full_output_buffer_fragmented+0x3a>
 8010ac6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010aca:	4620      	mov	r0, r4
 8010acc:	4798      	blx	r3
 8010ace:	b918      	cbnz	r0, 8010ad8 <on_full_output_buffer_fragmented+0x30>
 8010ad0:	2001      	movs	r0, #1
 8010ad2:	b00a      	add	sp, #40	@ 0x28
 8010ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f006 f803 	bl	8016ae4 <get_available_free_slots>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d0f6      	beq.n	8010ad0 <on_full_output_buffer_fragmented+0x28>
 8010ae2:	8929      	ldrh	r1, [r5, #8]
 8010ae4:	89eb      	ldrh	r3, [r5, #14]
 8010ae6:	7b28      	ldrb	r0, [r5, #12]
 8010ae8:	686a      	ldr	r2, [r5, #4]
 8010aea:	fbb2 f8f1 	udiv	r8, r2, r1
 8010aee:	fbb3 f2f1 	udiv	r2, r3, r1
 8010af2:	fb01 3112 	mls	r1, r1, r2, r3
 8010af6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010afa:	b289      	uxth	r1, r1
 8010afc:	fb08 f101 	mul.w	r1, r8, r1
 8010b00:	30fc      	adds	r0, #252	@ 0xfc
 8010b02:	f1a8 0804 	sub.w	r8, r8, #4
 8010b06:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010b0a:	4440      	add	r0, r8
 8010b0c:	b287      	uxth	r7, r0
 8010b0e:	1bdb      	subs	r3, r3, r7
 8010b10:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	3104      	adds	r1, #4
 8010b18:	4419      	add	r1, r3
 8010b1a:	4642      	mov	r2, r8
 8010b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	a802      	add	r0, sp, #8
 8010b24:	2300      	movs	r3, #0
 8010b26:	f7fd fcd3 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 8010b2a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010b2e:	f102 0308 	add.w	r3, r2, #8
 8010b32:	4543      	cmp	r3, r8
 8010b34:	d928      	bls.n	8010b88 <on_full_output_buffer_fragmented+0xe0>
 8010b36:	463a      	mov	r2, r7
 8010b38:	2300      	movs	r3, #0
 8010b3a:	210d      	movs	r1, #13
 8010b3c:	a802      	add	r0, sp, #8
 8010b3e:	f7ff ff3d 	bl	80109bc <uxr_buffer_submessage_header>
 8010b42:	8929      	ldrh	r1, [r5, #8]
 8010b44:	89eb      	ldrh	r3, [r5, #14]
 8010b46:	fbb3 f2f1 	udiv	r2, r3, r1
 8010b4a:	fb01 3312 	mls	r3, r1, r2, r3
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	686a      	ldr	r2, [r5, #4]
 8010b52:	fbb2 f2f1 	udiv	r2, r2, r1
 8010b56:	fb02 f303 	mul.w	r3, r2, r3
 8010b5a:	682a      	ldr	r2, [r5, #0]
 8010b5c:	f842 8003 	str.w	r8, [r2, r3]
 8010b60:	89e8      	ldrh	r0, [r5, #14]
 8010b62:	2101      	movs	r1, #1
 8010b64:	f005 ffde 	bl	8016b24 <uxr_seq_num_add>
 8010b68:	9904      	ldr	r1, [sp, #16]
 8010b6a:	9a03      	ldr	r2, [sp, #12]
 8010b6c:	81e8      	strh	r0, [r5, #14]
 8010b6e:	1a52      	subs	r2, r2, r1
 8010b70:	4630      	mov	r0, r6
 8010b72:	f7fd fcbf 	bl	800e4f4 <ucdr_init_buffer>
 8010b76:	4630      	mov	r0, r6
 8010b78:	490f      	ldr	r1, [pc, #60]	@ (8010bb8 <on_full_output_buffer_fragmented+0x110>)
 8010b7a:	4622      	mov	r2, r4
 8010b7c:	f7fd fc8e 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 8010b80:	2000      	movs	r0, #0
 8010b82:	b00a      	add	sp, #40	@ 0x28
 8010b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b88:	b292      	uxth	r2, r2
 8010b8a:	2302      	movs	r3, #2
 8010b8c:	210d      	movs	r1, #13
 8010b8e:	a802      	add	r0, sp, #8
 8010b90:	f7ff ff14 	bl	80109bc <uxr_buffer_submessage_header>
 8010b94:	8928      	ldrh	r0, [r5, #8]
 8010b96:	89eb      	ldrh	r3, [r5, #14]
 8010b98:	fbb3 f1f0 	udiv	r1, r3, r0
 8010b9c:	fb00 3311 	mls	r3, r0, r1, r3
 8010ba0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010ba4:	6869      	ldr	r1, [r5, #4]
 8010ba6:	fbb1 f1f0 	udiv	r1, r1, r0
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	fb01 f303 	mul.w	r3, r1, r3
 8010bb0:	6829      	ldr	r1, [r5, #0]
 8010bb2:	3208      	adds	r2, #8
 8010bb4:	50ca      	str	r2, [r1, r3]
 8010bb6:	e7d3      	b.n	8010b60 <on_full_output_buffer_fragmented+0xb8>
 8010bb8:	08010aa9 	.word	0x08010aa9

08010bbc <uxr_prepare_output_stream>:
 8010bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bbe:	b087      	sub	sp, #28
 8010bc0:	2707      	movs	r7, #7
 8010bc2:	9202      	str	r2, [sp, #8]
 8010bc4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010bc6:	9103      	str	r1, [sp, #12]
 8010bc8:	2500      	movs	r5, #0
 8010bca:	3204      	adds	r2, #4
 8010bcc:	e9cd 7500 	strd	r7, r5, [sp]
 8010bd0:	461c      	mov	r4, r3
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	f7fe ffc2 	bl	800fb5c <uxr_prepare_stream_to_write_submessage>
 8010bd8:	f080 0201 	eor.w	r2, r0, #1
 8010bdc:	b2d2      	uxtb	r2, r2
 8010bde:	75a2      	strb	r2, [r4, #22]
 8010be0:	b112      	cbz	r2, 8010be8 <uxr_prepare_output_stream+0x2c>
 8010be2:	4628      	mov	r0, r5
 8010be4:	b007      	add	sp, #28
 8010be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010be8:	aa05      	add	r2, sp, #20
 8010bea:	9902      	ldr	r1, [sp, #8]
 8010bec:	4630      	mov	r0, r6
 8010bee:	f7ff f8eb 	bl	800fdc8 <uxr_init_base_object_request>
 8010bf2:	a905      	add	r1, sp, #20
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 ffa0 	bl	8011b3c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010bfc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010c00:	69a6      	ldr	r6, [r4, #24]
 8010c02:	69e7      	ldr	r7, [r4, #28]
 8010c04:	1a52      	subs	r2, r2, r1
 8010c06:	4620      	mov	r0, r4
 8010c08:	f7fd fc74 	bl	800e4f4 <ucdr_init_buffer>
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	463a      	mov	r2, r7
 8010c10:	4631      	mov	r1, r6
 8010c12:	f7fd fc43 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 8010c16:	4628      	mov	r0, r5
 8010c18:	b007      	add	sp, #28
 8010c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c1c <uxr_prepare_output_stream_fragmented>:
 8010c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c20:	b091      	sub	sp, #68	@ 0x44
 8010c22:	4605      	mov	r5, r0
 8010c24:	9105      	str	r1, [sp, #20]
 8010c26:	3008      	adds	r0, #8
 8010c28:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010c2c:	461e      	mov	r6, r3
 8010c2e:	9204      	str	r2, [sp, #16]
 8010c30:	f7ff fe90 	bl	8010954 <uxr_get_output_reliable_stream>
 8010c34:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	f000 8091 	beq.w	8010d60 <uxr_prepare_output_stream_fragmented+0x144>
 8010c3e:	4604      	mov	r4, r0
 8010c40:	2800      	cmp	r0, #0
 8010c42:	f000 808d 	beq.w	8010d60 <uxr_prepare_output_stream_fragmented+0x144>
 8010c46:	f005 ff4d 	bl	8016ae4 <get_available_free_slots>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	f000 8083 	beq.w	8010d56 <uxr_prepare_output_stream_fragmented+0x13a>
 8010c50:	8922      	ldrh	r2, [r4, #8]
 8010c52:	89e7      	ldrh	r7, [r4, #14]
 8010c54:	fbb7 f9f2 	udiv	r9, r7, r2
 8010c58:	fb02 7919 	mls	r9, r2, r9, r7
 8010c5c:	fa1f f989 	uxth.w	r9, r9
 8010c60:	6863      	ldr	r3, [r4, #4]
 8010c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	9203      	str	r2, [sp, #12]
 8010c6a:	fb02 f909 	mul.w	r9, r2, r9
 8010c6e:	f109 0904 	add.w	r9, r9, #4
 8010c72:	4499      	add	r9, r3
 8010c74:	7b23      	ldrb	r3, [r4, #12]
 8010c76:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010c7a:	4543      	cmp	r3, r8
 8010c7c:	f1a2 0b04 	sub.w	fp, r2, #4
 8010c80:	d37a      	bcc.n	8010d78 <uxr_prepare_output_stream_fragmented+0x15c>
 8010c82:	f1ab 0a04 	sub.w	sl, fp, #4
 8010c86:	ebaa 0a03 	sub.w	sl, sl, r3
 8010c8a:	465a      	mov	r2, fp
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	4649      	mov	r1, r9
 8010c90:	a808      	add	r0, sp, #32
 8010c92:	f8cd 8000 	str.w	r8, [sp]
 8010c96:	f7fd fc1b 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 8010c9a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010c9c:	fa1f fa8a 	uxth.w	sl, sl
 8010ca0:	4652      	mov	r2, sl
 8010ca2:	f103 0a08 	add.w	sl, r3, #8
 8010ca6:	45da      	cmp	sl, fp
 8010ca8:	bf34      	ite	cc
 8010caa:	2302      	movcc	r3, #2
 8010cac:	2300      	movcs	r3, #0
 8010cae:	210d      	movs	r1, #13
 8010cb0:	a808      	add	r0, sp, #32
 8010cb2:	f7ff fe83 	bl	80109bc <uxr_buffer_submessage_header>
 8010cb6:	8921      	ldrh	r1, [r4, #8]
 8010cb8:	fbb7 f2f1 	udiv	r2, r7, r1
 8010cbc:	fb01 7212 	mls	r2, r1, r2, r7
 8010cc0:	b292      	uxth	r2, r2
 8010cc2:	6863      	ldr	r3, [r4, #4]
 8010cc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cc8:	fb02 f303 	mul.w	r3, r2, r3
 8010ccc:	6822      	ldr	r2, [r4, #0]
 8010cce:	4638      	mov	r0, r7
 8010cd0:	f842 b003 	str.w	fp, [r2, r3]
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	f005 ff25 	bl	8016b24 <uxr_seq_num_add>
 8010cda:	9b03      	ldr	r3, [sp, #12]
 8010cdc:	f108 0104 	add.w	r1, r8, #4
 8010ce0:	f1a3 0208 	sub.w	r2, r3, #8
 8010ce4:	eba2 0208 	sub.w	r2, r2, r8
 8010ce8:	4449      	add	r1, r9
 8010cea:	4607      	mov	r7, r0
 8010cec:	4630      	mov	r0, r6
 8010cee:	f7fd fc01 	bl	800e4f4 <ucdr_init_buffer>
 8010cf2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010cf4:	81e7      	strh	r7, [r4, #14]
 8010cf6:	1d1a      	adds	r2, r3, #4
 8010cf8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010cfc:	bf28      	it	cs
 8010cfe:	2200      	movcs	r2, #0
 8010d00:	2300      	movs	r3, #0
 8010d02:	b292      	uxth	r2, r2
 8010d04:	2107      	movs	r1, #7
 8010d06:	4630      	mov	r0, r6
 8010d08:	f7ff fe58 	bl	80109bc <uxr_buffer_submessage_header>
 8010d0c:	9904      	ldr	r1, [sp, #16]
 8010d0e:	aa07      	add	r2, sp, #28
 8010d10:	4628      	mov	r0, r5
 8010d12:	f7ff f859 	bl	800fdc8 <uxr_init_base_object_request>
 8010d16:	4604      	mov	r4, r0
 8010d18:	b318      	cbz	r0, 8010d62 <uxr_prepare_output_stream_fragmented+0x146>
 8010d1a:	a907      	add	r1, sp, #28
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	f000 ff0d 	bl	8011b3c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010d22:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010d26:	4630      	mov	r0, r6
 8010d28:	1a52      	subs	r2, r2, r1
 8010d2a:	f7fd fbe3 	bl	800e4f4 <ucdr_init_buffer>
 8010d2e:	9b05      	ldr	r3, [sp, #20]
 8010d30:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010d34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010d36:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010d3a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010d3c:	491b      	ldr	r1, [pc, #108]	@ (8010dac <uxr_prepare_output_stream_fragmented+0x190>)
 8010d3e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010d42:	4630      	mov	r0, r6
 8010d44:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010d48:	462a      	mov	r2, r5
 8010d4a:	f7fd fba7 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 8010d4e:	4620      	mov	r0, r4
 8010d50:	b011      	add	sp, #68	@ 0x44
 8010d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d56:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010d58:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	4798      	blx	r3
 8010d5e:	b920      	cbnz	r0, 8010d6a <uxr_prepare_output_stream_fragmented+0x14e>
 8010d60:	2400      	movs	r4, #0
 8010d62:	4620      	mov	r0, r4
 8010d64:	b011      	add	sp, #68	@ 0x44
 8010d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f005 feba 	bl	8016ae4 <get_available_free_slots>
 8010d70:	2800      	cmp	r0, #0
 8010d72:	f47f af6d 	bne.w	8010c50 <uxr_prepare_output_stream_fragmented+0x34>
 8010d76:	e7f3      	b.n	8010d60 <uxr_prepare_output_stream_fragmented+0x144>
 8010d78:	4638      	mov	r0, r7
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	f005 fed2 	bl	8016b24 <uxr_seq_num_add>
 8010d80:	8921      	ldrh	r1, [r4, #8]
 8010d82:	fbb0 f2f1 	udiv	r2, r0, r1
 8010d86:	fb01 0912 	mls	r9, r1, r2, r0
 8010d8a:	fa1f f289 	uxth.w	r2, r9
 8010d8e:	6863      	ldr	r3, [r4, #4]
 8010d90:	fbb3 f9f1 	udiv	r9, r3, r1
 8010d94:	6823      	ldr	r3, [r4, #0]
 8010d96:	fb02 f909 	mul.w	r9, r2, r9
 8010d9a:	f109 0904 	add.w	r9, r9, #4
 8010d9e:	4499      	add	r9, r3
 8010da0:	4607      	mov	r7, r0
 8010da2:	7b23      	ldrb	r3, [r4, #12]
 8010da4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010da8:	e76b      	b.n	8010c82 <uxr_prepare_output_stream_fragmented+0x66>
 8010daa:	bf00      	nop
 8010dac:	08010aa9 	.word	0x08010aa9

08010db0 <uxr_serialize_message_header>:
 8010db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010db2:	b083      	sub	sp, #12
 8010db4:	4616      	mov	r6, r2
 8010db6:	4604      	mov	r4, r0
 8010db8:	9301      	str	r3, [sp, #4]
 8010dba:	460d      	mov	r5, r1
 8010dbc:	9f08      	ldr	r7, [sp, #32]
 8010dbe:	f7fc fbed 	bl	800d59c <ucdr_serialize_uint8_t>
 8010dc2:	4631      	mov	r1, r6
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	f7fc fbe9 	bl	800d59c <ucdr_serialize_uint8_t>
 8010dca:	9a01      	ldr	r2, [sp, #4]
 8010dcc:	2101      	movs	r1, #1
 8010dce:	4620      	mov	r0, r4
 8010dd0:	f7fc fc90 	bl	800d6f4 <ucdr_serialize_endian_uint16_t>
 8010dd4:	062b      	lsls	r3, r5, #24
 8010dd6:	d501      	bpl.n	8010ddc <uxr_serialize_message_header+0x2c>
 8010dd8:	b003      	add	sp, #12
 8010dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ddc:	2204      	movs	r2, #4
 8010dde:	4639      	mov	r1, r7
 8010de0:	4620      	mov	r0, r4
 8010de2:	b003      	add	sp, #12
 8010de4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010de8:	f005 b81c 	b.w	8015e24 <ucdr_serialize_array_uint8_t>

08010dec <uxr_deserialize_message_header>:
 8010dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dee:	b083      	sub	sp, #12
 8010df0:	4616      	mov	r6, r2
 8010df2:	4604      	mov	r4, r0
 8010df4:	9301      	str	r3, [sp, #4]
 8010df6:	460d      	mov	r5, r1
 8010df8:	9f08      	ldr	r7, [sp, #32]
 8010dfa:	f7fc fbe5 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8010dfe:	4631      	mov	r1, r6
 8010e00:	4620      	mov	r0, r4
 8010e02:	f7fc fbe1 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8010e06:	9a01      	ldr	r2, [sp, #4]
 8010e08:	2101      	movs	r1, #1
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f7fc fd66 	bl	800d8dc <ucdr_deserialize_endian_uint16_t>
 8010e10:	f995 3000 	ldrsb.w	r3, [r5]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	da01      	bge.n	8010e1c <uxr_deserialize_message_header+0x30>
 8010e18:	b003      	add	sp, #12
 8010e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e1c:	2204      	movs	r2, #4
 8010e1e:	4639      	mov	r1, r7
 8010e20:	4620      	mov	r0, r4
 8010e22:	b003      	add	sp, #12
 8010e24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e28:	f005 b860 	b.w	8015eec <ucdr_deserialize_array_uint8_t>

08010e2c <uxr_serialize_submessage_header>:
 8010e2c:	b530      	push	{r4, r5, lr}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	4615      	mov	r5, r2
 8010e32:	4604      	mov	r4, r0
 8010e34:	9301      	str	r3, [sp, #4]
 8010e36:	f7fc fbb1 	bl	800d59c <ucdr_serialize_uint8_t>
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f7fc fbad 	bl	800d59c <ucdr_serialize_uint8_t>
 8010e42:	9a01      	ldr	r2, [sp, #4]
 8010e44:	2101      	movs	r1, #1
 8010e46:	4620      	mov	r0, r4
 8010e48:	b003      	add	sp, #12
 8010e4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e4e:	f7fc bc51 	b.w	800d6f4 <ucdr_serialize_endian_uint16_t>
 8010e52:	bf00      	nop

08010e54 <uxr_deserialize_submessage_header>:
 8010e54:	b530      	push	{r4, r5, lr}
 8010e56:	b083      	sub	sp, #12
 8010e58:	4615      	mov	r5, r2
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	9301      	str	r3, [sp, #4]
 8010e5e:	f7fc fbb3 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8010e62:	4629      	mov	r1, r5
 8010e64:	4620      	mov	r0, r4
 8010e66:	f7fc fbaf 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8010e6a:	9a01      	ldr	r2, [sp, #4]
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	4620      	mov	r0, r4
 8010e70:	b003      	add	sp, #12
 8010e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e76:	f7fc bd31 	b.w	800d8dc <ucdr_deserialize_endian_uint16_t>
 8010e7a:	bf00      	nop

08010e7c <uxr_serialize_CLIENT_Representation>:
 8010e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e80:	2204      	movs	r2, #4
 8010e82:	460e      	mov	r6, r1
 8010e84:	4605      	mov	r5, r0
 8010e86:	f004 ffcd 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8010e8a:	2202      	movs	r2, #2
 8010e8c:	4607      	mov	r7, r0
 8010e8e:	1d31      	adds	r1, r6, #4
 8010e90:	4628      	mov	r0, r5
 8010e92:	f004 ffc7 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8010e96:	4038      	ands	r0, r7
 8010e98:	2202      	movs	r2, #2
 8010e9a:	1db1      	adds	r1, r6, #6
 8010e9c:	b2c7      	uxtb	r7, r0
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f004 ffc0 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8010ea4:	2204      	movs	r2, #4
 8010ea6:	4007      	ands	r7, r0
 8010ea8:	f106 0108 	add.w	r1, r6, #8
 8010eac:	4628      	mov	r0, r5
 8010eae:	f004 ffb9 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8010eb2:	7b31      	ldrb	r1, [r6, #12]
 8010eb4:	4007      	ands	r7, r0
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f7fc fb70 	bl	800d59c <ucdr_serialize_uint8_t>
 8010ebc:	7b71      	ldrb	r1, [r6, #13]
 8010ebe:	4007      	ands	r7, r0
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	f7fc fb3d 	bl	800d540 <ucdr_serialize_bool>
 8010ec6:	7b73      	ldrb	r3, [r6, #13]
 8010ec8:	ea07 0800 	and.w	r8, r7, r0
 8010ecc:	b93b      	cbnz	r3, 8010ede <uxr_serialize_CLIENT_Representation+0x62>
 8010ece:	8bb1      	ldrh	r1, [r6, #28]
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f7fc fb8f 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8010ed6:	ea08 0000 	and.w	r0, r8, r0
 8010eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ede:	6931      	ldr	r1, [r6, #16]
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	f7fc fd71 	bl	800d9c8 <ucdr_serialize_uint32_t>
 8010ee6:	6933      	ldr	r3, [r6, #16]
 8010ee8:	b1e3      	cbz	r3, 8010f24 <uxr_serialize_CLIENT_Representation+0xa8>
 8010eea:	b1c0      	cbz	r0, 8010f1e <uxr_serialize_CLIENT_Representation+0xa2>
 8010eec:	4637      	mov	r7, r6
 8010eee:	f04f 0900 	mov.w	r9, #0
 8010ef2:	e001      	b.n	8010ef8 <uxr_serialize_CLIENT_Representation+0x7c>
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	b194      	cbz	r4, 8010f1e <uxr_serialize_CLIENT_Representation+0xa2>
 8010ef8:	6979      	ldr	r1, [r7, #20]
 8010efa:	4628      	mov	r0, r5
 8010efc:	f005 f8b2 	bl	8016064 <ucdr_serialize_string>
 8010f00:	69b9      	ldr	r1, [r7, #24]
 8010f02:	4604      	mov	r4, r0
 8010f04:	4628      	mov	r0, r5
 8010f06:	f005 f8ad 	bl	8016064 <ucdr_serialize_string>
 8010f0a:	6933      	ldr	r3, [r6, #16]
 8010f0c:	f109 0901 	add.w	r9, r9, #1
 8010f10:	4004      	ands	r4, r0
 8010f12:	4599      	cmp	r9, r3
 8010f14:	b2e4      	uxtb	r4, r4
 8010f16:	d3ed      	bcc.n	8010ef4 <uxr_serialize_CLIENT_Representation+0x78>
 8010f18:	ea08 0804 	and.w	r8, r8, r4
 8010f1c:	e7d7      	b.n	8010ece <uxr_serialize_CLIENT_Representation+0x52>
 8010f1e:	f04f 0800 	mov.w	r8, #0
 8010f22:	e7d4      	b.n	8010ece <uxr_serialize_CLIENT_Representation+0x52>
 8010f24:	ea08 0800 	and.w	r8, r8, r0
 8010f28:	e7d1      	b.n	8010ece <uxr_serialize_CLIENT_Representation+0x52>
 8010f2a:	bf00      	nop

08010f2c <uxr_deserialize_CLIENT_Representation>:
 8010f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f30:	2204      	movs	r2, #4
 8010f32:	460c      	mov	r4, r1
 8010f34:	4605      	mov	r5, r0
 8010f36:	f004 ffd9 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8010f3a:	2202      	movs	r2, #2
 8010f3c:	4607      	mov	r7, r0
 8010f3e:	1d21      	adds	r1, r4, #4
 8010f40:	4628      	mov	r0, r5
 8010f42:	f004 ffd3 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8010f46:	4038      	ands	r0, r7
 8010f48:	2202      	movs	r2, #2
 8010f4a:	1da1      	adds	r1, r4, #6
 8010f4c:	b2c6      	uxtb	r6, r0
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f004 ffcc 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8010f54:	2204      	movs	r2, #4
 8010f56:	4006      	ands	r6, r0
 8010f58:	f104 0108 	add.w	r1, r4, #8
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	f004 ffc5 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8010f62:	f104 010c 	add.w	r1, r4, #12
 8010f66:	4006      	ands	r6, r0
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f7fc fb2d 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8010f6e:	f104 010d 	add.w	r1, r4, #13
 8010f72:	ea06 0700 	and.w	r7, r6, r0
 8010f76:	4628      	mov	r0, r5
 8010f78:	f7fc faf8 	bl	800d56c <ucdr_deserialize_bool>
 8010f7c:	7b63      	ldrb	r3, [r4, #13]
 8010f7e:	4007      	ands	r7, r0
 8010f80:	b93b      	cbnz	r3, 8010f92 <uxr_deserialize_CLIENT_Representation+0x66>
 8010f82:	f104 011c 	add.w	r1, r4, #28
 8010f86:	4628      	mov	r0, r5
 8010f88:	f7fc fc34 	bl	800d7f4 <ucdr_deserialize_uint16_t>
 8010f8c:	4038      	ands	r0, r7
 8010f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f92:	f104 0110 	add.w	r1, r4, #16
 8010f96:	4628      	mov	r0, r5
 8010f98:	f7fc fe46 	bl	800dc28 <ucdr_deserialize_uint32_t>
 8010f9c:	6923      	ldr	r3, [r4, #16]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d903      	bls.n	8010faa <uxr_deserialize_CLIENT_Representation+0x7e>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	75ab      	strb	r3, [r5, #22]
 8010fa6:	2700      	movs	r7, #0
 8010fa8:	e7eb      	b.n	8010f82 <uxr_deserialize_CLIENT_Representation+0x56>
 8010faa:	b30b      	cbz	r3, 8010ff0 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d0fa      	beq.n	8010fa6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010fb0:	46a0      	mov	r8, r4
 8010fb2:	f04f 0900 	mov.w	r9, #0
 8010fb6:	e001      	b.n	8010fbc <uxr_deserialize_CLIENT_Representation+0x90>
 8010fb8:	2e00      	cmp	r6, #0
 8010fba:	d0f4      	beq.n	8010fa6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010fbc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	f005 f85d 	bl	8016084 <ucdr_deserialize_string>
 8010fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010fce:	4606      	mov	r6, r0
 8010fd0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	f005 f855 	bl	8016084 <ucdr_deserialize_string>
 8010fda:	6923      	ldr	r3, [r4, #16]
 8010fdc:	f109 0901 	add.w	r9, r9, #1
 8010fe0:	4006      	ands	r6, r0
 8010fe2:	4599      	cmp	r9, r3
 8010fe4:	f108 0808 	add.w	r8, r8, #8
 8010fe8:	b2f6      	uxtb	r6, r6
 8010fea:	d3e5      	bcc.n	8010fb8 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010fec:	4037      	ands	r7, r6
 8010fee:	e7c8      	b.n	8010f82 <uxr_deserialize_CLIENT_Representation+0x56>
 8010ff0:	4007      	ands	r7, r0
 8010ff2:	e7c6      	b.n	8010f82 <uxr_deserialize_CLIENT_Representation+0x56>

08010ff4 <uxr_serialize_AGENT_Representation>:
 8010ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ff8:	2204      	movs	r2, #4
 8010ffa:	460f      	mov	r7, r1
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	f004 ff11 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011002:	2202      	movs	r2, #2
 8011004:	4604      	mov	r4, r0
 8011006:	1d39      	adds	r1, r7, #4
 8011008:	4628      	mov	r0, r5
 801100a:	f004 ff0b 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 801100e:	4020      	ands	r0, r4
 8011010:	2202      	movs	r2, #2
 8011012:	1db9      	adds	r1, r7, #6
 8011014:	b2c4      	uxtb	r4, r0
 8011016:	4628      	mov	r0, r5
 8011018:	f004 ff04 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 801101c:	7a39      	ldrb	r1, [r7, #8]
 801101e:	4004      	ands	r4, r0
 8011020:	4628      	mov	r0, r5
 8011022:	f7fc fa8d 	bl	800d540 <ucdr_serialize_bool>
 8011026:	7a3b      	ldrb	r3, [r7, #8]
 8011028:	ea00 0804 	and.w	r8, r0, r4
 801102c:	b913      	cbnz	r3, 8011034 <uxr_serialize_AGENT_Representation+0x40>
 801102e:	4640      	mov	r0, r8
 8011030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011034:	68f9      	ldr	r1, [r7, #12]
 8011036:	4628      	mov	r0, r5
 8011038:	f7fc fcc6 	bl	800d9c8 <ucdr_serialize_uint32_t>
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	b303      	cbz	r3, 8011082 <uxr_serialize_AGENT_Representation+0x8e>
 8011040:	b1d0      	cbz	r0, 8011078 <uxr_serialize_AGENT_Representation+0x84>
 8011042:	463e      	mov	r6, r7
 8011044:	f04f 0900 	mov.w	r9, #0
 8011048:	e001      	b.n	801104e <uxr_serialize_AGENT_Representation+0x5a>
 801104a:	3608      	adds	r6, #8
 801104c:	b1a4      	cbz	r4, 8011078 <uxr_serialize_AGENT_Representation+0x84>
 801104e:	6931      	ldr	r1, [r6, #16]
 8011050:	4628      	mov	r0, r5
 8011052:	f005 f807 	bl	8016064 <ucdr_serialize_string>
 8011056:	6971      	ldr	r1, [r6, #20]
 8011058:	4604      	mov	r4, r0
 801105a:	4628      	mov	r0, r5
 801105c:	f005 f802 	bl	8016064 <ucdr_serialize_string>
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f109 0901 	add.w	r9, r9, #1
 8011066:	4004      	ands	r4, r0
 8011068:	4599      	cmp	r9, r3
 801106a:	b2e4      	uxtb	r4, r4
 801106c:	d3ed      	bcc.n	801104a <uxr_serialize_AGENT_Representation+0x56>
 801106e:	ea08 0804 	and.w	r8, r8, r4
 8011072:	4640      	mov	r0, r8
 8011074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011078:	f04f 0800 	mov.w	r8, #0
 801107c:	4640      	mov	r0, r8
 801107e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011082:	ea08 0800 	and.w	r8, r8, r0
 8011086:	e7d2      	b.n	801102e <uxr_serialize_AGENT_Representation+0x3a>

08011088 <uxr_serialize_DATAWRITER_Representation>:
 8011088:	b570      	push	{r4, r5, r6, lr}
 801108a:	460d      	mov	r5, r1
 801108c:	7809      	ldrb	r1, [r1, #0]
 801108e:	4606      	mov	r6, r0
 8011090:	f7fc fa84 	bl	800d59c <ucdr_serialize_uint8_t>
 8011094:	4604      	mov	r4, r0
 8011096:	b130      	cbz	r0, 80110a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011098:	782b      	ldrb	r3, [r5, #0]
 801109a:	2b02      	cmp	r3, #2
 801109c:	d00c      	beq.n	80110b8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801109e:	2b03      	cmp	r3, #3
 80110a0:	d010      	beq.n	80110c4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d008      	beq.n	80110b8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80110a6:	2202      	movs	r2, #2
 80110a8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80110ac:	4630      	mov	r0, r6
 80110ae:	f004 feb9 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 80110b2:	4020      	ands	r0, r4
 80110b4:	b2c0      	uxtb	r0, r0
 80110b6:	bd70      	pop	{r4, r5, r6, pc}
 80110b8:	6869      	ldr	r1, [r5, #4]
 80110ba:	4630      	mov	r0, r6
 80110bc:	f004 ffd2 	bl	8016064 <ucdr_serialize_string>
 80110c0:	4604      	mov	r4, r0
 80110c2:	e7f0      	b.n	80110a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80110c4:	4629      	mov	r1, r5
 80110c6:	4630      	mov	r0, r6
 80110c8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80110cc:	3104      	adds	r1, #4
 80110ce:	f004 ff9d 	bl	801600c <ucdr_serialize_sequence_uint8_t>
 80110d2:	4604      	mov	r4, r0
 80110d4:	e7e7      	b.n	80110a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80110d6:	bf00      	nop

080110d8 <uxr_serialize_ObjectVariant.part.0>:
 80110d8:	b570      	push	{r4, r5, r6, lr}
 80110da:	780b      	ldrb	r3, [r1, #0]
 80110dc:	3b01      	subs	r3, #1
 80110de:	460c      	mov	r4, r1
 80110e0:	4605      	mov	r5, r0
 80110e2:	2b0d      	cmp	r3, #13
 80110e4:	d854      	bhi.n	8011190 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80110e6:	e8df f003 	tbb	[pc, r3]
 80110ea:	0730      	.short	0x0730
 80110ec:	07071b1b 	.word	0x07071b1b
 80110f0:	0c530707 	.word	0x0c530707
 80110f4:	494e0c0c 	.word	0x494e0c0c
 80110f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110fc:	3104      	adds	r1, #4
 80110fe:	f7ff bfc3 	b.w	8011088 <uxr_serialize_DATAWRITER_Representation>
 8011102:	7909      	ldrb	r1, [r1, #4]
 8011104:	f7fc fa4a 	bl	800d59c <ucdr_serialize_uint8_t>
 8011108:	b1e8      	cbz	r0, 8011146 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801110a:	7923      	ldrb	r3, [r4, #4]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d001      	beq.n	8011114 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011110:	2b02      	cmp	r3, #2
 8011112:	d13d      	bne.n	8011190 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011114:	68a1      	ldr	r1, [r4, #8]
 8011116:	4628      	mov	r0, r5
 8011118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801111c:	f004 bfa2 	b.w	8016064 <ucdr_serialize_string>
 8011120:	7909      	ldrb	r1, [r1, #4]
 8011122:	f7fc fa3b 	bl	800d59c <ucdr_serialize_uint8_t>
 8011126:	4606      	mov	r6, r0
 8011128:	b120      	cbz	r0, 8011134 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801112a:	7923      	ldrb	r3, [r4, #4]
 801112c:	2b02      	cmp	r3, #2
 801112e:	d039      	beq.n	80111a4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011130:	2b03      	cmp	r3, #3
 8011132:	d02f      	beq.n	8011194 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011134:	2202      	movs	r2, #2
 8011136:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801113a:	4628      	mov	r0, r5
 801113c:	f004 fe72 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011140:	4030      	ands	r0, r6
 8011142:	b2c0      	uxtb	r0, r0
 8011144:	bd70      	pop	{r4, r5, r6, pc}
 8011146:	2000      	movs	r0, #0
 8011148:	bd70      	pop	{r4, r5, r6, pc}
 801114a:	7909      	ldrb	r1, [r1, #4]
 801114c:	f7fc fa26 	bl	800d59c <ucdr_serialize_uint8_t>
 8011150:	4606      	mov	r6, r0
 8011152:	b158      	cbz	r0, 801116c <uxr_serialize_ObjectVariant.part.0+0x94>
 8011154:	7923      	ldrb	r3, [r4, #4]
 8011156:	2b02      	cmp	r3, #2
 8011158:	d003      	beq.n	8011162 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801115a:	2b03      	cmp	r3, #3
 801115c:	d028      	beq.n	80111b0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801115e:	2b01      	cmp	r3, #1
 8011160:	d104      	bne.n	801116c <uxr_serialize_ObjectVariant.part.0+0x94>
 8011162:	68a1      	ldr	r1, [r4, #8]
 8011164:	4628      	mov	r0, r5
 8011166:	f004 ff7d 	bl	8016064 <ucdr_serialize_string>
 801116a:	4606      	mov	r6, r0
 801116c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011170:	4628      	mov	r0, r5
 8011172:	f7fc ff4f 	bl	800e014 <ucdr_serialize_int16_t>
 8011176:	4030      	ands	r0, r6
 8011178:	b2c0      	uxtb	r0, r0
 801117a:	bd70      	pop	{r4, r5, r6, pc}
 801117c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011180:	3104      	adds	r1, #4
 8011182:	f7ff be7b 	b.w	8010e7c <uxr_serialize_CLIENT_Representation>
 8011186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801118a:	3104      	adds	r1, #4
 801118c:	f7ff bf32 	b.w	8010ff4 <uxr_serialize_AGENT_Representation>
 8011190:	2001      	movs	r0, #1
 8011192:	bd70      	pop	{r4, r5, r6, pc}
 8011194:	68a2      	ldr	r2, [r4, #8]
 8011196:	f104 010c 	add.w	r1, r4, #12
 801119a:	4628      	mov	r0, r5
 801119c:	f004 ff36 	bl	801600c <ucdr_serialize_sequence_uint8_t>
 80111a0:	4606      	mov	r6, r0
 80111a2:	e7c7      	b.n	8011134 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80111a4:	68a1      	ldr	r1, [r4, #8]
 80111a6:	4628      	mov	r0, r5
 80111a8:	f004 ff5c 	bl	8016064 <ucdr_serialize_string>
 80111ac:	4606      	mov	r6, r0
 80111ae:	e7c1      	b.n	8011134 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80111b0:	68a2      	ldr	r2, [r4, #8]
 80111b2:	f104 010c 	add.w	r1, r4, #12
 80111b6:	4628      	mov	r0, r5
 80111b8:	f004 ff28 	bl	801600c <ucdr_serialize_sequence_uint8_t>
 80111bc:	4606      	mov	r6, r0
 80111be:	e7d5      	b.n	801116c <uxr_serialize_ObjectVariant.part.0+0x94>

080111c0 <uxr_deserialize_DATAWRITER_Representation>:
 80111c0:	b570      	push	{r4, r5, r6, lr}
 80111c2:	4606      	mov	r6, r0
 80111c4:	460d      	mov	r5, r1
 80111c6:	f7fc f9ff 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 80111ca:	4604      	mov	r4, r0
 80111cc:	b130      	cbz	r0, 80111dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80111ce:	782b      	ldrb	r3, [r5, #0]
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d00c      	beq.n	80111ee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80111d4:	2b03      	cmp	r3, #3
 80111d6:	d012      	beq.n	80111fe <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d008      	beq.n	80111ee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80111dc:	2202      	movs	r2, #2
 80111de:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80111e2:	4630      	mov	r0, r6
 80111e4:	f004 fe82 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80111e8:	4020      	ands	r0, r4
 80111ea:	b2c0      	uxtb	r0, r0
 80111ec:	bd70      	pop	{r4, r5, r6, pc}
 80111ee:	6869      	ldr	r1, [r5, #4]
 80111f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111f4:	4630      	mov	r0, r6
 80111f6:	f004 ff45 	bl	8016084 <ucdr_deserialize_string>
 80111fa:	4604      	mov	r4, r0
 80111fc:	e7ee      	b.n	80111dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80111fe:	1d2b      	adds	r3, r5, #4
 8011200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011204:	f105 0108 	add.w	r1, r5, #8
 8011208:	4630      	mov	r0, r6
 801120a:	f004 ff11 	bl	8016030 <ucdr_deserialize_sequence_uint8_t>
 801120e:	4604      	mov	r4, r0
 8011210:	e7e4      	b.n	80111dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011212:	bf00      	nop

08011214 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	460d      	mov	r5, r1
 8011218:	7809      	ldrb	r1, [r1, #0]
 801121a:	4606      	mov	r6, r0
 801121c:	f7fc f990 	bl	800d540 <ucdr_serialize_bool>
 8011220:	782b      	ldrb	r3, [r5, #0]
 8011222:	4604      	mov	r4, r0
 8011224:	b94b      	cbnz	r3, 801123a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011226:	7a29      	ldrb	r1, [r5, #8]
 8011228:	4630      	mov	r0, r6
 801122a:	f7fc f989 	bl	800d540 <ucdr_serialize_bool>
 801122e:	7a2b      	ldrb	r3, [r5, #8]
 8011230:	4004      	ands	r4, r0
 8011232:	b2e4      	uxtb	r4, r4
 8011234:	b943      	cbnz	r3, 8011248 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011236:	4620      	mov	r0, r4
 8011238:	bd70      	pop	{r4, r5, r6, pc}
 801123a:	6869      	ldr	r1, [r5, #4]
 801123c:	4630      	mov	r0, r6
 801123e:	f004 ff11 	bl	8016064 <ucdr_serialize_string>
 8011242:	4004      	ands	r4, r0
 8011244:	b2e4      	uxtb	r4, r4
 8011246:	e7ee      	b.n	8011226 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011248:	68e9      	ldr	r1, [r5, #12]
 801124a:	4630      	mov	r0, r6
 801124c:	f004 ff0a 	bl	8016064 <ucdr_serialize_string>
 8011250:	4004      	ands	r4, r0
 8011252:	4620      	mov	r0, r4
 8011254:	bd70      	pop	{r4, r5, r6, pc}
 8011256:	bf00      	nop

08011258 <uxr_serialize_OBJK_Topic_Binary>:
 8011258:	b570      	push	{r4, r5, r6, lr}
 801125a:	460d      	mov	r5, r1
 801125c:	6809      	ldr	r1, [r1, #0]
 801125e:	4606      	mov	r6, r0
 8011260:	f004 ff00 	bl	8016064 <ucdr_serialize_string>
 8011264:	7929      	ldrb	r1, [r5, #4]
 8011266:	4604      	mov	r4, r0
 8011268:	4630      	mov	r0, r6
 801126a:	f7fc f969 	bl	800d540 <ucdr_serialize_bool>
 801126e:	792b      	ldrb	r3, [r5, #4]
 8011270:	4004      	ands	r4, r0
 8011272:	b2e4      	uxtb	r4, r4
 8011274:	b943      	cbnz	r3, 8011288 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011276:	7b29      	ldrb	r1, [r5, #12]
 8011278:	4630      	mov	r0, r6
 801127a:	f7fc f961 	bl	800d540 <ucdr_serialize_bool>
 801127e:	7b2b      	ldrb	r3, [r5, #12]
 8011280:	4004      	ands	r4, r0
 8011282:	b93b      	cbnz	r3, 8011294 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011284:	4620      	mov	r0, r4
 8011286:	bd70      	pop	{r4, r5, r6, pc}
 8011288:	68a9      	ldr	r1, [r5, #8]
 801128a:	4630      	mov	r0, r6
 801128c:	f004 feea 	bl	8016064 <ucdr_serialize_string>
 8011290:	4004      	ands	r4, r0
 8011292:	e7f0      	b.n	8011276 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011294:	6929      	ldr	r1, [r5, #16]
 8011296:	4630      	mov	r0, r6
 8011298:	f004 fee4 	bl	8016064 <ucdr_serialize_string>
 801129c:	4004      	ands	r4, r0
 801129e:	b2e4      	uxtb	r4, r4
 80112a0:	4620      	mov	r0, r4
 80112a2:	bd70      	pop	{r4, r5, r6, pc}

080112a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80112a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a8:	460c      	mov	r4, r1
 80112aa:	7809      	ldrb	r1, [r1, #0]
 80112ac:	4606      	mov	r6, r0
 80112ae:	f7fc f947 	bl	800d540 <ucdr_serialize_bool>
 80112b2:	7823      	ldrb	r3, [r4, #0]
 80112b4:	4605      	mov	r5, r0
 80112b6:	b96b      	cbnz	r3, 80112d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80112b8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80112bc:	4630      	mov	r0, r6
 80112be:	f7fc f93f 	bl	800d540 <ucdr_serialize_bool>
 80112c2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80112c6:	4005      	ands	r5, r0
 80112c8:	b2ed      	uxtb	r5, r5
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d169      	bne.n	80113a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80112ce:	4628      	mov	r0, r5
 80112d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d4:	6861      	ldr	r1, [r4, #4]
 80112d6:	4630      	mov	r0, r6
 80112d8:	f7fc fb76 	bl	800d9c8 <ucdr_serialize_uint32_t>
 80112dc:	6863      	ldr	r3, [r4, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d06b      	beq.n	80113ba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80112e2:	2800      	cmp	r0, #0
 80112e4:	d067      	beq.n	80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112e6:	68a1      	ldr	r1, [r4, #8]
 80112e8:	4630      	mov	r0, r6
 80112ea:	f004 febb 	bl	8016064 <ucdr_serialize_string>
 80112ee:	6863      	ldr	r3, [r4, #4]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d953      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112f4:	2800      	cmp	r0, #0
 80112f6:	d05e      	beq.n	80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112f8:	68e1      	ldr	r1, [r4, #12]
 80112fa:	4630      	mov	r0, r6
 80112fc:	f004 feb2 	bl	8016064 <ucdr_serialize_string>
 8011300:	6863      	ldr	r3, [r4, #4]
 8011302:	2b02      	cmp	r3, #2
 8011304:	d94a      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011306:	2800      	cmp	r0, #0
 8011308:	d055      	beq.n	80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801130a:	6921      	ldr	r1, [r4, #16]
 801130c:	4630      	mov	r0, r6
 801130e:	f004 fea9 	bl	8016064 <ucdr_serialize_string>
 8011312:	6863      	ldr	r3, [r4, #4]
 8011314:	2b03      	cmp	r3, #3
 8011316:	d941      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011318:	2800      	cmp	r0, #0
 801131a:	d04c      	beq.n	80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801131c:	6961      	ldr	r1, [r4, #20]
 801131e:	4630      	mov	r0, r6
 8011320:	f004 fea0 	bl	8016064 <ucdr_serialize_string>
 8011324:	6863      	ldr	r3, [r4, #4]
 8011326:	2b04      	cmp	r3, #4
 8011328:	d938      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801132a:	2800      	cmp	r0, #0
 801132c:	d043      	beq.n	80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801132e:	69a1      	ldr	r1, [r4, #24]
 8011330:	4630      	mov	r0, r6
 8011332:	f004 fe97 	bl	8016064 <ucdr_serialize_string>
 8011336:	6863      	ldr	r3, [r4, #4]
 8011338:	2b05      	cmp	r3, #5
 801133a:	d92f      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801133c:	2800      	cmp	r0, #0
 801133e:	d03a      	beq.n	80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011340:	69e1      	ldr	r1, [r4, #28]
 8011342:	4630      	mov	r0, r6
 8011344:	f004 fe8e 	bl	8016064 <ucdr_serialize_string>
 8011348:	6863      	ldr	r3, [r4, #4]
 801134a:	2b06      	cmp	r3, #6
 801134c:	d926      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801134e:	b390      	cbz	r0, 80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011350:	6a21      	ldr	r1, [r4, #32]
 8011352:	4630      	mov	r0, r6
 8011354:	f004 fe86 	bl	8016064 <ucdr_serialize_string>
 8011358:	6863      	ldr	r3, [r4, #4]
 801135a:	2b07      	cmp	r3, #7
 801135c:	d91e      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801135e:	b350      	cbz	r0, 80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011360:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011362:	4630      	mov	r0, r6
 8011364:	f004 fe7e 	bl	8016064 <ucdr_serialize_string>
 8011368:	6863      	ldr	r3, [r4, #4]
 801136a:	2b08      	cmp	r3, #8
 801136c:	d916      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801136e:	b310      	cbz	r0, 80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011370:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011372:	4630      	mov	r0, r6
 8011374:	f004 fe76 	bl	8016064 <ucdr_serialize_string>
 8011378:	6863      	ldr	r3, [r4, #4]
 801137a:	2b09      	cmp	r3, #9
 801137c:	d90e      	bls.n	801139c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801137e:	b1d0      	cbz	r0, 80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011380:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011384:	2709      	movs	r7, #9
 8011386:	e000      	b.n	801138a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011388:	b1a8      	cbz	r0, 80113b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801138a:	f858 1b04 	ldr.w	r1, [r8], #4
 801138e:	4630      	mov	r0, r6
 8011390:	f004 fe68 	bl	8016064 <ucdr_serialize_string>
 8011394:	6862      	ldr	r2, [r4, #4]
 8011396:	3701      	adds	r7, #1
 8011398:	4297      	cmp	r7, r2
 801139a:	d3f5      	bcc.n	8011388 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801139c:	4005      	ands	r5, r0
 801139e:	b2ed      	uxtb	r5, r5
 80113a0:	e78a      	b.n	80112b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80113a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80113a4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80113a8:	4630      	mov	r0, r6
 80113aa:	f004 fe2f 	bl	801600c <ucdr_serialize_sequence_uint8_t>
 80113ae:	4005      	ands	r5, r0
 80113b0:	4628      	mov	r0, r5
 80113b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113b6:	2500      	movs	r5, #0
 80113b8:	e77e      	b.n	80112b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80113ba:	4028      	ands	r0, r5
 80113bc:	b2c5      	uxtb	r5, r0
 80113be:	e77b      	b.n	80112b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080113c0 <uxr_serialize_OBJK_Publisher_Binary>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	460d      	mov	r5, r1
 80113c4:	7809      	ldrb	r1, [r1, #0]
 80113c6:	4606      	mov	r6, r0
 80113c8:	f7fc f8ba 	bl	800d540 <ucdr_serialize_bool>
 80113cc:	782b      	ldrb	r3, [r5, #0]
 80113ce:	4604      	mov	r4, r0
 80113d0:	b94b      	cbnz	r3, 80113e6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80113d2:	7a29      	ldrb	r1, [r5, #8]
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7fc f8b3 	bl	800d540 <ucdr_serialize_bool>
 80113da:	7a2b      	ldrb	r3, [r5, #8]
 80113dc:	4004      	ands	r4, r0
 80113de:	b2e4      	uxtb	r4, r4
 80113e0:	b943      	cbnz	r3, 80113f4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80113e2:	4620      	mov	r0, r4
 80113e4:	bd70      	pop	{r4, r5, r6, pc}
 80113e6:	6869      	ldr	r1, [r5, #4]
 80113e8:	4630      	mov	r0, r6
 80113ea:	f004 fe3b 	bl	8016064 <ucdr_serialize_string>
 80113ee:	4004      	ands	r4, r0
 80113f0:	b2e4      	uxtb	r4, r4
 80113f2:	e7ee      	b.n	80113d2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80113f4:	f105 010c 	add.w	r1, r5, #12
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7ff ff53 	bl	80112a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80113fe:	4004      	ands	r4, r0
 8011400:	4620      	mov	r0, r4
 8011402:	bd70      	pop	{r4, r5, r6, pc}

08011404 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011404:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011408:	4688      	mov	r8, r1
 801140a:	8809      	ldrh	r1, [r1, #0]
 801140c:	4681      	mov	r9, r0
 801140e:	f7fc f8f1 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8011412:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011416:	4606      	mov	r6, r0
 8011418:	4648      	mov	r0, r9
 801141a:	f7fc f891 	bl	800d540 <ucdr_serialize_bool>
 801141e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011422:	4006      	ands	r6, r0
 8011424:	b2f5      	uxtb	r5, r6
 8011426:	b9eb      	cbnz	r3, 8011464 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011428:	f898 1006 	ldrb.w	r1, [r8, #6]
 801142c:	4648      	mov	r0, r9
 801142e:	f7fc f887 	bl	800d540 <ucdr_serialize_bool>
 8011432:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011436:	4005      	ands	r5, r0
 8011438:	bb7b      	cbnz	r3, 801149a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801143a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801143e:	4648      	mov	r0, r9
 8011440:	f7fc f87e 	bl	800d540 <ucdr_serialize_bool>
 8011444:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011448:	4005      	ands	r5, r0
 801144a:	b9f3      	cbnz	r3, 801148a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801144c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011450:	4648      	mov	r0, r9
 8011452:	f7fc f875 	bl	800d540 <ucdr_serialize_bool>
 8011456:	f898 3014 	ldrb.w	r3, [r8, #20]
 801145a:	4005      	ands	r5, r0
 801145c:	b94b      	cbnz	r3, 8011472 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801145e:	4628      	mov	r0, r5
 8011460:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011464:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011468:	4648      	mov	r0, r9
 801146a:	f7fc f8c3 	bl	800d5f4 <ucdr_serialize_uint16_t>
 801146e:	4005      	ands	r5, r0
 8011470:	e7da      	b.n	8011428 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011472:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011476:	f108 011c 	add.w	r1, r8, #28
 801147a:	4648      	mov	r0, r9
 801147c:	f004 fdc6 	bl	801600c <ucdr_serialize_sequence_uint8_t>
 8011480:	4028      	ands	r0, r5
 8011482:	b2c5      	uxtb	r5, r0
 8011484:	4628      	mov	r0, r5
 8011486:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801148a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801148e:	4648      	mov	r0, r9
 8011490:	f7fc fa9a 	bl	800d9c8 <ucdr_serialize_uint32_t>
 8011494:	4028      	ands	r0, r5
 8011496:	b2c5      	uxtb	r5, r0
 8011498:	e7d8      	b.n	801144c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801149a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801149e:	4648      	mov	r0, r9
 80114a0:	f7fc fa92 	bl	800d9c8 <ucdr_serialize_uint32_t>
 80114a4:	4028      	ands	r0, r5
 80114a6:	b2c5      	uxtb	r5, r0
 80114a8:	e7c7      	b.n	801143a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80114aa:	bf00      	nop

080114ac <uxr_serialize_OBJK_DataWriter_Binary>:
 80114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ae:	2202      	movs	r2, #2
 80114b0:	460d      	mov	r5, r1
 80114b2:	4606      	mov	r6, r0
 80114b4:	f004 fcb6 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 80114b8:	78a9      	ldrb	r1, [r5, #2]
 80114ba:	4604      	mov	r4, r0
 80114bc:	4630      	mov	r0, r6
 80114be:	f7fc f83f 	bl	800d540 <ucdr_serialize_bool>
 80114c2:	78ab      	ldrb	r3, [r5, #2]
 80114c4:	4004      	ands	r4, r0
 80114c6:	b2e4      	uxtb	r4, r4
 80114c8:	b90b      	cbnz	r3, 80114ce <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80114ca:	4620      	mov	r0, r4
 80114cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ce:	f105 0108 	add.w	r1, r5, #8
 80114d2:	4630      	mov	r0, r6
 80114d4:	f7ff ff96 	bl	8011404 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80114d8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80114dc:	4607      	mov	r7, r0
 80114de:	4630      	mov	r0, r6
 80114e0:	f7fc f82e 	bl	800d540 <ucdr_serialize_bool>
 80114e4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80114e8:	4038      	ands	r0, r7
 80114ea:	b2c7      	uxtb	r7, r0
 80114ec:	b913      	cbnz	r3, 80114f4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80114ee:	403c      	ands	r4, r7
 80114f0:	4620      	mov	r0, r4
 80114f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80114f8:	4630      	mov	r0, r6
 80114fa:	f7fc fcbb 	bl	800de74 <ucdr_serialize_uint64_t>
 80114fe:	4007      	ands	r7, r0
 8011500:	e7f5      	b.n	80114ee <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011502:	bf00      	nop

08011504 <uxr_deserialize_ObjectVariant>:
 8011504:	b570      	push	{r4, r5, r6, lr}
 8011506:	4605      	mov	r5, r0
 8011508:	460e      	mov	r6, r1
 801150a:	f7fc f85d 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 801150e:	b168      	cbz	r0, 801152c <uxr_deserialize_ObjectVariant+0x28>
 8011510:	7833      	ldrb	r3, [r6, #0]
 8011512:	3b01      	subs	r3, #1
 8011514:	4604      	mov	r4, r0
 8011516:	2b0d      	cmp	r3, #13
 8011518:	d809      	bhi.n	801152e <uxr_deserialize_ObjectVariant+0x2a>
 801151a:	e8df f003 	tbb	[pc, r3]
 801151e:	0a41      	.short	0x0a41
 8011520:	0a0a2323 	.word	0x0a0a2323
 8011524:	10080a0a 	.word	0x10080a0a
 8011528:	565c1010 	.word	0x565c1010
 801152c:	2400      	movs	r4, #0
 801152e:	4620      	mov	r0, r4
 8011530:	bd70      	pop	{r4, r5, r6, pc}
 8011532:	1d31      	adds	r1, r6, #4
 8011534:	4628      	mov	r0, r5
 8011536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801153a:	f7ff be41 	b.w	80111c0 <uxr_deserialize_DATAWRITER_Representation>
 801153e:	1d31      	adds	r1, r6, #4
 8011540:	4628      	mov	r0, r5
 8011542:	f7fc f841 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8011546:	2800      	cmp	r0, #0
 8011548:	d0f0      	beq.n	801152c <uxr_deserialize_ObjectVariant+0x28>
 801154a:	7933      	ldrb	r3, [r6, #4]
 801154c:	2b01      	cmp	r3, #1
 801154e:	d001      	beq.n	8011554 <uxr_deserialize_ObjectVariant+0x50>
 8011550:	2b02      	cmp	r3, #2
 8011552:	d1ec      	bne.n	801152e <uxr_deserialize_ObjectVariant+0x2a>
 8011554:	68b1      	ldr	r1, [r6, #8]
 8011556:	4628      	mov	r0, r5
 8011558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801155c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011560:	f004 bd90 	b.w	8016084 <ucdr_deserialize_string>
 8011564:	1d31      	adds	r1, r6, #4
 8011566:	4628      	mov	r0, r5
 8011568:	f7fc f82e 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 801156c:	4604      	mov	r4, r0
 801156e:	b170      	cbz	r0, 801158e <uxr_deserialize_ObjectVariant+0x8a>
 8011570:	7933      	ldrb	r3, [r6, #4]
 8011572:	2b02      	cmp	r3, #2
 8011574:	d04c      	beq.n	8011610 <uxr_deserialize_ObjectVariant+0x10c>
 8011576:	2b03      	cmp	r3, #3
 8011578:	d109      	bne.n	801158e <uxr_deserialize_ObjectVariant+0x8a>
 801157a:	f106 0308 	add.w	r3, r6, #8
 801157e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011582:	f106 010c 	add.w	r1, r6, #12
 8011586:	4628      	mov	r0, r5
 8011588:	f004 fd52 	bl	8016030 <ucdr_deserialize_sequence_uint8_t>
 801158c:	4604      	mov	r4, r0
 801158e:	2202      	movs	r2, #2
 8011590:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011594:	4628      	mov	r0, r5
 8011596:	f004 fca9 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 801159a:	4020      	ands	r0, r4
 801159c:	b2c4      	uxtb	r4, r0
 801159e:	e7c6      	b.n	801152e <uxr_deserialize_ObjectVariant+0x2a>
 80115a0:	1d31      	adds	r1, r6, #4
 80115a2:	4628      	mov	r0, r5
 80115a4:	f7fc f810 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 80115a8:	4604      	mov	r4, r0
 80115aa:	b130      	cbz	r0, 80115ba <uxr_deserialize_ObjectVariant+0xb6>
 80115ac:	7933      	ldrb	r3, [r6, #4]
 80115ae:	2b02      	cmp	r3, #2
 80115b0:	d036      	beq.n	8011620 <uxr_deserialize_ObjectVariant+0x11c>
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	d03c      	beq.n	8011630 <uxr_deserialize_ObjectVariant+0x12c>
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d032      	beq.n	8011620 <uxr_deserialize_ObjectVariant+0x11c>
 80115ba:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80115be:	4628      	mov	r0, r5
 80115c0:	f7fc fda8 	bl	800e114 <ucdr_deserialize_int16_t>
 80115c4:	4020      	ands	r0, r4
 80115c6:	b2c4      	uxtb	r4, r0
 80115c8:	e7b1      	b.n	801152e <uxr_deserialize_ObjectVariant+0x2a>
 80115ca:	1d31      	adds	r1, r6, #4
 80115cc:	4628      	mov	r0, r5
 80115ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115d2:	f7ff bcab 	b.w	8010f2c <uxr_deserialize_CLIENT_Representation>
 80115d6:	2204      	movs	r2, #4
 80115d8:	18b1      	adds	r1, r6, r2
 80115da:	4628      	mov	r0, r5
 80115dc:	f004 fc86 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80115e0:	2202      	movs	r2, #2
 80115e2:	f106 0108 	add.w	r1, r6, #8
 80115e6:	4604      	mov	r4, r0
 80115e8:	4628      	mov	r0, r5
 80115ea:	f004 fc7f 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80115ee:	2202      	movs	r2, #2
 80115f0:	4004      	ands	r4, r0
 80115f2:	f106 010a 	add.w	r1, r6, #10
 80115f6:	4628      	mov	r0, r5
 80115f8:	f004 fc78 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80115fc:	b2e4      	uxtb	r4, r4
 80115fe:	4603      	mov	r3, r0
 8011600:	f106 010c 	add.w	r1, r6, #12
 8011604:	4628      	mov	r0, r5
 8011606:	401c      	ands	r4, r3
 8011608:	f7fb ffb0 	bl	800d56c <ucdr_deserialize_bool>
 801160c:	4004      	ands	r4, r0
 801160e:	e78e      	b.n	801152e <uxr_deserialize_ObjectVariant+0x2a>
 8011610:	68b1      	ldr	r1, [r6, #8]
 8011612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011616:	4628      	mov	r0, r5
 8011618:	f004 fd34 	bl	8016084 <ucdr_deserialize_string>
 801161c:	4604      	mov	r4, r0
 801161e:	e7b6      	b.n	801158e <uxr_deserialize_ObjectVariant+0x8a>
 8011620:	68b1      	ldr	r1, [r6, #8]
 8011622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011626:	4628      	mov	r0, r5
 8011628:	f004 fd2c 	bl	8016084 <ucdr_deserialize_string>
 801162c:	4604      	mov	r4, r0
 801162e:	e7c4      	b.n	80115ba <uxr_deserialize_ObjectVariant+0xb6>
 8011630:	f106 0308 	add.w	r3, r6, #8
 8011634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011638:	f106 010c 	add.w	r1, r6, #12
 801163c:	4628      	mov	r0, r5
 801163e:	f004 fcf7 	bl	8016030 <ucdr_deserialize_sequence_uint8_t>
 8011642:	4604      	mov	r4, r0
 8011644:	e7b9      	b.n	80115ba <uxr_deserialize_ObjectVariant+0xb6>
 8011646:	bf00      	nop

08011648 <uxr_deserialize_BaseObjectRequest>:
 8011648:	b570      	push	{r4, r5, r6, lr}
 801164a:	2202      	movs	r2, #2
 801164c:	4605      	mov	r5, r0
 801164e:	460e      	mov	r6, r1
 8011650:	f004 fc4c 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011654:	2202      	movs	r2, #2
 8011656:	4604      	mov	r4, r0
 8011658:	18b1      	adds	r1, r6, r2
 801165a:	4628      	mov	r0, r5
 801165c:	f004 fc46 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011660:	4020      	ands	r0, r4
 8011662:	b2c0      	uxtb	r0, r0
 8011664:	bd70      	pop	{r4, r5, r6, pc}
 8011666:	bf00      	nop

08011668 <uxr_serialize_ActivityInfoVariant>:
 8011668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	460d      	mov	r5, r1
 801166e:	7809      	ldrb	r1, [r1, #0]
 8011670:	4607      	mov	r7, r0
 8011672:	f7fb ff93 	bl	800d59c <ucdr_serialize_uint8_t>
 8011676:	4681      	mov	r9, r0
 8011678:	b138      	cbz	r0, 801168a <uxr_serialize_ActivityInfoVariant+0x22>
 801167a:	782b      	ldrb	r3, [r5, #0]
 801167c:	2b06      	cmp	r3, #6
 801167e:	f000 8082 	beq.w	8011786 <uxr_serialize_ActivityInfoVariant+0x11e>
 8011682:	2b0d      	cmp	r3, #13
 8011684:	d016      	beq.n	80116b4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8011686:	2b05      	cmp	r3, #5
 8011688:	d002      	beq.n	8011690 <uxr_serialize_ActivityInfoVariant+0x28>
 801168a:	4648      	mov	r0, r9
 801168c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011690:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011694:	4638      	mov	r0, r7
 8011696:	f7fc fcbd 	bl	800e014 <ucdr_serialize_int16_t>
 801169a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801169e:	4681      	mov	r9, r0
 80116a0:	4638      	mov	r0, r7
 80116a2:	f7fc fbe7 	bl	800de74 <ucdr_serialize_uint64_t>
 80116a6:	ea09 0000 	and.w	r0, r9, r0
 80116aa:	fa5f f980 	uxtb.w	r9, r0
 80116ae:	4648      	mov	r0, r9
 80116b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80116b8:	4638      	mov	r0, r7
 80116ba:	f7fc fcab 	bl	800e014 <ucdr_serialize_int16_t>
 80116be:	68e9      	ldr	r1, [r5, #12]
 80116c0:	4681      	mov	r9, r0
 80116c2:	4638      	mov	r0, r7
 80116c4:	f7fc f980 	bl	800d9c8 <ucdr_serialize_uint32_t>
 80116c8:	68eb      	ldr	r3, [r5, #12]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d0eb      	beq.n	80116a6 <uxr_serialize_ActivityInfoVariant+0x3e>
 80116ce:	b320      	cbz	r0, 801171a <uxr_serialize_ActivityInfoVariant+0xb2>
 80116d0:	f105 080c 	add.w	r8, r5, #12
 80116d4:	2600      	movs	r6, #0
 80116d6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80116da:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80116de:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80116e2:	4638      	mov	r0, r7
 80116e4:	f7fb ff5a 	bl	800d59c <ucdr_serialize_uint8_t>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	d053      	beq.n	8011794 <uxr_serialize_ActivityInfoVariant+0x12c>
 80116ec:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80116f0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80116f4:	0074      	lsls	r4, r6, #1
 80116f6:	00c9      	lsls	r1, r1, #3
 80116f8:	2b03      	cmp	r3, #3
 80116fa:	d854      	bhi.n	80117a6 <uxr_serialize_ActivityInfoVariant+0x13e>
 80116fc:	e8df f003 	tbb	[pc, r3]
 8011700:	02102132 	.word	0x02102132
 8011704:	4441      	add	r1, r8
 8011706:	4638      	mov	r0, r7
 8011708:	6889      	ldr	r1, [r1, #8]
 801170a:	f004 fcab 	bl	8016064 <ucdr_serialize_string>
 801170e:	68ea      	ldr	r2, [r5, #12]
 8011710:	3601      	adds	r6, #1
 8011712:	4296      	cmp	r6, r2
 8011714:	d242      	bcs.n	801179c <uxr_serialize_ActivityInfoVariant+0x134>
 8011716:	2800      	cmp	r0, #0
 8011718:	d1dd      	bne.n	80116d6 <uxr_serialize_ActivityInfoVariant+0x6e>
 801171a:	f04f 0900 	mov.w	r9, #0
 801171e:	e7b4      	b.n	801168a <uxr_serialize_ActivityInfoVariant+0x22>
 8011720:	3108      	adds	r1, #8
 8011722:	4441      	add	r1, r8
 8011724:	2210      	movs	r2, #16
 8011726:	4638      	mov	r0, r7
 8011728:	f004 fb7c 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 801172c:	4434      	add	r4, r6
 801172e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011732:	4604      	mov	r4, r0
 8011734:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011736:	4638      	mov	r0, r7
 8011738:	f7fc f946 	bl	800d9c8 <ucdr_serialize_uint32_t>
 801173c:	4020      	ands	r0, r4
 801173e:	b2c0      	uxtb	r0, r0
 8011740:	e7e5      	b.n	801170e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011742:	3108      	adds	r1, #8
 8011744:	4441      	add	r1, r8
 8011746:	2204      	movs	r2, #4
 8011748:	4638      	mov	r0, r7
 801174a:	f004 fb6b 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 801174e:	4434      	add	r4, r6
 8011750:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011754:	4604      	mov	r4, r0
 8011756:	8b19      	ldrh	r1, [r3, #24]
 8011758:	4638      	mov	r0, r7
 801175a:	f7fb ff4b 	bl	800d5f4 <ucdr_serialize_uint16_t>
 801175e:	4020      	ands	r0, r4
 8011760:	b2c0      	uxtb	r0, r0
 8011762:	e7d4      	b.n	801170e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011764:	3108      	adds	r1, #8
 8011766:	4441      	add	r1, r8
 8011768:	2202      	movs	r2, #2
 801176a:	4638      	mov	r0, r7
 801176c:	f004 fb5a 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011770:	4434      	add	r4, r6
 8011772:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011776:	4604      	mov	r4, r0
 8011778:	7d99      	ldrb	r1, [r3, #22]
 801177a:	4638      	mov	r0, r7
 801177c:	f7fb ff0e 	bl	800d59c <ucdr_serialize_uint8_t>
 8011780:	4020      	ands	r0, r4
 8011782:	b2c0      	uxtb	r0, r0
 8011784:	e7c3      	b.n	801170e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011786:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801178a:	4638      	mov	r0, r7
 801178c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011790:	f7fc bc40 	b.w	800e014 <ucdr_serialize_int16_t>
 8011794:	68ea      	ldr	r2, [r5, #12]
 8011796:	3601      	adds	r6, #1
 8011798:	42b2      	cmp	r2, r6
 801179a:	d8be      	bhi.n	801171a <uxr_serialize_ActivityInfoVariant+0xb2>
 801179c:	ea09 0900 	and.w	r9, r9, r0
 80117a0:	fa5f f989 	uxtb.w	r9, r9
 80117a4:	e771      	b.n	801168a <uxr_serialize_ActivityInfoVariant+0x22>
 80117a6:	68eb      	ldr	r3, [r5, #12]
 80117a8:	3601      	adds	r6, #1
 80117aa:	429e      	cmp	r6, r3
 80117ac:	f10a 0a18 	add.w	sl, sl, #24
 80117b0:	d395      	bcc.n	80116de <uxr_serialize_ActivityInfoVariant+0x76>
 80117b2:	e76a      	b.n	801168a <uxr_serialize_ActivityInfoVariant+0x22>

080117b4 <uxr_deserialize_BaseObjectReply>:
 80117b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b8:	2202      	movs	r2, #2
 80117ba:	4606      	mov	r6, r0
 80117bc:	460f      	mov	r7, r1
 80117be:	f004 fb95 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80117c2:	2202      	movs	r2, #2
 80117c4:	18b9      	adds	r1, r7, r2
 80117c6:	4605      	mov	r5, r0
 80117c8:	4630      	mov	r0, r6
 80117ca:	f004 fb8f 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80117ce:	1d39      	adds	r1, r7, #4
 80117d0:	4680      	mov	r8, r0
 80117d2:	4630      	mov	r0, r6
 80117d4:	f7fb fef8 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 80117d8:	1d79      	adds	r1, r7, #5
 80117da:	4604      	mov	r4, r0
 80117dc:	4630      	mov	r0, r6
 80117de:	f7fb fef3 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 80117e2:	ea05 0508 	and.w	r5, r5, r8
 80117e6:	402c      	ands	r4, r5
 80117e8:	4020      	ands	r0, r4
 80117ea:	b2c0      	uxtb	r0, r0
 80117ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117f0 <uxr_serialize_ReadSpecification>:
 80117f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f4:	460e      	mov	r6, r1
 80117f6:	7809      	ldrb	r1, [r1, #0]
 80117f8:	4607      	mov	r7, r0
 80117fa:	f7fb fecf 	bl	800d59c <ucdr_serialize_uint8_t>
 80117fe:	7871      	ldrb	r1, [r6, #1]
 8011800:	4604      	mov	r4, r0
 8011802:	4638      	mov	r0, r7
 8011804:	f7fb feca 	bl	800d59c <ucdr_serialize_uint8_t>
 8011808:	78b1      	ldrb	r1, [r6, #2]
 801180a:	4004      	ands	r4, r0
 801180c:	4638      	mov	r0, r7
 801180e:	f7fb fe97 	bl	800d540 <ucdr_serialize_bool>
 8011812:	78b3      	ldrb	r3, [r6, #2]
 8011814:	b2e4      	uxtb	r4, r4
 8011816:	4004      	ands	r4, r0
 8011818:	b94b      	cbnz	r3, 801182e <uxr_serialize_ReadSpecification+0x3e>
 801181a:	7a31      	ldrb	r1, [r6, #8]
 801181c:	4638      	mov	r0, r7
 801181e:	f7fb fe8f 	bl	800d540 <ucdr_serialize_bool>
 8011822:	7a33      	ldrb	r3, [r6, #8]
 8011824:	4004      	ands	r4, r0
 8011826:	b943      	cbnz	r3, 801183a <uxr_serialize_ReadSpecification+0x4a>
 8011828:	4620      	mov	r0, r4
 801182a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801182e:	6871      	ldr	r1, [r6, #4]
 8011830:	4638      	mov	r0, r7
 8011832:	f004 fc17 	bl	8016064 <ucdr_serialize_string>
 8011836:	4004      	ands	r4, r0
 8011838:	e7ef      	b.n	801181a <uxr_serialize_ReadSpecification+0x2a>
 801183a:	8971      	ldrh	r1, [r6, #10]
 801183c:	4638      	mov	r0, r7
 801183e:	f7fb fed9 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8011842:	89b1      	ldrh	r1, [r6, #12]
 8011844:	4605      	mov	r5, r0
 8011846:	4638      	mov	r0, r7
 8011848:	f7fb fed4 	bl	800d5f4 <ucdr_serialize_uint16_t>
 801184c:	89f1      	ldrh	r1, [r6, #14]
 801184e:	4005      	ands	r5, r0
 8011850:	4638      	mov	r0, r7
 8011852:	f7fb fecf 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8011856:	8a31      	ldrh	r1, [r6, #16]
 8011858:	4680      	mov	r8, r0
 801185a:	4638      	mov	r0, r7
 801185c:	f7fb feca 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8011860:	b2ed      	uxtb	r5, r5
 8011862:	4025      	ands	r5, r4
 8011864:	ea08 0505 	and.w	r5, r8, r5
 8011868:	ea00 0405 	and.w	r4, r0, r5
 801186c:	4620      	mov	r0, r4
 801186e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011872:	bf00      	nop

08011874 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011874:	f7ff bb02 	b.w	8010e7c <uxr_serialize_CLIENT_Representation>

08011878 <uxr_serialize_CREATE_Payload>:
 8011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187a:	2202      	movs	r2, #2
 801187c:	4607      	mov	r7, r0
 801187e:	460e      	mov	r6, r1
 8011880:	f004 fad0 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011884:	2202      	movs	r2, #2
 8011886:	18b1      	adds	r1, r6, r2
 8011888:	4605      	mov	r5, r0
 801188a:	4638      	mov	r0, r7
 801188c:	f004 faca 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011890:	7931      	ldrb	r1, [r6, #4]
 8011892:	4604      	mov	r4, r0
 8011894:	4638      	mov	r0, r7
 8011896:	f7fb fe81 	bl	800d59c <ucdr_serialize_uint8_t>
 801189a:	b170      	cbz	r0, 80118ba <uxr_serialize_CREATE_Payload+0x42>
 801189c:	7933      	ldrb	r3, [r6, #4]
 801189e:	402c      	ands	r4, r5
 80118a0:	3b01      	subs	r3, #1
 80118a2:	b2e4      	uxtb	r4, r4
 80118a4:	2b0d      	cmp	r3, #13
 80118a6:	d809      	bhi.n	80118bc <uxr_serialize_CREATE_Payload+0x44>
 80118a8:	e8df f003 	tbb	[pc, r3]
 80118ac:	23230a4c 	.word	0x23230a4c
 80118b0:	0a0a0a0a 	.word	0x0a0a0a0a
 80118b4:	12121208 	.word	0x12121208
 80118b8:	3e45      	.short	0x3e45
 80118ba:	2400      	movs	r4, #0
 80118bc:	4620      	mov	r0, r4
 80118be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118c0:	f106 0108 	add.w	r1, r6, #8
 80118c4:	4638      	mov	r0, r7
 80118c6:	f7ff fbdf 	bl	8011088 <uxr_serialize_DATAWRITER_Representation>
 80118ca:	4004      	ands	r4, r0
 80118cc:	4620      	mov	r0, r4
 80118ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118d0:	7a31      	ldrb	r1, [r6, #8]
 80118d2:	4638      	mov	r0, r7
 80118d4:	f7fb fe62 	bl	800d59c <ucdr_serialize_uint8_t>
 80118d8:	2800      	cmp	r0, #0
 80118da:	d0ee      	beq.n	80118ba <uxr_serialize_CREATE_Payload+0x42>
 80118dc:	7a33      	ldrb	r3, [r6, #8]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d001      	beq.n	80118e6 <uxr_serialize_CREATE_Payload+0x6e>
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	d1ea      	bne.n	80118bc <uxr_serialize_CREATE_Payload+0x44>
 80118e6:	68f1      	ldr	r1, [r6, #12]
 80118e8:	4638      	mov	r0, r7
 80118ea:	f004 fbbb 	bl	8016064 <ucdr_serialize_string>
 80118ee:	4004      	ands	r4, r0
 80118f0:	e7e4      	b.n	80118bc <uxr_serialize_CREATE_Payload+0x44>
 80118f2:	7a31      	ldrb	r1, [r6, #8]
 80118f4:	4638      	mov	r0, r7
 80118f6:	f7fb fe51 	bl	800d59c <ucdr_serialize_uint8_t>
 80118fa:	4605      	mov	r5, r0
 80118fc:	b158      	cbz	r0, 8011916 <uxr_serialize_CREATE_Payload+0x9e>
 80118fe:	7a33      	ldrb	r3, [r6, #8]
 8011900:	2b02      	cmp	r3, #2
 8011902:	d034      	beq.n	801196e <uxr_serialize_CREATE_Payload+0xf6>
 8011904:	2b03      	cmp	r3, #3
 8011906:	d106      	bne.n	8011916 <uxr_serialize_CREATE_Payload+0x9e>
 8011908:	68f2      	ldr	r2, [r6, #12]
 801190a:	f106 0110 	add.w	r1, r6, #16
 801190e:	4638      	mov	r0, r7
 8011910:	f004 fb7c 	bl	801600c <ucdr_serialize_sequence_uint8_t>
 8011914:	4605      	mov	r5, r0
 8011916:	2202      	movs	r2, #2
 8011918:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801191c:	4638      	mov	r0, r7
 801191e:	f004 fa81 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011922:	4028      	ands	r0, r5
 8011924:	4004      	ands	r4, r0
 8011926:	e7c9      	b.n	80118bc <uxr_serialize_CREATE_Payload+0x44>
 8011928:	f106 0108 	add.w	r1, r6, #8
 801192c:	4638      	mov	r0, r7
 801192e:	f7ff faa5 	bl	8010e7c <uxr_serialize_CLIENT_Representation>
 8011932:	4004      	ands	r4, r0
 8011934:	e7c2      	b.n	80118bc <uxr_serialize_CREATE_Payload+0x44>
 8011936:	f106 0108 	add.w	r1, r6, #8
 801193a:	4638      	mov	r0, r7
 801193c:	f7ff fb5a 	bl	8010ff4 <uxr_serialize_AGENT_Representation>
 8011940:	4004      	ands	r4, r0
 8011942:	e7bb      	b.n	80118bc <uxr_serialize_CREATE_Payload+0x44>
 8011944:	7a31      	ldrb	r1, [r6, #8]
 8011946:	4638      	mov	r0, r7
 8011948:	f7fb fe28 	bl	800d59c <ucdr_serialize_uint8_t>
 801194c:	4605      	mov	r5, r0
 801194e:	b130      	cbz	r0, 801195e <uxr_serialize_CREATE_Payload+0xe6>
 8011950:	7a33      	ldrb	r3, [r6, #8]
 8011952:	2b02      	cmp	r3, #2
 8011954:	d011      	beq.n	801197a <uxr_serialize_CREATE_Payload+0x102>
 8011956:	2b03      	cmp	r3, #3
 8011958:	d015      	beq.n	8011986 <uxr_serialize_CREATE_Payload+0x10e>
 801195a:	2b01      	cmp	r3, #1
 801195c:	d00d      	beq.n	801197a <uxr_serialize_CREATE_Payload+0x102>
 801195e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011962:	4638      	mov	r0, r7
 8011964:	f7fc fb56 	bl	800e014 <ucdr_serialize_int16_t>
 8011968:	4028      	ands	r0, r5
 801196a:	4004      	ands	r4, r0
 801196c:	e7a6      	b.n	80118bc <uxr_serialize_CREATE_Payload+0x44>
 801196e:	68f1      	ldr	r1, [r6, #12]
 8011970:	4638      	mov	r0, r7
 8011972:	f004 fb77 	bl	8016064 <ucdr_serialize_string>
 8011976:	4605      	mov	r5, r0
 8011978:	e7cd      	b.n	8011916 <uxr_serialize_CREATE_Payload+0x9e>
 801197a:	68f1      	ldr	r1, [r6, #12]
 801197c:	4638      	mov	r0, r7
 801197e:	f004 fb71 	bl	8016064 <ucdr_serialize_string>
 8011982:	4605      	mov	r5, r0
 8011984:	e7eb      	b.n	801195e <uxr_serialize_CREATE_Payload+0xe6>
 8011986:	68f2      	ldr	r2, [r6, #12]
 8011988:	f106 0110 	add.w	r1, r6, #16
 801198c:	4638      	mov	r0, r7
 801198e:	f004 fb3d 	bl	801600c <ucdr_serialize_sequence_uint8_t>
 8011992:	4605      	mov	r5, r0
 8011994:	e7e3      	b.n	801195e <uxr_serialize_CREATE_Payload+0xe6>
 8011996:	bf00      	nop

08011998 <uxr_deserialize_GET_INFO_Payload>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	2202      	movs	r2, #2
 801199c:	4605      	mov	r5, r0
 801199e:	460e      	mov	r6, r1
 80119a0:	f004 faa4 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80119a4:	2202      	movs	r2, #2
 80119a6:	18b1      	adds	r1, r6, r2
 80119a8:	4604      	mov	r4, r0
 80119aa:	4628      	mov	r0, r5
 80119ac:	f004 fa9e 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80119b0:	1d31      	adds	r1, r6, #4
 80119b2:	4004      	ands	r4, r0
 80119b4:	4628      	mov	r0, r5
 80119b6:	f7fc f937 	bl	800dc28 <ucdr_deserialize_uint32_t>
 80119ba:	b2e4      	uxtb	r4, r4
 80119bc:	4020      	ands	r0, r4
 80119be:	bd70      	pop	{r4, r5, r6, pc}

080119c0 <uxr_serialize_DELETE_Payload>:
 80119c0:	b570      	push	{r4, r5, r6, lr}
 80119c2:	2202      	movs	r2, #2
 80119c4:	4605      	mov	r5, r0
 80119c6:	460e      	mov	r6, r1
 80119c8:	f004 fa2c 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 80119cc:	2202      	movs	r2, #2
 80119ce:	4604      	mov	r4, r0
 80119d0:	18b1      	adds	r1, r6, r2
 80119d2:	4628      	mov	r0, r5
 80119d4:	f004 fa26 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 80119d8:	4020      	ands	r0, r4
 80119da:	b2c0      	uxtb	r0, r0
 80119dc:	bd70      	pop	{r4, r5, r6, pc}
 80119de:	bf00      	nop

080119e0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80119e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119e4:	4605      	mov	r5, r0
 80119e6:	460e      	mov	r6, r1
 80119e8:	f7fb fdee 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 80119ec:	1c71      	adds	r1, r6, #1
 80119ee:	4604      	mov	r4, r0
 80119f0:	4628      	mov	r0, r5
 80119f2:	f7fb fde9 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 80119f6:	2204      	movs	r2, #4
 80119f8:	18b1      	adds	r1, r6, r2
 80119fa:	4680      	mov	r8, r0
 80119fc:	4628      	mov	r0, r5
 80119fe:	f004 fa75 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011a02:	f106 0108 	add.w	r1, r6, #8
 8011a06:	4607      	mov	r7, r0
 8011a08:	2202      	movs	r2, #2
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	f004 fa6e 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011a10:	ea04 0308 	and.w	r3, r4, r8
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	ea03 0407 	and.w	r4, r3, r7
 8011a1a:	2202      	movs	r2, #2
 8011a1c:	4607      	mov	r7, r0
 8011a1e:	f106 010a 	add.w	r1, r6, #10
 8011a22:	4628      	mov	r0, r5
 8011a24:	f004 fa62 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011a28:	f106 010c 	add.w	r1, r6, #12
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	4628      	mov	r0, r5
 8011a30:	461d      	mov	r5, r3
 8011a32:	f7fb fd9b 	bl	800d56c <ucdr_deserialize_bool>
 8011a36:	403c      	ands	r4, r7
 8011a38:	4025      	ands	r5, r4
 8011a3a:	4028      	ands	r0, r5
 8011a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a40 <uxr_deserialize_STATUS_Payload>:
 8011a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a44:	2202      	movs	r2, #2
 8011a46:	4606      	mov	r6, r0
 8011a48:	460f      	mov	r7, r1
 8011a4a:	f004 fa4f 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011a4e:	2202      	movs	r2, #2
 8011a50:	18b9      	adds	r1, r7, r2
 8011a52:	4605      	mov	r5, r0
 8011a54:	4630      	mov	r0, r6
 8011a56:	f004 fa49 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011a5a:	1d39      	adds	r1, r7, #4
 8011a5c:	4680      	mov	r8, r0
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f7fb fdb2 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8011a64:	1d79      	adds	r1, r7, #5
 8011a66:	4604      	mov	r4, r0
 8011a68:	4630      	mov	r0, r6
 8011a6a:	f7fb fdad 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8011a6e:	ea05 0508 	and.w	r5, r5, r8
 8011a72:	402c      	ands	r4, r5
 8011a74:	4020      	ands	r0, r4
 8011a76:	b2c0      	uxtb	r0, r0
 8011a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a7c <uxr_serialize_INFO_Payload>:
 8011a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a80:	2202      	movs	r2, #2
 8011a82:	460c      	mov	r4, r1
 8011a84:	4605      	mov	r5, r0
 8011a86:	f004 f9cd 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011a8a:	2202      	movs	r2, #2
 8011a8c:	18a1      	adds	r1, r4, r2
 8011a8e:	4680      	mov	r8, r0
 8011a90:	4628      	mov	r0, r5
 8011a92:	f004 f9c7 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011a96:	7921      	ldrb	r1, [r4, #4]
 8011a98:	4607      	mov	r7, r0
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f7fb fd7e 	bl	800d59c <ucdr_serialize_uint8_t>
 8011aa0:	7961      	ldrb	r1, [r4, #5]
 8011aa2:	4606      	mov	r6, r0
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f7fb fd79 	bl	800d59c <ucdr_serialize_uint8_t>
 8011aaa:	ea08 0807 	and.w	r8, r8, r7
 8011aae:	ea06 0608 	and.w	r6, r6, r8
 8011ab2:	4006      	ands	r6, r0
 8011ab4:	7a21      	ldrb	r1, [r4, #8]
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	f7fb fd42 	bl	800d540 <ucdr_serialize_bool>
 8011abc:	7a23      	ldrb	r3, [r4, #8]
 8011abe:	b2f7      	uxtb	r7, r6
 8011ac0:	4606      	mov	r6, r0
 8011ac2:	b96b      	cbnz	r3, 8011ae0 <uxr_serialize_INFO_Payload+0x64>
 8011ac4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011ac8:	4628      	mov	r0, r5
 8011aca:	f7fb fd39 	bl	800d540 <ucdr_serialize_bool>
 8011ace:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011ad2:	4030      	ands	r0, r6
 8011ad4:	b2c6      	uxtb	r6, r0
 8011ad6:	b983      	cbnz	r3, 8011afa <uxr_serialize_INFO_Payload+0x7e>
 8011ad8:	ea06 0007 	and.w	r0, r6, r7
 8011adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae0:	7b21      	ldrb	r1, [r4, #12]
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f7fb fd5a 	bl	800d59c <ucdr_serialize_uint8_t>
 8011ae8:	b188      	cbz	r0, 8011b0e <uxr_serialize_INFO_Payload+0x92>
 8011aea:	f104 010c 	add.w	r1, r4, #12
 8011aee:	4628      	mov	r0, r5
 8011af0:	f7ff faf2 	bl	80110d8 <uxr_serialize_ObjectVariant.part.0>
 8011af4:	4030      	ands	r0, r6
 8011af6:	b2c6      	uxtb	r6, r0
 8011af8:	e7e4      	b.n	8011ac4 <uxr_serialize_INFO_Payload+0x48>
 8011afa:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011afe:	4628      	mov	r0, r5
 8011b00:	f7ff fdb2 	bl	8011668 <uxr_serialize_ActivityInfoVariant>
 8011b04:	4006      	ands	r6, r0
 8011b06:	ea06 0007 	and.w	r0, r6, r7
 8011b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b0e:	4606      	mov	r6, r0
 8011b10:	e7d8      	b.n	8011ac4 <uxr_serialize_INFO_Payload+0x48>
 8011b12:	bf00      	nop

08011b14 <uxr_serialize_READ_DATA_Payload>:
 8011b14:	b570      	push	{r4, r5, r6, lr}
 8011b16:	2202      	movs	r2, #2
 8011b18:	4605      	mov	r5, r0
 8011b1a:	460e      	mov	r6, r1
 8011b1c:	f004 f982 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011b20:	2202      	movs	r2, #2
 8011b22:	18b1      	adds	r1, r6, r2
 8011b24:	4604      	mov	r4, r0
 8011b26:	4628      	mov	r0, r5
 8011b28:	f004 f97c 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011b2c:	1d31      	adds	r1, r6, #4
 8011b2e:	4004      	ands	r4, r0
 8011b30:	4628      	mov	r0, r5
 8011b32:	f7ff fe5d 	bl	80117f0 <uxr_serialize_ReadSpecification>
 8011b36:	b2e4      	uxtb	r4, r4
 8011b38:	4020      	ands	r0, r4
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}

08011b3c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	2202      	movs	r2, #2
 8011b40:	4605      	mov	r5, r0
 8011b42:	460e      	mov	r6, r1
 8011b44:	f004 f96e 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011b48:	2202      	movs	r2, #2
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	18b1      	adds	r1, r6, r2
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f004 f968 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011b54:	4020      	ands	r0, r4
 8011b56:	b2c0      	uxtb	r0, r0
 8011b58:	bd70      	pop	{r4, r5, r6, pc}
 8011b5a:	bf00      	nop

08011b5c <uxr_serialize_ACKNACK_Payload>:
 8011b5c:	b570      	push	{r4, r5, r6, lr}
 8011b5e:	460c      	mov	r4, r1
 8011b60:	460e      	mov	r6, r1
 8011b62:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011b66:	4605      	mov	r5, r0
 8011b68:	f7fb fd44 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8011b6c:	2202      	movs	r2, #2
 8011b6e:	4621      	mov	r1, r4
 8011b70:	4604      	mov	r4, r0
 8011b72:	4628      	mov	r0, r5
 8011b74:	f004 f956 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011b78:	7931      	ldrb	r1, [r6, #4]
 8011b7a:	4004      	ands	r4, r0
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f7fb fd0d 	bl	800d59c <ucdr_serialize_uint8_t>
 8011b82:	b2e4      	uxtb	r4, r4
 8011b84:	4020      	ands	r0, r4
 8011b86:	bd70      	pop	{r4, r5, r6, pc}

08011b88 <uxr_deserialize_ACKNACK_Payload>:
 8011b88:	b570      	push	{r4, r5, r6, lr}
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	460e      	mov	r6, r1
 8011b8e:	f7fb fe31 	bl	800d7f4 <ucdr_deserialize_uint16_t>
 8011b92:	2202      	movs	r2, #2
 8011b94:	18b1      	adds	r1, r6, r2
 8011b96:	4604      	mov	r4, r0
 8011b98:	4628      	mov	r0, r5
 8011b9a:	f004 f9a7 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011b9e:	1d31      	adds	r1, r6, #4
 8011ba0:	4004      	ands	r4, r0
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f7fb fd10 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8011ba8:	b2e4      	uxtb	r4, r4
 8011baa:	4020      	ands	r0, r4
 8011bac:	bd70      	pop	{r4, r5, r6, pc}
 8011bae:	bf00      	nop

08011bb0 <uxr_serialize_HEARTBEAT_Payload>:
 8011bb0:	b570      	push	{r4, r5, r6, lr}
 8011bb2:	460d      	mov	r5, r1
 8011bb4:	8809      	ldrh	r1, [r1, #0]
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	f7fb fd1c 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8011bbc:	8869      	ldrh	r1, [r5, #2]
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f7fb fd17 	bl	800d5f4 <ucdr_serialize_uint16_t>
 8011bc6:	7929      	ldrb	r1, [r5, #4]
 8011bc8:	4004      	ands	r4, r0
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f7fb fce6 	bl	800d59c <ucdr_serialize_uint8_t>
 8011bd0:	b2e4      	uxtb	r4, r4
 8011bd2:	4020      	ands	r0, r4
 8011bd4:	bd70      	pop	{r4, r5, r6, pc}
 8011bd6:	bf00      	nop

08011bd8 <uxr_deserialize_HEARTBEAT_Payload>:
 8011bd8:	b570      	push	{r4, r5, r6, lr}
 8011bda:	4605      	mov	r5, r0
 8011bdc:	460e      	mov	r6, r1
 8011bde:	f7fb fe09 	bl	800d7f4 <ucdr_deserialize_uint16_t>
 8011be2:	1cb1      	adds	r1, r6, #2
 8011be4:	4604      	mov	r4, r0
 8011be6:	4628      	mov	r0, r5
 8011be8:	f7fb fe04 	bl	800d7f4 <ucdr_deserialize_uint16_t>
 8011bec:	1d31      	adds	r1, r6, #4
 8011bee:	4004      	ands	r4, r0
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	f7fb fce9 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8011bf6:	b2e4      	uxtb	r4, r4
 8011bf8:	4020      	ands	r0, r4
 8011bfa:	bd70      	pop	{r4, r5, r6, pc}

08011bfc <uxr_serialize_TIMESTAMP_Payload>:
 8011bfc:	b570      	push	{r4, r5, r6, lr}
 8011bfe:	460d      	mov	r5, r1
 8011c00:	6809      	ldr	r1, [r1, #0]
 8011c02:	4606      	mov	r6, r0
 8011c04:	f7fc fafa 	bl	800e1fc <ucdr_serialize_int32_t>
 8011c08:	6869      	ldr	r1, [r5, #4]
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	f7fb fedb 	bl	800d9c8 <ucdr_serialize_uint32_t>
 8011c12:	4020      	ands	r0, r4
 8011c14:	b2c0      	uxtb	r0, r0
 8011c16:	bd70      	pop	{r4, r5, r6, pc}

08011c18 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c1c:	4605      	mov	r5, r0
 8011c1e:	460e      	mov	r6, r1
 8011c20:	f7fc fb84 	bl	800e32c <ucdr_deserialize_int32_t>
 8011c24:	1d31      	adds	r1, r6, #4
 8011c26:	4607      	mov	r7, r0
 8011c28:	4628      	mov	r0, r5
 8011c2a:	f7fb fffd 	bl	800dc28 <ucdr_deserialize_uint32_t>
 8011c2e:	f106 0108 	add.w	r1, r6, #8
 8011c32:	4680      	mov	r8, r0
 8011c34:	4628      	mov	r0, r5
 8011c36:	f7fc fb79 	bl	800e32c <ucdr_deserialize_int32_t>
 8011c3a:	f106 010c 	add.w	r1, r6, #12
 8011c3e:	4604      	mov	r4, r0
 8011c40:	4628      	mov	r0, r5
 8011c42:	f7fb fff1 	bl	800dc28 <ucdr_deserialize_uint32_t>
 8011c46:	ea07 0708 	and.w	r7, r7, r8
 8011c4a:	403c      	ands	r4, r7
 8011c4c:	f106 0110 	add.w	r1, r6, #16
 8011c50:	4004      	ands	r4, r0
 8011c52:	4628      	mov	r0, r5
 8011c54:	f7fc fb6a 	bl	800e32c <ucdr_deserialize_int32_t>
 8011c58:	f106 0114 	add.w	r1, r6, #20
 8011c5c:	4607      	mov	r7, r0
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f7fb ffe2 	bl	800dc28 <ucdr_deserialize_uint32_t>
 8011c64:	b2e4      	uxtb	r4, r4
 8011c66:	403c      	ands	r4, r7
 8011c68:	4020      	ands	r0, r4
 8011c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c6e:	bf00      	nop

08011c70 <uxr_serialize_SampleIdentity>:
 8011c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c74:	220c      	movs	r2, #12
 8011c76:	4604      	mov	r4, r0
 8011c78:	460d      	mov	r5, r1
 8011c7a:	f004 f8d3 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011c7e:	2203      	movs	r2, #3
 8011c80:	f105 010c 	add.w	r1, r5, #12
 8011c84:	4607      	mov	r7, r0
 8011c86:	4620      	mov	r0, r4
 8011c88:	f004 f8cc 	bl	8015e24 <ucdr_serialize_array_uint8_t>
 8011c8c:	7be9      	ldrb	r1, [r5, #15]
 8011c8e:	4680      	mov	r8, r0
 8011c90:	4620      	mov	r0, r4
 8011c92:	f7fb fc83 	bl	800d59c <ucdr_serialize_uint8_t>
 8011c96:	6929      	ldr	r1, [r5, #16]
 8011c98:	4606      	mov	r6, r0
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f7fc faae 	bl	800e1fc <ucdr_serialize_int32_t>
 8011ca0:	6969      	ldr	r1, [r5, #20]
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	ea07 0708 	and.w	r7, r7, r8
 8011caa:	461c      	mov	r4, r3
 8011cac:	f7fb fe8c 	bl	800d9c8 <ucdr_serialize_uint32_t>
 8011cb0:	403e      	ands	r6, r7
 8011cb2:	4034      	ands	r4, r6
 8011cb4:	4020      	ands	r0, r4
 8011cb6:	b2c0      	uxtb	r0, r0
 8011cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011cbc <uxr_deserialize_SampleIdentity>:
 8011cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc0:	220c      	movs	r2, #12
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	460d      	mov	r5, r1
 8011cc6:	f004 f911 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011cca:	2203      	movs	r2, #3
 8011ccc:	f105 010c 	add.w	r1, r5, #12
 8011cd0:	4607      	mov	r7, r0
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f004 f90a 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8011cd8:	f105 010f 	add.w	r1, r5, #15
 8011cdc:	4680      	mov	r8, r0
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f7fb fc72 	bl	800d5c8 <ucdr_deserialize_uint8_t>
 8011ce4:	f105 0110 	add.w	r1, r5, #16
 8011ce8:	4606      	mov	r6, r0
 8011cea:	4620      	mov	r0, r4
 8011cec:	f7fc fb1e 	bl	800e32c <ucdr_deserialize_int32_t>
 8011cf0:	f105 0114 	add.w	r1, r5, #20
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	ea07 0708 	and.w	r7, r7, r8
 8011cfc:	461c      	mov	r4, r3
 8011cfe:	f7fb ff93 	bl	800dc28 <ucdr_deserialize_uint32_t>
 8011d02:	403e      	ands	r6, r7
 8011d04:	4034      	ands	r4, r6
 8011d06:	4020      	ands	r0, r4
 8011d08:	b2c0      	uxtb	r0, r0
 8011d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d0e:	bf00      	nop

08011d10 <rcl_client_get_rmw_handle>:
 8011d10:	b118      	cbz	r0, 8011d1a <rcl_client_get_rmw_handle+0xa>
 8011d12:	6800      	ldr	r0, [r0, #0]
 8011d14:	b108      	cbz	r0, 8011d1a <rcl_client_get_rmw_handle+0xa>
 8011d16:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011d1a:	4770      	bx	lr

08011d1c <rcl_send_request>:
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	b1e8      	cbz	r0, 8011d5e <rcl_send_request+0x42>
 8011d22:	4604      	mov	r4, r0
 8011d24:	6800      	ldr	r0, [r0, #0]
 8011d26:	b1d0      	cbz	r0, 8011d5e <rcl_send_request+0x42>
 8011d28:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011d2c:	b1bb      	cbz	r3, 8011d5e <rcl_send_request+0x42>
 8011d2e:	460e      	mov	r6, r1
 8011d30:	b1d1      	cbz	r1, 8011d68 <rcl_send_request+0x4c>
 8011d32:	4615      	mov	r5, r2
 8011d34:	b1c2      	cbz	r2, 8011d68 <rcl_send_request+0x4c>
 8011d36:	2105      	movs	r1, #5
 8011d38:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011d3c:	f002 fda4 	bl	8014888 <__atomic_load_8>
 8011d40:	6823      	ldr	r3, [r4, #0]
 8011d42:	e9c5 0100 	strd	r0, r1, [r5]
 8011d46:	462a      	mov	r2, r5
 8011d48:	4631      	mov	r1, r6
 8011d4a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011d4e:	f003 fc8f 	bl	8015670 <rmw_send_request>
 8011d52:	4606      	mov	r6, r0
 8011d54:	b160      	cbz	r0, 8011d70 <rcl_send_request+0x54>
 8011d56:	2601      	movs	r6, #1
 8011d58:	4630      	mov	r0, r6
 8011d5a:	b002      	add	sp, #8
 8011d5c:	bd70      	pop	{r4, r5, r6, pc}
 8011d5e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011d62:	4630      	mov	r0, r6
 8011d64:	b002      	add	sp, #8
 8011d66:	bd70      	pop	{r4, r5, r6, pc}
 8011d68:	260b      	movs	r6, #11
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	b002      	add	sp, #8
 8011d6e:	bd70      	pop	{r4, r5, r6, pc}
 8011d70:	6820      	ldr	r0, [r4, #0]
 8011d72:	2105      	movs	r1, #5
 8011d74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d78:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011d7c:	9100      	str	r1, [sp, #0]
 8011d7e:	f002 fdef 	bl	8014960 <__atomic_exchange_8>
 8011d82:	4630      	mov	r0, r6
 8011d84:	b002      	add	sp, #8
 8011d86:	bd70      	pop	{r4, r5, r6, pc}

08011d88 <rcl_take_response>:
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	468e      	mov	lr, r1
 8011d8c:	460c      	mov	r4, r1
 8011d8e:	4616      	mov	r6, r2
 8011d90:	4605      	mov	r5, r0
 8011d92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d96:	b08c      	sub	sp, #48	@ 0x30
 8011d98:	f10d 0c18 	add.w	ip, sp, #24
 8011d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011da0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011da4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011da8:	b35d      	cbz	r5, 8011e02 <rcl_take_response+0x7a>
 8011daa:	682b      	ldr	r3, [r5, #0]
 8011dac:	b34b      	cbz	r3, 8011e02 <rcl_take_response+0x7a>
 8011dae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011db2:	b330      	cbz	r0, 8011e02 <rcl_take_response+0x7a>
 8011db4:	b346      	cbz	r6, 8011e08 <rcl_take_response+0x80>
 8011db6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011e10 <rcl_take_response+0x88>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	f88d 3007 	strb.w	r3, [sp, #7]
 8011dc0:	4632      	mov	r2, r6
 8011dc2:	f10d 0307 	add.w	r3, sp, #7
 8011dc6:	a902      	add	r1, sp, #8
 8011dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011dcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011dd0:	f003 fd56 	bl	8015880 <rmw_take_response>
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	b9c8      	cbnz	r0, 8011e0c <rcl_take_response+0x84>
 8011dd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011ddc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011de0:	2a00      	cmp	r2, #0
 8011de2:	bf08      	it	eq
 8011de4:	461d      	moveq	r5, r3
 8011de6:	f10d 0e18 	add.w	lr, sp, #24
 8011dea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011dee:	46a4      	mov	ip, r4
 8011df0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011df4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011df8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	b00c      	add	sp, #48	@ 0x30
 8011e00:	bd70      	pop	{r4, r5, r6, pc}
 8011e02:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011e06:	e7ee      	b.n	8011de6 <rcl_take_response+0x5e>
 8011e08:	250b      	movs	r5, #11
 8011e0a:	e7ec      	b.n	8011de6 <rcl_take_response+0x5e>
 8011e0c:	2501      	movs	r5, #1
 8011e0e:	e7ea      	b.n	8011de6 <rcl_take_response+0x5e>
	...

08011e18 <rcl_client_is_valid>:
 8011e18:	b130      	cbz	r0, 8011e28 <rcl_client_is_valid+0x10>
 8011e1a:	6800      	ldr	r0, [r0, #0]
 8011e1c:	b120      	cbz	r0, 8011e28 <rcl_client_is_valid+0x10>
 8011e1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011e22:	3800      	subs	r0, #0
 8011e24:	bf18      	it	ne
 8011e26:	2001      	movne	r0, #1
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop

08011e2c <rcl_convert_rmw_ret_to_rcl_ret>:
 8011e2c:	280b      	cmp	r0, #11
 8011e2e:	dc0d      	bgt.n	8011e4c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	db09      	blt.n	8011e48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011e34:	280b      	cmp	r0, #11
 8011e36:	d807      	bhi.n	8011e48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011e38:	e8df f000 	tbb	[pc, r0]
 8011e3c:	07060607 	.word	0x07060607
 8011e40:	06060606 	.word	0x06060606
 8011e44:	07070606 	.word	0x07070606
 8011e48:	2001      	movs	r0, #1
 8011e4a:	4770      	bx	lr
 8011e4c:	28cb      	cmp	r0, #203	@ 0xcb
 8011e4e:	bf18      	it	ne
 8011e50:	2001      	movne	r0, #1
 8011e52:	4770      	bx	lr

08011e54 <rcl_get_zero_initialized_context>:
 8011e54:	4a03      	ldr	r2, [pc, #12]	@ (8011e64 <rcl_get_zero_initialized_context+0x10>)
 8011e56:	4603      	mov	r3, r0
 8011e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e60:	4618      	mov	r0, r3
 8011e62:	4770      	bx	lr
 8011e64:	080190ec 	.word	0x080190ec

08011e68 <rcl_context_is_valid>:
 8011e68:	b118      	cbz	r0, 8011e72 <rcl_context_is_valid+0xa>
 8011e6a:	6840      	ldr	r0, [r0, #4]
 8011e6c:	3800      	subs	r0, #0
 8011e6e:	bf18      	it	ne
 8011e70:	2001      	movne	r0, #1
 8011e72:	4770      	bx	lr

08011e74 <__cleanup_context>:
 8011e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e78:	4606      	mov	r6, r0
 8011e7a:	6800      	ldr	r0, [r0, #0]
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	6073      	str	r3, [r6, #4]
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d049      	beq.n	8011f18 <__cleanup_context+0xa4>
 8011e84:	6947      	ldr	r7, [r0, #20]
 8011e86:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011e8a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011e8e:	b137      	cbz	r7, 8011e9e <__cleanup_context+0x2a>
 8011e90:	3014      	adds	r0, #20
 8011e92:	f7f8 ffa1 	bl	800add8 <rcl_init_options_fini>
 8011e96:	4607      	mov	r7, r0
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d144      	bne.n	8011f26 <__cleanup_context+0xb2>
 8011e9c:	6830      	ldr	r0, [r6, #0]
 8011e9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011ea0:	b143      	cbz	r3, 8011eb4 <__cleanup_context+0x40>
 8011ea2:	3028      	adds	r0, #40	@ 0x28
 8011ea4:	f7fa fb64 	bl	800c570 <rmw_context_fini>
 8011ea8:	b118      	cbz	r0, 8011eb2 <__cleanup_context+0x3e>
 8011eaa:	2f00      	cmp	r7, #0
 8011eac:	d03e      	beq.n	8011f2c <__cleanup_context+0xb8>
 8011eae:	f7fa f897 	bl	800bfe0 <rcutils_reset_error>
 8011eb2:	6830      	ldr	r0, [r6, #0]
 8011eb4:	6a03      	ldr	r3, [r0, #32]
 8011eb6:	b1db      	cbz	r3, 8011ef0 <__cleanup_context+0x7c>
 8011eb8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011ebc:	2a01      	cmp	r2, #1
 8011ebe:	f17c 0100 	sbcs.w	r1, ip, #0
 8011ec2:	db11      	blt.n	8011ee8 <__cleanup_context+0x74>
 8011ec4:	2400      	movs	r4, #0
 8011ec6:	4625      	mov	r5, r4
 8011ec8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011ecc:	4649      	mov	r1, r9
 8011ece:	b1b8      	cbz	r0, 8011f00 <__cleanup_context+0x8c>
 8011ed0:	47c0      	blx	r8
 8011ed2:	6833      	ldr	r3, [r6, #0]
 8011ed4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011ed8:	3401      	adds	r4, #1
 8011eda:	f145 0500 	adc.w	r5, r5, #0
 8011ede:	4294      	cmp	r4, r2
 8011ee0:	eb75 010c 	sbcs.w	r1, r5, ip
 8011ee4:	6a1b      	ldr	r3, [r3, #32]
 8011ee6:	dbef      	blt.n	8011ec8 <__cleanup_context+0x54>
 8011ee8:	4618      	mov	r0, r3
 8011eea:	4649      	mov	r1, r9
 8011eec:	47c0      	blx	r8
 8011eee:	6830      	ldr	r0, [r6, #0]
 8011ef0:	4649      	mov	r1, r9
 8011ef2:	47c0      	blx	r8
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	e9c6 3300 	strd	r3, r3, [r6]
 8011efa:	4638      	mov	r0, r7
 8011efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f00:	3401      	adds	r4, #1
 8011f02:	f145 0500 	adc.w	r5, r5, #0
 8011f06:	4294      	cmp	r4, r2
 8011f08:	eb75 010c 	sbcs.w	r1, r5, ip
 8011f0c:	dbdc      	blt.n	8011ec8 <__cleanup_context+0x54>
 8011f0e:	4618      	mov	r0, r3
 8011f10:	4649      	mov	r1, r9
 8011f12:	47c0      	blx	r8
 8011f14:	6830      	ldr	r0, [r6, #0]
 8011f16:	e7eb      	b.n	8011ef0 <__cleanup_context+0x7c>
 8011f18:	4607      	mov	r7, r0
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	e9c6 3300 	strd	r3, r3, [r6]
 8011f20:	4638      	mov	r0, r7
 8011f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f26:	f7fa f85b 	bl	800bfe0 <rcutils_reset_error>
 8011f2a:	e7b7      	b.n	8011e9c <__cleanup_context+0x28>
 8011f2c:	f7ff ff7e 	bl	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 8011f30:	4607      	mov	r7, r0
 8011f32:	e7bc      	b.n	8011eae <__cleanup_context+0x3a>

08011f34 <rcl_init>:
 8011f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f38:	1e05      	subs	r5, r0, #0
 8011f3a:	b09e      	sub	sp, #120	@ 0x78
 8011f3c:	460e      	mov	r6, r1
 8011f3e:	4690      	mov	r8, r2
 8011f40:	461f      	mov	r7, r3
 8011f42:	f340 809c 	ble.w	801207e <rcl_init+0x14a>
 8011f46:	2900      	cmp	r1, #0
 8011f48:	f000 809c 	beq.w	8012084 <rcl_init+0x150>
 8011f4c:	f1a1 0e04 	sub.w	lr, r1, #4
 8011f50:	f04f 0c00 	mov.w	ip, #0
 8011f54:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011f58:	f10c 0c01 	add.w	ip, ip, #1
 8011f5c:	2c00      	cmp	r4, #0
 8011f5e:	f000 8091 	beq.w	8012084 <rcl_init+0x150>
 8011f62:	4565      	cmp	r5, ip
 8011f64:	d1f6      	bne.n	8011f54 <rcl_init+0x20>
 8011f66:	f1b8 0f00 	cmp.w	r8, #0
 8011f6a:	f000 808b 	beq.w	8012084 <rcl_init+0x150>
 8011f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8011f72:	2c00      	cmp	r4, #0
 8011f74:	f000 8086 	beq.w	8012084 <rcl_init+0x150>
 8011f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f7a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011f7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	f8cc 3000 	str.w	r3, [ip]
 8011f88:	a819      	add	r0, sp, #100	@ 0x64
 8011f8a:	f7fa f803 	bl	800bf94 <rcutils_allocator_is_valid>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d078      	beq.n	8012084 <rcl_init+0x150>
 8011f92:	2f00      	cmp	r7, #0
 8011f94:	d076      	beq.n	8012084 <rcl_init+0x150>
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d178      	bne.n	801208e <rcl_init+0x15a>
 8011f9c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011fa0:	2178      	movs	r1, #120	@ 0x78
 8011fa2:	2001      	movs	r0, #1
 8011fa4:	4798      	blx	r3
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	6038      	str	r0, [r7, #0]
 8011faa:	2800      	cmp	r0, #0
 8011fac:	f000 80b6 	beq.w	801211c <rcl_init+0x1e8>
 8011fb0:	a802      	add	r0, sp, #8
 8011fb2:	f002 ffb9 	bl	8014f28 <rmw_get_zero_initialized_context>
 8011fb6:	a902      	add	r1, sp, #8
 8011fb8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011fbc:	2250      	movs	r2, #80	@ 0x50
 8011fbe:	ac19      	add	r4, sp, #100	@ 0x64
 8011fc0:	f005 fe33 	bl	8017c2a <memcpy>
 8011fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fc6:	f8d7 e000 	ldr.w	lr, [r7]
 8011fca:	46f4      	mov	ip, lr
 8011fcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fd0:	6823      	ldr	r3, [r4, #0]
 8011fd2:	f8cc 3000 	str.w	r3, [ip]
 8011fd6:	f10e 0114 	add.w	r1, lr, #20
 8011fda:	4640      	mov	r0, r8
 8011fdc:	f7f8 ff26 	bl	800ae2c <rcl_init_options_copy>
 8011fe0:	4604      	mov	r4, r0
 8011fe2:	2800      	cmp	r0, #0
 8011fe4:	d144      	bne.n	8012070 <rcl_init+0x13c>
 8011fe6:	f8d7 9000 	ldr.w	r9, [r7]
 8011fea:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011fee:	f8c9 0020 	str.w	r0, [r9, #32]
 8011ff2:	f8c9 5018 	str.w	r5, [r9, #24]
 8011ff6:	f8c9 801c 	str.w	r8, [r9, #28]
 8011ffa:	2d00      	cmp	r5, #0
 8011ffc:	d04e      	beq.n	801209c <rcl_init+0x168>
 8011ffe:	2e00      	cmp	r6, #0
 8012000:	d04c      	beq.n	801209c <rcl_init+0x168>
 8012002:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012006:	2104      	movs	r1, #4
 8012008:	4628      	mov	r0, r5
 801200a:	4798      	blx	r3
 801200c:	f8c9 0020 	str.w	r0, [r9, #32]
 8012010:	f8d7 9000 	ldr.w	r9, [r7]
 8012014:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012018:	46ca      	mov	sl, r9
 801201a:	b343      	cbz	r3, 801206e <rcl_init+0x13a>
 801201c:	2d01      	cmp	r5, #1
 801201e:	f178 0300 	sbcs.w	r3, r8, #0
 8012022:	db3b      	blt.n	801209c <rcl_init+0x168>
 8012024:	2400      	movs	r4, #0
 8012026:	3e04      	subs	r6, #4
 8012028:	46a1      	mov	r9, r4
 801202a:	e00b      	b.n	8012044 <rcl_init+0x110>
 801202c:	6831      	ldr	r1, [r6, #0]
 801202e:	f005 fdfc 	bl	8017c2a <memcpy>
 8012032:	3401      	adds	r4, #1
 8012034:	f149 0900 	adc.w	r9, r9, #0
 8012038:	45c8      	cmp	r8, r9
 801203a:	bf08      	it	eq
 801203c:	42a5      	cmpeq	r5, r4
 801203e:	d02b      	beq.n	8012098 <rcl_init+0x164>
 8012040:	f8d7 a000 	ldr.w	sl, [r7]
 8012044:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012048:	f7ee f8f4 	bl	8000234 <strlen>
 801204c:	1c42      	adds	r2, r0, #1
 801204e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012050:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8012052:	f8da a020 	ldr.w	sl, [sl, #32]
 8012056:	9201      	str	r2, [sp, #4]
 8012058:	4610      	mov	r0, r2
 801205a:	4798      	blx	r3
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012062:	6a1b      	ldr	r3, [r3, #32]
 8012064:	9a01      	ldr	r2, [sp, #4]
 8012066:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801206a:	2800      	cmp	r0, #0
 801206c:	d1de      	bne.n	801202c <rcl_init+0xf8>
 801206e:	240a      	movs	r4, #10
 8012070:	4638      	mov	r0, r7
 8012072:	f7ff feff 	bl	8011e74 <__cleanup_context>
 8012076:	4620      	mov	r0, r4
 8012078:	b01e      	add	sp, #120	@ 0x78
 801207a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801207e:	2900      	cmp	r1, #0
 8012080:	f43f af71 	beq.w	8011f66 <rcl_init+0x32>
 8012084:	240b      	movs	r4, #11
 8012086:	4620      	mov	r0, r4
 8012088:	b01e      	add	sp, #120	@ 0x78
 801208a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801208e:	2464      	movs	r4, #100	@ 0x64
 8012090:	4620      	mov	r0, r4
 8012092:	b01e      	add	sp, #120	@ 0x78
 8012094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012098:	f8d7 9000 	ldr.w	r9, [r7]
 801209c:	4926      	ldr	r1, [pc, #152]	@ (8012138 <rcl_init+0x204>)
 801209e:	680b      	ldr	r3, [r1, #0]
 80120a0:	3301      	adds	r3, #1
 80120a2:	d036      	beq.n	8012112 <rcl_init+0x1de>
 80120a4:	600b      	str	r3, [r1, #0]
 80120a6:	461a      	mov	r2, r3
 80120a8:	2400      	movs	r4, #0
 80120aa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80120ae:	607b      	str	r3, [r7, #4]
 80120b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80120b2:	3301      	adds	r3, #1
 80120b4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80120b8:	d034      	beq.n	8012124 <rcl_init+0x1f0>
 80120ba:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80120be:	b93b      	cbnz	r3, 80120d0 <rcl_init+0x19c>
 80120c0:	3030      	adds	r0, #48	@ 0x30
 80120c2:	f000 f83b 	bl	801213c <rcl_get_localhost_only>
 80120c6:	4604      	mov	r4, r0
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d1d1      	bne.n	8012070 <rcl_init+0x13c>
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	6958      	ldr	r0, [r3, #20]
 80120d0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80120d2:	aa18      	add	r2, sp, #96	@ 0x60
 80120d4:	a917      	add	r1, sp, #92	@ 0x5c
 80120d6:	f001 f871 	bl	80131bc <rcl_validate_enclave_name>
 80120da:	4604      	mov	r4, r0
 80120dc:	2800      	cmp	r0, #0
 80120de:	d1c7      	bne.n	8012070 <rcl_init+0x13c>
 80120e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80120e2:	b9eb      	cbnz	r3, 8012120 <rcl_init+0x1ec>
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	694b      	ldr	r3, [r1, #20]
 80120e8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80120ea:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80120ee:	f000 fb3f 	bl	8012770 <rcl_get_security_options_from_environment>
 80120f2:	4604      	mov	r4, r0
 80120f4:	2800      	cmp	r0, #0
 80120f6:	d1bb      	bne.n	8012070 <rcl_init+0x13c>
 80120f8:	6839      	ldr	r1, [r7, #0]
 80120fa:	6948      	ldr	r0, [r1, #20]
 80120fc:	3128      	adds	r1, #40	@ 0x28
 80120fe:	3018      	adds	r0, #24
 8012100:	f7fa f900 	bl	800c304 <rmw_init>
 8012104:	4604      	mov	r4, r0
 8012106:	2800      	cmp	r0, #0
 8012108:	d0bd      	beq.n	8012086 <rcl_init+0x152>
 801210a:	f7ff fe8f 	bl	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 801210e:	4604      	mov	r4, r0
 8012110:	e7ae      	b.n	8012070 <rcl_init+0x13c>
 8012112:	2201      	movs	r2, #1
 8012114:	461c      	mov	r4, r3
 8012116:	600a      	str	r2, [r1, #0]
 8012118:	4613      	mov	r3, r2
 801211a:	e7c6      	b.n	80120aa <rcl_init+0x176>
 801211c:	240a      	movs	r4, #10
 801211e:	e7b2      	b.n	8012086 <rcl_init+0x152>
 8012120:	2401      	movs	r4, #1
 8012122:	e7a5      	b.n	8012070 <rcl_init+0x13c>
 8012124:	3024      	adds	r0, #36	@ 0x24
 8012126:	f004 fd1d 	bl	8016b64 <rcl_get_default_domain_id>
 801212a:	4604      	mov	r4, r0
 801212c:	2800      	cmp	r0, #0
 801212e:	d19f      	bne.n	8012070 <rcl_init+0x13c>
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	6958      	ldr	r0, [r3, #20]
 8012134:	e7c1      	b.n	80120ba <rcl_init+0x186>
 8012136:	bf00      	nop
 8012138:	2000caf0 	.word	0x2000caf0

0801213c <rcl_get_localhost_only>:
 801213c:	b510      	push	{r4, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	2300      	movs	r3, #0
 8012142:	9301      	str	r3, [sp, #4]
 8012144:	b1b8      	cbz	r0, 8012176 <rcl_get_localhost_only+0x3a>
 8012146:	4604      	mov	r4, r0
 8012148:	a901      	add	r1, sp, #4
 801214a:	480c      	ldr	r0, [pc, #48]	@ (801217c <rcl_get_localhost_only+0x40>)
 801214c:	f002 fc40 	bl	80149d0 <rcutils_get_env>
 8012150:	b110      	cbz	r0, 8012158 <rcl_get_localhost_only+0x1c>
 8012152:	2001      	movs	r0, #1
 8012154:	b002      	add	sp, #8
 8012156:	bd10      	pop	{r4, pc}
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	b113      	cbz	r3, 8012162 <rcl_get_localhost_only+0x26>
 801215c:	781a      	ldrb	r2, [r3, #0]
 801215e:	2a31      	cmp	r2, #49	@ 0x31
 8012160:	d004      	beq.n	801216c <rcl_get_localhost_only+0x30>
 8012162:	2302      	movs	r3, #2
 8012164:	2000      	movs	r0, #0
 8012166:	7023      	strb	r3, [r4, #0]
 8012168:	b002      	add	sp, #8
 801216a:	bd10      	pop	{r4, pc}
 801216c:	785b      	ldrb	r3, [r3, #1]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d1f7      	bne.n	8012162 <rcl_get_localhost_only+0x26>
 8012172:	2301      	movs	r3, #1
 8012174:	e7f6      	b.n	8012164 <rcl_get_localhost_only+0x28>
 8012176:	200b      	movs	r0, #11
 8012178:	b002      	add	sp, #8
 801217a:	bd10      	pop	{r4, pc}
 801217c:	080190f4 	.word	0x080190f4

08012180 <rcl_get_zero_initialized_node>:
 8012180:	4a03      	ldr	r2, [pc, #12]	@ (8012190 <rcl_get_zero_initialized_node+0x10>)
 8012182:	4603      	mov	r3, r0
 8012184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012188:	e883 0003 	stmia.w	r3, {r0, r1}
 801218c:	4618      	mov	r0, r3
 801218e:	4770      	bx	lr
 8012190:	08019110 	.word	0x08019110

08012194 <rcl_node_init>:
 8012194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012198:	b0a9      	sub	sp, #164	@ 0xa4
 801219a:	4604      	mov	r4, r0
 801219c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80121a0:	a823      	add	r0, sp, #140	@ 0x8c
 80121a2:	460e      	mov	r6, r1
 80121a4:	4615      	mov	r5, r2
 80121a6:	461f      	mov	r7, r3
 80121a8:	f004 ff50 	bl	801704c <rcl_guard_condition_get_default_options>
 80121ac:	f1b8 0f00 	cmp.w	r8, #0
 80121b0:	f000 80e6 	beq.w	8012380 <rcl_node_init+0x1ec>
 80121b4:	4640      	mov	r0, r8
 80121b6:	f7f9 feed 	bl	800bf94 <rcutils_allocator_is_valid>
 80121ba:	2800      	cmp	r0, #0
 80121bc:	f000 80e0 	beq.w	8012380 <rcl_node_init+0x1ec>
 80121c0:	2e00      	cmp	r6, #0
 80121c2:	f000 80dd 	beq.w	8012380 <rcl_node_init+0x1ec>
 80121c6:	2d00      	cmp	r5, #0
 80121c8:	f000 80da 	beq.w	8012380 <rcl_node_init+0x1ec>
 80121cc:	2c00      	cmp	r4, #0
 80121ce:	f000 80d7 	beq.w	8012380 <rcl_node_init+0x1ec>
 80121d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80121d6:	f1b9 0f00 	cmp.w	r9, #0
 80121da:	f040 80fd 	bne.w	80123d8 <rcl_node_init+0x244>
 80121de:	2f00      	cmp	r7, #0
 80121e0:	f000 80ce 	beq.w	8012380 <rcl_node_init+0x1ec>
 80121e4:	4638      	mov	r0, r7
 80121e6:	f7ff fe3f 	bl	8011e68 <rcl_context_is_valid>
 80121ea:	4682      	mov	sl, r0
 80121ec:	2800      	cmp	r0, #0
 80121ee:	f000 80cd 	beq.w	801238c <rcl_node_init+0x1f8>
 80121f2:	464a      	mov	r2, r9
 80121f4:	a922      	add	r1, sp, #136	@ 0x88
 80121f6:	4630      	mov	r0, r6
 80121f8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80121fc:	f003 f812 	bl	8015224 <rmw_validate_node_name>
 8012200:	4681      	mov	r9, r0
 8012202:	2800      	cmp	r0, #0
 8012204:	f040 80be 	bne.w	8012384 <rcl_node_init+0x1f0>
 8012208:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801220a:	2800      	cmp	r0, #0
 801220c:	f040 80f0 	bne.w	80123f0 <rcl_node_init+0x25c>
 8012210:	4628      	mov	r0, r5
 8012212:	f7ee f80f 	bl	8000234 <strlen>
 8012216:	2800      	cmp	r0, #0
 8012218:	f040 80bb 	bne.w	8012392 <rcl_node_init+0x1fe>
 801221c:	4d7c      	ldr	r5, [pc, #496]	@ (8012410 <rcl_node_init+0x27c>)
 801221e:	a922      	add	r1, sp, #136	@ 0x88
 8012220:	2200      	movs	r2, #0
 8012222:	4628      	mov	r0, r5
 8012224:	f002 ffe0 	bl	80151e8 <rmw_validate_namespace>
 8012228:	4681      	mov	r9, r0
 801222a:	2800      	cmp	r0, #0
 801222c:	f040 80aa 	bne.w	8012384 <rcl_node_init+0x1f0>
 8012230:	4682      	mov	sl, r0
 8012232:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012234:	2800      	cmp	r0, #0
 8012236:	f040 80e0 	bne.w	80123fa <rcl_node_init+0x266>
 801223a:	f8d8 3000 	ldr.w	r3, [r8]
 801223e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012242:	2078      	movs	r0, #120	@ 0x78
 8012244:	4798      	blx	r3
 8012246:	4681      	mov	r9, r0
 8012248:	6060      	str	r0, [r4, #4]
 801224a:	2800      	cmp	r0, #0
 801224c:	f000 80ca 	beq.w	80123e4 <rcl_node_init+0x250>
 8012250:	2200      	movs	r2, #0
 8012252:	2300      	movs	r3, #0
 8012254:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8012258:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 801225c:	a808      	add	r0, sp, #32
 801225e:	f000 f907 	bl	8012470 <rcl_node_get_default_options>
 8012262:	a908      	add	r1, sp, #32
 8012264:	4648      	mov	r0, r9
 8012266:	2268      	movs	r2, #104	@ 0x68
 8012268:	f005 fcdf 	bl	8017c2a <memcpy>
 801226c:	6861      	ldr	r1, [r4, #4]
 801226e:	6027      	str	r7, [r4, #0]
 8012270:	4640      	mov	r0, r8
 8012272:	f000 f90b 	bl	801248c <rcl_node_options_copy>
 8012276:	2800      	cmp	r0, #0
 8012278:	d158      	bne.n	801232c <rcl_node_init+0x198>
 801227a:	4628      	mov	r0, r5
 801227c:	f7ed ffda 	bl	8000234 <strlen>
 8012280:	4428      	add	r0, r5
 8012282:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012286:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801228a:	2b2f      	cmp	r3, #47	@ 0x2f
 801228c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	bf0c      	ite	eq
 8012294:	4b5f      	ldreq	r3, [pc, #380]	@ (8012414 <rcl_node_init+0x280>)
 8012296:	4b60      	ldrne	r3, [pc, #384]	@ (8012418 <rcl_node_init+0x284>)
 8012298:	9302      	str	r3, [sp, #8]
 801229a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801229e:	9301      	str	r3, [sp, #4]
 80122a0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80122a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80122a8:	f002 fbba 	bl	8014a20 <rcutils_format_string_limit>
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80122b2:	6818      	ldr	r0, [r3, #0]
 80122b4:	4631      	mov	r1, r6
 80122b6:	3028      	adds	r0, #40	@ 0x28
 80122b8:	462a      	mov	r2, r5
 80122ba:	6866      	ldr	r6, [r4, #4]
 80122bc:	f7fa fa04 	bl	800c6c8 <rmw_create_node>
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	66b0      	str	r0, [r6, #104]	@ 0x68
 80122c4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d032      	beq.n	8012330 <rcl_node_init+0x19c>
 80122ca:	f7fa fa91 	bl	800c7f0 <rmw_node_get_graph_guard_condition>
 80122ce:	4681      	mov	r9, r0
 80122d0:	b360      	cbz	r0, 801232c <rcl_node_init+0x198>
 80122d2:	f8d8 3000 	ldr.w	r3, [r8]
 80122d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80122da:	6866      	ldr	r6, [r4, #4]
 80122dc:	2008      	movs	r0, #8
 80122de:	4798      	blx	r3
 80122e0:	6863      	ldr	r3, [r4, #4]
 80122e2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80122e4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80122e8:	f1bb 0f00 	cmp.w	fp, #0
 80122ec:	d020      	beq.n	8012330 <rcl_node_init+0x19c>
 80122ee:	a806      	add	r0, sp, #24
 80122f0:	f004 fdd0 	bl	8016e94 <rcl_get_zero_initialized_guard_condition>
 80122f4:	a806      	add	r0, sp, #24
 80122f6:	c803      	ldmia	r0, {r0, r1}
 80122f8:	6863      	ldr	r3, [r4, #4]
 80122fa:	46c4      	mov	ip, r8
 80122fc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012300:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012308:	ae23      	add	r6, sp, #140	@ 0x8c
 801230a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801230c:	f8dc 3000 	ldr.w	r3, [ip]
 8012310:	6033      	str	r3, [r6, #0]
 8012312:	ab28      	add	r3, sp, #160	@ 0xa0
 8012314:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012318:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801231c:	4649      	mov	r1, r9
 801231e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012320:	463a      	mov	r2, r7
 8012322:	4670      	mov	r0, lr
 8012324:	f004 fe0c 	bl	8016f40 <rcl_guard_condition_init_from_rmw>
 8012328:	4681      	mov	r9, r0
 801232a:	b328      	cbz	r0, 8012378 <rcl_node_init+0x1e4>
 801232c:	6863      	ldr	r3, [r4, #4]
 801232e:	b1f3      	cbz	r3, 801236e <rcl_node_init+0x1da>
 8012330:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012332:	b128      	cbz	r0, 8012340 <rcl_node_init+0x1ac>
 8012334:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012338:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801233c:	4798      	blx	r3
 801233e:	6863      	ldr	r3, [r4, #4]
 8012340:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012342:	b110      	cbz	r0, 801234a <rcl_node_init+0x1b6>
 8012344:	f7fa f9d8 	bl	800c6f8 <rmw_destroy_node>
 8012348:	6863      	ldr	r3, [r4, #4]
 801234a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801234c:	b148      	cbz	r0, 8012362 <rcl_node_init+0x1ce>
 801234e:	f004 fe57 	bl	8017000 <rcl_guard_condition_fini>
 8012352:	6863      	ldr	r3, [r4, #4]
 8012354:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012358:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801235a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801235e:	4798      	blx	r3
 8012360:	6863      	ldr	r3, [r4, #4]
 8012362:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012366:	4618      	mov	r0, r3
 8012368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801236c:	4798      	blx	r3
 801236e:	2300      	movs	r3, #0
 8012370:	e9c4 3300 	strd	r3, r3, [r4]
 8012374:	f04f 0901 	mov.w	r9, #1
 8012378:	f1ba 0f00 	cmp.w	sl, #0
 801237c:	d125      	bne.n	80123ca <rcl_node_init+0x236>
 801237e:	e001      	b.n	8012384 <rcl_node_init+0x1f0>
 8012380:	f04f 090b 	mov.w	r9, #11
 8012384:	4648      	mov	r0, r9
 8012386:	b029      	add	sp, #164	@ 0xa4
 8012388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012390:	e7f8      	b.n	8012384 <rcl_node_init+0x1f0>
 8012392:	782b      	ldrb	r3, [r5, #0]
 8012394:	2b2f      	cmp	r3, #47	@ 0x2f
 8012396:	f43f af42 	beq.w	801221e <rcl_node_init+0x8a>
 801239a:	9503      	str	r5, [sp, #12]
 801239c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	4b1e      	ldr	r3, [pc, #120]	@ (801241c <rcl_node_init+0x288>)
 80123a4:	9302      	str	r3, [sp, #8]
 80123a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80123aa:	9301      	str	r3, [sp, #4]
 80123ac:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80123b0:	f002 fb36 	bl	8014a20 <rcutils_format_string_limit>
 80123b4:	4605      	mov	r5, r0
 80123b6:	b340      	cbz	r0, 801240a <rcl_node_init+0x276>
 80123b8:	2200      	movs	r2, #0
 80123ba:	a922      	add	r1, sp, #136	@ 0x88
 80123bc:	9222      	str	r2, [sp, #136]	@ 0x88
 80123be:	f002 ff13 	bl	80151e8 <rmw_validate_namespace>
 80123c2:	4681      	mov	r9, r0
 80123c4:	2800      	cmp	r0, #0
 80123c6:	f43f af34 	beq.w	8012232 <rcl_node_init+0x9e>
 80123ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80123ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80123d2:	4628      	mov	r0, r5
 80123d4:	4798      	blx	r3
 80123d6:	e7d5      	b.n	8012384 <rcl_node_init+0x1f0>
 80123d8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80123dc:	4648      	mov	r0, r9
 80123de:	b029      	add	sp, #164	@ 0xa4
 80123e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e4:	f04f 090a 	mov.w	r9, #10
 80123e8:	f1ba 0f00 	cmp.w	sl, #0
 80123ec:	d1ed      	bne.n	80123ca <rcl_node_init+0x236>
 80123ee:	e7c9      	b.n	8012384 <rcl_node_init+0x1f0>
 80123f0:	f002 ff6a 	bl	80152c8 <rmw_node_name_validation_result_string>
 80123f4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80123f8:	e7c4      	b.n	8012384 <rcl_node_init+0x1f0>
 80123fa:	f002 ff07 	bl	801520c <rmw_namespace_validation_result_string>
 80123fe:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8012402:	f1ba 0f00 	cmp.w	sl, #0
 8012406:	d1e0      	bne.n	80123ca <rcl_node_init+0x236>
 8012408:	e7bc      	b.n	8012384 <rcl_node_init+0x1f0>
 801240a:	f04f 090a 	mov.w	r9, #10
 801240e:	e7b9      	b.n	8012384 <rcl_node_init+0x1f0>
 8012410:	08018c50 	.word	0x08018c50
 8012414:	08018c9c 	.word	0x08018c9c
 8012418:	08018c54 	.word	0x08018c54
 801241c:	0801910c 	.word	0x0801910c

08012420 <rcl_node_is_valid>:
 8012420:	b130      	cbz	r0, 8012430 <rcl_node_is_valid+0x10>
 8012422:	6843      	ldr	r3, [r0, #4]
 8012424:	b123      	cbz	r3, 8012430 <rcl_node_is_valid+0x10>
 8012426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012428:	b113      	cbz	r3, 8012430 <rcl_node_is_valid+0x10>
 801242a:	6800      	ldr	r0, [r0, #0]
 801242c:	f7ff bd1c 	b.w	8011e68 <rcl_context_is_valid>
 8012430:	2000      	movs	r0, #0
 8012432:	4770      	bx	lr

08012434 <rcl_node_get_name>:
 8012434:	b120      	cbz	r0, 8012440 <rcl_node_get_name+0xc>
 8012436:	6840      	ldr	r0, [r0, #4]
 8012438:	b110      	cbz	r0, 8012440 <rcl_node_get_name+0xc>
 801243a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801243c:	b100      	cbz	r0, 8012440 <rcl_node_get_name+0xc>
 801243e:	6880      	ldr	r0, [r0, #8]
 8012440:	4770      	bx	lr
 8012442:	bf00      	nop

08012444 <rcl_node_get_namespace>:
 8012444:	b120      	cbz	r0, 8012450 <rcl_node_get_namespace+0xc>
 8012446:	6840      	ldr	r0, [r0, #4]
 8012448:	b110      	cbz	r0, 8012450 <rcl_node_get_namespace+0xc>
 801244a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801244c:	b100      	cbz	r0, 8012450 <rcl_node_get_namespace+0xc>
 801244e:	68c0      	ldr	r0, [r0, #12]
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop

08012454 <rcl_node_get_options>:
 8012454:	b128      	cbz	r0, 8012462 <rcl_node_get_options+0xe>
 8012456:	6840      	ldr	r0, [r0, #4]
 8012458:	b118      	cbz	r0, 8012462 <rcl_node_get_options+0xe>
 801245a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801245c:	2b00      	cmp	r3, #0
 801245e:	bf08      	it	eq
 8012460:	2000      	moveq	r0, #0
 8012462:	4770      	bx	lr

08012464 <rcl_node_get_rmw_handle>:
 8012464:	b110      	cbz	r0, 801246c <rcl_node_get_rmw_handle+0x8>
 8012466:	6840      	ldr	r0, [r0, #4]
 8012468:	b100      	cbz	r0, 801246c <rcl_node_get_rmw_handle+0x8>
 801246a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop

08012470 <rcl_node_get_default_options>:
 8012470:	b510      	push	{r4, lr}
 8012472:	2268      	movs	r2, #104	@ 0x68
 8012474:	4604      	mov	r4, r0
 8012476:	2100      	movs	r1, #0
 8012478:	f005 fb0e 	bl	8017a98 <memset>
 801247c:	4620      	mov	r0, r4
 801247e:	f7f9 fd7b 	bl	800bf78 <rcutils_get_default_allocator>
 8012482:	2301      	movs	r3, #1
 8012484:	7523      	strb	r3, [r4, #20]
 8012486:	4620      	mov	r0, r4
 8012488:	bd10      	pop	{r4, pc}
 801248a:	bf00      	nop

0801248c <rcl_node_options_copy>:
 801248c:	b1d0      	cbz	r0, 80124c4 <rcl_node_options_copy+0x38>
 801248e:	b570      	push	{r4, r5, r6, lr}
 8012490:	460c      	mov	r4, r1
 8012492:	b1a9      	cbz	r1, 80124c0 <rcl_node_options_copy+0x34>
 8012494:	4288      	cmp	r0, r1
 8012496:	4684      	mov	ip, r0
 8012498:	d012      	beq.n	80124c0 <rcl_node_options_copy+0x34>
 801249a:	4605      	mov	r5, r0
 801249c:	8a86      	ldrh	r6, [r0, #20]
 801249e:	468e      	mov	lr, r1
 80124a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80124a6:	682b      	ldr	r3, [r5, #0]
 80124a8:	f8ce 3000 	str.w	r3, [lr]
 80124ac:	f10c 0118 	add.w	r1, ip, #24
 80124b0:	2250      	movs	r2, #80	@ 0x50
 80124b2:	82a6      	strh	r6, [r4, #20]
 80124b4:	f104 0018 	add.w	r0, r4, #24
 80124b8:	f005 fbb7 	bl	8017c2a <memcpy>
 80124bc:	2000      	movs	r0, #0
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	200b      	movs	r0, #11
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	200b      	movs	r0, #11
 80124c6:	4770      	bx	lr

080124c8 <rcl_node_resolve_name>:
 80124c8:	b082      	sub	sp, #8
 80124ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ce:	b091      	sub	sp, #68	@ 0x44
 80124d0:	ac1a      	add	r4, sp, #104	@ 0x68
 80124d2:	e884 000c 	stmia.w	r4, {r2, r3}
 80124d6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80124da:	2800      	cmp	r0, #0
 80124dc:	d03b      	beq.n	8012556 <rcl_node_resolve_name+0x8e>
 80124de:	460c      	mov	r4, r1
 80124e0:	4605      	mov	r5, r0
 80124e2:	f7ff ffb7 	bl	8012454 <rcl_node_get_options>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	d037      	beq.n	801255a <rcl_node_resolve_name+0x92>
 80124ea:	4628      	mov	r0, r5
 80124ec:	f7ff ffa2 	bl	8012434 <rcl_node_get_name>
 80124f0:	4606      	mov	r6, r0
 80124f2:	4628      	mov	r0, r5
 80124f4:	f7ff ffa6 	bl	8012444 <rcl_node_get_namespace>
 80124f8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80124fc:	4681      	mov	r9, r0
 80124fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012502:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012504:	46ac      	mov	ip, r5
 8012506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801250a:	f8de 3000 	ldr.w	r3, [lr]
 801250e:	f8cc 3000 	str.w	r3, [ip]
 8012512:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012514:	b1fb      	cbz	r3, 8012556 <rcl_node_resolve_name+0x8e>
 8012516:	468a      	mov	sl, r1
 8012518:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801251c:	f002 fbd8 	bl	8014cd0 <rcutils_get_zero_initialized_string_map>
 8012520:	ab10      	add	r3, sp, #64	@ 0x40
 8012522:	9008      	str	r0, [sp, #32]
 8012524:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012528:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801252c:	2100      	movs	r1, #0
 801252e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012532:	a808      	add	r0, sp, #32
 8012534:	f002 fc44 	bl	8014dc0 <rcutils_string_map_init>
 8012538:	4607      	mov	r7, r0
 801253a:	b180      	cbz	r0, 801255e <rcl_node_resolve_name+0x96>
 801253c:	f7f9 fd38 	bl	800bfb0 <rcutils_get_error_string>
 8012540:	f7f9 fd4e 	bl	800bfe0 <rcutils_reset_error>
 8012544:	2f0a      	cmp	r7, #10
 8012546:	bf18      	it	ne
 8012548:	2701      	movne	r7, #1
 801254a:	4638      	mov	r0, r7
 801254c:	b011      	add	sp, #68	@ 0x44
 801254e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012552:	b002      	add	sp, #8
 8012554:	4770      	bx	lr
 8012556:	270b      	movs	r7, #11
 8012558:	e7f7      	b.n	801254a <rcl_node_resolve_name+0x82>
 801255a:	2701      	movs	r7, #1
 801255c:	e7f5      	b.n	801254a <rcl_node_resolve_name+0x82>
 801255e:	9009      	str	r0, [sp, #36]	@ 0x24
 8012560:	9007      	str	r0, [sp, #28]
 8012562:	a808      	add	r0, sp, #32
 8012564:	f004 fc90 	bl	8016e88 <rcl_get_default_topic_name_substitutions>
 8012568:	4607      	mov	r7, r0
 801256a:	b1a8      	cbz	r0, 8012598 <rcl_node_resolve_name+0xd0>
 801256c:	280a      	cmp	r0, #10
 801256e:	9c07      	ldr	r4, [sp, #28]
 8012570:	d000      	beq.n	8012574 <rcl_node_resolve_name+0xac>
 8012572:	2701      	movs	r7, #1
 8012574:	a808      	add	r0, sp, #32
 8012576:	f002 fc63 	bl	8014e40 <rcutils_string_map_fini>
 801257a:	2800      	cmp	r0, #0
 801257c:	d13d      	bne.n	80125fa <rcl_node_resolve_name+0x132>
 801257e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012580:	4659      	mov	r1, fp
 8012582:	47d0      	blx	sl
 8012584:	4659      	mov	r1, fp
 8012586:	4620      	mov	r0, r4
 8012588:	47d0      	blx	sl
 801258a:	f1b8 0f00 	cmp.w	r8, #0
 801258e:	d0dc      	beq.n	801254a <rcl_node_resolve_name+0x82>
 8012590:	2f67      	cmp	r7, #103	@ 0x67
 8012592:	bf08      	it	eq
 8012594:	2768      	moveq	r7, #104	@ 0x68
 8012596:	e7d8      	b.n	801254a <rcl_node_resolve_name+0x82>
 8012598:	ab09      	add	r3, sp, #36	@ 0x24
 801259a:	9305      	str	r3, [sp, #20]
 801259c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801259e:	46ec      	mov	ip, sp
 80125a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125a4:	682b      	ldr	r3, [r5, #0]
 80125a6:	f8cc 3000 	str.w	r3, [ip]
 80125aa:	464a      	mov	r2, r9
 80125ac:	4631      	mov	r1, r6
 80125ae:	4620      	mov	r0, r4
 80125b0:	ab08      	add	r3, sp, #32
 80125b2:	f004 fb0b 	bl	8016bcc <rcl_expand_topic_name>
 80125b6:	4607      	mov	r7, r0
 80125b8:	b9b8      	cbnz	r0, 80125ea <rcl_node_resolve_name+0x122>
 80125ba:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80125bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80125be:	4602      	mov	r2, r0
 80125c0:	a90a      	add	r1, sp, #40	@ 0x28
 80125c2:	4620      	mov	r0, r4
 80125c4:	f002 fd4c 	bl	8015060 <rmw_validate_full_topic_name>
 80125c8:	b988      	cbnz	r0, 80125ee <rcl_node_resolve_name+0x126>
 80125ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80125cc:	b9d5      	cbnz	r5, 8012604 <rcl_node_resolve_name+0x13c>
 80125ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80125d0:	a808      	add	r0, sp, #32
 80125d2:	601c      	str	r4, [r3, #0]
 80125d4:	f002 fc34 	bl	8014e40 <rcutils_string_map_fini>
 80125d8:	4607      	mov	r7, r0
 80125da:	b1a8      	cbz	r0, 8012608 <rcl_node_resolve_name+0x140>
 80125dc:	f7f9 fce8 	bl	800bfb0 <rcutils_get_error_string>
 80125e0:	462c      	mov	r4, r5
 80125e2:	f7f9 fcfd 	bl	800bfe0 <rcutils_reset_error>
 80125e6:	2701      	movs	r7, #1
 80125e8:	e7c9      	b.n	801257e <rcl_node_resolve_name+0xb6>
 80125ea:	9c07      	ldr	r4, [sp, #28]
 80125ec:	e7c2      	b.n	8012574 <rcl_node_resolve_name+0xac>
 80125ee:	f7f9 fcdf 	bl	800bfb0 <rcutils_get_error_string>
 80125f2:	2701      	movs	r7, #1
 80125f4:	f7f9 fcf4 	bl	800bfe0 <rcutils_reset_error>
 80125f8:	e7bc      	b.n	8012574 <rcl_node_resolve_name+0xac>
 80125fa:	f7f9 fcd9 	bl	800bfb0 <rcutils_get_error_string>
 80125fe:	f7f9 fcef 	bl	800bfe0 <rcutils_reset_error>
 8012602:	e7bc      	b.n	801257e <rcl_node_resolve_name+0xb6>
 8012604:	2767      	movs	r7, #103	@ 0x67
 8012606:	e7b5      	b.n	8012574 <rcl_node_resolve_name+0xac>
 8012608:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801260a:	4659      	mov	r1, fp
 801260c:	47d0      	blx	sl
 801260e:	4659      	mov	r1, fp
 8012610:	4638      	mov	r0, r7
 8012612:	47d0      	blx	sl
 8012614:	e799      	b.n	801254a <rcl_node_resolve_name+0x82>
 8012616:	bf00      	nop

08012618 <exact_match_lookup>:
 8012618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801261a:	f102 0708 	add.w	r7, r2, #8
 801261e:	460b      	mov	r3, r1
 8012620:	4614      	mov	r4, r2
 8012622:	4606      	mov	r6, r0
 8012624:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012628:	b085      	sub	sp, #20
 801262a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801262e:	4618      	mov	r0, r3
 8012630:	4919      	ldr	r1, [pc, #100]	@ (8012698 <exact_match_lookup+0x80>)
 8012632:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012636:	f002 f9e5 	bl	8014a04 <rcutils_join_path>
 801263a:	7833      	ldrb	r3, [r6, #0]
 801263c:	2b2f      	cmp	r3, #47	@ 0x2f
 801263e:	4605      	mov	r5, r0
 8012640:	d023      	beq.n	801268a <exact_match_lookup+0x72>
 8012642:	f104 030c 	add.w	r3, r4, #12
 8012646:	e893 0003 	ldmia.w	r3, {r0, r1}
 801264a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801264e:	1c70      	adds	r0, r6, #1
 8012650:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012654:	f002 f9dc 	bl	8014a10 <rcutils_to_native_path>
 8012658:	4606      	mov	r6, r0
 801265a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801265e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012662:	4631      	mov	r1, r6
 8012664:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012668:	4628      	mov	r0, r5
 801266a:	f002 f9cb 	bl	8014a04 <rcutils_join_path>
 801266e:	6862      	ldr	r2, [r4, #4]
 8012670:	6921      	ldr	r1, [r4, #16]
 8012672:	4603      	mov	r3, r0
 8012674:	4630      	mov	r0, r6
 8012676:	461e      	mov	r6, r3
 8012678:	4790      	blx	r2
 801267a:	4628      	mov	r0, r5
 801267c:	6863      	ldr	r3, [r4, #4]
 801267e:	6921      	ldr	r1, [r4, #16]
 8012680:	4798      	blx	r3
 8012682:	4635      	mov	r5, r6
 8012684:	4628      	mov	r0, r5
 8012686:	b005      	add	sp, #20
 8012688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801268a:	7873      	ldrb	r3, [r6, #1]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d1d8      	bne.n	8012642 <exact_match_lookup+0x2a>
 8012690:	4628      	mov	r0, r5
 8012692:	b005      	add	sp, #20
 8012694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012696:	bf00      	nop
 8012698:	08019154 	.word	0x08019154

0801269c <rcl_get_secure_root>:
 801269c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126a0:	b085      	sub	sp, #20
 80126a2:	b168      	cbz	r0, 80126c0 <rcl_get_secure_root+0x24>
 80126a4:	4607      	mov	r7, r0
 80126a6:	4608      	mov	r0, r1
 80126a8:	460c      	mov	r4, r1
 80126aa:	f7f9 fc73 	bl	800bf94 <rcutils_allocator_is_valid>
 80126ae:	b138      	cbz	r0, 80126c0 <rcl_get_secure_root+0x24>
 80126b0:	2300      	movs	r3, #0
 80126b2:	482d      	ldr	r0, [pc, #180]	@ (8012768 <rcl_get_secure_root+0xcc>)
 80126b4:	9303      	str	r3, [sp, #12]
 80126b6:	a903      	add	r1, sp, #12
 80126b8:	f002 f98a 	bl	80149d0 <rcutils_get_env>
 80126bc:	4605      	mov	r5, r0
 80126be:	b120      	cbz	r0, 80126ca <rcl_get_secure_root+0x2e>
 80126c0:	2500      	movs	r5, #0
 80126c2:	4628      	mov	r0, r5
 80126c4:	b005      	add	sp, #20
 80126c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126ca:	9b03      	ldr	r3, [sp, #12]
 80126cc:	781a      	ldrb	r2, [r3, #0]
 80126ce:	2a00      	cmp	r2, #0
 80126d0:	d0f6      	beq.n	80126c0 <rcl_get_secure_root+0x24>
 80126d2:	f104 090c 	add.w	r9, r4, #12
 80126d6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80126da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80126de:	4618      	mov	r0, r3
 80126e0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80126e4:	f002 fab6 	bl	8014c54 <rcutils_strdup>
 80126e8:	4680      	mov	r8, r0
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d0e8      	beq.n	80126c0 <rcl_get_secure_root+0x24>
 80126ee:	481f      	ldr	r0, [pc, #124]	@ (801276c <rcl_get_secure_root+0xd0>)
 80126f0:	9503      	str	r5, [sp, #12]
 80126f2:	a903      	add	r1, sp, #12
 80126f4:	f002 f96c 	bl	80149d0 <rcutils_get_env>
 80126f8:	b160      	cbz	r0, 8012714 <rcl_get_secure_root+0x78>
 80126fa:	2600      	movs	r6, #0
 80126fc:	6863      	ldr	r3, [r4, #4]
 80126fe:	6921      	ldr	r1, [r4, #16]
 8012700:	4630      	mov	r0, r6
 8012702:	4798      	blx	r3
 8012704:	4640      	mov	r0, r8
 8012706:	6863      	ldr	r3, [r4, #4]
 8012708:	6921      	ldr	r1, [r4, #16]
 801270a:	4798      	blx	r3
 801270c:	4628      	mov	r0, r5
 801270e:	b005      	add	sp, #20
 8012710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012714:	9b03      	ldr	r3, [sp, #12]
 8012716:	781e      	ldrb	r6, [r3, #0]
 8012718:	b1f6      	cbz	r6, 8012758 <rcl_get_secure_root+0xbc>
 801271a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801271e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012722:	4618      	mov	r0, r3
 8012724:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012728:	f002 fa94 	bl	8014c54 <rcutils_strdup>
 801272c:	4606      	mov	r6, r0
 801272e:	2800      	cmp	r0, #0
 8012730:	d0e3      	beq.n	80126fa <rcl_get_secure_root+0x5e>
 8012732:	4622      	mov	r2, r4
 8012734:	4641      	mov	r1, r8
 8012736:	f7ff ff6f 	bl	8012618 <exact_match_lookup>
 801273a:	4605      	mov	r5, r0
 801273c:	2d00      	cmp	r5, #0
 801273e:	d0dd      	beq.n	80126fc <rcl_get_secure_root+0x60>
 8012740:	4628      	mov	r0, r5
 8012742:	f002 f95d 	bl	8014a00 <rcutils_is_directory>
 8012746:	4603      	mov	r3, r0
 8012748:	2800      	cmp	r0, #0
 801274a:	d1d7      	bne.n	80126fc <rcl_get_secure_root+0x60>
 801274c:	4628      	mov	r0, r5
 801274e:	6921      	ldr	r1, [r4, #16]
 8012750:	461d      	mov	r5, r3
 8012752:	6863      	ldr	r3, [r4, #4]
 8012754:	4798      	blx	r3
 8012756:	e7d1      	b.n	80126fc <rcl_get_secure_root+0x60>
 8012758:	4622      	mov	r2, r4
 801275a:	4638      	mov	r0, r7
 801275c:	4641      	mov	r1, r8
 801275e:	f7ff ff5b 	bl	8012618 <exact_match_lookup>
 8012762:	4605      	mov	r5, r0
 8012764:	e7ea      	b.n	801273c <rcl_get_secure_root+0xa0>
 8012766:	bf00      	nop
 8012768:	08019160 	.word	0x08019160
 801276c:	08019178 	.word	0x08019178

08012770 <rcl_get_security_options_from_environment>:
 8012770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012774:	b082      	sub	sp, #8
 8012776:	2300      	movs	r3, #0
 8012778:	4606      	mov	r6, r0
 801277a:	460f      	mov	r7, r1
 801277c:	4820      	ldr	r0, [pc, #128]	@ (8012800 <rcl_get_security_options_from_environment+0x90>)
 801277e:	9301      	str	r3, [sp, #4]
 8012780:	a901      	add	r1, sp, #4
 8012782:	4690      	mov	r8, r2
 8012784:	f002 f924 	bl	80149d0 <rcutils_get_env>
 8012788:	b120      	cbz	r0, 8012794 <rcl_get_security_options_from_environment+0x24>
 801278a:	2501      	movs	r5, #1
 801278c:	4628      	mov	r0, r5
 801278e:	b002      	add	sp, #8
 8012790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012794:	491b      	ldr	r1, [pc, #108]	@ (8012804 <rcl_get_security_options_from_environment+0x94>)
 8012796:	4604      	mov	r4, r0
 8012798:	9801      	ldr	r0, [sp, #4]
 801279a:	f7ed fd41 	bl	8000220 <strcmp>
 801279e:	4605      	mov	r5, r0
 80127a0:	b9e8      	cbnz	r0, 80127de <rcl_get_security_options_from_environment+0x6e>
 80127a2:	9001      	str	r0, [sp, #4]
 80127a4:	f1b8 0f00 	cmp.w	r8, #0
 80127a8:	d020      	beq.n	80127ec <rcl_get_security_options_from_environment+0x7c>
 80127aa:	4817      	ldr	r0, [pc, #92]	@ (8012808 <rcl_get_security_options_from_environment+0x98>)
 80127ac:	a901      	add	r1, sp, #4
 80127ae:	f002 f90f 	bl	80149d0 <rcutils_get_env>
 80127b2:	2800      	cmp	r0, #0
 80127b4:	d1e9      	bne.n	801278a <rcl_get_security_options_from_environment+0x1a>
 80127b6:	4915      	ldr	r1, [pc, #84]	@ (801280c <rcl_get_security_options_from_environment+0x9c>)
 80127b8:	9801      	ldr	r0, [sp, #4]
 80127ba:	f7ed fd31 	bl	8000220 <strcmp>
 80127be:	fab0 f080 	clz	r0, r0
 80127c2:	0940      	lsrs	r0, r0, #5
 80127c4:	f888 0000 	strb.w	r0, [r8]
 80127c8:	4639      	mov	r1, r7
 80127ca:	4630      	mov	r0, r6
 80127cc:	f7ff ff66 	bl	801269c <rcl_get_secure_root>
 80127d0:	b170      	cbz	r0, 80127f0 <rcl_get_security_options_from_environment+0x80>
 80127d2:	f8c8 0004 	str.w	r0, [r8, #4]
 80127d6:	4628      	mov	r0, r5
 80127d8:	b002      	add	sp, #8
 80127da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127de:	4625      	mov	r5, r4
 80127e0:	4628      	mov	r0, r5
 80127e2:	f888 4000 	strb.w	r4, [r8]
 80127e6:	b002      	add	sp, #8
 80127e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ec:	250b      	movs	r5, #11
 80127ee:	e7cd      	b.n	801278c <rcl_get_security_options_from_environment+0x1c>
 80127f0:	f898 5000 	ldrb.w	r5, [r8]
 80127f4:	f1a5 0501 	sub.w	r5, r5, #1
 80127f8:	fab5 f585 	clz	r5, r5
 80127fc:	096d      	lsrs	r5, r5, #5
 80127fe:	e7c5      	b.n	801278c <rcl_get_security_options_from_environment+0x1c>
 8012800:	08019118 	.word	0x08019118
 8012804:	0801912c 	.word	0x0801912c
 8012808:	08019134 	.word	0x08019134
 801280c:	0801914c 	.word	0x0801914c

08012810 <rcl_service_get_rmw_handle>:
 8012810:	b118      	cbz	r0, 801281a <rcl_service_get_rmw_handle+0xa>
 8012812:	6800      	ldr	r0, [r0, #0]
 8012814:	b108      	cbz	r0, 801281a <rcl_service_get_rmw_handle+0xa>
 8012816:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801281a:	4770      	bx	lr

0801281c <rcl_take_request>:
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	468e      	mov	lr, r1
 8012820:	460c      	mov	r4, r1
 8012822:	4616      	mov	r6, r2
 8012824:	4605      	mov	r5, r0
 8012826:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801282a:	b08c      	sub	sp, #48	@ 0x30
 801282c:	f10d 0c18 	add.w	ip, sp, #24
 8012830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012834:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012838:	e88c 0003 	stmia.w	ip, {r0, r1}
 801283c:	b30d      	cbz	r5, 8012882 <rcl_take_request+0x66>
 801283e:	682b      	ldr	r3, [r5, #0]
 8012840:	b1fb      	cbz	r3, 8012882 <rcl_take_request+0x66>
 8012842:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012846:	b1e0      	cbz	r0, 8012882 <rcl_take_request+0x66>
 8012848:	b336      	cbz	r6, 8012898 <rcl_take_request+0x7c>
 801284a:	2300      	movs	r3, #0
 801284c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012850:	4632      	mov	r2, r6
 8012852:	f10d 0307 	add.w	r3, sp, #7
 8012856:	a902      	add	r1, sp, #8
 8012858:	f002 ff58 	bl	801570c <rmw_take_request>
 801285c:	4605      	mov	r5, r0
 801285e:	b198      	cbz	r0, 8012888 <rcl_take_request+0x6c>
 8012860:	280a      	cmp	r0, #10
 8012862:	bf18      	it	ne
 8012864:	2501      	movne	r5, #1
 8012866:	f10d 0e18 	add.w	lr, sp, #24
 801286a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801286e:	46a4      	mov	ip, r4
 8012870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012874:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012878:	e88c 0003 	stmia.w	ip, {r0, r1}
 801287c:	4628      	mov	r0, r5
 801287e:	b00c      	add	sp, #48	@ 0x30
 8012880:	bd70      	pop	{r4, r5, r6, pc}
 8012882:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012886:	e7ee      	b.n	8012866 <rcl_take_request+0x4a>
 8012888:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801288c:	f240 2359 	movw	r3, #601	@ 0x259
 8012890:	2a00      	cmp	r2, #0
 8012892:	bf08      	it	eq
 8012894:	461d      	moveq	r5, r3
 8012896:	e7e6      	b.n	8012866 <rcl_take_request+0x4a>
 8012898:	250b      	movs	r5, #11
 801289a:	e7e4      	b.n	8012866 <rcl_take_request+0x4a>

0801289c <rcl_send_response>:
 801289c:	b170      	cbz	r0, 80128bc <rcl_send_response+0x20>
 801289e:	6800      	ldr	r0, [r0, #0]
 80128a0:	b160      	cbz	r0, 80128bc <rcl_send_response+0x20>
 80128a2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80128a6:	b148      	cbz	r0, 80128bc <rcl_send_response+0x20>
 80128a8:	b159      	cbz	r1, 80128c2 <rcl_send_response+0x26>
 80128aa:	b510      	push	{r4, lr}
 80128ac:	b15a      	cbz	r2, 80128c6 <rcl_send_response+0x2a>
 80128ae:	f002 ff8b 	bl	80157c8 <rmw_send_response>
 80128b2:	b110      	cbz	r0, 80128ba <rcl_send_response+0x1e>
 80128b4:	2802      	cmp	r0, #2
 80128b6:	bf18      	it	ne
 80128b8:	2001      	movne	r0, #1
 80128ba:	bd10      	pop	{r4, pc}
 80128bc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80128c0:	4770      	bx	lr
 80128c2:	200b      	movs	r0, #11
 80128c4:	4770      	bx	lr
 80128c6:	200b      	movs	r0, #11
 80128c8:	bd10      	pop	{r4, pc}
 80128ca:	bf00      	nop

080128cc <rcl_service_is_valid>:
 80128cc:	b130      	cbz	r0, 80128dc <rcl_service_is_valid+0x10>
 80128ce:	6800      	ldr	r0, [r0, #0]
 80128d0:	b120      	cbz	r0, 80128dc <rcl_service_is_valid+0x10>
 80128d2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80128d6:	3800      	subs	r0, #0
 80128d8:	bf18      	it	ne
 80128da:	2001      	movne	r0, #1
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop

080128e0 <rcl_take>:
 80128e0:	2800      	cmp	r0, #0
 80128e2:	d04a      	beq.n	801297a <rcl_take+0x9a>
 80128e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e8:	4604      	mov	r4, r0
 80128ea:	6800      	ldr	r0, [r0, #0]
 80128ec:	b0a4      	sub	sp, #144	@ 0x90
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d03b      	beq.n	801296a <rcl_take+0x8a>
 80128f2:	461f      	mov	r7, r3
 80128f4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d036      	beq.n	801296a <rcl_take+0x8a>
 80128fc:	460e      	mov	r6, r1
 80128fe:	2900      	cmp	r1, #0
 8012900:	d039      	beq.n	8012976 <rcl_take+0x96>
 8012902:	4615      	mov	r5, r2
 8012904:	2a00      	cmp	r2, #0
 8012906:	d03c      	beq.n	8012982 <rcl_take+0xa2>
 8012908:	a802      	add	r0, sp, #8
 801290a:	f002 fba1 	bl	8015050 <rmw_get_zero_initialized_message_info>
 801290e:	f10d 0c08 	add.w	ip, sp, #8
 8012912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012916:	46ae      	mov	lr, r5
 8012918:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801291c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012920:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012924:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012928:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801292c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012930:	f04f 0800 	mov.w	r8, #0
 8012934:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012938:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801293c:	6822      	ldr	r2, [r4, #0]
 801293e:	462b      	mov	r3, r5
 8012940:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012944:	9700      	str	r7, [sp, #0]
 8012946:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801294a:	4631      	mov	r1, r6
 801294c:	f002 ffe2 	bl	8015914 <rmw_take_with_info>
 8012950:	4603      	mov	r3, r0
 8012952:	b9c0      	cbnz	r0, 8012986 <rcl_take+0xa6>
 8012954:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012958:	f240 1291 	movw	r2, #401	@ 0x191
 801295c:	2900      	cmp	r1, #0
 801295e:	bf08      	it	eq
 8012960:	4613      	moveq	r3, r2
 8012962:	4618      	mov	r0, r3
 8012964:	b024      	add	sp, #144	@ 0x90
 8012966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801296a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801296e:	4618      	mov	r0, r3
 8012970:	b024      	add	sp, #144	@ 0x90
 8012972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012976:	230b      	movs	r3, #11
 8012978:	e7f3      	b.n	8012962 <rcl_take+0x82>
 801297a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801297e:	4618      	mov	r0, r3
 8012980:	4770      	bx	lr
 8012982:	ad14      	add	r5, sp, #80	@ 0x50
 8012984:	e7c0      	b.n	8012908 <rcl_take+0x28>
 8012986:	f7ff fa51 	bl	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 801298a:	4603      	mov	r3, r0
 801298c:	e7e9      	b.n	8012962 <rcl_take+0x82>
 801298e:	bf00      	nop

08012990 <rcl_subscription_get_rmw_handle>:
 8012990:	b118      	cbz	r0, 801299a <rcl_subscription_get_rmw_handle+0xa>
 8012992:	6800      	ldr	r0, [r0, #0]
 8012994:	b108      	cbz	r0, 801299a <rcl_subscription_get_rmw_handle+0xa>
 8012996:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801299a:	4770      	bx	lr

0801299c <rcl_subscription_is_valid>:
 801299c:	b130      	cbz	r0, 80129ac <rcl_subscription_is_valid+0x10>
 801299e:	6800      	ldr	r0, [r0, #0]
 80129a0:	b120      	cbz	r0, 80129ac <rcl_subscription_is_valid+0x10>
 80129a2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80129a6:	3800      	subs	r0, #0
 80129a8:	bf18      	it	ne
 80129aa:	2001      	movne	r0, #1
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop

080129b0 <rcl_get_system_time>:
 80129b0:	4608      	mov	r0, r1
 80129b2:	f7f9 bb31 	b.w	800c018 <rcutils_system_time_now>
 80129b6:	bf00      	nop

080129b8 <rcl_get_steady_time>:
 80129b8:	4608      	mov	r0, r1
 80129ba:	f7f9 bb55 	b.w	800c068 <rcutils_steady_time_now>
 80129be:	bf00      	nop

080129c0 <rcl_get_ros_time>:
 80129c0:	7a03      	ldrb	r3, [r0, #8]
 80129c2:	b510      	push	{r4, lr}
 80129c4:	460c      	mov	r4, r1
 80129c6:	b133      	cbz	r3, 80129d6 <rcl_get_ros_time+0x16>
 80129c8:	2105      	movs	r1, #5
 80129ca:	f001 ff5d 	bl	8014888 <__atomic_load_8>
 80129ce:	e9c4 0100 	strd	r0, r1, [r4]
 80129d2:	2000      	movs	r0, #0
 80129d4:	bd10      	pop	{r4, pc}
 80129d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129da:	4608      	mov	r0, r1
 80129dc:	f7f9 bb1c 	b.w	800c018 <rcutils_system_time_now>

080129e0 <rcl_clock_init>:
 80129e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e2:	4605      	mov	r5, r0
 80129e4:	4610      	mov	r0, r2
 80129e6:	4614      	mov	r4, r2
 80129e8:	460e      	mov	r6, r1
 80129ea:	f7f9 fad3 	bl	800bf94 <rcutils_allocator_is_valid>
 80129ee:	b128      	cbz	r0, 80129fc <rcl_clock_init+0x1c>
 80129f0:	2d03      	cmp	r5, #3
 80129f2:	d803      	bhi.n	80129fc <rcl_clock_init+0x1c>
 80129f4:	e8df f005 	tbb	[pc, r5]
 80129f8:	06532e1d 	.word	0x06532e1d
 80129fc:	f04f 0c0b 	mov.w	ip, #11
 8012a00:	4660      	mov	r0, ip
 8012a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a04:	2e00      	cmp	r6, #0
 8012a06:	d0f9      	beq.n	80129fc <rcl_clock_init+0x1c>
 8012a08:	2c00      	cmp	r4, #0
 8012a0a:	d0f7      	beq.n	80129fc <rcl_clock_init+0x1c>
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012a12:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012ac8 <rcl_clock_init+0xe8>
 8012a16:	6133      	str	r3, [r6, #16]
 8012a18:	f106 0514 	add.w	r5, r6, #20
 8012a1c:	469c      	mov	ip, r3
 8012a1e:	2703      	movs	r7, #3
 8012a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a24:	6823      	ldr	r3, [r4, #0]
 8012a26:	602b      	str	r3, [r5, #0]
 8012a28:	7037      	strb	r7, [r6, #0]
 8012a2a:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012a2e:	4660      	mov	r0, ip
 8012a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a32:	2e00      	cmp	r6, #0
 8012a34:	d0e2      	beq.n	80129fc <rcl_clock_init+0x1c>
 8012a36:	2300      	movs	r3, #0
 8012a38:	7033      	strb	r3, [r6, #0]
 8012a3a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012a3e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012a42:	469c      	mov	ip, r3
 8012a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a46:	f106 0514 	add.w	r5, r6, #20
 8012a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a4c:	6823      	ldr	r3, [r4, #0]
 8012a4e:	602b      	str	r3, [r5, #0]
 8012a50:	4660      	mov	r0, ip
 8012a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a54:	2e00      	cmp	r6, #0
 8012a56:	d0d1      	beq.n	80129fc <rcl_clock_init+0x1c>
 8012a58:	2c00      	cmp	r4, #0
 8012a5a:	d0cf      	beq.n	80129fc <rcl_clock_init+0x1c>
 8012a5c:	2700      	movs	r7, #0
 8012a5e:	7037      	strb	r7, [r6, #0]
 8012a60:	46a4      	mov	ip, r4
 8012a62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a66:	f106 0514 	add.w	r5, r6, #20
 8012a6a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012a6e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a74:	f8dc 3000 	ldr.w	r3, [ip]
 8012a78:	602b      	str	r3, [r5, #0]
 8012a7a:	6921      	ldr	r1, [r4, #16]
 8012a7c:	6823      	ldr	r3, [r4, #0]
 8012a7e:	2010      	movs	r0, #16
 8012a80:	4798      	blx	r3
 8012a82:	6130      	str	r0, [r6, #16]
 8012a84:	b1d0      	cbz	r0, 8012abc <rcl_clock_init+0xdc>
 8012a86:	2200      	movs	r2, #0
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e9c0 2300 	strd	r2, r3, [r0]
 8012a8e:	2301      	movs	r3, #1
 8012a90:	7207      	strb	r7, [r0, #8]
 8012a92:	4a0c      	ldr	r2, [pc, #48]	@ (8012ac4 <rcl_clock_init+0xe4>)
 8012a94:	7033      	strb	r3, [r6, #0]
 8012a96:	46bc      	mov	ip, r7
 8012a98:	60f2      	str	r2, [r6, #12]
 8012a9a:	4660      	mov	r0, ip
 8012a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a9e:	2e00      	cmp	r6, #0
 8012aa0:	d0ac      	beq.n	80129fc <rcl_clock_init+0x1c>
 8012aa2:	2c00      	cmp	r4, #0
 8012aa4:	d0aa      	beq.n	80129fc <rcl_clock_init+0x1c>
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012aac:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012acc <rcl_clock_init+0xec>
 8012ab0:	6133      	str	r3, [r6, #16]
 8012ab2:	f106 0514 	add.w	r5, r6, #20
 8012ab6:	469c      	mov	ip, r3
 8012ab8:	2702      	movs	r7, #2
 8012aba:	e7b1      	b.n	8012a20 <rcl_clock_init+0x40>
 8012abc:	f04f 0c0a 	mov.w	ip, #10
 8012ac0:	e79e      	b.n	8012a00 <rcl_clock_init+0x20>
 8012ac2:	bf00      	nop
 8012ac4:	080129c1 	.word	0x080129c1
 8012ac8:	080129b9 	.word	0x080129b9
 8012acc:	080129b1 	.word	0x080129b1

08012ad0 <rcl_clock_get_now>:
 8012ad0:	b140      	cbz	r0, 8012ae4 <rcl_clock_get_now+0x14>
 8012ad2:	b139      	cbz	r1, 8012ae4 <rcl_clock_get_now+0x14>
 8012ad4:	7803      	ldrb	r3, [r0, #0]
 8012ad6:	b11b      	cbz	r3, 8012ae0 <rcl_clock_get_now+0x10>
 8012ad8:	68c3      	ldr	r3, [r0, #12]
 8012ada:	b10b      	cbz	r3, 8012ae0 <rcl_clock_get_now+0x10>
 8012adc:	6900      	ldr	r0, [r0, #16]
 8012ade:	4718      	bx	r3
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	4770      	bx	lr
 8012ae4:	200b      	movs	r0, #11
 8012ae6:	4770      	bx	lr

08012ae8 <rcl_clock_add_jump_callback>:
 8012ae8:	b082      	sub	sp, #8
 8012aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aee:	a906      	add	r1, sp, #24
 8012af0:	e881 000c 	stmia.w	r1, {r2, r3}
 8012af4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012af8:	b320      	cbz	r0, 8012b44 <rcl_clock_add_jump_callback+0x5c>
 8012afa:	4604      	mov	r4, r0
 8012afc:	3014      	adds	r0, #20
 8012afe:	f7f9 fa49 	bl	800bf94 <rcutils_allocator_is_valid>
 8012b02:	b1f8      	cbz	r0, 8012b44 <rcl_clock_add_jump_callback+0x5c>
 8012b04:	b1f6      	cbz	r6, 8012b44 <rcl_clock_add_jump_callback+0x5c>
 8012b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	db1b      	blt.n	8012b44 <rcl_clock_add_jump_callback+0x5c>
 8012b0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012b10:	2a01      	cmp	r2, #1
 8012b12:	f173 0300 	sbcs.w	r3, r3, #0
 8012b16:	da15      	bge.n	8012b44 <rcl_clock_add_jump_callback+0x5c>
 8012b18:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012b1c:	2f00      	cmp	r7, #0
 8012b1e:	d042      	beq.n	8012ba6 <rcl_clock_add_jump_callback+0xbe>
 8012b20:	2300      	movs	r3, #0
 8012b22:	4602      	mov	r2, r0
 8012b24:	e003      	b.n	8012b2e <rcl_clock_add_jump_callback+0x46>
 8012b26:	42bb      	cmp	r3, r7
 8012b28:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012b2c:	d011      	beq.n	8012b52 <rcl_clock_add_jump_callback+0x6a>
 8012b2e:	6811      	ldr	r1, [r2, #0]
 8012b30:	42b1      	cmp	r1, r6
 8012b32:	f103 0301 	add.w	r3, r3, #1
 8012b36:	d1f6      	bne.n	8012b26 <rcl_clock_add_jump_callback+0x3e>
 8012b38:	6a11      	ldr	r1, [r2, #32]
 8012b3a:	42a9      	cmp	r1, r5
 8012b3c:	d1f3      	bne.n	8012b26 <rcl_clock_add_jump_callback+0x3e>
 8012b3e:	f04f 0e01 	mov.w	lr, #1
 8012b42:	e001      	b.n	8012b48 <rcl_clock_add_jump_callback+0x60>
 8012b44:	f04f 0e0b 	mov.w	lr, #11
 8012b48:	4670      	mov	r0, lr
 8012b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4e:	b002      	add	sp, #8
 8012b50:	4770      	bx	lr
 8012b52:	3301      	adds	r3, #1
 8012b54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012b58:	00d9      	lsls	r1, r3, #3
 8012b5a:	69e3      	ldr	r3, [r4, #28]
 8012b5c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012b5e:	4798      	blx	r3
 8012b60:	b1f0      	cbz	r0, 8012ba0 <rcl_clock_add_jump_callback+0xb8>
 8012b62:	68a3      	ldr	r3, [r4, #8]
 8012b64:	6060      	str	r0, [r4, #4]
 8012b66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012b6a:	f10d 0c18 	add.w	ip, sp, #24
 8012b6e:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012b72:	f103 0801 	add.w	r8, r3, #1
 8012b76:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012b7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b7e:	f106 0708 	add.w	r7, r6, #8
 8012b82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012b84:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012b88:	f04f 0e00 	mov.w	lr, #0
 8012b8c:	e887 0003 	stmia.w	r7, {r0, r1}
 8012b90:	6235      	str	r5, [r6, #32]
 8012b92:	4670      	mov	r0, lr
 8012b94:	f8c4 8008 	str.w	r8, [r4, #8]
 8012b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9c:	b002      	add	sp, #8
 8012b9e:	4770      	bx	lr
 8012ba0:	f04f 0e0a 	mov.w	lr, #10
 8012ba4:	e7d0      	b.n	8012b48 <rcl_clock_add_jump_callback+0x60>
 8012ba6:	2128      	movs	r1, #40	@ 0x28
 8012ba8:	e7d7      	b.n	8012b5a <rcl_clock_add_jump_callback+0x72>
 8012baa:	bf00      	nop

08012bac <rcl_clock_remove_jump_callback>:
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d057      	beq.n	8012c60 <rcl_clock_remove_jump_callback+0xb4>
 8012bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb4:	4605      	mov	r5, r0
 8012bb6:	3014      	adds	r0, #20
 8012bb8:	4688      	mov	r8, r1
 8012bba:	4692      	mov	sl, r2
 8012bbc:	f7f9 f9ea 	bl	800bf94 <rcutils_allocator_is_valid>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	d03b      	beq.n	8012c3c <rcl_clock_remove_jump_callback+0x90>
 8012bc4:	f1b8 0f00 	cmp.w	r8, #0
 8012bc8:	d038      	beq.n	8012c3c <rcl_clock_remove_jump_callback+0x90>
 8012bca:	68ae      	ldr	r6, [r5, #8]
 8012bcc:	b166      	cbz	r6, 8012be8 <rcl_clock_remove_jump_callback+0x3c>
 8012bce:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012bd2:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012bd6:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012bda:	464c      	mov	r4, r9
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	4543      	cmp	r3, r8
 8012be0:	d005      	beq.n	8012bee <rcl_clock_remove_jump_callback+0x42>
 8012be2:	3428      	adds	r4, #40	@ 0x28
 8012be4:	42a7      	cmp	r7, r4
 8012be6:	d1f9      	bne.n	8012bdc <rcl_clock_remove_jump_callback+0x30>
 8012be8:	2001      	movs	r0, #1
 8012bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bee:	6a23      	ldr	r3, [r4, #32]
 8012bf0:	3428      	adds	r4, #40	@ 0x28
 8012bf2:	42bc      	cmp	r4, r7
 8012bf4:	d02d      	beq.n	8012c52 <rcl_clock_remove_jump_callback+0xa6>
 8012bf6:	4553      	cmp	r3, sl
 8012bf8:	d1f0      	bne.n	8012bdc <rcl_clock_remove_jump_callback+0x30>
 8012bfa:	46a6      	mov	lr, r4
 8012bfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c00:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012c04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c10:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012c14:	3428      	adds	r4, #40	@ 0x28
 8012c16:	42a7      	cmp	r7, r4
 8012c18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012c1c:	d1ed      	bne.n	8012bfa <rcl_clock_remove_jump_callback+0x4e>
 8012c1e:	3e01      	subs	r6, #1
 8012c20:	60ae      	str	r6, [r5, #8]
 8012c22:	b176      	cbz	r6, 8012c42 <rcl_clock_remove_jump_callback+0x96>
 8012c24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012c28:	69eb      	ldr	r3, [r5, #28]
 8012c2a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012c2c:	00f1      	lsls	r1, r6, #3
 8012c2e:	4648      	mov	r0, r9
 8012c30:	4798      	blx	r3
 8012c32:	b1b8      	cbz	r0, 8012c64 <rcl_clock_remove_jump_callback+0xb8>
 8012c34:	6068      	str	r0, [r5, #4]
 8012c36:	2000      	movs	r0, #0
 8012c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c3c:	200b      	movs	r0, #11
 8012c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c42:	4648      	mov	r0, r9
 8012c44:	69ab      	ldr	r3, [r5, #24]
 8012c46:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012c48:	4798      	blx	r3
 8012c4a:	606e      	str	r6, [r5, #4]
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c52:	4553      	cmp	r3, sl
 8012c54:	d1c8      	bne.n	8012be8 <rcl_clock_remove_jump_callback+0x3c>
 8012c56:	3e01      	subs	r6, #1
 8012c58:	60ae      	str	r6, [r5, #8]
 8012c5a:	2e00      	cmp	r6, #0
 8012c5c:	d1e2      	bne.n	8012c24 <rcl_clock_remove_jump_callback+0x78>
 8012c5e:	e7f0      	b.n	8012c42 <rcl_clock_remove_jump_callback+0x96>
 8012c60:	200b      	movs	r0, #11
 8012c62:	4770      	bx	lr
 8012c64:	200a      	movs	r0, #10
 8012c66:	e7ea      	b.n	8012c3e <rcl_clock_remove_jump_callback+0x92>

08012c68 <_rcl_timer_time_jump>:
 8012c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c6c:	4605      	mov	r5, r0
 8012c6e:	b084      	sub	sp, #16
 8012c70:	4614      	mov	r4, r2
 8012c72:	b131      	cbz	r1, 8012c82 <_rcl_timer_time_jump+0x1a>
 8012c74:	7803      	ldrb	r3, [r0, #0]
 8012c76:	3b02      	subs	r3, #2
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d93f      	bls.n	8012cfc <_rcl_timer_time_jump+0x94>
 8012c7c:	b004      	add	sp, #16
 8012c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c82:	6813      	ldr	r3, [r2, #0]
 8012c84:	a902      	add	r1, sp, #8
 8012c86:	6818      	ldr	r0, [r3, #0]
 8012c88:	f7ff ff22 	bl	8012ad0 <rcl_clock_get_now>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d1f5      	bne.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012c90:	6820      	ldr	r0, [r4, #0]
 8012c92:	2105      	movs	r1, #5
 8012c94:	3020      	adds	r0, #32
 8012c96:	f001 fdf7 	bl	8014888 <__atomic_load_8>
 8012c9a:	6823      	ldr	r3, [r4, #0]
 8012c9c:	4681      	mov	r9, r0
 8012c9e:	4688      	mov	r8, r1
 8012ca0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012ca4:	2105      	movs	r1, #5
 8012ca6:	f001 fdef 	bl	8014888 <__atomic_load_8>
 8012caa:	4607      	mov	r7, r0
 8012cac:	6820      	ldr	r0, [r4, #0]
 8012cae:	460e      	mov	r6, r1
 8012cb0:	3018      	adds	r0, #24
 8012cb2:	2105      	movs	r1, #5
 8012cb4:	f001 fde8 	bl	8014888 <__atomic_load_8>
 8012cb8:	782b      	ldrb	r3, [r5, #0]
 8012cba:	9a02      	ldr	r2, [sp, #8]
 8012cbc:	3b02      	subs	r3, #2
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	460d      	mov	r5, r1
 8012cc2:	9b03      	ldr	r3, [sp, #12]
 8012cc4:	4682      	mov	sl, r0
 8012cc6:	d937      	bls.n	8012d38 <_rcl_timer_time_jump+0xd0>
 8012cc8:	42ba      	cmp	r2, r7
 8012cca:	eb73 0106 	sbcs.w	r1, r3, r6
 8012cce:	da5f      	bge.n	8012d90 <_rcl_timer_time_jump+0x128>
 8012cd0:	454a      	cmp	r2, r9
 8012cd2:	eb73 0108 	sbcs.w	r1, r3, r8
 8012cd6:	dad1      	bge.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012cd8:	6820      	ldr	r0, [r4, #0]
 8012cda:	eb1a 0202 	adds.w	r2, sl, r2
 8012cde:	eb43 0305 	adc.w	r3, r3, r5
 8012ce2:	2505      	movs	r5, #5
 8012ce4:	3028      	adds	r0, #40	@ 0x28
 8012ce6:	9500      	str	r5, [sp, #0]
 8012ce8:	f001 fe04 	bl	80148f4 <__atomic_store_8>
 8012cec:	6820      	ldr	r0, [r4, #0]
 8012cee:	9500      	str	r5, [sp, #0]
 8012cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cf4:	3020      	adds	r0, #32
 8012cf6:	f001 fdfd 	bl	80148f4 <__atomic_store_8>
 8012cfa:	e7bf      	b.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012cfc:	6813      	ldr	r3, [r2, #0]
 8012cfe:	a902      	add	r1, sp, #8
 8012d00:	6818      	ldr	r0, [r3, #0]
 8012d02:	f7ff fee5 	bl	8012ad0 <rcl_clock_get_now>
 8012d06:	2800      	cmp	r0, #0
 8012d08:	d1b8      	bne.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d0e:	4313      	orrs	r3, r2
 8012d10:	d0b4      	beq.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012d12:	6820      	ldr	r0, [r4, #0]
 8012d14:	2105      	movs	r1, #5
 8012d16:	3028      	adds	r0, #40	@ 0x28
 8012d18:	f001 fdb6 	bl	8014888 <__atomic_load_8>
 8012d1c:	9d02      	ldr	r5, [sp, #8]
 8012d1e:	9b03      	ldr	r3, [sp, #12]
 8012d20:	4602      	mov	r2, r0
 8012d22:	6820      	ldr	r0, [r4, #0]
 8012d24:	1b52      	subs	r2, r2, r5
 8012d26:	f04f 0405 	mov.w	r4, #5
 8012d2a:	9400      	str	r4, [sp, #0]
 8012d2c:	eb61 0303 	sbc.w	r3, r1, r3
 8012d30:	3030      	adds	r0, #48	@ 0x30
 8012d32:	f001 fddf 	bl	80148f4 <__atomic_store_8>
 8012d36:	e7a1      	b.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012d38:	4313      	orrs	r3, r2
 8012d3a:	d09f      	beq.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012d3c:	6820      	ldr	r0, [r4, #0]
 8012d3e:	f04f 0805 	mov.w	r8, #5
 8012d42:	2300      	movs	r3, #0
 8012d44:	f8cd 8000 	str.w	r8, [sp]
 8012d48:	3030      	adds	r0, #48	@ 0x30
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	f001 fe08 	bl	8014960 <__atomic_exchange_8>
 8012d50:	ea51 0300 	orrs.w	r3, r1, r0
 8012d54:	4606      	mov	r6, r0
 8012d56:	460f      	mov	r7, r1
 8012d58:	d090      	beq.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012d5a:	9a02      	ldr	r2, [sp, #8]
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	f8cd 8000 	str.w	r8, [sp]
 8012d62:	1a12      	subs	r2, r2, r0
 8012d64:	6820      	ldr	r0, [r4, #0]
 8012d66:	eb63 0301 	sbc.w	r3, r3, r1
 8012d6a:	eb12 020a 	adds.w	r2, r2, sl
 8012d6e:	eb43 0305 	adc.w	r3, r3, r5
 8012d72:	3028      	adds	r0, #40	@ 0x28
 8012d74:	f001 fdbe 	bl	80148f4 <__atomic_store_8>
 8012d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d7c:	f8cd 8000 	str.w	r8, [sp]
 8012d80:	6820      	ldr	r0, [r4, #0]
 8012d82:	1b92      	subs	r2, r2, r6
 8012d84:	eb63 0307 	sbc.w	r3, r3, r7
 8012d88:	3020      	adds	r0, #32
 8012d8a:	f001 fdb3 	bl	80148f4 <__atomic_store_8>
 8012d8e:	e775      	b.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012d90:	6820      	ldr	r0, [r4, #0]
 8012d92:	3008      	adds	r0, #8
 8012d94:	f004 f976 	bl	8017084 <rcl_trigger_guard_condition>
 8012d98:	e770      	b.n	8012c7c <_rcl_timer_time_jump+0x14>
 8012d9a:	bf00      	nop

08012d9c <rcl_get_zero_initialized_timer>:
 8012d9c:	4b01      	ldr	r3, [pc, #4]	@ (8012da4 <rcl_get_zero_initialized_timer+0x8>)
 8012d9e:	6818      	ldr	r0, [r3, #0]
 8012da0:	4770      	bx	lr
 8012da2:	bf00      	nop
 8012da4:	08019198 	.word	0x08019198

08012da8 <rcl_timer_init>:
 8012da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dac:	b0aa      	sub	sp, #168	@ 0xa8
 8012dae:	4604      	mov	r4, r0
 8012db0:	a835      	add	r0, sp, #212	@ 0xd4
 8012db2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012db6:	460d      	mov	r5, r1
 8012db8:	4692      	mov	sl, r2
 8012dba:	f7f9 f8eb 	bl	800bf94 <rcutils_allocator_is_valid>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d064      	beq.n	8012e8c <rcl_timer_init+0xe4>
 8012dc2:	2c00      	cmp	r4, #0
 8012dc4:	d062      	beq.n	8012e8c <rcl_timer_init+0xe4>
 8012dc6:	2d00      	cmp	r5, #0
 8012dc8:	d060      	beq.n	8012e8c <rcl_timer_init+0xe4>
 8012dca:	2f00      	cmp	r7, #0
 8012dcc:	db5e      	blt.n	8012e8c <rcl_timer_init+0xe4>
 8012dce:	6823      	ldr	r3, [r4, #0]
 8012dd0:	b123      	cbz	r3, 8012ddc <rcl_timer_init+0x34>
 8012dd2:	2664      	movs	r6, #100	@ 0x64
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	b02a      	add	sp, #168	@ 0xa8
 8012dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ddc:	a908      	add	r1, sp, #32
 8012dde:	4628      	mov	r0, r5
 8012de0:	f7ff fe76 	bl	8012ad0 <rcl_clock_get_now>
 8012de4:	4606      	mov	r6, r0
 8012de6:	2800      	cmp	r0, #0
 8012de8:	d1f4      	bne.n	8012dd4 <rcl_timer_init+0x2c>
 8012dea:	ae06      	add	r6, sp, #24
 8012dec:	4630      	mov	r0, r6
 8012dee:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012df2:	f004 f84f 	bl	8016e94 <rcl_get_zero_initialized_guard_condition>
 8012df6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012dfa:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012dfe:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012e00:	e889 0003 	stmia.w	r9, {r0, r1}
 8012e04:	4630      	mov	r0, r6
 8012e06:	f004 f921 	bl	801704c <rcl_guard_condition_get_default_options>
 8012e0a:	ab0d      	add	r3, sp, #52	@ 0x34
 8012e0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012e14:	4651      	mov	r1, sl
 8012e16:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e1a:	4648      	mov	r0, r9
 8012e1c:	f004 f844 	bl	8016ea8 <rcl_guard_condition_init>
 8012e20:	4606      	mov	r6, r0
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d1d6      	bne.n	8012dd4 <rcl_timer_init+0x2c>
 8012e26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d033      	beq.n	8012e96 <rcl_timer_init+0xee>
 8012e2e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012e30:	911a      	str	r1, [sp, #104]	@ 0x68
 8012e32:	4642      	mov	r2, r8
 8012e34:	463b      	mov	r3, r7
 8012e36:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012e3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012e3e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012ef0 <rcl_timer_init+0x148>
 8012e42:	eb12 0008 	adds.w	r0, r2, r8
 8012e46:	eb47 0103 	adc.w	r1, r7, r3
 8012e4a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012e4e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012e52:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012e56:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012e5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e5e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012e62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e66:	f8de 3000 	ldr.w	r3, [lr]
 8012e6a:	f8cc 3000 	str.w	r3, [ip]
 8012e6e:	f04f 0a00 	mov.w	sl, #0
 8012e72:	4619      	mov	r1, r3
 8012e74:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012e78:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012e7a:	2050      	movs	r0, #80	@ 0x50
 8012e7c:	4798      	blx	r3
 8012e7e:	6020      	str	r0, [r4, #0]
 8012e80:	b358      	cbz	r0, 8012eda <rcl_timer_init+0x132>
 8012e82:	2250      	movs	r2, #80	@ 0x50
 8012e84:	a916      	add	r1, sp, #88	@ 0x58
 8012e86:	f004 fed0 	bl	8017c2a <memcpy>
 8012e8a:	e7a3      	b.n	8012dd4 <rcl_timer_init+0x2c>
 8012e8c:	260b      	movs	r6, #11
 8012e8e:	4630      	mov	r0, r6
 8012e90:	b02a      	add	sp, #168	@ 0xa8
 8012e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e96:	2001      	movs	r0, #1
 8012e98:	2100      	movs	r1, #0
 8012e9a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012e9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ea2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012ea6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012eaa:	4a13      	ldr	r2, [pc, #76]	@ (8012ef8 <rcl_timer_init+0x150>)
 8012eac:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012eb0:	9405      	str	r4, [sp, #20]
 8012eb2:	9204      	str	r2, [sp, #16]
 8012eb4:	ab12      	add	r3, sp, #72	@ 0x48
 8012eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012eb8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012ebc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012ec0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	f7ff fe0f 	bl	8012ae8 <rcl_clock_add_jump_callback>
 8012eca:	4682      	mov	sl, r0
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d0ae      	beq.n	8012e2e <rcl_timer_init+0x86>
 8012ed0:	4648      	mov	r0, r9
 8012ed2:	f004 f895 	bl	8017000 <rcl_guard_condition_fini>
 8012ed6:	4656      	mov	r6, sl
 8012ed8:	e77c      	b.n	8012dd4 <rcl_timer_init+0x2c>
 8012eda:	4648      	mov	r0, r9
 8012edc:	f004 f890 	bl	8017000 <rcl_guard_condition_fini>
 8012ee0:	4905      	ldr	r1, [pc, #20]	@ (8012ef8 <rcl_timer_init+0x150>)
 8012ee2:	4622      	mov	r2, r4
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f7ff fe61 	bl	8012bac <rcl_clock_remove_jump_callback>
 8012eea:	260a      	movs	r6, #10
 8012eec:	e772      	b.n	8012dd4 <rcl_timer_init+0x2c>
 8012eee:	bf00      	nop
	...
 8012ef8:	08012c69 	.word	0x08012c69

08012efc <rcl_timer_call>:
 8012efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f00:	b087      	sub	sp, #28
 8012f02:	2800      	cmp	r0, #0
 8012f04:	d06d      	beq.n	8012fe2 <rcl_timer_call+0xe6>
 8012f06:	6803      	ldr	r3, [r0, #0]
 8012f08:	4604      	mov	r4, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d063      	beq.n	8012fd6 <rcl_timer_call+0xda>
 8012f0e:	f3bf 8f5b 	dmb	ish
 8012f12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f16:	f3bf 8f5b 	dmb	ish
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d150      	bne.n	8012fc0 <rcl_timer_call+0xc4>
 8012f1e:	6803      	ldr	r3, [r0, #0]
 8012f20:	a904      	add	r1, sp, #16
 8012f22:	6818      	ldr	r0, [r3, #0]
 8012f24:	f7ff fdd4 	bl	8012ad0 <rcl_clock_get_now>
 8012f28:	4605      	mov	r5, r0
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d14a      	bne.n	8012fc4 <rcl_timer_call+0xc8>
 8012f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	db4a      	blt.n	8012fcc <rcl_timer_call+0xd0>
 8012f36:	6820      	ldr	r0, [r4, #0]
 8012f38:	f04f 0a05 	mov.w	sl, #5
 8012f3c:	f8cd a000 	str.w	sl, [sp]
 8012f40:	3020      	adds	r0, #32
 8012f42:	f001 fd0d 	bl	8014960 <__atomic_exchange_8>
 8012f46:	6823      	ldr	r3, [r4, #0]
 8012f48:	f3bf 8f5b 	dmb	ish
 8012f4c:	4680      	mov	r8, r0
 8012f4e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012f52:	f3bf 8f5b 	dmb	ish
 8012f56:	6820      	ldr	r0, [r4, #0]
 8012f58:	4689      	mov	r9, r1
 8012f5a:	3028      	adds	r0, #40	@ 0x28
 8012f5c:	4651      	mov	r1, sl
 8012f5e:	f001 fc93 	bl	8014888 <__atomic_load_8>
 8012f62:	4606      	mov	r6, r0
 8012f64:	6820      	ldr	r0, [r4, #0]
 8012f66:	460f      	mov	r7, r1
 8012f68:	3018      	adds	r0, #24
 8012f6a:	4651      	mov	r1, sl
 8012f6c:	f001 fc8c 	bl	8014888 <__atomic_load_8>
 8012f70:	1836      	adds	r6, r6, r0
 8012f72:	4602      	mov	r2, r0
 8012f74:	4682      	mov	sl, r0
 8012f76:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012f7a:	eb47 0701 	adc.w	r7, r7, r1
 8012f7e:	4286      	cmp	r6, r0
 8012f80:	460b      	mov	r3, r1
 8012f82:	eb77 010c 	sbcs.w	r1, r7, ip
 8012f86:	da04      	bge.n	8012f92 <rcl_timer_call+0x96>
 8012f88:	ea53 0102 	orrs.w	r1, r3, r2
 8012f8c:	d12e      	bne.n	8012fec <rcl_timer_call+0xf0>
 8012f8e:	4606      	mov	r6, r0
 8012f90:	4667      	mov	r7, ip
 8012f92:	6820      	ldr	r0, [r4, #0]
 8012f94:	2105      	movs	r1, #5
 8012f96:	4632      	mov	r2, r6
 8012f98:	463b      	mov	r3, r7
 8012f9a:	3028      	adds	r0, #40	@ 0x28
 8012f9c:	9100      	str	r1, [sp, #0]
 8012f9e:	f001 fca9 	bl	80148f4 <__atomic_store_8>
 8012fa2:	f1bb 0f00 	cmp.w	fp, #0
 8012fa6:	d00d      	beq.n	8012fc4 <rcl_timer_call+0xc8>
 8012fa8:	9a04      	ldr	r2, [sp, #16]
 8012faa:	9b05      	ldr	r3, [sp, #20]
 8012fac:	ebb2 0208 	subs.w	r2, r2, r8
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	eb63 0309 	sbc.w	r3, r3, r9
 8012fb6:	47d8      	blx	fp
 8012fb8:	4628      	mov	r0, r5
 8012fba:	b007      	add	sp, #28
 8012fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc0:	f240 3521 	movw	r5, #801	@ 0x321
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	b007      	add	sp, #28
 8012fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fcc:	2501      	movs	r5, #1
 8012fce:	4628      	mov	r0, r5
 8012fd0:	b007      	add	sp, #28
 8012fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012fda:	4628      	mov	r0, r5
 8012fdc:	b007      	add	sp, #28
 8012fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe2:	250b      	movs	r5, #11
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	b007      	add	sp, #28
 8012fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fec:	1b80      	subs	r0, r0, r6
 8012fee:	eb6c 0107 	sbc.w	r1, ip, r7
 8012ff2:	3801      	subs	r0, #1
 8012ff4:	f161 0100 	sbc.w	r1, r1, #0
 8012ff8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012ffc:	f7ed f978 	bl	80002f0 <__aeabi_ldivmod>
 8013000:	9b02      	ldr	r3, [sp, #8]
 8013002:	3001      	adds	r0, #1
 8013004:	f141 0100 	adc.w	r1, r1, #0
 8013008:	fb00 f303 	mul.w	r3, r0, r3
 801300c:	fb01 330a 	mla	r3, r1, sl, r3
 8013010:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013014:	1986      	adds	r6, r0, r6
 8013016:	4453      	add	r3, sl
 8013018:	eb43 0707 	adc.w	r7, r3, r7
 801301c:	e7b9      	b.n	8012f92 <rcl_timer_call+0x96>
 801301e:	bf00      	nop

08013020 <rcl_timer_is_ready>:
 8013020:	b570      	push	{r4, r5, r6, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	b378      	cbz	r0, 8013086 <rcl_timer_is_ready+0x66>
 8013026:	6803      	ldr	r3, [r0, #0]
 8013028:	4604      	mov	r4, r0
 801302a:	b383      	cbz	r3, 801308e <rcl_timer_is_ready+0x6e>
 801302c:	460d      	mov	r5, r1
 801302e:	b351      	cbz	r1, 8013086 <rcl_timer_is_ready+0x66>
 8013030:	f3bf 8f5b 	dmb	ish
 8013034:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013038:	f3bf 8f5b 	dmb	ish
 801303c:	b953      	cbnz	r3, 8013054 <rcl_timer_is_ready+0x34>
 801303e:	6803      	ldr	r3, [r0, #0]
 8013040:	4669      	mov	r1, sp
 8013042:	6818      	ldr	r0, [r3, #0]
 8013044:	f7ff fd44 	bl	8012ad0 <rcl_clock_get_now>
 8013048:	4606      	mov	r6, r0
 801304a:	b140      	cbz	r0, 801305e <rcl_timer_is_ready+0x3e>
 801304c:	f240 3321 	movw	r3, #801	@ 0x321
 8013050:	4298      	cmp	r0, r3
 8013052:	d101      	bne.n	8013058 <rcl_timer_is_ready+0x38>
 8013054:	2600      	movs	r6, #0
 8013056:	702e      	strb	r6, [r5, #0]
 8013058:	4630      	mov	r0, r6
 801305a:	b002      	add	sp, #8
 801305c:	bd70      	pop	{r4, r5, r6, pc}
 801305e:	6820      	ldr	r0, [r4, #0]
 8013060:	2105      	movs	r1, #5
 8013062:	3028      	adds	r0, #40	@ 0x28
 8013064:	f001 fc10 	bl	8014888 <__atomic_load_8>
 8013068:	9b00      	ldr	r3, [sp, #0]
 801306a:	1ac0      	subs	r0, r0, r3
 801306c:	9b01      	ldr	r3, [sp, #4]
 801306e:	eb61 0103 	sbc.w	r1, r1, r3
 8013072:	2801      	cmp	r0, #1
 8013074:	f171 0300 	sbcs.w	r3, r1, #0
 8013078:	bfb4      	ite	lt
 801307a:	2301      	movlt	r3, #1
 801307c:	2300      	movge	r3, #0
 801307e:	4630      	mov	r0, r6
 8013080:	702b      	strb	r3, [r5, #0]
 8013082:	b002      	add	sp, #8
 8013084:	bd70      	pop	{r4, r5, r6, pc}
 8013086:	260b      	movs	r6, #11
 8013088:	4630      	mov	r0, r6
 801308a:	b002      	add	sp, #8
 801308c:	bd70      	pop	{r4, r5, r6, pc}
 801308e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013092:	e7e1      	b.n	8013058 <rcl_timer_is_ready+0x38>

08013094 <rcl_timer_get_time_until_next_call>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	b330      	cbz	r0, 80130e8 <rcl_timer_get_time_until_next_call+0x54>
 801309a:	6803      	ldr	r3, [r0, #0]
 801309c:	4604      	mov	r4, r0
 801309e:	b33b      	cbz	r3, 80130f0 <rcl_timer_get_time_until_next_call+0x5c>
 80130a0:	460d      	mov	r5, r1
 80130a2:	b309      	cbz	r1, 80130e8 <rcl_timer_get_time_until_next_call+0x54>
 80130a4:	f3bf 8f5b 	dmb	ish
 80130a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80130ac:	f3bf 8f5b 	dmb	ish
 80130b0:	b9ab      	cbnz	r3, 80130de <rcl_timer_get_time_until_next_call+0x4a>
 80130b2:	6803      	ldr	r3, [r0, #0]
 80130b4:	4669      	mov	r1, sp
 80130b6:	6818      	ldr	r0, [r3, #0]
 80130b8:	f7ff fd0a 	bl	8012ad0 <rcl_clock_get_now>
 80130bc:	4606      	mov	r6, r0
 80130be:	b958      	cbnz	r0, 80130d8 <rcl_timer_get_time_until_next_call+0x44>
 80130c0:	6820      	ldr	r0, [r4, #0]
 80130c2:	2105      	movs	r1, #5
 80130c4:	3028      	adds	r0, #40	@ 0x28
 80130c6:	f001 fbdf 	bl	8014888 <__atomic_load_8>
 80130ca:	9b00      	ldr	r3, [sp, #0]
 80130cc:	1ac0      	subs	r0, r0, r3
 80130ce:	9b01      	ldr	r3, [sp, #4]
 80130d0:	6028      	str	r0, [r5, #0]
 80130d2:	eb61 0103 	sbc.w	r1, r1, r3
 80130d6:	6069      	str	r1, [r5, #4]
 80130d8:	4630      	mov	r0, r6
 80130da:	b002      	add	sp, #8
 80130dc:	bd70      	pop	{r4, r5, r6, pc}
 80130de:	f240 3621 	movw	r6, #801	@ 0x321
 80130e2:	4630      	mov	r0, r6
 80130e4:	b002      	add	sp, #8
 80130e6:	bd70      	pop	{r4, r5, r6, pc}
 80130e8:	260b      	movs	r6, #11
 80130ea:	4630      	mov	r0, r6
 80130ec:	b002      	add	sp, #8
 80130ee:	bd70      	pop	{r4, r5, r6, pc}
 80130f0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80130f4:	e7f0      	b.n	80130d8 <rcl_timer_get_time_until_next_call+0x44>
 80130f6:	bf00      	nop

080130f8 <rcl_timer_get_guard_condition>:
 80130f8:	b130      	cbz	r0, 8013108 <rcl_timer_get_guard_condition+0x10>
 80130fa:	6800      	ldr	r0, [r0, #0]
 80130fc:	b120      	cbz	r0, 8013108 <rcl_timer_get_guard_condition+0x10>
 80130fe:	68c3      	ldr	r3, [r0, #12]
 8013100:	b10b      	cbz	r3, 8013106 <rcl_timer_get_guard_condition+0xe>
 8013102:	3008      	adds	r0, #8
 8013104:	4770      	bx	lr
 8013106:	4618      	mov	r0, r3
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop

0801310c <rcl_validate_enclave_name_with_size>:
 801310c:	b378      	cbz	r0, 801316e <rcl_validate_enclave_name_with_size+0x62>
 801310e:	b570      	push	{r4, r5, r6, lr}
 8013110:	4615      	mov	r5, r2
 8013112:	b0c2      	sub	sp, #264	@ 0x108
 8013114:	b302      	cbz	r2, 8013158 <rcl_validate_enclave_name_with_size+0x4c>
 8013116:	461e      	mov	r6, r3
 8013118:	466a      	mov	r2, sp
 801311a:	ab01      	add	r3, sp, #4
 801311c:	460c      	mov	r4, r1
 801311e:	f002 f815 	bl	801514c <rmw_validate_namespace_with_size>
 8013122:	4684      	mov	ip, r0
 8013124:	b9e8      	cbnz	r0, 8013162 <rcl_validate_enclave_name_with_size+0x56>
 8013126:	9b00      	ldr	r3, [sp, #0]
 8013128:	b923      	cbnz	r3, 8013134 <rcl_validate_enclave_name_with_size+0x28>
 801312a:	2300      	movs	r3, #0
 801312c:	602b      	str	r3, [r5, #0]
 801312e:	4660      	mov	r0, ip
 8013130:	b042      	add	sp, #264	@ 0x108
 8013132:	bd70      	pop	{r4, r5, r6, pc}
 8013134:	2b07      	cmp	r3, #7
 8013136:	d007      	beq.n	8013148 <rcl_validate_enclave_name_with_size+0x3c>
 8013138:	1e5a      	subs	r2, r3, #1
 801313a:	2a05      	cmp	r2, #5
 801313c:	d833      	bhi.n	80131a6 <rcl_validate_enclave_name_with_size+0x9a>
 801313e:	e8df f002 	tbb	[pc, r2]
 8013142:	2c2f      	.short	0x2c2f
 8013144:	1a232629 	.word	0x1a232629
 8013148:	2cff      	cmp	r4, #255	@ 0xff
 801314a:	d9ee      	bls.n	801312a <rcl_validate_enclave_name_with_size+0x1e>
 801314c:	602b      	str	r3, [r5, #0]
 801314e:	2e00      	cmp	r6, #0
 8013150:	d0ed      	beq.n	801312e <rcl_validate_enclave_name_with_size+0x22>
 8013152:	23fe      	movs	r3, #254	@ 0xfe
 8013154:	6033      	str	r3, [r6, #0]
 8013156:	e7ea      	b.n	801312e <rcl_validate_enclave_name_with_size+0x22>
 8013158:	f04f 0c0b 	mov.w	ip, #11
 801315c:	4660      	mov	r0, ip
 801315e:	b042      	add	sp, #264	@ 0x108
 8013160:	bd70      	pop	{r4, r5, r6, pc}
 8013162:	f7fe fe63 	bl	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 8013166:	4684      	mov	ip, r0
 8013168:	4660      	mov	r0, ip
 801316a:	b042      	add	sp, #264	@ 0x108
 801316c:	bd70      	pop	{r4, r5, r6, pc}
 801316e:	f04f 0c0b 	mov.w	ip, #11
 8013172:	4660      	mov	r0, ip
 8013174:	4770      	bx	lr
 8013176:	2306      	movs	r3, #6
 8013178:	602b      	str	r3, [r5, #0]
 801317a:	2e00      	cmp	r6, #0
 801317c:	d0d7      	beq.n	801312e <rcl_validate_enclave_name_with_size+0x22>
 801317e:	9b01      	ldr	r3, [sp, #4]
 8013180:	6033      	str	r3, [r6, #0]
 8013182:	4660      	mov	r0, ip
 8013184:	b042      	add	sp, #264	@ 0x108
 8013186:	bd70      	pop	{r4, r5, r6, pc}
 8013188:	2305      	movs	r3, #5
 801318a:	602b      	str	r3, [r5, #0]
 801318c:	e7f5      	b.n	801317a <rcl_validate_enclave_name_with_size+0x6e>
 801318e:	2304      	movs	r3, #4
 8013190:	602b      	str	r3, [r5, #0]
 8013192:	e7f2      	b.n	801317a <rcl_validate_enclave_name_with_size+0x6e>
 8013194:	2303      	movs	r3, #3
 8013196:	602b      	str	r3, [r5, #0]
 8013198:	e7ef      	b.n	801317a <rcl_validate_enclave_name_with_size+0x6e>
 801319a:	2302      	movs	r3, #2
 801319c:	602b      	str	r3, [r5, #0]
 801319e:	e7ec      	b.n	801317a <rcl_validate_enclave_name_with_size+0x6e>
 80131a0:	2301      	movs	r3, #1
 80131a2:	602b      	str	r3, [r5, #0]
 80131a4:	e7e9      	b.n	801317a <rcl_validate_enclave_name_with_size+0x6e>
 80131a6:	4a04      	ldr	r2, [pc, #16]	@ (80131b8 <rcl_validate_enclave_name_with_size+0xac>)
 80131a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80131ac:	a802      	add	r0, sp, #8
 80131ae:	f001 fd25 	bl	8014bfc <rcutils_snprintf>
 80131b2:	f04f 0c01 	mov.w	ip, #1
 80131b6:	e7ba      	b.n	801312e <rcl_validate_enclave_name_with_size+0x22>
 80131b8:	0801919c 	.word	0x0801919c

080131bc <rcl_validate_enclave_name>:
 80131bc:	b168      	cbz	r0, 80131da <rcl_validate_enclave_name+0x1e>
 80131be:	b570      	push	{r4, r5, r6, lr}
 80131c0:	460d      	mov	r5, r1
 80131c2:	4616      	mov	r6, r2
 80131c4:	4604      	mov	r4, r0
 80131c6:	f7ed f835 	bl	8000234 <strlen>
 80131ca:	4633      	mov	r3, r6
 80131cc:	4601      	mov	r1, r0
 80131ce:	462a      	mov	r2, r5
 80131d0:	4620      	mov	r0, r4
 80131d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131d6:	f7ff bf99 	b.w	801310c <rcl_validate_enclave_name_with_size>
 80131da:	200b      	movs	r0, #11
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop

080131e0 <rcl_get_zero_initialized_wait_set>:
 80131e0:	b510      	push	{r4, lr}
 80131e2:	4c08      	ldr	r4, [pc, #32]	@ (8013204 <rcl_get_zero_initialized_wait_set+0x24>)
 80131e4:	4686      	mov	lr, r0
 80131e6:	4684      	mov	ip, r0
 80131e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131fa:	6823      	ldr	r3, [r4, #0]
 80131fc:	f8cc 3000 	str.w	r3, [ip]
 8013200:	4670      	mov	r0, lr
 8013202:	bd10      	pop	{r4, pc}
 8013204:	080191fc 	.word	0x080191fc

08013208 <rcl_wait_set_is_valid>:
 8013208:	b118      	cbz	r0, 8013212 <rcl_wait_set_is_valid+0xa>
 801320a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801320c:	3800      	subs	r0, #0
 801320e:	bf18      	it	ne
 8013210:	2001      	movne	r0, #1
 8013212:	4770      	bx	lr

08013214 <rcl_wait_set_fini>:
 8013214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013218:	b082      	sub	sp, #8
 801321a:	2800      	cmp	r0, #0
 801321c:	f000 8095 	beq.w	801334a <rcl_wait_set_fini+0x136>
 8013220:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013222:	4604      	mov	r4, r0
 8013224:	2e00      	cmp	r6, #0
 8013226:	f000 808c 	beq.w	8013342 <rcl_wait_set_fini+0x12e>
 801322a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801322c:	f002 fd48 	bl	8015cc0 <rmw_destroy_wait_set>
 8013230:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013232:	1e06      	subs	r6, r0, #0
 8013234:	bf18      	it	ne
 8013236:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801323a:	2d00      	cmp	r5, #0
 801323c:	f000 8081 	beq.w	8013342 <rcl_wait_set_fini+0x12e>
 8013240:	6820      	ldr	r0, [r4, #0]
 8013242:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013246:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013248:	2700      	movs	r7, #0
 801324a:	6067      	str	r7, [r4, #4]
 801324c:	602f      	str	r7, [r5, #0]
 801324e:	b120      	cbz	r0, 801325a <rcl_wait_set_fini+0x46>
 8013250:	9101      	str	r1, [sp, #4]
 8013252:	47c0      	blx	r8
 8013254:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013256:	9901      	ldr	r1, [sp, #4]
 8013258:	6027      	str	r7, [r4, #0]
 801325a:	68a8      	ldr	r0, [r5, #8]
 801325c:	b120      	cbz	r0, 8013268 <rcl_wait_set_fini+0x54>
 801325e:	47c0      	blx	r8
 8013260:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013262:	2300      	movs	r3, #0
 8013264:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013268:	68a0      	ldr	r0, [r4, #8]
 801326a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801326c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801326e:	f04f 0800 	mov.w	r8, #0
 8013272:	f8c4 800c 	str.w	r8, [r4, #12]
 8013276:	f8c5 800c 	str.w	r8, [r5, #12]
 801327a:	b128      	cbz	r0, 8013288 <rcl_wait_set_fini+0x74>
 801327c:	47b8      	blx	r7
 801327e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013280:	f8c4 8008 	str.w	r8, [r4, #8]
 8013284:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013286:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013288:	6968      	ldr	r0, [r5, #20]
 801328a:	f04f 0800 	mov.w	r8, #0
 801328e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013292:	b128      	cbz	r0, 80132a0 <rcl_wait_set_fini+0x8c>
 8013294:	47b8      	blx	r7
 8013296:	f8c5 8014 	str.w	r8, [r5, #20]
 801329a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801329c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801329e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80132a0:	6920      	ldr	r0, [r4, #16]
 80132a2:	f04f 0800 	mov.w	r8, #0
 80132a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80132aa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80132ae:	b128      	cbz	r0, 80132bc <rcl_wait_set_fini+0xa8>
 80132b0:	47b8      	blx	r7
 80132b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80132b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80132ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80132bc:	69a0      	ldr	r0, [r4, #24]
 80132be:	f04f 0800 	mov.w	r8, #0
 80132c2:	f8c4 801c 	str.w	r8, [r4, #28]
 80132c6:	f8c5 8018 	str.w	r8, [r5, #24]
 80132ca:	b128      	cbz	r0, 80132d8 <rcl_wait_set_fini+0xc4>
 80132cc:	9101      	str	r1, [sp, #4]
 80132ce:	47b8      	blx	r7
 80132d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132d2:	9901      	ldr	r1, [sp, #4]
 80132d4:	f8c4 8018 	str.w	r8, [r4, #24]
 80132d8:	6a28      	ldr	r0, [r5, #32]
 80132da:	b120      	cbz	r0, 80132e6 <rcl_wait_set_fini+0xd2>
 80132dc:	47b8      	blx	r7
 80132de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132e0:	2300      	movs	r3, #0
 80132e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80132e6:	6a20      	ldr	r0, [r4, #32]
 80132e8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80132ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80132ee:	2700      	movs	r7, #0
 80132f0:	6267      	str	r7, [r4, #36]	@ 0x24
 80132f2:	626f      	str	r7, [r5, #36]	@ 0x24
 80132f4:	b120      	cbz	r0, 8013300 <rcl_wait_set_fini+0xec>
 80132f6:	9101      	str	r1, [sp, #4]
 80132f8:	47c0      	blx	r8
 80132fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132fc:	9901      	ldr	r1, [sp, #4]
 80132fe:	6227      	str	r7, [r4, #32]
 8013300:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013302:	b120      	cbz	r0, 801330e <rcl_wait_set_fini+0xfa>
 8013304:	47c0      	blx	r8
 8013306:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013308:	2300      	movs	r3, #0
 801330a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801330e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013310:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013314:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013316:	2700      	movs	r7, #0
 8013318:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801331a:	632f      	str	r7, [r5, #48]	@ 0x30
 801331c:	b120      	cbz	r0, 8013328 <rcl_wait_set_fini+0x114>
 801331e:	9101      	str	r1, [sp, #4]
 8013320:	47c0      	blx	r8
 8013322:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013324:	9901      	ldr	r1, [sp, #4]
 8013326:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013328:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801332a:	b120      	cbz	r0, 8013336 <rcl_wait_set_fini+0x122>
 801332c:	47c0      	blx	r8
 801332e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013330:	2300      	movs	r3, #0
 8013332:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013336:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013338:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801333a:	4628      	mov	r0, r5
 801333c:	4798      	blx	r3
 801333e:	2300      	movs	r3, #0
 8013340:	6323      	str	r3, [r4, #48]	@ 0x30
 8013342:	4630      	mov	r0, r6
 8013344:	b002      	add	sp, #8
 8013346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801334a:	260b      	movs	r6, #11
 801334c:	4630      	mov	r0, r6
 801334e:	b002      	add	sp, #8
 8013350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013354 <rcl_wait_set_add_subscription>:
 8013354:	b318      	cbz	r0, 801339e <rcl_wait_set_add_subscription+0x4a>
 8013356:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013358:	b570      	push	{r4, r5, r6, lr}
 801335a:	4604      	mov	r4, r0
 801335c:	b30b      	cbz	r3, 80133a2 <rcl_wait_set_add_subscription+0x4e>
 801335e:	b319      	cbz	r1, 80133a8 <rcl_wait_set_add_subscription+0x54>
 8013360:	681d      	ldr	r5, [r3, #0]
 8013362:	6840      	ldr	r0, [r0, #4]
 8013364:	4285      	cmp	r5, r0
 8013366:	d217      	bcs.n	8013398 <rcl_wait_set_add_subscription+0x44>
 8013368:	6820      	ldr	r0, [r4, #0]
 801336a:	1c6e      	adds	r6, r5, #1
 801336c:	601e      	str	r6, [r3, #0]
 801336e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013372:	b102      	cbz	r2, 8013376 <rcl_wait_set_add_subscription+0x22>
 8013374:	6015      	str	r5, [r2, #0]
 8013376:	4608      	mov	r0, r1
 8013378:	f7ff fb0a 	bl	8012990 <rcl_subscription_get_rmw_handle>
 801337c:	b150      	cbz	r0, 8013394 <rcl_wait_set_add_subscription+0x40>
 801337e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013380:	6842      	ldr	r2, [r0, #4]
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013388:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801338a:	6853      	ldr	r3, [r2, #4]
 801338c:	3301      	adds	r3, #1
 801338e:	2000      	movs	r0, #0
 8013390:	6053      	str	r3, [r2, #4]
 8013392:	bd70      	pop	{r4, r5, r6, pc}
 8013394:	2001      	movs	r0, #1
 8013396:	bd70      	pop	{r4, r5, r6, pc}
 8013398:	f240 3086 	movw	r0, #902	@ 0x386
 801339c:	bd70      	pop	{r4, r5, r6, pc}
 801339e:	200b      	movs	r0, #11
 80133a0:	4770      	bx	lr
 80133a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80133a6:	bd70      	pop	{r4, r5, r6, pc}
 80133a8:	200b      	movs	r0, #11
 80133aa:	bd70      	pop	{r4, r5, r6, pc}

080133ac <rcl_wait_set_clear>:
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d073      	beq.n	8013498 <rcl_wait_set_clear+0xec>
 80133b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80133b2:	b510      	push	{r4, lr}
 80133b4:	4604      	mov	r4, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d070      	beq.n	801349c <rcl_wait_set_clear+0xf0>
 80133ba:	6800      	ldr	r0, [r0, #0]
 80133bc:	b138      	cbz	r0, 80133ce <rcl_wait_set_clear+0x22>
 80133be:	6862      	ldr	r2, [r4, #4]
 80133c0:	2100      	movs	r1, #0
 80133c2:	0092      	lsls	r2, r2, #2
 80133c4:	f004 fb68 	bl	8017a98 <memset>
 80133c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133ca:	2200      	movs	r2, #0
 80133cc:	601a      	str	r2, [r3, #0]
 80133ce:	68a0      	ldr	r0, [r4, #8]
 80133d0:	b138      	cbz	r0, 80133e2 <rcl_wait_set_clear+0x36>
 80133d2:	68e2      	ldr	r2, [r4, #12]
 80133d4:	2100      	movs	r1, #0
 80133d6:	0092      	lsls	r2, r2, #2
 80133d8:	f004 fb5e 	bl	8017a98 <memset>
 80133dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133de:	2200      	movs	r2, #0
 80133e0:	60da      	str	r2, [r3, #12]
 80133e2:	69a0      	ldr	r0, [r4, #24]
 80133e4:	b138      	cbz	r0, 80133f6 <rcl_wait_set_clear+0x4a>
 80133e6:	69e2      	ldr	r2, [r4, #28]
 80133e8:	2100      	movs	r1, #0
 80133ea:	0092      	lsls	r2, r2, #2
 80133ec:	f004 fb54 	bl	8017a98 <memset>
 80133f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133f2:	2200      	movs	r2, #0
 80133f4:	619a      	str	r2, [r3, #24]
 80133f6:	6a20      	ldr	r0, [r4, #32]
 80133f8:	b138      	cbz	r0, 801340a <rcl_wait_set_clear+0x5e>
 80133fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80133fc:	2100      	movs	r1, #0
 80133fe:	0092      	lsls	r2, r2, #2
 8013400:	f004 fb4a 	bl	8017a98 <memset>
 8013404:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013406:	2200      	movs	r2, #0
 8013408:	625a      	str	r2, [r3, #36]	@ 0x24
 801340a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801340c:	b138      	cbz	r0, 801341e <rcl_wait_set_clear+0x72>
 801340e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013410:	2100      	movs	r1, #0
 8013412:	0092      	lsls	r2, r2, #2
 8013414:	f004 fb40 	bl	8017a98 <memset>
 8013418:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801341a:	2200      	movs	r2, #0
 801341c:	631a      	str	r2, [r3, #48]	@ 0x30
 801341e:	6920      	ldr	r0, [r4, #16]
 8013420:	b138      	cbz	r0, 8013432 <rcl_wait_set_clear+0x86>
 8013422:	6962      	ldr	r2, [r4, #20]
 8013424:	2100      	movs	r1, #0
 8013426:	0092      	lsls	r2, r2, #2
 8013428:	f004 fb36 	bl	8017a98 <memset>
 801342c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801342e:	2200      	movs	r2, #0
 8013430:	641a      	str	r2, [r3, #64]	@ 0x40
 8013432:	6898      	ldr	r0, [r3, #8]
 8013434:	b138      	cbz	r0, 8013446 <rcl_wait_set_clear+0x9a>
 8013436:	685a      	ldr	r2, [r3, #4]
 8013438:	2100      	movs	r1, #0
 801343a:	0092      	lsls	r2, r2, #2
 801343c:	f004 fb2c 	bl	8017a98 <memset>
 8013440:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013442:	2200      	movs	r2, #0
 8013444:	605a      	str	r2, [r3, #4]
 8013446:	6958      	ldr	r0, [r3, #20]
 8013448:	b138      	cbz	r0, 801345a <rcl_wait_set_clear+0xae>
 801344a:	691a      	ldr	r2, [r3, #16]
 801344c:	2100      	movs	r1, #0
 801344e:	0092      	lsls	r2, r2, #2
 8013450:	f004 fb22 	bl	8017a98 <memset>
 8013454:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013456:	2200      	movs	r2, #0
 8013458:	611a      	str	r2, [r3, #16]
 801345a:	6a18      	ldr	r0, [r3, #32]
 801345c:	b138      	cbz	r0, 801346e <rcl_wait_set_clear+0xc2>
 801345e:	69da      	ldr	r2, [r3, #28]
 8013460:	2100      	movs	r1, #0
 8013462:	0092      	lsls	r2, r2, #2
 8013464:	f004 fb18 	bl	8017a98 <memset>
 8013468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801346a:	2200      	movs	r2, #0
 801346c:	61da      	str	r2, [r3, #28]
 801346e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013470:	b138      	cbz	r0, 8013482 <rcl_wait_set_clear+0xd6>
 8013472:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013474:	2100      	movs	r1, #0
 8013476:	0092      	lsls	r2, r2, #2
 8013478:	f004 fb0e 	bl	8017a98 <memset>
 801347c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801347e:	2200      	movs	r2, #0
 8013480:	629a      	str	r2, [r3, #40]	@ 0x28
 8013482:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013484:	b138      	cbz	r0, 8013496 <rcl_wait_set_clear+0xea>
 8013486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013488:	2100      	movs	r1, #0
 801348a:	0092      	lsls	r2, r2, #2
 801348c:	f004 fb04 	bl	8017a98 <memset>
 8013490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013492:	2000      	movs	r0, #0
 8013494:	6358      	str	r0, [r3, #52]	@ 0x34
 8013496:	bd10      	pop	{r4, pc}
 8013498:	200b      	movs	r0, #11
 801349a:	4770      	bx	lr
 801349c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134a0:	bd10      	pop	{r4, pc}
 80134a2:	bf00      	nop

080134a4 <rcl_wait_set_resize>:
 80134a4:	2800      	cmp	r0, #0
 80134a6:	f000 8185 	beq.w	80137b4 <rcl_wait_set_resize+0x310>
 80134aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80134b0:	b083      	sub	sp, #12
 80134b2:	4605      	mov	r5, r0
 80134b4:	2c00      	cmp	r4, #0
 80134b6:	f000 817f 	beq.w	80137b8 <rcl_wait_set_resize+0x314>
 80134ba:	f04f 0900 	mov.w	r9, #0
 80134be:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80134c2:	461f      	mov	r7, r3
 80134c4:	4688      	mov	r8, r1
 80134c6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80134ca:	4616      	mov	r6, r2
 80134cc:	f8c0 9004 	str.w	r9, [r0, #4]
 80134d0:	f8c4 9000 	str.w	r9, [r4]
 80134d4:	2900      	cmp	r1, #0
 80134d6:	f000 80bd 	beq.w	8013654 <rcl_wait_set_resize+0x1b0>
 80134da:	008c      	lsls	r4, r1, #2
 80134dc:	6800      	ldr	r0, [r0, #0]
 80134de:	9301      	str	r3, [sp, #4]
 80134e0:	4652      	mov	r2, sl
 80134e2:	4621      	mov	r1, r4
 80134e4:	4798      	blx	r3
 80134e6:	9b01      	ldr	r3, [sp, #4]
 80134e8:	6028      	str	r0, [r5, #0]
 80134ea:	2800      	cmp	r0, #0
 80134ec:	f000 80cb 	beq.w	8013686 <rcl_wait_set_resize+0x1e2>
 80134f0:	4622      	mov	r2, r4
 80134f2:	4649      	mov	r1, r9
 80134f4:	9301      	str	r3, [sp, #4]
 80134f6:	f004 facf 	bl	8017a98 <memset>
 80134fa:	f8c5 8004 	str.w	r8, [r5, #4]
 80134fe:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8013502:	9b01      	ldr	r3, [sp, #4]
 8013504:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013508:	f8c8 9004 	str.w	r9, [r8, #4]
 801350c:	4652      	mov	r2, sl
 801350e:	4621      	mov	r1, r4
 8013510:	4798      	blx	r3
 8013512:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013514:	f8c8 0008 	str.w	r0, [r8, #8]
 8013518:	689b      	ldr	r3, [r3, #8]
 801351a:	2b00      	cmp	r3, #0
 801351c:	f000 80ac 	beq.w	8013678 <rcl_wait_set_resize+0x1d4>
 8013520:	4622      	mov	r2, r4
 8013522:	4649      	mov	r1, r9
 8013524:	4618      	mov	r0, r3
 8013526:	f004 fab7 	bl	8017a98 <memset>
 801352a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801352c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013530:	f04f 0800 	mov.w	r8, #0
 8013534:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013538:	f8c5 800c 	str.w	r8, [r5, #12]
 801353c:	f8c4 800c 	str.w	r8, [r4, #12]
 8013540:	2e00      	cmp	r6, #0
 8013542:	f040 80a4 	bne.w	801368e <rcl_wait_set_resize+0x1ea>
 8013546:	68a8      	ldr	r0, [r5, #8]
 8013548:	b128      	cbz	r0, 8013556 <rcl_wait_set_resize+0xb2>
 801354a:	4649      	mov	r1, r9
 801354c:	4790      	blx	r2
 801354e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013550:	60ae      	str	r6, [r5, #8]
 8013552:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013556:	f04f 0800 	mov.w	r8, #0
 801355a:	19f6      	adds	r6, r6, r7
 801355c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013560:	f040 80ac 	bne.w	80136bc <rcl_wait_set_resize+0x218>
 8013564:	6960      	ldr	r0, [r4, #20]
 8013566:	b130      	cbz	r0, 8013576 <rcl_wait_set_resize+0xd2>
 8013568:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801356a:	4649      	mov	r1, r9
 801356c:	4798      	blx	r3
 801356e:	6166      	str	r6, [r4, #20]
 8013570:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013572:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013576:	2600      	movs	r6, #0
 8013578:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801357c:	616e      	str	r6, [r5, #20]
 801357e:	6426      	str	r6, [r4, #64]	@ 0x40
 8013580:	2f00      	cmp	r7, #0
 8013582:	f040 80ad 	bne.w	80136e0 <rcl_wait_set_resize+0x23c>
 8013586:	6928      	ldr	r0, [r5, #16]
 8013588:	b138      	cbz	r0, 801359a <rcl_wait_set_resize+0xf6>
 801358a:	4649      	mov	r1, r9
 801358c:	47d0      	blx	sl
 801358e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013590:	612f      	str	r7, [r5, #16]
 8013592:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013596:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801359a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801359c:	2600      	movs	r6, #0
 801359e:	61ee      	str	r6, [r5, #28]
 80135a0:	61a6      	str	r6, [r4, #24]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	f040 80af 	bne.w	8013706 <rcl_wait_set_resize+0x262>
 80135a8:	69a8      	ldr	r0, [r5, #24]
 80135aa:	b120      	cbz	r0, 80135b6 <rcl_wait_set_resize+0x112>
 80135ac:	4649      	mov	r1, r9
 80135ae:	47d0      	blx	sl
 80135b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135b4:	61ab      	str	r3, [r5, #24]
 80135b6:	6a20      	ldr	r0, [r4, #32]
 80135b8:	b128      	cbz	r0, 80135c6 <rcl_wait_set_resize+0x122>
 80135ba:	4649      	mov	r1, r9
 80135bc:	47d0      	blx	sl
 80135be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135c0:	2300      	movs	r3, #0
 80135c2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80135c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135c8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80135ca:	2600      	movs	r6, #0
 80135cc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80135d0:	626e      	str	r6, [r5, #36]	@ 0x24
 80135d2:	6266      	str	r6, [r4, #36]	@ 0x24
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	f000 80b6 	beq.w	8013746 <rcl_wait_set_resize+0x2a2>
 80135da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80135de:	6a28      	ldr	r0, [r5, #32]
 80135e0:	463a      	mov	r2, r7
 80135e2:	4651      	mov	r1, sl
 80135e4:	47c8      	blx	r9
 80135e6:	6228      	str	r0, [r5, #32]
 80135e8:	2800      	cmp	r0, #0
 80135ea:	d04c      	beq.n	8013686 <rcl_wait_set_resize+0x1e2>
 80135ec:	4652      	mov	r2, sl
 80135ee:	4631      	mov	r1, r6
 80135f0:	f004 fa52 	bl	8017a98 <memset>
 80135f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135f8:	626b      	str	r3, [r5, #36]	@ 0x24
 80135fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80135fc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80135fe:	463a      	mov	r2, r7
 8013600:	4651      	mov	r1, sl
 8013602:	47c8      	blx	r9
 8013604:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013606:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013608:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801360a:	2c00      	cmp	r4, #0
 801360c:	f000 80f0 	beq.w	80137f0 <rcl_wait_set_resize+0x34c>
 8013610:	4620      	mov	r0, r4
 8013612:	4652      	mov	r2, sl
 8013614:	4631      	mov	r1, r6
 8013616:	f004 fa3f 	bl	8017a98 <memset>
 801361a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801361c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801361e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013620:	2600      	movs	r6, #0
 8013622:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013626:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013628:	6326      	str	r6, [r4, #48]	@ 0x30
 801362a:	2b00      	cmp	r3, #0
 801362c:	f040 809d 	bne.w	801376a <rcl_wait_set_resize+0x2c6>
 8013630:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013632:	b120      	cbz	r0, 801363e <rcl_wait_set_resize+0x19a>
 8013634:	4639      	mov	r1, r7
 8013636:	47c0      	blx	r8
 8013638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801363a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801363c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801363e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013640:	b310      	cbz	r0, 8013688 <rcl_wait_set_resize+0x1e4>
 8013642:	4639      	mov	r1, r7
 8013644:	47c0      	blx	r8
 8013646:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013648:	2000      	movs	r0, #0
 801364a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801364e:	b003      	add	sp, #12
 8013650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013654:	6800      	ldr	r0, [r0, #0]
 8013656:	b120      	cbz	r0, 8013662 <rcl_wait_set_resize+0x1be>
 8013658:	4651      	mov	r1, sl
 801365a:	47d8      	blx	fp
 801365c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801365e:	f8c5 8000 	str.w	r8, [r5]
 8013662:	68a0      	ldr	r0, [r4, #8]
 8013664:	2800      	cmp	r0, #0
 8013666:	f43f af61 	beq.w	801352c <rcl_wait_set_resize+0x88>
 801366a:	4651      	mov	r1, sl
 801366c:	47d8      	blx	fp
 801366e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013670:	2300      	movs	r3, #0
 8013672:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013676:	e759      	b.n	801352c <rcl_wait_set_resize+0x88>
 8013678:	6828      	ldr	r0, [r5, #0]
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	4651      	mov	r1, sl
 801367e:	47d8      	blx	fp
 8013680:	9b01      	ldr	r3, [sp, #4]
 8013682:	e9c5 3300 	strd	r3, r3, [r5]
 8013686:	200a      	movs	r0, #10
 8013688:	b003      	add	sp, #12
 801368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368e:	00b4      	lsls	r4, r6, #2
 8013690:	68a8      	ldr	r0, [r5, #8]
 8013692:	464a      	mov	r2, r9
 8013694:	4621      	mov	r1, r4
 8013696:	4798      	blx	r3
 8013698:	60a8      	str	r0, [r5, #8]
 801369a:	2800      	cmp	r0, #0
 801369c:	d0f3      	beq.n	8013686 <rcl_wait_set_resize+0x1e2>
 801369e:	4622      	mov	r2, r4
 80136a0:	4641      	mov	r1, r8
 80136a2:	f004 f9f9 	bl	8017a98 <memset>
 80136a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136a8:	60ee      	str	r6, [r5, #12]
 80136aa:	f04f 0800 	mov.w	r8, #0
 80136ae:	19f6      	adds	r6, r6, r7
 80136b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80136b8:	f43f af54 	beq.w	8013564 <rcl_wait_set_resize+0xc0>
 80136bc:	00b6      	lsls	r6, r6, #2
 80136be:	464a      	mov	r2, r9
 80136c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80136c2:	6960      	ldr	r0, [r4, #20]
 80136c4:	4631      	mov	r1, r6
 80136c6:	4798      	blx	r3
 80136c8:	4681      	mov	r9, r0
 80136ca:	6160      	str	r0, [r4, #20]
 80136cc:	2800      	cmp	r0, #0
 80136ce:	d076      	beq.n	80137be <rcl_wait_set_resize+0x31a>
 80136d0:	4632      	mov	r2, r6
 80136d2:	4641      	mov	r1, r8
 80136d4:	f004 f9e0 	bl	8017a98 <memset>
 80136d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136de:	e74a      	b.n	8013576 <rcl_wait_set_resize+0xd2>
 80136e0:	00bc      	lsls	r4, r7, #2
 80136e2:	6928      	ldr	r0, [r5, #16]
 80136e4:	464a      	mov	r2, r9
 80136e6:	4621      	mov	r1, r4
 80136e8:	47c0      	blx	r8
 80136ea:	6128      	str	r0, [r5, #16]
 80136ec:	2800      	cmp	r0, #0
 80136ee:	d0ca      	beq.n	8013686 <rcl_wait_set_resize+0x1e2>
 80136f0:	4622      	mov	r2, r4
 80136f2:	4631      	mov	r1, r6
 80136f4:	f004 f9d0 	bl	8017a98 <memset>
 80136f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136fa:	616f      	str	r7, [r5, #20]
 80136fc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013700:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013704:	e749      	b.n	801359a <rcl_wait_set_resize+0xf6>
 8013706:	009c      	lsls	r4, r3, #2
 8013708:	69a8      	ldr	r0, [r5, #24]
 801370a:	464a      	mov	r2, r9
 801370c:	4621      	mov	r1, r4
 801370e:	47c0      	blx	r8
 8013710:	61a8      	str	r0, [r5, #24]
 8013712:	2800      	cmp	r0, #0
 8013714:	d0b7      	beq.n	8013686 <rcl_wait_set_resize+0x1e2>
 8013716:	4622      	mov	r2, r4
 8013718:	4631      	mov	r1, r6
 801371a:	f004 f9bd 	bl	8017a98 <memset>
 801371e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013720:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013722:	61eb      	str	r3, [r5, #28]
 8013724:	6a38      	ldr	r0, [r7, #32]
 8013726:	61fe      	str	r6, [r7, #28]
 8013728:	464a      	mov	r2, r9
 801372a:	4621      	mov	r1, r4
 801372c:	47c0      	blx	r8
 801372e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013730:	6238      	str	r0, [r7, #32]
 8013732:	6a1f      	ldr	r7, [r3, #32]
 8013734:	2f00      	cmp	r7, #0
 8013736:	d054      	beq.n	80137e2 <rcl_wait_set_resize+0x33e>
 8013738:	4622      	mov	r2, r4
 801373a:	4631      	mov	r1, r6
 801373c:	4638      	mov	r0, r7
 801373e:	f004 f9ab 	bl	8017a98 <memset>
 8013742:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013744:	e73f      	b.n	80135c6 <rcl_wait_set_resize+0x122>
 8013746:	6a28      	ldr	r0, [r5, #32]
 8013748:	b120      	cbz	r0, 8013754 <rcl_wait_set_resize+0x2b0>
 801374a:	4639      	mov	r1, r7
 801374c:	47c0      	blx	r8
 801374e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013750:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013752:	622b      	str	r3, [r5, #32]
 8013754:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013756:	2800      	cmp	r0, #0
 8013758:	f43f af60 	beq.w	801361c <rcl_wait_set_resize+0x178>
 801375c:	4639      	mov	r1, r7
 801375e:	47c0      	blx	r8
 8013760:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013762:	2300      	movs	r3, #0
 8013764:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013768:	e758      	b.n	801361c <rcl_wait_set_resize+0x178>
 801376a:	009c      	lsls	r4, r3, #2
 801376c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801376e:	463a      	mov	r2, r7
 8013770:	4621      	mov	r1, r4
 8013772:	47c8      	blx	r9
 8013774:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013776:	2800      	cmp	r0, #0
 8013778:	d085      	beq.n	8013686 <rcl_wait_set_resize+0x1e2>
 801377a:	4622      	mov	r2, r4
 801377c:	4631      	mov	r1, r6
 801377e:	f004 f98b 	bl	8017a98 <memset>
 8013782:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013788:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801378a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801378e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013792:	463a      	mov	r2, r7
 8013794:	4621      	mov	r1, r4
 8013796:	47c8      	blx	r9
 8013798:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801379a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137a0:	b36b      	cbz	r3, 80137fe <rcl_wait_set_resize+0x35a>
 80137a2:	4622      	mov	r2, r4
 80137a4:	4631      	mov	r1, r6
 80137a6:	4618      	mov	r0, r3
 80137a8:	f004 f976 	bl	8017a98 <memset>
 80137ac:	4630      	mov	r0, r6
 80137ae:	b003      	add	sp, #12
 80137b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b4:	200b      	movs	r0, #11
 80137b6:	4770      	bx	lr
 80137b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80137bc:	e764      	b.n	8013688 <rcl_wait_set_resize+0x1e4>
 80137be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80137c0:	68a8      	ldr	r0, [r5, #8]
 80137c2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80137c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80137c6:	4798      	blx	r3
 80137c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80137ca:	6928      	ldr	r0, [r5, #16]
 80137cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80137ce:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80137d0:	f8c5 900c 	str.w	r9, [r5, #12]
 80137d4:	f8c5 9008 	str.w	r9, [r5, #8]
 80137d8:	4790      	blx	r2
 80137da:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80137de:	200a      	movs	r0, #10
 80137e0:	e752      	b.n	8013688 <rcl_wait_set_resize+0x1e4>
 80137e2:	69a8      	ldr	r0, [r5, #24]
 80137e4:	4649      	mov	r1, r9
 80137e6:	47d0      	blx	sl
 80137e8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80137ec:	200a      	movs	r0, #10
 80137ee:	e74b      	b.n	8013688 <rcl_wait_set_resize+0x1e4>
 80137f0:	6a28      	ldr	r0, [r5, #32]
 80137f2:	4639      	mov	r1, r7
 80137f4:	47c0      	blx	r8
 80137f6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80137fa:	200a      	movs	r0, #10
 80137fc:	e744      	b.n	8013688 <rcl_wait_set_resize+0x1e4>
 80137fe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013800:	9301      	str	r3, [sp, #4]
 8013802:	4639      	mov	r1, r7
 8013804:	47c0      	blx	r8
 8013806:	9b01      	ldr	r3, [sp, #4]
 8013808:	200a      	movs	r0, #10
 801380a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801380e:	e73b      	b.n	8013688 <rcl_wait_set_resize+0x1e4>

08013810 <rcl_wait_set_init>:
 8013810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013814:	b084      	sub	sp, #16
 8013816:	4604      	mov	r4, r0
 8013818:	a810      	add	r0, sp, #64	@ 0x40
 801381a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801381e:	460f      	mov	r7, r1
 8013820:	4690      	mov	r8, r2
 8013822:	4699      	mov	r9, r3
 8013824:	f7f8 fbb6 	bl	800bf94 <rcutils_allocator_is_valid>
 8013828:	2800      	cmp	r0, #0
 801382a:	d06b      	beq.n	8013904 <rcl_wait_set_init+0xf4>
 801382c:	2c00      	cmp	r4, #0
 801382e:	d069      	beq.n	8013904 <rcl_wait_set_init+0xf4>
 8013830:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013832:	b125      	cbz	r5, 801383e <rcl_wait_set_init+0x2e>
 8013834:	2564      	movs	r5, #100	@ 0x64
 8013836:	4628      	mov	r0, r5
 8013838:	b004      	add	sp, #16
 801383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801383e:	f1ba 0f00 	cmp.w	sl, #0
 8013842:	d05f      	beq.n	8013904 <rcl_wait_set_init+0xf4>
 8013844:	4650      	mov	r0, sl
 8013846:	f7fe fb0f 	bl	8011e68 <rcl_context_is_valid>
 801384a:	2800      	cmp	r0, #0
 801384c:	d067      	beq.n	801391e <rcl_wait_set_init+0x10e>
 801384e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013850:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8013852:	205c      	movs	r0, #92	@ 0x5c
 8013854:	4798      	blx	r3
 8013856:	6320      	str	r0, [r4, #48]	@ 0x30
 8013858:	2800      	cmp	r0, #0
 801385a:	d062      	beq.n	8013922 <rcl_wait_set_init+0x112>
 801385c:	4629      	mov	r1, r5
 801385e:	225c      	movs	r2, #92	@ 0x5c
 8013860:	f004 f91a 	bl	8017a98 <memset>
 8013864:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013868:	eb03 0e02 	add.w	lr, r3, r2
 801386c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801386e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013870:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013874:	449e      	add	lr, r3
 8013876:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801387a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801387e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013882:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013886:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801388a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801388e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013892:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013896:	f8da a000 	ldr.w	sl, [sl]
 801389a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801389c:	44c6      	add	lr, r8
 801389e:	f8dc 3000 	ldr.w	r3, [ip]
 80138a2:	602b      	str	r3, [r5, #0]
 80138a4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80138a8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80138ac:	f002 f9fe 	bl	8015cac <rmw_create_wait_set>
 80138b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138b2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80138b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80138b6:	b350      	cbz	r0, 801390e <rcl_wait_set_init+0xfe>
 80138b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138ba:	9302      	str	r3, [sp, #8]
 80138bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138be:	9301      	str	r3, [sp, #4]
 80138c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	4642      	mov	r2, r8
 80138c6:	464b      	mov	r3, r9
 80138c8:	4639      	mov	r1, r7
 80138ca:	4620      	mov	r0, r4
 80138cc:	f7ff fdea 	bl	80134a4 <rcl_wait_set_resize>
 80138d0:	4605      	mov	r5, r0
 80138d2:	2800      	cmp	r0, #0
 80138d4:	d0af      	beq.n	8013836 <rcl_wait_set_init+0x26>
 80138d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138d8:	bb2b      	cbnz	r3, 8013926 <rcl_wait_set_init+0x116>
 80138da:	2600      	movs	r6, #0
 80138dc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80138e0:	9600      	str	r6, [sp, #0]
 80138e2:	4633      	mov	r3, r6
 80138e4:	4632      	mov	r2, r6
 80138e6:	4631      	mov	r1, r6
 80138e8:	4620      	mov	r0, r4
 80138ea:	f7ff fddb 	bl	80134a4 <rcl_wait_set_resize>
 80138ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80138f0:	2800      	cmp	r0, #0
 80138f2:	d0a0      	beq.n	8013836 <rcl_wait_set_init+0x26>
 80138f4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80138f6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80138f8:	4798      	blx	r3
 80138fa:	4628      	mov	r0, r5
 80138fc:	6326      	str	r6, [r4, #48]	@ 0x30
 80138fe:	b004      	add	sp, #16
 8013900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013904:	250b      	movs	r5, #11
 8013906:	4628      	mov	r0, r5
 8013908:	b004      	add	sp, #16
 801390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801390e:	2501      	movs	r5, #1
 8013910:	f002 f9d6 	bl	8015cc0 <rmw_destroy_wait_set>
 8013914:	2800      	cmp	r0, #0
 8013916:	bf18      	it	ne
 8013918:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801391c:	e7dd      	b.n	80138da <rcl_wait_set_init+0xca>
 801391e:	2565      	movs	r5, #101	@ 0x65
 8013920:	e789      	b.n	8013836 <rcl_wait_set_init+0x26>
 8013922:	250a      	movs	r5, #10
 8013924:	e787      	b.n	8013836 <rcl_wait_set_init+0x26>
 8013926:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013928:	e7f2      	b.n	8013910 <rcl_wait_set_init+0x100>
 801392a:	bf00      	nop

0801392c <rcl_wait_set_add_guard_condition>:
 801392c:	b318      	cbz	r0, 8013976 <rcl_wait_set_add_guard_condition+0x4a>
 801392e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	4604      	mov	r4, r0
 8013934:	b30b      	cbz	r3, 801397a <rcl_wait_set_add_guard_condition+0x4e>
 8013936:	b319      	cbz	r1, 8013980 <rcl_wait_set_add_guard_condition+0x54>
 8013938:	68dd      	ldr	r5, [r3, #12]
 801393a:	68c0      	ldr	r0, [r0, #12]
 801393c:	4285      	cmp	r5, r0
 801393e:	d217      	bcs.n	8013970 <rcl_wait_set_add_guard_condition+0x44>
 8013940:	68a0      	ldr	r0, [r4, #8]
 8013942:	1c6e      	adds	r6, r5, #1
 8013944:	60de      	str	r6, [r3, #12]
 8013946:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801394a:	b102      	cbz	r2, 801394e <rcl_wait_set_add_guard_condition+0x22>
 801394c:	6015      	str	r5, [r2, #0]
 801394e:	4608      	mov	r0, r1
 8013950:	f003 fba8 	bl	80170a4 <rcl_guard_condition_get_rmw_handle>
 8013954:	b150      	cbz	r0, 801396c <rcl_wait_set_add_guard_condition+0x40>
 8013956:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013958:	6842      	ldr	r2, [r0, #4]
 801395a:	695b      	ldr	r3, [r3, #20]
 801395c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013960:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013962:	6913      	ldr	r3, [r2, #16]
 8013964:	3301      	adds	r3, #1
 8013966:	2000      	movs	r0, #0
 8013968:	6113      	str	r3, [r2, #16]
 801396a:	bd70      	pop	{r4, r5, r6, pc}
 801396c:	2001      	movs	r0, #1
 801396e:	bd70      	pop	{r4, r5, r6, pc}
 8013970:	f240 3086 	movw	r0, #902	@ 0x386
 8013974:	bd70      	pop	{r4, r5, r6, pc}
 8013976:	200b      	movs	r0, #11
 8013978:	4770      	bx	lr
 801397a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801397e:	bd70      	pop	{r4, r5, r6, pc}
 8013980:	200b      	movs	r0, #11
 8013982:	bd70      	pop	{r4, r5, r6, pc}

08013984 <rcl_wait_set_add_timer>:
 8013984:	b328      	cbz	r0, 80139d2 <rcl_wait_set_add_timer+0x4e>
 8013986:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	4604      	mov	r4, r0
 801398c:	b31b      	cbz	r3, 80139d6 <rcl_wait_set_add_timer+0x52>
 801398e:	b329      	cbz	r1, 80139dc <rcl_wait_set_add_timer+0x58>
 8013990:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013992:	6965      	ldr	r5, [r4, #20]
 8013994:	42a8      	cmp	r0, r5
 8013996:	d219      	bcs.n	80139cc <rcl_wait_set_add_timer+0x48>
 8013998:	6925      	ldr	r5, [r4, #16]
 801399a:	1c46      	adds	r6, r0, #1
 801399c:	641e      	str	r6, [r3, #64]	@ 0x40
 801399e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80139a2:	b102      	cbz	r2, 80139a6 <rcl_wait_set_add_timer+0x22>
 80139a4:	6010      	str	r0, [r2, #0]
 80139a6:	4608      	mov	r0, r1
 80139a8:	f7ff fba6 	bl	80130f8 <rcl_timer_get_guard_condition>
 80139ac:	b168      	cbz	r0, 80139ca <rcl_wait_set_add_timer+0x46>
 80139ae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80139b0:	68e3      	ldr	r3, [r4, #12]
 80139b2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80139b4:	3b01      	subs	r3, #1
 80139b6:	441d      	add	r5, r3
 80139b8:	f003 fb74 	bl	80170a4 <rcl_guard_condition_get_rmw_handle>
 80139bc:	b180      	cbz	r0, 80139e0 <rcl_wait_set_add_timer+0x5c>
 80139be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80139c0:	6842      	ldr	r2, [r0, #4]
 80139c2:	695b      	ldr	r3, [r3, #20]
 80139c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80139c8:	2000      	movs	r0, #0
 80139ca:	bd70      	pop	{r4, r5, r6, pc}
 80139cc:	f240 3086 	movw	r0, #902	@ 0x386
 80139d0:	bd70      	pop	{r4, r5, r6, pc}
 80139d2:	200b      	movs	r0, #11
 80139d4:	4770      	bx	lr
 80139d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80139da:	bd70      	pop	{r4, r5, r6, pc}
 80139dc:	200b      	movs	r0, #11
 80139de:	bd70      	pop	{r4, r5, r6, pc}
 80139e0:	2001      	movs	r0, #1
 80139e2:	bd70      	pop	{r4, r5, r6, pc}

080139e4 <rcl_wait_set_add_client>:
 80139e4:	b318      	cbz	r0, 8013a2e <rcl_wait_set_add_client+0x4a>
 80139e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80139e8:	b570      	push	{r4, r5, r6, lr}
 80139ea:	4604      	mov	r4, r0
 80139ec:	b30b      	cbz	r3, 8013a32 <rcl_wait_set_add_client+0x4e>
 80139ee:	b319      	cbz	r1, 8013a38 <rcl_wait_set_add_client+0x54>
 80139f0:	699d      	ldr	r5, [r3, #24]
 80139f2:	69c0      	ldr	r0, [r0, #28]
 80139f4:	4285      	cmp	r5, r0
 80139f6:	d217      	bcs.n	8013a28 <rcl_wait_set_add_client+0x44>
 80139f8:	69a0      	ldr	r0, [r4, #24]
 80139fa:	1c6e      	adds	r6, r5, #1
 80139fc:	619e      	str	r6, [r3, #24]
 80139fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013a02:	b102      	cbz	r2, 8013a06 <rcl_wait_set_add_client+0x22>
 8013a04:	6015      	str	r5, [r2, #0]
 8013a06:	4608      	mov	r0, r1
 8013a08:	f7fe f982 	bl	8011d10 <rcl_client_get_rmw_handle>
 8013a0c:	b150      	cbz	r0, 8013a24 <rcl_wait_set_add_client+0x40>
 8013a0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a10:	6842      	ldr	r2, [r0, #4]
 8013a12:	6a1b      	ldr	r3, [r3, #32]
 8013a14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a1a:	69d3      	ldr	r3, [r2, #28]
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	2000      	movs	r0, #0
 8013a20:	61d3      	str	r3, [r2, #28]
 8013a22:	bd70      	pop	{r4, r5, r6, pc}
 8013a24:	2001      	movs	r0, #1
 8013a26:	bd70      	pop	{r4, r5, r6, pc}
 8013a28:	f240 3086 	movw	r0, #902	@ 0x386
 8013a2c:	bd70      	pop	{r4, r5, r6, pc}
 8013a2e:	200b      	movs	r0, #11
 8013a30:	4770      	bx	lr
 8013a32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a36:	bd70      	pop	{r4, r5, r6, pc}
 8013a38:	200b      	movs	r0, #11
 8013a3a:	bd70      	pop	{r4, r5, r6, pc}

08013a3c <rcl_wait_set_add_service>:
 8013a3c:	b318      	cbz	r0, 8013a86 <rcl_wait_set_add_service+0x4a>
 8013a3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a40:	b570      	push	{r4, r5, r6, lr}
 8013a42:	4604      	mov	r4, r0
 8013a44:	b30b      	cbz	r3, 8013a8a <rcl_wait_set_add_service+0x4e>
 8013a46:	b319      	cbz	r1, 8013a90 <rcl_wait_set_add_service+0x54>
 8013a48:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013a4a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013a4c:	4285      	cmp	r5, r0
 8013a4e:	d217      	bcs.n	8013a80 <rcl_wait_set_add_service+0x44>
 8013a50:	6a20      	ldr	r0, [r4, #32]
 8013a52:	1c6e      	adds	r6, r5, #1
 8013a54:	625e      	str	r6, [r3, #36]	@ 0x24
 8013a56:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013a5a:	b102      	cbz	r2, 8013a5e <rcl_wait_set_add_service+0x22>
 8013a5c:	6015      	str	r5, [r2, #0]
 8013a5e:	4608      	mov	r0, r1
 8013a60:	f7fe fed6 	bl	8012810 <rcl_service_get_rmw_handle>
 8013a64:	b150      	cbz	r0, 8013a7c <rcl_wait_set_add_service+0x40>
 8013a66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a68:	6842      	ldr	r2, [r0, #4]
 8013a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a70:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a72:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013a74:	3301      	adds	r3, #1
 8013a76:	2000      	movs	r0, #0
 8013a78:	6293      	str	r3, [r2, #40]	@ 0x28
 8013a7a:	bd70      	pop	{r4, r5, r6, pc}
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
 8013a80:	f240 3086 	movw	r0, #902	@ 0x386
 8013a84:	bd70      	pop	{r4, r5, r6, pc}
 8013a86:	200b      	movs	r0, #11
 8013a88:	4770      	bx	lr
 8013a8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a8e:	bd70      	pop	{r4, r5, r6, pc}
 8013a90:	200b      	movs	r0, #11
 8013a92:	bd70      	pop	{r4, r5, r6, pc}
 8013a94:	0000      	movs	r0, r0
	...

08013a98 <rcl_wait>:
 8013a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9c:	ed2d 8b02 	vpush	{d8}
 8013aa0:	b08d      	sub	sp, #52	@ 0x34
 8013aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	f000 8143 	beq.w	8013d32 <rcl_wait+0x29a>
 8013aac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013aae:	4605      	mov	r5, r0
 8013ab0:	2e00      	cmp	r6, #0
 8013ab2:	f000 8112 	beq.w	8013cda <rcl_wait+0x242>
 8013ab6:	6843      	ldr	r3, [r0, #4]
 8013ab8:	b983      	cbnz	r3, 8013adc <rcl_wait+0x44>
 8013aba:	68eb      	ldr	r3, [r5, #12]
 8013abc:	b973      	cbnz	r3, 8013adc <rcl_wait+0x44>
 8013abe:	696b      	ldr	r3, [r5, #20]
 8013ac0:	b963      	cbnz	r3, 8013adc <rcl_wait+0x44>
 8013ac2:	69eb      	ldr	r3, [r5, #28]
 8013ac4:	b953      	cbnz	r3, 8013adc <rcl_wait+0x44>
 8013ac6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013ac8:	b943      	cbnz	r3, 8013adc <rcl_wait+0x44>
 8013aca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013acc:	b933      	cbnz	r3, 8013adc <rcl_wait+0x44>
 8013ace:	f240 3085 	movw	r0, #901	@ 0x385
 8013ad2:	b00d      	add	sp, #52	@ 0x34
 8013ad4:	ecbd 8b02 	vpop	{d8}
 8013ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	9b04      	ldr	r3, [sp, #16]
 8013ade:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	9b05      	ldr	r3, [sp, #20]
 8013ae4:	f173 0300 	sbcs.w	r3, r3, #0
 8013ae8:	f2c0 80f0 	blt.w	8013ccc <rcl_wait+0x234>
 8013aec:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013af0:	4643      	mov	r3, r8
 8013af2:	2a00      	cmp	r2, #0
 8013af4:	f000 8133 	beq.w	8013d5e <rcl_wait+0x2c6>
 8013af8:	2400      	movs	r4, #0
 8013afa:	4613      	mov	r3, r2
 8013afc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013d70 <rcl_wait+0x2d8>
 8013b00:	46a2      	mov	sl, r4
 8013b02:	46a3      	mov	fp, r4
 8013b04:	f240 3921 	movw	r9, #801	@ 0x321
 8013b08:	4632      	mov	r2, r6
 8013b0a:	e014      	b.n	8013b36 <rcl_wait+0x9e>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d1e0      	bne.n	8013ad2 <rcl_wait+0x3a>
 8013b10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b14:	4542      	cmp	r2, r8
 8013b16:	eb73 0107 	sbcs.w	r1, r3, r7
 8013b1a:	da03      	bge.n	8013b24 <rcl_wait+0x8c>
 8013b1c:	4690      	mov	r8, r2
 8013b1e:	461f      	mov	r7, r3
 8013b20:	f04f 0b01 	mov.w	fp, #1
 8013b24:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013b26:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013b28:	3401      	adds	r4, #1
 8013b2a:	f14a 0a00 	adc.w	sl, sl, #0
 8013b2e:	429c      	cmp	r4, r3
 8013b30:	f17a 0100 	sbcs.w	r1, sl, #0
 8013b34:	d228      	bcs.n	8013b88 <rcl_wait+0xf0>
 8013b36:	6928      	ldr	r0, [r5, #16]
 8013b38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013b3c:	a908      	add	r1, sp, #32
 8013b3e:	00a6      	lsls	r6, r4, #2
 8013b40:	2800      	cmp	r0, #0
 8013b42:	d0f1      	beq.n	8013b28 <rcl_wait+0x90>
 8013b44:	68eb      	ldr	r3, [r5, #12]
 8013b46:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013b4a:	4423      	add	r3, r4
 8013b4c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013b50:	f1be 0f00 	cmp.w	lr, #0
 8013b54:	d006      	beq.n	8013b64 <rcl_wait+0xcc>
 8013b56:	6913      	ldr	r3, [r2, #16]
 8013b58:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	6113      	str	r3, [r2, #16]
 8013b60:	692b      	ldr	r3, [r5, #16]
 8013b62:	5998      	ldr	r0, [r3, r6]
 8013b64:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013b68:	f7ff fa94 	bl	8013094 <rcl_timer_get_time_until_next_call>
 8013b6c:	4548      	cmp	r0, r9
 8013b6e:	d1cd      	bne.n	8013b0c <rcl_wait+0x74>
 8013b70:	692b      	ldr	r3, [r5, #16]
 8013b72:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013b74:	2100      	movs	r1, #0
 8013b76:	5199      	str	r1, [r3, r6]
 8013b78:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013b7a:	3401      	adds	r4, #1
 8013b7c:	f14a 0a00 	adc.w	sl, sl, #0
 8013b80:	429c      	cmp	r4, r3
 8013b82:	f17a 0100 	sbcs.w	r1, sl, #0
 8013b86:	d3d6      	bcc.n	8013b36 <rcl_wait+0x9e>
 8013b88:	4616      	mov	r6, r2
 8013b8a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013b8e:	4313      	orrs	r3, r2
 8013b90:	46d9      	mov	r9, fp
 8013b92:	f040 80a9 	bne.w	8013ce8 <rcl_wait+0x250>
 8013b96:	2300      	movs	r3, #0
 8013b98:	2200      	movs	r2, #0
 8013b9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013ba2:	ab08      	add	r3, sp, #32
 8013ba4:	9302      	str	r3, [sp, #8]
 8013ba6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013ba8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013bac:	e9cd 3200 	strd	r3, r2, [sp]
 8013bb0:	f106 0110 	add.w	r1, r6, #16
 8013bb4:	f106 031c 	add.w	r3, r6, #28
 8013bb8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013bbc:	1d30      	adds	r0, r6, #4
 8013bbe:	f001 fefd 	bl	80159bc <rmw_wait>
 8013bc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013bc6:	4680      	mov	r8, r0
 8013bc8:	b1ca      	cbz	r2, 8013bfe <rcl_wait+0x166>
 8013bca:	2400      	movs	r4, #0
 8013bcc:	4627      	mov	r7, r4
 8013bce:	692a      	ldr	r2, [r5, #16]
 8013bd0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013bd4:	f10d 011f 	add.w	r1, sp, #31
 8013bd8:	00a6      	lsls	r6, r4, #2
 8013bda:	b160      	cbz	r0, 8013bf6 <rcl_wait+0x15e>
 8013bdc:	f88d 701f 	strb.w	r7, [sp, #31]
 8013be0:	f7ff fa1e 	bl	8013020 <rcl_timer_is_ready>
 8013be4:	2800      	cmp	r0, #0
 8013be6:	f47f af74 	bne.w	8013ad2 <rcl_wait+0x3a>
 8013bea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013bee:	b90b      	cbnz	r3, 8013bf4 <rcl_wait+0x15c>
 8013bf0:	692a      	ldr	r2, [r5, #16]
 8013bf2:	5193      	str	r3, [r2, r6]
 8013bf4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013bf8:	3401      	adds	r4, #1
 8013bfa:	42a2      	cmp	r2, r4
 8013bfc:	d8e7      	bhi.n	8013bce <rcl_wait+0x136>
 8013bfe:	f038 0002 	bics.w	r0, r8, #2
 8013c02:	f040 8090 	bne.w	8013d26 <rcl_wait+0x28e>
 8013c06:	686e      	ldr	r6, [r5, #4]
 8013c08:	4602      	mov	r2, r0
 8013c0a:	b91e      	cbnz	r6, 8013c14 <rcl_wait+0x17c>
 8013c0c:	e00d      	b.n	8013c2a <rcl_wait+0x192>
 8013c0e:	3201      	adds	r2, #1
 8013c10:	42b2      	cmp	r2, r6
 8013c12:	d00a      	beq.n	8013c2a <rcl_wait+0x192>
 8013c14:	6899      	ldr	r1, [r3, #8]
 8013c16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c1a:	2900      	cmp	r1, #0
 8013c1c:	d1f7      	bne.n	8013c0e <rcl_wait+0x176>
 8013c1e:	682c      	ldr	r4, [r5, #0]
 8013c20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c24:	3201      	adds	r2, #1
 8013c26:	42b2      	cmp	r2, r6
 8013c28:	d1f4      	bne.n	8013c14 <rcl_wait+0x17c>
 8013c2a:	68ee      	ldr	r6, [r5, #12]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	b91e      	cbnz	r6, 8013c38 <rcl_wait+0x1a0>
 8013c30:	e00d      	b.n	8013c4e <rcl_wait+0x1b6>
 8013c32:	3201      	adds	r2, #1
 8013c34:	42b2      	cmp	r2, r6
 8013c36:	d00a      	beq.n	8013c4e <rcl_wait+0x1b6>
 8013c38:	6959      	ldr	r1, [r3, #20]
 8013c3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c3e:	2900      	cmp	r1, #0
 8013c40:	d1f7      	bne.n	8013c32 <rcl_wait+0x19a>
 8013c42:	68ac      	ldr	r4, [r5, #8]
 8013c44:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c48:	3201      	adds	r2, #1
 8013c4a:	42b2      	cmp	r2, r6
 8013c4c:	d1f4      	bne.n	8013c38 <rcl_wait+0x1a0>
 8013c4e:	69ee      	ldr	r6, [r5, #28]
 8013c50:	2200      	movs	r2, #0
 8013c52:	b91e      	cbnz	r6, 8013c5c <rcl_wait+0x1c4>
 8013c54:	e00d      	b.n	8013c72 <rcl_wait+0x1da>
 8013c56:	3201      	adds	r2, #1
 8013c58:	42b2      	cmp	r2, r6
 8013c5a:	d00a      	beq.n	8013c72 <rcl_wait+0x1da>
 8013c5c:	6a19      	ldr	r1, [r3, #32]
 8013c5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c62:	2900      	cmp	r1, #0
 8013c64:	d1f7      	bne.n	8013c56 <rcl_wait+0x1be>
 8013c66:	69ac      	ldr	r4, [r5, #24]
 8013c68:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c6c:	3201      	adds	r2, #1
 8013c6e:	42b2      	cmp	r2, r6
 8013c70:	d1f4      	bne.n	8013c5c <rcl_wait+0x1c4>
 8013c72:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013c74:	2200      	movs	r2, #0
 8013c76:	b91e      	cbnz	r6, 8013c80 <rcl_wait+0x1e8>
 8013c78:	e00d      	b.n	8013c96 <rcl_wait+0x1fe>
 8013c7a:	3201      	adds	r2, #1
 8013c7c:	4296      	cmp	r6, r2
 8013c7e:	d00a      	beq.n	8013c96 <rcl_wait+0x1fe>
 8013c80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013c82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013c86:	2900      	cmp	r1, #0
 8013c88:	d1f7      	bne.n	8013c7a <rcl_wait+0x1e2>
 8013c8a:	6a2c      	ldr	r4, [r5, #32]
 8013c8c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013c90:	3201      	adds	r2, #1
 8013c92:	4296      	cmp	r6, r2
 8013c94:	d1f4      	bne.n	8013c80 <rcl_wait+0x1e8>
 8013c96:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013c98:	2200      	movs	r2, #0
 8013c9a:	b91e      	cbnz	r6, 8013ca4 <rcl_wait+0x20c>
 8013c9c:	e00d      	b.n	8013cba <rcl_wait+0x222>
 8013c9e:	3201      	adds	r2, #1
 8013ca0:	42b2      	cmp	r2, r6
 8013ca2:	d00a      	beq.n	8013cba <rcl_wait+0x222>
 8013ca4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013ca6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013caa:	2900      	cmp	r1, #0
 8013cac:	d1f7      	bne.n	8013c9e <rcl_wait+0x206>
 8013cae:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013cb0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013cb4:	3201      	adds	r2, #1
 8013cb6:	42b2      	cmp	r2, r6
 8013cb8:	d1f4      	bne.n	8013ca4 <rcl_wait+0x20c>
 8013cba:	f1b8 0f02 	cmp.w	r8, #2
 8013cbe:	f47f af08 	bne.w	8013ad2 <rcl_wait+0x3a>
 8013cc2:	464b      	mov	r3, r9
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	bf08      	it	eq
 8013cc8:	2002      	moveq	r0, #2
 8013cca:	e702      	b.n	8013ad2 <rcl_wait+0x3a>
 8013ccc:	2a00      	cmp	r2, #0
 8013cce:	d03a      	beq.n	8013d46 <rcl_wait+0x2ae>
 8013cd0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013cd4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013cd8:	e70e      	b.n	8013af8 <rcl_wait+0x60>
 8013cda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013cde:	b00d      	add	sp, #52	@ 0x34
 8013ce0:	ecbd 8b02 	vpop	{d8}
 8013ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce8:	9b04      	ldr	r3, [sp, #16]
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	9b05      	ldr	r3, [sp, #20]
 8013cee:	f173 0300 	sbcs.w	r3, r3, #0
 8013cf2:	db24      	blt.n	8013d3e <rcl_wait+0x2a6>
 8013cf4:	2f00      	cmp	r7, #0
 8013cf6:	bfbc      	itt	lt
 8013cf8:	f04f 0800 	movlt.w	r8, #0
 8013cfc:	4647      	movlt	r7, r8
 8013cfe:	a31e      	add	r3, pc, #120	@ (adr r3, 8013d78 <rcl_wait+0x2e0>)
 8013d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d04:	4640      	mov	r0, r8
 8013d06:	4639      	mov	r1, r7
 8013d08:	f7ec faf2 	bl	80002f0 <__aeabi_ldivmod>
 8013d0c:	a31a      	add	r3, pc, #104	@ (adr r3, 8013d78 <rcl_wait+0x2e0>)
 8013d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d12:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013d16:	4640      	mov	r0, r8
 8013d18:	4639      	mov	r1, r7
 8013d1a:	f7ec fae9 	bl	80002f0 <__aeabi_ldivmod>
 8013d1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013d22:	ab08      	add	r3, sp, #32
 8013d24:	e73e      	b.n	8013ba4 <rcl_wait+0x10c>
 8013d26:	2001      	movs	r0, #1
 8013d28:	b00d      	add	sp, #52	@ 0x34
 8013d2a:	ecbd 8b02 	vpop	{d8}
 8013d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d32:	200b      	movs	r0, #11
 8013d34:	b00d      	add	sp, #52	@ 0x34
 8013d36:	ecbd 8b02 	vpop	{d8}
 8013d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d3e:	465b      	mov	r3, fp
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d1d7      	bne.n	8013cf4 <rcl_wait+0x25c>
 8013d44:	e72e      	b.n	8013ba4 <rcl_wait+0x10c>
 8013d46:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013d4a:	430b      	orrs	r3, r1
 8013d4c:	bf08      	it	eq
 8013d4e:	4691      	moveq	r9, r2
 8013d50:	f43f af21 	beq.w	8013b96 <rcl_wait+0xfe>
 8013d54:	9b04      	ldr	r3, [sp, #16]
 8013d56:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013d5a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	9b05      	ldr	r3, [sp, #20]
 8013d62:	f173 0300 	sbcs.w	r3, r3, #0
 8013d66:	f04f 0300 	mov.w	r3, #0
 8013d6a:	4699      	mov	r9, r3
 8013d6c:	dac2      	bge.n	8013cf4 <rcl_wait+0x25c>
 8013d6e:	e719      	b.n	8013ba4 <rcl_wait+0x10c>
 8013d70:	ffffffff 	.word	0xffffffff
 8013d74:	7fffffff 	.word	0x7fffffff
 8013d78:	3b9aca00 	.word	0x3b9aca00
 8013d7c:	00000000 	.word	0x00000000

08013d80 <rcl_action_take_goal_response>:
 8013d80:	2800      	cmp	r0, #0
 8013d82:	d039      	beq.n	8013df8 <rcl_action_take_goal_response+0x78>
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	4604      	mov	r4, r0
 8013d88:	6800      	ldr	r0, [r0, #0]
 8013d8a:	b380      	cbz	r0, 8013dee <rcl_action_take_goal_response+0x6e>
 8013d8c:	460d      	mov	r5, r1
 8013d8e:	4616      	mov	r6, r2
 8013d90:	f7fe f842 	bl	8011e18 <rcl_client_is_valid>
 8013d94:	b330      	cbz	r0, 8013de4 <rcl_action_take_goal_response+0x64>
 8013d96:	6820      	ldr	r0, [r4, #0]
 8013d98:	3004      	adds	r0, #4
 8013d9a:	f7fe f83d 	bl	8011e18 <rcl_client_is_valid>
 8013d9e:	b308      	cbz	r0, 8013de4 <rcl_action_take_goal_response+0x64>
 8013da0:	6820      	ldr	r0, [r4, #0]
 8013da2:	3008      	adds	r0, #8
 8013da4:	f7fe f838 	bl	8011e18 <rcl_client_is_valid>
 8013da8:	b1e0      	cbz	r0, 8013de4 <rcl_action_take_goal_response+0x64>
 8013daa:	6820      	ldr	r0, [r4, #0]
 8013dac:	300c      	adds	r0, #12
 8013dae:	f7fe fdf5 	bl	801299c <rcl_subscription_is_valid>
 8013db2:	b1b8      	cbz	r0, 8013de4 <rcl_action_take_goal_response+0x64>
 8013db4:	6820      	ldr	r0, [r4, #0]
 8013db6:	3010      	adds	r0, #16
 8013db8:	f7fe fdf0 	bl	801299c <rcl_subscription_is_valid>
 8013dbc:	b190      	cbz	r0, 8013de4 <rcl_action_take_goal_response+0x64>
 8013dbe:	b1cd      	cbz	r5, 8013df4 <rcl_action_take_goal_response+0x74>
 8013dc0:	b1c6      	cbz	r6, 8013df4 <rcl_action_take_goal_response+0x74>
 8013dc2:	6820      	ldr	r0, [r4, #0]
 8013dc4:	4632      	mov	r2, r6
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	f7fd ffde 	bl	8011d88 <rcl_take_response>
 8013dcc:	b148      	cbz	r0, 8013de2 <rcl_action_take_goal_response+0x62>
 8013dce:	280a      	cmp	r0, #10
 8013dd0:	d007      	beq.n	8013de2 <rcl_action_take_goal_response+0x62>
 8013dd2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013dd6:	f640 0337 	movw	r3, #2103	@ 0x837
 8013dda:	4290      	cmp	r0, r2
 8013ddc:	bf0c      	ite	eq
 8013dde:	4618      	moveq	r0, r3
 8013de0:	2001      	movne	r0, #1
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	f7f8 f8fc 	bl	800bfe0 <rcutils_reset_error>
 8013de8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013dec:	bd70      	pop	{r4, r5, r6, pc}
 8013dee:	f640 0036 	movw	r0, #2102	@ 0x836
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	200b      	movs	r0, #11
 8013df6:	bd70      	pop	{r4, r5, r6, pc}
 8013df8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013dfc:	4770      	bx	lr
 8013dfe:	bf00      	nop

08013e00 <rcl_action_send_result_request>:
 8013e00:	b390      	cbz	r0, 8013e68 <rcl_action_send_result_request+0x68>
 8013e02:	b570      	push	{r4, r5, r6, lr}
 8013e04:	4604      	mov	r4, r0
 8013e06:	6800      	ldr	r0, [r0, #0]
 8013e08:	b348      	cbz	r0, 8013e5e <rcl_action_send_result_request+0x5e>
 8013e0a:	460d      	mov	r5, r1
 8013e0c:	4616      	mov	r6, r2
 8013e0e:	f7fe f803 	bl	8011e18 <rcl_client_is_valid>
 8013e12:	b1f8      	cbz	r0, 8013e54 <rcl_action_send_result_request+0x54>
 8013e14:	6820      	ldr	r0, [r4, #0]
 8013e16:	3004      	adds	r0, #4
 8013e18:	f7fd fffe 	bl	8011e18 <rcl_client_is_valid>
 8013e1c:	b1d0      	cbz	r0, 8013e54 <rcl_action_send_result_request+0x54>
 8013e1e:	6820      	ldr	r0, [r4, #0]
 8013e20:	3008      	adds	r0, #8
 8013e22:	f7fd fff9 	bl	8011e18 <rcl_client_is_valid>
 8013e26:	b1a8      	cbz	r0, 8013e54 <rcl_action_send_result_request+0x54>
 8013e28:	6820      	ldr	r0, [r4, #0]
 8013e2a:	300c      	adds	r0, #12
 8013e2c:	f7fe fdb6 	bl	801299c <rcl_subscription_is_valid>
 8013e30:	b180      	cbz	r0, 8013e54 <rcl_action_send_result_request+0x54>
 8013e32:	6820      	ldr	r0, [r4, #0]
 8013e34:	3010      	adds	r0, #16
 8013e36:	f7fe fdb1 	bl	801299c <rcl_subscription_is_valid>
 8013e3a:	b158      	cbz	r0, 8013e54 <rcl_action_send_result_request+0x54>
 8013e3c:	b195      	cbz	r5, 8013e64 <rcl_action_send_result_request+0x64>
 8013e3e:	b18e      	cbz	r6, 8013e64 <rcl_action_send_result_request+0x64>
 8013e40:	6820      	ldr	r0, [r4, #0]
 8013e42:	4632      	mov	r2, r6
 8013e44:	4629      	mov	r1, r5
 8013e46:	3008      	adds	r0, #8
 8013e48:	f7fd ff68 	bl	8011d1c <rcl_send_request>
 8013e4c:	3800      	subs	r0, #0
 8013e4e:	bf18      	it	ne
 8013e50:	2001      	movne	r0, #1
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	f7f8 f8c4 	bl	800bfe0 <rcutils_reset_error>
 8013e58:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e5c:	bd70      	pop	{r4, r5, r6, pc}
 8013e5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e62:	bd70      	pop	{r4, r5, r6, pc}
 8013e64:	200b      	movs	r0, #11
 8013e66:	bd70      	pop	{r4, r5, r6, pc}
 8013e68:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e6c:	4770      	bx	lr
 8013e6e:	bf00      	nop

08013e70 <rcl_action_take_result_response>:
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d03a      	beq.n	8013eea <rcl_action_take_result_response+0x7a>
 8013e74:	b570      	push	{r4, r5, r6, lr}
 8013e76:	4604      	mov	r4, r0
 8013e78:	6800      	ldr	r0, [r0, #0]
 8013e7a:	b388      	cbz	r0, 8013ee0 <rcl_action_take_result_response+0x70>
 8013e7c:	460d      	mov	r5, r1
 8013e7e:	4616      	mov	r6, r2
 8013e80:	f7fd ffca 	bl	8011e18 <rcl_client_is_valid>
 8013e84:	b338      	cbz	r0, 8013ed6 <rcl_action_take_result_response+0x66>
 8013e86:	6820      	ldr	r0, [r4, #0]
 8013e88:	3004      	adds	r0, #4
 8013e8a:	f7fd ffc5 	bl	8011e18 <rcl_client_is_valid>
 8013e8e:	b310      	cbz	r0, 8013ed6 <rcl_action_take_result_response+0x66>
 8013e90:	6820      	ldr	r0, [r4, #0]
 8013e92:	3008      	adds	r0, #8
 8013e94:	f7fd ffc0 	bl	8011e18 <rcl_client_is_valid>
 8013e98:	b1e8      	cbz	r0, 8013ed6 <rcl_action_take_result_response+0x66>
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	300c      	adds	r0, #12
 8013e9e:	f7fe fd7d 	bl	801299c <rcl_subscription_is_valid>
 8013ea2:	b1c0      	cbz	r0, 8013ed6 <rcl_action_take_result_response+0x66>
 8013ea4:	6820      	ldr	r0, [r4, #0]
 8013ea6:	3010      	adds	r0, #16
 8013ea8:	f7fe fd78 	bl	801299c <rcl_subscription_is_valid>
 8013eac:	b198      	cbz	r0, 8013ed6 <rcl_action_take_result_response+0x66>
 8013eae:	b1d5      	cbz	r5, 8013ee6 <rcl_action_take_result_response+0x76>
 8013eb0:	b1ce      	cbz	r6, 8013ee6 <rcl_action_take_result_response+0x76>
 8013eb2:	6820      	ldr	r0, [r4, #0]
 8013eb4:	4632      	mov	r2, r6
 8013eb6:	4629      	mov	r1, r5
 8013eb8:	3008      	adds	r0, #8
 8013eba:	f7fd ff65 	bl	8011d88 <rcl_take_response>
 8013ebe:	b148      	cbz	r0, 8013ed4 <rcl_action_take_result_response+0x64>
 8013ec0:	280a      	cmp	r0, #10
 8013ec2:	d007      	beq.n	8013ed4 <rcl_action_take_result_response+0x64>
 8013ec4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013ec8:	f640 0337 	movw	r3, #2103	@ 0x837
 8013ecc:	4290      	cmp	r0, r2
 8013ece:	bf0c      	ite	eq
 8013ed0:	4618      	moveq	r0, r3
 8013ed2:	2001      	movne	r0, #1
 8013ed4:	bd70      	pop	{r4, r5, r6, pc}
 8013ed6:	f7f8 f883 	bl	800bfe0 <rcutils_reset_error>
 8013eda:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ede:	bd70      	pop	{r4, r5, r6, pc}
 8013ee0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ee4:	bd70      	pop	{r4, r5, r6, pc}
 8013ee6:	200b      	movs	r0, #11
 8013ee8:	bd70      	pop	{r4, r5, r6, pc}
 8013eea:	f640 0036 	movw	r0, #2102	@ 0x836
 8013eee:	4770      	bx	lr

08013ef0 <rcl_action_take_cancel_response>:
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d03a      	beq.n	8013f6a <rcl_action_take_cancel_response+0x7a>
 8013ef4:	b570      	push	{r4, r5, r6, lr}
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	6800      	ldr	r0, [r0, #0]
 8013efa:	b388      	cbz	r0, 8013f60 <rcl_action_take_cancel_response+0x70>
 8013efc:	460d      	mov	r5, r1
 8013efe:	4616      	mov	r6, r2
 8013f00:	f7fd ff8a 	bl	8011e18 <rcl_client_is_valid>
 8013f04:	b338      	cbz	r0, 8013f56 <rcl_action_take_cancel_response+0x66>
 8013f06:	6820      	ldr	r0, [r4, #0]
 8013f08:	3004      	adds	r0, #4
 8013f0a:	f7fd ff85 	bl	8011e18 <rcl_client_is_valid>
 8013f0e:	b310      	cbz	r0, 8013f56 <rcl_action_take_cancel_response+0x66>
 8013f10:	6820      	ldr	r0, [r4, #0]
 8013f12:	3008      	adds	r0, #8
 8013f14:	f7fd ff80 	bl	8011e18 <rcl_client_is_valid>
 8013f18:	b1e8      	cbz	r0, 8013f56 <rcl_action_take_cancel_response+0x66>
 8013f1a:	6820      	ldr	r0, [r4, #0]
 8013f1c:	300c      	adds	r0, #12
 8013f1e:	f7fe fd3d 	bl	801299c <rcl_subscription_is_valid>
 8013f22:	b1c0      	cbz	r0, 8013f56 <rcl_action_take_cancel_response+0x66>
 8013f24:	6820      	ldr	r0, [r4, #0]
 8013f26:	3010      	adds	r0, #16
 8013f28:	f7fe fd38 	bl	801299c <rcl_subscription_is_valid>
 8013f2c:	b198      	cbz	r0, 8013f56 <rcl_action_take_cancel_response+0x66>
 8013f2e:	b1d5      	cbz	r5, 8013f66 <rcl_action_take_cancel_response+0x76>
 8013f30:	b1ce      	cbz	r6, 8013f66 <rcl_action_take_cancel_response+0x76>
 8013f32:	6820      	ldr	r0, [r4, #0]
 8013f34:	4632      	mov	r2, r6
 8013f36:	4629      	mov	r1, r5
 8013f38:	3004      	adds	r0, #4
 8013f3a:	f7fd ff25 	bl	8011d88 <rcl_take_response>
 8013f3e:	b148      	cbz	r0, 8013f54 <rcl_action_take_cancel_response+0x64>
 8013f40:	280a      	cmp	r0, #10
 8013f42:	d007      	beq.n	8013f54 <rcl_action_take_cancel_response+0x64>
 8013f44:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013f48:	f640 0337 	movw	r3, #2103	@ 0x837
 8013f4c:	4290      	cmp	r0, r2
 8013f4e:	bf0c      	ite	eq
 8013f50:	4618      	moveq	r0, r3
 8013f52:	2001      	movne	r0, #1
 8013f54:	bd70      	pop	{r4, r5, r6, pc}
 8013f56:	f7f8 f843 	bl	800bfe0 <rcutils_reset_error>
 8013f5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}
 8013f60:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f64:	bd70      	pop	{r4, r5, r6, pc}
 8013f66:	200b      	movs	r0, #11
 8013f68:	bd70      	pop	{r4, r5, r6, pc}
 8013f6a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f6e:	4770      	bx	lr

08013f70 <rcl_action_take_feedback>:
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d038      	beq.n	8013fe6 <rcl_action_take_feedback+0x76>
 8013f74:	b530      	push	{r4, r5, lr}
 8013f76:	4604      	mov	r4, r0
 8013f78:	6800      	ldr	r0, [r0, #0]
 8013f7a:	b091      	sub	sp, #68	@ 0x44
 8013f7c:	b378      	cbz	r0, 8013fde <rcl_action_take_feedback+0x6e>
 8013f7e:	460d      	mov	r5, r1
 8013f80:	f7fd ff4a 	bl	8011e18 <rcl_client_is_valid>
 8013f84:	b328      	cbz	r0, 8013fd2 <rcl_action_take_feedback+0x62>
 8013f86:	6820      	ldr	r0, [r4, #0]
 8013f88:	3004      	adds	r0, #4
 8013f8a:	f7fd ff45 	bl	8011e18 <rcl_client_is_valid>
 8013f8e:	b300      	cbz	r0, 8013fd2 <rcl_action_take_feedback+0x62>
 8013f90:	6820      	ldr	r0, [r4, #0]
 8013f92:	3008      	adds	r0, #8
 8013f94:	f7fd ff40 	bl	8011e18 <rcl_client_is_valid>
 8013f98:	b1d8      	cbz	r0, 8013fd2 <rcl_action_take_feedback+0x62>
 8013f9a:	6820      	ldr	r0, [r4, #0]
 8013f9c:	300c      	adds	r0, #12
 8013f9e:	f7fe fcfd 	bl	801299c <rcl_subscription_is_valid>
 8013fa2:	b1b0      	cbz	r0, 8013fd2 <rcl_action_take_feedback+0x62>
 8013fa4:	6820      	ldr	r0, [r4, #0]
 8013fa6:	3010      	adds	r0, #16
 8013fa8:	f7fe fcf8 	bl	801299c <rcl_subscription_is_valid>
 8013fac:	b188      	cbz	r0, 8013fd2 <rcl_action_take_feedback+0x62>
 8013fae:	b1ed      	cbz	r5, 8013fec <rcl_action_take_feedback+0x7c>
 8013fb0:	6820      	ldr	r0, [r4, #0]
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	466a      	mov	r2, sp
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	300c      	adds	r0, #12
 8013fba:	f7fe fc91 	bl	80128e0 <rcl_take>
 8013fbe:	b160      	cbz	r0, 8013fda <rcl_action_take_feedback+0x6a>
 8013fc0:	f240 1391 	movw	r3, #401	@ 0x191
 8013fc4:	4298      	cmp	r0, r3
 8013fc6:	d014      	beq.n	8013ff2 <rcl_action_take_feedback+0x82>
 8013fc8:	280a      	cmp	r0, #10
 8013fca:	bf18      	it	ne
 8013fcc:	2001      	movne	r0, #1
 8013fce:	b011      	add	sp, #68	@ 0x44
 8013fd0:	bd30      	pop	{r4, r5, pc}
 8013fd2:	f7f8 f805 	bl	800bfe0 <rcutils_reset_error>
 8013fd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fda:	b011      	add	sp, #68	@ 0x44
 8013fdc:	bd30      	pop	{r4, r5, pc}
 8013fde:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fe2:	b011      	add	sp, #68	@ 0x44
 8013fe4:	bd30      	pop	{r4, r5, pc}
 8013fe6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fea:	4770      	bx	lr
 8013fec:	200b      	movs	r0, #11
 8013fee:	b011      	add	sp, #68	@ 0x44
 8013ff0:	bd30      	pop	{r4, r5, pc}
 8013ff2:	f640 0037 	movw	r0, #2103	@ 0x837
 8013ff6:	e7f0      	b.n	8013fda <rcl_action_take_feedback+0x6a>

08013ff8 <rcl_action_wait_set_add_action_client>:
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d048      	beq.n	801408e <rcl_action_wait_set_add_action_client+0x96>
 8013ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ffe:	460c      	mov	r4, r1
 8014000:	2900      	cmp	r1, #0
 8014002:	d03c      	beq.n	801407e <rcl_action_wait_set_add_action_client+0x86>
 8014004:	4605      	mov	r5, r0
 8014006:	6808      	ldr	r0, [r1, #0]
 8014008:	2800      	cmp	r0, #0
 801400a:	d038      	beq.n	801407e <rcl_action_wait_set_add_action_client+0x86>
 801400c:	4617      	mov	r7, r2
 801400e:	461e      	mov	r6, r3
 8014010:	f7fd ff02 	bl	8011e18 <rcl_client_is_valid>
 8014014:	b3b0      	cbz	r0, 8014084 <rcl_action_wait_set_add_action_client+0x8c>
 8014016:	6820      	ldr	r0, [r4, #0]
 8014018:	3004      	adds	r0, #4
 801401a:	f7fd fefd 	bl	8011e18 <rcl_client_is_valid>
 801401e:	b388      	cbz	r0, 8014084 <rcl_action_wait_set_add_action_client+0x8c>
 8014020:	6820      	ldr	r0, [r4, #0]
 8014022:	3008      	adds	r0, #8
 8014024:	f7fd fef8 	bl	8011e18 <rcl_client_is_valid>
 8014028:	b360      	cbz	r0, 8014084 <rcl_action_wait_set_add_action_client+0x8c>
 801402a:	6820      	ldr	r0, [r4, #0]
 801402c:	300c      	adds	r0, #12
 801402e:	f7fe fcb5 	bl	801299c <rcl_subscription_is_valid>
 8014032:	b338      	cbz	r0, 8014084 <rcl_action_wait_set_add_action_client+0x8c>
 8014034:	6820      	ldr	r0, [r4, #0]
 8014036:	3010      	adds	r0, #16
 8014038:	f7fe fcb0 	bl	801299c <rcl_subscription_is_valid>
 801403c:	b310      	cbz	r0, 8014084 <rcl_action_wait_set_add_action_client+0x8c>
 801403e:	6821      	ldr	r1, [r4, #0]
 8014040:	4628      	mov	r0, r5
 8014042:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8014046:	f7ff fccd 	bl	80139e4 <rcl_wait_set_add_client>
 801404a:	b9b8      	cbnz	r0, 801407c <rcl_action_wait_set_add_action_client+0x84>
 801404c:	6821      	ldr	r1, [r4, #0]
 801404e:	4628      	mov	r0, r5
 8014050:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8014054:	3104      	adds	r1, #4
 8014056:	f7ff fcc5 	bl	80139e4 <rcl_wait_set_add_client>
 801405a:	b978      	cbnz	r0, 801407c <rcl_action_wait_set_add_action_client+0x84>
 801405c:	6821      	ldr	r1, [r4, #0]
 801405e:	4628      	mov	r0, r5
 8014060:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014064:	3108      	adds	r1, #8
 8014066:	f7ff fcbd 	bl	80139e4 <rcl_wait_set_add_client>
 801406a:	b938      	cbnz	r0, 801407c <rcl_action_wait_set_add_action_client+0x84>
 801406c:	6821      	ldr	r1, [r4, #0]
 801406e:	4628      	mov	r0, r5
 8014070:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014074:	310c      	adds	r1, #12
 8014076:	f7ff f96d 	bl	8013354 <rcl_wait_set_add_subscription>
 801407a:	b158      	cbz	r0, 8014094 <rcl_action_wait_set_add_action_client+0x9c>
 801407c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801407e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014084:	f7f7 ffac 	bl	800bfe0 <rcutils_reset_error>
 8014088:	f640 0036 	movw	r0, #2102	@ 0x836
 801408c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801408e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014092:	4770      	bx	lr
 8014094:	6821      	ldr	r1, [r4, #0]
 8014096:	4628      	mov	r0, r5
 8014098:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801409c:	3110      	adds	r1, #16
 801409e:	f7ff f959 	bl	8013354 <rcl_wait_set_add_subscription>
 80140a2:	2800      	cmp	r0, #0
 80140a4:	d1ea      	bne.n	801407c <rcl_action_wait_set_add_action_client+0x84>
 80140a6:	b11f      	cbz	r7, 80140b0 <rcl_action_wait_set_add_action_client+0xb8>
 80140a8:	6823      	ldr	r3, [r4, #0]
 80140aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80140ae:	603b      	str	r3, [r7, #0]
 80140b0:	2e00      	cmp	r6, #0
 80140b2:	d0e3      	beq.n	801407c <rcl_action_wait_set_add_action_client+0x84>
 80140b4:	6823      	ldr	r3, [r4, #0]
 80140b6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80140ba:	6033      	str	r3, [r6, #0]
 80140bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140be:	bf00      	nop

080140c0 <rcl_action_client_wait_set_get_entities_ready>:
 80140c0:	2800      	cmp	r0, #0
 80140c2:	f000 808d 	beq.w	80141e0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80140c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140ca:	460c      	mov	r4, r1
 80140cc:	2900      	cmp	r1, #0
 80140ce:	d077      	beq.n	80141c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80140d0:	4605      	mov	r5, r0
 80140d2:	6808      	ldr	r0, [r1, #0]
 80140d4:	2800      	cmp	r0, #0
 80140d6:	d073      	beq.n	80141c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80140d8:	4616      	mov	r6, r2
 80140da:	461f      	mov	r7, r3
 80140dc:	f7fd fe9c 	bl	8011e18 <rcl_client_is_valid>
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d071      	beq.n	80141c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80140e4:	6820      	ldr	r0, [r4, #0]
 80140e6:	3004      	adds	r0, #4
 80140e8:	f7fd fe96 	bl	8011e18 <rcl_client_is_valid>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d06b      	beq.n	80141c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80140f0:	6820      	ldr	r0, [r4, #0]
 80140f2:	3008      	adds	r0, #8
 80140f4:	f7fd fe90 	bl	8011e18 <rcl_client_is_valid>
 80140f8:	2800      	cmp	r0, #0
 80140fa:	d065      	beq.n	80141c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80140fc:	6820      	ldr	r0, [r4, #0]
 80140fe:	300c      	adds	r0, #12
 8014100:	f7fe fc4c 	bl	801299c <rcl_subscription_is_valid>
 8014104:	2800      	cmp	r0, #0
 8014106:	d05f      	beq.n	80141c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014108:	6820      	ldr	r0, [r4, #0]
 801410a:	3010      	adds	r0, #16
 801410c:	f7fe fc46 	bl	801299c <rcl_subscription_is_valid>
 8014110:	2800      	cmp	r0, #0
 8014112:	d059      	beq.n	80141c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014114:	2e00      	cmp	r6, #0
 8014116:	d060      	beq.n	80141da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014118:	2f00      	cmp	r7, #0
 801411a:	d05e      	beq.n	80141da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801411c:	9b06      	ldr	r3, [sp, #24]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d05b      	beq.n	80141da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014122:	9b07      	ldr	r3, [sp, #28]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d058      	beq.n	80141da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014128:	9b08      	ldr	r3, [sp, #32]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d055      	beq.n	80141da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801412e:	6823      	ldr	r3, [r4, #0]
 8014130:	686a      	ldr	r2, [r5, #4]
 8014132:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8014136:	428a      	cmp	r2, r1
 8014138:	d94c      	bls.n	80141d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801413a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801413e:	4282      	cmp	r2, r0
 8014140:	d948      	bls.n	80141d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014142:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014146:	69ea      	ldr	r2, [r5, #28]
 8014148:	42a2      	cmp	r2, r4
 801414a:	d943      	bls.n	80141d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801414c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014150:	4562      	cmp	r2, ip
 8014152:	d93f      	bls.n	80141d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014154:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014158:	4572      	cmp	r2, lr
 801415a:	d93b      	bls.n	80141d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801415c:	69aa      	ldr	r2, [r5, #24]
 801415e:	682d      	ldr	r5, [r5, #0]
 8014160:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014164:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014168:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801416c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014170:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014174:	f103 0c0c 	add.w	ip, r3, #12
 8014178:	eba5 050c 	sub.w	r5, r5, ip
 801417c:	fab5 f585 	clz	r5, r5
 8014180:	096d      	lsrs	r5, r5, #5
 8014182:	7035      	strb	r5, [r6, #0]
 8014184:	f103 0510 	add.w	r5, r3, #16
 8014188:	1b64      	subs	r4, r4, r5
 801418a:	fab4 f484 	clz	r4, r4
 801418e:	0964      	lsrs	r4, r4, #5
 8014190:	703c      	strb	r4, [r7, #0]
 8014192:	eba3 0008 	sub.w	r0, r3, r8
 8014196:	1d1c      	adds	r4, r3, #4
 8014198:	3308      	adds	r3, #8
 801419a:	1ad3      	subs	r3, r2, r3
 801419c:	fab0 f080 	clz	r0, r0
 80141a0:	9a06      	ldr	r2, [sp, #24]
 80141a2:	0940      	lsrs	r0, r0, #5
 80141a4:	1b09      	subs	r1, r1, r4
 80141a6:	7010      	strb	r0, [r2, #0]
 80141a8:	fab1 f181 	clz	r1, r1
 80141ac:	9a07      	ldr	r2, [sp, #28]
 80141ae:	0949      	lsrs	r1, r1, #5
 80141b0:	7011      	strb	r1, [r2, #0]
 80141b2:	fab3 f383 	clz	r3, r3
 80141b6:	9a08      	ldr	r2, [sp, #32]
 80141b8:	095b      	lsrs	r3, r3, #5
 80141ba:	2000      	movs	r0, #0
 80141bc:	7013      	strb	r3, [r2, #0]
 80141be:	e001      	b.n	80141c4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80141c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c8:	f7f7 ff0a 	bl	800bfe0 <rcutils_reset_error>
 80141cc:	f640 0036 	movw	r0, #2102	@ 0x836
 80141d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d4:	2001      	movs	r0, #1
 80141d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141da:	200b      	movs	r0, #11
 80141dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop

080141e8 <rcl_action_take_goal_request>:
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d039      	beq.n	8014260 <rcl_action_take_goal_request+0x78>
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	4604      	mov	r4, r0
 80141f0:	6800      	ldr	r0, [r0, #0]
 80141f2:	b380      	cbz	r0, 8014256 <rcl_action_take_goal_request+0x6e>
 80141f4:	460d      	mov	r5, r1
 80141f6:	4616      	mov	r6, r2
 80141f8:	f7fe fb68 	bl	80128cc <rcl_service_is_valid>
 80141fc:	b330      	cbz	r0, 801424c <rcl_action_take_goal_request+0x64>
 80141fe:	6820      	ldr	r0, [r4, #0]
 8014200:	3004      	adds	r0, #4
 8014202:	f7fe fb63 	bl	80128cc <rcl_service_is_valid>
 8014206:	b308      	cbz	r0, 801424c <rcl_action_take_goal_request+0x64>
 8014208:	6820      	ldr	r0, [r4, #0]
 801420a:	3008      	adds	r0, #8
 801420c:	f7fe fb5e 	bl	80128cc <rcl_service_is_valid>
 8014210:	b1e0      	cbz	r0, 801424c <rcl_action_take_goal_request+0x64>
 8014212:	6820      	ldr	r0, [r4, #0]
 8014214:	300c      	adds	r0, #12
 8014216:	f7f6 ff6b 	bl	800b0f0 <rcl_publisher_is_valid>
 801421a:	b1b8      	cbz	r0, 801424c <rcl_action_take_goal_request+0x64>
 801421c:	6820      	ldr	r0, [r4, #0]
 801421e:	3010      	adds	r0, #16
 8014220:	f7f6 ff66 	bl	800b0f0 <rcl_publisher_is_valid>
 8014224:	b190      	cbz	r0, 801424c <rcl_action_take_goal_request+0x64>
 8014226:	b1cd      	cbz	r5, 801425c <rcl_action_take_goal_request+0x74>
 8014228:	b1c6      	cbz	r6, 801425c <rcl_action_take_goal_request+0x74>
 801422a:	6820      	ldr	r0, [r4, #0]
 801422c:	4632      	mov	r2, r6
 801422e:	4629      	mov	r1, r5
 8014230:	f7fe faf4 	bl	801281c <rcl_take_request>
 8014234:	b148      	cbz	r0, 801424a <rcl_action_take_goal_request+0x62>
 8014236:	280a      	cmp	r0, #10
 8014238:	d007      	beq.n	801424a <rcl_action_take_goal_request+0x62>
 801423a:	f240 2259 	movw	r2, #601	@ 0x259
 801423e:	f640 0399 	movw	r3, #2201	@ 0x899
 8014242:	4290      	cmp	r0, r2
 8014244:	bf0c      	ite	eq
 8014246:	4618      	moveq	r0, r3
 8014248:	2001      	movne	r0, #1
 801424a:	bd70      	pop	{r4, r5, r6, pc}
 801424c:	f7f7 fec8 	bl	800bfe0 <rcutils_reset_error>
 8014250:	f640 0098 	movw	r0, #2200	@ 0x898
 8014254:	bd70      	pop	{r4, r5, r6, pc}
 8014256:	f640 0098 	movw	r0, #2200	@ 0x898
 801425a:	bd70      	pop	{r4, r5, r6, pc}
 801425c:	200b      	movs	r0, #11
 801425e:	bd70      	pop	{r4, r5, r6, pc}
 8014260:	f640 0098 	movw	r0, #2200	@ 0x898
 8014264:	4770      	bx	lr
 8014266:	bf00      	nop

08014268 <rcl_action_send_goal_response>:
 8014268:	b390      	cbz	r0, 80142d0 <rcl_action_send_goal_response+0x68>
 801426a:	b570      	push	{r4, r5, r6, lr}
 801426c:	4604      	mov	r4, r0
 801426e:	6800      	ldr	r0, [r0, #0]
 8014270:	b348      	cbz	r0, 80142c6 <rcl_action_send_goal_response+0x5e>
 8014272:	460d      	mov	r5, r1
 8014274:	4616      	mov	r6, r2
 8014276:	f7fe fb29 	bl	80128cc <rcl_service_is_valid>
 801427a:	b1f8      	cbz	r0, 80142bc <rcl_action_send_goal_response+0x54>
 801427c:	6820      	ldr	r0, [r4, #0]
 801427e:	3004      	adds	r0, #4
 8014280:	f7fe fb24 	bl	80128cc <rcl_service_is_valid>
 8014284:	b1d0      	cbz	r0, 80142bc <rcl_action_send_goal_response+0x54>
 8014286:	6820      	ldr	r0, [r4, #0]
 8014288:	3008      	adds	r0, #8
 801428a:	f7fe fb1f 	bl	80128cc <rcl_service_is_valid>
 801428e:	b1a8      	cbz	r0, 80142bc <rcl_action_send_goal_response+0x54>
 8014290:	6820      	ldr	r0, [r4, #0]
 8014292:	300c      	adds	r0, #12
 8014294:	f7f6 ff2c 	bl	800b0f0 <rcl_publisher_is_valid>
 8014298:	b180      	cbz	r0, 80142bc <rcl_action_send_goal_response+0x54>
 801429a:	6820      	ldr	r0, [r4, #0]
 801429c:	3010      	adds	r0, #16
 801429e:	f7f6 ff27 	bl	800b0f0 <rcl_publisher_is_valid>
 80142a2:	b158      	cbz	r0, 80142bc <rcl_action_send_goal_response+0x54>
 80142a4:	b195      	cbz	r5, 80142cc <rcl_action_send_goal_response+0x64>
 80142a6:	b18e      	cbz	r6, 80142cc <rcl_action_send_goal_response+0x64>
 80142a8:	6820      	ldr	r0, [r4, #0]
 80142aa:	4632      	mov	r2, r6
 80142ac:	4629      	mov	r1, r5
 80142ae:	f7fe faf5 	bl	801289c <rcl_send_response>
 80142b2:	b110      	cbz	r0, 80142ba <rcl_action_send_goal_response+0x52>
 80142b4:	2802      	cmp	r0, #2
 80142b6:	bf18      	it	ne
 80142b8:	2001      	movne	r0, #1
 80142ba:	bd70      	pop	{r4, r5, r6, pc}
 80142bc:	f7f7 fe90 	bl	800bfe0 <rcutils_reset_error>
 80142c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80142c4:	bd70      	pop	{r4, r5, r6, pc}
 80142c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80142ca:	bd70      	pop	{r4, r5, r6, pc}
 80142cc:	200b      	movs	r0, #11
 80142ce:	bd70      	pop	{r4, r5, r6, pc}
 80142d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80142d4:	4770      	bx	lr
 80142d6:	bf00      	nop

080142d8 <rcl_action_take_result_request>:
 80142d8:	2800      	cmp	r0, #0
 80142da:	d03a      	beq.n	8014352 <rcl_action_take_result_request+0x7a>
 80142dc:	b570      	push	{r4, r5, r6, lr}
 80142de:	4604      	mov	r4, r0
 80142e0:	6800      	ldr	r0, [r0, #0]
 80142e2:	b388      	cbz	r0, 8014348 <rcl_action_take_result_request+0x70>
 80142e4:	460d      	mov	r5, r1
 80142e6:	4616      	mov	r6, r2
 80142e8:	f7fe faf0 	bl	80128cc <rcl_service_is_valid>
 80142ec:	b338      	cbz	r0, 801433e <rcl_action_take_result_request+0x66>
 80142ee:	6820      	ldr	r0, [r4, #0]
 80142f0:	3004      	adds	r0, #4
 80142f2:	f7fe faeb 	bl	80128cc <rcl_service_is_valid>
 80142f6:	b310      	cbz	r0, 801433e <rcl_action_take_result_request+0x66>
 80142f8:	6820      	ldr	r0, [r4, #0]
 80142fa:	3008      	adds	r0, #8
 80142fc:	f7fe fae6 	bl	80128cc <rcl_service_is_valid>
 8014300:	b1e8      	cbz	r0, 801433e <rcl_action_take_result_request+0x66>
 8014302:	6820      	ldr	r0, [r4, #0]
 8014304:	300c      	adds	r0, #12
 8014306:	f7f6 fef3 	bl	800b0f0 <rcl_publisher_is_valid>
 801430a:	b1c0      	cbz	r0, 801433e <rcl_action_take_result_request+0x66>
 801430c:	6820      	ldr	r0, [r4, #0]
 801430e:	3010      	adds	r0, #16
 8014310:	f7f6 feee 	bl	800b0f0 <rcl_publisher_is_valid>
 8014314:	b198      	cbz	r0, 801433e <rcl_action_take_result_request+0x66>
 8014316:	b1d5      	cbz	r5, 801434e <rcl_action_take_result_request+0x76>
 8014318:	b1ce      	cbz	r6, 801434e <rcl_action_take_result_request+0x76>
 801431a:	6820      	ldr	r0, [r4, #0]
 801431c:	4632      	mov	r2, r6
 801431e:	4629      	mov	r1, r5
 8014320:	3008      	adds	r0, #8
 8014322:	f7fe fa7b 	bl	801281c <rcl_take_request>
 8014326:	b148      	cbz	r0, 801433c <rcl_action_take_result_request+0x64>
 8014328:	280a      	cmp	r0, #10
 801432a:	d007      	beq.n	801433c <rcl_action_take_result_request+0x64>
 801432c:	f240 2259 	movw	r2, #601	@ 0x259
 8014330:	f640 0399 	movw	r3, #2201	@ 0x899
 8014334:	4290      	cmp	r0, r2
 8014336:	bf0c      	ite	eq
 8014338:	4618      	moveq	r0, r3
 801433a:	2001      	movne	r0, #1
 801433c:	bd70      	pop	{r4, r5, r6, pc}
 801433e:	f7f7 fe4f 	bl	800bfe0 <rcutils_reset_error>
 8014342:	f640 0098 	movw	r0, #2200	@ 0x898
 8014346:	bd70      	pop	{r4, r5, r6, pc}
 8014348:	f640 0098 	movw	r0, #2200	@ 0x898
 801434c:	bd70      	pop	{r4, r5, r6, pc}
 801434e:	200b      	movs	r0, #11
 8014350:	bd70      	pop	{r4, r5, r6, pc}
 8014352:	f640 0098 	movw	r0, #2200	@ 0x898
 8014356:	4770      	bx	lr

08014358 <rcl_action_take_cancel_request>:
 8014358:	2800      	cmp	r0, #0
 801435a:	d03a      	beq.n	80143d2 <rcl_action_take_cancel_request+0x7a>
 801435c:	b570      	push	{r4, r5, r6, lr}
 801435e:	4604      	mov	r4, r0
 8014360:	6800      	ldr	r0, [r0, #0]
 8014362:	b388      	cbz	r0, 80143c8 <rcl_action_take_cancel_request+0x70>
 8014364:	460d      	mov	r5, r1
 8014366:	4616      	mov	r6, r2
 8014368:	f7fe fab0 	bl	80128cc <rcl_service_is_valid>
 801436c:	b338      	cbz	r0, 80143be <rcl_action_take_cancel_request+0x66>
 801436e:	6820      	ldr	r0, [r4, #0]
 8014370:	3004      	adds	r0, #4
 8014372:	f7fe faab 	bl	80128cc <rcl_service_is_valid>
 8014376:	b310      	cbz	r0, 80143be <rcl_action_take_cancel_request+0x66>
 8014378:	6820      	ldr	r0, [r4, #0]
 801437a:	3008      	adds	r0, #8
 801437c:	f7fe faa6 	bl	80128cc <rcl_service_is_valid>
 8014380:	b1e8      	cbz	r0, 80143be <rcl_action_take_cancel_request+0x66>
 8014382:	6820      	ldr	r0, [r4, #0]
 8014384:	300c      	adds	r0, #12
 8014386:	f7f6 feb3 	bl	800b0f0 <rcl_publisher_is_valid>
 801438a:	b1c0      	cbz	r0, 80143be <rcl_action_take_cancel_request+0x66>
 801438c:	6820      	ldr	r0, [r4, #0]
 801438e:	3010      	adds	r0, #16
 8014390:	f7f6 feae 	bl	800b0f0 <rcl_publisher_is_valid>
 8014394:	b198      	cbz	r0, 80143be <rcl_action_take_cancel_request+0x66>
 8014396:	b1d5      	cbz	r5, 80143ce <rcl_action_take_cancel_request+0x76>
 8014398:	b1ce      	cbz	r6, 80143ce <rcl_action_take_cancel_request+0x76>
 801439a:	6820      	ldr	r0, [r4, #0]
 801439c:	4632      	mov	r2, r6
 801439e:	4629      	mov	r1, r5
 80143a0:	3004      	adds	r0, #4
 80143a2:	f7fe fa3b 	bl	801281c <rcl_take_request>
 80143a6:	b148      	cbz	r0, 80143bc <rcl_action_take_cancel_request+0x64>
 80143a8:	280a      	cmp	r0, #10
 80143aa:	d007      	beq.n	80143bc <rcl_action_take_cancel_request+0x64>
 80143ac:	f240 2259 	movw	r2, #601	@ 0x259
 80143b0:	f640 0399 	movw	r3, #2201	@ 0x899
 80143b4:	4290      	cmp	r0, r2
 80143b6:	bf0c      	ite	eq
 80143b8:	4618      	moveq	r0, r3
 80143ba:	2001      	movne	r0, #1
 80143bc:	bd70      	pop	{r4, r5, r6, pc}
 80143be:	f7f7 fe0f 	bl	800bfe0 <rcutils_reset_error>
 80143c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143c6:	bd70      	pop	{r4, r5, r6, pc}
 80143c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80143cc:	bd70      	pop	{r4, r5, r6, pc}
 80143ce:	200b      	movs	r0, #11
 80143d0:	bd70      	pop	{r4, r5, r6, pc}
 80143d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143d6:	4770      	bx	lr

080143d8 <rcl_action_send_cancel_response>:
 80143d8:	b398      	cbz	r0, 8014442 <rcl_action_send_cancel_response+0x6a>
 80143da:	b570      	push	{r4, r5, r6, lr}
 80143dc:	4604      	mov	r4, r0
 80143de:	6800      	ldr	r0, [r0, #0]
 80143e0:	b350      	cbz	r0, 8014438 <rcl_action_send_cancel_response+0x60>
 80143e2:	460d      	mov	r5, r1
 80143e4:	4616      	mov	r6, r2
 80143e6:	f7fe fa71 	bl	80128cc <rcl_service_is_valid>
 80143ea:	b300      	cbz	r0, 801442e <rcl_action_send_cancel_response+0x56>
 80143ec:	6820      	ldr	r0, [r4, #0]
 80143ee:	3004      	adds	r0, #4
 80143f0:	f7fe fa6c 	bl	80128cc <rcl_service_is_valid>
 80143f4:	b1d8      	cbz	r0, 801442e <rcl_action_send_cancel_response+0x56>
 80143f6:	6820      	ldr	r0, [r4, #0]
 80143f8:	3008      	adds	r0, #8
 80143fa:	f7fe fa67 	bl	80128cc <rcl_service_is_valid>
 80143fe:	b1b0      	cbz	r0, 801442e <rcl_action_send_cancel_response+0x56>
 8014400:	6820      	ldr	r0, [r4, #0]
 8014402:	300c      	adds	r0, #12
 8014404:	f7f6 fe74 	bl	800b0f0 <rcl_publisher_is_valid>
 8014408:	b188      	cbz	r0, 801442e <rcl_action_send_cancel_response+0x56>
 801440a:	6820      	ldr	r0, [r4, #0]
 801440c:	3010      	adds	r0, #16
 801440e:	f7f6 fe6f 	bl	800b0f0 <rcl_publisher_is_valid>
 8014412:	b160      	cbz	r0, 801442e <rcl_action_send_cancel_response+0x56>
 8014414:	b19d      	cbz	r5, 801443e <rcl_action_send_cancel_response+0x66>
 8014416:	b196      	cbz	r6, 801443e <rcl_action_send_cancel_response+0x66>
 8014418:	6820      	ldr	r0, [r4, #0]
 801441a:	4632      	mov	r2, r6
 801441c:	4629      	mov	r1, r5
 801441e:	3004      	adds	r0, #4
 8014420:	f7fe fa3c 	bl	801289c <rcl_send_response>
 8014424:	b110      	cbz	r0, 801442c <rcl_action_send_cancel_response+0x54>
 8014426:	2802      	cmp	r0, #2
 8014428:	bf18      	it	ne
 801442a:	2001      	movne	r0, #1
 801442c:	bd70      	pop	{r4, r5, r6, pc}
 801442e:	f7f7 fdd7 	bl	800bfe0 <rcutils_reset_error>
 8014432:	f640 0098 	movw	r0, #2200	@ 0x898
 8014436:	bd70      	pop	{r4, r5, r6, pc}
 8014438:	f640 0098 	movw	r0, #2200	@ 0x898
 801443c:	bd70      	pop	{r4, r5, r6, pc}
 801443e:	200b      	movs	r0, #11
 8014440:	bd70      	pop	{r4, r5, r6, pc}
 8014442:	f640 0098 	movw	r0, #2200	@ 0x898
 8014446:	4770      	bx	lr

08014448 <rcl_action_wait_set_add_action_server>:
 8014448:	2800      	cmp	r0, #0
 801444a:	d04d      	beq.n	80144e8 <rcl_action_wait_set_add_action_server+0xa0>
 801444c:	b570      	push	{r4, r5, r6, lr}
 801444e:	460c      	mov	r4, r1
 8014450:	b159      	cbz	r1, 801446a <rcl_action_wait_set_add_action_server+0x22>
 8014452:	4605      	mov	r5, r0
 8014454:	6808      	ldr	r0, [r1, #0]
 8014456:	b140      	cbz	r0, 801446a <rcl_action_wait_set_add_action_server+0x22>
 8014458:	4616      	mov	r6, r2
 801445a:	f7fe fa37 	bl	80128cc <rcl_service_is_valid>
 801445e:	b120      	cbz	r0, 801446a <rcl_action_wait_set_add_action_server+0x22>
 8014460:	6820      	ldr	r0, [r4, #0]
 8014462:	3004      	adds	r0, #4
 8014464:	f7fe fa32 	bl	80128cc <rcl_service_is_valid>
 8014468:	b910      	cbnz	r0, 8014470 <rcl_action_wait_set_add_action_server+0x28>
 801446a:	f640 0098 	movw	r0, #2200	@ 0x898
 801446e:	bd70      	pop	{r4, r5, r6, pc}
 8014470:	6820      	ldr	r0, [r4, #0]
 8014472:	3008      	adds	r0, #8
 8014474:	f7fe fa2a 	bl	80128cc <rcl_service_is_valid>
 8014478:	2800      	cmp	r0, #0
 801447a:	d0f6      	beq.n	801446a <rcl_action_wait_set_add_action_server+0x22>
 801447c:	6820      	ldr	r0, [r4, #0]
 801447e:	300c      	adds	r0, #12
 8014480:	f7f6 fe4e 	bl	800b120 <rcl_publisher_is_valid_except_context>
 8014484:	2800      	cmp	r0, #0
 8014486:	d0f0      	beq.n	801446a <rcl_action_wait_set_add_action_server+0x22>
 8014488:	6820      	ldr	r0, [r4, #0]
 801448a:	3010      	adds	r0, #16
 801448c:	f7f6 fe48 	bl	800b120 <rcl_publisher_is_valid_except_context>
 8014490:	2800      	cmp	r0, #0
 8014492:	d0ea      	beq.n	801446a <rcl_action_wait_set_add_action_server+0x22>
 8014494:	6821      	ldr	r1, [r4, #0]
 8014496:	4628      	mov	r0, r5
 8014498:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801449c:	f7ff face 	bl	8013a3c <rcl_wait_set_add_service>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	d1e4      	bne.n	801446e <rcl_action_wait_set_add_action_server+0x26>
 80144a4:	6821      	ldr	r1, [r4, #0]
 80144a6:	4628      	mov	r0, r5
 80144a8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80144ac:	3104      	adds	r1, #4
 80144ae:	f7ff fac5 	bl	8013a3c <rcl_wait_set_add_service>
 80144b2:	2800      	cmp	r0, #0
 80144b4:	d1db      	bne.n	801446e <rcl_action_wait_set_add_action_server+0x26>
 80144b6:	6821      	ldr	r1, [r4, #0]
 80144b8:	4628      	mov	r0, r5
 80144ba:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80144be:	3108      	adds	r1, #8
 80144c0:	f7ff fabc 	bl	8013a3c <rcl_wait_set_add_service>
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d1d2      	bne.n	801446e <rcl_action_wait_set_add_action_server+0x26>
 80144c8:	6821      	ldr	r1, [r4, #0]
 80144ca:	4628      	mov	r0, r5
 80144cc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80144d0:	3114      	adds	r1, #20
 80144d2:	f7ff fa57 	bl	8013984 <rcl_wait_set_add_timer>
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d1c9      	bne.n	801446e <rcl_action_wait_set_add_action_server+0x26>
 80144da:	2e00      	cmp	r6, #0
 80144dc:	d0c7      	beq.n	801446e <rcl_action_wait_set_add_action_server+0x26>
 80144de:	6823      	ldr	r3, [r4, #0]
 80144e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80144e4:	6033      	str	r3, [r6, #0]
 80144e6:	bd70      	pop	{r4, r5, r6, pc}
 80144e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop

080144f0 <rcl_action_server_wait_set_get_entities_ready>:
 80144f0:	2800      	cmp	r0, #0
 80144f2:	d05a      	beq.n	80145aa <rcl_action_server_wait_set_get_entities_ready+0xba>
 80144f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f6:	460c      	mov	r4, r1
 80144f8:	b161      	cbz	r1, 8014514 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80144fa:	4605      	mov	r5, r0
 80144fc:	6808      	ldr	r0, [r1, #0]
 80144fe:	b148      	cbz	r0, 8014514 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014500:	4616      	mov	r6, r2
 8014502:	461f      	mov	r7, r3
 8014504:	f7fe f9e2 	bl	80128cc <rcl_service_is_valid>
 8014508:	b120      	cbz	r0, 8014514 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801450a:	6820      	ldr	r0, [r4, #0]
 801450c:	3004      	adds	r0, #4
 801450e:	f7fe f9dd 	bl	80128cc <rcl_service_is_valid>
 8014512:	b910      	cbnz	r0, 801451a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8014514:	f640 0098 	movw	r0, #2200	@ 0x898
 8014518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801451a:	6820      	ldr	r0, [r4, #0]
 801451c:	3008      	adds	r0, #8
 801451e:	f7fe f9d5 	bl	80128cc <rcl_service_is_valid>
 8014522:	2800      	cmp	r0, #0
 8014524:	d0f6      	beq.n	8014514 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014526:	6820      	ldr	r0, [r4, #0]
 8014528:	300c      	adds	r0, #12
 801452a:	f7f6 fdf9 	bl	800b120 <rcl_publisher_is_valid_except_context>
 801452e:	2800      	cmp	r0, #0
 8014530:	d0f0      	beq.n	8014514 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014532:	6820      	ldr	r0, [r4, #0]
 8014534:	3010      	adds	r0, #16
 8014536:	f7f6 fdf3 	bl	800b120 <rcl_publisher_is_valid_except_context>
 801453a:	2800      	cmp	r0, #0
 801453c:	d0ea      	beq.n	8014514 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801453e:	b3be      	cbz	r6, 80145b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014540:	b3b7      	cbz	r7, 80145b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014542:	9b06      	ldr	r3, [sp, #24]
 8014544:	b3a3      	cbz	r3, 80145b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014546:	9b07      	ldr	r3, [sp, #28]
 8014548:	b393      	cbz	r3, 80145b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801454a:	6821      	ldr	r1, [r4, #0]
 801454c:	692a      	ldr	r2, [r5, #16]
 801454e:	6a2c      	ldr	r4, [r5, #32]
 8014550:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8014554:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014558:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801455c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014560:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8014564:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014568:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801456c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014570:	1a64      	subs	r4, r4, r1
 8014572:	fab4 f484 	clz	r4, r4
 8014576:	0964      	lsrs	r4, r4, #5
 8014578:	7034      	strb	r4, [r6, #0]
 801457a:	1d0c      	adds	r4, r1, #4
 801457c:	1b1b      	subs	r3, r3, r4
 801457e:	fab3 f383 	clz	r3, r3
 8014582:	095b      	lsrs	r3, r3, #5
 8014584:	f101 0408 	add.w	r4, r1, #8
 8014588:	703b      	strb	r3, [r7, #0]
 801458a:	f101 0314 	add.w	r3, r1, #20
 801458e:	1b01      	subs	r1, r0, r4
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	fab1 f181 	clz	r1, r1
 8014596:	9a06      	ldr	r2, [sp, #24]
 8014598:	0949      	lsrs	r1, r1, #5
 801459a:	7011      	strb	r1, [r2, #0]
 801459c:	fab3 f383 	clz	r3, r3
 80145a0:	9a07      	ldr	r2, [sp, #28]
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	2000      	movs	r0, #0
 80145a6:	7013      	strb	r3, [r2, #0]
 80145a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80145ae:	4770      	bx	lr
 80145b0:	200b      	movs	r0, #11
 80145b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080145b4 <_execute_event_handler>:
 80145b4:	2002      	movs	r0, #2
 80145b6:	4770      	bx	lr

080145b8 <_cancel_goal_event_handler>:
 80145b8:	2003      	movs	r0, #3
 80145ba:	4770      	bx	lr

080145bc <_succeed_event_handler>:
 80145bc:	2004      	movs	r0, #4
 80145be:	4770      	bx	lr

080145c0 <_abort_event_handler>:
 80145c0:	2006      	movs	r0, #6
 80145c2:	4770      	bx	lr

080145c4 <_canceled_event_handler>:
 80145c4:	2005      	movs	r0, #5
 80145c6:	4770      	bx	lr

080145c8 <rcl_action_transition_goal_state>:
 80145c8:	b2c2      	uxtb	r2, r0
 80145ca:	2a06      	cmp	r2, #6
 80145cc:	d80c      	bhi.n	80145e8 <rcl_action_transition_goal_state+0x20>
 80145ce:	2904      	cmp	r1, #4
 80145d0:	d80a      	bhi.n	80145e8 <rcl_action_transition_goal_state+0x20>
 80145d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80145d6:	b410      	push	{r4}
 80145d8:	1853      	adds	r3, r2, r1
 80145da:	4c06      	ldr	r4, [pc, #24]	@ (80145f4 <rcl_action_transition_goal_state+0x2c>)
 80145dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80145e0:	b123      	cbz	r3, 80145ec <rcl_action_transition_goal_state+0x24>
 80145e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145e6:	4718      	bx	r3
 80145e8:	2000      	movs	r0, #0
 80145ea:	4770      	bx	lr
 80145ec:	2000      	movs	r0, #0
 80145ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145f2:	4770      	bx	lr
 80145f4:	08019230 	.word	0x08019230

080145f8 <rcl_action_get_zero_initialized_cancel_response>:
 80145f8:	b510      	push	{r4, lr}
 80145fa:	4c07      	ldr	r4, [pc, #28]	@ (8014618 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80145fc:	4686      	mov	lr, r0
 80145fe:	4684      	mov	ip, r0
 8014600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	f8cc 3000 	str.w	r3, [ip]
 8014612:	4670      	mov	r0, lr
 8014614:	bd10      	pop	{r4, pc}
 8014616:	bf00      	nop
 8014618:	080192bc 	.word	0x080192bc

0801461c <rclc_action_send_result_request>:
 801461c:	b1d0      	cbz	r0, 8014654 <rclc_action_send_result_request+0x38>
 801461e:	b500      	push	{lr}
 8014620:	4684      	mov	ip, r0
 8014622:	b087      	sub	sp, #28
 8014624:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014628:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801462c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014630:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8014634:	f10d 0e08 	add.w	lr, sp, #8
 8014638:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801463c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014640:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8014644:	a902      	add	r1, sp, #8
 8014646:	3010      	adds	r0, #16
 8014648:	f7ff fbda 	bl	8013e00 <rcl_action_send_result_request>
 801464c:	b920      	cbnz	r0, 8014658 <rclc_action_send_result_request+0x3c>
 801464e:	b007      	add	sp, #28
 8014650:	f85d fb04 	ldr.w	pc, [sp], #4
 8014654:	200b      	movs	r0, #11
 8014656:	4770      	bx	lr
 8014658:	9001      	str	r0, [sp, #4]
 801465a:	f7f7 fcc1 	bl	800bfe0 <rcutils_reset_error>
 801465e:	9801      	ldr	r0, [sp, #4]
 8014660:	b007      	add	sp, #28
 8014662:	f85d fb04 	ldr.w	pc, [sp], #4
 8014666:	bf00      	nop

08014668 <rclc_action_take_goal_handle>:
 8014668:	b160      	cbz	r0, 8014684 <rclc_action_take_goal_handle+0x1c>
 801466a:	6883      	ldr	r3, [r0, #8]
 801466c:	b143      	cbz	r3, 8014680 <rclc_action_take_goal_handle+0x18>
 801466e:	6819      	ldr	r1, [r3, #0]
 8014670:	6081      	str	r1, [r0, #8]
 8014672:	2200      	movs	r2, #0
 8014674:	721a      	strb	r2, [r3, #8]
 8014676:	68c1      	ldr	r1, [r0, #12]
 8014678:	6019      	str	r1, [r3, #0]
 801467a:	621a      	str	r2, [r3, #32]
 801467c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801467e:	60c3      	str	r3, [r0, #12]
 8014680:	4618      	mov	r0, r3
 8014682:	4770      	bx	lr
 8014684:	4603      	mov	r3, r0
 8014686:	e7fb      	b.n	8014680 <rclc_action_take_goal_handle+0x18>

08014688 <rclc_action_remove_used_goal_handle>:
 8014688:	b180      	cbz	r0, 80146ac <rclc_action_remove_used_goal_handle+0x24>
 801468a:	b179      	cbz	r1, 80146ac <rclc_action_remove_used_goal_handle+0x24>
 801468c:	68c3      	ldr	r3, [r0, #12]
 801468e:	4299      	cmp	r1, r3
 8014690:	d00d      	beq.n	80146ae <rclc_action_remove_used_goal_handle+0x26>
 8014692:	b12b      	cbz	r3, 80146a0 <rclc_action_remove_used_goal_handle+0x18>
 8014694:	681a      	ldr	r2, [r3, #0]
 8014696:	4291      	cmp	r1, r2
 8014698:	d003      	beq.n	80146a2 <rclc_action_remove_used_goal_handle+0x1a>
 801469a:	4613      	mov	r3, r2
 801469c:	2b00      	cmp	r3, #0
 801469e:	d1f9      	bne.n	8014694 <rclc_action_remove_used_goal_handle+0xc>
 80146a0:	4770      	bx	lr
 80146a2:	680a      	ldr	r2, [r1, #0]
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	6883      	ldr	r3, [r0, #8]
 80146a8:	600b      	str	r3, [r1, #0]
 80146aa:	6081      	str	r1, [r0, #8]
 80146ac:	4770      	bx	lr
 80146ae:	680b      	ldr	r3, [r1, #0]
 80146b0:	60c3      	str	r3, [r0, #12]
 80146b2:	e7f8      	b.n	80146a6 <rclc_action_remove_used_goal_handle+0x1e>

080146b4 <rclc_action_find_goal_handle_by_uuid>:
 80146b4:	b538      	push	{r3, r4, r5, lr}
 80146b6:	b180      	cbz	r0, 80146da <rclc_action_find_goal_handle_by_uuid+0x26>
 80146b8:	460d      	mov	r5, r1
 80146ba:	b181      	cbz	r1, 80146de <rclc_action_find_goal_handle_by_uuid+0x2a>
 80146bc:	68c4      	ldr	r4, [r0, #12]
 80146be:	b914      	cbnz	r4, 80146c6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80146c0:	e009      	b.n	80146d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146c2:	6824      	ldr	r4, [r4, #0]
 80146c4:	b13c      	cbz	r4, 80146d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146c6:	f104 0009 	add.w	r0, r4, #9
 80146ca:	2210      	movs	r2, #16
 80146cc:	4629      	mov	r1, r5
 80146ce:	f003 f9b9 	bl	8017a44 <memcmp>
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d1f5      	bne.n	80146c2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80146d6:	4620      	mov	r0, r4
 80146d8:	bd38      	pop	{r3, r4, r5, pc}
 80146da:	4604      	mov	r4, r0
 80146dc:	e7fb      	b.n	80146d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146de:	460c      	mov	r4, r1
 80146e0:	e7f9      	b.n	80146d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80146e2:	bf00      	nop

080146e4 <rclc_action_find_first_handle_by_status>:
 80146e4:	b140      	cbz	r0, 80146f8 <rclc_action_find_first_handle_by_status+0x14>
 80146e6:	68c0      	ldr	r0, [r0, #12]
 80146e8:	b910      	cbnz	r0, 80146f0 <rclc_action_find_first_handle_by_status+0xc>
 80146ea:	e005      	b.n	80146f8 <rclc_action_find_first_handle_by_status+0x14>
 80146ec:	6800      	ldr	r0, [r0, #0]
 80146ee:	b118      	cbz	r0, 80146f8 <rclc_action_find_first_handle_by_status+0x14>
 80146f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80146f4:	428b      	cmp	r3, r1
 80146f6:	d1f9      	bne.n	80146ec <rclc_action_find_first_handle_by_status+0x8>
 80146f8:	4770      	bx	lr
 80146fa:	bf00      	nop

080146fc <rclc_action_find_first_terminated_handle>:
 80146fc:	b140      	cbz	r0, 8014710 <rclc_action_find_first_terminated_handle+0x14>
 80146fe:	68c0      	ldr	r0, [r0, #12]
 8014700:	b910      	cbnz	r0, 8014708 <rclc_action_find_first_terminated_handle+0xc>
 8014702:	e005      	b.n	8014710 <rclc_action_find_first_terminated_handle+0x14>
 8014704:	6800      	ldr	r0, [r0, #0]
 8014706:	b118      	cbz	r0, 8014710 <rclc_action_find_first_terminated_handle+0x14>
 8014708:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801470c:	2b03      	cmp	r3, #3
 801470e:	ddf9      	ble.n	8014704 <rclc_action_find_first_terminated_handle+0x8>
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop

08014714 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014714:	b170      	cbz	r0, 8014734 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014716:	68c0      	ldr	r0, [r0, #12]
 8014718:	b160      	cbz	r0, 8014734 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801471a:	b410      	push	{r4}
 801471c:	e001      	b.n	8014722 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801471e:	6800      	ldr	r0, [r0, #0]
 8014720:	b128      	cbz	r0, 801472e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014722:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014726:	4299      	cmp	r1, r3
 8014728:	bf08      	it	eq
 801472a:	4294      	cmpeq	r4, r2
 801472c:	d1f7      	bne.n	801471e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801472e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014732:	4770      	bx	lr
 8014734:	4770      	bx	lr
 8014736:	bf00      	nop

08014738 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014738:	b170      	cbz	r0, 8014758 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801473a:	68c0      	ldr	r0, [r0, #12]
 801473c:	b160      	cbz	r0, 8014758 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801473e:	b410      	push	{r4}
 8014740:	e001      	b.n	8014746 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014742:	6800      	ldr	r0, [r0, #0]
 8014744:	b128      	cbz	r0, 8014752 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014746:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801474a:	4299      	cmp	r1, r3
 801474c:	bf08      	it	eq
 801474e:	4294      	cmpeq	r4, r2
 8014750:	d1f7      	bne.n	8014742 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014756:	4770      	bx	lr
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop

0801475c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801475c:	b170      	cbz	r0, 801477c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801475e:	68c0      	ldr	r0, [r0, #12]
 8014760:	b160      	cbz	r0, 801477c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014762:	b410      	push	{r4}
 8014764:	e001      	b.n	801476a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014766:	6800      	ldr	r0, [r0, #0]
 8014768:	b128      	cbz	r0, 8014776 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801476a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801476e:	4299      	cmp	r1, r3
 8014770:	bf08      	it	eq
 8014772:	4294      	cmpeq	r4, r2
 8014774:	d1f7      	bne.n	8014766 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801477a:	4770      	bx	lr
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop

08014780 <rclc_action_find_first_handle_with_goal_response>:
 8014780:	b140      	cbz	r0, 8014794 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014782:	68c0      	ldr	r0, [r0, #12]
 8014784:	b910      	cbnz	r0, 801478c <rclc_action_find_first_handle_with_goal_response+0xc>
 8014786:	e005      	b.n	8014794 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014788:	6800      	ldr	r0, [r0, #0]
 801478a:	b118      	cbz	r0, 8014794 <rclc_action_find_first_handle_with_goal_response+0x14>
 801478c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d0f9      	beq.n	8014788 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop

08014798 <rclc_action_find_first_handle_with_result_response>:
 8014798:	b140      	cbz	r0, 80147ac <rclc_action_find_first_handle_with_result_response+0x14>
 801479a:	68c0      	ldr	r0, [r0, #12]
 801479c:	b910      	cbnz	r0, 80147a4 <rclc_action_find_first_handle_with_result_response+0xc>
 801479e:	e005      	b.n	80147ac <rclc_action_find_first_handle_with_result_response+0x14>
 80147a0:	6800      	ldr	r0, [r0, #0]
 80147a2:	b118      	cbz	r0, 80147ac <rclc_action_find_first_handle_with_result_response+0x14>
 80147a4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d0f9      	beq.n	80147a0 <rclc_action_find_first_handle_with_result_response+0x8>
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop

080147b0 <rclc_action_server_response_goal_request>:
 80147b0:	b198      	cbz	r0, 80147da <rclc_action_server_response_goal_request+0x2a>
 80147b2:	b510      	push	{r4, lr}
 80147b4:	6844      	ldr	r4, [r0, #4]
 80147b6:	b086      	sub	sp, #24
 80147b8:	2200      	movs	r2, #0
 80147ba:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80147be:	460b      	mov	r3, r1
 80147c0:	9205      	str	r2, [sp, #20]
 80147c2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80147c6:	aa03      	add	r2, sp, #12
 80147c8:	f104 0010 	add.w	r0, r4, #16
 80147cc:	f88d 300c 	strb.w	r3, [sp, #12]
 80147d0:	f7ff fd4a 	bl	8014268 <rcl_action_send_goal_response>
 80147d4:	b918      	cbnz	r0, 80147de <rclc_action_server_response_goal_request+0x2e>
 80147d6:	b006      	add	sp, #24
 80147d8:	bd10      	pop	{r4, pc}
 80147da:	200b      	movs	r0, #11
 80147dc:	4770      	bx	lr
 80147de:	9001      	str	r0, [sp, #4]
 80147e0:	f7f7 fbfe 	bl	800bfe0 <rcutils_reset_error>
 80147e4:	9801      	ldr	r0, [sp, #4]
 80147e6:	b006      	add	sp, #24
 80147e8:	bd10      	pop	{r4, pc}
 80147ea:	bf00      	nop
 80147ec:	0000      	movs	r0, r0
	...

080147f0 <rclc_action_server_goal_cancel_accept>:
 80147f0:	b310      	cbz	r0, 8014838 <rclc_action_server_goal_cancel_accept+0x48>
 80147f2:	b510      	push	{r4, lr}
 80147f4:	b090      	sub	sp, #64	@ 0x40
 80147f6:	4604      	mov	r4, r0
 80147f8:	a806      	add	r0, sp, #24
 80147fa:	f7ff fefd 	bl	80145f8 <rcl_action_get_zero_initialized_cancel_response>
 80147fe:	2300      	movs	r3, #0
 8014800:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014804:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014808:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801480c:	f88d 3018 	strb.w	r3, [sp, #24]
 8014810:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014814:	f8cd d01c 	str.w	sp, [sp, #28]
 8014818:	46ec      	mov	ip, sp
 801481a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801481e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014840 <rclc_action_server_goal_cancel_accept+0x50>
 8014822:	6860      	ldr	r0, [r4, #4]
 8014824:	aa06      	add	r2, sp, #24
 8014826:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801482a:	3010      	adds	r0, #16
 801482c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014830:	f7ff fdd2 	bl	80143d8 <rcl_action_send_cancel_response>
 8014834:	b010      	add	sp, #64	@ 0x40
 8014836:	bd10      	pop	{r4, pc}
 8014838:	200b      	movs	r0, #11
 801483a:	4770      	bx	lr
 801483c:	f3af 8000 	nop.w
 8014840:	00000001 	.word	0x00000001
 8014844:	00000001 	.word	0x00000001

08014848 <rclc_action_server_goal_cancel_reject>:
 8014848:	b082      	sub	sp, #8
 801484a:	b530      	push	{r4, r5, lr}
 801484c:	b08b      	sub	sp, #44	@ 0x2c
 801484e:	ac0e      	add	r4, sp, #56	@ 0x38
 8014850:	e884 000c 	stmia.w	r4, {r2, r3}
 8014854:	b188      	cbz	r0, 801487a <rclc_action_server_goal_cancel_reject+0x32>
 8014856:	4604      	mov	r4, r0
 8014858:	a801      	add	r0, sp, #4
 801485a:	460d      	mov	r5, r1
 801485c:	f7ff fecc 	bl	80145f8 <rcl_action_get_zero_initialized_cancel_response>
 8014860:	aa01      	add	r2, sp, #4
 8014862:	a90e      	add	r1, sp, #56	@ 0x38
 8014864:	f104 0010 	add.w	r0, r4, #16
 8014868:	f88d 5004 	strb.w	r5, [sp, #4]
 801486c:	f7ff fdb4 	bl	80143d8 <rcl_action_send_cancel_response>
 8014870:	b00b      	add	sp, #44	@ 0x2c
 8014872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014876:	b002      	add	sp, #8
 8014878:	4770      	bx	lr
 801487a:	200b      	movs	r0, #11
 801487c:	b00b      	add	sp, #44	@ 0x2c
 801487e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014882:	b002      	add	sp, #8
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop

08014888 <__atomic_load_8>:
 8014888:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801488c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014890:	4a15      	ldr	r2, [pc, #84]	@ (80148e8 <__atomic_load_8+0x60>)
 8014892:	4b16      	ldr	r3, [pc, #88]	@ (80148ec <__atomic_load_8+0x64>)
 8014894:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014898:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801489c:	fb02 f101 	mul.w	r1, r2, r1
 80148a0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80148a4:	fba3 2301 	umull	r2, r3, r3, r1
 80148a8:	091b      	lsrs	r3, r3, #4
 80148aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80148ae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80148b2:	b4d0      	push	{r4, r6, r7}
 80148b4:	4c0e      	ldr	r4, [pc, #56]	@ (80148f0 <__atomic_load_8+0x68>)
 80148b6:	1ac9      	subs	r1, r1, r3
 80148b8:	1862      	adds	r2, r4, r1
 80148ba:	f04f 0c01 	mov.w	ip, #1
 80148be:	e8d2 3f4f 	ldrexb	r3, [r2]
 80148c2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80148c6:	2e00      	cmp	r6, #0
 80148c8:	d1f9      	bne.n	80148be <__atomic_load_8+0x36>
 80148ca:	f3bf 8f5b 	dmb	ish
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d1f4      	bne.n	80148be <__atomic_load_8+0x36>
 80148d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80148d8:	f3bf 8f5b 	dmb	ish
 80148dc:	5463      	strb	r3, [r4, r1]
 80148de:	4630      	mov	r0, r6
 80148e0:	4639      	mov	r1, r7
 80148e2:	bcd0      	pop	{r4, r6, r7}
 80148e4:	4770      	bx	lr
 80148e6:	bf00      	nop
 80148e8:	27d4eb2d 	.word	0x27d4eb2d
 80148ec:	b21642c9 	.word	0xb21642c9
 80148f0:	2000caf4 	.word	0x2000caf4

080148f4 <__atomic_store_8>:
 80148f4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80148f8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80148fc:	b570      	push	{r4, r5, r6, lr}
 80148fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014902:	4c14      	ldr	r4, [pc, #80]	@ (8014954 <__atomic_store_8+0x60>)
 8014904:	4d14      	ldr	r5, [pc, #80]	@ (8014958 <__atomic_store_8+0x64>)
 8014906:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801490a:	fb04 f101 	mul.w	r1, r4, r1
 801490e:	4c13      	ldr	r4, [pc, #76]	@ (801495c <__atomic_store_8+0x68>)
 8014910:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014914:	fba4 4e01 	umull	r4, lr, r4, r1
 8014918:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801491c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014920:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014924:	eba1 0e0e 	sub.w	lr, r1, lr
 8014928:	eb05 0c0e 	add.w	ip, r5, lr
 801492c:	f04f 0401 	mov.w	r4, #1
 8014930:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014934:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014938:	2e00      	cmp	r6, #0
 801493a:	d1f9      	bne.n	8014930 <__atomic_store_8+0x3c>
 801493c:	f3bf 8f5b 	dmb	ish
 8014940:	b2c9      	uxtb	r1, r1
 8014942:	2900      	cmp	r1, #0
 8014944:	d1f4      	bne.n	8014930 <__atomic_store_8+0x3c>
 8014946:	e9c0 2300 	strd	r2, r3, [r0]
 801494a:	f3bf 8f5b 	dmb	ish
 801494e:	f805 100e 	strb.w	r1, [r5, lr]
 8014952:	bd70      	pop	{r4, r5, r6, pc}
 8014954:	27d4eb2d 	.word	0x27d4eb2d
 8014958:	2000caf4 	.word	0x2000caf4
 801495c:	b21642c9 	.word	0xb21642c9

08014960 <__atomic_exchange_8>:
 8014960:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014964:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014968:	4916      	ldr	r1, [pc, #88]	@ (80149c4 <__atomic_exchange_8+0x64>)
 801496a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801496e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014972:	fb01 fc0c 	mul.w	ip, r1, ip
 8014976:	4914      	ldr	r1, [pc, #80]	@ (80149c8 <__atomic_exchange_8+0x68>)
 8014978:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801497c:	b570      	push	{r4, r5, r6, lr}
 801497e:	4605      	mov	r5, r0
 8014980:	fba1 010c 	umull	r0, r1, r1, ip
 8014984:	0909      	lsrs	r1, r1, #4
 8014986:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801498a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801498e:	4e0f      	ldr	r6, [pc, #60]	@ (80149cc <__atomic_exchange_8+0x6c>)
 8014990:	ebac 0c01 	sub.w	ip, ip, r1
 8014994:	eb06 010c 	add.w	r1, r6, ip
 8014998:	f04f 0e01 	mov.w	lr, #1
 801499c:	e8d1 4f4f 	ldrexb	r4, [r1]
 80149a0:	e8c1 ef40 	strexb	r0, lr, [r1]
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d1f9      	bne.n	801499c <__atomic_exchange_8+0x3c>
 80149a8:	f3bf 8f5b 	dmb	ish
 80149ac:	b2e4      	uxtb	r4, r4
 80149ae:	2c00      	cmp	r4, #0
 80149b0:	d1f4      	bne.n	801499c <__atomic_exchange_8+0x3c>
 80149b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80149b6:	e9c5 2300 	strd	r2, r3, [r5]
 80149ba:	f3bf 8f5b 	dmb	ish
 80149be:	f806 400c 	strb.w	r4, [r6, ip]
 80149c2:	bd70      	pop	{r4, r5, r6, pc}
 80149c4:	27d4eb2d 	.word	0x27d4eb2d
 80149c8:	b21642c9 	.word	0xb21642c9
 80149cc:	2000caf4 	.word	0x2000caf4

080149d0 <rcutils_get_env>:
 80149d0:	b168      	cbz	r0, 80149ee <rcutils_get_env+0x1e>
 80149d2:	b510      	push	{r4, lr}
 80149d4:	460c      	mov	r4, r1
 80149d6:	b129      	cbz	r1, 80149e4 <rcutils_get_env+0x14>
 80149d8:	f002 fc90 	bl	80172fc <getenv>
 80149dc:	b120      	cbz	r0, 80149e8 <rcutils_get_env+0x18>
 80149de:	6020      	str	r0, [r4, #0]
 80149e0:	2000      	movs	r0, #0
 80149e2:	bd10      	pop	{r4, pc}
 80149e4:	4803      	ldr	r0, [pc, #12]	@ (80149f4 <rcutils_get_env+0x24>)
 80149e6:	bd10      	pop	{r4, pc}
 80149e8:	4b03      	ldr	r3, [pc, #12]	@ (80149f8 <rcutils_get_env+0x28>)
 80149ea:	6023      	str	r3, [r4, #0]
 80149ec:	bd10      	pop	{r4, pc}
 80149ee:	4803      	ldr	r0, [pc, #12]	@ (80149fc <rcutils_get_env+0x2c>)
 80149f0:	4770      	bx	lr
 80149f2:	bf00      	nop
 80149f4:	080192fc 	.word	0x080192fc
 80149f8:	08019420 	.word	0x08019420
 80149fc:	080192e0 	.word	0x080192e0

08014a00 <rcutils_is_directory>:
 8014a00:	2000      	movs	r0, #0
 8014a02:	4770      	bx	lr

08014a04 <rcutils_join_path>:
 8014a04:	b082      	sub	sp, #8
 8014a06:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014a0a:	2000      	movs	r0, #0
 8014a0c:	b002      	add	sp, #8
 8014a0e:	4770      	bx	lr

08014a10 <rcutils_to_native_path>:
 8014a10:	b084      	sub	sp, #16
 8014a12:	a801      	add	r0, sp, #4
 8014a14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014a18:	b004      	add	sp, #16
 8014a1a:	2000      	movs	r0, #0
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop

08014a20 <rcutils_format_string_limit>:
 8014a20:	b40f      	push	{r0, r1, r2, r3}
 8014a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a24:	b083      	sub	sp, #12
 8014a26:	ac08      	add	r4, sp, #32
 8014a28:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014a2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014a2e:	b34e      	cbz	r6, 8014a84 <rcutils_format_string_limit+0x64>
 8014a30:	a808      	add	r0, sp, #32
 8014a32:	f7f7 faaf 	bl	800bf94 <rcutils_allocator_is_valid>
 8014a36:	b328      	cbz	r0, 8014a84 <rcutils_format_string_limit+0x64>
 8014a38:	2100      	movs	r1, #0
 8014a3a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014a3c:	4632      	mov	r2, r6
 8014a3e:	4608      	mov	r0, r1
 8014a40:	e9cd 3300 	strd	r3, r3, [sp]
 8014a44:	f000 f8f4 	bl	8014c30 <rcutils_vsnprintf>
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	d01a      	beq.n	8014a84 <rcutils_format_string_limit+0x64>
 8014a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014a50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014a52:	1c47      	adds	r7, r0, #1
 8014a54:	429f      	cmp	r7, r3
 8014a56:	bf84      	itt	hi
 8014a58:	461f      	movhi	r7, r3
 8014a5a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014a5e:	4638      	mov	r0, r7
 8014a60:	9b08      	ldr	r3, [sp, #32]
 8014a62:	4798      	blx	r3
 8014a64:	4604      	mov	r4, r0
 8014a66:	b168      	cbz	r0, 8014a84 <rcutils_format_string_limit+0x64>
 8014a68:	9b01      	ldr	r3, [sp, #4]
 8014a6a:	4632      	mov	r2, r6
 8014a6c:	4639      	mov	r1, r7
 8014a6e:	f000 f8df 	bl	8014c30 <rcutils_vsnprintf>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	db02      	blt.n	8014a7c <rcutils_format_string_limit+0x5c>
 8014a76:	2300      	movs	r3, #0
 8014a78:	5563      	strb	r3, [r4, r5]
 8014a7a:	e004      	b.n	8014a86 <rcutils_format_string_limit+0x66>
 8014a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a7e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014a80:	4620      	mov	r0, r4
 8014a82:	4798      	blx	r3
 8014a84:	2400      	movs	r4, #0
 8014a86:	4620      	mov	r0, r4
 8014a88:	b003      	add	sp, #12
 8014a8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a8e:	b004      	add	sp, #16
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop

08014a94 <rcutils_repl_str>:
 8014a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a98:	ed2d 8b02 	vpush	{d8}
 8014a9c:	b087      	sub	sp, #28
 8014a9e:	4680      	mov	r8, r0
 8014aa0:	4608      	mov	r0, r1
 8014aa2:	f8cd 8004 	str.w	r8, [sp, #4]
 8014aa6:	ee08 2a10 	vmov	s16, r2
 8014aaa:	468a      	mov	sl, r1
 8014aac:	4699      	mov	r9, r3
 8014aae:	f7eb fbc1 	bl	8000234 <strlen>
 8014ab2:	2600      	movs	r6, #0
 8014ab4:	4647      	mov	r7, r8
 8014ab6:	9002      	str	r0, [sp, #8]
 8014ab8:	46b3      	mov	fp, r6
 8014aba:	2510      	movs	r5, #16
 8014abc:	46b0      	mov	r8, r6
 8014abe:	e01d      	b.n	8014afc <rcutils_repl_str+0x68>
 8014ac0:	f10b 0b01 	add.w	fp, fp, #1
 8014ac4:	455e      	cmp	r6, fp
 8014ac6:	d211      	bcs.n	8014aec <rcutils_repl_str+0x58>
 8014ac8:	442e      	add	r6, r5
 8014aca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014ace:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014ad2:	00b1      	lsls	r1, r6, #2
 8014ad4:	4798      	blx	r3
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	f000 8088 	beq.w	8014bec <rcutils_repl_str+0x158>
 8014adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ae0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014ae4:	4680      	mov	r8, r0
 8014ae6:	bf28      	it	cs
 8014ae8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014aec:	9a01      	ldr	r2, [sp, #4]
 8014aee:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014af2:	1aa2      	subs	r2, r4, r2
 8014af4:	f843 2c04 	str.w	r2, [r3, #-4]
 8014af8:	9b02      	ldr	r3, [sp, #8]
 8014afa:	18e7      	adds	r7, r4, r3
 8014afc:	4651      	mov	r1, sl
 8014afe:	4638      	mov	r0, r7
 8014b00:	f002 fff1 	bl	8017ae6 <strstr>
 8014b04:	4604      	mov	r4, r0
 8014b06:	4640      	mov	r0, r8
 8014b08:	2c00      	cmp	r4, #0
 8014b0a:	d1d9      	bne.n	8014ac0 <rcutils_repl_str+0x2c>
 8014b0c:	46b8      	mov	r8, r7
 8014b0e:	4607      	mov	r7, r0
 8014b10:	4640      	mov	r0, r8
 8014b12:	f7eb fb8f 	bl	8000234 <strlen>
 8014b16:	9b01      	ldr	r3, [sp, #4]
 8014b18:	eba8 0303 	sub.w	r3, r8, r3
 8014b1c:	181c      	adds	r4, r3, r0
 8014b1e:	9404      	str	r4, [sp, #16]
 8014b20:	f1bb 0f00 	cmp.w	fp, #0
 8014b24:	d04a      	beq.n	8014bbc <rcutils_repl_str+0x128>
 8014b26:	ee18 0a10 	vmov	r0, s16
 8014b2a:	f7eb fb83 	bl	8000234 <strlen>
 8014b2e:	9b02      	ldr	r3, [sp, #8]
 8014b30:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014b34:	1ac3      	subs	r3, r0, r3
 8014b36:	fb0b 4303 	mla	r3, fp, r3, r4
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	9305      	str	r3, [sp, #20]
 8014b3e:	4606      	mov	r6, r0
 8014b40:	f8d9 3000 	ldr.w	r3, [r9]
 8014b44:	1c50      	adds	r0, r2, #1
 8014b46:	4798      	blx	r3
 8014b48:	9003      	str	r0, [sp, #12]
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	d04f      	beq.n	8014bee <rcutils_repl_str+0x15a>
 8014b4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b52:	683a      	ldr	r2, [r7, #0]
 8014b54:	4641      	mov	r1, r8
 8014b56:	f003 f868 	bl	8017c2a <memcpy>
 8014b5a:	683d      	ldr	r5, [r7, #0]
 8014b5c:	9b03      	ldr	r3, [sp, #12]
 8014b5e:	9701      	str	r7, [sp, #4]
 8014b60:	46ba      	mov	sl, r7
 8014b62:	441d      	add	r5, r3
 8014b64:	9f02      	ldr	r7, [sp, #8]
 8014b66:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b6a:	2401      	movs	r4, #1
 8014b6c:	46d1      	mov	r9, sl
 8014b6e:	ee18 aa10 	vmov	sl, s16
 8014b72:	e00a      	b.n	8014b8a <rcutils_repl_str+0xf6>
 8014b74:	f8d9 5000 	ldr.w	r5, [r9]
 8014b78:	1aaa      	subs	r2, r5, r2
 8014b7a:	1885      	adds	r5, r0, r2
 8014b7c:	f003 f855 	bl	8017c2a <memcpy>
 8014b80:	45a3      	cmp	fp, r4
 8014b82:	f104 0201 	add.w	r2, r4, #1
 8014b86:	d935      	bls.n	8014bf4 <rcutils_repl_str+0x160>
 8014b88:	4614      	mov	r4, r2
 8014b8a:	4632      	mov	r2, r6
 8014b8c:	4651      	mov	r1, sl
 8014b8e:	4628      	mov	r0, r5
 8014b90:	f003 f84b 	bl	8017c2a <memcpy>
 8014b94:	f859 2b04 	ldr.w	r2, [r9], #4
 8014b98:	45a3      	cmp	fp, r4
 8014b9a:	443a      	add	r2, r7
 8014b9c:	eb05 0006 	add.w	r0, r5, r6
 8014ba0:	eb08 0102 	add.w	r1, r8, r2
 8014ba4:	d1e6      	bne.n	8014b74 <rcutils_repl_str+0xe0>
 8014ba6:	9b04      	ldr	r3, [sp, #16]
 8014ba8:	1a9a      	subs	r2, r3, r2
 8014baa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014bae:	f003 f83c 	bl	8017c2a <memcpy>
 8014bb2:	9a03      	ldr	r2, [sp, #12]
 8014bb4:	9905      	ldr	r1, [sp, #20]
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	5453      	strb	r3, [r2, r1]
 8014bba:	e00b      	b.n	8014bd4 <rcutils_repl_str+0x140>
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f8d9 3000 	ldr.w	r3, [r9]
 8014bc2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014bc6:	3001      	adds	r0, #1
 8014bc8:	4798      	blx	r3
 8014bca:	9003      	str	r0, [sp, #12]
 8014bcc:	b110      	cbz	r0, 8014bd4 <rcutils_repl_str+0x140>
 8014bce:	9901      	ldr	r1, [sp, #4]
 8014bd0:	f003 f823 	bl	8017c1a <strcpy>
 8014bd4:	4638      	mov	r0, r7
 8014bd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014bda:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014bde:	4798      	blx	r3
 8014be0:	9803      	ldr	r0, [sp, #12]
 8014be2:	b007      	add	sp, #28
 8014be4:	ecbd 8b02 	vpop	{d8}
 8014be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	4647      	mov	r7, r8
 8014bee:	2300      	movs	r3, #0
 8014bf0:	9303      	str	r3, [sp, #12]
 8014bf2:	e7ef      	b.n	8014bd4 <rcutils_repl_str+0x140>
 8014bf4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014bf8:	e7db      	b.n	8014bb2 <rcutils_repl_str+0x11e>
 8014bfa:	bf00      	nop

08014bfc <rcutils_snprintf>:
 8014bfc:	b40c      	push	{r2, r3}
 8014bfe:	b530      	push	{r4, r5, lr}
 8014c00:	b083      	sub	sp, #12
 8014c02:	ab06      	add	r3, sp, #24
 8014c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c08:	9301      	str	r3, [sp, #4]
 8014c0a:	b152      	cbz	r2, 8014c22 <rcutils_snprintf+0x26>
 8014c0c:	b138      	cbz	r0, 8014c1e <rcutils_snprintf+0x22>
 8014c0e:	b141      	cbz	r1, 8014c22 <rcutils_snprintf+0x26>
 8014c10:	f002 ff0a 	bl	8017a28 <vsniprintf>
 8014c14:	b003      	add	sp, #12
 8014c16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c1a:	b002      	add	sp, #8
 8014c1c:	4770      	bx	lr
 8014c1e:	2900      	cmp	r1, #0
 8014c20:	d0f6      	beq.n	8014c10 <rcutils_snprintf+0x14>
 8014c22:	f002 ffcd 	bl	8017bc0 <__errno>
 8014c26:	2316      	movs	r3, #22
 8014c28:	6003      	str	r3, [r0, #0]
 8014c2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c2e:	e7f1      	b.n	8014c14 <rcutils_snprintf+0x18>

08014c30 <rcutils_vsnprintf>:
 8014c30:	b570      	push	{r4, r5, r6, lr}
 8014c32:	b13a      	cbz	r2, 8014c44 <rcutils_vsnprintf+0x14>
 8014c34:	b120      	cbz	r0, 8014c40 <rcutils_vsnprintf+0x10>
 8014c36:	b129      	cbz	r1, 8014c44 <rcutils_vsnprintf+0x14>
 8014c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c3c:	f002 bef4 	b.w	8017a28 <vsniprintf>
 8014c40:	2900      	cmp	r1, #0
 8014c42:	d0f9      	beq.n	8014c38 <rcutils_vsnprintf+0x8>
 8014c44:	f002 ffbc 	bl	8017bc0 <__errno>
 8014c48:	2316      	movs	r3, #22
 8014c4a:	6003      	str	r3, [r0, #0]
 8014c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c50:	bd70      	pop	{r4, r5, r6, pc}
 8014c52:	bf00      	nop

08014c54 <rcutils_strdup>:
 8014c54:	b084      	sub	sp, #16
 8014c56:	b570      	push	{r4, r5, r6, lr}
 8014c58:	b082      	sub	sp, #8
 8014c5a:	ac07      	add	r4, sp, #28
 8014c5c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014c60:	4605      	mov	r5, r0
 8014c62:	b1b0      	cbz	r0, 8014c92 <rcutils_strdup+0x3e>
 8014c64:	f7eb fae6 	bl	8000234 <strlen>
 8014c68:	1c42      	adds	r2, r0, #1
 8014c6a:	9b07      	ldr	r3, [sp, #28]
 8014c6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014c6e:	9201      	str	r2, [sp, #4]
 8014c70:	4606      	mov	r6, r0
 8014c72:	4610      	mov	r0, r2
 8014c74:	4798      	blx	r3
 8014c76:	4604      	mov	r4, r0
 8014c78:	b128      	cbz	r0, 8014c86 <rcutils_strdup+0x32>
 8014c7a:	9a01      	ldr	r2, [sp, #4]
 8014c7c:	4629      	mov	r1, r5
 8014c7e:	f002 ffd4 	bl	8017c2a <memcpy>
 8014c82:	2300      	movs	r3, #0
 8014c84:	55a3      	strb	r3, [r4, r6]
 8014c86:	4620      	mov	r0, r4
 8014c88:	b002      	add	sp, #8
 8014c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c8e:	b004      	add	sp, #16
 8014c90:	4770      	bx	lr
 8014c92:	4604      	mov	r4, r0
 8014c94:	e7f7      	b.n	8014c86 <rcutils_strdup+0x32>
 8014c96:	bf00      	nop

08014c98 <rcutils_strndup>:
 8014c98:	b082      	sub	sp, #8
 8014c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9c:	ac06      	add	r4, sp, #24
 8014c9e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014ca2:	4605      	mov	r5, r0
 8014ca4:	b188      	cbz	r0, 8014cca <rcutils_strndup+0x32>
 8014ca6:	1c4f      	adds	r7, r1, #1
 8014ca8:	460e      	mov	r6, r1
 8014caa:	4638      	mov	r0, r7
 8014cac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014cae:	4790      	blx	r2
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	b128      	cbz	r0, 8014cc0 <rcutils_strndup+0x28>
 8014cb4:	463a      	mov	r2, r7
 8014cb6:	4629      	mov	r1, r5
 8014cb8:	f002 ffb7 	bl	8017c2a <memcpy>
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	55a3      	strb	r3, [r4, r6]
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014cc6:	b002      	add	sp, #8
 8014cc8:	4770      	bx	lr
 8014cca:	4604      	mov	r4, r0
 8014ccc:	e7f8      	b.n	8014cc0 <rcutils_strndup+0x28>
 8014cce:	bf00      	nop

08014cd0 <rcutils_get_zero_initialized_string_map>:
 8014cd0:	4b01      	ldr	r3, [pc, #4]	@ (8014cd8 <rcutils_get_zero_initialized_string_map+0x8>)
 8014cd2:	2000      	movs	r0, #0
 8014cd4:	6018      	str	r0, [r3, #0]
 8014cd6:	4770      	bx	lr
 8014cd8:	2000cb0c 	.word	0x2000cb0c

08014cdc <rcutils_string_map_reserve>:
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d05f      	beq.n	8014da0 <rcutils_string_map_reserve+0xc4>
 8014ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce4:	460c      	mov	r4, r1
 8014ce6:	6801      	ldr	r1, [r0, #0]
 8014ce8:	b082      	sub	sp, #8
 8014cea:	4605      	mov	r5, r0
 8014cec:	b129      	cbz	r1, 8014cfa <rcutils_string_map_reserve+0x1e>
 8014cee:	68cb      	ldr	r3, [r1, #12]
 8014cf0:	42a3      	cmp	r3, r4
 8014cf2:	d906      	bls.n	8014d02 <rcutils_string_map_reserve+0x26>
 8014cf4:	461c      	mov	r4, r3
 8014cf6:	2900      	cmp	r1, #0
 8014cf8:	d1f9      	bne.n	8014cee <rcutils_string_map_reserve+0x12>
 8014cfa:	201f      	movs	r0, #31
 8014cfc:	b002      	add	sp, #8
 8014cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d02:	688b      	ldr	r3, [r1, #8]
 8014d04:	42a3      	cmp	r3, r4
 8014d06:	d047      	beq.n	8014d98 <rcutils_string_map_reserve+0xbc>
 8014d08:	6a0e      	ldr	r6, [r1, #32]
 8014d0a:	2c00      	cmp	r4, #0
 8014d0c:	d034      	beq.n	8014d78 <rcutils_string_map_reserve+0x9c>
 8014d0e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014d12:	d243      	bcs.n	8014d9c <rcutils_string_map_reserve+0xc0>
 8014d14:	00a7      	lsls	r7, r4, #2
 8014d16:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014d1a:	6808      	ldr	r0, [r1, #0]
 8014d1c:	4632      	mov	r2, r6
 8014d1e:	4639      	mov	r1, r7
 8014d20:	47c0      	blx	r8
 8014d22:	2800      	cmp	r0, #0
 8014d24:	d03a      	beq.n	8014d9c <rcutils_string_map_reserve+0xc0>
 8014d26:	682b      	ldr	r3, [r5, #0]
 8014d28:	4632      	mov	r2, r6
 8014d2a:	6018      	str	r0, [r3, #0]
 8014d2c:	4639      	mov	r1, r7
 8014d2e:	6858      	ldr	r0, [r3, #4]
 8014d30:	47c0      	blx	r8
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d032      	beq.n	8014d9c <rcutils_string_map_reserve+0xc0>
 8014d36:	682d      	ldr	r5, [r5, #0]
 8014d38:	68ab      	ldr	r3, [r5, #8]
 8014d3a:	6068      	str	r0, [r5, #4]
 8014d3c:	42a3      	cmp	r3, r4
 8014d3e:	d226      	bcs.n	8014d8e <rcutils_string_map_reserve+0xb2>
 8014d40:	682a      	ldr	r2, [r5, #0]
 8014d42:	eb00 0c07 	add.w	ip, r0, r7
 8014d46:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014d4a:	45e6      	cmp	lr, ip
 8014d4c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014d50:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014d54:	d203      	bcs.n	8014d5e <rcutils_string_map_reserve+0x82>
 8014d56:	eb02 0c07 	add.w	ip, r2, r7
 8014d5a:	4566      	cmp	r6, ip
 8014d5c:	d322      	bcc.n	8014da4 <rcutils_string_map_reserve+0xc8>
 8014d5e:	1ae3      	subs	r3, r4, r3
 8014d60:	009a      	lsls	r2, r3, #2
 8014d62:	4670      	mov	r0, lr
 8014d64:	2100      	movs	r1, #0
 8014d66:	9201      	str	r2, [sp, #4]
 8014d68:	f002 fe96 	bl	8017a98 <memset>
 8014d6c:	9a01      	ldr	r2, [sp, #4]
 8014d6e:	2100      	movs	r1, #0
 8014d70:	4630      	mov	r0, r6
 8014d72:	f002 fe91 	bl	8017a98 <memset>
 8014d76:	e00a      	b.n	8014d8e <rcutils_string_map_reserve+0xb2>
 8014d78:	694f      	ldr	r7, [r1, #20]
 8014d7a:	6808      	ldr	r0, [r1, #0]
 8014d7c:	4631      	mov	r1, r6
 8014d7e:	47b8      	blx	r7
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	4631      	mov	r1, r6
 8014d84:	6858      	ldr	r0, [r3, #4]
 8014d86:	601c      	str	r4, [r3, #0]
 8014d88:	47b8      	blx	r7
 8014d8a:	682d      	ldr	r5, [r5, #0]
 8014d8c:	606c      	str	r4, [r5, #4]
 8014d8e:	2000      	movs	r0, #0
 8014d90:	60ac      	str	r4, [r5, #8]
 8014d92:	b002      	add	sp, #8
 8014d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d98:	2000      	movs	r0, #0
 8014d9a:	e7af      	b.n	8014cfc <rcutils_string_map_reserve+0x20>
 8014d9c:	200a      	movs	r0, #10
 8014d9e:	e7ad      	b.n	8014cfc <rcutils_string_map_reserve+0x20>
 8014da0:	200b      	movs	r0, #11
 8014da2:	4770      	bx	lr
 8014da4:	1f0b      	subs	r3, r1, #4
 8014da6:	4418      	add	r0, r3
 8014da8:	4413      	add	r3, r2
 8014daa:	3a04      	subs	r2, #4
 8014dac:	4417      	add	r7, r2
 8014dae:	2200      	movs	r2, #0
 8014db0:	f843 2f04 	str.w	r2, [r3, #4]!
 8014db4:	42bb      	cmp	r3, r7
 8014db6:	f840 2f04 	str.w	r2, [r0, #4]!
 8014dba:	d1f9      	bne.n	8014db0 <rcutils_string_map_reserve+0xd4>
 8014dbc:	e7e7      	b.n	8014d8e <rcutils_string_map_reserve+0xb2>
 8014dbe:	bf00      	nop

08014dc0 <rcutils_string_map_init>:
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	b570      	push	{r4, r5, r6, lr}
 8014dc4:	ac04      	add	r4, sp, #16
 8014dc6:	e884 000c 	stmia.w	r4, {r2, r3}
 8014dca:	b380      	cbz	r0, 8014e2e <rcutils_string_map_init+0x6e>
 8014dcc:	6806      	ldr	r6, [r0, #0]
 8014dce:	4604      	mov	r4, r0
 8014dd0:	b12e      	cbz	r6, 8014dde <rcutils_string_map_init+0x1e>
 8014dd2:	251e      	movs	r5, #30
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dda:	b002      	add	sp, #8
 8014ddc:	4770      	bx	lr
 8014dde:	a804      	add	r0, sp, #16
 8014de0:	460d      	mov	r5, r1
 8014de2:	f7f7 f8d7 	bl	800bf94 <rcutils_allocator_is_valid>
 8014de6:	b310      	cbz	r0, 8014e2e <rcutils_string_map_init+0x6e>
 8014de8:	9b04      	ldr	r3, [sp, #16]
 8014dea:	9908      	ldr	r1, [sp, #32]
 8014dec:	2024      	movs	r0, #36	@ 0x24
 8014dee:	4798      	blx	r3
 8014df0:	6020      	str	r0, [r4, #0]
 8014df2:	b310      	cbz	r0, 8014e3a <rcutils_string_map_init+0x7a>
 8014df4:	f10d 0e10 	add.w	lr, sp, #16
 8014df8:	e9c0 6600 	strd	r6, r6, [r0]
 8014dfc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014e00:	f100 0c10 	add.w	ip, r0, #16
 8014e04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e0c:	f8de 3000 	ldr.w	r3, [lr]
 8014e10:	f8cc 3000 	str.w	r3, [ip]
 8014e14:	4629      	mov	r1, r5
 8014e16:	4620      	mov	r0, r4
 8014e18:	f7ff ff60 	bl	8014cdc <rcutils_string_map_reserve>
 8014e1c:	4605      	mov	r5, r0
 8014e1e:	2800      	cmp	r0, #0
 8014e20:	d0d8      	beq.n	8014dd4 <rcutils_string_map_init+0x14>
 8014e22:	9b05      	ldr	r3, [sp, #20]
 8014e24:	9908      	ldr	r1, [sp, #32]
 8014e26:	6820      	ldr	r0, [r4, #0]
 8014e28:	4798      	blx	r3
 8014e2a:	6026      	str	r6, [r4, #0]
 8014e2c:	e7d2      	b.n	8014dd4 <rcutils_string_map_init+0x14>
 8014e2e:	250b      	movs	r5, #11
 8014e30:	4628      	mov	r0, r5
 8014e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e36:	b002      	add	sp, #8
 8014e38:	4770      	bx	lr
 8014e3a:	250a      	movs	r5, #10
 8014e3c:	e7ca      	b.n	8014dd4 <rcutils_string_map_init+0x14>
 8014e3e:	bf00      	nop

08014e40 <rcutils_string_map_fini>:
 8014e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e44:	b082      	sub	sp, #8
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d03a      	beq.n	8014ec0 <rcutils_string_map_fini+0x80>
 8014e4a:	6804      	ldr	r4, [r0, #0]
 8014e4c:	4606      	mov	r6, r0
 8014e4e:	2c00      	cmp	r4, #0
 8014e50:	d032      	beq.n	8014eb8 <rcutils_string_map_fini+0x78>
 8014e52:	68a3      	ldr	r3, [r4, #8]
 8014e54:	b32b      	cbz	r3, 8014ea2 <rcutils_string_map_fini+0x62>
 8014e56:	2500      	movs	r5, #0
 8014e58:	6822      	ldr	r2, [r4, #0]
 8014e5a:	462f      	mov	r7, r5
 8014e5c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014e60:	b1e0      	cbz	r0, 8014e9c <rcutils_string_map_fini+0x5c>
 8014e62:	6a21      	ldr	r1, [r4, #32]
 8014e64:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014e68:	9101      	str	r1, [sp, #4]
 8014e6a:	47c0      	blx	r8
 8014e6c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e70:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014e74:	9901      	ldr	r1, [sp, #4]
 8014e76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014e7a:	47c0      	blx	r8
 8014e7c:	68e3      	ldr	r3, [r4, #12]
 8014e7e:	6862      	ldr	r2, [r4, #4]
 8014e80:	3b01      	subs	r3, #1
 8014e82:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014e86:	60e3      	str	r3, [r4, #12]
 8014e88:	6834      	ldr	r4, [r6, #0]
 8014e8a:	68a3      	ldr	r3, [r4, #8]
 8014e8c:	3501      	adds	r5, #1
 8014e8e:	429d      	cmp	r5, r3
 8014e90:	d207      	bcs.n	8014ea2 <rcutils_string_map_fini+0x62>
 8014e92:	6822      	ldr	r2, [r4, #0]
 8014e94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014e98:	2800      	cmp	r0, #0
 8014e9a:	d1e2      	bne.n	8014e62 <rcutils_string_map_fini+0x22>
 8014e9c:	3501      	adds	r5, #1
 8014e9e:	429d      	cmp	r5, r3
 8014ea0:	d3dc      	bcc.n	8014e5c <rcutils_string_map_fini+0x1c>
 8014ea2:	2100      	movs	r1, #0
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	f7ff ff19 	bl	8014cdc <rcutils_string_map_reserve>
 8014eaa:	4604      	mov	r4, r0
 8014eac:	b920      	cbnz	r0, 8014eb8 <rcutils_string_map_fini+0x78>
 8014eae:	6830      	ldr	r0, [r6, #0]
 8014eb0:	6943      	ldr	r3, [r0, #20]
 8014eb2:	6a01      	ldr	r1, [r0, #32]
 8014eb4:	4798      	blx	r3
 8014eb6:	6034      	str	r4, [r6, #0]
 8014eb8:	4620      	mov	r0, r4
 8014eba:	b002      	add	sp, #8
 8014ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec0:	240b      	movs	r4, #11
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	b002      	add	sp, #8
 8014ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eca:	bf00      	nop

08014ecc <rcutils_string_map_getn>:
 8014ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed0:	b300      	cbz	r0, 8014f14 <rcutils_string_map_getn+0x48>
 8014ed2:	6807      	ldr	r7, [r0, #0]
 8014ed4:	b1ff      	cbz	r7, 8014f16 <rcutils_string_map_getn+0x4a>
 8014ed6:	4688      	mov	r8, r1
 8014ed8:	b1e1      	cbz	r1, 8014f14 <rcutils_string_map_getn+0x48>
 8014eda:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014ede:	683e      	ldr	r6, [r7, #0]
 8014ee0:	f1ba 0f00 	cmp.w	sl, #0
 8014ee4:	d016      	beq.n	8014f14 <rcutils_string_map_getn+0x48>
 8014ee6:	4691      	mov	r9, r2
 8014ee8:	3e04      	subs	r6, #4
 8014eea:	2400      	movs	r4, #0
 8014eec:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	3401      	adds	r4, #1
 8014ef8:	b155      	cbz	r5, 8014f10 <rcutils_string_map_getn+0x44>
 8014efa:	f7eb f99b 	bl	8000234 <strlen>
 8014efe:	4548      	cmp	r0, r9
 8014f00:	4602      	mov	r2, r0
 8014f02:	4629      	mov	r1, r5
 8014f04:	bf38      	it	cc
 8014f06:	464a      	movcc	r2, r9
 8014f08:	4640      	mov	r0, r8
 8014f0a:	f002 fdda 	bl	8017ac2 <strncmp>
 8014f0e:	b128      	cbz	r0, 8014f1c <rcutils_string_map_getn+0x50>
 8014f10:	45a2      	cmp	sl, r4
 8014f12:	d1eb      	bne.n	8014eec <rcutils_string_map_getn+0x20>
 8014f14:	2700      	movs	r7, #0
 8014f16:	4638      	mov	r0, r7
 8014f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f853 700b 	ldr.w	r7, [r3, fp]
 8014f22:	4638      	mov	r0, r7
 8014f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f28 <rmw_get_zero_initialized_context>:
 8014f28:	b510      	push	{r4, lr}
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	3010      	adds	r0, #16
 8014f2e:	f7f7 f8c3 	bl	800c0b8 <rmw_get_zero_initialized_init_options>
 8014f32:	2300      	movs	r3, #0
 8014f34:	2000      	movs	r0, #0
 8014f36:	2100      	movs	r1, #0
 8014f38:	e9c4 0100 	strd	r0, r1, [r4]
 8014f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014f40:	60a3      	str	r3, [r4, #8]
 8014f42:	4620      	mov	r0, r4
 8014f44:	bd10      	pop	{r4, pc}
 8014f46:	bf00      	nop

08014f48 <rmw_time_equal>:
 8014f48:	b4f0      	push	{r4, r5, r6, r7}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	ac04      	add	r4, sp, #16
 8014f4e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014f52:	4603      	mov	r3, r0
 8014f54:	4924      	ldr	r1, [pc, #144]	@ (8014fe8 <rmw_time_equal+0xa0>)
 8014f56:	9e03      	ldr	r6, [sp, #12]
 8014f58:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014f5c:	2202      	movs	r2, #2
 8014f5e:	4299      	cmp	r1, r3
 8014f60:	41aa      	sbcs	r2, r5
 8014f62:	d330      	bcc.n	8014fc6 <rmw_time_equal+0x7e>
 8014f64:	4c21      	ldr	r4, [pc, #132]	@ (8014fec <rmw_time_equal+0xa4>)
 8014f66:	fba3 3204 	umull	r3, r2, r3, r4
 8014f6a:	fb04 2205 	mla	r2, r4, r5, r2
 8014f6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014f72:	43dd      	mvns	r5, r3
 8014f74:	1a8c      	subs	r4, r1, r2
 8014f76:	4285      	cmp	r5, r0
 8014f78:	41b4      	sbcs	r4, r6
 8014f7a:	d332      	bcc.n	8014fe2 <rmw_time_equal+0x9a>
 8014f7c:	eb10 0c03 	adds.w	ip, r0, r3
 8014f80:	eb42 0106 	adc.w	r1, r2, r6
 8014f84:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014f88:	4817      	ldr	r0, [pc, #92]	@ (8014fe8 <rmw_time_equal+0xa0>)
 8014f8a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014f8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014f8e:	2202      	movs	r2, #2
 8014f90:	4298      	cmp	r0, r3
 8014f92:	41b2      	sbcs	r2, r6
 8014f94:	d31c      	bcc.n	8014fd0 <rmw_time_equal+0x88>
 8014f96:	4c15      	ldr	r4, [pc, #84]	@ (8014fec <rmw_time_equal+0xa4>)
 8014f98:	fba3 3204 	umull	r3, r2, r3, r4
 8014f9c:	fb04 2206 	mla	r2, r4, r6, r2
 8014fa0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014fa4:	43de      	mvns	r6, r3
 8014fa6:	1a84      	subs	r4, r0, r2
 8014fa8:	42ae      	cmp	r6, r5
 8014faa:	41bc      	sbcs	r4, r7
 8014fac:	d315      	bcc.n	8014fda <rmw_time_equal+0x92>
 8014fae:	195b      	adds	r3, r3, r5
 8014fb0:	eb42 0207 	adc.w	r2, r2, r7
 8014fb4:	428a      	cmp	r2, r1
 8014fb6:	bf08      	it	eq
 8014fb8:	4563      	cmpeq	r3, ip
 8014fba:	bf0c      	ite	eq
 8014fbc:	2001      	moveq	r0, #1
 8014fbe:	2000      	movne	r0, #0
 8014fc0:	b004      	add	sp, #16
 8014fc2:	bcf0      	pop	{r4, r5, r6, r7}
 8014fc4:	4770      	bx	lr
 8014fc6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014fca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014fce:	e7d9      	b.n	8014f84 <rmw_time_equal+0x3c>
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014fd4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014fd8:	e7ec      	b.n	8014fb4 <rmw_time_equal+0x6c>
 8014fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014fde:	4602      	mov	r2, r0
 8014fe0:	e7e8      	b.n	8014fb4 <rmw_time_equal+0x6c>
 8014fe2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014fe6:	e7cd      	b.n	8014f84 <rmw_time_equal+0x3c>
 8014fe8:	25c17d04 	.word	0x25c17d04
 8014fec:	3b9aca00 	.word	0x3b9aca00

08014ff0 <rmw_time_total_nsec>:
 8014ff0:	b470      	push	{r4, r5, r6}
 8014ff2:	b085      	sub	sp, #20
 8014ff4:	ac04      	add	r4, sp, #16
 8014ff6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	4912      	ldr	r1, [pc, #72]	@ (8015048 <rmw_time_total_nsec+0x58>)
 8014ffe:	9e03      	ldr	r6, [sp, #12]
 8015000:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015004:	2202      	movs	r2, #2
 8015006:	4299      	cmp	r1, r3
 8015008:	41aa      	sbcs	r2, r5
 801500a:	d311      	bcc.n	8015030 <rmw_time_total_nsec+0x40>
 801500c:	4c0f      	ldr	r4, [pc, #60]	@ (801504c <rmw_time_total_nsec+0x5c>)
 801500e:	fba3 3204 	umull	r3, r2, r3, r4
 8015012:	fb04 2205 	mla	r2, r4, r5, r2
 8015016:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801501a:	43dd      	mvns	r5, r3
 801501c:	1a8c      	subs	r4, r1, r2
 801501e:	4285      	cmp	r5, r0
 8015020:	41b4      	sbcs	r4, r6
 8015022:	d30c      	bcc.n	801503e <rmw_time_total_nsec+0x4e>
 8015024:	1818      	adds	r0, r3, r0
 8015026:	eb42 0106 	adc.w	r1, r2, r6
 801502a:	b005      	add	sp, #20
 801502c:	bc70      	pop	{r4, r5, r6}
 801502e:	4770      	bx	lr
 8015030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015034:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015038:	b005      	add	sp, #20
 801503a:	bc70      	pop	{r4, r5, r6}
 801503c:	4770      	bx	lr
 801503e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015042:	b005      	add	sp, #20
 8015044:	bc70      	pop	{r4, r5, r6}
 8015046:	4770      	bx	lr
 8015048:	25c17d04 	.word	0x25c17d04
 801504c:	3b9aca00 	.word	0x3b9aca00

08015050 <rmw_get_zero_initialized_message_info>:
 8015050:	b510      	push	{r4, lr}
 8015052:	2240      	movs	r2, #64	@ 0x40
 8015054:	4604      	mov	r4, r0
 8015056:	2100      	movs	r1, #0
 8015058:	f002 fd1e 	bl	8017a98 <memset>
 801505c:	4620      	mov	r0, r4
 801505e:	bd10      	pop	{r4, pc}

08015060 <rmw_validate_full_topic_name>:
 8015060:	2800      	cmp	r0, #0
 8015062:	d057      	beq.n	8015114 <rmw_validate_full_topic_name+0xb4>
 8015064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015068:	460d      	mov	r5, r1
 801506a:	2900      	cmp	r1, #0
 801506c:	d054      	beq.n	8015118 <rmw_validate_full_topic_name+0xb8>
 801506e:	4616      	mov	r6, r2
 8015070:	4604      	mov	r4, r0
 8015072:	f7eb f8df 	bl	8000234 <strlen>
 8015076:	b148      	cbz	r0, 801508c <rmw_validate_full_topic_name+0x2c>
 8015078:	7823      	ldrb	r3, [r4, #0]
 801507a:	2b2f      	cmp	r3, #47	@ 0x2f
 801507c:	d00d      	beq.n	801509a <rmw_validate_full_topic_name+0x3a>
 801507e:	2302      	movs	r3, #2
 8015080:	602b      	str	r3, [r5, #0]
 8015082:	b13e      	cbz	r6, 8015094 <rmw_validate_full_topic_name+0x34>
 8015084:	2000      	movs	r0, #0
 8015086:	6030      	str	r0, [r6, #0]
 8015088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801508c:	2301      	movs	r3, #1
 801508e:	602b      	str	r3, [r5, #0]
 8015090:	2e00      	cmp	r6, #0
 8015092:	d1f7      	bne.n	8015084 <rmw_validate_full_topic_name+0x24>
 8015094:	2000      	movs	r0, #0
 8015096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801509a:	1e43      	subs	r3, r0, #1
 801509c:	5ce2      	ldrb	r2, [r4, r3]
 801509e:	2a2f      	cmp	r2, #47	@ 0x2f
 80150a0:	d03c      	beq.n	801511c <rmw_validate_full_topic_name+0xbc>
 80150a2:	1e63      	subs	r3, r4, #1
 80150a4:	eb03 0800 	add.w	r8, r3, r0
 80150a8:	f1c4 0e01 	rsb	lr, r4, #1
 80150ac:	eb0e 0703 	add.w	r7, lr, r3
 80150b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80150b4:	f021 0220 	bic.w	r2, r1, #32
 80150b8:	3a41      	subs	r2, #65	@ 0x41
 80150ba:	2a19      	cmp	r2, #25
 80150bc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80150c0:	d90b      	bls.n	80150da <rmw_validate_full_topic_name+0x7a>
 80150c2:	295f      	cmp	r1, #95	@ 0x5f
 80150c4:	d009      	beq.n	80150da <rmw_validate_full_topic_name+0x7a>
 80150c6:	f1bc 0f0a 	cmp.w	ip, #10
 80150ca:	d906      	bls.n	80150da <rmw_validate_full_topic_name+0x7a>
 80150cc:	2304      	movs	r3, #4
 80150ce:	602b      	str	r3, [r5, #0]
 80150d0:	2e00      	cmp	r6, #0
 80150d2:	d0df      	beq.n	8015094 <rmw_validate_full_topic_name+0x34>
 80150d4:	6037      	str	r7, [r6, #0]
 80150d6:	2000      	movs	r0, #0
 80150d8:	e7d6      	b.n	8015088 <rmw_validate_full_topic_name+0x28>
 80150da:	4543      	cmp	r3, r8
 80150dc:	d1e6      	bne.n	80150ac <rmw_validate_full_topic_name+0x4c>
 80150de:	4f1a      	ldr	r7, [pc, #104]	@ (8015148 <rmw_validate_full_topic_name+0xe8>)
 80150e0:	2301      	movs	r3, #1
 80150e2:	e004      	b.n	80150ee <rmw_validate_full_topic_name+0x8e>
 80150e4:	4298      	cmp	r0, r3
 80150e6:	f104 0401 	add.w	r4, r4, #1
 80150ea:	d91c      	bls.n	8015126 <rmw_validate_full_topic_name+0xc6>
 80150ec:	4613      	mov	r3, r2
 80150ee:	4298      	cmp	r0, r3
 80150f0:	f103 0201 	add.w	r2, r3, #1
 80150f4:	d0f6      	beq.n	80150e4 <rmw_validate_full_topic_name+0x84>
 80150f6:	7821      	ldrb	r1, [r4, #0]
 80150f8:	292f      	cmp	r1, #47	@ 0x2f
 80150fa:	d1f3      	bne.n	80150e4 <rmw_validate_full_topic_name+0x84>
 80150fc:	7861      	ldrb	r1, [r4, #1]
 80150fe:	292f      	cmp	r1, #47	@ 0x2f
 8015100:	d01c      	beq.n	801513c <rmw_validate_full_topic_name+0xdc>
 8015102:	5dc9      	ldrb	r1, [r1, r7]
 8015104:	0749      	lsls	r1, r1, #29
 8015106:	d5ed      	bpl.n	80150e4 <rmw_validate_full_topic_name+0x84>
 8015108:	2206      	movs	r2, #6
 801510a:	602a      	str	r2, [r5, #0]
 801510c:	2e00      	cmp	r6, #0
 801510e:	d0c1      	beq.n	8015094 <rmw_validate_full_topic_name+0x34>
 8015110:	6033      	str	r3, [r6, #0]
 8015112:	e7bf      	b.n	8015094 <rmw_validate_full_topic_name+0x34>
 8015114:	200b      	movs	r0, #11
 8015116:	4770      	bx	lr
 8015118:	200b      	movs	r0, #11
 801511a:	e7b5      	b.n	8015088 <rmw_validate_full_topic_name+0x28>
 801511c:	2203      	movs	r2, #3
 801511e:	602a      	str	r2, [r5, #0]
 8015120:	2e00      	cmp	r6, #0
 8015122:	d1f5      	bne.n	8015110 <rmw_validate_full_topic_name+0xb0>
 8015124:	e7b6      	b.n	8015094 <rmw_validate_full_topic_name+0x34>
 8015126:	28f7      	cmp	r0, #247	@ 0xf7
 8015128:	d802      	bhi.n	8015130 <rmw_validate_full_topic_name+0xd0>
 801512a:	2000      	movs	r0, #0
 801512c:	6028      	str	r0, [r5, #0]
 801512e:	e7ab      	b.n	8015088 <rmw_validate_full_topic_name+0x28>
 8015130:	2307      	movs	r3, #7
 8015132:	602b      	str	r3, [r5, #0]
 8015134:	2e00      	cmp	r6, #0
 8015136:	d0ad      	beq.n	8015094 <rmw_validate_full_topic_name+0x34>
 8015138:	23f6      	movs	r3, #246	@ 0xf6
 801513a:	e7e9      	b.n	8015110 <rmw_validate_full_topic_name+0xb0>
 801513c:	2205      	movs	r2, #5
 801513e:	602a      	str	r2, [r5, #0]
 8015140:	2e00      	cmp	r6, #0
 8015142:	d1e5      	bne.n	8015110 <rmw_validate_full_topic_name+0xb0>
 8015144:	e7a6      	b.n	8015094 <rmw_validate_full_topic_name+0x34>
 8015146:	bf00      	nop
 8015148:	08019710 	.word	0x08019710

0801514c <rmw_validate_namespace_with_size>:
 801514c:	b340      	cbz	r0, 80151a0 <rmw_validate_namespace_with_size+0x54>
 801514e:	b570      	push	{r4, r5, r6, lr}
 8015150:	4614      	mov	r4, r2
 8015152:	b0c2      	sub	sp, #264	@ 0x108
 8015154:	b332      	cbz	r2, 80151a4 <rmw_validate_namespace_with_size+0x58>
 8015156:	2901      	cmp	r1, #1
 8015158:	460d      	mov	r5, r1
 801515a:	461e      	mov	r6, r3
 801515c:	d102      	bne.n	8015164 <rmw_validate_namespace_with_size+0x18>
 801515e:	7803      	ldrb	r3, [r0, #0]
 8015160:	2b2f      	cmp	r3, #47	@ 0x2f
 8015162:	d012      	beq.n	801518a <rmw_validate_namespace_with_size+0x3e>
 8015164:	aa01      	add	r2, sp, #4
 8015166:	4669      	mov	r1, sp
 8015168:	f7ff ff7a 	bl	8015060 <rmw_validate_full_topic_name>
 801516c:	b978      	cbnz	r0, 801518e <rmw_validate_namespace_with_size+0x42>
 801516e:	9b00      	ldr	r3, [sp, #0]
 8015170:	b14b      	cbz	r3, 8015186 <rmw_validate_namespace_with_size+0x3a>
 8015172:	2b07      	cmp	r3, #7
 8015174:	d007      	beq.n	8015186 <rmw_validate_namespace_with_size+0x3a>
 8015176:	1e5a      	subs	r2, r3, #1
 8015178:	2a05      	cmp	r2, #5
 801517a:	d82b      	bhi.n	80151d4 <rmw_validate_namespace_with_size+0x88>
 801517c:	e8df f002 	tbb	[pc, r2]
 8015180:	1e212427 	.word	0x1e212427
 8015184:	141b      	.short	0x141b
 8015186:	2df5      	cmp	r5, #245	@ 0xf5
 8015188:	d803      	bhi.n	8015192 <rmw_validate_namespace_with_size+0x46>
 801518a:	2000      	movs	r0, #0
 801518c:	6020      	str	r0, [r4, #0]
 801518e:	b042      	add	sp, #264	@ 0x108
 8015190:	bd70      	pop	{r4, r5, r6, pc}
 8015192:	2307      	movs	r3, #7
 8015194:	6023      	str	r3, [r4, #0]
 8015196:	2e00      	cmp	r6, #0
 8015198:	d0f9      	beq.n	801518e <rmw_validate_namespace_with_size+0x42>
 801519a:	23f4      	movs	r3, #244	@ 0xf4
 801519c:	6033      	str	r3, [r6, #0]
 801519e:	e7f6      	b.n	801518e <rmw_validate_namespace_with_size+0x42>
 80151a0:	200b      	movs	r0, #11
 80151a2:	4770      	bx	lr
 80151a4:	200b      	movs	r0, #11
 80151a6:	e7f2      	b.n	801518e <rmw_validate_namespace_with_size+0x42>
 80151a8:	2306      	movs	r3, #6
 80151aa:	6023      	str	r3, [r4, #0]
 80151ac:	2e00      	cmp	r6, #0
 80151ae:	d0ee      	beq.n	801518e <rmw_validate_namespace_with_size+0x42>
 80151b0:	9b01      	ldr	r3, [sp, #4]
 80151b2:	6033      	str	r3, [r6, #0]
 80151b4:	e7eb      	b.n	801518e <rmw_validate_namespace_with_size+0x42>
 80151b6:	2305      	movs	r3, #5
 80151b8:	6023      	str	r3, [r4, #0]
 80151ba:	e7f7      	b.n	80151ac <rmw_validate_namespace_with_size+0x60>
 80151bc:	2304      	movs	r3, #4
 80151be:	6023      	str	r3, [r4, #0]
 80151c0:	e7f4      	b.n	80151ac <rmw_validate_namespace_with_size+0x60>
 80151c2:	2303      	movs	r3, #3
 80151c4:	6023      	str	r3, [r4, #0]
 80151c6:	e7f1      	b.n	80151ac <rmw_validate_namespace_with_size+0x60>
 80151c8:	2302      	movs	r3, #2
 80151ca:	6023      	str	r3, [r4, #0]
 80151cc:	e7ee      	b.n	80151ac <rmw_validate_namespace_with_size+0x60>
 80151ce:	2301      	movs	r3, #1
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	e7eb      	b.n	80151ac <rmw_validate_namespace_with_size+0x60>
 80151d4:	4a03      	ldr	r2, [pc, #12]	@ (80151e4 <rmw_validate_namespace_with_size+0x98>)
 80151d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80151da:	a802      	add	r0, sp, #8
 80151dc:	f7ff fd0e 	bl	8014bfc <rcutils_snprintf>
 80151e0:	2001      	movs	r0, #1
 80151e2:	e7d4      	b.n	801518e <rmw_validate_namespace_with_size+0x42>
 80151e4:	08019318 	.word	0x08019318

080151e8 <rmw_validate_namespace>:
 80151e8:	b168      	cbz	r0, 8015206 <rmw_validate_namespace+0x1e>
 80151ea:	b570      	push	{r4, r5, r6, lr}
 80151ec:	460d      	mov	r5, r1
 80151ee:	4616      	mov	r6, r2
 80151f0:	4604      	mov	r4, r0
 80151f2:	f7eb f81f 	bl	8000234 <strlen>
 80151f6:	4633      	mov	r3, r6
 80151f8:	4601      	mov	r1, r0
 80151fa:	462a      	mov	r2, r5
 80151fc:	4620      	mov	r0, r4
 80151fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015202:	f7ff bfa3 	b.w	801514c <rmw_validate_namespace_with_size>
 8015206:	200b      	movs	r0, #11
 8015208:	4770      	bx	lr
 801520a:	bf00      	nop

0801520c <rmw_namespace_validation_result_string>:
 801520c:	2807      	cmp	r0, #7
 801520e:	bf9a      	itte	ls
 8015210:	4b02      	ldrls	r3, [pc, #8]	@ (801521c <rmw_namespace_validation_result_string+0x10>)
 8015212:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015216:	4802      	ldrhi	r0, [pc, #8]	@ (8015220 <rmw_namespace_validation_result_string+0x14>)
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	08019510 	.word	0x08019510
 8015220:	08019368 	.word	0x08019368

08015224 <rmw_validate_node_name>:
 8015224:	2800      	cmp	r0, #0
 8015226:	d03b      	beq.n	80152a0 <rmw_validate_node_name+0x7c>
 8015228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801522c:	460d      	mov	r5, r1
 801522e:	2900      	cmp	r1, #0
 8015230:	d038      	beq.n	80152a4 <rmw_validate_node_name+0x80>
 8015232:	4616      	mov	r6, r2
 8015234:	4604      	mov	r4, r0
 8015236:	f7ea fffd 	bl	8000234 <strlen>
 801523a:	b1e0      	cbz	r0, 8015276 <rmw_validate_node_name+0x52>
 801523c:	1e63      	subs	r3, r4, #1
 801523e:	eb03 0800 	add.w	r8, r3, r0
 8015242:	f1c4 0101 	rsb	r1, r4, #1
 8015246:	18cf      	adds	r7, r1, r3
 8015248:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801524c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015250:	f02e 0c20 	bic.w	ip, lr, #32
 8015254:	2a09      	cmp	r2, #9
 8015256:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801525a:	d914      	bls.n	8015286 <rmw_validate_node_name+0x62>
 801525c:	f1bc 0f19 	cmp.w	ip, #25
 8015260:	d911      	bls.n	8015286 <rmw_validate_node_name+0x62>
 8015262:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015266:	d00e      	beq.n	8015286 <rmw_validate_node_name+0x62>
 8015268:	2302      	movs	r3, #2
 801526a:	602b      	str	r3, [r5, #0]
 801526c:	b106      	cbz	r6, 8015270 <rmw_validate_node_name+0x4c>
 801526e:	6037      	str	r7, [r6, #0]
 8015270:	2000      	movs	r0, #0
 8015272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015276:	2301      	movs	r3, #1
 8015278:	602b      	str	r3, [r5, #0]
 801527a:	2e00      	cmp	r6, #0
 801527c:	d0f8      	beq.n	8015270 <rmw_validate_node_name+0x4c>
 801527e:	2000      	movs	r0, #0
 8015280:	6030      	str	r0, [r6, #0]
 8015282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015286:	4543      	cmp	r3, r8
 8015288:	d1dd      	bne.n	8015246 <rmw_validate_node_name+0x22>
 801528a:	7822      	ldrb	r2, [r4, #0]
 801528c:	4b0d      	ldr	r3, [pc, #52]	@ (80152c4 <rmw_validate_node_name+0xa0>)
 801528e:	5cd3      	ldrb	r3, [r2, r3]
 8015290:	f013 0304 	ands.w	r3, r3, #4
 8015294:	d110      	bne.n	80152b8 <rmw_validate_node_name+0x94>
 8015296:	28ff      	cmp	r0, #255	@ 0xff
 8015298:	d806      	bhi.n	80152a8 <rmw_validate_node_name+0x84>
 801529a:	602b      	str	r3, [r5, #0]
 801529c:	4618      	mov	r0, r3
 801529e:	e7e8      	b.n	8015272 <rmw_validate_node_name+0x4e>
 80152a0:	200b      	movs	r0, #11
 80152a2:	4770      	bx	lr
 80152a4:	200b      	movs	r0, #11
 80152a6:	e7e4      	b.n	8015272 <rmw_validate_node_name+0x4e>
 80152a8:	2204      	movs	r2, #4
 80152aa:	602a      	str	r2, [r5, #0]
 80152ac:	2e00      	cmp	r6, #0
 80152ae:	d0df      	beq.n	8015270 <rmw_validate_node_name+0x4c>
 80152b0:	22fe      	movs	r2, #254	@ 0xfe
 80152b2:	6032      	str	r2, [r6, #0]
 80152b4:	4618      	mov	r0, r3
 80152b6:	e7dc      	b.n	8015272 <rmw_validate_node_name+0x4e>
 80152b8:	2303      	movs	r3, #3
 80152ba:	602b      	str	r3, [r5, #0]
 80152bc:	2e00      	cmp	r6, #0
 80152be:	d1de      	bne.n	801527e <rmw_validate_node_name+0x5a>
 80152c0:	e7d6      	b.n	8015270 <rmw_validate_node_name+0x4c>
 80152c2:	bf00      	nop
 80152c4:	08019710 	.word	0x08019710

080152c8 <rmw_node_name_validation_result_string>:
 80152c8:	2804      	cmp	r0, #4
 80152ca:	bf9a      	itte	ls
 80152cc:	4b02      	ldrls	r3, [pc, #8]	@ (80152d8 <rmw_node_name_validation_result_string+0x10>)
 80152ce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80152d2:	4802      	ldrhi	r0, [pc, #8]	@ (80152dc <rmw_node_name_validation_result_string+0x14>)
 80152d4:	4770      	bx	lr
 80152d6:	bf00      	nop
 80152d8:	0801961c 	.word	0x0801961c
 80152dc:	08019530 	.word	0x08019530

080152e0 <on_status>:
 80152e0:	b082      	sub	sp, #8
 80152e2:	b002      	add	sp, #8
 80152e4:	4770      	bx	lr
 80152e6:	bf00      	nop

080152e8 <on_topic>:
 80152e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152ec:	4a22      	ldr	r2, [pc, #136]	@ (8015378 <on_topic+0x90>)
 80152ee:	b094      	sub	sp, #80	@ 0x50
 80152f0:	6812      	ldr	r2, [r2, #0]
 80152f2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80152f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80152f8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80152fc:	b3c2      	cbz	r2, 8015370 <on_topic+0x88>
 80152fe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015302:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015306:	e001      	b.n	801530c <on_topic+0x24>
 8015308:	6852      	ldr	r2, [r2, #4]
 801530a:	b38a      	cbz	r2, 8015370 <on_topic+0x88>
 801530c:	6894      	ldr	r4, [r2, #8]
 801530e:	8aa3      	ldrh	r3, [r4, #20]
 8015310:	428b      	cmp	r3, r1
 8015312:	d1f9      	bne.n	8015308 <on_topic+0x20>
 8015314:	7da3      	ldrb	r3, [r4, #22]
 8015316:	4283      	cmp	r3, r0
 8015318:	d1f6      	bne.n	8015308 <on_topic+0x20>
 801531a:	2248      	movs	r2, #72	@ 0x48
 801531c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015320:	4668      	mov	r0, sp
 8015322:	f002 fc82 	bl	8017c2a <memcpy>
 8015326:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801532a:	cb0c      	ldmia	r3, {r2, r3}
 801532c:	4620      	mov	r0, r4
 801532e:	f7f7 fec7 	bl	800d0c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015332:	4607      	mov	r7, r0
 8015334:	b1e0      	cbz	r0, 8015370 <on_topic+0x88>
 8015336:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801533a:	4632      	mov	r2, r6
 801533c:	4628      	mov	r0, r5
 801533e:	f108 0110 	add.w	r1, r8, #16
 8015342:	f000 fdd3 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 8015346:	b930      	cbnz	r0, 8015356 <on_topic+0x6e>
 8015348:	480c      	ldr	r0, [pc, #48]	@ (801537c <on_topic+0x94>)
 801534a:	4639      	mov	r1, r7
 801534c:	b014      	add	sp, #80	@ 0x50
 801534e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015352:	f000 b8bd 	b.w	80154d0 <put_memory>
 8015356:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801535a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801535e:	f7f7 fcad 	bl	800ccbc <rmw_uros_epoch_nanos>
 8015362:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015366:	2305      	movs	r3, #5
 8015368:	e942 0102 	strd	r0, r1, [r2, #-8]
 801536c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015370:	b014      	add	sp, #80	@ 0x50
 8015372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015376:	bf00      	nop
 8015378:	2000cabc 	.word	0x2000cabc
 801537c:	2000caac 	.word	0x2000caac

08015380 <on_request>:
 8015380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015384:	4823      	ldr	r0, [pc, #140]	@ (8015414 <on_request+0x94>)
 8015386:	b094      	sub	sp, #80	@ 0x50
 8015388:	6800      	ldr	r0, [r0, #0]
 801538a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801538c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015390:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015392:	2800      	cmp	r0, #0
 8015394:	d03b      	beq.n	801540e <on_request+0x8e>
 8015396:	461d      	mov	r5, r3
 8015398:	e001      	b.n	801539e <on_request+0x1e>
 801539a:	6840      	ldr	r0, [r0, #4]
 801539c:	b3b8      	cbz	r0, 801540e <on_request+0x8e>
 801539e:	6884      	ldr	r4, [r0, #8]
 80153a0:	8b21      	ldrh	r1, [r4, #24]
 80153a2:	4291      	cmp	r1, r2
 80153a4:	d1f9      	bne.n	801539a <on_request+0x1a>
 80153a6:	2248      	movs	r2, #72	@ 0x48
 80153a8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80153ac:	4668      	mov	r0, sp
 80153ae:	f002 fc3c 	bl	8017c2a <memcpy>
 80153b2:	f104 0320 	add.w	r3, r4, #32
 80153b6:	cb0c      	ldmia	r3, {r2, r3}
 80153b8:	4620      	mov	r0, r4
 80153ba:	f7f7 fe81 	bl	800d0c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80153be:	4680      	mov	r8, r0
 80153c0:	b328      	cbz	r0, 801540e <on_request+0x8e>
 80153c2:	4638      	mov	r0, r7
 80153c4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80153c8:	4632      	mov	r2, r6
 80153ca:	f107 0110 	add.w	r1, r7, #16
 80153ce:	f000 fd8d 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 80153d2:	b930      	cbnz	r0, 80153e2 <on_request+0x62>
 80153d4:	4810      	ldr	r0, [pc, #64]	@ (8015418 <on_request+0x98>)
 80153d6:	4641      	mov	r1, r8
 80153d8:	b014      	add	sp, #80	@ 0x50
 80153da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153de:	f000 b877 	b.w	80154d0 <put_memory>
 80153e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153e4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80153e8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80153ec:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80153f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80153f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80153fc:	f7f7 fc5e 	bl	800ccbc <rmw_uros_epoch_nanos>
 8015400:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015404:	2303      	movs	r3, #3
 8015406:	e942 0102 	strd	r0, r1, [r2, #-8]
 801540a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801540e:	b014      	add	sp, #80	@ 0x50
 8015410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015414:	2000ca8c 	.word	0x2000ca8c
 8015418:	2000caac 	.word	0x2000caac

0801541c <on_reply>:
 801541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015420:	4821      	ldr	r0, [pc, #132]	@ (80154a8 <on_reply+0x8c>)
 8015422:	b094      	sub	sp, #80	@ 0x50
 8015424:	6800      	ldr	r0, [r0, #0]
 8015426:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015428:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801542c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801542e:	b3b8      	cbz	r0, 80154a0 <on_reply+0x84>
 8015430:	461d      	mov	r5, r3
 8015432:	e001      	b.n	8015438 <on_reply+0x1c>
 8015434:	6840      	ldr	r0, [r0, #4]
 8015436:	b398      	cbz	r0, 80154a0 <on_reply+0x84>
 8015438:	6884      	ldr	r4, [r0, #8]
 801543a:	8b21      	ldrh	r1, [r4, #24]
 801543c:	4291      	cmp	r1, r2
 801543e:	d1f9      	bne.n	8015434 <on_reply+0x18>
 8015440:	2248      	movs	r2, #72	@ 0x48
 8015442:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015446:	4668      	mov	r0, sp
 8015448:	f002 fbef 	bl	8017c2a <memcpy>
 801544c:	f104 0320 	add.w	r3, r4, #32
 8015450:	cb0c      	ldmia	r3, {r2, r3}
 8015452:	4620      	mov	r0, r4
 8015454:	f7f7 fe34 	bl	800d0c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015458:	4680      	mov	r8, r0
 801545a:	b308      	cbz	r0, 80154a0 <on_reply+0x84>
 801545c:	4638      	mov	r0, r7
 801545e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015462:	4632      	mov	r2, r6
 8015464:	f107 0110 	add.w	r1, r7, #16
 8015468:	f000 fd40 	bl	8015eec <ucdr_deserialize_array_uint8_t>
 801546c:	b930      	cbnz	r0, 801547c <on_reply+0x60>
 801546e:	480f      	ldr	r0, [pc, #60]	@ (80154ac <on_reply+0x90>)
 8015470:	4641      	mov	r1, r8
 8015472:	b014      	add	sp, #80	@ 0x50
 8015474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015478:	f000 b82a 	b.w	80154d0 <put_memory>
 801547c:	2200      	movs	r2, #0
 801547e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015482:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015486:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801548a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801548e:	f7f7 fc15 	bl	800ccbc <rmw_uros_epoch_nanos>
 8015492:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015496:	2304      	movs	r3, #4
 8015498:	e942 0102 	strd	r0, r1, [r2, #-8]
 801549c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80154a0:	b014      	add	sp, #80	@ 0x50
 80154a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154a6:	bf00      	nop
 80154a8:	2000819c 	.word	0x2000819c
 80154ac:	2000caac 	.word	0x2000caac

080154b0 <get_memory>:
 80154b0:	4603      	mov	r3, r0
 80154b2:	6840      	ldr	r0, [r0, #4]
 80154b4:	b158      	cbz	r0, 80154ce <get_memory+0x1e>
 80154b6:	6842      	ldr	r2, [r0, #4]
 80154b8:	605a      	str	r2, [r3, #4]
 80154ba:	b10a      	cbz	r2, 80154c0 <get_memory+0x10>
 80154bc:	2100      	movs	r1, #0
 80154be:	6011      	str	r1, [r2, #0]
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	6042      	str	r2, [r0, #4]
 80154c4:	b102      	cbz	r2, 80154c8 <get_memory+0x18>
 80154c6:	6010      	str	r0, [r2, #0]
 80154c8:	2200      	movs	r2, #0
 80154ca:	6002      	str	r2, [r0, #0]
 80154cc:	6018      	str	r0, [r3, #0]
 80154ce:	4770      	bx	lr

080154d0 <put_memory>:
 80154d0:	680b      	ldr	r3, [r1, #0]
 80154d2:	b10b      	cbz	r3, 80154d8 <put_memory+0x8>
 80154d4:	684a      	ldr	r2, [r1, #4]
 80154d6:	605a      	str	r2, [r3, #4]
 80154d8:	684a      	ldr	r2, [r1, #4]
 80154da:	b102      	cbz	r2, 80154de <put_memory+0xe>
 80154dc:	6013      	str	r3, [r2, #0]
 80154de:	6803      	ldr	r3, [r0, #0]
 80154e0:	428b      	cmp	r3, r1
 80154e2:	6843      	ldr	r3, [r0, #4]
 80154e4:	bf08      	it	eq
 80154e6:	6002      	streq	r2, [r0, #0]
 80154e8:	604b      	str	r3, [r1, #4]
 80154ea:	b103      	cbz	r3, 80154ee <put_memory+0x1e>
 80154ec:	6019      	str	r1, [r3, #0]
 80154ee:	2300      	movs	r3, #0
 80154f0:	600b      	str	r3, [r1, #0]
 80154f2:	6041      	str	r1, [r0, #4]
 80154f4:	4770      	bx	lr
 80154f6:	bf00      	nop

080154f8 <rmw_destroy_client>:
 80154f8:	b570      	push	{r4, r5, r6, lr}
 80154fa:	b128      	cbz	r0, 8015508 <rmw_destroy_client+0x10>
 80154fc:	4604      	mov	r4, r0
 80154fe:	6800      	ldr	r0, [r0, #0]
 8015500:	460d      	mov	r5, r1
 8015502:	f7f7 ff53 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 8015506:	b910      	cbnz	r0, 801550e <rmw_destroy_client+0x16>
 8015508:	2401      	movs	r4, #1
 801550a:	4620      	mov	r0, r4
 801550c:	bd70      	pop	{r4, r5, r6, pc}
 801550e:	6863      	ldr	r3, [r4, #4]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d0f9      	beq.n	8015508 <rmw_destroy_client+0x10>
 8015514:	2d00      	cmp	r5, #0
 8015516:	d0f7      	beq.n	8015508 <rmw_destroy_client+0x10>
 8015518:	6828      	ldr	r0, [r5, #0]
 801551a:	f7f7 ff47 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 801551e:	2800      	cmp	r0, #0
 8015520:	d0f2      	beq.n	8015508 <rmw_destroy_client+0x10>
 8015522:	686e      	ldr	r6, [r5, #4]
 8015524:	2e00      	cmp	r6, #0
 8015526:	d0ef      	beq.n	8015508 <rmw_destroy_client+0x10>
 8015528:	6864      	ldr	r4, [r4, #4]
 801552a:	6932      	ldr	r2, [r6, #16]
 801552c:	6920      	ldr	r0, [r4, #16]
 801552e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015532:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015536:	6819      	ldr	r1, [r3, #0]
 8015538:	f7f9 fa98 	bl	800ea6c <uxr_buffer_cancel_data>
 801553c:	4602      	mov	r2, r0
 801553e:	6920      	ldr	r0, [r4, #16]
 8015540:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015544:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015548:	f7f7 feb0 	bl	800d2ac <run_xrce_session>
 801554c:	6920      	ldr	r0, [r4, #16]
 801554e:	6932      	ldr	r2, [r6, #16]
 8015550:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015554:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015558:	6819      	ldr	r1, [r3, #0]
 801555a:	f7f9 f83b 	bl	800e5d4 <uxr_buffer_delete_entity>
 801555e:	4602      	mov	r2, r0
 8015560:	6920      	ldr	r0, [r4, #16]
 8015562:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015566:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801556a:	f7f7 fe9f 	bl	800d2ac <run_xrce_session>
 801556e:	2800      	cmp	r0, #0
 8015570:	4628      	mov	r0, r5
 8015572:	bf14      	ite	ne
 8015574:	2400      	movne	r4, #0
 8015576:	2402      	moveq	r4, #2
 8015578:	f7f7 fd80 	bl	800d07c <rmw_uxrce_fini_client_memory>
 801557c:	e7c5      	b.n	801550a <rmw_destroy_client+0x12>
 801557e:	bf00      	nop

08015580 <rmw_get_implementation_identifier>:
 8015580:	4b01      	ldr	r3, [pc, #4]	@ (8015588 <rmw_get_implementation_identifier+0x8>)
 8015582:	6818      	ldr	r0, [r3, #0]
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop
 8015588:	08019648 	.word	0x08019648

0801558c <create_topic>:
 801558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015590:	4605      	mov	r5, r0
 8015592:	b084      	sub	sp, #16
 8015594:	4822      	ldr	r0, [pc, #136]	@ (8015620 <create_topic+0x94>)
 8015596:	460f      	mov	r7, r1
 8015598:	4616      	mov	r6, r2
 801559a:	f7ff ff89 	bl	80154b0 <get_memory>
 801559e:	4604      	mov	r4, r0
 80155a0:	2800      	cmp	r0, #0
 80155a2:	d039      	beq.n	8015618 <create_topic+0x8c>
 80155a4:	692b      	ldr	r3, [r5, #16]
 80155a6:	6884      	ldr	r4, [r0, #8]
 80155a8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015628 <create_topic+0x9c>
 80155ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80155b0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80155b4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80155b8:	1c42      	adds	r2, r0, #1
 80155ba:	2102      	movs	r1, #2
 80155bc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80155c0:	f7f9 fa24 	bl	800ea0c <uxr_object_id>
 80155c4:	223c      	movs	r2, #60	@ 0x3c
 80155c6:	6120      	str	r0, [r4, #16]
 80155c8:	4641      	mov	r1, r8
 80155ca:	4638      	mov	r0, r7
 80155cc:	f7f7 fed4 	bl	800d378 <generate_topic_name>
 80155d0:	b1f0      	cbz	r0, 8015610 <create_topic+0x84>
 80155d2:	4f14      	ldr	r7, [pc, #80]	@ (8015624 <create_topic+0x98>)
 80155d4:	4630      	mov	r0, r6
 80155d6:	2264      	movs	r2, #100	@ 0x64
 80155d8:	4639      	mov	r1, r7
 80155da:	f7f7 fe9d 	bl	800d318 <generate_type_name>
 80155de:	b1b8      	cbz	r0, 8015610 <create_topic+0x84>
 80155e0:	6928      	ldr	r0, [r5, #16]
 80155e2:	2306      	movs	r3, #6
 80155e4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80155e8:	f8cd 8000 	str.w	r8, [sp]
 80155ec:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80155f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80155f4:	6811      	ldr	r1, [r2, #0]
 80155f6:	696b      	ldr	r3, [r5, #20]
 80155f8:	6922      	ldr	r2, [r4, #16]
 80155fa:	f7f9 f869 	bl	800e6d0 <uxr_buffer_create_topic_bin>
 80155fe:	4602      	mov	r2, r0
 8015600:	6928      	ldr	r0, [r5, #16]
 8015602:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015606:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801560a:	f7f7 fe4f 	bl	800d2ac <run_xrce_session>
 801560e:	b918      	cbnz	r0, 8015618 <create_topic+0x8c>
 8015610:	4620      	mov	r0, r4
 8015612:	f7f7 fd49 	bl	800d0a8 <rmw_uxrce_fini_topic_memory>
 8015616:	2400      	movs	r4, #0
 8015618:	4620      	mov	r0, r4
 801561a:	b004      	add	sp, #16
 801561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015620:	2000cacc 	.word	0x2000cacc
 8015624:	2000cb4c 	.word	0x2000cb4c
 8015628:	2000cb10 	.word	0x2000cb10

0801562c <destroy_topic>:
 801562c:	b538      	push	{r3, r4, r5, lr}
 801562e:	6985      	ldr	r5, [r0, #24]
 8015630:	b1d5      	cbz	r5, 8015668 <destroy_topic+0x3c>
 8015632:	4604      	mov	r4, r0
 8015634:	6928      	ldr	r0, [r5, #16]
 8015636:	6922      	ldr	r2, [r4, #16]
 8015638:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801563c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015640:	6819      	ldr	r1, [r3, #0]
 8015642:	f7f8 ffc7 	bl	800e5d4 <uxr_buffer_delete_entity>
 8015646:	4602      	mov	r2, r0
 8015648:	6928      	ldr	r0, [r5, #16]
 801564a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801564e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015652:	f7f7 fe2b 	bl	800d2ac <run_xrce_session>
 8015656:	2800      	cmp	r0, #0
 8015658:	4620      	mov	r0, r4
 801565a:	bf14      	ite	ne
 801565c:	2400      	movne	r4, #0
 801565e:	2402      	moveq	r4, #2
 8015660:	f7f7 fd22 	bl	800d0a8 <rmw_uxrce_fini_topic_memory>
 8015664:	4620      	mov	r0, r4
 8015666:	bd38      	pop	{r3, r4, r5, pc}
 8015668:	2401      	movs	r4, #1
 801566a:	4620      	mov	r0, r4
 801566c:	bd38      	pop	{r3, r4, r5, pc}
 801566e:	bf00      	nop

08015670 <rmw_send_request>:
 8015670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015674:	4604      	mov	r4, r0
 8015676:	6800      	ldr	r0, [r0, #0]
 8015678:	b08b      	sub	sp, #44	@ 0x2c
 801567a:	460e      	mov	r6, r1
 801567c:	4615      	mov	r5, r2
 801567e:	b128      	cbz	r0, 801568c <rmw_send_request+0x1c>
 8015680:	4b21      	ldr	r3, [pc, #132]	@ (8015708 <rmw_send_request+0x98>)
 8015682:	6819      	ldr	r1, [r3, #0]
 8015684:	f7ea fdcc 	bl	8000220 <strcmp>
 8015688:	2800      	cmp	r0, #0
 801568a:	d139      	bne.n	8015700 <rmw_send_request+0x90>
 801568c:	6864      	ldr	r4, [r4, #4]
 801568e:	6963      	ldr	r3, [r4, #20]
 8015690:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015694:	689b      	ldr	r3, [r3, #8]
 8015696:	4798      	blx	r3
 8015698:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801569c:	4630      	mov	r0, r6
 801569e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80156a2:	4798      	blx	r3
 80156a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80156a8:	9000      	str	r0, [sp, #0]
 80156aa:	6922      	ldr	r2, [r4, #16]
 80156ac:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80156ae:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80156b2:	ab02      	add	r3, sp, #8
 80156b4:	f7fb fa82 	bl	8010bbc <uxr_prepare_output_stream>
 80156b8:	2700      	movs	r7, #0
 80156ba:	6028      	str	r0, [r5, #0]
 80156bc:	606f      	str	r7, [r5, #4]
 80156be:	b198      	cbz	r0, 80156e8 <rmw_send_request+0x78>
 80156c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80156c4:	a902      	add	r1, sp, #8
 80156c6:	4630      	mov	r0, r6
 80156c8:	4798      	blx	r3
 80156ca:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80156ce:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80156d2:	2b01      	cmp	r3, #1
 80156d4:	d00c      	beq.n	80156f0 <rmw_send_request+0x80>
 80156d6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80156d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156dc:	f7f9 ff9c 	bl	800f618 <uxr_run_session_until_confirm_delivery>
 80156e0:	4638      	mov	r0, r7
 80156e2:	b00b      	add	sp, #44	@ 0x2c
 80156e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156e8:	2001      	movs	r0, #1
 80156ea:	b00b      	add	sp, #44	@ 0x2c
 80156ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156f4:	f7f9 fbd0 	bl	800ee98 <uxr_flash_output_streams>
 80156f8:	4638      	mov	r0, r7
 80156fa:	b00b      	add	sp, #44	@ 0x2c
 80156fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015700:	200c      	movs	r0, #12
 8015702:	b00b      	add	sp, #44	@ 0x2c
 8015704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015708:	08019648 	.word	0x08019648

0801570c <rmw_take_request>:
 801570c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015710:	4605      	mov	r5, r0
 8015712:	6800      	ldr	r0, [r0, #0]
 8015714:	b089      	sub	sp, #36	@ 0x24
 8015716:	460c      	mov	r4, r1
 8015718:	4690      	mov	r8, r2
 801571a:	461e      	mov	r6, r3
 801571c:	b128      	cbz	r0, 801572a <rmw_take_request+0x1e>
 801571e:	4b28      	ldr	r3, [pc, #160]	@ (80157c0 <rmw_take_request+0xb4>)
 8015720:	6819      	ldr	r1, [r3, #0]
 8015722:	f7ea fd7d 	bl	8000220 <strcmp>
 8015726:	2800      	cmp	r0, #0
 8015728:	d146      	bne.n	80157b8 <rmw_take_request+0xac>
 801572a:	b10e      	cbz	r6, 8015730 <rmw_take_request+0x24>
 801572c:	2300      	movs	r3, #0
 801572e:	7033      	strb	r3, [r6, #0]
 8015730:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015734:	f7f7 fd3c 	bl	800d1b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015738:	4648      	mov	r0, r9
 801573a:	f7f7 fd11 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 801573e:	4607      	mov	r7, r0
 8015740:	b3b0      	cbz	r0, 80157b0 <rmw_take_request+0xa4>
 8015742:	6885      	ldr	r5, [r0, #8]
 8015744:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015748:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801574c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015750:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015754:	7423      	strb	r3, [r4, #16]
 8015756:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801575a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801575e:	74e2      	strb	r2, [r4, #19]
 8015760:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015764:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015768:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801576c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015770:	61e1      	str	r1, [r4, #28]
 8015772:	6162      	str	r2, [r4, #20]
 8015774:	61a3      	str	r3, [r4, #24]
 8015776:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801577a:	689b      	ldr	r3, [r3, #8]
 801577c:	4798      	blx	r3
 801577e:	6844      	ldr	r4, [r0, #4]
 8015780:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8015784:	f105 0110 	add.w	r1, r5, #16
 8015788:	4668      	mov	r0, sp
 801578a:	f7f8 feb3 	bl	800e4f4 <ucdr_init_buffer>
 801578e:	68e3      	ldr	r3, [r4, #12]
 8015790:	4641      	mov	r1, r8
 8015792:	4668      	mov	r0, sp
 8015794:	4798      	blx	r3
 8015796:	4639      	mov	r1, r7
 8015798:	4604      	mov	r4, r0
 801579a:	480a      	ldr	r0, [pc, #40]	@ (80157c4 <rmw_take_request+0xb8>)
 801579c:	f7ff fe98 	bl	80154d0 <put_memory>
 80157a0:	b106      	cbz	r6, 80157a4 <rmw_take_request+0x98>
 80157a2:	7034      	strb	r4, [r6, #0]
 80157a4:	f084 0001 	eor.w	r0, r4, #1
 80157a8:	b2c0      	uxtb	r0, r0
 80157aa:	b009      	add	sp, #36	@ 0x24
 80157ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157b0:	2001      	movs	r0, #1
 80157b2:	b009      	add	sp, #36	@ 0x24
 80157b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157b8:	200c      	movs	r0, #12
 80157ba:	b009      	add	sp, #36	@ 0x24
 80157bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157c0:	08019648 	.word	0x08019648
 80157c4:	2000caac 	.word	0x2000caac

080157c8 <rmw_send_response>:
 80157c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ca:	4605      	mov	r5, r0
 80157cc:	6800      	ldr	r0, [r0, #0]
 80157ce:	b091      	sub	sp, #68	@ 0x44
 80157d0:	460c      	mov	r4, r1
 80157d2:	4616      	mov	r6, r2
 80157d4:	b128      	cbz	r0, 80157e2 <rmw_send_response+0x1a>
 80157d6:	4b29      	ldr	r3, [pc, #164]	@ (801587c <rmw_send_response+0xb4>)
 80157d8:	6819      	ldr	r1, [r3, #0]
 80157da:	f7ea fd21 	bl	8000220 <strcmp>
 80157de:	2800      	cmp	r0, #0
 80157e0:	d141      	bne.n	8015866 <rmw_send_response+0x9e>
 80157e2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80157e6:	9306      	str	r3, [sp, #24]
 80157e8:	4623      	mov	r3, r4
 80157ea:	9207      	str	r2, [sp, #28]
 80157ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157f0:	686d      	ldr	r5, [r5, #4]
 80157f2:	789b      	ldrb	r3, [r3, #2]
 80157f4:	68a1      	ldr	r1, [r4, #8]
 80157f6:	f88d 2017 	strb.w	r2, [sp, #23]
 80157fa:	f88d 3016 	strb.w	r3, [sp, #22]
 80157fe:	68e2      	ldr	r2, [r4, #12]
 8015800:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015804:	6860      	ldr	r0, [r4, #4]
 8015806:	f8ad 3014 	strh.w	r3, [sp, #20]
 801580a:	ab02      	add	r3, sp, #8
 801580c:	c307      	stmia	r3!, {r0, r1, r2}
 801580e:	696b      	ldr	r3, [r5, #20]
 8015810:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015812:	68db      	ldr	r3, [r3, #12]
 8015814:	4798      	blx	r3
 8015816:	6844      	ldr	r4, [r0, #4]
 8015818:	4630      	mov	r0, r6
 801581a:	6923      	ldr	r3, [r4, #16]
 801581c:	4798      	blx	r3
 801581e:	f100 0318 	add.w	r3, r0, #24
 8015822:	6938      	ldr	r0, [r7, #16]
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	692a      	ldr	r2, [r5, #16]
 8015828:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801582a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801582e:	ab08      	add	r3, sp, #32
 8015830:	f7fb f9c4 	bl	8010bbc <uxr_prepare_output_stream>
 8015834:	b910      	cbnz	r0, 801583c <rmw_send_response+0x74>
 8015836:	2001      	movs	r0, #1
 8015838:	b011      	add	sp, #68	@ 0x44
 801583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801583c:	a902      	add	r1, sp, #8
 801583e:	a808      	add	r0, sp, #32
 8015840:	f7fc fa16 	bl	8011c70 <uxr_serialize_SampleIdentity>
 8015844:	68a3      	ldr	r3, [r4, #8]
 8015846:	a908      	add	r1, sp, #32
 8015848:	4630      	mov	r0, r6
 801584a:	4798      	blx	r3
 801584c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015850:	6938      	ldr	r0, [r7, #16]
 8015852:	2b01      	cmp	r3, #1
 8015854:	d00a      	beq.n	801586c <rmw_send_response+0xa4>
 8015856:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015858:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801585c:	f7f9 fedc 	bl	800f618 <uxr_run_session_until_confirm_delivery>
 8015860:	2000      	movs	r0, #0
 8015862:	b011      	add	sp, #68	@ 0x44
 8015864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015866:	200c      	movs	r0, #12
 8015868:	b011      	add	sp, #68	@ 0x44
 801586a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801586c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015870:	f7f9 fb12 	bl	800ee98 <uxr_flash_output_streams>
 8015874:	2000      	movs	r0, #0
 8015876:	b011      	add	sp, #68	@ 0x44
 8015878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801587a:	bf00      	nop
 801587c:	08019648 	.word	0x08019648

08015880 <rmw_take_response>:
 8015880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015884:	4604      	mov	r4, r0
 8015886:	6800      	ldr	r0, [r0, #0]
 8015888:	b088      	sub	sp, #32
 801588a:	4688      	mov	r8, r1
 801588c:	4617      	mov	r7, r2
 801588e:	461d      	mov	r5, r3
 8015890:	b120      	cbz	r0, 801589c <rmw_take_response+0x1c>
 8015892:	4b1e      	ldr	r3, [pc, #120]	@ (801590c <rmw_take_response+0x8c>)
 8015894:	6819      	ldr	r1, [r3, #0]
 8015896:	f7ea fcc3 	bl	8000220 <strcmp>
 801589a:	bb78      	cbnz	r0, 80158fc <rmw_take_response+0x7c>
 801589c:	b10d      	cbz	r5, 80158a2 <rmw_take_response+0x22>
 801589e:	2300      	movs	r3, #0
 80158a0:	702b      	strb	r3, [r5, #0]
 80158a2:	6864      	ldr	r4, [r4, #4]
 80158a4:	f7f7 fc84 	bl	800d1b0 <rmw_uxrce_clean_expired_static_input_buffer>
 80158a8:	4620      	mov	r0, r4
 80158aa:	f7f7 fc59 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 80158ae:	4606      	mov	r6, r0
 80158b0:	b340      	cbz	r0, 8015904 <rmw_take_response+0x84>
 80158b2:	6963      	ldr	r3, [r4, #20]
 80158b4:	6884      	ldr	r4, [r0, #8]
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80158bc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80158c0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80158c4:	4798      	blx	r3
 80158c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80158ca:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80158ce:	f104 0110 	add.w	r1, r4, #16
 80158d2:	4668      	mov	r0, sp
 80158d4:	f7f8 fe0e 	bl	800e4f4 <ucdr_init_buffer>
 80158d8:	4639      	mov	r1, r7
 80158da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80158de:	4668      	mov	r0, sp
 80158e0:	4798      	blx	r3
 80158e2:	4631      	mov	r1, r6
 80158e4:	4604      	mov	r4, r0
 80158e6:	480a      	ldr	r0, [pc, #40]	@ (8015910 <rmw_take_response+0x90>)
 80158e8:	f7ff fdf2 	bl	80154d0 <put_memory>
 80158ec:	b105      	cbz	r5, 80158f0 <rmw_take_response+0x70>
 80158ee:	702c      	strb	r4, [r5, #0]
 80158f0:	f084 0001 	eor.w	r0, r4, #1
 80158f4:	b2c0      	uxtb	r0, r0
 80158f6:	b008      	add	sp, #32
 80158f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158fc:	200c      	movs	r0, #12
 80158fe:	b008      	add	sp, #32
 8015900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015904:	2001      	movs	r0, #1
 8015906:	b008      	add	sp, #32
 8015908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801590c:	08019648 	.word	0x08019648
 8015910:	2000caac 	.word	0x2000caac

08015914 <rmw_take_with_info>:
 8015914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015916:	4604      	mov	r4, r0
 8015918:	6800      	ldr	r0, [r0, #0]
 801591a:	b089      	sub	sp, #36	@ 0x24
 801591c:	460f      	mov	r7, r1
 801591e:	4615      	mov	r5, r2
 8015920:	b128      	cbz	r0, 801592e <rmw_take_with_info+0x1a>
 8015922:	4b24      	ldr	r3, [pc, #144]	@ (80159b4 <rmw_take_with_info+0xa0>)
 8015924:	6819      	ldr	r1, [r3, #0]
 8015926:	f7ea fc7b 	bl	8000220 <strcmp>
 801592a:	2800      	cmp	r0, #0
 801592c:	d13e      	bne.n	80159ac <rmw_take_with_info+0x98>
 801592e:	b305      	cbz	r5, 8015972 <rmw_take_with_info+0x5e>
 8015930:	6864      	ldr	r4, [r4, #4]
 8015932:	2300      	movs	r3, #0
 8015934:	702b      	strb	r3, [r5, #0]
 8015936:	f7f7 fc3b 	bl	800d1b0 <rmw_uxrce_clean_expired_static_input_buffer>
 801593a:	4620      	mov	r0, r4
 801593c:	f7f7 fc10 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015940:	4606      	mov	r6, r0
 8015942:	b1f0      	cbz	r0, 8015982 <rmw_take_with_info+0x6e>
 8015944:	6881      	ldr	r1, [r0, #8]
 8015946:	4668      	mov	r0, sp
 8015948:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801594c:	3110      	adds	r1, #16
 801594e:	f7f8 fdd1 	bl	800e4f4 <ucdr_init_buffer>
 8015952:	69a3      	ldr	r3, [r4, #24]
 8015954:	4639      	mov	r1, r7
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	4668      	mov	r0, sp
 801595a:	4798      	blx	r3
 801595c:	4631      	mov	r1, r6
 801595e:	4604      	mov	r4, r0
 8015960:	4815      	ldr	r0, [pc, #84]	@ (80159b8 <rmw_take_with_info+0xa4>)
 8015962:	f7ff fdb5 	bl	80154d0 <put_memory>
 8015966:	702c      	strb	r4, [r5, #0]
 8015968:	f084 0001 	eor.w	r0, r4, #1
 801596c:	b2c0      	uxtb	r0, r0
 801596e:	b009      	add	sp, #36	@ 0x24
 8015970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015972:	6864      	ldr	r4, [r4, #4]
 8015974:	f7f7 fc1c 	bl	800d1b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015978:	4620      	mov	r0, r4
 801597a:	f7f7 fbf1 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 801597e:	4605      	mov	r5, r0
 8015980:	b910      	cbnz	r0, 8015988 <rmw_take_with_info+0x74>
 8015982:	2001      	movs	r0, #1
 8015984:	b009      	add	sp, #36	@ 0x24
 8015986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015988:	68a9      	ldr	r1, [r5, #8]
 801598a:	4668      	mov	r0, sp
 801598c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015990:	3110      	adds	r1, #16
 8015992:	f7f8 fdaf 	bl	800e4f4 <ucdr_init_buffer>
 8015996:	69a3      	ldr	r3, [r4, #24]
 8015998:	4639      	mov	r1, r7
 801599a:	68db      	ldr	r3, [r3, #12]
 801599c:	4668      	mov	r0, sp
 801599e:	4798      	blx	r3
 80159a0:	4629      	mov	r1, r5
 80159a2:	4604      	mov	r4, r0
 80159a4:	4804      	ldr	r0, [pc, #16]	@ (80159b8 <rmw_take_with_info+0xa4>)
 80159a6:	f7ff fd93 	bl	80154d0 <put_memory>
 80159aa:	e7dd      	b.n	8015968 <rmw_take_with_info+0x54>
 80159ac:	200c      	movs	r0, #12
 80159ae:	b009      	add	sp, #36	@ 0x24
 80159b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b2:	bf00      	nop
 80159b4:	08019648 	.word	0x08019648
 80159b8:	2000caac 	.word	0x2000caac

080159bc <rmw_wait>:
 80159bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159c0:	b089      	sub	sp, #36	@ 0x24
 80159c2:	4605      	mov	r5, r0
 80159c4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80159c6:	460e      	mov	r6, r1
 80159c8:	4698      	mov	r8, r3
 80159ca:	4691      	mov	r9, r2
 80159cc:	2a00      	cmp	r2, #0
 80159ce:	f000 810a 	beq.w	8015be6 <rmw_wait+0x22a>
 80159d2:	b16c      	cbz	r4, 80159f0 <rmw_wait+0x34>
 80159d4:	4bae      	ldr	r3, [pc, #696]	@ (8015c90 <rmw_wait+0x2d4>)
 80159d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159d8:	af04      	add	r7, sp, #16
 80159da:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80159de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80159e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80159e6:	f7ff faaf 	bl	8014f48 <rmw_time_equal>
 80159ea:	2800      	cmp	r0, #0
 80159ec:	f000 8127 	beq.w	8015c3e <rmw_wait+0x282>
 80159f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80159f4:	f7f7 fbdc 	bl	800d1b0 <rmw_uxrce_clean_expired_static_input_buffer>
 80159f8:	4ba6      	ldr	r3, [pc, #664]	@ (8015c94 <rmw_wait+0x2d8>)
 80159fa:	681c      	ldr	r4, [r3, #0]
 80159fc:	b14c      	cbz	r4, 8015a12 <rmw_wait+0x56>
 80159fe:	4623      	mov	r3, r4
 8015a00:	2100      	movs	r1, #0
 8015a02:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015a06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015a0a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d1f7      	bne.n	8015a02 <rmw_wait+0x46>
 8015a12:	f1b9 0f00 	cmp.w	r9, #0
 8015a16:	d011      	beq.n	8015a3c <rmw_wait+0x80>
 8015a18:	f8d9 1000 	ldr.w	r1, [r9]
 8015a1c:	b171      	cbz	r1, 8015a3c <rmw_wait+0x80>
 8015a1e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015a22:	2300      	movs	r3, #0
 8015a24:	2001      	movs	r0, #1
 8015a26:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015a2a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015a2c:	6912      	ldr	r2, [r2, #16]
 8015a2e:	3301      	adds	r3, #1
 8015a30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015a34:	4299      	cmp	r1, r3
 8015a36:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015a3a:	d1f4      	bne.n	8015a26 <rmw_wait+0x6a>
 8015a3c:	f1b8 0f00 	cmp.w	r8, #0
 8015a40:	d011      	beq.n	8015a66 <rmw_wait+0xaa>
 8015a42:	f8d8 1000 	ldr.w	r1, [r8]
 8015a46:	b171      	cbz	r1, 8015a66 <rmw_wait+0xaa>
 8015a48:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	2001      	movs	r0, #1
 8015a50:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015a54:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015a56:	6912      	ldr	r2, [r2, #16]
 8015a58:	3301      	adds	r3, #1
 8015a5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015a5e:	4299      	cmp	r1, r3
 8015a60:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015a64:	d1f4      	bne.n	8015a50 <rmw_wait+0x94>
 8015a66:	b185      	cbz	r5, 8015a8a <rmw_wait+0xce>
 8015a68:	6829      	ldr	r1, [r5, #0]
 8015a6a:	b171      	cbz	r1, 8015a8a <rmw_wait+0xce>
 8015a6c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015a70:	2300      	movs	r3, #0
 8015a72:	2001      	movs	r0, #1
 8015a74:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015a78:	6a12      	ldr	r2, [r2, #32]
 8015a7a:	6912      	ldr	r2, [r2, #16]
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015a82:	4299      	cmp	r1, r3
 8015a84:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015a88:	d1f4      	bne.n	8015a74 <rmw_wait+0xb8>
 8015a8a:	b34c      	cbz	r4, 8015ae0 <rmw_wait+0x124>
 8015a8c:	4622      	mov	r2, r4
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015a94:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015a98:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015a9c:	440b      	add	r3, r1
 8015a9e:	b2db      	uxtb	r3, r3
 8015aa0:	2a00      	cmp	r2, #0
 8015aa2:	d1f5      	bne.n	8015a90 <rmw_wait+0xd4>
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	f000 8084 	beq.w	8015bb2 <rmw_wait+0x1f6>
 8015aaa:	1c7a      	adds	r2, r7, #1
 8015aac:	d00d      	beq.n	8015aca <rmw_wait+0x10e>
 8015aae:	ee07 7a90 	vmov	s15, r7
 8015ab2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015ab6:	ee07 3a90 	vmov	s15, r3
 8015aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ac2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015ac6:	ee17 7a90 	vmov	r7, s15
 8015aca:	68a0      	ldr	r0, [r4, #8]
 8015acc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015ad0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	f040 8090 	bne.w	8015bfa <rmw_wait+0x23e>
 8015ada:	6864      	ldr	r4, [r4, #4]
 8015adc:	2c00      	cmp	r4, #0
 8015ade:	d1f4      	bne.n	8015aca <rmw_wait+0x10e>
 8015ae0:	f1b9 0f00 	cmp.w	r9, #0
 8015ae4:	f000 80bc 	beq.w	8015c60 <rmw_wait+0x2a4>
 8015ae8:	f8d9 7000 	ldr.w	r7, [r9]
 8015aec:	2f00      	cmp	r7, #0
 8015aee:	f000 808e 	beq.w	8015c0e <rmw_wait+0x252>
 8015af2:	2400      	movs	r4, #0
 8015af4:	4627      	mov	r7, r4
 8015af6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015afa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015afe:	f7f7 fb2f 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b02:	2800      	cmp	r0, #0
 8015b04:	d05f      	beq.n	8015bc6 <rmw_wait+0x20a>
 8015b06:	f8d9 3000 	ldr.w	r3, [r9]
 8015b0a:	3401      	adds	r4, #1
 8015b0c:	42a3      	cmp	r3, r4
 8015b0e:	f04f 0701 	mov.w	r7, #1
 8015b12:	d8f0      	bhi.n	8015af6 <rmw_wait+0x13a>
 8015b14:	f1b8 0f00 	cmp.w	r8, #0
 8015b18:	d012      	beq.n	8015b40 <rmw_wait+0x184>
 8015b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8015b1e:	b17b      	cbz	r3, 8015b40 <rmw_wait+0x184>
 8015b20:	2400      	movs	r4, #0
 8015b22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015b26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015b2a:	f7f7 fb19 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	d051      	beq.n	8015bd6 <rmw_wait+0x21a>
 8015b32:	f8d8 3000 	ldr.w	r3, [r8]
 8015b36:	3401      	adds	r4, #1
 8015b38:	42a3      	cmp	r3, r4
 8015b3a:	f04f 0701 	mov.w	r7, #1
 8015b3e:	d8f0      	bhi.n	8015b22 <rmw_wait+0x166>
 8015b40:	b1dd      	cbz	r5, 8015b7a <rmw_wait+0x1be>
 8015b42:	682b      	ldr	r3, [r5, #0]
 8015b44:	b1cb      	cbz	r3, 8015b7a <rmw_wait+0x1be>
 8015b46:	2400      	movs	r4, #0
 8015b48:	686b      	ldr	r3, [r5, #4]
 8015b4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015b4e:	f7f7 fb07 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b52:	b158      	cbz	r0, 8015b6c <rmw_wait+0x1b0>
 8015b54:	682b      	ldr	r3, [r5, #0]
 8015b56:	3401      	adds	r4, #1
 8015b58:	42a3      	cmp	r3, r4
 8015b5a:	d969      	bls.n	8015c30 <rmw_wait+0x274>
 8015b5c:	686b      	ldr	r3, [r5, #4]
 8015b5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015b62:	2701      	movs	r7, #1
 8015b64:	f7f7 fafc 	bl	800d160 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b68:	2800      	cmp	r0, #0
 8015b6a:	d1f3      	bne.n	8015b54 <rmw_wait+0x198>
 8015b6c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015b70:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015b74:	3401      	adds	r4, #1
 8015b76:	42a3      	cmp	r3, r4
 8015b78:	d8e6      	bhi.n	8015b48 <rmw_wait+0x18c>
 8015b7a:	b1a6      	cbz	r6, 8015ba6 <rmw_wait+0x1ea>
 8015b7c:	6834      	ldr	r4, [r6, #0]
 8015b7e:	b194      	cbz	r4, 8015ba6 <rmw_wait+0x1ea>
 8015b80:	2300      	movs	r3, #0
 8015b82:	461d      	mov	r5, r3
 8015b84:	e004      	b.n	8015b90 <rmw_wait+0x1d4>
 8015b86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015b8a:	3301      	adds	r3, #1
 8015b8c:	42a3      	cmp	r3, r4
 8015b8e:	d00a      	beq.n	8015ba6 <rmw_wait+0x1ea>
 8015b90:	6870      	ldr	r0, [r6, #4]
 8015b92:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015b96:	7c0a      	ldrb	r2, [r1, #16]
 8015b98:	2a00      	cmp	r2, #0
 8015b9a:	d0f4      	beq.n	8015b86 <rmw_wait+0x1ca>
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	42a3      	cmp	r3, r4
 8015ba0:	740d      	strb	r5, [r1, #16]
 8015ba2:	4617      	mov	r7, r2
 8015ba4:	d1f4      	bne.n	8015b90 <rmw_wait+0x1d4>
 8015ba6:	2f00      	cmp	r7, #0
 8015ba8:	d03e      	beq.n	8015c28 <rmw_wait+0x26c>
 8015baa:	2000      	movs	r0, #0
 8015bac:	b009      	add	sp, #36	@ 0x24
 8015bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bb2:	68a0      	ldr	r0, [r4, #8]
 8015bb4:	2100      	movs	r1, #0
 8015bb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015bba:	f7f9 fcf3 	bl	800f5a4 <uxr_run_session_timeout>
 8015bbe:	6864      	ldr	r4, [r4, #4]
 8015bc0:	2c00      	cmp	r4, #0
 8015bc2:	d1f6      	bne.n	8015bb2 <rmw_wait+0x1f6>
 8015bc4:	e78c      	b.n	8015ae0 <rmw_wait+0x124>
 8015bc6:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015bca:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015bce:	3401      	adds	r4, #1
 8015bd0:	42a3      	cmp	r3, r4
 8015bd2:	d890      	bhi.n	8015af6 <rmw_wait+0x13a>
 8015bd4:	e79e      	b.n	8015b14 <rmw_wait+0x158>
 8015bd6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015bda:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015bde:	3401      	adds	r4, #1
 8015be0:	429c      	cmp	r4, r3
 8015be2:	d39e      	bcc.n	8015b22 <rmw_wait+0x166>
 8015be4:	e7ac      	b.n	8015b40 <rmw_wait+0x184>
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	f47f aef3 	bne.w	80159d2 <rmw_wait+0x16>
 8015bec:	2800      	cmp	r0, #0
 8015bee:	f47f aef0 	bne.w	80159d2 <rmw_wait+0x16>
 8015bf2:	2900      	cmp	r1, #0
 8015bf4:	f47f aeed 	bne.w	80159d2 <rmw_wait+0x16>
 8015bf8:	e7d7      	b.n	8015baa <rmw_wait+0x1ee>
 8015bfa:	4639      	mov	r1, r7
 8015bfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c00:	f7f9 fcea 	bl	800f5d8 <uxr_run_session_until_data>
 8015c04:	6864      	ldr	r4, [r4, #4]
 8015c06:	2c00      	cmp	r4, #0
 8015c08:	f47f af5f 	bne.w	8015aca <rmw_wait+0x10e>
 8015c0c:	e768      	b.n	8015ae0 <rmw_wait+0x124>
 8015c0e:	f1b8 0f00 	cmp.w	r8, #0
 8015c12:	d032      	beq.n	8015c7a <rmw_wait+0x2be>
 8015c14:	f8d8 3000 	ldr.w	r3, [r8]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d181      	bne.n	8015b20 <rmw_wait+0x164>
 8015c1c:	461f      	mov	r7, r3
 8015c1e:	2d00      	cmp	r5, #0
 8015c20:	d18f      	bne.n	8015b42 <rmw_wait+0x186>
 8015c22:	462f      	mov	r7, r5
 8015c24:	2e00      	cmp	r6, #0
 8015c26:	d1a9      	bne.n	8015b7c <rmw_wait+0x1c0>
 8015c28:	2002      	movs	r0, #2
 8015c2a:	b009      	add	sp, #36	@ 0x24
 8015c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c30:	2e00      	cmp	r6, #0
 8015c32:	d0ba      	beq.n	8015baa <rmw_wait+0x1ee>
 8015c34:	6834      	ldr	r4, [r6, #0]
 8015c36:	2701      	movs	r7, #1
 8015c38:	2c00      	cmp	r4, #0
 8015c3a:	d1a1      	bne.n	8015b80 <rmw_wait+0x1c4>
 8015c3c:	e7b5      	b.n	8015baa <rmw_wait+0x1ee>
 8015c3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015c42:	f7ff f9d5 	bl	8014ff0 <rmw_time_total_nsec>
 8015c46:	2300      	movs	r3, #0
 8015c48:	4a13      	ldr	r2, [pc, #76]	@ (8015c98 <rmw_wait+0x2dc>)
 8015c4a:	f7ea fba1 	bl	8000390 <__aeabi_uldivmod>
 8015c4e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015c52:	f171 0300 	sbcs.w	r3, r1, #0
 8015c56:	4607      	mov	r7, r0
 8015c58:	bfa8      	it	ge
 8015c5a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015c5e:	e6c9      	b.n	80159f4 <rmw_wait+0x38>
 8015c60:	f1b8 0f00 	cmp.w	r8, #0
 8015c64:	d009      	beq.n	8015c7a <rmw_wait+0x2be>
 8015c66:	f8d8 3000 	ldr.w	r3, [r8]
 8015c6a:	464f      	mov	r7, r9
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	f47f af57 	bne.w	8015b20 <rmw_wait+0x164>
 8015c72:	2d00      	cmp	r5, #0
 8015c74:	f47f af65 	bne.w	8015b42 <rmw_wait+0x186>
 8015c78:	e7d3      	b.n	8015c22 <rmw_wait+0x266>
 8015c7a:	b17d      	cbz	r5, 8015c9c <rmw_wait+0x2e0>
 8015c7c:	682b      	ldr	r3, [r5, #0]
 8015c7e:	4647      	mov	r7, r8
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	f47f af60 	bne.w	8015b46 <rmw_wait+0x18a>
 8015c86:	2e00      	cmp	r6, #0
 8015c88:	f47f af78 	bne.w	8015b7c <rmw_wait+0x1c0>
 8015c8c:	e7cc      	b.n	8015c28 <rmw_wait+0x26c>
 8015c8e:	bf00      	nop
 8015c90:	08018a98 	.word	0x08018a98
 8015c94:	2000ca9c 	.word	0x2000ca9c
 8015c98:	000f4240 	.word	0x000f4240
 8015c9c:	2e00      	cmp	r6, #0
 8015c9e:	d0c3      	beq.n	8015c28 <rmw_wait+0x26c>
 8015ca0:	6834      	ldr	r4, [r6, #0]
 8015ca2:	462f      	mov	r7, r5
 8015ca4:	2c00      	cmp	r4, #0
 8015ca6:	f47f af6b 	bne.w	8015b80 <rmw_wait+0x1c4>
 8015caa:	e7bd      	b.n	8015c28 <rmw_wait+0x26c>

08015cac <rmw_create_wait_set>:
 8015cac:	b508      	push	{r3, lr}
 8015cae:	4803      	ldr	r0, [pc, #12]	@ (8015cbc <rmw_create_wait_set+0x10>)
 8015cb0:	f7ff fbfe 	bl	80154b0 <get_memory>
 8015cb4:	b108      	cbz	r0, 8015cba <rmw_create_wait_set+0xe>
 8015cb6:	6880      	ldr	r0, [r0, #8]
 8015cb8:	3010      	adds	r0, #16
 8015cba:	bd08      	pop	{r3, pc}
 8015cbc:	2000cadc 	.word	0x2000cadc

08015cc0 <rmw_destroy_wait_set>:
 8015cc0:	b508      	push	{r3, lr}
 8015cc2:	4b08      	ldr	r3, [pc, #32]	@ (8015ce4 <rmw_destroy_wait_set+0x24>)
 8015cc4:	6819      	ldr	r1, [r3, #0]
 8015cc6:	b911      	cbnz	r1, 8015cce <rmw_destroy_wait_set+0xe>
 8015cc8:	e00a      	b.n	8015ce0 <rmw_destroy_wait_set+0x20>
 8015cca:	6849      	ldr	r1, [r1, #4]
 8015ccc:	b141      	cbz	r1, 8015ce0 <rmw_destroy_wait_set+0x20>
 8015cce:	688b      	ldr	r3, [r1, #8]
 8015cd0:	3310      	adds	r3, #16
 8015cd2:	4298      	cmp	r0, r3
 8015cd4:	d1f9      	bne.n	8015cca <rmw_destroy_wait_set+0xa>
 8015cd6:	4803      	ldr	r0, [pc, #12]	@ (8015ce4 <rmw_destroy_wait_set+0x24>)
 8015cd8:	f7ff fbfa 	bl	80154d0 <put_memory>
 8015cdc:	2000      	movs	r0, #0
 8015cde:	bd08      	pop	{r3, pc}
 8015ce0:	2001      	movs	r0, #1
 8015ce2:	bd08      	pop	{r3, pc}
 8015ce4:	2000cadc 	.word	0x2000cadc

08015ce8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cec:	6805      	ldr	r5, [r0, #0]
 8015cee:	4604      	mov	r4, r0
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	460e      	mov	r6, r1
 8015cf4:	f7ea fa94 	bl	8000220 <strcmp>
 8015cf8:	b1c8      	cbz	r0, 8015d2e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015cfa:	4b11      	ldr	r3, [pc, #68]	@ (8015d40 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	429d      	cmp	r5, r3
 8015d00:	d112      	bne.n	8015d28 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015d02:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015d06:	f8d8 4000 	ldr.w	r4, [r8]
 8015d0a:	b16c      	cbz	r4, 8015d28 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015d0c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015d10:	2700      	movs	r7, #0
 8015d12:	3d04      	subs	r5, #4
 8015d14:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015d18:	4631      	mov	r1, r6
 8015d1a:	f7ea fa81 	bl	8000220 <strcmp>
 8015d1e:	00bb      	lsls	r3, r7, #2
 8015d20:	b140      	cbz	r0, 8015d34 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8015d22:	3701      	adds	r7, #1
 8015d24:	42bc      	cmp	r4, r7
 8015d26:	d1f5      	bne.n	8015d14 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015d28:	2000      	movs	r0, #0
 8015d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d2e:	4620      	mov	r0, r4
 8015d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d3c:	58d3      	ldr	r3, [r2, r3]
 8015d3e:	4718      	bx	r3
 8015d40:	20000130 	.word	0x20000130

08015d44 <std_msgs__msg__Bool__init>:
 8015d44:	3800      	subs	r0, #0
 8015d46:	bf18      	it	ne
 8015d48:	2001      	movne	r0, #1
 8015d4a:	4770      	bx	lr

08015d4c <std_msgs__msg__Bool__fini>:
 8015d4c:	4770      	bx	lr
 8015d4e:	bf00      	nop

08015d50 <std_msgs__msg__UInt16__init>:
 8015d50:	3800      	subs	r0, #0
 8015d52:	bf18      	it	ne
 8015d54:	2001      	movne	r0, #1
 8015d56:	4770      	bx	lr

08015d58 <std_msgs__msg__UInt16__fini>:
 8015d58:	4770      	bx	lr
 8015d5a:	bf00      	nop

08015d5c <ucdr_serialize_endian_array_char>:
 8015d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d60:	4619      	mov	r1, r3
 8015d62:	461f      	mov	r7, r3
 8015d64:	4605      	mov	r5, r0
 8015d66:	4690      	mov	r8, r2
 8015d68:	f7f8 fb70 	bl	800e44c <ucdr_check_buffer_available_for>
 8015d6c:	b9e0      	cbnz	r0, 8015da8 <ucdr_serialize_endian_array_char+0x4c>
 8015d6e:	463e      	mov	r6, r7
 8015d70:	e009      	b.n	8015d86 <ucdr_serialize_endian_array_char+0x2a>
 8015d72:	68a8      	ldr	r0, [r5, #8]
 8015d74:	f001 ff59 	bl	8017c2a <memcpy>
 8015d78:	68ab      	ldr	r3, [r5, #8]
 8015d7a:	6928      	ldr	r0, [r5, #16]
 8015d7c:	4423      	add	r3, r4
 8015d7e:	4420      	add	r0, r4
 8015d80:	1b36      	subs	r6, r6, r4
 8015d82:	60ab      	str	r3, [r5, #8]
 8015d84:	6128      	str	r0, [r5, #16]
 8015d86:	4631      	mov	r1, r6
 8015d88:	2201      	movs	r2, #1
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	f7f8 fbe6 	bl	800e55c <ucdr_check_final_buffer_behavior_array>
 8015d90:	1bb9      	subs	r1, r7, r6
 8015d92:	4441      	add	r1, r8
 8015d94:	4604      	mov	r4, r0
 8015d96:	4602      	mov	r2, r0
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	d1ea      	bne.n	8015d72 <ucdr_serialize_endian_array_char+0x16>
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	7da8      	ldrb	r0, [r5, #22]
 8015da0:	756b      	strb	r3, [r5, #21]
 8015da2:	4058      	eors	r0, r3
 8015da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015da8:	463a      	mov	r2, r7
 8015daa:	68a8      	ldr	r0, [r5, #8]
 8015dac:	4641      	mov	r1, r8
 8015dae:	f001 ff3c 	bl	8017c2a <memcpy>
 8015db2:	68aa      	ldr	r2, [r5, #8]
 8015db4:	692b      	ldr	r3, [r5, #16]
 8015db6:	443a      	add	r2, r7
 8015db8:	443b      	add	r3, r7
 8015dba:	60aa      	str	r2, [r5, #8]
 8015dbc:	612b      	str	r3, [r5, #16]
 8015dbe:	e7ed      	b.n	8015d9c <ucdr_serialize_endian_array_char+0x40>

08015dc0 <ucdr_deserialize_endian_array_char>:
 8015dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	461f      	mov	r7, r3
 8015dc8:	4605      	mov	r5, r0
 8015dca:	4690      	mov	r8, r2
 8015dcc:	f7f8 fb3e 	bl	800e44c <ucdr_check_buffer_available_for>
 8015dd0:	b9e0      	cbnz	r0, 8015e0c <ucdr_deserialize_endian_array_char+0x4c>
 8015dd2:	463e      	mov	r6, r7
 8015dd4:	e009      	b.n	8015dea <ucdr_deserialize_endian_array_char+0x2a>
 8015dd6:	68a9      	ldr	r1, [r5, #8]
 8015dd8:	f001 ff27 	bl	8017c2a <memcpy>
 8015ddc:	68ab      	ldr	r3, [r5, #8]
 8015dde:	6928      	ldr	r0, [r5, #16]
 8015de0:	4423      	add	r3, r4
 8015de2:	4420      	add	r0, r4
 8015de4:	1b36      	subs	r6, r6, r4
 8015de6:	60ab      	str	r3, [r5, #8]
 8015de8:	6128      	str	r0, [r5, #16]
 8015dea:	2201      	movs	r2, #1
 8015dec:	4631      	mov	r1, r6
 8015dee:	4628      	mov	r0, r5
 8015df0:	f7f8 fbb4 	bl	800e55c <ucdr_check_final_buffer_behavior_array>
 8015df4:	4604      	mov	r4, r0
 8015df6:	1bb8      	subs	r0, r7, r6
 8015df8:	4440      	add	r0, r8
 8015dfa:	4622      	mov	r2, r4
 8015dfc:	2c00      	cmp	r4, #0
 8015dfe:	d1ea      	bne.n	8015dd6 <ucdr_deserialize_endian_array_char+0x16>
 8015e00:	2301      	movs	r3, #1
 8015e02:	7da8      	ldrb	r0, [r5, #22]
 8015e04:	756b      	strb	r3, [r5, #21]
 8015e06:	4058      	eors	r0, r3
 8015e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e0c:	463a      	mov	r2, r7
 8015e0e:	68a9      	ldr	r1, [r5, #8]
 8015e10:	4640      	mov	r0, r8
 8015e12:	f001 ff0a 	bl	8017c2a <memcpy>
 8015e16:	68aa      	ldr	r2, [r5, #8]
 8015e18:	692b      	ldr	r3, [r5, #16]
 8015e1a:	443a      	add	r2, r7
 8015e1c:	443b      	add	r3, r7
 8015e1e:	60aa      	str	r2, [r5, #8]
 8015e20:	612b      	str	r3, [r5, #16]
 8015e22:	e7ed      	b.n	8015e00 <ucdr_deserialize_endian_array_char+0x40>

08015e24 <ucdr_serialize_array_uint8_t>:
 8015e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e28:	4688      	mov	r8, r1
 8015e2a:	4611      	mov	r1, r2
 8015e2c:	4617      	mov	r7, r2
 8015e2e:	4605      	mov	r5, r0
 8015e30:	f7f8 fb0c 	bl	800e44c <ucdr_check_buffer_available_for>
 8015e34:	b9e0      	cbnz	r0, 8015e70 <ucdr_serialize_array_uint8_t+0x4c>
 8015e36:	463e      	mov	r6, r7
 8015e38:	e009      	b.n	8015e4e <ucdr_serialize_array_uint8_t+0x2a>
 8015e3a:	68a8      	ldr	r0, [r5, #8]
 8015e3c:	f001 fef5 	bl	8017c2a <memcpy>
 8015e40:	68aa      	ldr	r2, [r5, #8]
 8015e42:	692b      	ldr	r3, [r5, #16]
 8015e44:	4422      	add	r2, r4
 8015e46:	4423      	add	r3, r4
 8015e48:	1b36      	subs	r6, r6, r4
 8015e4a:	60aa      	str	r2, [r5, #8]
 8015e4c:	612b      	str	r3, [r5, #16]
 8015e4e:	4631      	mov	r1, r6
 8015e50:	2201      	movs	r2, #1
 8015e52:	4628      	mov	r0, r5
 8015e54:	f7f8 fb82 	bl	800e55c <ucdr_check_final_buffer_behavior_array>
 8015e58:	1bb9      	subs	r1, r7, r6
 8015e5a:	4441      	add	r1, r8
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	4602      	mov	r2, r0
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d1ea      	bne.n	8015e3a <ucdr_serialize_array_uint8_t+0x16>
 8015e64:	2301      	movs	r3, #1
 8015e66:	7da8      	ldrb	r0, [r5, #22]
 8015e68:	756b      	strb	r3, [r5, #21]
 8015e6a:	4058      	eors	r0, r3
 8015e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e70:	463a      	mov	r2, r7
 8015e72:	68a8      	ldr	r0, [r5, #8]
 8015e74:	4641      	mov	r1, r8
 8015e76:	f001 fed8 	bl	8017c2a <memcpy>
 8015e7a:	68aa      	ldr	r2, [r5, #8]
 8015e7c:	692b      	ldr	r3, [r5, #16]
 8015e7e:	443a      	add	r2, r7
 8015e80:	443b      	add	r3, r7
 8015e82:	60aa      	str	r2, [r5, #8]
 8015e84:	612b      	str	r3, [r5, #16]
 8015e86:	e7ed      	b.n	8015e64 <ucdr_serialize_array_uint8_t+0x40>

08015e88 <ucdr_serialize_endian_array_uint8_t>:
 8015e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e8c:	4619      	mov	r1, r3
 8015e8e:	461f      	mov	r7, r3
 8015e90:	4605      	mov	r5, r0
 8015e92:	4690      	mov	r8, r2
 8015e94:	f7f8 fada 	bl	800e44c <ucdr_check_buffer_available_for>
 8015e98:	b9e0      	cbnz	r0, 8015ed4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015e9a:	463e      	mov	r6, r7
 8015e9c:	e009      	b.n	8015eb2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015e9e:	68a8      	ldr	r0, [r5, #8]
 8015ea0:	f001 fec3 	bl	8017c2a <memcpy>
 8015ea4:	68ab      	ldr	r3, [r5, #8]
 8015ea6:	6928      	ldr	r0, [r5, #16]
 8015ea8:	4423      	add	r3, r4
 8015eaa:	4420      	add	r0, r4
 8015eac:	1b36      	subs	r6, r6, r4
 8015eae:	60ab      	str	r3, [r5, #8]
 8015eb0:	6128      	str	r0, [r5, #16]
 8015eb2:	4631      	mov	r1, r6
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	4628      	mov	r0, r5
 8015eb8:	f7f8 fb50 	bl	800e55c <ucdr_check_final_buffer_behavior_array>
 8015ebc:	1bb9      	subs	r1, r7, r6
 8015ebe:	4441      	add	r1, r8
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	4602      	mov	r2, r0
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d1ea      	bne.n	8015e9e <ucdr_serialize_endian_array_uint8_t+0x16>
 8015ec8:	2301      	movs	r3, #1
 8015eca:	7da8      	ldrb	r0, [r5, #22]
 8015ecc:	756b      	strb	r3, [r5, #21]
 8015ece:	4058      	eors	r0, r3
 8015ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed4:	463a      	mov	r2, r7
 8015ed6:	68a8      	ldr	r0, [r5, #8]
 8015ed8:	4641      	mov	r1, r8
 8015eda:	f001 fea6 	bl	8017c2a <memcpy>
 8015ede:	68aa      	ldr	r2, [r5, #8]
 8015ee0:	692b      	ldr	r3, [r5, #16]
 8015ee2:	443a      	add	r2, r7
 8015ee4:	443b      	add	r3, r7
 8015ee6:	60aa      	str	r2, [r5, #8]
 8015ee8:	612b      	str	r3, [r5, #16]
 8015eea:	e7ed      	b.n	8015ec8 <ucdr_serialize_endian_array_uint8_t+0x40>

08015eec <ucdr_deserialize_array_uint8_t>:
 8015eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ef0:	4688      	mov	r8, r1
 8015ef2:	4611      	mov	r1, r2
 8015ef4:	4617      	mov	r7, r2
 8015ef6:	4605      	mov	r5, r0
 8015ef8:	f7f8 faa8 	bl	800e44c <ucdr_check_buffer_available_for>
 8015efc:	b9e0      	cbnz	r0, 8015f38 <ucdr_deserialize_array_uint8_t+0x4c>
 8015efe:	463e      	mov	r6, r7
 8015f00:	e009      	b.n	8015f16 <ucdr_deserialize_array_uint8_t+0x2a>
 8015f02:	68a9      	ldr	r1, [r5, #8]
 8015f04:	f001 fe91 	bl	8017c2a <memcpy>
 8015f08:	68aa      	ldr	r2, [r5, #8]
 8015f0a:	692b      	ldr	r3, [r5, #16]
 8015f0c:	4422      	add	r2, r4
 8015f0e:	4423      	add	r3, r4
 8015f10:	1b36      	subs	r6, r6, r4
 8015f12:	60aa      	str	r2, [r5, #8]
 8015f14:	612b      	str	r3, [r5, #16]
 8015f16:	2201      	movs	r2, #1
 8015f18:	4631      	mov	r1, r6
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	f7f8 fb1e 	bl	800e55c <ucdr_check_final_buffer_behavior_array>
 8015f20:	4604      	mov	r4, r0
 8015f22:	1bb8      	subs	r0, r7, r6
 8015f24:	4440      	add	r0, r8
 8015f26:	4622      	mov	r2, r4
 8015f28:	2c00      	cmp	r4, #0
 8015f2a:	d1ea      	bne.n	8015f02 <ucdr_deserialize_array_uint8_t+0x16>
 8015f2c:	2301      	movs	r3, #1
 8015f2e:	7da8      	ldrb	r0, [r5, #22]
 8015f30:	756b      	strb	r3, [r5, #21]
 8015f32:	4058      	eors	r0, r3
 8015f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f38:	463a      	mov	r2, r7
 8015f3a:	68a9      	ldr	r1, [r5, #8]
 8015f3c:	4640      	mov	r0, r8
 8015f3e:	f001 fe74 	bl	8017c2a <memcpy>
 8015f42:	68aa      	ldr	r2, [r5, #8]
 8015f44:	692b      	ldr	r3, [r5, #16]
 8015f46:	443a      	add	r2, r7
 8015f48:	443b      	add	r3, r7
 8015f4a:	60aa      	str	r2, [r5, #8]
 8015f4c:	612b      	str	r3, [r5, #16]
 8015f4e:	e7ed      	b.n	8015f2c <ucdr_deserialize_array_uint8_t+0x40>

08015f50 <ucdr_deserialize_endian_array_uint8_t>:
 8015f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f54:	4619      	mov	r1, r3
 8015f56:	461f      	mov	r7, r3
 8015f58:	4605      	mov	r5, r0
 8015f5a:	4690      	mov	r8, r2
 8015f5c:	f7f8 fa76 	bl	800e44c <ucdr_check_buffer_available_for>
 8015f60:	b9e0      	cbnz	r0, 8015f9c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015f62:	463e      	mov	r6, r7
 8015f64:	e009      	b.n	8015f7a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015f66:	68a9      	ldr	r1, [r5, #8]
 8015f68:	f001 fe5f 	bl	8017c2a <memcpy>
 8015f6c:	68ab      	ldr	r3, [r5, #8]
 8015f6e:	6928      	ldr	r0, [r5, #16]
 8015f70:	4423      	add	r3, r4
 8015f72:	4420      	add	r0, r4
 8015f74:	1b36      	subs	r6, r6, r4
 8015f76:	60ab      	str	r3, [r5, #8]
 8015f78:	6128      	str	r0, [r5, #16]
 8015f7a:	2201      	movs	r2, #1
 8015f7c:	4631      	mov	r1, r6
 8015f7e:	4628      	mov	r0, r5
 8015f80:	f7f8 faec 	bl	800e55c <ucdr_check_final_buffer_behavior_array>
 8015f84:	4604      	mov	r4, r0
 8015f86:	1bb8      	subs	r0, r7, r6
 8015f88:	4440      	add	r0, r8
 8015f8a:	4622      	mov	r2, r4
 8015f8c:	2c00      	cmp	r4, #0
 8015f8e:	d1ea      	bne.n	8015f66 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015f90:	2301      	movs	r3, #1
 8015f92:	7da8      	ldrb	r0, [r5, #22]
 8015f94:	756b      	strb	r3, [r5, #21]
 8015f96:	4058      	eors	r0, r3
 8015f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f9c:	463a      	mov	r2, r7
 8015f9e:	68a9      	ldr	r1, [r5, #8]
 8015fa0:	4640      	mov	r0, r8
 8015fa2:	f001 fe42 	bl	8017c2a <memcpy>
 8015fa6:	68aa      	ldr	r2, [r5, #8]
 8015fa8:	692b      	ldr	r3, [r5, #16]
 8015faa:	443a      	add	r2, r7
 8015fac:	443b      	add	r3, r7
 8015fae:	60aa      	str	r2, [r5, #8]
 8015fb0:	612b      	str	r3, [r5, #16]
 8015fb2:	e7ed      	b.n	8015f90 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015fb4 <ucdr_serialize_sequence_char>:
 8015fb4:	b570      	push	{r4, r5, r6, lr}
 8015fb6:	4615      	mov	r5, r2
 8015fb8:	460e      	mov	r6, r1
 8015fba:	7d01      	ldrb	r1, [r0, #20]
 8015fbc:	4604      	mov	r4, r0
 8015fbe:	f7f7 fd9b 	bl	800daf8 <ucdr_serialize_endian_uint32_t>
 8015fc2:	b90d      	cbnz	r5, 8015fc8 <ucdr_serialize_sequence_char+0x14>
 8015fc4:	2001      	movs	r0, #1
 8015fc6:	bd70      	pop	{r4, r5, r6, pc}
 8015fc8:	7d21      	ldrb	r1, [r4, #20]
 8015fca:	462b      	mov	r3, r5
 8015fcc:	4632      	mov	r2, r6
 8015fce:	4620      	mov	r0, r4
 8015fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fd4:	f7ff bec2 	b.w	8015d5c <ucdr_serialize_endian_array_char>

08015fd8 <ucdr_deserialize_sequence_char>:
 8015fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fdc:	461d      	mov	r5, r3
 8015fde:	4616      	mov	r6, r2
 8015fe0:	460f      	mov	r7, r1
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	7d01      	ldrb	r1, [r0, #20]
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	f7f7 feae 	bl	800dd48 <ucdr_deserialize_endian_uint32_t>
 8015fec:	682b      	ldr	r3, [r5, #0]
 8015fee:	429e      	cmp	r6, r3
 8015ff0:	bf3c      	itt	cc
 8015ff2:	2201      	movcc	r2, #1
 8015ff4:	75a2      	strbcc	r2, [r4, #22]
 8015ff6:	b913      	cbnz	r3, 8015ffe <ucdr_deserialize_sequence_char+0x26>
 8015ff8:	2001      	movs	r0, #1
 8015ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ffe:	7d21      	ldrb	r1, [r4, #20]
 8016000:	463a      	mov	r2, r7
 8016002:	4620      	mov	r0, r4
 8016004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016008:	f7ff beda 	b.w	8015dc0 <ucdr_deserialize_endian_array_char>

0801600c <ucdr_serialize_sequence_uint8_t>:
 801600c:	b570      	push	{r4, r5, r6, lr}
 801600e:	4615      	mov	r5, r2
 8016010:	460e      	mov	r6, r1
 8016012:	7d01      	ldrb	r1, [r0, #20]
 8016014:	4604      	mov	r4, r0
 8016016:	f7f7 fd6f 	bl	800daf8 <ucdr_serialize_endian_uint32_t>
 801601a:	b90d      	cbnz	r5, 8016020 <ucdr_serialize_sequence_uint8_t+0x14>
 801601c:	2001      	movs	r0, #1
 801601e:	bd70      	pop	{r4, r5, r6, pc}
 8016020:	7d21      	ldrb	r1, [r4, #20]
 8016022:	462b      	mov	r3, r5
 8016024:	4632      	mov	r2, r6
 8016026:	4620      	mov	r0, r4
 8016028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801602c:	f7ff bf2c 	b.w	8015e88 <ucdr_serialize_endian_array_uint8_t>

08016030 <ucdr_deserialize_sequence_uint8_t>:
 8016030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016034:	461d      	mov	r5, r3
 8016036:	4616      	mov	r6, r2
 8016038:	460f      	mov	r7, r1
 801603a:	461a      	mov	r2, r3
 801603c:	7d01      	ldrb	r1, [r0, #20]
 801603e:	4604      	mov	r4, r0
 8016040:	f7f7 fe82 	bl	800dd48 <ucdr_deserialize_endian_uint32_t>
 8016044:	682b      	ldr	r3, [r5, #0]
 8016046:	429e      	cmp	r6, r3
 8016048:	bf3c      	itt	cc
 801604a:	2201      	movcc	r2, #1
 801604c:	75a2      	strbcc	r2, [r4, #22]
 801604e:	b913      	cbnz	r3, 8016056 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016050:	2001      	movs	r0, #1
 8016052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016056:	7d21      	ldrb	r1, [r4, #20]
 8016058:	463a      	mov	r2, r7
 801605a:	4620      	mov	r0, r4
 801605c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016060:	f7ff bf76 	b.w	8015f50 <ucdr_deserialize_endian_array_uint8_t>

08016064 <ucdr_serialize_string>:
 8016064:	b510      	push	{r4, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	4604      	mov	r4, r0
 801606a:	4608      	mov	r0, r1
 801606c:	9101      	str	r1, [sp, #4]
 801606e:	f7ea f8e1 	bl	8000234 <strlen>
 8016072:	9901      	ldr	r1, [sp, #4]
 8016074:	1c42      	adds	r2, r0, #1
 8016076:	4620      	mov	r0, r4
 8016078:	b002      	add	sp, #8
 801607a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801607e:	f7ff bf99 	b.w	8015fb4 <ucdr_serialize_sequence_char>
 8016082:	bf00      	nop

08016084 <ucdr_deserialize_string>:
 8016084:	b500      	push	{lr}
 8016086:	b083      	sub	sp, #12
 8016088:	ab01      	add	r3, sp, #4
 801608a:	f7ff ffa5 	bl	8015fd8 <ucdr_deserialize_sequence_char>
 801608e:	b003      	add	sp, #12
 8016090:	f85d fb04 	ldr.w	pc, [sp], #4

08016094 <uxr_init_input_best_effort_stream>:
 8016094:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016098:	8003      	strh	r3, [r0, #0]
 801609a:	4770      	bx	lr

0801609c <uxr_reset_input_best_effort_stream>:
 801609c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80160a0:	8003      	strh	r3, [r0, #0]
 80160a2:	4770      	bx	lr

080160a4 <uxr_receive_best_effort_message>:
 80160a4:	b538      	push	{r3, r4, r5, lr}
 80160a6:	4604      	mov	r4, r0
 80160a8:	8800      	ldrh	r0, [r0, #0]
 80160aa:	460d      	mov	r5, r1
 80160ac:	f000 fd42 	bl	8016b34 <uxr_seq_num_cmp>
 80160b0:	4603      	mov	r3, r0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80160b8:	bfb8      	it	lt
 80160ba:	8025      	strhlt	r5, [r4, #0]
 80160bc:	bd38      	pop	{r3, r4, r5, pc}
 80160be:	bf00      	nop

080160c0 <on_full_input_buffer>:
 80160c0:	b570      	push	{r4, r5, r6, lr}
 80160c2:	4605      	mov	r5, r0
 80160c4:	460c      	mov	r4, r1
 80160c6:	682b      	ldr	r3, [r5, #0]
 80160c8:	6809      	ldr	r1, [r1, #0]
 80160ca:	8920      	ldrh	r0, [r4, #8]
 80160cc:	6862      	ldr	r2, [r4, #4]
 80160ce:	fbb2 f2f0 	udiv	r2, r2, r0
 80160d2:	eba3 0c01 	sub.w	ip, r3, r1
 80160d6:	fbbc fcf2 	udiv	ip, ip, r2
 80160da:	f10c 0c01 	add.w	ip, ip, #1
 80160de:	fa1f f38c 	uxth.w	r3, ip
 80160e2:	fbb3 f6f0 	udiv	r6, r3, r0
 80160e6:	fb00 3316 	mls	r3, r0, r6, r3
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	fb02 f303 	mul.w	r3, r2, r3
 80160f0:	1d18      	adds	r0, r3, #4
 80160f2:	4408      	add	r0, r1
 80160f4:	7d26      	ldrb	r6, [r4, #20]
 80160f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80160fa:	b116      	cbz	r6, 8016102 <on_full_input_buffer+0x42>
 80160fc:	2600      	movs	r6, #0
 80160fe:	f840 6c04 	str.w	r6, [r0, #-4]
 8016102:	2a03      	cmp	r2, #3
 8016104:	d801      	bhi.n	801610a <on_full_input_buffer+0x4a>
 8016106:	2001      	movs	r0, #1
 8016108:	bd70      	pop	{r4, r5, r6, pc}
 801610a:	3308      	adds	r3, #8
 801610c:	4419      	add	r1, r3
 801610e:	4628      	mov	r0, r5
 8016110:	692b      	ldr	r3, [r5, #16]
 8016112:	3a04      	subs	r2, #4
 8016114:	f7f8 f9e6 	bl	800e4e4 <ucdr_init_buffer_origin>
 8016118:	4628      	mov	r0, r5
 801611a:	4903      	ldr	r1, [pc, #12]	@ (8016128 <on_full_input_buffer+0x68>)
 801611c:	4622      	mov	r2, r4
 801611e:	f7f8 f9bd 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 8016122:	2000      	movs	r0, #0
 8016124:	bd70      	pop	{r4, r5, r6, pc}
 8016126:	bf00      	nop
 8016128:	080160c1 	.word	0x080160c1

0801612c <uxr_init_input_reliable_stream>:
 801612c:	b500      	push	{lr}
 801612e:	e9c0 1200 	strd	r1, r2, [r0]
 8016132:	f04f 0e00 	mov.w	lr, #0
 8016136:	9a01      	ldr	r2, [sp, #4]
 8016138:	8103      	strh	r3, [r0, #8]
 801613a:	6102      	str	r2, [r0, #16]
 801613c:	f880 e014 	strb.w	lr, [r0, #20]
 8016140:	b1d3      	cbz	r3, 8016178 <uxr_init_input_reliable_stream+0x4c>
 8016142:	f8c1 e000 	str.w	lr, [r1]
 8016146:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801614a:	f1bc 0f01 	cmp.w	ip, #1
 801614e:	d913      	bls.n	8016178 <uxr_init_input_reliable_stream+0x4c>
 8016150:	2301      	movs	r3, #1
 8016152:	fbb3 f1fc 	udiv	r1, r3, ip
 8016156:	fb0c 3111 	mls	r1, ip, r1, r3
 801615a:	b289      	uxth	r1, r1
 801615c:	6842      	ldr	r2, [r0, #4]
 801615e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016162:	fb01 f202 	mul.w	r2, r1, r2
 8016166:	6801      	ldr	r1, [r0, #0]
 8016168:	f841 e002 	str.w	lr, [r1, r2]
 801616c:	3301      	adds	r3, #1
 801616e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016172:	b29b      	uxth	r3, r3
 8016174:	459c      	cmp	ip, r3
 8016176:	d8ec      	bhi.n	8016152 <uxr_init_input_reliable_stream+0x26>
 8016178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801617c:	60c3      	str	r3, [r0, #12]
 801617e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016182:	bf00      	nop

08016184 <uxr_reset_input_reliable_stream>:
 8016184:	8901      	ldrh	r1, [r0, #8]
 8016186:	b1e9      	cbz	r1, 80161c4 <uxr_reset_input_reliable_stream+0x40>
 8016188:	f04f 0c00 	mov.w	ip, #0
 801618c:	b500      	push	{lr}
 801618e:	4663      	mov	r3, ip
 8016190:	46e6      	mov	lr, ip
 8016192:	fbb3 f2f1 	udiv	r2, r3, r1
 8016196:	fb01 3312 	mls	r3, r1, r2, r3
 801619a:	b29b      	uxth	r3, r3
 801619c:	6842      	ldr	r2, [r0, #4]
 801619e:	fbb2 f2f1 	udiv	r2, r2, r1
 80161a2:	fb02 f303 	mul.w	r3, r2, r3
 80161a6:	6802      	ldr	r2, [r0, #0]
 80161a8:	f842 e003 	str.w	lr, [r2, r3]
 80161ac:	f10c 0c01 	add.w	ip, ip, #1
 80161b0:	8901      	ldrh	r1, [r0, #8]
 80161b2:	fa1f f38c 	uxth.w	r3, ip
 80161b6:	4299      	cmp	r1, r3
 80161b8:	d8eb      	bhi.n	8016192 <uxr_reset_input_reliable_stream+0xe>
 80161ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161be:	60c3      	str	r3, [r0, #12]
 80161c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80161c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161c8:	60c3      	str	r3, [r0, #12]
 80161ca:	4770      	bx	lr

080161cc <uxr_receive_reliable_message>:
 80161cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161d0:	4604      	mov	r4, r0
 80161d2:	460d      	mov	r5, r1
 80161d4:	8901      	ldrh	r1, [r0, #8]
 80161d6:	8980      	ldrh	r0, [r0, #12]
 80161d8:	4690      	mov	r8, r2
 80161da:	461f      	mov	r7, r3
 80161dc:	f000 fca2 	bl	8016b24 <uxr_seq_num_add>
 80161e0:	4629      	mov	r1, r5
 80161e2:	4606      	mov	r6, r0
 80161e4:	89a0      	ldrh	r0, [r4, #12]
 80161e6:	f000 fca5 	bl	8016b34 <uxr_seq_num_cmp>
 80161ea:	2800      	cmp	r0, #0
 80161ec:	db0a      	blt.n	8016204 <uxr_receive_reliable_message+0x38>
 80161ee:	2600      	movs	r6, #0
 80161f0:	89e0      	ldrh	r0, [r4, #14]
 80161f2:	4629      	mov	r1, r5
 80161f4:	f000 fc9e 	bl	8016b34 <uxr_seq_num_cmp>
 80161f8:	2800      	cmp	r0, #0
 80161fa:	da00      	bge.n	80161fe <uxr_receive_reliable_message+0x32>
 80161fc:	81e5      	strh	r5, [r4, #14]
 80161fe:	4630      	mov	r0, r6
 8016200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016204:	4630      	mov	r0, r6
 8016206:	4629      	mov	r1, r5
 8016208:	f000 fc94 	bl	8016b34 <uxr_seq_num_cmp>
 801620c:	2800      	cmp	r0, #0
 801620e:	dbee      	blt.n	80161ee <uxr_receive_reliable_message+0x22>
 8016210:	6923      	ldr	r3, [r4, #16]
 8016212:	4640      	mov	r0, r8
 8016214:	4798      	blx	r3
 8016216:	2101      	movs	r1, #1
 8016218:	4681      	mov	r9, r0
 801621a:	89a0      	ldrh	r0, [r4, #12]
 801621c:	f000 fc82 	bl	8016b24 <uxr_seq_num_add>
 8016220:	f1b9 0f00 	cmp.w	r9, #0
 8016224:	d101      	bne.n	801622a <uxr_receive_reliable_message+0x5e>
 8016226:	4285      	cmp	r5, r0
 8016228:	d047      	beq.n	80162ba <uxr_receive_reliable_message+0xee>
 801622a:	8922      	ldrh	r2, [r4, #8]
 801622c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016230:	fb02 5010 	mls	r0, r2, r0, r5
 8016234:	b280      	uxth	r0, r0
 8016236:	6863      	ldr	r3, [r4, #4]
 8016238:	fbb3 f3f2 	udiv	r3, r3, r2
 801623c:	fb00 f303 	mul.w	r3, r0, r3
 8016240:	6820      	ldr	r0, [r4, #0]
 8016242:	3304      	adds	r3, #4
 8016244:	4418      	add	r0, r3
 8016246:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d1cf      	bne.n	80161ee <uxr_receive_reliable_message+0x22>
 801624e:	4641      	mov	r1, r8
 8016250:	463a      	mov	r2, r7
 8016252:	f001 fcea 	bl	8017c2a <memcpy>
 8016256:	8921      	ldrh	r1, [r4, #8]
 8016258:	fbb5 f2f1 	udiv	r2, r5, r1
 801625c:	fb01 5212 	mls	r2, r1, r2, r5
 8016260:	b292      	uxth	r2, r2
 8016262:	6863      	ldr	r3, [r4, #4]
 8016264:	fbb3 f3f1 	udiv	r3, r3, r1
 8016268:	fb02 f303 	mul.w	r3, r2, r3
 801626c:	6822      	ldr	r2, [r4, #0]
 801626e:	50d7      	str	r7, [r2, r3]
 8016270:	9a08      	ldr	r2, [sp, #32]
 8016272:	2301      	movs	r3, #1
 8016274:	7013      	strb	r3, [r2, #0]
 8016276:	f1b9 0f00 	cmp.w	r9, #0
 801627a:	d0b8      	beq.n	80161ee <uxr_receive_reliable_message+0x22>
 801627c:	89a6      	ldrh	r6, [r4, #12]
 801627e:	4630      	mov	r0, r6
 8016280:	2101      	movs	r1, #1
 8016282:	f000 fc4f 	bl	8016b24 <uxr_seq_num_add>
 8016286:	8922      	ldrh	r2, [r4, #8]
 8016288:	6863      	ldr	r3, [r4, #4]
 801628a:	fbb3 f3f2 	udiv	r3, r3, r2
 801628e:	4606      	mov	r6, r0
 8016290:	fbb0 f0f2 	udiv	r0, r0, r2
 8016294:	fb02 6010 	mls	r0, r2, r0, r6
 8016298:	b280      	uxth	r0, r0
 801629a:	fb00 f303 	mul.w	r3, r0, r3
 801629e:	6820      	ldr	r0, [r4, #0]
 80162a0:	3304      	adds	r3, #4
 80162a2:	4418      	add	r0, r3
 80162a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d0a0      	beq.n	80161ee <uxr_receive_reliable_message+0x22>
 80162ac:	6923      	ldr	r3, [r4, #16]
 80162ae:	4798      	blx	r3
 80162b0:	2802      	cmp	r0, #2
 80162b2:	d008      	beq.n	80162c6 <uxr_receive_reliable_message+0xfa>
 80162b4:	2801      	cmp	r0, #1
 80162b6:	d0e2      	beq.n	801627e <uxr_receive_reliable_message+0xb2>
 80162b8:	e799      	b.n	80161ee <uxr_receive_reliable_message+0x22>
 80162ba:	9b08      	ldr	r3, [sp, #32]
 80162bc:	81a5      	strh	r5, [r4, #12]
 80162be:	2601      	movs	r6, #1
 80162c0:	f883 9000 	strb.w	r9, [r3]
 80162c4:	e794      	b.n	80161f0 <uxr_receive_reliable_message+0x24>
 80162c6:	2601      	movs	r6, #1
 80162c8:	e792      	b.n	80161f0 <uxr_receive_reliable_message+0x24>
 80162ca:	bf00      	nop

080162cc <uxr_next_input_reliable_buffer_available>:
 80162cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162d0:	4604      	mov	r4, r0
 80162d2:	460f      	mov	r7, r1
 80162d4:	8980      	ldrh	r0, [r0, #12]
 80162d6:	2101      	movs	r1, #1
 80162d8:	4690      	mov	r8, r2
 80162da:	f000 fc23 	bl	8016b24 <uxr_seq_num_add>
 80162de:	8922      	ldrh	r2, [r4, #8]
 80162e0:	fbb0 f6f2 	udiv	r6, r0, r2
 80162e4:	fb02 0616 	mls	r6, r2, r6, r0
 80162e8:	b2b6      	uxth	r6, r6
 80162ea:	6863      	ldr	r3, [r4, #4]
 80162ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80162f0:	fb06 f303 	mul.w	r3, r6, r3
 80162f4:	6826      	ldr	r6, [r4, #0]
 80162f6:	3304      	adds	r3, #4
 80162f8:	441e      	add	r6, r3
 80162fa:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80162fe:	f1b9 0f00 	cmp.w	r9, #0
 8016302:	d023      	beq.n	801634c <uxr_next_input_reliable_buffer_available+0x80>
 8016304:	6923      	ldr	r3, [r4, #16]
 8016306:	4605      	mov	r5, r0
 8016308:	4630      	mov	r0, r6
 801630a:	4798      	blx	r3
 801630c:	4682      	mov	sl, r0
 801630e:	b300      	cbz	r0, 8016352 <uxr_next_input_reliable_buffer_available+0x86>
 8016310:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016314:	2101      	movs	r1, #1
 8016316:	4650      	mov	r0, sl
 8016318:	f000 fc04 	bl	8016b24 <uxr_seq_num_add>
 801631c:	8921      	ldrh	r1, [r4, #8]
 801631e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016322:	4682      	mov	sl, r0
 8016324:	fb01 0212 	mls	r2, r1, r2, r0
 8016328:	e9d4 0300 	ldrd	r0, r3, [r4]
 801632c:	b292      	uxth	r2, r2
 801632e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016332:	fb02 f303 	mul.w	r3, r2, r3
 8016336:	3304      	adds	r3, #4
 8016338:	4418      	add	r0, r3
 801633a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801633e:	b12b      	cbz	r3, 801634c <uxr_next_input_reliable_buffer_available+0x80>
 8016340:	6923      	ldr	r3, [r4, #16]
 8016342:	4798      	blx	r3
 8016344:	2802      	cmp	r0, #2
 8016346:	d01b      	beq.n	8016380 <uxr_next_input_reliable_buffer_available+0xb4>
 8016348:	2801      	cmp	r0, #1
 801634a:	d0e3      	beq.n	8016314 <uxr_next_input_reliable_buffer_available+0x48>
 801634c:	2000      	movs	r0, #0
 801634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016352:	464a      	mov	r2, r9
 8016354:	4631      	mov	r1, r6
 8016356:	4638      	mov	r0, r7
 8016358:	f7f8 f8cc 	bl	800e4f4 <ucdr_init_buffer>
 801635c:	8921      	ldrh	r1, [r4, #8]
 801635e:	fbb5 f2f1 	udiv	r2, r5, r1
 8016362:	fb01 5212 	mls	r2, r1, r2, r5
 8016366:	b292      	uxth	r2, r2
 8016368:	6863      	ldr	r3, [r4, #4]
 801636a:	fbb3 f3f1 	udiv	r3, r3, r1
 801636e:	fb02 f303 	mul.w	r3, r2, r3
 8016372:	6822      	ldr	r2, [r4, #0]
 8016374:	f842 a003 	str.w	sl, [r2, r3]
 8016378:	2001      	movs	r0, #1
 801637a:	81a5      	strh	r5, [r4, #12]
 801637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016380:	8920      	ldrh	r0, [r4, #8]
 8016382:	fbb5 f3f0 	udiv	r3, r5, r0
 8016386:	fb00 5513 	mls	r5, r0, r3, r5
 801638a:	b2ad      	uxth	r5, r5
 801638c:	6863      	ldr	r3, [r4, #4]
 801638e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016392:	fb03 f505 	mul.w	r5, r3, r5
 8016396:	6823      	ldr	r3, [r4, #0]
 8016398:	2000      	movs	r0, #0
 801639a:	5158      	str	r0, [r3, r5]
 801639c:	eb06 0108 	add.w	r1, r6, r8
 80163a0:	eba9 0208 	sub.w	r2, r9, r8
 80163a4:	4638      	mov	r0, r7
 80163a6:	f7f8 f8a5 	bl	800e4f4 <ucdr_init_buffer>
 80163aa:	4638      	mov	r0, r7
 80163ac:	4903      	ldr	r1, [pc, #12]	@ (80163bc <uxr_next_input_reliable_buffer_available+0xf0>)
 80163ae:	4622      	mov	r2, r4
 80163b0:	f7f8 f874 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 80163b4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80163b8:	2001      	movs	r0, #1
 80163ba:	e7c8      	b.n	801634e <uxr_next_input_reliable_buffer_available+0x82>
 80163bc:	080160c1 	.word	0x080160c1

080163c0 <uxr_process_heartbeat>:
 80163c0:	b538      	push	{r3, r4, r5, lr}
 80163c2:	4611      	mov	r1, r2
 80163c4:	4604      	mov	r4, r0
 80163c6:	89c0      	ldrh	r0, [r0, #14]
 80163c8:	4615      	mov	r5, r2
 80163ca:	f000 fbb3 	bl	8016b34 <uxr_seq_num_cmp>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	bfb8      	it	lt
 80163d2:	81e5      	strhlt	r5, [r4, #14]
 80163d4:	bd38      	pop	{r3, r4, r5, pc}
 80163d6:	bf00      	nop

080163d8 <uxr_compute_acknack>:
 80163d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163dc:	8903      	ldrh	r3, [r0, #8]
 80163de:	8985      	ldrh	r5, [r0, #12]
 80163e0:	4604      	mov	r4, r0
 80163e2:	460e      	mov	r6, r1
 80163e4:	b1d3      	cbz	r3, 801641c <uxr_compute_acknack+0x44>
 80163e6:	4628      	mov	r0, r5
 80163e8:	2701      	movs	r7, #1
 80163ea:	e003      	b.n	80163f4 <uxr_compute_acknack+0x1c>
 80163ec:	4567      	cmp	r7, ip
 80163ee:	d215      	bcs.n	801641c <uxr_compute_acknack+0x44>
 80163f0:	89a0      	ldrh	r0, [r4, #12]
 80163f2:	3701      	adds	r7, #1
 80163f4:	b2b9      	uxth	r1, r7
 80163f6:	f000 fb95 	bl	8016b24 <uxr_seq_num_add>
 80163fa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80163fe:	fbb0 f3fc 	udiv	r3, r0, ip
 8016402:	fb0c 0313 	mls	r3, ip, r3, r0
 8016406:	b29a      	uxth	r2, r3
 8016408:	e9d4 1300 	ldrd	r1, r3, [r4]
 801640c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016410:	fb02 f303 	mul.w	r3, r2, r3
 8016414:	58cb      	ldr	r3, [r1, r3]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d1e8      	bne.n	80163ec <uxr_compute_acknack+0x14>
 801641a:	4605      	mov	r5, r0
 801641c:	8035      	strh	r5, [r6, #0]
 801641e:	2101      	movs	r1, #1
 8016420:	4628      	mov	r0, r5
 8016422:	89e7      	ldrh	r7, [r4, #14]
 8016424:	f000 fb82 	bl	8016b2c <uxr_seq_num_sub>
 8016428:	4601      	mov	r1, r0
 801642a:	4638      	mov	r0, r7
 801642c:	f000 fb7e 	bl	8016b2c <uxr_seq_num_sub>
 8016430:	4605      	mov	r5, r0
 8016432:	b318      	cbz	r0, 801647c <uxr_compute_acknack+0xa4>
 8016434:	f04f 0900 	mov.w	r9, #0
 8016438:	464f      	mov	r7, r9
 801643a:	f04f 0801 	mov.w	r8, #1
 801643e:	fa1f f189 	uxth.w	r1, r9
 8016442:	8830      	ldrh	r0, [r6, #0]
 8016444:	f000 fb6e 	bl	8016b24 <uxr_seq_num_add>
 8016448:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801644c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016450:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016454:	fb03 001c 	mls	r0, r3, ip, r0
 8016458:	b283      	uxth	r3, r0
 801645a:	fbb2 f2fc 	udiv	r2, r2, ip
 801645e:	fb02 f303 	mul.w	r3, r2, r3
 8016462:	fa08 f209 	lsl.w	r2, r8, r9
 8016466:	58cb      	ldr	r3, [r1, r3]
 8016468:	f109 0901 	add.w	r9, r9, #1
 801646c:	b90b      	cbnz	r3, 8016472 <uxr_compute_acknack+0x9a>
 801646e:	4317      	orrs	r7, r2
 8016470:	b2bf      	uxth	r7, r7
 8016472:	454d      	cmp	r5, r9
 8016474:	d1e3      	bne.n	801643e <uxr_compute_acknack+0x66>
 8016476:	4638      	mov	r0, r7
 8016478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801647c:	4607      	mov	r7, r0
 801647e:	4638      	mov	r0, r7
 8016480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016484 <uxr_init_output_best_effort_stream>:
 8016484:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016488:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801648c:	6001      	str	r1, [r0, #0]
 801648e:	7303      	strb	r3, [r0, #12]
 8016490:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016494:	4770      	bx	lr
 8016496:	bf00      	nop

08016498 <uxr_reset_output_best_effort_stream>:
 8016498:	7b02      	ldrb	r2, [r0, #12]
 801649a:	6042      	str	r2, [r0, #4]
 801649c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80164a0:	81c3      	strh	r3, [r0, #14]
 80164a2:	4770      	bx	lr

080164a4 <uxr_prepare_best_effort_buffer_to_write>:
 80164a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164a6:	4604      	mov	r4, r0
 80164a8:	b083      	sub	sp, #12
 80164aa:	6840      	ldr	r0, [r0, #4]
 80164ac:	460d      	mov	r5, r1
 80164ae:	4616      	mov	r6, r2
 80164b0:	f7fa fac4 	bl	8010a3c <uxr_submessage_padding>
 80164b4:	6863      	ldr	r3, [r4, #4]
 80164b6:	4418      	add	r0, r3
 80164b8:	68a3      	ldr	r3, [r4, #8]
 80164ba:	1942      	adds	r2, r0, r5
 80164bc:	4293      	cmp	r3, r2
 80164be:	bf2c      	ite	cs
 80164c0:	2701      	movcs	r7, #1
 80164c2:	2700      	movcc	r7, #0
 80164c4:	d202      	bcs.n	80164cc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80164c6:	4638      	mov	r0, r7
 80164c8:	b003      	add	sp, #12
 80164ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164cc:	9000      	str	r0, [sp, #0]
 80164ce:	6821      	ldr	r1, [r4, #0]
 80164d0:	4630      	mov	r0, r6
 80164d2:	2300      	movs	r3, #0
 80164d4:	f7f7 fffc 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 80164d8:	6861      	ldr	r1, [r4, #4]
 80164da:	4638      	mov	r0, r7
 80164dc:	4429      	add	r1, r5
 80164de:	6061      	str	r1, [r4, #4]
 80164e0:	b003      	add	sp, #12
 80164e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164e4 <uxr_prepare_best_effort_buffer_to_send>:
 80164e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164e8:	4604      	mov	r4, r0
 80164ea:	461d      	mov	r5, r3
 80164ec:	6840      	ldr	r0, [r0, #4]
 80164ee:	7b23      	ldrb	r3, [r4, #12]
 80164f0:	4298      	cmp	r0, r3
 80164f2:	bf8c      	ite	hi
 80164f4:	2601      	movhi	r6, #1
 80164f6:	2600      	movls	r6, #0
 80164f8:	d802      	bhi.n	8016500 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80164fa:	4630      	mov	r0, r6
 80164fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016500:	4688      	mov	r8, r1
 8016502:	89e0      	ldrh	r0, [r4, #14]
 8016504:	2101      	movs	r1, #1
 8016506:	4617      	mov	r7, r2
 8016508:	f000 fb0c 	bl	8016b24 <uxr_seq_num_add>
 801650c:	6823      	ldr	r3, [r4, #0]
 801650e:	81e0      	strh	r0, [r4, #14]
 8016510:	8028      	strh	r0, [r5, #0]
 8016512:	f8c8 3000 	str.w	r3, [r8]
 8016516:	6863      	ldr	r3, [r4, #4]
 8016518:	603b      	str	r3, [r7, #0]
 801651a:	7b23      	ldrb	r3, [r4, #12]
 801651c:	6063      	str	r3, [r4, #4]
 801651e:	4630      	mov	r0, r6
 8016520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016524 <on_full_output_buffer>:
 8016524:	b538      	push	{r3, r4, r5, lr}
 8016526:	6802      	ldr	r2, [r0, #0]
 8016528:	460c      	mov	r4, r1
 801652a:	6809      	ldr	r1, [r1, #0]
 801652c:	8923      	ldrh	r3, [r4, #8]
 801652e:	eba2 0c01 	sub.w	ip, r2, r1
 8016532:	6862      	ldr	r2, [r4, #4]
 8016534:	fbb2 f2f3 	udiv	r2, r2, r3
 8016538:	fbbc fcf2 	udiv	ip, ip, r2
 801653c:	f10c 0c01 	add.w	ip, ip, #1
 8016540:	fa1f fc8c 	uxth.w	ip, ip
 8016544:	fbbc fef3 	udiv	lr, ip, r3
 8016548:	fb03 c31e 	mls	r3, r3, lr, ip
 801654c:	b29b      	uxth	r3, r3
 801654e:	fb02 f303 	mul.w	r3, r2, r3
 8016552:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016556:	58ca      	ldr	r2, [r1, r3]
 8016558:	4463      	add	r3, ip
 801655a:	eba2 020c 	sub.w	r2, r2, ip
 801655e:	3308      	adds	r3, #8
 8016560:	4605      	mov	r5, r0
 8016562:	4419      	add	r1, r3
 8016564:	3a04      	subs	r2, #4
 8016566:	6903      	ldr	r3, [r0, #16]
 8016568:	f7f7 ffbc 	bl	800e4e4 <ucdr_init_buffer_origin>
 801656c:	4628      	mov	r0, r5
 801656e:	4903      	ldr	r1, [pc, #12]	@ (801657c <on_full_output_buffer+0x58>)
 8016570:	4622      	mov	r2, r4
 8016572:	f7f7 ff93 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 8016576:	2000      	movs	r0, #0
 8016578:	bd38      	pop	{r3, r4, r5, pc}
 801657a:	bf00      	nop
 801657c:	08016525 	.word	0x08016525

08016580 <uxr_init_output_reliable_stream>:
 8016580:	b410      	push	{r4}
 8016582:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016586:	8103      	strh	r3, [r0, #8]
 8016588:	e9c0 1200 	strd	r1, r2, [r0]
 801658c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016590:	b1d3      	cbz	r3, 80165c8 <uxr_init_output_reliable_stream+0x48>
 8016592:	f8c1 c000 	str.w	ip, [r1]
 8016596:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801659a:	f1bc 0f01 	cmp.w	ip, #1
 801659e:	d913      	bls.n	80165c8 <uxr_init_output_reliable_stream+0x48>
 80165a0:	2301      	movs	r3, #1
 80165a2:	fbb3 f1fc 	udiv	r1, r3, ip
 80165a6:	fb0c 3111 	mls	r1, ip, r1, r3
 80165aa:	b289      	uxth	r1, r1
 80165ac:	6842      	ldr	r2, [r0, #4]
 80165ae:	6804      	ldr	r4, [r0, #0]
 80165b0:	fbb2 f2fc 	udiv	r2, r2, ip
 80165b4:	fb01 f202 	mul.w	r2, r1, r2
 80165b8:	7b01      	ldrb	r1, [r0, #12]
 80165ba:	50a1      	str	r1, [r4, r2]
 80165bc:	3301      	adds	r3, #1
 80165be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	459c      	cmp	ip, r3
 80165c6:	d8ec      	bhi.n	80165a2 <uxr_init_output_reliable_stream+0x22>
 80165c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80165cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80165d0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80165d4:	4905      	ldr	r1, [pc, #20]	@ (80165ec <uxr_init_output_reliable_stream+0x6c>)
 80165d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165da:	f8c0 100e 	str.w	r1, [r0, #14]
 80165de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80165e2:	2300      	movs	r3, #0
 80165e4:	8242      	strh	r2, [r0, #18]
 80165e6:	8403      	strh	r3, [r0, #32]
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop
 80165ec:	ffff0000 	.word	0xffff0000

080165f0 <uxr_reset_output_reliable_stream>:
 80165f0:	8901      	ldrh	r1, [r0, #8]
 80165f2:	b1b1      	cbz	r1, 8016622 <uxr_reset_output_reliable_stream+0x32>
 80165f4:	f04f 0c00 	mov.w	ip, #0
 80165f8:	4663      	mov	r3, ip
 80165fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80165fe:	fb01 3312 	mls	r3, r1, r2, r3
 8016602:	b29b      	uxth	r3, r3
 8016604:	6842      	ldr	r2, [r0, #4]
 8016606:	fbb2 f2f1 	udiv	r2, r2, r1
 801660a:	6801      	ldr	r1, [r0, #0]
 801660c:	fb02 f303 	mul.w	r3, r2, r3
 8016610:	7b02      	ldrb	r2, [r0, #12]
 8016612:	50ca      	str	r2, [r1, r3]
 8016614:	f10c 0c01 	add.w	ip, ip, #1
 8016618:	8901      	ldrh	r1, [r0, #8]
 801661a:	fa1f f38c 	uxth.w	r3, ip
 801661e:	4299      	cmp	r1, r3
 8016620:	d8eb      	bhi.n	80165fa <uxr_reset_output_reliable_stream+0xa>
 8016622:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016626:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801662a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801662e:	4904      	ldr	r1, [pc, #16]	@ (8016640 <uxr_reset_output_reliable_stream+0x50>)
 8016630:	f8c0 100e 	str.w	r1, [r0, #14]
 8016634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016638:	2300      	movs	r3, #0
 801663a:	8242      	strh	r2, [r0, #18]
 801663c:	8403      	strh	r3, [r0, #32]
 801663e:	4770      	bx	lr
 8016640:	ffff0000 	.word	0xffff0000

08016644 <uxr_prepare_reliable_buffer_to_write>:
 8016644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016648:	4604      	mov	r4, r0
 801664a:	b091      	sub	sp, #68	@ 0x44
 801664c:	8900      	ldrh	r0, [r0, #8]
 801664e:	89e6      	ldrh	r6, [r4, #14]
 8016650:	6823      	ldr	r3, [r4, #0]
 8016652:	9204      	str	r2, [sp, #16]
 8016654:	fbb6 f2f0 	udiv	r2, r6, r0
 8016658:	fb00 6212 	mls	r2, r0, r2, r6
 801665c:	b292      	uxth	r2, r2
 801665e:	6865      	ldr	r5, [r4, #4]
 8016660:	fbb5 f5f0 	udiv	r5, r5, r0
 8016664:	fb05 3202 	mla	r2, r5, r2, r3
 8016668:	3204      	adds	r2, #4
 801666a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801666e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016672:	9203      	str	r2, [sp, #12]
 8016674:	468b      	mov	fp, r1
 8016676:	1f2f      	subs	r7, r5, #4
 8016678:	2800      	cmp	r0, #0
 801667a:	f000 814c 	beq.w	8016916 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801667e:	f04f 0c00 	mov.w	ip, #0
 8016682:	46e2      	mov	sl, ip
 8016684:	4661      	mov	r1, ip
 8016686:	fbb1 f2f0 	udiv	r2, r1, r0
 801668a:	fb00 1212 	mls	r2, r0, r2, r1
 801668e:	b292      	uxth	r2, r2
 8016690:	fb05 f202 	mul.w	r2, r5, r2
 8016694:	f10c 0c01 	add.w	ip, ip, #1
 8016698:	589a      	ldr	r2, [r3, r2]
 801669a:	454a      	cmp	r2, r9
 801669c:	bf08      	it	eq
 801669e:	f10a 0a01 	addeq.w	sl, sl, #1
 80166a2:	fa1f f18c 	uxth.w	r1, ip
 80166a6:	bf08      	it	eq
 80166a8:	fa1f fa8a 	uxtheq.w	sl, sl
 80166ac:	4281      	cmp	r1, r0
 80166ae:	d3ea      	bcc.n	8016686 <uxr_prepare_reliable_buffer_to_write+0x42>
 80166b0:	4640      	mov	r0, r8
 80166b2:	2104      	movs	r1, #4
 80166b4:	f8cd a014 	str.w	sl, [sp, #20]
 80166b8:	f7f7 ff20 	bl	800e4fc <ucdr_alignment>
 80166bc:	4480      	add	r8, r0
 80166be:	eb08 020b 	add.w	r2, r8, fp
 80166c2:	42ba      	cmp	r2, r7
 80166c4:	f240 80cd 	bls.w	8016862 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80166c8:	7b22      	ldrb	r2, [r4, #12]
 80166ca:	445a      	add	r2, fp
 80166cc:	42ba      	cmp	r2, r7
 80166ce:	f240 80b5 	bls.w	801683c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80166d2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80166d6:	33fc      	adds	r3, #252	@ 0xfc
 80166d8:	b2ba      	uxth	r2, r7
 80166da:	4413      	add	r3, r2
 80166dc:	b29b      	uxth	r3, r3
 80166de:	fb0a f903 	mul.w	r9, sl, r3
 80166e2:	45d9      	cmp	r9, fp
 80166e4:	9305      	str	r3, [sp, #20]
 80166e6:	9306      	str	r3, [sp, #24]
 80166e8:	f0c0 80b7 	bcc.w	801685a <uxr_prepare_reliable_buffer_to_write+0x216>
 80166ec:	f108 0304 	add.w	r3, r8, #4
 80166f0:	42bb      	cmp	r3, r7
 80166f2:	f080 80db 	bcs.w	80168ac <uxr_prepare_reliable_buffer_to_write+0x268>
 80166f6:	f1a2 0904 	sub.w	r9, r2, #4
 80166fa:	eba9 0908 	sub.w	r9, r9, r8
 80166fe:	9b05      	ldr	r3, [sp, #20]
 8016700:	fa1f f989 	uxth.w	r9, r9
 8016704:	ebab 0b09 	sub.w	fp, fp, r9
 8016708:	fbbb f2f3 	udiv	r2, fp, r3
 801670c:	fb03 b312 	mls	r3, r3, r2, fp
 8016710:	2b00      	cmp	r3, #0
 8016712:	f000 80c8 	beq.w	80168a6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016716:	3201      	adds	r2, #1
 8016718:	b292      	uxth	r2, r2
 801671a:	9306      	str	r3, [sp, #24]
 801671c:	4552      	cmp	r2, sl
 801671e:	f200 809c 	bhi.w	801685a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016722:	f10d 0b20 	add.w	fp, sp, #32
 8016726:	2a00      	cmp	r2, #0
 8016728:	d042      	beq.n	80167b0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801672a:	f8cd 801c 	str.w	r8, [sp, #28]
 801672e:	f04f 0a00 	mov.w	sl, #0
 8016732:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016736:	9505      	str	r5, [sp, #20]
 8016738:	f10d 0b20 	add.w	fp, sp, #32
 801673c:	4615      	mov	r5, r2
 801673e:	e000      	b.n	8016742 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016740:	46c1      	mov	r9, r8
 8016742:	8920      	ldrh	r0, [r4, #8]
 8016744:	fbb6 f2f0 	udiv	r2, r6, r0
 8016748:	fb00 6112 	mls	r1, r0, r2, r6
 801674c:	b28a      	uxth	r2, r1
 801674e:	6863      	ldr	r3, [r4, #4]
 8016750:	fbb3 f1f0 	udiv	r1, r3, r0
 8016754:	6823      	ldr	r3, [r4, #0]
 8016756:	fb02 f101 	mul.w	r1, r2, r1
 801675a:	3104      	adds	r1, #4
 801675c:	4419      	add	r1, r3
 801675e:	4658      	mov	r0, fp
 8016760:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016764:	9200      	str	r2, [sp, #0]
 8016766:	2300      	movs	r3, #0
 8016768:	463a      	mov	r2, r7
 801676a:	f7f7 feb1 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 801676e:	464a      	mov	r2, r9
 8016770:	2300      	movs	r3, #0
 8016772:	210d      	movs	r1, #13
 8016774:	4658      	mov	r0, fp
 8016776:	f7fa f921 	bl	80109bc <uxr_buffer_submessage_header>
 801677a:	8921      	ldrh	r1, [r4, #8]
 801677c:	fbb6 f2f1 	udiv	r2, r6, r1
 8016780:	fb01 6212 	mls	r2, r1, r2, r6
 8016784:	b292      	uxth	r2, r2
 8016786:	6863      	ldr	r3, [r4, #4]
 8016788:	fbb3 f3f1 	udiv	r3, r3, r1
 801678c:	fb02 f303 	mul.w	r3, r2, r3
 8016790:	6822      	ldr	r2, [r4, #0]
 8016792:	4630      	mov	r0, r6
 8016794:	50d7      	str	r7, [r2, r3]
 8016796:	2101      	movs	r1, #1
 8016798:	f000 f9c4 	bl	8016b24 <uxr_seq_num_add>
 801679c:	f10a 0a01 	add.w	sl, sl, #1
 80167a0:	fa1f f38a 	uxth.w	r3, sl
 80167a4:	429d      	cmp	r5, r3
 80167a6:	4606      	mov	r6, r0
 80167a8:	d8ca      	bhi.n	8016740 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80167aa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80167ae:	9d05      	ldr	r5, [sp, #20]
 80167b0:	8920      	ldrh	r0, [r4, #8]
 80167b2:	fbb6 f3f0 	udiv	r3, r6, r0
 80167b6:	fb00 6313 	mls	r3, r0, r3, r6
 80167ba:	b299      	uxth	r1, r3
 80167bc:	6863      	ldr	r3, [r4, #4]
 80167be:	fbb3 f3f0 	udiv	r3, r3, r0
 80167c2:	fb01 f303 	mul.w	r3, r1, r3
 80167c6:	6821      	ldr	r1, [r4, #0]
 80167c8:	3304      	adds	r3, #4
 80167ca:	4419      	add	r1, r3
 80167cc:	463a      	mov	r2, r7
 80167ce:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80167d2:	9000      	str	r0, [sp, #0]
 80167d4:	2300      	movs	r3, #0
 80167d6:	4658      	mov	r0, fp
 80167d8:	f7f7 fe7a 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 80167dc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80167e0:	4658      	mov	r0, fp
 80167e2:	fa1f f289 	uxth.w	r2, r9
 80167e6:	2302      	movs	r3, #2
 80167e8:	210d      	movs	r1, #13
 80167ea:	f7fa f8e7 	bl	80109bc <uxr_buffer_submessage_header>
 80167ee:	9b03      	ldr	r3, [sp, #12]
 80167f0:	8927      	ldrh	r7, [r4, #8]
 80167f2:	7b20      	ldrb	r0, [r4, #12]
 80167f4:	f108 0104 	add.w	r1, r8, #4
 80167f8:	440b      	add	r3, r1
 80167fa:	4619      	mov	r1, r3
 80167fc:	fbb6 f3f7 	udiv	r3, r6, r7
 8016800:	fb07 6313 	mls	r3, r7, r3, r6
 8016804:	f1a5 0208 	sub.w	r2, r5, #8
 8016808:	b29d      	uxth	r5, r3
 801680a:	3004      	adds	r0, #4
 801680c:	6863      	ldr	r3, [r4, #4]
 801680e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016812:	fb05 f303 	mul.w	r3, r5, r3
 8016816:	6825      	ldr	r5, [r4, #0]
 8016818:	4448      	add	r0, r9
 801681a:	50e8      	str	r0, [r5, r3]
 801681c:	9d04      	ldr	r5, [sp, #16]
 801681e:	eba2 0208 	sub.w	r2, r2, r8
 8016822:	4628      	mov	r0, r5
 8016824:	f7f7 fe66 	bl	800e4f4 <ucdr_init_buffer>
 8016828:	4628      	mov	r0, r5
 801682a:	493c      	ldr	r1, [pc, #240]	@ (801691c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801682c:	4622      	mov	r2, r4
 801682e:	f7f7 fe35 	bl	800e49c <ucdr_set_on_full_buffer_callback>
 8016832:	2001      	movs	r0, #1
 8016834:	81e6      	strh	r6, [r4, #14]
 8016836:	b011      	add	sp, #68	@ 0x44
 8016838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801683c:	2101      	movs	r1, #1
 801683e:	89e0      	ldrh	r0, [r4, #14]
 8016840:	f000 f970 	bl	8016b24 <uxr_seq_num_add>
 8016844:	8921      	ldrh	r1, [r4, #8]
 8016846:	4605      	mov	r5, r0
 8016848:	8a60      	ldrh	r0, [r4, #18]
 801684a:	f000 f96b 	bl	8016b24 <uxr_seq_num_add>
 801684e:	4601      	mov	r1, r0
 8016850:	4628      	mov	r0, r5
 8016852:	f000 f96f 	bl	8016b34 <uxr_seq_num_cmp>
 8016856:	2800      	cmp	r0, #0
 8016858:	dd42      	ble.n	80168e0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801685a:	2000      	movs	r0, #0
 801685c:	b011      	add	sp, #68	@ 0x44
 801685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016862:	8921      	ldrh	r1, [r4, #8]
 8016864:	8a60      	ldrh	r0, [r4, #18]
 8016866:	9205      	str	r2, [sp, #20]
 8016868:	f000 f95c 	bl	8016b24 <uxr_seq_num_add>
 801686c:	4601      	mov	r1, r0
 801686e:	4630      	mov	r0, r6
 8016870:	f000 f960 	bl	8016b34 <uxr_seq_num_cmp>
 8016874:	2800      	cmp	r0, #0
 8016876:	9a05      	ldr	r2, [sp, #20]
 8016878:	dcef      	bgt.n	801685a <uxr_prepare_reliable_buffer_to_write+0x216>
 801687a:	8927      	ldrh	r7, [r4, #8]
 801687c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016880:	fb07 6313 	mls	r3, r7, r3, r6
 8016884:	b29d      	uxth	r5, r3
 8016886:	6863      	ldr	r3, [r4, #4]
 8016888:	6824      	ldr	r4, [r4, #0]
 801688a:	fbb3 f3f7 	udiv	r3, r3, r7
 801688e:	fb05 f303 	mul.w	r3, r5, r3
 8016892:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016896:	50e2      	str	r2, [r4, r3]
 8016898:	2300      	movs	r3, #0
 801689a:	f8cd 8000 	str.w	r8, [sp]
 801689e:	f7f7 fe17 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 80168a2:	2001      	movs	r0, #1
 80168a4:	e7da      	b.n	801685c <uxr_prepare_reliable_buffer_to_write+0x218>
 80168a6:	b293      	uxth	r3, r2
 80168a8:	461a      	mov	r2, r3
 80168aa:	e737      	b.n	801671c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80168ac:	4630      	mov	r0, r6
 80168ae:	2101      	movs	r1, #1
 80168b0:	9207      	str	r2, [sp, #28]
 80168b2:	f000 f937 	bl	8016b24 <uxr_seq_num_add>
 80168b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80168ba:	fbb0 f1fc 	udiv	r1, r0, ip
 80168be:	fb0c 0111 	mls	r1, ip, r1, r0
 80168c2:	4606      	mov	r6, r0
 80168c4:	b288      	uxth	r0, r1
 80168c6:	6863      	ldr	r3, [r4, #4]
 80168c8:	fbb3 f1fc 	udiv	r1, r3, ip
 80168cc:	6823      	ldr	r3, [r4, #0]
 80168ce:	9a07      	ldr	r2, [sp, #28]
 80168d0:	fb00 f101 	mul.w	r1, r0, r1
 80168d4:	3104      	adds	r1, #4
 80168d6:	440b      	add	r3, r1
 80168d8:	9303      	str	r3, [sp, #12]
 80168da:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80168de:	e70a      	b.n	80166f6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80168e0:	8921      	ldrh	r1, [r4, #8]
 80168e2:	fbb5 f3f1 	udiv	r3, r5, r1
 80168e6:	fb01 5313 	mls	r3, r1, r3, r5
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	6863      	ldr	r3, [r4, #4]
 80168ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80168f2:	6821      	ldr	r1, [r4, #0]
 80168f4:	9804      	ldr	r0, [sp, #16]
 80168f6:	fb02 f303 	mul.w	r3, r2, r3
 80168fa:	3304      	adds	r3, #4
 80168fc:	7b22      	ldrb	r2, [r4, #12]
 80168fe:	4419      	add	r1, r3
 8016900:	445a      	add	r2, fp
 8016902:	f841 2c04 	str.w	r2, [r1, #-4]
 8016906:	7b23      	ldrb	r3, [r4, #12]
 8016908:	9300      	str	r3, [sp, #0]
 801690a:	2300      	movs	r3, #0
 801690c:	f7f7 fde0 	bl	800e4d0 <ucdr_init_buffer_origin_offset>
 8016910:	81e5      	strh	r5, [r4, #14]
 8016912:	2001      	movs	r0, #1
 8016914:	e7a2      	b.n	801685c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016916:	4682      	mov	sl, r0
 8016918:	e6ca      	b.n	80166b0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801691a:	bf00      	nop
 801691c:	08016525 	.word	0x08016525

08016920 <uxr_prepare_next_reliable_buffer_to_send>:
 8016920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016922:	4604      	mov	r4, r0
 8016924:	460f      	mov	r7, r1
 8016926:	8a00      	ldrh	r0, [r0, #16]
 8016928:	2101      	movs	r1, #1
 801692a:	4616      	mov	r6, r2
 801692c:	461d      	mov	r5, r3
 801692e:	f000 f8f9 	bl	8016b24 <uxr_seq_num_add>
 8016932:	8028      	strh	r0, [r5, #0]
 8016934:	8922      	ldrh	r2, [r4, #8]
 8016936:	fbb0 f3f2 	udiv	r3, r0, r2
 801693a:	fb02 0c13 	mls	ip, r2, r3, r0
 801693e:	fa1f fc8c 	uxth.w	ip, ip
 8016942:	6863      	ldr	r3, [r4, #4]
 8016944:	fbb3 f3f2 	udiv	r3, r3, r2
 8016948:	fb0c fc03 	mul.w	ip, ip, r3
 801694c:	6823      	ldr	r3, [r4, #0]
 801694e:	89e1      	ldrh	r1, [r4, #14]
 8016950:	f10c 0c04 	add.w	ip, ip, #4
 8016954:	4463      	add	r3, ip
 8016956:	603b      	str	r3, [r7, #0]
 8016958:	6823      	ldr	r3, [r4, #0]
 801695a:	449c      	add	ip, r3
 801695c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016960:	6033      	str	r3, [r6, #0]
 8016962:	f000 f8e7 	bl	8016b34 <uxr_seq_num_cmp>
 8016966:	2800      	cmp	r0, #0
 8016968:	dd01      	ble.n	801696e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801696a:	2000      	movs	r0, #0
 801696c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801696e:	7b23      	ldrb	r3, [r4, #12]
 8016970:	6832      	ldr	r2, [r6, #0]
 8016972:	429a      	cmp	r2, r3
 8016974:	d9f9      	bls.n	801696a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016976:	8a61      	ldrh	r1, [r4, #18]
 8016978:	8a20      	ldrh	r0, [r4, #16]
 801697a:	f000 f8d7 	bl	8016b2c <uxr_seq_num_sub>
 801697e:	8923      	ldrh	r3, [r4, #8]
 8016980:	4283      	cmp	r3, r0
 8016982:	d0f2      	beq.n	801696a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016984:	8828      	ldrh	r0, [r5, #0]
 8016986:	89e3      	ldrh	r3, [r4, #14]
 8016988:	8220      	strh	r0, [r4, #16]
 801698a:	4298      	cmp	r0, r3
 801698c:	d001      	beq.n	8016992 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801698e:	2001      	movs	r0, #1
 8016990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016992:	2101      	movs	r1, #1
 8016994:	f000 f8c6 	bl	8016b24 <uxr_seq_num_add>
 8016998:	81e0      	strh	r0, [r4, #14]
 801699a:	2001      	movs	r0, #1
 801699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801699e:	bf00      	nop

080169a0 <uxr_update_output_stream_heartbeat_timestamp>:
 80169a0:	b570      	push	{r4, r5, r6, lr}
 80169a2:	8a01      	ldrh	r1, [r0, #16]
 80169a4:	4604      	mov	r4, r0
 80169a6:	8a40      	ldrh	r0, [r0, #18]
 80169a8:	4615      	mov	r5, r2
 80169aa:	461e      	mov	r6, r3
 80169ac:	f000 f8c2 	bl	8016b34 <uxr_seq_num_cmp>
 80169b0:	2800      	cmp	r0, #0
 80169b2:	db07      	blt.n	80169c4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80169b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80169bc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80169c0:	2000      	movs	r0, #0
 80169c2:	bd70      	pop	{r4, r5, r6, pc}
 80169c4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80169c8:	b940      	cbnz	r0, 80169dc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80169ca:	2301      	movs	r3, #1
 80169cc:	f884 3020 	strb.w	r3, [r4, #32]
 80169d0:	3564      	adds	r5, #100	@ 0x64
 80169d2:	f146 0600 	adc.w	r6, r6, #0
 80169d6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80169da:	bd70      	pop	{r4, r5, r6, pc}
 80169dc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80169e0:	4295      	cmp	r5, r2
 80169e2:	eb76 0303 	sbcs.w	r3, r6, r3
 80169e6:	bfa5      	ittet	ge
 80169e8:	3001      	addge	r0, #1
 80169ea:	f884 0020 	strbge.w	r0, [r4, #32]
 80169ee:	2000      	movlt	r0, #0
 80169f0:	2001      	movge	r0, #1
 80169f2:	e7ed      	b.n	80169d0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080169f4 <uxr_begin_output_nack_buffer_it>:
 80169f4:	8a40      	ldrh	r0, [r0, #18]
 80169f6:	4770      	bx	lr

080169f8 <uxr_next_reliable_nack_buffer_to_send>:
 80169f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169fc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016a00:	b082      	sub	sp, #8
 8016a02:	f1b8 0f00 	cmp.w	r8, #0
 8016a06:	d011      	beq.n	8016a2c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016a08:	4604      	mov	r4, r0
 8016a0a:	8818      	ldrh	r0, [r3, #0]
 8016a0c:	460e      	mov	r6, r1
 8016a0e:	4617      	mov	r7, r2
 8016a10:	461d      	mov	r5, r3
 8016a12:	2101      	movs	r1, #1
 8016a14:	f000 f886 	bl	8016b24 <uxr_seq_num_add>
 8016a18:	8028      	strh	r0, [r5, #0]
 8016a1a:	8a21      	ldrh	r1, [r4, #16]
 8016a1c:	f000 f88a 	bl	8016b34 <uxr_seq_num_cmp>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	dd07      	ble.n	8016a34 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016a24:	f04f 0800 	mov.w	r8, #0
 8016a28:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016a2c:	4640      	mov	r0, r8
 8016a2e:	b002      	add	sp, #8
 8016a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a34:	8921      	ldrh	r1, [r4, #8]
 8016a36:	8828      	ldrh	r0, [r5, #0]
 8016a38:	6823      	ldr	r3, [r4, #0]
 8016a3a:	fbb0 f2f1 	udiv	r2, r0, r1
 8016a3e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016a42:	fa1f f28c 	uxth.w	r2, ip
 8016a46:	9301      	str	r3, [sp, #4]
 8016a48:	6863      	ldr	r3, [r4, #4]
 8016a4a:	fbb3 fcf1 	udiv	ip, r3, r1
 8016a4e:	9b01      	ldr	r3, [sp, #4]
 8016a50:	fb02 fc0c 	mul.w	ip, r2, ip
 8016a54:	f10c 0c04 	add.w	ip, ip, #4
 8016a58:	4463      	add	r3, ip
 8016a5a:	6033      	str	r3, [r6, #0]
 8016a5c:	6823      	ldr	r3, [r4, #0]
 8016a5e:	4463      	add	r3, ip
 8016a60:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016a64:	603b      	str	r3, [r7, #0]
 8016a66:	7b22      	ldrb	r2, [r4, #12]
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d0d2      	beq.n	8016a12 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016a6c:	4640      	mov	r0, r8
 8016a6e:	b002      	add	sp, #8
 8016a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a74 <uxr_process_acknack>:
 8016a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a76:	4604      	mov	r4, r0
 8016a78:	460e      	mov	r6, r1
 8016a7a:	4610      	mov	r0, r2
 8016a7c:	2101      	movs	r1, #1
 8016a7e:	f000 f855 	bl	8016b2c <uxr_seq_num_sub>
 8016a82:	8a61      	ldrh	r1, [r4, #18]
 8016a84:	f000 f852 	bl	8016b2c <uxr_seq_num_sub>
 8016a88:	b1c0      	cbz	r0, 8016abc <uxr_process_acknack+0x48>
 8016a8a:	4605      	mov	r5, r0
 8016a8c:	2700      	movs	r7, #0
 8016a8e:	2101      	movs	r1, #1
 8016a90:	8a60      	ldrh	r0, [r4, #18]
 8016a92:	f000 f847 	bl	8016b24 <uxr_seq_num_add>
 8016a96:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016a9a:	fbb0 f1fc 	udiv	r1, r0, ip
 8016a9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016aa2:	fb0c 0111 	mls	r1, ip, r1, r0
 8016aa6:	b289      	uxth	r1, r1
 8016aa8:	3701      	adds	r7, #1
 8016aaa:	fbb3 f3fc 	udiv	r3, r3, ip
 8016aae:	fb01 f303 	mul.w	r3, r1, r3
 8016ab2:	42bd      	cmp	r5, r7
 8016ab4:	7b21      	ldrb	r1, [r4, #12]
 8016ab6:	8260      	strh	r0, [r4, #18]
 8016ab8:	50d1      	str	r1, [r2, r3]
 8016aba:	d1e8      	bne.n	8016a8e <uxr_process_acknack+0x1a>
 8016abc:	3e00      	subs	r6, #0
 8016abe:	f04f 0300 	mov.w	r3, #0
 8016ac2:	bf18      	it	ne
 8016ac4:	2601      	movne	r6, #1
 8016ac6:	f884 3020 	strb.w	r3, [r4, #32]
 8016aca:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016ad0 <uxr_is_output_up_to_date>:
 8016ad0:	8a01      	ldrh	r1, [r0, #16]
 8016ad2:	8a40      	ldrh	r0, [r0, #18]
 8016ad4:	b508      	push	{r3, lr}
 8016ad6:	f000 f82d 	bl	8016b34 <uxr_seq_num_cmp>
 8016ada:	fab0 f080 	clz	r0, r0
 8016ade:	0940      	lsrs	r0, r0, #5
 8016ae0:	bd08      	pop	{r3, pc}
 8016ae2:	bf00      	nop

08016ae4 <get_available_free_slots>:
 8016ae4:	8902      	ldrh	r2, [r0, #8]
 8016ae6:	b1da      	cbz	r2, 8016b20 <get_available_free_slots+0x3c>
 8016ae8:	b530      	push	{r4, r5, lr}
 8016aea:	2100      	movs	r1, #0
 8016aec:	6843      	ldr	r3, [r0, #4]
 8016aee:	6805      	ldr	r5, [r0, #0]
 8016af0:	7b04      	ldrb	r4, [r0, #12]
 8016af2:	fbb3 fef2 	udiv	lr, r3, r2
 8016af6:	4608      	mov	r0, r1
 8016af8:	460b      	mov	r3, r1
 8016afa:	fbb3 fcf2 	udiv	ip, r3, r2
 8016afe:	fb02 331c 	mls	r3, r2, ip, r3
 8016b02:	b29b      	uxth	r3, r3
 8016b04:	fb0e f303 	mul.w	r3, lr, r3
 8016b08:	3101      	adds	r1, #1
 8016b0a:	f855 c003 	ldr.w	ip, [r5, r3]
 8016b0e:	4564      	cmp	r4, ip
 8016b10:	bf08      	it	eq
 8016b12:	3001      	addeq	r0, #1
 8016b14:	b28b      	uxth	r3, r1
 8016b16:	bf08      	it	eq
 8016b18:	b280      	uxtheq	r0, r0
 8016b1a:	4293      	cmp	r3, r2
 8016b1c:	d3ed      	bcc.n	8016afa <get_available_free_slots+0x16>
 8016b1e:	bd30      	pop	{r4, r5, pc}
 8016b20:	4610      	mov	r0, r2
 8016b22:	4770      	bx	lr

08016b24 <uxr_seq_num_add>:
 8016b24:	4408      	add	r0, r1
 8016b26:	b280      	uxth	r0, r0
 8016b28:	4770      	bx	lr
 8016b2a:	bf00      	nop

08016b2c <uxr_seq_num_sub>:
 8016b2c:	1a40      	subs	r0, r0, r1
 8016b2e:	b280      	uxth	r0, r0
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop

08016b34 <uxr_seq_num_cmp>:
 8016b34:	4288      	cmp	r0, r1
 8016b36:	d011      	beq.n	8016b5c <uxr_seq_num_cmp+0x28>
 8016b38:	d309      	bcc.n	8016b4e <uxr_seq_num_cmp+0x1a>
 8016b3a:	4288      	cmp	r0, r1
 8016b3c:	d910      	bls.n	8016b60 <uxr_seq_num_cmp+0x2c>
 8016b3e:	1a40      	subs	r0, r0, r1
 8016b40:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016b44:	bfd4      	ite	le
 8016b46:	2001      	movle	r0, #1
 8016b48:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016b4c:	4770      	bx	lr
 8016b4e:	1a0b      	subs	r3, r1, r0
 8016b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016b54:	daf1      	bge.n	8016b3a <uxr_seq_num_cmp+0x6>
 8016b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b5a:	4770      	bx	lr
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	4770      	bx	lr
 8016b60:	2001      	movs	r0, #1
 8016b62:	4770      	bx	lr

08016b64 <rcl_get_default_domain_id>:
 8016b64:	b530      	push	{r4, r5, lr}
 8016b66:	b083      	sub	sp, #12
 8016b68:	2300      	movs	r3, #0
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	b1d0      	cbz	r0, 8016ba4 <rcl_get_default_domain_id+0x40>
 8016b6e:	4604      	mov	r4, r0
 8016b70:	4669      	mov	r1, sp
 8016b72:	4815      	ldr	r0, [pc, #84]	@ (8016bc8 <rcl_get_default_domain_id+0x64>)
 8016b74:	f7fd ff2c 	bl	80149d0 <rcutils_get_env>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	b110      	cbz	r0, 8016b82 <rcl_get_default_domain_id+0x1e>
 8016b7c:	2001      	movs	r0, #1
 8016b7e:	b003      	add	sp, #12
 8016b80:	bd30      	pop	{r4, r5, pc}
 8016b82:	9b00      	ldr	r3, [sp, #0]
 8016b84:	b18b      	cbz	r3, 8016baa <rcl_get_default_domain_id+0x46>
 8016b86:	7818      	ldrb	r0, [r3, #0]
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	d0f8      	beq.n	8016b7e <rcl_get_default_domain_id+0x1a>
 8016b8c:	a901      	add	r1, sp, #4
 8016b8e:	4618      	mov	r0, r3
 8016b90:	9201      	str	r2, [sp, #4]
 8016b92:	f000 fdc9 	bl	8017728 <strtoul>
 8016b96:	4605      	mov	r5, r0
 8016b98:	b150      	cbz	r0, 8016bb0 <rcl_get_default_domain_id+0x4c>
 8016b9a:	1c43      	adds	r3, r0, #1
 8016b9c:	d00d      	beq.n	8016bba <rcl_get_default_domain_id+0x56>
 8016b9e:	6025      	str	r5, [r4, #0]
 8016ba0:	2000      	movs	r0, #0
 8016ba2:	e7ec      	b.n	8016b7e <rcl_get_default_domain_id+0x1a>
 8016ba4:	200b      	movs	r0, #11
 8016ba6:	b003      	add	sp, #12
 8016ba8:	bd30      	pop	{r4, r5, pc}
 8016baa:	4618      	mov	r0, r3
 8016bac:	b003      	add	sp, #12
 8016bae:	bd30      	pop	{r4, r5, pc}
 8016bb0:	9b01      	ldr	r3, [sp, #4]
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d0f2      	beq.n	8016b9e <rcl_get_default_domain_id+0x3a>
 8016bb8:	e7e0      	b.n	8016b7c <rcl_get_default_domain_id+0x18>
 8016bba:	f001 f801 	bl	8017bc0 <__errno>
 8016bbe:	6803      	ldr	r3, [r0, #0]
 8016bc0:	2b22      	cmp	r3, #34	@ 0x22
 8016bc2:	d1ec      	bne.n	8016b9e <rcl_get_default_domain_id+0x3a>
 8016bc4:	e7da      	b.n	8016b7c <rcl_get_default_domain_id+0x18>
 8016bc6:	bf00      	nop
 8016bc8:	08019664 	.word	0x08019664

08016bcc <rcl_expand_topic_name>:
 8016bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bd0:	b08b      	sub	sp, #44	@ 0x2c
 8016bd2:	9306      	str	r3, [sp, #24]
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	f000 80ad 	beq.w	8016d34 <rcl_expand_topic_name+0x168>
 8016bda:	460e      	mov	r6, r1
 8016bdc:	2900      	cmp	r1, #0
 8016bde:	f000 80a9 	beq.w	8016d34 <rcl_expand_topic_name+0x168>
 8016be2:	4617      	mov	r7, r2
 8016be4:	2a00      	cmp	r2, #0
 8016be6:	f000 80a5 	beq.w	8016d34 <rcl_expand_topic_name+0x168>
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	f000 80a2 	beq.w	8016d34 <rcl_expand_topic_name+0x168>
 8016bf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	f000 809e 	beq.w	8016d34 <rcl_expand_topic_name+0x168>
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	a909      	add	r1, sp, #36	@ 0x24
 8016bfc:	4680      	mov	r8, r0
 8016bfe:	f000 fa57 	bl	80170b0 <rcl_validate_topic_name>
 8016c02:	4604      	mov	r4, r0
 8016c04:	2800      	cmp	r0, #0
 8016c06:	f040 8096 	bne.w	8016d36 <rcl_expand_topic_name+0x16a>
 8016c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	f040 809a 	bne.w	8016d46 <rcl_expand_topic_name+0x17a>
 8016c12:	4602      	mov	r2, r0
 8016c14:	a909      	add	r1, sp, #36	@ 0x24
 8016c16:	4630      	mov	r0, r6
 8016c18:	f7fe fb04 	bl	8015224 <rmw_validate_node_name>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	f040 808e 	bne.w	8016d3e <rcl_expand_topic_name+0x172>
 8016c22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c24:	2a00      	cmp	r2, #0
 8016c26:	f040 8093 	bne.w	8016d50 <rcl_expand_topic_name+0x184>
 8016c2a:	a909      	add	r1, sp, #36	@ 0x24
 8016c2c:	4638      	mov	r0, r7
 8016c2e:	f7fe fadb 	bl	80151e8 <rmw_validate_namespace>
 8016c32:	2800      	cmp	r0, #0
 8016c34:	f040 8083 	bne.w	8016d3e <rcl_expand_topic_name+0x172>
 8016c38:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016c3a:	2c00      	cmp	r4, #0
 8016c3c:	f040 80ed 	bne.w	8016e1a <rcl_expand_topic_name+0x24e>
 8016c40:	217b      	movs	r1, #123	@ 0x7b
 8016c42:	4640      	mov	r0, r8
 8016c44:	f000 ff30 	bl	8017aa8 <strchr>
 8016c48:	f898 3000 	ldrb.w	r3, [r8]
 8016c4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c4e:	4605      	mov	r5, r0
 8016c50:	f000 809e 	beq.w	8016d90 <rcl_expand_topic_name+0x1c4>
 8016c54:	2b7e      	cmp	r3, #126	@ 0x7e
 8016c56:	f040 80a2 	bne.w	8016d9e <rcl_expand_topic_name+0x1d2>
 8016c5a:	4638      	mov	r0, r7
 8016c5c:	f7e9 faea 	bl	8000234 <strlen>
 8016c60:	4a82      	ldr	r2, [pc, #520]	@ (8016e6c <rcl_expand_topic_name+0x2a0>)
 8016c62:	4b83      	ldr	r3, [pc, #524]	@ (8016e70 <rcl_expand_topic_name+0x2a4>)
 8016c64:	2801      	cmp	r0, #1
 8016c66:	bf18      	it	ne
 8016c68:	4613      	movne	r3, r2
 8016c6a:	9302      	str	r3, [sp, #8]
 8016c6c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016c6e:	9300      	str	r3, [sp, #0]
 8016c70:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016c74:	f108 0301 	add.w	r3, r8, #1
 8016c78:	9305      	str	r3, [sp, #20]
 8016c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016c7e:	9301      	str	r3, [sp, #4]
 8016c80:	ab14      	add	r3, sp, #80	@ 0x50
 8016c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016c84:	f7fd fecc 	bl	8014a20 <rcutils_format_string_limit>
 8016c88:	4682      	mov	sl, r0
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	f000 80c7 	beq.w	8016e1e <rcl_expand_topic_name+0x252>
 8016c90:	2d00      	cmp	r5, #0
 8016c92:	f000 80a2 	beq.w	8016dda <rcl_expand_topic_name+0x20e>
 8016c96:	217b      	movs	r1, #123	@ 0x7b
 8016c98:	f000 ff06 	bl	8017aa8 <strchr>
 8016c9c:	46d1      	mov	r9, sl
 8016c9e:	4605      	mov	r5, r0
 8016ca0:	9407      	str	r4, [sp, #28]
 8016ca2:	46d3      	mov	fp, sl
 8016ca4:	464c      	mov	r4, r9
 8016ca6:	2d00      	cmp	r5, #0
 8016ca8:	f000 80be 	beq.w	8016e28 <rcl_expand_topic_name+0x25c>
 8016cac:	217d      	movs	r1, #125	@ 0x7d
 8016cae:	4620      	mov	r0, r4
 8016cb0:	f000 fefa 	bl	8017aa8 <strchr>
 8016cb4:	eba0 0905 	sub.w	r9, r0, r5
 8016cb8:	f109 0a01 	add.w	sl, r9, #1
 8016cbc:	486d      	ldr	r0, [pc, #436]	@ (8016e74 <rcl_expand_topic_name+0x2a8>)
 8016cbe:	4652      	mov	r2, sl
 8016cc0:	4629      	mov	r1, r5
 8016cc2:	f000 fefe 	bl	8017ac2 <strncmp>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	d067      	beq.n	8016d9a <rcl_expand_topic_name+0x1ce>
 8016cca:	486b      	ldr	r0, [pc, #428]	@ (8016e78 <rcl_expand_topic_name+0x2ac>)
 8016ccc:	4652      	mov	r2, sl
 8016cce:	4629      	mov	r1, r5
 8016cd0:	f000 fef7 	bl	8017ac2 <strncmp>
 8016cd4:	b130      	cbz	r0, 8016ce4 <rcl_expand_topic_name+0x118>
 8016cd6:	4869      	ldr	r0, [pc, #420]	@ (8016e7c <rcl_expand_topic_name+0x2b0>)
 8016cd8:	4652      	mov	r2, sl
 8016cda:	4629      	mov	r1, r5
 8016cdc:	f000 fef1 	bl	8017ac2 <strncmp>
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	d137      	bne.n	8016d54 <rcl_expand_topic_name+0x188>
 8016ce4:	46b9      	mov	r9, r7
 8016ce6:	ab16      	add	r3, sp, #88	@ 0x58
 8016ce8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016cec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016cf0:	ab14      	add	r3, sp, #80	@ 0x50
 8016cf2:	4628      	mov	r0, r5
 8016cf4:	cb0c      	ldmia	r3, {r2, r3}
 8016cf6:	4651      	mov	r1, sl
 8016cf8:	f7fd ffce 	bl	8014c98 <rcutils_strndup>
 8016cfc:	4605      	mov	r5, r0
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	f000 809c 	beq.w	8016e3c <rcl_expand_topic_name+0x270>
 8016d04:	464a      	mov	r2, r9
 8016d06:	4620      	mov	r0, r4
 8016d08:	ab14      	add	r3, sp, #80	@ 0x50
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	f7fd fec2 	bl	8014a94 <rcutils_repl_str>
 8016d10:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d14:	4604      	mov	r4, r0
 8016d16:	4628      	mov	r0, r5
 8016d18:	4798      	blx	r3
 8016d1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d1e:	4658      	mov	r0, fp
 8016d20:	4798      	blx	r3
 8016d22:	2c00      	cmp	r4, #0
 8016d24:	d07b      	beq.n	8016e1e <rcl_expand_topic_name+0x252>
 8016d26:	217b      	movs	r1, #123	@ 0x7b
 8016d28:	4620      	mov	r0, r4
 8016d2a:	f000 febd 	bl	8017aa8 <strchr>
 8016d2e:	46a3      	mov	fp, r4
 8016d30:	4605      	mov	r5, r0
 8016d32:	e7b8      	b.n	8016ca6 <rcl_expand_topic_name+0xda>
 8016d34:	240b      	movs	r4, #11
 8016d36:	4620      	mov	r0, r4
 8016d38:	b00b      	add	sp, #44	@ 0x2c
 8016d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d3e:	f7fb f875 	bl	8011e2c <rcl_convert_rmw_ret_to_rcl_ret>
 8016d42:	4604      	mov	r4, r0
 8016d44:	e7f7      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016d46:	2467      	movs	r4, #103	@ 0x67
 8016d48:	4620      	mov	r0, r4
 8016d4a:	b00b      	add	sp, #44	@ 0x2c
 8016d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d50:	24c9      	movs	r4, #201	@ 0xc9
 8016d52:	e7f0      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016d54:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016d58:	9806      	ldr	r0, [sp, #24]
 8016d5a:	1c69      	adds	r1, r5, #1
 8016d5c:	f7fe f8b6 	bl	8014ecc <rcutils_string_map_getn>
 8016d60:	4681      	mov	r9, r0
 8016d62:	2800      	cmp	r0, #0
 8016d64:	d1bf      	bne.n	8016ce6 <rcl_expand_topic_name+0x11a>
 8016d66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d68:	aa16      	add	r2, sp, #88	@ 0x58
 8016d6a:	6018      	str	r0, [r3, #0]
 8016d6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016d72:	ab14      	add	r3, sp, #80	@ 0x50
 8016d74:	cb0c      	ldmia	r3, {r2, r3}
 8016d76:	4651      	mov	r1, sl
 8016d78:	4628      	mov	r0, r5
 8016d7a:	f7fd ff8d 	bl	8014c98 <rcutils_strndup>
 8016d7e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d82:	4798      	blx	r3
 8016d84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d86:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d88:	4658      	mov	r0, fp
 8016d8a:	2469      	movs	r4, #105	@ 0x69
 8016d8c:	4798      	blx	r3
 8016d8e:	e7d2      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016d90:	2800      	cmp	r0, #0
 8016d92:	d05b      	beq.n	8016e4c <rcl_expand_topic_name+0x280>
 8016d94:	46c1      	mov	r9, r8
 8016d96:	46a2      	mov	sl, r4
 8016d98:	e782      	b.n	8016ca0 <rcl_expand_topic_name+0xd4>
 8016d9a:	46b1      	mov	r9, r6
 8016d9c:	e7a3      	b.n	8016ce6 <rcl_expand_topic_name+0x11a>
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	d1f8      	bne.n	8016d94 <rcl_expand_topic_name+0x1c8>
 8016da2:	4638      	mov	r0, r7
 8016da4:	f7e9 fa46 	bl	8000234 <strlen>
 8016da8:	4a35      	ldr	r2, [pc, #212]	@ (8016e80 <rcl_expand_topic_name+0x2b4>)
 8016daa:	4b36      	ldr	r3, [pc, #216]	@ (8016e84 <rcl_expand_topic_name+0x2b8>)
 8016dac:	f8cd 8010 	str.w	r8, [sp, #16]
 8016db0:	2801      	cmp	r0, #1
 8016db2:	bf18      	it	ne
 8016db4:	4613      	movne	r3, r2
 8016db6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016dba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016dbe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016dc0:	9703      	str	r7, [sp, #12]
 8016dc2:	9200      	str	r2, [sp, #0]
 8016dc4:	ab14      	add	r3, sp, #80	@ 0x50
 8016dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016dc8:	f7fd fe2a 	bl	8014a20 <rcutils_format_string_limit>
 8016dcc:	4682      	mov	sl, r0
 8016dce:	4653      	mov	r3, sl
 8016dd0:	b32b      	cbz	r3, 8016e1e <rcl_expand_topic_name+0x252>
 8016dd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016dd4:	f8c3 a000 	str.w	sl, [r3]
 8016dd8:	e7ad      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016dda:	f89a 3000 	ldrb.w	r3, [sl]
 8016dde:	2b2f      	cmp	r3, #47	@ 0x2f
 8016de0:	d0f7      	beq.n	8016dd2 <rcl_expand_topic_name+0x206>
 8016de2:	4638      	mov	r0, r7
 8016de4:	f7e9 fa26 	bl	8000234 <strlen>
 8016de8:	4a25      	ldr	r2, [pc, #148]	@ (8016e80 <rcl_expand_topic_name+0x2b4>)
 8016dea:	4b26      	ldr	r3, [pc, #152]	@ (8016e84 <rcl_expand_topic_name+0x2b8>)
 8016dec:	f8cd a010 	str.w	sl, [sp, #16]
 8016df0:	2801      	cmp	r0, #1
 8016df2:	bf18      	it	ne
 8016df4:	4613      	movne	r3, r2
 8016df6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016dfa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016dfe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016e00:	9703      	str	r7, [sp, #12]
 8016e02:	9200      	str	r2, [sp, #0]
 8016e04:	ab14      	add	r3, sp, #80	@ 0x50
 8016e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e08:	f7fd fe0a 	bl	8014a20 <rcutils_format_string_limit>
 8016e0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e0e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e10:	4605      	mov	r5, r0
 8016e12:	4650      	mov	r0, sl
 8016e14:	4798      	blx	r3
 8016e16:	46aa      	mov	sl, r5
 8016e18:	e7d9      	b.n	8016dce <rcl_expand_topic_name+0x202>
 8016e1a:	24ca      	movs	r4, #202	@ 0xca
 8016e1c:	e78b      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016e1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e20:	2300      	movs	r3, #0
 8016e22:	6013      	str	r3, [r2, #0]
 8016e24:	240a      	movs	r4, #10
 8016e26:	e786      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016e28:	465b      	mov	r3, fp
 8016e2a:	9c07      	ldr	r4, [sp, #28]
 8016e2c:	46da      	mov	sl, fp
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d1d3      	bne.n	8016dda <rcl_expand_topic_name+0x20e>
 8016e32:	f898 3000 	ldrb.w	r3, [r8]
 8016e36:	2b2f      	cmp	r3, #47	@ 0x2f
 8016e38:	d0cb      	beq.n	8016dd2 <rcl_expand_topic_name+0x206>
 8016e3a:	e7b2      	b.n	8016da2 <rcl_expand_topic_name+0x1d6>
 8016e3c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016e40:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e42:	6015      	str	r5, [r2, #0]
 8016e44:	4658      	mov	r0, fp
 8016e46:	4798      	blx	r3
 8016e48:	240a      	movs	r4, #10
 8016e4a:	e774      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016e4c:	ab17      	add	r3, sp, #92	@ 0x5c
 8016e4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016e52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016e56:	ab14      	add	r3, sp, #80	@ 0x50
 8016e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016e5a:	4640      	mov	r0, r8
 8016e5c:	f7fd fefa 	bl	8014c54 <rcutils_strdup>
 8016e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e62:	2800      	cmp	r0, #0
 8016e64:	6018      	str	r0, [r3, #0]
 8016e66:	bf08      	it	eq
 8016e68:	240a      	moveq	r4, #10
 8016e6a:	e764      	b.n	8016d36 <rcl_expand_topic_name+0x16a>
 8016e6c:	08019674 	.word	0x08019674
 8016e70:	08018c8c 	.word	0x08018c8c
 8016e74:	0801967c 	.word	0x0801967c
 8016e78:	08019684 	.word	0x08019684
 8016e7c:	0801968c 	.word	0x0801968c
 8016e80:	08018c54 	.word	0x08018c54
 8016e84:	08018c9c 	.word	0x08018c9c

08016e88 <rcl_get_default_topic_name_substitutions>:
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	bf0c      	ite	eq
 8016e8c:	200b      	moveq	r0, #11
 8016e8e:	2000      	movne	r0, #0
 8016e90:	4770      	bx	lr
 8016e92:	bf00      	nop

08016e94 <rcl_get_zero_initialized_guard_condition>:
 8016e94:	4a03      	ldr	r2, [pc, #12]	@ (8016ea4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016e96:	4603      	mov	r3, r0
 8016e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	4770      	bx	lr
 8016ea4:	08019698 	.word	0x08019698

08016ea8 <rcl_guard_condition_init>:
 8016ea8:	b082      	sub	sp, #8
 8016eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eac:	b087      	sub	sp, #28
 8016eae:	ac0c      	add	r4, sp, #48	@ 0x30
 8016eb0:	e884 000c 	stmia.w	r4, {r2, r3}
 8016eb4:	46a6      	mov	lr, r4
 8016eb6:	460d      	mov	r5, r1
 8016eb8:	4604      	mov	r4, r0
 8016eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ebe:	f10d 0c04 	add.w	ip, sp, #4
 8016ec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ec6:	f8de 3000 	ldr.w	r3, [lr]
 8016eca:	f8cc 3000 	str.w	r3, [ip]
 8016ece:	a801      	add	r0, sp, #4
 8016ed0:	f7f5 f860 	bl	800bf94 <rcutils_allocator_is_valid>
 8016ed4:	b338      	cbz	r0, 8016f26 <rcl_guard_condition_init+0x7e>
 8016ed6:	b334      	cbz	r4, 8016f26 <rcl_guard_condition_init+0x7e>
 8016ed8:	6866      	ldr	r6, [r4, #4]
 8016eda:	b9ee      	cbnz	r6, 8016f18 <rcl_guard_condition_init+0x70>
 8016edc:	b31d      	cbz	r5, 8016f26 <rcl_guard_condition_init+0x7e>
 8016ede:	4628      	mov	r0, r5
 8016ee0:	f7fa ffc2 	bl	8011e68 <rcl_context_is_valid>
 8016ee4:	b308      	cbz	r0, 8016f2a <rcl_guard_condition_init+0x82>
 8016ee6:	9b01      	ldr	r3, [sp, #4]
 8016ee8:	9905      	ldr	r1, [sp, #20]
 8016eea:	201c      	movs	r0, #28
 8016eec:	4798      	blx	r3
 8016eee:	4607      	mov	r7, r0
 8016ef0:	6060      	str	r0, [r4, #4]
 8016ef2:	b310      	cbz	r0, 8016f3a <rcl_guard_condition_init+0x92>
 8016ef4:	6828      	ldr	r0, [r5, #0]
 8016ef6:	3028      	adds	r0, #40	@ 0x28
 8016ef8:	f000 f9ac 	bl	8017254 <rmw_create_guard_condition>
 8016efc:	6038      	str	r0, [r7, #0]
 8016efe:	6860      	ldr	r0, [r4, #4]
 8016f00:	6805      	ldr	r5, [r0, #0]
 8016f02:	b1a5      	cbz	r5, 8016f2e <rcl_guard_condition_init+0x86>
 8016f04:	2301      	movs	r3, #1
 8016f06:	ac01      	add	r4, sp, #4
 8016f08:	7103      	strb	r3, [r0, #4]
 8016f0a:	f100 0708 	add.w	r7, r0, #8
 8016f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f10:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016f12:	6823      	ldr	r3, [r4, #0]
 8016f14:	603b      	str	r3, [r7, #0]
 8016f16:	e000      	b.n	8016f1a <rcl_guard_condition_init+0x72>
 8016f18:	2664      	movs	r6, #100	@ 0x64
 8016f1a:	4630      	mov	r0, r6
 8016f1c:	b007      	add	sp, #28
 8016f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016f22:	b002      	add	sp, #8
 8016f24:	4770      	bx	lr
 8016f26:	260b      	movs	r6, #11
 8016f28:	e7f7      	b.n	8016f1a <rcl_guard_condition_init+0x72>
 8016f2a:	2665      	movs	r6, #101	@ 0x65
 8016f2c:	e7f5      	b.n	8016f1a <rcl_guard_condition_init+0x72>
 8016f2e:	9b02      	ldr	r3, [sp, #8]
 8016f30:	9905      	ldr	r1, [sp, #20]
 8016f32:	4798      	blx	r3
 8016f34:	2601      	movs	r6, #1
 8016f36:	6065      	str	r5, [r4, #4]
 8016f38:	e7ef      	b.n	8016f1a <rcl_guard_condition_init+0x72>
 8016f3a:	260a      	movs	r6, #10
 8016f3c:	e7ed      	b.n	8016f1a <rcl_guard_condition_init+0x72>
 8016f3e:	bf00      	nop

08016f40 <rcl_guard_condition_init_from_rmw>:
 8016f40:	b082      	sub	sp, #8
 8016f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f46:	b086      	sub	sp, #24
 8016f48:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016f4c:	4604      	mov	r4, r0
 8016f4e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016f52:	460e      	mov	r6, r1
 8016f54:	4617      	mov	r7, r2
 8016f56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016f5a:	f10d 0e04 	add.w	lr, sp, #4
 8016f5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016f62:	f8dc 3000 	ldr.w	r3, [ip]
 8016f66:	f8ce 3000 	str.w	r3, [lr]
 8016f6a:	a801      	add	r0, sp, #4
 8016f6c:	f7f5 f812 	bl	800bf94 <rcutils_allocator_is_valid>
 8016f70:	b350      	cbz	r0, 8016fc8 <rcl_guard_condition_init_from_rmw+0x88>
 8016f72:	b34c      	cbz	r4, 8016fc8 <rcl_guard_condition_init_from_rmw+0x88>
 8016f74:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016f78:	f1b8 0f00 	cmp.w	r8, #0
 8016f7c:	d11e      	bne.n	8016fbc <rcl_guard_condition_init_from_rmw+0x7c>
 8016f7e:	b31f      	cbz	r7, 8016fc8 <rcl_guard_condition_init_from_rmw+0x88>
 8016f80:	4638      	mov	r0, r7
 8016f82:	f7fa ff71 	bl	8011e68 <rcl_context_is_valid>
 8016f86:	b328      	cbz	r0, 8016fd4 <rcl_guard_condition_init_from_rmw+0x94>
 8016f88:	9b01      	ldr	r3, [sp, #4]
 8016f8a:	9905      	ldr	r1, [sp, #20]
 8016f8c:	201c      	movs	r0, #28
 8016f8e:	4798      	blx	r3
 8016f90:	4605      	mov	r5, r0
 8016f92:	6060      	str	r0, [r4, #4]
 8016f94:	b358      	cbz	r0, 8016fee <rcl_guard_condition_init_from_rmw+0xae>
 8016f96:	b1fe      	cbz	r6, 8016fd8 <rcl_guard_condition_init_from_rmw+0x98>
 8016f98:	6006      	str	r6, [r0, #0]
 8016f9a:	f880 8004 	strb.w	r8, [r0, #4]
 8016f9e:	ac01      	add	r4, sp, #4
 8016fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016fa2:	f105 0c08 	add.w	ip, r5, #8
 8016fa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016faa:	6823      	ldr	r3, [r4, #0]
 8016fac:	f8cc 3000 	str.w	r3, [ip]
 8016fb0:	2000      	movs	r0, #0
 8016fb2:	b006      	add	sp, #24
 8016fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb8:	b002      	add	sp, #8
 8016fba:	4770      	bx	lr
 8016fbc:	2064      	movs	r0, #100	@ 0x64
 8016fbe:	b006      	add	sp, #24
 8016fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc4:	b002      	add	sp, #8
 8016fc6:	4770      	bx	lr
 8016fc8:	200b      	movs	r0, #11
 8016fca:	b006      	add	sp, #24
 8016fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd0:	b002      	add	sp, #8
 8016fd2:	4770      	bx	lr
 8016fd4:	2065      	movs	r0, #101	@ 0x65
 8016fd6:	e7f2      	b.n	8016fbe <rcl_guard_condition_init_from_rmw+0x7e>
 8016fd8:	6838      	ldr	r0, [r7, #0]
 8016fda:	3028      	adds	r0, #40	@ 0x28
 8016fdc:	f000 f93a 	bl	8017254 <rmw_create_guard_condition>
 8016fe0:	6028      	str	r0, [r5, #0]
 8016fe2:	6865      	ldr	r5, [r4, #4]
 8016fe4:	682e      	ldr	r6, [r5, #0]
 8016fe6:	b126      	cbz	r6, 8016ff2 <rcl_guard_condition_init_from_rmw+0xb2>
 8016fe8:	2301      	movs	r3, #1
 8016fea:	712b      	strb	r3, [r5, #4]
 8016fec:	e7d7      	b.n	8016f9e <rcl_guard_condition_init_from_rmw+0x5e>
 8016fee:	200a      	movs	r0, #10
 8016ff0:	e7e5      	b.n	8016fbe <rcl_guard_condition_init_from_rmw+0x7e>
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	9b02      	ldr	r3, [sp, #8]
 8016ff6:	9905      	ldr	r1, [sp, #20]
 8016ff8:	4798      	blx	r3
 8016ffa:	6066      	str	r6, [r4, #4]
 8016ffc:	2001      	movs	r0, #1
 8016ffe:	e7de      	b.n	8016fbe <rcl_guard_condition_init_from_rmw+0x7e>

08017000 <rcl_guard_condition_fini>:
 8017000:	b570      	push	{r4, r5, r6, lr}
 8017002:	b082      	sub	sp, #8
 8017004:	b1f0      	cbz	r0, 8017044 <rcl_guard_condition_fini+0x44>
 8017006:	6843      	ldr	r3, [r0, #4]
 8017008:	4604      	mov	r4, r0
 801700a:	b163      	cbz	r3, 8017026 <rcl_guard_condition_fini+0x26>
 801700c:	6818      	ldr	r0, [r3, #0]
 801700e:	68de      	ldr	r6, [r3, #12]
 8017010:	6999      	ldr	r1, [r3, #24]
 8017012:	b160      	cbz	r0, 801702e <rcl_guard_condition_fini+0x2e>
 8017014:	791d      	ldrb	r5, [r3, #4]
 8017016:	b965      	cbnz	r5, 8017032 <rcl_guard_condition_fini+0x32>
 8017018:	4618      	mov	r0, r3
 801701a:	47b0      	blx	r6
 801701c:	2300      	movs	r3, #0
 801701e:	4628      	mov	r0, r5
 8017020:	6063      	str	r3, [r4, #4]
 8017022:	b002      	add	sp, #8
 8017024:	bd70      	pop	{r4, r5, r6, pc}
 8017026:	461d      	mov	r5, r3
 8017028:	4628      	mov	r0, r5
 801702a:	b002      	add	sp, #8
 801702c:	bd70      	pop	{r4, r5, r6, pc}
 801702e:	4605      	mov	r5, r0
 8017030:	e7f2      	b.n	8017018 <rcl_guard_condition_fini+0x18>
 8017032:	9101      	str	r1, [sp, #4]
 8017034:	f000 f922 	bl	801727c <rmw_destroy_guard_condition>
 8017038:	1e05      	subs	r5, r0, #0
 801703a:	6863      	ldr	r3, [r4, #4]
 801703c:	9901      	ldr	r1, [sp, #4]
 801703e:	bf18      	it	ne
 8017040:	2501      	movne	r5, #1
 8017042:	e7e9      	b.n	8017018 <rcl_guard_condition_fini+0x18>
 8017044:	250b      	movs	r5, #11
 8017046:	4628      	mov	r0, r5
 8017048:	b002      	add	sp, #8
 801704a:	bd70      	pop	{r4, r5, r6, pc}

0801704c <rcl_guard_condition_get_default_options>:
 801704c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801704e:	b087      	sub	sp, #28
 8017050:	4606      	mov	r6, r0
 8017052:	4668      	mov	r0, sp
 8017054:	f7f4 ff90 	bl	800bf78 <rcutils_get_default_allocator>
 8017058:	4b09      	ldr	r3, [pc, #36]	@ (8017080 <rcl_guard_condition_get_default_options+0x34>)
 801705a:	46ee      	mov	lr, sp
 801705c:	469c      	mov	ip, r3
 801705e:	461d      	mov	r5, r3
 8017060:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801706a:	4634      	mov	r4, r6
 801706c:	f8de 7000 	ldr.w	r7, [lr]
 8017070:	f8cc 7000 	str.w	r7, [ip]
 8017074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017076:	4630      	mov	r0, r6
 8017078:	6027      	str	r7, [r4, #0]
 801707a:	b007      	add	sp, #28
 801707c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801707e:	bf00      	nop
 8017080:	2000cbb0 	.word	0x2000cbb0

08017084 <rcl_trigger_guard_condition>:
 8017084:	b148      	cbz	r0, 801709a <rcl_trigger_guard_condition+0x16>
 8017086:	b508      	push	{r3, lr}
 8017088:	6843      	ldr	r3, [r0, #4]
 801708a:	b143      	cbz	r3, 801709e <rcl_trigger_guard_condition+0x1a>
 801708c:	6818      	ldr	r0, [r3, #0]
 801708e:	f000 f909 	bl	80172a4 <rmw_trigger_guard_condition>
 8017092:	3800      	subs	r0, #0
 8017094:	bf18      	it	ne
 8017096:	2001      	movne	r0, #1
 8017098:	bd08      	pop	{r3, pc}
 801709a:	200b      	movs	r0, #11
 801709c:	4770      	bx	lr
 801709e:	200b      	movs	r0, #11
 80170a0:	bd08      	pop	{r3, pc}
 80170a2:	bf00      	nop

080170a4 <rcl_guard_condition_get_rmw_handle>:
 80170a4:	b110      	cbz	r0, 80170ac <rcl_guard_condition_get_rmw_handle+0x8>
 80170a6:	6840      	ldr	r0, [r0, #4]
 80170a8:	b100      	cbz	r0, 80170ac <rcl_guard_condition_get_rmw_handle+0x8>
 80170aa:	6800      	ldr	r0, [r0, #0]
 80170ac:	4770      	bx	lr
 80170ae:	bf00      	nop

080170b0 <rcl_validate_topic_name>:
 80170b0:	2800      	cmp	r0, #0
 80170b2:	d07a      	beq.n	80171aa <rcl_validate_topic_name+0xfa>
 80170b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170b8:	460e      	mov	r6, r1
 80170ba:	2900      	cmp	r1, #0
 80170bc:	d07c      	beq.n	80171b8 <rcl_validate_topic_name+0x108>
 80170be:	4617      	mov	r7, r2
 80170c0:	4605      	mov	r5, r0
 80170c2:	f7e9 f8b7 	bl	8000234 <strlen>
 80170c6:	b1b0      	cbz	r0, 80170f6 <rcl_validate_topic_name+0x46>
 80170c8:	f895 9000 	ldrb.w	r9, [r5]
 80170cc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017250 <rcl_validate_topic_name+0x1a0>
 80170d0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80170d4:	f013 0304 	ands.w	r3, r3, #4
 80170d8:	d169      	bne.n	80171ae <rcl_validate_topic_name+0xfe>
 80170da:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80170de:	f815 2008 	ldrb.w	r2, [r5, r8]
 80170e2:	2a2f      	cmp	r2, #47	@ 0x2f
 80170e4:	d10e      	bne.n	8017104 <rcl_validate_topic_name+0x54>
 80170e6:	2202      	movs	r2, #2
 80170e8:	6032      	str	r2, [r6, #0]
 80170ea:	b36f      	cbz	r7, 8017148 <rcl_validate_topic_name+0x98>
 80170ec:	f8c7 8000 	str.w	r8, [r7]
 80170f0:	4618      	mov	r0, r3
 80170f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170f6:	2301      	movs	r3, #1
 80170f8:	6033      	str	r3, [r6, #0]
 80170fa:	b32f      	cbz	r7, 8017148 <rcl_validate_topic_name+0x98>
 80170fc:	2000      	movs	r0, #0
 80170fe:	6038      	str	r0, [r7, #0]
 8017100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017104:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017108:	461c      	mov	r4, r3
 801710a:	4619      	mov	r1, r3
 801710c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017110:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017114:	f1be 0f09 	cmp.w	lr, #9
 8017118:	d919      	bls.n	801714e <rcl_validate_topic_name+0x9e>
 801711a:	f022 0e20 	bic.w	lr, r2, #32
 801711e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017122:	f1be 0f19 	cmp.w	lr, #25
 8017126:	d912      	bls.n	801714e <rcl_validate_topic_name+0x9e>
 8017128:	2a5f      	cmp	r2, #95	@ 0x5f
 801712a:	d019      	beq.n	8017160 <rcl_validate_topic_name+0xb0>
 801712c:	2a2f      	cmp	r2, #47	@ 0x2f
 801712e:	d051      	beq.n	80171d4 <rcl_validate_topic_name+0x124>
 8017130:	2a7e      	cmp	r2, #126	@ 0x7e
 8017132:	d048      	beq.n	80171c6 <rcl_validate_topic_name+0x116>
 8017134:	2a7b      	cmp	r2, #123	@ 0x7b
 8017136:	d054      	beq.n	80171e2 <rcl_validate_topic_name+0x132>
 8017138:	2a7d      	cmp	r2, #125	@ 0x7d
 801713a:	d161      	bne.n	8017200 <rcl_validate_topic_name+0x150>
 801713c:	2c00      	cmp	r4, #0
 801713e:	d155      	bne.n	80171ec <rcl_validate_topic_name+0x13c>
 8017140:	2305      	movs	r3, #5
 8017142:	6033      	str	r3, [r6, #0]
 8017144:	b107      	cbz	r7, 8017148 <rcl_validate_topic_name+0x98>
 8017146:	6039      	str	r1, [r7, #0]
 8017148:	2000      	movs	r0, #0
 801714a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801714e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017152:	0752      	lsls	r2, r2, #29
 8017154:	d504      	bpl.n	8017160 <rcl_validate_topic_name+0xb0>
 8017156:	b11c      	cbz	r4, 8017160 <rcl_validate_topic_name+0xb0>
 8017158:	b111      	cbz	r1, 8017160 <rcl_validate_topic_name+0xb0>
 801715a:	1e4a      	subs	r2, r1, #1
 801715c:	429a      	cmp	r2, r3
 801715e:	d02d      	beq.n	80171bc <rcl_validate_topic_name+0x10c>
 8017160:	3101      	adds	r1, #1
 8017162:	4288      	cmp	r0, r1
 8017164:	d1d2      	bne.n	801710c <rcl_validate_topic_name+0x5c>
 8017166:	2c00      	cmp	r4, #0
 8017168:	d145      	bne.n	80171f6 <rcl_validate_topic_name+0x146>
 801716a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801716e:	d04f      	beq.n	8017210 <rcl_validate_topic_name+0x160>
 8017170:	4620      	mov	r0, r4
 8017172:	2301      	movs	r3, #1
 8017174:	e006      	b.n	8017184 <rcl_validate_topic_name+0xd4>
 8017176:	428b      	cmp	r3, r1
 8017178:	f105 0501 	add.w	r5, r5, #1
 801717c:	f103 0201 	add.w	r2, r3, #1
 8017180:	d236      	bcs.n	80171f0 <rcl_validate_topic_name+0x140>
 8017182:	4613      	mov	r3, r2
 8017184:	4580      	cmp	r8, r0
 8017186:	f100 0001 	add.w	r0, r0, #1
 801718a:	d0f4      	beq.n	8017176 <rcl_validate_topic_name+0xc6>
 801718c:	782a      	ldrb	r2, [r5, #0]
 801718e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017190:	d1f1      	bne.n	8017176 <rcl_validate_topic_name+0xc6>
 8017192:	786a      	ldrb	r2, [r5, #1]
 8017194:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017198:	0754      	lsls	r4, r2, #29
 801719a:	d5ec      	bpl.n	8017176 <rcl_validate_topic_name+0xc6>
 801719c:	2204      	movs	r2, #4
 801719e:	6032      	str	r2, [r6, #0]
 80171a0:	2f00      	cmp	r7, #0
 80171a2:	d0d1      	beq.n	8017148 <rcl_validate_topic_name+0x98>
 80171a4:	603b      	str	r3, [r7, #0]
 80171a6:	2000      	movs	r0, #0
 80171a8:	e7aa      	b.n	8017100 <rcl_validate_topic_name+0x50>
 80171aa:	200b      	movs	r0, #11
 80171ac:	4770      	bx	lr
 80171ae:	2304      	movs	r3, #4
 80171b0:	6033      	str	r3, [r6, #0]
 80171b2:	2f00      	cmp	r7, #0
 80171b4:	d1a2      	bne.n	80170fc <rcl_validate_topic_name+0x4c>
 80171b6:	e7c7      	b.n	8017148 <rcl_validate_topic_name+0x98>
 80171b8:	200b      	movs	r0, #11
 80171ba:	e7a1      	b.n	8017100 <rcl_validate_topic_name+0x50>
 80171bc:	2309      	movs	r3, #9
 80171be:	6033      	str	r3, [r6, #0]
 80171c0:	2f00      	cmp	r7, #0
 80171c2:	d1c0      	bne.n	8017146 <rcl_validate_topic_name+0x96>
 80171c4:	e7c0      	b.n	8017148 <rcl_validate_topic_name+0x98>
 80171c6:	2900      	cmp	r1, #0
 80171c8:	d0ca      	beq.n	8017160 <rcl_validate_topic_name+0xb0>
 80171ca:	2306      	movs	r3, #6
 80171cc:	6033      	str	r3, [r6, #0]
 80171ce:	2f00      	cmp	r7, #0
 80171d0:	d1b9      	bne.n	8017146 <rcl_validate_topic_name+0x96>
 80171d2:	e7b9      	b.n	8017148 <rcl_validate_topic_name+0x98>
 80171d4:	2c00      	cmp	r4, #0
 80171d6:	d0c3      	beq.n	8017160 <rcl_validate_topic_name+0xb0>
 80171d8:	2308      	movs	r3, #8
 80171da:	6033      	str	r3, [r6, #0]
 80171dc:	2f00      	cmp	r7, #0
 80171de:	d1b2      	bne.n	8017146 <rcl_validate_topic_name+0x96>
 80171e0:	e7b2      	b.n	8017148 <rcl_validate_topic_name+0x98>
 80171e2:	2c00      	cmp	r4, #0
 80171e4:	d1f8      	bne.n	80171d8 <rcl_validate_topic_name+0x128>
 80171e6:	460b      	mov	r3, r1
 80171e8:	2401      	movs	r4, #1
 80171ea:	e7b9      	b.n	8017160 <rcl_validate_topic_name+0xb0>
 80171ec:	2400      	movs	r4, #0
 80171ee:	e7b7      	b.n	8017160 <rcl_validate_topic_name+0xb0>
 80171f0:	2000      	movs	r0, #0
 80171f2:	6030      	str	r0, [r6, #0]
 80171f4:	e784      	b.n	8017100 <rcl_validate_topic_name+0x50>
 80171f6:	2205      	movs	r2, #5
 80171f8:	6032      	str	r2, [r6, #0]
 80171fa:	2f00      	cmp	r7, #0
 80171fc:	d1d2      	bne.n	80171a4 <rcl_validate_topic_name+0xf4>
 80171fe:	e7a3      	b.n	8017148 <rcl_validate_topic_name+0x98>
 8017200:	2c00      	cmp	r4, #0
 8017202:	bf14      	ite	ne
 8017204:	2308      	movne	r3, #8
 8017206:	2303      	moveq	r3, #3
 8017208:	6033      	str	r3, [r6, #0]
 801720a:	2f00      	cmp	r7, #0
 801720c:	d19b      	bne.n	8017146 <rcl_validate_topic_name+0x96>
 801720e:	e79b      	b.n	8017148 <rcl_validate_topic_name+0x98>
 8017210:	2301      	movs	r3, #1
 8017212:	e00a      	b.n	801722a <rcl_validate_topic_name+0x17a>
 8017214:	2c01      	cmp	r4, #1
 8017216:	d013      	beq.n	8017240 <rcl_validate_topic_name+0x190>
 8017218:	4299      	cmp	r1, r3
 801721a:	f104 0401 	add.w	r4, r4, #1
 801721e:	f105 0501 	add.w	r5, r5, #1
 8017222:	f103 0201 	add.w	r2, r3, #1
 8017226:	d9e3      	bls.n	80171f0 <rcl_validate_topic_name+0x140>
 8017228:	4613      	mov	r3, r2
 801722a:	45a0      	cmp	r8, r4
 801722c:	d0f4      	beq.n	8017218 <rcl_validate_topic_name+0x168>
 801722e:	782a      	ldrb	r2, [r5, #0]
 8017230:	2a2f      	cmp	r2, #47	@ 0x2f
 8017232:	d1ef      	bne.n	8017214 <rcl_validate_topic_name+0x164>
 8017234:	786a      	ldrb	r2, [r5, #1]
 8017236:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801723a:	0752      	lsls	r2, r2, #29
 801723c:	d5ec      	bpl.n	8017218 <rcl_validate_topic_name+0x168>
 801723e:	e7ad      	b.n	801719c <rcl_validate_topic_name+0xec>
 8017240:	2307      	movs	r3, #7
 8017242:	6033      	str	r3, [r6, #0]
 8017244:	2f00      	cmp	r7, #0
 8017246:	f43f af7f 	beq.w	8017148 <rcl_validate_topic_name+0x98>
 801724a:	603c      	str	r4, [r7, #0]
 801724c:	2000      	movs	r0, #0
 801724e:	e757      	b.n	8017100 <rcl_validate_topic_name+0x50>
 8017250:	08019710 	.word	0x08019710

08017254 <rmw_create_guard_condition>:
 8017254:	b538      	push	{r3, r4, r5, lr}
 8017256:	4605      	mov	r5, r0
 8017258:	4807      	ldr	r0, [pc, #28]	@ (8017278 <rmw_create_guard_condition+0x24>)
 801725a:	f7fe f929 	bl	80154b0 <get_memory>
 801725e:	b148      	cbz	r0, 8017274 <rmw_create_guard_condition+0x20>
 8017260:	6884      	ldr	r4, [r0, #8]
 8017262:	2300      	movs	r3, #0
 8017264:	7423      	strb	r3, [r4, #16]
 8017266:	61e5      	str	r5, [r4, #28]
 8017268:	f7fe f98a 	bl	8015580 <rmw_get_implementation_identifier>
 801726c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017270:	f104 0014 	add.w	r0, r4, #20
 8017274:	bd38      	pop	{r3, r4, r5, pc}
 8017276:	bf00      	nop
 8017278:	2000ca4c 	.word	0x2000ca4c

0801727c <rmw_destroy_guard_condition>:
 801727c:	b508      	push	{r3, lr}
 801727e:	4b08      	ldr	r3, [pc, #32]	@ (80172a0 <rmw_destroy_guard_condition+0x24>)
 8017280:	6819      	ldr	r1, [r3, #0]
 8017282:	b911      	cbnz	r1, 801728a <rmw_destroy_guard_condition+0xe>
 8017284:	e00a      	b.n	801729c <rmw_destroy_guard_condition+0x20>
 8017286:	6849      	ldr	r1, [r1, #4]
 8017288:	b141      	cbz	r1, 801729c <rmw_destroy_guard_condition+0x20>
 801728a:	688b      	ldr	r3, [r1, #8]
 801728c:	3314      	adds	r3, #20
 801728e:	4298      	cmp	r0, r3
 8017290:	d1f9      	bne.n	8017286 <rmw_destroy_guard_condition+0xa>
 8017292:	4803      	ldr	r0, [pc, #12]	@ (80172a0 <rmw_destroy_guard_condition+0x24>)
 8017294:	f7fe f91c 	bl	80154d0 <put_memory>
 8017298:	2000      	movs	r0, #0
 801729a:	bd08      	pop	{r3, pc}
 801729c:	2001      	movs	r0, #1
 801729e:	bd08      	pop	{r3, pc}
 80172a0:	2000ca4c 	.word	0x2000ca4c

080172a4 <rmw_trigger_guard_condition>:
 80172a4:	b160      	cbz	r0, 80172c0 <rmw_trigger_guard_condition+0x1c>
 80172a6:	b510      	push	{r4, lr}
 80172a8:	4604      	mov	r4, r0
 80172aa:	6800      	ldr	r0, [r0, #0]
 80172ac:	f7f6 f87e 	bl	800d3ac <is_uxrce_rmw_identifier_valid>
 80172b0:	b908      	cbnz	r0, 80172b6 <rmw_trigger_guard_condition+0x12>
 80172b2:	2001      	movs	r0, #1
 80172b4:	bd10      	pop	{r4, pc}
 80172b6:	6863      	ldr	r3, [r4, #4]
 80172b8:	2201      	movs	r2, #1
 80172ba:	741a      	strb	r2, [r3, #16]
 80172bc:	2000      	movs	r0, #0
 80172be:	bd10      	pop	{r4, pc}
 80172c0:	2001      	movs	r0, #1
 80172c2:	4770      	bx	lr

080172c4 <calloc>:
 80172c4:	4b02      	ldr	r3, [pc, #8]	@ (80172d0 <calloc+0xc>)
 80172c6:	460a      	mov	r2, r1
 80172c8:	4601      	mov	r1, r0
 80172ca:	6818      	ldr	r0, [r3, #0]
 80172cc:	f000 b802 	b.w	80172d4 <_calloc_r>
 80172d0:	20000144 	.word	0x20000144

080172d4 <_calloc_r>:
 80172d4:	b570      	push	{r4, r5, r6, lr}
 80172d6:	fba1 5402 	umull	r5, r4, r1, r2
 80172da:	b93c      	cbnz	r4, 80172ec <_calloc_r+0x18>
 80172dc:	4629      	mov	r1, r5
 80172de:	f000 f887 	bl	80173f0 <_malloc_r>
 80172e2:	4606      	mov	r6, r0
 80172e4:	b928      	cbnz	r0, 80172f2 <_calloc_r+0x1e>
 80172e6:	2600      	movs	r6, #0
 80172e8:	4630      	mov	r0, r6
 80172ea:	bd70      	pop	{r4, r5, r6, pc}
 80172ec:	220c      	movs	r2, #12
 80172ee:	6002      	str	r2, [r0, #0]
 80172f0:	e7f9      	b.n	80172e6 <_calloc_r+0x12>
 80172f2:	462a      	mov	r2, r5
 80172f4:	4621      	mov	r1, r4
 80172f6:	f000 fbcf 	bl	8017a98 <memset>
 80172fa:	e7f5      	b.n	80172e8 <_calloc_r+0x14>

080172fc <getenv>:
 80172fc:	b507      	push	{r0, r1, r2, lr}
 80172fe:	4b04      	ldr	r3, [pc, #16]	@ (8017310 <getenv+0x14>)
 8017300:	4601      	mov	r1, r0
 8017302:	aa01      	add	r2, sp, #4
 8017304:	6818      	ldr	r0, [r3, #0]
 8017306:	f000 f805 	bl	8017314 <_findenv_r>
 801730a:	b003      	add	sp, #12
 801730c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017310:	20000144 	.word	0x20000144

08017314 <_findenv_r>:
 8017314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017318:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017388 <_findenv_r+0x74>
 801731c:	4606      	mov	r6, r0
 801731e:	4689      	mov	r9, r1
 8017320:	4617      	mov	r7, r2
 8017322:	f000 fcaf 	bl	8017c84 <__env_lock>
 8017326:	f8da 4000 	ldr.w	r4, [sl]
 801732a:	b134      	cbz	r4, 801733a <_findenv_r+0x26>
 801732c:	464b      	mov	r3, r9
 801732e:	4698      	mov	r8, r3
 8017330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017334:	b13a      	cbz	r2, 8017346 <_findenv_r+0x32>
 8017336:	2a3d      	cmp	r2, #61	@ 0x3d
 8017338:	d1f9      	bne.n	801732e <_findenv_r+0x1a>
 801733a:	4630      	mov	r0, r6
 801733c:	f000 fca8 	bl	8017c90 <__env_unlock>
 8017340:	2000      	movs	r0, #0
 8017342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017346:	eba8 0809 	sub.w	r8, r8, r9
 801734a:	46a3      	mov	fp, r4
 801734c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017350:	2800      	cmp	r0, #0
 8017352:	d0f2      	beq.n	801733a <_findenv_r+0x26>
 8017354:	4642      	mov	r2, r8
 8017356:	4649      	mov	r1, r9
 8017358:	f000 fbb3 	bl	8017ac2 <strncmp>
 801735c:	2800      	cmp	r0, #0
 801735e:	d1f4      	bne.n	801734a <_findenv_r+0x36>
 8017360:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017364:	eb03 0508 	add.w	r5, r3, r8
 8017368:	f813 3008 	ldrb.w	r3, [r3, r8]
 801736c:	2b3d      	cmp	r3, #61	@ 0x3d
 801736e:	d1ec      	bne.n	801734a <_findenv_r+0x36>
 8017370:	f8da 3000 	ldr.w	r3, [sl]
 8017374:	ebab 0303 	sub.w	r3, fp, r3
 8017378:	109b      	asrs	r3, r3, #2
 801737a:	4630      	mov	r0, r6
 801737c:	603b      	str	r3, [r7, #0]
 801737e:	f000 fc87 	bl	8017c90 <__env_unlock>
 8017382:	1c68      	adds	r0, r5, #1
 8017384:	e7dd      	b.n	8017342 <_findenv_r+0x2e>
 8017386:	bf00      	nop
 8017388:	20000000 	.word	0x20000000

0801738c <malloc>:
 801738c:	4b02      	ldr	r3, [pc, #8]	@ (8017398 <malloc+0xc>)
 801738e:	4601      	mov	r1, r0
 8017390:	6818      	ldr	r0, [r3, #0]
 8017392:	f000 b82d 	b.w	80173f0 <_malloc_r>
 8017396:	bf00      	nop
 8017398:	20000144 	.word	0x20000144

0801739c <free>:
 801739c:	4b02      	ldr	r3, [pc, #8]	@ (80173a8 <free+0xc>)
 801739e:	4601      	mov	r1, r0
 80173a0:	6818      	ldr	r0, [r3, #0]
 80173a2:	f000 bc7b 	b.w	8017c9c <_free_r>
 80173a6:	bf00      	nop
 80173a8:	20000144 	.word	0x20000144

080173ac <sbrk_aligned>:
 80173ac:	b570      	push	{r4, r5, r6, lr}
 80173ae:	4e0f      	ldr	r6, [pc, #60]	@ (80173ec <sbrk_aligned+0x40>)
 80173b0:	460c      	mov	r4, r1
 80173b2:	6831      	ldr	r1, [r6, #0]
 80173b4:	4605      	mov	r5, r0
 80173b6:	b911      	cbnz	r1, 80173be <sbrk_aligned+0x12>
 80173b8:	f000 fbe0 	bl	8017b7c <_sbrk_r>
 80173bc:	6030      	str	r0, [r6, #0]
 80173be:	4621      	mov	r1, r4
 80173c0:	4628      	mov	r0, r5
 80173c2:	f000 fbdb 	bl	8017b7c <_sbrk_r>
 80173c6:	1c43      	adds	r3, r0, #1
 80173c8:	d103      	bne.n	80173d2 <sbrk_aligned+0x26>
 80173ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80173ce:	4620      	mov	r0, r4
 80173d0:	bd70      	pop	{r4, r5, r6, pc}
 80173d2:	1cc4      	adds	r4, r0, #3
 80173d4:	f024 0403 	bic.w	r4, r4, #3
 80173d8:	42a0      	cmp	r0, r4
 80173da:	d0f8      	beq.n	80173ce <sbrk_aligned+0x22>
 80173dc:	1a21      	subs	r1, r4, r0
 80173de:	4628      	mov	r0, r5
 80173e0:	f000 fbcc 	bl	8017b7c <_sbrk_r>
 80173e4:	3001      	adds	r0, #1
 80173e6:	d1f2      	bne.n	80173ce <sbrk_aligned+0x22>
 80173e8:	e7ef      	b.n	80173ca <sbrk_aligned+0x1e>
 80173ea:	bf00      	nop
 80173ec:	2000cbc4 	.word	0x2000cbc4

080173f0 <_malloc_r>:
 80173f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173f4:	1ccd      	adds	r5, r1, #3
 80173f6:	f025 0503 	bic.w	r5, r5, #3
 80173fa:	3508      	adds	r5, #8
 80173fc:	2d0c      	cmp	r5, #12
 80173fe:	bf38      	it	cc
 8017400:	250c      	movcc	r5, #12
 8017402:	2d00      	cmp	r5, #0
 8017404:	4606      	mov	r6, r0
 8017406:	db01      	blt.n	801740c <_malloc_r+0x1c>
 8017408:	42a9      	cmp	r1, r5
 801740a:	d904      	bls.n	8017416 <_malloc_r+0x26>
 801740c:	230c      	movs	r3, #12
 801740e:	6033      	str	r3, [r6, #0]
 8017410:	2000      	movs	r0, #0
 8017412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80174ec <_malloc_r+0xfc>
 801741a:	f000 f869 	bl	80174f0 <__malloc_lock>
 801741e:	f8d8 3000 	ldr.w	r3, [r8]
 8017422:	461c      	mov	r4, r3
 8017424:	bb44      	cbnz	r4, 8017478 <_malloc_r+0x88>
 8017426:	4629      	mov	r1, r5
 8017428:	4630      	mov	r0, r6
 801742a:	f7ff ffbf 	bl	80173ac <sbrk_aligned>
 801742e:	1c43      	adds	r3, r0, #1
 8017430:	4604      	mov	r4, r0
 8017432:	d158      	bne.n	80174e6 <_malloc_r+0xf6>
 8017434:	f8d8 4000 	ldr.w	r4, [r8]
 8017438:	4627      	mov	r7, r4
 801743a:	2f00      	cmp	r7, #0
 801743c:	d143      	bne.n	80174c6 <_malloc_r+0xd6>
 801743e:	2c00      	cmp	r4, #0
 8017440:	d04b      	beq.n	80174da <_malloc_r+0xea>
 8017442:	6823      	ldr	r3, [r4, #0]
 8017444:	4639      	mov	r1, r7
 8017446:	4630      	mov	r0, r6
 8017448:	eb04 0903 	add.w	r9, r4, r3
 801744c:	f000 fb96 	bl	8017b7c <_sbrk_r>
 8017450:	4581      	cmp	r9, r0
 8017452:	d142      	bne.n	80174da <_malloc_r+0xea>
 8017454:	6821      	ldr	r1, [r4, #0]
 8017456:	1a6d      	subs	r5, r5, r1
 8017458:	4629      	mov	r1, r5
 801745a:	4630      	mov	r0, r6
 801745c:	f7ff ffa6 	bl	80173ac <sbrk_aligned>
 8017460:	3001      	adds	r0, #1
 8017462:	d03a      	beq.n	80174da <_malloc_r+0xea>
 8017464:	6823      	ldr	r3, [r4, #0]
 8017466:	442b      	add	r3, r5
 8017468:	6023      	str	r3, [r4, #0]
 801746a:	f8d8 3000 	ldr.w	r3, [r8]
 801746e:	685a      	ldr	r2, [r3, #4]
 8017470:	bb62      	cbnz	r2, 80174cc <_malloc_r+0xdc>
 8017472:	f8c8 7000 	str.w	r7, [r8]
 8017476:	e00f      	b.n	8017498 <_malloc_r+0xa8>
 8017478:	6822      	ldr	r2, [r4, #0]
 801747a:	1b52      	subs	r2, r2, r5
 801747c:	d420      	bmi.n	80174c0 <_malloc_r+0xd0>
 801747e:	2a0b      	cmp	r2, #11
 8017480:	d917      	bls.n	80174b2 <_malloc_r+0xc2>
 8017482:	1961      	adds	r1, r4, r5
 8017484:	42a3      	cmp	r3, r4
 8017486:	6025      	str	r5, [r4, #0]
 8017488:	bf18      	it	ne
 801748a:	6059      	strne	r1, [r3, #4]
 801748c:	6863      	ldr	r3, [r4, #4]
 801748e:	bf08      	it	eq
 8017490:	f8c8 1000 	streq.w	r1, [r8]
 8017494:	5162      	str	r2, [r4, r5]
 8017496:	604b      	str	r3, [r1, #4]
 8017498:	4630      	mov	r0, r6
 801749a:	f000 f82f 	bl	80174fc <__malloc_unlock>
 801749e:	f104 000b 	add.w	r0, r4, #11
 80174a2:	1d23      	adds	r3, r4, #4
 80174a4:	f020 0007 	bic.w	r0, r0, #7
 80174a8:	1ac2      	subs	r2, r0, r3
 80174aa:	bf1c      	itt	ne
 80174ac:	1a1b      	subne	r3, r3, r0
 80174ae:	50a3      	strne	r3, [r4, r2]
 80174b0:	e7af      	b.n	8017412 <_malloc_r+0x22>
 80174b2:	6862      	ldr	r2, [r4, #4]
 80174b4:	42a3      	cmp	r3, r4
 80174b6:	bf0c      	ite	eq
 80174b8:	f8c8 2000 	streq.w	r2, [r8]
 80174bc:	605a      	strne	r2, [r3, #4]
 80174be:	e7eb      	b.n	8017498 <_malloc_r+0xa8>
 80174c0:	4623      	mov	r3, r4
 80174c2:	6864      	ldr	r4, [r4, #4]
 80174c4:	e7ae      	b.n	8017424 <_malloc_r+0x34>
 80174c6:	463c      	mov	r4, r7
 80174c8:	687f      	ldr	r7, [r7, #4]
 80174ca:	e7b6      	b.n	801743a <_malloc_r+0x4a>
 80174cc:	461a      	mov	r2, r3
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	42a3      	cmp	r3, r4
 80174d2:	d1fb      	bne.n	80174cc <_malloc_r+0xdc>
 80174d4:	2300      	movs	r3, #0
 80174d6:	6053      	str	r3, [r2, #4]
 80174d8:	e7de      	b.n	8017498 <_malloc_r+0xa8>
 80174da:	230c      	movs	r3, #12
 80174dc:	6033      	str	r3, [r6, #0]
 80174de:	4630      	mov	r0, r6
 80174e0:	f000 f80c 	bl	80174fc <__malloc_unlock>
 80174e4:	e794      	b.n	8017410 <_malloc_r+0x20>
 80174e6:	6005      	str	r5, [r0, #0]
 80174e8:	e7d6      	b.n	8017498 <_malloc_r+0xa8>
 80174ea:	bf00      	nop
 80174ec:	2000cbc8 	.word	0x2000cbc8

080174f0 <__malloc_lock>:
 80174f0:	4801      	ldr	r0, [pc, #4]	@ (80174f8 <__malloc_lock+0x8>)
 80174f2:	f000 bb90 	b.w	8017c16 <__retarget_lock_acquire_recursive>
 80174f6:	bf00      	nop
 80174f8:	2000cd0d 	.word	0x2000cd0d

080174fc <__malloc_unlock>:
 80174fc:	4801      	ldr	r0, [pc, #4]	@ (8017504 <__malloc_unlock+0x8>)
 80174fe:	f000 bb8b 	b.w	8017c18 <__retarget_lock_release_recursive>
 8017502:	bf00      	nop
 8017504:	2000cd0d 	.word	0x2000cd0d

08017508 <srand>:
 8017508:	b538      	push	{r3, r4, r5, lr}
 801750a:	4b10      	ldr	r3, [pc, #64]	@ (801754c <srand+0x44>)
 801750c:	681d      	ldr	r5, [r3, #0]
 801750e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017510:	4604      	mov	r4, r0
 8017512:	b9b3      	cbnz	r3, 8017542 <srand+0x3a>
 8017514:	2018      	movs	r0, #24
 8017516:	f7ff ff39 	bl	801738c <malloc>
 801751a:	4602      	mov	r2, r0
 801751c:	6328      	str	r0, [r5, #48]	@ 0x30
 801751e:	b920      	cbnz	r0, 801752a <srand+0x22>
 8017520:	4b0b      	ldr	r3, [pc, #44]	@ (8017550 <srand+0x48>)
 8017522:	480c      	ldr	r0, [pc, #48]	@ (8017554 <srand+0x4c>)
 8017524:	2146      	movs	r1, #70	@ 0x46
 8017526:	f000 fb8f 	bl	8017c48 <__assert_func>
 801752a:	490b      	ldr	r1, [pc, #44]	@ (8017558 <srand+0x50>)
 801752c:	4b0b      	ldr	r3, [pc, #44]	@ (801755c <srand+0x54>)
 801752e:	e9c0 1300 	strd	r1, r3, [r0]
 8017532:	4b0b      	ldr	r3, [pc, #44]	@ (8017560 <srand+0x58>)
 8017534:	6083      	str	r3, [r0, #8]
 8017536:	230b      	movs	r3, #11
 8017538:	8183      	strh	r3, [r0, #12]
 801753a:	2100      	movs	r1, #0
 801753c:	2001      	movs	r0, #1
 801753e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017542:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017544:	2200      	movs	r2, #0
 8017546:	611c      	str	r4, [r3, #16]
 8017548:	615a      	str	r2, [r3, #20]
 801754a:	bd38      	pop	{r3, r4, r5, pc}
 801754c:	20000144 	.word	0x20000144
 8017550:	080196a0 	.word	0x080196a0
 8017554:	080196b7 	.word	0x080196b7
 8017558:	abcd330e 	.word	0xabcd330e
 801755c:	e66d1234 	.word	0xe66d1234
 8017560:	0005deec 	.word	0x0005deec

08017564 <rand>:
 8017564:	4b16      	ldr	r3, [pc, #88]	@ (80175c0 <rand+0x5c>)
 8017566:	b510      	push	{r4, lr}
 8017568:	681c      	ldr	r4, [r3, #0]
 801756a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801756c:	b9b3      	cbnz	r3, 801759c <rand+0x38>
 801756e:	2018      	movs	r0, #24
 8017570:	f7ff ff0c 	bl	801738c <malloc>
 8017574:	4602      	mov	r2, r0
 8017576:	6320      	str	r0, [r4, #48]	@ 0x30
 8017578:	b920      	cbnz	r0, 8017584 <rand+0x20>
 801757a:	4b12      	ldr	r3, [pc, #72]	@ (80175c4 <rand+0x60>)
 801757c:	4812      	ldr	r0, [pc, #72]	@ (80175c8 <rand+0x64>)
 801757e:	2152      	movs	r1, #82	@ 0x52
 8017580:	f000 fb62 	bl	8017c48 <__assert_func>
 8017584:	4911      	ldr	r1, [pc, #68]	@ (80175cc <rand+0x68>)
 8017586:	4b12      	ldr	r3, [pc, #72]	@ (80175d0 <rand+0x6c>)
 8017588:	e9c0 1300 	strd	r1, r3, [r0]
 801758c:	4b11      	ldr	r3, [pc, #68]	@ (80175d4 <rand+0x70>)
 801758e:	6083      	str	r3, [r0, #8]
 8017590:	230b      	movs	r3, #11
 8017592:	8183      	strh	r3, [r0, #12]
 8017594:	2100      	movs	r1, #0
 8017596:	2001      	movs	r0, #1
 8017598:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801759c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801759e:	480e      	ldr	r0, [pc, #56]	@ (80175d8 <rand+0x74>)
 80175a0:	690b      	ldr	r3, [r1, #16]
 80175a2:	694c      	ldr	r4, [r1, #20]
 80175a4:	4a0d      	ldr	r2, [pc, #52]	@ (80175dc <rand+0x78>)
 80175a6:	4358      	muls	r0, r3
 80175a8:	fb02 0004 	mla	r0, r2, r4, r0
 80175ac:	fba3 3202 	umull	r3, r2, r3, r2
 80175b0:	3301      	adds	r3, #1
 80175b2:	eb40 0002 	adc.w	r0, r0, r2
 80175b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80175ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80175be:	bd10      	pop	{r4, pc}
 80175c0:	20000144 	.word	0x20000144
 80175c4:	080196a0 	.word	0x080196a0
 80175c8:	080196b7 	.word	0x080196b7
 80175cc:	abcd330e 	.word	0xabcd330e
 80175d0:	e66d1234 	.word	0xe66d1234
 80175d4:	0005deec 	.word	0x0005deec
 80175d8:	5851f42d 	.word	0x5851f42d
 80175dc:	4c957f2d 	.word	0x4c957f2d

080175e0 <realloc>:
 80175e0:	4b02      	ldr	r3, [pc, #8]	@ (80175ec <realloc+0xc>)
 80175e2:	460a      	mov	r2, r1
 80175e4:	4601      	mov	r1, r0
 80175e6:	6818      	ldr	r0, [r3, #0]
 80175e8:	f000 b802 	b.w	80175f0 <_realloc_r>
 80175ec:	20000144 	.word	0x20000144

080175f0 <_realloc_r>:
 80175f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f4:	4680      	mov	r8, r0
 80175f6:	4615      	mov	r5, r2
 80175f8:	460c      	mov	r4, r1
 80175fa:	b921      	cbnz	r1, 8017606 <_realloc_r+0x16>
 80175fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017600:	4611      	mov	r1, r2
 8017602:	f7ff bef5 	b.w	80173f0 <_malloc_r>
 8017606:	b92a      	cbnz	r2, 8017614 <_realloc_r+0x24>
 8017608:	f000 fb48 	bl	8017c9c <_free_r>
 801760c:	2400      	movs	r4, #0
 801760e:	4620      	mov	r0, r4
 8017610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017614:	f000 fb8c 	bl	8017d30 <_malloc_usable_size_r>
 8017618:	4285      	cmp	r5, r0
 801761a:	4606      	mov	r6, r0
 801761c:	d802      	bhi.n	8017624 <_realloc_r+0x34>
 801761e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017622:	d8f4      	bhi.n	801760e <_realloc_r+0x1e>
 8017624:	4629      	mov	r1, r5
 8017626:	4640      	mov	r0, r8
 8017628:	f7ff fee2 	bl	80173f0 <_malloc_r>
 801762c:	4607      	mov	r7, r0
 801762e:	2800      	cmp	r0, #0
 8017630:	d0ec      	beq.n	801760c <_realloc_r+0x1c>
 8017632:	42b5      	cmp	r5, r6
 8017634:	462a      	mov	r2, r5
 8017636:	4621      	mov	r1, r4
 8017638:	bf28      	it	cs
 801763a:	4632      	movcs	r2, r6
 801763c:	f000 faf5 	bl	8017c2a <memcpy>
 8017640:	4621      	mov	r1, r4
 8017642:	4640      	mov	r0, r8
 8017644:	f000 fb2a 	bl	8017c9c <_free_r>
 8017648:	463c      	mov	r4, r7
 801764a:	e7e0      	b.n	801760e <_realloc_r+0x1e>

0801764c <_strtoul_l.constprop.0>:
 801764c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017650:	4e34      	ldr	r6, [pc, #208]	@ (8017724 <_strtoul_l.constprop.0+0xd8>)
 8017652:	4686      	mov	lr, r0
 8017654:	460d      	mov	r5, r1
 8017656:	4628      	mov	r0, r5
 8017658:	f815 4b01 	ldrb.w	r4, [r5], #1
 801765c:	5d37      	ldrb	r7, [r6, r4]
 801765e:	f017 0708 	ands.w	r7, r7, #8
 8017662:	d1f8      	bne.n	8017656 <_strtoul_l.constprop.0+0xa>
 8017664:	2c2d      	cmp	r4, #45	@ 0x2d
 8017666:	d12f      	bne.n	80176c8 <_strtoul_l.constprop.0+0x7c>
 8017668:	782c      	ldrb	r4, [r5, #0]
 801766a:	2701      	movs	r7, #1
 801766c:	1c85      	adds	r5, r0, #2
 801766e:	f033 0010 	bics.w	r0, r3, #16
 8017672:	d109      	bne.n	8017688 <_strtoul_l.constprop.0+0x3c>
 8017674:	2c30      	cmp	r4, #48	@ 0x30
 8017676:	d12c      	bne.n	80176d2 <_strtoul_l.constprop.0+0x86>
 8017678:	7828      	ldrb	r0, [r5, #0]
 801767a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801767e:	2858      	cmp	r0, #88	@ 0x58
 8017680:	d127      	bne.n	80176d2 <_strtoul_l.constprop.0+0x86>
 8017682:	786c      	ldrb	r4, [r5, #1]
 8017684:	2310      	movs	r3, #16
 8017686:	3502      	adds	r5, #2
 8017688:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801768c:	2600      	movs	r6, #0
 801768e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017692:	fb03 f908 	mul.w	r9, r3, r8
 8017696:	ea6f 0909 	mvn.w	r9, r9
 801769a:	4630      	mov	r0, r6
 801769c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80176a0:	f1bc 0f09 	cmp.w	ip, #9
 80176a4:	d81c      	bhi.n	80176e0 <_strtoul_l.constprop.0+0x94>
 80176a6:	4664      	mov	r4, ip
 80176a8:	42a3      	cmp	r3, r4
 80176aa:	dd2a      	ble.n	8017702 <_strtoul_l.constprop.0+0xb6>
 80176ac:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80176b0:	d007      	beq.n	80176c2 <_strtoul_l.constprop.0+0x76>
 80176b2:	4580      	cmp	r8, r0
 80176b4:	d322      	bcc.n	80176fc <_strtoul_l.constprop.0+0xb0>
 80176b6:	d101      	bne.n	80176bc <_strtoul_l.constprop.0+0x70>
 80176b8:	45a1      	cmp	r9, r4
 80176ba:	db1f      	blt.n	80176fc <_strtoul_l.constprop.0+0xb0>
 80176bc:	fb00 4003 	mla	r0, r0, r3, r4
 80176c0:	2601      	movs	r6, #1
 80176c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176c6:	e7e9      	b.n	801769c <_strtoul_l.constprop.0+0x50>
 80176c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80176ca:	bf04      	itt	eq
 80176cc:	782c      	ldrbeq	r4, [r5, #0]
 80176ce:	1c85      	addeq	r5, r0, #2
 80176d0:	e7cd      	b.n	801766e <_strtoul_l.constprop.0+0x22>
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d1d8      	bne.n	8017688 <_strtoul_l.constprop.0+0x3c>
 80176d6:	2c30      	cmp	r4, #48	@ 0x30
 80176d8:	bf0c      	ite	eq
 80176da:	2308      	moveq	r3, #8
 80176dc:	230a      	movne	r3, #10
 80176de:	e7d3      	b.n	8017688 <_strtoul_l.constprop.0+0x3c>
 80176e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80176e4:	f1bc 0f19 	cmp.w	ip, #25
 80176e8:	d801      	bhi.n	80176ee <_strtoul_l.constprop.0+0xa2>
 80176ea:	3c37      	subs	r4, #55	@ 0x37
 80176ec:	e7dc      	b.n	80176a8 <_strtoul_l.constprop.0+0x5c>
 80176ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80176f2:	f1bc 0f19 	cmp.w	ip, #25
 80176f6:	d804      	bhi.n	8017702 <_strtoul_l.constprop.0+0xb6>
 80176f8:	3c57      	subs	r4, #87	@ 0x57
 80176fa:	e7d5      	b.n	80176a8 <_strtoul_l.constprop.0+0x5c>
 80176fc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017700:	e7df      	b.n	80176c2 <_strtoul_l.constprop.0+0x76>
 8017702:	1c73      	adds	r3, r6, #1
 8017704:	d106      	bne.n	8017714 <_strtoul_l.constprop.0+0xc8>
 8017706:	2322      	movs	r3, #34	@ 0x22
 8017708:	f8ce 3000 	str.w	r3, [lr]
 801770c:	4630      	mov	r0, r6
 801770e:	b932      	cbnz	r2, 801771e <_strtoul_l.constprop.0+0xd2>
 8017710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017714:	b107      	cbz	r7, 8017718 <_strtoul_l.constprop.0+0xcc>
 8017716:	4240      	negs	r0, r0
 8017718:	2a00      	cmp	r2, #0
 801771a:	d0f9      	beq.n	8017710 <_strtoul_l.constprop.0+0xc4>
 801771c:	b106      	cbz	r6, 8017720 <_strtoul_l.constprop.0+0xd4>
 801771e:	1e69      	subs	r1, r5, #1
 8017720:	6011      	str	r1, [r2, #0]
 8017722:	e7f5      	b.n	8017710 <_strtoul_l.constprop.0+0xc4>
 8017724:	08019710 	.word	0x08019710

08017728 <strtoul>:
 8017728:	4613      	mov	r3, r2
 801772a:	460a      	mov	r2, r1
 801772c:	4601      	mov	r1, r0
 801772e:	4802      	ldr	r0, [pc, #8]	@ (8017738 <strtoul+0x10>)
 8017730:	6800      	ldr	r0, [r0, #0]
 8017732:	f7ff bf8b 	b.w	801764c <_strtoul_l.constprop.0>
 8017736:	bf00      	nop
 8017738:	20000144 	.word	0x20000144

0801773c <std>:
 801773c:	2300      	movs	r3, #0
 801773e:	b510      	push	{r4, lr}
 8017740:	4604      	mov	r4, r0
 8017742:	e9c0 3300 	strd	r3, r3, [r0]
 8017746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801774a:	6083      	str	r3, [r0, #8]
 801774c:	8181      	strh	r1, [r0, #12]
 801774e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017750:	81c2      	strh	r2, [r0, #14]
 8017752:	6183      	str	r3, [r0, #24]
 8017754:	4619      	mov	r1, r3
 8017756:	2208      	movs	r2, #8
 8017758:	305c      	adds	r0, #92	@ 0x5c
 801775a:	f000 f99d 	bl	8017a98 <memset>
 801775e:	4b0d      	ldr	r3, [pc, #52]	@ (8017794 <std+0x58>)
 8017760:	6263      	str	r3, [r4, #36]	@ 0x24
 8017762:	4b0d      	ldr	r3, [pc, #52]	@ (8017798 <std+0x5c>)
 8017764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017766:	4b0d      	ldr	r3, [pc, #52]	@ (801779c <std+0x60>)
 8017768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801776a:	4b0d      	ldr	r3, [pc, #52]	@ (80177a0 <std+0x64>)
 801776c:	6323      	str	r3, [r4, #48]	@ 0x30
 801776e:	4b0d      	ldr	r3, [pc, #52]	@ (80177a4 <std+0x68>)
 8017770:	6224      	str	r4, [r4, #32]
 8017772:	429c      	cmp	r4, r3
 8017774:	d006      	beq.n	8017784 <std+0x48>
 8017776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801777a:	4294      	cmp	r4, r2
 801777c:	d002      	beq.n	8017784 <std+0x48>
 801777e:	33d0      	adds	r3, #208	@ 0xd0
 8017780:	429c      	cmp	r4, r3
 8017782:	d105      	bne.n	8017790 <std+0x54>
 8017784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801778c:	f000 ba42 	b.w	8017c14 <__retarget_lock_init_recursive>
 8017790:	bd10      	pop	{r4, pc}
 8017792:	bf00      	nop
 8017794:	0801794d 	.word	0x0801794d
 8017798:	0801796f 	.word	0x0801796f
 801779c:	080179a7 	.word	0x080179a7
 80177a0:	080179cb 	.word	0x080179cb
 80177a4:	2000cbcc 	.word	0x2000cbcc

080177a8 <stdio_exit_handler>:
 80177a8:	4a02      	ldr	r2, [pc, #8]	@ (80177b4 <stdio_exit_handler+0xc>)
 80177aa:	4903      	ldr	r1, [pc, #12]	@ (80177b8 <stdio_exit_handler+0x10>)
 80177ac:	4803      	ldr	r0, [pc, #12]	@ (80177bc <stdio_exit_handler+0x14>)
 80177ae:	f000 b869 	b.w	8017884 <_fwalk_sglue>
 80177b2:	bf00      	nop
 80177b4:	20000138 	.word	0x20000138
 80177b8:	08018699 	.word	0x08018699
 80177bc:	20000148 	.word	0x20000148

080177c0 <cleanup_stdio>:
 80177c0:	6841      	ldr	r1, [r0, #4]
 80177c2:	4b0c      	ldr	r3, [pc, #48]	@ (80177f4 <cleanup_stdio+0x34>)
 80177c4:	4299      	cmp	r1, r3
 80177c6:	b510      	push	{r4, lr}
 80177c8:	4604      	mov	r4, r0
 80177ca:	d001      	beq.n	80177d0 <cleanup_stdio+0x10>
 80177cc:	f000 ff64 	bl	8018698 <_fflush_r>
 80177d0:	68a1      	ldr	r1, [r4, #8]
 80177d2:	4b09      	ldr	r3, [pc, #36]	@ (80177f8 <cleanup_stdio+0x38>)
 80177d4:	4299      	cmp	r1, r3
 80177d6:	d002      	beq.n	80177de <cleanup_stdio+0x1e>
 80177d8:	4620      	mov	r0, r4
 80177da:	f000 ff5d 	bl	8018698 <_fflush_r>
 80177de:	68e1      	ldr	r1, [r4, #12]
 80177e0:	4b06      	ldr	r3, [pc, #24]	@ (80177fc <cleanup_stdio+0x3c>)
 80177e2:	4299      	cmp	r1, r3
 80177e4:	d004      	beq.n	80177f0 <cleanup_stdio+0x30>
 80177e6:	4620      	mov	r0, r4
 80177e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177ec:	f000 bf54 	b.w	8018698 <_fflush_r>
 80177f0:	bd10      	pop	{r4, pc}
 80177f2:	bf00      	nop
 80177f4:	2000cbcc 	.word	0x2000cbcc
 80177f8:	2000cc34 	.word	0x2000cc34
 80177fc:	2000cc9c 	.word	0x2000cc9c

08017800 <global_stdio_init.part.0>:
 8017800:	b510      	push	{r4, lr}
 8017802:	4b0b      	ldr	r3, [pc, #44]	@ (8017830 <global_stdio_init.part.0+0x30>)
 8017804:	4c0b      	ldr	r4, [pc, #44]	@ (8017834 <global_stdio_init.part.0+0x34>)
 8017806:	4a0c      	ldr	r2, [pc, #48]	@ (8017838 <global_stdio_init.part.0+0x38>)
 8017808:	601a      	str	r2, [r3, #0]
 801780a:	4620      	mov	r0, r4
 801780c:	2200      	movs	r2, #0
 801780e:	2104      	movs	r1, #4
 8017810:	f7ff ff94 	bl	801773c <std>
 8017814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017818:	2201      	movs	r2, #1
 801781a:	2109      	movs	r1, #9
 801781c:	f7ff ff8e 	bl	801773c <std>
 8017820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017824:	2202      	movs	r2, #2
 8017826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801782a:	2112      	movs	r1, #18
 801782c:	f7ff bf86 	b.w	801773c <std>
 8017830:	2000cd04 	.word	0x2000cd04
 8017834:	2000cbcc 	.word	0x2000cbcc
 8017838:	080177a9 	.word	0x080177a9

0801783c <__sfp_lock_acquire>:
 801783c:	4801      	ldr	r0, [pc, #4]	@ (8017844 <__sfp_lock_acquire+0x8>)
 801783e:	f000 b9ea 	b.w	8017c16 <__retarget_lock_acquire_recursive>
 8017842:	bf00      	nop
 8017844:	2000cd0e 	.word	0x2000cd0e

08017848 <__sfp_lock_release>:
 8017848:	4801      	ldr	r0, [pc, #4]	@ (8017850 <__sfp_lock_release+0x8>)
 801784a:	f000 b9e5 	b.w	8017c18 <__retarget_lock_release_recursive>
 801784e:	bf00      	nop
 8017850:	2000cd0e 	.word	0x2000cd0e

08017854 <__sinit>:
 8017854:	b510      	push	{r4, lr}
 8017856:	4604      	mov	r4, r0
 8017858:	f7ff fff0 	bl	801783c <__sfp_lock_acquire>
 801785c:	6a23      	ldr	r3, [r4, #32]
 801785e:	b11b      	cbz	r3, 8017868 <__sinit+0x14>
 8017860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017864:	f7ff bff0 	b.w	8017848 <__sfp_lock_release>
 8017868:	4b04      	ldr	r3, [pc, #16]	@ (801787c <__sinit+0x28>)
 801786a:	6223      	str	r3, [r4, #32]
 801786c:	4b04      	ldr	r3, [pc, #16]	@ (8017880 <__sinit+0x2c>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d1f5      	bne.n	8017860 <__sinit+0xc>
 8017874:	f7ff ffc4 	bl	8017800 <global_stdio_init.part.0>
 8017878:	e7f2      	b.n	8017860 <__sinit+0xc>
 801787a:	bf00      	nop
 801787c:	080177c1 	.word	0x080177c1
 8017880:	2000cd04 	.word	0x2000cd04

08017884 <_fwalk_sglue>:
 8017884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017888:	4607      	mov	r7, r0
 801788a:	4688      	mov	r8, r1
 801788c:	4614      	mov	r4, r2
 801788e:	2600      	movs	r6, #0
 8017890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017894:	f1b9 0901 	subs.w	r9, r9, #1
 8017898:	d505      	bpl.n	80178a6 <_fwalk_sglue+0x22>
 801789a:	6824      	ldr	r4, [r4, #0]
 801789c:	2c00      	cmp	r4, #0
 801789e:	d1f7      	bne.n	8017890 <_fwalk_sglue+0xc>
 80178a0:	4630      	mov	r0, r6
 80178a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178a6:	89ab      	ldrh	r3, [r5, #12]
 80178a8:	2b01      	cmp	r3, #1
 80178aa:	d907      	bls.n	80178bc <_fwalk_sglue+0x38>
 80178ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178b0:	3301      	adds	r3, #1
 80178b2:	d003      	beq.n	80178bc <_fwalk_sglue+0x38>
 80178b4:	4629      	mov	r1, r5
 80178b6:	4638      	mov	r0, r7
 80178b8:	47c0      	blx	r8
 80178ba:	4306      	orrs	r6, r0
 80178bc:	3568      	adds	r5, #104	@ 0x68
 80178be:	e7e9      	b.n	8017894 <_fwalk_sglue+0x10>

080178c0 <iprintf>:
 80178c0:	b40f      	push	{r0, r1, r2, r3}
 80178c2:	b507      	push	{r0, r1, r2, lr}
 80178c4:	4906      	ldr	r1, [pc, #24]	@ (80178e0 <iprintf+0x20>)
 80178c6:	ab04      	add	r3, sp, #16
 80178c8:	6808      	ldr	r0, [r1, #0]
 80178ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80178ce:	6881      	ldr	r1, [r0, #8]
 80178d0:	9301      	str	r3, [sp, #4]
 80178d2:	f000 fbb7 	bl	8018044 <_vfiprintf_r>
 80178d6:	b003      	add	sp, #12
 80178d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80178dc:	b004      	add	sp, #16
 80178de:	4770      	bx	lr
 80178e0:	20000144 	.word	0x20000144

080178e4 <sniprintf>:
 80178e4:	b40c      	push	{r2, r3}
 80178e6:	b530      	push	{r4, r5, lr}
 80178e8:	4b17      	ldr	r3, [pc, #92]	@ (8017948 <sniprintf+0x64>)
 80178ea:	1e0c      	subs	r4, r1, #0
 80178ec:	681d      	ldr	r5, [r3, #0]
 80178ee:	b09d      	sub	sp, #116	@ 0x74
 80178f0:	da08      	bge.n	8017904 <sniprintf+0x20>
 80178f2:	238b      	movs	r3, #139	@ 0x8b
 80178f4:	602b      	str	r3, [r5, #0]
 80178f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178fa:	b01d      	add	sp, #116	@ 0x74
 80178fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017900:	b002      	add	sp, #8
 8017902:	4770      	bx	lr
 8017904:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017908:	f8ad 3014 	strh.w	r3, [sp, #20]
 801790c:	bf14      	ite	ne
 801790e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017912:	4623      	moveq	r3, r4
 8017914:	9304      	str	r3, [sp, #16]
 8017916:	9307      	str	r3, [sp, #28]
 8017918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801791c:	9002      	str	r0, [sp, #8]
 801791e:	9006      	str	r0, [sp, #24]
 8017920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017924:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017926:	ab21      	add	r3, sp, #132	@ 0x84
 8017928:	a902      	add	r1, sp, #8
 801792a:	4628      	mov	r0, r5
 801792c:	9301      	str	r3, [sp, #4]
 801792e:	f000 fa63 	bl	8017df8 <_svfiprintf_r>
 8017932:	1c43      	adds	r3, r0, #1
 8017934:	bfbc      	itt	lt
 8017936:	238b      	movlt	r3, #139	@ 0x8b
 8017938:	602b      	strlt	r3, [r5, #0]
 801793a:	2c00      	cmp	r4, #0
 801793c:	d0dd      	beq.n	80178fa <sniprintf+0x16>
 801793e:	9b02      	ldr	r3, [sp, #8]
 8017940:	2200      	movs	r2, #0
 8017942:	701a      	strb	r2, [r3, #0]
 8017944:	e7d9      	b.n	80178fa <sniprintf+0x16>
 8017946:	bf00      	nop
 8017948:	20000144 	.word	0x20000144

0801794c <__sread>:
 801794c:	b510      	push	{r4, lr}
 801794e:	460c      	mov	r4, r1
 8017950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017954:	f000 f900 	bl	8017b58 <_read_r>
 8017958:	2800      	cmp	r0, #0
 801795a:	bfab      	itete	ge
 801795c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801795e:	89a3      	ldrhlt	r3, [r4, #12]
 8017960:	181b      	addge	r3, r3, r0
 8017962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017966:	bfac      	ite	ge
 8017968:	6563      	strge	r3, [r4, #84]	@ 0x54
 801796a:	81a3      	strhlt	r3, [r4, #12]
 801796c:	bd10      	pop	{r4, pc}

0801796e <__swrite>:
 801796e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017972:	461f      	mov	r7, r3
 8017974:	898b      	ldrh	r3, [r1, #12]
 8017976:	05db      	lsls	r3, r3, #23
 8017978:	4605      	mov	r5, r0
 801797a:	460c      	mov	r4, r1
 801797c:	4616      	mov	r6, r2
 801797e:	d505      	bpl.n	801798c <__swrite+0x1e>
 8017980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017984:	2302      	movs	r3, #2
 8017986:	2200      	movs	r2, #0
 8017988:	f000 f8d4 	bl	8017b34 <_lseek_r>
 801798c:	89a3      	ldrh	r3, [r4, #12]
 801798e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017996:	81a3      	strh	r3, [r4, #12]
 8017998:	4632      	mov	r2, r6
 801799a:	463b      	mov	r3, r7
 801799c:	4628      	mov	r0, r5
 801799e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179a2:	f000 b8fb 	b.w	8017b9c <_write_r>

080179a6 <__sseek>:
 80179a6:	b510      	push	{r4, lr}
 80179a8:	460c      	mov	r4, r1
 80179aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ae:	f000 f8c1 	bl	8017b34 <_lseek_r>
 80179b2:	1c43      	adds	r3, r0, #1
 80179b4:	89a3      	ldrh	r3, [r4, #12]
 80179b6:	bf15      	itete	ne
 80179b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80179ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80179be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80179c2:	81a3      	strheq	r3, [r4, #12]
 80179c4:	bf18      	it	ne
 80179c6:	81a3      	strhne	r3, [r4, #12]
 80179c8:	bd10      	pop	{r4, pc}

080179ca <__sclose>:
 80179ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ce:	f000 b8a1 	b.w	8017b14 <_close_r>

080179d2 <_vsniprintf_r>:
 80179d2:	b530      	push	{r4, r5, lr}
 80179d4:	4614      	mov	r4, r2
 80179d6:	2c00      	cmp	r4, #0
 80179d8:	b09b      	sub	sp, #108	@ 0x6c
 80179da:	4605      	mov	r5, r0
 80179dc:	461a      	mov	r2, r3
 80179de:	da05      	bge.n	80179ec <_vsniprintf_r+0x1a>
 80179e0:	238b      	movs	r3, #139	@ 0x8b
 80179e2:	6003      	str	r3, [r0, #0]
 80179e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80179e8:	b01b      	add	sp, #108	@ 0x6c
 80179ea:	bd30      	pop	{r4, r5, pc}
 80179ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80179f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80179f4:	bf14      	ite	ne
 80179f6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80179fa:	4623      	moveq	r3, r4
 80179fc:	9302      	str	r3, [sp, #8]
 80179fe:	9305      	str	r3, [sp, #20]
 8017a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017a04:	9100      	str	r1, [sp, #0]
 8017a06:	9104      	str	r1, [sp, #16]
 8017a08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017a0c:	4669      	mov	r1, sp
 8017a0e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017a10:	f000 f9f2 	bl	8017df8 <_svfiprintf_r>
 8017a14:	1c43      	adds	r3, r0, #1
 8017a16:	bfbc      	itt	lt
 8017a18:	238b      	movlt	r3, #139	@ 0x8b
 8017a1a:	602b      	strlt	r3, [r5, #0]
 8017a1c:	2c00      	cmp	r4, #0
 8017a1e:	d0e3      	beq.n	80179e8 <_vsniprintf_r+0x16>
 8017a20:	9b00      	ldr	r3, [sp, #0]
 8017a22:	2200      	movs	r2, #0
 8017a24:	701a      	strb	r2, [r3, #0]
 8017a26:	e7df      	b.n	80179e8 <_vsniprintf_r+0x16>

08017a28 <vsniprintf>:
 8017a28:	b507      	push	{r0, r1, r2, lr}
 8017a2a:	9300      	str	r3, [sp, #0]
 8017a2c:	4613      	mov	r3, r2
 8017a2e:	460a      	mov	r2, r1
 8017a30:	4601      	mov	r1, r0
 8017a32:	4803      	ldr	r0, [pc, #12]	@ (8017a40 <vsniprintf+0x18>)
 8017a34:	6800      	ldr	r0, [r0, #0]
 8017a36:	f7ff ffcc 	bl	80179d2 <_vsniprintf_r>
 8017a3a:	b003      	add	sp, #12
 8017a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a40:	20000144 	.word	0x20000144

08017a44 <memcmp>:
 8017a44:	b510      	push	{r4, lr}
 8017a46:	3901      	subs	r1, #1
 8017a48:	4402      	add	r2, r0
 8017a4a:	4290      	cmp	r0, r2
 8017a4c:	d101      	bne.n	8017a52 <memcmp+0xe>
 8017a4e:	2000      	movs	r0, #0
 8017a50:	e005      	b.n	8017a5e <memcmp+0x1a>
 8017a52:	7803      	ldrb	r3, [r0, #0]
 8017a54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017a58:	42a3      	cmp	r3, r4
 8017a5a:	d001      	beq.n	8017a60 <memcmp+0x1c>
 8017a5c:	1b18      	subs	r0, r3, r4
 8017a5e:	bd10      	pop	{r4, pc}
 8017a60:	3001      	adds	r0, #1
 8017a62:	e7f2      	b.n	8017a4a <memcmp+0x6>

08017a64 <memmove>:
 8017a64:	4288      	cmp	r0, r1
 8017a66:	b510      	push	{r4, lr}
 8017a68:	eb01 0402 	add.w	r4, r1, r2
 8017a6c:	d902      	bls.n	8017a74 <memmove+0x10>
 8017a6e:	4284      	cmp	r4, r0
 8017a70:	4623      	mov	r3, r4
 8017a72:	d807      	bhi.n	8017a84 <memmove+0x20>
 8017a74:	1e43      	subs	r3, r0, #1
 8017a76:	42a1      	cmp	r1, r4
 8017a78:	d008      	beq.n	8017a8c <memmove+0x28>
 8017a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a82:	e7f8      	b.n	8017a76 <memmove+0x12>
 8017a84:	4402      	add	r2, r0
 8017a86:	4601      	mov	r1, r0
 8017a88:	428a      	cmp	r2, r1
 8017a8a:	d100      	bne.n	8017a8e <memmove+0x2a>
 8017a8c:	bd10      	pop	{r4, pc}
 8017a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a96:	e7f7      	b.n	8017a88 <memmove+0x24>

08017a98 <memset>:
 8017a98:	4402      	add	r2, r0
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	4293      	cmp	r3, r2
 8017a9e:	d100      	bne.n	8017aa2 <memset+0xa>
 8017aa0:	4770      	bx	lr
 8017aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8017aa6:	e7f9      	b.n	8017a9c <memset+0x4>

08017aa8 <strchr>:
 8017aa8:	b2c9      	uxtb	r1, r1
 8017aaa:	4603      	mov	r3, r0
 8017aac:	4618      	mov	r0, r3
 8017aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ab2:	b112      	cbz	r2, 8017aba <strchr+0x12>
 8017ab4:	428a      	cmp	r2, r1
 8017ab6:	d1f9      	bne.n	8017aac <strchr+0x4>
 8017ab8:	4770      	bx	lr
 8017aba:	2900      	cmp	r1, #0
 8017abc:	bf18      	it	ne
 8017abe:	2000      	movne	r0, #0
 8017ac0:	4770      	bx	lr

08017ac2 <strncmp>:
 8017ac2:	b510      	push	{r4, lr}
 8017ac4:	b16a      	cbz	r2, 8017ae2 <strncmp+0x20>
 8017ac6:	3901      	subs	r1, #1
 8017ac8:	1884      	adds	r4, r0, r2
 8017aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ace:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d103      	bne.n	8017ade <strncmp+0x1c>
 8017ad6:	42a0      	cmp	r0, r4
 8017ad8:	d001      	beq.n	8017ade <strncmp+0x1c>
 8017ada:	2a00      	cmp	r2, #0
 8017adc:	d1f5      	bne.n	8017aca <strncmp+0x8>
 8017ade:	1ad0      	subs	r0, r2, r3
 8017ae0:	bd10      	pop	{r4, pc}
 8017ae2:	4610      	mov	r0, r2
 8017ae4:	e7fc      	b.n	8017ae0 <strncmp+0x1e>

08017ae6 <strstr>:
 8017ae6:	780a      	ldrb	r2, [r1, #0]
 8017ae8:	b570      	push	{r4, r5, r6, lr}
 8017aea:	b96a      	cbnz	r2, 8017b08 <strstr+0x22>
 8017aec:	bd70      	pop	{r4, r5, r6, pc}
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d109      	bne.n	8017b06 <strstr+0x20>
 8017af2:	460c      	mov	r4, r1
 8017af4:	4605      	mov	r5, r0
 8017af6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d0f6      	beq.n	8017aec <strstr+0x6>
 8017afe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017b02:	429e      	cmp	r6, r3
 8017b04:	d0f7      	beq.n	8017af6 <strstr+0x10>
 8017b06:	3001      	adds	r0, #1
 8017b08:	7803      	ldrb	r3, [r0, #0]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d1ef      	bne.n	8017aee <strstr+0x8>
 8017b0e:	4618      	mov	r0, r3
 8017b10:	e7ec      	b.n	8017aec <strstr+0x6>
	...

08017b14 <_close_r>:
 8017b14:	b538      	push	{r3, r4, r5, lr}
 8017b16:	4d06      	ldr	r5, [pc, #24]	@ (8017b30 <_close_r+0x1c>)
 8017b18:	2300      	movs	r3, #0
 8017b1a:	4604      	mov	r4, r0
 8017b1c:	4608      	mov	r0, r1
 8017b1e:	602b      	str	r3, [r5, #0]
 8017b20:	f7ea f844 	bl	8001bac <_close>
 8017b24:	1c43      	adds	r3, r0, #1
 8017b26:	d102      	bne.n	8017b2e <_close_r+0x1a>
 8017b28:	682b      	ldr	r3, [r5, #0]
 8017b2a:	b103      	cbz	r3, 8017b2e <_close_r+0x1a>
 8017b2c:	6023      	str	r3, [r4, #0]
 8017b2e:	bd38      	pop	{r3, r4, r5, pc}
 8017b30:	2000cd08 	.word	0x2000cd08

08017b34 <_lseek_r>:
 8017b34:	b538      	push	{r3, r4, r5, lr}
 8017b36:	4d07      	ldr	r5, [pc, #28]	@ (8017b54 <_lseek_r+0x20>)
 8017b38:	4604      	mov	r4, r0
 8017b3a:	4608      	mov	r0, r1
 8017b3c:	4611      	mov	r1, r2
 8017b3e:	2200      	movs	r2, #0
 8017b40:	602a      	str	r2, [r5, #0]
 8017b42:	461a      	mov	r2, r3
 8017b44:	f7ea f859 	bl	8001bfa <_lseek>
 8017b48:	1c43      	adds	r3, r0, #1
 8017b4a:	d102      	bne.n	8017b52 <_lseek_r+0x1e>
 8017b4c:	682b      	ldr	r3, [r5, #0]
 8017b4e:	b103      	cbz	r3, 8017b52 <_lseek_r+0x1e>
 8017b50:	6023      	str	r3, [r4, #0]
 8017b52:	bd38      	pop	{r3, r4, r5, pc}
 8017b54:	2000cd08 	.word	0x2000cd08

08017b58 <_read_r>:
 8017b58:	b538      	push	{r3, r4, r5, lr}
 8017b5a:	4d07      	ldr	r5, [pc, #28]	@ (8017b78 <_read_r+0x20>)
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	4608      	mov	r0, r1
 8017b60:	4611      	mov	r1, r2
 8017b62:	2200      	movs	r2, #0
 8017b64:	602a      	str	r2, [r5, #0]
 8017b66:	461a      	mov	r2, r3
 8017b68:	f7e9 ffe7 	bl	8001b3a <_read>
 8017b6c:	1c43      	adds	r3, r0, #1
 8017b6e:	d102      	bne.n	8017b76 <_read_r+0x1e>
 8017b70:	682b      	ldr	r3, [r5, #0]
 8017b72:	b103      	cbz	r3, 8017b76 <_read_r+0x1e>
 8017b74:	6023      	str	r3, [r4, #0]
 8017b76:	bd38      	pop	{r3, r4, r5, pc}
 8017b78:	2000cd08 	.word	0x2000cd08

08017b7c <_sbrk_r>:
 8017b7c:	b538      	push	{r3, r4, r5, lr}
 8017b7e:	4d06      	ldr	r5, [pc, #24]	@ (8017b98 <_sbrk_r+0x1c>)
 8017b80:	2300      	movs	r3, #0
 8017b82:	4604      	mov	r4, r0
 8017b84:	4608      	mov	r0, r1
 8017b86:	602b      	str	r3, [r5, #0]
 8017b88:	f7ea f844 	bl	8001c14 <_sbrk>
 8017b8c:	1c43      	adds	r3, r0, #1
 8017b8e:	d102      	bne.n	8017b96 <_sbrk_r+0x1a>
 8017b90:	682b      	ldr	r3, [r5, #0]
 8017b92:	b103      	cbz	r3, 8017b96 <_sbrk_r+0x1a>
 8017b94:	6023      	str	r3, [r4, #0]
 8017b96:	bd38      	pop	{r3, r4, r5, pc}
 8017b98:	2000cd08 	.word	0x2000cd08

08017b9c <_write_r>:
 8017b9c:	b538      	push	{r3, r4, r5, lr}
 8017b9e:	4d07      	ldr	r5, [pc, #28]	@ (8017bbc <_write_r+0x20>)
 8017ba0:	4604      	mov	r4, r0
 8017ba2:	4608      	mov	r0, r1
 8017ba4:	4611      	mov	r1, r2
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	602a      	str	r2, [r5, #0]
 8017baa:	461a      	mov	r2, r3
 8017bac:	f7e9 ffe2 	bl	8001b74 <_write>
 8017bb0:	1c43      	adds	r3, r0, #1
 8017bb2:	d102      	bne.n	8017bba <_write_r+0x1e>
 8017bb4:	682b      	ldr	r3, [r5, #0]
 8017bb6:	b103      	cbz	r3, 8017bba <_write_r+0x1e>
 8017bb8:	6023      	str	r3, [r4, #0]
 8017bba:	bd38      	pop	{r3, r4, r5, pc}
 8017bbc:	2000cd08 	.word	0x2000cd08

08017bc0 <__errno>:
 8017bc0:	4b01      	ldr	r3, [pc, #4]	@ (8017bc8 <__errno+0x8>)
 8017bc2:	6818      	ldr	r0, [r3, #0]
 8017bc4:	4770      	bx	lr
 8017bc6:	bf00      	nop
 8017bc8:	20000144 	.word	0x20000144

08017bcc <__libc_init_array>:
 8017bcc:	b570      	push	{r4, r5, r6, lr}
 8017bce:	4d0d      	ldr	r5, [pc, #52]	@ (8017c04 <__libc_init_array+0x38>)
 8017bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8017c08 <__libc_init_array+0x3c>)
 8017bd2:	1b64      	subs	r4, r4, r5
 8017bd4:	10a4      	asrs	r4, r4, #2
 8017bd6:	2600      	movs	r6, #0
 8017bd8:	42a6      	cmp	r6, r4
 8017bda:	d109      	bne.n	8017bf0 <__libc_init_array+0x24>
 8017bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8017c0c <__libc_init_array+0x40>)
 8017bde:	4c0c      	ldr	r4, [pc, #48]	@ (8017c10 <__libc_init_array+0x44>)
 8017be0:	f000 fef8 	bl	80189d4 <_init>
 8017be4:	1b64      	subs	r4, r4, r5
 8017be6:	10a4      	asrs	r4, r4, #2
 8017be8:	2600      	movs	r6, #0
 8017bea:	42a6      	cmp	r6, r4
 8017bec:	d105      	bne.n	8017bfa <__libc_init_array+0x2e>
 8017bee:	bd70      	pop	{r4, r5, r6, pc}
 8017bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017bf4:	4798      	blx	r3
 8017bf6:	3601      	adds	r6, #1
 8017bf8:	e7ee      	b.n	8017bd8 <__libc_init_array+0xc>
 8017bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8017bfe:	4798      	blx	r3
 8017c00:	3601      	adds	r6, #1
 8017c02:	e7f2      	b.n	8017bea <__libc_init_array+0x1e>
 8017c04:	08019888 	.word	0x08019888
 8017c08:	08019888 	.word	0x08019888
 8017c0c:	08019888 	.word	0x08019888
 8017c10:	08019894 	.word	0x08019894

08017c14 <__retarget_lock_init_recursive>:
 8017c14:	4770      	bx	lr

08017c16 <__retarget_lock_acquire_recursive>:
 8017c16:	4770      	bx	lr

08017c18 <__retarget_lock_release_recursive>:
 8017c18:	4770      	bx	lr

08017c1a <strcpy>:
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c20:	f803 2b01 	strb.w	r2, [r3], #1
 8017c24:	2a00      	cmp	r2, #0
 8017c26:	d1f9      	bne.n	8017c1c <strcpy+0x2>
 8017c28:	4770      	bx	lr

08017c2a <memcpy>:
 8017c2a:	440a      	add	r2, r1
 8017c2c:	4291      	cmp	r1, r2
 8017c2e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017c32:	d100      	bne.n	8017c36 <memcpy+0xc>
 8017c34:	4770      	bx	lr
 8017c36:	b510      	push	{r4, lr}
 8017c38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c40:	4291      	cmp	r1, r2
 8017c42:	d1f9      	bne.n	8017c38 <memcpy+0xe>
 8017c44:	bd10      	pop	{r4, pc}
	...

08017c48 <__assert_func>:
 8017c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c4a:	4614      	mov	r4, r2
 8017c4c:	461a      	mov	r2, r3
 8017c4e:	4b09      	ldr	r3, [pc, #36]	@ (8017c74 <__assert_func+0x2c>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	4605      	mov	r5, r0
 8017c54:	68d8      	ldr	r0, [r3, #12]
 8017c56:	b954      	cbnz	r4, 8017c6e <__assert_func+0x26>
 8017c58:	4b07      	ldr	r3, [pc, #28]	@ (8017c78 <__assert_func+0x30>)
 8017c5a:	461c      	mov	r4, r3
 8017c5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c60:	9100      	str	r1, [sp, #0]
 8017c62:	462b      	mov	r3, r5
 8017c64:	4905      	ldr	r1, [pc, #20]	@ (8017c7c <__assert_func+0x34>)
 8017c66:	f000 fd3f 	bl	80186e8 <fiprintf>
 8017c6a:	f000 fde3 	bl	8018834 <abort>
 8017c6e:	4b04      	ldr	r3, [pc, #16]	@ (8017c80 <__assert_func+0x38>)
 8017c70:	e7f4      	b.n	8017c5c <__assert_func+0x14>
 8017c72:	bf00      	nop
 8017c74:	20000144 	.word	0x20000144
 8017c78:	0801984b 	.word	0x0801984b
 8017c7c:	0801981d 	.word	0x0801981d
 8017c80:	08019810 	.word	0x08019810

08017c84 <__env_lock>:
 8017c84:	4801      	ldr	r0, [pc, #4]	@ (8017c8c <__env_lock+0x8>)
 8017c86:	f7ff bfc6 	b.w	8017c16 <__retarget_lock_acquire_recursive>
 8017c8a:	bf00      	nop
 8017c8c:	2000cd0c 	.word	0x2000cd0c

08017c90 <__env_unlock>:
 8017c90:	4801      	ldr	r0, [pc, #4]	@ (8017c98 <__env_unlock+0x8>)
 8017c92:	f7ff bfc1 	b.w	8017c18 <__retarget_lock_release_recursive>
 8017c96:	bf00      	nop
 8017c98:	2000cd0c 	.word	0x2000cd0c

08017c9c <_free_r>:
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	2900      	cmp	r1, #0
 8017ca2:	d041      	beq.n	8017d28 <_free_r+0x8c>
 8017ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ca8:	1f0c      	subs	r4, r1, #4
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	bfb8      	it	lt
 8017cae:	18e4      	addlt	r4, r4, r3
 8017cb0:	f7ff fc1e 	bl	80174f0 <__malloc_lock>
 8017cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8017d2c <_free_r+0x90>)
 8017cb6:	6813      	ldr	r3, [r2, #0]
 8017cb8:	b933      	cbnz	r3, 8017cc8 <_free_r+0x2c>
 8017cba:	6063      	str	r3, [r4, #4]
 8017cbc:	6014      	str	r4, [r2, #0]
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cc4:	f7ff bc1a 	b.w	80174fc <__malloc_unlock>
 8017cc8:	42a3      	cmp	r3, r4
 8017cca:	d908      	bls.n	8017cde <_free_r+0x42>
 8017ccc:	6820      	ldr	r0, [r4, #0]
 8017cce:	1821      	adds	r1, r4, r0
 8017cd0:	428b      	cmp	r3, r1
 8017cd2:	bf01      	itttt	eq
 8017cd4:	6819      	ldreq	r1, [r3, #0]
 8017cd6:	685b      	ldreq	r3, [r3, #4]
 8017cd8:	1809      	addeq	r1, r1, r0
 8017cda:	6021      	streq	r1, [r4, #0]
 8017cdc:	e7ed      	b.n	8017cba <_free_r+0x1e>
 8017cde:	461a      	mov	r2, r3
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	b10b      	cbz	r3, 8017ce8 <_free_r+0x4c>
 8017ce4:	42a3      	cmp	r3, r4
 8017ce6:	d9fa      	bls.n	8017cde <_free_r+0x42>
 8017ce8:	6811      	ldr	r1, [r2, #0]
 8017cea:	1850      	adds	r0, r2, r1
 8017cec:	42a0      	cmp	r0, r4
 8017cee:	d10b      	bne.n	8017d08 <_free_r+0x6c>
 8017cf0:	6820      	ldr	r0, [r4, #0]
 8017cf2:	4401      	add	r1, r0
 8017cf4:	1850      	adds	r0, r2, r1
 8017cf6:	4283      	cmp	r3, r0
 8017cf8:	6011      	str	r1, [r2, #0]
 8017cfa:	d1e0      	bne.n	8017cbe <_free_r+0x22>
 8017cfc:	6818      	ldr	r0, [r3, #0]
 8017cfe:	685b      	ldr	r3, [r3, #4]
 8017d00:	6053      	str	r3, [r2, #4]
 8017d02:	4408      	add	r0, r1
 8017d04:	6010      	str	r0, [r2, #0]
 8017d06:	e7da      	b.n	8017cbe <_free_r+0x22>
 8017d08:	d902      	bls.n	8017d10 <_free_r+0x74>
 8017d0a:	230c      	movs	r3, #12
 8017d0c:	602b      	str	r3, [r5, #0]
 8017d0e:	e7d6      	b.n	8017cbe <_free_r+0x22>
 8017d10:	6820      	ldr	r0, [r4, #0]
 8017d12:	1821      	adds	r1, r4, r0
 8017d14:	428b      	cmp	r3, r1
 8017d16:	bf04      	itt	eq
 8017d18:	6819      	ldreq	r1, [r3, #0]
 8017d1a:	685b      	ldreq	r3, [r3, #4]
 8017d1c:	6063      	str	r3, [r4, #4]
 8017d1e:	bf04      	itt	eq
 8017d20:	1809      	addeq	r1, r1, r0
 8017d22:	6021      	streq	r1, [r4, #0]
 8017d24:	6054      	str	r4, [r2, #4]
 8017d26:	e7ca      	b.n	8017cbe <_free_r+0x22>
 8017d28:	bd38      	pop	{r3, r4, r5, pc}
 8017d2a:	bf00      	nop
 8017d2c:	2000cbc8 	.word	0x2000cbc8

08017d30 <_malloc_usable_size_r>:
 8017d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d34:	1f18      	subs	r0, r3, #4
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	bfbc      	itt	lt
 8017d3a:	580b      	ldrlt	r3, [r1, r0]
 8017d3c:	18c0      	addlt	r0, r0, r3
 8017d3e:	4770      	bx	lr

08017d40 <__ssputs_r>:
 8017d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d44:	688e      	ldr	r6, [r1, #8]
 8017d46:	461f      	mov	r7, r3
 8017d48:	42be      	cmp	r6, r7
 8017d4a:	680b      	ldr	r3, [r1, #0]
 8017d4c:	4682      	mov	sl, r0
 8017d4e:	460c      	mov	r4, r1
 8017d50:	4690      	mov	r8, r2
 8017d52:	d82d      	bhi.n	8017db0 <__ssputs_r+0x70>
 8017d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017d5c:	d026      	beq.n	8017dac <__ssputs_r+0x6c>
 8017d5e:	6965      	ldr	r5, [r4, #20]
 8017d60:	6909      	ldr	r1, [r1, #16]
 8017d62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d66:	eba3 0901 	sub.w	r9, r3, r1
 8017d6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d6e:	1c7b      	adds	r3, r7, #1
 8017d70:	444b      	add	r3, r9
 8017d72:	106d      	asrs	r5, r5, #1
 8017d74:	429d      	cmp	r5, r3
 8017d76:	bf38      	it	cc
 8017d78:	461d      	movcc	r5, r3
 8017d7a:	0553      	lsls	r3, r2, #21
 8017d7c:	d527      	bpl.n	8017dce <__ssputs_r+0x8e>
 8017d7e:	4629      	mov	r1, r5
 8017d80:	f7ff fb36 	bl	80173f0 <_malloc_r>
 8017d84:	4606      	mov	r6, r0
 8017d86:	b360      	cbz	r0, 8017de2 <__ssputs_r+0xa2>
 8017d88:	6921      	ldr	r1, [r4, #16]
 8017d8a:	464a      	mov	r2, r9
 8017d8c:	f7ff ff4d 	bl	8017c2a <memcpy>
 8017d90:	89a3      	ldrh	r3, [r4, #12]
 8017d92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d9a:	81a3      	strh	r3, [r4, #12]
 8017d9c:	6126      	str	r6, [r4, #16]
 8017d9e:	6165      	str	r5, [r4, #20]
 8017da0:	444e      	add	r6, r9
 8017da2:	eba5 0509 	sub.w	r5, r5, r9
 8017da6:	6026      	str	r6, [r4, #0]
 8017da8:	60a5      	str	r5, [r4, #8]
 8017daa:	463e      	mov	r6, r7
 8017dac:	42be      	cmp	r6, r7
 8017dae:	d900      	bls.n	8017db2 <__ssputs_r+0x72>
 8017db0:	463e      	mov	r6, r7
 8017db2:	6820      	ldr	r0, [r4, #0]
 8017db4:	4632      	mov	r2, r6
 8017db6:	4641      	mov	r1, r8
 8017db8:	f7ff fe54 	bl	8017a64 <memmove>
 8017dbc:	68a3      	ldr	r3, [r4, #8]
 8017dbe:	1b9b      	subs	r3, r3, r6
 8017dc0:	60a3      	str	r3, [r4, #8]
 8017dc2:	6823      	ldr	r3, [r4, #0]
 8017dc4:	4433      	add	r3, r6
 8017dc6:	6023      	str	r3, [r4, #0]
 8017dc8:	2000      	movs	r0, #0
 8017dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dce:	462a      	mov	r2, r5
 8017dd0:	f7ff fc0e 	bl	80175f0 <_realloc_r>
 8017dd4:	4606      	mov	r6, r0
 8017dd6:	2800      	cmp	r0, #0
 8017dd8:	d1e0      	bne.n	8017d9c <__ssputs_r+0x5c>
 8017dda:	6921      	ldr	r1, [r4, #16]
 8017ddc:	4650      	mov	r0, sl
 8017dde:	f7ff ff5d 	bl	8017c9c <_free_r>
 8017de2:	230c      	movs	r3, #12
 8017de4:	f8ca 3000 	str.w	r3, [sl]
 8017de8:	89a3      	ldrh	r3, [r4, #12]
 8017dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dee:	81a3      	strh	r3, [r4, #12]
 8017df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017df4:	e7e9      	b.n	8017dca <__ssputs_r+0x8a>
	...

08017df8 <_svfiprintf_r>:
 8017df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dfc:	4698      	mov	r8, r3
 8017dfe:	898b      	ldrh	r3, [r1, #12]
 8017e00:	061b      	lsls	r3, r3, #24
 8017e02:	b09d      	sub	sp, #116	@ 0x74
 8017e04:	4607      	mov	r7, r0
 8017e06:	460d      	mov	r5, r1
 8017e08:	4614      	mov	r4, r2
 8017e0a:	d510      	bpl.n	8017e2e <_svfiprintf_r+0x36>
 8017e0c:	690b      	ldr	r3, [r1, #16]
 8017e0e:	b973      	cbnz	r3, 8017e2e <_svfiprintf_r+0x36>
 8017e10:	2140      	movs	r1, #64	@ 0x40
 8017e12:	f7ff faed 	bl	80173f0 <_malloc_r>
 8017e16:	6028      	str	r0, [r5, #0]
 8017e18:	6128      	str	r0, [r5, #16]
 8017e1a:	b930      	cbnz	r0, 8017e2a <_svfiprintf_r+0x32>
 8017e1c:	230c      	movs	r3, #12
 8017e1e:	603b      	str	r3, [r7, #0]
 8017e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e24:	b01d      	add	sp, #116	@ 0x74
 8017e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e2a:	2340      	movs	r3, #64	@ 0x40
 8017e2c:	616b      	str	r3, [r5, #20]
 8017e2e:	2300      	movs	r3, #0
 8017e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e32:	2320      	movs	r3, #32
 8017e34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e3c:	2330      	movs	r3, #48	@ 0x30
 8017e3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017fdc <_svfiprintf_r+0x1e4>
 8017e42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e46:	f04f 0901 	mov.w	r9, #1
 8017e4a:	4623      	mov	r3, r4
 8017e4c:	469a      	mov	sl, r3
 8017e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e52:	b10a      	cbz	r2, 8017e58 <_svfiprintf_r+0x60>
 8017e54:	2a25      	cmp	r2, #37	@ 0x25
 8017e56:	d1f9      	bne.n	8017e4c <_svfiprintf_r+0x54>
 8017e58:	ebba 0b04 	subs.w	fp, sl, r4
 8017e5c:	d00b      	beq.n	8017e76 <_svfiprintf_r+0x7e>
 8017e5e:	465b      	mov	r3, fp
 8017e60:	4622      	mov	r2, r4
 8017e62:	4629      	mov	r1, r5
 8017e64:	4638      	mov	r0, r7
 8017e66:	f7ff ff6b 	bl	8017d40 <__ssputs_r>
 8017e6a:	3001      	adds	r0, #1
 8017e6c:	f000 80a7 	beq.w	8017fbe <_svfiprintf_r+0x1c6>
 8017e70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e72:	445a      	add	r2, fp
 8017e74:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e76:	f89a 3000 	ldrb.w	r3, [sl]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	f000 809f 	beq.w	8017fbe <_svfiprintf_r+0x1c6>
 8017e80:	2300      	movs	r3, #0
 8017e82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e8a:	f10a 0a01 	add.w	sl, sl, #1
 8017e8e:	9304      	str	r3, [sp, #16]
 8017e90:	9307      	str	r3, [sp, #28]
 8017e92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e96:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e98:	4654      	mov	r4, sl
 8017e9a:	2205      	movs	r2, #5
 8017e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ea0:	484e      	ldr	r0, [pc, #312]	@ (8017fdc <_svfiprintf_r+0x1e4>)
 8017ea2:	f7e8 f9d5 	bl	8000250 <memchr>
 8017ea6:	9a04      	ldr	r2, [sp, #16]
 8017ea8:	b9d8      	cbnz	r0, 8017ee2 <_svfiprintf_r+0xea>
 8017eaa:	06d0      	lsls	r0, r2, #27
 8017eac:	bf44      	itt	mi
 8017eae:	2320      	movmi	r3, #32
 8017eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017eb4:	0711      	lsls	r1, r2, #28
 8017eb6:	bf44      	itt	mi
 8017eb8:	232b      	movmi	r3, #43	@ 0x2b
 8017eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8017ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ec4:	d015      	beq.n	8017ef2 <_svfiprintf_r+0xfa>
 8017ec6:	9a07      	ldr	r2, [sp, #28]
 8017ec8:	4654      	mov	r4, sl
 8017eca:	2000      	movs	r0, #0
 8017ecc:	f04f 0c0a 	mov.w	ip, #10
 8017ed0:	4621      	mov	r1, r4
 8017ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ed6:	3b30      	subs	r3, #48	@ 0x30
 8017ed8:	2b09      	cmp	r3, #9
 8017eda:	d94b      	bls.n	8017f74 <_svfiprintf_r+0x17c>
 8017edc:	b1b0      	cbz	r0, 8017f0c <_svfiprintf_r+0x114>
 8017ede:	9207      	str	r2, [sp, #28]
 8017ee0:	e014      	b.n	8017f0c <_svfiprintf_r+0x114>
 8017ee2:	eba0 0308 	sub.w	r3, r0, r8
 8017ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8017eea:	4313      	orrs	r3, r2
 8017eec:	9304      	str	r3, [sp, #16]
 8017eee:	46a2      	mov	sl, r4
 8017ef0:	e7d2      	b.n	8017e98 <_svfiprintf_r+0xa0>
 8017ef2:	9b03      	ldr	r3, [sp, #12]
 8017ef4:	1d19      	adds	r1, r3, #4
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	9103      	str	r1, [sp, #12]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	bfbb      	ittet	lt
 8017efe:	425b      	neglt	r3, r3
 8017f00:	f042 0202 	orrlt.w	r2, r2, #2
 8017f04:	9307      	strge	r3, [sp, #28]
 8017f06:	9307      	strlt	r3, [sp, #28]
 8017f08:	bfb8      	it	lt
 8017f0a:	9204      	strlt	r2, [sp, #16]
 8017f0c:	7823      	ldrb	r3, [r4, #0]
 8017f0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f10:	d10a      	bne.n	8017f28 <_svfiprintf_r+0x130>
 8017f12:	7863      	ldrb	r3, [r4, #1]
 8017f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f16:	d132      	bne.n	8017f7e <_svfiprintf_r+0x186>
 8017f18:	9b03      	ldr	r3, [sp, #12]
 8017f1a:	1d1a      	adds	r2, r3, #4
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	9203      	str	r2, [sp, #12]
 8017f20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f24:	3402      	adds	r4, #2
 8017f26:	9305      	str	r3, [sp, #20]
 8017f28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017fec <_svfiprintf_r+0x1f4>
 8017f2c:	7821      	ldrb	r1, [r4, #0]
 8017f2e:	2203      	movs	r2, #3
 8017f30:	4650      	mov	r0, sl
 8017f32:	f7e8 f98d 	bl	8000250 <memchr>
 8017f36:	b138      	cbz	r0, 8017f48 <_svfiprintf_r+0x150>
 8017f38:	9b04      	ldr	r3, [sp, #16]
 8017f3a:	eba0 000a 	sub.w	r0, r0, sl
 8017f3e:	2240      	movs	r2, #64	@ 0x40
 8017f40:	4082      	lsls	r2, r0
 8017f42:	4313      	orrs	r3, r2
 8017f44:	3401      	adds	r4, #1
 8017f46:	9304      	str	r3, [sp, #16]
 8017f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f4c:	4824      	ldr	r0, [pc, #144]	@ (8017fe0 <_svfiprintf_r+0x1e8>)
 8017f4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f52:	2206      	movs	r2, #6
 8017f54:	f7e8 f97c 	bl	8000250 <memchr>
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	d036      	beq.n	8017fca <_svfiprintf_r+0x1d2>
 8017f5c:	4b21      	ldr	r3, [pc, #132]	@ (8017fe4 <_svfiprintf_r+0x1ec>)
 8017f5e:	bb1b      	cbnz	r3, 8017fa8 <_svfiprintf_r+0x1b0>
 8017f60:	9b03      	ldr	r3, [sp, #12]
 8017f62:	3307      	adds	r3, #7
 8017f64:	f023 0307 	bic.w	r3, r3, #7
 8017f68:	3308      	adds	r3, #8
 8017f6a:	9303      	str	r3, [sp, #12]
 8017f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f6e:	4433      	add	r3, r6
 8017f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f72:	e76a      	b.n	8017e4a <_svfiprintf_r+0x52>
 8017f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f78:	460c      	mov	r4, r1
 8017f7a:	2001      	movs	r0, #1
 8017f7c:	e7a8      	b.n	8017ed0 <_svfiprintf_r+0xd8>
 8017f7e:	2300      	movs	r3, #0
 8017f80:	3401      	adds	r4, #1
 8017f82:	9305      	str	r3, [sp, #20]
 8017f84:	4619      	mov	r1, r3
 8017f86:	f04f 0c0a 	mov.w	ip, #10
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f90:	3a30      	subs	r2, #48	@ 0x30
 8017f92:	2a09      	cmp	r2, #9
 8017f94:	d903      	bls.n	8017f9e <_svfiprintf_r+0x1a6>
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d0c6      	beq.n	8017f28 <_svfiprintf_r+0x130>
 8017f9a:	9105      	str	r1, [sp, #20]
 8017f9c:	e7c4      	b.n	8017f28 <_svfiprintf_r+0x130>
 8017f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017fa2:	4604      	mov	r4, r0
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	e7f0      	b.n	8017f8a <_svfiprintf_r+0x192>
 8017fa8:	ab03      	add	r3, sp, #12
 8017faa:	9300      	str	r3, [sp, #0]
 8017fac:	462a      	mov	r2, r5
 8017fae:	4b0e      	ldr	r3, [pc, #56]	@ (8017fe8 <_svfiprintf_r+0x1f0>)
 8017fb0:	a904      	add	r1, sp, #16
 8017fb2:	4638      	mov	r0, r7
 8017fb4:	f3af 8000 	nop.w
 8017fb8:	1c42      	adds	r2, r0, #1
 8017fba:	4606      	mov	r6, r0
 8017fbc:	d1d6      	bne.n	8017f6c <_svfiprintf_r+0x174>
 8017fbe:	89ab      	ldrh	r3, [r5, #12]
 8017fc0:	065b      	lsls	r3, r3, #25
 8017fc2:	f53f af2d 	bmi.w	8017e20 <_svfiprintf_r+0x28>
 8017fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fc8:	e72c      	b.n	8017e24 <_svfiprintf_r+0x2c>
 8017fca:	ab03      	add	r3, sp, #12
 8017fcc:	9300      	str	r3, [sp, #0]
 8017fce:	462a      	mov	r2, r5
 8017fd0:	4b05      	ldr	r3, [pc, #20]	@ (8017fe8 <_svfiprintf_r+0x1f0>)
 8017fd2:	a904      	add	r1, sp, #16
 8017fd4:	4638      	mov	r0, r7
 8017fd6:	f000 f9bb 	bl	8018350 <_printf_i>
 8017fda:	e7ed      	b.n	8017fb8 <_svfiprintf_r+0x1c0>
 8017fdc:	0801984c 	.word	0x0801984c
 8017fe0:	08019856 	.word	0x08019856
 8017fe4:	00000000 	.word	0x00000000
 8017fe8:	08017d41 	.word	0x08017d41
 8017fec:	08019852 	.word	0x08019852

08017ff0 <__sfputc_r>:
 8017ff0:	6893      	ldr	r3, [r2, #8]
 8017ff2:	3b01      	subs	r3, #1
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	b410      	push	{r4}
 8017ff8:	6093      	str	r3, [r2, #8]
 8017ffa:	da08      	bge.n	801800e <__sfputc_r+0x1e>
 8017ffc:	6994      	ldr	r4, [r2, #24]
 8017ffe:	42a3      	cmp	r3, r4
 8018000:	db01      	blt.n	8018006 <__sfputc_r+0x16>
 8018002:	290a      	cmp	r1, #10
 8018004:	d103      	bne.n	801800e <__sfputc_r+0x1e>
 8018006:	f85d 4b04 	ldr.w	r4, [sp], #4
 801800a:	f000 bb7f 	b.w	801870c <__swbuf_r>
 801800e:	6813      	ldr	r3, [r2, #0]
 8018010:	1c58      	adds	r0, r3, #1
 8018012:	6010      	str	r0, [r2, #0]
 8018014:	7019      	strb	r1, [r3, #0]
 8018016:	4608      	mov	r0, r1
 8018018:	f85d 4b04 	ldr.w	r4, [sp], #4
 801801c:	4770      	bx	lr

0801801e <__sfputs_r>:
 801801e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018020:	4606      	mov	r6, r0
 8018022:	460f      	mov	r7, r1
 8018024:	4614      	mov	r4, r2
 8018026:	18d5      	adds	r5, r2, r3
 8018028:	42ac      	cmp	r4, r5
 801802a:	d101      	bne.n	8018030 <__sfputs_r+0x12>
 801802c:	2000      	movs	r0, #0
 801802e:	e007      	b.n	8018040 <__sfputs_r+0x22>
 8018030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018034:	463a      	mov	r2, r7
 8018036:	4630      	mov	r0, r6
 8018038:	f7ff ffda 	bl	8017ff0 <__sfputc_r>
 801803c:	1c43      	adds	r3, r0, #1
 801803e:	d1f3      	bne.n	8018028 <__sfputs_r+0xa>
 8018040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018044 <_vfiprintf_r>:
 8018044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018048:	460d      	mov	r5, r1
 801804a:	b09d      	sub	sp, #116	@ 0x74
 801804c:	4614      	mov	r4, r2
 801804e:	4698      	mov	r8, r3
 8018050:	4606      	mov	r6, r0
 8018052:	b118      	cbz	r0, 801805c <_vfiprintf_r+0x18>
 8018054:	6a03      	ldr	r3, [r0, #32]
 8018056:	b90b      	cbnz	r3, 801805c <_vfiprintf_r+0x18>
 8018058:	f7ff fbfc 	bl	8017854 <__sinit>
 801805c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801805e:	07d9      	lsls	r1, r3, #31
 8018060:	d405      	bmi.n	801806e <_vfiprintf_r+0x2a>
 8018062:	89ab      	ldrh	r3, [r5, #12]
 8018064:	059a      	lsls	r2, r3, #22
 8018066:	d402      	bmi.n	801806e <_vfiprintf_r+0x2a>
 8018068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801806a:	f7ff fdd4 	bl	8017c16 <__retarget_lock_acquire_recursive>
 801806e:	89ab      	ldrh	r3, [r5, #12]
 8018070:	071b      	lsls	r3, r3, #28
 8018072:	d501      	bpl.n	8018078 <_vfiprintf_r+0x34>
 8018074:	692b      	ldr	r3, [r5, #16]
 8018076:	b99b      	cbnz	r3, 80180a0 <_vfiprintf_r+0x5c>
 8018078:	4629      	mov	r1, r5
 801807a:	4630      	mov	r0, r6
 801807c:	f000 fb84 	bl	8018788 <__swsetup_r>
 8018080:	b170      	cbz	r0, 80180a0 <_vfiprintf_r+0x5c>
 8018082:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018084:	07dc      	lsls	r4, r3, #31
 8018086:	d504      	bpl.n	8018092 <_vfiprintf_r+0x4e>
 8018088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801808c:	b01d      	add	sp, #116	@ 0x74
 801808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018092:	89ab      	ldrh	r3, [r5, #12]
 8018094:	0598      	lsls	r0, r3, #22
 8018096:	d4f7      	bmi.n	8018088 <_vfiprintf_r+0x44>
 8018098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801809a:	f7ff fdbd 	bl	8017c18 <__retarget_lock_release_recursive>
 801809e:	e7f3      	b.n	8018088 <_vfiprintf_r+0x44>
 80180a0:	2300      	movs	r3, #0
 80180a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80180a4:	2320      	movs	r3, #32
 80180a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80180aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80180ae:	2330      	movs	r3, #48	@ 0x30
 80180b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018260 <_vfiprintf_r+0x21c>
 80180b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80180b8:	f04f 0901 	mov.w	r9, #1
 80180bc:	4623      	mov	r3, r4
 80180be:	469a      	mov	sl, r3
 80180c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180c4:	b10a      	cbz	r2, 80180ca <_vfiprintf_r+0x86>
 80180c6:	2a25      	cmp	r2, #37	@ 0x25
 80180c8:	d1f9      	bne.n	80180be <_vfiprintf_r+0x7a>
 80180ca:	ebba 0b04 	subs.w	fp, sl, r4
 80180ce:	d00b      	beq.n	80180e8 <_vfiprintf_r+0xa4>
 80180d0:	465b      	mov	r3, fp
 80180d2:	4622      	mov	r2, r4
 80180d4:	4629      	mov	r1, r5
 80180d6:	4630      	mov	r0, r6
 80180d8:	f7ff ffa1 	bl	801801e <__sfputs_r>
 80180dc:	3001      	adds	r0, #1
 80180de:	f000 80a7 	beq.w	8018230 <_vfiprintf_r+0x1ec>
 80180e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80180e4:	445a      	add	r2, fp
 80180e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80180e8:	f89a 3000 	ldrb.w	r3, [sl]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	f000 809f 	beq.w	8018230 <_vfiprintf_r+0x1ec>
 80180f2:	2300      	movs	r3, #0
 80180f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80180f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180fc:	f10a 0a01 	add.w	sl, sl, #1
 8018100:	9304      	str	r3, [sp, #16]
 8018102:	9307      	str	r3, [sp, #28]
 8018104:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018108:	931a      	str	r3, [sp, #104]	@ 0x68
 801810a:	4654      	mov	r4, sl
 801810c:	2205      	movs	r2, #5
 801810e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018112:	4853      	ldr	r0, [pc, #332]	@ (8018260 <_vfiprintf_r+0x21c>)
 8018114:	f7e8 f89c 	bl	8000250 <memchr>
 8018118:	9a04      	ldr	r2, [sp, #16]
 801811a:	b9d8      	cbnz	r0, 8018154 <_vfiprintf_r+0x110>
 801811c:	06d1      	lsls	r1, r2, #27
 801811e:	bf44      	itt	mi
 8018120:	2320      	movmi	r3, #32
 8018122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018126:	0713      	lsls	r3, r2, #28
 8018128:	bf44      	itt	mi
 801812a:	232b      	movmi	r3, #43	@ 0x2b
 801812c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018130:	f89a 3000 	ldrb.w	r3, [sl]
 8018134:	2b2a      	cmp	r3, #42	@ 0x2a
 8018136:	d015      	beq.n	8018164 <_vfiprintf_r+0x120>
 8018138:	9a07      	ldr	r2, [sp, #28]
 801813a:	4654      	mov	r4, sl
 801813c:	2000      	movs	r0, #0
 801813e:	f04f 0c0a 	mov.w	ip, #10
 8018142:	4621      	mov	r1, r4
 8018144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018148:	3b30      	subs	r3, #48	@ 0x30
 801814a:	2b09      	cmp	r3, #9
 801814c:	d94b      	bls.n	80181e6 <_vfiprintf_r+0x1a2>
 801814e:	b1b0      	cbz	r0, 801817e <_vfiprintf_r+0x13a>
 8018150:	9207      	str	r2, [sp, #28]
 8018152:	e014      	b.n	801817e <_vfiprintf_r+0x13a>
 8018154:	eba0 0308 	sub.w	r3, r0, r8
 8018158:	fa09 f303 	lsl.w	r3, r9, r3
 801815c:	4313      	orrs	r3, r2
 801815e:	9304      	str	r3, [sp, #16]
 8018160:	46a2      	mov	sl, r4
 8018162:	e7d2      	b.n	801810a <_vfiprintf_r+0xc6>
 8018164:	9b03      	ldr	r3, [sp, #12]
 8018166:	1d19      	adds	r1, r3, #4
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	9103      	str	r1, [sp, #12]
 801816c:	2b00      	cmp	r3, #0
 801816e:	bfbb      	ittet	lt
 8018170:	425b      	neglt	r3, r3
 8018172:	f042 0202 	orrlt.w	r2, r2, #2
 8018176:	9307      	strge	r3, [sp, #28]
 8018178:	9307      	strlt	r3, [sp, #28]
 801817a:	bfb8      	it	lt
 801817c:	9204      	strlt	r2, [sp, #16]
 801817e:	7823      	ldrb	r3, [r4, #0]
 8018180:	2b2e      	cmp	r3, #46	@ 0x2e
 8018182:	d10a      	bne.n	801819a <_vfiprintf_r+0x156>
 8018184:	7863      	ldrb	r3, [r4, #1]
 8018186:	2b2a      	cmp	r3, #42	@ 0x2a
 8018188:	d132      	bne.n	80181f0 <_vfiprintf_r+0x1ac>
 801818a:	9b03      	ldr	r3, [sp, #12]
 801818c:	1d1a      	adds	r2, r3, #4
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	9203      	str	r2, [sp, #12]
 8018192:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018196:	3402      	adds	r4, #2
 8018198:	9305      	str	r3, [sp, #20]
 801819a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018270 <_vfiprintf_r+0x22c>
 801819e:	7821      	ldrb	r1, [r4, #0]
 80181a0:	2203      	movs	r2, #3
 80181a2:	4650      	mov	r0, sl
 80181a4:	f7e8 f854 	bl	8000250 <memchr>
 80181a8:	b138      	cbz	r0, 80181ba <_vfiprintf_r+0x176>
 80181aa:	9b04      	ldr	r3, [sp, #16]
 80181ac:	eba0 000a 	sub.w	r0, r0, sl
 80181b0:	2240      	movs	r2, #64	@ 0x40
 80181b2:	4082      	lsls	r2, r0
 80181b4:	4313      	orrs	r3, r2
 80181b6:	3401      	adds	r4, #1
 80181b8:	9304      	str	r3, [sp, #16]
 80181ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181be:	4829      	ldr	r0, [pc, #164]	@ (8018264 <_vfiprintf_r+0x220>)
 80181c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80181c4:	2206      	movs	r2, #6
 80181c6:	f7e8 f843 	bl	8000250 <memchr>
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d03f      	beq.n	801824e <_vfiprintf_r+0x20a>
 80181ce:	4b26      	ldr	r3, [pc, #152]	@ (8018268 <_vfiprintf_r+0x224>)
 80181d0:	bb1b      	cbnz	r3, 801821a <_vfiprintf_r+0x1d6>
 80181d2:	9b03      	ldr	r3, [sp, #12]
 80181d4:	3307      	adds	r3, #7
 80181d6:	f023 0307 	bic.w	r3, r3, #7
 80181da:	3308      	adds	r3, #8
 80181dc:	9303      	str	r3, [sp, #12]
 80181de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181e0:	443b      	add	r3, r7
 80181e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80181e4:	e76a      	b.n	80180bc <_vfiprintf_r+0x78>
 80181e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80181ea:	460c      	mov	r4, r1
 80181ec:	2001      	movs	r0, #1
 80181ee:	e7a8      	b.n	8018142 <_vfiprintf_r+0xfe>
 80181f0:	2300      	movs	r3, #0
 80181f2:	3401      	adds	r4, #1
 80181f4:	9305      	str	r3, [sp, #20]
 80181f6:	4619      	mov	r1, r3
 80181f8:	f04f 0c0a 	mov.w	ip, #10
 80181fc:	4620      	mov	r0, r4
 80181fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018202:	3a30      	subs	r2, #48	@ 0x30
 8018204:	2a09      	cmp	r2, #9
 8018206:	d903      	bls.n	8018210 <_vfiprintf_r+0x1cc>
 8018208:	2b00      	cmp	r3, #0
 801820a:	d0c6      	beq.n	801819a <_vfiprintf_r+0x156>
 801820c:	9105      	str	r1, [sp, #20]
 801820e:	e7c4      	b.n	801819a <_vfiprintf_r+0x156>
 8018210:	fb0c 2101 	mla	r1, ip, r1, r2
 8018214:	4604      	mov	r4, r0
 8018216:	2301      	movs	r3, #1
 8018218:	e7f0      	b.n	80181fc <_vfiprintf_r+0x1b8>
 801821a:	ab03      	add	r3, sp, #12
 801821c:	9300      	str	r3, [sp, #0]
 801821e:	462a      	mov	r2, r5
 8018220:	4b12      	ldr	r3, [pc, #72]	@ (801826c <_vfiprintf_r+0x228>)
 8018222:	a904      	add	r1, sp, #16
 8018224:	4630      	mov	r0, r6
 8018226:	f3af 8000 	nop.w
 801822a:	4607      	mov	r7, r0
 801822c:	1c78      	adds	r0, r7, #1
 801822e:	d1d6      	bne.n	80181de <_vfiprintf_r+0x19a>
 8018230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018232:	07d9      	lsls	r1, r3, #31
 8018234:	d405      	bmi.n	8018242 <_vfiprintf_r+0x1fe>
 8018236:	89ab      	ldrh	r3, [r5, #12]
 8018238:	059a      	lsls	r2, r3, #22
 801823a:	d402      	bmi.n	8018242 <_vfiprintf_r+0x1fe>
 801823c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801823e:	f7ff fceb 	bl	8017c18 <__retarget_lock_release_recursive>
 8018242:	89ab      	ldrh	r3, [r5, #12]
 8018244:	065b      	lsls	r3, r3, #25
 8018246:	f53f af1f 	bmi.w	8018088 <_vfiprintf_r+0x44>
 801824a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801824c:	e71e      	b.n	801808c <_vfiprintf_r+0x48>
 801824e:	ab03      	add	r3, sp, #12
 8018250:	9300      	str	r3, [sp, #0]
 8018252:	462a      	mov	r2, r5
 8018254:	4b05      	ldr	r3, [pc, #20]	@ (801826c <_vfiprintf_r+0x228>)
 8018256:	a904      	add	r1, sp, #16
 8018258:	4630      	mov	r0, r6
 801825a:	f000 f879 	bl	8018350 <_printf_i>
 801825e:	e7e4      	b.n	801822a <_vfiprintf_r+0x1e6>
 8018260:	0801984c 	.word	0x0801984c
 8018264:	08019856 	.word	0x08019856
 8018268:	00000000 	.word	0x00000000
 801826c:	0801801f 	.word	0x0801801f
 8018270:	08019852 	.word	0x08019852

08018274 <_printf_common>:
 8018274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018278:	4616      	mov	r6, r2
 801827a:	4698      	mov	r8, r3
 801827c:	688a      	ldr	r2, [r1, #8]
 801827e:	690b      	ldr	r3, [r1, #16]
 8018280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018284:	4293      	cmp	r3, r2
 8018286:	bfb8      	it	lt
 8018288:	4613      	movlt	r3, r2
 801828a:	6033      	str	r3, [r6, #0]
 801828c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018290:	4607      	mov	r7, r0
 8018292:	460c      	mov	r4, r1
 8018294:	b10a      	cbz	r2, 801829a <_printf_common+0x26>
 8018296:	3301      	adds	r3, #1
 8018298:	6033      	str	r3, [r6, #0]
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	0699      	lsls	r1, r3, #26
 801829e:	bf42      	ittt	mi
 80182a0:	6833      	ldrmi	r3, [r6, #0]
 80182a2:	3302      	addmi	r3, #2
 80182a4:	6033      	strmi	r3, [r6, #0]
 80182a6:	6825      	ldr	r5, [r4, #0]
 80182a8:	f015 0506 	ands.w	r5, r5, #6
 80182ac:	d106      	bne.n	80182bc <_printf_common+0x48>
 80182ae:	f104 0a19 	add.w	sl, r4, #25
 80182b2:	68e3      	ldr	r3, [r4, #12]
 80182b4:	6832      	ldr	r2, [r6, #0]
 80182b6:	1a9b      	subs	r3, r3, r2
 80182b8:	42ab      	cmp	r3, r5
 80182ba:	dc26      	bgt.n	801830a <_printf_common+0x96>
 80182bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80182c0:	6822      	ldr	r2, [r4, #0]
 80182c2:	3b00      	subs	r3, #0
 80182c4:	bf18      	it	ne
 80182c6:	2301      	movne	r3, #1
 80182c8:	0692      	lsls	r2, r2, #26
 80182ca:	d42b      	bmi.n	8018324 <_printf_common+0xb0>
 80182cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80182d0:	4641      	mov	r1, r8
 80182d2:	4638      	mov	r0, r7
 80182d4:	47c8      	blx	r9
 80182d6:	3001      	adds	r0, #1
 80182d8:	d01e      	beq.n	8018318 <_printf_common+0xa4>
 80182da:	6823      	ldr	r3, [r4, #0]
 80182dc:	6922      	ldr	r2, [r4, #16]
 80182de:	f003 0306 	and.w	r3, r3, #6
 80182e2:	2b04      	cmp	r3, #4
 80182e4:	bf02      	ittt	eq
 80182e6:	68e5      	ldreq	r5, [r4, #12]
 80182e8:	6833      	ldreq	r3, [r6, #0]
 80182ea:	1aed      	subeq	r5, r5, r3
 80182ec:	68a3      	ldr	r3, [r4, #8]
 80182ee:	bf0c      	ite	eq
 80182f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182f4:	2500      	movne	r5, #0
 80182f6:	4293      	cmp	r3, r2
 80182f8:	bfc4      	itt	gt
 80182fa:	1a9b      	subgt	r3, r3, r2
 80182fc:	18ed      	addgt	r5, r5, r3
 80182fe:	2600      	movs	r6, #0
 8018300:	341a      	adds	r4, #26
 8018302:	42b5      	cmp	r5, r6
 8018304:	d11a      	bne.n	801833c <_printf_common+0xc8>
 8018306:	2000      	movs	r0, #0
 8018308:	e008      	b.n	801831c <_printf_common+0xa8>
 801830a:	2301      	movs	r3, #1
 801830c:	4652      	mov	r2, sl
 801830e:	4641      	mov	r1, r8
 8018310:	4638      	mov	r0, r7
 8018312:	47c8      	blx	r9
 8018314:	3001      	adds	r0, #1
 8018316:	d103      	bne.n	8018320 <_printf_common+0xac>
 8018318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018320:	3501      	adds	r5, #1
 8018322:	e7c6      	b.n	80182b2 <_printf_common+0x3e>
 8018324:	18e1      	adds	r1, r4, r3
 8018326:	1c5a      	adds	r2, r3, #1
 8018328:	2030      	movs	r0, #48	@ 0x30
 801832a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801832e:	4422      	add	r2, r4
 8018330:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018338:	3302      	adds	r3, #2
 801833a:	e7c7      	b.n	80182cc <_printf_common+0x58>
 801833c:	2301      	movs	r3, #1
 801833e:	4622      	mov	r2, r4
 8018340:	4641      	mov	r1, r8
 8018342:	4638      	mov	r0, r7
 8018344:	47c8      	blx	r9
 8018346:	3001      	adds	r0, #1
 8018348:	d0e6      	beq.n	8018318 <_printf_common+0xa4>
 801834a:	3601      	adds	r6, #1
 801834c:	e7d9      	b.n	8018302 <_printf_common+0x8e>
	...

08018350 <_printf_i>:
 8018350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018354:	7e0f      	ldrb	r7, [r1, #24]
 8018356:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018358:	2f78      	cmp	r7, #120	@ 0x78
 801835a:	4691      	mov	r9, r2
 801835c:	4680      	mov	r8, r0
 801835e:	460c      	mov	r4, r1
 8018360:	469a      	mov	sl, r3
 8018362:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018366:	d807      	bhi.n	8018378 <_printf_i+0x28>
 8018368:	2f62      	cmp	r7, #98	@ 0x62
 801836a:	d80a      	bhi.n	8018382 <_printf_i+0x32>
 801836c:	2f00      	cmp	r7, #0
 801836e:	f000 80d2 	beq.w	8018516 <_printf_i+0x1c6>
 8018372:	2f58      	cmp	r7, #88	@ 0x58
 8018374:	f000 80b9 	beq.w	80184ea <_printf_i+0x19a>
 8018378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801837c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018380:	e03a      	b.n	80183f8 <_printf_i+0xa8>
 8018382:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018386:	2b15      	cmp	r3, #21
 8018388:	d8f6      	bhi.n	8018378 <_printf_i+0x28>
 801838a:	a101      	add	r1, pc, #4	@ (adr r1, 8018390 <_printf_i+0x40>)
 801838c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018390:	080183e9 	.word	0x080183e9
 8018394:	080183fd 	.word	0x080183fd
 8018398:	08018379 	.word	0x08018379
 801839c:	08018379 	.word	0x08018379
 80183a0:	08018379 	.word	0x08018379
 80183a4:	08018379 	.word	0x08018379
 80183a8:	080183fd 	.word	0x080183fd
 80183ac:	08018379 	.word	0x08018379
 80183b0:	08018379 	.word	0x08018379
 80183b4:	08018379 	.word	0x08018379
 80183b8:	08018379 	.word	0x08018379
 80183bc:	080184fd 	.word	0x080184fd
 80183c0:	08018427 	.word	0x08018427
 80183c4:	080184b7 	.word	0x080184b7
 80183c8:	08018379 	.word	0x08018379
 80183cc:	08018379 	.word	0x08018379
 80183d0:	0801851f 	.word	0x0801851f
 80183d4:	08018379 	.word	0x08018379
 80183d8:	08018427 	.word	0x08018427
 80183dc:	08018379 	.word	0x08018379
 80183e0:	08018379 	.word	0x08018379
 80183e4:	080184bf 	.word	0x080184bf
 80183e8:	6833      	ldr	r3, [r6, #0]
 80183ea:	1d1a      	adds	r2, r3, #4
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	6032      	str	r2, [r6, #0]
 80183f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80183f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80183f8:	2301      	movs	r3, #1
 80183fa:	e09d      	b.n	8018538 <_printf_i+0x1e8>
 80183fc:	6833      	ldr	r3, [r6, #0]
 80183fe:	6820      	ldr	r0, [r4, #0]
 8018400:	1d19      	adds	r1, r3, #4
 8018402:	6031      	str	r1, [r6, #0]
 8018404:	0606      	lsls	r6, r0, #24
 8018406:	d501      	bpl.n	801840c <_printf_i+0xbc>
 8018408:	681d      	ldr	r5, [r3, #0]
 801840a:	e003      	b.n	8018414 <_printf_i+0xc4>
 801840c:	0645      	lsls	r5, r0, #25
 801840e:	d5fb      	bpl.n	8018408 <_printf_i+0xb8>
 8018410:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018414:	2d00      	cmp	r5, #0
 8018416:	da03      	bge.n	8018420 <_printf_i+0xd0>
 8018418:	232d      	movs	r3, #45	@ 0x2d
 801841a:	426d      	negs	r5, r5
 801841c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018420:	4859      	ldr	r0, [pc, #356]	@ (8018588 <_printf_i+0x238>)
 8018422:	230a      	movs	r3, #10
 8018424:	e011      	b.n	801844a <_printf_i+0xfa>
 8018426:	6821      	ldr	r1, [r4, #0]
 8018428:	6833      	ldr	r3, [r6, #0]
 801842a:	0608      	lsls	r0, r1, #24
 801842c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018430:	d402      	bmi.n	8018438 <_printf_i+0xe8>
 8018432:	0649      	lsls	r1, r1, #25
 8018434:	bf48      	it	mi
 8018436:	b2ad      	uxthmi	r5, r5
 8018438:	2f6f      	cmp	r7, #111	@ 0x6f
 801843a:	4853      	ldr	r0, [pc, #332]	@ (8018588 <_printf_i+0x238>)
 801843c:	6033      	str	r3, [r6, #0]
 801843e:	bf14      	ite	ne
 8018440:	230a      	movne	r3, #10
 8018442:	2308      	moveq	r3, #8
 8018444:	2100      	movs	r1, #0
 8018446:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801844a:	6866      	ldr	r6, [r4, #4]
 801844c:	60a6      	str	r6, [r4, #8]
 801844e:	2e00      	cmp	r6, #0
 8018450:	bfa2      	ittt	ge
 8018452:	6821      	ldrge	r1, [r4, #0]
 8018454:	f021 0104 	bicge.w	r1, r1, #4
 8018458:	6021      	strge	r1, [r4, #0]
 801845a:	b90d      	cbnz	r5, 8018460 <_printf_i+0x110>
 801845c:	2e00      	cmp	r6, #0
 801845e:	d04b      	beq.n	80184f8 <_printf_i+0x1a8>
 8018460:	4616      	mov	r6, r2
 8018462:	fbb5 f1f3 	udiv	r1, r5, r3
 8018466:	fb03 5711 	mls	r7, r3, r1, r5
 801846a:	5dc7      	ldrb	r7, [r0, r7]
 801846c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018470:	462f      	mov	r7, r5
 8018472:	42bb      	cmp	r3, r7
 8018474:	460d      	mov	r5, r1
 8018476:	d9f4      	bls.n	8018462 <_printf_i+0x112>
 8018478:	2b08      	cmp	r3, #8
 801847a:	d10b      	bne.n	8018494 <_printf_i+0x144>
 801847c:	6823      	ldr	r3, [r4, #0]
 801847e:	07df      	lsls	r7, r3, #31
 8018480:	d508      	bpl.n	8018494 <_printf_i+0x144>
 8018482:	6923      	ldr	r3, [r4, #16]
 8018484:	6861      	ldr	r1, [r4, #4]
 8018486:	4299      	cmp	r1, r3
 8018488:	bfde      	ittt	le
 801848a:	2330      	movle	r3, #48	@ 0x30
 801848c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018490:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018494:	1b92      	subs	r2, r2, r6
 8018496:	6122      	str	r2, [r4, #16]
 8018498:	f8cd a000 	str.w	sl, [sp]
 801849c:	464b      	mov	r3, r9
 801849e:	aa03      	add	r2, sp, #12
 80184a0:	4621      	mov	r1, r4
 80184a2:	4640      	mov	r0, r8
 80184a4:	f7ff fee6 	bl	8018274 <_printf_common>
 80184a8:	3001      	adds	r0, #1
 80184aa:	d14a      	bne.n	8018542 <_printf_i+0x1f2>
 80184ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80184b0:	b004      	add	sp, #16
 80184b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184b6:	6823      	ldr	r3, [r4, #0]
 80184b8:	f043 0320 	orr.w	r3, r3, #32
 80184bc:	6023      	str	r3, [r4, #0]
 80184be:	4833      	ldr	r0, [pc, #204]	@ (801858c <_printf_i+0x23c>)
 80184c0:	2778      	movs	r7, #120	@ 0x78
 80184c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80184c6:	6823      	ldr	r3, [r4, #0]
 80184c8:	6831      	ldr	r1, [r6, #0]
 80184ca:	061f      	lsls	r7, r3, #24
 80184cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80184d0:	d402      	bmi.n	80184d8 <_printf_i+0x188>
 80184d2:	065f      	lsls	r7, r3, #25
 80184d4:	bf48      	it	mi
 80184d6:	b2ad      	uxthmi	r5, r5
 80184d8:	6031      	str	r1, [r6, #0]
 80184da:	07d9      	lsls	r1, r3, #31
 80184dc:	bf44      	itt	mi
 80184de:	f043 0320 	orrmi.w	r3, r3, #32
 80184e2:	6023      	strmi	r3, [r4, #0]
 80184e4:	b11d      	cbz	r5, 80184ee <_printf_i+0x19e>
 80184e6:	2310      	movs	r3, #16
 80184e8:	e7ac      	b.n	8018444 <_printf_i+0xf4>
 80184ea:	4827      	ldr	r0, [pc, #156]	@ (8018588 <_printf_i+0x238>)
 80184ec:	e7e9      	b.n	80184c2 <_printf_i+0x172>
 80184ee:	6823      	ldr	r3, [r4, #0]
 80184f0:	f023 0320 	bic.w	r3, r3, #32
 80184f4:	6023      	str	r3, [r4, #0]
 80184f6:	e7f6      	b.n	80184e6 <_printf_i+0x196>
 80184f8:	4616      	mov	r6, r2
 80184fa:	e7bd      	b.n	8018478 <_printf_i+0x128>
 80184fc:	6833      	ldr	r3, [r6, #0]
 80184fe:	6825      	ldr	r5, [r4, #0]
 8018500:	6961      	ldr	r1, [r4, #20]
 8018502:	1d18      	adds	r0, r3, #4
 8018504:	6030      	str	r0, [r6, #0]
 8018506:	062e      	lsls	r6, r5, #24
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	d501      	bpl.n	8018510 <_printf_i+0x1c0>
 801850c:	6019      	str	r1, [r3, #0]
 801850e:	e002      	b.n	8018516 <_printf_i+0x1c6>
 8018510:	0668      	lsls	r0, r5, #25
 8018512:	d5fb      	bpl.n	801850c <_printf_i+0x1bc>
 8018514:	8019      	strh	r1, [r3, #0]
 8018516:	2300      	movs	r3, #0
 8018518:	6123      	str	r3, [r4, #16]
 801851a:	4616      	mov	r6, r2
 801851c:	e7bc      	b.n	8018498 <_printf_i+0x148>
 801851e:	6833      	ldr	r3, [r6, #0]
 8018520:	1d1a      	adds	r2, r3, #4
 8018522:	6032      	str	r2, [r6, #0]
 8018524:	681e      	ldr	r6, [r3, #0]
 8018526:	6862      	ldr	r2, [r4, #4]
 8018528:	2100      	movs	r1, #0
 801852a:	4630      	mov	r0, r6
 801852c:	f7e7 fe90 	bl	8000250 <memchr>
 8018530:	b108      	cbz	r0, 8018536 <_printf_i+0x1e6>
 8018532:	1b80      	subs	r0, r0, r6
 8018534:	6060      	str	r0, [r4, #4]
 8018536:	6863      	ldr	r3, [r4, #4]
 8018538:	6123      	str	r3, [r4, #16]
 801853a:	2300      	movs	r3, #0
 801853c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018540:	e7aa      	b.n	8018498 <_printf_i+0x148>
 8018542:	6923      	ldr	r3, [r4, #16]
 8018544:	4632      	mov	r2, r6
 8018546:	4649      	mov	r1, r9
 8018548:	4640      	mov	r0, r8
 801854a:	47d0      	blx	sl
 801854c:	3001      	adds	r0, #1
 801854e:	d0ad      	beq.n	80184ac <_printf_i+0x15c>
 8018550:	6823      	ldr	r3, [r4, #0]
 8018552:	079b      	lsls	r3, r3, #30
 8018554:	d413      	bmi.n	801857e <_printf_i+0x22e>
 8018556:	68e0      	ldr	r0, [r4, #12]
 8018558:	9b03      	ldr	r3, [sp, #12]
 801855a:	4298      	cmp	r0, r3
 801855c:	bfb8      	it	lt
 801855e:	4618      	movlt	r0, r3
 8018560:	e7a6      	b.n	80184b0 <_printf_i+0x160>
 8018562:	2301      	movs	r3, #1
 8018564:	4632      	mov	r2, r6
 8018566:	4649      	mov	r1, r9
 8018568:	4640      	mov	r0, r8
 801856a:	47d0      	blx	sl
 801856c:	3001      	adds	r0, #1
 801856e:	d09d      	beq.n	80184ac <_printf_i+0x15c>
 8018570:	3501      	adds	r5, #1
 8018572:	68e3      	ldr	r3, [r4, #12]
 8018574:	9903      	ldr	r1, [sp, #12]
 8018576:	1a5b      	subs	r3, r3, r1
 8018578:	42ab      	cmp	r3, r5
 801857a:	dcf2      	bgt.n	8018562 <_printf_i+0x212>
 801857c:	e7eb      	b.n	8018556 <_printf_i+0x206>
 801857e:	2500      	movs	r5, #0
 8018580:	f104 0619 	add.w	r6, r4, #25
 8018584:	e7f5      	b.n	8018572 <_printf_i+0x222>
 8018586:	bf00      	nop
 8018588:	0801985d 	.word	0x0801985d
 801858c:	0801986e 	.word	0x0801986e

08018590 <__sflush_r>:
 8018590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018598:	0716      	lsls	r6, r2, #28
 801859a:	4605      	mov	r5, r0
 801859c:	460c      	mov	r4, r1
 801859e:	d454      	bmi.n	801864a <__sflush_r+0xba>
 80185a0:	684b      	ldr	r3, [r1, #4]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	dc02      	bgt.n	80185ac <__sflush_r+0x1c>
 80185a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	dd48      	ble.n	801863e <__sflush_r+0xae>
 80185ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80185ae:	2e00      	cmp	r6, #0
 80185b0:	d045      	beq.n	801863e <__sflush_r+0xae>
 80185b2:	2300      	movs	r3, #0
 80185b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80185b8:	682f      	ldr	r7, [r5, #0]
 80185ba:	6a21      	ldr	r1, [r4, #32]
 80185bc:	602b      	str	r3, [r5, #0]
 80185be:	d030      	beq.n	8018622 <__sflush_r+0x92>
 80185c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80185c2:	89a3      	ldrh	r3, [r4, #12]
 80185c4:	0759      	lsls	r1, r3, #29
 80185c6:	d505      	bpl.n	80185d4 <__sflush_r+0x44>
 80185c8:	6863      	ldr	r3, [r4, #4]
 80185ca:	1ad2      	subs	r2, r2, r3
 80185cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80185ce:	b10b      	cbz	r3, 80185d4 <__sflush_r+0x44>
 80185d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80185d2:	1ad2      	subs	r2, r2, r3
 80185d4:	2300      	movs	r3, #0
 80185d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80185d8:	6a21      	ldr	r1, [r4, #32]
 80185da:	4628      	mov	r0, r5
 80185dc:	47b0      	blx	r6
 80185de:	1c43      	adds	r3, r0, #1
 80185e0:	89a3      	ldrh	r3, [r4, #12]
 80185e2:	d106      	bne.n	80185f2 <__sflush_r+0x62>
 80185e4:	6829      	ldr	r1, [r5, #0]
 80185e6:	291d      	cmp	r1, #29
 80185e8:	d82b      	bhi.n	8018642 <__sflush_r+0xb2>
 80185ea:	4a2a      	ldr	r2, [pc, #168]	@ (8018694 <__sflush_r+0x104>)
 80185ec:	410a      	asrs	r2, r1
 80185ee:	07d6      	lsls	r6, r2, #31
 80185f0:	d427      	bmi.n	8018642 <__sflush_r+0xb2>
 80185f2:	2200      	movs	r2, #0
 80185f4:	6062      	str	r2, [r4, #4]
 80185f6:	04d9      	lsls	r1, r3, #19
 80185f8:	6922      	ldr	r2, [r4, #16]
 80185fa:	6022      	str	r2, [r4, #0]
 80185fc:	d504      	bpl.n	8018608 <__sflush_r+0x78>
 80185fe:	1c42      	adds	r2, r0, #1
 8018600:	d101      	bne.n	8018606 <__sflush_r+0x76>
 8018602:	682b      	ldr	r3, [r5, #0]
 8018604:	b903      	cbnz	r3, 8018608 <__sflush_r+0x78>
 8018606:	6560      	str	r0, [r4, #84]	@ 0x54
 8018608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801860a:	602f      	str	r7, [r5, #0]
 801860c:	b1b9      	cbz	r1, 801863e <__sflush_r+0xae>
 801860e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018612:	4299      	cmp	r1, r3
 8018614:	d002      	beq.n	801861c <__sflush_r+0x8c>
 8018616:	4628      	mov	r0, r5
 8018618:	f7ff fb40 	bl	8017c9c <_free_r>
 801861c:	2300      	movs	r3, #0
 801861e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018620:	e00d      	b.n	801863e <__sflush_r+0xae>
 8018622:	2301      	movs	r3, #1
 8018624:	4628      	mov	r0, r5
 8018626:	47b0      	blx	r6
 8018628:	4602      	mov	r2, r0
 801862a:	1c50      	adds	r0, r2, #1
 801862c:	d1c9      	bne.n	80185c2 <__sflush_r+0x32>
 801862e:	682b      	ldr	r3, [r5, #0]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d0c6      	beq.n	80185c2 <__sflush_r+0x32>
 8018634:	2b1d      	cmp	r3, #29
 8018636:	d001      	beq.n	801863c <__sflush_r+0xac>
 8018638:	2b16      	cmp	r3, #22
 801863a:	d11e      	bne.n	801867a <__sflush_r+0xea>
 801863c:	602f      	str	r7, [r5, #0]
 801863e:	2000      	movs	r0, #0
 8018640:	e022      	b.n	8018688 <__sflush_r+0xf8>
 8018642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018646:	b21b      	sxth	r3, r3
 8018648:	e01b      	b.n	8018682 <__sflush_r+0xf2>
 801864a:	690f      	ldr	r7, [r1, #16]
 801864c:	2f00      	cmp	r7, #0
 801864e:	d0f6      	beq.n	801863e <__sflush_r+0xae>
 8018650:	0793      	lsls	r3, r2, #30
 8018652:	680e      	ldr	r6, [r1, #0]
 8018654:	bf08      	it	eq
 8018656:	694b      	ldreq	r3, [r1, #20]
 8018658:	600f      	str	r7, [r1, #0]
 801865a:	bf18      	it	ne
 801865c:	2300      	movne	r3, #0
 801865e:	eba6 0807 	sub.w	r8, r6, r7
 8018662:	608b      	str	r3, [r1, #8]
 8018664:	f1b8 0f00 	cmp.w	r8, #0
 8018668:	dde9      	ble.n	801863e <__sflush_r+0xae>
 801866a:	6a21      	ldr	r1, [r4, #32]
 801866c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801866e:	4643      	mov	r3, r8
 8018670:	463a      	mov	r2, r7
 8018672:	4628      	mov	r0, r5
 8018674:	47b0      	blx	r6
 8018676:	2800      	cmp	r0, #0
 8018678:	dc08      	bgt.n	801868c <__sflush_r+0xfc>
 801867a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801867e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018682:	81a3      	strh	r3, [r4, #12]
 8018684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801868c:	4407      	add	r7, r0
 801868e:	eba8 0800 	sub.w	r8, r8, r0
 8018692:	e7e7      	b.n	8018664 <__sflush_r+0xd4>
 8018694:	dfbffffe 	.word	0xdfbffffe

08018698 <_fflush_r>:
 8018698:	b538      	push	{r3, r4, r5, lr}
 801869a:	690b      	ldr	r3, [r1, #16]
 801869c:	4605      	mov	r5, r0
 801869e:	460c      	mov	r4, r1
 80186a0:	b913      	cbnz	r3, 80186a8 <_fflush_r+0x10>
 80186a2:	2500      	movs	r5, #0
 80186a4:	4628      	mov	r0, r5
 80186a6:	bd38      	pop	{r3, r4, r5, pc}
 80186a8:	b118      	cbz	r0, 80186b2 <_fflush_r+0x1a>
 80186aa:	6a03      	ldr	r3, [r0, #32]
 80186ac:	b90b      	cbnz	r3, 80186b2 <_fflush_r+0x1a>
 80186ae:	f7ff f8d1 	bl	8017854 <__sinit>
 80186b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d0f3      	beq.n	80186a2 <_fflush_r+0xa>
 80186ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80186bc:	07d0      	lsls	r0, r2, #31
 80186be:	d404      	bmi.n	80186ca <_fflush_r+0x32>
 80186c0:	0599      	lsls	r1, r3, #22
 80186c2:	d402      	bmi.n	80186ca <_fflush_r+0x32>
 80186c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80186c6:	f7ff faa6 	bl	8017c16 <__retarget_lock_acquire_recursive>
 80186ca:	4628      	mov	r0, r5
 80186cc:	4621      	mov	r1, r4
 80186ce:	f7ff ff5f 	bl	8018590 <__sflush_r>
 80186d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80186d4:	07da      	lsls	r2, r3, #31
 80186d6:	4605      	mov	r5, r0
 80186d8:	d4e4      	bmi.n	80186a4 <_fflush_r+0xc>
 80186da:	89a3      	ldrh	r3, [r4, #12]
 80186dc:	059b      	lsls	r3, r3, #22
 80186de:	d4e1      	bmi.n	80186a4 <_fflush_r+0xc>
 80186e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80186e2:	f7ff fa99 	bl	8017c18 <__retarget_lock_release_recursive>
 80186e6:	e7dd      	b.n	80186a4 <_fflush_r+0xc>

080186e8 <fiprintf>:
 80186e8:	b40e      	push	{r1, r2, r3}
 80186ea:	b503      	push	{r0, r1, lr}
 80186ec:	4601      	mov	r1, r0
 80186ee:	ab03      	add	r3, sp, #12
 80186f0:	4805      	ldr	r0, [pc, #20]	@ (8018708 <fiprintf+0x20>)
 80186f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80186f6:	6800      	ldr	r0, [r0, #0]
 80186f8:	9301      	str	r3, [sp, #4]
 80186fa:	f7ff fca3 	bl	8018044 <_vfiprintf_r>
 80186fe:	b002      	add	sp, #8
 8018700:	f85d eb04 	ldr.w	lr, [sp], #4
 8018704:	b003      	add	sp, #12
 8018706:	4770      	bx	lr
 8018708:	20000144 	.word	0x20000144

0801870c <__swbuf_r>:
 801870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801870e:	460e      	mov	r6, r1
 8018710:	4614      	mov	r4, r2
 8018712:	4605      	mov	r5, r0
 8018714:	b118      	cbz	r0, 801871e <__swbuf_r+0x12>
 8018716:	6a03      	ldr	r3, [r0, #32]
 8018718:	b90b      	cbnz	r3, 801871e <__swbuf_r+0x12>
 801871a:	f7ff f89b 	bl	8017854 <__sinit>
 801871e:	69a3      	ldr	r3, [r4, #24]
 8018720:	60a3      	str	r3, [r4, #8]
 8018722:	89a3      	ldrh	r3, [r4, #12]
 8018724:	071a      	lsls	r2, r3, #28
 8018726:	d501      	bpl.n	801872c <__swbuf_r+0x20>
 8018728:	6923      	ldr	r3, [r4, #16]
 801872a:	b943      	cbnz	r3, 801873e <__swbuf_r+0x32>
 801872c:	4621      	mov	r1, r4
 801872e:	4628      	mov	r0, r5
 8018730:	f000 f82a 	bl	8018788 <__swsetup_r>
 8018734:	b118      	cbz	r0, 801873e <__swbuf_r+0x32>
 8018736:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801873a:	4638      	mov	r0, r7
 801873c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801873e:	6823      	ldr	r3, [r4, #0]
 8018740:	6922      	ldr	r2, [r4, #16]
 8018742:	1a98      	subs	r0, r3, r2
 8018744:	6963      	ldr	r3, [r4, #20]
 8018746:	b2f6      	uxtb	r6, r6
 8018748:	4283      	cmp	r3, r0
 801874a:	4637      	mov	r7, r6
 801874c:	dc05      	bgt.n	801875a <__swbuf_r+0x4e>
 801874e:	4621      	mov	r1, r4
 8018750:	4628      	mov	r0, r5
 8018752:	f7ff ffa1 	bl	8018698 <_fflush_r>
 8018756:	2800      	cmp	r0, #0
 8018758:	d1ed      	bne.n	8018736 <__swbuf_r+0x2a>
 801875a:	68a3      	ldr	r3, [r4, #8]
 801875c:	3b01      	subs	r3, #1
 801875e:	60a3      	str	r3, [r4, #8]
 8018760:	6823      	ldr	r3, [r4, #0]
 8018762:	1c5a      	adds	r2, r3, #1
 8018764:	6022      	str	r2, [r4, #0]
 8018766:	701e      	strb	r6, [r3, #0]
 8018768:	6962      	ldr	r2, [r4, #20]
 801876a:	1c43      	adds	r3, r0, #1
 801876c:	429a      	cmp	r2, r3
 801876e:	d004      	beq.n	801877a <__swbuf_r+0x6e>
 8018770:	89a3      	ldrh	r3, [r4, #12]
 8018772:	07db      	lsls	r3, r3, #31
 8018774:	d5e1      	bpl.n	801873a <__swbuf_r+0x2e>
 8018776:	2e0a      	cmp	r6, #10
 8018778:	d1df      	bne.n	801873a <__swbuf_r+0x2e>
 801877a:	4621      	mov	r1, r4
 801877c:	4628      	mov	r0, r5
 801877e:	f7ff ff8b 	bl	8018698 <_fflush_r>
 8018782:	2800      	cmp	r0, #0
 8018784:	d0d9      	beq.n	801873a <__swbuf_r+0x2e>
 8018786:	e7d6      	b.n	8018736 <__swbuf_r+0x2a>

08018788 <__swsetup_r>:
 8018788:	b538      	push	{r3, r4, r5, lr}
 801878a:	4b29      	ldr	r3, [pc, #164]	@ (8018830 <__swsetup_r+0xa8>)
 801878c:	4605      	mov	r5, r0
 801878e:	6818      	ldr	r0, [r3, #0]
 8018790:	460c      	mov	r4, r1
 8018792:	b118      	cbz	r0, 801879c <__swsetup_r+0x14>
 8018794:	6a03      	ldr	r3, [r0, #32]
 8018796:	b90b      	cbnz	r3, 801879c <__swsetup_r+0x14>
 8018798:	f7ff f85c 	bl	8017854 <__sinit>
 801879c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187a0:	0719      	lsls	r1, r3, #28
 80187a2:	d422      	bmi.n	80187ea <__swsetup_r+0x62>
 80187a4:	06da      	lsls	r2, r3, #27
 80187a6:	d407      	bmi.n	80187b8 <__swsetup_r+0x30>
 80187a8:	2209      	movs	r2, #9
 80187aa:	602a      	str	r2, [r5, #0]
 80187ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187b0:	81a3      	strh	r3, [r4, #12]
 80187b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187b6:	e033      	b.n	8018820 <__swsetup_r+0x98>
 80187b8:	0758      	lsls	r0, r3, #29
 80187ba:	d512      	bpl.n	80187e2 <__swsetup_r+0x5a>
 80187bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80187be:	b141      	cbz	r1, 80187d2 <__swsetup_r+0x4a>
 80187c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187c4:	4299      	cmp	r1, r3
 80187c6:	d002      	beq.n	80187ce <__swsetup_r+0x46>
 80187c8:	4628      	mov	r0, r5
 80187ca:	f7ff fa67 	bl	8017c9c <_free_r>
 80187ce:	2300      	movs	r3, #0
 80187d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80187d2:	89a3      	ldrh	r3, [r4, #12]
 80187d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80187d8:	81a3      	strh	r3, [r4, #12]
 80187da:	2300      	movs	r3, #0
 80187dc:	6063      	str	r3, [r4, #4]
 80187de:	6923      	ldr	r3, [r4, #16]
 80187e0:	6023      	str	r3, [r4, #0]
 80187e2:	89a3      	ldrh	r3, [r4, #12]
 80187e4:	f043 0308 	orr.w	r3, r3, #8
 80187e8:	81a3      	strh	r3, [r4, #12]
 80187ea:	6923      	ldr	r3, [r4, #16]
 80187ec:	b94b      	cbnz	r3, 8018802 <__swsetup_r+0x7a>
 80187ee:	89a3      	ldrh	r3, [r4, #12]
 80187f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80187f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187f8:	d003      	beq.n	8018802 <__swsetup_r+0x7a>
 80187fa:	4621      	mov	r1, r4
 80187fc:	4628      	mov	r0, r5
 80187fe:	f000 f846 	bl	801888e <__smakebuf_r>
 8018802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018806:	f013 0201 	ands.w	r2, r3, #1
 801880a:	d00a      	beq.n	8018822 <__swsetup_r+0x9a>
 801880c:	2200      	movs	r2, #0
 801880e:	60a2      	str	r2, [r4, #8]
 8018810:	6962      	ldr	r2, [r4, #20]
 8018812:	4252      	negs	r2, r2
 8018814:	61a2      	str	r2, [r4, #24]
 8018816:	6922      	ldr	r2, [r4, #16]
 8018818:	b942      	cbnz	r2, 801882c <__swsetup_r+0xa4>
 801881a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801881e:	d1c5      	bne.n	80187ac <__swsetup_r+0x24>
 8018820:	bd38      	pop	{r3, r4, r5, pc}
 8018822:	0799      	lsls	r1, r3, #30
 8018824:	bf58      	it	pl
 8018826:	6962      	ldrpl	r2, [r4, #20]
 8018828:	60a2      	str	r2, [r4, #8]
 801882a:	e7f4      	b.n	8018816 <__swsetup_r+0x8e>
 801882c:	2000      	movs	r0, #0
 801882e:	e7f7      	b.n	8018820 <__swsetup_r+0x98>
 8018830:	20000144 	.word	0x20000144

08018834 <abort>:
 8018834:	b508      	push	{r3, lr}
 8018836:	2006      	movs	r0, #6
 8018838:	f000 f88e 	bl	8018958 <raise>
 801883c:	2001      	movs	r0, #1
 801883e:	f7e9 f971 	bl	8001b24 <_exit>

08018842 <__swhatbuf_r>:
 8018842:	b570      	push	{r4, r5, r6, lr}
 8018844:	460c      	mov	r4, r1
 8018846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801884a:	2900      	cmp	r1, #0
 801884c:	b096      	sub	sp, #88	@ 0x58
 801884e:	4615      	mov	r5, r2
 8018850:	461e      	mov	r6, r3
 8018852:	da0d      	bge.n	8018870 <__swhatbuf_r+0x2e>
 8018854:	89a3      	ldrh	r3, [r4, #12]
 8018856:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801885a:	f04f 0100 	mov.w	r1, #0
 801885e:	bf14      	ite	ne
 8018860:	2340      	movne	r3, #64	@ 0x40
 8018862:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018866:	2000      	movs	r0, #0
 8018868:	6031      	str	r1, [r6, #0]
 801886a:	602b      	str	r3, [r5, #0]
 801886c:	b016      	add	sp, #88	@ 0x58
 801886e:	bd70      	pop	{r4, r5, r6, pc}
 8018870:	466a      	mov	r2, sp
 8018872:	f000 f879 	bl	8018968 <_fstat_r>
 8018876:	2800      	cmp	r0, #0
 8018878:	dbec      	blt.n	8018854 <__swhatbuf_r+0x12>
 801887a:	9901      	ldr	r1, [sp, #4]
 801887c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018880:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018884:	4259      	negs	r1, r3
 8018886:	4159      	adcs	r1, r3
 8018888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801888c:	e7eb      	b.n	8018866 <__swhatbuf_r+0x24>

0801888e <__smakebuf_r>:
 801888e:	898b      	ldrh	r3, [r1, #12]
 8018890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018892:	079d      	lsls	r5, r3, #30
 8018894:	4606      	mov	r6, r0
 8018896:	460c      	mov	r4, r1
 8018898:	d507      	bpl.n	80188aa <__smakebuf_r+0x1c>
 801889a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801889e:	6023      	str	r3, [r4, #0]
 80188a0:	6123      	str	r3, [r4, #16]
 80188a2:	2301      	movs	r3, #1
 80188a4:	6163      	str	r3, [r4, #20]
 80188a6:	b003      	add	sp, #12
 80188a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188aa:	ab01      	add	r3, sp, #4
 80188ac:	466a      	mov	r2, sp
 80188ae:	f7ff ffc8 	bl	8018842 <__swhatbuf_r>
 80188b2:	9f00      	ldr	r7, [sp, #0]
 80188b4:	4605      	mov	r5, r0
 80188b6:	4639      	mov	r1, r7
 80188b8:	4630      	mov	r0, r6
 80188ba:	f7fe fd99 	bl	80173f0 <_malloc_r>
 80188be:	b948      	cbnz	r0, 80188d4 <__smakebuf_r+0x46>
 80188c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188c4:	059a      	lsls	r2, r3, #22
 80188c6:	d4ee      	bmi.n	80188a6 <__smakebuf_r+0x18>
 80188c8:	f023 0303 	bic.w	r3, r3, #3
 80188cc:	f043 0302 	orr.w	r3, r3, #2
 80188d0:	81a3      	strh	r3, [r4, #12]
 80188d2:	e7e2      	b.n	801889a <__smakebuf_r+0xc>
 80188d4:	89a3      	ldrh	r3, [r4, #12]
 80188d6:	6020      	str	r0, [r4, #0]
 80188d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80188dc:	81a3      	strh	r3, [r4, #12]
 80188de:	9b01      	ldr	r3, [sp, #4]
 80188e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80188e4:	b15b      	cbz	r3, 80188fe <__smakebuf_r+0x70>
 80188e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80188ea:	4630      	mov	r0, r6
 80188ec:	f000 f84e 	bl	801898c <_isatty_r>
 80188f0:	b128      	cbz	r0, 80188fe <__smakebuf_r+0x70>
 80188f2:	89a3      	ldrh	r3, [r4, #12]
 80188f4:	f023 0303 	bic.w	r3, r3, #3
 80188f8:	f043 0301 	orr.w	r3, r3, #1
 80188fc:	81a3      	strh	r3, [r4, #12]
 80188fe:	89a3      	ldrh	r3, [r4, #12]
 8018900:	431d      	orrs	r5, r3
 8018902:	81a5      	strh	r5, [r4, #12]
 8018904:	e7cf      	b.n	80188a6 <__smakebuf_r+0x18>

08018906 <_raise_r>:
 8018906:	291f      	cmp	r1, #31
 8018908:	b538      	push	{r3, r4, r5, lr}
 801890a:	4605      	mov	r5, r0
 801890c:	460c      	mov	r4, r1
 801890e:	d904      	bls.n	801891a <_raise_r+0x14>
 8018910:	2316      	movs	r3, #22
 8018912:	6003      	str	r3, [r0, #0]
 8018914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018918:	bd38      	pop	{r3, r4, r5, pc}
 801891a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801891c:	b112      	cbz	r2, 8018924 <_raise_r+0x1e>
 801891e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018922:	b94b      	cbnz	r3, 8018938 <_raise_r+0x32>
 8018924:	4628      	mov	r0, r5
 8018926:	f000 f853 	bl	80189d0 <_getpid_r>
 801892a:	4622      	mov	r2, r4
 801892c:	4601      	mov	r1, r0
 801892e:	4628      	mov	r0, r5
 8018930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018934:	f000 b83a 	b.w	80189ac <_kill_r>
 8018938:	2b01      	cmp	r3, #1
 801893a:	d00a      	beq.n	8018952 <_raise_r+0x4c>
 801893c:	1c59      	adds	r1, r3, #1
 801893e:	d103      	bne.n	8018948 <_raise_r+0x42>
 8018940:	2316      	movs	r3, #22
 8018942:	6003      	str	r3, [r0, #0]
 8018944:	2001      	movs	r0, #1
 8018946:	e7e7      	b.n	8018918 <_raise_r+0x12>
 8018948:	2100      	movs	r1, #0
 801894a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801894e:	4620      	mov	r0, r4
 8018950:	4798      	blx	r3
 8018952:	2000      	movs	r0, #0
 8018954:	e7e0      	b.n	8018918 <_raise_r+0x12>
	...

08018958 <raise>:
 8018958:	4b02      	ldr	r3, [pc, #8]	@ (8018964 <raise+0xc>)
 801895a:	4601      	mov	r1, r0
 801895c:	6818      	ldr	r0, [r3, #0]
 801895e:	f7ff bfd2 	b.w	8018906 <_raise_r>
 8018962:	bf00      	nop
 8018964:	20000144 	.word	0x20000144

08018968 <_fstat_r>:
 8018968:	b538      	push	{r3, r4, r5, lr}
 801896a:	4d07      	ldr	r5, [pc, #28]	@ (8018988 <_fstat_r+0x20>)
 801896c:	2300      	movs	r3, #0
 801896e:	4604      	mov	r4, r0
 8018970:	4608      	mov	r0, r1
 8018972:	4611      	mov	r1, r2
 8018974:	602b      	str	r3, [r5, #0]
 8018976:	f7e9 f925 	bl	8001bc4 <_fstat>
 801897a:	1c43      	adds	r3, r0, #1
 801897c:	d102      	bne.n	8018984 <_fstat_r+0x1c>
 801897e:	682b      	ldr	r3, [r5, #0]
 8018980:	b103      	cbz	r3, 8018984 <_fstat_r+0x1c>
 8018982:	6023      	str	r3, [r4, #0]
 8018984:	bd38      	pop	{r3, r4, r5, pc}
 8018986:	bf00      	nop
 8018988:	2000cd08 	.word	0x2000cd08

0801898c <_isatty_r>:
 801898c:	b538      	push	{r3, r4, r5, lr}
 801898e:	4d06      	ldr	r5, [pc, #24]	@ (80189a8 <_isatty_r+0x1c>)
 8018990:	2300      	movs	r3, #0
 8018992:	4604      	mov	r4, r0
 8018994:	4608      	mov	r0, r1
 8018996:	602b      	str	r3, [r5, #0]
 8018998:	f7e9 f924 	bl	8001be4 <_isatty>
 801899c:	1c43      	adds	r3, r0, #1
 801899e:	d102      	bne.n	80189a6 <_isatty_r+0x1a>
 80189a0:	682b      	ldr	r3, [r5, #0]
 80189a2:	b103      	cbz	r3, 80189a6 <_isatty_r+0x1a>
 80189a4:	6023      	str	r3, [r4, #0]
 80189a6:	bd38      	pop	{r3, r4, r5, pc}
 80189a8:	2000cd08 	.word	0x2000cd08

080189ac <_kill_r>:
 80189ac:	b538      	push	{r3, r4, r5, lr}
 80189ae:	4d07      	ldr	r5, [pc, #28]	@ (80189cc <_kill_r+0x20>)
 80189b0:	2300      	movs	r3, #0
 80189b2:	4604      	mov	r4, r0
 80189b4:	4608      	mov	r0, r1
 80189b6:	4611      	mov	r1, r2
 80189b8:	602b      	str	r3, [r5, #0]
 80189ba:	f7e9 f8a3 	bl	8001b04 <_kill>
 80189be:	1c43      	adds	r3, r0, #1
 80189c0:	d102      	bne.n	80189c8 <_kill_r+0x1c>
 80189c2:	682b      	ldr	r3, [r5, #0]
 80189c4:	b103      	cbz	r3, 80189c8 <_kill_r+0x1c>
 80189c6:	6023      	str	r3, [r4, #0]
 80189c8:	bd38      	pop	{r3, r4, r5, pc}
 80189ca:	bf00      	nop
 80189cc:	2000cd08 	.word	0x2000cd08

080189d0 <_getpid_r>:
 80189d0:	f7e9 b890 	b.w	8001af4 <_getpid>

080189d4 <_init>:
 80189d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189d6:	bf00      	nop
 80189d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189da:	bc08      	pop	{r3}
 80189dc:	469e      	mov	lr, r3
 80189de:	4770      	bx	lr

080189e0 <_fini>:
 80189e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189e2:	bf00      	nop
 80189e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189e6:	bc08      	pop	{r3}
 80189e8:	469e      	mov	lr, r3
 80189ea:	4770      	bx	lr
