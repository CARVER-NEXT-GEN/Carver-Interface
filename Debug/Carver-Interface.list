
Carver-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018bd8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  08018db8  08018db8  00019db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019dac  08019dac  0001b218  2**0
                  CONTENTS
  4 .ARM          00000008  08019dac  08019dac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019db4  08019db4  0001b218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08019db4  08019db4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019dc4  08019dc4  0001adc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08019dc8  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb80  20000218  08019fe0  0001b218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000cd98  08019fe0  0001bd98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027fe1  00000000  00000000  0001b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005580  00000000  00000000  00043229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f80  00000000  00000000  000487b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001835  00000000  00000000  0004a730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f387  00000000  00000000  0004bf65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002709e  00000000  00000000  0007b2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129b87  00000000  00000000  000a238a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001cbf11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009220  00000000  00000000  001cbf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001d51a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000218 	.word	0x20000218
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018da0 	.word	0x08018da0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000021c 	.word	0x2000021c
 800021c:	08018da0 	.word	0x08018da0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	@ 0x30
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2220      	movs	r2, #32
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f017 fbe3 	bl	8017e64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800069e:	4b33      	ldr	r3, [pc, #204]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a6:	4b31      	ldr	r3, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <MX_ADC1_Init+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b4:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_ADC1_Init+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <MX_ADC1_Init+0xec>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_ADC1_Init+0xec>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <MX_ADC1_Init+0xec>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <MX_ADC1_Init+0xec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_ADC1_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <MX_ADC1_Init+0xec>)
 80006da:	2201      	movs	r2, #1
 80006dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b23      	ldr	r3, [pc, #140]	@ (800076c <MX_ADC1_Init+0xec>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_ADC1_Init+0xec>)
 80006e8:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_ADC1_Init+0xec>)
 80006f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_ADC1_Init+0xec>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_ADC1_Init+0xec>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_ADC1_Init+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070c:	4817      	ldr	r0, [pc, #92]	@ (800076c <MX_ADC1_Init+0xec>)
 800070e:	f002 f841 	bl	8002794 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000718:	f001 f910 	bl	800193c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	@ (800076c <MX_ADC1_Init+0xec>)
 8000728:	f003 fb0e 	bl	8003d48 <HAL_ADCEx_MultiModeConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000732:	f001 f903 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_ADC1_Init+0xf0>)
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800073e:	2307      	movs	r3, #7
 8000740:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	@ 0x7f
 8000744:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	@ (800076c <MX_ADC1_Init+0xec>)
 8000754:	f002 fd36 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800075e:	f001 f8ed 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	@ 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000234 	.word	0x20000234
 8000770:	04300002 	.word	0x04300002

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09e      	sub	sp, #120	@ 0x78
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2254      	movs	r2, #84	@ 0x54
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f017 fb65 	bl	8017e64 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007a2:	d167      	bne.n	8000874 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007ae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4618      	mov	r0, r3
 80007b6:	f005 f833 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007c0:	f001 f8bc 	bl	800193c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007c4:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c8:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <HAL_ADC_MspInit+0x108>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Vout_Poten_Pin;
 80007f4:	2301      	movs	r3, #1
 80007f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Vout_Poten_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f003 fff3 	bl	80047f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000810:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <HAL_ADC_MspInit+0x110>)
 8000812:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000816:	2205      	movs	r2, #5
 8000818:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800082e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000832:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800083c:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800083e:	2220      	movs	r2, #32
 8000840:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800084a:	f003 fc95 	bl	8004178 <HAL_DMA_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000854:	f001 f872 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a09      	ldr	r2, [pc, #36]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 800085c:	655a      	str	r2, [r3, #84]	@ 0x54
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_ADC_MspInit+0x10c>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2012      	movs	r0, #18
 800086a:	f003 fc50 	bl	800410e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800086e:	2012      	movs	r0, #18
 8000870:	f003 fc67 	bl	8004142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000874:	bf00      	nop
 8000876:	3778      	adds	r7, #120	@ 0x78
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	200002a0 	.word	0x200002a0
 8000884:	40020030 	.word	0x40020030

08000888 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
 800088c:	2228      	movs	r2, #40	@ 0x28
 800088e:	4907      	ldr	r1, [pc, #28]	@ (80008ac <MX_FREERTOS_Init+0x24>)
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <MX_FREERTOS_Init+0x28>)
 8000892:	f002 f93b 	bl	8002b0c <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000896:	4a07      	ldr	r2, [pc, #28]	@ (80008b4 <MX_FREERTOS_Init+0x2c>)
 8000898:	2100      	movs	r1, #0
 800089a:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <MX_FREERTOS_Init+0x30>)
 800089c:	f007 fdfa 	bl	8008494 <osThreadNew>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <MX_FREERTOS_Init+0x34>)
 80008a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000338 	.word	0x20000338
 80008b0:	20000234 	.word	0x20000234
 80008b4:	08018e90 	.word	0x08018e90
 80008b8:	080008c1 	.word	0x080008c1
 80008bc:	20000388 	.word	0x20000388

080008c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008c4:	b0ee      	sub	sp, #440	@ 0x1b8
 80008c6:	af02      	add	r7, sp, #8
 80008c8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80008cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008d0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 80008d2:	4b6c      	ldr	r3, [pc, #432]	@ (8000a84 <StartDefaultTask+0x1c4>)
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a88 <StartDefaultTask+0x1c8>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4b6c      	ldr	r3, [pc, #432]	@ (8000a8c <StartDefaultTask+0x1cc>)
 80008dc:	4a6c      	ldr	r2, [pc, #432]	@ (8000a90 <StartDefaultTask+0x1d0>)
 80008de:	496d      	ldr	r1, [pc, #436]	@ (8000a94 <StartDefaultTask+0x1d4>)
 80008e0:	2001      	movs	r0, #1
 80008e2:	f00b fd5d 	bl	800c3a0 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80008e6:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00b fc74 	bl	800c1d8 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80008f0:	4b69      	ldr	r3, [pc, #420]	@ (8000a98 <StartDefaultTask+0x1d8>)
 80008f2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 80008f6:	4b69      	ldr	r3, [pc, #420]	@ (8000a9c <StartDefaultTask+0x1dc>)
 80008f8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 80008fc:	4b68      	ldr	r3, [pc, #416]	@ (8000aa0 <StartDefaultTask+0x1e0>)
 80008fe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000902:	4b68      	ldr	r3, [pc, #416]	@ (8000aa4 <StartDefaultTask+0x1e4>)
 8000904:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000908:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 800090c:	4618      	mov	r0, r3
 800090e:	f00b fc71 	bl	800c1f4 <rcutils_set_default_allocator>
 8000912:	4603      	mov	r3, r0
 8000914:	f083 0301 	eor.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800091e:	21e5      	movs	r1, #229	@ 0xe5
 8000920:	4861      	ldr	r0, [pc, #388]	@ (8000aa8 <StartDefaultTask+0x1e8>)
 8000922:	f017 f9b3 	bl	8017c8c <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(8);
 8000926:	4b61      	ldr	r3, [pc, #388]	@ (8000aac <StartDefaultTask+0x1ec>)
 8000928:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	const int timeout_ms = 1000;
 800092c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000930:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int executor_num = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

	const rosidl_message_type_support_t * uint16_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16);
 800093a:	f00c fedd 	bl	800d6f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>
 800093e:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	const rosidl_message_type_support_t * bool_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool);
 8000942:	f00c fea9 	bl	800d698 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>
 8000946:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * int8_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int8);
 800094a:	f00c febd 	bl	800d6c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8>
 800094e:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198



	allocator = rcl_get_default_allocator();
 8000952:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000956:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 800095a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800095e:	4618      	mov	r0, r3
 8000960:	f00b fc66 	bl	800c230 <rcutils_get_default_allocator>
 8000964:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000968:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800096c:	461d      	mov	r5, r3
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	682b      	ldr	r3, [r5, #0]
 8000974:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8000976:	463b      	mov	r3, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f00b f84b 	bl	800ba14 <rclc_executor_get_zero_initialized_executor>
 800097e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000982:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8000986:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800098a:	4611      	mov	r1, r2
 800098c:	2288      	movs	r2, #136	@ 0x88
 800098e:	4618      	mov	r0, r3
 8000990:	f017 fb31 	bl	8017ff6 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8000994:	f00a fae0 	bl	800af58 <rcl_get_zero_initialized_init_options>
 8000998:	4602      	mov	r2, r0
 800099a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800099e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009a2:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80009a4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80009a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009ac:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 80009b0:	466d      	mov	r5, sp
 80009b2:	f103 020c 	add.w	r2, r3, #12
 80009b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80009be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009c0:	4620      	mov	r0, r4
 80009c2:	f00a facb 	bl	800af5c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 80009c6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80009ca:	21c6      	movs	r1, #198	@ 0xc6
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00a fbc1 	bl	800b154 <rcl_init_options_set_domain_id>

	// create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80009d2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80009d6:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80009da:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4613      	mov	r3, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	f00b fae7 	bl	800bfb8 <rclc_support_init_with_options>

	// create timer
	rclc_timer_init_default(&XLR8_timer, &support, timer_period, timer_callback);
 80009ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80009ee:	2200      	movs	r2, #0
 80009f0:	4698      	mov	r8, r3
 80009f2:	4691      	mov	r9, r2
 80009f4:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80009f8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80009fc:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <StartDefaultTask+0x1f0>)
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	4642      	mov	r2, r8
 8000a02:	464b      	mov	r3, r9
 8000a04:	f00b fbb0 	bl	800c168 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "uros_carver_interface_node", "", &support);
 8000a08:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000a0c:	4a29      	ldr	r2, [pc, #164]	@ (8000ab4 <StartDefaultTask+0x1f4>)
 8000a0e:	492a      	ldr	r1, [pc, #168]	@ (8000ab8 <StartDefaultTask+0x1f8>)
 8000a10:	482a      	ldr	r0, [pc, #168]	@ (8000abc <StartDefaultTask+0x1fc>)
 8000a12:	f00b fb05 	bl	800c020 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&xrl8_publisher, &node, uint16_type_support, "accl_publisher");
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <StartDefaultTask+0x200>)
 8000a18:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8000a1c:	4927      	ldr	r1, [pc, #156]	@ (8000abc <StartDefaultTask+0x1fc>)
 8000a1e:	4829      	ldr	r0, [pc, #164]	@ (8000ac4 <StartDefaultTask+0x204>)
 8000a20:	f00b fb6e 	bl	800c100 <rclc_publisher_init_best_effort>
	rclc_publisher_init_best_effort(&emer_publisher, &node, bool_type_support, "carver_emergency");
 8000a24:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <StartDefaultTask+0x208>)
 8000a26:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000a2a:	4924      	ldr	r1, [pc, #144]	@ (8000abc <StartDefaultTask+0x1fc>)
 8000a2c:	4827      	ldr	r0, [pc, #156]	@ (8000acc <StartDefaultTask+0x20c>)
 8000a2e:	f00b fb67 	bl	800c100 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&direction_publisher, &node, int8_type_support, "accel_direction");
 8000a32:	4b27      	ldr	r3, [pc, #156]	@ (8000ad0 <StartDefaultTask+0x210>)
 8000a34:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000a38:	4920      	ldr	r1, [pc, #128]	@ (8000abc <StartDefaultTask+0x1fc>)
 8000a3a:	4826      	ldr	r0, [pc, #152]	@ (8000ad4 <StartDefaultTask+0x214>)
 8000a3c:	f00b fb2c 	bl	800c098 <rclc_publisher_init_default>
	// create service server

	// create service client

	// create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8000a40:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8000a44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a48:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8000a4c:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8000a50:	f00a ffea 	bl	800ba28 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &XLR8_timer);
 8000a54:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8000a58:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00b f852 	bl	800bb08 <rclc_executor_add_timer>

	rclc_executor_spin(&executor);
 8000a64:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f00b fa63 	bl	800bf34 <rclc_executor_spin>
	rmw_uros_sync_session(timeout_ms);
 8000a6e:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 8000a72:	f00c fa8d 	bl	800cf90 <rmw_uros_sync_session>
//	for(;;)
//	{
//	//	osDelay(10);
//	}
  /* USER CODE END StartDefaultTask */
}
 8000a76:	bf00      	nop
 8000a78:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a82:	bf00      	nop
 8000a84:	0800158d 	.word	0x0800158d
 8000a88:	08001529 	.word	0x08001529
 8000a8c:	08001509 	.word	0x08001509
 8000a90:	080014dd 	.word	0x080014dd
 8000a94:	20006698 	.word	0x20006698
 8000a98:	08001949 	.word	0x08001949
 8000a9c:	0800198d 	.word	0x0800198d
 8000aa0:	080019c5 	.word	0x080019c5
 8000aa4:	08001a31 	.word	0x08001a31
 8000aa8:	08018dc4 	.word	0x08018dc4
 8000aac:	007a1200 	.word	0x007a1200
 8000ab0:	08000ad9 	.word	0x08000ad9
 8000ab4:	08018dec 	.word	0x08018dec
 8000ab8:	08018df0 	.word	0x08018df0
 8000abc:	20000300 	.word	0x20000300
 8000ac0:	08018e0c 	.word	0x08018e0c
 8000ac4:	20000308 	.word	0x20000308
 8000ac8:	08018e1c 	.word	0x08018e1c
 8000acc:	20000310 	.word	0x20000310
 8000ad0:	08018e30 	.word	0x08018e30
 8000ad4:	20000318 	.word	0x20000318

08000ad8 <timer_callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d053      	beq.n	8000b92 <timer_callback+0xba>


		if (sync_counter++ >= 254) {  // Sync session at lower frequency
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <timer_callback+0xc4>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	b2d1      	uxtb	r1, r2
 8000af2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b9c <timer_callback+0xc4>)
 8000af4:	7011      	strb	r1, [r2, #0]
 8000af6:	2bfd      	cmp	r3, #253	@ 0xfd
 8000af8:	d906      	bls.n	8000b08 <timer_callback+0x30>
			rmw_uros_sync_session(1000);
 8000afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afe:	f00c fa47 	bl	800cf90 <rmw_uros_sync_session>
			sync_counter = 0;
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <timer_callback+0xc4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		}

		interfaces_status();
 8000b08:	f000 f8dc 	bl	8000cc4 <interfaces_status>
		emergency_publish(emer);
 8000b0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <timer_callback+0xc8>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f875 	bl	8000c00 <emergency_publish>

		mode_cycle();
 8000b16:	f000 f979 	bl	8000e0c <mode_cycle>
		mode_light_indicator();
 8000b1a:	f000 f9bd 	bl	8000e98 <mode_light_indicator>




		if(mode == MANUAL){
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <timer_callback+0xcc>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d132      	bne.n	8000b8c <timer_callback+0xb4>
			accelerator = calculate_average(adc_buffer, BUFFER_SIZE);
 8000b26:	2128      	movs	r1, #40	@ 0x28
 8000b28:	481f      	ldr	r0, [pc, #124]	@ (8000ba8 <timer_callback+0xd0>)
 8000b2a:	f000 f8a5 	bl	8000c78 <calculate_average>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b38:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <timer_callback+0xd4>)
 8000b3a:	edc3 7a00 	vstr	s15, [r3]
			xlr8_publish(accelerator);
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <timer_callback+0xd4>)
 8000b40:	edd3 7a00 	vldr	s15, [r3]
 8000b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b48:	ee17 3a90 	vmov	r3, s15
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f836 	bl	8000bc0 <xlr8_publish>

			if(manual_direction == FORWARD){
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <timer_callback+0xd8>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <timer_callback+0x98>
				cmd_forward = SET;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <timer_callback+0xdc>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
				cmd_backward = RESET;
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <timer_callback+0xe0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
				accel_direction_publish(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 f86f 	bl	8000c4c <accel_direction_publish>
 8000b6e:	e00d      	b.n	8000b8c <timer_callback+0xb4>

			}

			else if(manual_direction == BACKWARD){
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <timer_callback+0xd8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d109      	bne.n	8000b8c <timer_callback+0xb4>
				cmd_forward = RESET;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <timer_callback+0xdc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
				cmd_backward = SET;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <timer_callback+0xe0>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
				accel_direction_publish(-1);
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b88:	f000 f860 	bl	8000c4c <accel_direction_publish>





		HAL_IWDG_Refresh(&hiwdg);
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <timer_callback+0xe4>)
 8000b8e:	f004 f855 	bl	8004c3c <HAL_IWDG_Refresh>
	}

}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000031d 	.word	0x2000031d
 8000ba0:	20000334 	.word	0x20000334
 8000ba4:	2000032e 	.word	0x2000032e
 8000ba8:	20000338 	.word	0x20000338
 8000bac:	20000330 	.word	0x20000330
 8000bb0:	2000032f 	.word	0x2000032f
 8000bb4:	2000032c 	.word	0x2000032c
 8000bb8:	2000032d 	.word	0x2000032d
 8000bbc:	20006628 	.word	0x20006628

08000bc0 <xlr8_publish>:

void xlr8_publish(uint16_t xlr8)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	XRL8_msg.data = xlr8;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <xlr8_publish+0x34>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	8013      	strh	r3, [r2, #0]
	rcl_ret_t ret = rcl_publish(&xrl8_publisher, &XRL8_msg, NULL);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <xlr8_publish+0x34>)
 8000bd4:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <xlr8_publish+0x38>)
 8000bd6:	f00a fb8f 	bl	800b2f8 <rcl_publish>
 8000bda:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <xlr8_publish+0x2c>
 8000be2:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <xlr8_publish+0x3c>)
 8000be8:	f017 f850 	bl	8017c8c <iprintf>
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000030c 	.word	0x2000030c
 8000bf8:	20000308 	.word	0x20000308
 8000bfc:	08018e40 	.word	0x08018e40

08000c00 <emergency_publish>:

void emergency_publish(GPIO_PinState emer_state)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	emer_msg.data = !emer_state;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf0c      	ite	eq
 8000c10:	2301      	moveq	r3, #1
 8000c12:	2300      	movne	r3, #0
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <emergency_publish+0x40>)
 8000c18:	701a      	strb	r2, [r3, #0]
	rcl_ret_t ret = rcl_publish(&emer_publisher, &emer_msg, NULL);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <emergency_publish+0x40>)
 8000c1e:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <emergency_publish+0x44>)
 8000c20:	f00a fb6a 	bl	800b2f8 <rcl_publish>
 8000c24:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d004      	beq.n	8000c36 <emergency_publish+0x36>
 8000c2c:	f240 1167 	movw	r1, #359	@ 0x167
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <emergency_publish+0x48>)
 8000c32:	f017 f82b 	bl	8017c8c <iprintf>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000314 	.word	0x20000314
 8000c44:	20000310 	.word	0x20000310
 8000c48:	08018e40 	.word	0x08018e40

08000c4c <accel_direction_publish>:

void accel_direction_publish(int8_t dir)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	dir_msg.data = dir;
 8000c56:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <accel_direction_publish+0x24>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	7013      	strb	r3, [r2, #0]
	RCSOFTCHECK(rcl_publish(&direction_publisher, &dir_msg, NULL));
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4904      	ldr	r1, [pc, #16]	@ (8000c70 <accel_direction_publish+0x24>)
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <accel_direction_publish+0x28>)
 8000c62:	f00a fb49 	bl	800b2f8 <rcl_publish>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000031c 	.word	0x2000031c
 8000c74:	20000318 	.word	0x20000318

08000c78 <calculate_average>:

uint16_t calculate_average(uint16_t *buffer, uint16_t length) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
    uint32_t sum = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	817b      	strh	r3, [r7, #10]
 8000c8c:	e00b      	b.n	8000ca6 <calculate_average+0x2e>
        sum += buffer[i];
 8000c8e:	897b      	ldrh	r3, [r7, #10]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000ca0:	897b      	ldrh	r3, [r7, #10]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	817b      	strh	r3, [r7, #10]
 8000ca6:	897a      	ldrh	r2, [r7, #10]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3ef      	bcc.n	8000c8e <calculate_average+0x16>
    }
    return (uint16_t)(sum / length);
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	b29b      	uxth	r3, r3
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <interfaces_status>:

void interfaces_status(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

	emer = HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin);
 8000cc8:	2120      	movs	r1, #32
 8000cca:	483f      	ldr	r0, [pc, #252]	@ (8000dc8 <interfaces_status+0x104>)
 8000ccc:	f003 ff14 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8000dcc <interfaces_status+0x108>)
 8000cd6:	701a      	strb	r2, [r3, #0]

	Manual_mode = HAL_GPIO_ReadPin(Manual_GPIO_Port, Manual_Pin);
 8000cd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce0:	f003 ff0a 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b39      	ldr	r3, [pc, #228]	@ (8000dd0 <interfaces_status+0x10c>)
 8000cea:	701a      	strb	r2, [r3, #0]
	Teleop_mode = HAL_GPIO_ReadPin(Teleop_GPIO_Port, Teleop_Pin);
 8000cec:	2180      	movs	r1, #128	@ 0x80
 8000cee:	4836      	ldr	r0, [pc, #216]	@ (8000dc8 <interfaces_status+0x104>)
 8000cf0:	f003 ff02 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b36      	ldr	r3, [pc, #216]	@ (8000dd4 <interfaces_status+0x110>)
 8000cfa:	701a      	strb	r2, [r3, #0]
	Auto_mode = HAL_GPIO_ReadPin(Auto_GPIO_Port, Auto_Pin);
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f003 fef9 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <interfaces_status+0x114>)
 8000d0c:	701a      	strb	r2, [r3, #0]
	Joystick_mode = HAL_GPIO_ReadPin(Joystick_GPIO_Port, Joystick_Pin);
 8000d0e:	2140      	movs	r1, #64	@ 0x40
 8000d10:	4832      	ldr	r0, [pc, #200]	@ (8000ddc <interfaces_status+0x118>)
 8000d12:	f003 fef1 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <interfaces_status+0x11c>)
 8000d1c:	701a      	strb	r2, [r3, #0]
	forward = HAL_GPIO_ReadPin(Forward_GPIO_Port, Forward_Pin);
 8000d1e:	2140      	movs	r1, #64	@ 0x40
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d24:	f003 fee8 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <interfaces_status+0x120>)
 8000d2e:	701a      	strb	r2, [r3, #0]
	backward = HAL_GPIO_ReadPin(Backward_GPIO_Port, Backward_Pin);
 8000d30:	2120      	movs	r1, #32
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f003 fedf 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <interfaces_status+0x124>)
 8000d40:	701a      	strb	r2, [r3, #0]
	l_switch = HAL_GPIO_ReadPin(L_Switch_GPIO_Port, L_Switch_Pin);
 8000d42:	2102      	movs	r1, #2
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f003 fed6 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <interfaces_status+0x128>)
 8000d52:	701a      	strb	r2, [r3, #0]
	r_switch = HAL_GPIO_ReadPin(R_Switch_GPIO_Port, R_Switch_Pin);
 8000d54:	2110      	movs	r1, #16
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5a:	f003 fecd 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <interfaces_status+0x12c>)
 8000d64:	701a      	strb	r2, [r3, #0]
	l_break = HAL_GPIO_ReadPin(L_Break_GPIO_Port, L_Break_Pin);
 8000d66:	2140      	movs	r1, #64	@ 0x40
 8000d68:	4817      	ldr	r0, [pc, #92]	@ (8000dc8 <interfaces_status+0x104>)
 8000d6a:	f003 fec5 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <interfaces_status+0x130>)
 8000d74:	701a      	strb	r2, [r3, #0]
	r_break = HAL_GPIO_ReadPin(R_Break_GPIO_Port, R_Break_Pin);
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <interfaces_status+0x104>)
 8000d7c:	f003 febc 	bl	8004af8 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <interfaces_status+0x134>)
 8000d86:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, cmd_mode1);
 8000d88:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <interfaces_status+0x138>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f003 fec7 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Mode2_GPIO_Port, Lamp_Mode2_Pin, cmd_mode2);
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <interfaces_status+0x13c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	2108      	movs	r1, #8
 8000da2:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <interfaces_status+0x118>)
 8000da4:	f003 fec0 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Mode3_GPIO_Port, Lamp_Mode3_Pin, cmd_mode3);
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <interfaces_status+0x140>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	2110      	movs	r1, #16
 8000db0:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <interfaces_status+0x118>)
 8000db2:	f003 feb9 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Mode4_GPIO_Port, Lamp_Mode4_Pin, cmd_mode4);
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <interfaces_status+0x144>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <interfaces_status+0x118>)
 8000dc0:	f003 feb2 	bl	8004b28 <HAL_GPIO_WritePin>

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	48000800 	.word	0x48000800
 8000dcc:	20000334 	.word	0x20000334
 8000dd0:	2000031e 	.word	0x2000031e
 8000dd4:	2000031f 	.word	0x2000031f
 8000dd8:	20000320 	.word	0x20000320
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	20000321 	.word	0x20000321
 8000de4:	20000322 	.word	0x20000322
 8000de8:	20000323 	.word	0x20000323
 8000dec:	20000324 	.word	0x20000324
 8000df0:	20000325 	.word	0x20000325
 8000df4:	20000326 	.word	0x20000326
 8000df8:	20000327 	.word	0x20000327
 8000dfc:	20000328 	.word	0x20000328
 8000e00:	20000329 	.word	0x20000329
 8000e04:	2000032a 	.word	0x2000032a
 8000e08:	2000032b 	.word	0x2000032b

08000e0c <mode_cycle>:

void mode_cycle(){
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	if(Manual_mode == 1){
 8000e10:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <mode_cycle+0x6c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d103      	bne.n	8000e20 <mode_cycle+0x14>
		mode = MANUAL;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <mode_cycle+0x70>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e016      	b.n	8000e4e <mode_cycle+0x42>
	}
	else if(Teleop_mode == 1){
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <mode_cycle+0x74>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d103      	bne.n	8000e30 <mode_cycle+0x24>
		mode = TELEOP;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <mode_cycle+0x70>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e00e      	b.n	8000e4e <mode_cycle+0x42>
	}
	else if(Auto_mode == 1){
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <mode_cycle+0x78>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d103      	bne.n	8000e40 <mode_cycle+0x34>
		mode = AUTO;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <mode_cycle+0x70>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e006      	b.n	8000e4e <mode_cycle+0x42>
	}
	else if(Joystick_mode == 1){
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <mode_cycle+0x7c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <mode_cycle+0x42>
		mode = JOYSTICK;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <mode_cycle+0x70>)
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	701a      	strb	r2, [r3, #0]
	}


	if(forward == 1){
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <mode_cycle+0x80>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d103      	bne.n	8000e5e <mode_cycle+0x52>
		manual_direction = FORWARD;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <mode_cycle+0x84>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	}
	else if(backward == 1){
		manual_direction = BACKWARD;
	}
}
 8000e5c:	e006      	b.n	8000e6c <mode_cycle+0x60>
	else if(backward == 1){
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <mode_cycle+0x88>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d102      	bne.n	8000e6c <mode_cycle+0x60>
		manual_direction = BACKWARD;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <mode_cycle+0x84>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2000031e 	.word	0x2000031e
 8000e7c:	2000032e 	.word	0x2000032e
 8000e80:	2000031f 	.word	0x2000031f
 8000e84:	20000320 	.word	0x20000320
 8000e88:	20000321 	.word	0x20000321
 8000e8c:	20000322 	.word	0x20000322
 8000e90:	2000032f 	.word	0x2000032f
 8000e94:	20000323 	.word	0x20000323

08000e98 <mode_light_indicator>:

void mode_light_indicator(){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

	if(mode == MANUAL){
 8000e9c:	4b41      	ldr	r3, [pc, #260]	@ (8000fa4 <mode_light_indicator+0x10c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <mode_light_indicator+0x26>
		cmd_mode1 = SET;
 8000ea4:	4b40      	ldr	r3, [pc, #256]	@ (8000fa8 <mode_light_indicator+0x110>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
		cmd_mode2 = RESET;
 8000eaa:	4b40      	ldr	r3, [pc, #256]	@ (8000fac <mode_light_indicator+0x114>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
		cmd_mode3 = RESET;
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb0 <mode_light_indicator+0x118>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
		cmd_mode4 = RESET;
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb4 <mode_light_indicator+0x11c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e031      	b.n	8000f22 <mode_light_indicator+0x8a>
	}
	else if(mode == TELEOP){
 8000ebe:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <mode_light_indicator+0x10c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d10c      	bne.n	8000ee0 <mode_light_indicator+0x48>
		cmd_mode2 = SET;
 8000ec6:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <mode_light_indicator+0x114>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
		cmd_mode1 = RESET;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <mode_light_indicator+0x110>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
		cmd_mode3 = RESET;
 8000ed2:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <mode_light_indicator+0x118>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
		cmd_mode4 = RESET;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <mode_light_indicator+0x11c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e020      	b.n	8000f22 <mode_light_indicator+0x8a>
	}
	else if(mode == AUTO){
 8000ee0:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <mode_light_indicator+0x10c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d10c      	bne.n	8000f02 <mode_light_indicator+0x6a>
		cmd_mode3 = SET;
 8000ee8:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <mode_light_indicator+0x118>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
		cmd_mode1 = RESET;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <mode_light_indicator+0x110>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
		cmd_mode2 = RESET;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <mode_light_indicator+0x114>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
		cmd_mode4 = RESET;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <mode_light_indicator+0x11c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e00f      	b.n	8000f22 <mode_light_indicator+0x8a>
	}
	else if(mode == JOYSTICK){
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <mode_light_indicator+0x10c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d10b      	bne.n	8000f22 <mode_light_indicator+0x8a>
		cmd_mode4 = SET;
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <mode_light_indicator+0x11c>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
		cmd_mode1 = RESET;
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <mode_light_indicator+0x110>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
		cmd_mode2 = RESET;
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <mode_light_indicator+0x114>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		cmd_mode3 = RESET;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <mode_light_indicator+0x118>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
	}

	if(mode != MANUAL){
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <mode_light_indicator+0x10c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <mode_light_indicator+0xaa>
		cmd_forward = 0;
 8000f2a:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <mode_light_indicator+0x120>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
		cmd_backward = 0;
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <mode_light_indicator+0x124>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
		manual_direction = FORWARD;
 8000f36:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <mode_light_indicator+0x128>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
		accel_direction_publish(0);
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fe85 	bl	8000c4c <accel_direction_publish>

	}

	HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, cmd_mode1);
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <mode_light_indicator+0x110>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f50:	f003 fdea 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Mode2_GPIO_Port, Lamp_Mode2_Pin, cmd_mode2);
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <mode_light_indicator+0x114>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4819      	ldr	r0, [pc, #100]	@ (8000fc4 <mode_light_indicator+0x12c>)
 8000f5e:	f003 fde3 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Mode3_GPIO_Port, Lamp_Mode3_Pin, cmd_mode3);
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <mode_light_indicator+0x118>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	2110      	movs	r1, #16
 8000f6a:	4816      	ldr	r0, [pc, #88]	@ (8000fc4 <mode_light_indicator+0x12c>)
 8000f6c:	f003 fddc 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Mode4_GPIO_Port, Lamp_Mode4_Pin, cmd_mode4);
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <mode_light_indicator+0x11c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	2120      	movs	r1, #32
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <mode_light_indicator+0x12c>)
 8000f7a:	f003 fdd5 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Forward_GPIO_Port, Lamp_Forward_Pin, cmd_forward);
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <mode_light_indicator+0x120>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f88:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <mode_light_indicator+0x12c>)
 8000f8a:	f003 fdcd 	bl	8004b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lamp_Backward_GPIO_Port, Lamp_Backward_Pin, cmd_backward);
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <mode_light_indicator+0x124>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9c:	f003 fdc4 	bl	8004b28 <HAL_GPIO_WritePin>


}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000032e 	.word	0x2000032e
 8000fa8:	20000328 	.word	0x20000328
 8000fac:	20000329 	.word	0x20000329
 8000fb0:	2000032a 	.word	0x2000032a
 8000fb4:	2000032b 	.word	0x2000032b
 8000fb8:	2000032c 	.word	0x2000032c
 8000fbc:	2000032d 	.word	0x2000032d
 8000fc0:	2000032f 	.word	0x2000032f
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fd4:	f008 fb32 	bl	800963c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001144 <pvPortMallocMicroROS+0x17c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fe0:	f000 f986 	bl	80012f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fe4:	4b58      	ldr	r3, [pc, #352]	@ (8001148 <pvPortMallocMicroROS+0x180>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f040 8090 	bne.w	8001112 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01e      	beq.n	8001036 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	2b00      	cmp	r3, #0
 8001008:	d015      	beq.n	8001036 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f023 0307 	bic.w	r3, r3, #7
 8001010:	3308      	adds	r3, #8
 8001012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800101e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001022:	f383 8811 	msr	BASEPRI, r3
 8001026:	f3bf 8f6f 	isb	sy
 800102a:	f3bf 8f4f 	dsb	sy
 800102e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	e7fd      	b.n	8001032 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d06a      	beq.n	8001112 <pvPortMallocMicroROS+0x14a>
 800103c:	4b43      	ldr	r3, [pc, #268]	@ (800114c <pvPortMallocMicroROS+0x184>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d865      	bhi.n	8001112 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001046:	4b42      	ldr	r3, [pc, #264]	@ (8001150 <pvPortMallocMicroROS+0x188>)
 8001048:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800104a:	4b41      	ldr	r3, [pc, #260]	@ (8001150 <pvPortMallocMicroROS+0x188>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001050:	e004      	b.n	800105c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d903      	bls.n	800106e <pvPortMallocMicroROS+0xa6>
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f1      	bne.n	8001052 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800106e:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <pvPortMallocMicroROS+0x17c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001074:	429a      	cmp	r2, r3
 8001076:	d04c      	beq.n	8001112 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2208      	movs	r2, #8
 800107e:	4413      	add	r3, r2
 8001080:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	2308      	movs	r3, #8
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	429a      	cmp	r2, r3
 8001098:	d920      	bls.n	80010dc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800109a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	613b      	str	r3, [r7, #16]
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010d6:	69b8      	ldr	r0, [r7, #24]
 80010d8:	f000 f96c 	bl	80013b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <pvPortMallocMicroROS+0x184>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4a19      	ldr	r2, [pc, #100]	@ (800114c <pvPortMallocMicroROS+0x184>)
 80010e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ea:	4b18      	ldr	r3, [pc, #96]	@ (800114c <pvPortMallocMicroROS+0x184>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <pvPortMallocMicroROS+0x18c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d203      	bcs.n	80010fe <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <pvPortMallocMicroROS+0x184>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <pvPortMallocMicroROS+0x18c>)
 80010fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <pvPortMallocMicroROS+0x180>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	431a      	orrs	r2, r3
 8001108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001112:	f008 faa1 	bl	8009658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001124:	f383 8811 	msr	BASEPRI, r3
 8001128:	f3bf 8f6f 	isb	sy
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	60fb      	str	r3, [r7, #12]
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001138:	69fb      	ldr	r3, [r7, #28]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3728      	adds	r7, #40	@ 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20005e10 	.word	0x20005e10
 8001148:	20005e1c 	.word	0x20005e1c
 800114c:	20005e14 	.word	0x20005e14
 8001150:	20005e08 	.word	0x20005e08
 8001154:	20005e18 	.word	0x20005e18

08001158 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d04a      	beq.n	8001200 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800116a:	2308      	movs	r3, #8
 800116c:	425b      	negs	r3, r3
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4413      	add	r3, r2
 8001172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <vPortFreeMicroROS+0xb0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	f3bf 8f4f 	dsb	sy
 8001196:	60fb      	str	r3, [r7, #12]
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	e7fd      	b.n	800119a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <vPortFreeMicroROS+0x66>
	__asm volatile
 80011a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	60bb      	str	r3, [r7, #8]
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <vPortFreeMicroROS+0xb0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d019      	beq.n	8001200 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d115      	bne.n	8001200 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <vPortFreeMicroROS+0xb0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011e4:	f008 fa2a 	bl	800963c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <vPortFreeMicroROS+0xb4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a06      	ldr	r2, [pc, #24]	@ (800120c <vPortFreeMicroROS+0xb4>)
 80011f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011f6:	6938      	ldr	r0, [r7, #16]
 80011f8:	f000 f8dc 	bl	80013b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011fc:	f008 fa2c 	bl	8009658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20005e1c 	.word	0x20005e1c
 800120c:	20005e14 	.word	0x20005e14

08001210 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800121c:	2308      	movs	r3, #8
 800121e:	425b      	negs	r3, r3
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	4413      	add	r3, r2
 8001224:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <getBlockSize+0x38>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	43db      	mvns	r3, r3
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

	return count;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20005e1c 	.word	0x20005e1c

0800124c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001256:	f008 f9f1 	bl	800963c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7ff feb4 	bl	8000fc8 <pvPortMallocMicroROS>
 8001260:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d017      	beq.n	8001298 <pvPortReallocMicroROS+0x4c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d014      	beq.n	8001298 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffce 	bl	8001210 <getBlockSize>
 8001274:	4603      	mov	r3, r0
 8001276:	2208      	movs	r2, #8
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d201      	bcs.n	8001288 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f016 feb2 	bl	8017ff6 <memcpy>

		vPortFreeMicroROS(pv);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff60 	bl	8001158 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001298:	f008 f9de 	bl	8009658 <xTaskResumeAll>

	return newmem;
 800129c:	68bb      	ldr	r3, [r7, #8]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012b0:	f008 f9c4 	bl	800963c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff fe82 	bl	8000fc8 <pvPortMallocMicroROS>
 80012c4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ca:	e004      	b.n	80012d6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	613a      	str	r2, [r7, #16]
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	617a      	str	r2, [r7, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f5      	bne.n	80012cc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012e0:	f008 f9ba 	bl	8009658 <xTaskResumeAll>
  	return mem;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012fc:	4b27      	ldr	r3, [pc, #156]	@ (800139c <prvHeapInit+0xac>)
 80012fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00c      	beq.n	8001324 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3307      	adds	r3, #7
 800130e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f023 0307 	bic.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	4a1f      	ldr	r2, [pc, #124]	@ (800139c <prvHeapInit+0xac>)
 8001320:	4413      	add	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001328:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <prvHeapInit+0xb0>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <prvHeapInit+0xb0>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800133c:	2208      	movs	r2, #8
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f023 0307 	bic.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <prvHeapInit+0xb4>)
 8001350:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <prvHeapInit+0xb4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <prvHeapInit+0xb4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	1ad2      	subs	r2, r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <prvHeapInit+0xb4>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <prvHeapInit+0xb8>)
 800137e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <prvHeapInit+0xbc>)
 8001386:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <prvHeapInit+0xc0>)
 800138a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	20005208 	.word	0x20005208
 80013a0:	20005e08 	.word	0x20005e08
 80013a4:	20005e10 	.word	0x20005e10
 80013a8:	20005e18 	.word	0x20005e18
 80013ac:	20005e14 	.word	0x20005e14
 80013b0:	20005e1c 	.word	0x20005e1c

080013b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013bc:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <prvInsertBlockIntoFreeList+0xac>)
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e002      	b.n	80013c8 <prvInsertBlockIntoFreeList+0x14>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d8f7      	bhi.n	80013c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4413      	add	r3, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d108      	bne.n	80013f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	441a      	add	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	441a      	add	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d118      	bne.n	800143c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <prvInsertBlockIntoFreeList+0xb0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d00d      	beq.n	8001432 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	441a      	add	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e008      	b.n	8001444 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <prvInsertBlockIntoFreeList+0xb0>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e003      	b.n	8001444 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	d002      	beq.n	8001452 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20005e08 	.word	0x20005e08
 8001464:	20005e10 	.word	0x20005e10

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_DMA_Init+0x70>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <MX_DMA_Init+0x70>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6493      	str	r3, [r2, #72]	@ 0x48
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_DMA_Init+0x70>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_DMA_Init+0x70>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <MX_DMA_Init+0x70>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6493      	str	r3, [r2, #72]	@ 0x48
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_DMA_Init+0x70>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2105      	movs	r1, #5
 80014a2:	200b      	movs	r0, #11
 80014a4:	f002 fe33 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f002 fe4a 	bl	8004142 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	200c      	movs	r0, #12
 80014b4:	f002 fe2b 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014b8:	200c      	movs	r0, #12
 80014ba:	f002 fe42 	bl	8004142 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	200d      	movs	r0, #13
 80014c4:	f002 fe23 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014c8:	200d      	movs	r0, #13
 80014ca:	f002 fe3a 	bl	8004142 <HAL_NVIC_EnableIRQ>

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014ea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014f0:	4904      	ldr	r1, [pc, #16]	@ (8001504 <cubemx_transport_open+0x28>)
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f005 fa3c 	bl	8006970 <HAL_UART_Receive_DMA>
    return true;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20005e20 	.word	0x20005e20

08001508 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001516:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f005 fa75 	bl	8006a08 <HAL_UART_DMAStop>
    return true;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800153c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001544:	2b20      	cmp	r3, #32
 8001546:	d11b      	bne.n	8001580 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	b29b      	uxth	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	6978      	ldr	r0, [r7, #20]
 8001552:	f005 f98d 	bl	8006870 <HAL_UART_Transmit_DMA>
 8001556:	4603      	mov	r3, r0
 8001558:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800155a:	e002      	b.n	8001562 <cubemx_transport_write+0x3a>
            osDelay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f007 f82b 	bl	80085b8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001562:	7cfb      	ldrb	r3, [r7, #19]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d104      	bne.n	8001572 <cubemx_transport_write+0x4a>
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156e:	2b20      	cmp	r3, #32
 8001570:	d1f4      	bne.n	800155c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <cubemx_transport_write+0x54>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e002      	b.n	8001582 <cubemx_transport_write+0x5a>
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001580:	2300      	movs	r3, #0
    }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a6:	b672      	cpsid	i
}
 80015a8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015bc:	b662      	cpsie	i
}
 80015be:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	3301      	adds	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f006 fff6 	bl	80085b8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <cubemx_transport_read+0xa0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <cubemx_transport_read+0x9c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d103      	bne.n	80015e0 <cubemx_transport_read+0x54>
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbe2      	blt.n	80015a6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015e4:	e011      	b.n	800160a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <cubemx_transport_read+0xa0>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	440b      	add	r3, r1
 80015f0:	490f      	ldr	r1, [pc, #60]	@ (8001630 <cubemx_transport_read+0xa4>)
 80015f2:	5c8a      	ldrb	r2, [r1, r2]
 80015f4:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <cubemx_transport_read+0xa0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <cubemx_transport_read+0xa0>)
 8001602:	6013      	str	r3, [r2, #0]
        wrote++;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	3301      	adds	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <cubemx_transport_read+0xa0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <cubemx_transport_read+0x9c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d003      	beq.n	800161e <cubemx_transport_read+0x92>
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	d3e3      	bcc.n	80015e6 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 800161e:	69bb      	ldr	r3, [r7, #24]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20006624 	.word	0x20006624
 800162c:	20006620 	.word	0x20006620
 8001630:	20005e20 	.word	0x20005e20

08001634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4b67      	ldr	r3, [pc, #412]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a66      	ldr	r2, [pc, #408]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b64      	ldr	r3, [pc, #400]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001662:	4b61      	ldr	r3, [pc, #388]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a60      	ldr	r2, [pc, #384]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001668:	f043 0320 	orr.w	r3, r3, #32
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b5e      	ldr	r3, [pc, #376]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a5a      	ldr	r2, [pc, #360]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b55      	ldr	r3, [pc, #340]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a54      	ldr	r2, [pc, #336]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <MX_GPIO_Init+0x1b4>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp_Forward_Pin|Lamp_Mode3_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80016b0:	484e      	ldr	r0, [pc, #312]	@ (80017ec <MX_GPIO_Init+0x1b8>)
 80016b2:	f003 fa39 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Backward_GPIO_Port, Lamp_Backward_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f003 fa32 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ce:	f003 fa2b 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp_Mode2_Pin|Lamp_Mode4_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2128      	movs	r1, #40	@ 0x28
 80016d6:	4845      	ldr	r0, [pc, #276]	@ (80017ec <MX_GPIO_Init+0x1b8>)
 80016d8:	f003 fa26 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	483f      	ldr	r0, [pc, #252]	@ (80017f0 <MX_GPIO_Init+0x1bc>)
 80016f4:	f003 f87e 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L_Switch_Pin|R_Switch_Pin;
 80016f8:	2312      	movs	r3, #18
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	2301      	movs	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f003 f871 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Backward_Pin|Forward_Pin|Auto_Pin|Manual_Pin;
 8001712:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172a:	f003 f863 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 800172e:	2320      	movs	r3, #32
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	482b      	ldr	r0, [pc, #172]	@ (80017f0 <MX_GPIO_Init+0x1bc>)
 8001742:	f003 f857 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Lamp_Forward_Pin|Lamp_Mode2_Pin|Lamp_Mode3_Pin|Lamp_Mode4_Pin;
 8001746:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001750:	2302      	movs	r3, #2
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4823      	ldr	r0, [pc, #140]	@ (80017ec <MX_GPIO_Init+0x1b8>)
 8001760:	f003 f848 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = L_Break_Pin|R_Break_Pin;
 8001764:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	481d      	ldr	r0, [pc, #116]	@ (80017f0 <MX_GPIO_Init+0x1bc>)
 800177a:	f003 f83b 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Teleop_Pin;
 800177e:	2380      	movs	r3, #128	@ 0x80
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001786:	2302      	movs	r3, #2
 8001788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Teleop_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4817      	ldr	r0, [pc, #92]	@ (80017f0 <MX_GPIO_Init+0x1bc>)
 8001792:	f003 f82f 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Lamp_Backward_Pin|Lamp_Mode1_Pin;
 8001796:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b2:	f003 f81f 	bl	80047f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Joystick_Pin;
 80017b6:	2340      	movs	r3, #64	@ 0x40
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017be:	2302      	movs	r3, #2
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Joystick_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4808      	ldr	r0, [pc, #32]	@ (80017ec <MX_GPIO_Init+0x1b8>)
 80017ca:	f003 f813 	bl	80047f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2028      	movs	r0, #40	@ 0x28
 80017d4:	f002 fc9b 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d8:	2028      	movs	r0, #40	@ 0x28
 80017da:	f002 fcb2 	bl	8004142 <HAL_NVIC_EnableIRQ>

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	@ 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800

080017f4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <MX_IWDG_Init+0x34>)
 80017fa:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <MX_IWDG_Init+0x38>)
 80017fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <MX_IWDG_Init+0x34>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <MX_IWDG_Init+0x34>)
 8001806:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800180a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_IWDG_Init+0x34>)
 800180e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001812:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	@ (8001828 <MX_IWDG_Init+0x34>)
 8001816:	f003 f9c2 	bl	8004b9e <HAL_IWDG_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001820:	f000 f88c 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20006628 	.word	0x20006628
 800182c:	40003000 	.word	0x40003000

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001834:	f000 fcfd 	bl	8002232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001838:	f000 f81a 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183c:	f7ff fefa 	bl	8001634 <MX_GPIO_Init>
  MX_DMA_Init();
 8001840:	f7ff fe12 	bl	8001468 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001844:	f000 fbc4 	bl	8001fd0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001848:	f7fe ff1a 	bl	8000680 <MX_ADC1_Init>
  MX_IWDG_Init();
 800184c:	f7ff ffd2 	bl	80017f4 <MX_IWDG_Init>
  MX_TIM2_Init();
 8001850:	f000 fb4c 	bl	8001eec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <main+0x3c>)
 8001856:	f004 fa89 	bl	8005d6c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800185a:	f006 fdd1 	bl	8008400 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800185e:	f7ff f813 	bl	8000888 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001862:	f006 fdf1 	bl	8008448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001866:	bf00      	nop
 8001868:	e7fd      	b.n	8001866 <main+0x36>
 800186a:	bf00      	nop
 800186c:	2000664c 	.word	0x2000664c

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	@ 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0318 	add.w	r3, r7, #24
 800187a:	2238      	movs	r2, #56	@ 0x38
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f016 faf0 	bl	8017e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001892:	2000      	movs	r0, #0
 8001894:	f003 f9e2 	bl	8004c5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001898:	230a      	movs	r3, #10
 800189a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a2:	2340      	movs	r3, #64	@ 0x40
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018a6:	2301      	movs	r3, #1
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018aa:	2302      	movs	r3, #2
 80018ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ae:	2302      	movs	r3, #2
 80018b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80018b2:	2304      	movs	r3, #4
 80018b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018b6:	2355      	movs	r3, #85	@ 0x55
 80018b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018be:	2302      	movs	r3, #2
 80018c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c6:	f107 0318 	add.w	r3, r7, #24
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fa7a 	bl	8004dc4 <HAL_RCC_OscConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80018d6:	f000 f831 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018da:	230f      	movs	r3, #15
 80018dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018de:	2303      	movs	r3, #3
 80018e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2104      	movs	r1, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fd78 	bl	80053e8 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018fe:	f000 f81d 	bl	800193c <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	@ 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a07      	ldr	r2, [pc, #28]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d105      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x1c>
		test +=1;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001926:	701a      	strb	r2, [r3, #0]
//		pinState  = HAL_GPIO_ReadPin(Mode1_GPIO_Port, Mode1_Pin);
//		pinState1 = HAL_GPIO_ReadPin(Mode2_GPIO_Port, Mode2_Pin);
//		pinState2 = HAL_GPIO_ReadPin(Mode3_GPIO_Port, Mode3_Pin);
//		pinState3 = HAL_GPIO_ReadPin(Mode4_GPIO_Port, Mode4_Pin);
	}
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	2000664c 	.word	0x2000664c
 8001938:	20006638 	.word	0x20006638

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <Error_Handler+0x8>

08001948 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <microros_allocate+0x3c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <microros_allocate+0x3c>)
 8001960:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <microros_allocate+0x40>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <microros_allocate+0x40>)
 8001970:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fb28 	bl	8000fc8 <pvPortMallocMicroROS>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000663c 	.word	0x2000663c
 8001988:	20006640 	.word	0x20006640

0800198c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00c      	beq.n	80019b6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fc37 	bl	8001210 <getBlockSize>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a06      	ldr	r2, [pc, #24]	@ (80019c0 <microros_deallocate+0x34>)
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <microros_deallocate+0x34>)
 80019ae:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fbd1 	bl	8001158 <vPortFreeMicroROS>
  }
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20006640 	.word	0x20006640

080019c4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80019d0:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <microros_reallocate+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	4413      	add	r3, r2
 80019da:	461a      	mov	r2, r3
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <microros_reallocate+0x64>)
 80019de:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <microros_reallocate+0x68>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <microros_reallocate+0x68>)
 80019ee:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d104      	bne.n	8001a00 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f7ff fae6 	bl	8000fc8 <pvPortMallocMicroROS>
 80019fc:	4603      	mov	r3, r0
 80019fe:	e00e      	b.n	8001a1e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff fc05 	bl	8001210 <getBlockSize>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <microros_reallocate+0x68>)
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <microros_reallocate+0x68>)
 8001a12:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff fc18 	bl	800124c <pvPortReallocMicroROS>
 8001a1c:	4603      	mov	r3, r0
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000663c 	.word	0x2000663c
 8001a2c:	20006640 	.word	0x20006640

08001a30 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <microros_zero_allocate+0x48>)
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <microros_zero_allocate+0x48>)
 8001a4e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <microros_zero_allocate+0x4c>)
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <microros_zero_allocate+0x4c>)
 8001a62:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fc1d 	bl	80012a6 <pvPortCallocMicroROS>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000663c 	.word	0x2000663c
 8001a7c:	20006640 	.word	0x20006640

08001a80 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a96:	a320      	add	r3, pc, #128	@ (adr r3, 8001b18 <UTILS_NanosecondsToTimespec+0x98>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fc28 	bl	80002f0 <__aeabi_ldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001aaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aae:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b18 <UTILS_NanosecondsToTimespec+0x98>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fc1c 	bl	80002f0 <__aeabi_ldivmod>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da20      	bge.n	8001b06 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a11      	ldr	r2, [pc, #68]	@ (8001b10 <UTILS_NanosecondsToTimespec+0x90>)
 8001aca:	fb82 1203 	smull	r1, r2, r2, r3
 8001ace:	1712      	asrs	r2, r2, #28
 8001ad0:	17db      	asrs	r3, r3, #31
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	6979      	ldr	r1, [r7, #20]
 8001ae0:	17c8      	asrs	r0, r1, #31
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	ebb2 0804 	subs.w	r8, r2, r4
 8001aea:	eb63 0905 	sbc.w	r9, r3, r5
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	4906      	ldr	r1, [pc, #24]	@ (8001b14 <UTILS_NanosecondsToTimespec+0x94>)
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	441a      	add	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	609a      	str	r2, [r3, #8]
    }
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b10:	44b82fa1 	.word	0x44b82fa1
 8001b14:	3b9aca00 	.word	0x3b9aca00
 8001b18:	3b9aca00 	.word	0x3b9aca00
 8001b1c:	00000000 	.word	0x00000000

08001b20 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b08e      	sub	sp, #56	@ 0x38
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b2a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001b2c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b30:	2300      	movs	r3, #0
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b46:	4618      	mov	r0, r3
 8001b48:	f008 f802 	bl	8009b50 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4e:	17da      	asrs	r2, r3, #31
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	61fa      	str	r2, [r7, #28]
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	69b9      	ldr	r1, [r7, #24]
 8001b5e:	000b      	movs	r3, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b68:	2200      	movs	r2, #0
 8001b6a:	461c      	mov	r4, r3
 8001b6c:	4615      	mov	r5, r2
 8001b6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b72:	1911      	adds	r1, r2, r4
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	416b      	adcs	r3, r5
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b7e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001b82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	f04f 0400 	mov.w	r4, #0
 8001b8e:	f04f 0500 	mov.w	r5, #0
 8001b92:	015d      	lsls	r5, r3, #5
 8001b94:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001b98:	0154      	lsls	r4, r2, #5
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	462b      	mov	r3, r5
 8001b9e:	ebb2 0800 	subs.w	r8, r2, r0
 8001ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001bb2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001bb6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	eb18 0a00 	adds.w	sl, r8, r0
 8001bc2:	eb49 0b01 	adc.w	fp, r9, r1
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bd6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bda:	ebb2 040a 	subs.w	r4, r2, sl
 8001bde:	603c      	str	r4, [r7, #0]
 8001be0:	eb63 030b 	sbc.w	r3, r3, fp
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bea:	4623      	mov	r3, r4
 8001bec:	181b      	adds	r3, r3, r0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	eb41 0303 	adc.w	r3, r1, r3
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	6a3a      	ldr	r2, [r7, #32]
 8001bfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bfe:	f7ff ff3f 	bl	8001a80 <UTILS_NanosecondsToTimespec>

    return 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	3738      	adds	r7, #56	@ 0x38
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_MspInit+0x50>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <HAL_MspInit+0x50>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_MspInit+0x50>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <HAL_MspInit+0x50>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	4a0b      	ldr	r2, [pc, #44]	@ (8001c60 <HAL_MspInit+0x50>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_MspInit+0x50>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	210f      	movs	r1, #15
 8001c4a:	f06f 0001 	mvn.w	r0, #1
 8001c4e:	f002 fa5e 	bl	800410e <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c52:	f003 f8a7 	bl	8004da4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <NMI_Handler+0x4>

08001c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9e:	f000 fb1b 	bl	80022d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ca2:	f008 f8d9 	bl	8009e58 <xTaskGetSchedulerState>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001cac:	f008 fed4 	bl	800aa58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001cb8:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <DMA1_Channel1_IRQHandler+0x10>)
 8001cba:	f002 fc40 	bl	800453e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000672c 	.word	0x2000672c

08001cc8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <DMA1_Channel2_IRQHandler+0x10>)
 8001cce:	f002 fc36 	bl	800453e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000678c 	.word	0x2000678c

08001cdc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <DMA1_Channel3_IRQHandler+0x10>)
 8001ce2:	f002 fc2c 	bl	800453e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200002a0 	.word	0x200002a0

08001cf0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <ADC1_2_IRQHandler+0x10>)
 8001cf6:	f000 ffdd 	bl	8002cb4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000234 	.word	0x20000234

08001d04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <TIM2_IRQHandler+0x10>)
 8001d0a:	f004 f8a7 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000664c 	.word	0x2000664c

08001d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d20:	f002 ff1a 	bl	8004b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <LPUART1_IRQHandler+0x10>)
 8001d2e:	f004 ff01 	bl	8006b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20006698 	.word	0x20006698

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_kill>:

int _kill(int pid, int sig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d56:	f016 f919 	bl	8017f8c <__errno>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_exit>:

void _exit (int status)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ffe7 	bl	8001d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <_exit+0x12>

08001d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e00a      	b.n	8001daa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d94:	f3af 8000 	nop.w
 8001d98:	4601      	mov	r1, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	60ba      	str	r2, [r7, #8]
 8001da0:	b2ca      	uxtb	r2, r1
 8001da2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbf0      	blt.n	8001d94 <_read+0x12>
  }

  return len;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e009      	b.n	8001de2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	60ba      	str	r2, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3301      	adds	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbf1      	blt.n	8001dce <_write+0x12>
  }
  return len;
 8001dea:	687b      	ldr	r3, [r7, #4]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_close>:

int _close(int file)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_isatty>:

int _isatty(int file)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f016 f87e 	bl	8017f8c <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20020000 	.word	0x20020000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	20006648 	.word	0x20006648
 8001ec4:	2000cd98 	.word	0x2000cd98

08001ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f14:	22a9      	movs	r2, #169	@ 0xa9
 8001f16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f32:	4814      	ldr	r0, [pc, #80]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f34:	f003 fec2 	bl	8005cbc <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f3e:	f7ff fcfd 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f50:	f004 f8d4 	bl	80060fc <HAL_TIM_ConfigClockSource>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f5a:	f7ff fcef 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <MX_TIM2_Init+0x98>)
 8001f6c:	f004 fb54 	bl	8006618 <HAL_TIMEx_MasterConfigSynchronization>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f76:	f7ff fce1 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000664c 	.word	0x2000664c

08001f88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f98:	d113      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <HAL_TIM_Base_MspInit+0x44>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <HAL_TIM_Base_MspInit+0x44>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_TIM_Base_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	201c      	movs	r0, #28
 8001fb8:	f002 f8a9 	bl	800410e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fbc:	201c      	movs	r0, #28
 8001fbe:	f002 f8c0 	bl	8004142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8001fd6:	4a22      	ldr	r2, [pc, #136]	@ (8002060 <MX_LPUART1_UART_Init+0x90>)
 8001fd8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001fda:	4b20      	ldr	r3, [pc, #128]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8001fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fe0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002000:	4b16      	ldr	r3, [pc, #88]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002012:	4812      	ldr	r0, [pc, #72]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8002014:	f004 fbdc 	bl	80067d0 <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800201e:	f7ff fc8d 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002022:	2100      	movs	r1, #0
 8002024:	480d      	ldr	r0, [pc, #52]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8002026:	f006 f8ec 	bl	8008202 <HAL_UARTEx_SetTxFifoThreshold>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002030:	f7ff fc84 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002034:	2100      	movs	r1, #0
 8002036:	4809      	ldr	r0, [pc, #36]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8002038:	f006 f921 	bl	800827e <HAL_UARTEx_SetRxFifoThreshold>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002042:	f7ff fc7b 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <MX_LPUART1_UART_Init+0x8c>)
 8002048:	f006 f8a2 	bl	8008190 <HAL_UARTEx_DisableFifoMode>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002052:	f7ff fc73 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20006698 	.word	0x20006698
 8002060:	40008000 	.word	0x40008000

08002064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b09e      	sub	sp, #120	@ 0x78
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2254      	movs	r2, #84	@ 0x54
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f015 feed 	bl	8017e64 <memset>
  if(uartHandle->Instance==LPUART1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <HAL_UART_MspInit+0x164>)
 8002090:	4293      	cmp	r3, r2
 8002092:	f040 8094 	bne.w	80021be <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002096:	2320      	movs	r3, #32
 8002098:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fbbc 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020ae:	f7ff fc45 	bl	800193c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020b2:	4b46      	ldr	r3, [pc, #280]	@ (80021cc <HAL_UART_MspInit+0x168>)
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	4a45      	ldr	r2, [pc, #276]	@ (80021cc <HAL_UART_MspInit+0x168>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020be:	4b43      	ldr	r3, [pc, #268]	@ (80021cc <HAL_UART_MspInit+0x168>)
 80020c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <HAL_UART_MspInit+0x168>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a3f      	ldr	r2, [pc, #252]	@ (80021cc <HAL_UART_MspInit+0x168>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_UART_MspInit+0x168>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80020e2:	230c      	movs	r3, #12
 80020e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80020f2:	230c      	movs	r3, #12
 80020f4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002100:	f002 fb78 	bl	80047f4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8002104:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002106:	4a33      	ldr	r2, [pc, #204]	@ (80021d4 <HAL_UART_MspInit+0x170>)
 8002108:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800210a:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 800210c:	2223      	movs	r2, #35	@ 0x23
 800210e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002110:	4b2f      	ldr	r3, [pc, #188]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002112:	2210      	movs	r2, #16
 8002114:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002116:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800211c:	4b2c      	ldr	r3, [pc, #176]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002122:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002128:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800212e:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002134:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002136:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800213a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800213c:	4824      	ldr	r0, [pc, #144]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 800213e:	f002 f81b 	bl	8004178 <HAL_DMA_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002148:	f7ff fbf8 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a20      	ldr	r2, [pc, #128]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002150:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002152:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <HAL_UART_MspInit+0x16c>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002158:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 800215a:	4a20      	ldr	r2, [pc, #128]	@ (80021dc <HAL_UART_MspInit+0x178>)
 800215c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 8002160:	2222      	movs	r2, #34	@ 0x22
 8002162:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002164:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216a:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 8002172:	2280      	movs	r2, #128	@ 0x80
 8002174:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800217c:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 8002184:	2220      	movs	r2, #32
 8002186:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 800218a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800218e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002190:	4811      	ldr	r0, [pc, #68]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 8002192:	f001 fff1 	bl	8004178 <HAL_DMA_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 800219c:	f7ff fbce 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 80021a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80021a8:	4a0b      	ldr	r2, [pc, #44]	@ (80021d8 <HAL_UART_MspInit+0x174>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2105      	movs	r1, #5
 80021b2:	205b      	movs	r0, #91	@ 0x5b
 80021b4:	f001 ffab 	bl	800410e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80021b8:	205b      	movs	r0, #91	@ 0x5b
 80021ba:	f001 ffc2 	bl	8004142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80021be:	bf00      	nop
 80021c0:	3778      	adds	r7, #120	@ 0x78
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40008000 	.word	0x40008000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	2000672c 	.word	0x2000672c
 80021d4:	40020008 	.word	0x40020008
 80021d8:	2000678c 	.word	0x2000678c
 80021dc:	4002001c 	.word	0x4002001c

080021e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021e0:	480d      	ldr	r0, [pc, #52]	@ (8002218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e4:	f7ff fe70 	bl	8001ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <LoopForever+0x6>)
  ldr r1, =_edata
 80021ea:	490d      	ldr	r1, [pc, #52]	@ (8002220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <LoopForever+0xe>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002200:	4c0a      	ldr	r4, [pc, #40]	@ (800222c <LoopForever+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f015 fec3 	bl	8017f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002212:	f7ff fb0d 	bl	8001830 <main>

08002216 <LoopForever>:

LoopForever:
    b LoopForever
 8002216:	e7fe      	b.n	8002216 <LoopForever>
  ldr   r0, =_estack
 8002218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002224:	08019dc8 	.word	0x08019dc8
  ldr r2, =_sbss
 8002228:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800222c:	2000cd98 	.word	0x2000cd98

08002230 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC3_IRQHandler>

08002232 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f001 ff5b 	bl	80040f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002242:	200f      	movs	r0, #15
 8002244:	f000 f80e 	bl	8002264 <HAL_InitTick>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	71fb      	strb	r3, [r7, #7]
 8002252:	e001      	b.n	8002258 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002254:	f7ff fcdc 	bl	8001c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002258:	79fb      	ldrb	r3, [r7, #7]

}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002270:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <HAL_InitTick+0x68>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d022      	beq.n	80022be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002278:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_InitTick+0x6c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <HAL_InitTick+0x68>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002284:	fbb1 f3f3 	udiv	r3, r1, r3
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	4618      	mov	r0, r3
 800228e:	f001 ff66 	bl	800415e <HAL_SYSTICK_Config>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10f      	bne.n	80022b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	d809      	bhi.n	80022b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800229e:	2200      	movs	r2, #0
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022a6:	f001 ff32 	bl	800410e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <HAL_InitTick+0x70>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e007      	b.n	80022c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e004      	b.n	80022c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e001      	b.n	80022c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2000000c 	.word	0x2000000c
 80022d0:	20000004 	.word	0x20000004
 80022d4:	20000008 	.word	0x20000008

080022d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_IncTick+0x1c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_IncTick+0x20>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a03      	ldr	r2, [pc, #12]	@ (80022f4 <HAL_IncTick+0x1c>)
 80022e8:	6013      	str	r3, [r2, #0]
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	200067ec 	.word	0x200067ec
 80022f8:	2000000c 	.word	0x2000000c

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	200067ec 	.word	0x200067ec

08002314 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3360      	adds	r3, #96	@ 0x60
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <LL_ADC_SetOffset+0x44>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	03fff000 	.word	0x03fff000

080023c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3360      	adds	r3, #96	@ 0x60
 80023d2:	461a      	mov	r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3360      	adds	r3, #96	@ 0x60
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002426:	b480      	push	{r7}
 8002428:	b087      	sub	sp, #28
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3360      	adds	r3, #96	@ 0x60
 8002436:	461a      	mov	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	431a      	orrs	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3360      	adds	r3, #96	@ 0x60
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	431a      	orrs	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	615a      	str	r2, [r3, #20]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024de:	b480      	push	{r7}
 80024e0:	b087      	sub	sp, #28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3330      	adds	r3, #48	@ 0x30
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	4413      	add	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	211f      	movs	r1, #31
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	401a      	ands	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 011f 	and.w	r1, r3, #31
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	431a      	orrs	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002542:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3314      	adds	r3, #20
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	0e5b      	lsrs	r3, r3, #25
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	0d1b      	lsrs	r3, r3, #20
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2107      	movs	r1, #7
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	401a      	ands	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	0d1b      	lsrs	r3, r3, #20
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	431a      	orrs	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0318 	and.w	r3, r3, #24
 80025d6:	4908      	ldr	r1, [pc, #32]	@ (80025f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025d8:	40d9      	lsrs	r1, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	400b      	ands	r3, r1
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	0007ffff 	.word	0x0007ffff

080025fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 031f 	and.w	r3, r3, #31
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002644:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6093      	str	r3, [r2, #8]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800266c:	d101      	bne.n	8002672 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002690:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002694:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026bc:	d101      	bne.n	80026c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <LL_ADC_IsEnabled+0x18>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <LL_ADC_IsEnabled+0x1a>
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800272e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d101      	bne.n	800275e <LL_ADC_REG_IsConversionOngoing+0x18>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1a9      	b.n	8002b02 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd ffd9 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff3f 	bl	8002658 <LL_ADC_IsDeepPowerDownEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff25 	bl	8002634 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff5a 	bl	80026a8 <LL_ADC_IsInternalRegulatorEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff3e 	bl	8002680 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002804:	4b9c      	ldr	r3, [pc, #624]	@ (8002a78 <HAL_ADC_Init+0x2e4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	4a9c      	ldr	r2, [pc, #624]	@ (8002a7c <HAL_ADC_Init+0x2e8>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002818:	e002      	b.n	8002820 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b01      	subs	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff3c 	bl	80026a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff75 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 800285c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8142 	bne.w	8002af0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 813e 	bne.w	8002af0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800287c:	f043 0202 	orr.w	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff35 	bl	80026f8 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d141      	bne.n	8002918 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800289c:	d004      	beq.n	80028a8 <HAL_ADC_Init+0x114>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a77      	ldr	r2, [pc, #476]	@ (8002a80 <HAL_ADC_Init+0x2ec>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_ADC_Init+0x134>
 80028a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028ac:	f7ff ff24 	bl	80026f8 <LL_ADC_IsEnabled>
 80028b0:	4604      	mov	r4, r0
 80028b2:	4873      	ldr	r0, [pc, #460]	@ (8002a80 <HAL_ADC_Init+0x2ec>)
 80028b4:	f7ff ff20 	bl	80026f8 <LL_ADC_IsEnabled>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4323      	orrs	r3, r4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e012      	b.n	80028ee <HAL_ADC_Init+0x15a>
 80028c8:	486e      	ldr	r0, [pc, #440]	@ (8002a84 <HAL_ADC_Init+0x2f0>)
 80028ca:	f7ff ff15 	bl	80026f8 <LL_ADC_IsEnabled>
 80028ce:	4604      	mov	r4, r0
 80028d0:	486d      	ldr	r0, [pc, #436]	@ (8002a88 <HAL_ADC_Init+0x2f4>)
 80028d2:	f7ff ff11 	bl	80026f8 <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	431c      	orrs	r4, r3
 80028da:	486c      	ldr	r0, [pc, #432]	@ (8002a8c <HAL_ADC_Init+0x2f8>)
 80028dc:	f7ff ff0c 	bl	80026f8 <LL_ADC_IsEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4323      	orrs	r3, r4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028fa:	d004      	beq.n	8002906 <HAL_ADC_Init+0x172>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5f      	ldr	r2, [pc, #380]	@ (8002a80 <HAL_ADC_Init+0x2ec>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_ADC_Init+0x176>
 8002906:	4a62      	ldr	r2, [pc, #392]	@ (8002a90 <HAL_ADC_Init+0x2fc>)
 8002908:	e000      	b.n	800290c <HAL_ADC_Init+0x178>
 800290a:	4a62      	ldr	r2, [pc, #392]	@ (8002a94 <HAL_ADC_Init+0x300>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f7ff fcfe 	bl	8002314 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7f5b      	ldrb	r3, [r3, #29]
 800291c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002922:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002928:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800292e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002936:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002942:	2b01      	cmp	r3, #1
 8002944:	d106      	bne.n	8002954 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	045b      	lsls	r3, r3, #17
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4b48      	ldr	r3, [pc, #288]	@ (8002a98 <HAL_ADC_Init+0x304>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	430b      	orrs	r3, r1
 8002982:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fee4 	bl	800276c <LL_ADC_INJ_IsConversionOngoing>
 80029a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d17f      	bne.n	8002aac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d17c      	bne.n	8002aac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ce:	f023 0302 	bic.w	r3, r3, #2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	430b      	orrs	r3, r1
 80029da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d017      	beq.n	8002a14 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6911      	ldr	r1, [r2, #16]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a12:	e013      	b.n	8002a3c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d12a      	bne.n	8002a9c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	e019      	b.n	8002aac <HAL_ADC_Init+0x318>
 8002a78:	20000004 	.word	0x20000004
 8002a7c:	053e2d63 	.word	0x053e2d63
 8002a80:	50000100 	.word	0x50000100
 8002a84:	50000400 	.word	0x50000400
 8002a88:	50000500 	.word	0x50000500
 8002a8c:	50000600 	.word	0x50000600
 8002a90:	50000300 	.word	0x50000300
 8002a94:	50000700 	.word	0x50000700
 8002a98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10c      	bne.n	8002ace <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f023 010f 	bic.w	r1, r3, #15
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002acc:	e007      	b.n	8002ade <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020f 	bic.w	r2, r2, #15
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aee:	e007      	b.n	8002b00 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	f043 0210 	orr.w	r2, r3, #16
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop

08002b0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b20:	d004      	beq.n	8002b2c <HAL_ADC_Start_DMA+0x20>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a5a      	ldr	r2, [pc, #360]	@ (8002c90 <HAL_ADC_Start_DMA+0x184>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_Start_DMA+0x24>
 8002b2c:	4b59      	ldr	r3, [pc, #356]	@ (8002c94 <HAL_ADC_Start_DMA+0x188>)
 8002b2e:	e000      	b.n	8002b32 <HAL_ADC_Start_DMA+0x26>
 8002b30:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_ADC_Start_DMA+0x18c>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fd62 	bl	80025fc <LL_ADC_GetMultimode>
 8002b38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fe01 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 809b 	bne.w	8002c82 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Start_DMA+0x4e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e096      	b.n	8002c88 <HAL_ADC_Start_DMA+0x17c>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4d      	ldr	r2, [pc, #308]	@ (8002c9c <HAL_ADC_Start_DMA+0x190>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d008      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d002      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	d17a      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 ff60 	bl	8003a44 <ADC_Enable>
 8002b84:	4603      	mov	r3, r0
 8002b86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d16d      	bne.n	8002c6a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8002c90 <HAL_ADC_Start_DMA+0x184>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_ADC_Start_DMA+0xb4>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca0 <HAL_ADC_Start_DMA+0x194>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d002      	beq.n	8002bbc <HAL_ADC_Start_DMA+0xb0>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_Start_DMA+0xb8>
 8002bbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <HAL_ADC_Start_DMA+0x198>)
 8002bbe:	e001      	b.n	8002bc4 <HAL_ADC_Start_DMA+0xb8>
 8002bc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bee:	f023 0206 	bic.w	r2, r3, #6
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bf6:	e002      	b.n	8002bfe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <HAL_ADC_Start_DMA+0x19c>)
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <HAL_ADC_Start_DMA+0x1a0>)
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <HAL_ADC_Start_DMA+0x1a4>)
 8002c14:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	221c      	movs	r2, #28
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0210 	orr.w	r2, r2, #16
 8002c34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3340      	adds	r3, #64	@ 0x40
 8002c50:	4619      	mov	r1, r3
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f001 fb37 	bl	80042c8 <HAL_DMA_Start_IT>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fd5b 	bl	800271e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c68:	e00d      	b.n	8002c86 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002c72:	e008      	b.n	8002c86 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c80:	e001      	b.n	8002c86 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
 8002c84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	50000100 	.word	0x50000100
 8002c94:	50000300 	.word	0x50000300
 8002c98:	50000700 	.word	0x50000700
 8002c9c:	50000600 	.word	0x50000600
 8002ca0:	50000500 	.word	0x50000500
 8002ca4:	50000400 	.word	0x50000400
 8002ca8:	08003b71 	.word	0x08003b71
 8002cac:	08003c49 	.word	0x08003c49
 8002cb0:	08003c65 	.word	0x08003c65

08002cb4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	@ 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0x30>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a8e      	ldr	r2, [pc, #568]	@ (8002f18 <HAL_ADC_IRQHandler+0x264>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0x34>
 8002ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <HAL_ADC_IRQHandler+0x268>)
 8002ce6:	e000      	b.n	8002cea <HAL_ADC_IRQHandler+0x36>
 8002ce8:	4b8d      	ldr	r3, [pc, #564]	@ (8002f20 <HAL_ADC_IRQHandler+0x26c>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fc86 	bl	80025fc <LL_ADC_GetMultimode>
 8002cf0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d017      	beq.n	8002d2c <HAL_ADC_IRQHandler+0x78>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d012      	beq.n	8002d2c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f001 f808 	bl	8003d34 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <HAL_ADC_IRQHandler+0x8c>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8094 	beq.w	8002e74 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808e 	beq.w	8002e74 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fb9f 	bl	80024b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d072      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a64      	ldr	r2, [pc, #400]	@ (8002f18 <HAL_ADC_IRQHandler+0x264>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_ADC_IRQHandler+0xea>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a65      	ldr	r2, [pc, #404]	@ (8002f24 <HAL_ADC_IRQHandler+0x270>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d002      	beq.n	8002d9a <HAL_ADC_IRQHandler+0xe6>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_IRQHandler+0xee>
 8002d9a:	4b63      	ldr	r3, [pc, #396]	@ (8002f28 <HAL_ADC_IRQHandler+0x274>)
 8002d9c:	e001      	b.n	8002da2 <HAL_ADC_IRQHandler+0xee>
 8002d9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d008      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	d002      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d104      	bne.n	8002dc6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	e014      	b.n	8002df0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a53      	ldr	r2, [pc, #332]	@ (8002f18 <HAL_ADC_IRQHandler+0x264>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x130>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a53      	ldr	r2, [pc, #332]	@ (8002f24 <HAL_ADC_IRQHandler+0x270>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d002      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x12c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_IRQHandler+0x134>
 8002de0:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <HAL_ADC_IRQHandler+0x274>)
 8002de2:	e001      	b.n	8002de8 <HAL_ADC_IRQHandler+0x134>
 8002de4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002de8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d135      	bne.n	8002e66 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d12e      	bne.n	8002e66 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fc9a 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11a      	bne.n	8002e4e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 020c 	bic.w	r2, r2, #12
 8002e26:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d112      	bne.n	8002e66 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e4c:	e00b      	b.n	8002e66 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f984 	bl	8003174 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	220c      	movs	r2, #12
 8002e72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x1d4>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80b3 	beq.w	8002ffa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80ad 	beq.w	8002ffa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fb3a 	bl	8002536 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ec2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff faf5 	bl	80024b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ece:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a10      	ldr	r2, [pc, #64]	@ (8002f18 <HAL_ADC_IRQHandler+0x264>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_ADC_IRQHandler+0x23a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a11      	ldr	r2, [pc, #68]	@ (8002f24 <HAL_ADC_IRQHandler+0x270>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d002      	beq.n	8002eea <HAL_ADC_IRQHandler+0x236>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	e003      	b.n	8002ef2 <HAL_ADC_IRQHandler+0x23e>
 8002eea:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <HAL_ADC_IRQHandler+0x274>)
 8002eec:	e001      	b.n	8002ef2 <HAL_ADC_IRQHandler+0x23e>
 8002eee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d008      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d002      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d10f      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	e01f      	b.n	8002f56 <HAL_ADC_IRQHandler+0x2a2>
 8002f16:	bf00      	nop
 8002f18:	50000100 	.word	0x50000100
 8002f1c:	50000300 	.word	0x50000300
 8002f20:	50000700 	.word	0x50000700
 8002f24:	50000500 	.word	0x50000500
 8002f28:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a8b      	ldr	r2, [pc, #556]	@ (8003160 <HAL_ADC_IRQHandler+0x4ac>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_ADC_IRQHandler+0x296>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a8a      	ldr	r2, [pc, #552]	@ (8003164 <HAL_ADC_IRQHandler+0x4b0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d002      	beq.n	8002f46 <HAL_ADC_IRQHandler+0x292>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	e003      	b.n	8002f4e <HAL_ADC_IRQHandler+0x29a>
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_ADC_IRQHandler+0x4b4>)
 8002f48:	e001      	b.n	8002f4e <HAL_ADC_IRQHandler+0x29a>
 8002f4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f4e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d047      	beq.n	8002fec <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x2c2>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d03f      	beq.n	8002fec <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d13a      	bne.n	8002fec <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f80:	2b40      	cmp	r3, #64	@ 0x40
 8002f82:	d133      	bne.n	8002fec <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d12e      	bne.n	8002fec <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fbea 	bl	800276c <LL_ADC_INJ_IsConversionOngoing>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d112      	bne.n	8002fec <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fd2:	e00b      	b.n	8002fec <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd8:	f043 0210 	orr.w	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fe79 	bl	8003ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2260      	movs	r2, #96	@ 0x60
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d011      	beq.n	8003028 <HAL_ADC_IRQHandler+0x374>
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8be 	bl	800319c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2280      	movs	r2, #128	@ 0x80
 8003026:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <HAL_ADC_IRQHandler+0x3a4>
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00d      	beq.n	8003058 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fe5f 	bl	8003d0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <HAL_ADC_IRQHandler+0x3d4>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fe51 	bl	8003d20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d043      	beq.n	800311a <HAL_ADC_IRQHandler+0x466>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03e      	beq.n	800311a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80030a4:	2301      	movs	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a8:	e021      	b.n	80030ee <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d015      	beq.n	80030dc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b8:	d004      	beq.n	80030c4 <HAL_ADC_IRQHandler+0x410>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a28      	ldr	r2, [pc, #160]	@ (8003160 <HAL_ADC_IRQHandler+0x4ac>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_IRQHandler+0x414>
 80030c4:	4b29      	ldr	r3, [pc, #164]	@ (800316c <HAL_ADC_IRQHandler+0x4b8>)
 80030c6:	e000      	b.n	80030ca <HAL_ADC_IRQHandler+0x416>
 80030c8:	4b29      	ldr	r3, [pc, #164]	@ (8003170 <HAL_ADC_IRQHandler+0x4bc>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff faa4 	bl	8002618 <LL_ADC_GetMultiDMATransfer>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80030d6:	2301      	movs	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030da:	e008      	b.n	80030ee <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80030ea:	2301      	movs	r3, #1
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10e      	bne.n	8003112 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003104:	f043 0202 	orr.w	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f84f 	bl	80031b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2210      	movs	r2, #16
 8003118:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d018      	beq.n	8003156 <HAL_ADC_IRQHandler+0x4a2>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003132:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800314e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fdd1 	bl	8003cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	@ 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	50000100 	.word	0x50000100
 8003164:	50000500 	.word	0x50000500
 8003168:	50000400 	.word	0x50000400
 800316c:	50000300 	.word	0x50000300
 8003170:	50000700 	.word	0x50000700

08003174 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0b6      	sub	sp, #216	@ 0xd8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d102      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x24>
 80031e2:	2302      	movs	r3, #2
 80031e4:	f000 bc13 	b.w	8003a0e <HAL_ADC_ConfigChannel+0x84a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff faa6 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 83f3 	bne.w	80039e8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	f7ff f965 	bl	80024de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fa94 	bl	8002746 <LL_ADC_REG_IsConversionOngoing>
 800321e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff faa0 	bl	800276c <LL_ADC_INJ_IsConversionOngoing>
 800322c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 81d9 	bne.w	80035ec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800323a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 81d4 	bne.w	80035ec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800324c:	d10f      	bne.n	800326e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	4619      	mov	r1, r3
 800325a:	f7ff f97f 	bl	800255c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f913 	bl	8002492 <LL_ADC_SetSamplingTimeCommonConfig>
 800326c:	e00e      	b.n	800328c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6819      	ldr	r1, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	461a      	mov	r2, r3
 800327c:	f7ff f96e 	bl	800255c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f903 	bl	8002492 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	08db      	lsrs	r3, r3, #3
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d022      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6919      	ldr	r1, [r3, #16]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032be:	f7ff f85d 	bl	800237c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f7ff f8a9 	bl	8002426 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d102      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x126>
 80032e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032e8:	e000      	b.n	80032ec <HAL_ADC_ConfigChannel+0x128>
 80032ea:	2300      	movs	r3, #0
 80032ec:	461a      	mov	r2, r3
 80032ee:	f7ff f8b5 	bl	800245c <LL_ADC_SetOffsetSaturation>
 80032f2:	e17b      	b.n	80035ec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f862 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x15c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f857 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	0e9b      	lsrs	r3, r3, #26
 800331a:	f003 021f 	and.w	r2, r3, #31
 800331e:	e01e      	b.n	800335e <HAL_ADC_ConfigChannel+0x19a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff f84c 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 800332c:	4603      	mov	r3, r0
 800332e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800333e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003342:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800334e:	2320      	movs	r3, #32
 8003350:	e004      	b.n	800335c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003352:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	2b00      	cmp	r3, #0
 8003368:	d105      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x1b2>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	e018      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x1e4>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800338a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800339a:	2320      	movs	r3, #32
 800339c:	e004      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800339e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d106      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff f81b 	bl	80023f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe ffff 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x222>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fff4 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	0e9b      	lsrs	r3, r3, #26
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	e01e      	b.n	8003424 <HAL_ADC_ConfigChannel+0x260>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe ffe9 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800340c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003414:	2320      	movs	r3, #32
 8003416:	e004      	b.n	8003422 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342c:	2b00      	cmp	r3, #0
 800342e:	d105      	bne.n	800343c <HAL_ADC_ConfigChannel+0x278>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	e018      	b.n	800346e <HAL_ADC_ConfigChannel+0x2aa>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003458:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003460:	2320      	movs	r3, #32
 8003462:	e004      	b.n	800346e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800346e:	429a      	cmp	r2, r3
 8003470:	d106      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	2101      	movs	r1, #1
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe ffb8 	bl	80023f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2102      	movs	r1, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe ff9c 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 800348c:	4603      	mov	r3, r0
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x2e8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe ff91 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 80034a2:	4603      	mov	r3, r0
 80034a4:	0e9b      	lsrs	r3, r3, #26
 80034a6:	f003 021f 	and.w	r2, r3, #31
 80034aa:	e01e      	b.n	80034ea <HAL_ADC_ConfigChannel+0x326>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe ff86 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80034ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80034d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80034da:	2320      	movs	r3, #32
 80034dc:	e004      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80034de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x33e>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0e9b      	lsrs	r3, r3, #26
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	e016      	b.n	8003530 <HAL_ADC_ConfigChannel+0x36c>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003514:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800351a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003522:	2320      	movs	r3, #32
 8003524:	e004      	b.n	8003530 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003526:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003530:	429a      	cmp	r2, r3
 8003532:	d106      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	2102      	movs	r1, #2
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe ff57 	bl	80023f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2103      	movs	r1, #3
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe ff3b 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_ADC_ConfigChannel+0x3aa>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2103      	movs	r1, #3
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe ff30 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	0e9b      	lsrs	r3, r3, #26
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	e017      	b.n	800359e <HAL_ADC_ConfigChannel+0x3da>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2103      	movs	r1, #3
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe ff25 	bl	80023c4 <LL_ADC_GetOffsetChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003588:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800358a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e003      	b.n	800359c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x3f2>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0e9b      	lsrs	r3, r3, #26
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	e011      	b.n	80035da <HAL_ADC_ConfigChannel+0x416>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80035c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80035c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e003      	b.n	80035da <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80035d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035da:	429a      	cmp	r2, r3
 80035dc:	d106      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	2103      	movs	r1, #3
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe ff02 	bl	80023f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f881 	bl	80026f8 <LL_ADC_IsEnabled>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 813d 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	461a      	mov	r2, r3
 800360c:	f7fe ffd2 	bl	80025b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4aa2      	ldr	r2, [pc, #648]	@ (80038a0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f040 812e 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x480>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2b09      	cmp	r3, #9
 800363a:	bf94      	ite	ls
 800363c:	2301      	movls	r3, #1
 800363e:	2300      	movhi	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e019      	b.n	8003678 <HAL_ADC_ConfigChannel+0x4b4>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003654:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e003      	b.n	8003668 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2b09      	cmp	r3, #9
 8003670:	bf94      	ite	ls
 8003672:	2301      	movls	r3, #1
 8003674:	2300      	movhi	r3, #0
 8003676:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003678:	2b00      	cmp	r3, #0
 800367a:	d079      	beq.n	8003770 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x4d4>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	0e9b      	lsrs	r3, r3, #26
 800368e:	3301      	adds	r3, #1
 8003690:	069b      	lsls	r3, r3, #26
 8003692:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003696:	e015      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x500>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80036aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80036b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	069b      	lsls	r3, r3, #26
 80036c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x520>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	3301      	adds	r3, #1
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	e017      	b.n	8003714 <HAL_ADC_ConfigChannel+0x550>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80036f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80036f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	ea42 0103 	orr.w	r1, r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_ADC_ConfigChannel+0x576>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	3301      	adds	r3, #1
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	051b      	lsls	r3, r3, #20
 8003738:	e018      	b.n	800376c <HAL_ADC_ConfigChannel+0x5a8>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800374c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003752:	2320      	movs	r3, #32
 8003754:	e003      	b.n	800375e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376c:	430b      	orrs	r3, r1
 800376e:	e07e      	b.n	800386e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_ADC_ConfigChannel+0x5c8>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	3301      	adds	r3, #1
 8003784:	069b      	lsls	r3, r3, #26
 8003786:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800378a:	e015      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x5f4>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x614>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	3301      	adds	r3, #1
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	e017      	b.n	8003808 <HAL_ADC_ConfigChannel+0x644>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	61fb      	str	r3, [r7, #28]
  return result;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e003      	b.n	80037fc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	ea42 0103 	orr.w	r1, r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x670>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	3b1e      	subs	r3, #30
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003832:	e01b      	b.n	800386c <HAL_ADC_ConfigChannel+0x6a8>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fa93 f3a3 	rbit	r3, r3
 8003840:	613b      	str	r3, [r7, #16]
  return result;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800384c:	2320      	movs	r3, #32
 800384e:	e003      	b.n	8003858 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	3301      	adds	r3, #1
 800385a:	f003 021f 	and.w	r2, r3, #31
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	3b1e      	subs	r3, #30
 8003866:	051b      	lsls	r3, r3, #20
 8003868:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003872:	4619      	mov	r1, r3
 8003874:	f7fe fe72 	bl	800255c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_ADC_ConfigChannel+0x6e0>)
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80be 	beq.w	8003a02 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800388e:	d004      	beq.n	800389a <HAL_ADC_ConfigChannel+0x6d6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <HAL_ADC_ConfigChannel+0x6e4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10a      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x6ec>
 800389a:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <HAL_ADC_ConfigChannel+0x6e8>)
 800389c:	e009      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x6ee>
 800389e:	bf00      	nop
 80038a0:	407f0000 	.word	0x407f0000
 80038a4:	80080000 	.word	0x80080000
 80038a8:	50000100 	.word	0x50000100
 80038ac:	50000300 	.word	0x50000300
 80038b0:	4b59      	ldr	r3, [pc, #356]	@ (8003a18 <HAL_ADC_ConfigChannel+0x854>)
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fd54 	bl	8002360 <LL_ADC_GetCommonPathInternalCh>
 80038b8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a56      	ldr	r2, [pc, #344]	@ (8003a1c <HAL_ADC_ConfigChannel+0x858>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0x70c>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a55      	ldr	r2, [pc, #340]	@ (8003a20 <HAL_ADC_ConfigChannel+0x85c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d13a      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d134      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e4:	d005      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x72e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a4e      	ldr	r2, [pc, #312]	@ (8003a24 <HAL_ADC_ConfigChannel+0x860>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f040 8085 	bne.w	80039fc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_ConfigChannel+0x742>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a49      	ldr	r2, [pc, #292]	@ (8003a28 <HAL_ADC_ConfigChannel+0x864>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_ADC_ConfigChannel+0x746>
 8003906:	4a49      	ldr	r2, [pc, #292]	@ (8003a2c <HAL_ADC_ConfigChannel+0x868>)
 8003908:	e000      	b.n	800390c <HAL_ADC_ConfigChannel+0x748>
 800390a:	4a43      	ldr	r2, [pc, #268]	@ (8003a18 <HAL_ADC_ConfigChannel+0x854>)
 800390c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003910:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7fe fd0f 	bl	800233a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800391c:	4b44      	ldr	r3, [pc, #272]	@ (8003a30 <HAL_ADC_ConfigChannel+0x86c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	099b      	lsrs	r3, r3, #6
 8003922:	4a44      	ldr	r2, [pc, #272]	@ (8003a34 <HAL_ADC_ConfigChannel+0x870>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003936:	e002      	b.n	800393e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3b01      	subs	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f9      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003944:	e05a      	b.n	80039fc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a3b      	ldr	r2, [pc, #236]	@ (8003a38 <HAL_ADC_ConfigChannel+0x874>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d125      	bne.n	800399c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11f      	bne.n	800399c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a31      	ldr	r2, [pc, #196]	@ (8003a28 <HAL_ADC_ConfigChannel+0x864>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d104      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x7ac>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a34      	ldr	r2, [pc, #208]	@ (8003a3c <HAL_ADC_ConfigChannel+0x878>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d047      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003978:	d004      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a28 <HAL_ADC_ConfigChannel+0x864>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x7c4>
 8003984:	4a29      	ldr	r2, [pc, #164]	@ (8003a2c <HAL_ADC_ConfigChannel+0x868>)
 8003986:	e000      	b.n	800398a <HAL_ADC_ConfigChannel+0x7c6>
 8003988:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <HAL_ADC_ConfigChannel+0x854>)
 800398a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800398e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe fcd0 	bl	800233a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800399a:	e031      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a27      	ldr	r2, [pc, #156]	@ (8003a40 <HAL_ADC_ConfigChannel+0x87c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d12d      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d127      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <HAL_ADC_ConfigChannel+0x864>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c4:	d004      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x80c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a17      	ldr	r2, [pc, #92]	@ (8003a28 <HAL_ADC_ConfigChannel+0x864>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x810>
 80039d0:	4a16      	ldr	r2, [pc, #88]	@ (8003a2c <HAL_ADC_ConfigChannel+0x868>)
 80039d2:	e000      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x812>
 80039d4:	4a10      	ldr	r2, [pc, #64]	@ (8003a18 <HAL_ADC_ConfigChannel+0x854>)
 80039d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fe fcaa 	bl	800233a <LL_ADC_SetCommonPathInternalCh>
 80039e6:	e00c      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80039fa:	e002      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	37d8      	adds	r7, #216	@ 0xd8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	50000700 	.word	0x50000700
 8003a1c:	c3210000 	.word	0xc3210000
 8003a20:	90c00010 	.word	0x90c00010
 8003a24:	50000600 	.word	0x50000600
 8003a28:	50000100 	.word	0x50000100
 8003a2c:	50000300 	.word	0x50000300
 8003a30:	20000004 	.word	0x20000004
 8003a34:	053e2d63 	.word	0x053e2d63
 8003a38:	c7520000 	.word	0xc7520000
 8003a3c:	50000500 	.word	0x50000500
 8003a40:	cb840000 	.word	0xcb840000

08003a44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fe4f 	bl	80026f8 <LL_ADC_IsEnabled>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d176      	bne.n	8003b4e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	4b3c      	ldr	r3, [pc, #240]	@ (8003b58 <ADC_Enable+0x114>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a72:	f043 0210 	orr.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e062      	b.n	8003b50 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fe1e 	bl	80026d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a9c:	d004      	beq.n	8003aa8 <ADC_Enable+0x64>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b5c <ADC_Enable+0x118>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <ADC_Enable+0x68>
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b60 <ADC_Enable+0x11c>)
 8003aaa:	e000      	b.n	8003aae <ADC_Enable+0x6a>
 8003aac:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <ADC_Enable+0x120>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fc56 	bl	8002360 <LL_ADC_GetCommonPathInternalCh>
 8003ab4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d013      	beq.n	8003ae6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003abe:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <ADC_Enable+0x124>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <ADC_Enable+0x128>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ad8:	e002      	b.n	8003ae0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f9      	bne.n	8003ada <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ae6:	f7fe fc09 	bl	80022fc <HAL_GetTick>
 8003aea:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aec:	e028      	b.n	8003b40 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fe00 	bl	80026f8 <LL_ADC_IsEnabled>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fde4 	bl	80026d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b08:	f7fe fbf8 	bl	80022fc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d914      	bls.n	8003b40 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d00d      	beq.n	8003b40 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e007      	b.n	8003b50 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d1cf      	bne.n	8003aee <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	8000003f 	.word	0x8000003f
 8003b5c:	50000100 	.word	0x50000100
 8003b60:	50000300 	.word	0x50000300
 8003b64:	50000700 	.word	0x50000700
 8003b68:	20000004 	.word	0x20000004
 8003b6c:	053e2d63 	.word	0x053e2d63

08003b70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d14b      	bne.n	8003c22 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d021      	beq.n	8003be8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fc85 	bl	80024b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d032      	beq.n	8003c1a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d12b      	bne.n	8003c1a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11f      	bne.n	8003c1a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	f043 0201 	orr.w	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003be6:	e018      	b.n	8003c1a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d111      	bne.n	8003c1a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff faaa 	bl	8003174 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c20:	e00e      	b.n	8003c40 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff fabe 	bl	80031b0 <HAL_ADC_ErrorCallback>
}
 8003c34:	e004      	b.n	8003c40 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	4798      	blx	r3
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fa96 	bl	8003188 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c82:	f043 0204 	orr.w	r2, r3, #4
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff fa90 	bl	80031b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <LL_ADC_IsEnabled>:
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <LL_ADC_IsEnabled+0x18>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <LL_ADC_IsEnabled+0x1a>
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_ADC_REG_IsConversionOngoing>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d101      	bne.n	8003cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b0a1      	sub	sp, #132	@ 0x84
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0e7      	b.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d72:	2300      	movs	r3, #0
 8003d74:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d7e:	d102      	bne.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d80:	4b6f      	ldr	r3, [pc, #444]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	e009      	b.n	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d102      	bne.n	8003d96 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d90:	4b6d      	ldr	r3, [pc, #436]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	e001      	b.n	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0be      	b.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff7f 	bl	8003cbe <LL_ADC_REG_IsConversionOngoing>
 8003dc0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff79 	bl	8003cbe <LL_ADC_REG_IsConversionOngoing>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 80a0 	bne.w	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 809c 	bne.w	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de4:	d004      	beq.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a55      	ldr	r2, [pc, #340]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003df0:	4b56      	ldr	r3, [pc, #344]	@ (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003df2:	e000      	b.n	8003df6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003df4:	4b56      	ldr	r3, [pc, #344]	@ (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003df6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04b      	beq.n	8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e12:	035b      	lsls	r3, r3, #13
 8003e14:	430b      	orrs	r3, r1
 8003e16:	431a      	orrs	r2, r3
 8003e18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e24:	d004      	beq.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a45      	ldr	r2, [pc, #276]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10f      	bne.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e34:	f7ff ff30 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e38:	4604      	mov	r4, r0
 8003e3a:	4841      	ldr	r0, [pc, #260]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e3c:	f7ff ff2c 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4323      	orrs	r3, r4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e012      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e50:	483c      	ldr	r0, [pc, #240]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e52:	f7ff ff21 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e56:	4604      	mov	r4, r0
 8003e58:	483b      	ldr	r0, [pc, #236]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e5a:	f7ff ff1d 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	431c      	orrs	r4, r3
 8003e62:	483c      	ldr	r0, [pc, #240]	@ (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e64:	f7ff ff18 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4323      	orrs	r3, r4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d056      	beq.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e82:	f023 030f 	bic.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	6811      	ldr	r1, [r2, #0]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	6892      	ldr	r2, [r2, #8]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	431a      	orrs	r2, r3
 8003e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e96:	e047      	b.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eac:	d004      	beq.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a23      	ldr	r2, [pc, #140]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003eb8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ebc:	f7ff feec 	bl	8003c98 <LL_ADC_IsEnabled>
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	481f      	ldr	r0, [pc, #124]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ec4:	f7ff fee8 	bl	8003c98 <LL_ADC_IsEnabled>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4323      	orrs	r3, r4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e012      	b.n	8003efe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ed8:	481a      	ldr	r0, [pc, #104]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003eda:	f7ff fedd 	bl	8003c98 <LL_ADC_IsEnabled>
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4819      	ldr	r0, [pc, #100]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ee2:	f7ff fed9 	bl	8003c98 <LL_ADC_IsEnabled>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	431c      	orrs	r4, r3
 8003eea:	481a      	ldr	r0, [pc, #104]	@ (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003eec:	f7ff fed4 	bl	8003c98 <LL_ADC_IsEnabled>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4323      	orrs	r3, r4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d012      	beq.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f0a:	f023 030f 	bic.w	r3, r3, #15
 8003f0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f10:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f12:	e009      	b.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f26:	e000      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3784      	adds	r7, #132	@ 0x84
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	50000100 	.word	0x50000100
 8003f44:	50000400 	.word	0x50000400
 8003f48:	50000500 	.word	0x50000500
 8003f4c:	50000300 	.word	0x50000300
 8003f50:	50000700 	.word	0x50000700
 8003f54:	50000600 	.word	0x50000600

08003f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f74:	4013      	ands	r3, r2
 8003f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8a:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	60d3      	str	r3, [r2, #12]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa4:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	0a1b      	lsrs	r3, r3, #8
 8003faa:	f003 0307 	and.w	r3, r3, #7
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	db0b      	blt.n	8003fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	f003 021f 	and.w	r2, r3, #31
 8003fd4:	4907      	ldr	r1, [pc, #28]	@ (8003ff4 <__NVIC_EnableIRQ+0x38>)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2001      	movs	r0, #1
 8003fde:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000e100 	.word	0xe000e100

08003ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	2b00      	cmp	r3, #0
 800400a:	db0a      	blt.n	8004022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	490c      	ldr	r1, [pc, #48]	@ (8004044 <__NVIC_SetPriority+0x4c>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	0112      	lsls	r2, r2, #4
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	440b      	add	r3, r1
 800401c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004020:	e00a      	b.n	8004038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4908      	ldr	r1, [pc, #32]	@ (8004048 <__NVIC_SetPriority+0x50>)
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	3b04      	subs	r3, #4
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	440b      	add	r3, r1
 8004036:	761a      	strb	r2, [r3, #24]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000e100 	.word	0xe000e100
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800404c:	b480      	push	{r7}
 800404e:	b089      	sub	sp, #36	@ 0x24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f1c3 0307 	rsb	r3, r3, #7
 8004066:	2b04      	cmp	r3, #4
 8004068:	bf28      	it	cs
 800406a:	2304      	movcs	r3, #4
 800406c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3304      	adds	r3, #4
 8004072:	2b06      	cmp	r3, #6
 8004074:	d902      	bls.n	800407c <NVIC_EncodePriority+0x30>
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3b03      	subs	r3, #3
 800407a:	e000      	b.n	800407e <NVIC_EncodePriority+0x32>
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	401a      	ands	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004094:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	43d9      	mvns	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a4:	4313      	orrs	r3, r2
         );
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3724      	adds	r7, #36	@ 0x24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3b01      	subs	r3, #1
 80040c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040c4:	d301      	bcc.n	80040ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040c6:	2301      	movs	r3, #1
 80040c8:	e00f      	b.n	80040ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ca:	4a0a      	ldr	r2, [pc, #40]	@ (80040f4 <SysTick_Config+0x40>)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040d2:	210f      	movs	r1, #15
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040d8:	f7ff ff8e 	bl	8003ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <SysTick_Config+0x40>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040e2:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <SysTick_Config+0x40>)
 80040e4:	2207      	movs	r2, #7
 80040e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	e000e010 	.word	0xe000e010

080040f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff29 	bl	8003f58 <__NVIC_SetPriorityGrouping>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800411c:	f7ff ff40 	bl	8003fa0 <__NVIC_GetPriorityGrouping>
 8004120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	6978      	ldr	r0, [r7, #20]
 8004128:	f7ff ff90 	bl	800404c <NVIC_EncodePriority>
 800412c:	4602      	mov	r2, r0
 800412e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff5f 	bl	8003ff8 <__NVIC_SetPriority>
}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	4603      	mov	r3, r0
 800414a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800414c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff33 	bl	8003fbc <__NVIC_EnableIRQ>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ffa4 	bl	80040b4 <SysTick_Config>
 800416c:	4603      	mov	r3, r0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e08d      	b.n	80042a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_DMA_Init+0x138>)
 8004192:	429a      	cmp	r2, r3
 8004194:	d80f      	bhi.n	80041b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	4b45      	ldr	r3, [pc, #276]	@ (80042b4 <HAL_DMA_Init+0x13c>)
 800419e:	4413      	add	r3, r2
 80041a0:	4a45      	ldr	r2, [pc, #276]	@ (80042b8 <HAL_DMA_Init+0x140>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	009a      	lsls	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a42      	ldr	r2, [pc, #264]	@ (80042bc <HAL_DMA_Init+0x144>)
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80041b4:	e00e      	b.n	80041d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b40      	ldr	r3, [pc, #256]	@ (80042c0 <HAL_DMA_Init+0x148>)
 80041be:	4413      	add	r3, r2
 80041c0:	4a3d      	ldr	r2, [pc, #244]	@ (80042b8 <HAL_DMA_Init+0x140>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	009a      	lsls	r2, r3, #2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a3c      	ldr	r2, [pc, #240]	@ (80042c4 <HAL_DMA_Init+0x14c>)
 80041d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa82 	bl	8004730 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004234:	d102      	bne.n	800423c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004250:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d010      	beq.n	800427c <HAL_DMA_Init+0x104>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d80c      	bhi.n	800427c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 faa2 	bl	80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	e008      	b.n	800428e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40020407 	.word	0x40020407
 80042b4:	bffdfff8 	.word	0xbffdfff8
 80042b8:	cccccccd 	.word	0xcccccccd
 80042bc:	40020000 	.word	0x40020000
 80042c0:	bffdfbf8 	.word	0xbffdfbf8
 80042c4:	40020400 	.word	0x40020400

080042c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_DMA_Start_IT+0x20>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e066      	b.n	80043b6 <HAL_DMA_Start_IT+0xee>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d155      	bne.n	80043a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f9c7 	bl	80046b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 020e 	orr.w	r2, r2, #14
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e00f      	b.n	8004360 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 020a 	orr.w	r2, r2, #10
 800435e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800437c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004394:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e005      	b.n	80043b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
 80043b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d005      	beq.n	80043e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2204      	movs	r2, #4
 80043da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e037      	b.n	8004452 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 020e 	bic.w	r2, r2, #14
 80043f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004400:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	f003 021f 	and.w	r2, r3, #31
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f202 	lsl.w	r2, r1, r2
 8004424:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800442e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004442:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004446:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004450:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d00d      	beq.n	80044a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2204      	movs	r2, #4
 800448c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e047      	b.n	8004534 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020e 	bic.w	r2, r2, #14
 80044b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	f003 021f 	and.w	r2, r3, #31
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004508:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004512:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
    }
  }
  return status;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2204      	movs	r2, #4
 8004560:	409a      	lsls	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d026      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x7a>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d021      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0204 	bic.w	r2, r2, #4
 8004590:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f003 021f 	and.w	r2, r3, #31
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	2104      	movs	r1, #4
 80045a0:	fa01 f202 	lsl.w	r2, r1, r2
 80045a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d071      	beq.n	8004692 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045b6:	e06c      	b.n	8004692 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2202      	movs	r2, #2
 80045c2:	409a      	lsls	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02e      	beq.n	800462a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d029      	beq.n	800462a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 020a 	bic.w	r2, r2, #10
 80045f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004600:	f003 021f 	and.w	r2, r3, #31
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	2102      	movs	r1, #2
 800460a:	fa01 f202 	lsl.w	r2, r1, r2
 800460e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d038      	beq.n	8004692 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004628:	e033      	b.n	8004692 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	2208      	movs	r2, #8
 8004634:	409a      	lsls	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02a      	beq.n	8004694 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d025      	beq.n	8004694 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 020e 	bic.w	r2, r2, #14
 8004656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	f003 021f 	and.w	r2, r3, #31
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f202 	lsl.w	r2, r1, r2
 800466a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004692:	bf00      	nop
 8004694:	bf00      	nop
}
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	f003 021f 	and.w	r2, r3, #31
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d108      	bne.n	8004714 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004712:	e007      	b.n	8004724 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004740:	429a      	cmp	r2, r3
 8004742:	d802      	bhi.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004744:	4b15      	ldr	r3, [pc, #84]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e001      	b.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800474a:	4b15      	ldr	r3, [pc, #84]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800474c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3b08      	subs	r3, #8
 800475a:	4a12      	ldr	r2, [pc, #72]	@ (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	009a      	lsls	r2, r3, #2
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a0b      	ldr	r2, [pc, #44]	@ (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800477a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2201      	movs	r2, #1
 8004784:	409a      	lsls	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40020407 	.word	0x40020407
 800479c:	40020800 	.word	0x40020800
 80047a0:	40020820 	.word	0x40020820
 80047a4:	cccccccd 	.word	0xcccccccd
 80047a8:	40020880 	.word	0x40020880

080047ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a08      	ldr	r2, [pc, #32]	@ (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2201      	movs	r2, #1
 80047da:	409a      	lsls	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	1000823f 	.word	0x1000823f
 80047f0:	40020940 	.word	0x40020940

080047f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004802:	e15a      	b.n	8004aba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2101      	movs	r1, #1
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 814c 	beq.w	8004ab4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d005      	beq.n	8004834 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004830:	2b02      	cmp	r3, #2
 8004832:	d130      	bne.n	8004896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	2203      	movs	r2, #3
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800486a:	2201      	movs	r2, #1
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4013      	ands	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 0201 	and.w	r2, r3, #1
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d017      	beq.n	80048d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2203      	movs	r2, #3
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d123      	bne.n	8004926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	08da      	lsrs	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3208      	adds	r2, #8
 80048e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	220f      	movs	r2, #15
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	08da      	lsrs	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3208      	adds	r2, #8
 8004920:	6939      	ldr	r1, [r7, #16]
 8004922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0203 	and.w	r2, r3, #3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80a6 	beq.w	8004ab4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004968:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad8 <HAL_GPIO_Init+0x2e4>)
 800496a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad8 <HAL_GPIO_Init+0x2e4>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6613      	str	r3, [r2, #96]	@ 0x60
 8004974:	4b58      	ldr	r3, [pc, #352]	@ (8004ad8 <HAL_GPIO_Init+0x2e4>)
 8004976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004980:	4a56      	ldr	r2, [pc, #344]	@ (8004adc <HAL_GPIO_Init+0x2e8>)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	3302      	adds	r3, #2
 8004988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	220f      	movs	r2, #15
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049aa:	d01f      	beq.n	80049ec <HAL_GPIO_Init+0x1f8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a4c      	ldr	r2, [pc, #304]	@ (8004ae0 <HAL_GPIO_Init+0x2ec>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d019      	beq.n	80049e8 <HAL_GPIO_Init+0x1f4>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae4 <HAL_GPIO_Init+0x2f0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_GPIO_Init+0x1f0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a4a      	ldr	r2, [pc, #296]	@ (8004ae8 <HAL_GPIO_Init+0x2f4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00d      	beq.n	80049e0 <HAL_GPIO_Init+0x1ec>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a49      	ldr	r2, [pc, #292]	@ (8004aec <HAL_GPIO_Init+0x2f8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <HAL_GPIO_Init+0x1e8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a48      	ldr	r2, [pc, #288]	@ (8004af0 <HAL_GPIO_Init+0x2fc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d101      	bne.n	80049d8 <HAL_GPIO_Init+0x1e4>
 80049d4:	2305      	movs	r3, #5
 80049d6:	e00a      	b.n	80049ee <HAL_GPIO_Init+0x1fa>
 80049d8:	2306      	movs	r3, #6
 80049da:	e008      	b.n	80049ee <HAL_GPIO_Init+0x1fa>
 80049dc:	2304      	movs	r3, #4
 80049de:	e006      	b.n	80049ee <HAL_GPIO_Init+0x1fa>
 80049e0:	2303      	movs	r3, #3
 80049e2:	e004      	b.n	80049ee <HAL_GPIO_Init+0x1fa>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e002      	b.n	80049ee <HAL_GPIO_Init+0x1fa>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_GPIO_Init+0x1fa>
 80049ec:	2300      	movs	r3, #0
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	f002 0203 	and.w	r2, r2, #3
 80049f4:	0092      	lsls	r2, r2, #2
 80049f6:	4093      	lsls	r3, r2
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049fe:	4937      	ldr	r1, [pc, #220]	@ (8004adc <HAL_GPIO_Init+0x2e8>)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	3302      	adds	r3, #2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a0c:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a30:	4a30      	ldr	r2, [pc, #192]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a36:	4b2f      	ldr	r3, [pc, #188]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4013      	ands	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a5a:	4a26      	ldr	r2, [pc, #152]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a60:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a84:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4013      	ands	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aae:	4a11      	ldr	r2, [pc, #68]	@ (8004af4 <HAL_GPIO_Init+0x300>)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f47f ae9d 	bne.w	8004804 <HAL_GPIO_Init+0x10>
  }
}
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	48000400 	.word	0x48000400
 8004ae4:	48000800 	.word	0x48000800
 8004ae8:	48000c00 	.word	0x48000c00
 8004aec:	48001000 	.word	0x48001000
 8004af0:	48001400 	.word	0x48001400
 8004af4:	40010400 	.word	0x40010400

08004af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	887b      	ldrh	r3, [r7, #2]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	e001      	b.n	8004b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	807b      	strh	r3, [r7, #2]
 8004b34:	4613      	mov	r3, r2
 8004b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b38:	787b      	ldrb	r3, [r7, #1]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b44:	e002      	b.n	8004b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b6e:	4a05      	ldr	r2, [pc, #20]	@ (8004b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f806 	bl	8004b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40010400 	.word	0x40010400

08004b88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e041      	b.n	8004c34 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6852      	ldr	r2, [r2, #4]
 8004bcc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004bd8:	f7fd fb90 	bl	80022fc <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bde:	e00f      	b.n	8004c00 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004be0:	f7fd fb8c 	bl	80022fc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b31      	cmp	r3, #49	@ 0x31
 8004bec:	d908      	bls.n	8004c00 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e019      	b.n	8004c34 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e8      	bne.n	8004be0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d005      	beq.n	8004c28 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68d2      	ldr	r2, [r2, #12]
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	e004      	b.n	8004c32 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d141      	bne.n	8004cee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c76:	d131      	bne.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c78:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c7e:	4a46      	ldr	r2, [pc, #280]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c88:	4b43      	ldr	r3, [pc, #268]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c90:	4a41      	ldr	r2, [pc, #260]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c98:	4b40      	ldr	r3, [pc, #256]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2232      	movs	r2, #50	@ 0x32
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8004da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	0c9b      	lsrs	r3, r3, #18
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cae:	e002      	b.n	8004cb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb6:	4b38      	ldr	r3, [pc, #224]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc2:	d102      	bne.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f2      	bne.n	8004cb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cca:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd6:	d158      	bne.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e057      	b.n	8004d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cec:	e04d      	b.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf4:	d141      	bne.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cf6:	4b28      	ldr	r3, [pc, #160]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d02:	d131      	bne.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d04:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d0a:	4a23      	ldr	r2, [pc, #140]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d14:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2232      	movs	r2, #50	@ 0x32
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	0c9b      	lsrs	r3, r3, #18
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d3a:	e002      	b.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d42:	4b15      	ldr	r3, [pc, #84]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4e:	d102      	bne.n	8004d56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f2      	bne.n	8004d3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d56:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d62:	d112      	bne.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e011      	b.n	8004d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d78:	e007      	b.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d82:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	20000004 	.word	0x20000004
 8004da0:	431bde83 	.word	0x431bde83

08004da4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4a04      	ldr	r2, [pc, #16]	@ (8004dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004db2:	6093      	str	r3, [r2, #8]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40007000 	.word	0x40007000

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e2fe      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d075      	beq.n	8004ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de2:	4b97      	ldr	r3, [pc, #604]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dec:	4b94      	ldr	r3, [pc, #592]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d102      	bne.n	8004e02 <HAL_RCC_OscConfig+0x3e>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d002      	beq.n	8004e08 <HAL_RCC_OscConfig+0x44>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	4b8d      	ldr	r3, [pc, #564]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05b      	beq.n	8004ecc <HAL_RCC_OscConfig+0x108>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d157      	bne.n	8004ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e2d9      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e28:	d106      	bne.n	8004e38 <HAL_RCC_OscConfig+0x74>
 8004e2a:	4b85      	ldr	r3, [pc, #532]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a84      	ldr	r2, [pc, #528]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e01d      	b.n	8004e74 <HAL_RCC_OscConfig+0xb0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x98>
 8004e42:	4b7f      	ldr	r3, [pc, #508]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a7e      	ldr	r2, [pc, #504]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a7b      	ldr	r2, [pc, #492]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCC_OscConfig+0xb0>
 8004e5c:	4b78      	ldr	r3, [pc, #480]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a77      	ldr	r2, [pc, #476]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4b75      	ldr	r3, [pc, #468]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a74      	ldr	r2, [pc, #464]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d013      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fa3e 	bl	80022fc <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fd fa3a 	bl	80022fc <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	@ 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e29e      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e96:	4b6a      	ldr	r3, [pc, #424]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0xc0>
 8004ea2:	e014      	b.n	8004ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fa2a 	bl	80022fc <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fd fa26 	bl	80022fc <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	@ 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e28a      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ebe:	4b60      	ldr	r3, [pc, #384]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0xe8>
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d075      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eda:	4b59      	ldr	r3, [pc, #356]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee4:	4b56      	ldr	r3, [pc, #344]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b0c      	cmp	r3, #12
 8004ef2:	d102      	bne.n	8004efa <HAL_RCC_OscConfig+0x136>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d002      	beq.n	8004f00 <HAL_RCC_OscConfig+0x13c>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d11f      	bne.n	8004f40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f00:	4b4f      	ldr	r3, [pc, #316]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_OscConfig+0x154>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e25d      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f18:	4b49      	ldr	r3, [pc, #292]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	4946      	ldr	r1, [pc, #280]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f2c:	4b45      	ldr	r3, [pc, #276]	@ (8005044 <HAL_RCC_OscConfig+0x280>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fd f997 	bl	8002264 <HAL_InitTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d043      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e249      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d023      	beq.n	8004f90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f48:	4b3d      	ldr	r3, [pc, #244]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fd f9d2 	bl	80022fc <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5c:	f7fd f9ce 	bl	80022fc <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e232      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f6e:	4b34      	ldr	r3, [pc, #208]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7a:	4b31      	ldr	r3, [pc, #196]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	492d      	ldr	r1, [pc, #180]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
 8004f8e:	e01a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f90:	4b2b      	ldr	r3, [pc, #172]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2a      	ldr	r2, [pc, #168]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fd f9ae 	bl	80022fc <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa4:	f7fd f9aa 	bl	80022fc <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e20e      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fb6:	4b22      	ldr	r3, [pc, #136]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x1e0>
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d041      	beq.n	8005056 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01c      	beq.n	8005014 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fda:	4b19      	ldr	r3, [pc, #100]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe0:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fd f987 	bl	80022fc <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fd f983 	bl	80022fc <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e1e7      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005004:	4b0e      	ldr	r3, [pc, #56]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8005006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ef      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x22e>
 8005012:	e020      	b.n	8005056 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005014:	4b0a      	ldr	r3, [pc, #40]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 8005016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800501a:	4a09      	ldr	r2, [pc, #36]	@ (8005040 <HAL_RCC_OscConfig+0x27c>)
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fd f96a 	bl	80022fc <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800502a:	e00d      	b.n	8005048 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502c:	f7fd f966 	bl	80022fc <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d906      	bls.n	8005048 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e1ca      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005048:	4b8c      	ldr	r3, [pc, #560]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800504a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1ea      	bne.n	800502c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80a6 	beq.w	80051b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005064:	2300      	movs	r3, #0
 8005066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005068:	4b84      	ldr	r3, [pc, #528]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_OscConfig+0x2b4>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x2b6>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	4b7f      	ldr	r3, [pc, #508]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005082:	4a7e      	ldr	r2, [pc, #504]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005088:	6593      	str	r3, [r2, #88]	@ 0x58
 800508a:	4b7c      	ldr	r3, [pc, #496]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005096:	2301      	movs	r3, #1
 8005098:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800509a:	4b79      	ldr	r3, [pc, #484]	@ (8005280 <HAL_RCC_OscConfig+0x4bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d118      	bne.n	80050d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050a6:	4b76      	ldr	r3, [pc, #472]	@ (8005280 <HAL_RCC_OscConfig+0x4bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a75      	ldr	r2, [pc, #468]	@ (8005280 <HAL_RCC_OscConfig+0x4bc>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b2:	f7fd f923 	bl	80022fc <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ba:	f7fd f91f 	bl	80022fc <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e183      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005280 <HAL_RCC_OscConfig+0x4bc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d108      	bne.n	80050f2 <HAL_RCC_OscConfig+0x32e>
 80050e0:	4b66      	ldr	r3, [pc, #408]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e6:	4a65      	ldr	r2, [pc, #404]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050f0:	e024      	b.n	800513c <HAL_RCC_OscConfig+0x378>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d110      	bne.n	800511c <HAL_RCC_OscConfig+0x358>
 80050fa:	4b60      	ldr	r3, [pc, #384]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005100:	4a5e      	ldr	r2, [pc, #376]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800510a:	4b5c      	ldr	r3, [pc, #368]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005110:	4a5a      	ldr	r2, [pc, #360]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800511a:	e00f      	b.n	800513c <HAL_RCC_OscConfig+0x378>
 800511c:	4b57      	ldr	r3, [pc, #348]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005122:	4a56      	ldr	r2, [pc, #344]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800512c:	4b53      	ldr	r3, [pc, #332]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005132:	4a52      	ldr	r2, [pc, #328]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d016      	beq.n	8005172 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fd f8da 	bl	80022fc <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514a:	e00a      	b.n	8005162 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514c:	f7fd f8d6 	bl	80022fc <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e138      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005162:	4b46      	ldr	r3, [pc, #280]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ed      	beq.n	800514c <HAL_RCC_OscConfig+0x388>
 8005170:	e015      	b.n	800519e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fd f8c3 	bl	80022fc <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005178:	e00a      	b.n	8005190 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fd f8bf 	bl	80022fc <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e121      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005190:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ed      	bne.n	800517a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800519e:	7ffb      	ldrb	r3, [r7, #31]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d105      	bne.n	80051b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80051a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a8:	4a34      	ldr	r2, [pc, #208]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d03c      	beq.n	8005236 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01c      	beq.n	80051fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051c4:	4b2d      	ldr	r3, [pc, #180]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80051c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051ca:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fd f892 	bl	80022fc <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051dc:	f7fd f88e 	bl	80022fc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0f2      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ee:	4b23      	ldr	r3, [pc, #140]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 80051f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <HAL_RCC_OscConfig+0x418>
 80051fc:	e01b      	b.n	8005236 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051fe:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005204:	4a1d      	ldr	r2, [pc, #116]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fd f875 	bl	80022fc <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005216:	f7fd f871 	bl	80022fc <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e0d5      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005228:	4b14      	ldr	r3, [pc, #80]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800522a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1ef      	bne.n	8005216 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80c9 	beq.w	80053d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005240:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b0c      	cmp	r3, #12
 800524a:	f000 8083 	beq.w	8005354 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d15e      	bne.n	8005314 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b09      	ldr	r3, [pc, #36]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a08      	ldr	r2, [pc, #32]	@ (800527c <HAL_RCC_OscConfig+0x4b8>)
 800525c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005262:	f7fd f84b 	bl	80022fc <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005268:	e00c      	b.n	8005284 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526a:	f7fd f847 	bl	80022fc <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d905      	bls.n	8005284 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e0ab      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
 800527c:	40021000 	.word	0x40021000
 8005280:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005284:	4b55      	ldr	r3, [pc, #340]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ec      	bne.n	800526a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005290:	4b52      	ldr	r3, [pc, #328]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	4b52      	ldr	r3, [pc, #328]	@ (80053e0 <HAL_RCC_OscConfig+0x61c>)
 8005296:	4013      	ands	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6a11      	ldr	r1, [r2, #32]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052a0:	3a01      	subs	r2, #1
 80052a2:	0112      	lsls	r2, r2, #4
 80052a4:	4311      	orrs	r1, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80052aa:	0212      	lsls	r2, r2, #8
 80052ac:	4311      	orrs	r1, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80052b2:	0852      	lsrs	r2, r2, #1
 80052b4:	3a01      	subs	r2, #1
 80052b6:	0552      	lsls	r2, r2, #21
 80052b8:	4311      	orrs	r1, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052be:	0852      	lsrs	r2, r2, #1
 80052c0:	3a01      	subs	r2, #1
 80052c2:	0652      	lsls	r2, r2, #25
 80052c4:	4311      	orrs	r1, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052ca:	06d2      	lsls	r2, r2, #27
 80052cc:	430a      	orrs	r2, r1
 80052ce:	4943      	ldr	r1, [pc, #268]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b41      	ldr	r3, [pc, #260]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a40      	ldr	r2, [pc, #256]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052e0:	4b3e      	ldr	r3, [pc, #248]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a3d      	ldr	r2, [pc, #244]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 80052e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fd f806 	bl	80022fc <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fd f802 	bl	80022fc <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e066      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	4b35      	ldr	r3, [pc, #212]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x530>
 8005312:	e05e      	b.n	80053d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005314:	4b31      	ldr	r3, [pc, #196]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a30      	ldr	r2, [pc, #192]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 800531a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800531e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fc ffec 	bl	80022fc <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005328:	f7fc ffe8 	bl	80022fc <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e04c      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800533a:	4b28      	ldr	r3, [pc, #160]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005346:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	4924      	ldr	r1, [pc, #144]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <HAL_RCC_OscConfig+0x620>)
 800534e:	4013      	ands	r3, r2
 8005350:	60cb      	str	r3, [r1, #12]
 8005352:	e03e      	b.n	80053d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e039      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005360:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <HAL_RCC_OscConfig+0x618>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 0203 	and.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	429a      	cmp	r2, r3
 8005372:	d12c      	bne.n	80053ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	3b01      	subs	r3, #1
 8005380:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005382:	429a      	cmp	r2, r3
 8005384:	d123      	bne.n	80053ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d11b      	bne.n	80053ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d113      	bne.n	80053ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	3b01      	subs	r3, #1
 80053b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d109      	bne.n	80053ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	3b01      	subs	r3, #1
 80053c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d001      	beq.n	80053d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	019f800c 	.word	0x019f800c
 80053e4:	feeefffc 	.word	0xfeeefffc

080053e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e11e      	b.n	800563e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005400:	4b91      	ldr	r3, [pc, #580]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d910      	bls.n	8005430 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b8e      	ldr	r3, [pc, #568]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 020f 	bic.w	r2, r3, #15
 8005416:	498c      	ldr	r1, [pc, #560]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541e:	4b8a      	ldr	r3, [pc, #552]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e106      	b.n	800563e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d073      	beq.n	8005524 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d129      	bne.n	8005498 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005444:	4b81      	ldr	r3, [pc, #516]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0f4      	b.n	800563e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005454:	f000 f99e 	bl	8005794 <RCC_GetSysClockFreqFromPLLSource>
 8005458:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4a7c      	ldr	r2, [pc, #496]	@ (8005650 <HAL_RCC_ClockConfig+0x268>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d93f      	bls.n	80054e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005462:	4b7a      	ldr	r3, [pc, #488]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005476:	2b00      	cmp	r3, #0
 8005478:	d033      	beq.n	80054e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800547e:	2b00      	cmp	r3, #0
 8005480:	d12f      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005482:	4b72      	ldr	r3, [pc, #456]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800548a:	4a70      	ldr	r2, [pc, #448]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 800548c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005490:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e024      	b.n	80054e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a0:	4b6a      	ldr	r3, [pc, #424]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0c6      	b.n	800563e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054b0:	4b66      	ldr	r3, [pc, #408]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0be      	b.n	800563e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054c0:	f000 f8ce 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4a61      	ldr	r2, [pc, #388]	@ (8005650 <HAL_RCC_ClockConfig+0x268>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d909      	bls.n	80054e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054ce:	4b5f      	ldr	r3, [pc, #380]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d6:	4a5d      	ldr	r2, [pc, #372]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80054d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054de:	2380      	movs	r3, #128	@ 0x80
 80054e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054e2:	4b5a      	ldr	r3, [pc, #360]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f023 0203 	bic.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4957      	ldr	r1, [pc, #348]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f4:	f7fc ff02 	bl	80022fc <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fc:	f7fc fefe 	bl	80022fc <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e095      	b.n	800563e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005512:	4b4e      	ldr	r3, [pc, #312]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 020c 	and.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	429a      	cmp	r2, r3
 8005522:	d1eb      	bne.n	80054fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d023      	beq.n	8005578 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800553c:	4b43      	ldr	r3, [pc, #268]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4a42      	ldr	r2, [pc, #264]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005542:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005546:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005554:	4b3d      	ldr	r3, [pc, #244]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800555c:	4a3b      	ldr	r2, [pc, #236]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 800555e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005562:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b39      	ldr	r3, [pc, #228]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4936      	ldr	r1, [pc, #216]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
 8005576:	e008      	b.n	800558a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2b80      	cmp	r3, #128	@ 0x80
 800557c:	d105      	bne.n	800558a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800557e:	4b33      	ldr	r3, [pc, #204]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	4a32      	ldr	r2, [pc, #200]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005584:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005588:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800558a:	4b2f      	ldr	r3, [pc, #188]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d21d      	bcs.n	80055d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005598:	4b2b      	ldr	r3, [pc, #172]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 020f 	bic.w	r2, r3, #15
 80055a0:	4929      	ldr	r1, [pc, #164]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055a8:	f7fc fea8 	bl	80022fc <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	e00a      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b0:	f7fc fea4 	bl	80022fc <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e03b      	b.n	800563e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c6:	4b20      	ldr	r3, [pc, #128]	@ (8005648 <HAL_RCC_ClockConfig+0x260>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d1ed      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4917      	ldr	r1, [pc, #92]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055fe:	4b13      	ldr	r3, [pc, #76]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	490f      	ldr	r1, [pc, #60]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005612:	f000 f825 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 8005616:	4602      	mov	r2, r0
 8005618:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <HAL_RCC_ClockConfig+0x264>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	490c      	ldr	r1, [pc, #48]	@ (8005654 <HAL_RCC_ClockConfig+0x26c>)
 8005624:	5ccb      	ldrb	r3, [r1, r3]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	fa22 f303 	lsr.w	r3, r2, r3
 800562e:	4a0a      	ldr	r2, [pc, #40]	@ (8005658 <HAL_RCC_ClockConfig+0x270>)
 8005630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005632:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <HAL_RCC_ClockConfig+0x274>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fc fe14 	bl	8002264 <HAL_InitTick>
 800563c:	4603      	mov	r3, r0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40022000 	.word	0x40022000
 800564c:	40021000 	.word	0x40021000
 8005650:	04c4b400 	.word	0x04c4b400
 8005654:	08018eb4 	.word	0x08018eb4
 8005658:	20000004 	.word	0x20000004
 800565c:	20000008 	.word	0x20000008

08005660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005666:	4b2c      	ldr	r3, [pc, #176]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	2b04      	cmp	r3, #4
 8005670:	d102      	bne.n	8005678 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005672:	4b2a      	ldr	r3, [pc, #168]	@ (800571c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	e047      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005678:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b08      	cmp	r3, #8
 8005682:	d102      	bne.n	800568a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005684:	4b26      	ldr	r3, [pc, #152]	@ (8005720 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	e03e      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800568a:	4b23      	ldr	r3, [pc, #140]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d136      	bne.n	8005704 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005696:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	3301      	adds	r3, #1
 80056ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d10c      	bne.n	80056ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	4a16      	ldr	r2, [pc, #88]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056be:	68d2      	ldr	r2, [r2, #12]
 80056c0:	0a12      	lsrs	r2, r2, #8
 80056c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056c6:	fb02 f303 	mul.w	r3, r2, r3
 80056ca:	617b      	str	r3, [r7, #20]
      break;
 80056cc:	e00c      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056ce:	4a13      	ldr	r2, [pc, #76]	@ (800571c <HAL_RCC_GetSysClockFreq+0xbc>)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	4a10      	ldr	r2, [pc, #64]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056d8:	68d2      	ldr	r2, [r2, #12]
 80056da:	0a12      	lsrs	r2, r2, #8
 80056dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
      break;
 80056e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	0e5b      	lsrs	r3, r3, #25
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	3301      	adds	r3, #1
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	e001      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005708:	693b      	ldr	r3, [r7, #16]
}
 800570a:	4618      	mov	r0, r3
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000
 800571c:	00f42400 	.word	0x00f42400
 8005720:	016e3600 	.word	0x016e3600

08005724 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005728:	4b03      	ldr	r3, [pc, #12]	@ (8005738 <HAL_RCC_GetHCLKFreq+0x14>)
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000004 	.word	0x20000004

0800573c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005740:	f7ff fff0 	bl	8005724 <HAL_RCC_GetHCLKFreq>
 8005744:	4602      	mov	r2, r0
 8005746:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	4904      	ldr	r1, [pc, #16]	@ (8005764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005752:	5ccb      	ldrb	r3, [r1, r3]
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000
 8005764:	08018ec4 	.word	0x08018ec4

08005768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800576c:	f7ff ffda 	bl	8005724 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b06      	ldr	r3, [pc, #24]	@ (800578c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0adb      	lsrs	r3, r3, #11
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4904      	ldr	r1, [pc, #16]	@ (8005790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	08018ec4 	.word	0x08018ec4

08005794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800579a:	4b1e      	ldr	r3, [pc, #120]	@ (8005814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d10c      	bne.n	80057d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057b8:	4a17      	ldr	r2, [pc, #92]	@ (8005818 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	4a14      	ldr	r2, [pc, #80]	@ (8005814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057c2:	68d2      	ldr	r2, [r2, #12]
 80057c4:	0a12      	lsrs	r2, r2, #8
 80057c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	617b      	str	r3, [r7, #20]
    break;
 80057d0:	e00c      	b.n	80057ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d2:	4a12      	ldr	r2, [pc, #72]	@ (800581c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057da:	4a0e      	ldr	r2, [pc, #56]	@ (8005814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057dc:	68d2      	ldr	r2, [r2, #12]
 80057de:	0a12      	lsrs	r2, r2, #8
 80057e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	617b      	str	r3, [r7, #20]
    break;
 80057ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ec:	4b09      	ldr	r3, [pc, #36]	@ (8005814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	0e5b      	lsrs	r3, r3, #25
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	3301      	adds	r3, #1
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005806:	687b      	ldr	r3, [r7, #4]
}
 8005808:	4618      	mov	r0, r3
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40021000 	.word	0x40021000
 8005818:	016e3600 	.word	0x016e3600
 800581c:	00f42400 	.word	0x00f42400

08005820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005828:	2300      	movs	r3, #0
 800582a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800582c:	2300      	movs	r3, #0
 800582e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8098 	beq.w	800596e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800583e:	2300      	movs	r3, #0
 8005840:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005842:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	4b40      	ldr	r3, [pc, #256]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	4a3f      	ldr	r2, [pc, #252]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005858:	6593      	str	r3, [r2, #88]	@ 0x58
 800585a:	4b3d      	ldr	r3, [pc, #244]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005866:	2301      	movs	r3, #1
 8005868:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586a:	4b3a      	ldr	r3, [pc, #232]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a39      	ldr	r2, [pc, #228]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005876:	f7fc fd41 	bl	80022fc <HAL_GetTick>
 800587a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800587c:	e009      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587e:	f7fc fd3d 	bl	80022fc <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d902      	bls.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	74fb      	strb	r3, [r7, #19]
        break;
 8005890:	e005      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005892:	4b30      	ldr	r3, [pc, #192]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ef      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800589e:	7cfb      	ldrb	r3, [r7, #19]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d159      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d01e      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d019      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058c0:	4b23      	ldr	r3, [pc, #140]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058cc:	4b20      	ldr	r3, [pc, #128]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058ec:	4a18      	ldr	r2, [pc, #96]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fe:	f7fc fcfd 	bl	80022fc <HAL_GetTick>
 8005902:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005904:	e00b      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fc fcf9 	bl	80022fc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d902      	bls.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	74fb      	strb	r3, [r7, #19]
            break;
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0ec      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005932:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005938:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005940:	4903      	ldr	r1, [pc, #12]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005948:	e008      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	74bb      	strb	r3, [r7, #18]
 800594e:	e005      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800595c:	7c7b      	ldrb	r3, [r7, #17]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d105      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005962:	4ba7      	ldr	r3, [pc, #668]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	4aa6      	ldr	r2, [pc, #664]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800596c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800597a:	4ba1      	ldr	r3, [pc, #644]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f023 0203 	bic.w	r2, r3, #3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	499d      	ldr	r1, [pc, #628]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800599c:	4b98      	ldr	r3, [pc, #608]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a2:	f023 020c 	bic.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4995      	ldr	r1, [pc, #596]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059be:	4b90      	ldr	r3, [pc, #576]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	498c      	ldr	r1, [pc, #560]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059e0:	4b87      	ldr	r3, [pc, #540]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	4984      	ldr	r1, [pc, #528]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a02:	4b7f      	ldr	r3, [pc, #508]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	497b      	ldr	r1, [pc, #492]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a24:	4b76      	ldr	r3, [pc, #472]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	4973      	ldr	r1, [pc, #460]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a46:	4b6e      	ldr	r3, [pc, #440]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	496a      	ldr	r1, [pc, #424]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a68:	4b65      	ldr	r3, [pc, #404]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4962      	ldr	r1, [pc, #392]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	4959      	ldr	r1, [pc, #356]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aac:	4b54      	ldr	r3, [pc, #336]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ab2:	f023 0203 	bic.w	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	4951      	ldr	r1, [pc, #324]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ace:	4b4c      	ldr	r3, [pc, #304]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	4948      	ldr	r1, [pc, #288]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d015      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005af0:	4b43      	ldr	r3, [pc, #268]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	4940      	ldr	r1, [pc, #256]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b0e:	d105      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b10:	4b3b      	ldr	r3, [pc, #236]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4a3a      	ldr	r2, [pc, #232]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b1a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d015      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b28:	4b35      	ldr	r3, [pc, #212]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b36:	4932      	ldr	r1, [pc, #200]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b46:	d105      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b48:	4b2d      	ldr	r3, [pc, #180]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b52:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b60:	4b27      	ldr	r3, [pc, #156]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	4924      	ldr	r1, [pc, #144]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b80:	4b1f      	ldr	r3, [pc, #124]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a1e      	ldr	r2, [pc, #120]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b98:	4b19      	ldr	r3, [pc, #100]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba6:	4916      	ldr	r1, [pc, #88]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb8:	4b11      	ldr	r3, [pc, #68]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a10      	ldr	r2, [pc, #64]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	4908      	ldr	r1, [pc, #32]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bee:	d109      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf0:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a02      	ldr	r2, [pc, #8]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bfa:	60d3      	str	r3, [r2, #12]
 8005bfc:	e002      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d015      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c10:	4b29      	ldr	r3, [pc, #164]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	4926      	ldr	r1, [pc, #152]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c2e:	d105      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c30:	4b21      	ldr	r3, [pc, #132]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	4a20      	ldr	r2, [pc, #128]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d015      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c56:	4918      	ldr	r1, [pc, #96]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c66:	d105      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4a12      	ldr	r2, [pc, #72]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c72:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d015      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c80:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8e:	490a      	ldr	r1, [pc, #40]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c9e:	d105      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005caa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005cac:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000

08005cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e049      	b.n	8005d62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fc f950 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f000 fb3c 	bl	8006378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e054      	b.n	8005e2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a26      	ldr	r2, [pc, #152]	@ (8005e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dae:	d01d      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a22      	ldr	r2, [pc, #136]	@ (8005e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a21      	ldr	r2, [pc, #132]	@ (8005e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e4c <HAL_TIM_Base_Start_IT+0xe0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e50 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e54 <HAL_TIM_Base_Start_IT+0xe8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d115      	bne.n	8005e18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	4b19      	ldr	r3, [pc, #100]	@ (8005e58 <HAL_TIM_Base_Start_IT+0xec>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d015      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0xbe>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e04:	d011      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	e008      	b.n	8005e2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e000      	b.n	8005e2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40013400 	.word	0x40013400
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40015000 	.word	0x40015000
 8005e58:	00010007 	.word	0x00010007

08005e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0202 	mvn.w	r2, #2
 8005e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa48 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa3a 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa4b 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0204 	mvn.w	r2, #4
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa22 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa14 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa25 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0208 	mvn.w	r2, #8
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9fc 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9ee 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f9ff 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0210 	mvn.w	r2, #16
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9d6 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9c8 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f9d9 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0201 	mvn.w	r2, #1
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fb fca2 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fbb1 	bl	8006758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00c      	beq.n	800601a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fba9 	bl	800676c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00c      	beq.n	800603e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f993 	bl	8006364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0220 	mvn.w	r2, #32
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fb71 	bl	8006744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb7d 	bl	8006780 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fb75 	bl	8006794 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fb6d 	bl	80067a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00c      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb65 	bl	80067bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIM_ConfigClockSource+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e0f6      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x20a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006136:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800613a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a6f      	ldr	r2, [pc, #444]	@ (8006310 <HAL_TIM_ConfigClockSource+0x214>)
 8006152:	4293      	cmp	r3, r2
 8006154:	f000 80c1 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006158:	4a6d      	ldr	r2, [pc, #436]	@ (8006310 <HAL_TIM_ConfigClockSource+0x214>)
 800615a:	4293      	cmp	r3, r2
 800615c:	f200 80c6 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 8006160:	4a6c      	ldr	r2, [pc, #432]	@ (8006314 <HAL_TIM_ConfigClockSource+0x218>)
 8006162:	4293      	cmp	r3, r2
 8006164:	f000 80b9 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006168:	4a6a      	ldr	r2, [pc, #424]	@ (8006314 <HAL_TIM_ConfigClockSource+0x218>)
 800616a:	4293      	cmp	r3, r2
 800616c:	f200 80be 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 8006170:	4a69      	ldr	r2, [pc, #420]	@ (8006318 <HAL_TIM_ConfigClockSource+0x21c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	f000 80b1 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006178:	4a67      	ldr	r2, [pc, #412]	@ (8006318 <HAL_TIM_ConfigClockSource+0x21c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	f200 80b6 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 8006180:	4a66      	ldr	r2, [pc, #408]	@ (800631c <HAL_TIM_ConfigClockSource+0x220>)
 8006182:	4293      	cmp	r3, r2
 8006184:	f000 80a9 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006188:	4a64      	ldr	r2, [pc, #400]	@ (800631c <HAL_TIM_ConfigClockSource+0x220>)
 800618a:	4293      	cmp	r3, r2
 800618c:	f200 80ae 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 8006190:	4a63      	ldr	r2, [pc, #396]	@ (8006320 <HAL_TIM_ConfigClockSource+0x224>)
 8006192:	4293      	cmp	r3, r2
 8006194:	f000 80a1 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006198:	4a61      	ldr	r2, [pc, #388]	@ (8006320 <HAL_TIM_ConfigClockSource+0x224>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f200 80a6 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061a0:	4a60      	ldr	r2, [pc, #384]	@ (8006324 <HAL_TIM_ConfigClockSource+0x228>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f000 8099 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 80061a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006324 <HAL_TIM_ConfigClockSource+0x228>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	f200 809e 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061b4:	f000 8091 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 80061b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061bc:	f200 8096 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c4:	f000 8089 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1de>
 80061c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061cc:	f200 808e 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061d4:	d03e      	beq.n	8006254 <HAL_TIM_ConfigClockSource+0x158>
 80061d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061da:	f200 8087 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e2:	f000 8086 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1f6>
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ea:	d87f      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061ec:	2b70      	cmp	r3, #112	@ 0x70
 80061ee:	d01a      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x12a>
 80061f0:	2b70      	cmp	r3, #112	@ 0x70
 80061f2:	d87b      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061f4:	2b60      	cmp	r3, #96	@ 0x60
 80061f6:	d050      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x19e>
 80061f8:	2b60      	cmp	r3, #96	@ 0x60
 80061fa:	d877      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 80061fc:	2b50      	cmp	r3, #80	@ 0x50
 80061fe:	d03c      	beq.n	800627a <HAL_TIM_ConfigClockSource+0x17e>
 8006200:	2b50      	cmp	r3, #80	@ 0x50
 8006202:	d873      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 8006204:	2b40      	cmp	r3, #64	@ 0x40
 8006206:	d058      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x1be>
 8006208:	2b40      	cmp	r3, #64	@ 0x40
 800620a:	d86f      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 800620c:	2b30      	cmp	r3, #48	@ 0x30
 800620e:	d064      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006210:	2b30      	cmp	r3, #48	@ 0x30
 8006212:	d86b      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 8006214:	2b20      	cmp	r3, #32
 8006216:	d060      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006218:	2b20      	cmp	r3, #32
 800621a:	d867      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d05c      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006220:	2b10      	cmp	r3, #16
 8006222:	d05a      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1de>
 8006224:	e062      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006236:	f000 f9cf 	bl	80065d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	609a      	str	r2, [r3, #8]
      break;
 8006252:	e04f      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006264:	f000 f9b8 	bl	80065d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006276:	609a      	str	r2, [r3, #8]
      break;
 8006278:	e03c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006286:	461a      	mov	r2, r3
 8006288:	f000 f92a 	bl	80064e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2150      	movs	r1, #80	@ 0x50
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f983 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 8006298:	e02c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062a6:	461a      	mov	r2, r3
 80062a8:	f000 f949 	bl	800653e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2160      	movs	r1, #96	@ 0x60
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f973 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 80062b8:	e01c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 f90a 	bl	80064e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2140      	movs	r1, #64	@ 0x40
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f963 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 80062d8:	e00c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 f95a 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 80062ea:	e003      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      break;
 80062f0:	e000      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80062f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006304:	7bfb      	ldrb	r3, [r7, #15]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	00100070 	.word	0x00100070
 8006314:	00100060 	.word	0x00100060
 8006318:	00100050 	.word	0x00100050
 800631c:	00100040 	.word	0x00100040
 8006320:	00100030 	.word	0x00100030
 8006324:	00100020 	.word	0x00100020

08006328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a4c      	ldr	r2, [pc, #304]	@ (80064bc <TIM_Base_SetConfig+0x144>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d017      	beq.n	80063c0 <TIM_Base_SetConfig+0x48>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006396:	d013      	beq.n	80063c0 <TIM_Base_SetConfig+0x48>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a49      	ldr	r2, [pc, #292]	@ (80064c0 <TIM_Base_SetConfig+0x148>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00f      	beq.n	80063c0 <TIM_Base_SetConfig+0x48>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a48      	ldr	r2, [pc, #288]	@ (80064c4 <TIM_Base_SetConfig+0x14c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_Base_SetConfig+0x48>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a47      	ldr	r2, [pc, #284]	@ (80064c8 <TIM_Base_SetConfig+0x150>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_Base_SetConfig+0x48>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a46      	ldr	r2, [pc, #280]	@ (80064cc <TIM_Base_SetConfig+0x154>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_Base_SetConfig+0x48>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a45      	ldr	r2, [pc, #276]	@ (80064d0 <TIM_Base_SetConfig+0x158>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d108      	bne.n	80063d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a39      	ldr	r2, [pc, #228]	@ (80064bc <TIM_Base_SetConfig+0x144>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d023      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e0:	d01f      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a36      	ldr	r2, [pc, #216]	@ (80064c0 <TIM_Base_SetConfig+0x148>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01b      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a35      	ldr	r2, [pc, #212]	@ (80064c4 <TIM_Base_SetConfig+0x14c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a34      	ldr	r2, [pc, #208]	@ (80064c8 <TIM_Base_SetConfig+0x150>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a33      	ldr	r2, [pc, #204]	@ (80064cc <TIM_Base_SetConfig+0x154>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a33      	ldr	r2, [pc, #204]	@ (80064d4 <TIM_Base_SetConfig+0x15c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a32      	ldr	r2, [pc, #200]	@ (80064d8 <TIM_Base_SetConfig+0x160>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a31      	ldr	r2, [pc, #196]	@ (80064dc <TIM_Base_SetConfig+0x164>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0xaa>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2c      	ldr	r2, [pc, #176]	@ (80064d0 <TIM_Base_SetConfig+0x158>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a18      	ldr	r2, [pc, #96]	@ (80064bc <TIM_Base_SetConfig+0x144>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <TIM_Base_SetConfig+0x110>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a1a      	ldr	r2, [pc, #104]	@ (80064cc <TIM_Base_SetConfig+0x154>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0x110>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a1a      	ldr	r2, [pc, #104]	@ (80064d4 <TIM_Base_SetConfig+0x15c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0x110>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a19      	ldr	r2, [pc, #100]	@ (80064d8 <TIM_Base_SetConfig+0x160>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0x110>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <TIM_Base_SetConfig+0x164>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0x110>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <TIM_Base_SetConfig+0x158>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d103      	bne.n	8006490 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d105      	bne.n	80064ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	611a      	str	r2, [r3, #16]
  }
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40015000 	.word	0x40015000
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800

080064e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f023 0201 	bic.w	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800650a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f023 030a 	bic.w	r3, r3, #10
 800651c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653e:	b480      	push	{r7}
 8006540:	b087      	sub	sp, #28
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f023 0210 	bic.w	r2, r3, #16
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	031b      	lsls	r3, r3, #12
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800657a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	f043 0307 	orr.w	r3, r3, #7
 80065c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]
}
 80065cc:	bf00      	nop
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	021a      	lsls	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	609a      	str	r2, [r3, #8]
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800662c:	2302      	movs	r3, #2
 800662e:	e074      	b.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a34      	ldr	r2, [pc, #208]	@ (8006728 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d009      	beq.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a33      	ldr	r2, [pc, #204]	@ (800672c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d004      	beq.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a31      	ldr	r2, [pc, #196]	@ (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d108      	bne.n	8006680 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006674:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800668a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a21      	ldr	r2, [pc, #132]	@ (8006728 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b0:	d01d      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a15      	ldr	r2, [pc, #84]	@ (800672c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a11      	ldr	r2, [pc, #68]	@ (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10c      	bne.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40012c00 	.word	0x40012c00
 800672c:	40013400 	.word	0x40013400
 8006730:	40015000 	.word	0x40015000
 8006734:	40000400 	.word	0x40000400
 8006738:	40000800 	.word	0x40000800
 800673c:	40000c00 	.word	0x40000c00
 8006740:	40014000 	.word	0x40014000

08006744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e042      	b.n	8006868 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fb fc35 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2224      	movs	r2, #36	@ 0x24
 80067fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 f806 	bl	800782c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fd07 	bl	8007234 <UART_SetConfig>
 8006826:	4603      	mov	r3, r0
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e01b      	b.n	8006868 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800683e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800684e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f885 	bl	8007970 <UART_CheckIdleState>
 8006866:	4603      	mov	r3, r0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	@ 0x28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006884:	2b20      	cmp	r3, #32
 8006886:	d167      	bne.n	8006958 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_UART_Transmit_DMA+0x24>
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e060      	b.n	800695a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2221      	movs	r2, #33	@ 0x21
 80068ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d028      	beq.n	8006918 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068ca:	4a26      	ldr	r2, [pc, #152]	@ (8006964 <HAL_UART_Transmit_DMA+0xf4>)
 80068cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068d2:	4a25      	ldr	r2, [pc, #148]	@ (8006968 <HAL_UART_Transmit_DMA+0xf8>)
 80068d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068da:	4a24      	ldr	r2, [pc, #144]	@ (800696c <HAL_UART_Transmit_DMA+0xfc>)
 80068dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068e2:	2200      	movs	r2, #0
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ee:	4619      	mov	r1, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3328      	adds	r3, #40	@ 0x28
 80068f6:	461a      	mov	r2, r3
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	f7fd fce5 	bl	80042c8 <HAL_DMA_Start_IT>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2210      	movs	r2, #16
 8006908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e020      	b.n	800695a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2240      	movs	r2, #64	@ 0x40
 800691e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	613b      	str	r3, [r7, #16]
   return(result);
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006940:	623a      	str	r2, [r7, #32]
 8006942:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	69f9      	ldr	r1, [r7, #28]
 8006946:	6a3a      	ldr	r2, [r7, #32]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	61bb      	str	r3, [r7, #24]
   return(result);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e5      	bne.n	8006920 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3728      	adds	r7, #40	@ 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	08007e3b 	.word	0x08007e3b
 8006968:	08007ed5 	.word	0x08007ed5
 800696c:	0800805b 	.word	0x0800805b

08006970 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	@ 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006984:	2b20      	cmp	r3, #32
 8006986:	d137      	bne.n	80069f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <HAL_UART_Receive_DMA+0x24>
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e030      	b.n	80069fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a18      	ldr	r2, [pc, #96]	@ (8006a04 <HAL_UART_Receive_DMA+0x94>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d01f      	beq.n	80069e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d018      	beq.n	80069e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	613b      	str	r3, [r7, #16]
   return(result);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	69f9      	ldr	r1, [r7, #28]
 80069da:	6a3a      	ldr	r2, [r7, #32]
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e6      	bne.n	80069b6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	461a      	mov	r2, r3
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f001 f8d6 	bl	8007ba0 <UART_Start_Receive_DMA>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3728      	adds	r7, #40	@ 0x28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	40008000 	.word	0x40008000

08006a08 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b090      	sub	sp, #64	@ 0x40
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2a:	2b80      	cmp	r3, #128	@ 0x80
 8006a2c:	d139      	bne.n	8006aa2 <HAL_UART_DMAStop+0x9a>
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a30:	2b21      	cmp	r3, #33	@ 0x21
 8006a32:	d136      	bne.n	8006aa2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3308      	adds	r3, #8
 8006a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e5      	bne.n	8006a34 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d015      	beq.n	8006a9c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fd fca2 	bl	80043be <HAL_DMA_Abort>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00d      	beq.n	8006a9c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fd fe09 	bl	800469c <HAL_DMA_GetError>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d105      	bne.n	8006a9c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2210      	movs	r2, #16
 8006a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e047      	b.n	8006b2c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f925 	bl	8007cec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aac:	2b40      	cmp	r3, #64	@ 0x40
 8006aae:	d13c      	bne.n	8006b2a <HAL_UART_DMAStop+0x122>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab2:	2b22      	cmp	r3, #34	@ 0x22
 8006ab4:	d139      	bne.n	8006b2a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad6:	61ba      	str	r2, [r7, #24]
 8006ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6979      	ldr	r1, [r7, #20]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d017      	beq.n	8006b24 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fd fc5f 	bl	80043be <HAL_DMA_Abort>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd fdc5 	bl	800469c <HAL_DMA_GetError>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d105      	bne.n	8006b24 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e003      	b.n	8006b2c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 f922 	bl	8007d6e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3740      	adds	r7, #64	@ 0x40
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b0ba      	sub	sp, #232	@ 0xe8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b62:	4013      	ands	r3, r2
 8006b64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d11b      	bne.n	8006ba8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d015      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d105      	bne.n	8006b94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d009      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8300 	beq.w	800719e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
      }
      return;
 8006ba6:	e2fa      	b.n	800719e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8123 	beq.w	8006df8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006bb2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8006dec <HAL_UART_IRQHandler+0x2b8>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8006df0 <HAL_UART_IRQHandler+0x2bc>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 8116 	beq.w	8006df8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d011      	beq.n	8006bfc <HAL_UART_IRQHandler+0xc8>
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2201      	movs	r2, #1
 8006bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf2:	f043 0201 	orr.w	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d011      	beq.n	8006c2c <HAL_UART_IRQHandler+0xf8>
 8006c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c22:	f043 0204 	orr.w	r2, r3, #4
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d011      	beq.n	8006c5c <HAL_UART_IRQHandler+0x128>
 8006c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2204      	movs	r2, #4
 8006c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c52:	f043 0202 	orr.w	r2, r3, #2
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d017      	beq.n	8006c98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c78:	4b5c      	ldr	r3, [pc, #368]	@ (8006dec <HAL_UART_IRQHandler+0x2b8>)
 8006c7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2208      	movs	r2, #8
 8006c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8e:	f043 0208 	orr.w	r2, r3, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d012      	beq.n	8006cca <HAL_UART_IRQHandler+0x196>
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc0:	f043 0220 	orr.w	r2, r3, #32
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8266 	beq.w	80071a2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d013      	beq.n	8006d0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1e:	2b40      	cmp	r3, #64	@ 0x40
 8006d20:	d005      	beq.n	8006d2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d054      	beq.n	8006dd8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f81d 	bl	8007d6e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3e:	2b40      	cmp	r3, #64	@ 0x40
 8006d40:	d146      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1d9      	bne.n	8006d42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d017      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d9e:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <HAL_UART_IRQHandler+0x2c0>)
 8006da0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fd fb61 	bl	8004470 <HAL_DMA_Abort_IT>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d019      	beq.n	8006de8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc6:	e00f      	b.n	8006de8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa1d 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dce:	e00b      	b.n	8006de8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fa19 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd6:	e007      	b.n	8006de8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fa15 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006de6:	e1dc      	b.n	80071a2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de8:	bf00      	nop
    return;
 8006dea:	e1da      	b.n	80071a2 <HAL_UART_IRQHandler+0x66e>
 8006dec:	10000001 	.word	0x10000001
 8006df0:	04000120 	.word	0x04000120
 8006df4:	080080db 	.word	0x080080db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	f040 8170 	bne.w	80070e2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 8169 	beq.w	80070e2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8162 	beq.w	80070e2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2210      	movs	r2, #16
 8006e24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e30:	2b40      	cmp	r3, #64	@ 0x40
 8006e32:	f040 80d8 	bne.w	8006fe6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80af 	beq.w	8006fac <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	f080 80a7 	bcs.w	8006fac <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 8087 	bne.w	8006f8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1da      	bne.n	8006e7c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ed6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006eea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e1      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3308      	adds	r3, #8
 8006f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e3      	bne.n	8006f02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f58:	f023 0310 	bic.w	r3, r3, #16
 8006f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e4      	bne.n	8006f48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fd fa1a 	bl	80043be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f939 	bl	800721c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006faa:	e0fc      	b.n	80071a6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	f040 80f5 	bne.w	80071a6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	f040 80eb 	bne.w	80071a6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f91c 	bl	800721c <HAL_UARTEx_RxEventCallback>
      return;
 8006fe4:	e0df      	b.n	80071a6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80d1 	beq.w	80071aa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80cc 	beq.w	80071aa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007022:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007034:	647b      	str	r3, [r7, #68]	@ 0x44
 8007036:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800703a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e4      	bne.n	8007012 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3308      	adds	r3, #8
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	623b      	str	r3, [r7, #32]
   return(result);
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007070:	633a      	str	r2, [r7, #48]	@ 0x30
 8007072:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800707e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e1      	bne.n	8007048 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0310 	bic.w	r3, r3, #16
 80070ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	69b9      	ldr	r1, [r7, #24]
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	617b      	str	r3, [r7, #20]
   return(result);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e4      	bne.n	8007098 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f89e 	bl	800721c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070e0:	e063      	b.n	80071aa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <HAL_UART_IRQHandler+0x5d8>
 80070ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007102:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f825 	bl	8008154 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800710a:	e051      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800710c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007114:	2b00      	cmp	r3, #0
 8007116:	d014      	beq.n	8007142 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007134:	2b00      	cmp	r3, #0
 8007136:	d03a      	beq.n	80071ae <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
    }
    return;
 8007140:	e035      	b.n	80071ae <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <HAL_UART_IRQHandler+0x62e>
 800714e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 ffcf 	bl	80080fe <UART_EndTransmit_IT>
    return;
 8007160:	e026      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_UART_IRQHandler+0x64e>
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007172:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fffe 	bl	800817c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007180:	e016      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007186:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <HAL_UART_IRQHandler+0x67c>
 800718e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007192:	2b00      	cmp	r3, #0
 8007194:	da0c      	bge.n	80071b0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 ffe6 	bl	8008168 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800719c:	e008      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
      return;
 800719e:	bf00      	nop
 80071a0:	e006      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
    return;
 80071a2:	bf00      	nop
 80071a4:	e004      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
      return;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
      return;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <HAL_UART_IRQHandler+0x67c>
    return;
 80071ae:	bf00      	nop
  }
}
 80071b0:	37e8      	adds	r7, #232	@ 0xe8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop

080071b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007238:	b08c      	sub	sp, #48	@ 0x30
 800723a:	af00      	add	r7, sp, #0
 800723c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	431a      	orrs	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	431a      	orrs	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	4313      	orrs	r3, r2
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4baa      	ldr	r3, [pc, #680]	@ (800750c <UART_SetConfig+0x2d8>)
 8007264:	4013      	ands	r3, r2
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800726c:	430b      	orrs	r3, r1
 800726e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a9f      	ldr	r2, [pc, #636]	@ (8007510 <UART_SetConfig+0x2dc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800729c:	4313      	orrs	r3, r2
 800729e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80072aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	f023 010f 	bic.w	r1, r3, #15
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a90      	ldr	r2, [pc, #576]	@ (8007514 <UART_SetConfig+0x2e0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d125      	bne.n	8007324 <UART_SetConfig+0xf0>
 80072d8:	4b8f      	ldr	r3, [pc, #572]	@ (8007518 <UART_SetConfig+0x2e4>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d81a      	bhi.n	800731c <UART_SetConfig+0xe8>
 80072e6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <UART_SetConfig+0xb8>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	080072fd 	.word	0x080072fd
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007305 	.word	0x08007305
 80072f8:	08007315 	.word	0x08007315
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007302:	e116      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007304:	2302      	movs	r3, #2
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730a:	e112      	b.n	8007532 <UART_SetConfig+0x2fe>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007312:	e10e      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731a:	e10a      	b.n	8007532 <UART_SetConfig+0x2fe>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007322:	e106      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a7c      	ldr	r2, [pc, #496]	@ (800751c <UART_SetConfig+0x2e8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d138      	bne.n	80073a0 <UART_SetConfig+0x16c>
 800732e:	4b7a      	ldr	r3, [pc, #488]	@ (8007518 <UART_SetConfig+0x2e4>)
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007334:	f003 030c 	and.w	r3, r3, #12
 8007338:	2b0c      	cmp	r3, #12
 800733a:	d82d      	bhi.n	8007398 <UART_SetConfig+0x164>
 800733c:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x110>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007379 	.word	0x08007379
 8007348:	08007399 	.word	0x08007399
 800734c:	08007399 	.word	0x08007399
 8007350:	08007399 	.word	0x08007399
 8007354:	08007389 	.word	0x08007389
 8007358:	08007399 	.word	0x08007399
 800735c:	08007399 	.word	0x08007399
 8007360:	08007399 	.word	0x08007399
 8007364:	08007381 	.word	0x08007381
 8007368:	08007399 	.word	0x08007399
 800736c:	08007399 	.word	0x08007399
 8007370:	08007399 	.word	0x08007399
 8007374:	08007391 	.word	0x08007391
 8007378:	2300      	movs	r3, #0
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737e:	e0d8      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007386:	e0d4      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738e:	e0d0      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007396:	e0cc      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739e:	e0c8      	b.n	8007532 <UART_SetConfig+0x2fe>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007520 <UART_SetConfig+0x2ec>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d125      	bne.n	80073f6 <UART_SetConfig+0x1c2>
 80073aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007518 <UART_SetConfig+0x2e4>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073b4:	2b30      	cmp	r3, #48	@ 0x30
 80073b6:	d016      	beq.n	80073e6 <UART_SetConfig+0x1b2>
 80073b8:	2b30      	cmp	r3, #48	@ 0x30
 80073ba:	d818      	bhi.n	80073ee <UART_SetConfig+0x1ba>
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d00a      	beq.n	80073d6 <UART_SetConfig+0x1a2>
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d814      	bhi.n	80073ee <UART_SetConfig+0x1ba>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <UART_SetConfig+0x19a>
 80073c8:	2b10      	cmp	r3, #16
 80073ca:	d008      	beq.n	80073de <UART_SetConfig+0x1aa>
 80073cc:	e00f      	b.n	80073ee <UART_SetConfig+0x1ba>
 80073ce:	2300      	movs	r3, #0
 80073d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d4:	e0ad      	b.n	8007532 <UART_SetConfig+0x2fe>
 80073d6:	2302      	movs	r3, #2
 80073d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073dc:	e0a9      	b.n	8007532 <UART_SetConfig+0x2fe>
 80073de:	2304      	movs	r3, #4
 80073e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e4:	e0a5      	b.n	8007532 <UART_SetConfig+0x2fe>
 80073e6:	2308      	movs	r3, #8
 80073e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ec:	e0a1      	b.n	8007532 <UART_SetConfig+0x2fe>
 80073ee:	2310      	movs	r3, #16
 80073f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f4:	e09d      	b.n	8007532 <UART_SetConfig+0x2fe>
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a4a      	ldr	r2, [pc, #296]	@ (8007524 <UART_SetConfig+0x2f0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d125      	bne.n	800744c <UART_SetConfig+0x218>
 8007400:	4b45      	ldr	r3, [pc, #276]	@ (8007518 <UART_SetConfig+0x2e4>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007406:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800740a:	2bc0      	cmp	r3, #192	@ 0xc0
 800740c:	d016      	beq.n	800743c <UART_SetConfig+0x208>
 800740e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007410:	d818      	bhi.n	8007444 <UART_SetConfig+0x210>
 8007412:	2b80      	cmp	r3, #128	@ 0x80
 8007414:	d00a      	beq.n	800742c <UART_SetConfig+0x1f8>
 8007416:	2b80      	cmp	r3, #128	@ 0x80
 8007418:	d814      	bhi.n	8007444 <UART_SetConfig+0x210>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <UART_SetConfig+0x1f0>
 800741e:	2b40      	cmp	r3, #64	@ 0x40
 8007420:	d008      	beq.n	8007434 <UART_SetConfig+0x200>
 8007422:	e00f      	b.n	8007444 <UART_SetConfig+0x210>
 8007424:	2300      	movs	r3, #0
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742a:	e082      	b.n	8007532 <UART_SetConfig+0x2fe>
 800742c:	2302      	movs	r3, #2
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007432:	e07e      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007434:	2304      	movs	r3, #4
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743a:	e07a      	b.n	8007532 <UART_SetConfig+0x2fe>
 800743c:	2308      	movs	r3, #8
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007442:	e076      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007444:	2310      	movs	r3, #16
 8007446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800744a:	e072      	b.n	8007532 <UART_SetConfig+0x2fe>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a35      	ldr	r2, [pc, #212]	@ (8007528 <UART_SetConfig+0x2f4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d12a      	bne.n	80074ac <UART_SetConfig+0x278>
 8007456:	4b30      	ldr	r3, [pc, #192]	@ (8007518 <UART_SetConfig+0x2e4>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007464:	d01a      	beq.n	800749c <UART_SetConfig+0x268>
 8007466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800746a:	d81b      	bhi.n	80074a4 <UART_SetConfig+0x270>
 800746c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007470:	d00c      	beq.n	800748c <UART_SetConfig+0x258>
 8007472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007476:	d815      	bhi.n	80074a4 <UART_SetConfig+0x270>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <UART_SetConfig+0x250>
 800747c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007480:	d008      	beq.n	8007494 <UART_SetConfig+0x260>
 8007482:	e00f      	b.n	80074a4 <UART_SetConfig+0x270>
 8007484:	2300      	movs	r3, #0
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748a:	e052      	b.n	8007532 <UART_SetConfig+0x2fe>
 800748c:	2302      	movs	r3, #2
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007492:	e04e      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007494:	2304      	movs	r3, #4
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749a:	e04a      	b.n	8007532 <UART_SetConfig+0x2fe>
 800749c:	2308      	movs	r3, #8
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a2:	e046      	b.n	8007532 <UART_SetConfig+0x2fe>
 80074a4:	2310      	movs	r3, #16
 80074a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074aa:	e042      	b.n	8007532 <UART_SetConfig+0x2fe>
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a17      	ldr	r2, [pc, #92]	@ (8007510 <UART_SetConfig+0x2dc>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d13a      	bne.n	800752c <UART_SetConfig+0x2f8>
 80074b6:	4b18      	ldr	r3, [pc, #96]	@ (8007518 <UART_SetConfig+0x2e4>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c4:	d01a      	beq.n	80074fc <UART_SetConfig+0x2c8>
 80074c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074ca:	d81b      	bhi.n	8007504 <UART_SetConfig+0x2d0>
 80074cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d0:	d00c      	beq.n	80074ec <UART_SetConfig+0x2b8>
 80074d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d6:	d815      	bhi.n	8007504 <UART_SetConfig+0x2d0>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <UART_SetConfig+0x2b0>
 80074dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e0:	d008      	beq.n	80074f4 <UART_SetConfig+0x2c0>
 80074e2:	e00f      	b.n	8007504 <UART_SetConfig+0x2d0>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ea:	e022      	b.n	8007532 <UART_SetConfig+0x2fe>
 80074ec:	2302      	movs	r3, #2
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f2:	e01e      	b.n	8007532 <UART_SetConfig+0x2fe>
 80074f4:	2304      	movs	r3, #4
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fa:	e01a      	b.n	8007532 <UART_SetConfig+0x2fe>
 80074fc:	2308      	movs	r3, #8
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007502:	e016      	b.n	8007532 <UART_SetConfig+0x2fe>
 8007504:	2310      	movs	r3, #16
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750a:	e012      	b.n	8007532 <UART_SetConfig+0x2fe>
 800750c:	cfff69f3 	.word	0xcfff69f3
 8007510:	40008000 	.word	0x40008000
 8007514:	40013800 	.word	0x40013800
 8007518:	40021000 	.word	0x40021000
 800751c:	40004400 	.word	0x40004400
 8007520:	40004800 	.word	0x40004800
 8007524:	40004c00 	.word	0x40004c00
 8007528:	40005000 	.word	0x40005000
 800752c:	2310      	movs	r3, #16
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4aae      	ldr	r2, [pc, #696]	@ (80077f0 <UART_SetConfig+0x5bc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	f040 8097 	bne.w	800766c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800753e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007542:	2b08      	cmp	r3, #8
 8007544:	d823      	bhi.n	800758e <UART_SetConfig+0x35a>
 8007546:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <UART_SetConfig+0x318>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	08007571 	.word	0x08007571
 8007550:	0800758f 	.word	0x0800758f
 8007554:	08007579 	.word	0x08007579
 8007558:	0800758f 	.word	0x0800758f
 800755c:	0800757f 	.word	0x0800757f
 8007560:	0800758f 	.word	0x0800758f
 8007564:	0800758f 	.word	0x0800758f
 8007568:	0800758f 	.word	0x0800758f
 800756c:	08007587 	.word	0x08007587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007570:	f7fe f8e4 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 8007574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007576:	e010      	b.n	800759a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007578:	4b9e      	ldr	r3, [pc, #632]	@ (80077f4 <UART_SetConfig+0x5c0>)
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800757c:	e00d      	b.n	800759a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757e:	f7fe f86f 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 8007582:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007584:	e009      	b.n	800759a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800758c:	e005      	b.n	800759a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8130 	beq.w	8007802 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	4a94      	ldr	r2, [pc, #592]	@ (80077f8 <UART_SetConfig+0x5c4>)
 80075a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	4613      	mov	r3, r2
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	4413      	add	r3, r2
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d305      	bcc.n	80075d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d903      	bls.n	80075da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075d8:	e113      	b.n	8007802 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	2200      	movs	r2, #0
 80075de:	60bb      	str	r3, [r7, #8]
 80075e0:	60fa      	str	r2, [r7, #12]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	4a84      	ldr	r2, [pc, #528]	@ (80077f8 <UART_SetConfig+0x5c4>)
 80075e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2200      	movs	r2, #0
 80075f0:	603b      	str	r3, [r7, #0]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075fc:	f7f8 fec8 	bl	8000390 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	020b      	lsls	r3, r1, #8
 8007612:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007616:	0202      	lsls	r2, r0, #8
 8007618:	6979      	ldr	r1, [r7, #20]
 800761a:	6849      	ldr	r1, [r1, #4]
 800761c:	0849      	lsrs	r1, r1, #1
 800761e:	2000      	movs	r0, #0
 8007620:	460c      	mov	r4, r1
 8007622:	4605      	mov	r5, r0
 8007624:	eb12 0804 	adds.w	r8, r2, r4
 8007628:	eb43 0905 	adc.w	r9, r3, r5
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	469a      	mov	sl, r3
 8007634:	4693      	mov	fp, r2
 8007636:	4652      	mov	r2, sl
 8007638:	465b      	mov	r3, fp
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fea7 	bl	8000390 <__aeabi_uldivmod>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4613      	mov	r3, r2
 8007648:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007650:	d308      	bcc.n	8007664 <UART_SetConfig+0x430>
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007658:	d204      	bcs.n	8007664 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6a3a      	ldr	r2, [r7, #32]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	e0ce      	b.n	8007802 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800766a:	e0ca      	b.n	8007802 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007674:	d166      	bne.n	8007744 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007676:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800767a:	2b08      	cmp	r3, #8
 800767c:	d827      	bhi.n	80076ce <UART_SetConfig+0x49a>
 800767e:	a201      	add	r2, pc, #4	@ (adr r2, 8007684 <UART_SetConfig+0x450>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076b1 	.word	0x080076b1
 800768c:	080076b9 	.word	0x080076b9
 8007690:	080076cf 	.word	0x080076cf
 8007694:	080076bf 	.word	0x080076bf
 8007698:	080076cf 	.word	0x080076cf
 800769c:	080076cf 	.word	0x080076cf
 80076a0:	080076cf 	.word	0x080076cf
 80076a4:	080076c7 	.word	0x080076c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a8:	f7fe f848 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 80076ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076ae:	e014      	b.n	80076da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076b0:	f7fe f85a 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 80076b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076b6:	e010      	b.n	80076da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b8:	4b4e      	ldr	r3, [pc, #312]	@ (80077f4 <UART_SetConfig+0x5c0>)
 80076ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076bc:	e00d      	b.n	80076da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076be:	f7fd ffcf 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 80076c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076c4:	e009      	b.n	80076da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076cc:	e005      	b.n	80076da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8090 	beq.w	8007802 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e6:	4a44      	ldr	r2, [pc, #272]	@ (80077f8 <UART_SetConfig+0x5c4>)
 80076e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076f4:	005a      	lsls	r2, r3, #1
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	441a      	add	r2, r3
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	fbb2 f3f3 	udiv	r3, r2, r3
 8007706:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2b0f      	cmp	r3, #15
 800770c:	d916      	bls.n	800773c <UART_SetConfig+0x508>
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007714:	d212      	bcs.n	800773c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f023 030f 	bic.w	r3, r3, #15
 800771e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	085b      	lsrs	r3, r3, #1
 8007724:	b29b      	uxth	r3, r3
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	b29a      	uxth	r2, r3
 800772c:	8bfb      	ldrh	r3, [r7, #30]
 800772e:	4313      	orrs	r3, r2
 8007730:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	8bfa      	ldrh	r2, [r7, #30]
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	e062      	b.n	8007802 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007742:	e05e      	b.n	8007802 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007744:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007748:	2b08      	cmp	r3, #8
 800774a:	d828      	bhi.n	800779e <UART_SetConfig+0x56a>
 800774c:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <UART_SetConfig+0x520>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	08007779 	.word	0x08007779
 8007758:	08007781 	.word	0x08007781
 800775c:	08007789 	.word	0x08007789
 8007760:	0800779f 	.word	0x0800779f
 8007764:	0800778f 	.word	0x0800778f
 8007768:	0800779f 	.word	0x0800779f
 800776c:	0800779f 	.word	0x0800779f
 8007770:	0800779f 	.word	0x0800779f
 8007774:	08007797 	.word	0x08007797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007778:	f7fd ffe0 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 800777c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800777e:	e014      	b.n	80077aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007780:	f7fd fff2 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 8007784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007786:	e010      	b.n	80077aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007788:	4b1a      	ldr	r3, [pc, #104]	@ (80077f4 <UART_SetConfig+0x5c0>)
 800778a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800778c:	e00d      	b.n	80077aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800778e:	f7fd ff67 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 8007792:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007794:	e009      	b.n	80077aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800779c:	e005      	b.n	80077aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077a8:	bf00      	nop
    }

    if (pclk != 0U)
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d028      	beq.n	8007802 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	4a10      	ldr	r2, [pc, #64]	@ (80077f8 <UART_SetConfig+0x5c4>)
 80077b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	fbb3 f2f2 	udiv	r2, r3, r2
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	441a      	add	r2, r3
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	2b0f      	cmp	r3, #15
 80077d8:	d910      	bls.n	80077fc <UART_SetConfig+0x5c8>
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077e0:	d20c      	bcs.n	80077fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60da      	str	r2, [r3, #12]
 80077ec:	e009      	b.n	8007802 <UART_SetConfig+0x5ce>
 80077ee:	bf00      	nop
 80077f0:	40008000 	.word	0x40008000
 80077f4:	00f42400 	.word	0x00f42400
 80077f8:	08018ecc 	.word	0x08018ecc
      }
      else
      {
        ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2201      	movs	r2, #1
 8007806:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2201      	movs	r2, #1
 800780e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2200      	movs	r2, #0
 8007816:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2200      	movs	r2, #0
 800781c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800781e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007822:	4618      	mov	r0, r3
 8007824:	3730      	adds	r7, #48	@ 0x30
 8007826:	46bd      	mov	sp, r7
 8007828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800782c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01a      	beq.n	8007942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800792a:	d10a      	bne.n	8007942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b098      	sub	sp, #96	@ 0x60
 8007974:	af02      	add	r7, sp, #8
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007980:	f7fa fcbc 	bl	80022fc <HAL_GetTick>
 8007984:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	2b08      	cmp	r3, #8
 8007992:	d12f      	bne.n	80079f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799c:	2200      	movs	r2, #0
 800799e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f88e 	bl	8007ac4 <UART_WaitOnFlagUntilTimeout>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d022      	beq.n	80079f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e6      	bne.n	80079ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e063      	b.n	8007abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d149      	bne.n	8007a96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f857 	bl	8007ac4 <UART_WaitOnFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d03c      	beq.n	8007a96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e6      	bne.n	8007a1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a6e:	61fa      	str	r2, [r7, #28]
 8007a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	69b9      	ldr	r1, [r7, #24]
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e012      	b.n	8007abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3758      	adds	r7, #88	@ 0x58
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad4:	e04f      	b.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007adc:	d04b      	beq.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ade:	f7fa fc0d 	bl	80022fc <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d302      	bcc.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e04e      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d037      	beq.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b80      	cmp	r3, #128	@ 0x80
 8007b0a:	d034      	beq.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b40      	cmp	r3, #64	@ 0x40
 8007b10:	d031      	beq.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d110      	bne.n	8007b42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2208      	movs	r2, #8
 8007b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f920 	bl	8007d6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2208      	movs	r2, #8
 8007b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e029      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b50:	d111      	bne.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f906 	bl	8007d6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e00f      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	bf0c      	ite	eq
 8007b86:	2301      	moveq	r3, #1
 8007b88:	2300      	movne	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d0a0      	beq.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b096      	sub	sp, #88	@ 0x58
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	88fa      	ldrh	r2, [r7, #6]
 8007bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2222      	movs	r2, #34	@ 0x22
 8007bc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02d      	beq.n	8007c32 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bdc:	4a40      	ldr	r2, [pc, #256]	@ (8007ce0 <UART_Start_Receive_DMA+0x140>)
 8007bde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ce4 <UART_Start_Receive_DMA+0x144>)
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf0:	4a3d      	ldr	r2, [pc, #244]	@ (8007ce8 <UART_Start_Receive_DMA+0x148>)
 8007bf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3324      	adds	r3, #36	@ 0x24
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c10:	461a      	mov	r2, r3
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	f7fc fb58 	bl	80042c8 <HAL_DMA_Start_IT>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2210      	movs	r2, #16
 8007c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e051      	b.n	8007cd6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d018      	beq.n	8007c6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c5a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e6      	bne.n	8007c3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c8c:	637a      	str	r2, [r7, #52]	@ 0x34
 8007c8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e5      	bne.n	8007c6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cc0:	623a      	str	r2, [r7, #32]
 8007cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	69f9      	ldr	r1, [r7, #28]
 8007cc6:	6a3a      	ldr	r2, [r7, #32]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e5      	bne.n	8007ca0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3758      	adds	r7, #88	@ 0x58
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	08007ef1 	.word	0x08007ef1
 8007ce4:	0800801d 	.word	0x0800801d
 8007ce8:	0800805b 	.word	0x0800805b

08007cec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b08f      	sub	sp, #60	@ 0x3c
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d14:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e6      	bne.n	8007cf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d46:	61ba      	str	r2, [r7, #24]
 8007d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6979      	ldr	r1, [r7, #20]
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	613b      	str	r3, [r7, #16]
   return(result);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007d62:	bf00      	nop
 8007d64:	373c      	adds	r7, #60	@ 0x3c
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b095      	sub	sp, #84	@ 0x54
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e6      	bne.n	8007d76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dbe:	f023 0301 	bic.w	r3, r3, #1
 8007dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e3      	bne.n	8007da8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d118      	bne.n	8007e1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f023 0310 	bic.w	r3, r3, #16
 8007dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6979      	ldr	r1, [r7, #20]
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	613b      	str	r3, [r7, #16]
   return(result);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e6      	bne.n	8007de8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e2e:	bf00      	nop
 8007e30:	3754      	adds	r7, #84	@ 0x54
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b090      	sub	sp, #64	@ 0x40
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d137      	bne.n	8007ec6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e5      	bne.n	8007e5e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb0:	61fb      	str	r3, [r7, #28]
 8007eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	69b9      	ldr	r1, [r7, #24]
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ec4:	e002      	b.n	8007ecc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007ec6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007ec8:	f7ff f976 	bl	80071b8 <HAL_UART_TxCpltCallback>
}
 8007ecc:	bf00      	nop
 8007ece:	3740      	adds	r7, #64	@ 0x40
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff f972 	bl	80071cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b09c      	sub	sp, #112	@ 0x70
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d171      	bne.n	8007ff0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e6      	bne.n	8007f14 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f58:	f023 0301 	bic.w	r3, r3, #1
 8007f5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e5      	bne.n	8007f46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	623b      	str	r3, [r7, #32]
   return(result);
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3308      	adds	r3, #8
 8007f98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e5      	bne.n	8007f7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d118      	bne.n	8007ff0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0310 	bic.w	r3, r3, #16
 8007fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	69b9      	ldr	r1, [r7, #24]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e6      	bne.n	8007fbe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d107      	bne.n	800800e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008004:	4619      	mov	r1, r3
 8008006:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008008:	f7ff f908 	bl	800721c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800800c:	e002      	b.n	8008014 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800800e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008010:	f7ff f8e6 	bl	80071e0 <HAL_UART_RxCpltCallback>
}
 8008014:	bf00      	nop
 8008016:	3770      	adds	r7, #112	@ 0x70
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d109      	bne.n	800804c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800803e:	085b      	lsrs	r3, r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	4619      	mov	r1, r3
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff f8e9 	bl	800721c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800804a:	e002      	b.n	8008052 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff f8d1 	bl	80071f4 <HAL_UART_RxHalfCpltCallback>
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800806e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008076:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008082:	2b80      	cmp	r3, #128	@ 0x80
 8008084:	d109      	bne.n	800809a <UART_DMAError+0x40>
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b21      	cmp	r3, #33	@ 0x21
 800808a:	d106      	bne.n	800809a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2200      	movs	r2, #0
 8008090:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008094:	6978      	ldr	r0, [r7, #20]
 8008096:	f7ff fe29 	bl	8007cec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a4:	2b40      	cmp	r3, #64	@ 0x40
 80080a6:	d109      	bne.n	80080bc <UART_DMAError+0x62>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b22      	cmp	r3, #34	@ 0x22
 80080ac:	d106      	bne.n	80080bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7ff fe59 	bl	8007d6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c2:	f043 0210 	orr.w	r2, r3, #16
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080cc:	6978      	ldr	r0, [r7, #20]
 80080ce:	f7ff f89b 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d2:	bf00      	nop
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7ff f889 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b088      	sub	sp, #32
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60bb      	str	r3, [r7, #8]
   return(result);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6979      	ldr	r1, [r7, #20]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	613b      	str	r3, [r7, #16]
   return(result);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff f836 	bl	80071b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800814c:	bf00      	nop
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e027      	b.n	80081f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2224      	movs	r2, #36	@ 0x24
 80081b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0201 	bic.w	r2, r2, #1
 80081cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008216:	2302      	movs	r3, #2
 8008218:	e02d      	b.n	8008276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2224      	movs	r2, #36	@ 0x24
 8008226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f850 	bl	80082fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008292:	2302      	movs	r3, #2
 8008294:	e02d      	b.n	80082f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2224      	movs	r2, #36	@ 0x24
 80082a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f812 	bl	80082fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008308:	2b00      	cmp	r3, #0
 800830a:	d108      	bne.n	800831e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800831c:	e031      	b.n	8008382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800831e:	2308      	movs	r3, #8
 8008320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008322:	2308      	movs	r3, #8
 8008324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	0e5b      	lsrs	r3, r3, #25
 800832e:	b2db      	uxtb	r3, r3
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	0f5b      	lsrs	r3, r3, #29
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	7b3a      	ldrb	r2, [r7, #12]
 800834a:	4911      	ldr	r1, [pc, #68]	@ (8008390 <UARTEx_SetNbDataToProcess+0x94>)
 800834c:	5c8a      	ldrb	r2, [r1, r2]
 800834e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008352:	7b3a      	ldrb	r2, [r7, #12]
 8008354:	490f      	ldr	r1, [pc, #60]	@ (8008394 <UARTEx_SetNbDataToProcess+0x98>)
 8008356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008358:	fb93 f3f2 	sdiv	r3, r3, r2
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	7b7a      	ldrb	r2, [r7, #13]
 8008368:	4909      	ldr	r1, [pc, #36]	@ (8008390 <UARTEx_SetNbDataToProcess+0x94>)
 800836a:	5c8a      	ldrb	r2, [r1, r2]
 800836c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008370:	7b7a      	ldrb	r2, [r7, #13]
 8008372:	4908      	ldr	r1, [pc, #32]	@ (8008394 <UARTEx_SetNbDataToProcess+0x98>)
 8008374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008376:	fb93 f3f2 	sdiv	r3, r3, r2
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	08018ee4 	.word	0x08018ee4
 8008394:	08018eec 	.word	0x08018eec

08008398 <__NVIC_SetPriority>:
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	6039      	str	r1, [r7, #0]
 80083a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	db0a      	blt.n	80083c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	490c      	ldr	r1, [pc, #48]	@ (80083e4 <__NVIC_SetPriority+0x4c>)
 80083b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083b6:	0112      	lsls	r2, r2, #4
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	440b      	add	r3, r1
 80083bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80083c0:	e00a      	b.n	80083d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	4908      	ldr	r1, [pc, #32]	@ (80083e8 <__NVIC_SetPriority+0x50>)
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	3b04      	subs	r3, #4
 80083d0:	0112      	lsls	r2, r2, #4
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	440b      	add	r3, r1
 80083d6:	761a      	strb	r2, [r3, #24]
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	e000e100 	.word	0xe000e100
 80083e8:	e000ed00 	.word	0xe000ed00

080083ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80083f0:	2100      	movs	r1, #0
 80083f2:	f06f 0004 	mvn.w	r0, #4
 80083f6:	f7ff ffcf 	bl	8008398 <__NVIC_SetPriority>
#endif
}
 80083fa:	bf00      	nop
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008406:	f3ef 8305 	mrs	r3, IPSR
 800840a:	603b      	str	r3, [r7, #0]
  return(result);
 800840c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008412:	f06f 0305 	mvn.w	r3, #5
 8008416:	607b      	str	r3, [r7, #4]
 8008418:	e00c      	b.n	8008434 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800841a:	4b0a      	ldr	r3, [pc, #40]	@ (8008444 <osKernelInitialize+0x44>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d105      	bne.n	800842e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008422:	4b08      	ldr	r3, [pc, #32]	@ (8008444 <osKernelInitialize+0x44>)
 8008424:	2201      	movs	r2, #1
 8008426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008428:	2300      	movs	r3, #0
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	e002      	b.n	8008434 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800842e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008434:	687b      	ldr	r3, [r7, #4]
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	200067f0 	.word	0x200067f0

08008448 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800844e:	f3ef 8305 	mrs	r3, IPSR
 8008452:	603b      	str	r3, [r7, #0]
  return(result);
 8008454:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <osKernelStart+0x1a>
    stat = osErrorISR;
 800845a:	f06f 0305 	mvn.w	r3, #5
 800845e:	607b      	str	r3, [r7, #4]
 8008460:	e010      	b.n	8008484 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008462:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <osKernelStart+0x48>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d109      	bne.n	800847e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800846a:	f7ff ffbf 	bl	80083ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800846e:	4b08      	ldr	r3, [pc, #32]	@ (8008490 <osKernelStart+0x48>)
 8008470:	2202      	movs	r2, #2
 8008472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008474:	f001 f87a 	bl	800956c <vTaskStartScheduler>
      stat = osOK;
 8008478:	2300      	movs	r3, #0
 800847a:	607b      	str	r3, [r7, #4]
 800847c:	e002      	b.n	8008484 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800847e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008484:	687b      	ldr	r3, [r7, #4]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	200067f0 	.word	0x200067f0

08008494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	@ 0x38
 8008498:	af04      	add	r7, sp, #16
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a4:	f3ef 8305 	mrs	r3, IPSR
 80084a8:	617b      	str	r3, [r7, #20]
  return(result);
 80084aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d17e      	bne.n	80085ae <osThreadNew+0x11a>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d07b      	beq.n	80085ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80084b6:	2380      	movs	r3, #128	@ 0x80
 80084b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80084ba:	2318      	movs	r3, #24
 80084bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80084c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d045      	beq.n	800855a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <osThreadNew+0x48>
        name = attr->name;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d008      	beq.n	8008502 <osThreadNew+0x6e>
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b38      	cmp	r3, #56	@ 0x38
 80084f4:	d805      	bhi.n	8008502 <osThreadNew+0x6e>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <osThreadNew+0x72>
        return (NULL);
 8008502:	2300      	movs	r3, #0
 8008504:	e054      	b.n	80085b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	089b      	lsrs	r3, r3, #2
 8008514:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00e      	beq.n	800853c <osThreadNew+0xa8>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	2b5b      	cmp	r3, #91	@ 0x5b
 8008524:	d90a      	bls.n	800853c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800852a:	2b00      	cmp	r3, #0
 800852c:	d006      	beq.n	800853c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <osThreadNew+0xa8>
        mem = 1;
 8008536:	2301      	movs	r3, #1
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e010      	b.n	800855e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10c      	bne.n	800855e <osThreadNew+0xca>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d108      	bne.n	800855e <osThreadNew+0xca>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <osThreadNew+0xca>
          mem = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	e001      	b.n	800855e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d110      	bne.n	8008586 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800856c:	9202      	str	r2, [sp, #8]
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 fe1a 	bl	80091b4 <xTaskCreateStatic>
 8008580:	4603      	mov	r3, r0
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	e013      	b.n	80085ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d110      	bne.n	80085ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	b29a      	uxth	r2, r3
 8008590:	f107 0310 	add.w	r3, r7, #16
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 fe68 	bl	8009274 <xTaskCreate>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d001      	beq.n	80085ae <osThreadNew+0x11a>
            hTask = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085ae:	693b      	ldr	r3, [r7, #16]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3728      	adds	r7, #40	@ 0x28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c0:	f3ef 8305 	mrs	r3, IPSR
 80085c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80085c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <osDelay+0x1c>
    stat = osErrorISR;
 80085cc:	f06f 0305 	mvn.w	r3, #5
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e007      	b.n	80085e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 ff8e 	bl	8009500 <vTaskDelay>
    }
  }

  return (stat);
 80085e4:	68fb      	ldr	r3, [r7, #12]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a07      	ldr	r2, [pc, #28]	@ (800861c <vApplicationGetIdleTaskMemory+0x2c>)
 8008600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	4a06      	ldr	r2, [pc, #24]	@ (8008620 <vApplicationGetIdleTaskMemory+0x30>)
 8008606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2280      	movs	r2, #128	@ 0x80
 800860c:	601a      	str	r2, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	200067f4 	.word	0x200067f4
 8008620:	20006850 	.word	0x20006850

08008624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a07      	ldr	r2, [pc, #28]	@ (8008650 <vApplicationGetTimerTaskMemory+0x2c>)
 8008634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	4a06      	ldr	r2, [pc, #24]	@ (8008654 <vApplicationGetTimerTaskMemory+0x30>)
 800863a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20006a50 	.word	0x20006a50
 8008654:	20006aac 	.word	0x20006aac

08008658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f103 0208 	add.w	r2, r3, #8
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f103 0208 	add.w	r2, r3, #8
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f103 0208 	add.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
}
 80086ee:	bf00      	nop
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008710:	d103      	bne.n	800871a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	e00c      	b.n	8008734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3308      	adds	r3, #8
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	e002      	b.n	8008728 <vListInsert+0x2e>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	429a      	cmp	r2, r3
 8008732:	d2f6      	bcs.n	8008722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	601a      	str	r2, [r3, #0]
}
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6892      	ldr	r2, [r2, #8]
 8008782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6852      	ldr	r2, [r2, #4]
 800878c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	429a      	cmp	r2, r3
 8008796:	d103      	bne.n	80087a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	1e5a      	subs	r2, r3, #1
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10b      	bne.n	80087ec <xQueueGenericReset+0x2c>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	60bb      	str	r3, [r7, #8]
}
 80087e6:	bf00      	nop
 80087e8:	bf00      	nop
 80087ea:	e7fd      	b.n	80087e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087ec:	f002 f8a4 	bl	800a938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f8:	68f9      	ldr	r1, [r7, #12]
 80087fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087fc:	fb01 f303 	mul.w	r3, r1, r3
 8008800:	441a      	add	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881c:	3b01      	subs	r3, #1
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008822:	fb01 f303 	mul.w	r3, r1, r3
 8008826:	441a      	add	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	22ff      	movs	r2, #255	@ 0xff
 8008830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	22ff      	movs	r2, #255	@ 0xff
 8008838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d114      	bne.n	800886c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d01a      	beq.n	8008880 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3310      	adds	r3, #16
 800884e:	4618      	mov	r0, r3
 8008850:	f001 f91a 	bl	8009a88 <xTaskRemoveFromEventList>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d012      	beq.n	8008880 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800885a:	4b0d      	ldr	r3, [pc, #52]	@ (8008890 <xQueueGenericReset+0xd0>)
 800885c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	e009      	b.n	8008880 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3310      	adds	r3, #16
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fef1 	bl	8008658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3324      	adds	r3, #36	@ 0x24
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff feec 	bl	8008658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008880:	f002 f88c 	bl	800a99c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008884:	2301      	movs	r3, #1
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08e      	sub	sp, #56	@ 0x38
 8008898:	af02      	add	r7, sp, #8
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10b      	bne.n	80088c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088ba:	bf00      	nop
 80088bc:	bf00      	nop
 80088be:	e7fd      	b.n	80088bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10b      	bne.n	80088de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <xQueueGenericCreateStatic+0x56>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <xQueueGenericCreateStatic+0x5a>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e000      	b.n	80088f0 <xQueueGenericCreateStatic+0x5c>
 80088ee:	2300      	movs	r3, #0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10b      	bne.n	800890c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	623b      	str	r3, [r7, #32]
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d102      	bne.n	8008918 <xQueueGenericCreateStatic+0x84>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <xQueueGenericCreateStatic+0x88>
 8008918:	2301      	movs	r3, #1
 800891a:	e000      	b.n	800891e <xQueueGenericCreateStatic+0x8a>
 800891c:	2300      	movs	r3, #0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10b      	bne.n	800893a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	61fb      	str	r3, [r7, #28]
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	e7fd      	b.n	8008936 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800893a:	2350      	movs	r3, #80	@ 0x50
 800893c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b50      	cmp	r3, #80	@ 0x50
 8008942:	d00b      	beq.n	800895c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	61bb      	str	r3, [r7, #24]
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800895c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00d      	beq.n	8008984 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008970:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	4613      	mov	r3, r2
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f805 	bl	800898e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008986:	4618      	mov	r0, r3
 8008988:	3730      	adds	r7, #48	@ 0x30
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	e002      	b.n	80089b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089bc:	2101      	movs	r1, #1
 80089be:	69b8      	ldr	r0, [r7, #24]
 80089c0:	f7ff fefe 	bl	80087c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08e      	sub	sp, #56	@ 0x38
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089e2:	2300      	movs	r3, #0
 80089e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <xQueueGenericSend+0x34>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	e7fd      	b.n	8008a04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d103      	bne.n	8008a16 <xQueueGenericSend+0x42>
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <xQueueGenericSend+0x46>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e000      	b.n	8008a1c <xQueueGenericSend+0x48>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10b      	bne.n	8008a38 <xQueueGenericSend+0x64>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d103      	bne.n	8008a46 <xQueueGenericSend+0x72>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d101      	bne.n	8008a4a <xQueueGenericSend+0x76>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e000      	b.n	8008a4c <xQueueGenericSend+0x78>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10b      	bne.n	8008a68 <xQueueGenericSend+0x94>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	623b      	str	r3, [r7, #32]
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a68:	f001 f9f6 	bl	8009e58 <xTaskGetSchedulerState>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d102      	bne.n	8008a78 <xQueueGenericSend+0xa4>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <xQueueGenericSend+0xa8>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <xQueueGenericSend+0xaa>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10b      	bne.n	8008a9a <xQueueGenericSend+0xc6>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	61fb      	str	r3, [r7, #28]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a9a:	f001 ff4d 	bl	800a938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d302      	bcc.n	8008ab0 <xQueueGenericSend+0xdc>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d129      	bne.n	8008b04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ab6:	f000 fa0f 	bl	8008ed8 <prvCopyDataToQueue>
 8008aba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d010      	beq.n	8008ae6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac6:	3324      	adds	r3, #36	@ 0x24
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 ffdd 	bl	8009a88 <xTaskRemoveFromEventList>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d013      	beq.n	8008afc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8008bd4 <xQueueGenericSend+0x200>)
 8008ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	e00a      	b.n	8008afc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d007      	beq.n	8008afc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008aec:	4b39      	ldr	r3, [pc, #228]	@ (8008bd4 <xQueueGenericSend+0x200>)
 8008aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008afc:	f001 ff4e 	bl	800a99c <vPortExitCritical>
				return pdPASS;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e063      	b.n	8008bcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d103      	bne.n	8008b12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b0a:	f001 ff47 	bl	800a99c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e05c      	b.n	8008bcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d106      	bne.n	8008b26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f001 f83f 	bl	8009ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b22:	2301      	movs	r3, #1
 8008b24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b26:	f001 ff39 	bl	800a99c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b2a:	f000 fd87 	bl	800963c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b2e:	f001 ff03 	bl	800a938 <vPortEnterCritical>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b38:	b25b      	sxtb	r3, r3
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b3e:	d103      	bne.n	8008b48 <xQueueGenericSend+0x174>
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b4e:	b25b      	sxtb	r3, r3
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b54:	d103      	bne.n	8008b5e <xQueueGenericSend+0x18a>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b5e:	f001 ff1d 	bl	800a99c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b62:	1d3a      	adds	r2, r7, #4
 8008b64:	f107 0314 	add.w	r3, r7, #20
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 f82e 	bl	8009bcc <xTaskCheckForTimeOut>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d124      	bne.n	8008bc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b78:	f000 faa6 	bl	80090c8 <prvIsQueueFull>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d018      	beq.n	8008bb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	3310      	adds	r3, #16
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 ff2a 	bl	80099e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b92:	f000 fa31 	bl	8008ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b96:	f000 fd5f 	bl	8009658 <xTaskResumeAll>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f47f af7c 	bne.w	8008a9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd4 <xQueueGenericSend+0x200>)
 8008ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	e772      	b.n	8008a9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bb6:	f000 fa1f 	bl	8008ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bba:	f000 fd4d 	bl	8009658 <xTaskResumeAll>
 8008bbe:	e76c      	b.n	8008a9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bc2:	f000 fa19 	bl	8008ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bc6:	f000 fd47 	bl	8009658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3738      	adds	r7, #56	@ 0x38
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b090      	sub	sp, #64	@ 0x40
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10b      	bne.n	8008c08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	e7fd      	b.n	8008c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d103      	bne.n	8008c16 <xQueueGenericSendFromISR+0x3e>
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <xQueueGenericSendFromISR+0x42>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <xQueueGenericSendFromISR+0x44>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c32:	bf00      	nop
 8008c34:	bf00      	nop
 8008c36:	e7fd      	b.n	8008c34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d103      	bne.n	8008c46 <xQueueGenericSendFromISR+0x6e>
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <xQueueGenericSendFromISR+0x72>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <xQueueGenericSendFromISR+0x74>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	623b      	str	r3, [r7, #32]
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	e7fd      	b.n	8008c64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c68:	f001 ff46 	bl	800aaf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c6c:	f3ef 8211 	mrs	r2, BASEPRI
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	61fa      	str	r2, [r7, #28]
 8008c82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d302      	bcc.n	8008c9a <xQueueGenericSendFromISR+0xc2>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d12f      	bne.n	8008cfa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008cb0:	f000 f912 	bl	8008ed8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cbc:	d112      	bne.n	8008ce4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d016      	beq.n	8008cf4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	3324      	adds	r3, #36	@ 0x24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fedc 	bl	8009a88 <xTaskRemoveFromEventList>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00e      	beq.n	8008cf4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e007      	b.n	8008cf4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ce8:	3301      	adds	r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	b25a      	sxtb	r2, r3
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008cf8:	e001      	b.n	8008cfe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3740      	adds	r7, #64	@ 0x40
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08c      	sub	sp, #48	@ 0x30
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10b      	bne.n	8008d46 <xQueueReceive+0x32>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	623b      	str	r3, [r7, #32]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <xQueueReceive+0x40>
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <xQueueReceive+0x44>
 8008d54:	2301      	movs	r3, #1
 8008d56:	e000      	b.n	8008d5a <xQueueReceive+0x46>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <xQueueReceive+0x62>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	61fb      	str	r3, [r7, #28]
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	e7fd      	b.n	8008d72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d76:	f001 f86f 	bl	8009e58 <xTaskGetSchedulerState>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <xQueueReceive+0x72>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <xQueueReceive+0x76>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <xQueueReceive+0x78>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10b      	bne.n	8008da8 <xQueueReceive+0x94>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	61bb      	str	r3, [r7, #24]
}
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	e7fd      	b.n	8008da4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008da8:	f001 fdc6 	bl	800a938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01f      	beq.n	8008df8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008db8:	68b9      	ldr	r1, [r7, #8]
 8008dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dbc:	f000 f8f6 	bl	8008fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	1e5a      	subs	r2, r3, #1
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00f      	beq.n	8008df0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	3310      	adds	r3, #16
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fe57 	bl	8009a88 <xTaskRemoveFromEventList>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d007      	beq.n	8008df0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008de0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ed4 <xQueueReceive+0x1c0>)
 8008de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008df0:	f001 fdd4 	bl	800a99c <vPortExitCritical>
				return pdPASS;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e069      	b.n	8008ecc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d103      	bne.n	8008e06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dfe:	f001 fdcd 	bl	800a99c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e02:	2300      	movs	r3, #0
 8008e04:	e062      	b.n	8008ecc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d106      	bne.n	8008e1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e0c:	f107 0310 	add.w	r3, r7, #16
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fec5 	bl	8009ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e16:	2301      	movs	r3, #1
 8008e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e1a:	f001 fdbf 	bl	800a99c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e1e:	f000 fc0d 	bl	800963c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e22:	f001 fd89 	bl	800a938 <vPortEnterCritical>
 8008e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e2c:	b25b      	sxtb	r3, r3
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e32:	d103      	bne.n	8008e3c <xQueueReceive+0x128>
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e48:	d103      	bne.n	8008e52 <xQueueReceive+0x13e>
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e52:	f001 fda3 	bl	800a99c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e56:	1d3a      	adds	r2, r7, #4
 8008e58:	f107 0310 	add.w	r3, r7, #16
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 feb4 	bl	8009bcc <xTaskCheckForTimeOut>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d123      	bne.n	8008eb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e6c:	f000 f916 	bl	800909c <prvIsQueueEmpty>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d017      	beq.n	8008ea6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	3324      	adds	r3, #36	@ 0x24
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fdb0 	bl	80099e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e86:	f000 f8b7 	bl	8008ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e8a:	f000 fbe5 	bl	8009658 <xTaskResumeAll>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d189      	bne.n	8008da8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e94:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed4 <xQueueReceive+0x1c0>)
 8008e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	e780      	b.n	8008da8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea8:	f000 f8a6 	bl	8008ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008eac:	f000 fbd4 	bl	8009658 <xTaskResumeAll>
 8008eb0:	e77a      	b.n	8008da8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eb4:	f000 f8a0 	bl	8008ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eb8:	f000 fbce 	bl	8009658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ebe:	f000 f8ed 	bl	800909c <prvIsQueueEmpty>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f43f af6f 	beq.w	8008da8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008eca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3730      	adds	r7, #48	@ 0x30
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	e000ed04 	.word	0xe000ed04

08008ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10d      	bne.n	8008f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d14d      	bne.n	8008f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 ffc6 	bl	8009e94 <xTaskPriorityDisinherit>
 8008f08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	609a      	str	r2, [r3, #8]
 8008f10:	e043      	b.n	8008f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d119      	bne.n	8008f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6858      	ldr	r0, [r3, #4]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f20:	461a      	mov	r2, r3
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	f00f f867 	bl	8017ff6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f30:	441a      	add	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d32b      	bcc.n	8008f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	605a      	str	r2, [r3, #4]
 8008f4a:	e026      	b.n	8008f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68d8      	ldr	r0, [r3, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	461a      	mov	r2, r3
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	f00f f84d 	bl	8017ff6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f64:	425b      	negs	r3, r3
 8008f66:	441a      	add	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d207      	bcs.n	8008f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f80:	425b      	negs	r3, r3
 8008f82:	441a      	add	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d105      	bne.n	8008f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008fa2:	697b      	ldr	r3, [r7, #20]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d018      	beq.n	8008ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc6:	441a      	add	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d303      	bcc.n	8008fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68d9      	ldr	r1, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6838      	ldr	r0, [r7, #0]
 8008fec:	f00f f803 	bl	8017ff6 <memcpy>
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009000:	f001 fc9a 	bl	800a938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800900a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800900c:	e011      	b.n	8009032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d012      	beq.n	800903c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3324      	adds	r3, #36	@ 0x24
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fd34 	bl	8009a88 <xTaskRemoveFromEventList>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009026:	f000 fe35 	bl	8009c94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	3b01      	subs	r3, #1
 800902e:	b2db      	uxtb	r3, r3
 8009030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009036:	2b00      	cmp	r3, #0
 8009038:	dce9      	bgt.n	800900e <prvUnlockQueue+0x16>
 800903a:	e000      	b.n	800903e <prvUnlockQueue+0x46>
					break;
 800903c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	22ff      	movs	r2, #255	@ 0xff
 8009042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009046:	f001 fca9 	bl	800a99c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800904a:	f001 fc75 	bl	800a938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009056:	e011      	b.n	800907c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3310      	adds	r3, #16
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fd0f 	bl	8009a88 <xTaskRemoveFromEventList>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009070:	f000 fe10 	bl	8009c94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	3b01      	subs	r3, #1
 8009078:	b2db      	uxtb	r3, r3
 800907a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800907c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009080:	2b00      	cmp	r3, #0
 8009082:	dce9      	bgt.n	8009058 <prvUnlockQueue+0x60>
 8009084:	e000      	b.n	8009088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	22ff      	movs	r2, #255	@ 0xff
 800908c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009090:	f001 fc84 	bl	800a99c <vPortExitCritical>
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090a4:	f001 fc48 	bl	800a938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d102      	bne.n	80090b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090b0:	2301      	movs	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	e001      	b.n	80090ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ba:	f001 fc6f 	bl	800a99c <vPortExitCritical>

	return xReturn;
 80090be:	68fb      	ldr	r3, [r7, #12]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090d0:	f001 fc32 	bl	800a938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090dc:	429a      	cmp	r2, r3
 80090de:	d102      	bne.n	80090e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e001      	b.n	80090ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ea:	f001 fc57 	bl	800a99c <vPortExitCritical>

	return xReturn;
 80090ee:	68fb      	ldr	r3, [r7, #12]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	e014      	b.n	8009132 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009108:	4a0f      	ldr	r2, [pc, #60]	@ (8009148 <vQueueAddToRegistry+0x50>)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10b      	bne.n	800912c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009114:	490c      	ldr	r1, [pc, #48]	@ (8009148 <vQueueAddToRegistry+0x50>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800911e:	4a0a      	ldr	r2, [pc, #40]	@ (8009148 <vQueueAddToRegistry+0x50>)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	4413      	add	r3, r2
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800912a:	e006      	b.n	800913a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3301      	adds	r3, #1
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b07      	cmp	r3, #7
 8009136:	d9e7      	bls.n	8009108 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20006eac 	.word	0x20006eac

0800914c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800915c:	f001 fbec 	bl	800a938 <vPortEnterCritical>
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009166:	b25b      	sxtb	r3, r3
 8009168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800916c:	d103      	bne.n	8009176 <vQueueWaitForMessageRestricted+0x2a>
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800917c:	b25b      	sxtb	r3, r3
 800917e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009182:	d103      	bne.n	800918c <vQueueWaitForMessageRestricted+0x40>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800918c:	f001 fc06 	bl	800a99c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	3324      	adds	r3, #36	@ 0x24
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fc45 	bl	8009a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091a6:	6978      	ldr	r0, [r7, #20]
 80091a8:	f7ff ff26 	bl	8008ff8 <prvUnlockQueue>
	}
 80091ac:	bf00      	nop
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08e      	sub	sp, #56	@ 0x38
 80091b8:	af04      	add	r7, sp, #16
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	623b      	str	r3, [r7, #32]
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	e7fd      	b.n	80091dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	61fb      	str	r3, [r7, #28]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091fe:	235c      	movs	r3, #92	@ 0x5c
 8009200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b5c      	cmp	r3, #92	@ 0x5c
 8009206:	d00b      	beq.n	8009220 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	61bb      	str	r3, [r7, #24]
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	e7fd      	b.n	800921c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01e      	beq.n	8009266 <xTaskCreateStatic+0xb2>
 8009228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922a:	2b00      	cmp	r3, #0
 800922c:	d01b      	beq.n	8009266 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	2202      	movs	r2, #2
 800923c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009240:	2300      	movs	r3, #0
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	9302      	str	r3, [sp, #8]
 8009248:	f107 0314 	add.w	r3, r7, #20
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f850 	bl	80092fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800925e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009260:	f000 f8de 	bl	8009420 <prvAddNewTaskToReadyList>
 8009264:	e001      	b.n	800926a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800926a:	697b      	ldr	r3, [r7, #20]
	}
 800926c:	4618      	mov	r0, r3
 800926e:	3728      	adds	r7, #40	@ 0x28
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08c      	sub	sp, #48	@ 0x30
 8009278:	af04      	add	r7, sp, #16
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	4613      	mov	r3, r2
 8009282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4618      	mov	r0, r3
 800928a:	f001 fc77 	bl	800ab7c <pvPortMalloc>
 800928e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00e      	beq.n	80092b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009296:	205c      	movs	r0, #92	@ 0x5c
 8009298:	f001 fc70 	bl	800ab7c <pvPortMalloc>
 800929c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80092aa:	e005      	b.n	80092b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092ac:	6978      	ldr	r0, [r7, #20]
 80092ae:	f001 fd33 	bl	800ad18 <vPortFree>
 80092b2:	e001      	b.n	80092b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d017      	beq.n	80092ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092c6:	88fa      	ldrh	r2, [r7, #6]
 80092c8:	2300      	movs	r3, #0
 80092ca:	9303      	str	r3, [sp, #12]
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	9302      	str	r3, [sp, #8]
 80092d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 f80e 	bl	80092fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092e2:	69f8      	ldr	r0, [r7, #28]
 80092e4:	f000 f89c 	bl	8009420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092e8:	2301      	movs	r3, #1
 80092ea:	61bb      	str	r3, [r7, #24]
 80092ec:	e002      	b.n	80092f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092f4:	69bb      	ldr	r3, [r7, #24]
	}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3720      	adds	r7, #32
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b088      	sub	sp, #32
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	461a      	mov	r2, r3
 8009316:	21a5      	movs	r1, #165	@ 0xa5
 8009318:	f00e fda4 	bl	8017e64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009326:	3b01      	subs	r3, #1
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	f023 0307 	bic.w	r3, r3, #7
 8009334:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	617b      	str	r3, [r7, #20]
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	e7fd      	b.n	8009354 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d01f      	beq.n	800939e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800935e:	2300      	movs	r3, #0
 8009360:	61fb      	str	r3, [r7, #28]
 8009362:	e012      	b.n	800938a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	7819      	ldrb	r1, [r3, #0]
 800936c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	3334      	adds	r3, #52	@ 0x34
 8009374:	460a      	mov	r2, r1
 8009376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d006      	beq.n	8009392 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	3301      	adds	r3, #1
 8009388:	61fb      	str	r3, [r7, #28]
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	2b0f      	cmp	r3, #15
 800938e:	d9e9      	bls.n	8009364 <prvInitialiseNewTask+0x66>
 8009390:	e000      	b.n	8009394 <prvInitialiseNewTask+0x96>
			{
				break;
 8009392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800939c:	e003      	b.n	80093a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800939e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	2b37      	cmp	r3, #55	@ 0x37
 80093aa:	d901      	bls.n	80093b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093ac:	2337      	movs	r3, #55	@ 0x37
 80093ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	2200      	movs	r2, #0
 80093c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	3304      	adds	r3, #4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff f966 	bl	8008698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	3318      	adds	r3, #24
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff f961 	bl	8008698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	2200      	movs	r2, #0
 80093f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	68f9      	ldr	r1, [r7, #12]
 80093fe:	69b8      	ldr	r0, [r7, #24]
 8009400:	f001 f966 	bl	800a6d0 <pxPortInitialiseStack>
 8009404:	4602      	mov	r2, r0
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800940a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009416:	bf00      	nop
 8009418:	3720      	adds	r7, #32
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
	...

08009420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009428:	f001 fa86 	bl	800a938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800942c:	4b2d      	ldr	r3, [pc, #180]	@ (80094e4 <prvAddNewTaskToReadyList+0xc4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3301      	adds	r3, #1
 8009432:	4a2c      	ldr	r2, [pc, #176]	@ (80094e4 <prvAddNewTaskToReadyList+0xc4>)
 8009434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009436:	4b2c      	ldr	r3, [pc, #176]	@ (80094e8 <prvAddNewTaskToReadyList+0xc8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800943e:	4a2a      	ldr	r2, [pc, #168]	@ (80094e8 <prvAddNewTaskToReadyList+0xc8>)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009444:	4b27      	ldr	r3, [pc, #156]	@ (80094e4 <prvAddNewTaskToReadyList+0xc4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d110      	bne.n	800946e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800944c:	f000 fc46 	bl	8009cdc <prvInitialiseTaskLists>
 8009450:	e00d      	b.n	800946e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009452:	4b26      	ldr	r3, [pc, #152]	@ (80094ec <prvAddNewTaskToReadyList+0xcc>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d109      	bne.n	800946e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800945a:	4b23      	ldr	r3, [pc, #140]	@ (80094e8 <prvAddNewTaskToReadyList+0xc8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	429a      	cmp	r2, r3
 8009466:	d802      	bhi.n	800946e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009468:	4a1f      	ldr	r2, [pc, #124]	@ (80094e8 <prvAddNewTaskToReadyList+0xc8>)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800946e:	4b20      	ldr	r3, [pc, #128]	@ (80094f0 <prvAddNewTaskToReadyList+0xd0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	4a1e      	ldr	r2, [pc, #120]	@ (80094f0 <prvAddNewTaskToReadyList+0xd0>)
 8009476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009478:	4b1d      	ldr	r3, [pc, #116]	@ (80094f0 <prvAddNewTaskToReadyList+0xd0>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009484:	4b1b      	ldr	r3, [pc, #108]	@ (80094f4 <prvAddNewTaskToReadyList+0xd4>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d903      	bls.n	8009494 <prvAddNewTaskToReadyList+0x74>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	4a18      	ldr	r2, [pc, #96]	@ (80094f4 <prvAddNewTaskToReadyList+0xd4>)
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4a15      	ldr	r2, [pc, #84]	@ (80094f8 <prvAddNewTaskToReadyList+0xd8>)
 80094a2:	441a      	add	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7ff f901 	bl	80086b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094b0:	f001 fa74 	bl	800a99c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094b4:	4b0d      	ldr	r3, [pc, #52]	@ (80094ec <prvAddNewTaskToReadyList+0xcc>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00e      	beq.n	80094da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094bc:	4b0a      	ldr	r3, [pc, #40]	@ (80094e8 <prvAddNewTaskToReadyList+0xc8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d207      	bcs.n	80094da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094ca:	4b0c      	ldr	r3, [pc, #48]	@ (80094fc <prvAddNewTaskToReadyList+0xdc>)
 80094cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094da:	bf00      	nop
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	200073c0 	.word	0x200073c0
 80094e8:	20006eec 	.word	0x20006eec
 80094ec:	200073cc 	.word	0x200073cc
 80094f0:	200073dc 	.word	0x200073dc
 80094f4:	200073c8 	.word	0x200073c8
 80094f8:	20006ef0 	.word	0x20006ef0
 80094fc:	e000ed04 	.word	0xe000ed04

08009500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d018      	beq.n	8009544 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009512:	4b14      	ldr	r3, [pc, #80]	@ (8009564 <vTaskDelay+0x64>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <vTaskDelay+0x32>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	60bb      	str	r3, [r7, #8]
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	e7fd      	b.n	800952e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009532:	f000 f883 	bl	800963c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009536:	2100      	movs	r1, #0
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fd1b 	bl	8009f74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800953e:	f000 f88b 	bl	8009658 <xTaskResumeAll>
 8009542:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d107      	bne.n	800955a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800954a:	4b07      	ldr	r3, [pc, #28]	@ (8009568 <vTaskDelay+0x68>)
 800954c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800955a:	bf00      	nop
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	200073e8 	.word	0x200073e8
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08a      	sub	sp, #40	@ 0x28
 8009570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009576:	2300      	movs	r3, #0
 8009578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800957a:	463a      	mov	r2, r7
 800957c:	1d39      	adds	r1, r7, #4
 800957e:	f107 0308 	add.w	r3, r7, #8
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff f834 	bl	80085f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	9202      	str	r2, [sp, #8]
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	2300      	movs	r3, #0
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	2300      	movs	r3, #0
 8009598:	460a      	mov	r2, r1
 800959a:	4922      	ldr	r1, [pc, #136]	@ (8009624 <vTaskStartScheduler+0xb8>)
 800959c:	4822      	ldr	r0, [pc, #136]	@ (8009628 <vTaskStartScheduler+0xbc>)
 800959e:	f7ff fe09 	bl	80091b4 <xTaskCreateStatic>
 80095a2:	4603      	mov	r3, r0
 80095a4:	4a21      	ldr	r2, [pc, #132]	@ (800962c <vTaskStartScheduler+0xc0>)
 80095a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095a8:	4b20      	ldr	r3, [pc, #128]	@ (800962c <vTaskStartScheduler+0xc0>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095b0:	2301      	movs	r3, #1
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	e001      	b.n	80095ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d102      	bne.n	80095c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095c0:	f000 fd2c 	bl	800a01c <xTimerCreateTimerTask>
 80095c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d116      	bne.n	80095fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	613b      	str	r3, [r7, #16]
}
 80095de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095e0:	4b13      	ldr	r3, [pc, #76]	@ (8009630 <vTaskStartScheduler+0xc4>)
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095e8:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <vTaskStartScheduler+0xc8>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095ee:	4b12      	ldr	r3, [pc, #72]	@ (8009638 <vTaskStartScheduler+0xcc>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095f4:	f001 f8fc 	bl	800a7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095f8:	e00f      	b.n	800961a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009600:	d10b      	bne.n	800961a <vTaskStartScheduler+0xae>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	60fb      	str	r3, [r7, #12]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <vTaskStartScheduler+0xaa>
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08018e5c 	.word	0x08018e5c
 8009628:	08009cad 	.word	0x08009cad
 800962c:	200073e4 	.word	0x200073e4
 8009630:	200073e0 	.word	0x200073e0
 8009634:	200073cc 	.word	0x200073cc
 8009638:	200073c4 	.word	0x200073c4

0800963c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009640:	4b04      	ldr	r3, [pc, #16]	@ (8009654 <vTaskSuspendAll+0x18>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	4a03      	ldr	r2, [pc, #12]	@ (8009654 <vTaskSuspendAll+0x18>)
 8009648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800964a:	bf00      	nop
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	200073e8 	.word	0x200073e8

08009658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009662:	2300      	movs	r3, #0
 8009664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009666:	4b42      	ldr	r3, [pc, #264]	@ (8009770 <xTaskResumeAll+0x118>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10b      	bne.n	8009686 <xTaskResumeAll+0x2e>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	603b      	str	r3, [r7, #0]
}
 8009680:	bf00      	nop
 8009682:	bf00      	nop
 8009684:	e7fd      	b.n	8009682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009686:	f001 f957 	bl	800a938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800968a:	4b39      	ldr	r3, [pc, #228]	@ (8009770 <xTaskResumeAll+0x118>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3b01      	subs	r3, #1
 8009690:	4a37      	ldr	r2, [pc, #220]	@ (8009770 <xTaskResumeAll+0x118>)
 8009692:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009694:	4b36      	ldr	r3, [pc, #216]	@ (8009770 <xTaskResumeAll+0x118>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d162      	bne.n	8009762 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800969c:	4b35      	ldr	r3, [pc, #212]	@ (8009774 <xTaskResumeAll+0x11c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d05e      	beq.n	8009762 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096a4:	e02f      	b.n	8009706 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a6:	4b34      	ldr	r3, [pc, #208]	@ (8009778 <xTaskResumeAll+0x120>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3318      	adds	r3, #24
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff f85a 	bl	800876c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff f855 	bl	800876c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c6:	4b2d      	ldr	r3, [pc, #180]	@ (800977c <xTaskResumeAll+0x124>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d903      	bls.n	80096d6 <xTaskResumeAll+0x7e>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	4a2a      	ldr	r2, [pc, #168]	@ (800977c <xTaskResumeAll+0x124>)
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4a27      	ldr	r2, [pc, #156]	@ (8009780 <xTaskResumeAll+0x128>)
 80096e4:	441a      	add	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7fe ffe0 	bl	80086b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f6:	4b23      	ldr	r3, [pc, #140]	@ (8009784 <xTaskResumeAll+0x12c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d302      	bcc.n	8009706 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009700:	4b21      	ldr	r3, [pc, #132]	@ (8009788 <xTaskResumeAll+0x130>)
 8009702:	2201      	movs	r2, #1
 8009704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009706:	4b1c      	ldr	r3, [pc, #112]	@ (8009778 <xTaskResumeAll+0x120>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1cb      	bne.n	80096a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009714:	f000 fb80 	bl	8009e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009718:	4b1c      	ldr	r3, [pc, #112]	@ (800978c <xTaskResumeAll+0x134>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d010      	beq.n	8009746 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009724:	f000 f846 	bl	80097b4 <xTaskIncrementTick>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800972e:	4b16      	ldr	r3, [pc, #88]	@ (8009788 <xTaskResumeAll+0x130>)
 8009730:	2201      	movs	r2, #1
 8009732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3b01      	subs	r3, #1
 8009738:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1f1      	bne.n	8009724 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009740:	4b12      	ldr	r3, [pc, #72]	@ (800978c <xTaskResumeAll+0x134>)
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009746:	4b10      	ldr	r3, [pc, #64]	@ (8009788 <xTaskResumeAll+0x130>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800974e:	2301      	movs	r3, #1
 8009750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009752:	4b0f      	ldr	r3, [pc, #60]	@ (8009790 <xTaskResumeAll+0x138>)
 8009754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009762:	f001 f91b 	bl	800a99c <vPortExitCritical>

	return xAlreadyYielded;
 8009766:	68bb      	ldr	r3, [r7, #8]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	200073e8 	.word	0x200073e8
 8009774:	200073c0 	.word	0x200073c0
 8009778:	20007380 	.word	0x20007380
 800977c:	200073c8 	.word	0x200073c8
 8009780:	20006ef0 	.word	0x20006ef0
 8009784:	20006eec 	.word	0x20006eec
 8009788:	200073d4 	.word	0x200073d4
 800978c:	200073d0 	.word	0x200073d0
 8009790:	e000ed04 	.word	0xe000ed04

08009794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800979a:	4b05      	ldr	r3, [pc, #20]	@ (80097b0 <xTaskGetTickCount+0x1c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097a0:	687b      	ldr	r3, [r7, #4]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	200073c4 	.word	0x200073c4

080097b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097be:	4b4f      	ldr	r3, [pc, #316]	@ (80098fc <xTaskIncrementTick+0x148>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f040 8090 	bne.w	80098e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097c8:	4b4d      	ldr	r3, [pc, #308]	@ (8009900 <xTaskIncrementTick+0x14c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3301      	adds	r3, #1
 80097ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097d0:	4a4b      	ldr	r2, [pc, #300]	@ (8009900 <xTaskIncrementTick+0x14c>)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d121      	bne.n	8009820 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097dc:	4b49      	ldr	r3, [pc, #292]	@ (8009904 <xTaskIncrementTick+0x150>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00b      	beq.n	80097fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	603b      	str	r3, [r7, #0]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xTaskIncrementTick+0x46>
 80097fe:	4b41      	ldr	r3, [pc, #260]	@ (8009904 <xTaskIncrementTick+0x150>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	4b40      	ldr	r3, [pc, #256]	@ (8009908 <xTaskIncrementTick+0x154>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a3e      	ldr	r2, [pc, #248]	@ (8009904 <xTaskIncrementTick+0x150>)
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	4a3e      	ldr	r2, [pc, #248]	@ (8009908 <xTaskIncrementTick+0x154>)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	4b3e      	ldr	r3, [pc, #248]	@ (800990c <xTaskIncrementTick+0x158>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3301      	adds	r3, #1
 8009818:	4a3c      	ldr	r2, [pc, #240]	@ (800990c <xTaskIncrementTick+0x158>)
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	f000 fafc 	bl	8009e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009820:	4b3b      	ldr	r3, [pc, #236]	@ (8009910 <xTaskIncrementTick+0x15c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	429a      	cmp	r2, r3
 8009828:	d349      	bcc.n	80098be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800982a:	4b36      	ldr	r3, [pc, #216]	@ (8009904 <xTaskIncrementTick+0x150>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009834:	4b36      	ldr	r3, [pc, #216]	@ (8009910 <xTaskIncrementTick+0x15c>)
 8009836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800983a:	601a      	str	r2, [r3, #0]
					break;
 800983c:	e03f      	b.n	80098be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983e:	4b31      	ldr	r3, [pc, #196]	@ (8009904 <xTaskIncrementTick+0x150>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	429a      	cmp	r2, r3
 8009854:	d203      	bcs.n	800985e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009856:	4a2e      	ldr	r2, [pc, #184]	@ (8009910 <xTaskIncrementTick+0x15c>)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800985c:	e02f      	b.n	80098be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	3304      	adds	r3, #4
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe ff82 	bl	800876c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	3318      	adds	r3, #24
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe ff79 	bl	800876c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987e:	4b25      	ldr	r3, [pc, #148]	@ (8009914 <xTaskIncrementTick+0x160>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d903      	bls.n	800988e <xTaskIncrementTick+0xda>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988a:	4a22      	ldr	r2, [pc, #136]	@ (8009914 <xTaskIncrementTick+0x160>)
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4a1f      	ldr	r2, [pc, #124]	@ (8009918 <xTaskIncrementTick+0x164>)
 800989c:	441a      	add	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7fe ff04 	bl	80086b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ae:	4b1b      	ldr	r3, [pc, #108]	@ (800991c <xTaskIncrementTick+0x168>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d3b8      	bcc.n	800982a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80098b8:	2301      	movs	r3, #1
 80098ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098bc:	e7b5      	b.n	800982a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098be:	4b17      	ldr	r3, [pc, #92]	@ (800991c <xTaskIncrementTick+0x168>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c4:	4914      	ldr	r1, [pc, #80]	@ (8009918 <xTaskIncrementTick+0x164>)
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	440b      	add	r3, r1
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d901      	bls.n	80098da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80098d6:	2301      	movs	r3, #1
 80098d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098da:	4b11      	ldr	r3, [pc, #68]	@ (8009920 <xTaskIncrementTick+0x16c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80098e2:	2301      	movs	r3, #1
 80098e4:	617b      	str	r3, [r7, #20]
 80098e6:	e004      	b.n	80098f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009924 <xTaskIncrementTick+0x170>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009924 <xTaskIncrementTick+0x170>)
 80098f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098f2:	697b      	ldr	r3, [r7, #20]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	200073e8 	.word	0x200073e8
 8009900:	200073c4 	.word	0x200073c4
 8009904:	20007378 	.word	0x20007378
 8009908:	2000737c 	.word	0x2000737c
 800990c:	200073d8 	.word	0x200073d8
 8009910:	200073e0 	.word	0x200073e0
 8009914:	200073c8 	.word	0x200073c8
 8009918:	20006ef0 	.word	0x20006ef0
 800991c:	20006eec 	.word	0x20006eec
 8009920:	200073d4 	.word	0x200073d4
 8009924:	200073d0 	.word	0x200073d0

08009928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800992e:	4b28      	ldr	r3, [pc, #160]	@ (80099d0 <vTaskSwitchContext+0xa8>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009936:	4b27      	ldr	r3, [pc, #156]	@ (80099d4 <vTaskSwitchContext+0xac>)
 8009938:	2201      	movs	r2, #1
 800993a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800993c:	e042      	b.n	80099c4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800993e:	4b25      	ldr	r3, [pc, #148]	@ (80099d4 <vTaskSwitchContext+0xac>)
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009944:	4b24      	ldr	r3, [pc, #144]	@ (80099d8 <vTaskSwitchContext+0xb0>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]
 800994a:	e011      	b.n	8009970 <vTaskSwitchContext+0x48>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10b      	bne.n	800996a <vTaskSwitchContext+0x42>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	607b      	str	r3, [r7, #4]
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	e7fd      	b.n	8009966 <vTaskSwitchContext+0x3e>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b01      	subs	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	491a      	ldr	r1, [pc, #104]	@ (80099dc <vTaskSwitchContext+0xb4>)
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0e3      	beq.n	800994c <vTaskSwitchContext+0x24>
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4a13      	ldr	r2, [pc, #76]	@ (80099dc <vTaskSwitchContext+0xb4>)
 8009990:	4413      	add	r3, r2
 8009992:	60bb      	str	r3, [r7, #8]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	605a      	str	r2, [r3, #4]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	3308      	adds	r3, #8
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d104      	bne.n	80099b4 <vTaskSwitchContext+0x8c>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	605a      	str	r2, [r3, #4]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	4a09      	ldr	r2, [pc, #36]	@ (80099e0 <vTaskSwitchContext+0xb8>)
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	4a06      	ldr	r2, [pc, #24]	@ (80099d8 <vTaskSwitchContext+0xb0>)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6013      	str	r3, [r2, #0]
}
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	200073e8 	.word	0x200073e8
 80099d4:	200073d4 	.word	0x200073d4
 80099d8:	200073c8 	.word	0x200073c8
 80099dc:	20006ef0 	.word	0x20006ef0
 80099e0:	20006eec 	.word	0x20006eec

080099e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10b      	bne.n	8009a0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	60fb      	str	r3, [r7, #12]
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	e7fd      	b.n	8009a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a0c:	4b07      	ldr	r3, [pc, #28]	@ (8009a2c <vTaskPlaceOnEventList+0x48>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3318      	adds	r3, #24
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7fe fe70 	bl	80086fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	6838      	ldr	r0, [r7, #0]
 8009a1e:	f000 faa9 	bl	8009f74 <prvAddCurrentTaskToDelayedList>
}
 8009a22:	bf00      	nop
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20006eec 	.word	0x20006eec

08009a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	617b      	str	r3, [r7, #20]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3318      	adds	r3, #24
 8009a60:	4619      	mov	r1, r3
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7fe fe25 	bl	80086b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	68b8      	ldr	r0, [r7, #8]
 8009a78:	f000 fa7c 	bl	8009f74 <prvAddCurrentTaskToDelayedList>
	}
 8009a7c:	bf00      	nop
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	20006eec 	.word	0x20006eec

08009a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10b      	bne.n	8009ab6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60fb      	str	r3, [r7, #12]
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	e7fd      	b.n	8009ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	3318      	adds	r3, #24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fe56 	bl	800876c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b38 <xTaskRemoveFromEventList+0xb0>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11d      	bne.n	8009b04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe fe4d 	bl	800876c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad6:	4b19      	ldr	r3, [pc, #100]	@ (8009b3c <xTaskRemoveFromEventList+0xb4>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d903      	bls.n	8009ae6 <xTaskRemoveFromEventList+0x5e>
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	4a16      	ldr	r2, [pc, #88]	@ (8009b3c <xTaskRemoveFromEventList+0xb4>)
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4a13      	ldr	r2, [pc, #76]	@ (8009b40 <xTaskRemoveFromEventList+0xb8>)
 8009af4:	441a      	add	r2, r3
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7fe fdd8 	bl	80086b2 <vListInsertEnd>
 8009b02:	e005      	b.n	8009b10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	3318      	adds	r3, #24
 8009b08:	4619      	mov	r1, r3
 8009b0a:	480e      	ldr	r0, [pc, #56]	@ (8009b44 <xTaskRemoveFromEventList+0xbc>)
 8009b0c:	f7fe fdd1 	bl	80086b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b14:	4b0c      	ldr	r3, [pc, #48]	@ (8009b48 <xTaskRemoveFromEventList+0xc0>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d905      	bls.n	8009b2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b22:	4b0a      	ldr	r3, [pc, #40]	@ (8009b4c <xTaskRemoveFromEventList+0xc4>)
 8009b24:	2201      	movs	r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e001      	b.n	8009b2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b2e:	697b      	ldr	r3, [r7, #20]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	200073e8 	.word	0x200073e8
 8009b3c:	200073c8 	.word	0x200073c8
 8009b40:	20006ef0 	.word	0x20006ef0
 8009b44:	20007380 	.word	0x20007380
 8009b48:	20006eec 	.word	0x20006eec
 8009b4c:	200073d4 	.word	0x200073d4

08009b50 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10b      	bne.n	8009b76 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60fb      	str	r3, [r7, #12]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009b76:	f000 fedf 	bl	800a938 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b7a:	4b07      	ldr	r3, [pc, #28]	@ (8009b98 <vTaskSetTimeOutState+0x48>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009b82:	4b06      	ldr	r3, [pc, #24]	@ (8009b9c <vTaskSetTimeOutState+0x4c>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009b8a:	f000 ff07 	bl	800a99c <vPortExitCritical>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200073d8 	.word	0x200073d8
 8009b9c:	200073c4 	.word	0x200073c4

08009ba0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ba8:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <vTaskInternalSetTimeOutState+0x24>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bb0:	4b05      	ldr	r3, [pc, #20]	@ (8009bc8 <vTaskInternalSetTimeOutState+0x28>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	605a      	str	r2, [r3, #4]
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	200073d8 	.word	0x200073d8
 8009bc8:	200073c4 	.word	0x200073c4

08009bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10b      	bne.n	8009bf4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	613b      	str	r3, [r7, #16]
}
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
 8009bf2:	e7fd      	b.n	8009bf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10b      	bne.n	8009c12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	60fb      	str	r3, [r7, #12]
}
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	e7fd      	b.n	8009c0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c12:	f000 fe91 	bl	800a938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c16:	4b1d      	ldr	r3, [pc, #116]	@ (8009c8c <xTaskCheckForTimeOut+0xc0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c2e:	d102      	bne.n	8009c36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61fb      	str	r3, [r7, #28]
 8009c34:	e023      	b.n	8009c7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	4b15      	ldr	r3, [pc, #84]	@ (8009c90 <xTaskCheckForTimeOut+0xc4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d007      	beq.n	8009c52 <xTaskCheckForTimeOut+0x86>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d302      	bcc.n	8009c52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	61fb      	str	r3, [r7, #28]
 8009c50:	e015      	b.n	8009c7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d20b      	bcs.n	8009c74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	1ad2      	subs	r2, r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff ff99 	bl	8009ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	61fb      	str	r3, [r7, #28]
 8009c72:	e004      	b.n	8009c7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2200      	movs	r2, #0
 8009c78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c7e:	f000 fe8d 	bl	800a99c <vPortExitCritical>

	return xReturn;
 8009c82:	69fb      	ldr	r3, [r7, #28]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	200073c4 	.word	0x200073c4
 8009c90:	200073d8 	.word	0x200073d8

08009c94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c98:	4b03      	ldr	r3, [pc, #12]	@ (8009ca8 <vTaskMissedYield+0x14>)
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	601a      	str	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	200073d4 	.word	0x200073d4

08009cac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cb4:	f000 f852 	bl	8009d5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cb8:	4b06      	ldr	r3, [pc, #24]	@ (8009cd4 <prvIdleTask+0x28>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d9f9      	bls.n	8009cb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cc0:	4b05      	ldr	r3, [pc, #20]	@ (8009cd8 <prvIdleTask+0x2c>)
 8009cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cd0:	e7f0      	b.n	8009cb4 <prvIdleTask+0x8>
 8009cd2:	bf00      	nop
 8009cd4:	20006ef0 	.word	0x20006ef0
 8009cd8:	e000ed04 	.word	0xe000ed04

08009cdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	607b      	str	r3, [r7, #4]
 8009ce6:	e00c      	b.n	8009d02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	4613      	mov	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4a12      	ldr	r2, [pc, #72]	@ (8009d3c <prvInitialiseTaskLists+0x60>)
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fcae 	bl	8008658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	607b      	str	r3, [r7, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b37      	cmp	r3, #55	@ 0x37
 8009d06:	d9ef      	bls.n	8009ce8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d08:	480d      	ldr	r0, [pc, #52]	@ (8009d40 <prvInitialiseTaskLists+0x64>)
 8009d0a:	f7fe fca5 	bl	8008658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d0e:	480d      	ldr	r0, [pc, #52]	@ (8009d44 <prvInitialiseTaskLists+0x68>)
 8009d10:	f7fe fca2 	bl	8008658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d14:	480c      	ldr	r0, [pc, #48]	@ (8009d48 <prvInitialiseTaskLists+0x6c>)
 8009d16:	f7fe fc9f 	bl	8008658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d1a:	480c      	ldr	r0, [pc, #48]	@ (8009d4c <prvInitialiseTaskLists+0x70>)
 8009d1c:	f7fe fc9c 	bl	8008658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d20:	480b      	ldr	r0, [pc, #44]	@ (8009d50 <prvInitialiseTaskLists+0x74>)
 8009d22:	f7fe fc99 	bl	8008658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d26:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <prvInitialiseTaskLists+0x78>)
 8009d28:	4a05      	ldr	r2, [pc, #20]	@ (8009d40 <prvInitialiseTaskLists+0x64>)
 8009d2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d58 <prvInitialiseTaskLists+0x7c>)
 8009d2e:	4a05      	ldr	r2, [pc, #20]	@ (8009d44 <prvInitialiseTaskLists+0x68>)
 8009d30:	601a      	str	r2, [r3, #0]
}
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20006ef0 	.word	0x20006ef0
 8009d40:	20007350 	.word	0x20007350
 8009d44:	20007364 	.word	0x20007364
 8009d48:	20007380 	.word	0x20007380
 8009d4c:	20007394 	.word	0x20007394
 8009d50:	200073ac 	.word	0x200073ac
 8009d54:	20007378 	.word	0x20007378
 8009d58:	2000737c 	.word	0x2000737c

08009d5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d62:	e019      	b.n	8009d98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d64:	f000 fde8 	bl	800a938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d68:	4b10      	ldr	r3, [pc, #64]	@ (8009dac <prvCheckTasksWaitingTermination+0x50>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fcf9 	bl	800876c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009db0 <prvCheckTasksWaitingTermination+0x54>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	4a0b      	ldr	r2, [pc, #44]	@ (8009db0 <prvCheckTasksWaitingTermination+0x54>)
 8009d82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d84:	4b0b      	ldr	r3, [pc, #44]	@ (8009db4 <prvCheckTasksWaitingTermination+0x58>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8009db4 <prvCheckTasksWaitingTermination+0x58>)
 8009d8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d8e:	f000 fe05 	bl	800a99c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f810 	bl	8009db8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d98:	4b06      	ldr	r3, [pc, #24]	@ (8009db4 <prvCheckTasksWaitingTermination+0x58>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e1      	bne.n	8009d64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20007394 	.word	0x20007394
 8009db0:	200073c0 	.word	0x200073c0
 8009db4:	200073a8 	.word	0x200073a8

08009db8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d108      	bne.n	8009ddc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 ffa2 	bl	800ad18 <vPortFree>
				vPortFree( pxTCB );
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 ff9f 	bl	800ad18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009dda:	e019      	b.n	8009e10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d103      	bne.n	8009dee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 ff96 	bl	800ad18 <vPortFree>
	}
 8009dec:	e010      	b.n	8009e10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d00b      	beq.n	8009e10 <prvDeleteTCB+0x58>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	60fb      	str	r3, [r7, #12]
}
 8009e0a:	bf00      	nop
 8009e0c:	bf00      	nop
 8009e0e:	e7fd      	b.n	8009e0c <prvDeleteTCB+0x54>
	}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e50 <prvResetNextTaskUnblockTime+0x38>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e28:	4b0a      	ldr	r3, [pc, #40]	@ (8009e54 <prvResetNextTaskUnblockTime+0x3c>)
 8009e2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e30:	e008      	b.n	8009e44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e32:	4b07      	ldr	r3, [pc, #28]	@ (8009e50 <prvResetNextTaskUnblockTime+0x38>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	4a04      	ldr	r2, [pc, #16]	@ (8009e54 <prvResetNextTaskUnblockTime+0x3c>)
 8009e42:	6013      	str	r3, [r2, #0]
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	20007378 	.word	0x20007378
 8009e54:	200073e0 	.word	0x200073e0

08009e58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e8c <xTaskGetSchedulerState+0x34>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d102      	bne.n	8009e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e66:	2301      	movs	r3, #1
 8009e68:	607b      	str	r3, [r7, #4]
 8009e6a:	e008      	b.n	8009e7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e6c:	4b08      	ldr	r3, [pc, #32]	@ (8009e90 <xTaskGetSchedulerState+0x38>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e74:	2302      	movs	r3, #2
 8009e76:	607b      	str	r3, [r7, #4]
 8009e78:	e001      	b.n	8009e7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e7e:	687b      	ldr	r3, [r7, #4]
	}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	200073cc 	.word	0x200073cc
 8009e90:	200073e8 	.word	0x200073e8

08009e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d058      	beq.n	8009f5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8009f68 <xTaskPriorityDisinherit+0xd4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d00b      	beq.n	8009ecc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	60fb      	str	r3, [r7, #12]
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	e7fd      	b.n	8009ec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10b      	bne.n	8009eec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60bb      	str	r3, [r7, #8]
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	e7fd      	b.n	8009ee8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef0:	1e5a      	subs	r2, r3, #1
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d02c      	beq.n	8009f5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d128      	bne.n	8009f5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe fc2c 	bl	800876c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009f6c <xTaskPriorityDisinherit+0xd8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d903      	bls.n	8009f3c <xTaskPriorityDisinherit+0xa8>
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f38:	4a0c      	ldr	r2, [pc, #48]	@ (8009f6c <xTaskPriorityDisinherit+0xd8>)
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4a09      	ldr	r2, [pc, #36]	@ (8009f70 <xTaskPriorityDisinherit+0xdc>)
 8009f4a:	441a      	add	r2, r3
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	4619      	mov	r1, r3
 8009f52:	4610      	mov	r0, r2
 8009f54:	f7fe fbad 	bl	80086b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f5c:	697b      	ldr	r3, [r7, #20]
	}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20006eec 	.word	0x20006eec
 8009f6c:	200073c8 	.word	0x200073c8
 8009f70:	20006ef0 	.word	0x20006ef0

08009f74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f7e:	4b21      	ldr	r3, [pc, #132]	@ (800a004 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f84:	4b20      	ldr	r3, [pc, #128]	@ (800a008 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fbee 	bl	800876c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f96:	d10a      	bne.n	8009fae <prvAddCurrentTaskToDelayedList+0x3a>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f9e:	4b1a      	ldr	r3, [pc, #104]	@ (800a008 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4819      	ldr	r0, [pc, #100]	@ (800a00c <prvAddCurrentTaskToDelayedList+0x98>)
 8009fa8:	f7fe fb83 	bl	80086b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fac:	e026      	b.n	8009ffc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fb6:	4b14      	ldr	r3, [pc, #80]	@ (800a008 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d209      	bcs.n	8009fda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fc6:	4b12      	ldr	r3, [pc, #72]	@ (800a010 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	4b0f      	ldr	r3, [pc, #60]	@ (800a008 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	f7fe fb91 	bl	80086fa <vListInsert>
}
 8009fd8:	e010      	b.n	8009ffc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fda:	4b0e      	ldr	r3, [pc, #56]	@ (800a014 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4b0a      	ldr	r3, [pc, #40]	@ (800a008 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7fe fb87 	bl	80086fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fec:	4b0a      	ldr	r3, [pc, #40]	@ (800a018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d202      	bcs.n	8009ffc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ff6:	4a08      	ldr	r2, [pc, #32]	@ (800a018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6013      	str	r3, [r2, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	200073c4 	.word	0x200073c4
 800a008:	20006eec 	.word	0x20006eec
 800a00c:	200073ac 	.word	0x200073ac
 800a010:	2000737c 	.word	0x2000737c
 800a014:	20007378 	.word	0x20007378
 800a018:	200073e0 	.word	0x200073e0

0800a01c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08a      	sub	sp, #40	@ 0x28
 800a020:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a026:	f000 fb13 	bl	800a650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a02a:	4b1d      	ldr	r3, [pc, #116]	@ (800a0a0 <xTimerCreateTimerTask+0x84>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d021      	beq.n	800a076 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a03a:	1d3a      	adds	r2, r7, #4
 800a03c:	f107 0108 	add.w	r1, r7, #8
 800a040:	f107 030c 	add.w	r3, r7, #12
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe faed 	bl	8008624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	9202      	str	r2, [sp, #8]
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	2302      	movs	r3, #2
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	2300      	movs	r3, #0
 800a05a:	460a      	mov	r2, r1
 800a05c:	4911      	ldr	r1, [pc, #68]	@ (800a0a4 <xTimerCreateTimerTask+0x88>)
 800a05e:	4812      	ldr	r0, [pc, #72]	@ (800a0a8 <xTimerCreateTimerTask+0x8c>)
 800a060:	f7ff f8a8 	bl	80091b4 <xTaskCreateStatic>
 800a064:	4603      	mov	r3, r0
 800a066:	4a11      	ldr	r2, [pc, #68]	@ (800a0ac <xTimerCreateTimerTask+0x90>)
 800a068:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a06a:	4b10      	ldr	r3, [pc, #64]	@ (800a0ac <xTimerCreateTimerTask+0x90>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a072:	2301      	movs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10b      	bne.n	800a094 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	613b      	str	r3, [r7, #16]
}
 800a08e:	bf00      	nop
 800a090:	bf00      	nop
 800a092:	e7fd      	b.n	800a090 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a094:	697b      	ldr	r3, [r7, #20]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	2000741c 	.word	0x2000741c
 800a0a4:	08018e64 	.word	0x08018e64
 800a0a8:	0800a1e9 	.word	0x0800a1e9
 800a0ac:	20007420 	.word	0x20007420

0800a0b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08a      	sub	sp, #40	@ 0x28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10b      	bne.n	800a0e0 <xTimerGenericCommand+0x30>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	623b      	str	r3, [r7, #32]
}
 800a0da:	bf00      	nop
 800a0dc:	bf00      	nop
 800a0de:	e7fd      	b.n	800a0dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0e0:	4b19      	ldr	r3, [pc, #100]	@ (800a148 <xTimerGenericCommand+0x98>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d02a      	beq.n	800a13e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b05      	cmp	r3, #5
 800a0f8:	dc18      	bgt.n	800a12c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0fa:	f7ff fead 	bl	8009e58 <xTaskGetSchedulerState>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b02      	cmp	r3, #2
 800a102:	d109      	bne.n	800a118 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a104:	4b10      	ldr	r3, [pc, #64]	@ (800a148 <xTimerGenericCommand+0x98>)
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	f107 0110 	add.w	r1, r7, #16
 800a10c:	2300      	movs	r3, #0
 800a10e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a110:	f7fe fc60 	bl	80089d4 <xQueueGenericSend>
 800a114:	6278      	str	r0, [r7, #36]	@ 0x24
 800a116:	e012      	b.n	800a13e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a118:	4b0b      	ldr	r3, [pc, #44]	@ (800a148 <xTimerGenericCommand+0x98>)
 800a11a:	6818      	ldr	r0, [r3, #0]
 800a11c:	f107 0110 	add.w	r1, r7, #16
 800a120:	2300      	movs	r3, #0
 800a122:	2200      	movs	r2, #0
 800a124:	f7fe fc56 	bl	80089d4 <xQueueGenericSend>
 800a128:	6278      	str	r0, [r7, #36]	@ 0x24
 800a12a:	e008      	b.n	800a13e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <xTimerGenericCommand+0x98>)
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	f107 0110 	add.w	r1, r7, #16
 800a134:	2300      	movs	r3, #0
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	f7fe fd4e 	bl	8008bd8 <xQueueGenericSendFromISR>
 800a13c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a140:	4618      	mov	r0, r3
 800a142:	3728      	adds	r7, #40	@ 0x28
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	2000741c 	.word	0x2000741c

0800a14c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af02      	add	r7, sp, #8
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a156:	4b23      	ldr	r3, [pc, #140]	@ (800a1e4 <prvProcessExpiredTimer+0x98>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	3304      	adds	r3, #4
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fb01 	bl	800876c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d023      	beq.n	800a1c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	699a      	ldr	r2, [r3, #24]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	18d1      	adds	r1, r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	6978      	ldr	r0, [r7, #20]
 800a186:	f000 f8d5 	bl	800a334 <prvInsertTimerInActiveList>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d020      	beq.n	800a1d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a190:	2300      	movs	r3, #0
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	2100      	movs	r1, #0
 800a19a:	6978      	ldr	r0, [r7, #20]
 800a19c:	f7ff ff88 	bl	800a0b0 <xTimerGenericCommand>
 800a1a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d114      	bne.n	800a1d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	60fb      	str	r3, [r7, #12]
}
 800a1ba:	bf00      	nop
 800a1bc:	bf00      	nop
 800a1be:	e7fd      	b.n	800a1bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1c6:	f023 0301 	bic.w	r3, r3, #1
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	6978      	ldr	r0, [r7, #20]
 800a1d8:	4798      	blx	r3
}
 800a1da:	bf00      	nop
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20007414 	.word	0x20007414

0800a1e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1f0:	f107 0308 	add.w	r3, r7, #8
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 f859 	bl	800a2ac <prvGetNextExpireTime>
 800a1fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	4619      	mov	r1, r3
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f805 	bl	800a210 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a206:	f000 f8d7 	bl	800a3b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a20a:	bf00      	nop
 800a20c:	e7f0      	b.n	800a1f0 <prvTimerTask+0x8>
	...

0800a210 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a21a:	f7ff fa0f 	bl	800963c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a21e:	f107 0308 	add.w	r3, r7, #8
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f866 	bl	800a2f4 <prvSampleTimeNow>
 800a228:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d130      	bne.n	800a292 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <prvProcessTimerOrBlockTask+0x3c>
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d806      	bhi.n	800a24c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a23e:	f7ff fa0b 	bl	8009658 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff ff81 	bl	800a14c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a24a:	e024      	b.n	800a296 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a252:	4b13      	ldr	r3, [pc, #76]	@ (800a2a0 <prvProcessTimerOrBlockTask+0x90>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <prvProcessTimerOrBlockTask+0x50>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e000      	b.n	800a262 <prvProcessTimerOrBlockTask+0x52>
 800a260:	2300      	movs	r3, #0
 800a262:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a264:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <prvProcessTimerOrBlockTask+0x94>)
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	4619      	mov	r1, r3
 800a272:	f7fe ff6b 	bl	800914c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a276:	f7ff f9ef 	bl	8009658 <xTaskResumeAll>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a280:	4b09      	ldr	r3, [pc, #36]	@ (800a2a8 <prvProcessTimerOrBlockTask+0x98>)
 800a282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
}
 800a290:	e001      	b.n	800a296 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a292:	f7ff f9e1 	bl	8009658 <xTaskResumeAll>
}
 800a296:	bf00      	nop
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20007418 	.word	0x20007418
 800a2a4:	2000741c 	.word	0x2000741c
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f0 <prvGetNextExpireTime+0x44>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <prvGetNextExpireTime+0x16>
 800a2be:	2201      	movs	r2, #1
 800a2c0:	e000      	b.n	800a2c4 <prvGetNextExpireTime+0x18>
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d105      	bne.n	800a2dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2d0:	4b07      	ldr	r3, [pc, #28]	@ (800a2f0 <prvGetNextExpireTime+0x44>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	60fb      	str	r3, [r7, #12]
 800a2da:	e001      	b.n	800a2e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	20007414 	.word	0x20007414

0800a2f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2fc:	f7ff fa4a 	bl	8009794 <xTaskGetTickCount>
 800a300:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a302:	4b0b      	ldr	r3, [pc, #44]	@ (800a330 <prvSampleTimeNow+0x3c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d205      	bcs.n	800a318 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a30c:	f000 f93a 	bl	800a584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	e002      	b.n	800a31e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a31e:	4a04      	ldr	r2, [pc, #16]	@ (800a330 <prvSampleTimeNow+0x3c>)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a324:	68fb      	ldr	r3, [r7, #12]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20007424 	.word	0x20007424

0800a334 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	68ba      	ldr	r2, [r7, #8]
 800a34a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d812      	bhi.n	800a380 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	429a      	cmp	r2, r3
 800a366:	d302      	bcc.n	800a36e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a368:	2301      	movs	r3, #1
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	e01b      	b.n	800a3a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a36e:	4b10      	ldr	r3, [pc, #64]	@ (800a3b0 <prvInsertTimerInActiveList+0x7c>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3304      	adds	r3, #4
 800a376:	4619      	mov	r1, r3
 800a378:	4610      	mov	r0, r2
 800a37a:	f7fe f9be 	bl	80086fa <vListInsert>
 800a37e:	e012      	b.n	800a3a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d206      	bcs.n	800a396 <prvInsertTimerInActiveList+0x62>
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d302      	bcc.n	800a396 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a390:	2301      	movs	r3, #1
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	e007      	b.n	800a3a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a396:	4b07      	ldr	r3, [pc, #28]	@ (800a3b4 <prvInsertTimerInActiveList+0x80>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3304      	adds	r3, #4
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	f7fe f9aa 	bl	80086fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3a6:	697b      	ldr	r3, [r7, #20]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20007418 	.word	0x20007418
 800a3b4:	20007414 	.word	0x20007414

0800a3b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08e      	sub	sp, #56	@ 0x38
 800a3bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3be:	e0ce      	b.n	800a55e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	da19      	bge.n	800a3fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3c6:	1d3b      	adds	r3, r7, #4
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	61fb      	str	r3, [r7, #28]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f0:	6850      	ldr	r0, [r2, #4]
 800a3f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f4:	6892      	ldr	r2, [r2, #8]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f2c0 80ae 	blt.w	800a55e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d004      	beq.n	800a418 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a410:	3304      	adds	r3, #4
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe f9aa 	bl	800876c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a418:	463b      	mov	r3, r7
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff ff6a 	bl	800a2f4 <prvSampleTimeNow>
 800a420:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b09      	cmp	r3, #9
 800a426:	f200 8097 	bhi.w	800a558 <prvProcessReceivedCommands+0x1a0>
 800a42a:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <prvProcessReceivedCommands+0x78>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a459 	.word	0x0800a459
 800a43c:	0800a4cf 	.word	0x0800a4cf
 800a440:	0800a4e3 	.word	0x0800a4e3
 800a444:	0800a52f 	.word	0x0800a52f
 800a448:	0800a459 	.word	0x0800a459
 800a44c:	0800a459 	.word	0x0800a459
 800a450:	0800a4cf 	.word	0x0800a4cf
 800a454:	0800a4e3 	.word	0x0800a4e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a45e:	f043 0301 	orr.w	r3, r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	18d1      	adds	r1, r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a478:	f7ff ff5c 	bl	800a334 <prvInsertTimerInActiveList>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d06c      	beq.n	800a55c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a488:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d061      	beq.n	800a55c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	441a      	add	r2, r3
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4aa:	f7ff fe01 	bl	800a0b0 <xTimerGenericCommand>
 800a4ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d152      	bne.n	800a55c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	61bb      	str	r3, [r7, #24]
}
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
 800a4cc:	e7fd      	b.n	800a4ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4d4:	f023 0301 	bic.w	r3, r3, #1
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4e0:	e03d      	b.n	800a55e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4e8:	f043 0301 	orr.w	r3, r3, #1
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10b      	bne.n	800a51a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	617b      	str	r3, [r7, #20]
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop
 800a518:	e7fd      	b.n	800a516 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51c:	699a      	ldr	r2, [r3, #24]
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	18d1      	adds	r1, r2, r3
 800a522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a528:	f7ff ff04 	bl	800a334 <prvInsertTimerInActiveList>
					break;
 800a52c:	e017      	b.n	800a55e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a53c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a53e:	f000 fbeb 	bl	800ad18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a542:	e00c      	b.n	800a55e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a54a:	f023 0301 	bic.w	r3, r3, #1
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a556:	e002      	b.n	800a55e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a558:	bf00      	nop
 800a55a:	e000      	b.n	800a55e <prvProcessReceivedCommands+0x1a6>
					break;
 800a55c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a55e:	4b08      	ldr	r3, [pc, #32]	@ (800a580 <prvProcessReceivedCommands+0x1c8>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	1d39      	adds	r1, r7, #4
 800a564:	2200      	movs	r2, #0
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fbd4 	bl	8008d14 <xQueueReceive>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f47f af26 	bne.w	800a3c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	3730      	adds	r7, #48	@ 0x30
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	2000741c 	.word	0x2000741c

0800a584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a58a:	e049      	b.n	800a620 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a58c:	4b2e      	ldr	r3, [pc, #184]	@ (800a648 <prvSwitchTimerLists+0xc4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a596:	4b2c      	ldr	r3, [pc, #176]	@ (800a648 <prvSwitchTimerLists+0xc4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fe f8e1 	bl	800876c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d02f      	beq.n	800a620 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d90e      	bls.n	800a5f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5de:	4b1a      	ldr	r3, [pc, #104]	@ (800a648 <prvSwitchTimerLists+0xc4>)
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f7fe f886 	bl	80086fa <vListInsert>
 800a5ee:	e017      	b.n	800a620 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7ff fd58 	bl	800a0b0 <xTimerGenericCommand>
 800a600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10b      	bne.n	800a620 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	603b      	str	r3, [r7, #0]
}
 800a61a:	bf00      	nop
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a620:	4b09      	ldr	r3, [pc, #36]	@ (800a648 <prvSwitchTimerLists+0xc4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1b0      	bne.n	800a58c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a62a:	4b07      	ldr	r3, [pc, #28]	@ (800a648 <prvSwitchTimerLists+0xc4>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a630:	4b06      	ldr	r3, [pc, #24]	@ (800a64c <prvSwitchTimerLists+0xc8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a04      	ldr	r2, [pc, #16]	@ (800a648 <prvSwitchTimerLists+0xc4>)
 800a636:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a638:	4a04      	ldr	r2, [pc, #16]	@ (800a64c <prvSwitchTimerLists+0xc8>)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	6013      	str	r3, [r2, #0]
}
 800a63e:	bf00      	nop
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20007414 	.word	0x20007414
 800a64c:	20007418 	.word	0x20007418

0800a650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a656:	f000 f96f 	bl	800a938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a65a:	4b15      	ldr	r3, [pc, #84]	@ (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d120      	bne.n	800a6a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a662:	4814      	ldr	r0, [pc, #80]	@ (800a6b4 <prvCheckForValidListAndQueue+0x64>)
 800a664:	f7fd fff8 	bl	8008658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a668:	4813      	ldr	r0, [pc, #76]	@ (800a6b8 <prvCheckForValidListAndQueue+0x68>)
 800a66a:	f7fd fff5 	bl	8008658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a66e:	4b13      	ldr	r3, [pc, #76]	@ (800a6bc <prvCheckForValidListAndQueue+0x6c>)
 800a670:	4a10      	ldr	r2, [pc, #64]	@ (800a6b4 <prvCheckForValidListAndQueue+0x64>)
 800a672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a674:	4b12      	ldr	r3, [pc, #72]	@ (800a6c0 <prvCheckForValidListAndQueue+0x70>)
 800a676:	4a10      	ldr	r2, [pc, #64]	@ (800a6b8 <prvCheckForValidListAndQueue+0x68>)
 800a678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a67a:	2300      	movs	r3, #0
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	4b11      	ldr	r3, [pc, #68]	@ (800a6c4 <prvCheckForValidListAndQueue+0x74>)
 800a680:	4a11      	ldr	r2, [pc, #68]	@ (800a6c8 <prvCheckForValidListAndQueue+0x78>)
 800a682:	2110      	movs	r1, #16
 800a684:	200a      	movs	r0, #10
 800a686:	f7fe f905 	bl	8008894 <xQueueGenericCreateStatic>
 800a68a:	4603      	mov	r3, r0
 800a68c:	4a08      	ldr	r2, [pc, #32]	@ (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a68e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a690:	4b07      	ldr	r3, [pc, #28]	@ (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a698:	4b05      	ldr	r3, [pc, #20]	@ (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	490b      	ldr	r1, [pc, #44]	@ (800a6cc <prvCheckForValidListAndQueue+0x7c>)
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe fd2a 	bl	80090f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6a4:	f000 f97a 	bl	800a99c <vPortExitCritical>
}
 800a6a8:	bf00      	nop
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	2000741c 	.word	0x2000741c
 800a6b4:	200073ec 	.word	0x200073ec
 800a6b8:	20007400 	.word	0x20007400
 800a6bc:	20007414 	.word	0x20007414
 800a6c0:	20007418 	.word	0x20007418
 800a6c4:	200074c8 	.word	0x200074c8
 800a6c8:	20007428 	.word	0x20007428
 800a6cc:	08018e6c 	.word	0x08018e6c

0800a6d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3b04      	subs	r3, #4
 800a6e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a6e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3b04      	subs	r3, #4
 800a6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f023 0201 	bic.w	r2, r3, #1
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3b04      	subs	r3, #4
 800a6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a700:	4a0c      	ldr	r2, [pc, #48]	@ (800a734 <pxPortInitialiseStack+0x64>)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3b14      	subs	r3, #20
 800a70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3b04      	subs	r3, #4
 800a716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f06f 0202 	mvn.w	r2, #2
 800a71e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3b20      	subs	r3, #32
 800a724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a726:	68fb      	ldr	r3, [r7, #12]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	0800a739 	.word	0x0800a739

0800a738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a742:	4b13      	ldr	r3, [pc, #76]	@ (800a790 <prvTaskExitError+0x58>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a74a:	d00b      	beq.n	800a764 <prvTaskExitError+0x2c>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	60fb      	str	r3, [r7, #12]
}
 800a75e:	bf00      	nop
 800a760:	bf00      	nop
 800a762:	e7fd      	b.n	800a760 <prvTaskExitError+0x28>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	60bb      	str	r3, [r7, #8]
}
 800a776:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a778:	bf00      	nop
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0fc      	beq.n	800a77a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	20000010 	.word	0x20000010
	...

0800a7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7a0:	4b07      	ldr	r3, [pc, #28]	@ (800a7c0 <pxCurrentTCBConst2>)
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	6808      	ldr	r0, [r1, #0]
 800a7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	f380 8809 	msr	PSP, r0
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8811 	msr	BASEPRI, r0
 800a7ba:	4770      	bx	lr
 800a7bc:	f3af 8000 	nop.w

0800a7c0 <pxCurrentTCBConst2>:
 800a7c0:	20006eec 	.word	0x20006eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop

0800a7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7c8:	4808      	ldr	r0, [pc, #32]	@ (800a7ec <prvPortStartFirstTask+0x24>)
 800a7ca:	6800      	ldr	r0, [r0, #0]
 800a7cc:	6800      	ldr	r0, [r0, #0]
 800a7ce:	f380 8808 	msr	MSP, r0
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8814 	msr	CONTROL, r0
 800a7da:	b662      	cpsie	i
 800a7dc:	b661      	cpsie	f
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	df00      	svc	0
 800a7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ea:	bf00      	nop
 800a7ec:	e000ed08 	.word	0xe000ed08

0800a7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7f6:	4b47      	ldr	r3, [pc, #284]	@ (800a914 <xPortStartScheduler+0x124>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a47      	ldr	r2, [pc, #284]	@ (800a918 <xPortStartScheduler+0x128>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d10b      	bne.n	800a818 <xPortStartScheduler+0x28>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	613b      	str	r3, [r7, #16]
}
 800a812:	bf00      	nop
 800a814:	bf00      	nop
 800a816:	e7fd      	b.n	800a814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a818:	4b3e      	ldr	r3, [pc, #248]	@ (800a914 <xPortStartScheduler+0x124>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a3f      	ldr	r2, [pc, #252]	@ (800a91c <xPortStartScheduler+0x12c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d10b      	bne.n	800a83a <xPortStartScheduler+0x4a>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	60fb      	str	r3, [r7, #12]
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	e7fd      	b.n	800a836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a83a:	4b39      	ldr	r3, [pc, #228]	@ (800a920 <xPortStartScheduler+0x130>)
 800a83c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	22ff      	movs	r2, #255	@ 0xff
 800a84a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	4b31      	ldr	r3, [pc, #196]	@ (800a924 <xPortStartScheduler+0x134>)
 800a860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a862:	4b31      	ldr	r3, [pc, #196]	@ (800a928 <xPortStartScheduler+0x138>)
 800a864:	2207      	movs	r2, #7
 800a866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a868:	e009      	b.n	800a87e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a86a:	4b2f      	ldr	r3, [pc, #188]	@ (800a928 <xPortStartScheduler+0x138>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3b01      	subs	r3, #1
 800a870:	4a2d      	ldr	r2, [pc, #180]	@ (800a928 <xPortStartScheduler+0x138>)
 800a872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a874:	78fb      	ldrb	r3, [r7, #3]
 800a876:	b2db      	uxtb	r3, r3
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a886:	2b80      	cmp	r3, #128	@ 0x80
 800a888:	d0ef      	beq.n	800a86a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a88a:	4b27      	ldr	r3, [pc, #156]	@ (800a928 <xPortStartScheduler+0x138>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f1c3 0307 	rsb	r3, r3, #7
 800a892:	2b04      	cmp	r3, #4
 800a894:	d00b      	beq.n	800a8ae <xPortStartScheduler+0xbe>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	60bb      	str	r3, [r7, #8]
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	e7fd      	b.n	800a8aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a928 <xPortStartScheduler+0x138>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	021b      	lsls	r3, r3, #8
 800a8b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a928 <xPortStartScheduler+0x138>)
 800a8b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a928 <xPortStartScheduler+0x138>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8c0:	4a19      	ldr	r2, [pc, #100]	@ (800a928 <xPortStartScheduler+0x138>)
 800a8c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	b2da      	uxtb	r2, r3
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8cc:	4b17      	ldr	r3, [pc, #92]	@ (800a92c <xPortStartScheduler+0x13c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a16      	ldr	r2, [pc, #88]	@ (800a92c <xPortStartScheduler+0x13c>)
 800a8d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a8d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8d8:	4b14      	ldr	r3, [pc, #80]	@ (800a92c <xPortStartScheduler+0x13c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a13      	ldr	r2, [pc, #76]	@ (800a92c <xPortStartScheduler+0x13c>)
 800a8de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a8e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8e4:	f000 f8da 	bl	800aa9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8e8:	4b11      	ldr	r3, [pc, #68]	@ (800a930 <xPortStartScheduler+0x140>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8ee:	f000 f8f9 	bl	800aae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8f2:	4b10      	ldr	r3, [pc, #64]	@ (800a934 <xPortStartScheduler+0x144>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a934 <xPortStartScheduler+0x144>)
 800a8f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a8fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8fe:	f7ff ff63 	bl	800a7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a902:	f7ff f811 	bl	8009928 <vTaskSwitchContext>
	prvTaskExitError();
 800a906:	f7ff ff17 	bl	800a738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	e000ed00 	.word	0xe000ed00
 800a918:	410fc271 	.word	0x410fc271
 800a91c:	410fc270 	.word	0x410fc270
 800a920:	e000e400 	.word	0xe000e400
 800a924:	20007518 	.word	0x20007518
 800a928:	2000751c 	.word	0x2000751c
 800a92c:	e000ed20 	.word	0xe000ed20
 800a930:	20000010 	.word	0x20000010
 800a934:	e000ef34 	.word	0xe000ef34

0800a938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a952:	4b10      	ldr	r3, [pc, #64]	@ (800a994 <vPortEnterCritical+0x5c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3301      	adds	r3, #1
 800a958:	4a0e      	ldr	r2, [pc, #56]	@ (800a994 <vPortEnterCritical+0x5c>)
 800a95a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a95c:	4b0d      	ldr	r3, [pc, #52]	@ (800a994 <vPortEnterCritical+0x5c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d110      	bne.n	800a986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a964:	4b0c      	ldr	r3, [pc, #48]	@ (800a998 <vPortEnterCritical+0x60>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <vPortEnterCritical+0x4e>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	603b      	str	r3, [r7, #0]
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	e7fd      	b.n	800a982 <vPortEnterCritical+0x4a>
	}
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	20000010 	.word	0x20000010
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9a2:	4b12      	ldr	r3, [pc, #72]	@ (800a9ec <vPortExitCritical+0x50>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10b      	bne.n	800a9c2 <vPortExitCritical+0x26>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	607b      	str	r3, [r7, #4]
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	e7fd      	b.n	800a9be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ec <vPortExitCritical+0x50>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	4a08      	ldr	r2, [pc, #32]	@ (800a9ec <vPortExitCritical+0x50>)
 800a9ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9cc:	4b07      	ldr	r3, [pc, #28]	@ (800a9ec <vPortExitCritical+0x50>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d105      	bne.n	800a9e0 <vPortExitCritical+0x44>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	f383 8811 	msr	BASEPRI, r3
}
 800a9de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000010 	.word	0x20000010

0800a9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9f0:	f3ef 8009 	mrs	r0, PSP
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	4b15      	ldr	r3, [pc, #84]	@ (800aa50 <pxCurrentTCBConst>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	f01e 0f10 	tst.w	lr, #16
 800aa00:	bf08      	it	eq
 800aa02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa14:	f380 8811 	msr	BASEPRI, r0
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f7fe ff82 	bl	8009928 <vTaskSwitchContext>
 800aa24:	f04f 0000 	mov.w	r0, #0
 800aa28:	f380 8811 	msr	BASEPRI, r0
 800aa2c:	bc09      	pop	{r0, r3}
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	6808      	ldr	r0, [r1, #0]
 800aa32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa36:	f01e 0f10 	tst.w	lr, #16
 800aa3a:	bf08      	it	eq
 800aa3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa40:	f380 8809 	msr	PSP, r0
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst>:
 800aa50:	20006eec 	.word	0x20006eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	607b      	str	r3, [r7, #4]
}
 800aa70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa72:	f7fe fe9f 	bl	80097b4 <xTaskIncrementTick>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	@ (800aa98 <xPortSysTickHandler+0x40>)
 800aa7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	2300      	movs	r3, #0
 800aa86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	f383 8811 	msr	BASEPRI, r3
}
 800aa8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	@ (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	@ (800aad4 <vPortSetupTimerInterrupt+0x38>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	@ (800aad8 <vPortSetupTimerInterrupt+0x3c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	@ (800aadc <vPortSetupTimerInterrupt+0x40>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	099b      	lsrs	r3, r3, #6
 800aab8:	4a09      	ldr	r2, [pc, #36]	@ (800aae0 <vPortSetupTimerInterrupt+0x44>)
 800aaba:	3b01      	subs	r3, #1
 800aabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aabe:	4b04      	ldr	r3, [pc, #16]	@ (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aac0:	2207      	movs	r2, #7
 800aac2:	601a      	str	r2, [r3, #0]
}
 800aac4:	bf00      	nop
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	e000e010 	.word	0xe000e010
 800aad4:	e000e018 	.word	0xe000e018
 800aad8:	20000004 	.word	0x20000004
 800aadc:	10624dd3 	.word	0x10624dd3
 800aae0:	e000e014 	.word	0xe000e014

0800aae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aaf4 <vPortEnableVFP+0x10>
 800aae8:	6801      	ldr	r1, [r0, #0]
 800aaea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aaee:	6001      	str	r1, [r0, #0]
 800aaf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aaf2:	bf00      	nop
 800aaf4:	e000ed88 	.word	0xe000ed88

0800aaf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aafe:	f3ef 8305 	mrs	r3, IPSR
 800ab02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	d915      	bls.n	800ab36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab0a:	4a18      	ldr	r2, [pc, #96]	@ (800ab6c <vPortValidateInterruptPriority+0x74>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab14:	4b16      	ldr	r3, [pc, #88]	@ (800ab70 <vPortValidateInterruptPriority+0x78>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	7afa      	ldrb	r2, [r7, #11]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d20b      	bcs.n	800ab36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
 800ab32:	bf00      	nop
 800ab34:	e7fd      	b.n	800ab32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab36:	4b0f      	ldr	r3, [pc, #60]	@ (800ab74 <vPortValidateInterruptPriority+0x7c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab78 <vPortValidateInterruptPriority+0x80>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d90b      	bls.n	800ab5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	603b      	str	r3, [r7, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	e7fd      	b.n	800ab5a <vPortValidateInterruptPriority+0x62>
	}
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	e000e3f0 	.word	0xe000e3f0
 800ab70:	20007518 	.word	0x20007518
 800ab74:	e000ed0c 	.word	0xe000ed0c
 800ab78:	2000751c 	.word	0x2000751c

0800ab7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08a      	sub	sp, #40	@ 0x28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab84:	2300      	movs	r3, #0
 800ab86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab88:	f7fe fd58 	bl	800963c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab8c:	4b5c      	ldr	r3, [pc, #368]	@ (800ad00 <pvPortMalloc+0x184>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab94:	f000 f924 	bl	800ade0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab98:	4b5a      	ldr	r3, [pc, #360]	@ (800ad04 <pvPortMalloc+0x188>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f040 8095 	bne.w	800acd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01e      	beq.n	800abea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800abac:	2208      	movs	r2, #8
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4413      	add	r3, r2
 800abb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f003 0307 	and.w	r3, r3, #7
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d015      	beq.n	800abea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f023 0307 	bic.w	r3, r3, #7
 800abc4:	3308      	adds	r3, #8
 800abc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f003 0307 	and.w	r3, r3, #7
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00b      	beq.n	800abea <pvPortMalloc+0x6e>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	617b      	str	r3, [r7, #20]
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	e7fd      	b.n	800abe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d06f      	beq.n	800acd0 <pvPortMalloc+0x154>
 800abf0:	4b45      	ldr	r3, [pc, #276]	@ (800ad08 <pvPortMalloc+0x18c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d86a      	bhi.n	800acd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abfa:	4b44      	ldr	r3, [pc, #272]	@ (800ad0c <pvPortMalloc+0x190>)
 800abfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abfe:	4b43      	ldr	r3, [pc, #268]	@ (800ad0c <pvPortMalloc+0x190>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac04:	e004      	b.n	800ac10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d903      	bls.n	800ac22 <pvPortMalloc+0xa6>
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1f1      	bne.n	800ac06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac22:	4b37      	ldr	r3, [pc, #220]	@ (800ad00 <pvPortMalloc+0x184>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d051      	beq.n	800acd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2208      	movs	r2, #8
 800ac32:	4413      	add	r3, r2
 800ac34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	1ad2      	subs	r2, r2, r3
 800ac46:	2308      	movs	r3, #8
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d920      	bls.n	800ac90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4413      	add	r3, r2
 800ac54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00b      	beq.n	800ac78 <pvPortMalloc+0xfc>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	613b      	str	r3, [r7, #16]
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	1ad2      	subs	r2, r2, r3
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac8a:	69b8      	ldr	r0, [r7, #24]
 800ac8c:	f000 f90a 	bl	800aea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac90:	4b1d      	ldr	r3, [pc, #116]	@ (800ad08 <pvPortMalloc+0x18c>)
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	4a1b      	ldr	r2, [pc, #108]	@ (800ad08 <pvPortMalloc+0x18c>)
 800ac9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac9e:	4b1a      	ldr	r3, [pc, #104]	@ (800ad08 <pvPortMalloc+0x18c>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad10 <pvPortMalloc+0x194>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d203      	bcs.n	800acb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acaa:	4b17      	ldr	r3, [pc, #92]	@ (800ad08 <pvPortMalloc+0x18c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a18      	ldr	r2, [pc, #96]	@ (800ad10 <pvPortMalloc+0x194>)
 800acb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	4b13      	ldr	r3, [pc, #76]	@ (800ad04 <pvPortMalloc+0x188>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	431a      	orrs	r2, r3
 800acbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acc6:	4b13      	ldr	r3, [pc, #76]	@ (800ad14 <pvPortMalloc+0x198>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	4a11      	ldr	r2, [pc, #68]	@ (800ad14 <pvPortMalloc+0x198>)
 800acce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acd0:	f7fe fcc2 	bl	8009658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00b      	beq.n	800acf6 <pvPortMalloc+0x17a>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	60fb      	str	r3, [r7, #12]
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	e7fd      	b.n	800acf2 <pvPortMalloc+0x176>
	return pvReturn;
 800acf6:	69fb      	ldr	r3, [r7, #28]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3728      	adds	r7, #40	@ 0x28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	20008128 	.word	0x20008128
 800ad04:	2000813c 	.word	0x2000813c
 800ad08:	2000812c 	.word	0x2000812c
 800ad0c:	20008120 	.word	0x20008120
 800ad10:	20008130 	.word	0x20008130
 800ad14:	20008134 	.word	0x20008134

0800ad18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d04f      	beq.n	800adca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	425b      	negs	r3, r3
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4413      	add	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	4b25      	ldr	r3, [pc, #148]	@ (800add4 <vPortFree+0xbc>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4013      	ands	r3, r2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10b      	bne.n	800ad5e <vPortFree+0x46>
	__asm volatile
 800ad46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	60fb      	str	r3, [r7, #12]
}
 800ad58:	bf00      	nop
 800ad5a:	bf00      	nop
 800ad5c:	e7fd      	b.n	800ad5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00b      	beq.n	800ad7e <vPortFree+0x66>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	60bb      	str	r3, [r7, #8]
}
 800ad78:	bf00      	nop
 800ad7a:	bf00      	nop
 800ad7c:	e7fd      	b.n	800ad7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	4b14      	ldr	r3, [pc, #80]	@ (800add4 <vPortFree+0xbc>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4013      	ands	r3, r2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01e      	beq.n	800adca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d11a      	bne.n	800adca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	4b0e      	ldr	r3, [pc, #56]	@ (800add4 <vPortFree+0xbc>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	43db      	mvns	r3, r3
 800ad9e:	401a      	ands	r2, r3
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ada4:	f7fe fc4a 	bl	800963c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	4b0a      	ldr	r3, [pc, #40]	@ (800add8 <vPortFree+0xc0>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4413      	add	r3, r2
 800adb2:	4a09      	ldr	r2, [pc, #36]	@ (800add8 <vPortFree+0xc0>)
 800adb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adb6:	6938      	ldr	r0, [r7, #16]
 800adb8:	f000 f874 	bl	800aea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800adbc:	4b07      	ldr	r3, [pc, #28]	@ (800addc <vPortFree+0xc4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3301      	adds	r3, #1
 800adc2:	4a06      	ldr	r2, [pc, #24]	@ (800addc <vPortFree+0xc4>)
 800adc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adc6:	f7fe fc47 	bl	8009658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adca:	bf00      	nop
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	2000813c 	.word	0x2000813c
 800add8:	2000812c 	.word	0x2000812c
 800addc:	20008138 	.word	0x20008138

0800ade0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ade6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800adea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adec:	4b27      	ldr	r3, [pc, #156]	@ (800ae8c <prvHeapInit+0xac>)
 800adee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f003 0307 	and.w	r3, r3, #7
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00c      	beq.n	800ae14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3307      	adds	r3, #7
 800adfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f023 0307 	bic.w	r3, r3, #7
 800ae06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	4a1f      	ldr	r2, [pc, #124]	@ (800ae8c <prvHeapInit+0xac>)
 800ae10:	4413      	add	r3, r2
 800ae12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae18:	4a1d      	ldr	r2, [pc, #116]	@ (800ae90 <prvHeapInit+0xb0>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ae90 <prvHeapInit+0xb0>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	4413      	add	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae2c:	2208      	movs	r2, #8
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1a9b      	subs	r3, r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0307 	bic.w	r3, r3, #7
 800ae3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4a15      	ldr	r2, [pc, #84]	@ (800ae94 <prvHeapInit+0xb4>)
 800ae40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae42:	4b14      	ldr	r3, [pc, #80]	@ (800ae94 <prvHeapInit+0xb4>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2200      	movs	r2, #0
 800ae48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae4a:	4b12      	ldr	r3, [pc, #72]	@ (800ae94 <prvHeapInit+0xb4>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	1ad2      	subs	r2, r2, r3
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae60:	4b0c      	ldr	r3, [pc, #48]	@ (800ae94 <prvHeapInit+0xb4>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae98 <prvHeapInit+0xb8>)
 800ae6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	4a09      	ldr	r2, [pc, #36]	@ (800ae9c <prvHeapInit+0xbc>)
 800ae76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae78:	4b09      	ldr	r3, [pc, #36]	@ (800aea0 <prvHeapInit+0xc0>)
 800ae7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae7e:	601a      	str	r2, [r3, #0]
}
 800ae80:	bf00      	nop
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	20007520 	.word	0x20007520
 800ae90:	20008120 	.word	0x20008120
 800ae94:	20008128 	.word	0x20008128
 800ae98:	20008130 	.word	0x20008130
 800ae9c:	2000812c 	.word	0x2000812c
 800aea0:	2000813c 	.word	0x2000813c

0800aea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aeac:	4b28      	ldr	r3, [pc, #160]	@ (800af50 <prvInsertBlockIntoFreeList+0xac>)
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	e002      	b.n	800aeb8 <prvInsertBlockIntoFreeList+0x14>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d8f7      	bhi.n	800aeb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	4413      	add	r3, r2
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d108      	bne.n	800aee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	441a      	add	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	441a      	add	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d118      	bne.n	800af2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	4b15      	ldr	r3, [pc, #84]	@ (800af54 <prvInsertBlockIntoFreeList+0xb0>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	429a      	cmp	r2, r3
 800af04:	d00d      	beq.n	800af22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	441a      	add	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	e008      	b.n	800af34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af22:	4b0c      	ldr	r3, [pc, #48]	@ (800af54 <prvInsertBlockIntoFreeList+0xb0>)
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	e003      	b.n	800af34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d002      	beq.n	800af42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af42:	bf00      	nop
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20008120 	.word	0x20008120
 800af54:	20008128 	.word	0x20008128

0800af58 <rcl_get_zero_initialized_init_options>:
 800af58:	2000      	movs	r0, #0
 800af5a:	4770      	bx	lr

0800af5c <rcl_init_options_init>:
 800af5c:	b084      	sub	sp, #16
 800af5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af60:	b097      	sub	sp, #92	@ 0x5c
 800af62:	ae1d      	add	r6, sp, #116	@ 0x74
 800af64:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800af68:	2800      	cmp	r0, #0
 800af6a:	d058      	beq.n	800b01e <rcl_init_options_init+0xc2>
 800af6c:	6803      	ldr	r3, [r0, #0]
 800af6e:	4605      	mov	r5, r0
 800af70:	b133      	cbz	r3, 800af80 <rcl_init_options_init+0x24>
 800af72:	2464      	movs	r4, #100	@ 0x64
 800af74:	4620      	mov	r0, r4
 800af76:	b017      	add	sp, #92	@ 0x5c
 800af78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800af7c:	b004      	add	sp, #16
 800af7e:	4770      	bx	lr
 800af80:	4630      	mov	r0, r6
 800af82:	f001 f963 	bl	800c24c <rcutils_allocator_is_valid>
 800af86:	2800      	cmp	r0, #0
 800af88:	d049      	beq.n	800b01e <rcl_init_options_init+0xc2>
 800af8a:	46b4      	mov	ip, r6
 800af8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800af90:	ac11      	add	r4, sp, #68	@ 0x44
 800af92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af94:	f8dc 3000 	ldr.w	r3, [ip]
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800af9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800af9e:	2050      	movs	r0, #80	@ 0x50
 800afa0:	4798      	blx	r3
 800afa2:	4604      	mov	r4, r0
 800afa4:	6028      	str	r0, [r5, #0]
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d03b      	beq.n	800b022 <rcl_init_options_init+0xc6>
 800afaa:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800afae:	4686      	mov	lr, r0
 800afb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800afb4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800afb8:	f8dc 3000 	ldr.w	r3, [ip]
 800afbc:	f8ce 3000 	str.w	r3, [lr]
 800afc0:	a802      	add	r0, sp, #8
 800afc2:	f001 f9d5 	bl	800c370 <rmw_get_zero_initialized_init_options>
 800afc6:	f10d 0e08 	add.w	lr, sp, #8
 800afca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afce:	f104 0c18 	add.w	ip, r4, #24
 800afd2:	682f      	ldr	r7, [r5, #0]
 800afd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afe0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800afe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afe8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800afec:	ac20      	add	r4, sp, #128	@ 0x80
 800afee:	e88c 0003 	stmia.w	ip, {r0, r1}
 800aff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aff6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800affa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800affe:	f107 0018 	add.w	r0, r7, #24
 800b002:	f001 f9e3 	bl	800c3cc <rmw_init_options_init>
 800b006:	4604      	mov	r4, r0
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0b3      	beq.n	800af74 <rcl_init_options_init+0x18>
 800b00c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b00e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b010:	6828      	ldr	r0, [r5, #0]
 800b012:	4798      	blx	r3
 800b014:	4620      	mov	r0, r4
 800b016:	f007 f8e9 	bl	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 800b01a:	4604      	mov	r4, r0
 800b01c:	e7aa      	b.n	800af74 <rcl_init_options_init+0x18>
 800b01e:	240b      	movs	r4, #11
 800b020:	e7a8      	b.n	800af74 <rcl_init_options_init+0x18>
 800b022:	240a      	movs	r4, #10
 800b024:	e7a6      	b.n	800af74 <rcl_init_options_init+0x18>
 800b026:	bf00      	nop

0800b028 <rcl_init_options_fini>:
 800b028:	b530      	push	{r4, r5, lr}
 800b02a:	b087      	sub	sp, #28
 800b02c:	b1f0      	cbz	r0, 800b06c <rcl_init_options_fini+0x44>
 800b02e:	6803      	ldr	r3, [r0, #0]
 800b030:	4604      	mov	r4, r0
 800b032:	b1db      	cbz	r3, 800b06c <rcl_init_options_fini+0x44>
 800b034:	469c      	mov	ip, r3
 800b036:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b03a:	f10d 0e04 	add.w	lr, sp, #4
 800b03e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b042:	f8dc 3000 	ldr.w	r3, [ip]
 800b046:	f8ce 3000 	str.w	r3, [lr]
 800b04a:	a801      	add	r0, sp, #4
 800b04c:	f001 f8fe 	bl	800c24c <rcutils_allocator_is_valid>
 800b050:	b160      	cbz	r0, 800b06c <rcl_init_options_fini+0x44>
 800b052:	6820      	ldr	r0, [r4, #0]
 800b054:	3018      	adds	r0, #24
 800b056:	f001 fa69 	bl	800c52c <rmw_init_options_fini>
 800b05a:	4605      	mov	r5, r0
 800b05c:	b950      	cbnz	r0, 800b074 <rcl_init_options_fini+0x4c>
 800b05e:	6820      	ldr	r0, [r4, #0]
 800b060:	9b02      	ldr	r3, [sp, #8]
 800b062:	9905      	ldr	r1, [sp, #20]
 800b064:	4798      	blx	r3
 800b066:	4628      	mov	r0, r5
 800b068:	b007      	add	sp, #28
 800b06a:	bd30      	pop	{r4, r5, pc}
 800b06c:	250b      	movs	r5, #11
 800b06e:	4628      	mov	r0, r5
 800b070:	b007      	add	sp, #28
 800b072:	bd30      	pop	{r4, r5, pc}
 800b074:	f007 f8ba 	bl	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 800b078:	4605      	mov	r5, r0
 800b07a:	e7f8      	b.n	800b06e <rcl_init_options_fini+0x46>

0800b07c <rcl_init_options_copy>:
 800b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	b094      	sub	sp, #80	@ 0x50
 800b082:	2800      	cmp	r0, #0
 800b084:	d058      	beq.n	800b138 <rcl_init_options_copy+0xbc>
 800b086:	4604      	mov	r4, r0
 800b088:	6800      	ldr	r0, [r0, #0]
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d054      	beq.n	800b138 <rcl_init_options_copy+0xbc>
 800b08e:	460e      	mov	r6, r1
 800b090:	f001 f8dc 	bl	800c24c <rcutils_allocator_is_valid>
 800b094:	2800      	cmp	r0, #0
 800b096:	d04f      	beq.n	800b138 <rcl_init_options_copy+0xbc>
 800b098:	2e00      	cmp	r6, #0
 800b09a:	d04d      	beq.n	800b138 <rcl_init_options_copy+0xbc>
 800b09c:	6833      	ldr	r3, [r6, #0]
 800b09e:	b123      	cbz	r3, 800b0aa <rcl_init_options_copy+0x2e>
 800b0a0:	2464      	movs	r4, #100	@ 0x64
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	b014      	add	sp, #80	@ 0x50
 800b0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0aa:	6827      	ldr	r7, [r4, #0]
 800b0ac:	46bc      	mov	ip, r7
 800b0ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b0b2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800b0b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b0b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ba:	f8d7 8000 	ldr.w	r8, [r7]
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	2050      	movs	r0, #80	@ 0x50
 800b0c4:	47c0      	blx	r8
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	6030      	str	r0, [r6, #0]
 800b0ca:	b3d0      	cbz	r0, 800b142 <rcl_init_options_copy+0xc6>
 800b0cc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800b0d0:	4686      	mov	lr, r0
 800b0d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b0d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b0da:	f8dc 3000 	ldr.w	r3, [ip]
 800b0de:	f8ce 3000 	str.w	r3, [lr]
 800b0e2:	4668      	mov	r0, sp
 800b0e4:	f001 f944 	bl	800c370 <rmw_get_zero_initialized_init_options>
 800b0e8:	46ee      	mov	lr, sp
 800b0ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b0ee:	f105 0c18 	add.w	ip, r5, #24
 800b0f2:	6824      	ldr	r4, [r4, #0]
 800b0f4:	6835      	ldr	r5, [r6, #0]
 800b0f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b0fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b102:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b106:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b10a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b10e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b112:	f104 0018 	add.w	r0, r4, #24
 800b116:	f105 0118 	add.w	r1, r5, #24
 800b11a:	f001 f9bf 	bl	800c49c <rmw_init_options_copy>
 800b11e:	4604      	mov	r4, r0
 800b120:	2800      	cmp	r0, #0
 800b122:	d0be      	beq.n	800b0a2 <rcl_init_options_copy+0x26>
 800b124:	f001 f8a0 	bl	800c268 <rcutils_get_error_string>
 800b128:	f001 f8b6 	bl	800c298 <rcutils_reset_error>
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff ff7b 	bl	800b028 <rcl_init_options_fini>
 800b132:	b140      	cbz	r0, 800b146 <rcl_init_options_copy+0xca>
 800b134:	4604      	mov	r4, r0
 800b136:	e7b4      	b.n	800b0a2 <rcl_init_options_copy+0x26>
 800b138:	240b      	movs	r4, #11
 800b13a:	4620      	mov	r0, r4
 800b13c:	b014      	add	sp, #80	@ 0x50
 800b13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b142:	240a      	movs	r4, #10
 800b144:	e7ad      	b.n	800b0a2 <rcl_init_options_copy+0x26>
 800b146:	4620      	mov	r0, r4
 800b148:	b014      	add	sp, #80	@ 0x50
 800b14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b14e:	f007 b84d 	b.w	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 800b152:	bf00      	nop

0800b154 <rcl_init_options_set_domain_id>:
 800b154:	b120      	cbz	r0, 800b160 <rcl_init_options_set_domain_id+0xc>
 800b156:	6803      	ldr	r3, [r0, #0]
 800b158:	b113      	cbz	r3, 800b160 <rcl_init_options_set_domain_id+0xc>
 800b15a:	6259      	str	r1, [r3, #36]	@ 0x24
 800b15c:	2000      	movs	r0, #0
 800b15e:	4770      	bx	lr
 800b160:	200b      	movs	r0, #11
 800b162:	4770      	bx	lr

0800b164 <rcl_get_zero_initialized_publisher>:
 800b164:	4b01      	ldr	r3, [pc, #4]	@ (800b16c <rcl_get_zero_initialized_publisher+0x8>)
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	08018ef4 	.word	0x08018ef4

0800b170 <rcl_publisher_init>:
 800b170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b174:	b088      	sub	sp, #32
 800b176:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b178:	2d00      	cmp	r5, #0
 800b17a:	d069      	beq.n	800b250 <rcl_publisher_init+0xe0>
 800b17c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b180:	4604      	mov	r4, r0
 800b182:	4648      	mov	r0, r9
 800b184:	460e      	mov	r6, r1
 800b186:	4690      	mov	r8, r2
 800b188:	461f      	mov	r7, r3
 800b18a:	f001 f85f 	bl	800c24c <rcutils_allocator_is_valid>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d05e      	beq.n	800b250 <rcl_publisher_init+0xe0>
 800b192:	2c00      	cmp	r4, #0
 800b194:	d05c      	beq.n	800b250 <rcl_publisher_init+0xe0>
 800b196:	f8d4 a000 	ldr.w	sl, [r4]
 800b19a:	f1ba 0f00 	cmp.w	sl, #0
 800b19e:	d004      	beq.n	800b1aa <rcl_publisher_init+0x3a>
 800b1a0:	2764      	movs	r7, #100	@ 0x64
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	b008      	add	sp, #32
 800b1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f007 fb18 	bl	80127e0 <rcl_node_is_valid>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d052      	beq.n	800b25a <rcl_publisher_init+0xea>
 800b1b4:	f1b8 0f00 	cmp.w	r8, #0
 800b1b8:	d04a      	beq.n	800b250 <rcl_publisher_init+0xe0>
 800b1ba:	2f00      	cmp	r7, #0
 800b1bc:	d048      	beq.n	800b250 <rcl_publisher_init+0xe0>
 800b1be:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800b1c2:	aa07      	add	r2, sp, #28
 800b1c4:	9205      	str	r2, [sp, #20]
 800b1c6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b1ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b1ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b1d2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f007 fb53 	bl	8012888 <rcl_node_resolve_name>
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d14f      	bne.n	800b288 <rcl_publisher_init+0x118>
 800b1e8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b1ea:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b1ec:	20c8      	movs	r0, #200	@ 0xc8
 800b1ee:	4798      	blx	r3
 800b1f0:	6020      	str	r0, [r4, #0]
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d04e      	beq.n	800b294 <rcl_publisher_init+0x124>
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f007 fb14 	bl	8012824 <rcl_node_get_rmw_handle>
 800b1fc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	9a07      	ldr	r2, [sp, #28]
 800b204:	6827      	ldr	r7, [r4, #0]
 800b206:	462b      	mov	r3, r5
 800b208:	4641      	mov	r1, r8
 800b20a:	f001 fcb7 	bl	800cb7c <rmw_create_publisher>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800b214:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b218:	b370      	cbz	r0, 800b278 <rcl_publisher_init+0x108>
 800b21a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b21e:	f001 fd8b 	bl	800cd38 <rmw_publisher_get_actual_qos>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	4607      	mov	r7, r0
 800b226:	b9d0      	cbnz	r0, 800b25e <rcl_publisher_init+0xee>
 800b228:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b22c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b230:	4629      	mov	r1, r5
 800b232:	2270      	movs	r2, #112	@ 0x70
 800b234:	4618      	mov	r0, r3
 800b236:	f00c fede 	bl	8017ff6 <memcpy>
 800b23a:	6832      	ldr	r2, [r6, #0]
 800b23c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b240:	9807      	ldr	r0, [sp, #28]
 800b242:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b244:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b246:	4798      	blx	r3
 800b248:	4638      	mov	r0, r7
 800b24a:	b008      	add	sp, #32
 800b24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b250:	270b      	movs	r7, #11
 800b252:	4638      	mov	r0, r7
 800b254:	b008      	add	sp, #32
 800b256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b25a:	27c8      	movs	r7, #200	@ 0xc8
 800b25c:	e7a1      	b.n	800b1a2 <rcl_publisher_init+0x32>
 800b25e:	b18b      	cbz	r3, 800b284 <rcl_publisher_init+0x114>
 800b260:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b264:	b142      	cbz	r2, 800b278 <rcl_publisher_init+0x108>
 800b266:	4630      	mov	r0, r6
 800b268:	f007 fadc 	bl	8012824 <rcl_node_get_rmw_handle>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b272:	f001 fd71 	bl	800cd58 <rmw_destroy_publisher>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b27a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b27c:	4618      	mov	r0, r3
 800b27e:	4790      	blx	r2
 800b280:	2300      	movs	r3, #0
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	2701      	movs	r7, #1
 800b286:	e7db      	b.n	800b240 <rcl_publisher_init+0xd0>
 800b288:	2867      	cmp	r0, #103	@ 0x67
 800b28a:	d0d9      	beq.n	800b240 <rcl_publisher_init+0xd0>
 800b28c:	2869      	cmp	r0, #105	@ 0x69
 800b28e:	d003      	beq.n	800b298 <rcl_publisher_init+0x128>
 800b290:	280a      	cmp	r0, #10
 800b292:	d1f7      	bne.n	800b284 <rcl_publisher_init+0x114>
 800b294:	270a      	movs	r7, #10
 800b296:	e7d3      	b.n	800b240 <rcl_publisher_init+0xd0>
 800b298:	2767      	movs	r7, #103	@ 0x67
 800b29a:	e7d1      	b.n	800b240 <rcl_publisher_init+0xd0>

0800b29c <rcl_publisher_get_default_options>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	4d14      	ldr	r5, [pc, #80]	@ (800b2f0 <rcl_publisher_get_default_options+0x54>)
 800b2a0:	4914      	ldr	r1, [pc, #80]	@ (800b2f4 <rcl_publisher_get_default_options+0x58>)
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	2250      	movs	r2, #80	@ 0x50
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f00c fea4 	bl	8017ff6 <memcpy>
 800b2ae:	a802      	add	r0, sp, #8
 800b2b0:	f000 ffbe 	bl	800c230 <rcutils_get_default_allocator>
 800b2b4:	f10d 0c08 	add.w	ip, sp, #8
 800b2b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2bc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b2c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2c4:	466e      	mov	r6, sp
 800b2c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ca:	f8ce 3000 	str.w	r3, [lr]
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f001 f85e 	bl	800c390 <rmw_get_default_publisher_options>
 800b2d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b2d8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b2dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800b2e0:	2270      	movs	r2, #112	@ 0x70
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f00c fe86 	bl	8017ff6 <memcpy>
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	b008      	add	sp, #32
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	20008140 	.word	0x20008140
 800b2f4:	08018ef8 	.word	0x08018ef8

0800b2f8 <rcl_publish>:
 800b2f8:	b1f8      	cbz	r0, 800b33a <rcl_publish+0x42>
 800b2fa:	6803      	ldr	r3, [r0, #0]
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	4604      	mov	r4, r0
 800b300:	b1b3      	cbz	r3, 800b330 <rcl_publish+0x38>
 800b302:	4616      	mov	r6, r2
 800b304:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b308:	b192      	cbz	r2, 800b330 <rcl_publish+0x38>
 800b30a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b30e:	460d      	mov	r5, r1
 800b310:	f006 ff8a 	bl	8012228 <rcl_context_is_valid>
 800b314:	b160      	cbz	r0, 800b330 <rcl_publish+0x38>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b31c:	b140      	cbz	r0, 800b330 <rcl_publish+0x38>
 800b31e:	b155      	cbz	r5, 800b336 <rcl_publish+0x3e>
 800b320:	4632      	mov	r2, r6
 800b322:	4629      	mov	r1, r5
 800b324:	f001 fbca 	bl	800cabc <rmw_publish>
 800b328:	3800      	subs	r0, #0
 800b32a:	bf18      	it	ne
 800b32c:	2001      	movne	r0, #1
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
 800b330:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	200b      	movs	r0, #11
 800b338:	bd70      	pop	{r4, r5, r6, pc}
 800b33a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b33e:	4770      	bx	lr

0800b340 <rcl_publisher_is_valid>:
 800b340:	b1a0      	cbz	r0, 800b36c <rcl_publisher_is_valid+0x2c>
 800b342:	6803      	ldr	r3, [r0, #0]
 800b344:	b510      	push	{r4, lr}
 800b346:	4604      	mov	r4, r0
 800b348:	b173      	cbz	r3, 800b368 <rcl_publisher_is_valid+0x28>
 800b34a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b34e:	b15a      	cbz	r2, 800b368 <rcl_publisher_is_valid+0x28>
 800b350:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b354:	f006 ff68 	bl	8012228 <rcl_context_is_valid>
 800b358:	b130      	cbz	r0, 800b368 <rcl_publisher_is_valid+0x28>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b360:	3800      	subs	r0, #0
 800b362:	bf18      	it	ne
 800b364:	2001      	movne	r0, #1
 800b366:	bd10      	pop	{r4, pc}
 800b368:	2000      	movs	r0, #0
 800b36a:	bd10      	pop	{r4, pc}
 800b36c:	2000      	movs	r0, #0
 800b36e:	4770      	bx	lr

0800b370 <rcl_publisher_is_valid_except_context>:
 800b370:	b130      	cbz	r0, 800b380 <rcl_publisher_is_valid_except_context+0x10>
 800b372:	6800      	ldr	r0, [r0, #0]
 800b374:	b120      	cbz	r0, 800b380 <rcl_publisher_is_valid_except_context+0x10>
 800b376:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b37a:	3800      	subs	r0, #0
 800b37c:	bf18      	it	ne
 800b37e:	2001      	movne	r0, #1
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop

0800b384 <_rclc_check_for_new_data>:
 800b384:	2800      	cmp	r0, #0
 800b386:	d046      	beq.n	800b416 <_rclc_check_for_new_data+0x92>
 800b388:	b510      	push	{r4, lr}
 800b38a:	7802      	ldrb	r2, [r0, #0]
 800b38c:	b084      	sub	sp, #16
 800b38e:	4603      	mov	r3, r0
 800b390:	2a0a      	cmp	r2, #10
 800b392:	d842      	bhi.n	800b41a <_rclc_check_for_new_data+0x96>
 800b394:	e8df f002 	tbb	[pc, r2]
 800b398:	14181212 	.word	0x14181212
 800b39c:	06060614 	.word	0x06060614
 800b3a0:	2e1a      	.short	0x2e1a
 800b3a2:	16          	.byte	0x16
 800b3a3:	00          	.byte	0x00
 800b3a4:	6a0a      	ldr	r2, [r1, #32]
 800b3a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b3a8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	1a12      	subs	r2, r2, r0
 800b3b0:	bf18      	it	ne
 800b3b2:	2201      	movne	r2, #1
 800b3b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b3b8:	b004      	add	sp, #16
 800b3ba:	bd10      	pop	{r4, pc}
 800b3bc:	680a      	ldr	r2, [r1, #0]
 800b3be:	e7f2      	b.n	800b3a6 <_rclc_check_for_new_data+0x22>
 800b3c0:	698a      	ldr	r2, [r1, #24]
 800b3c2:	e7f0      	b.n	800b3a6 <_rclc_check_for_new_data+0x22>
 800b3c4:	688a      	ldr	r2, [r1, #8]
 800b3c6:	e7ee      	b.n	800b3a6 <_rclc_check_for_new_data+0x22>
 800b3c8:	690a      	ldr	r2, [r1, #16]
 800b3ca:	e7ec      	b.n	800b3a6 <_rclc_check_for_new_data+0x22>
 800b3cc:	685c      	ldr	r4, [r3, #4]
 800b3ce:	4608      	mov	r0, r1
 800b3d0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800b3d4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800b3d8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800b3dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800b3e6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800b3ea:	f104 0110 	add.w	r1, r4, #16
 800b3ee:	f009 f847 	bl	8014480 <rcl_action_client_wait_set_get_entities_ready>
 800b3f2:	e7e1      	b.n	800b3b8 <_rclc_check_for_new_data+0x34>
 800b3f4:	685c      	ldr	r4, [r3, #4]
 800b3f6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800b3fa:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800b3fe:	e9cd 3200 	strd	r3, r2, [sp]
 800b402:	4608      	mov	r0, r1
 800b404:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800b408:	f104 0220 	add.w	r2, r4, #32
 800b40c:	f104 0110 	add.w	r1, r4, #16
 800b410:	f009 fa4e 	bl	80148b0 <rcl_action_server_wait_set_get_entities_ready>
 800b414:	e7d0      	b.n	800b3b8 <_rclc_check_for_new_data+0x34>
 800b416:	200b      	movs	r0, #11
 800b418:	4770      	bx	lr
 800b41a:	2001      	movs	r0, #1
 800b41c:	e7cc      	b.n	800b3b8 <_rclc_check_for_new_data+0x34>
 800b41e:	bf00      	nop

0800b420 <_rclc_take_new_data>:
 800b420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b422:	b09b      	sub	sp, #108	@ 0x6c
 800b424:	2800      	cmp	r0, #0
 800b426:	f000 8088 	beq.w	800b53a <_rclc_take_new_data+0x11a>
 800b42a:	7803      	ldrb	r3, [r0, #0]
 800b42c:	4604      	mov	r4, r0
 800b42e:	2b0a      	cmp	r3, #10
 800b430:	f200 8167 	bhi.w	800b702 <_rclc_take_new_data+0x2e2>
 800b434:	e8df f003 	tbb	[pc, r3]
 800b438:	44152d2d 	.word	0x44152d2d
 800b43c:	19191944 	.word	0x19191944
 800b440:	065a      	.short	0x065a
 800b442:	15          	.byte	0x15
 800b443:	00          	.byte	0x00
 800b444:	6840      	ldr	r0, [r0, #4]
 800b446:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f040 80b2 	bne.w	800b5b4 <_rclc_take_new_data+0x194>
 800b450:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800b454:	2b00      	cmp	r3, #0
 800b456:	f040 80e4 	bne.w	800b622 <_rclc_take_new_data+0x202>
 800b45a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d16f      	bne.n	800b542 <_rclc_take_new_data+0x122>
 800b462:	2500      	movs	r5, #0
 800b464:	4628      	mov	r0, r5
 800b466:	b01b      	add	sp, #108	@ 0x6c
 800b468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b46a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b46c:	6a0b      	ldr	r3, [r1, #32]
 800b46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f5      	beq.n	800b462 <_rclc_take_new_data+0x42>
 800b476:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b47a:	f104 0110 	add.w	r1, r4, #16
 800b47e:	f007 fbad 	bl	8012bdc <rcl_take_request>
 800b482:	4605      	mov	r5, r0
 800b484:	2800      	cmp	r0, #0
 800b486:	d0ec      	beq.n	800b462 <_rclc_take_new_data+0x42>
 800b488:	f240 2359 	movw	r3, #601	@ 0x259
 800b48c:	4298      	cmp	r0, r3
 800b48e:	d013      	beq.n	800b4b8 <_rclc_take_new_data+0x98>
 800b490:	e029      	b.n	800b4e6 <_rclc_take_new_data+0xc6>
 800b492:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b494:	680b      	ldr	r3, [r1, #0]
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d0e1      	beq.n	800b462 <_rclc_take_new_data+0x42>
 800b49e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	aa0a      	add	r2, sp, #40	@ 0x28
 800b4a6:	f007 fbfb 	bl	8012ca0 <rcl_take>
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d0d9      	beq.n	800b464 <_rclc_take_new_data+0x44>
 800b4b0:	f240 1391 	movw	r3, #401	@ 0x191
 800b4b4:	4298      	cmp	r0, r3
 800b4b6:	d116      	bne.n	800b4e6 <_rclc_take_new_data+0xc6>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800b4be:	e7d1      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b4c0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b4c2:	698b      	ldr	r3, [r1, #24]
 800b4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d0ca      	beq.n	800b462 <_rclc_take_new_data+0x42>
 800b4cc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800b4d0:	f104 0110 	add.w	r1, r4, #16
 800b4d4:	f006 fe38 	bl	8012148 <rcl_take_response>
 800b4d8:	4605      	mov	r5, r0
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d0c1      	beq.n	800b462 <_rclc_take_new_data+0x42>
 800b4de:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800b4e2:	4298      	cmp	r0, r3
 800b4e4:	d0be      	beq.n	800b464 <_rclc_take_new_data+0x44>
 800b4e6:	f000 fed7 	bl	800c298 <rcutils_reset_error>
 800b4ea:	e7bb      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b4ec:	6840      	ldr	r0, [r0, #4]
 800b4ee:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d17d      	bne.n	800b5f2 <_rclc_take_new_data+0x1d2>
 800b4f6:	69c3      	ldr	r3, [r0, #28]
 800b4f8:	b11b      	cbz	r3, 800b502 <_rclc_take_new_data+0xe2>
 800b4fa:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d144      	bne.n	800b58c <_rclc_take_new_data+0x16c>
 800b502:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b506:	2b00      	cmp	r3, #0
 800b508:	f040 80ac 	bne.w	800b664 <_rclc_take_new_data+0x244>
 800b50c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b510:	2b00      	cmp	r3, #0
 800b512:	d0a6      	beq.n	800b462 <_rclc_take_new_data+0x42>
 800b514:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b516:	a90a      	add	r1, sp, #40	@ 0x28
 800b518:	3010      	adds	r0, #16
 800b51a:	f008 fe89 	bl	8014230 <rcl_action_take_result_response>
 800b51e:	4605      	mov	r5, r0
 800b520:	2800      	cmp	r0, #0
 800b522:	d1e0      	bne.n	800b4e6 <_rclc_take_new_data+0xc6>
 800b524:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b528:	6860      	ldr	r0, [r4, #4]
 800b52a:	f009 fae5 	bl	8014af8 <rclc_action_find_handle_by_result_request_sequence_number>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d098      	beq.n	800b464 <_rclc_take_new_data+0x44>
 800b532:	2301      	movs	r3, #1
 800b534:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800b538:	e794      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b53a:	250b      	movs	r5, #11
 800b53c:	4628      	mov	r0, r5
 800b53e:	b01b      	add	sp, #108	@ 0x6c
 800b540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b542:	ae04      	add	r6, sp, #16
 800b544:	aa0a      	add	r2, sp, #40	@ 0x28
 800b546:	3010      	adds	r0, #16
 800b548:	4631      	mov	r1, r6
 800b54a:	f009 f8e5 	bl	8014718 <rcl_action_take_cancel_request>
 800b54e:	4605      	mov	r5, r0
 800b550:	2800      	cmp	r0, #0
 800b552:	d1c8      	bne.n	800b4e6 <_rclc_take_new_data+0xc6>
 800b554:	6860      	ldr	r0, [r4, #4]
 800b556:	a90a      	add	r1, sp, #40	@ 0x28
 800b558:	f009 fa8c 	bl	8014a74 <rclc_action_find_goal_handle_by_uuid>
 800b55c:	4607      	mov	r7, r0
 800b55e:	2800      	cmp	r0, #0
 800b560:	f000 80bb 	beq.w	800b6da <_rclc_take_new_data+0x2ba>
 800b564:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800b568:	2101      	movs	r1, #1
 800b56a:	f009 fa0d 	bl	8014988 <rcl_action_transition_goal_state>
 800b56e:	2803      	cmp	r0, #3
 800b570:	4684      	mov	ip, r0
 800b572:	f040 80a7 	bne.w	800b6c4 <_rclc_take_new_data+0x2a4>
 800b576:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b578:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800b57c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b57e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b582:	e884 0003 	stmia.w	r4, {r0, r1}
 800b586:	f887 c008 	strb.w	ip, [r7, #8]
 800b58a:	e76b      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b58c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b58e:	3010      	adds	r0, #16
 800b590:	f008 fece 	bl	8014330 <rcl_action_take_feedback>
 800b594:	4605      	mov	r5, r0
 800b596:	2800      	cmp	r0, #0
 800b598:	d1a5      	bne.n	800b4e6 <_rclc_take_new_data+0xc6>
 800b59a:	6860      	ldr	r0, [r4, #4]
 800b59c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b59e:	f009 fa69 	bl	8014a74 <rclc_action_find_goal_handle_by_uuid>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	f000 80a3 	beq.w	800b6f0 <_rclc_take_new_data+0x2d0>
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	6860      	ldr	r0, [r4, #4]
 800b5ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800b5b2:	e7a6      	b.n	800b502 <_rclc_take_new_data+0xe2>
 800b5b4:	f009 fa38 	bl	8014a28 <rclc_action_take_goal_handle>
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	6860      	ldr	r0, [r4, #4]
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	f43f af47 	beq.w	800b450 <_rclc_take_new_data+0x30>
 800b5c2:	6070      	str	r0, [r6, #4]
 800b5c4:	69f2      	ldr	r2, [r6, #28]
 800b5c6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800b5ca:	3010      	adds	r0, #16
 800b5cc:	f008 ffec 	bl	80145a8 <rcl_action_take_goal_request>
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	f040 808e 	bne.w	800b6f4 <_rclc_take_new_data+0x2d4>
 800b5d8:	69f7      	ldr	r7, [r6, #28]
 800b5da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5dc:	7235      	strb	r5, [r6, #8]
 800b5de:	f8c6 0009 	str.w	r0, [r6, #9]
 800b5e2:	f8c6 100d 	str.w	r1, [r6, #13]
 800b5e6:	6860      	ldr	r0, [r4, #4]
 800b5e8:	f8c6 2011 	str.w	r2, [r6, #17]
 800b5ec:	f8c6 3015 	str.w	r3, [r6, #21]
 800b5f0:	e72e      	b.n	800b450 <_rclc_take_new_data+0x30>
 800b5f2:	aa04      	add	r2, sp, #16
 800b5f4:	a90a      	add	r1, sp, #40	@ 0x28
 800b5f6:	3010      	adds	r0, #16
 800b5f8:	f008 fda2 	bl	8014140 <rcl_action_take_goal_response>
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f47f af71 	bne.w	800b4e6 <_rclc_take_new_data+0xc6>
 800b604:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b608:	6860      	ldr	r0, [r4, #4]
 800b60a:	f009 fa63 	bl	8014ad4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800b60e:	b130      	cbz	r0, 800b61e <_rclc_take_new_data+0x1fe>
 800b610:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b614:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b618:	2201      	movs	r2, #1
 800b61a:	f880 2020 	strb.w	r2, [r0, #32]
 800b61e:	6860      	ldr	r0, [r4, #4]
 800b620:	e769      	b.n	800b4f6 <_rclc_take_new_data+0xd6>
 800b622:	aa04      	add	r2, sp, #16
 800b624:	3010      	adds	r0, #16
 800b626:	a90a      	add	r1, sp, #40	@ 0x28
 800b628:	f009 f836 	bl	8014698 <rcl_action_take_result_request>
 800b62c:	4605      	mov	r5, r0
 800b62e:	2800      	cmp	r0, #0
 800b630:	f47f af59 	bne.w	800b4e6 <_rclc_take_new_data+0xc6>
 800b634:	6860      	ldr	r0, [r4, #4]
 800b636:	a904      	add	r1, sp, #16
 800b638:	f009 fa1c 	bl	8014a74 <rclc_action_find_goal_handle_by_uuid>
 800b63c:	4607      	mov	r7, r0
 800b63e:	b160      	cbz	r0, 800b65a <_rclc_take_new_data+0x23a>
 800b640:	ad0a      	add	r5, sp, #40	@ 0x28
 800b642:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800b646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b648:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b64a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b64e:	f04f 0c02 	mov.w	ip, #2
 800b652:	e886 0003 	stmia.w	r6, {r0, r1}
 800b656:	f887 c008 	strb.w	ip, [r7, #8]
 800b65a:	6860      	ldr	r0, [r4, #4]
 800b65c:	2300      	movs	r3, #0
 800b65e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800b662:	e6fa      	b.n	800b45a <_rclc_take_new_data+0x3a>
 800b664:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800b668:	a90a      	add	r1, sp, #40	@ 0x28
 800b66a:	3010      	adds	r0, #16
 800b66c:	f008 fe20 	bl	80142b0 <rcl_action_take_cancel_response>
 800b670:	4605      	mov	r5, r0
 800b672:	2800      	cmp	r0, #0
 800b674:	f47f af37 	bne.w	800b4e6 <_rclc_take_new_data+0xc6>
 800b678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b67c:	6860      	ldr	r0, [r4, #4]
 800b67e:	f009 fa4d 	bl	8014b1c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800b682:	4606      	mov	r6, r0
 800b684:	6860      	ldr	r0, [r4, #4]
 800b686:	2e00      	cmp	r6, #0
 800b688:	f43f af40 	beq.w	800b50c <_rclc_take_new_data+0xec>
 800b68c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b68e:	2701      	movs	r7, #1
 800b690:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800b692:	2b00      	cmp	r3, #0
 800b694:	f43f af3a 	beq.w	800b50c <_rclc_take_new_data+0xec>
 800b698:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b69a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b69e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b6a2:	f009 f9e7 	bl	8014a74 <rclc_action_find_goal_handle_by_uuid>
 800b6a6:	b138      	cbz	r0, 800b6b8 <_rclc_take_new_data+0x298>
 800b6a8:	6860      	ldr	r0, [r4, #4]
 800b6aa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b6ac:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	42ab      	cmp	r3, r5
 800b6b4:	d8f0      	bhi.n	800b698 <_rclc_take_new_data+0x278>
 800b6b6:	e729      	b.n	800b50c <_rclc_take_new_data+0xec>
 800b6b8:	6860      	ldr	r0, [r4, #4]
 800b6ba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b6bc:	3501      	adds	r5, #1
 800b6be:	42ab      	cmp	r3, r5
 800b6c0:	d8ea      	bhi.n	800b698 <_rclc_take_new_data+0x278>
 800b6c2:	e723      	b.n	800b50c <_rclc_take_new_data+0xec>
 800b6c4:	ab06      	add	r3, sp, #24
 800b6c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b6c8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b6cc:	2103      	movs	r1, #3
 800b6ce:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b6d2:	6860      	ldr	r0, [r4, #4]
 800b6d4:	f009 fa98 	bl	8014c08 <rclc_action_server_goal_cancel_reject>
 800b6d8:	e6c4      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b6da:	ab06      	add	r3, sp, #24
 800b6dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b6de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b6e2:	2102      	movs	r1, #2
 800b6e4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b6e8:	6860      	ldr	r0, [r4, #4]
 800b6ea:	f009 fa8d 	bl	8014c08 <rclc_action_server_goal_cancel_reject>
 800b6ee:	e6b9      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b6f0:	6860      	ldr	r0, [r4, #4]
 800b6f2:	e706      	b.n	800b502 <_rclc_take_new_data+0xe2>
 800b6f4:	6860      	ldr	r0, [r4, #4]
 800b6f6:	4631      	mov	r1, r6
 800b6f8:	f009 f9a6 	bl	8014a48 <rclc_action_remove_used_goal_handle>
 800b6fc:	f000 fdcc 	bl	800c298 <rcutils_reset_error>
 800b700:	e6b0      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b702:	2501      	movs	r5, #1
 800b704:	e6ae      	b.n	800b464 <_rclc_take_new_data+0x44>
 800b706:	bf00      	nop

0800b708 <_rclc_execute.part.0>:
 800b708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70a:	7803      	ldrb	r3, [r0, #0]
 800b70c:	b087      	sub	sp, #28
 800b70e:	4604      	mov	r4, r0
 800b710:	2b0a      	cmp	r3, #10
 800b712:	f200 8136 	bhi.w	800b982 <_rclc_execute.part.0+0x27a>
 800b716:	e8df f003 	tbb	[pc, r3]
 800b71a:	435e      	.short	0x435e
 800b71c:	06a1664f 	.word	0x06a1664f
 800b720:	6c1e0606 	.word	0x6c1e0606
 800b724:	59          	.byte	0x59
 800b725:	00          	.byte	0x00
 800b726:	2b06      	cmp	r3, #6
 800b728:	f000 8122 	beq.w	800b970 <_rclc_execute.part.0+0x268>
 800b72c:	2b07      	cmp	r3, #7
 800b72e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b730:	f040 8118 	bne.w	800b964 <_rclc_execute.part.0+0x25c>
 800b734:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800b738:	6880      	ldr	r0, [r0, #8]
 800b73a:	4798      	blx	r3
 800b73c:	f104 0110 	add.w	r1, r4, #16
 800b740:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b742:	6860      	ldr	r0, [r4, #4]
 800b744:	f007 fa8a 	bl	8012c5c <rcl_send_response>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d033      	beq.n	800b7b4 <_rclc_execute.part.0+0xac>
 800b74c:	9005      	str	r0, [sp, #20]
 800b74e:	f000 fda3 	bl	800c298 <rcutils_reset_error>
 800b752:	9805      	ldr	r0, [sp, #20]
 800b754:	e02e      	b.n	800b7b4 <_rclc_execute.part.0+0xac>
 800b756:	6840      	ldr	r0, [r0, #4]
 800b758:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 8086 	beq.w	800b86e <_rclc_execute.part.0+0x166>
 800b762:	2600      	movs	r6, #0
 800b764:	2701      	movs	r7, #1
 800b766:	e004      	b.n	800b772 <_rclc_execute.part.0+0x6a>
 800b768:	f009 f938 	bl	80149dc <rclc_action_send_result_request>
 800b76c:	b998      	cbnz	r0, 800b796 <_rclc_execute.part.0+0x8e>
 800b76e:	722f      	strb	r7, [r5, #8]
 800b770:	6860      	ldr	r0, [r4, #4]
 800b772:	f009 f9e5 	bl	8014b40 <rclc_action_find_first_handle_with_goal_response>
 800b776:	4605      	mov	r5, r0
 800b778:	2800      	cmp	r0, #0
 800b77a:	d077      	beq.n	800b86c <_rclc_execute.part.0+0x164>
 800b77c:	6863      	ldr	r3, [r4, #4]
 800b77e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800b786:	f885 6020 	strb.w	r6, [r5, #32]
 800b78a:	4798      	blx	r3
 800b78c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800b790:	4628      	mov	r0, r5
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e8      	bne.n	800b768 <_rclc_execute.part.0+0x60>
 800b796:	6860      	ldr	r0, [r4, #4]
 800b798:	4629      	mov	r1, r5
 800b79a:	f009 f955 	bl	8014a48 <rclc_action_remove_used_goal_handle>
 800b79e:	e7e7      	b.n	800b770 <_rclc_execute.part.0+0x68>
 800b7a0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800b7a4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800b7a8:	2d00      	cmp	r5, #0
 800b7aa:	f000 80c9 	beq.w	800b940 <_rclc_execute.part.0+0x238>
 800b7ae:	6880      	ldr	r0, [r0, #8]
 800b7b0:	4798      	blx	r3
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	b007      	add	sp, #28
 800b7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b8:	6840      	ldr	r0, [r0, #4]
 800b7ba:	f007 fd7f 	bl	80132bc <rcl_timer_call>
 800b7be:	f240 3321 	movw	r3, #801	@ 0x321
 800b7c2:	4298      	cmp	r0, r3
 800b7c4:	d004      	beq.n	800b7d0 <_rclc_execute.part.0+0xc8>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0f4      	beq.n	800b7b4 <_rclc_execute.part.0+0xac>
 800b7ca:	e7bf      	b.n	800b74c <_rclc_execute.part.0+0x44>
 800b7cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b7ce:	4798      	blx	r3
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	b007      	add	sp, #28
 800b7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7d6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800b7da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b7dc:	b925      	cbnz	r5, 800b7e8 <_rclc_execute.part.0+0xe0>
 800b7de:	4628      	mov	r0, r5
 800b7e0:	4798      	blx	r3
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	e7e6      	b.n	800b7b4 <_rclc_execute.part.0+0xac>
 800b7e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b7e8:	68a0      	ldr	r0, [r4, #8]
 800b7ea:	4798      	blx	r3
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	b007      	add	sp, #28
 800b7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f2:	6840      	ldr	r0, [r0, #4]
 800b7f4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b7f8:	bb3b      	cbnz	r3, 800b84a <_rclc_execute.part.0+0x142>
 800b7fa:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d07b      	beq.n	800b8fa <_rclc_execute.part.0+0x1f2>
 800b802:	f640 0634 	movw	r6, #2100	@ 0x834
 800b806:	2701      	movs	r7, #1
 800b808:	e007      	b.n	800b81a <_rclc_execute.part.0+0x112>
 800b80a:	4628      	mov	r0, r5
 800b80c:	f009 f9b0 	bl	8014b70 <rclc_action_server_response_goal_request>
 800b810:	6860      	ldr	r0, [r4, #4]
 800b812:	4629      	mov	r1, r5
 800b814:	f009 f918 	bl	8014a48 <rclc_action_remove_used_goal_handle>
 800b818:	6860      	ldr	r0, [r4, #4]
 800b81a:	2100      	movs	r1, #0
 800b81c:	f009 f942 	bl	8014aa4 <rclc_action_find_first_handle_by_status>
 800b820:	4605      	mov	r5, r0
 800b822:	2800      	cmp	r0, #0
 800b824:	d066      	beq.n	800b8f4 <_rclc_execute.part.0+0x1ec>
 800b826:	6863      	ldr	r3, [r4, #4]
 800b828:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	4798      	blx	r3
 800b82e:	42b0      	cmp	r0, r6
 800b830:	f04f 0100 	mov.w	r1, #0
 800b834:	d1e9      	bne.n	800b80a <_rclc_execute.part.0+0x102>
 800b836:	2101      	movs	r1, #1
 800b838:	4628      	mov	r0, r5
 800b83a:	f009 f999 	bl	8014b70 <rclc_action_server_response_goal_request>
 800b83e:	722f      	strb	r7, [r5, #8]
 800b840:	e7ea      	b.n	800b818 <_rclc_execute.part.0+0x110>
 800b842:	6848      	ldr	r0, [r1, #4]
 800b844:	f009 f900 	bl	8014a48 <rclc_action_remove_used_goal_handle>
 800b848:	6860      	ldr	r0, [r4, #4]
 800b84a:	f009 f937 	bl	8014abc <rclc_action_find_first_terminated_handle>
 800b84e:	4601      	mov	r1, r0
 800b850:	2800      	cmp	r0, #0
 800b852:	d1f6      	bne.n	800b842 <_rclc_execute.part.0+0x13a>
 800b854:	6860      	ldr	r0, [r4, #4]
 800b856:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800b85a:	e7ce      	b.n	800b7fa <_rclc_execute.part.0+0xf2>
 800b85c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b85e:	6880      	ldr	r0, [r0, #8]
 800b860:	f104 0110 	add.w	r1, r4, #16
 800b864:	4798      	blx	r3
 800b866:	2000      	movs	r0, #0
 800b868:	b007      	add	sp, #28
 800b86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b86c:	6860      	ldr	r0, [r4, #4]
 800b86e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b872:	b18b      	cbz	r3, 800b898 <_rclc_execute.part.0+0x190>
 800b874:	68c5      	ldr	r5, [r0, #12]
 800b876:	b32d      	cbz	r5, 800b8c4 <_rclc_execute.part.0+0x1bc>
 800b878:	2600      	movs	r6, #0
 800b87a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800b87e:	b143      	cbz	r3, 800b892 <_rclc_execute.part.0+0x18a>
 800b880:	69c3      	ldr	r3, [r0, #28]
 800b882:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800b886:	b123      	cbz	r3, 800b892 <_rclc_execute.part.0+0x18a>
 800b888:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b88a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b88c:	4628      	mov	r0, r5
 800b88e:	4798      	blx	r3
 800b890:	6860      	ldr	r0, [r4, #4]
 800b892:	682d      	ldr	r5, [r5, #0]
 800b894:	2d00      	cmp	r5, #0
 800b896:	d1f0      	bne.n	800b87a <_rclc_execute.part.0+0x172>
 800b898:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b89c:	b193      	cbz	r3, 800b8c4 <_rclc_execute.part.0+0x1bc>
 800b89e:	68c5      	ldr	r5, [r0, #12]
 800b8a0:	b185      	cbz	r5, 800b8c4 <_rclc_execute.part.0+0x1bc>
 800b8a2:	2600      	movs	r6, #0
 800b8a4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800b8a8:	b14b      	cbz	r3, 800b8be <_rclc_execute.part.0+0x1b6>
 800b8aa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b8ac:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800b8b0:	b12b      	cbz	r3, 800b8be <_rclc_execute.part.0+0x1b6>
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800b8b8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b8ba:	4798      	blx	r3
 800b8bc:	6860      	ldr	r0, [r4, #4]
 800b8be:	682d      	ldr	r5, [r5, #0]
 800b8c0:	2d00      	cmp	r5, #0
 800b8c2:	d1ef      	bne.n	800b8a4 <_rclc_execute.part.0+0x19c>
 800b8c4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d081      	beq.n	800b7d0 <_rclc_execute.part.0+0xc8>
 800b8cc:	2700      	movs	r7, #0
 800b8ce:	e00b      	b.n	800b8e8 <_rclc_execute.part.0+0x1e0>
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b8d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b8d6:	6a1e      	ldr	r6, [r3, #32]
 800b8d8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800b8dc:	47b0      	blx	r6
 800b8de:	6860      	ldr	r0, [r4, #4]
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	f009 f8b1 	bl	8014a48 <rclc_action_remove_used_goal_handle>
 800b8e6:	6860      	ldr	r0, [r4, #4]
 800b8e8:	f009 f936 	bl	8014b58 <rclc_action_find_first_handle_with_result_response>
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d1ee      	bne.n	800b8d0 <_rclc_execute.part.0+0x1c8>
 800b8f2:	e76d      	b.n	800b7d0 <_rclc_execute.part.0+0xc8>
 800b8f4:	6860      	ldr	r0, [r4, #4]
 800b8f6:	f880 5020 	strb.w	r5, [r0, #32]
 800b8fa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f43f af66 	beq.w	800b7d0 <_rclc_execute.part.0+0xc8>
 800b904:	68c5      	ldr	r5, [r0, #12]
 800b906:	b1b5      	cbz	r5, 800b936 <_rclc_execute.part.0+0x22e>
 800b908:	2602      	movs	r6, #2
 800b90a:	e001      	b.n	800b910 <_rclc_execute.part.0+0x208>
 800b90c:	682d      	ldr	r5, [r5, #0]
 800b90e:	b195      	cbz	r5, 800b936 <_rclc_execute.part.0+0x22e>
 800b910:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b914:	2b03      	cmp	r3, #3
 800b916:	d1f9      	bne.n	800b90c <_rclc_execute.part.0+0x204>
 800b918:	69c3      	ldr	r3, [r0, #28]
 800b91a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b91c:	4628      	mov	r0, r5
 800b91e:	4798      	blx	r3
 800b920:	4603      	mov	r3, r0
 800b922:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800b926:	4628      	mov	r0, r5
 800b928:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b92c:	b163      	cbz	r3, 800b948 <_rclc_execute.part.0+0x240>
 800b92e:	f009 f93f 	bl	8014bb0 <rclc_action_server_goal_cancel_accept>
 800b932:	6860      	ldr	r0, [r4, #4]
 800b934:	e7ea      	b.n	800b90c <_rclc_execute.part.0+0x204>
 800b936:	2300      	movs	r3, #0
 800b938:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b93c:	4618      	mov	r0, r3
 800b93e:	e739      	b.n	800b7b4 <_rclc_execute.part.0+0xac>
 800b940:	4628      	mov	r0, r5
 800b942:	4798      	blx	r3
 800b944:	4628      	mov	r0, r5
 800b946:	e735      	b.n	800b7b4 <_rclc_execute.part.0+0xac>
 800b948:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b94a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b94e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800b952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b956:	6860      	ldr	r0, [r4, #4]
 800b958:	2101      	movs	r1, #1
 800b95a:	f009 f955 	bl	8014c08 <rclc_action_server_goal_cancel_reject>
 800b95e:	722e      	strb	r6, [r5, #8]
 800b960:	6860      	ldr	r0, [r4, #4]
 800b962:	e7d3      	b.n	800b90c <_rclc_execute.part.0+0x204>
 800b964:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b966:	6880      	ldr	r0, [r0, #8]
 800b968:	4798      	blx	r3
 800b96a:	f104 0110 	add.w	r1, r4, #16
 800b96e:	e6e7      	b.n	800b740 <_rclc_execute.part.0+0x38>
 800b970:	f100 0110 	add.w	r1, r0, #16
 800b974:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b976:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800b978:	6880      	ldr	r0, [r0, #8]
 800b97a:	9105      	str	r1, [sp, #20]
 800b97c:	4798      	blx	r3
 800b97e:	9905      	ldr	r1, [sp, #20]
 800b980:	e6de      	b.n	800b740 <_rclc_execute.part.0+0x38>
 800b982:	2001      	movs	r0, #1
 800b984:	e716      	b.n	800b7b4 <_rclc_execute.part.0+0xac>
 800b986:	bf00      	nop

0800b988 <rclc_executor_trigger_any>:
 800b988:	2800      	cmp	r0, #0
 800b98a:	d03f      	beq.n	800ba0c <rclc_executor_trigger_any+0x84>
 800b98c:	2900      	cmp	r1, #0
 800b98e:	d03e      	beq.n	800ba0e <rclc_executor_trigger_any+0x86>
 800b990:	4603      	mov	r3, r0
 800b992:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800b996:	2200      	movs	r2, #0
 800b998:	2800      	cmp	r0, #0
 800b99a:	d037      	beq.n	800ba0c <rclc_executor_trigger_any+0x84>
 800b99c:	b430      	push	{r4, r5}
 800b99e:	f893 c000 	ldrb.w	ip, [r3]
 800b9a2:	f1bc 0f08 	cmp.w	ip, #8
 800b9a6:	d11e      	bne.n	800b9e6 <rclc_executor_trigger_any+0x5e>
 800b9a8:	685c      	ldr	r4, [r3, #4]
 800b9aa:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b9ac:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b9b0:	d105      	bne.n	800b9be <rclc_executor_trigger_any+0x36>
 800b9b2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b9b6:	b910      	cbnz	r0, 800b9be <rclc_executor_trigger_any+0x36>
 800b9b8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b9bc:	b128      	cbz	r0, 800b9ca <rclc_executor_trigger_any+0x42>
 800b9be:	bc30      	pop	{r4, r5}
 800b9c0:	4770      	bx	lr
 800b9c2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d1f9      	bne.n	800b9be <rclc_executor_trigger_any+0x36>
 800b9ca:	3201      	adds	r2, #1
 800b9cc:	4291      	cmp	r1, r2
 800b9ce:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b9d2:	d018      	beq.n	800ba06 <rclc_executor_trigger_any+0x7e>
 800b9d4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d0f0      	beq.n	800b9be <rclc_executor_trigger_any+0x36>
 800b9dc:	f893 c000 	ldrb.w	ip, [r3]
 800b9e0:	f1bc 0f08 	cmp.w	ip, #8
 800b9e4:	d0e0      	beq.n	800b9a8 <rclc_executor_trigger_any+0x20>
 800b9e6:	f1bc 0f09 	cmp.w	ip, #9
 800b9ea:	d1ea      	bne.n	800b9c2 <rclc_executor_trigger_any+0x3a>
 800b9ec:	685c      	ldr	r4, [r3, #4]
 800b9ee:	6a25      	ldr	r5, [r4, #32]
 800b9f0:	2d00      	cmp	r5, #0
 800b9f2:	d1e4      	bne.n	800b9be <rclc_executor_trigger_any+0x36>
 800b9f4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d1e0      	bne.n	800b9be <rclc_executor_trigger_any+0x36>
 800b9fc:	3201      	adds	r2, #1
 800b9fe:	4291      	cmp	r1, r2
 800ba00:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ba04:	d1e6      	bne.n	800b9d4 <rclc_executor_trigger_any+0x4c>
 800ba06:	2000      	movs	r0, #0
 800ba08:	bc30      	pop	{r4, r5}
 800ba0a:	4770      	bx	lr
 800ba0c:	4770      	bx	lr
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop

0800ba14 <rclc_executor_get_zero_initialized_executor>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	4903      	ldr	r1, [pc, #12]	@ (800ba24 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ba18:	4604      	mov	r4, r0
 800ba1a:	2288      	movs	r2, #136	@ 0x88
 800ba1c:	f00c faeb 	bl	8017ff6 <memcpy>
 800ba20:	4620      	mov	r0, r4
 800ba22:	bd10      	pop	{r4, pc}
 800ba24:	08018f48 	.word	0x08018f48

0800ba28 <rclc_executor_init>:
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d05f      	beq.n	800baec <rclc_executor_init+0xc4>
 800ba2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba30:	460c      	mov	r4, r1
 800ba32:	b0b0      	sub	sp, #192	@ 0xc0
 800ba34:	2900      	cmp	r1, #0
 800ba36:	d051      	beq.n	800badc <rclc_executor_init+0xb4>
 800ba38:	4605      	mov	r5, r0
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	4616      	mov	r6, r2
 800ba3e:	461f      	mov	r7, r3
 800ba40:	f000 fc04 	bl	800c24c <rcutils_allocator_is_valid>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d049      	beq.n	800badc <rclc_executor_init+0xb4>
 800ba48:	2e00      	cmp	r6, #0
 800ba4a:	d047      	beq.n	800badc <rclc_executor_init+0xb4>
 800ba4c:	492c      	ldr	r1, [pc, #176]	@ (800bb00 <rclc_executor_init+0xd8>)
 800ba4e:	2288      	movs	r2, #136	@ 0x88
 800ba50:	a80e      	add	r0, sp, #56	@ 0x38
 800ba52:	f00c fad0 	bl	8017ff6 <memcpy>
 800ba56:	a90e      	add	r1, sp, #56	@ 0x38
 800ba58:	2288      	movs	r2, #136	@ 0x88
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f00c facb 	bl	8017ff6 <memcpy>
 800ba60:	602c      	str	r4, [r5, #0]
 800ba62:	4668      	mov	r0, sp
 800ba64:	60ae      	str	r6, [r5, #8]
 800ba66:	466c      	mov	r4, sp
 800ba68:	f007 fd9a 	bl	80135a0 <rcl_get_zero_initialized_wait_set>
 800ba6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba6e:	f105 0c14 	add.w	ip, r5, #20
 800ba72:	f8d7 8000 	ldr.w	r8, [r7]
 800ba76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba86:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800baf8 <rclc_executor_init+0xd0>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	f8cc 3000 	str.w	r3, [ip]
 800ba90:	6939      	ldr	r1, [r7, #16]
 800ba92:	612f      	str	r7, [r5, #16]
 800ba94:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ba98:	01b0      	lsls	r0, r6, #6
 800ba9a:	47c0      	blx	r8
 800ba9c:	6068      	str	r0, [r5, #4]
 800ba9e:	b338      	cbz	r0, 800baf0 <rclc_executor_init+0xc8>
 800baa0:	2400      	movs	r4, #0
 800baa2:	e000      	b.n	800baa6 <rclc_executor_init+0x7e>
 800baa4:	6868      	ldr	r0, [r5, #4]
 800baa6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800baaa:	4631      	mov	r1, r6
 800baac:	3401      	adds	r4, #1
 800baae:	f000 fa6b 	bl	800bf88 <rclc_executor_handle_init>
 800bab2:	42a6      	cmp	r6, r4
 800bab4:	d1f6      	bne.n	800baa4 <rclc_executor_init+0x7c>
 800bab6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800baba:	f000 fa59 	bl	800bf70 <rclc_executor_handle_counters_zero_init>
 800babe:	4a11      	ldr	r2, [pc, #68]	@ (800bb04 <rclc_executor_init+0xdc>)
 800bac0:	686b      	ldr	r3, [r5, #4]
 800bac2:	2000      	movs	r0, #0
 800bac4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800bac8:	b163      	cbz	r3, 800bae4 <rclc_executor_init+0xbc>
 800baca:	692b      	ldr	r3, [r5, #16]
 800bacc:	b153      	cbz	r3, 800bae4 <rclc_executor_init+0xbc>
 800bace:	68ab      	ldr	r3, [r5, #8]
 800bad0:	b143      	cbz	r3, 800bae4 <rclc_executor_init+0xbc>
 800bad2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800bad6:	b030      	add	sp, #192	@ 0xc0
 800bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800badc:	200b      	movs	r0, #11
 800bade:	b030      	add	sp, #192	@ 0xc0
 800bae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae4:	4618      	mov	r0, r3
 800bae6:	b030      	add	sp, #192	@ 0xc0
 800bae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baec:	200b      	movs	r0, #11
 800baee:	4770      	bx	lr
 800baf0:	200a      	movs	r0, #10
 800baf2:	e7f4      	b.n	800bade <rclc_executor_init+0xb6>
 800baf4:	f3af 8000 	nop.w
 800baf8:	3b9aca00 	.word	0x3b9aca00
 800bafc:	00000000 	.word	0x00000000
 800bb00:	08018f48 	.word	0x08018f48
 800bb04:	0800b989 	.word	0x0800b989

0800bb08 <rclc_executor_add_timer>:
 800bb08:	b300      	cbz	r0, 800bb4c <rclc_executor_add_timer+0x44>
 800bb0a:	b1f9      	cbz	r1, 800bb4c <rclc_executor_add_timer+0x44>
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800bb12:	4293      	cmp	r3, r2
 800bb14:	4604      	mov	r4, r0
 800bb16:	d301      	bcc.n	800bb1c <rclc_executor_add_timer+0x14>
 800bb18:	2001      	movs	r0, #1
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	6840      	ldr	r0, [r0, #4]
 800bb1e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800bb22:	019d      	lsls	r5, r3, #6
 800bb24:	6051      	str	r1, [r2, #4]
 800bb26:	2102      	movs	r1, #2
 800bb28:	5341      	strh	r1, [r0, r5]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	2101      	movs	r1, #1
 800bb30:	f104 0514 	add.w	r5, r4, #20
 800bb34:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800bb36:	8711      	strh	r1, [r2, #56]	@ 0x38
 800bb38:	4628      	mov	r0, r5
 800bb3a:	60e3      	str	r3, [r4, #12]
 800bb3c:	f007 fd44 	bl	80135c8 <rcl_wait_set_is_valid>
 800bb40:	b930      	cbnz	r0, 800bb50 <rclc_executor_add_timer+0x48>
 800bb42:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800bb44:	3301      	adds	r3, #1
 800bb46:	2000      	movs	r0, #0
 800bb48:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800bb4a:	bd38      	pop	{r3, r4, r5, pc}
 800bb4c:	200b      	movs	r0, #11
 800bb4e:	4770      	bx	lr
 800bb50:	4628      	mov	r0, r5
 800bb52:	f007 fd3f 	bl	80135d4 <rcl_wait_set_fini>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d0f3      	beq.n	800bb42 <rclc_executor_add_timer+0x3a>
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}

0800bb5c <rclc_executor_prepare>:
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d044      	beq.n	800bbea <rclc_executor_prepare+0x8e>
 800bb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb62:	f100 0514 	add.w	r5, r0, #20
 800bb66:	b09b      	sub	sp, #108	@ 0x6c
 800bb68:	4604      	mov	r4, r0
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f007 fd2c 	bl	80135c8 <rcl_wait_set_is_valid>
 800bb70:	b110      	cbz	r0, 800bb78 <rclc_executor_prepare+0x1c>
 800bb72:	2000      	movs	r0, #0
 800bb74:	b01b      	add	sp, #108	@ 0x6c
 800bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f007 fd2b 	bl	80135d4 <rcl_wait_set_fini>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d130      	bne.n	800bbe4 <rclc_executor_prepare+0x88>
 800bb82:	a80c      	add	r0, sp, #48	@ 0x30
 800bb84:	f007 fd0c 	bl	80135a0 <rcl_get_zero_initialized_wait_set>
 800bb88:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800bb8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb90:	46ae      	mov	lr, r5
 800bb92:	6927      	ldr	r7, [r4, #16]
 800bb94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bba0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bba4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bba8:	f8dc 3000 	ldr.w	r3, [ip]
 800bbac:	f8ce 3000 	str.w	r3, [lr]
 800bbb0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bbb2:	ae04      	add	r6, sp, #16
 800bbb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6822      	ldr	r2, [r4, #0]
 800bbba:	6033      	str	r3, [r6, #0]
 800bbbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbbe:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800bbc0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bbc4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800bbc8:	e9cd 2100 	strd	r2, r1, [sp]
 800bbcc:	4628      	mov	r0, r5
 800bbce:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800bbd0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bbd2:	f007 fffd 	bl	8013bd0 <rcl_wait_set_init>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d0cc      	beq.n	800bb74 <rclc_executor_prepare+0x18>
 800bbda:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bbdc:	f000 fb5c 	bl	800c298 <rcutils_reset_error>
 800bbe0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bbe2:	e7c7      	b.n	800bb74 <rclc_executor_prepare+0x18>
 800bbe4:	f000 fb58 	bl	800c298 <rcutils_reset_error>
 800bbe8:	e7cb      	b.n	800bb82 <rclc_executor_prepare+0x26>
 800bbea:	200b      	movs	r0, #11
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop

0800bbf0 <rclc_executor_spin_some.part.0>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	f100 0614 	add.w	r6, r0, #20
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	4691      	mov	r9, r2
 800bbfc:	4698      	mov	r8, r3
 800bbfe:	4605      	mov	r5, r0
 800bc00:	f7ff ffac 	bl	800bb5c <rclc_executor_prepare>
 800bc04:	4630      	mov	r0, r6
 800bc06:	f007 fdb1 	bl	801376c <rcl_wait_set_clear>
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	f040 80ed 	bne.w	800bdec <rclc_executor_spin_some.part.0+0x1fc>
 800bc12:	68ab      	ldr	r3, [r5, #8]
 800bc14:	4604      	mov	r4, r0
 800bc16:	b303      	cbz	r3, 800bc5a <rclc_executor_spin_some.part.0+0x6a>
 800bc18:	6869      	ldr	r1, [r5, #4]
 800bc1a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800bc1e:	01a2      	lsls	r2, r4, #6
 800bc20:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800bc24:	b1cb      	cbz	r3, 800bc5a <rclc_executor_spin_some.part.0+0x6a>
 800bc26:	5c8b      	ldrb	r3, [r1, r2]
 800bc28:	2b0a      	cmp	r3, #10
 800bc2a:	f200 80d8 	bhi.w	800bdde <rclc_executor_spin_some.part.0+0x1ee>
 800bc2e:	e8df f003 	tbb	[pc, r3]
 800bc32:	9c9c      	.short	0x9c9c
 800bc34:	068c8ca7 	.word	0x068c8ca7
 800bc38:	bdc90606 	.word	0xbdc90606
 800bc3c:	b2          	.byte	0xb2
 800bc3d:	00          	.byte	0x00
 800bc3e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bc42:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bc46:	4630      	mov	r0, r6
 800bc48:	f008 f8d8 	bl	8013dfc <rcl_wait_set_add_service>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	f040 8086 	bne.w	800bd5e <rclc_executor_spin_some.part.0+0x16e>
 800bc52:	68ab      	ldr	r3, [r5, #8]
 800bc54:	3401      	adds	r4, #1
 800bc56:	429c      	cmp	r4, r3
 800bc58:	d3de      	bcc.n	800bc18 <rclc_executor_spin_some.part.0+0x28>
 800bc5a:	4643      	mov	r3, r8
 800bc5c:	464a      	mov	r2, r9
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f008 f8fa 	bl	8013e58 <rcl_wait>
 800bc64:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 80c7 	beq.w	800bdfc <rclc_executor_spin_some.part.0+0x20c>
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	f040 80b5 	bne.w	800bdde <rclc_executor_spin_some.part.0+0x1ee>
 800bc74:	68ab      	ldr	r3, [r5, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 8159 	beq.w	800bf2e <rclc_executor_spin_some.part.0+0x33e>
 800bc7c:	2400      	movs	r4, #0
 800bc7e:	46a0      	mov	r8, r4
 800bc80:	f240 1991 	movw	r9, #401	@ 0x191
 800bc84:	e00a      	b.n	800bc9c <rclc_executor_spin_some.part.0+0xac>
 800bc86:	f7ff fb7d 	bl	800b384 <_rclc_check_for_new_data>
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	b110      	cbz	r0, 800bc94 <rclc_executor_spin_some.part.0+0xa4>
 800bc8e:	4548      	cmp	r0, r9
 800bc90:	f040 80b2 	bne.w	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800bc94:	68ab      	ldr	r3, [r5, #8]
 800bc96:	4598      	cmp	r8, r3
 800bc98:	f080 8126 	bcs.w	800bee8 <rclc_executor_spin_some.part.0+0x2f8>
 800bc9c:	686a      	ldr	r2, [r5, #4]
 800bc9e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bca2:	4631      	mov	r1, r6
 800bca4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800bca8:	f108 0801 	add.w	r8, r8, #1
 800bcac:	f1bc 0f00 	cmp.w	ip, #0
 800bcb0:	d1e9      	bne.n	800bc86 <rclc_executor_spin_some.part.0+0x96>
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800bcba:	4798      	blx	r3
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f000 809b 	beq.w	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800bcc2:	68ab      	ldr	r3, [r5, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 8097 	beq.w	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800bcca:	f04f 0800 	mov.w	r8, #0
 800bcce:	f240 1991 	movw	r9, #401	@ 0x191
 800bcd2:	e009      	b.n	800bce8 <rclc_executor_spin_some.part.0+0xf8>
 800bcd4:	f7ff fba4 	bl	800b420 <_rclc_take_new_data>
 800bcd8:	4604      	mov	r4, r0
 800bcda:	b110      	cbz	r0, 800bce2 <rclc_executor_spin_some.part.0+0xf2>
 800bcdc:	4548      	cmp	r0, r9
 800bcde:	f040 808b 	bne.w	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800bce2:	68ab      	ldr	r3, [r5, #8]
 800bce4:	4598      	cmp	r8, r3
 800bce6:	d209      	bcs.n	800bcfc <rclc_executor_spin_some.part.0+0x10c>
 800bce8:	6868      	ldr	r0, [r5, #4]
 800bcea:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800bcee:	4631      	mov	r1, r6
 800bcf0:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800bcf4:	f108 0801 	add.w	r8, r8, #1
 800bcf8:	2a00      	cmp	r2, #0
 800bcfa:	d1eb      	bne.n	800bcd4 <rclc_executor_spin_some.part.0+0xe4>
 800bcfc:	2600      	movs	r6, #0
 800bcfe:	b97b      	cbnz	r3, 800bd20 <rclc_executor_spin_some.part.0+0x130>
 800bd00:	e07a      	b.n	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800bd02:	f812 200c 	ldrb.w	r2, [r2, ip]
 800bd06:	2a08      	cmp	r2, #8
 800bd08:	f000 80fd 	beq.w	800bf06 <rclc_executor_spin_some.part.0+0x316>
 800bd0c:	2a09      	cmp	r2, #9
 800bd0e:	f000 80ef 	beq.w	800bef0 <rclc_executor_spin_some.part.0+0x300>
 800bd12:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800bd16:	b98a      	cbnz	r2, 800bd3c <rclc_executor_spin_some.part.0+0x14c>
 800bd18:	3601      	adds	r6, #1
 800bd1a:	429e      	cmp	r6, r3
 800bd1c:	d262      	bcs.n	800bde4 <rclc_executor_spin_some.part.0+0x1f4>
 800bd1e:	2400      	movs	r4, #0
 800bd20:	686a      	ldr	r2, [r5, #4]
 800bd22:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800bd26:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800bd2a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	d062      	beq.n	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800bd32:	7841      	ldrb	r1, [r0, #1]
 800bd34:	2900      	cmp	r1, #0
 800bd36:	d0e4      	beq.n	800bd02 <rclc_executor_spin_some.part.0+0x112>
 800bd38:	2901      	cmp	r1, #1
 800bd3a:	d1ed      	bne.n	800bd18 <rclc_executor_spin_some.part.0+0x128>
 800bd3c:	f7ff fce4 	bl	800b708 <_rclc_execute.part.0>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	f040 80b6 	bne.w	800beb2 <rclc_executor_spin_some.part.0+0x2c2>
 800bd46:	68ab      	ldr	r3, [r5, #8]
 800bd48:	e7e6      	b.n	800bd18 <rclc_executor_spin_some.part.0+0x128>
 800bd4a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd4e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bd52:	4630      	mov	r0, r6
 800bd54:	f008 f826 	bl	8013da4 <rcl_wait_set_add_client>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	f43f af7a 	beq.w	800bc52 <rclc_executor_spin_some.part.0+0x62>
 800bd5e:	9001      	str	r0, [sp, #4]
 800bd60:	f000 fa9a 	bl	800c298 <rcutils_reset_error>
 800bd64:	9801      	ldr	r0, [sp, #4]
 800bd66:	4607      	mov	r7, r0
 800bd68:	e03c      	b.n	800bde4 <rclc_executor_spin_some.part.0+0x1f4>
 800bd6a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd6e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bd72:	4630      	mov	r0, r6
 800bd74:	f007 fcce 	bl	8013714 <rcl_wait_set_add_subscription>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	f43f af6a 	beq.w	800bc52 <rclc_executor_spin_some.part.0+0x62>
 800bd7e:	e7ee      	b.n	800bd5e <rclc_executor_spin_some.part.0+0x16e>
 800bd80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd84:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f007 ffdb 	bl	8013d44 <rcl_wait_set_add_timer>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f43f af5f 	beq.w	800bc52 <rclc_executor_spin_some.part.0+0x62>
 800bd94:	e7e3      	b.n	800bd5e <rclc_executor_spin_some.part.0+0x16e>
 800bd96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd9a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f007 ffa4 	bl	8013cec <rcl_wait_set_add_guard_condition>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f43f af54 	beq.w	800bc52 <rclc_executor_spin_some.part.0+0x62>
 800bdaa:	e7d8      	b.n	800bd5e <rclc_executor_spin_some.part.0+0x16e>
 800bdac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bdb0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bdb4:	3110      	adds	r1, #16
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f008 fd26 	bl	8014808 <rcl_action_wait_set_add_action_server>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	f43f af48 	beq.w	800bc52 <rclc_executor_spin_some.part.0+0x62>
 800bdc2:	e7cc      	b.n	800bd5e <rclc_executor_spin_some.part.0+0x16e>
 800bdc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bdc8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800bdcc:	3110      	adds	r1, #16
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f008 faf1 	bl	80143b8 <rcl_action_wait_set_add_action_client>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f43f af3b 	beq.w	800bc52 <rclc_executor_spin_some.part.0+0x62>
 800bddc:	e7bf      	b.n	800bd5e <rclc_executor_spin_some.part.0+0x16e>
 800bdde:	f000 fa5b 	bl	800c298 <rcutils_reset_error>
 800bde2:	2701      	movs	r7, #1
 800bde4:	4638      	mov	r0, r7
 800bde6:	b003      	add	sp, #12
 800bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdec:	f000 fa54 	bl	800c298 <rcutils_reset_error>
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	b003      	add	sp, #12
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	4627      	mov	r7, r4
 800bdfa:	e7f3      	b.n	800bde4 <rclc_executor_spin_some.part.0+0x1f4>
 800bdfc:	68ab      	ldr	r3, [r5, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f000 8092 	beq.w	800bf28 <rclc_executor_spin_some.part.0+0x338>
 800be04:	2400      	movs	r4, #0
 800be06:	46a0      	mov	r8, r4
 800be08:	f240 1991 	movw	r9, #401	@ 0x191
 800be0c:	e008      	b.n	800be20 <rclc_executor_spin_some.part.0+0x230>
 800be0e:	f7ff fab9 	bl	800b384 <_rclc_check_for_new_data>
 800be12:	4604      	mov	r4, r0
 800be14:	b108      	cbz	r0, 800be1a <rclc_executor_spin_some.part.0+0x22a>
 800be16:	4548      	cmp	r0, r9
 800be18:	d1ee      	bne.n	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800be1a:	68ab      	ldr	r3, [r5, #8]
 800be1c:	4598      	cmp	r8, r3
 800be1e:	d265      	bcs.n	800beec <rclc_executor_spin_some.part.0+0x2fc>
 800be20:	686a      	ldr	r2, [r5, #4]
 800be22:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800be26:	4631      	mov	r1, r6
 800be28:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800be2c:	f108 0801 	add.w	r8, r8, #1
 800be30:	f1bc 0f00 	cmp.w	ip, #0
 800be34:	d1eb      	bne.n	800be0e <rclc_executor_spin_some.part.0+0x21e>
 800be36:	4619      	mov	r1, r3
 800be38:	4610      	mov	r0, r2
 800be3a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800be3e:	4798      	blx	r3
 800be40:	2800      	cmp	r0, #0
 800be42:	d0d9      	beq.n	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800be44:	68ab      	ldr	r3, [r5, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0d6      	beq.n	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800be4a:	f04f 0800 	mov.w	r8, #0
 800be4e:	f240 1991 	movw	r9, #401	@ 0x191
 800be52:	f240 2a59 	movw	sl, #601	@ 0x259
 800be56:	e00e      	b.n	800be76 <rclc_executor_spin_some.part.0+0x286>
 800be58:	f813 300b 	ldrb.w	r3, [r3, fp]
 800be5c:	2b08      	cmp	r3, #8
 800be5e:	d033      	beq.n	800bec8 <rclc_executor_spin_some.part.0+0x2d8>
 800be60:	2b09      	cmp	r3, #9
 800be62:	d028      	beq.n	800beb6 <rclc_executor_spin_some.part.0+0x2c6>
 800be64:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800be68:	b9fb      	cbnz	r3, 800beaa <rclc_executor_spin_some.part.0+0x2ba>
 800be6a:	68ab      	ldr	r3, [r5, #8]
 800be6c:	f108 0801 	add.w	r8, r8, #1
 800be70:	4598      	cmp	r8, r3
 800be72:	d2b7      	bcs.n	800bde4 <rclc_executor_spin_some.part.0+0x1f4>
 800be74:	2400      	movs	r4, #0
 800be76:	6868      	ldr	r0, [r5, #4]
 800be78:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800be7c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800be80:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800be84:	2b00      	cmp	r3, #0
 800be86:	d0b7      	beq.n	800bdf8 <rclc_executor_spin_some.part.0+0x208>
 800be88:	4631      	mov	r1, r6
 800be8a:	f7ff fac9 	bl	800b420 <_rclc_take_new_data>
 800be8e:	b118      	cbz	r0, 800be98 <rclc_executor_spin_some.part.0+0x2a8>
 800be90:	4548      	cmp	r0, r9
 800be92:	d001      	beq.n	800be98 <rclc_executor_spin_some.part.0+0x2a8>
 800be94:	4550      	cmp	r0, sl
 800be96:	d10c      	bne.n	800beb2 <rclc_executor_spin_some.part.0+0x2c2>
 800be98:	686b      	ldr	r3, [r5, #4]
 800be9a:	eb13 000b 	adds.w	r0, r3, fp
 800be9e:	d021      	beq.n	800bee4 <rclc_executor_spin_some.part.0+0x2f4>
 800bea0:	7842      	ldrb	r2, [r0, #1]
 800bea2:	2a00      	cmp	r2, #0
 800bea4:	d0d8      	beq.n	800be58 <rclc_executor_spin_some.part.0+0x268>
 800bea6:	2a01      	cmp	r2, #1
 800bea8:	d1df      	bne.n	800be6a <rclc_executor_spin_some.part.0+0x27a>
 800beaa:	f7ff fc2d 	bl	800b708 <_rclc_execute.part.0>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d0db      	beq.n	800be6a <rclc_executor_spin_some.part.0+0x27a>
 800beb2:	4607      	mov	r7, r0
 800beb4:	e796      	b.n	800bde4 <rclc_executor_spin_some.part.0+0x1f4>
 800beb6:	6843      	ldr	r3, [r0, #4]
 800beb8:	6a1a      	ldr	r2, [r3, #32]
 800beba:	2a00      	cmp	r2, #0
 800bebc:	d1f5      	bne.n	800beaa <rclc_executor_spin_some.part.0+0x2ba>
 800bebe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0d1      	beq.n	800be6a <rclc_executor_spin_some.part.0+0x27a>
 800bec6:	e7f0      	b.n	800beaa <rclc_executor_spin_some.part.0+0x2ba>
 800bec8:	6843      	ldr	r3, [r0, #4]
 800beca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800becc:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800bed0:	d1eb      	bne.n	800beaa <rclc_executor_spin_some.part.0+0x2ba>
 800bed2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800bed6:	2a00      	cmp	r2, #0
 800bed8:	d1e7      	bne.n	800beaa <rclc_executor_spin_some.part.0+0x2ba>
 800beda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0c3      	beq.n	800be6a <rclc_executor_spin_some.part.0+0x27a>
 800bee2:	e7e2      	b.n	800beaa <rclc_executor_spin_some.part.0+0x2ba>
 800bee4:	270b      	movs	r7, #11
 800bee6:	e77d      	b.n	800bde4 <rclc_executor_spin_some.part.0+0x1f4>
 800bee8:	686a      	ldr	r2, [r5, #4]
 800beea:	e6e2      	b.n	800bcb2 <rclc_executor_spin_some.part.0+0xc2>
 800beec:	686a      	ldr	r2, [r5, #4]
 800beee:	e7a2      	b.n	800be36 <rclc_executor_spin_some.part.0+0x246>
 800bef0:	6842      	ldr	r2, [r0, #4]
 800bef2:	6a11      	ldr	r1, [r2, #32]
 800bef4:	2900      	cmp	r1, #0
 800bef6:	f47f af21 	bne.w	800bd3c <rclc_executor_spin_some.part.0+0x14c>
 800befa:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800befe:	2a00      	cmp	r2, #0
 800bf00:	f43f af0a 	beq.w	800bd18 <rclc_executor_spin_some.part.0+0x128>
 800bf04:	e71a      	b.n	800bd3c <rclc_executor_spin_some.part.0+0x14c>
 800bf06:	6842      	ldr	r2, [r0, #4]
 800bf08:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800bf0a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800bf0e:	f47f af15 	bne.w	800bd3c <rclc_executor_spin_some.part.0+0x14c>
 800bf12:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800bf16:	2900      	cmp	r1, #0
 800bf18:	f47f af10 	bne.w	800bd3c <rclc_executor_spin_some.part.0+0x14c>
 800bf1c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	f43f aef9 	beq.w	800bd18 <rclc_executor_spin_some.part.0+0x128>
 800bf26:	e709      	b.n	800bd3c <rclc_executor_spin_some.part.0+0x14c>
 800bf28:	686a      	ldr	r2, [r5, #4]
 800bf2a:	461c      	mov	r4, r3
 800bf2c:	e783      	b.n	800be36 <rclc_executor_spin_some.part.0+0x246>
 800bf2e:	686a      	ldr	r2, [r5, #4]
 800bf30:	461c      	mov	r4, r3
 800bf32:	e6be      	b.n	800bcb2 <rclc_executor_spin_some.part.0+0xc2>

0800bf34 <rclc_executor_spin>:
 800bf34:	b1d0      	cbz	r0, 800bf6c <rclc_executor_spin+0x38>
 800bf36:	b510      	push	{r4, lr}
 800bf38:	4604      	mov	r4, r0
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800bf40:	6820      	ldr	r0, [r4, #0]
 800bf42:	e9cd 2300 	strd	r2, r3, [sp]
 800bf46:	f006 f96f 	bl	8012228 <rcl_context_is_valid>
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf50:	4620      	mov	r0, r4
 800bf52:	b131      	cbz	r1, 800bf62 <rclc_executor_spin+0x2e>
 800bf54:	f7ff fe4c 	bl	800bbf0 <rclc_executor_spin_some.part.0>
 800bf58:	f030 0302 	bics.w	r3, r0, #2
 800bf5c:	d0ee      	beq.n	800bf3c <rclc_executor_spin+0x8>
 800bf5e:	b002      	add	sp, #8
 800bf60:	bd10      	pop	{r4, pc}
 800bf62:	f000 f999 	bl	800c298 <rcutils_reset_error>
 800bf66:	2001      	movs	r0, #1
 800bf68:	b002      	add	sp, #8
 800bf6a:	bd10      	pop	{r4, pc}
 800bf6c:	200b      	movs	r0, #11
 800bf6e:	4770      	bx	lr

0800bf70 <rclc_executor_handle_counters_zero_init>:
 800bf70:	b130      	cbz	r0, 800bf80 <rclc_executor_handle_counters_zero_init+0x10>
 800bf72:	b508      	push	{r3, lr}
 800bf74:	2220      	movs	r2, #32
 800bf76:	2100      	movs	r1, #0
 800bf78:	f00b ff74 	bl	8017e64 <memset>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	bd08      	pop	{r3, pc}
 800bf80:	200b      	movs	r0, #11
 800bf82:	4770      	bx	lr
 800bf84:	0000      	movs	r0, r0
	...

0800bf88 <rclc_executor_handle_init>:
 800bf88:	b168      	cbz	r0, 800bfa6 <rclc_executor_handle_init+0x1e>
 800bf8a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800bfb0 <rclc_executor_handle_init+0x28>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	220b      	movs	r2, #11
 800bf92:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800bf96:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800bf9a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800bf9e:	8002      	strh	r2, [r0, #0]
 800bfa0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	4770      	bx	lr
 800bfa6:	200b      	movs	r0, #11
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	f3af 8000 	nop.w
	...

0800bfb8 <rclc_support_init_with_options>:
 800bfb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bfc0:	b340      	cbz	r0, 800c014 <rclc_support_init_with_options+0x5c>
 800bfc2:	461d      	mov	r5, r3
 800bfc4:	b333      	cbz	r3, 800c014 <rclc_support_init_with_options+0x5c>
 800bfc6:	b32e      	cbz	r6, 800c014 <rclc_support_init_with_options+0x5c>
 800bfc8:	46e9      	mov	r9, sp
 800bfca:	4604      	mov	r4, r0
 800bfcc:	4648      	mov	r0, r9
 800bfce:	460f      	mov	r7, r1
 800bfd0:	4690      	mov	r8, r2
 800bfd2:	f006 f91f 	bl	8012214 <rcl_get_zero_initialized_context>
 800bfd6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800bfda:	462a      	mov	r2, r5
 800bfdc:	e884 0003 	stmia.w	r4, {r0, r1}
 800bfe0:	4623      	mov	r3, r4
 800bfe2:	4641      	mov	r1, r8
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	f006 f985 	bl	80122f4 <rcl_init>
 800bfea:	4605      	mov	r5, r0
 800bfec:	b960      	cbnz	r0, 800c008 <rclc_support_init_with_options+0x50>
 800bfee:	60a6      	str	r6, [r4, #8]
 800bff0:	4632      	mov	r2, r6
 800bff2:	f104 010c 	add.w	r1, r4, #12
 800bff6:	2003      	movs	r0, #3
 800bff8:	f006 fed2 	bl	8012da0 <rcl_clock_init>
 800bffc:	4605      	mov	r5, r0
 800bffe:	b918      	cbnz	r0, 800c008 <rclc_support_init_with_options+0x50>
 800c000:	4628      	mov	r0, r5
 800c002:	b003      	add	sp, #12
 800c004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c008:	f000 f946 	bl	800c298 <rcutils_reset_error>
 800c00c:	4628      	mov	r0, r5
 800c00e:	b003      	add	sp, #12
 800c010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c014:	250b      	movs	r5, #11
 800c016:	4628      	mov	r0, r5
 800c018:	b003      	add	sp, #12
 800c01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c01e:	bf00      	nop

0800c020 <rclc_node_init_default>:
 800c020:	b3b8      	cbz	r0, 800c092 <rclc_node_init_default+0x72>
 800c022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c026:	460d      	mov	r5, r1
 800c028:	b0a1      	sub	sp, #132	@ 0x84
 800c02a:	b329      	cbz	r1, 800c078 <rclc_node_init_default+0x58>
 800c02c:	4616      	mov	r6, r2
 800c02e:	b31a      	cbz	r2, 800c078 <rclc_node_init_default+0x58>
 800c030:	461f      	mov	r7, r3
 800c032:	b30b      	cbz	r3, 800c078 <rclc_node_init_default+0x58>
 800c034:	f10d 0810 	add.w	r8, sp, #16
 800c038:	4604      	mov	r4, r0
 800c03a:	4640      	mov	r0, r8
 800c03c:	f006 fa80 	bl	8012540 <rcl_get_zero_initialized_node>
 800c040:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c044:	f10d 0918 	add.w	r9, sp, #24
 800c048:	e884 0003 	stmia.w	r4, {r0, r1}
 800c04c:	4648      	mov	r0, r9
 800c04e:	f006 fbef 	bl	8012830 <rcl_node_get_default_options>
 800c052:	4640      	mov	r0, r8
 800c054:	f006 fa74 	bl	8012540 <rcl_get_zero_initialized_node>
 800c058:	f8cd 9000 	str.w	r9, [sp]
 800c05c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c060:	463b      	mov	r3, r7
 800c062:	e884 0003 	stmia.w	r4, {r0, r1}
 800c066:	4632      	mov	r2, r6
 800c068:	4629      	mov	r1, r5
 800c06a:	4620      	mov	r0, r4
 800c06c:	f006 fa72 	bl	8012554 <rcl_node_init>
 800c070:	b930      	cbnz	r0, 800c080 <rclc_node_init_default+0x60>
 800c072:	b021      	add	sp, #132	@ 0x84
 800c074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c078:	200b      	movs	r0, #11
 800c07a:	b021      	add	sp, #132	@ 0x84
 800c07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c080:	9003      	str	r0, [sp, #12]
 800c082:	f000 f909 	bl	800c298 <rcutils_reset_error>
 800c086:	f000 f907 	bl	800c298 <rcutils_reset_error>
 800c08a:	9803      	ldr	r0, [sp, #12]
 800c08c:	b021      	add	sp, #132	@ 0x84
 800c08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c092:	200b      	movs	r0, #11
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop

0800c098 <rclc_publisher_init_default>:
 800c098:	b368      	cbz	r0, 800c0f6 <rclc_publisher_init_default+0x5e>
 800c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	460d      	mov	r5, r1
 800c0a0:	b0a0      	sub	sp, #128	@ 0x80
 800c0a2:	b321      	cbz	r1, 800c0ee <rclc_publisher_init_default+0x56>
 800c0a4:	4616      	mov	r6, r2
 800c0a6:	b312      	cbz	r2, 800c0ee <rclc_publisher_init_default+0x56>
 800c0a8:	461f      	mov	r7, r3
 800c0aa:	b303      	cbz	r3, 800c0ee <rclc_publisher_init_default+0x56>
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	f7ff f859 	bl	800b164 <rcl_get_zero_initialized_publisher>
 800c0b2:	f10d 0810 	add.w	r8, sp, #16
 800c0b6:	6020      	str	r0, [r4, #0]
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	f7ff f8ef 	bl	800b29c <rcl_publisher_get_default_options>
 800c0be:	490f      	ldr	r1, [pc, #60]	@ (800c0fc <rclc_publisher_init_default+0x64>)
 800c0c0:	2250      	movs	r2, #80	@ 0x50
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	f00b ff97 	bl	8017ff6 <memcpy>
 800c0c8:	f8cd 8000 	str.w	r8, [sp]
 800c0cc:	463b      	mov	r3, r7
 800c0ce:	4632      	mov	r2, r6
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f7ff f84c 	bl	800b170 <rcl_publisher_init>
 800c0d8:	b910      	cbnz	r0, 800c0e0 <rclc_publisher_init_default+0x48>
 800c0da:	b020      	add	sp, #128	@ 0x80
 800c0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e0:	9003      	str	r0, [sp, #12]
 800c0e2:	f000 f8d9 	bl	800c298 <rcutils_reset_error>
 800c0e6:	9803      	ldr	r0, [sp, #12]
 800c0e8:	b020      	add	sp, #128	@ 0x80
 800c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ee:	200b      	movs	r0, #11
 800c0f0:	b020      	add	sp, #128	@ 0x80
 800c0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f6:	200b      	movs	r0, #11
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	08018fd0 	.word	0x08018fd0

0800c100 <rclc_publisher_init_best_effort>:
 800c100:	b368      	cbz	r0, 800c15e <rclc_publisher_init_best_effort+0x5e>
 800c102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c106:	460d      	mov	r5, r1
 800c108:	b0a0      	sub	sp, #128	@ 0x80
 800c10a:	b321      	cbz	r1, 800c156 <rclc_publisher_init_best_effort+0x56>
 800c10c:	4616      	mov	r6, r2
 800c10e:	b312      	cbz	r2, 800c156 <rclc_publisher_init_best_effort+0x56>
 800c110:	461f      	mov	r7, r3
 800c112:	b303      	cbz	r3, 800c156 <rclc_publisher_init_best_effort+0x56>
 800c114:	4604      	mov	r4, r0
 800c116:	f7ff f825 	bl	800b164 <rcl_get_zero_initialized_publisher>
 800c11a:	f10d 0810 	add.w	r8, sp, #16
 800c11e:	6020      	str	r0, [r4, #0]
 800c120:	4640      	mov	r0, r8
 800c122:	f7ff f8bb 	bl	800b29c <rcl_publisher_get_default_options>
 800c126:	490f      	ldr	r1, [pc, #60]	@ (800c164 <rclc_publisher_init_best_effort+0x64>)
 800c128:	2250      	movs	r2, #80	@ 0x50
 800c12a:	4640      	mov	r0, r8
 800c12c:	f00b ff63 	bl	8017ff6 <memcpy>
 800c130:	f8cd 8000 	str.w	r8, [sp]
 800c134:	463b      	mov	r3, r7
 800c136:	4632      	mov	r2, r6
 800c138:	4629      	mov	r1, r5
 800c13a:	4620      	mov	r0, r4
 800c13c:	f7ff f818 	bl	800b170 <rcl_publisher_init>
 800c140:	b910      	cbnz	r0, 800c148 <rclc_publisher_init_best_effort+0x48>
 800c142:	b020      	add	sp, #128	@ 0x80
 800c144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c148:	9003      	str	r0, [sp, #12]
 800c14a:	f000 f8a5 	bl	800c298 <rcutils_reset_error>
 800c14e:	9803      	ldr	r0, [sp, #12]
 800c150:	b020      	add	sp, #128	@ 0x80
 800c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c156:	200b      	movs	r0, #11
 800c158:	b020      	add	sp, #128	@ 0x80
 800c15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15e:	200b      	movs	r0, #11
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	08019020 	.word	0x08019020

0800c168 <rclc_timer_init_default>:
 800c168:	b360      	cbz	r0, 800c1c4 <rclc_timer_init_default+0x5c>
 800c16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16e:	460e      	mov	r6, r1
 800c170:	b08a      	sub	sp, #40	@ 0x28
 800c172:	b319      	cbz	r1, 800c1bc <rclc_timer_init_default+0x54>
 800c174:	4690      	mov	r8, r2
 800c176:	461f      	mov	r7, r3
 800c178:	4605      	mov	r5, r0
 800c17a:	f006 ffef 	bl	801315c <rcl_get_zero_initialized_timer>
 800c17e:	68b4      	ldr	r4, [r6, #8]
 800c180:	6028      	str	r0, [r5, #0]
 800c182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c184:	f10d 0c0c 	add.w	ip, sp, #12
 800c188:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	f8cc 3000 	str.w	r3, [ip]
 800c192:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c194:	9302      	str	r3, [sp, #8]
 800c196:	e9cd 8700 	strd	r8, r7, [sp]
 800c19a:	4628      	mov	r0, r5
 800c19c:	4632      	mov	r2, r6
 800c19e:	f106 010c 	add.w	r1, r6, #12
 800c1a2:	f006 ffe1 	bl	8013168 <rcl_timer_init>
 800c1a6:	b910      	cbnz	r0, 800c1ae <rclc_timer_init_default+0x46>
 800c1a8:	b00a      	add	sp, #40	@ 0x28
 800c1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ae:	9009      	str	r0, [sp, #36]	@ 0x24
 800c1b0:	f000 f872 	bl	800c298 <rcutils_reset_error>
 800c1b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1b6:	b00a      	add	sp, #40	@ 0x28
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	200b      	movs	r0, #11
 800c1be:	b00a      	add	sp, #40	@ 0x28
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c4:	200b      	movs	r0, #11
 800c1c6:	4770      	bx	lr

0800c1c8 <__default_zero_allocate>:
 800c1c8:	f00b ba62 	b.w	8017690 <calloc>

0800c1cc <__default_reallocate>:
 800c1cc:	f00b bbee 	b.w	80179ac <realloc>

0800c1d0 <__default_deallocate>:
 800c1d0:	f00b baca 	b.w	8017768 <free>

0800c1d4 <__default_allocate>:
 800c1d4:	f00b bac0 	b.w	8017758 <malloc>

0800c1d8 <rcutils_get_zero_initialized_allocator>:
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	4c05      	ldr	r4, [pc, #20]	@ (800c1f0 <rcutils_get_zero_initialized_allocator+0x18>)
 800c1dc:	4686      	mov	lr, r0
 800c1de:	4684      	mov	ip, r0
 800c1e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	f8cc 3000 	str.w	r3, [ip]
 800c1ec:	4670      	mov	r0, lr
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	08019070 	.word	0x08019070

0800c1f4 <rcutils_set_default_allocator>:
 800c1f4:	b1a8      	cbz	r0, 800c222 <rcutils_set_default_allocator+0x2e>
 800c1f6:	6802      	ldr	r2, [r0, #0]
 800c1f8:	b1a2      	cbz	r2, 800c224 <rcutils_set_default_allocator+0x30>
 800c1fa:	6841      	ldr	r1, [r0, #4]
 800c1fc:	b1a1      	cbz	r1, 800c228 <rcutils_set_default_allocator+0x34>
 800c1fe:	b410      	push	{r4}
 800c200:	68c4      	ldr	r4, [r0, #12]
 800c202:	b164      	cbz	r4, 800c21e <rcutils_set_default_allocator+0x2a>
 800c204:	6880      	ldr	r0, [r0, #8]
 800c206:	b138      	cbz	r0, 800c218 <rcutils_set_default_allocator+0x24>
 800c208:	4b08      	ldr	r3, [pc, #32]	@ (800c22c <rcutils_set_default_allocator+0x38>)
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	2200      	movs	r2, #0
 800c20e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c212:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c216:	2001      	movs	r0, #1
 800c218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	4620      	mov	r0, r4
 800c220:	e7fa      	b.n	800c218 <rcutils_set_default_allocator+0x24>
 800c222:	4770      	bx	lr
 800c224:	4610      	mov	r0, r2
 800c226:	4770      	bx	lr
 800c228:	4608      	mov	r0, r1
 800c22a:	4770      	bx	lr
 800c22c:	20000014 	.word	0x20000014

0800c230 <rcutils_get_default_allocator>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4c05      	ldr	r4, [pc, #20]	@ (800c248 <rcutils_get_default_allocator+0x18>)
 800c234:	4686      	mov	lr, r0
 800c236:	4684      	mov	ip, r0
 800c238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c23a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	f8cc 3000 	str.w	r3, [ip]
 800c244:	4670      	mov	r0, lr
 800c246:	bd10      	pop	{r4, pc}
 800c248:	20000014 	.word	0x20000014

0800c24c <rcutils_allocator_is_valid>:
 800c24c:	b158      	cbz	r0, 800c266 <rcutils_allocator_is_valid+0x1a>
 800c24e:	6803      	ldr	r3, [r0, #0]
 800c250:	b143      	cbz	r3, 800c264 <rcutils_allocator_is_valid+0x18>
 800c252:	6843      	ldr	r3, [r0, #4]
 800c254:	b133      	cbz	r3, 800c264 <rcutils_allocator_is_valid+0x18>
 800c256:	68c3      	ldr	r3, [r0, #12]
 800c258:	b123      	cbz	r3, 800c264 <rcutils_allocator_is_valid+0x18>
 800c25a:	6880      	ldr	r0, [r0, #8]
 800c25c:	3800      	subs	r0, #0
 800c25e:	bf18      	it	ne
 800c260:	2001      	movne	r0, #1
 800c262:	4770      	bx	lr
 800c264:	4618      	mov	r0, r3
 800c266:	4770      	bx	lr

0800c268 <rcutils_get_error_string>:
 800c268:	4b06      	ldr	r3, [pc, #24]	@ (800c284 <rcutils_get_error_string+0x1c>)
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	b13b      	cbz	r3, 800c27e <rcutils_get_error_string+0x16>
 800c26e:	4b06      	ldr	r3, [pc, #24]	@ (800c288 <rcutils_get_error_string+0x20>)
 800c270:	781a      	ldrb	r2, [r3, #0]
 800c272:	b90a      	cbnz	r2, 800c278 <rcutils_get_error_string+0x10>
 800c274:	2201      	movs	r2, #1
 800c276:	701a      	strb	r2, [r3, #0]
 800c278:	4b04      	ldr	r3, [pc, #16]	@ (800c28c <rcutils_get_error_string+0x24>)
 800c27a:	7818      	ldrb	r0, [r3, #0]
 800c27c:	4770      	bx	lr
 800c27e:	4b04      	ldr	r3, [pc, #16]	@ (800c290 <rcutils_get_error_string+0x28>)
 800c280:	7818      	ldrb	r0, [r3, #0]
 800c282:	4770      	bx	lr
 800c284:	200081b0 	.word	0x200081b0
 800c288:	200081c9 	.word	0x200081c9
 800c28c:	200081c8 	.word	0x200081c8
 800c290:	08019084 	.word	0x08019084
 800c294:	00000000 	.word	0x00000000

0800c298 <rcutils_reset_error>:
 800c298:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800c2b8 <rcutils_reset_error+0x20>
 800c29c:	4a08      	ldr	r2, [pc, #32]	@ (800c2c0 <rcutils_reset_error+0x28>)
 800c29e:	4809      	ldr	r0, [pc, #36]	@ (800c2c4 <rcutils_reset_error+0x2c>)
 800c2a0:	4909      	ldr	r1, [pc, #36]	@ (800c2c8 <rcutils_reset_error+0x30>)
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	8013      	strh	r3, [r2, #0]
 800c2a6:	ed82 7b02 	vstr	d7, [r2, #8]
 800c2aa:	4a08      	ldr	r2, [pc, #32]	@ (800c2cc <rcutils_reset_error+0x34>)
 800c2ac:	7003      	strb	r3, [r0, #0]
 800c2ae:	700b      	strb	r3, [r1, #0]
 800c2b0:	7013      	strb	r3, [r2, #0]
 800c2b2:	4770      	bx	lr
 800c2b4:	f3af 8000 	nop.w
	...
 800c2c0:	200081b8 	.word	0x200081b8
 800c2c4:	200081c9 	.word	0x200081c9
 800c2c8:	200081c8 	.word	0x200081c8
 800c2cc:	200081b0 	.word	0x200081b0

0800c2d0 <rcutils_system_time_now>:
 800c2d0:	b308      	cbz	r0, 800c316 <rcutils_system_time_now+0x46>
 800c2d2:	b570      	push	{r4, r5, r6, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4669      	mov	r1, sp
 800c2da:	2001      	movs	r0, #1
 800c2dc:	f7f5 fc20 	bl	8001b20 <clock_gettime>
 800c2e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800c2e4:	2d00      	cmp	r5, #0
 800c2e6:	db13      	blt.n	800c310 <rcutils_system_time_now+0x40>
 800c2e8:	9902      	ldr	r1, [sp, #8]
 800c2ea:	2900      	cmp	r1, #0
 800c2ec:	db0d      	blt.n	800c30a <rcutils_system_time_now+0x3a>
 800c2ee:	4e0b      	ldr	r6, [pc, #44]	@ (800c31c <rcutils_system_time_now+0x4c>)
 800c2f0:	fba3 3206 	umull	r3, r2, r3, r6
 800c2f4:	185b      	adds	r3, r3, r1
 800c2f6:	fb06 2205 	mla	r2, r6, r5, r2
 800c2fa:	f04f 0000 	mov.w	r0, #0
 800c2fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800c302:	e9c4 3200 	strd	r3, r2, [r4]
 800c306:	b004      	add	sp, #16
 800c308:	bd70      	pop	{r4, r5, r6, pc}
 800c30a:	ea53 0205 	orrs.w	r2, r3, r5
 800c30e:	d1ee      	bne.n	800c2ee <rcutils_system_time_now+0x1e>
 800c310:	2002      	movs	r0, #2
 800c312:	b004      	add	sp, #16
 800c314:	bd70      	pop	{r4, r5, r6, pc}
 800c316:	200b      	movs	r0, #11
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	3b9aca00 	.word	0x3b9aca00

0800c320 <rcutils_steady_time_now>:
 800c320:	b308      	cbz	r0, 800c366 <rcutils_steady_time_now+0x46>
 800c322:	b570      	push	{r4, r5, r6, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	4604      	mov	r4, r0
 800c328:	4669      	mov	r1, sp
 800c32a:	2000      	movs	r0, #0
 800c32c:	f7f5 fbf8 	bl	8001b20 <clock_gettime>
 800c330:	e9dd 3500 	ldrd	r3, r5, [sp]
 800c334:	2d00      	cmp	r5, #0
 800c336:	db13      	blt.n	800c360 <rcutils_steady_time_now+0x40>
 800c338:	9902      	ldr	r1, [sp, #8]
 800c33a:	2900      	cmp	r1, #0
 800c33c:	db0d      	blt.n	800c35a <rcutils_steady_time_now+0x3a>
 800c33e:	4e0b      	ldr	r6, [pc, #44]	@ (800c36c <rcutils_steady_time_now+0x4c>)
 800c340:	fba3 3206 	umull	r3, r2, r3, r6
 800c344:	185b      	adds	r3, r3, r1
 800c346:	fb06 2205 	mla	r2, r6, r5, r2
 800c34a:	f04f 0000 	mov.w	r0, #0
 800c34e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800c352:	e9c4 3200 	strd	r3, r2, [r4]
 800c356:	b004      	add	sp, #16
 800c358:	bd70      	pop	{r4, r5, r6, pc}
 800c35a:	ea53 0205 	orrs.w	r2, r3, r5
 800c35e:	d1ee      	bne.n	800c33e <rcutils_steady_time_now+0x1e>
 800c360:	2002      	movs	r0, #2
 800c362:	b004      	add	sp, #16
 800c364:	bd70      	pop	{r4, r5, r6, pc}
 800c366:	200b      	movs	r0, #11
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	3b9aca00 	.word	0x3b9aca00

0800c370 <rmw_get_zero_initialized_init_options>:
 800c370:	b510      	push	{r4, lr}
 800c372:	2238      	movs	r2, #56	@ 0x38
 800c374:	4604      	mov	r4, r0
 800c376:	2100      	movs	r1, #0
 800c378:	f00b fd74 	bl	8017e64 <memset>
 800c37c:	f104 0010 	add.w	r0, r4, #16
 800c380:	f000 f80a 	bl	800c398 <rmw_get_default_security_options>
 800c384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c388:	60e3      	str	r3, [r4, #12]
 800c38a:	4620      	mov	r0, r4
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	bf00      	nop

0800c390 <rmw_get_default_publisher_options>:
 800c390:	2200      	movs	r2, #0
 800c392:	6002      	str	r2, [r0, #0]
 800c394:	7102      	strb	r2, [r0, #4]
 800c396:	4770      	bx	lr

0800c398 <rmw_get_default_security_options>:
 800c398:	2200      	movs	r2, #0
 800c39a:	7002      	strb	r2, [r0, #0]
 800c39c:	6042      	str	r2, [r0, #4]
 800c39e:	4770      	bx	lr

0800c3a0 <rmw_uros_set_custom_transport>:
 800c3a0:	b470      	push	{r4, r5, r6}
 800c3a2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c3a6:	b162      	cbz	r2, 800c3c2 <rmw_uros_set_custom_transport+0x22>
 800c3a8:	b15b      	cbz	r3, 800c3c2 <rmw_uros_set_custom_transport+0x22>
 800c3aa:	b155      	cbz	r5, 800c3c2 <rmw_uros_set_custom_transport+0x22>
 800c3ac:	b14e      	cbz	r6, 800c3c2 <rmw_uros_set_custom_transport+0x22>
 800c3ae:	4c06      	ldr	r4, [pc, #24]	@ (800c3c8 <rmw_uros_set_custom_transport+0x28>)
 800c3b0:	7020      	strb	r0, [r4, #0]
 800c3b2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c3b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c3ba:	6166      	str	r6, [r4, #20]
 800c3bc:	2000      	movs	r0, #0
 800c3be:	bc70      	pop	{r4, r5, r6}
 800c3c0:	4770      	bx	lr
 800c3c2:	200b      	movs	r0, #11
 800c3c4:	bc70      	pop	{r4, r5, r6}
 800c3c6:	4770      	bx	lr
 800c3c8:	200081cc 	.word	0x200081cc

0800c3cc <rmw_init_options_init>:
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	ad09      	add	r5, sp, #36	@ 0x24
 800c3d4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800c3d8:	b130      	cbz	r0, 800c3e8 <rmw_init_options_init+0x1c>
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f7ff ff35 	bl	800c24c <rcutils_allocator_is_valid>
 800c3e2:	b108      	cbz	r0, 800c3e8 <rmw_init_options_init+0x1c>
 800c3e4:	68a6      	ldr	r6, [r4, #8]
 800c3e6:	b12e      	cbz	r6, 800c3f4 <rmw_init_options_init+0x28>
 800c3e8:	200b      	movs	r0, #11
 800c3ea:	b003      	add	sp, #12
 800c3ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c3f0:	b004      	add	sp, #16
 800c3f2:	4770      	bx	lr
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e9c4 2300 	strd	r2, r3, [r4]
 800c3fc:	4b22      	ldr	r3, [pc, #136]	@ (800c488 <rmw_init_options_init+0xbc>)
 800c3fe:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800c498 <rmw_init_options_init+0xcc>
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	60a3      	str	r3, [r4, #8]
 800c406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c408:	f104 0c20 	add.w	ip, r4, #32
 800c40c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c410:	466f      	mov	r7, sp
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	f8cc 3000 	str.w	r3, [ip]
 800c418:	4638      	mov	r0, r7
 800c41a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800c41e:	60e6      	str	r6, [r4, #12]
 800c420:	f7ff ffba 	bl	800c398 <rmw_get_default_security_options>
 800c424:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c428:	f104 0310 	add.w	r3, r4, #16
 800c42c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c430:	2203      	movs	r2, #3
 800c432:	4816      	ldr	r0, [pc, #88]	@ (800c48c <rmw_init_options_init+0xc0>)
 800c434:	4916      	ldr	r1, [pc, #88]	@ (800c490 <rmw_init_options_init+0xc4>)
 800c436:	7626      	strb	r6, [r4, #24]
 800c438:	f000 febc 	bl	800d1b4 <rmw_uxrce_init_init_options_impl_memory>
 800c43c:	4813      	ldr	r0, [pc, #76]	@ (800c48c <rmw_init_options_init+0xc0>)
 800c43e:	f009 fa17 	bl	8015870 <get_memory>
 800c442:	b1f0      	cbz	r0, 800c482 <rmw_init_options_init+0xb6>
 800c444:	4a13      	ldr	r2, [pc, #76]	@ (800c494 <rmw_init_options_init+0xc8>)
 800c446:	6883      	ldr	r3, [r0, #8]
 800c448:	6851      	ldr	r1, [r2, #4]
 800c44a:	7810      	ldrb	r0, [r2, #0]
 800c44c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c44e:	7418      	strb	r0, [r3, #16]
 800c450:	6159      	str	r1, [r3, #20]
 800c452:	68d1      	ldr	r1, [r2, #12]
 800c454:	61d9      	str	r1, [r3, #28]
 800c456:	6911      	ldr	r1, [r2, #16]
 800c458:	6219      	str	r1, [r3, #32]
 800c45a:	6951      	ldr	r1, [r2, #20]
 800c45c:	6892      	ldr	r2, [r2, #8]
 800c45e:	619a      	str	r2, [r3, #24]
 800c460:	6259      	str	r1, [r3, #36]	@ 0x24
 800c462:	f004 fceb 	bl	8010e3c <uxr_nanos>
 800c466:	f00b fa35 	bl	80178d4 <srand>
 800c46a:	f00b fa61 	bl	8017930 <rand>
 800c46e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c470:	6298      	str	r0, [r3, #40]	@ 0x28
 800c472:	2800      	cmp	r0, #0
 800c474:	d0f9      	beq.n	800c46a <rmw_init_options_init+0x9e>
 800c476:	2000      	movs	r0, #0
 800c478:	b003      	add	sp, #12
 800c47a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c47e:	b004      	add	sp, #16
 800c480:	4770      	bx	lr
 800c482:	2001      	movs	r0, #1
 800c484:	e7b1      	b.n	800c3ea <rmw_init_options_init+0x1e>
 800c486:	bf00      	nop
 800c488:	08019b74 	.word	0x08019b74
 800c48c:	2000cae4 	.word	0x2000cae4
 800c490:	20008380 	.word	0x20008380
 800c494:	200081cc 	.word	0x200081cc
 800c498:	08019088 	.word	0x08019088

0800c49c <rmw_init_options_copy>:
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	b158      	cbz	r0, 800c4b8 <rmw_init_options_copy+0x1c>
 800c4a0:	460d      	mov	r5, r1
 800c4a2:	b149      	cbz	r1, 800c4b8 <rmw_init_options_copy+0x1c>
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	6880      	ldr	r0, [r0, #8]
 800c4a8:	b120      	cbz	r0, 800c4b4 <rmw_init_options_copy+0x18>
 800c4aa:	4b1e      	ldr	r3, [pc, #120]	@ (800c524 <rmw_init_options_copy+0x88>)
 800c4ac:	6819      	ldr	r1, [r3, #0]
 800c4ae:	f7f3 feb7 	bl	8000220 <strcmp>
 800c4b2:	bb90      	cbnz	r0, 800c51a <rmw_init_options_copy+0x7e>
 800c4b4:	68ab      	ldr	r3, [r5, #8]
 800c4b6:	b113      	cbz	r3, 800c4be <rmw_init_options_copy+0x22>
 800c4b8:	250b      	movs	r5, #11
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	bd70      	pop	{r4, r5, r6, pc}
 800c4be:	4623      	mov	r3, r4
 800c4c0:	462a      	mov	r2, r5
 800c4c2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800c4c6:	f8d3 c000 	ldr.w	ip, [r3]
 800c4ca:	6858      	ldr	r0, [r3, #4]
 800c4cc:	6899      	ldr	r1, [r3, #8]
 800c4ce:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c4d2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800c4d6:	3310      	adds	r3, #16
 800c4d8:	42b3      	cmp	r3, r6
 800c4da:	f8c2 c000 	str.w	ip, [r2]
 800c4de:	6050      	str	r0, [r2, #4]
 800c4e0:	6091      	str	r1, [r2, #8]
 800c4e2:	f102 0210 	add.w	r2, r2, #16
 800c4e6:	d1ee      	bne.n	800c4c6 <rmw_init_options_copy+0x2a>
 800c4e8:	6819      	ldr	r1, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	480e      	ldr	r0, [pc, #56]	@ (800c528 <rmw_init_options_copy+0x8c>)
 800c4ee:	6053      	str	r3, [r2, #4]
 800c4f0:	6011      	str	r1, [r2, #0]
 800c4f2:	f009 f9bd 	bl	8015870 <get_memory>
 800c4f6:	b198      	cbz	r0, 800c520 <rmw_init_options_copy+0x84>
 800c4f8:	6883      	ldr	r3, [r0, #8]
 800c4fa:	636b      	str	r3, [r5, #52]	@ 0x34
 800c4fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c4fe:	f102 0c10 	add.w	ip, r2, #16
 800c502:	f103 0410 	add.w	r4, r3, #16
 800c506:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c50a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c50c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800c510:	2500      	movs	r5, #0
 800c512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c516:	4628      	mov	r0, r5
 800c518:	bd70      	pop	{r4, r5, r6, pc}
 800c51a:	250c      	movs	r5, #12
 800c51c:	4628      	mov	r0, r5
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	2501      	movs	r5, #1
 800c522:	e7ca      	b.n	800c4ba <rmw_init_options_copy+0x1e>
 800c524:	08019b74 	.word	0x08019b74
 800c528:	2000cae4 	.word	0x2000cae4

0800c52c <rmw_init_options_fini>:
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d03d      	beq.n	800c5ac <rmw_init_options_fini+0x80>
 800c530:	b510      	push	{r4, lr}
 800c532:	4604      	mov	r4, r0
 800c534:	b08e      	sub	sp, #56	@ 0x38
 800c536:	3020      	adds	r0, #32
 800c538:	f7ff fe88 	bl	800c24c <rcutils_allocator_is_valid>
 800c53c:	b360      	cbz	r0, 800c598 <rmw_init_options_fini+0x6c>
 800c53e:	68a0      	ldr	r0, [r4, #8]
 800c540:	b120      	cbz	r0, 800c54c <rmw_init_options_fini+0x20>
 800c542:	4b1c      	ldr	r3, [pc, #112]	@ (800c5b4 <rmw_init_options_fini+0x88>)
 800c544:	6819      	ldr	r1, [r3, #0]
 800c546:	f7f3 fe6b 	bl	8000220 <strcmp>
 800c54a:	bb68      	cbnz	r0, 800c5a8 <rmw_init_options_fini+0x7c>
 800c54c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5b8 <rmw_init_options_fini+0x8c>)
 800c54e:	6819      	ldr	r1, [r3, #0]
 800c550:	b331      	cbz	r1, 800c5a0 <rmw_init_options_fini+0x74>
 800c552:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c554:	e001      	b.n	800c55a <rmw_init_options_fini+0x2e>
 800c556:	6849      	ldr	r1, [r1, #4]
 800c558:	b311      	cbz	r1, 800c5a0 <rmw_init_options_fini+0x74>
 800c55a:	688b      	ldr	r3, [r1, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d1fa      	bne.n	800c556 <rmw_init_options_fini+0x2a>
 800c560:	4815      	ldr	r0, [pc, #84]	@ (800c5b8 <rmw_init_options_fini+0x8c>)
 800c562:	f009 f995 	bl	8015890 <put_memory>
 800c566:	4668      	mov	r0, sp
 800c568:	f7ff ff02 	bl	800c370 <rmw_get_zero_initialized_init_options>
 800c56c:	46ee      	mov	lr, sp
 800c56e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c572:	46a4      	mov	ip, r4
 800c574:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c578:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c57c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c580:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c588:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c58c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c590:	2300      	movs	r3, #0
 800c592:	4618      	mov	r0, r3
 800c594:	b00e      	add	sp, #56	@ 0x38
 800c596:	bd10      	pop	{r4, pc}
 800c598:	230b      	movs	r3, #11
 800c59a:	4618      	mov	r0, r3
 800c59c:	b00e      	add	sp, #56	@ 0x38
 800c59e:	bd10      	pop	{r4, pc}
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	b00e      	add	sp, #56	@ 0x38
 800c5a6:	bd10      	pop	{r4, pc}
 800c5a8:	230c      	movs	r3, #12
 800c5aa:	e7f2      	b.n	800c592 <rmw_init_options_fini+0x66>
 800c5ac:	230b      	movs	r3, #11
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	08019b74 	.word	0x08019b74
 800c5b8:	2000cae4 	.word	0x2000cae4

0800c5bc <rmw_init>:
 800c5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f000 80d3 	beq.w	800c76e <rmw_init+0x1b2>
 800c5c8:	460e      	mov	r6, r1
 800c5ca:	2900      	cmp	r1, #0
 800c5cc:	f000 80cf 	beq.w	800c76e <rmw_init+0x1b2>
 800c5d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f000 80ca 	beq.w	800c76e <rmw_init+0x1b2>
 800c5da:	4b78      	ldr	r3, [pc, #480]	@ (800c7bc <rmw_init+0x200>)
 800c5dc:	6880      	ldr	r0, [r0, #8]
 800c5de:	681f      	ldr	r7, [r3, #0]
 800c5e0:	b128      	cbz	r0, 800c5ee <rmw_init+0x32>
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f3 fe1c 	bl	8000220 <strcmp>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	f040 80ca 	bne.w	800c782 <rmw_init+0x1c6>
 800c5ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5f2:	4c73      	ldr	r4, [pc, #460]	@ (800c7c0 <rmw_init+0x204>)
 800c5f4:	4973      	ldr	r1, [pc, #460]	@ (800c7c4 <rmw_init+0x208>)
 800c5f6:	4874      	ldr	r0, [pc, #464]	@ (800c7c8 <rmw_init+0x20c>)
 800c5f8:	60b7      	str	r7, [r6, #8]
 800c5fa:	e9c6 2300 	strd	r2, r3, [r6]
 800c5fe:	68eb      	ldr	r3, [r5, #12]
 800c600:	64b3      	str	r3, [r6, #72]	@ 0x48
 800c602:	2201      	movs	r2, #1
 800c604:	f000 fd76 	bl	800d0f4 <rmw_uxrce_init_session_memory>
 800c608:	4620      	mov	r0, r4
 800c60a:	4970      	ldr	r1, [pc, #448]	@ (800c7cc <rmw_init+0x210>)
 800c60c:	2204      	movs	r2, #4
 800c60e:	f000 fdb1 	bl	800d174 <rmw_uxrce_init_static_input_buffer_memory>
 800c612:	f04f 0800 	mov.w	r8, #0
 800c616:	486c      	ldr	r0, [pc, #432]	@ (800c7c8 <rmw_init+0x20c>)
 800c618:	f884 800d 	strb.w	r8, [r4, #13]
 800c61c:	f009 f928 	bl	8015870 <get_memory>
 800c620:	2800      	cmp	r0, #0
 800c622:	f000 80a9 	beq.w	800c778 <rmw_init+0x1bc>
 800c626:	6884      	ldr	r4, [r0, #8]
 800c628:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800c62a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c62c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800c630:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800c634:	9101      	str	r1, [sp, #4]
 800c636:	6a00      	ldr	r0, [r0, #32]
 800c638:	9000      	str	r0, [sp, #0]
 800c63a:	f104 0910 	add.w	r9, r4, #16
 800c63e:	4661      	mov	r1, ip
 800c640:	4648      	mov	r0, r9
 800c642:	f002 fb7d 	bl	800ed40 <uxr_set_custom_transport_callbacks>
 800c646:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800c64a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c64e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800c652:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800c656:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800c65a:	495d      	ldr	r1, [pc, #372]	@ (800c7d0 <rmw_init+0x214>)
 800c65c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800c660:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800c664:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800c668:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800c66c:	4859      	ldr	r0, [pc, #356]	@ (800c7d4 <rmw_init+0x218>)
 800c66e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800c672:	2201      	movs	r2, #1
 800c674:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800c676:	f000 fd1d 	bl	800d0b4 <rmw_uxrce_init_node_memory>
 800c67a:	4957      	ldr	r1, [pc, #348]	@ (800c7d8 <rmw_init+0x21c>)
 800c67c:	4857      	ldr	r0, [pc, #348]	@ (800c7dc <rmw_init+0x220>)
 800c67e:	2205      	movs	r2, #5
 800c680:	f000 fcf8 	bl	800d074 <rmw_uxrce_init_subscription_memory>
 800c684:	4956      	ldr	r1, [pc, #344]	@ (800c7e0 <rmw_init+0x224>)
 800c686:	4857      	ldr	r0, [pc, #348]	@ (800c7e4 <rmw_init+0x228>)
 800c688:	220a      	movs	r2, #10
 800c68a:	f000 fcd3 	bl	800d034 <rmw_uxrce_init_publisher_memory>
 800c68e:	4956      	ldr	r1, [pc, #344]	@ (800c7e8 <rmw_init+0x22c>)
 800c690:	4856      	ldr	r0, [pc, #344]	@ (800c7ec <rmw_init+0x230>)
 800c692:	2201      	movs	r2, #1
 800c694:	f000 fc8e 	bl	800cfb4 <rmw_uxrce_init_service_memory>
 800c698:	4955      	ldr	r1, [pc, #340]	@ (800c7f0 <rmw_init+0x234>)
 800c69a:	4856      	ldr	r0, [pc, #344]	@ (800c7f4 <rmw_init+0x238>)
 800c69c:	2201      	movs	r2, #1
 800c69e:	f000 fca9 	bl	800cff4 <rmw_uxrce_init_client_memory>
 800c6a2:	4955      	ldr	r1, [pc, #340]	@ (800c7f8 <rmw_init+0x23c>)
 800c6a4:	4855      	ldr	r0, [pc, #340]	@ (800c7fc <rmw_init+0x240>)
 800c6a6:	220f      	movs	r2, #15
 800c6a8:	f000 fd44 	bl	800d134 <rmw_uxrce_init_topic_memory>
 800c6ac:	4954      	ldr	r1, [pc, #336]	@ (800c800 <rmw_init+0x244>)
 800c6ae:	4855      	ldr	r0, [pc, #340]	@ (800c804 <rmw_init+0x248>)
 800c6b0:	2203      	movs	r2, #3
 800c6b2:	f000 fd7f 	bl	800d1b4 <rmw_uxrce_init_init_options_impl_memory>
 800c6b6:	4954      	ldr	r1, [pc, #336]	@ (800c808 <rmw_init+0x24c>)
 800c6b8:	4854      	ldr	r0, [pc, #336]	@ (800c80c <rmw_init+0x250>)
 800c6ba:	2204      	movs	r2, #4
 800c6bc:	f000 fd9a 	bl	800d1f4 <rmw_uxrce_init_wait_set_memory>
 800c6c0:	4953      	ldr	r1, [pc, #332]	@ (800c810 <rmw_init+0x254>)
 800c6c2:	4854      	ldr	r0, [pc, #336]	@ (800c814 <rmw_init+0x258>)
 800c6c4:	2204      	movs	r2, #4
 800c6c6:	f000 fdb5 	bl	800d234 <rmw_uxrce_init_guard_condition_memory>
 800c6ca:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800c6cc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	f000 fc38 	bl	800cf44 <rmw_uxrce_transport_init>
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d158      	bne.n	800c78c <rmw_init+0x1d0>
 800c6da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c6dc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800c6e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6e2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f002 fd26 	bl	800f138 <uxr_init_session>
 800c6ec:	494a      	ldr	r1, [pc, #296]	@ (800c818 <rmw_init+0x25c>)
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f002 fd45 	bl	800f180 <uxr_set_topic_callback>
 800c6f6:	4949      	ldr	r1, [pc, #292]	@ (800c81c <rmw_init+0x260>)
 800c6f8:	463a      	mov	r2, r7
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f002 fd3c 	bl	800f178 <uxr_set_status_callback>
 800c700:	4947      	ldr	r1, [pc, #284]	@ (800c820 <rmw_init+0x264>)
 800c702:	463a      	mov	r2, r7
 800c704:	4628      	mov	r0, r5
 800c706:	f002 fd3f 	bl	800f188 <uxr_set_request_callback>
 800c70a:	4946      	ldr	r1, [pc, #280]	@ (800c824 <rmw_init+0x268>)
 800c70c:	463a      	mov	r2, r7
 800c70e:	4628      	mov	r0, r5
 800c710:	f002 fd3e 	bl	800f190 <uxr_set_reply_callback>
 800c714:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c718:	2304      	movs	r3, #4
 800c71a:	0092      	lsls	r2, r2, #2
 800c71c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800c720:	4628      	mov	r0, r5
 800c722:	f002 fd73 	bl	800f20c <uxr_create_input_reliable_stream>
 800c726:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c72a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800c72e:	0092      	lsls	r2, r2, #2
 800c730:	2304      	movs	r3, #4
 800c732:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800c736:	4628      	mov	r0, r5
 800c738:	f002 fd40 	bl	800f1bc <uxr_create_output_reliable_stream>
 800c73c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800c740:	4628      	mov	r0, r5
 800c742:	f002 fd5d 	bl	800f200 <uxr_create_input_best_effort_stream>
 800c746:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800c74a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800c74e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c752:	3114      	adds	r1, #20
 800c754:	4628      	mov	r0, r5
 800c756:	f002 fd1f 	bl	800f198 <uxr_create_output_best_effort_stream>
 800c75a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800c75e:	4628      	mov	r0, r5
 800c760:	f003 fafe 	bl	800fd60 <uxr_create_session>
 800c764:	b1f8      	cbz	r0, 800c7a6 <rmw_init+0x1ea>
 800c766:	4638      	mov	r0, r7
 800c768:	b003      	add	sp, #12
 800c76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c76e:	270b      	movs	r7, #11
 800c770:	4638      	mov	r0, r7
 800c772:	b003      	add	sp, #12
 800c774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c778:	2701      	movs	r7, #1
 800c77a:	4638      	mov	r0, r7
 800c77c:	b003      	add	sp, #12
 800c77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c782:	270c      	movs	r7, #12
 800c784:	4638      	mov	r0, r7
 800c786:	b003      	add	sp, #12
 800c788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c78c:	4648      	mov	r0, r9
 800c78e:	f002 fb19 	bl	800edc4 <uxr_close_custom_transport>
 800c792:	480d      	ldr	r0, [pc, #52]	@ (800c7c8 <rmw_init+0x20c>)
 800c794:	4621      	mov	r1, r4
 800c796:	f009 f87b 	bl	8015890 <put_memory>
 800c79a:	4638      	mov	r0, r7
 800c79c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800c7a0:	b003      	add	sp, #12
 800c7a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7a6:	4648      	mov	r0, r9
 800c7a8:	f002 fb0c 	bl	800edc4 <uxr_close_custom_transport>
 800c7ac:	4806      	ldr	r0, [pc, #24]	@ (800c7c8 <rmw_init+0x20c>)
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	f009 f86e 	bl	8015890 <put_memory>
 800c7b4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800c7b6:	2701      	movs	r7, #1
 800c7b8:	e7d5      	b.n	800c766 <rmw_init+0x1aa>
 800c7ba:	bf00      	nop
 800c7bc:	08019b74 	.word	0x08019b74
 800c7c0:	2000cb34 	.word	0x2000cb34
 800c7c4:	20008de0 	.word	0x20008de0
 800c7c8:	2000cb24 	.word	0x2000cb24
 800c7cc:	2000a388 	.word	0x2000a388
 800c7d0:	20008404 	.word	0x20008404
 800c7d4:	2000caf4 	.word	0x2000caf4
 800c7d8:	2000c488 	.word	0x2000c488
 800c7dc:	2000cb44 	.word	0x2000cb44
 800c7e0:	200084a8 	.word	0x200084a8
 800c7e4:	2000cb04 	.word	0x2000cb04
 800c7e8:	20008d18 	.word	0x20008d18
 800c7ec:	2000cb14 	.word	0x2000cb14
 800c7f0:	20008238 	.word	0x20008238
 800c7f4:	20008224 	.word	0x20008224
 800c7f8:	2000c8c0 	.word	0x2000c8c0
 800c7fc:	2000cb54 	.word	0x2000cb54
 800c800:	20008380 	.word	0x20008380
 800c804:	2000cae4 	.word	0x2000cae4
 800c808:	2000ca64 	.word	0x2000ca64
 800c80c:	2000cb64 	.word	0x2000cb64
 800c810:	20008300 	.word	0x20008300
 800c814:	2000cad4 	.word	0x2000cad4
 800c818:	080156a9 	.word	0x080156a9
 800c81c:	080156a1 	.word	0x080156a1
 800c820:	08015741 	.word	0x08015741
 800c824:	080157dd 	.word	0x080157dd

0800c828 <rmw_context_fini>:
 800c828:	4b17      	ldr	r3, [pc, #92]	@ (800c888 <rmw_context_fini+0x60>)
 800c82a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	681c      	ldr	r4, [r3, #0]
 800c830:	4605      	mov	r5, r0
 800c832:	b334      	cbz	r4, 800c882 <rmw_context_fini+0x5a>
 800c834:	2600      	movs	r6, #0
 800c836:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800c83a:	6902      	ldr	r2, [r0, #16]
 800c83c:	428a      	cmp	r2, r1
 800c83e:	d018      	beq.n	800c872 <rmw_context_fini+0x4a>
 800c840:	2c00      	cmp	r4, #0
 800c842:	d1f8      	bne.n	800c836 <rmw_context_fini+0xe>
 800c844:	b189      	cbz	r1, 800c86a <rmw_context_fini+0x42>
 800c846:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800c84a:	789b      	ldrb	r3, [r3, #2]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800c852:	bf14      	ite	ne
 800c854:	210a      	movne	r1, #10
 800c856:	2100      	moveq	r1, #0
 800c858:	f003 fa5a 	bl	800fd10 <uxr_delete_session_retries>
 800c85c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c85e:	f000 fd09 	bl	800d274 <rmw_uxrce_fini_session_memory>
 800c862:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c864:	3010      	adds	r0, #16
 800c866:	f002 faad 	bl	800edc4 <uxr_close_custom_transport>
 800c86a:	2300      	movs	r3, #0
 800c86c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800c86e:	4630      	mov	r0, r6
 800c870:	bd70      	pop	{r4, r5, r6, pc}
 800c872:	3018      	adds	r0, #24
 800c874:	f000 f89c 	bl	800c9b0 <rmw_destroy_node>
 800c878:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c87a:	4606      	mov	r6, r0
 800c87c:	2c00      	cmp	r4, #0
 800c87e:	d1da      	bne.n	800c836 <rmw_context_fini+0xe>
 800c880:	e7e0      	b.n	800c844 <rmw_context_fini+0x1c>
 800c882:	4626      	mov	r6, r4
 800c884:	e7de      	b.n	800c844 <rmw_context_fini+0x1c>
 800c886:	bf00      	nop
 800c888:	2000caf4 	.word	0x2000caf4

0800c88c <create_node>:
 800c88c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c890:	b083      	sub	sp, #12
 800c892:	2b00      	cmp	r3, #0
 800c894:	d05f      	beq.n	800c956 <create_node+0xca>
 800c896:	4606      	mov	r6, r0
 800c898:	4835      	ldr	r0, [pc, #212]	@ (800c970 <create_node+0xe4>)
 800c89a:	460f      	mov	r7, r1
 800c89c:	4690      	mov	r8, r2
 800c89e:	461d      	mov	r5, r3
 800c8a0:	f008 ffe6 	bl	8015870 <get_memory>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d056      	beq.n	800c956 <create_node+0xca>
 800c8a8:	6884      	ldr	r4, [r0, #8]
 800c8aa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800c8ac:	6123      	str	r3, [r4, #16]
 800c8ae:	f009 f847 	bl	8015940 <rmw_get_implementation_identifier>
 800c8b2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800c8b6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800c8ba:	f8c4 9020 	str.w	r9, [r4, #32]
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f7f3 fcb8 	bl	8000234 <strlen>
 800c8c4:	1c42      	adds	r2, r0, #1
 800c8c6:	2a3c      	cmp	r2, #60	@ 0x3c
 800c8c8:	f104 0518 	add.w	r5, r4, #24
 800c8cc:	d840      	bhi.n	800c950 <create_node+0xc4>
 800c8ce:	4648      	mov	r0, r9
 800c8d0:	4631      	mov	r1, r6
 800c8d2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800c8d6:	f00b fb8e 	bl	8017ff6 <memcpy>
 800c8da:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800c8de:	4638      	mov	r0, r7
 800c8e0:	f7f3 fca8 	bl	8000234 <strlen>
 800c8e4:	1c42      	adds	r2, r0, #1
 800c8e6:	2a3c      	cmp	r2, #60	@ 0x3c
 800c8e8:	d832      	bhi.n	800c950 <create_node+0xc4>
 800c8ea:	4639      	mov	r1, r7
 800c8ec:	4648      	mov	r0, r9
 800c8ee:	f00b fb82 	bl	8017ff6 <memcpy>
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800c8fe:	1842      	adds	r2, r0, r1
 800c900:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800c904:	f002 fa62 	bl	800edcc <uxr_object_id>
 800c908:	6160      	str	r0, [r4, #20]
 800c90a:	783b      	ldrb	r3, [r7, #0]
 800c90c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c90e:	d127      	bne.n	800c960 <create_node+0xd4>
 800c910:	787b      	ldrb	r3, [r7, #1]
 800c912:	bb2b      	cbnz	r3, 800c960 <create_node+0xd4>
 800c914:	4a17      	ldr	r2, [pc, #92]	@ (800c974 <create_node+0xe8>)
 800c916:	4818      	ldr	r0, [pc, #96]	@ (800c978 <create_node+0xec>)
 800c918:	4633      	mov	r3, r6
 800c91a:	213c      	movs	r1, #60	@ 0x3c
 800c91c:	f00b f9c8 	bl	8017cb0 <sniprintf>
 800c920:	6920      	ldr	r0, [r4, #16]
 800c922:	4915      	ldr	r1, [pc, #84]	@ (800c978 <create_node+0xec>)
 800c924:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800c928:	9100      	str	r1, [sp, #0]
 800c92a:	2106      	movs	r1, #6
 800c92c:	9101      	str	r1, [sp, #4]
 800c92e:	6811      	ldr	r1, [r2, #0]
 800c930:	6962      	ldr	r2, [r4, #20]
 800c932:	fa1f f388 	uxth.w	r3, r8
 800c936:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c93a:	f002 f877 	bl	800ea2c <uxr_buffer_create_participant_bin>
 800c93e:	4602      	mov	r2, r0
 800c940:	6920      	ldr	r0, [r4, #16]
 800c942:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c946:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c94a:	f000 fe0b 	bl	800d564 <run_xrce_session>
 800c94e:	b918      	cbnz	r0, 800c958 <create_node+0xcc>
 800c950:	4628      	mov	r0, r5
 800c952:	f000 fc95 	bl	800d280 <rmw_uxrce_fini_node_memory>
 800c956:	2500      	movs	r5, #0
 800c958:	4628      	mov	r0, r5
 800c95a:	b003      	add	sp, #12
 800c95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c960:	4a06      	ldr	r2, [pc, #24]	@ (800c97c <create_node+0xf0>)
 800c962:	9600      	str	r6, [sp, #0]
 800c964:	463b      	mov	r3, r7
 800c966:	213c      	movs	r1, #60	@ 0x3c
 800c968:	4803      	ldr	r0, [pc, #12]	@ (800c978 <create_node+0xec>)
 800c96a:	f00b f9a1 	bl	8017cb0 <sniprintf>
 800c96e:	e7d7      	b.n	800c920 <create_node+0x94>
 800c970:	2000caf4 	.word	0x2000caf4
 800c974:	080190c8 	.word	0x080190c8
 800c978:	200081e8 	.word	0x200081e8
 800c97c:	0801908c 	.word	0x0801908c

0800c980 <rmw_create_node>:
 800c980:	b199      	cbz	r1, 800c9aa <rmw_create_node+0x2a>
 800c982:	780b      	ldrb	r3, [r1, #0]
 800c984:	468c      	mov	ip, r1
 800c986:	b183      	cbz	r3, 800c9aa <rmw_create_node+0x2a>
 800c988:	b410      	push	{r4}
 800c98a:	4614      	mov	r4, r2
 800c98c:	b14a      	cbz	r2, 800c9a2 <rmw_create_node+0x22>
 800c98e:	7813      	ldrb	r3, [r2, #0]
 800c990:	b13b      	cbz	r3, 800c9a2 <rmw_create_node+0x22>
 800c992:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800c994:	4603      	mov	r3, r0
 800c996:	4621      	mov	r1, r4
 800c998:	4660      	mov	r0, ip
 800c99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c99e:	f7ff bf75 	b.w	800c88c <create_node>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop

0800c9b0 <rmw_destroy_node>:
 800c9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b2:	b328      	cbz	r0, 800ca00 <rmw_destroy_node+0x50>
 800c9b4:	4607      	mov	r7, r0
 800c9b6:	6800      	ldr	r0, [r0, #0]
 800c9b8:	b120      	cbz	r0, 800c9c4 <rmw_destroy_node+0x14>
 800c9ba:	4b36      	ldr	r3, [pc, #216]	@ (800ca94 <rmw_destroy_node+0xe4>)
 800c9bc:	6819      	ldr	r1, [r3, #0]
 800c9be:	f7f3 fc2f 	bl	8000220 <strcmp>
 800c9c2:	b9e8      	cbnz	r0, 800ca00 <rmw_destroy_node+0x50>
 800c9c4:	687d      	ldr	r5, [r7, #4]
 800c9c6:	b1dd      	cbz	r5, 800ca00 <rmw_destroy_node+0x50>
 800c9c8:	4b33      	ldr	r3, [pc, #204]	@ (800ca98 <rmw_destroy_node+0xe8>)
 800c9ca:	681c      	ldr	r4, [r3, #0]
 800c9cc:	2c00      	cmp	r4, #0
 800c9ce:	d05f      	beq.n	800ca90 <rmw_destroy_node+0xe0>
 800c9d0:	2600      	movs	r6, #0
 800c9d2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c9d6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800c9da:	429d      	cmp	r5, r3
 800c9dc:	d013      	beq.n	800ca06 <rmw_destroy_node+0x56>
 800c9de:	2c00      	cmp	r4, #0
 800c9e0:	d1f7      	bne.n	800c9d2 <rmw_destroy_node+0x22>
 800c9e2:	4b2e      	ldr	r3, [pc, #184]	@ (800ca9c <rmw_destroy_node+0xec>)
 800c9e4:	681c      	ldr	r4, [r3, #0]
 800c9e6:	b1c4      	cbz	r4, 800ca1a <rmw_destroy_node+0x6a>
 800c9e8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c9ec:	6a0b      	ldr	r3, [r1, #32]
 800c9ee:	429d      	cmp	r5, r3
 800c9f0:	d1f9      	bne.n	800c9e6 <rmw_destroy_node+0x36>
 800c9f2:	317c      	adds	r1, #124	@ 0x7c
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	f000 fa45 	bl	800ce84 <rmw_destroy_subscription>
 800c9fa:	2801      	cmp	r0, #1
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	d1f2      	bne.n	800c9e6 <rmw_destroy_node+0x36>
 800ca00:	2601      	movs	r6, #1
 800ca02:	4630      	mov	r0, r6
 800ca04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca06:	3184      	adds	r1, #132	@ 0x84
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f000 f9a5 	bl	800cd58 <rmw_destroy_publisher>
 800ca0e:	2801      	cmp	r0, #1
 800ca10:	4606      	mov	r6, r0
 800ca12:	d0f5      	beq.n	800ca00 <rmw_destroy_node+0x50>
 800ca14:	2c00      	cmp	r4, #0
 800ca16:	d1dc      	bne.n	800c9d2 <rmw_destroy_node+0x22>
 800ca18:	e7e3      	b.n	800c9e2 <rmw_destroy_node+0x32>
 800ca1a:	4b21      	ldr	r3, [pc, #132]	@ (800caa0 <rmw_destroy_node+0xf0>)
 800ca1c:	681c      	ldr	r4, [r3, #0]
 800ca1e:	b16c      	cbz	r4, 800ca3c <rmw_destroy_node+0x8c>
 800ca20:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ca24:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ca26:	429d      	cmp	r5, r3
 800ca28:	d1f9      	bne.n	800ca1e <rmw_destroy_node+0x6e>
 800ca2a:	317c      	adds	r1, #124	@ 0x7c
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f000 f9e5 	bl	800cdfc <rmw_destroy_service>
 800ca32:	2801      	cmp	r0, #1
 800ca34:	4606      	mov	r6, r0
 800ca36:	d0e3      	beq.n	800ca00 <rmw_destroy_node+0x50>
 800ca38:	2c00      	cmp	r4, #0
 800ca3a:	d1f1      	bne.n	800ca20 <rmw_destroy_node+0x70>
 800ca3c:	4b19      	ldr	r3, [pc, #100]	@ (800caa4 <rmw_destroy_node+0xf4>)
 800ca3e:	681c      	ldr	r4, [r3, #0]
 800ca40:	b16c      	cbz	r4, 800ca5e <rmw_destroy_node+0xae>
 800ca42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ca46:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ca48:	429d      	cmp	r5, r3
 800ca4a:	d1f9      	bne.n	800ca40 <rmw_destroy_node+0x90>
 800ca4c:	317c      	adds	r1, #124	@ 0x7c
 800ca4e:	4638      	mov	r0, r7
 800ca50:	f008 ff32 	bl	80158b8 <rmw_destroy_client>
 800ca54:	2801      	cmp	r0, #1
 800ca56:	4606      	mov	r6, r0
 800ca58:	d0d2      	beq.n	800ca00 <rmw_destroy_node+0x50>
 800ca5a:	2c00      	cmp	r4, #0
 800ca5c:	d1f1      	bne.n	800ca42 <rmw_destroy_node+0x92>
 800ca5e:	6928      	ldr	r0, [r5, #16]
 800ca60:	696a      	ldr	r2, [r5, #20]
 800ca62:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ca66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ca6a:	6819      	ldr	r1, [r3, #0]
 800ca6c:	f001 ff92 	bl	800e994 <uxr_buffer_delete_entity>
 800ca70:	4602      	mov	r2, r0
 800ca72:	6928      	ldr	r0, [r5, #16]
 800ca74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ca78:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ca7c:	f000 fd72 	bl	800d564 <run_xrce_session>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	bf08      	it	eq
 800ca84:	2602      	moveq	r6, #2
 800ca86:	4638      	mov	r0, r7
 800ca88:	f000 fbfa 	bl	800d280 <rmw_uxrce_fini_node_memory>
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca90:	4626      	mov	r6, r4
 800ca92:	e7a6      	b.n	800c9e2 <rmw_destroy_node+0x32>
 800ca94:	08019b74 	.word	0x08019b74
 800ca98:	2000cb04 	.word	0x2000cb04
 800ca9c:	2000cb44 	.word	0x2000cb44
 800caa0:	2000cb14 	.word	0x2000cb14
 800caa4:	20008224 	.word	0x20008224

0800caa8 <rmw_node_get_graph_guard_condition>:
 800caa8:	6843      	ldr	r3, [r0, #4]
 800caaa:	6918      	ldr	r0, [r3, #16]
 800caac:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop

0800cab4 <flush_session>:
 800cab4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800cab6:	f002 bf8f 	b.w	800f9d8 <uxr_run_session_until_confirm_delivery>
 800caba:	bf00      	nop

0800cabc <rmw_publish>:
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d053      	beq.n	800cb68 <rmw_publish+0xac>
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	460d      	mov	r5, r1
 800cac4:	b08e      	sub	sp, #56	@ 0x38
 800cac6:	2900      	cmp	r1, #0
 800cac8:	d04b      	beq.n	800cb62 <rmw_publish+0xa6>
 800caca:	4604      	mov	r4, r0
 800cacc:	6800      	ldr	r0, [r0, #0]
 800cace:	f000 fdc9 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d045      	beq.n	800cb62 <rmw_publish+0xa6>
 800cad6:	6866      	ldr	r6, [r4, #4]
 800cad8:	2e00      	cmp	r6, #0
 800cada:	d042      	beq.n	800cb62 <rmw_publish+0xa6>
 800cadc:	69b4      	ldr	r4, [r6, #24]
 800cade:	4628      	mov	r0, r5
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	4798      	blx	r3
 800cae4:	69f3      	ldr	r3, [r6, #28]
 800cae6:	9005      	str	r0, [sp, #20]
 800cae8:	b113      	cbz	r3, 800caf0 <rmw_publish+0x34>
 800caea:	a805      	add	r0, sp, #20
 800caec:	4798      	blx	r3
 800caee:	9805      	ldr	r0, [sp, #20]
 800caf0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	9000      	str	r0, [sp, #0]
 800caf8:	6972      	ldr	r2, [r6, #20]
 800cafa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cafc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cb00:	ab06      	add	r3, sp, #24
 800cb02:	f004 fa3b 	bl	8010f7c <uxr_prepare_output_stream>
 800cb06:	b1d8      	cbz	r0, 800cb40 <rmw_publish+0x84>
 800cb08:	68a3      	ldr	r3, [r4, #8]
 800cb0a:	a906      	add	r1, sp, #24
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	4798      	blx	r3
 800cb10:	6a33      	ldr	r3, [r6, #32]
 800cb12:	4604      	mov	r4, r0
 800cb14:	b10b      	cbz	r3, 800cb1a <rmw_publish+0x5e>
 800cb16:	a806      	add	r0, sp, #24
 800cb18:	4798      	blx	r3
 800cb1a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cb24:	d022      	beq.n	800cb6c <rmw_publish+0xb0>
 800cb26:	6918      	ldr	r0, [r3, #16]
 800cb28:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800cb2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb2e:	f002 ff53 	bl	800f9d8 <uxr_run_session_until_confirm_delivery>
 800cb32:	4020      	ands	r0, r4
 800cb34:	b2c4      	uxtb	r4, r0
 800cb36:	f084 0001 	eor.w	r0, r4, #1
 800cb3a:	b2c0      	uxtb	r0, r0
 800cb3c:	b00e      	add	sp, #56	@ 0x38
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cb44:	6918      	ldr	r0, [r3, #16]
 800cb46:	9b05      	ldr	r3, [sp, #20]
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb78 <rmw_publish+0xbc>)
 800cb4c:	9301      	str	r3, [sp, #4]
 800cb4e:	9602      	str	r6, [sp, #8]
 800cb50:	6972      	ldr	r2, [r6, #20]
 800cb52:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cb54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb58:	ab06      	add	r3, sp, #24
 800cb5a:	f004 fa3f 	bl	8010fdc <uxr_prepare_output_stream_fragmented>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d1d2      	bne.n	800cb08 <rmw_publish+0x4c>
 800cb62:	2001      	movs	r0, #1
 800cb64:	b00e      	add	sp, #56	@ 0x38
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
 800cb68:	2001      	movs	r0, #1
 800cb6a:	4770      	bx	lr
 800cb6c:	6918      	ldr	r0, [r3, #16]
 800cb6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb72:	f002 fb71 	bl	800f258 <uxr_flash_output_streams>
 800cb76:	e7de      	b.n	800cb36 <rmw_publish+0x7a>
 800cb78:	0800cab5 	.word	0x0800cab5

0800cb7c <rmw_create_publisher>:
 800cb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb80:	b087      	sub	sp, #28
 800cb82:	2800      	cmp	r0, #0
 800cb84:	f000 80cc 	beq.w	800cd20 <rmw_create_publisher+0x1a4>
 800cb88:	460e      	mov	r6, r1
 800cb8a:	2900      	cmp	r1, #0
 800cb8c:	f000 80c8 	beq.w	800cd20 <rmw_create_publisher+0x1a4>
 800cb90:	4604      	mov	r4, r0
 800cb92:	6800      	ldr	r0, [r0, #0]
 800cb94:	4615      	mov	r5, r2
 800cb96:	4698      	mov	r8, r3
 800cb98:	f000 fd64 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	f000 80bf 	beq.w	800cd20 <rmw_create_publisher+0x1a4>
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	f000 80bc 	beq.w	800cd20 <rmw_create_publisher+0x1a4>
 800cba8:	782b      	ldrb	r3, [r5, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f000 80b8 	beq.w	800cd20 <rmw_create_publisher+0x1a4>
 800cbb0:	f1b8 0f00 	cmp.w	r8, #0
 800cbb4:	f000 80b4 	beq.w	800cd20 <rmw_create_publisher+0x1a4>
 800cbb8:	485c      	ldr	r0, [pc, #368]	@ (800cd2c <rmw_create_publisher+0x1b0>)
 800cbba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cbbe:	f008 fe57 	bl	8015870 <get_memory>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	f000 80ac 	beq.w	800cd20 <rmw_create_publisher+0x1a4>
 800cbc8:	6884      	ldr	r4, [r0, #8]
 800cbca:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800cbce:	f008 feb7 	bl	8015940 <rmw_get_implementation_identifier>
 800cbd2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800cbd6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800cbda:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f7f3 fb28 	bl	8000234 <strlen>
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	283c      	cmp	r0, #60	@ 0x3c
 800cbe8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800cbec:	f200 8091 	bhi.w	800cd12 <rmw_create_publisher+0x196>
 800cbf0:	4a4f      	ldr	r2, [pc, #316]	@ (800cd30 <rmw_create_publisher+0x1b4>)
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	213c      	movs	r1, #60	@ 0x3c
 800cbf6:	4650      	mov	r0, sl
 800cbf8:	f00b f85a 	bl	8017cb0 <sniprintf>
 800cbfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cc00:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800cc02:	4641      	mov	r1, r8
 800cc04:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800cc08:	2250      	movs	r2, #80	@ 0x50
 800cc0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cc0e:	f00b f9f2 	bl	8017ff6 <memcpy>
 800cc12:	f898 3008 	ldrb.w	r3, [r8, #8]
 800cc16:	4947      	ldr	r1, [pc, #284]	@ (800cd34 <rmw_create_publisher+0x1b8>)
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc1e:	bf0c      	ite	eq
 800cc20:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800cc24:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800cc28:	67a3      	str	r3, [r4, #120]	@ 0x78
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cc30:	4630      	mov	r0, r6
 800cc32:	f000 fd25 	bl	800d680 <get_message_typesupport_handle>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d06b      	beq.n	800cd12 <rmw_create_publisher+0x196>
 800cc3a:	6842      	ldr	r2, [r0, #4]
 800cc3c:	61a2      	str	r2, [r4, #24]
 800cc3e:	2a00      	cmp	r2, #0
 800cc40:	d067      	beq.n	800cd12 <rmw_create_publisher+0x196>
 800cc42:	4629      	mov	r1, r5
 800cc44:	4643      	mov	r3, r8
 800cc46:	4648      	mov	r0, r9
 800cc48:	f008 fe80 	bl	801594c <create_topic>
 800cc4c:	6260      	str	r0, [r4, #36]	@ 0x24
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d063      	beq.n	800cd1a <rmw_create_publisher+0x19e>
 800cc52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc5a:	2103      	movs	r1, #3
 800cc5c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800cc60:	1c42      	adds	r2, r0, #1
 800cc62:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800cc66:	f002 f8b1 	bl	800edcc <uxr_object_id>
 800cc6a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800cc6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc72:	6120      	str	r0, [r4, #16]
 800cc74:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800cc78:	6910      	ldr	r0, [r2, #16]
 800cc7a:	2506      	movs	r5, #6
 800cc7c:	9500      	str	r5, [sp, #0]
 800cc7e:	6819      	ldr	r1, [r3, #0]
 800cc80:	6922      	ldr	r2, [r4, #16]
 800cc82:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cc86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc8a:	f001 ff37 	bl	800eafc <uxr_buffer_create_publisher_bin>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cc94:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cc98:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cc9c:	f000 fc62 	bl	800d564 <run_xrce_session>
 800cca0:	b3b8      	cbz	r0, 800cd12 <rmw_create_publisher+0x196>
 800cca2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccaa:	2105      	movs	r1, #5
 800ccac:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ccb0:	1c42      	adds	r2, r0, #1
 800ccb2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ccb6:	f002 f889 	bl	800edcc <uxr_object_id>
 800ccba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ccbe:	6160      	str	r0, [r4, #20]
 800ccc0:	691e      	ldr	r6, [r3, #16]
 800ccc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccc6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ccca:	f10d 0a10 	add.w	sl, sp, #16
 800ccce:	4641      	mov	r1, r8
 800ccd0:	4650      	mov	r0, sl
 800ccd2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ccd6:	f000 fc61 	bl	800d59c <convert_qos_profile>
 800ccda:	9503      	str	r5, [sp, #12]
 800ccdc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800cce0:	9001      	str	r0, [sp, #4]
 800cce2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800cce6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800ccf0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ccf4:	f8d8 1000 	ldr.w	r1, [r8]
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f001 ff2f 	bl	800eb5c <uxr_buffer_create_datawriter_bin>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cd04:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cd08:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cd0c:	f000 fc2a 	bl	800d564 <run_xrce_session>
 800cd10:	b938      	cbnz	r0, 800cd22 <rmw_create_publisher+0x1a6>
 800cd12:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cd14:	b108      	cbz	r0, 800cd1a <rmw_create_publisher+0x19e>
 800cd16:	f000 fb23 	bl	800d360 <rmw_uxrce_fini_topic_memory>
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	f000 fac8 	bl	800d2b0 <rmw_uxrce_fini_publisher_memory>
 800cd20:	2700      	movs	r7, #0
 800cd22:	4638      	mov	r0, r7
 800cd24:	b007      	add	sp, #28
 800cd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	bf00      	nop
 800cd2c:	2000cb04 	.word	0x2000cb04
 800cd30:	080190c8 	.word	0x080190c8
 800cd34:	08019094 	.word	0x08019094

0800cd38 <rmw_publisher_get_actual_qos>:
 800cd38:	b150      	cbz	r0, 800cd50 <rmw_publisher_get_actual_qos+0x18>
 800cd3a:	b508      	push	{r3, lr}
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	b149      	cbz	r1, 800cd54 <rmw_publisher_get_actual_qos+0x1c>
 800cd40:	6841      	ldr	r1, [r0, #4]
 800cd42:	2250      	movs	r2, #80	@ 0x50
 800cd44:	3128      	adds	r1, #40	@ 0x28
 800cd46:	4618      	mov	r0, r3
 800cd48:	f00b f955 	bl	8017ff6 <memcpy>
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	bd08      	pop	{r3, pc}
 800cd50:	200b      	movs	r0, #11
 800cd52:	4770      	bx	lr
 800cd54:	200b      	movs	r0, #11
 800cd56:	bd08      	pop	{r3, pc}

0800cd58 <rmw_destroy_publisher>:
 800cd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5a:	b128      	cbz	r0, 800cd68 <rmw_destroy_publisher+0x10>
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	6800      	ldr	r0, [r0, #0]
 800cd60:	460d      	mov	r5, r1
 800cd62:	f000 fc7f 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800cd66:	b910      	cbnz	r0, 800cd6e <rmw_destroy_publisher+0x16>
 800cd68:	2401      	movs	r4, #1
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd6e:	6863      	ldr	r3, [r4, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d0f9      	beq.n	800cd68 <rmw_destroy_publisher+0x10>
 800cd74:	2d00      	cmp	r5, #0
 800cd76:	d0f7      	beq.n	800cd68 <rmw_destroy_publisher+0x10>
 800cd78:	6828      	ldr	r0, [r5, #0]
 800cd7a:	f000 fc73 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d0f2      	beq.n	800cd68 <rmw_destroy_publisher+0x10>
 800cd82:	686c      	ldr	r4, [r5, #4]
 800cd84:	2c00      	cmp	r4, #0
 800cd86:	d0ef      	beq.n	800cd68 <rmw_destroy_publisher+0x10>
 800cd88:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cd8a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800cd8e:	f008 fe2d 	bl	80159ec <destroy_topic>
 800cd92:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cd96:	6962      	ldr	r2, [r4, #20]
 800cd98:	6918      	ldr	r0, [r3, #16]
 800cd9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cd9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cda2:	6819      	ldr	r1, [r3, #0]
 800cda4:	f001 fdf6 	bl	800e994 <uxr_buffer_delete_entity>
 800cda8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cdac:	6922      	ldr	r2, [r4, #16]
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	6809      	ldr	r1, [r1, #0]
 800cdb8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cdbc:	f001 fdea 	bl	800e994 <uxr_buffer_delete_entity>
 800cdc0:	693e      	ldr	r6, [r7, #16]
 800cdc2:	4622      	mov	r2, r4
 800cdc4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cdc8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cdcc:	4604      	mov	r4, r0
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f000 fbc8 	bl	800d564 <run_xrce_session>
 800cdd4:	693e      	ldr	r6, [r7, #16]
 800cdd6:	4622      	mov	r2, r4
 800cdd8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cddc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cde0:	4604      	mov	r4, r0
 800cde2:	4630      	mov	r0, r6
 800cde4:	f000 fbbe 	bl	800d564 <run_xrce_session>
 800cde8:	b12c      	cbz	r4, 800cdf6 <rmw_destroy_publisher+0x9e>
 800cdea:	b120      	cbz	r0, 800cdf6 <rmw_destroy_publisher+0x9e>
 800cdec:	2400      	movs	r4, #0
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f000 fa5e 	bl	800d2b0 <rmw_uxrce_fini_publisher_memory>
 800cdf4:	e7b9      	b.n	800cd6a <rmw_destroy_publisher+0x12>
 800cdf6:	2402      	movs	r4, #2
 800cdf8:	e7f9      	b.n	800cdee <rmw_destroy_publisher+0x96>
 800cdfa:	bf00      	nop

0800cdfc <rmw_destroy_service>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	b128      	cbz	r0, 800ce0c <rmw_destroy_service+0x10>
 800ce00:	4604      	mov	r4, r0
 800ce02:	6800      	ldr	r0, [r0, #0]
 800ce04:	460d      	mov	r5, r1
 800ce06:	f000 fc2d 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800ce0a:	b910      	cbnz	r0, 800ce12 <rmw_destroy_service+0x16>
 800ce0c:	2401      	movs	r4, #1
 800ce0e:	4620      	mov	r0, r4
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	6863      	ldr	r3, [r4, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d0f9      	beq.n	800ce0c <rmw_destroy_service+0x10>
 800ce18:	2d00      	cmp	r5, #0
 800ce1a:	d0f7      	beq.n	800ce0c <rmw_destroy_service+0x10>
 800ce1c:	6828      	ldr	r0, [r5, #0]
 800ce1e:	f000 fc21 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d0f2      	beq.n	800ce0c <rmw_destroy_service+0x10>
 800ce26:	686e      	ldr	r6, [r5, #4]
 800ce28:	2e00      	cmp	r6, #0
 800ce2a:	d0ef      	beq.n	800ce0c <rmw_destroy_service+0x10>
 800ce2c:	6864      	ldr	r4, [r4, #4]
 800ce2e:	6932      	ldr	r2, [r6, #16]
 800ce30:	6920      	ldr	r0, [r4, #16]
 800ce32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ce36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce3a:	6819      	ldr	r1, [r3, #0]
 800ce3c:	f001 fff6 	bl	800ee2c <uxr_buffer_cancel_data>
 800ce40:	4602      	mov	r2, r0
 800ce42:	6920      	ldr	r0, [r4, #16]
 800ce44:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ce48:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ce4c:	f000 fb8a 	bl	800d564 <run_xrce_session>
 800ce50:	6920      	ldr	r0, [r4, #16]
 800ce52:	6932      	ldr	r2, [r6, #16]
 800ce54:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ce58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce5c:	6819      	ldr	r1, [r3, #0]
 800ce5e:	f001 fd99 	bl	800e994 <uxr_buffer_delete_entity>
 800ce62:	4602      	mov	r2, r0
 800ce64:	6920      	ldr	r0, [r4, #16]
 800ce66:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ce6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ce6e:	f000 fb79 	bl	800d564 <run_xrce_session>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	4628      	mov	r0, r5
 800ce76:	bf14      	ite	ne
 800ce78:	2400      	movne	r4, #0
 800ce7a:	2402      	moveq	r4, #2
 800ce7c:	f000 fa44 	bl	800d308 <rmw_uxrce_fini_service_memory>
 800ce80:	e7c5      	b.n	800ce0e <rmw_destroy_service+0x12>
 800ce82:	bf00      	nop

0800ce84 <rmw_destroy_subscription>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	b128      	cbz	r0, 800ce94 <rmw_destroy_subscription+0x10>
 800ce88:	4604      	mov	r4, r0
 800ce8a:	6800      	ldr	r0, [r0, #0]
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	f000 fbe9 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800ce92:	b910      	cbnz	r0, 800ce9a <rmw_destroy_subscription+0x16>
 800ce94:	2401      	movs	r4, #1
 800ce96:	4620      	mov	r0, r4
 800ce98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce9a:	6863      	ldr	r3, [r4, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d0f9      	beq.n	800ce94 <rmw_destroy_subscription+0x10>
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	d0f7      	beq.n	800ce94 <rmw_destroy_subscription+0x10>
 800cea4:	6828      	ldr	r0, [r5, #0]
 800cea6:	f000 fbdd 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d0f2      	beq.n	800ce94 <rmw_destroy_subscription+0x10>
 800ceae:	686c      	ldr	r4, [r5, #4]
 800ceb0:	2c00      	cmp	r4, #0
 800ceb2:	d0ef      	beq.n	800ce94 <rmw_destroy_subscription+0x10>
 800ceb4:	6a26      	ldr	r6, [r4, #32]
 800ceb6:	6962      	ldr	r2, [r4, #20]
 800ceb8:	6930      	ldr	r0, [r6, #16]
 800ceba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cebe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cec2:	6819      	ldr	r1, [r3, #0]
 800cec4:	f001 ffb2 	bl	800ee2c <uxr_buffer_cancel_data>
 800cec8:	4602      	mov	r2, r0
 800ceca:	6930      	ldr	r0, [r6, #16]
 800cecc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ced0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ced4:	f000 fb46 	bl	800d564 <run_xrce_session>
 800ced8:	69e0      	ldr	r0, [r4, #28]
 800ceda:	f008 fd87 	bl	80159ec <destroy_topic>
 800cede:	6a23      	ldr	r3, [r4, #32]
 800cee0:	6962      	ldr	r2, [r4, #20]
 800cee2:	6918      	ldr	r0, [r3, #16]
 800cee4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cee8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ceec:	6819      	ldr	r1, [r3, #0]
 800ceee:	f001 fd51 	bl	800e994 <uxr_buffer_delete_entity>
 800cef2:	6a23      	ldr	r3, [r4, #32]
 800cef4:	6922      	ldr	r2, [r4, #16]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cefc:	4604      	mov	r4, r0
 800cefe:	6809      	ldr	r1, [r1, #0]
 800cf00:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cf04:	f001 fd46 	bl	800e994 <uxr_buffer_delete_entity>
 800cf08:	6937      	ldr	r7, [r6, #16]
 800cf0a:	4622      	mov	r2, r4
 800cf0c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800cf10:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800cf14:	4604      	mov	r4, r0
 800cf16:	4638      	mov	r0, r7
 800cf18:	f000 fb24 	bl	800d564 <run_xrce_session>
 800cf1c:	6936      	ldr	r6, [r6, #16]
 800cf1e:	4622      	mov	r2, r4
 800cf20:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cf24:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cf28:	4604      	mov	r4, r0
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f000 fb1a 	bl	800d564 <run_xrce_session>
 800cf30:	b12c      	cbz	r4, 800cf3e <rmw_destroy_subscription+0xba>
 800cf32:	b120      	cbz	r0, 800cf3e <rmw_destroy_subscription+0xba>
 800cf34:	2400      	movs	r4, #0
 800cf36:	4628      	mov	r0, r5
 800cf38:	f000 f9d0 	bl	800d2dc <rmw_uxrce_fini_subscription_memory>
 800cf3c:	e7ab      	b.n	800ce96 <rmw_destroy_subscription+0x12>
 800cf3e:	2402      	movs	r4, #2
 800cf40:	e7f9      	b.n	800cf36 <rmw_destroy_subscription+0xb2>
 800cf42:	bf00      	nop

0800cf44 <rmw_uxrce_transport_init>:
 800cf44:	b508      	push	{r3, lr}
 800cf46:	b108      	cbz	r0, 800cf4c <rmw_uxrce_transport_init+0x8>
 800cf48:	f100 0210 	add.w	r2, r0, #16
 800cf4c:	b139      	cbz	r1, 800cf5e <rmw_uxrce_transport_init+0x1a>
 800cf4e:	6949      	ldr	r1, [r1, #20]
 800cf50:	4610      	mov	r0, r2
 800cf52:	f001 ff03 	bl	800ed5c <uxr_init_custom_transport>
 800cf56:	f080 0001 	eor.w	r0, r0, #1
 800cf5a:	b2c0      	uxtb	r0, r0
 800cf5c:	bd08      	pop	{r3, pc}
 800cf5e:	4b04      	ldr	r3, [pc, #16]	@ (800cf70 <rmw_uxrce_transport_init+0x2c>)
 800cf60:	4610      	mov	r0, r2
 800cf62:	6859      	ldr	r1, [r3, #4]
 800cf64:	f001 fefa 	bl	800ed5c <uxr_init_custom_transport>
 800cf68:	f080 0001 	eor.w	r0, r0, #1
 800cf6c:	b2c0      	uxtb	r0, r0
 800cf6e:	bd08      	pop	{r3, pc}
 800cf70:	200081cc 	.word	0x200081cc

0800cf74 <rmw_uros_epoch_nanos>:
 800cf74:	4b05      	ldr	r3, [pc, #20]	@ (800cf8c <rmw_uros_epoch_nanos+0x18>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	b123      	cbz	r3, 800cf84 <rmw_uros_epoch_nanos+0x10>
 800cf7a:	6898      	ldr	r0, [r3, #8]
 800cf7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf80:	f002 b960 	b.w	800f244 <uxr_epoch_nanos>
 800cf84:	2000      	movs	r0, #0
 800cf86:	2100      	movs	r1, #0
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	2000cb24 	.word	0x2000cb24

0800cf90 <rmw_uros_sync_session>:
 800cf90:	b508      	push	{r3, lr}
 800cf92:	4b07      	ldr	r3, [pc, #28]	@ (800cfb0 <rmw_uros_sync_session+0x20>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	b14b      	cbz	r3, 800cfac <rmw_uros_sync_session+0x1c>
 800cf98:	4601      	mov	r1, r0
 800cf9a:	6898      	ldr	r0, [r3, #8]
 800cf9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cfa0:	f002 fd92 	bl	800fac8 <uxr_sync_session>
 800cfa4:	f080 0001 	eor.w	r0, r0, #1
 800cfa8:	b2c0      	uxtb	r0, r0
 800cfaa:	bd08      	pop	{r3, pc}
 800cfac:	2001      	movs	r0, #1
 800cfae:	bd08      	pop	{r3, pc}
 800cfb0:	2000cb24 	.word	0x2000cb24

0800cfb4 <rmw_uxrce_init_service_memory>:
 800cfb4:	b1e2      	cbz	r2, 800cff0 <rmw_uxrce_init_service_memory+0x3c>
 800cfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfba:	7b05      	ldrb	r5, [r0, #12]
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	b9ad      	cbnz	r5, 800cfec <rmw_uxrce_init_service_memory+0x38>
 800cfc0:	23c8      	movs	r3, #200	@ 0xc8
 800cfc2:	e9c0 5500 	strd	r5, r5, [r0]
 800cfc6:	6083      	str	r3, [r0, #8]
 800cfc8:	f240 1301 	movw	r3, #257	@ 0x101
 800cfcc:	4617      	mov	r7, r2
 800cfce:	8183      	strh	r3, [r0, #12]
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	46a8      	mov	r8, r5
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	3501      	adds	r5, #1
 800cfda:	f008 fc59 	bl	8015890 <put_memory>
 800cfde:	42af      	cmp	r7, r5
 800cfe0:	60a4      	str	r4, [r4, #8]
 800cfe2:	f884 800c 	strb.w	r8, [r4, #12]
 800cfe6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cfea:	d1f3      	bne.n	800cfd4 <rmw_uxrce_init_service_memory+0x20>
 800cfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <rmw_uxrce_init_client_memory>:
 800cff4:	b1e2      	cbz	r2, 800d030 <rmw_uxrce_init_client_memory+0x3c>
 800cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffa:	7b05      	ldrb	r5, [r0, #12]
 800cffc:	4606      	mov	r6, r0
 800cffe:	b9ad      	cbnz	r5, 800d02c <rmw_uxrce_init_client_memory+0x38>
 800d000:	23c8      	movs	r3, #200	@ 0xc8
 800d002:	e9c0 5500 	strd	r5, r5, [r0]
 800d006:	6083      	str	r3, [r0, #8]
 800d008:	f240 1301 	movw	r3, #257	@ 0x101
 800d00c:	4617      	mov	r7, r2
 800d00e:	8183      	strh	r3, [r0, #12]
 800d010:	460c      	mov	r4, r1
 800d012:	46a8      	mov	r8, r5
 800d014:	4621      	mov	r1, r4
 800d016:	4630      	mov	r0, r6
 800d018:	3501      	adds	r5, #1
 800d01a:	f008 fc39 	bl	8015890 <put_memory>
 800d01e:	42af      	cmp	r7, r5
 800d020:	60a4      	str	r4, [r4, #8]
 800d022:	f884 800c 	strb.w	r8, [r4, #12]
 800d026:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d02a:	d1f3      	bne.n	800d014 <rmw_uxrce_init_client_memory+0x20>
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <rmw_uxrce_init_publisher_memory>:
 800d034:	b1e2      	cbz	r2, 800d070 <rmw_uxrce_init_publisher_memory+0x3c>
 800d036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d03a:	7b05      	ldrb	r5, [r0, #12]
 800d03c:	4606      	mov	r6, r0
 800d03e:	b9ad      	cbnz	r5, 800d06c <rmw_uxrce_init_publisher_memory+0x38>
 800d040:	23d8      	movs	r3, #216	@ 0xd8
 800d042:	e9c0 5500 	strd	r5, r5, [r0]
 800d046:	6083      	str	r3, [r0, #8]
 800d048:	f240 1301 	movw	r3, #257	@ 0x101
 800d04c:	4617      	mov	r7, r2
 800d04e:	8183      	strh	r3, [r0, #12]
 800d050:	460c      	mov	r4, r1
 800d052:	46a8      	mov	r8, r5
 800d054:	4621      	mov	r1, r4
 800d056:	4630      	mov	r0, r6
 800d058:	3501      	adds	r5, #1
 800d05a:	f008 fc19 	bl	8015890 <put_memory>
 800d05e:	42af      	cmp	r7, r5
 800d060:	60a4      	str	r4, [r4, #8]
 800d062:	f884 800c 	strb.w	r8, [r4, #12]
 800d066:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d06a:	d1f3      	bne.n	800d054 <rmw_uxrce_init_publisher_memory+0x20>
 800d06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop

0800d074 <rmw_uxrce_init_subscription_memory>:
 800d074:	b1e2      	cbz	r2, 800d0b0 <rmw_uxrce_init_subscription_memory+0x3c>
 800d076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d07a:	7b05      	ldrb	r5, [r0, #12]
 800d07c:	4606      	mov	r6, r0
 800d07e:	b9ad      	cbnz	r5, 800d0ac <rmw_uxrce_init_subscription_memory+0x38>
 800d080:	23d8      	movs	r3, #216	@ 0xd8
 800d082:	e9c0 5500 	strd	r5, r5, [r0]
 800d086:	6083      	str	r3, [r0, #8]
 800d088:	f240 1301 	movw	r3, #257	@ 0x101
 800d08c:	4617      	mov	r7, r2
 800d08e:	8183      	strh	r3, [r0, #12]
 800d090:	460c      	mov	r4, r1
 800d092:	46a8      	mov	r8, r5
 800d094:	4621      	mov	r1, r4
 800d096:	4630      	mov	r0, r6
 800d098:	3501      	adds	r5, #1
 800d09a:	f008 fbf9 	bl	8015890 <put_memory>
 800d09e:	42af      	cmp	r7, r5
 800d0a0:	60a4      	str	r4, [r4, #8]
 800d0a2:	f884 800c 	strb.w	r8, [r4, #12]
 800d0a6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d0aa:	d1f3      	bne.n	800d094 <rmw_uxrce_init_subscription_memory+0x20>
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop

0800d0b4 <rmw_uxrce_init_node_memory>:
 800d0b4:	b1e2      	cbz	r2, 800d0f0 <rmw_uxrce_init_node_memory+0x3c>
 800d0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	7b05      	ldrb	r5, [r0, #12]
 800d0bc:	4606      	mov	r6, r0
 800d0be:	b9ad      	cbnz	r5, 800d0ec <rmw_uxrce_init_node_memory+0x38>
 800d0c0:	23a4      	movs	r3, #164	@ 0xa4
 800d0c2:	e9c0 5500 	strd	r5, r5, [r0]
 800d0c6:	6083      	str	r3, [r0, #8]
 800d0c8:	f240 1301 	movw	r3, #257	@ 0x101
 800d0cc:	4617      	mov	r7, r2
 800d0ce:	8183      	strh	r3, [r0, #12]
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	46a8      	mov	r8, r5
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	3501      	adds	r5, #1
 800d0da:	f008 fbd9 	bl	8015890 <put_memory>
 800d0de:	42af      	cmp	r7, r5
 800d0e0:	60a4      	str	r4, [r4, #8]
 800d0e2:	f884 800c 	strb.w	r8, [r4, #12]
 800d0e6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d0ea:	d1f3      	bne.n	800d0d4 <rmw_uxrce_init_node_memory+0x20>
 800d0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop

0800d0f4 <rmw_uxrce_init_session_memory>:
 800d0f4:	b1ea      	cbz	r2, 800d132 <rmw_uxrce_init_session_memory+0x3e>
 800d0f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0fa:	7b05      	ldrb	r5, [r0, #12]
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	b9b5      	cbnz	r5, 800d12e <rmw_uxrce_init_session_memory+0x3a>
 800d100:	e9c0 5500 	strd	r5, r5, [r0]
 800d104:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d108:	f240 1301 	movw	r3, #257	@ 0x101
 800d10c:	4617      	mov	r7, r2
 800d10e:	f8c0 8008 	str.w	r8, [r0, #8]
 800d112:	460c      	mov	r4, r1
 800d114:	8183      	strh	r3, [r0, #12]
 800d116:	46a9      	mov	r9, r5
 800d118:	4621      	mov	r1, r4
 800d11a:	4630      	mov	r0, r6
 800d11c:	3501      	adds	r5, #1
 800d11e:	f008 fbb7 	bl	8015890 <put_memory>
 800d122:	42af      	cmp	r7, r5
 800d124:	60a4      	str	r4, [r4, #8]
 800d126:	f884 900c 	strb.w	r9, [r4, #12]
 800d12a:	4444      	add	r4, r8
 800d12c:	d1f4      	bne.n	800d118 <rmw_uxrce_init_session_memory+0x24>
 800d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d132:	4770      	bx	lr

0800d134 <rmw_uxrce_init_topic_memory>:
 800d134:	b1e2      	cbz	r2, 800d170 <rmw_uxrce_init_topic_memory+0x3c>
 800d136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d13a:	7b05      	ldrb	r5, [r0, #12]
 800d13c:	4606      	mov	r6, r0
 800d13e:	b9ad      	cbnz	r5, 800d16c <rmw_uxrce_init_topic_memory+0x38>
 800d140:	231c      	movs	r3, #28
 800d142:	e9c0 5500 	strd	r5, r5, [r0]
 800d146:	6083      	str	r3, [r0, #8]
 800d148:	f240 1301 	movw	r3, #257	@ 0x101
 800d14c:	4617      	mov	r7, r2
 800d14e:	8183      	strh	r3, [r0, #12]
 800d150:	460c      	mov	r4, r1
 800d152:	46a8      	mov	r8, r5
 800d154:	4621      	mov	r1, r4
 800d156:	4630      	mov	r0, r6
 800d158:	3501      	adds	r5, #1
 800d15a:	f008 fb99 	bl	8015890 <put_memory>
 800d15e:	42af      	cmp	r7, r5
 800d160:	60a4      	str	r4, [r4, #8]
 800d162:	f884 800c 	strb.w	r8, [r4, #12]
 800d166:	f104 041c 	add.w	r4, r4, #28
 800d16a:	d1f3      	bne.n	800d154 <rmw_uxrce_init_topic_memory+0x20>
 800d16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop

0800d174 <rmw_uxrce_init_static_input_buffer_memory>:
 800d174:	b1ea      	cbz	r2, 800d1b2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17a:	7b05      	ldrb	r5, [r0, #12]
 800d17c:	4606      	mov	r6, r0
 800d17e:	b9b5      	cbnz	r5, 800d1ae <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d180:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d184:	e9c0 5500 	strd	r5, r5, [r0]
 800d188:	6083      	str	r3, [r0, #8]
 800d18a:	f240 1301 	movw	r3, #257	@ 0x101
 800d18e:	4617      	mov	r7, r2
 800d190:	8183      	strh	r3, [r0, #12]
 800d192:	460c      	mov	r4, r1
 800d194:	46a8      	mov	r8, r5
 800d196:	4621      	mov	r1, r4
 800d198:	4630      	mov	r0, r6
 800d19a:	3501      	adds	r5, #1
 800d19c:	f008 fb78 	bl	8015890 <put_memory>
 800d1a0:	42af      	cmp	r7, r5
 800d1a2:	60a4      	str	r4, [r4, #8]
 800d1a4:	f884 800c 	strb.w	r8, [r4, #12]
 800d1a8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d1ac:	d1f3      	bne.n	800d196 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b2:	4770      	bx	lr

0800d1b4 <rmw_uxrce_init_init_options_impl_memory>:
 800d1b4:	b1e2      	cbz	r2, 800d1f0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ba:	7b05      	ldrb	r5, [r0, #12]
 800d1bc:	4606      	mov	r6, r0
 800d1be:	b9ad      	cbnz	r5, 800d1ec <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d1c0:	232c      	movs	r3, #44	@ 0x2c
 800d1c2:	e9c0 5500 	strd	r5, r5, [r0]
 800d1c6:	6083      	str	r3, [r0, #8]
 800d1c8:	f240 1301 	movw	r3, #257	@ 0x101
 800d1cc:	4617      	mov	r7, r2
 800d1ce:	8183      	strh	r3, [r0, #12]
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	46a8      	mov	r8, r5
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	3501      	adds	r5, #1
 800d1da:	f008 fb59 	bl	8015890 <put_memory>
 800d1de:	42af      	cmp	r7, r5
 800d1e0:	60a4      	str	r4, [r4, #8]
 800d1e2:	f884 800c 	strb.w	r8, [r4, #12]
 800d1e6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d1ea:	d1f3      	bne.n	800d1d4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop

0800d1f4 <rmw_uxrce_init_wait_set_memory>:
 800d1f4:	b1e2      	cbz	r2, 800d230 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fa:	7b05      	ldrb	r5, [r0, #12]
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	b9ad      	cbnz	r5, 800d22c <rmw_uxrce_init_wait_set_memory+0x38>
 800d200:	231c      	movs	r3, #28
 800d202:	e9c0 5500 	strd	r5, r5, [r0]
 800d206:	6083      	str	r3, [r0, #8]
 800d208:	f240 1301 	movw	r3, #257	@ 0x101
 800d20c:	4617      	mov	r7, r2
 800d20e:	8183      	strh	r3, [r0, #12]
 800d210:	460c      	mov	r4, r1
 800d212:	46a8      	mov	r8, r5
 800d214:	4621      	mov	r1, r4
 800d216:	4630      	mov	r0, r6
 800d218:	3501      	adds	r5, #1
 800d21a:	f008 fb39 	bl	8015890 <put_memory>
 800d21e:	42af      	cmp	r7, r5
 800d220:	60a4      	str	r4, [r4, #8]
 800d222:	f884 800c 	strb.w	r8, [r4, #12]
 800d226:	f104 041c 	add.w	r4, r4, #28
 800d22a:	d1f3      	bne.n	800d214 <rmw_uxrce_init_wait_set_memory+0x20>
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop

0800d234 <rmw_uxrce_init_guard_condition_memory>:
 800d234:	b1e2      	cbz	r2, 800d270 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d23a:	7b05      	ldrb	r5, [r0, #12]
 800d23c:	4606      	mov	r6, r0
 800d23e:	b9ad      	cbnz	r5, 800d26c <rmw_uxrce_init_guard_condition_memory+0x38>
 800d240:	2320      	movs	r3, #32
 800d242:	e9c0 5500 	strd	r5, r5, [r0]
 800d246:	6083      	str	r3, [r0, #8]
 800d248:	f240 1301 	movw	r3, #257	@ 0x101
 800d24c:	4617      	mov	r7, r2
 800d24e:	8183      	strh	r3, [r0, #12]
 800d250:	460c      	mov	r4, r1
 800d252:	46a8      	mov	r8, r5
 800d254:	4621      	mov	r1, r4
 800d256:	4630      	mov	r0, r6
 800d258:	3501      	adds	r5, #1
 800d25a:	f008 fb19 	bl	8015890 <put_memory>
 800d25e:	42af      	cmp	r7, r5
 800d260:	60a4      	str	r4, [r4, #8]
 800d262:	f884 800c 	strb.w	r8, [r4, #12]
 800d266:	f104 0420 	add.w	r4, r4, #32
 800d26a:	d1f3      	bne.n	800d254 <rmw_uxrce_init_guard_condition_memory+0x20>
 800d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop

0800d274 <rmw_uxrce_fini_session_memory>:
 800d274:	4601      	mov	r1, r0
 800d276:	4801      	ldr	r0, [pc, #4]	@ (800d27c <rmw_uxrce_fini_session_memory+0x8>)
 800d278:	f008 bb0a 	b.w	8015890 <put_memory>
 800d27c:	2000cb24 	.word	0x2000cb24

0800d280 <rmw_uxrce_fini_node_memory>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	4604      	mov	r4, r0
 800d284:	6800      	ldr	r0, [r0, #0]
 800d286:	b128      	cbz	r0, 800d294 <rmw_uxrce_fini_node_memory+0x14>
 800d288:	4b07      	ldr	r3, [pc, #28]	@ (800d2a8 <rmw_uxrce_fini_node_memory+0x28>)
 800d28a:	6819      	ldr	r1, [r3, #0]
 800d28c:	f7f2 ffc8 	bl	8000220 <strcmp>
 800d290:	b940      	cbnz	r0, 800d2a4 <rmw_uxrce_fini_node_memory+0x24>
 800d292:	6020      	str	r0, [r4, #0]
 800d294:	6861      	ldr	r1, [r4, #4]
 800d296:	b129      	cbz	r1, 800d2a4 <rmw_uxrce_fini_node_memory+0x24>
 800d298:	2500      	movs	r5, #0
 800d29a:	4804      	ldr	r0, [pc, #16]	@ (800d2ac <rmw_uxrce_fini_node_memory+0x2c>)
 800d29c:	610d      	str	r5, [r1, #16]
 800d29e:	f008 faf7 	bl	8015890 <put_memory>
 800d2a2:	6065      	str	r5, [r4, #4]
 800d2a4:	bd38      	pop	{r3, r4, r5, pc}
 800d2a6:	bf00      	nop
 800d2a8:	08019b74 	.word	0x08019b74
 800d2ac:	2000caf4 	.word	0x2000caf4

0800d2b0 <rmw_uxrce_fini_publisher_memory>:
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	6800      	ldr	r0, [r0, #0]
 800d2b6:	b128      	cbz	r0, 800d2c4 <rmw_uxrce_fini_publisher_memory+0x14>
 800d2b8:	4b06      	ldr	r3, [pc, #24]	@ (800d2d4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d2ba:	6819      	ldr	r1, [r3, #0]
 800d2bc:	f7f2 ffb0 	bl	8000220 <strcmp>
 800d2c0:	b938      	cbnz	r0, 800d2d2 <rmw_uxrce_fini_publisher_memory+0x22>
 800d2c2:	6020      	str	r0, [r4, #0]
 800d2c4:	6861      	ldr	r1, [r4, #4]
 800d2c6:	b121      	cbz	r1, 800d2d2 <rmw_uxrce_fini_publisher_memory+0x22>
 800d2c8:	4803      	ldr	r0, [pc, #12]	@ (800d2d8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d2ca:	f008 fae1 	bl	8015890 <put_memory>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	6063      	str	r3, [r4, #4]
 800d2d2:	bd10      	pop	{r4, pc}
 800d2d4:	08019b74 	.word	0x08019b74
 800d2d8:	2000cb04 	.word	0x2000cb04

0800d2dc <rmw_uxrce_fini_subscription_memory>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	4604      	mov	r4, r0
 800d2e0:	6800      	ldr	r0, [r0, #0]
 800d2e2:	b128      	cbz	r0, 800d2f0 <rmw_uxrce_fini_subscription_memory+0x14>
 800d2e4:	4b06      	ldr	r3, [pc, #24]	@ (800d300 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d2e6:	6819      	ldr	r1, [r3, #0]
 800d2e8:	f7f2 ff9a 	bl	8000220 <strcmp>
 800d2ec:	b938      	cbnz	r0, 800d2fe <rmw_uxrce_fini_subscription_memory+0x22>
 800d2ee:	6020      	str	r0, [r4, #0]
 800d2f0:	6861      	ldr	r1, [r4, #4]
 800d2f2:	b121      	cbz	r1, 800d2fe <rmw_uxrce_fini_subscription_memory+0x22>
 800d2f4:	4803      	ldr	r0, [pc, #12]	@ (800d304 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d2f6:	f008 facb 	bl	8015890 <put_memory>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	6063      	str	r3, [r4, #4]
 800d2fe:	bd10      	pop	{r4, pc}
 800d300:	08019b74 	.word	0x08019b74
 800d304:	2000cb44 	.word	0x2000cb44

0800d308 <rmw_uxrce_fini_service_memory>:
 800d308:	b510      	push	{r4, lr}
 800d30a:	4604      	mov	r4, r0
 800d30c:	6800      	ldr	r0, [r0, #0]
 800d30e:	b128      	cbz	r0, 800d31c <rmw_uxrce_fini_service_memory+0x14>
 800d310:	4b06      	ldr	r3, [pc, #24]	@ (800d32c <rmw_uxrce_fini_service_memory+0x24>)
 800d312:	6819      	ldr	r1, [r3, #0]
 800d314:	f7f2 ff84 	bl	8000220 <strcmp>
 800d318:	b938      	cbnz	r0, 800d32a <rmw_uxrce_fini_service_memory+0x22>
 800d31a:	6020      	str	r0, [r4, #0]
 800d31c:	6861      	ldr	r1, [r4, #4]
 800d31e:	b121      	cbz	r1, 800d32a <rmw_uxrce_fini_service_memory+0x22>
 800d320:	4803      	ldr	r0, [pc, #12]	@ (800d330 <rmw_uxrce_fini_service_memory+0x28>)
 800d322:	f008 fab5 	bl	8015890 <put_memory>
 800d326:	2300      	movs	r3, #0
 800d328:	6063      	str	r3, [r4, #4]
 800d32a:	bd10      	pop	{r4, pc}
 800d32c:	08019b74 	.word	0x08019b74
 800d330:	2000cb14 	.word	0x2000cb14

0800d334 <rmw_uxrce_fini_client_memory>:
 800d334:	b510      	push	{r4, lr}
 800d336:	4604      	mov	r4, r0
 800d338:	6800      	ldr	r0, [r0, #0]
 800d33a:	b128      	cbz	r0, 800d348 <rmw_uxrce_fini_client_memory+0x14>
 800d33c:	4b06      	ldr	r3, [pc, #24]	@ (800d358 <rmw_uxrce_fini_client_memory+0x24>)
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	f7f2 ff6e 	bl	8000220 <strcmp>
 800d344:	b938      	cbnz	r0, 800d356 <rmw_uxrce_fini_client_memory+0x22>
 800d346:	6020      	str	r0, [r4, #0]
 800d348:	6861      	ldr	r1, [r4, #4]
 800d34a:	b121      	cbz	r1, 800d356 <rmw_uxrce_fini_client_memory+0x22>
 800d34c:	4803      	ldr	r0, [pc, #12]	@ (800d35c <rmw_uxrce_fini_client_memory+0x28>)
 800d34e:	f008 fa9f 	bl	8015890 <put_memory>
 800d352:	2300      	movs	r3, #0
 800d354:	6063      	str	r3, [r4, #4]
 800d356:	bd10      	pop	{r4, pc}
 800d358:	08019b74 	.word	0x08019b74
 800d35c:	20008224 	.word	0x20008224

0800d360 <rmw_uxrce_fini_topic_memory>:
 800d360:	b510      	push	{r4, lr}
 800d362:	4604      	mov	r4, r0
 800d364:	4621      	mov	r1, r4
 800d366:	4803      	ldr	r0, [pc, #12]	@ (800d374 <rmw_uxrce_fini_topic_memory+0x14>)
 800d368:	f008 fa92 	bl	8015890 <put_memory>
 800d36c:	2300      	movs	r3, #0
 800d36e:	61a3      	str	r3, [r4, #24]
 800d370:	bd10      	pop	{r4, pc}
 800d372:	bf00      	nop
 800d374:	2000cb54 	.word	0x2000cb54

0800d378 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d378:	b082      	sub	sp, #8
 800d37a:	b530      	push	{r4, r5, lr}
 800d37c:	4925      	ldr	r1, [pc, #148]	@ (800d414 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d37e:	680d      	ldr	r5, [r1, #0]
 800d380:	ac03      	add	r4, sp, #12
 800d382:	e884 000c 	stmia.w	r4, {r2, r3}
 800d386:	461c      	mov	r4, r3
 800d388:	2d00      	cmp	r5, #0
 800d38a:	d041      	beq.n	800d410 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d38c:	462b      	mov	r3, r5
 800d38e:	2100      	movs	r1, #0
 800d390:	689a      	ldr	r2, [r3, #8]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d398:	4290      	cmp	r0, r2
 800d39a:	bf08      	it	eq
 800d39c:	3101      	addeq	r1, #1
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1f6      	bne.n	800d390 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d3a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d029      	beq.n	800d3fe <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d3aa:	d907      	bls.n	800d3bc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	d005      	beq.n	800d3bc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	b002      	add	sp, #8
 800d3ba:	4770      	bx	lr
 800d3bc:	b314      	cbz	r4, 800d404 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d3be:	428c      	cmp	r4, r1
 800d3c0:	d820      	bhi.n	800d404 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d3c2:	2d00      	cmp	r5, #0
 800d3c4:	d0f4      	beq.n	800d3b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d3cc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d3d0:	e002      	b.n	800d3d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d3d2:	686d      	ldr	r5, [r5, #4]
 800d3d4:	2d00      	cmp	r5, #0
 800d3d6:	d0ec      	beq.n	800d3b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d3d8:	68ab      	ldr	r3, [r5, #8]
 800d3da:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d3de:	4290      	cmp	r0, r2
 800d3e0:	d1f7      	bne.n	800d3d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d3e2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d3e6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d3ea:	4562      	cmp	r2, ip
 800d3ec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d3f0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d3f4:	daed      	bge.n	800d3d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d3f6:	4694      	mov	ip, r2
 800d3f8:	461c      	mov	r4, r3
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	e7e9      	b.n	800d3d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d3fe:	b10c      	cbz	r4, 800d404 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d400:	428c      	cmp	r4, r1
 800d402:	d9d5      	bls.n	800d3b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d408:	4802      	ldr	r0, [pc, #8]	@ (800d414 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d40a:	b002      	add	sp, #8
 800d40c:	f008 ba30 	b.w	8015870 <get_memory>
 800d410:	4629      	mov	r1, r5
 800d412:	e7c6      	b.n	800d3a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d414:	2000cb34 	.word	0x2000cb34

0800d418 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d418:	4b11      	ldr	r3, [pc, #68]	@ (800d460 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	b530      	push	{r4, r5, lr}
 800d41e:	b1e3      	cbz	r3, 800d45a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d420:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d424:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d428:	2400      	movs	r4, #0
 800d42a:	e001      	b.n	800d430 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	b193      	cbz	r3, 800d456 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d430:	689a      	ldr	r2, [r3, #8]
 800d432:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d436:	4288      	cmp	r0, r1
 800d438:	d1f8      	bne.n	800d42c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d43a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d43e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d442:	4571      	cmp	r1, lr
 800d444:	eb72 050c 	sbcs.w	r5, r2, ip
 800d448:	daf0      	bge.n	800d42c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d44a:	461c      	mov	r4, r3
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	468e      	mov	lr, r1
 800d450:	4694      	mov	ip, r2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1ec      	bne.n	800d430 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d456:	4620      	mov	r0, r4
 800d458:	bd30      	pop	{r4, r5, pc}
 800d45a:	461c      	mov	r4, r3
 800d45c:	4620      	mov	r0, r4
 800d45e:	bd30      	pop	{r4, r5, pc}
 800d460:	2000cb34 	.word	0x2000cb34
 800d464:	00000000 	.word	0x00000000

0800d468 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	4b3c      	ldr	r3, [pc, #240]	@ (800d560 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d46e:	ed2d 8b06 	vpush	{d8-d10}
 800d472:	681f      	ldr	r7, [r3, #0]
 800d474:	b08d      	sub	sp, #52	@ 0x34
 800d476:	f7ff fd7d 	bl	800cf74 <rmw_uros_epoch_nanos>
 800d47a:	2f00      	cmp	r7, #0
 800d47c:	d05d      	beq.n	800d53a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d47e:	46b8      	mov	r8, r7
 800d480:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d548 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d484:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d488:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d48c:	2b04      	cmp	r3, #4
 800d48e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d550 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d492:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d558 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d496:	4681      	mov	r9, r0
 800d498:	468a      	mov	sl, r1
 800d49a:	ac04      	add	r4, sp, #16
 800d49c:	d03f      	beq.n	800d51e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d49e:	2b05      	cmp	r3, #5
 800d4a0:	d044      	beq.n	800d52c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	d03b      	beq.n	800d51e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d4a6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d4aa:	ed8d ab06 	vstr	d10, [sp, #24]
 800d4ae:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d4b2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d4b6:	ab08      	add	r3, sp, #32
 800d4b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d4be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d4c2:	f007 ff21 	bl	8015308 <rmw_time_equal>
 800d4c6:	b118      	cbz	r0, 800d4d0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d4c8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d4cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d4d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d4d4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d4d8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d4dc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d4e0:	f007 ff66 	bl	80153b0 <rmw_time_total_nsec>
 800d4e4:	1830      	adds	r0, r6, r0
 800d4e6:	eb47 0101 	adc.w	r1, r7, r1
 800d4ea:	4548      	cmp	r0, r9
 800d4ec:	eb71 030a 	sbcs.w	r3, r1, sl
 800d4f0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d4f4:	db05      	blt.n	800d502 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d4f6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d4fa:	4591      	cmp	r9, r2
 800d4fc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d500:	da03      	bge.n	800d50a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d502:	4817      	ldr	r0, [pc, #92]	@ (800d560 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d504:	4641      	mov	r1, r8
 800d506:	f008 f9c3 	bl	8015890 <put_memory>
 800d50a:	f1bb 0f00 	cmp.w	fp, #0
 800d50e:	d014      	beq.n	800d53a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d510:	46d8      	mov	r8, fp
 800d512:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d516:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d51a:	2b04      	cmp	r3, #4
 800d51c:	d1bf      	bne.n	800d49e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d51e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d522:	3340      	adds	r3, #64	@ 0x40
 800d524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d52a:	e7c0      	b.n	800d4ae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d52c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d530:	3348      	adds	r3, #72	@ 0x48
 800d532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d538:	e7b9      	b.n	800d4ae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d53a:	b00d      	add	sp, #52	@ 0x34
 800d53c:	ecbd 8b06 	vpop	{d8-d10}
 800d540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d544:	f3af 8000 	nop.w
	...
 800d550:	00000001 	.word	0x00000001
 800d554:	00000000 	.word	0x00000000
 800d558:	0000001e 	.word	0x0000001e
 800d55c:	00000000 	.word	0x00000000
 800d560:	2000cb34 	.word	0x2000cb34

0800d564 <run_xrce_session>:
 800d564:	b510      	push	{r4, lr}
 800d566:	788c      	ldrb	r4, [r1, #2]
 800d568:	b086      	sub	sp, #24
 800d56a:	2c01      	cmp	r4, #1
 800d56c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d570:	d00c      	beq.n	800d58c <run_xrce_session+0x28>
 800d572:	4619      	mov	r1, r3
 800d574:	2301      	movs	r3, #1
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	f10d 020e 	add.w	r2, sp, #14
 800d57c:	f10d 0317 	add.w	r3, sp, #23
 800d580:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d584:	f002 fa4e 	bl	800fa24 <uxr_run_session_until_all_status>
 800d588:	b006      	add	sp, #24
 800d58a:	bd10      	pop	{r4, pc}
 800d58c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d590:	f001 fe62 	bl	800f258 <uxr_flash_output_streams>
 800d594:	4620      	mov	r0, r4
 800d596:	b006      	add	sp, #24
 800d598:	bd10      	pop	{r4, pc}
 800d59a:	bf00      	nop

0800d59c <convert_qos_profile>:
 800d59c:	7a4a      	ldrb	r2, [r1, #9]
 800d59e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d5a2:	2a02      	cmp	r2, #2
 800d5a4:	bf18      	it	ne
 800d5a6:	2200      	movne	r2, #0
 800d5a8:	7002      	strb	r2, [r0, #0]
 800d5aa:	780a      	ldrb	r2, [r1, #0]
 800d5ac:	8889      	ldrh	r1, [r1, #4]
 800d5ae:	8081      	strh	r1, [r0, #4]
 800d5b0:	f1ac 0c02 	sub.w	ip, ip, #2
 800d5b4:	f1a2 0202 	sub.w	r2, r2, #2
 800d5b8:	fabc fc8c 	clz	ip, ip
 800d5bc:	fab2 f282 	clz	r2, r2
 800d5c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d5c4:	0952      	lsrs	r2, r2, #5
 800d5c6:	f880 c001 	strb.w	ip, [r0, #1]
 800d5ca:	7082      	strb	r2, [r0, #2]
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop

0800d5d0 <generate_type_name>:
 800d5d0:	b530      	push	{r4, r5, lr}
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	700b      	strb	r3, [r1, #0]
 800d5d6:	6803      	ldr	r3, [r0, #0]
 800d5d8:	b087      	sub	sp, #28
 800d5da:	4614      	mov	r4, r2
 800d5dc:	b1d3      	cbz	r3, 800d614 <generate_type_name+0x44>
 800d5de:	4a0f      	ldr	r2, [pc, #60]	@ (800d61c <generate_type_name+0x4c>)
 800d5e0:	4615      	mov	r5, r2
 800d5e2:	9203      	str	r2, [sp, #12]
 800d5e4:	9500      	str	r5, [sp, #0]
 800d5e6:	6842      	ldr	r2, [r0, #4]
 800d5e8:	480d      	ldr	r0, [pc, #52]	@ (800d620 <generate_type_name+0x50>)
 800d5ea:	9001      	str	r0, [sp, #4]
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	490d      	ldr	r1, [pc, #52]	@ (800d624 <generate_type_name+0x54>)
 800d5f0:	9204      	str	r2, [sp, #16]
 800d5f2:	9105      	str	r1, [sp, #20]
 800d5f4:	9102      	str	r1, [sp, #8]
 800d5f6:	4a0c      	ldr	r2, [pc, #48]	@ (800d628 <generate_type_name+0x58>)
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	f00a fb59 	bl	8017cb0 <sniprintf>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	db05      	blt.n	800d60e <generate_type_name+0x3e>
 800d602:	4284      	cmp	r4, r0
 800d604:	bfd4      	ite	le
 800d606:	2000      	movle	r0, #0
 800d608:	2001      	movgt	r0, #1
 800d60a:	b007      	add	sp, #28
 800d60c:	bd30      	pop	{r4, r5, pc}
 800d60e:	2000      	movs	r0, #0
 800d610:	b007      	add	sp, #28
 800d612:	bd30      	pop	{r4, r5, pc}
 800d614:	4b05      	ldr	r3, [pc, #20]	@ (800d62c <generate_type_name+0x5c>)
 800d616:	4a01      	ldr	r2, [pc, #4]	@ (800d61c <generate_type_name+0x4c>)
 800d618:	461d      	mov	r5, r3
 800d61a:	e7e2      	b.n	800d5e2 <generate_type_name+0x12>
 800d61c:	080190b8 	.word	0x080190b8
 800d620:	080190d0 	.word	0x080190d0
 800d624:	080190cc 	.word	0x080190cc
 800d628:	080190bc 	.word	0x080190bc
 800d62c:	0801994c 	.word	0x0801994c

0800d630 <generate_topic_name>:
 800d630:	b510      	push	{r4, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	4614      	mov	r4, r2
 800d636:	9000      	str	r0, [sp, #0]
 800d638:	4b08      	ldr	r3, [pc, #32]	@ (800d65c <generate_topic_name+0x2c>)
 800d63a:	4a09      	ldr	r2, [pc, #36]	@ (800d660 <generate_topic_name+0x30>)
 800d63c:	4608      	mov	r0, r1
 800d63e:	4621      	mov	r1, r4
 800d640:	f00a fb36 	bl	8017cb0 <sniprintf>
 800d644:	2800      	cmp	r0, #0
 800d646:	db05      	blt.n	800d654 <generate_topic_name+0x24>
 800d648:	4284      	cmp	r4, r0
 800d64a:	bfd4      	ite	le
 800d64c:	2000      	movle	r0, #0
 800d64e:	2001      	movgt	r0, #1
 800d650:	b002      	add	sp, #8
 800d652:	bd10      	pop	{r4, pc}
 800d654:	2000      	movs	r0, #0
 800d656:	b002      	add	sp, #8
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	bf00      	nop
 800d65c:	080190dc 	.word	0x080190dc
 800d660:	080190d4 	.word	0x080190d4

0800d664 <is_uxrce_rmw_identifier_valid>:
 800d664:	b510      	push	{r4, lr}
 800d666:	4604      	mov	r4, r0
 800d668:	b140      	cbz	r0, 800d67c <is_uxrce_rmw_identifier_valid+0x18>
 800d66a:	f008 f969 	bl	8015940 <rmw_get_implementation_identifier>
 800d66e:	4601      	mov	r1, r0
 800d670:	4620      	mov	r0, r4
 800d672:	f7f2 fdd5 	bl	8000220 <strcmp>
 800d676:	fab0 f080 	clz	r0, r0
 800d67a:	0940      	lsrs	r0, r0, #5
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	bf00      	nop

0800d680 <get_message_typesupport_handle>:
 800d680:	6883      	ldr	r3, [r0, #8]
 800d682:	4718      	bx	r3

0800d684 <get_message_typesupport_handle_function>:
 800d684:	b510      	push	{r4, lr}
 800d686:	4604      	mov	r4, r0
 800d688:	6800      	ldr	r0, [r0, #0]
 800d68a:	f7f2 fdc9 	bl	8000220 <strcmp>
 800d68e:	2800      	cmp	r0, #0
 800d690:	bf0c      	ite	eq
 800d692:	4620      	moveq	r0, r4
 800d694:	2000      	movne	r0, #0
 800d696:	bd10      	pop	{r4, pc}

0800d698 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d698:	4b04      	ldr	r3, [pc, #16]	@ (800d6ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	b10a      	cbz	r2, 800d6a2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800d69e:	4803      	ldr	r0, [pc, #12]	@ (800d6ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d6a0:	4770      	bx	lr
 800d6a2:	4a03      	ldr	r2, [pc, #12]	@ (800d6b0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800d6a4:	4801      	ldr	r0, [pc, #4]	@ (800d6ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d6a6:	6812      	ldr	r2, [r2, #0]
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	4770      	bx	lr
 800d6ac:	20000030 	.word	0x20000030
 800d6b0:	200001b4 	.word	0x200001b4

0800d6b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d6b4:	4a02      	ldr	r2, [pc, #8]	@ (800d6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xc>)
 800d6b6:	4b03      	ldr	r3, [pc, #12]	@ (800d6c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x10>)
 800d6b8:	6812      	ldr	r2, [r2, #0]
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	200001b4 	.word	0x200001b4
 800d6c4:	20000030 	.word	0x20000030

0800d6c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 800d6c8:	4b04      	ldr	r3, [pc, #16]	@ (800d6dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	b10a      	cbz	r2, 800d6d2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0xa>
 800d6ce:	4803      	ldr	r0, [pc, #12]	@ (800d6dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 800d6d0:	4770      	bx	lr
 800d6d2:	4a03      	ldr	r2, [pc, #12]	@ (800d6e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x18>)
 800d6d4:	4801      	ldr	r0, [pc, #4]	@ (800d6dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 800d6d6:	6812      	ldr	r2, [r2, #0]
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	4770      	bx	lr
 800d6dc:	20000044 	.word	0x20000044
 800d6e0:	200001b4 	.word	0x200001b4

0800d6e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 800d6e4:	4a02      	ldr	r2, [pc, #8]	@ (800d6f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0xc>)
 800d6e6:	4b03      	ldr	r3, [pc, #12]	@ (800d6f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int8+0x10>)
 800d6e8:	6812      	ldr	r2, [r2, #0]
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	200001b4 	.word	0x200001b4
 800d6f4:	20000044 	.word	0x20000044

0800d6f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d6f8:	4b04      	ldr	r3, [pc, #16]	@ (800d70c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	b10a      	cbz	r2, 800d702 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800d6fe:	4803      	ldr	r0, [pc, #12]	@ (800d70c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d700:	4770      	bx	lr
 800d702:	4a03      	ldr	r2, [pc, #12]	@ (800d710 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800d704:	4801      	ldr	r0, [pc, #4]	@ (800d70c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d706:	6812      	ldr	r2, [r2, #0]
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	4770      	bx	lr
 800d70c:	20000058 	.word	0x20000058
 800d710:	200001b4 	.word	0x200001b4

0800d714 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d714:	4a02      	ldr	r2, [pc, #8]	@ (800d720 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xc>)
 800d716:	4b03      	ldr	r3, [pc, #12]	@ (800d724 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x10>)
 800d718:	6812      	ldr	r2, [r2, #0]
 800d71a:	601a      	str	r2, [r3, #0]
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	200001b4 	.word	0x200001b4
 800d724:	20000058 	.word	0x20000058

0800d728 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 800d728:	f008 bcec 	b.w	8016104 <std_msgs__msg__Bool__init>

0800d72c <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 800d72c:	f008 bcee 	b.w	801610c <std_msgs__msg__Bool__fini>

0800d730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d730:	4b04      	ldr	r3, [pc, #16]	@ (800d744 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	b10a      	cbz	r2, 800d73a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800d736:	4803      	ldr	r0, [pc, #12]	@ (800d744 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d738:	4770      	bx	lr
 800d73a:	4a03      	ldr	r2, [pc, #12]	@ (800d748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800d73c:	4801      	ldr	r0, [pc, #4]	@ (800d744 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800d73e:	6812      	ldr	r2, [r2, #0]
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	4770      	bx	lr
 800d744:	200000a0 	.word	0x200000a0
 800d748:	200001b8 	.word	0x200001b8

0800d74c <std_msgs__msg__Int8__rosidl_typesupport_introspection_c__Int8_init_function>:
 800d74c:	f008 bce0 	b.w	8016110 <std_msgs__msg__Int8__init>

0800d750 <std_msgs__msg__Int8__rosidl_typesupport_introspection_c__Int8_fini_function>:
 800d750:	f008 bce2 	b.w	8016118 <std_msgs__msg__Int8__fini>

0800d754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 800d754:	4b04      	ldr	r3, [pc, #16]	@ (800d768 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	b10a      	cbz	r2, 800d75e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0xa>
 800d75a:	4803      	ldr	r0, [pc, #12]	@ (800d768 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 800d75c:	4770      	bx	lr
 800d75e:	4a03      	ldr	r2, [pc, #12]	@ (800d76c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x18>)
 800d760:	4801      	ldr	r0, [pc, #4]	@ (800d768 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int8+0x14>)
 800d762:	6812      	ldr	r2, [r2, #0]
 800d764:	601a      	str	r2, [r3, #0]
 800d766:	4770      	bx	lr
 800d768:	200000e8 	.word	0x200000e8
 800d76c:	200001b8 	.word	0x200001b8

0800d770 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_init_function>:
 800d770:	f008 bcd4 	b.w	801611c <std_msgs__msg__UInt16__init>

0800d774 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_fini_function>:
 800d774:	f008 bcd6 	b.w	8016124 <std_msgs__msg__UInt16__fini>

0800d778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d778:	4b04      	ldr	r3, [pc, #16]	@ (800d78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	b10a      	cbz	r2, 800d782 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800d77e:	4803      	ldr	r0, [pc, #12]	@ (800d78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d780:	4770      	bx	lr
 800d782:	4a03      	ldr	r2, [pc, #12]	@ (800d790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800d784:	4801      	ldr	r0, [pc, #4]	@ (800d78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800d786:	6812      	ldr	r2, [r2, #0]
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	4770      	bx	lr
 800d78c:	20000130 	.word	0x20000130
 800d790:	200001b8 	.word	0x200001b8

0800d794 <_Bool__max_serialized_size>:
 800d794:	b508      	push	{r3, lr}
 800d796:	2101      	movs	r1, #1
 800d798:	2000      	movs	r0, #0
 800d79a:	f001 f88f 	bl	800e8bc <ucdr_alignment>
 800d79e:	3001      	adds	r0, #1
 800d7a0:	bd08      	pop	{r3, pc}
 800d7a2:	bf00      	nop

0800d7a4 <_Bool__cdr_deserialize>:
 800d7a4:	b109      	cbz	r1, 800d7aa <_Bool__cdr_deserialize+0x6>
 800d7a6:	f000 b895 	b.w	800d8d4 <ucdr_deserialize_bool>
 800d7aa:	4608      	mov	r0, r1
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop

0800d7b0 <get_serialized_size_std_msgs__msg__Bool>:
 800d7b0:	b138      	cbz	r0, 800d7c2 <get_serialized_size_std_msgs__msg__Bool+0x12>
 800d7b2:	b508      	push	{r3, lr}
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	f001 f87f 	bl	800e8bc <ucdr_alignment>
 800d7be:	3001      	adds	r0, #1
 800d7c0:	bd08      	pop	{r3, pc}
 800d7c2:	4770      	bx	lr

0800d7c4 <_Bool__cdr_serialize>:
 800d7c4:	460a      	mov	r2, r1
 800d7c6:	b118      	cbz	r0, 800d7d0 <_Bool__cdr_serialize+0xc>
 800d7c8:	7801      	ldrb	r1, [r0, #0]
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	f000 b86c 	b.w	800d8a8 <ucdr_serialize_bool>
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop

0800d7d4 <_Bool__get_serialized_size>:
 800d7d4:	b130      	cbz	r0, 800d7e4 <_Bool__get_serialized_size+0x10>
 800d7d6:	b508      	push	{r3, lr}
 800d7d8:	2101      	movs	r1, #1
 800d7da:	2000      	movs	r0, #0
 800d7dc:	f001 f86e 	bl	800e8bc <ucdr_alignment>
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	bd08      	pop	{r3, pc}
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop

0800d7e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800d7e8:	4800      	ldr	r0, [pc, #0]	@ (800d7ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 800d7ea:	4770      	bx	lr
 800d7ec:	2000013c 	.word	0x2000013c

0800d7f0 <_Int8__max_serialized_size>:
 800d7f0:	b508      	push	{r3, lr}
 800d7f2:	2101      	movs	r1, #1
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	f001 f861 	bl	800e8bc <ucdr_alignment>
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	bd08      	pop	{r3, pc}
 800d7fe:	bf00      	nop

0800d800 <_Int8__cdr_deserialize>:
 800d800:	b109      	cbz	r1, 800d806 <_Int8__cdr_deserialize+0x6>
 800d802:	f000 bdd1 	b.w	800e3a8 <ucdr_deserialize_int8_t>
 800d806:	4608      	mov	r0, r1
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop

0800d80c <get_serialized_size_std_msgs__msg__Int8>:
 800d80c:	b138      	cbz	r0, 800d81e <get_serialized_size_std_msgs__msg__Int8+0x12>
 800d80e:	b508      	push	{r3, lr}
 800d810:	460b      	mov	r3, r1
 800d812:	4618      	mov	r0, r3
 800d814:	2101      	movs	r1, #1
 800d816:	f001 f851 	bl	800e8bc <ucdr_alignment>
 800d81a:	3001      	adds	r0, #1
 800d81c:	bd08      	pop	{r3, pc}
 800d81e:	4770      	bx	lr

0800d820 <_Int8__cdr_serialize>:
 800d820:	460a      	mov	r2, r1
 800d822:	b120      	cbz	r0, 800d82e <_Int8__cdr_serialize+0xe>
 800d824:	f990 1000 	ldrsb.w	r1, [r0]
 800d828:	4610      	mov	r0, r2
 800d82a:	f000 bda7 	b.w	800e37c <ucdr_serialize_int8_t>
 800d82e:	4770      	bx	lr

0800d830 <_Int8__get_serialized_size>:
 800d830:	b130      	cbz	r0, 800d840 <_Int8__get_serialized_size+0x10>
 800d832:	b508      	push	{r3, lr}
 800d834:	2101      	movs	r1, #1
 800d836:	2000      	movs	r0, #0
 800d838:	f001 f840 	bl	800e8bc <ucdr_alignment>
 800d83c:	3001      	adds	r0, #1
 800d83e:	bd08      	pop	{r3, pc}
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop

0800d844 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int8>:
 800d844:	4800      	ldr	r0, [pc, #0]	@ (800d848 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int8+0x4>)
 800d846:	4770      	bx	lr
 800d848:	20000164 	.word	0x20000164

0800d84c <_UInt16__max_serialized_size>:
 800d84c:	b508      	push	{r3, lr}
 800d84e:	2102      	movs	r1, #2
 800d850:	2000      	movs	r0, #0
 800d852:	f001 f833 	bl	800e8bc <ucdr_alignment>
 800d856:	3002      	adds	r0, #2
 800d858:	bd08      	pop	{r3, pc}
 800d85a:	bf00      	nop

0800d85c <_UInt16__cdr_deserialize>:
 800d85c:	b109      	cbz	r1, 800d862 <_UInt16__cdr_deserialize+0x6>
 800d85e:	f000 b97d 	b.w	800db5c <ucdr_deserialize_uint16_t>
 800d862:	4608      	mov	r0, r1
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop

0800d868 <get_serialized_size_std_msgs__msg__UInt16>:
 800d868:	b138      	cbz	r0, 800d87a <get_serialized_size_std_msgs__msg__UInt16+0x12>
 800d86a:	b508      	push	{r3, lr}
 800d86c:	460b      	mov	r3, r1
 800d86e:	4618      	mov	r0, r3
 800d870:	2102      	movs	r1, #2
 800d872:	f001 f823 	bl	800e8bc <ucdr_alignment>
 800d876:	3002      	adds	r0, #2
 800d878:	bd08      	pop	{r3, pc}
 800d87a:	4770      	bx	lr

0800d87c <_UInt16__cdr_serialize>:
 800d87c:	460a      	mov	r2, r1
 800d87e:	b118      	cbz	r0, 800d888 <_UInt16__cdr_serialize+0xc>
 800d880:	8801      	ldrh	r1, [r0, #0]
 800d882:	4610      	mov	r0, r2
 800d884:	f000 b86a 	b.w	800d95c <ucdr_serialize_uint16_t>
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop

0800d88c <_UInt16__get_serialized_size>:
 800d88c:	b130      	cbz	r0, 800d89c <_UInt16__get_serialized_size+0x10>
 800d88e:	b508      	push	{r3, lr}
 800d890:	2102      	movs	r1, #2
 800d892:	2000      	movs	r0, #0
 800d894:	f001 f812 	bl	800e8bc <ucdr_alignment>
 800d898:	3002      	adds	r0, #2
 800d89a:	bd08      	pop	{r3, pc}
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop

0800d8a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800d8a0:	4800      	ldr	r0, [pc, #0]	@ (800d8a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x4>)
 800d8a2:	4770      	bx	lr
 800d8a4:	2000018c 	.word	0x2000018c

0800d8a8 <ucdr_serialize_bool>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	460d      	mov	r5, r1
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	f000 ffb8 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800d8b4:	b148      	cbz	r0, 800d8ca <ucdr_serialize_bool+0x22>
 800d8b6:	68a3      	ldr	r3, [r4, #8]
 800d8b8:	701d      	strb	r5, [r3, #0]
 800d8ba:	68a2      	ldr	r2, [r4, #8]
 800d8bc:	6923      	ldr	r3, [r4, #16]
 800d8be:	2101      	movs	r1, #1
 800d8c0:	440a      	add	r2, r1
 800d8c2:	440b      	add	r3, r1
 800d8c4:	60a2      	str	r2, [r4, #8]
 800d8c6:	6123      	str	r3, [r4, #16]
 800d8c8:	7561      	strb	r1, [r4, #21]
 800d8ca:	7da0      	ldrb	r0, [r4, #22]
 800d8cc:	f080 0001 	eor.w	r0, r0, #1
 800d8d0:	bd38      	pop	{r3, r4, r5, pc}
 800d8d2:	bf00      	nop

0800d8d4 <ucdr_deserialize_bool>:
 800d8d4:	b538      	push	{r3, r4, r5, lr}
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	2101      	movs	r1, #1
 800d8da:	4604      	mov	r4, r0
 800d8dc:	f000 ffa2 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800d8e0:	b160      	cbz	r0, 800d8fc <ucdr_deserialize_bool+0x28>
 800d8e2:	68a2      	ldr	r2, [r4, #8]
 800d8e4:	6923      	ldr	r3, [r4, #16]
 800d8e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d8ea:	3900      	subs	r1, #0
 800d8ec:	bf18      	it	ne
 800d8ee:	2101      	movne	r1, #1
 800d8f0:	7029      	strb	r1, [r5, #0]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	2101      	movs	r1, #1
 800d8f6:	60a2      	str	r2, [r4, #8]
 800d8f8:	6123      	str	r3, [r4, #16]
 800d8fa:	7561      	strb	r1, [r4, #21]
 800d8fc:	7da0      	ldrb	r0, [r4, #22]
 800d8fe:	f080 0001 	eor.w	r0, r0, #1
 800d902:	bd38      	pop	{r3, r4, r5, pc}

0800d904 <ucdr_serialize_uint8_t>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	460d      	mov	r5, r1
 800d908:	2101      	movs	r1, #1
 800d90a:	4604      	mov	r4, r0
 800d90c:	f000 ff8a 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800d910:	b148      	cbz	r0, 800d926 <ucdr_serialize_uint8_t+0x22>
 800d912:	68a3      	ldr	r3, [r4, #8]
 800d914:	701d      	strb	r5, [r3, #0]
 800d916:	68a2      	ldr	r2, [r4, #8]
 800d918:	6923      	ldr	r3, [r4, #16]
 800d91a:	2101      	movs	r1, #1
 800d91c:	440a      	add	r2, r1
 800d91e:	440b      	add	r3, r1
 800d920:	60a2      	str	r2, [r4, #8]
 800d922:	6123      	str	r3, [r4, #16]
 800d924:	7561      	strb	r1, [r4, #21]
 800d926:	7da0      	ldrb	r0, [r4, #22]
 800d928:	f080 0001 	eor.w	r0, r0, #1
 800d92c:	bd38      	pop	{r3, r4, r5, pc}
 800d92e:	bf00      	nop

0800d930 <ucdr_deserialize_uint8_t>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	460d      	mov	r5, r1
 800d934:	2101      	movs	r1, #1
 800d936:	4604      	mov	r4, r0
 800d938:	f000 ff74 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800d93c:	b150      	cbz	r0, 800d954 <ucdr_deserialize_uint8_t+0x24>
 800d93e:	68a3      	ldr	r3, [r4, #8]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	702b      	strb	r3, [r5, #0]
 800d944:	68a2      	ldr	r2, [r4, #8]
 800d946:	6923      	ldr	r3, [r4, #16]
 800d948:	2101      	movs	r1, #1
 800d94a:	440a      	add	r2, r1
 800d94c:	440b      	add	r3, r1
 800d94e:	60a2      	str	r2, [r4, #8]
 800d950:	6123      	str	r3, [r4, #16]
 800d952:	7561      	strb	r1, [r4, #21]
 800d954:	7da0      	ldrb	r0, [r4, #22]
 800d956:	f080 0001 	eor.w	r0, r0, #1
 800d95a:	bd38      	pop	{r3, r4, r5, pc}

0800d95c <ucdr_serialize_uint16_t>:
 800d95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d960:	b082      	sub	sp, #8
 800d962:	460b      	mov	r3, r1
 800d964:	2102      	movs	r1, #2
 800d966:	4604      	mov	r4, r0
 800d968:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d96c:	f000 ffae 	bl	800e8cc <ucdr_buffer_alignment>
 800d970:	4601      	mov	r1, r0
 800d972:	4620      	mov	r0, r4
 800d974:	7d67      	ldrb	r7, [r4, #21]
 800d976:	f000 ffed 	bl	800e954 <ucdr_advance_buffer>
 800d97a:	2102      	movs	r1, #2
 800d97c:	4620      	mov	r0, r4
 800d97e:	f000 ff45 	bl	800e80c <ucdr_check_buffer_available_for>
 800d982:	bb78      	cbnz	r0, 800d9e4 <ucdr_serialize_uint16_t+0x88>
 800d984:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d988:	42ab      	cmp	r3, r5
 800d98a:	d926      	bls.n	800d9da <ucdr_serialize_uint16_t+0x7e>
 800d98c:	1b5e      	subs	r6, r3, r5
 800d98e:	60a3      	str	r3, [r4, #8]
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	f1c6 0802 	rsb	r8, r6, #2
 800d996:	4433      	add	r3, r6
 800d998:	6123      	str	r3, [r4, #16]
 800d99a:	4641      	mov	r1, r8
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 ff41 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d03b      	beq.n	800da1e <ucdr_serialize_uint16_t+0xc2>
 800d9a6:	7d23      	ldrb	r3, [r4, #20]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d04a      	beq.n	800da42 <ucdr_serialize_uint16_t+0xe6>
 800d9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9b0:	702b      	strb	r3, [r5, #0]
 800d9b2:	2e00      	cmp	r6, #0
 800d9b4:	d040      	beq.n	800da38 <ucdr_serialize_uint16_t+0xdc>
 800d9b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9ba:	706b      	strb	r3, [r5, #1]
 800d9bc:	6923      	ldr	r3, [r4, #16]
 800d9be:	68a2      	ldr	r2, [r4, #8]
 800d9c0:	7da0      	ldrb	r0, [r4, #22]
 800d9c2:	3302      	adds	r3, #2
 800d9c4:	1b9e      	subs	r6, r3, r6
 800d9c6:	4442      	add	r2, r8
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	f080 0001 	eor.w	r0, r0, #1
 800d9ce:	60a2      	str	r2, [r4, #8]
 800d9d0:	6126      	str	r6, [r4, #16]
 800d9d2:	7563      	strb	r3, [r4, #21]
 800d9d4:	b002      	add	sp, #8
 800d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9da:	2102      	movs	r1, #2
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 ff21 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800d9e2:	b190      	cbz	r0, 800da0a <ucdr_serialize_uint16_t+0xae>
 800d9e4:	7d23      	ldrb	r3, [r4, #20]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	68a3      	ldr	r3, [r4, #8]
 800d9ea:	d014      	beq.n	800da16 <ucdr_serialize_uint16_t+0xba>
 800d9ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9f8:	705a      	strb	r2, [r3, #1]
 800d9fa:	68a2      	ldr	r2, [r4, #8]
 800d9fc:	6923      	ldr	r3, [r4, #16]
 800d9fe:	3202      	adds	r2, #2
 800da00:	3302      	adds	r3, #2
 800da02:	2102      	movs	r1, #2
 800da04:	60a2      	str	r2, [r4, #8]
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	7561      	strb	r1, [r4, #21]
 800da0a:	7da0      	ldrb	r0, [r4, #22]
 800da0c:	f080 0001 	eor.w	r0, r0, #1
 800da10:	b002      	add	sp, #8
 800da12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800da1a:	801a      	strh	r2, [r3, #0]
 800da1c:	e7ed      	b.n	800d9fa <ucdr_serialize_uint16_t+0x9e>
 800da1e:	68a2      	ldr	r2, [r4, #8]
 800da20:	6923      	ldr	r3, [r4, #16]
 800da22:	7da0      	ldrb	r0, [r4, #22]
 800da24:	7567      	strb	r7, [r4, #21]
 800da26:	1b92      	subs	r2, r2, r6
 800da28:	1b9b      	subs	r3, r3, r6
 800da2a:	f080 0001 	eor.w	r0, r0, #1
 800da2e:	60a2      	str	r2, [r4, #8]
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	b002      	add	sp, #8
 800da34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da38:	68a3      	ldr	r3, [r4, #8]
 800da3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	e7bc      	b.n	800d9bc <ucdr_serialize_uint16_t+0x60>
 800da42:	4628      	mov	r0, r5
 800da44:	f10d 0506 	add.w	r5, sp, #6
 800da48:	4629      	mov	r1, r5
 800da4a:	4632      	mov	r2, r6
 800da4c:	f00a fad3 	bl	8017ff6 <memcpy>
 800da50:	68a0      	ldr	r0, [r4, #8]
 800da52:	4642      	mov	r2, r8
 800da54:	19a9      	adds	r1, r5, r6
 800da56:	f00a face 	bl	8017ff6 <memcpy>
 800da5a:	e7af      	b.n	800d9bc <ucdr_serialize_uint16_t+0x60>

0800da5c <ucdr_serialize_endian_uint16_t>:
 800da5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da60:	b083      	sub	sp, #12
 800da62:	460d      	mov	r5, r1
 800da64:	2102      	movs	r1, #2
 800da66:	4604      	mov	r4, r0
 800da68:	f8ad 2006 	strh.w	r2, [sp, #6]
 800da6c:	f000 ff2e 	bl	800e8cc <ucdr_buffer_alignment>
 800da70:	4601      	mov	r1, r0
 800da72:	4620      	mov	r0, r4
 800da74:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da78:	f000 ff6c 	bl	800e954 <ucdr_advance_buffer>
 800da7c:	2102      	movs	r1, #2
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 fec4 	bl	800e80c <ucdr_check_buffer_available_for>
 800da84:	bb70      	cbnz	r0, 800dae4 <ucdr_serialize_endian_uint16_t+0x88>
 800da86:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800da8a:	42be      	cmp	r6, r7
 800da8c:	d925      	bls.n	800dada <ucdr_serialize_endian_uint16_t+0x7e>
 800da8e:	6923      	ldr	r3, [r4, #16]
 800da90:	60a6      	str	r6, [r4, #8]
 800da92:	1bf6      	subs	r6, r6, r7
 800da94:	4433      	add	r3, r6
 800da96:	f1c6 0902 	rsb	r9, r6, #2
 800da9a:	6123      	str	r3, [r4, #16]
 800da9c:	4649      	mov	r1, r9
 800da9e:	4620      	mov	r0, r4
 800daa0:	f000 fec0 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d039      	beq.n	800db1c <ucdr_serialize_endian_uint16_t+0xc0>
 800daa8:	2d01      	cmp	r5, #1
 800daaa:	d04a      	beq.n	800db42 <ucdr_serialize_endian_uint16_t+0xe6>
 800daac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dab0:	703b      	strb	r3, [r7, #0]
 800dab2:	2e00      	cmp	r6, #0
 800dab4:	d040      	beq.n	800db38 <ucdr_serialize_endian_uint16_t+0xdc>
 800dab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800daba:	707b      	strb	r3, [r7, #1]
 800dabc:	6923      	ldr	r3, [r4, #16]
 800dabe:	68a2      	ldr	r2, [r4, #8]
 800dac0:	7da0      	ldrb	r0, [r4, #22]
 800dac2:	3302      	adds	r3, #2
 800dac4:	444a      	add	r2, r9
 800dac6:	1b9b      	subs	r3, r3, r6
 800dac8:	2102      	movs	r1, #2
 800daca:	f080 0001 	eor.w	r0, r0, #1
 800dace:	60a2      	str	r2, [r4, #8]
 800dad0:	6123      	str	r3, [r4, #16]
 800dad2:	7561      	strb	r1, [r4, #21]
 800dad4:	b003      	add	sp, #12
 800dad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dada:	2102      	movs	r1, #2
 800dadc:	4620      	mov	r0, r4
 800dade:	f000 fea1 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800dae2:	b188      	cbz	r0, 800db08 <ucdr_serialize_endian_uint16_t+0xac>
 800dae4:	2d01      	cmp	r5, #1
 800dae6:	68a3      	ldr	r3, [r4, #8]
 800dae8:	d014      	beq.n	800db14 <ucdr_serialize_endian_uint16_t+0xb8>
 800daea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800daee:	701a      	strb	r2, [r3, #0]
 800daf0:	68a3      	ldr	r3, [r4, #8]
 800daf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800daf6:	705a      	strb	r2, [r3, #1]
 800daf8:	68a2      	ldr	r2, [r4, #8]
 800dafa:	6923      	ldr	r3, [r4, #16]
 800dafc:	3202      	adds	r2, #2
 800dafe:	3302      	adds	r3, #2
 800db00:	2102      	movs	r1, #2
 800db02:	60a2      	str	r2, [r4, #8]
 800db04:	6123      	str	r3, [r4, #16]
 800db06:	7561      	strb	r1, [r4, #21]
 800db08:	7da0      	ldrb	r0, [r4, #22]
 800db0a:	f080 0001 	eor.w	r0, r0, #1
 800db0e:	b003      	add	sp, #12
 800db10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800db18:	801a      	strh	r2, [r3, #0]
 800db1a:	e7ed      	b.n	800daf8 <ucdr_serialize_endian_uint16_t+0x9c>
 800db1c:	68a2      	ldr	r2, [r4, #8]
 800db1e:	6923      	ldr	r3, [r4, #16]
 800db20:	7da0      	ldrb	r0, [r4, #22]
 800db22:	f884 8015 	strb.w	r8, [r4, #21]
 800db26:	1b92      	subs	r2, r2, r6
 800db28:	1b9b      	subs	r3, r3, r6
 800db2a:	f080 0001 	eor.w	r0, r0, #1
 800db2e:	60a2      	str	r2, [r4, #8]
 800db30:	6123      	str	r3, [r4, #16]
 800db32:	b003      	add	sp, #12
 800db34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db3e:	701a      	strb	r2, [r3, #0]
 800db40:	e7bc      	b.n	800dabc <ucdr_serialize_endian_uint16_t+0x60>
 800db42:	f10d 0506 	add.w	r5, sp, #6
 800db46:	4629      	mov	r1, r5
 800db48:	4632      	mov	r2, r6
 800db4a:	4638      	mov	r0, r7
 800db4c:	f00a fa53 	bl	8017ff6 <memcpy>
 800db50:	68a0      	ldr	r0, [r4, #8]
 800db52:	464a      	mov	r2, r9
 800db54:	19a9      	adds	r1, r5, r6
 800db56:	f00a fa4e 	bl	8017ff6 <memcpy>
 800db5a:	e7af      	b.n	800dabc <ucdr_serialize_endian_uint16_t+0x60>

0800db5c <ucdr_deserialize_uint16_t>:
 800db5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db60:	460d      	mov	r5, r1
 800db62:	2102      	movs	r1, #2
 800db64:	4604      	mov	r4, r0
 800db66:	f000 feb1 	bl	800e8cc <ucdr_buffer_alignment>
 800db6a:	4601      	mov	r1, r0
 800db6c:	4620      	mov	r0, r4
 800db6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db72:	f000 feef 	bl	800e954 <ucdr_advance_buffer>
 800db76:	2102      	movs	r1, #2
 800db78:	4620      	mov	r0, r4
 800db7a:	f000 fe47 	bl	800e80c <ucdr_check_buffer_available_for>
 800db7e:	bb60      	cbnz	r0, 800dbda <ucdr_deserialize_uint16_t+0x7e>
 800db80:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800db84:	42be      	cmp	r6, r7
 800db86:	d923      	bls.n	800dbd0 <ucdr_deserialize_uint16_t+0x74>
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	60a6      	str	r6, [r4, #8]
 800db8c:	1bf6      	subs	r6, r6, r7
 800db8e:	4433      	add	r3, r6
 800db90:	f1c6 0902 	rsb	r9, r6, #2
 800db94:	6123      	str	r3, [r4, #16]
 800db96:	4649      	mov	r1, r9
 800db98:	4620      	mov	r0, r4
 800db9a:	f000 fe43 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d034      	beq.n	800dc0c <ucdr_deserialize_uint16_t+0xb0>
 800dba2:	7d23      	ldrb	r3, [r4, #20]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d042      	beq.n	800dc2e <ucdr_deserialize_uint16_t+0xd2>
 800dba8:	787b      	ldrb	r3, [r7, #1]
 800dbaa:	702b      	strb	r3, [r5, #0]
 800dbac:	2e00      	cmp	r6, #0
 800dbae:	d03a      	beq.n	800dc26 <ucdr_deserialize_uint16_t+0xca>
 800dbb0:	783b      	ldrb	r3, [r7, #0]
 800dbb2:	706b      	strb	r3, [r5, #1]
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	68a2      	ldr	r2, [r4, #8]
 800dbb8:	7da0      	ldrb	r0, [r4, #22]
 800dbba:	2102      	movs	r1, #2
 800dbbc:	3302      	adds	r3, #2
 800dbbe:	444a      	add	r2, r9
 800dbc0:	1b9b      	subs	r3, r3, r6
 800dbc2:	7561      	strb	r1, [r4, #21]
 800dbc4:	60a2      	str	r2, [r4, #8]
 800dbc6:	6123      	str	r3, [r4, #16]
 800dbc8:	f080 0001 	eor.w	r0, r0, #1
 800dbcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbd0:	2102      	movs	r1, #2
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fe26 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800dbd8:	b180      	cbz	r0, 800dbfc <ucdr_deserialize_uint16_t+0xa0>
 800dbda:	7d23      	ldrb	r3, [r4, #20]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	d011      	beq.n	800dc06 <ucdr_deserialize_uint16_t+0xaa>
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	702b      	strb	r3, [r5, #0]
 800dbe6:	68a3      	ldr	r3, [r4, #8]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	706b      	strb	r3, [r5, #1]
 800dbec:	68a2      	ldr	r2, [r4, #8]
 800dbee:	6923      	ldr	r3, [r4, #16]
 800dbf0:	3202      	adds	r2, #2
 800dbf2:	3302      	adds	r3, #2
 800dbf4:	2102      	movs	r1, #2
 800dbf6:	60a2      	str	r2, [r4, #8]
 800dbf8:	6123      	str	r3, [r4, #16]
 800dbfa:	7561      	strb	r1, [r4, #21]
 800dbfc:	7da0      	ldrb	r0, [r4, #22]
 800dbfe:	f080 0001 	eor.w	r0, r0, #1
 800dc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	802b      	strh	r3, [r5, #0]
 800dc0a:	e7ef      	b.n	800dbec <ucdr_deserialize_uint16_t+0x90>
 800dc0c:	68a2      	ldr	r2, [r4, #8]
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	7da0      	ldrb	r0, [r4, #22]
 800dc12:	f884 8015 	strb.w	r8, [r4, #21]
 800dc16:	1b92      	subs	r2, r2, r6
 800dc18:	1b9b      	subs	r3, r3, r6
 800dc1a:	60a2      	str	r2, [r4, #8]
 800dc1c:	6123      	str	r3, [r4, #16]
 800dc1e:	f080 0001 	eor.w	r0, r0, #1
 800dc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc26:	68a3      	ldr	r3, [r4, #8]
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	706b      	strb	r3, [r5, #1]
 800dc2c:	e7c2      	b.n	800dbb4 <ucdr_deserialize_uint16_t+0x58>
 800dc2e:	4639      	mov	r1, r7
 800dc30:	4632      	mov	r2, r6
 800dc32:	4628      	mov	r0, r5
 800dc34:	f00a f9df 	bl	8017ff6 <memcpy>
 800dc38:	68a1      	ldr	r1, [r4, #8]
 800dc3a:	464a      	mov	r2, r9
 800dc3c:	19a8      	adds	r0, r5, r6
 800dc3e:	f00a f9da 	bl	8017ff6 <memcpy>
 800dc42:	e7b7      	b.n	800dbb4 <ucdr_deserialize_uint16_t+0x58>

0800dc44 <ucdr_deserialize_endian_uint16_t>:
 800dc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc48:	460e      	mov	r6, r1
 800dc4a:	2102      	movs	r1, #2
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	4615      	mov	r5, r2
 800dc50:	f000 fe3c 	bl	800e8cc <ucdr_buffer_alignment>
 800dc54:	4601      	mov	r1, r0
 800dc56:	4620      	mov	r0, r4
 800dc58:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dc5c:	f000 fe7a 	bl	800e954 <ucdr_advance_buffer>
 800dc60:	2102      	movs	r1, #2
 800dc62:	4620      	mov	r0, r4
 800dc64:	f000 fdd2 	bl	800e80c <ucdr_check_buffer_available_for>
 800dc68:	bb70      	cbnz	r0, 800dcc8 <ucdr_deserialize_endian_uint16_t+0x84>
 800dc6a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800dc6e:	4547      	cmp	r7, r8
 800dc70:	d925      	bls.n	800dcbe <ucdr_deserialize_endian_uint16_t+0x7a>
 800dc72:	6923      	ldr	r3, [r4, #16]
 800dc74:	60a7      	str	r7, [r4, #8]
 800dc76:	eba7 0708 	sub.w	r7, r7, r8
 800dc7a:	443b      	add	r3, r7
 800dc7c:	f1c7 0a02 	rsb	sl, r7, #2
 800dc80:	6123      	str	r3, [r4, #16]
 800dc82:	4651      	mov	r1, sl
 800dc84:	4620      	mov	r0, r4
 800dc86:	f000 fdcd 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d034      	beq.n	800dcf8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800dc8e:	2e01      	cmp	r6, #1
 800dc90:	d043      	beq.n	800dd1a <ucdr_deserialize_endian_uint16_t+0xd6>
 800dc92:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dc96:	702b      	strb	r3, [r5, #0]
 800dc98:	2f00      	cmp	r7, #0
 800dc9a:	d03a      	beq.n	800dd12 <ucdr_deserialize_endian_uint16_t+0xce>
 800dc9c:	f898 3000 	ldrb.w	r3, [r8]
 800dca0:	706b      	strb	r3, [r5, #1]
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	68a2      	ldr	r2, [r4, #8]
 800dca6:	7da0      	ldrb	r0, [r4, #22]
 800dca8:	2102      	movs	r1, #2
 800dcaa:	3302      	adds	r3, #2
 800dcac:	4452      	add	r2, sl
 800dcae:	1bdb      	subs	r3, r3, r7
 800dcb0:	7561      	strb	r1, [r4, #21]
 800dcb2:	60a2      	str	r2, [r4, #8]
 800dcb4:	6123      	str	r3, [r4, #16]
 800dcb6:	f080 0001 	eor.w	r0, r0, #1
 800dcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcbe:	2102      	movs	r1, #2
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f000 fdaf 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800dcc6:	b178      	cbz	r0, 800dce8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800dcc8:	2e01      	cmp	r6, #1
 800dcca:	68a3      	ldr	r3, [r4, #8]
 800dccc:	d011      	beq.n	800dcf2 <ucdr_deserialize_endian_uint16_t+0xae>
 800dcce:	785b      	ldrb	r3, [r3, #1]
 800dcd0:	702b      	strb	r3, [r5, #0]
 800dcd2:	68a3      	ldr	r3, [r4, #8]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	706b      	strb	r3, [r5, #1]
 800dcd8:	68a2      	ldr	r2, [r4, #8]
 800dcda:	6923      	ldr	r3, [r4, #16]
 800dcdc:	3202      	adds	r2, #2
 800dcde:	3302      	adds	r3, #2
 800dce0:	2102      	movs	r1, #2
 800dce2:	60a2      	str	r2, [r4, #8]
 800dce4:	6123      	str	r3, [r4, #16]
 800dce6:	7561      	strb	r1, [r4, #21]
 800dce8:	7da0      	ldrb	r0, [r4, #22]
 800dcea:	f080 0001 	eor.w	r0, r0, #1
 800dcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf2:	881b      	ldrh	r3, [r3, #0]
 800dcf4:	802b      	strh	r3, [r5, #0]
 800dcf6:	e7ef      	b.n	800dcd8 <ucdr_deserialize_endian_uint16_t+0x94>
 800dcf8:	68a2      	ldr	r2, [r4, #8]
 800dcfa:	6923      	ldr	r3, [r4, #16]
 800dcfc:	7da0      	ldrb	r0, [r4, #22]
 800dcfe:	f884 9015 	strb.w	r9, [r4, #21]
 800dd02:	1bd2      	subs	r2, r2, r7
 800dd04:	1bdb      	subs	r3, r3, r7
 800dd06:	60a2      	str	r2, [r4, #8]
 800dd08:	6123      	str	r3, [r4, #16]
 800dd0a:	f080 0001 	eor.w	r0, r0, #1
 800dd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd12:	68a3      	ldr	r3, [r4, #8]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	706b      	strb	r3, [r5, #1]
 800dd18:	e7c3      	b.n	800dca2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800dd1a:	4641      	mov	r1, r8
 800dd1c:	463a      	mov	r2, r7
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f00a f969 	bl	8017ff6 <memcpy>
 800dd24:	68a1      	ldr	r1, [r4, #8]
 800dd26:	4652      	mov	r2, sl
 800dd28:	19e8      	adds	r0, r5, r7
 800dd2a:	f00a f964 	bl	8017ff6 <memcpy>
 800dd2e:	e7b8      	b.n	800dca2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800dd30 <ucdr_serialize_uint32_t>:
 800dd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd34:	b082      	sub	sp, #8
 800dd36:	4604      	mov	r4, r0
 800dd38:	9101      	str	r1, [sp, #4]
 800dd3a:	2104      	movs	r1, #4
 800dd3c:	f000 fdc6 	bl	800e8cc <ucdr_buffer_alignment>
 800dd40:	4601      	mov	r1, r0
 800dd42:	4620      	mov	r0, r4
 800dd44:	7d67      	ldrb	r7, [r4, #21]
 800dd46:	f000 fe05 	bl	800e954 <ucdr_advance_buffer>
 800dd4a:	2104      	movs	r1, #4
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 fd5d 	bl	800e80c <ucdr_check_buffer_available_for>
 800dd52:	2800      	cmp	r0, #0
 800dd54:	d139      	bne.n	800ddca <ucdr_serialize_uint32_t+0x9a>
 800dd56:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dd5a:	42ab      	cmp	r3, r5
 800dd5c:	d930      	bls.n	800ddc0 <ucdr_serialize_uint32_t+0x90>
 800dd5e:	1b5e      	subs	r6, r3, r5
 800dd60:	60a3      	str	r3, [r4, #8]
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	f1c6 0804 	rsb	r8, r6, #4
 800dd68:	4433      	add	r3, r6
 800dd6a:	6123      	str	r3, [r4, #16]
 800dd6c:	4641      	mov	r1, r8
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f000 fd58 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d04c      	beq.n	800de12 <ucdr_serialize_uint32_t+0xe2>
 800dd78:	7d23      	ldrb	r3, [r4, #20]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d063      	beq.n	800de46 <ucdr_serialize_uint32_t+0x116>
 800dd7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd82:	702b      	strb	r3, [r5, #0]
 800dd84:	2e00      	cmp	r6, #0
 800dd86:	d051      	beq.n	800de2c <ucdr_serialize_uint32_t+0xfc>
 800dd88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd8c:	706b      	strb	r3, [r5, #1]
 800dd8e:	2e01      	cmp	r6, #1
 800dd90:	d050      	beq.n	800de34 <ucdr_serialize_uint32_t+0x104>
 800dd92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dd96:	70ab      	strb	r3, [r5, #2]
 800dd98:	2e02      	cmp	r6, #2
 800dd9a:	d04f      	beq.n	800de3c <ucdr_serialize_uint32_t+0x10c>
 800dd9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dda0:	70eb      	strb	r3, [r5, #3]
 800dda2:	6923      	ldr	r3, [r4, #16]
 800dda4:	68a2      	ldr	r2, [r4, #8]
 800dda6:	7da0      	ldrb	r0, [r4, #22]
 800dda8:	3304      	adds	r3, #4
 800ddaa:	1b9e      	subs	r6, r3, r6
 800ddac:	4442      	add	r2, r8
 800ddae:	2304      	movs	r3, #4
 800ddb0:	f080 0001 	eor.w	r0, r0, #1
 800ddb4:	60a2      	str	r2, [r4, #8]
 800ddb6:	6126      	str	r6, [r4, #16]
 800ddb8:	7563      	strb	r3, [r4, #21]
 800ddba:	b002      	add	sp, #8
 800ddbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc0:	2104      	movs	r1, #4
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f000 fd2e 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800ddc8:	b1d0      	cbz	r0, 800de00 <ucdr_serialize_uint32_t+0xd0>
 800ddca:	7d23      	ldrb	r3, [r4, #20]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	68a3      	ldr	r3, [r4, #8]
 800ddd0:	d01c      	beq.n	800de0c <ucdr_serialize_uint32_t+0xdc>
 800ddd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ddd6:	701a      	strb	r2, [r3, #0]
 800ddd8:	68a3      	ldr	r3, [r4, #8]
 800ddda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddde:	705a      	strb	r2, [r3, #1]
 800dde0:	68a3      	ldr	r3, [r4, #8]
 800dde2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dde6:	709a      	strb	r2, [r3, #2]
 800dde8:	68a3      	ldr	r3, [r4, #8]
 800ddea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddee:	70da      	strb	r2, [r3, #3]
 800ddf0:	68a2      	ldr	r2, [r4, #8]
 800ddf2:	6923      	ldr	r3, [r4, #16]
 800ddf4:	3204      	adds	r2, #4
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	2104      	movs	r1, #4
 800ddfa:	60a2      	str	r2, [r4, #8]
 800ddfc:	6123      	str	r3, [r4, #16]
 800ddfe:	7561      	strb	r1, [r4, #21]
 800de00:	7da0      	ldrb	r0, [r4, #22]
 800de02:	f080 0001 	eor.w	r0, r0, #1
 800de06:	b002      	add	sp, #8
 800de08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de0c:	9a01      	ldr	r2, [sp, #4]
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	e7ee      	b.n	800ddf0 <ucdr_serialize_uint32_t+0xc0>
 800de12:	68a2      	ldr	r2, [r4, #8]
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	7da0      	ldrb	r0, [r4, #22]
 800de18:	7567      	strb	r7, [r4, #21]
 800de1a:	1b92      	subs	r2, r2, r6
 800de1c:	1b9b      	subs	r3, r3, r6
 800de1e:	f080 0001 	eor.w	r0, r0, #1
 800de22:	60a2      	str	r2, [r4, #8]
 800de24:	6123      	str	r3, [r4, #16]
 800de26:	b002      	add	sp, #8
 800de28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de2c:	68a3      	ldr	r3, [r4, #8]
 800de2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de32:	701a      	strb	r2, [r3, #0]
 800de34:	68a3      	ldr	r3, [r4, #8]
 800de36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800de3a:	701a      	strb	r2, [r3, #0]
 800de3c:	68a3      	ldr	r3, [r4, #8]
 800de3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800de42:	701a      	strb	r2, [r3, #0]
 800de44:	e7ad      	b.n	800dda2 <ucdr_serialize_uint32_t+0x72>
 800de46:	4628      	mov	r0, r5
 800de48:	ad01      	add	r5, sp, #4
 800de4a:	4629      	mov	r1, r5
 800de4c:	4632      	mov	r2, r6
 800de4e:	f00a f8d2 	bl	8017ff6 <memcpy>
 800de52:	68a0      	ldr	r0, [r4, #8]
 800de54:	4642      	mov	r2, r8
 800de56:	19a9      	adds	r1, r5, r6
 800de58:	f00a f8cd 	bl	8017ff6 <memcpy>
 800de5c:	e7a1      	b.n	800dda2 <ucdr_serialize_uint32_t+0x72>
 800de5e:	bf00      	nop

0800de60 <ucdr_serialize_endian_uint32_t>:
 800de60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de64:	b083      	sub	sp, #12
 800de66:	460d      	mov	r5, r1
 800de68:	2104      	movs	r1, #4
 800de6a:	4604      	mov	r4, r0
 800de6c:	9201      	str	r2, [sp, #4]
 800de6e:	f000 fd2d 	bl	800e8cc <ucdr_buffer_alignment>
 800de72:	4601      	mov	r1, r0
 800de74:	4620      	mov	r0, r4
 800de76:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de7a:	f000 fd6b 	bl	800e954 <ucdr_advance_buffer>
 800de7e:	2104      	movs	r1, #4
 800de80:	4620      	mov	r0, r4
 800de82:	f000 fcc3 	bl	800e80c <ucdr_check_buffer_available_for>
 800de86:	2800      	cmp	r0, #0
 800de88:	d138      	bne.n	800defc <ucdr_serialize_endian_uint32_t+0x9c>
 800de8a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800de8e:	42b7      	cmp	r7, r6
 800de90:	d92f      	bls.n	800def2 <ucdr_serialize_endian_uint32_t+0x92>
 800de92:	6923      	ldr	r3, [r4, #16]
 800de94:	60a7      	str	r7, [r4, #8]
 800de96:	1bbf      	subs	r7, r7, r6
 800de98:	443b      	add	r3, r7
 800de9a:	f1c7 0904 	rsb	r9, r7, #4
 800de9e:	6123      	str	r3, [r4, #16]
 800dea0:	4649      	mov	r1, r9
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 fcbe 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d04a      	beq.n	800df42 <ucdr_serialize_endian_uint32_t+0xe2>
 800deac:	2d01      	cmp	r5, #1
 800deae:	d063      	beq.n	800df78 <ucdr_serialize_endian_uint32_t+0x118>
 800deb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800deb4:	7033      	strb	r3, [r6, #0]
 800deb6:	2f00      	cmp	r7, #0
 800deb8:	d051      	beq.n	800df5e <ucdr_serialize_endian_uint32_t+0xfe>
 800deba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800debe:	7073      	strb	r3, [r6, #1]
 800dec0:	2f01      	cmp	r7, #1
 800dec2:	d050      	beq.n	800df66 <ucdr_serialize_endian_uint32_t+0x106>
 800dec4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dec8:	70b3      	strb	r3, [r6, #2]
 800deca:	2f02      	cmp	r7, #2
 800decc:	d04f      	beq.n	800df6e <ucdr_serialize_endian_uint32_t+0x10e>
 800dece:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ded2:	70f3      	strb	r3, [r6, #3]
 800ded4:	6923      	ldr	r3, [r4, #16]
 800ded6:	68a2      	ldr	r2, [r4, #8]
 800ded8:	7da0      	ldrb	r0, [r4, #22]
 800deda:	3304      	adds	r3, #4
 800dedc:	444a      	add	r2, r9
 800dede:	1bdb      	subs	r3, r3, r7
 800dee0:	2104      	movs	r1, #4
 800dee2:	f080 0001 	eor.w	r0, r0, #1
 800dee6:	60a2      	str	r2, [r4, #8]
 800dee8:	6123      	str	r3, [r4, #16]
 800deea:	7561      	strb	r1, [r4, #21]
 800deec:	b003      	add	sp, #12
 800deee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800def2:	2104      	movs	r1, #4
 800def4:	4620      	mov	r0, r4
 800def6:	f000 fc95 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800defa:	b1c8      	cbz	r0, 800df30 <ucdr_serialize_endian_uint32_t+0xd0>
 800defc:	2d01      	cmp	r5, #1
 800defe:	68a3      	ldr	r3, [r4, #8]
 800df00:	d01c      	beq.n	800df3c <ucdr_serialize_endian_uint32_t+0xdc>
 800df02:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800df06:	701a      	strb	r2, [r3, #0]
 800df08:	68a3      	ldr	r3, [r4, #8]
 800df0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df0e:	705a      	strb	r2, [r3, #1]
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df16:	709a      	strb	r2, [r3, #2]
 800df18:	68a3      	ldr	r3, [r4, #8]
 800df1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df1e:	70da      	strb	r2, [r3, #3]
 800df20:	68a2      	ldr	r2, [r4, #8]
 800df22:	6923      	ldr	r3, [r4, #16]
 800df24:	3204      	adds	r2, #4
 800df26:	3304      	adds	r3, #4
 800df28:	2104      	movs	r1, #4
 800df2a:	60a2      	str	r2, [r4, #8]
 800df2c:	6123      	str	r3, [r4, #16]
 800df2e:	7561      	strb	r1, [r4, #21]
 800df30:	7da0      	ldrb	r0, [r4, #22]
 800df32:	f080 0001 	eor.w	r0, r0, #1
 800df36:	b003      	add	sp, #12
 800df38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df3c:	9a01      	ldr	r2, [sp, #4]
 800df3e:	601a      	str	r2, [r3, #0]
 800df40:	e7ee      	b.n	800df20 <ucdr_serialize_endian_uint32_t+0xc0>
 800df42:	68a2      	ldr	r2, [r4, #8]
 800df44:	6923      	ldr	r3, [r4, #16]
 800df46:	7da0      	ldrb	r0, [r4, #22]
 800df48:	f884 8015 	strb.w	r8, [r4, #21]
 800df4c:	1bd2      	subs	r2, r2, r7
 800df4e:	1bdb      	subs	r3, r3, r7
 800df50:	f080 0001 	eor.w	r0, r0, #1
 800df54:	60a2      	str	r2, [r4, #8]
 800df56:	6123      	str	r3, [r4, #16]
 800df58:	b003      	add	sp, #12
 800df5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df5e:	68a3      	ldr	r3, [r4, #8]
 800df60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	68a3      	ldr	r3, [r4, #8]
 800df68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df6c:	701a      	strb	r2, [r3, #0]
 800df6e:	68a3      	ldr	r3, [r4, #8]
 800df70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e7ad      	b.n	800ded4 <ucdr_serialize_endian_uint32_t+0x74>
 800df78:	ad01      	add	r5, sp, #4
 800df7a:	4629      	mov	r1, r5
 800df7c:	463a      	mov	r2, r7
 800df7e:	4630      	mov	r0, r6
 800df80:	f00a f839 	bl	8017ff6 <memcpy>
 800df84:	68a0      	ldr	r0, [r4, #8]
 800df86:	464a      	mov	r2, r9
 800df88:	19e9      	adds	r1, r5, r7
 800df8a:	f00a f834 	bl	8017ff6 <memcpy>
 800df8e:	e7a1      	b.n	800ded4 <ucdr_serialize_endian_uint32_t+0x74>

0800df90 <ucdr_deserialize_uint32_t>:
 800df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df94:	460d      	mov	r5, r1
 800df96:	2104      	movs	r1, #4
 800df98:	4604      	mov	r4, r0
 800df9a:	f000 fc97 	bl	800e8cc <ucdr_buffer_alignment>
 800df9e:	4601      	mov	r1, r0
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dfa6:	f000 fcd5 	bl	800e954 <ucdr_advance_buffer>
 800dfaa:	2104      	movs	r1, #4
 800dfac:	4620      	mov	r0, r4
 800dfae:	f000 fc2d 	bl	800e80c <ucdr_check_buffer_available_for>
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	d138      	bne.n	800e028 <ucdr_deserialize_uint32_t+0x98>
 800dfb6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dfba:	42b7      	cmp	r7, r6
 800dfbc:	d92f      	bls.n	800e01e <ucdr_deserialize_uint32_t+0x8e>
 800dfbe:	6923      	ldr	r3, [r4, #16]
 800dfc0:	60a7      	str	r7, [r4, #8]
 800dfc2:	1bbf      	subs	r7, r7, r6
 800dfc4:	443b      	add	r3, r7
 800dfc6:	f1c7 0904 	rsb	r9, r7, #4
 800dfca:	6123      	str	r3, [r4, #16]
 800dfcc:	4649      	mov	r1, r9
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 fc28 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d046      	beq.n	800e066 <ucdr_deserialize_uint32_t+0xd6>
 800dfd8:	7d23      	ldrb	r3, [r4, #20]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d05c      	beq.n	800e098 <ucdr_deserialize_uint32_t+0x108>
 800dfde:	78f3      	ldrb	r3, [r6, #3]
 800dfe0:	702b      	strb	r3, [r5, #0]
 800dfe2:	2f00      	cmp	r7, #0
 800dfe4:	d04c      	beq.n	800e080 <ucdr_deserialize_uint32_t+0xf0>
 800dfe6:	78b3      	ldrb	r3, [r6, #2]
 800dfe8:	706b      	strb	r3, [r5, #1]
 800dfea:	2f01      	cmp	r7, #1
 800dfec:	f105 0302 	add.w	r3, r5, #2
 800dff0:	d04a      	beq.n	800e088 <ucdr_deserialize_uint32_t+0xf8>
 800dff2:	7873      	ldrb	r3, [r6, #1]
 800dff4:	70ab      	strb	r3, [r5, #2]
 800dff6:	2f02      	cmp	r7, #2
 800dff8:	f105 0303 	add.w	r3, r5, #3
 800dffc:	d048      	beq.n	800e090 <ucdr_deserialize_uint32_t+0x100>
 800dffe:	7833      	ldrb	r3, [r6, #0]
 800e000:	70eb      	strb	r3, [r5, #3]
 800e002:	6923      	ldr	r3, [r4, #16]
 800e004:	68a2      	ldr	r2, [r4, #8]
 800e006:	7da0      	ldrb	r0, [r4, #22]
 800e008:	2104      	movs	r1, #4
 800e00a:	3304      	adds	r3, #4
 800e00c:	444a      	add	r2, r9
 800e00e:	1bdb      	subs	r3, r3, r7
 800e010:	7561      	strb	r1, [r4, #21]
 800e012:	60a2      	str	r2, [r4, #8]
 800e014:	6123      	str	r3, [r4, #16]
 800e016:	f080 0001 	eor.w	r0, r0, #1
 800e01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e01e:	2104      	movs	r1, #4
 800e020:	4620      	mov	r0, r4
 800e022:	f000 fbff 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e026:	b1b0      	cbz	r0, 800e056 <ucdr_deserialize_uint32_t+0xc6>
 800e028:	7d23      	ldrb	r3, [r4, #20]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	68a3      	ldr	r3, [r4, #8]
 800e02e:	d017      	beq.n	800e060 <ucdr_deserialize_uint32_t+0xd0>
 800e030:	78db      	ldrb	r3, [r3, #3]
 800e032:	702b      	strb	r3, [r5, #0]
 800e034:	68a3      	ldr	r3, [r4, #8]
 800e036:	789b      	ldrb	r3, [r3, #2]
 800e038:	706b      	strb	r3, [r5, #1]
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	785b      	ldrb	r3, [r3, #1]
 800e03e:	70ab      	strb	r3, [r5, #2]
 800e040:	68a3      	ldr	r3, [r4, #8]
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	70eb      	strb	r3, [r5, #3]
 800e046:	68a2      	ldr	r2, [r4, #8]
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	3204      	adds	r2, #4
 800e04c:	3304      	adds	r3, #4
 800e04e:	2104      	movs	r1, #4
 800e050:	60a2      	str	r2, [r4, #8]
 800e052:	6123      	str	r3, [r4, #16]
 800e054:	7561      	strb	r1, [r4, #21]
 800e056:	7da0      	ldrb	r0, [r4, #22]
 800e058:	f080 0001 	eor.w	r0, r0, #1
 800e05c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	602b      	str	r3, [r5, #0]
 800e064:	e7ef      	b.n	800e046 <ucdr_deserialize_uint32_t+0xb6>
 800e066:	68a2      	ldr	r2, [r4, #8]
 800e068:	6923      	ldr	r3, [r4, #16]
 800e06a:	7da0      	ldrb	r0, [r4, #22]
 800e06c:	f884 8015 	strb.w	r8, [r4, #21]
 800e070:	1bd2      	subs	r2, r2, r7
 800e072:	1bdb      	subs	r3, r3, r7
 800e074:	60a2      	str	r2, [r4, #8]
 800e076:	6123      	str	r3, [r4, #16]
 800e078:	f080 0001 	eor.w	r0, r0, #1
 800e07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e080:	68a3      	ldr	r3, [r4, #8]
 800e082:	789b      	ldrb	r3, [r3, #2]
 800e084:	706b      	strb	r3, [r5, #1]
 800e086:	1cab      	adds	r3, r5, #2
 800e088:	68a2      	ldr	r2, [r4, #8]
 800e08a:	7852      	ldrb	r2, [r2, #1]
 800e08c:	f803 2b01 	strb.w	r2, [r3], #1
 800e090:	68a2      	ldr	r2, [r4, #8]
 800e092:	7812      	ldrb	r2, [r2, #0]
 800e094:	701a      	strb	r2, [r3, #0]
 800e096:	e7b4      	b.n	800e002 <ucdr_deserialize_uint32_t+0x72>
 800e098:	4631      	mov	r1, r6
 800e09a:	463a      	mov	r2, r7
 800e09c:	4628      	mov	r0, r5
 800e09e:	f009 ffaa 	bl	8017ff6 <memcpy>
 800e0a2:	68a1      	ldr	r1, [r4, #8]
 800e0a4:	464a      	mov	r2, r9
 800e0a6:	19e8      	adds	r0, r5, r7
 800e0a8:	f009 ffa5 	bl	8017ff6 <memcpy>
 800e0ac:	e7a9      	b.n	800e002 <ucdr_deserialize_uint32_t+0x72>
 800e0ae:	bf00      	nop

0800e0b0 <ucdr_deserialize_endian_uint32_t>:
 800e0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b4:	460e      	mov	r6, r1
 800e0b6:	2104      	movs	r1, #4
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	4615      	mov	r5, r2
 800e0bc:	f000 fc06 	bl	800e8cc <ucdr_buffer_alignment>
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e0c8:	f000 fc44 	bl	800e954 <ucdr_advance_buffer>
 800e0cc:	2104      	movs	r1, #4
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 fb9c 	bl	800e80c <ucdr_check_buffer_available_for>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d13c      	bne.n	800e152 <ucdr_deserialize_endian_uint32_t+0xa2>
 800e0d8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e0dc:	42bb      	cmp	r3, r7
 800e0de:	d933      	bls.n	800e148 <ucdr_deserialize_endian_uint32_t+0x98>
 800e0e0:	eba3 0807 	sub.w	r8, r3, r7
 800e0e4:	60a3      	str	r3, [r4, #8]
 800e0e6:	6923      	ldr	r3, [r4, #16]
 800e0e8:	f1c8 0a04 	rsb	sl, r8, #4
 800e0ec:	4443      	add	r3, r8
 800e0ee:	6123      	str	r3, [r4, #16]
 800e0f0:	4651      	mov	r1, sl
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f000 fb96 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d048      	beq.n	800e18e <ucdr_deserialize_endian_uint32_t+0xde>
 800e0fc:	2e01      	cmp	r6, #1
 800e0fe:	d061      	beq.n	800e1c4 <ucdr_deserialize_endian_uint32_t+0x114>
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	702b      	strb	r3, [r5, #0]
 800e104:	f1b8 0f00 	cmp.w	r8, #0
 800e108:	d050      	beq.n	800e1ac <ucdr_deserialize_endian_uint32_t+0xfc>
 800e10a:	78bb      	ldrb	r3, [r7, #2]
 800e10c:	706b      	strb	r3, [r5, #1]
 800e10e:	f1b8 0f01 	cmp.w	r8, #1
 800e112:	f105 0302 	add.w	r3, r5, #2
 800e116:	d04d      	beq.n	800e1b4 <ucdr_deserialize_endian_uint32_t+0x104>
 800e118:	787b      	ldrb	r3, [r7, #1]
 800e11a:	70ab      	strb	r3, [r5, #2]
 800e11c:	f1b8 0f02 	cmp.w	r8, #2
 800e120:	f105 0303 	add.w	r3, r5, #3
 800e124:	d04a      	beq.n	800e1bc <ucdr_deserialize_endian_uint32_t+0x10c>
 800e126:	783b      	ldrb	r3, [r7, #0]
 800e128:	70eb      	strb	r3, [r5, #3]
 800e12a:	6923      	ldr	r3, [r4, #16]
 800e12c:	68a2      	ldr	r2, [r4, #8]
 800e12e:	7da0      	ldrb	r0, [r4, #22]
 800e130:	2104      	movs	r1, #4
 800e132:	3304      	adds	r3, #4
 800e134:	4452      	add	r2, sl
 800e136:	eba3 0308 	sub.w	r3, r3, r8
 800e13a:	7561      	strb	r1, [r4, #21]
 800e13c:	60a2      	str	r2, [r4, #8]
 800e13e:	6123      	str	r3, [r4, #16]
 800e140:	f080 0001 	eor.w	r0, r0, #1
 800e144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e148:	2104      	movs	r1, #4
 800e14a:	4620      	mov	r0, r4
 800e14c:	f000 fb6a 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e150:	b1a8      	cbz	r0, 800e17e <ucdr_deserialize_endian_uint32_t+0xce>
 800e152:	2e01      	cmp	r6, #1
 800e154:	68a3      	ldr	r3, [r4, #8]
 800e156:	d017      	beq.n	800e188 <ucdr_deserialize_endian_uint32_t+0xd8>
 800e158:	78db      	ldrb	r3, [r3, #3]
 800e15a:	702b      	strb	r3, [r5, #0]
 800e15c:	68a3      	ldr	r3, [r4, #8]
 800e15e:	789b      	ldrb	r3, [r3, #2]
 800e160:	706b      	strb	r3, [r5, #1]
 800e162:	68a3      	ldr	r3, [r4, #8]
 800e164:	785b      	ldrb	r3, [r3, #1]
 800e166:	70ab      	strb	r3, [r5, #2]
 800e168:	68a3      	ldr	r3, [r4, #8]
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	70eb      	strb	r3, [r5, #3]
 800e16e:	68a2      	ldr	r2, [r4, #8]
 800e170:	6923      	ldr	r3, [r4, #16]
 800e172:	3204      	adds	r2, #4
 800e174:	3304      	adds	r3, #4
 800e176:	2104      	movs	r1, #4
 800e178:	60a2      	str	r2, [r4, #8]
 800e17a:	6123      	str	r3, [r4, #16]
 800e17c:	7561      	strb	r1, [r4, #21]
 800e17e:	7da0      	ldrb	r0, [r4, #22]
 800e180:	f080 0001 	eor.w	r0, r0, #1
 800e184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	602b      	str	r3, [r5, #0]
 800e18c:	e7ef      	b.n	800e16e <ucdr_deserialize_endian_uint32_t+0xbe>
 800e18e:	68a2      	ldr	r2, [r4, #8]
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	7da0      	ldrb	r0, [r4, #22]
 800e194:	f884 9015 	strb.w	r9, [r4, #21]
 800e198:	eba2 0208 	sub.w	r2, r2, r8
 800e19c:	eba3 0308 	sub.w	r3, r3, r8
 800e1a0:	60a2      	str	r2, [r4, #8]
 800e1a2:	6123      	str	r3, [r4, #16]
 800e1a4:	f080 0001 	eor.w	r0, r0, #1
 800e1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ac:	68a3      	ldr	r3, [r4, #8]
 800e1ae:	789b      	ldrb	r3, [r3, #2]
 800e1b0:	706b      	strb	r3, [r5, #1]
 800e1b2:	1cab      	adds	r3, r5, #2
 800e1b4:	68a2      	ldr	r2, [r4, #8]
 800e1b6:	7852      	ldrb	r2, [r2, #1]
 800e1b8:	f803 2b01 	strb.w	r2, [r3], #1
 800e1bc:	68a2      	ldr	r2, [r4, #8]
 800e1be:	7812      	ldrb	r2, [r2, #0]
 800e1c0:	701a      	strb	r2, [r3, #0]
 800e1c2:	e7b2      	b.n	800e12a <ucdr_deserialize_endian_uint32_t+0x7a>
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	4642      	mov	r2, r8
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f009 ff14 	bl	8017ff6 <memcpy>
 800e1ce:	68a1      	ldr	r1, [r4, #8]
 800e1d0:	4652      	mov	r2, sl
 800e1d2:	eb05 0008 	add.w	r0, r5, r8
 800e1d6:	f009 ff0e 	bl	8017ff6 <memcpy>
 800e1da:	e7a6      	b.n	800e12a <ucdr_deserialize_endian_uint32_t+0x7a>

0800e1dc <ucdr_serialize_uint64_t>:
 800e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e0:	2108      	movs	r1, #8
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	e9cd 2300 	strd	r2, r3, [sp]
 800e1ea:	f000 fb6f 	bl	800e8cc <ucdr_buffer_alignment>
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	7d67      	ldrb	r7, [r4, #21]
 800e1f4:	f000 fbae 	bl	800e954 <ucdr_advance_buffer>
 800e1f8:	2108      	movs	r1, #8
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 fb06 	bl	800e80c <ucdr_check_buffer_available_for>
 800e200:	2800      	cmp	r0, #0
 800e202:	d14e      	bne.n	800e2a2 <ucdr_serialize_uint64_t+0xc6>
 800e204:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e208:	42ab      	cmp	r3, r5
 800e20a:	d945      	bls.n	800e298 <ucdr_serialize_uint64_t+0xbc>
 800e20c:	1b5e      	subs	r6, r3, r5
 800e20e:	60a3      	str	r3, [r4, #8]
 800e210:	6923      	ldr	r3, [r4, #16]
 800e212:	f1c6 0808 	rsb	r8, r6, #8
 800e216:	4433      	add	r3, r6
 800e218:	6123      	str	r3, [r4, #16]
 800e21a:	4641      	mov	r1, r8
 800e21c:	4620      	mov	r0, r4
 800e21e:	f000 fb01 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e222:	2800      	cmp	r0, #0
 800e224:	d074      	beq.n	800e310 <ucdr_serialize_uint64_t+0x134>
 800e226:	7d23      	ldrb	r3, [r4, #20]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	f000 809b 	beq.w	800e364 <ucdr_serialize_uint64_t+0x188>
 800e22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e232:	702b      	strb	r3, [r5, #0]
 800e234:	2e00      	cmp	r6, #0
 800e236:	d078      	beq.n	800e32a <ucdr_serialize_uint64_t+0x14e>
 800e238:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e23c:	706b      	strb	r3, [r5, #1]
 800e23e:	2e01      	cmp	r6, #1
 800e240:	d077      	beq.n	800e332 <ucdr_serialize_uint64_t+0x156>
 800e242:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e246:	70ab      	strb	r3, [r5, #2]
 800e248:	2e02      	cmp	r6, #2
 800e24a:	d076      	beq.n	800e33a <ucdr_serialize_uint64_t+0x15e>
 800e24c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e250:	70eb      	strb	r3, [r5, #3]
 800e252:	2e03      	cmp	r6, #3
 800e254:	d075      	beq.n	800e342 <ucdr_serialize_uint64_t+0x166>
 800e256:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e25a:	712b      	strb	r3, [r5, #4]
 800e25c:	2e04      	cmp	r6, #4
 800e25e:	d074      	beq.n	800e34a <ucdr_serialize_uint64_t+0x16e>
 800e260:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e264:	716b      	strb	r3, [r5, #5]
 800e266:	2e05      	cmp	r6, #5
 800e268:	d073      	beq.n	800e352 <ucdr_serialize_uint64_t+0x176>
 800e26a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e26e:	71ab      	strb	r3, [r5, #6]
 800e270:	2e06      	cmp	r6, #6
 800e272:	d072      	beq.n	800e35a <ucdr_serialize_uint64_t+0x17e>
 800e274:	f89d 3000 	ldrb.w	r3, [sp]
 800e278:	71eb      	strb	r3, [r5, #7]
 800e27a:	6923      	ldr	r3, [r4, #16]
 800e27c:	68a2      	ldr	r2, [r4, #8]
 800e27e:	7da0      	ldrb	r0, [r4, #22]
 800e280:	3308      	adds	r3, #8
 800e282:	1b9e      	subs	r6, r3, r6
 800e284:	4442      	add	r2, r8
 800e286:	2308      	movs	r3, #8
 800e288:	f080 0001 	eor.w	r0, r0, #1
 800e28c:	60a2      	str	r2, [r4, #8]
 800e28e:	6126      	str	r6, [r4, #16]
 800e290:	7563      	strb	r3, [r4, #21]
 800e292:	b002      	add	sp, #8
 800e294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e298:	2108      	movs	r1, #8
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 fac2 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e2a0:	b350      	cbz	r0, 800e2f8 <ucdr_serialize_uint64_t+0x11c>
 800e2a2:	7d23      	ldrb	r3, [r4, #20]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d02d      	beq.n	800e304 <ucdr_serialize_uint64_t+0x128>
 800e2a8:	68a3      	ldr	r3, [r4, #8]
 800e2aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e2ae:	701a      	strb	r2, [r3, #0]
 800e2b0:	68a3      	ldr	r3, [r4, #8]
 800e2b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2b6:	705a      	strb	r2, [r3, #1]
 800e2b8:	68a3      	ldr	r3, [r4, #8]
 800e2ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e2be:	709a      	strb	r2, [r3, #2]
 800e2c0:	68a3      	ldr	r3, [r4, #8]
 800e2c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e2c6:	70da      	strb	r2, [r3, #3]
 800e2c8:	68a3      	ldr	r3, [r4, #8]
 800e2ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e2ce:	711a      	strb	r2, [r3, #4]
 800e2d0:	68a3      	ldr	r3, [r4, #8]
 800e2d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e2d6:	715a      	strb	r2, [r3, #5]
 800e2d8:	68a3      	ldr	r3, [r4, #8]
 800e2da:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e2de:	719a      	strb	r2, [r3, #6]
 800e2e0:	68a3      	ldr	r3, [r4, #8]
 800e2e2:	f89d 2000 	ldrb.w	r2, [sp]
 800e2e6:	71da      	strb	r2, [r3, #7]
 800e2e8:	68a2      	ldr	r2, [r4, #8]
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	3208      	adds	r2, #8
 800e2ee:	3308      	adds	r3, #8
 800e2f0:	2108      	movs	r1, #8
 800e2f2:	60a2      	str	r2, [r4, #8]
 800e2f4:	6123      	str	r3, [r4, #16]
 800e2f6:	7561      	strb	r1, [r4, #21]
 800e2f8:	7da0      	ldrb	r0, [r4, #22]
 800e2fa:	f080 0001 	eor.w	r0, r0, #1
 800e2fe:	b002      	add	sp, #8
 800e300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e304:	466b      	mov	r3, sp
 800e306:	cb03      	ldmia	r3!, {r0, r1}
 800e308:	68a3      	ldr	r3, [r4, #8]
 800e30a:	6018      	str	r0, [r3, #0]
 800e30c:	6059      	str	r1, [r3, #4]
 800e30e:	e7eb      	b.n	800e2e8 <ucdr_serialize_uint64_t+0x10c>
 800e310:	68a2      	ldr	r2, [r4, #8]
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	7da0      	ldrb	r0, [r4, #22]
 800e316:	7567      	strb	r7, [r4, #21]
 800e318:	1b92      	subs	r2, r2, r6
 800e31a:	1b9b      	subs	r3, r3, r6
 800e31c:	f080 0001 	eor.w	r0, r0, #1
 800e320:	60a2      	str	r2, [r4, #8]
 800e322:	6123      	str	r3, [r4, #16]
 800e324:	b002      	add	sp, #8
 800e326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e330:	701a      	strb	r2, [r3, #0]
 800e332:	68a3      	ldr	r3, [r4, #8]
 800e334:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e338:	701a      	strb	r2, [r3, #0]
 800e33a:	68a3      	ldr	r3, [r4, #8]
 800e33c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e340:	701a      	strb	r2, [r3, #0]
 800e342:	68a3      	ldr	r3, [r4, #8]
 800e344:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e348:	701a      	strb	r2, [r3, #0]
 800e34a:	68a3      	ldr	r3, [r4, #8]
 800e34c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e350:	701a      	strb	r2, [r3, #0]
 800e352:	68a3      	ldr	r3, [r4, #8]
 800e354:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e358:	701a      	strb	r2, [r3, #0]
 800e35a:	68a3      	ldr	r3, [r4, #8]
 800e35c:	f89d 2000 	ldrb.w	r2, [sp]
 800e360:	701a      	strb	r2, [r3, #0]
 800e362:	e78a      	b.n	800e27a <ucdr_serialize_uint64_t+0x9e>
 800e364:	4628      	mov	r0, r5
 800e366:	466d      	mov	r5, sp
 800e368:	4629      	mov	r1, r5
 800e36a:	4632      	mov	r2, r6
 800e36c:	f009 fe43 	bl	8017ff6 <memcpy>
 800e370:	68a0      	ldr	r0, [r4, #8]
 800e372:	4642      	mov	r2, r8
 800e374:	19a9      	adds	r1, r5, r6
 800e376:	f009 fe3e 	bl	8017ff6 <memcpy>
 800e37a:	e77e      	b.n	800e27a <ucdr_serialize_uint64_t+0x9e>

0800e37c <ucdr_serialize_int8_t>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	460d      	mov	r5, r1
 800e380:	2101      	movs	r1, #1
 800e382:	4604      	mov	r4, r0
 800e384:	f000 fa4e 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e388:	b148      	cbz	r0, 800e39e <ucdr_serialize_int8_t+0x22>
 800e38a:	68a3      	ldr	r3, [r4, #8]
 800e38c:	701d      	strb	r5, [r3, #0]
 800e38e:	68a2      	ldr	r2, [r4, #8]
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	2101      	movs	r1, #1
 800e394:	440a      	add	r2, r1
 800e396:	440b      	add	r3, r1
 800e398:	60a2      	str	r2, [r4, #8]
 800e39a:	6123      	str	r3, [r4, #16]
 800e39c:	7561      	strb	r1, [r4, #21]
 800e39e:	7da0      	ldrb	r0, [r4, #22]
 800e3a0:	f080 0001 	eor.w	r0, r0, #1
 800e3a4:	bd38      	pop	{r3, r4, r5, pc}
 800e3a6:	bf00      	nop

0800e3a8 <ucdr_deserialize_int8_t>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	460d      	mov	r5, r1
 800e3ac:	2101      	movs	r1, #1
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	f000 fa38 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e3b4:	b150      	cbz	r0, 800e3cc <ucdr_deserialize_int8_t+0x24>
 800e3b6:	68a3      	ldr	r3, [r4, #8]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	702b      	strb	r3, [r5, #0]
 800e3bc:	68a2      	ldr	r2, [r4, #8]
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	440a      	add	r2, r1
 800e3c4:	440b      	add	r3, r1
 800e3c6:	60a2      	str	r2, [r4, #8]
 800e3c8:	6123      	str	r3, [r4, #16]
 800e3ca:	7561      	strb	r1, [r4, #21]
 800e3cc:	7da0      	ldrb	r0, [r4, #22]
 800e3ce:	f080 0001 	eor.w	r0, r0, #1
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}

0800e3d4 <ucdr_serialize_int16_t>:
 800e3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d8:	b082      	sub	sp, #8
 800e3da:	460b      	mov	r3, r1
 800e3dc:	2102      	movs	r1, #2
 800e3de:	4604      	mov	r4, r0
 800e3e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e3e4:	f000 fa72 	bl	800e8cc <ucdr_buffer_alignment>
 800e3e8:	4601      	mov	r1, r0
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	7d67      	ldrb	r7, [r4, #21]
 800e3ee:	f000 fab1 	bl	800e954 <ucdr_advance_buffer>
 800e3f2:	2102      	movs	r1, #2
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f000 fa09 	bl	800e80c <ucdr_check_buffer_available_for>
 800e3fa:	bb78      	cbnz	r0, 800e45c <ucdr_serialize_int16_t+0x88>
 800e3fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e400:	42ab      	cmp	r3, r5
 800e402:	d926      	bls.n	800e452 <ucdr_serialize_int16_t+0x7e>
 800e404:	1b5e      	subs	r6, r3, r5
 800e406:	60a3      	str	r3, [r4, #8]
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	f1c6 0802 	rsb	r8, r6, #2
 800e40e:	4433      	add	r3, r6
 800e410:	6123      	str	r3, [r4, #16]
 800e412:	4641      	mov	r1, r8
 800e414:	4620      	mov	r0, r4
 800e416:	f000 fa05 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d03b      	beq.n	800e496 <ucdr_serialize_int16_t+0xc2>
 800e41e:	7d23      	ldrb	r3, [r4, #20]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d04a      	beq.n	800e4ba <ucdr_serialize_int16_t+0xe6>
 800e424:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e428:	702b      	strb	r3, [r5, #0]
 800e42a:	2e00      	cmp	r6, #0
 800e42c:	d040      	beq.n	800e4b0 <ucdr_serialize_int16_t+0xdc>
 800e42e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e432:	706b      	strb	r3, [r5, #1]
 800e434:	6923      	ldr	r3, [r4, #16]
 800e436:	68a2      	ldr	r2, [r4, #8]
 800e438:	7da0      	ldrb	r0, [r4, #22]
 800e43a:	3302      	adds	r3, #2
 800e43c:	1b9e      	subs	r6, r3, r6
 800e43e:	4442      	add	r2, r8
 800e440:	2302      	movs	r3, #2
 800e442:	f080 0001 	eor.w	r0, r0, #1
 800e446:	60a2      	str	r2, [r4, #8]
 800e448:	6126      	str	r6, [r4, #16]
 800e44a:	7563      	strb	r3, [r4, #21]
 800e44c:	b002      	add	sp, #8
 800e44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e452:	2102      	movs	r1, #2
 800e454:	4620      	mov	r0, r4
 800e456:	f000 f9e5 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e45a:	b190      	cbz	r0, 800e482 <ucdr_serialize_int16_t+0xae>
 800e45c:	7d23      	ldrb	r3, [r4, #20]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	68a3      	ldr	r3, [r4, #8]
 800e462:	d014      	beq.n	800e48e <ucdr_serialize_int16_t+0xba>
 800e464:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e468:	701a      	strb	r2, [r3, #0]
 800e46a:	68a3      	ldr	r3, [r4, #8]
 800e46c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e470:	705a      	strb	r2, [r3, #1]
 800e472:	68a2      	ldr	r2, [r4, #8]
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	3202      	adds	r2, #2
 800e478:	3302      	adds	r3, #2
 800e47a:	2102      	movs	r1, #2
 800e47c:	60a2      	str	r2, [r4, #8]
 800e47e:	6123      	str	r3, [r4, #16]
 800e480:	7561      	strb	r1, [r4, #21]
 800e482:	7da0      	ldrb	r0, [r4, #22]
 800e484:	f080 0001 	eor.w	r0, r0, #1
 800e488:	b002      	add	sp, #8
 800e48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e492:	801a      	strh	r2, [r3, #0]
 800e494:	e7ed      	b.n	800e472 <ucdr_serialize_int16_t+0x9e>
 800e496:	68a2      	ldr	r2, [r4, #8]
 800e498:	6923      	ldr	r3, [r4, #16]
 800e49a:	7da0      	ldrb	r0, [r4, #22]
 800e49c:	7567      	strb	r7, [r4, #21]
 800e49e:	1b92      	subs	r2, r2, r6
 800e4a0:	1b9b      	subs	r3, r3, r6
 800e4a2:	f080 0001 	eor.w	r0, r0, #1
 800e4a6:	60a2      	str	r2, [r4, #8]
 800e4a8:	6123      	str	r3, [r4, #16]
 800e4aa:	b002      	add	sp, #8
 800e4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b0:	68a3      	ldr	r3, [r4, #8]
 800e4b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e4b6:	701a      	strb	r2, [r3, #0]
 800e4b8:	e7bc      	b.n	800e434 <ucdr_serialize_int16_t+0x60>
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f10d 0506 	add.w	r5, sp, #6
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	4632      	mov	r2, r6
 800e4c4:	f009 fd97 	bl	8017ff6 <memcpy>
 800e4c8:	68a0      	ldr	r0, [r4, #8]
 800e4ca:	4642      	mov	r2, r8
 800e4cc:	19a9      	adds	r1, r5, r6
 800e4ce:	f009 fd92 	bl	8017ff6 <memcpy>
 800e4d2:	e7af      	b.n	800e434 <ucdr_serialize_int16_t+0x60>

0800e4d4 <ucdr_deserialize_int16_t>:
 800e4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d8:	460d      	mov	r5, r1
 800e4da:	2102      	movs	r1, #2
 800e4dc:	4604      	mov	r4, r0
 800e4de:	f000 f9f5 	bl	800e8cc <ucdr_buffer_alignment>
 800e4e2:	4601      	mov	r1, r0
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e4ea:	f000 fa33 	bl	800e954 <ucdr_advance_buffer>
 800e4ee:	2102      	movs	r1, #2
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	f000 f98b 	bl	800e80c <ucdr_check_buffer_available_for>
 800e4f6:	bb60      	cbnz	r0, 800e552 <ucdr_deserialize_int16_t+0x7e>
 800e4f8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e4fc:	42be      	cmp	r6, r7
 800e4fe:	d923      	bls.n	800e548 <ucdr_deserialize_int16_t+0x74>
 800e500:	6923      	ldr	r3, [r4, #16]
 800e502:	60a6      	str	r6, [r4, #8]
 800e504:	1bf6      	subs	r6, r6, r7
 800e506:	4433      	add	r3, r6
 800e508:	f1c6 0902 	rsb	r9, r6, #2
 800e50c:	6123      	str	r3, [r4, #16]
 800e50e:	4649      	mov	r1, r9
 800e510:	4620      	mov	r0, r4
 800e512:	f000 f987 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e516:	2800      	cmp	r0, #0
 800e518:	d034      	beq.n	800e584 <ucdr_deserialize_int16_t+0xb0>
 800e51a:	7d23      	ldrb	r3, [r4, #20]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d042      	beq.n	800e5a6 <ucdr_deserialize_int16_t+0xd2>
 800e520:	787b      	ldrb	r3, [r7, #1]
 800e522:	702b      	strb	r3, [r5, #0]
 800e524:	2e00      	cmp	r6, #0
 800e526:	d03a      	beq.n	800e59e <ucdr_deserialize_int16_t+0xca>
 800e528:	783b      	ldrb	r3, [r7, #0]
 800e52a:	706b      	strb	r3, [r5, #1]
 800e52c:	6923      	ldr	r3, [r4, #16]
 800e52e:	68a2      	ldr	r2, [r4, #8]
 800e530:	7da0      	ldrb	r0, [r4, #22]
 800e532:	2102      	movs	r1, #2
 800e534:	3302      	adds	r3, #2
 800e536:	444a      	add	r2, r9
 800e538:	1b9b      	subs	r3, r3, r6
 800e53a:	7561      	strb	r1, [r4, #21]
 800e53c:	60a2      	str	r2, [r4, #8]
 800e53e:	6123      	str	r3, [r4, #16]
 800e540:	f080 0001 	eor.w	r0, r0, #1
 800e544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e548:	2102      	movs	r1, #2
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 f96a 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e550:	b180      	cbz	r0, 800e574 <ucdr_deserialize_int16_t+0xa0>
 800e552:	7d23      	ldrb	r3, [r4, #20]
 800e554:	2b01      	cmp	r3, #1
 800e556:	68a3      	ldr	r3, [r4, #8]
 800e558:	d011      	beq.n	800e57e <ucdr_deserialize_int16_t+0xaa>
 800e55a:	785b      	ldrb	r3, [r3, #1]
 800e55c:	702b      	strb	r3, [r5, #0]
 800e55e:	68a3      	ldr	r3, [r4, #8]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	706b      	strb	r3, [r5, #1]
 800e564:	68a2      	ldr	r2, [r4, #8]
 800e566:	6923      	ldr	r3, [r4, #16]
 800e568:	3202      	adds	r2, #2
 800e56a:	3302      	adds	r3, #2
 800e56c:	2102      	movs	r1, #2
 800e56e:	60a2      	str	r2, [r4, #8]
 800e570:	6123      	str	r3, [r4, #16]
 800e572:	7561      	strb	r1, [r4, #21]
 800e574:	7da0      	ldrb	r0, [r4, #22]
 800e576:	f080 0001 	eor.w	r0, r0, #1
 800e57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e57e:	881b      	ldrh	r3, [r3, #0]
 800e580:	802b      	strh	r3, [r5, #0]
 800e582:	e7ef      	b.n	800e564 <ucdr_deserialize_int16_t+0x90>
 800e584:	68a2      	ldr	r2, [r4, #8]
 800e586:	6923      	ldr	r3, [r4, #16]
 800e588:	7da0      	ldrb	r0, [r4, #22]
 800e58a:	f884 8015 	strb.w	r8, [r4, #21]
 800e58e:	1b92      	subs	r2, r2, r6
 800e590:	1b9b      	subs	r3, r3, r6
 800e592:	60a2      	str	r2, [r4, #8]
 800e594:	6123      	str	r3, [r4, #16]
 800e596:	f080 0001 	eor.w	r0, r0, #1
 800e59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e59e:	68a3      	ldr	r3, [r4, #8]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	706b      	strb	r3, [r5, #1]
 800e5a4:	e7c2      	b.n	800e52c <ucdr_deserialize_int16_t+0x58>
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	4632      	mov	r2, r6
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	f009 fd23 	bl	8017ff6 <memcpy>
 800e5b0:	68a1      	ldr	r1, [r4, #8]
 800e5b2:	464a      	mov	r2, r9
 800e5b4:	19a8      	adds	r0, r5, r6
 800e5b6:	f009 fd1e 	bl	8017ff6 <memcpy>
 800e5ba:	e7b7      	b.n	800e52c <ucdr_deserialize_int16_t+0x58>

0800e5bc <ucdr_serialize_int32_t>:
 800e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c0:	b082      	sub	sp, #8
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	9101      	str	r1, [sp, #4]
 800e5c6:	2104      	movs	r1, #4
 800e5c8:	f000 f980 	bl	800e8cc <ucdr_buffer_alignment>
 800e5cc:	4601      	mov	r1, r0
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	7d67      	ldrb	r7, [r4, #21]
 800e5d2:	f000 f9bf 	bl	800e954 <ucdr_advance_buffer>
 800e5d6:	2104      	movs	r1, #4
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f000 f917 	bl	800e80c <ucdr_check_buffer_available_for>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d139      	bne.n	800e656 <ucdr_serialize_int32_t+0x9a>
 800e5e2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e5e6:	42ab      	cmp	r3, r5
 800e5e8:	d930      	bls.n	800e64c <ucdr_serialize_int32_t+0x90>
 800e5ea:	1b5e      	subs	r6, r3, r5
 800e5ec:	60a3      	str	r3, [r4, #8]
 800e5ee:	6923      	ldr	r3, [r4, #16]
 800e5f0:	f1c6 0804 	rsb	r8, r6, #4
 800e5f4:	4433      	add	r3, r6
 800e5f6:	6123      	str	r3, [r4, #16]
 800e5f8:	4641      	mov	r1, r8
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f000 f912 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e600:	2800      	cmp	r0, #0
 800e602:	d04c      	beq.n	800e69e <ucdr_serialize_int32_t+0xe2>
 800e604:	7d23      	ldrb	r3, [r4, #20]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d063      	beq.n	800e6d2 <ucdr_serialize_int32_t+0x116>
 800e60a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e60e:	702b      	strb	r3, [r5, #0]
 800e610:	2e00      	cmp	r6, #0
 800e612:	d051      	beq.n	800e6b8 <ucdr_serialize_int32_t+0xfc>
 800e614:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e618:	706b      	strb	r3, [r5, #1]
 800e61a:	2e01      	cmp	r6, #1
 800e61c:	d050      	beq.n	800e6c0 <ucdr_serialize_int32_t+0x104>
 800e61e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e622:	70ab      	strb	r3, [r5, #2]
 800e624:	2e02      	cmp	r6, #2
 800e626:	d04f      	beq.n	800e6c8 <ucdr_serialize_int32_t+0x10c>
 800e628:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e62c:	70eb      	strb	r3, [r5, #3]
 800e62e:	6923      	ldr	r3, [r4, #16]
 800e630:	68a2      	ldr	r2, [r4, #8]
 800e632:	7da0      	ldrb	r0, [r4, #22]
 800e634:	3304      	adds	r3, #4
 800e636:	1b9e      	subs	r6, r3, r6
 800e638:	4442      	add	r2, r8
 800e63a:	2304      	movs	r3, #4
 800e63c:	f080 0001 	eor.w	r0, r0, #1
 800e640:	60a2      	str	r2, [r4, #8]
 800e642:	6126      	str	r6, [r4, #16]
 800e644:	7563      	strb	r3, [r4, #21]
 800e646:	b002      	add	sp, #8
 800e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e64c:	2104      	movs	r1, #4
 800e64e:	4620      	mov	r0, r4
 800e650:	f000 f8e8 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e654:	b1d0      	cbz	r0, 800e68c <ucdr_serialize_int32_t+0xd0>
 800e656:	7d23      	ldrb	r3, [r4, #20]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	d01c      	beq.n	800e698 <ucdr_serialize_int32_t+0xdc>
 800e65e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e662:	701a      	strb	r2, [r3, #0]
 800e664:	68a3      	ldr	r3, [r4, #8]
 800e666:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e66a:	705a      	strb	r2, [r3, #1]
 800e66c:	68a3      	ldr	r3, [r4, #8]
 800e66e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e672:	709a      	strb	r2, [r3, #2]
 800e674:	68a3      	ldr	r3, [r4, #8]
 800e676:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e67a:	70da      	strb	r2, [r3, #3]
 800e67c:	68a2      	ldr	r2, [r4, #8]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	3204      	adds	r2, #4
 800e682:	3304      	adds	r3, #4
 800e684:	2104      	movs	r1, #4
 800e686:	60a2      	str	r2, [r4, #8]
 800e688:	6123      	str	r3, [r4, #16]
 800e68a:	7561      	strb	r1, [r4, #21]
 800e68c:	7da0      	ldrb	r0, [r4, #22]
 800e68e:	f080 0001 	eor.w	r0, r0, #1
 800e692:	b002      	add	sp, #8
 800e694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e698:	9a01      	ldr	r2, [sp, #4]
 800e69a:	601a      	str	r2, [r3, #0]
 800e69c:	e7ee      	b.n	800e67c <ucdr_serialize_int32_t+0xc0>
 800e69e:	68a2      	ldr	r2, [r4, #8]
 800e6a0:	6923      	ldr	r3, [r4, #16]
 800e6a2:	7da0      	ldrb	r0, [r4, #22]
 800e6a4:	7567      	strb	r7, [r4, #21]
 800e6a6:	1b92      	subs	r2, r2, r6
 800e6a8:	1b9b      	subs	r3, r3, r6
 800e6aa:	f080 0001 	eor.w	r0, r0, #1
 800e6ae:	60a2      	str	r2, [r4, #8]
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	b002      	add	sp, #8
 800e6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b8:	68a3      	ldr	r3, [r4, #8]
 800e6ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6be:	701a      	strb	r2, [r3, #0]
 800e6c0:	68a3      	ldr	r3, [r4, #8]
 800e6c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e6c6:	701a      	strb	r2, [r3, #0]
 800e6c8:	68a3      	ldr	r3, [r4, #8]
 800e6ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	e7ad      	b.n	800e62e <ucdr_serialize_int32_t+0x72>
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	ad01      	add	r5, sp, #4
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	4632      	mov	r2, r6
 800e6da:	f009 fc8c 	bl	8017ff6 <memcpy>
 800e6de:	68a0      	ldr	r0, [r4, #8]
 800e6e0:	4642      	mov	r2, r8
 800e6e2:	19a9      	adds	r1, r5, r6
 800e6e4:	f009 fc87 	bl	8017ff6 <memcpy>
 800e6e8:	e7a1      	b.n	800e62e <ucdr_serialize_int32_t+0x72>
 800e6ea:	bf00      	nop

0800e6ec <ucdr_deserialize_int32_t>:
 800e6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f0:	460d      	mov	r5, r1
 800e6f2:	2104      	movs	r1, #4
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	f000 f8e9 	bl	800e8cc <ucdr_buffer_alignment>
 800e6fa:	4601      	mov	r1, r0
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e702:	f000 f927 	bl	800e954 <ucdr_advance_buffer>
 800e706:	2104      	movs	r1, #4
 800e708:	4620      	mov	r0, r4
 800e70a:	f000 f87f 	bl	800e80c <ucdr_check_buffer_available_for>
 800e70e:	2800      	cmp	r0, #0
 800e710:	d138      	bne.n	800e784 <ucdr_deserialize_int32_t+0x98>
 800e712:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e716:	42b7      	cmp	r7, r6
 800e718:	d92f      	bls.n	800e77a <ucdr_deserialize_int32_t+0x8e>
 800e71a:	6923      	ldr	r3, [r4, #16]
 800e71c:	60a7      	str	r7, [r4, #8]
 800e71e:	1bbf      	subs	r7, r7, r6
 800e720:	443b      	add	r3, r7
 800e722:	f1c7 0904 	rsb	r9, r7, #4
 800e726:	6123      	str	r3, [r4, #16]
 800e728:	4649      	mov	r1, r9
 800e72a:	4620      	mov	r0, r4
 800e72c:	f000 f87a 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e730:	2800      	cmp	r0, #0
 800e732:	d046      	beq.n	800e7c2 <ucdr_deserialize_int32_t+0xd6>
 800e734:	7d23      	ldrb	r3, [r4, #20]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d05c      	beq.n	800e7f4 <ucdr_deserialize_int32_t+0x108>
 800e73a:	78f3      	ldrb	r3, [r6, #3]
 800e73c:	702b      	strb	r3, [r5, #0]
 800e73e:	2f00      	cmp	r7, #0
 800e740:	d04c      	beq.n	800e7dc <ucdr_deserialize_int32_t+0xf0>
 800e742:	78b3      	ldrb	r3, [r6, #2]
 800e744:	706b      	strb	r3, [r5, #1]
 800e746:	2f01      	cmp	r7, #1
 800e748:	f105 0302 	add.w	r3, r5, #2
 800e74c:	d04a      	beq.n	800e7e4 <ucdr_deserialize_int32_t+0xf8>
 800e74e:	7873      	ldrb	r3, [r6, #1]
 800e750:	70ab      	strb	r3, [r5, #2]
 800e752:	2f02      	cmp	r7, #2
 800e754:	f105 0303 	add.w	r3, r5, #3
 800e758:	d048      	beq.n	800e7ec <ucdr_deserialize_int32_t+0x100>
 800e75a:	7833      	ldrb	r3, [r6, #0]
 800e75c:	70eb      	strb	r3, [r5, #3]
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	68a2      	ldr	r2, [r4, #8]
 800e762:	7da0      	ldrb	r0, [r4, #22]
 800e764:	2104      	movs	r1, #4
 800e766:	3304      	adds	r3, #4
 800e768:	444a      	add	r2, r9
 800e76a:	1bdb      	subs	r3, r3, r7
 800e76c:	7561      	strb	r1, [r4, #21]
 800e76e:	60a2      	str	r2, [r4, #8]
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	f080 0001 	eor.w	r0, r0, #1
 800e776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e77a:	2104      	movs	r1, #4
 800e77c:	4620      	mov	r0, r4
 800e77e:	f000 f851 	bl	800e824 <ucdr_check_final_buffer_behavior>
 800e782:	b1b0      	cbz	r0, 800e7b2 <ucdr_deserialize_int32_t+0xc6>
 800e784:	7d23      	ldrb	r3, [r4, #20]
 800e786:	2b01      	cmp	r3, #1
 800e788:	68a3      	ldr	r3, [r4, #8]
 800e78a:	d017      	beq.n	800e7bc <ucdr_deserialize_int32_t+0xd0>
 800e78c:	78db      	ldrb	r3, [r3, #3]
 800e78e:	702b      	strb	r3, [r5, #0]
 800e790:	68a3      	ldr	r3, [r4, #8]
 800e792:	789b      	ldrb	r3, [r3, #2]
 800e794:	706b      	strb	r3, [r5, #1]
 800e796:	68a3      	ldr	r3, [r4, #8]
 800e798:	785b      	ldrb	r3, [r3, #1]
 800e79a:	70ab      	strb	r3, [r5, #2]
 800e79c:	68a3      	ldr	r3, [r4, #8]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	70eb      	strb	r3, [r5, #3]
 800e7a2:	68a2      	ldr	r2, [r4, #8]
 800e7a4:	6923      	ldr	r3, [r4, #16]
 800e7a6:	3204      	adds	r2, #4
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	2104      	movs	r1, #4
 800e7ac:	60a2      	str	r2, [r4, #8]
 800e7ae:	6123      	str	r3, [r4, #16]
 800e7b0:	7561      	strb	r1, [r4, #21]
 800e7b2:	7da0      	ldrb	r0, [r4, #22]
 800e7b4:	f080 0001 	eor.w	r0, r0, #1
 800e7b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	602b      	str	r3, [r5, #0]
 800e7c0:	e7ef      	b.n	800e7a2 <ucdr_deserialize_int32_t+0xb6>
 800e7c2:	68a2      	ldr	r2, [r4, #8]
 800e7c4:	6923      	ldr	r3, [r4, #16]
 800e7c6:	7da0      	ldrb	r0, [r4, #22]
 800e7c8:	f884 8015 	strb.w	r8, [r4, #21]
 800e7cc:	1bd2      	subs	r2, r2, r7
 800e7ce:	1bdb      	subs	r3, r3, r7
 800e7d0:	60a2      	str	r2, [r4, #8]
 800e7d2:	6123      	str	r3, [r4, #16]
 800e7d4:	f080 0001 	eor.w	r0, r0, #1
 800e7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	789b      	ldrb	r3, [r3, #2]
 800e7e0:	706b      	strb	r3, [r5, #1]
 800e7e2:	1cab      	adds	r3, r5, #2
 800e7e4:	68a2      	ldr	r2, [r4, #8]
 800e7e6:	7852      	ldrb	r2, [r2, #1]
 800e7e8:	f803 2b01 	strb.w	r2, [r3], #1
 800e7ec:	68a2      	ldr	r2, [r4, #8]
 800e7ee:	7812      	ldrb	r2, [r2, #0]
 800e7f0:	701a      	strb	r2, [r3, #0]
 800e7f2:	e7b4      	b.n	800e75e <ucdr_deserialize_int32_t+0x72>
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	463a      	mov	r2, r7
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	f009 fbfc 	bl	8017ff6 <memcpy>
 800e7fe:	68a1      	ldr	r1, [r4, #8]
 800e800:	464a      	mov	r2, r9
 800e802:	19e8      	adds	r0, r5, r7
 800e804:	f009 fbf7 	bl	8017ff6 <memcpy>
 800e808:	e7a9      	b.n	800e75e <ucdr_deserialize_int32_t+0x72>
 800e80a:	bf00      	nop

0800e80c <ucdr_check_buffer_available_for>:
 800e80c:	7d83      	ldrb	r3, [r0, #22]
 800e80e:	b93b      	cbnz	r3, 800e820 <ucdr_check_buffer_available_for+0x14>
 800e810:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e814:	4419      	add	r1, r3
 800e816:	4288      	cmp	r0, r1
 800e818:	bf34      	ite	cc
 800e81a:	2000      	movcc	r0, #0
 800e81c:	2001      	movcs	r0, #1
 800e81e:	4770      	bx	lr
 800e820:	2000      	movs	r0, #0
 800e822:	4770      	bx	lr

0800e824 <ucdr_check_final_buffer_behavior>:
 800e824:	7d83      	ldrb	r3, [r0, #22]
 800e826:	b943      	cbnz	r3, 800e83a <ucdr_check_final_buffer_behavior+0x16>
 800e828:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e82c:	4291      	cmp	r1, r2
 800e82e:	b510      	push	{r4, lr}
 800e830:	4604      	mov	r4, r0
 800e832:	d205      	bcs.n	800e840 <ucdr_check_final_buffer_behavior+0x1c>
 800e834:	2301      	movs	r3, #1
 800e836:	4618      	mov	r0, r3
 800e838:	bd10      	pop	{r4, pc}
 800e83a:	2300      	movs	r3, #0
 800e83c:	4618      	mov	r0, r3
 800e83e:	4770      	bx	lr
 800e840:	6982      	ldr	r2, [r0, #24]
 800e842:	b13a      	cbz	r2, 800e854 <ucdr_check_final_buffer_behavior+0x30>
 800e844:	69c1      	ldr	r1, [r0, #28]
 800e846:	4790      	blx	r2
 800e848:	f080 0301 	eor.w	r3, r0, #1
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	75a0      	strb	r0, [r4, #22]
 800e850:	4618      	mov	r0, r3
 800e852:	bd10      	pop	{r4, pc}
 800e854:	2001      	movs	r0, #1
 800e856:	75a0      	strb	r0, [r4, #22]
 800e858:	e7fa      	b.n	800e850 <ucdr_check_final_buffer_behavior+0x2c>
 800e85a:	bf00      	nop

0800e85c <ucdr_set_on_full_buffer_callback>:
 800e85c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop

0800e864 <ucdr_init_buffer_origin_offset_endian>:
 800e864:	b410      	push	{r4}
 800e866:	9c01      	ldr	r4, [sp, #4]
 800e868:	6001      	str	r1, [r0, #0]
 800e86a:	440a      	add	r2, r1
 800e86c:	6042      	str	r2, [r0, #4]
 800e86e:	190a      	adds	r2, r1, r4
 800e870:	441c      	add	r4, r3
 800e872:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e876:	6082      	str	r2, [r0, #8]
 800e878:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e87c:	7503      	strb	r3, [r0, #20]
 800e87e:	2200      	movs	r2, #0
 800e880:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e884:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e888:	7542      	strb	r2, [r0, #21]
 800e88a:	7582      	strb	r2, [r0, #22]
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop

0800e890 <ucdr_init_buffer_origin_offset>:
 800e890:	b510      	push	{r4, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	9c04      	ldr	r4, [sp, #16]
 800e896:	9400      	str	r4, [sp, #0]
 800e898:	2401      	movs	r4, #1
 800e89a:	9401      	str	r4, [sp, #4]
 800e89c:	f7ff ffe2 	bl	800e864 <ucdr_init_buffer_origin_offset_endian>
 800e8a0:	b002      	add	sp, #8
 800e8a2:	bd10      	pop	{r4, pc}

0800e8a4 <ucdr_init_buffer_origin>:
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	2400      	movs	r4, #0
 800e8aa:	9400      	str	r4, [sp, #0]
 800e8ac:	f7ff fff0 	bl	800e890 <ucdr_init_buffer_origin_offset>
 800e8b0:	b002      	add	sp, #8
 800e8b2:	bd10      	pop	{r4, pc}

0800e8b4 <ucdr_init_buffer>:
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f7ff bff5 	b.w	800e8a4 <ucdr_init_buffer_origin>
 800e8ba:	bf00      	nop

0800e8bc <ucdr_alignment>:
 800e8bc:	fbb0 f3f1 	udiv	r3, r0, r1
 800e8c0:	fb03 0011 	mls	r0, r3, r1, r0
 800e8c4:	1a08      	subs	r0, r1, r0
 800e8c6:	3901      	subs	r1, #1
 800e8c8:	4008      	ands	r0, r1
 800e8ca:	4770      	bx	lr

0800e8cc <ucdr_buffer_alignment>:
 800e8cc:	7d43      	ldrb	r3, [r0, #21]
 800e8ce:	428b      	cmp	r3, r1
 800e8d0:	d208      	bcs.n	800e8e4 <ucdr_buffer_alignment+0x18>
 800e8d2:	6900      	ldr	r0, [r0, #16]
 800e8d4:	fbb0 f3f1 	udiv	r3, r0, r1
 800e8d8:	fb01 0013 	mls	r0, r1, r3, r0
 800e8dc:	1a08      	subs	r0, r1, r0
 800e8de:	3901      	subs	r1, #1
 800e8e0:	4008      	ands	r0, r1
 800e8e2:	4770      	bx	lr
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	4770      	bx	lr

0800e8e8 <ucdr_align_to>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	460d      	mov	r5, r1
 800e8ee:	f7ff ffed 	bl	800e8cc <ucdr_buffer_alignment>
 800e8f2:	68a3      	ldr	r3, [r4, #8]
 800e8f4:	6921      	ldr	r1, [r4, #16]
 800e8f6:	7565      	strb	r5, [r4, #21]
 800e8f8:	181a      	adds	r2, r3, r0
 800e8fa:	6863      	ldr	r3, [r4, #4]
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	4408      	add	r0, r1
 800e900:	bf28      	it	cs
 800e902:	4613      	movcs	r3, r2
 800e904:	6120      	str	r0, [r4, #16]
 800e906:	60a3      	str	r3, [r4, #8]
 800e908:	bd38      	pop	{r3, r4, r5, pc}
 800e90a:	bf00      	nop

0800e90c <ucdr_buffer_length>:
 800e90c:	6882      	ldr	r2, [r0, #8]
 800e90e:	6800      	ldr	r0, [r0, #0]
 800e910:	1a10      	subs	r0, r2, r0
 800e912:	4770      	bx	lr

0800e914 <ucdr_buffer_remaining>:
 800e914:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e918:	1a10      	subs	r0, r2, r0
 800e91a:	4770      	bx	lr

0800e91c <ucdr_check_final_buffer_behavior_array>:
 800e91c:	b538      	push	{r3, r4, r5, lr}
 800e91e:	7d83      	ldrb	r3, [r0, #22]
 800e920:	b963      	cbnz	r3, 800e93c <ucdr_check_final_buffer_behavior_array+0x20>
 800e922:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e926:	429a      	cmp	r2, r3
 800e928:	4604      	mov	r4, r0
 800e92a:	460d      	mov	r5, r1
 800e92c:	d308      	bcc.n	800e940 <ucdr_check_final_buffer_behavior_array+0x24>
 800e92e:	b139      	cbz	r1, 800e940 <ucdr_check_final_buffer_behavior_array+0x24>
 800e930:	6983      	ldr	r3, [r0, #24]
 800e932:	b163      	cbz	r3, 800e94e <ucdr_check_final_buffer_behavior_array+0x32>
 800e934:	69c1      	ldr	r1, [r0, #28]
 800e936:	4798      	blx	r3
 800e938:	75a0      	strb	r0, [r4, #22]
 800e93a:	b108      	cbz	r0, 800e940 <ucdr_check_final_buffer_behavior_array+0x24>
 800e93c:	2000      	movs	r0, #0
 800e93e:	bd38      	pop	{r3, r4, r5, pc}
 800e940:	4620      	mov	r0, r4
 800e942:	f7ff ffe7 	bl	800e914 <ucdr_buffer_remaining>
 800e946:	42a8      	cmp	r0, r5
 800e948:	bf28      	it	cs
 800e94a:	4628      	movcs	r0, r5
 800e94c:	bd38      	pop	{r3, r4, r5, pc}
 800e94e:	2301      	movs	r3, #1
 800e950:	7583      	strb	r3, [r0, #22]
 800e952:	e7f3      	b.n	800e93c <ucdr_check_final_buffer_behavior_array+0x20>

0800e954 <ucdr_advance_buffer>:
 800e954:	b538      	push	{r3, r4, r5, lr}
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	f7ff ff57 	bl	800e80c <ucdr_check_buffer_available_for>
 800e95e:	b178      	cbz	r0, 800e980 <ucdr_advance_buffer+0x2c>
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	68a2      	ldr	r2, [r4, #8]
 800e964:	442b      	add	r3, r5
 800e966:	6123      	str	r3, [r4, #16]
 800e968:	2301      	movs	r3, #1
 800e96a:	442a      	add	r2, r5
 800e96c:	7563      	strb	r3, [r4, #21]
 800e96e:	60a2      	str	r2, [r4, #8]
 800e970:	bd38      	pop	{r3, r4, r5, pc}
 800e972:	68a2      	ldr	r2, [r4, #8]
 800e974:	6923      	ldr	r3, [r4, #16]
 800e976:	4402      	add	r2, r0
 800e978:	4403      	add	r3, r0
 800e97a:	1a2d      	subs	r5, r5, r0
 800e97c:	60a2      	str	r2, [r4, #8]
 800e97e:	6123      	str	r3, [r4, #16]
 800e980:	4629      	mov	r1, r5
 800e982:	2201      	movs	r2, #1
 800e984:	4620      	mov	r0, r4
 800e986:	f7ff ffc9 	bl	800e91c <ucdr_check_final_buffer_behavior_array>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d1f1      	bne.n	800e972 <ucdr_advance_buffer+0x1e>
 800e98e:	2301      	movs	r3, #1
 800e990:	7563      	strb	r3, [r4, #21]
 800e992:	bd38      	pop	{r3, r4, r5, pc}

0800e994 <uxr_buffer_delete_entity>:
 800e994:	b510      	push	{r4, lr}
 800e996:	2300      	movs	r3, #0
 800e998:	b08e      	sub	sp, #56	@ 0x38
 800e99a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e99e:	2303      	movs	r3, #3
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	2204      	movs	r2, #4
 800e9a4:	ab06      	add	r3, sp, #24
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	9103      	str	r1, [sp, #12]
 800e9aa:	f001 fab7 	bl	800ff1c <uxr_prepare_stream_to_write_submessage>
 800e9ae:	b918      	cbnz	r0, 800e9b8 <uxr_buffer_delete_entity+0x24>
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	b00e      	add	sp, #56	@ 0x38
 800e9b6:	bd10      	pop	{r4, pc}
 800e9b8:	9902      	ldr	r1, [sp, #8]
 800e9ba:	aa05      	add	r2, sp, #20
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f001 fbe3 	bl	8010188 <uxr_init_base_object_request>
 800e9c2:	a905      	add	r1, sp, #20
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	a806      	add	r0, sp, #24
 800e9c8:	f003 f9da 	bl	8011d80 <uxr_serialize_DELETE_Payload>
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	b00e      	add	sp, #56	@ 0x38
 800e9d0:	bd10      	pop	{r4, pc}
 800e9d2:	bf00      	nop

0800e9d4 <uxr_common_create_entity>:
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e9da:	b08c      	sub	sp, #48	@ 0x30
 800e9dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e9e0:	f1bc 0f01 	cmp.w	ip, #1
 800e9e4:	bf0c      	ite	eq
 800e9e6:	f003 0201 	andeq.w	r2, r3, #1
 800e9ea:	2200      	movne	r2, #0
 800e9ec:	330e      	adds	r3, #14
 800e9ee:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e9f2:	9101      	str	r1, [sp, #4]
 800e9f4:	441a      	add	r2, r3
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	9903      	ldr	r1, [sp, #12]
 800e9fc:	ab04      	add	r3, sp, #16
 800e9fe:	b292      	uxth	r2, r2
 800ea00:	4604      	mov	r4, r0
 800ea02:	f001 fa8b 	bl	800ff1c <uxr_prepare_stream_to_write_submessage>
 800ea06:	b918      	cbnz	r0, 800ea10 <uxr_common_create_entity+0x3c>
 800ea08:	4604      	mov	r4, r0
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	b00c      	add	sp, #48	@ 0x30
 800ea0e:	bd10      	pop	{r4, pc}
 800ea10:	9902      	ldr	r1, [sp, #8]
 800ea12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ea14:	4620      	mov	r0, r4
 800ea16:	f001 fbb7 	bl	8010188 <uxr_init_base_object_request>
 800ea1a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	a804      	add	r0, sp, #16
 800ea20:	f003 f90a 	bl	8011c38 <uxr_serialize_CREATE_Payload>
 800ea24:	4620      	mov	r0, r4
 800ea26:	b00c      	add	sp, #48	@ 0x30
 800ea28:	bd10      	pop	{r4, pc}
 800ea2a:	bf00      	nop

0800ea2c <uxr_buffer_create_participant_bin>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800ea32:	ac11      	add	r4, sp, #68	@ 0x44
 800ea34:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ea3e:	7223      	strb	r3, [r4, #8]
 800ea40:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800ea42:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800ea46:	2201      	movs	r2, #1
 800ea48:	2100      	movs	r1, #0
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	7122      	strb	r2, [r4, #4]
 800ea4e:	f88d 1014 	strb.w	r1, [sp, #20]
 800ea52:	b1cb      	cbz	r3, 800ea88 <uxr_buffer_create_participant_bin+0x5c>
 800ea54:	f88d 201c 	strb.w	r2, [sp, #28]
 800ea58:	9308      	str	r3, [sp, #32]
 800ea5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea5e:	a915      	add	r1, sp, #84	@ 0x54
 800ea60:	a809      	add	r0, sp, #36	@ 0x24
 800ea62:	f7ff ff27 	bl	800e8b4 <ucdr_init_buffer>
 800ea66:	a905      	add	r1, sp, #20
 800ea68:	a809      	add	r0, sp, #36	@ 0x24
 800ea6a:	f002 fdb3 	bl	80115d4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800ea6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea70:	9600      	str	r6, [sp, #0]
 800ea72:	9401      	str	r4, [sp, #4]
 800ea74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ea78:	60e3      	str	r3, [r4, #12]
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	f7ff ffa9 	bl	800e9d4 <uxr_common_create_entity>
 800ea82:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800ea86:	bd70      	pop	{r4, r5, r6, pc}
 800ea88:	f88d 301c 	strb.w	r3, [sp, #28]
 800ea8c:	e7e5      	b.n	800ea5a <uxr_buffer_create_participant_bin+0x2e>
 800ea8e:	bf00      	nop

0800ea90 <uxr_buffer_create_topic_bin>:
 800ea90:	b570      	push	{r4, r5, r6, lr}
 800ea92:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800ea96:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ea9a:	9105      	str	r1, [sp, #20]
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	a997      	add	r1, sp, #604	@ 0x25c
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800eaa8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800eaac:	f000 f9b0 	bl	800ee10 <uxr_object_id_to_raw>
 800eab0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800eab2:	9306      	str	r3, [sp, #24]
 800eab4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800eab6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eab8:	2303      	movs	r3, #3
 800eaba:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800eabe:	2301      	movs	r3, #1
 800eac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eac4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800eac8:	a917      	add	r1, sp, #92	@ 0x5c
 800eaca:	2300      	movs	r3, #0
 800eacc:	a80b      	add	r0, sp, #44	@ 0x2c
 800eace:	f88d 301c 	strb.w	r3, [sp, #28]
 800ead2:	f7ff feef 	bl	800e8b4 <ucdr_init_buffer>
 800ead6:	a906      	add	r1, sp, #24
 800ead8:	a80b      	add	r0, sp, #44	@ 0x2c
 800eada:	f002 fd9d 	bl	8011618 <uxr_serialize_OBJK_Topic_Binary>
 800eade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eae0:	9316      	str	r3, [sp, #88]	@ 0x58
 800eae2:	ac13      	add	r4, sp, #76	@ 0x4c
 800eae4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800eae8:	9600      	str	r6, [sp, #0]
 800eaea:	9401      	str	r4, [sp, #4]
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	4628      	mov	r0, r5
 800eaf0:	f7ff ff70 	bl	800e9d4 <uxr_common_create_entity>
 800eaf4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800eaf8:	bd70      	pop	{r4, r5, r6, pc}
 800eafa:	bf00      	nop

0800eafc <uxr_buffer_create_publisher_bin>:
 800eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eafe:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800eb02:	4605      	mov	r5, r0
 800eb04:	9105      	str	r1, [sp, #20]
 800eb06:	4618      	mov	r0, r3
 800eb08:	2603      	movs	r6, #3
 800eb0a:	a992      	add	r1, sp, #584	@ 0x248
 800eb0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800eb10:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800eb14:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800eb18:	f000 f97a 	bl	800ee10 <uxr_object_id_to_raw>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb22:	a912      	add	r1, sp, #72	@ 0x48
 800eb24:	a806      	add	r0, sp, #24
 800eb26:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800eb2a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800eb2e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800eb32:	f7ff febf 	bl	800e8b4 <ucdr_init_buffer>
 800eb36:	a993      	add	r1, sp, #588	@ 0x24c
 800eb38:	a806      	add	r0, sp, #24
 800eb3a:	f002 fe21 	bl	8011780 <uxr_serialize_OBJK_Publisher_Binary>
 800eb3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb40:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb42:	ac0e      	add	r4, sp, #56	@ 0x38
 800eb44:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800eb48:	9700      	str	r7, [sp, #0]
 800eb4a:	9401      	str	r4, [sp, #4]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f7ff ff40 	bl	800e9d4 <uxr_common_create_entity>
 800eb54:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800eb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb5a:	bf00      	nop

0800eb5c <uxr_buffer_create_datawriter_bin>:
 800eb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb60:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800eb64:	ac1d      	add	r4, sp, #116	@ 0x74
 800eb66:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800eb6a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800eb6e:	9105      	str	r1, [sp, #20]
 800eb70:	4606      	mov	r6, r0
 800eb72:	a9a1      	add	r1, sp, #644	@ 0x284
 800eb74:	4618      	mov	r0, r3
 800eb76:	2305      	movs	r3, #5
 800eb78:	7123      	strb	r3, [r4, #4]
 800eb7a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800eb7e:	2703      	movs	r7, #3
 800eb80:	f000 f946 	bl	800ee10 <uxr_object_id_to_raw>
 800eb84:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800eb86:	7227      	strb	r7, [r4, #8]
 800eb88:	a90e      	add	r1, sp, #56	@ 0x38
 800eb8a:	f000 f941 	bl	800ee10 <uxr_object_id_to_raw>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800eb94:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800eb98:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800eb9c:	3d00      	subs	r5, #0
 800eb9e:	bf18      	it	ne
 800eba0:	2501      	movne	r5, #1
 800eba2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800eba6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ebaa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ebae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ebb8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ebbc:	bb8a      	cbnz	r2, 800ec22 <uxr_buffer_create_datawriter_bin+0xc6>
 800ebbe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebc2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ebc6:	f04f 0c13 	mov.w	ip, #19
 800ebca:	250b      	movs	r5, #11
 800ebcc:	2221      	movs	r2, #33	@ 0x21
 800ebce:	2111      	movs	r1, #17
 800ebd0:	2009      	movs	r0, #9
 800ebd2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800ebd6:	b923      	cbnz	r3, 800ebe2 <uxr_buffer_create_datawriter_bin+0x86>
 800ebd8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ebdc:	4672      	mov	r2, lr
 800ebde:	4661      	mov	r1, ip
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d025      	beq.n	800ec36 <uxr_buffer_create_datawriter_bin+0xda>
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d029      	beq.n	800ec42 <uxr_buffer_create_datawriter_bin+0xe6>
 800ebee:	b32b      	cbz	r3, 800ec3c <uxr_buffer_create_datawriter_bin+0xe0>
 800ebf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebf4:	a921      	add	r1, sp, #132	@ 0x84
 800ebf6:	a806      	add	r0, sp, #24
 800ebf8:	f7ff fe5c 	bl	800e8b4 <ucdr_init_buffer>
 800ebfc:	a90e      	add	r1, sp, #56	@ 0x38
 800ebfe:	a806      	add	r0, sp, #24
 800ec00:	f002 fe34 	bl	801186c <uxr_serialize_OBJK_DataWriter_Binary>
 800ec04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec06:	f8cd 8000 	str.w	r8, [sp]
 800ec0a:	9401      	str	r4, [sp, #4]
 800ec0c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ec10:	60e3      	str	r3, [r4, #12]
 800ec12:	4630      	mov	r0, r6
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	f7ff fedd 	bl	800e9d4 <uxr_common_create_entity>
 800ec1a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ec1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec22:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ec26:	f04f 0c12 	mov.w	ip, #18
 800ec2a:	250a      	movs	r5, #10
 800ec2c:	2220      	movs	r2, #32
 800ec2e:	2110      	movs	r1, #16
 800ec30:	2008      	movs	r0, #8
 800ec32:	2702      	movs	r7, #2
 800ec34:	e7cd      	b.n	800ebd2 <uxr_buffer_create_datawriter_bin+0x76>
 800ec36:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ec3a:	e7d9      	b.n	800ebf0 <uxr_buffer_create_datawriter_bin+0x94>
 800ec3c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ec40:	e7d6      	b.n	800ebf0 <uxr_buffer_create_datawriter_bin+0x94>
 800ec42:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ec46:	e7d3      	b.n	800ebf0 <uxr_buffer_create_datawriter_bin+0x94>

0800ec48 <get_custom_error>:
 800ec48:	4b01      	ldr	r3, [pc, #4]	@ (800ec50 <get_custom_error+0x8>)
 800ec4a:	7818      	ldrb	r0, [r3, #0]
 800ec4c:	4770      	bx	lr
 800ec4e:	bf00      	nop
 800ec50:	2000cb74 	.word	0x2000cb74

0800ec54 <recv_custom_msg>:
 800ec54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec58:	4693      	mov	fp, r2
 800ec5a:	b089      	sub	sp, #36	@ 0x24
 800ec5c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ec60:	9305      	str	r3, [sp, #20]
 800ec62:	468a      	mov	sl, r1
 800ec64:	2100      	movs	r1, #0
 800ec66:	4604      	mov	r4, r0
 800ec68:	f88d 101e 	strb.w	r1, [sp, #30]
 800ec6c:	b322      	cbz	r2, 800ecb8 <recv_custom_msg+0x64>
 800ec6e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800ec72:	f10d 081f 	add.w	r8, sp, #31
 800ec76:	af05      	add	r7, sp, #20
 800ec78:	f10d 061e 	add.w	r6, sp, #30
 800ec7c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ec80:	e002      	b.n	800ec88 <recv_custom_msg+0x34>
 800ec82:	9b05      	ldr	r3, [sp, #20]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	dd0f      	ble.n	800eca8 <recv_custom_msg+0x54>
 800ec88:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800ec8c:	4623      	mov	r3, r4
 800ec8e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ec92:	e9cd 5600 	strd	r5, r6, [sp]
 800ec96:	4622      	mov	r2, r4
 800ec98:	4648      	mov	r0, r9
 800ec9a:	f001 fca3 	bl	80105e4 <uxr_read_framed_msg>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d0ef      	beq.n	800ec82 <recv_custom_msg+0x2e>
 800eca2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eca6:	b1b3      	cbz	r3, 800ecd6 <recv_custom_msg+0x82>
 800eca8:	4b0f      	ldr	r3, [pc, #60]	@ (800ece8 <recv_custom_msg+0x94>)
 800ecaa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ecae:	701a      	strb	r2, [r3, #0]
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	b009      	add	sp, #36	@ 0x24
 800ecb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb8:	f10d 021f 	add.w	r2, sp, #31
 800ecbc:	9200      	str	r2, [sp, #0]
 800ecbe:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ecc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecc6:	4601      	mov	r1, r0
 800ecc8:	47a8      	blx	r5
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d0ec      	beq.n	800eca8 <recv_custom_msg+0x54>
 800ecce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d1e8      	bne.n	800eca8 <recv_custom_msg+0x54>
 800ecd6:	f8cb 0000 	str.w	r0, [fp]
 800ecda:	2001      	movs	r0, #1
 800ecdc:	f8ca 4000 	str.w	r4, [sl]
 800ece0:	b009      	add	sp, #36	@ 0x24
 800ece2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece6:	bf00      	nop
 800ece8:	2000cb74 	.word	0x2000cb74

0800ecec <send_custom_msg>:
 800ecec:	b530      	push	{r4, r5, lr}
 800ecee:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800ecf2:	b087      	sub	sp, #28
 800ecf4:	4615      	mov	r5, r2
 800ecf6:	b974      	cbnz	r4, 800ed16 <send_custom_msg+0x2a>
 800ecf8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800ecfc:	f10d 0317 	add.w	r3, sp, #23
 800ed00:	47a0      	blx	r4
 800ed02:	b108      	cbz	r0, 800ed08 <send_custom_msg+0x1c>
 800ed04:	42a8      	cmp	r0, r5
 800ed06:	d015      	beq.n	800ed34 <send_custom_msg+0x48>
 800ed08:	4b0c      	ldr	r3, [pc, #48]	@ (800ed3c <send_custom_msg+0x50>)
 800ed0a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ed0e:	701a      	strb	r2, [r3, #0]
 800ed10:	2000      	movs	r0, #0
 800ed12:	b007      	add	sp, #28
 800ed14:	bd30      	pop	{r4, r5, pc}
 800ed16:	460b      	mov	r3, r1
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f10d 0117 	add.w	r1, sp, #23
 800ed1e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ed22:	4602      	mov	r2, r0
 800ed24:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800ed28:	9500      	str	r5, [sp, #0]
 800ed2a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800ed2e:	f001 fa61 	bl	80101f4 <uxr_write_framed_msg>
 800ed32:	e7e6      	b.n	800ed02 <send_custom_msg+0x16>
 800ed34:	2001      	movs	r0, #1
 800ed36:	b007      	add	sp, #28
 800ed38:	bd30      	pop	{r4, r5, pc}
 800ed3a:	bf00      	nop
 800ed3c:	2000cb74 	.word	0x2000cb74

0800ed40 <uxr_set_custom_transport_callbacks>:
 800ed40:	b410      	push	{r4}
 800ed42:	9c01      	ldr	r4, [sp, #4]
 800ed44:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800ed48:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800ed4c:	9b02      	ldr	r3, [sp, #8]
 800ed4e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800ed52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed56:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800ed5a:	4770      	bx	lr

0800ed5c <uxr_init_custom_transport>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800ed62:	b303      	cbz	r3, 800eda6 <uxr_init_custom_transport+0x4a>
 800ed64:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800ed68:	4604      	mov	r4, r0
 800ed6a:	b1e2      	cbz	r2, 800eda6 <uxr_init_custom_transport+0x4a>
 800ed6c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800ed70:	b1ca      	cbz	r2, 800eda6 <uxr_init_custom_transport+0x4a>
 800ed72:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800ed76:	b1b2      	cbz	r2, 800eda6 <uxr_init_custom_transport+0x4a>
 800ed78:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800ed7c:	4798      	blx	r3
 800ed7e:	4605      	mov	r5, r0
 800ed80:	b188      	cbz	r0, 800eda6 <uxr_init_custom_transport+0x4a>
 800ed82:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ed86:	b98b      	cbnz	r3, 800edac <uxr_init_custom_transport+0x50>
 800ed88:	490b      	ldr	r1, [pc, #44]	@ (800edb8 <uxr_init_custom_transport+0x5c>)
 800ed8a:	4b0c      	ldr	r3, [pc, #48]	@ (800edbc <uxr_init_custom_transport+0x60>)
 800ed8c:	4a0c      	ldr	r2, [pc, #48]	@ (800edc0 <uxr_init_custom_transport+0x64>)
 800ed8e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800ed92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed96:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800ed9a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ed9e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800eda2:	4628      	mov	r0, r5
 800eda4:	bd38      	pop	{r3, r4, r5, pc}
 800eda6:	2500      	movs	r5, #0
 800eda8:	4628      	mov	r0, r5
 800edaa:	bd38      	pop	{r3, r4, r5, pc}
 800edac:	2100      	movs	r1, #0
 800edae:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800edb2:	f001 fa19 	bl	80101e8 <uxr_init_framing_io>
 800edb6:	e7e7      	b.n	800ed88 <uxr_init_custom_transport+0x2c>
 800edb8:	0800eced 	.word	0x0800eced
 800edbc:	0800ec55 	.word	0x0800ec55
 800edc0:	0800ec49 	.word	0x0800ec49

0800edc4 <uxr_close_custom_transport>:
 800edc4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800edc8:	4718      	bx	r3
 800edca:	bf00      	nop

0800edcc <uxr_object_id>:
 800edcc:	b082      	sub	sp, #8
 800edce:	2300      	movs	r3, #0
 800edd0:	f88d 1006 	strb.w	r1, [sp, #6]
 800edd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800edd8:	f360 030f 	bfi	r3, r0, #0, #16
 800eddc:	f362 431f 	bfi	r3, r2, #16, #16
 800ede0:	4618      	mov	r0, r3
 800ede2:	b002      	add	sp, #8
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop

0800ede8 <uxr_object_id_from_raw>:
 800ede8:	7843      	ldrb	r3, [r0, #1]
 800edea:	7801      	ldrb	r1, [r0, #0]
 800edec:	b082      	sub	sp, #8
 800edee:	f003 020f 	and.w	r2, r3, #15
 800edf2:	f88d 2006 	strb.w	r2, [sp, #6]
 800edf6:	091b      	lsrs	r3, r3, #4
 800edf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800edfc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ee00:	2000      	movs	r0, #0
 800ee02:	f363 000f 	bfi	r0, r3, #0, #16
 800ee06:	f362 401f 	bfi	r0, r2, #16, #16
 800ee0a:	b002      	add	sp, #8
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop

0800ee10 <uxr_object_id_to_raw>:
 800ee10:	4602      	mov	r2, r0
 800ee12:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ee16:	b082      	sub	sp, #8
 800ee18:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ee1c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ee20:	f881 c000 	strb.w	ip, [r1]
 800ee24:	7048      	strb	r0, [r1, #1]
 800ee26:	b002      	add	sp, #8
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop

0800ee2c <uxr_buffer_cancel_data>:
 800ee2c:	b510      	push	{r4, lr}
 800ee2e:	b094      	sub	sp, #80	@ 0x50
 800ee30:	2300      	movs	r3, #0
 800ee32:	9202      	str	r2, [sp, #8]
 800ee34:	9205      	str	r2, [sp, #20]
 800ee36:	9301      	str	r3, [sp, #4]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ee3e:	f88d 301e 	strb.w	r3, [sp, #30]
 800ee42:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ee46:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ee4a:	2308      	movs	r3, #8
 800ee4c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	2210      	movs	r2, #16
 800ee54:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee56:	4604      	mov	r4, r0
 800ee58:	9103      	str	r1, [sp, #12]
 800ee5a:	f001 f85f 	bl	800ff1c <uxr_prepare_stream_to_write_submessage>
 800ee5e:	b918      	cbnz	r0, 800ee68 <uxr_buffer_cancel_data+0x3c>
 800ee60:	4604      	mov	r4, r0
 800ee62:	4620      	mov	r0, r4
 800ee64:	b014      	add	sp, #80	@ 0x50
 800ee66:	bd10      	pop	{r4, pc}
 800ee68:	9905      	ldr	r1, [sp, #20]
 800ee6a:	aa06      	add	r2, sp, #24
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f001 f98b 	bl	8010188 <uxr_init_base_object_request>
 800ee72:	a906      	add	r1, sp, #24
 800ee74:	4604      	mov	r4, r0
 800ee76:	a80c      	add	r0, sp, #48	@ 0x30
 800ee78:	f003 f82c 	bl	8011ed4 <uxr_serialize_READ_DATA_Payload>
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	b014      	add	sp, #80	@ 0x50
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	bf00      	nop

0800ee84 <read_submessage_format>:
 800ee84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee88:	b095      	sub	sp, #84	@ 0x54
 800ee8a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ee8e:	b113      	cbz	r3, 800ee96 <read_submessage_format+0x12>
 800ee90:	b015      	add	sp, #84	@ 0x54
 800ee92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee96:	460c      	mov	r4, r1
 800ee98:	4615      	mov	r5, r2
 800ee9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ee9e:	4607      	mov	r7, r0
 800eea0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800eea2:	9004      	str	r0, [sp, #16]
 800eea4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800eea6:	9005      	str	r0, [sp, #20]
 800eea8:	1a52      	subs	r2, r2, r1
 800eeaa:	a80c      	add	r0, sp, #48	@ 0x30
 800eeac:	4699      	mov	r9, r3
 800eeae:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800eeb2:	f7ff fcff 	bl	800e8b4 <ucdr_init_buffer>
 800eeb6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800eeba:	a80c      	add	r0, sp, #48	@ 0x30
 800eebc:	f7ff fcce 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 800eec0:	69e2      	ldr	r2, [r4, #28]
 800eec2:	b19a      	cbz	r2, 800eeec <read_submessage_format+0x68>
 800eec4:	f1b8 0f07 	cmp.w	r8, #7
 800eec8:	f882 9014 	strb.w	r9, [r2, #20]
 800eecc:	d040      	beq.n	800ef50 <read_submessage_format+0xcc>
 800eece:	f1b8 0f08 	cmp.w	r8, #8
 800eed2:	d02e      	beq.n	800ef32 <read_submessage_format+0xae>
 800eed4:	f1b8 0f06 	cmp.w	r8, #6
 800eed8:	d011      	beq.n	800eefe <read_submessage_format+0x7a>
 800eeda:	2301      	movs	r3, #1
 800eedc:	7513      	strb	r3, [r2, #20]
 800eede:	4629      	mov	r1, r5
 800eee0:	4620      	mov	r0, r4
 800eee2:	f7ff fd37 	bl	800e954 <ucdr_advance_buffer>
 800eee6:	b015      	add	sp, #84	@ 0x54
 800eee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeec:	f1b8 0f07 	cmp.w	r8, #7
 800eef0:	d02e      	beq.n	800ef50 <read_submessage_format+0xcc>
 800eef2:	f1b8 0f08 	cmp.w	r8, #8
 800eef6:	d01c      	beq.n	800ef32 <read_submessage_format+0xae>
 800eef8:	f1b8 0f06 	cmp.w	r8, #6
 800eefc:	d1ef      	bne.n	800eede <read_submessage_format+0x5a>
 800eefe:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800ef02:	f1b8 0f00 	cmp.w	r8, #0
 800ef06:	d011      	beq.n	800ef2c <read_submessage_format+0xa8>
 800ef08:	ab0c      	add	r3, sp, #48	@ 0x30
 800ef0a:	e9cd 3500 	strd	r3, r5, [sp]
 800ef0e:	2306      	movs	r3, #6
 800ef10:	f88d 3016 	strb.w	r3, [sp, #22]
 800ef14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef18:	9302      	str	r3, [sp, #8]
 800ef1a:	4632      	mov	r2, r6
 800ef1c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ef20:	4638      	mov	r0, r7
 800ef22:	47c0      	blx	r8
 800ef24:	2301      	movs	r3, #1
 800ef26:	69e2      	ldr	r2, [r4, #28]
 800ef28:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ef2c:	2a00      	cmp	r2, #0
 800ef2e:	d1d4      	bne.n	800eeda <read_submessage_format+0x56>
 800ef30:	e7d5      	b.n	800eede <read_submessage_format+0x5a>
 800ef32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d0f8      	beq.n	800ef2c <read_submessage_format+0xa8>
 800ef3a:	a906      	add	r1, sp, #24
 800ef3c:	a80c      	add	r0, sp, #48	@ 0x30
 800ef3e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ef42:	f003 f89b 	bl	801207c <uxr_deserialize_SampleIdentity>
 800ef46:	b9a0      	cbnz	r0, 800ef72 <read_submessage_format+0xee>
 800ef48:	69e2      	ldr	r2, [r4, #28]
 800ef4a:	2a00      	cmp	r2, #0
 800ef4c:	d1c5      	bne.n	800eeda <read_submessage_format+0x56>
 800ef4e:	e7c6      	b.n	800eede <read_submessage_format+0x5a>
 800ef50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef54:	b13b      	cbz	r3, 800ef66 <read_submessage_format+0xe2>
 800ef56:	a906      	add	r1, sp, #24
 800ef58:	a80c      	add	r0, sp, #48	@ 0x30
 800ef5a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ef5e:	f002 fd53 	bl	8011a08 <uxr_deserialize_BaseObjectRequest>
 800ef62:	bb60      	cbnz	r0, 800efbe <read_submessage_format+0x13a>
 800ef64:	69e2      	ldr	r2, [r4, #28]
 800ef66:	68a3      	ldr	r3, [r4, #8]
 800ef68:	442b      	add	r3, r5
 800ef6a:	60a3      	str	r3, [r4, #8]
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	d1b4      	bne.n	800eeda <read_submessage_format+0x56>
 800ef70:	e7b5      	b.n	800eede <read_submessage_format+0x5a>
 800ef72:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ef76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef78:	1a52      	subs	r2, r2, r1
 800ef7a:	eba8 0803 	sub.w	r8, r8, r3
 800ef7e:	a80c      	add	r0, sp, #48	@ 0x30
 800ef80:	f7ff fc98 	bl	800e8b4 <ucdr_init_buffer>
 800ef84:	44a8      	add	r8, r5
 800ef86:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ef8a:	a80c      	add	r0, sp, #48	@ 0x30
 800ef8c:	f7ff fc66 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 800ef90:	fa1f f888 	uxth.w	r8, r8
 800ef94:	ab0c      	add	r3, sp, #48	@ 0x30
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	f8cd 8004 	str.w	r8, [sp, #4]
 800ef9c:	2108      	movs	r1, #8
 800ef9e:	f88d 1016 	strb.w	r1, [sp, #22]
 800efa2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800efa6:	9102      	str	r1, [sp, #8]
 800efa8:	ab06      	add	r3, sp, #24
 800efaa:	4632      	mov	r2, r6
 800efac:	9905      	ldr	r1, [sp, #20]
 800efae:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800efb2:	4638      	mov	r0, r7
 800efb4:	47b0      	blx	r6
 800efb6:	2301      	movs	r3, #1
 800efb8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800efbc:	e7c4      	b.n	800ef48 <read_submessage_format+0xc4>
 800efbe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800efc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efc4:	1a52      	subs	r2, r2, r1
 800efc6:	a80c      	add	r0, sp, #48	@ 0x30
 800efc8:	eba8 0803 	sub.w	r8, r8, r3
 800efcc:	f7ff fc72 	bl	800e8b4 <ucdr_init_buffer>
 800efd0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800efd4:	a80c      	add	r0, sp, #48	@ 0x30
 800efd6:	f7ff fc41 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 800efda:	ab0c      	add	r3, sp, #48	@ 0x30
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800efe2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800efe6:	44a8      	add	r8, r5
 800efe8:	fa1f f888 	uxth.w	r8, r8
 800efec:	f8cd 8004 	str.w	r8, [sp, #4]
 800eff0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800eff4:	2107      	movs	r1, #7
 800eff6:	f88d 1016 	strb.w	r1, [sp, #22]
 800effa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800effe:	9102      	str	r1, [sp, #8]
 800f000:	4632      	mov	r2, r6
 800f002:	b29b      	uxth	r3, r3
 800f004:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800f008:	9905      	ldr	r1, [sp, #20]
 800f00a:	4638      	mov	r0, r7
 800f00c:	47b0      	blx	r6
 800f00e:	2301      	movs	r3, #1
 800f010:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f014:	e7a6      	b.n	800ef64 <read_submessage_format+0xe0>
 800f016:	bf00      	nop

0800f018 <on_get_fragmentation_info>:
 800f018:	b500      	push	{lr}
 800f01a:	b08b      	sub	sp, #44	@ 0x2c
 800f01c:	4601      	mov	r1, r0
 800f01e:	2204      	movs	r2, #4
 800f020:	a802      	add	r0, sp, #8
 800f022:	f7ff fc47 	bl	800e8b4 <ucdr_init_buffer>
 800f026:	f10d 0305 	add.w	r3, sp, #5
 800f02a:	f10d 0206 	add.w	r2, sp, #6
 800f02e:	a901      	add	r1, sp, #4
 800f030:	a802      	add	r0, sp, #8
 800f032:	f001 febd 	bl	8010db0 <uxr_read_submessage_header>
 800f036:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f03a:	2b0d      	cmp	r3, #13
 800f03c:	d003      	beq.n	800f046 <on_get_fragmentation_info+0x2e>
 800f03e:	2000      	movs	r0, #0
 800f040:	b00b      	add	sp, #44	@ 0x2c
 800f042:	f85d fb04 	ldr.w	pc, [sp], #4
 800f046:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f04a:	f013 0f02 	tst.w	r3, #2
 800f04e:	bf14      	ite	ne
 800f050:	2002      	movne	r0, #2
 800f052:	2001      	moveq	r0, #1
 800f054:	b00b      	add	sp, #44	@ 0x2c
 800f056:	f85d fb04 	ldr.w	pc, [sp], #4
 800f05a:	bf00      	nop

0800f05c <read_submessage_get_info>:
 800f05c:	b570      	push	{r4, r5, r6, lr}
 800f05e:	2500      	movs	r5, #0
 800f060:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f064:	4604      	mov	r4, r0
 800f066:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f06a:	460e      	mov	r6, r1
 800f06c:	a810      	add	r0, sp, #64	@ 0x40
 800f06e:	4629      	mov	r1, r5
 800f070:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f074:	f008 fef6 	bl	8017e64 <memset>
 800f078:	a903      	add	r1, sp, #12
 800f07a:	4630      	mov	r0, r6
 800f07c:	f002 fe6c 	bl	8011d58 <uxr_deserialize_GET_INFO_Payload>
 800f080:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f084:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f088:	4620      	mov	r0, r4
 800f08a:	f001 f875 	bl	8010178 <uxr_session_header_offset>
 800f08e:	462b      	mov	r3, r5
 800f090:	9000      	str	r0, [sp, #0]
 800f092:	220c      	movs	r2, #12
 800f094:	a905      	add	r1, sp, #20
 800f096:	a808      	add	r0, sp, #32
 800f098:	f7ff fbfa 	bl	800e890 <ucdr_init_buffer_origin_offset>
 800f09c:	a910      	add	r1, sp, #64	@ 0x40
 800f09e:	a808      	add	r0, sp, #32
 800f0a0:	f002 fecc 	bl	8011e3c <uxr_serialize_INFO_Payload>
 800f0a4:	9b08      	ldr	r3, [sp, #32]
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f001 f80e 	bl	80100cc <uxr_stamp_session_header>
 800f0b0:	a808      	add	r0, sp, #32
 800f0b2:	f7ff fc2b 	bl	800e90c <ucdr_buffer_length>
 800f0b6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	a905      	add	r1, sp, #20
 800f0bc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f0c0:	47a0      	blx	r4
 800f0c2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}

0800f0c8 <write_submessage_acknack.isra.0>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	b092      	sub	sp, #72	@ 0x48
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	460e      	mov	r6, r1
 800f0d0:	4614      	mov	r4, r2
 800f0d2:	f001 f851 	bl	8010178 <uxr_session_header_offset>
 800f0d6:	a905      	add	r1, sp, #20
 800f0d8:	9000      	str	r0, [sp, #0]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	a80a      	add	r0, sp, #40	@ 0x28
 800f0de:	2211      	movs	r2, #17
 800f0e0:	f7ff fbd6 	bl	800e890 <ucdr_init_buffer_origin_offset>
 800f0e4:	2218      	movs	r2, #24
 800f0e6:	fb02 5404 	mla	r4, r2, r4, r5
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	2205      	movs	r2, #5
 800f0ee:	3450      	adds	r4, #80	@ 0x50
 800f0f0:	210a      	movs	r1, #10
 800f0f2:	a80a      	add	r0, sp, #40	@ 0x28
 800f0f4:	f001 fe42 	bl	8010d7c <uxr_buffer_submessage_header>
 800f0f8:	a903      	add	r1, sp, #12
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f007 fb52 	bl	80167a4 <uxr_compute_acknack>
 800f100:	ba40      	rev16	r0, r0
 800f102:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f106:	a903      	add	r1, sp, #12
 800f108:	a80a      	add	r0, sp, #40	@ 0x28
 800f10a:	f88d 6010 	strb.w	r6, [sp, #16]
 800f10e:	f002 ff05 	bl	8011f1c <uxr_serialize_ACKNACK_Payload>
 800f112:	2200      	movs	r2, #0
 800f114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f116:	4611      	mov	r1, r2
 800f118:	4628      	mov	r0, r5
 800f11a:	f000 ffd7 	bl	80100cc <uxr_stamp_session_header>
 800f11e:	a80a      	add	r0, sp, #40	@ 0x28
 800f120:	f7ff fbf4 	bl	800e90c <ucdr_buffer_length>
 800f124:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f126:	4602      	mov	r2, r0
 800f128:	a905      	add	r1, sp, #20
 800f12a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f12e:	47a0      	blx	r4
 800f130:	b012      	add	sp, #72	@ 0x48
 800f132:	bd70      	pop	{r4, r5, r6, pc}
 800f134:	0000      	movs	r0, r0
	...

0800f138 <uxr_init_session>:
 800f138:	b510      	push	{r4, lr}
 800f13a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f170 <uxr_init_session+0x38>
 800f13e:	2300      	movs	r3, #0
 800f140:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f144:	4604      	mov	r4, r0
 800f146:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f14a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f14e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f152:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f156:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f15a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f15e:	2181      	movs	r1, #129	@ 0x81
 800f160:	f000 ff20 	bl	800ffa4 <uxr_init_session_info>
 800f164:	f104 0008 	add.w	r0, r4, #8
 800f168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f16c:	f001 bd22 	b.w	8010bb4 <uxr_init_stream_storage>
	...

0800f178 <uxr_set_status_callback>:
 800f178:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop

0800f180 <uxr_set_topic_callback>:
 800f180:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop

0800f188 <uxr_set_request_callback>:
 800f188:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop

0800f190 <uxr_set_reply_callback>:
 800f190:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop

0800f198 <uxr_create_output_best_effort_stream>:
 800f198:	b510      	push	{r4, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	e9cd 2100 	strd	r2, r1, [sp]
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	f000 ffe9 	bl	8010178 <uxr_session_header_offset>
 800f1a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	f104 0008 	add.w	r0, r4, #8
 800f1b0:	b004      	add	sp, #16
 800f1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b6:	f001 bd47 	b.w	8010c48 <uxr_add_output_best_effort_buffer>
 800f1ba:	bf00      	nop

0800f1bc <uxr_create_output_reliable_stream>:
 800f1bc:	b510      	push	{r4, lr}
 800f1be:	b088      	sub	sp, #32
 800f1c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	9303      	str	r3, [sp, #12]
 800f1c8:	f000 ffd6 	bl	8010178 <uxr_session_header_offset>
 800f1cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f1d0:	9000      	str	r0, [sp, #0]
 800f1d2:	9905      	ldr	r1, [sp, #20]
 800f1d4:	f104 0008 	add.w	r0, r4, #8
 800f1d8:	f001 fd4a 	bl	8010c70 <uxr_add_output_reliable_buffer>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	b2c3      	uxtb	r3, r0
 800f1e0:	f363 0207 	bfi	r2, r3, #0, #8
 800f1e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f1e8:	f363 220f 	bfi	r2, r3, #8, #8
 800f1ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f1f0:	f363 4217 	bfi	r2, r3, #16, #8
 800f1f4:	0e03      	lsrs	r3, r0, #24
 800f1f6:	f363 621f 	bfi	r2, r3, #24, #8
 800f1fa:	4610      	mov	r0, r2
 800f1fc:	b008      	add	sp, #32
 800f1fe:	bd10      	pop	{r4, pc}

0800f200 <uxr_create_input_best_effort_stream>:
 800f200:	b082      	sub	sp, #8
 800f202:	3008      	adds	r0, #8
 800f204:	b002      	add	sp, #8
 800f206:	f001 bd4d 	b.w	8010ca4 <uxr_add_input_best_effort_buffer>
 800f20a:	bf00      	nop

0800f20c <uxr_create_input_reliable_stream>:
 800f20c:	b510      	push	{r4, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	4c0b      	ldr	r4, [pc, #44]	@ (800f240 <uxr_create_input_reliable_stream+0x34>)
 800f212:	9400      	str	r4, [sp, #0]
 800f214:	3008      	adds	r0, #8
 800f216:	f001 fd5b 	bl	8010cd0 <uxr_add_input_reliable_buffer>
 800f21a:	2200      	movs	r2, #0
 800f21c:	b2c3      	uxtb	r3, r0
 800f21e:	f363 0207 	bfi	r2, r3, #0, #8
 800f222:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f226:	f363 220f 	bfi	r2, r3, #8, #8
 800f22a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f22e:	f363 4217 	bfi	r2, r3, #16, #8
 800f232:	0e03      	lsrs	r3, r0, #24
 800f234:	f363 621f 	bfi	r2, r3, #24, #8
 800f238:	4610      	mov	r0, r2
 800f23a:	b004      	add	sp, #16
 800f23c:	bd10      	pop	{r4, pc}
 800f23e:	bf00      	nop
 800f240:	0800f019 	.word	0x0800f019

0800f244 <uxr_epoch_nanos>:
 800f244:	b510      	push	{r4, lr}
 800f246:	4604      	mov	r4, r0
 800f248:	f001 fdf8 	bl	8010e3c <uxr_nanos>
 800f24c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f250:	1ac0      	subs	r0, r0, r3
 800f252:	eb61 0102 	sbc.w	r1, r1, r2
 800f256:	bd10      	pop	{r4, pc}

0800f258 <uxr_flash_output_streams>:
 800f258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f25c:	7e03      	ldrb	r3, [r0, #24]
 800f25e:	b084      	sub	sp, #16
 800f260:	4604      	mov	r4, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	d035      	beq.n	800f2d2 <uxr_flash_output_streams+0x7a>
 800f266:	f04f 0900 	mov.w	r9, #0
 800f26a:	4648      	mov	r0, r9
 800f26c:	f10d 0802 	add.w	r8, sp, #2
 800f270:	af03      	add	r7, sp, #12
 800f272:	ae02      	add	r6, sp, #8
 800f274:	e006      	b.n	800f284 <uxr_flash_output_streams+0x2c>
 800f276:	7e23      	ldrb	r3, [r4, #24]
 800f278:	f109 0901 	add.w	r9, r9, #1
 800f27c:	fa5f f089 	uxtb.w	r0, r9
 800f280:	4283      	cmp	r3, r0
 800f282:	d926      	bls.n	800f2d2 <uxr_flash_output_streams+0x7a>
 800f284:	2201      	movs	r2, #1
 800f286:	4611      	mov	r1, r2
 800f288:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f28c:	f001 fc3e 	bl	8010b0c <uxr_stream_id>
 800f290:	3508      	adds	r5, #8
 800f292:	4684      	mov	ip, r0
 800f294:	4643      	mov	r3, r8
 800f296:	463a      	mov	r2, r7
 800f298:	4631      	mov	r1, r6
 800f29a:	4628      	mov	r0, r5
 800f29c:	f8cd c004 	str.w	ip, [sp, #4]
 800f2a0:	f007 fb06 	bl	80168b0 <uxr_prepare_best_effort_buffer_to_send>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d0e6      	beq.n	800f276 <uxr_flash_output_streams+0x1e>
 800f2a8:	9b02      	ldr	r3, [sp, #8]
 800f2aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f2ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	f000 ff0a 	bl	80100cc <uxr_stamp_session_header>
 800f2b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f2ba:	9a03      	ldr	r2, [sp, #12]
 800f2bc:	685d      	ldr	r5, [r3, #4]
 800f2be:	6818      	ldr	r0, [r3, #0]
 800f2c0:	9902      	ldr	r1, [sp, #8]
 800f2c2:	47a8      	blx	r5
 800f2c4:	f109 0901 	add.w	r9, r9, #1
 800f2c8:	7e23      	ldrb	r3, [r4, #24]
 800f2ca:	fa5f f089 	uxtb.w	r0, r9
 800f2ce:	4283      	cmp	r3, r0
 800f2d0:	d8d8      	bhi.n	800f284 <uxr_flash_output_streams+0x2c>
 800f2d2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f2d6:	b38b      	cbz	r3, 800f33c <uxr_flash_output_streams+0xe4>
 800f2d8:	f04f 0900 	mov.w	r9, #0
 800f2dc:	f10d 0802 	add.w	r8, sp, #2
 800f2e0:	af03      	add	r7, sp, #12
 800f2e2:	ae02      	add	r6, sp, #8
 800f2e4:	4648      	mov	r0, r9
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	2102      	movs	r1, #2
 800f2ea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f2ee:	f001 fc0d 	bl	8010b0c <uxr_stream_id>
 800f2f2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f2f6:	3520      	adds	r5, #32
 800f2f8:	9001      	str	r0, [sp, #4]
 800f2fa:	e00d      	b.n	800f318 <uxr_flash_output_streams+0xc0>
 800f2fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f300:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f304:	9b02      	ldr	r3, [sp, #8]
 800f306:	f000 fee1 	bl	80100cc <uxr_stamp_session_header>
 800f30a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f30c:	9a03      	ldr	r2, [sp, #12]
 800f30e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f312:	9902      	ldr	r1, [sp, #8]
 800f314:	6818      	ldr	r0, [r3, #0]
 800f316:	47d0      	blx	sl
 800f318:	4643      	mov	r3, r8
 800f31a:	463a      	mov	r2, r7
 800f31c:	4631      	mov	r1, r6
 800f31e:	4628      	mov	r0, r5
 800f320:	f007 fce4 	bl	8016cec <uxr_prepare_next_reliable_buffer_to_send>
 800f324:	4603      	mov	r3, r0
 800f326:	4620      	mov	r0, r4
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1e7      	bne.n	800f2fc <uxr_flash_output_streams+0xa4>
 800f32c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f330:	f109 0901 	add.w	r9, r9, #1
 800f334:	fa5f f089 	uxtb.w	r0, r9
 800f338:	4283      	cmp	r3, r0
 800f33a:	d8d4      	bhi.n	800f2e6 <uxr_flash_output_streams+0x8e>
 800f33c:	b004      	add	sp, #16
 800f33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f342:	bf00      	nop

0800f344 <read_submessage_info>:
 800f344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f348:	460d      	mov	r5, r1
 800f34a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f34e:	4669      	mov	r1, sp
 800f350:	4607      	mov	r7, r0
 800f352:	4628      	mov	r0, r5
 800f354:	f002 fc0e 	bl	8011b74 <uxr_deserialize_BaseObjectReply>
 800f358:	a902      	add	r1, sp, #8
 800f35a:	4604      	mov	r4, r0
 800f35c:	4628      	mov	r0, r5
 800f35e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f362:	f7fe fab7 	bl	800d8d4 <ucdr_deserialize_bool>
 800f366:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f36a:	4004      	ands	r4, r0
 800f36c:	b2e4      	uxtb	r4, r4
 800f36e:	b95b      	cbnz	r3, 800f388 <read_submessage_info+0x44>
 800f370:	a987      	add	r1, sp, #540	@ 0x21c
 800f372:	4628      	mov	r0, r5
 800f374:	f7fe faae 	bl	800d8d4 <ucdr_deserialize_bool>
 800f378:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f37c:	4606      	mov	r6, r0
 800f37e:	b94b      	cbnz	r3, 800f394 <read_submessage_info+0x50>
 800f380:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f388:	a903      	add	r1, sp, #12
 800f38a:	4628      	mov	r0, r5
 800f38c:	f002 fa9a 	bl	80118c4 <uxr_deserialize_ObjectVariant>
 800f390:	4004      	ands	r4, r0
 800f392:	e7ed      	b.n	800f370 <read_submessage_info+0x2c>
 800f394:	a988      	add	r1, sp, #544	@ 0x220
 800f396:	4628      	mov	r0, r5
 800f398:	f7fe faca 	bl	800d930 <ucdr_deserialize_uint8_t>
 800f39c:	4234      	tst	r4, r6
 800f39e:	d0ef      	beq.n	800f380 <read_submessage_info+0x3c>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d0ed      	beq.n	800f380 <read_submessage_info+0x3c>
 800f3a4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f3a8:	2b0d      	cmp	r3, #13
 800f3aa:	d1e9      	bne.n	800f380 <read_submessage_info+0x3c>
 800f3ac:	a98a      	add	r1, sp, #552	@ 0x228
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f7ff f890 	bl	800e4d4 <ucdr_deserialize_int16_t>
 800f3b4:	b140      	cbz	r0, 800f3c8 <read_submessage_info+0x84>
 800f3b6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	dd07      	ble.n	800f3ce <read_submessage_info+0x8a>
 800f3be:	f1b8 0f00 	cmp.w	r8, #0
 800f3c2:	bf14      	ite	ne
 800f3c4:	2001      	movne	r0, #1
 800f3c6:	2002      	moveq	r0, #2
 800f3c8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f3cc:	e7d8      	b.n	800f380 <read_submessage_info+0x3c>
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	e7fa      	b.n	800f3c8 <read_submessage_info+0x84>
 800f3d2:	bf00      	nop

0800f3d4 <read_submessage_list>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	b097      	sub	sp, #92	@ 0x5c
 800f3da:	4ec1      	ldr	r6, [pc, #772]	@ (800f6e0 <read_submessage_list+0x30c>)
 800f3dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3de:	4604      	mov	r4, r0
 800f3e0:	460d      	mov	r5, r1
 800f3e2:	f04f 0801 	mov.w	r8, #1
 800f3e6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f3ea:	aa0c      	add	r2, sp, #48	@ 0x30
 800f3ec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	f001 fcdd 	bl	8010db0 <uxr_read_submessage_header>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	f000 813e 	beq.w	800f678 <read_submessage_list+0x2a4>
 800f3fc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f400:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f404:	3b02      	subs	r3, #2
 800f406:	2b0d      	cmp	r3, #13
 800f408:	d8ed      	bhi.n	800f3e6 <read_submessage_list+0x12>
 800f40a:	a101      	add	r1, pc, #4	@ (adr r1, 800f410 <read_submessage_list+0x3c>)
 800f40c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f410:	0800f66f 	.word	0x0800f66f
 800f414:	0800f3e7 	.word	0x0800f3e7
 800f418:	0800f65f 	.word	0x0800f65f
 800f41c:	0800f5fd 	.word	0x0800f5fd
 800f420:	0800f5f3 	.word	0x0800f5f3
 800f424:	0800f3e7 	.word	0x0800f3e7
 800f428:	0800f3e7 	.word	0x0800f3e7
 800f42c:	0800f553 	.word	0x0800f553
 800f430:	0800f4e3 	.word	0x0800f4e3
 800f434:	0800f4a3 	.word	0x0800f4a3
 800f438:	0800f3e7 	.word	0x0800f3e7
 800f43c:	0800f3e7 	.word	0x0800f3e7
 800f440:	0800f3e7 	.word	0x0800f3e7
 800f444:	0800f449 	.word	0x0800f449
 800f448:	a910      	add	r1, sp, #64	@ 0x40
 800f44a:	4628      	mov	r0, r5
 800f44c:	f002 fdc4 	bl	8011fd8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f450:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f454:	f1b9 0f00 	cmp.w	r9, #0
 800f458:	f000 8116 	beq.w	800f688 <read_submessage_list+0x2b4>
 800f45c:	f001 fcee 	bl	8010e3c <uxr_nanos>
 800f460:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f462:	4602      	mov	r2, r0
 800f464:	460b      	mov	r3, r1
 800f466:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f468:	2100      	movs	r1, #0
 800f46a:	468c      	mov	ip, r1
 800f46c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f470:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f474:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f476:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f478:	468c      	mov	ip, r1
 800f47a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f47e:	46e2      	mov	sl, ip
 800f480:	46bc      	mov	ip, r7
 800f482:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f486:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f48a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f48e:	e9cd 7100 	strd	r7, r1, [sp]
 800f492:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f496:	9106      	str	r1, [sp, #24]
 800f498:	4620      	mov	r0, r4
 800f49a:	47c8      	blx	r9
 800f49c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f4a0:	e7a1      	b.n	800f3e6 <read_submessage_list+0x12>
 800f4a2:	a910      	add	r1, sp, #64	@ 0x40
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	f002 fd77 	bl	8011f98 <uxr_deserialize_HEARTBEAT_Payload>
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f4b0:	f001 fb56 	bl	8010b60 <uxr_stream_id_from_raw>
 800f4b4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f4b8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	f104 0008 	add.w	r0, r4, #8
 800f4c0:	f001 fc3c 	bl	8010d3c <uxr_get_input_reliable_stream>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d08e      	beq.n	800f3e6 <read_submessage_list+0x12>
 800f4c8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f4cc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f4d0:	f007 f95c 	bl	801678c <uxr_process_heartbeat>
 800f4d4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f4d8:	463a      	mov	r2, r7
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f7ff fdf4 	bl	800f0c8 <write_submessage_acknack.isra.0>
 800f4e0:	e781      	b.n	800f3e6 <read_submessage_list+0x12>
 800f4e2:	a910      	add	r1, sp, #64	@ 0x40
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f002 fd2f 	bl	8011f48 <uxr_deserialize_ACKNACK_Payload>
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f4f0:	f001 fb36 	bl	8010b60 <uxr_stream_id_from_raw>
 800f4f4:	900d      	str	r0, [sp, #52]	@ 0x34
 800f4f6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f4fa:	f104 0008 	add.w	r0, r4, #8
 800f4fe:	f001 fc09 	bl	8010d14 <uxr_get_output_reliable_stream>
 800f502:	4607      	mov	r7, r0
 800f504:	2800      	cmp	r0, #0
 800f506:	f43f af6e 	beq.w	800f3e6 <read_submessage_list+0x12>
 800f50a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f50e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f512:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f516:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f51a:	b289      	uxth	r1, r1
 800f51c:	f007 fc90 	bl	8016e40 <uxr_process_acknack>
 800f520:	4638      	mov	r0, r7
 800f522:	f007 fc4d 	bl	8016dc0 <uxr_begin_output_nack_buffer_it>
 800f526:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f52a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f52e:	e006      	b.n	800f53e <read_submessage_list+0x16a>
 800f530:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f532:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f534:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f538:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f53a:	6818      	ldr	r0, [r3, #0]
 800f53c:	47c8      	blx	r9
 800f53e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f542:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f544:	4651      	mov	r1, sl
 800f546:	4638      	mov	r0, r7
 800f548:	f007 fc3c 	bl	8016dc4 <uxr_next_reliable_nack_buffer_to_send>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d1ef      	bne.n	800f530 <read_submessage_list+0x15c>
 800f550:	e749      	b.n	800f3e6 <read_submessage_list+0x12>
 800f552:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f556:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f55a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f55e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f562:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f566:	4651      	mov	r1, sl
 800f568:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f56c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800f570:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800f574:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800f578:	4628      	mov	r0, r5
 800f57a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f57e:	f002 fa43 	bl	8011a08 <uxr_deserialize_BaseObjectRequest>
 800f582:	4650      	mov	r0, sl
 800f584:	a90f      	add	r1, sp, #60	@ 0x3c
 800f586:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f58a:	f000 fe1b 	bl	80101c4 <uxr_parse_base_object_request>
 800f58e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800f592:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f594:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800f598:	9110      	str	r1, [sp, #64]	@ 0x40
 800f59a:	3f04      	subs	r7, #4
 800f59c:	f009 090e 	and.w	r9, r9, #14
 800f5a0:	b2bf      	uxth	r7, r7
 800f5a2:	f1bb 0f00 	cmp.w	fp, #0
 800f5a6:	d006      	beq.n	800f5b6 <read_submessage_list+0x1e2>
 800f5a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	4652      	mov	r2, sl
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	47d8      	blx	fp
 800f5b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f5b8:	b16a      	cbz	r2, 800f5d6 <read_submessage_list+0x202>
 800f5ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f5bc:	2100      	movs	r1, #0
 800f5be:	3802      	subs	r0, #2
 800f5c0:	e002      	b.n	800f5c8 <read_submessage_list+0x1f4>
 800f5c2:	3101      	adds	r1, #1
 800f5c4:	4291      	cmp	r1, r2
 800f5c6:	d006      	beq.n	800f5d6 <read_submessage_list+0x202>
 800f5c8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f5cc:	4553      	cmp	r3, sl
 800f5ce:	d1f8      	bne.n	800f5c2 <read_submessage_list+0x1ee>
 800f5d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	545a      	strb	r2, [r3, r1]
 800f5d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f5da:	9102      	str	r1, [sp, #8]
 800f5dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f5de:	9101      	str	r1, [sp, #4]
 800f5e0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f5e2:	9100      	str	r1, [sp, #0]
 800f5e4:	464b      	mov	r3, r9
 800f5e6:	463a      	mov	r2, r7
 800f5e8:	4629      	mov	r1, r5
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f7ff fc4a 	bl	800ee84 <read_submessage_format>
 800f5f0:	e6f9      	b.n	800f3e6 <read_submessage_list+0x12>
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f7ff fea5 	bl	800f344 <read_submessage_info>
 800f5fa:	e6f4      	b.n	800f3e6 <read_submessage_list+0x12>
 800f5fc:	2a00      	cmp	r2, #0
 800f5fe:	d03e      	beq.n	800f67e <read_submessage_list+0x2aa>
 800f600:	a910      	add	r1, sp, #64	@ 0x40
 800f602:	4628      	mov	r0, r5
 800f604:	f002 fbfc 	bl	8011e00 <uxr_deserialize_STATUS_Payload>
 800f608:	a90e      	add	r1, sp, #56	@ 0x38
 800f60a:	aa0d      	add	r2, sp, #52	@ 0x34
 800f60c:	a810      	add	r0, sp, #64	@ 0x40
 800f60e:	f000 fdd9 	bl	80101c4 <uxr_parse_base_object_request>
 800f612:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f616:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f618:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f61c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f620:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f622:	f1ba 0f00 	cmp.w	sl, #0
 800f626:	d006      	beq.n	800f636 <read_submessage_list+0x262>
 800f628:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	463a      	mov	r2, r7
 800f630:	464b      	mov	r3, r9
 800f632:	4620      	mov	r0, r4
 800f634:	47d0      	blx	sl
 800f636:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f638:	2a00      	cmp	r2, #0
 800f63a:	f43f aed4 	beq.w	800f3e6 <read_submessage_list+0x12>
 800f63e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f640:	2100      	movs	r1, #0
 800f642:	3802      	subs	r0, #2
 800f644:	e003      	b.n	800f64e <read_submessage_list+0x27a>
 800f646:	3101      	adds	r1, #1
 800f648:	4291      	cmp	r1, r2
 800f64a:	f43f aecc 	beq.w	800f3e6 <read_submessage_list+0x12>
 800f64e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f652:	42bb      	cmp	r3, r7
 800f654:	d1f7      	bne.n	800f646 <read_submessage_list+0x272>
 800f656:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f658:	f803 9001 	strb.w	r9, [r3, r1]
 800f65c:	e6c3      	b.n	800f3e6 <read_submessage_list+0x12>
 800f65e:	2a00      	cmp	r2, #0
 800f660:	f47f aec1 	bne.w	800f3e6 <read_submessage_list+0x12>
 800f664:	4629      	mov	r1, r5
 800f666:	4620      	mov	r0, r4
 800f668:	f000 fcf2 	bl	8010050 <uxr_read_create_session_status>
 800f66c:	e6bb      	b.n	800f3e6 <read_submessage_list+0x12>
 800f66e:	4629      	mov	r1, r5
 800f670:	4620      	mov	r0, r4
 800f672:	f7ff fcf3 	bl	800f05c <read_submessage_get_info>
 800f676:	e6b6      	b.n	800f3e6 <read_submessage_list+0x12>
 800f678:	b017      	add	sp, #92	@ 0x5c
 800f67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f67e:	4629      	mov	r1, r5
 800f680:	4620      	mov	r0, r4
 800f682:	f000 fcf1 	bl	8010068 <uxr_read_delete_session_status>
 800f686:	e6ae      	b.n	800f3e6 <read_submessage_list+0x12>
 800f688:	f001 fbd8 	bl	8010e3c <uxr_nanos>
 800f68c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f68e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f690:	464f      	mov	r7, r9
 800f692:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f696:	1812      	adds	r2, r2, r0
 800f698:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f69a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f69c:	eb47 0101 	adc.w	r1, r7, r1
 800f6a0:	464f      	mov	r7, r9
 800f6a2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f6a6:	463b      	mov	r3, r7
 800f6a8:	4684      	mov	ip, r0
 800f6aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f6ae:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f6b2:	eb1c 0c00 	adds.w	ip, ip, r0
 800f6b6:	464f      	mov	r7, r9
 800f6b8:	eb43 0307 	adc.w	r3, r3, r7
 800f6bc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f6c0:	eb61 0303 	sbc.w	r3, r1, r3
 800f6c4:	0fda      	lsrs	r2, r3, #31
 800f6c6:	eb12 020c 	adds.w	r2, r2, ip
 800f6ca:	f143 0300 	adc.w	r3, r3, #0
 800f6ce:	0852      	lsrs	r2, r2, #1
 800f6d0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f6d4:	105b      	asrs	r3, r3, #1
 800f6d6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f6da:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f6de:	e6dd      	b.n	800f49c <read_submessage_list+0xc8>
 800f6e0:	3b9aca00 	.word	0x3b9aca00

0800f6e4 <listen_message_reliably>:
 800f6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	1e0b      	subs	r3, r1, #0
 800f6ea:	b09d      	sub	sp, #116	@ 0x74
 800f6ec:	bfb8      	it	lt
 800f6ee:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f6f2:	4680      	mov	r8, r0
 800f6f4:	9305      	str	r3, [sp, #20]
 800f6f6:	f001 fb87 	bl	8010e08 <uxr_millis>
 800f6fa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f6fe:	4681      	mov	r9, r0
 800f700:	2a00      	cmp	r2, #0
 800f702:	f000 80a1 	beq.w	800f848 <listen_message_reliably+0x164>
 800f706:	2600      	movs	r6, #0
 800f708:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f70c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f710:	9303      	str	r3, [sp, #12]
 800f712:	4630      	mov	r0, r6
 800f714:	460f      	mov	r7, r1
 800f716:	e00f      	b.n	800f738 <listen_message_reliably+0x54>
 800f718:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f71c:	9903      	ldr	r1, [sp, #12]
 800f71e:	455a      	cmp	r2, fp
 800f720:	f106 0601 	add.w	r6, r6, #1
 800f724:	eb73 0101 	sbcs.w	r1, r3, r1
 800f728:	b2f0      	uxtb	r0, r6
 800f72a:	da01      	bge.n	800f730 <listen_message_reliably+0x4c>
 800f72c:	4693      	mov	fp, r2
 800f72e:	9303      	str	r3, [sp, #12]
 800f730:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f734:	4283      	cmp	r3, r0
 800f736:	d960      	bls.n	800f7fa <listen_message_reliably+0x116>
 800f738:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f73c:	2102      	movs	r1, #2
 800f73e:	2201      	movs	r2, #1
 800f740:	f001 f9e4 	bl	8010b0c <uxr_stream_id>
 800f744:	00e4      	lsls	r4, r4, #3
 800f746:	f104 0520 	add.w	r5, r4, #32
 800f74a:	4445      	add	r5, r8
 800f74c:	4601      	mov	r1, r0
 800f74e:	463b      	mov	r3, r7
 800f750:	464a      	mov	r2, r9
 800f752:	4628      	mov	r0, r5
 800f754:	9109      	str	r1, [sp, #36]	@ 0x24
 800f756:	f007 fb09 	bl	8016d6c <uxr_update_output_stream_heartbeat_timestamp>
 800f75a:	eb08 0304 	add.w	r3, r8, r4
 800f75e:	2800      	cmp	r0, #0
 800f760:	d0da      	beq.n	800f718 <listen_message_reliably+0x34>
 800f762:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f766:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f76a:	9304      	str	r3, [sp, #16]
 800f76c:	4640      	mov	r0, r8
 800f76e:	f000 fd03 	bl	8010178 <uxr_session_header_offset>
 800f772:	3501      	adds	r5, #1
 800f774:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f778:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f77c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f780:	2300      	movs	r3, #0
 800f782:	2211      	movs	r2, #17
 800f784:	9000      	str	r0, [sp, #0]
 800f786:	a90c      	add	r1, sp, #48	@ 0x30
 800f788:	4650      	mov	r0, sl
 800f78a:	f7ff f881 	bl	800e890 <ucdr_init_buffer_origin_offset>
 800f78e:	2300      	movs	r3, #0
 800f790:	2205      	movs	r2, #5
 800f792:	210b      	movs	r1, #11
 800f794:	4650      	mov	r0, sl
 800f796:	f001 faf1 	bl	8010d7c <uxr_buffer_submessage_header>
 800f79a:	8968      	ldrh	r0, [r5, #10]
 800f79c:	2101      	movs	r1, #1
 800f79e:	f007 fba7 	bl	8016ef0 <uxr_seq_num_add>
 800f7a2:	892b      	ldrh	r3, [r5, #8]
 800f7a4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	9b04      	ldr	r3, [sp, #16]
 800f7ac:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f7b0:	a90a      	add	r1, sp, #40	@ 0x28
 800f7b2:	4650      	mov	r0, sl
 800f7b4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f7b8:	f002 fbda 	bl	8011f70 <uxr_serialize_HEARTBEAT_Payload>
 800f7bc:	2200      	movs	r2, #0
 800f7be:	4611      	mov	r1, r2
 800f7c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f7c2:	4640      	mov	r0, r8
 800f7c4:	f000 fc82 	bl	80100cc <uxr_stamp_session_header>
 800f7c8:	4650      	mov	r0, sl
 800f7ca:	f7ff f89f 	bl	800e90c <ucdr_buffer_length>
 800f7ce:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	a90c      	add	r1, sp, #48	@ 0x30
 800f7d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f7da:	4444      	add	r4, r8
 800f7dc:	47a8      	blx	r5
 800f7de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f7e2:	9903      	ldr	r1, [sp, #12]
 800f7e4:	455a      	cmp	r2, fp
 800f7e6:	f106 0601 	add.w	r6, r6, #1
 800f7ea:	eb73 0101 	sbcs.w	r1, r3, r1
 800f7ee:	b2f0      	uxtb	r0, r6
 800f7f0:	db9c      	blt.n	800f72c <listen_message_reliably+0x48>
 800f7f2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f7f6:	4283      	cmp	r3, r0
 800f7f8:	d89e      	bhi.n	800f738 <listen_message_reliably+0x54>
 800f7fa:	9a03      	ldr	r2, [sp, #12]
 800f7fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f800:	429a      	cmp	r2, r3
 800f802:	bf08      	it	eq
 800f804:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f808:	d01e      	beq.n	800f848 <listen_message_reliably+0x164>
 800f80a:	ebab 0309 	sub.w	r3, fp, r9
 800f80e:	9905      	ldr	r1, [sp, #20]
 800f810:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f814:	2b00      	cmp	r3, #0
 800f816:	bf08      	it	eq
 800f818:	2301      	moveq	r3, #1
 800f81a:	4299      	cmp	r1, r3
 800f81c:	bfa8      	it	ge
 800f81e:	4619      	movge	r1, r3
 800f820:	6894      	ldr	r4, [r2, #8]
 800f822:	6810      	ldr	r0, [r2, #0]
 800f824:	4689      	mov	r9, r1
 800f826:	460b      	mov	r3, r1
 800f828:	aa08      	add	r2, sp, #32
 800f82a:	a907      	add	r1, sp, #28
 800f82c:	47a0      	blx	r4
 800f82e:	b968      	cbnz	r0, 800f84c <listen_message_reliably+0x168>
 800f830:	9b05      	ldr	r3, [sp, #20]
 800f832:	eba3 0309 	sub.w	r3, r3, r9
 800f836:	2b00      	cmp	r3, #0
 800f838:	9305      	str	r3, [sp, #20]
 800f83a:	f73f af5c 	bgt.w	800f6f6 <listen_message_reliably+0x12>
 800f83e:	4604      	mov	r4, r0
 800f840:	4620      	mov	r0, r4
 800f842:	b01d      	add	sp, #116	@ 0x74
 800f844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f848:	9b05      	ldr	r3, [sp, #20]
 800f84a:	e7e0      	b.n	800f80e <listen_message_reliably+0x12a>
 800f84c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f850:	4604      	mov	r4, r0
 800f852:	a80c      	add	r0, sp, #48	@ 0x30
 800f854:	f7ff f82e 	bl	800e8b4 <ucdr_init_buffer>
 800f858:	2500      	movs	r5, #0
 800f85a:	f10d 031a 	add.w	r3, sp, #26
 800f85e:	aa06      	add	r2, sp, #24
 800f860:	a90c      	add	r1, sp, #48	@ 0x30
 800f862:	4640      	mov	r0, r8
 800f864:	f88d 5018 	strb.w	r5, [sp, #24]
 800f868:	f000 fc44 	bl	80100f4 <uxr_read_session_header>
 800f86c:	b918      	cbnz	r0, 800f876 <listen_message_reliably+0x192>
 800f86e:	4620      	mov	r0, r4
 800f870:	b01d      	add	sp, #116	@ 0x74
 800f872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f876:	4629      	mov	r1, r5
 800f878:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f87c:	f001 f970 	bl	8010b60 <uxr_stream_id_from_raw>
 800f880:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f884:	2d01      	cmp	r5, #1
 800f886:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f88a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f88e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f892:	d04b      	beq.n	800f92c <listen_message_reliably+0x248>
 800f894:	2d02      	cmp	r5, #2
 800f896:	d00f      	beq.n	800f8b8 <listen_message_reliably+0x1d4>
 800f898:	2d00      	cmp	r5, #0
 800f89a:	d1e8      	bne.n	800f86e <listen_message_reliably+0x18a>
 800f89c:	4629      	mov	r1, r5
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f001 f95e 	bl	8010b60 <uxr_stream_id_from_raw>
 800f8a4:	a90c      	add	r1, sp, #48	@ 0x30
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800f8ac:	f7ff fd92 	bl	800f3d4 <read_submessage_list>
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	b01d      	add	sp, #116	@ 0x74
 800f8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	f108 0008 	add.w	r0, r8, #8
 800f8be:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f8c2:	f001 fa3b 	bl	8010d3c <uxr_get_input_reliable_stream>
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	b338      	cbz	r0, 800f91a <listen_message_reliably+0x236>
 800f8ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f8cc:	9203      	str	r2, [sp, #12]
 800f8ce:	a80c      	add	r0, sp, #48	@ 0x30
 800f8d0:	f7ff f820 	bl	800e914 <ucdr_buffer_remaining>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	f10d 0019 	add.w	r0, sp, #25
 800f8da:	9000      	str	r0, [sp, #0]
 800f8dc:	9a03      	ldr	r2, [sp, #12]
 800f8de:	4651      	mov	r1, sl
 800f8e0:	4638      	mov	r0, r7
 800f8e2:	f006 fe59 	bl	8016598 <uxr_receive_reliable_message>
 800f8e6:	b1c0      	cbz	r0, 800f91a <listen_message_reliably+0x236>
 800f8e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f8ec:	b393      	cbz	r3, 800f954 <listen_message_reliably+0x270>
 800f8ee:	ad14      	add	r5, sp, #80	@ 0x50
 800f8f0:	f04f 0a02 	mov.w	sl, #2
 800f8f4:	e00a      	b.n	800f90c <listen_message_reliably+0x228>
 800f8f6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f8fa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f8fe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f902:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f904:	4629      	mov	r1, r5
 800f906:	4640      	mov	r0, r8
 800f908:	f7ff fd64 	bl	800f3d4 <read_submessage_list>
 800f90c:	2204      	movs	r2, #4
 800f90e:	4629      	mov	r1, r5
 800f910:	4638      	mov	r0, r7
 800f912:	f006 fec1 	bl	8016698 <uxr_next_input_reliable_buffer_available>
 800f916:	2800      	cmp	r0, #0
 800f918:	d1ed      	bne.n	800f8f6 <listen_message_reliably+0x212>
 800f91a:	4640      	mov	r0, r8
 800f91c:	4632      	mov	r2, r6
 800f91e:	4649      	mov	r1, r9
 800f920:	f7ff fbd2 	bl	800f0c8 <write_submessage_acknack.isra.0>
 800f924:	4620      	mov	r0, r4
 800f926:	b01d      	add	sp, #116	@ 0x74
 800f928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f92c:	4631      	mov	r1, r6
 800f92e:	f108 0008 	add.w	r0, r8, #8
 800f932:	f001 f9f9 	bl	8010d28 <uxr_get_input_best_effort_stream>
 800f936:	2800      	cmp	r0, #0
 800f938:	d099      	beq.n	800f86e <listen_message_reliably+0x18a>
 800f93a:	4651      	mov	r1, sl
 800f93c:	f006 fd98 	bl	8016470 <uxr_receive_best_effort_message>
 800f940:	2800      	cmp	r0, #0
 800f942:	d094      	beq.n	800f86e <listen_message_reliably+0x18a>
 800f944:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f948:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f94a:	a90c      	add	r1, sp, #48	@ 0x30
 800f94c:	4640      	mov	r0, r8
 800f94e:	f7ff fd41 	bl	800f3d4 <read_submessage_list>
 800f952:	e78c      	b.n	800f86e <listen_message_reliably+0x18a>
 800f954:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f958:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f95a:	a90c      	add	r1, sp, #48	@ 0x30
 800f95c:	4640      	mov	r0, r8
 800f95e:	f7ff fd39 	bl	800f3d4 <read_submessage_list>
 800f962:	e7c4      	b.n	800f8ee <listen_message_reliably+0x20a>

0800f964 <uxr_run_session_timeout>:
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	4604      	mov	r4, r0
 800f968:	460d      	mov	r5, r1
 800f96a:	f001 fa4d 	bl	8010e08 <uxr_millis>
 800f96e:	4606      	mov	r6, r0
 800f970:	4620      	mov	r0, r4
 800f972:	f7ff fc71 	bl	800f258 <uxr_flash_output_streams>
 800f976:	4629      	mov	r1, r5
 800f978:	4620      	mov	r0, r4
 800f97a:	f7ff feb3 	bl	800f6e4 <listen_message_reliably>
 800f97e:	f001 fa43 	bl	8010e08 <uxr_millis>
 800f982:	1b83      	subs	r3, r0, r6
 800f984:	1ae9      	subs	r1, r5, r3
 800f986:	2900      	cmp	r1, #0
 800f988:	dcf6      	bgt.n	800f978 <uxr_run_session_timeout+0x14>
 800f98a:	f104 0008 	add.w	r0, r4, #8
 800f98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f992:	f001 b9dd 	b.w	8010d50 <uxr_output_streams_confirmed>
 800f996:	bf00      	nop

0800f998 <uxr_run_session_until_data>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	4604      	mov	r4, r0
 800f99c:	460d      	mov	r5, r1
 800f99e:	f001 fa33 	bl	8010e08 <uxr_millis>
 800f9a2:	4606      	mov	r6, r0
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f7ff fc57 	bl	800f258 <uxr_flash_output_streams>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	e005      	b.n	800f9c0 <uxr_run_session_until_data+0x28>
 800f9b4:	f001 fa28 	bl	8010e08 <uxr_millis>
 800f9b8:	1b83      	subs	r3, r0, r6
 800f9ba:	1ae9      	subs	r1, r5, r3
 800f9bc:	2900      	cmp	r1, #0
 800f9be:	dd07      	ble.n	800f9d0 <uxr_run_session_until_data+0x38>
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f7ff fe8f 	bl	800f6e4 <listen_message_reliably>
 800f9c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d0f2      	beq.n	800f9b4 <uxr_run_session_until_data+0x1c>
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}
 800f9d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f9d4:	bd70      	pop	{r4, r5, r6, pc}
 800f9d6:	bf00      	nop

0800f9d8 <uxr_run_session_until_confirm_delivery>:
 800f9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9dc:	4606      	mov	r6, r0
 800f9de:	460d      	mov	r5, r1
 800f9e0:	f001 fa12 	bl	8010e08 <uxr_millis>
 800f9e4:	4607      	mov	r7, r0
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f7ff fc36 	bl	800f258 <uxr_flash_output_streams>
 800f9ec:	2d00      	cmp	r5, #0
 800f9ee:	f106 0808 	add.w	r8, r6, #8
 800f9f2:	bfa8      	it	ge
 800f9f4:	462c      	movge	r4, r5
 800f9f6:	da07      	bge.n	800fa08 <uxr_run_session_until_confirm_delivery+0x30>
 800f9f8:	e00e      	b.n	800fa18 <uxr_run_session_until_confirm_delivery+0x40>
 800f9fa:	f7ff fe73 	bl	800f6e4 <listen_message_reliably>
 800f9fe:	f001 fa03 	bl	8010e08 <uxr_millis>
 800fa02:	1bc3      	subs	r3, r0, r7
 800fa04:	1aec      	subs	r4, r5, r3
 800fa06:	d407      	bmi.n	800fa18 <uxr_run_session_until_confirm_delivery+0x40>
 800fa08:	4640      	mov	r0, r8
 800fa0a:	f001 f9a1 	bl	8010d50 <uxr_output_streams_confirmed>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	4621      	mov	r1, r4
 800fa12:	4630      	mov	r0, r6
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d0f0      	beq.n	800f9fa <uxr_run_session_until_confirm_delivery+0x22>
 800fa18:	4640      	mov	r0, r8
 800fa1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1e:	f001 b997 	b.w	8010d50 <uxr_output_streams_confirmed>
 800fa22:	bf00      	nop

0800fa24 <uxr_run_session_until_all_status>:
 800fa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa28:	9c08      	ldr	r4, [sp, #32]
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	460f      	mov	r7, r1
 800fa2e:	4691      	mov	r9, r2
 800fa30:	461d      	mov	r5, r3
 800fa32:	f7ff fc11 	bl	800f258 <uxr_flash_output_streams>
 800fa36:	b124      	cbz	r4, 800fa42 <uxr_run_session_until_all_status+0x1e>
 800fa38:	4622      	mov	r2, r4
 800fa3a:	21ff      	movs	r1, #255	@ 0xff
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f008 fa11 	bl	8017e64 <memset>
 800fa42:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800fa46:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800fa48:	f001 f9de 	bl	8010e08 <uxr_millis>
 800fa4c:	3d01      	subs	r5, #1
 800fa4e:	f1a9 0902 	sub.w	r9, r9, #2
 800fa52:	4680      	mov	r8, r0
 800fa54:	4639      	mov	r1, r7
 800fa56:	4630      	mov	r0, r6
 800fa58:	f7ff fe44 	bl	800f6e4 <listen_message_reliably>
 800fa5c:	f001 f9d4 	bl	8010e08 <uxr_millis>
 800fa60:	eba0 0008 	sub.w	r0, r0, r8
 800fa64:	1a39      	subs	r1, r7, r0
 800fa66:	b344      	cbz	r4, 800faba <uxr_run_session_until_all_status+0x96>
 800fa68:	4628      	mov	r0, r5
 800fa6a:	46ac      	mov	ip, r5
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e002      	b.n	800fa76 <uxr_run_session_until_all_status+0x52>
 800fa70:	42a3      	cmp	r3, r4
 800fa72:	d20d      	bcs.n	800fa90 <uxr_run_session_until_all_status+0x6c>
 800fa74:	3301      	adds	r3, #1
 800fa76:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800fa7a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800fa7e:	d1f7      	bne.n	800fa70 <uxr_run_session_until_all_status+0x4c>
 800fa80:	42a3      	cmp	r3, r4
 800fa82:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800fa86:	d213      	bcs.n	800fab0 <uxr_run_session_until_all_status+0x8c>
 800fa88:	2a00      	cmp	r2, #0
 800fa8a:	d0f3      	beq.n	800fa74 <uxr_run_session_until_all_status+0x50>
 800fa8c:	2900      	cmp	r1, #0
 800fa8e:	dce2      	bgt.n	800fa56 <uxr_run_session_until_all_status+0x32>
 800fa90:	2300      	movs	r3, #0
 800fa92:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800fa94:	442c      	add	r4, r5
 800fa96:	e001      	b.n	800fa9c <uxr_run_session_until_all_status+0x78>
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d812      	bhi.n	800fac2 <uxr_run_session_until_all_status+0x9e>
 800fa9c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800faa0:	4284      	cmp	r4, r0
 800faa2:	d1f9      	bne.n	800fa98 <uxr_run_session_until_all_status+0x74>
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	bf8c      	ite	hi
 800faa8:	2000      	movhi	r0, #0
 800faaa:	2001      	movls	r0, #1
 800faac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab0:	2900      	cmp	r1, #0
 800fab2:	dded      	ble.n	800fa90 <uxr_run_session_until_all_status+0x6c>
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	d1ce      	bne.n	800fa56 <uxr_run_session_until_all_status+0x32>
 800fab8:	e7ea      	b.n	800fa90 <uxr_run_session_until_all_status+0x6c>
 800faba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800fabc:	2001      	movs	r0, #1
 800fabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fac2:	2000      	movs	r0, #0
 800fac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fac8 <uxr_sync_session>:
 800fac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faca:	b093      	sub	sp, #76	@ 0x4c
 800facc:	4604      	mov	r4, r0
 800face:	460d      	mov	r5, r1
 800fad0:	f000 fb52 	bl	8010178 <uxr_session_header_offset>
 800fad4:	2214      	movs	r2, #20
 800fad6:	eb0d 0102 	add.w	r1, sp, r2
 800fada:	9000      	str	r0, [sp, #0]
 800fadc:	2300      	movs	r3, #0
 800fade:	a80a      	add	r0, sp, #40	@ 0x28
 800fae0:	f7fe fed6 	bl	800e890 <ucdr_init_buffer_origin_offset>
 800fae4:	2300      	movs	r3, #0
 800fae6:	2208      	movs	r2, #8
 800fae8:	210e      	movs	r1, #14
 800faea:	a80a      	add	r0, sp, #40	@ 0x28
 800faec:	f001 f946 	bl	8010d7c <uxr_buffer_submessage_header>
 800faf0:	f001 f9a4 	bl	8010e3c <uxr_nanos>
 800faf4:	a31c      	add	r3, pc, #112	@ (adr r3, 800fb68 <uxr_sync_session+0xa0>)
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	460e      	mov	r6, r1
 800fafc:	4607      	mov	r7, r0
 800fafe:	f7f0 fbf7 	bl	80002f0 <__aeabi_ldivmod>
 800fb02:	4631      	mov	r1, r6
 800fb04:	9003      	str	r0, [sp, #12]
 800fb06:	a318      	add	r3, pc, #96	@ (adr r3, 800fb68 <uxr_sync_session+0xa0>)
 800fb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	f7f0 fbef 	bl	80002f0 <__aeabi_ldivmod>
 800fb12:	a903      	add	r1, sp, #12
 800fb14:	a80a      	add	r0, sp, #40	@ 0x28
 800fb16:	9204      	str	r2, [sp, #16]
 800fb18:	f002 fa50 	bl	8011fbc <uxr_serialize_TIMESTAMP_Payload>
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	4611      	mov	r1, r2
 800fb20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb22:	4620      	mov	r0, r4
 800fb24:	f000 fad2 	bl	80100cc <uxr_stamp_session_header>
 800fb28:	a80a      	add	r0, sp, #40	@ 0x28
 800fb2a:	f7fe feef 	bl	800e90c <ucdr_buffer_length>
 800fb2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb30:	4602      	mov	r2, r0
 800fb32:	a905      	add	r1, sp, #20
 800fb34:	e9d3 0600 	ldrd	r0, r6, [r3]
 800fb38:	47b0      	blx	r6
 800fb3a:	f001 f965 	bl	8010e08 <uxr_millis>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	4606      	mov	r6, r0
 800fb42:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800fb46:	4629      	mov	r1, r5
 800fb48:	e000      	b.n	800fb4c <uxr_sync_session+0x84>
 800fb4a:	b950      	cbnz	r0, 800fb62 <uxr_sync_session+0x9a>
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f7ff fdc9 	bl	800f6e4 <listen_message_reliably>
 800fb52:	f001 f959 	bl	8010e08 <uxr_millis>
 800fb56:	1b83      	subs	r3, r0, r6
 800fb58:	1ae9      	subs	r1, r5, r3
 800fb5a:	2900      	cmp	r1, #0
 800fb5c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800fb60:	dcf3      	bgt.n	800fb4a <uxr_sync_session+0x82>
 800fb62:	b013      	add	sp, #76	@ 0x4c
 800fb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb66:	bf00      	nop
 800fb68:	3b9aca00 	.word	0x3b9aca00
 800fb6c:	00000000 	.word	0x00000000

0800fb70 <wait_session_status>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	4604      	mov	r4, r0
 800fb76:	b09d      	sub	sp, #116	@ 0x74
 800fb78:	20ff      	movs	r0, #255	@ 0xff
 800fb7a:	7160      	strb	r0, [r4, #5]
 800fb7c:	9303      	str	r3, [sp, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f000 80b6 	beq.w	800fcf0 <wait_session_status+0x180>
 800fb84:	468a      	mov	sl, r1
 800fb86:	4691      	mov	r9, r2
 800fb88:	f04f 0b00 	mov.w	fp, #0
 800fb8c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb8e:	464a      	mov	r2, r9
 800fb90:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fb94:	4651      	mov	r1, sl
 800fb96:	47a8      	blx	r5
 800fb98:	f001 f936 	bl	8010e08 <uxr_millis>
 800fb9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fba0:	4605      	mov	r5, r0
 800fba2:	e009      	b.n	800fbb8 <wait_session_status+0x48>
 800fba4:	f001 f930 	bl	8010e08 <uxr_millis>
 800fba8:	1b40      	subs	r0, r0, r5
 800fbaa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	dd40      	ble.n	800fc34 <wait_session_status+0xc4>
 800fbb2:	7960      	ldrb	r0, [r4, #5]
 800fbb4:	28ff      	cmp	r0, #255	@ 0xff
 800fbb6:	d145      	bne.n	800fc44 <wait_session_status+0xd4>
 800fbb8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fbba:	a908      	add	r1, sp, #32
 800fbbc:	6896      	ldr	r6, [r2, #8]
 800fbbe:	6810      	ldr	r0, [r2, #0]
 800fbc0:	aa09      	add	r2, sp, #36	@ 0x24
 800fbc2:	47b0      	blx	r6
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d0ed      	beq.n	800fba4 <wait_session_status+0x34>
 800fbc8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800fbcc:	a80c      	add	r0, sp, #48	@ 0x30
 800fbce:	f7fe fe71 	bl	800e8b4 <ucdr_init_buffer>
 800fbd2:	2600      	movs	r6, #0
 800fbd4:	f10d 031e 	add.w	r3, sp, #30
 800fbd8:	aa07      	add	r2, sp, #28
 800fbda:	a90c      	add	r1, sp, #48	@ 0x30
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f88d 601c 	strb.w	r6, [sp, #28]
 800fbe2:	f000 fa87 	bl	80100f4 <uxr_read_session_header>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d0dc      	beq.n	800fba4 <wait_session_status+0x34>
 800fbea:	4631      	mov	r1, r6
 800fbec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800fbf0:	f000 ffb6 	bl	8010b60 <uxr_stream_id_from_raw>
 800fbf4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800fbf8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800fbfc:	9302      	str	r3, [sp, #8]
 800fbfe:	2f01      	cmp	r7, #1
 800fc00:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800fc04:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fc08:	d05c      	beq.n	800fcc4 <wait_session_status+0x154>
 800fc0a:	2f02      	cmp	r7, #2
 800fc0c:	d020      	beq.n	800fc50 <wait_session_status+0xe0>
 800fc0e:	2f00      	cmp	r7, #0
 800fc10:	d1c8      	bne.n	800fba4 <wait_session_status+0x34>
 800fc12:	4639      	mov	r1, r7
 800fc14:	4638      	mov	r0, r7
 800fc16:	f000 ffa3 	bl	8010b60 <uxr_stream_id_from_raw>
 800fc1a:	a90c      	add	r1, sp, #48	@ 0x30
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fc20:	4620      	mov	r0, r4
 800fc22:	f7ff fbd7 	bl	800f3d4 <read_submessage_list>
 800fc26:	f001 f8ef 	bl	8010e08 <uxr_millis>
 800fc2a:	1b40      	subs	r0, r0, r5
 800fc2c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	dcbe      	bgt.n	800fbb2 <wait_session_status+0x42>
 800fc34:	9b03      	ldr	r3, [sp, #12]
 800fc36:	7960      	ldrb	r0, [r4, #5]
 800fc38:	f10b 0b01 	add.w	fp, fp, #1
 800fc3c:	455b      	cmp	r3, fp
 800fc3e:	d001      	beq.n	800fc44 <wait_session_status+0xd4>
 800fc40:	28ff      	cmp	r0, #255	@ 0xff
 800fc42:	d0a3      	beq.n	800fb8c <wait_session_status+0x1c>
 800fc44:	38ff      	subs	r0, #255	@ 0xff
 800fc46:	bf18      	it	ne
 800fc48:	2001      	movne	r0, #1
 800fc4a:	b01d      	add	sp, #116	@ 0x74
 800fc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc50:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800fc54:	9304      	str	r3, [sp, #16]
 800fc56:	4631      	mov	r1, r6
 800fc58:	f104 0008 	add.w	r0, r4, #8
 800fc5c:	f001 f86e 	bl	8010d3c <uxr_get_input_reliable_stream>
 800fc60:	4680      	mov	r8, r0
 800fc62:	b348      	cbz	r0, 800fcb8 <wait_session_status+0x148>
 800fc64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc66:	9205      	str	r2, [sp, #20]
 800fc68:	a80c      	add	r0, sp, #48	@ 0x30
 800fc6a:	f7fe fe53 	bl	800e914 <ucdr_buffer_remaining>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	f10d 001d 	add.w	r0, sp, #29
 800fc74:	9000      	str	r0, [sp, #0]
 800fc76:	9a05      	ldr	r2, [sp, #20]
 800fc78:	9902      	ldr	r1, [sp, #8]
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	f006 fc8c 	bl	8016598 <uxr_receive_reliable_message>
 800fc80:	b1d0      	cbz	r0, 800fcb8 <wait_session_status+0x148>
 800fc82:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d03a      	beq.n	800fd00 <wait_session_status+0x190>
 800fc8a:	9f04      	ldr	r7, [sp, #16]
 800fc8c:	e00a      	b.n	800fca4 <wait_session_status+0x134>
 800fc8e:	f04f 0302 	mov.w	r3, #2
 800fc92:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800fc96:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800fc9a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800fc9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fca0:	f7ff fb98 	bl	800f3d4 <read_submessage_list>
 800fca4:	a914      	add	r1, sp, #80	@ 0x50
 800fca6:	2204      	movs	r2, #4
 800fca8:	4640      	mov	r0, r8
 800fcaa:	f006 fcf5 	bl	8016698 <uxr_next_input_reliable_buffer_available>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	a914      	add	r1, sp, #80	@ 0x50
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1ea      	bne.n	800fc8e <wait_session_status+0x11e>
 800fcb8:	9904      	ldr	r1, [sp, #16]
 800fcba:	4632      	mov	r2, r6
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f7ff fa03 	bl	800f0c8 <write_submessage_acknack.isra.0>
 800fcc2:	e76f      	b.n	800fba4 <wait_session_status+0x34>
 800fcc4:	4631      	mov	r1, r6
 800fcc6:	f104 0008 	add.w	r0, r4, #8
 800fcca:	f001 f82d 	bl	8010d28 <uxr_get_input_best_effort_stream>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	f43f af68 	beq.w	800fba4 <wait_session_status+0x34>
 800fcd4:	9902      	ldr	r1, [sp, #8]
 800fcd6:	f006 fbcb 	bl	8016470 <uxr_receive_best_effort_message>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	f43f af62 	beq.w	800fba4 <wait_session_status+0x34>
 800fce0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fce4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fce6:	a90c      	add	r1, sp, #48	@ 0x30
 800fce8:	4620      	mov	r0, r4
 800fcea:	f7ff fb73 	bl	800f3d4 <read_submessage_list>
 800fcee:	e759      	b.n	800fba4 <wait_session_status+0x34>
 800fcf0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fcf2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fcf6:	47a0      	blx	r4
 800fcf8:	2001      	movs	r0, #1
 800fcfa:	b01d      	add	sp, #116	@ 0x74
 800fcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd00:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fd04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fd06:	a90c      	add	r1, sp, #48	@ 0x30
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f7ff fb63 	bl	800f3d4 <read_submessage_list>
 800fd0e:	e7bc      	b.n	800fc8a <wait_session_status+0x11a>

0800fd10 <uxr_delete_session_retries>:
 800fd10:	b530      	push	{r4, r5, lr}
 800fd12:	b08f      	sub	sp, #60	@ 0x3c
 800fd14:	4604      	mov	r4, r0
 800fd16:	460d      	mov	r5, r1
 800fd18:	f000 fa2e 	bl	8010178 <uxr_session_header_offset>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	2210      	movs	r2, #16
 800fd20:	9000      	str	r0, [sp, #0]
 800fd22:	a902      	add	r1, sp, #8
 800fd24:	a806      	add	r0, sp, #24
 800fd26:	f7fe fdb3 	bl	800e890 <ucdr_init_buffer_origin_offset>
 800fd2a:	a906      	add	r1, sp, #24
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f000 f973 	bl	8010018 <uxr_buffer_delete_session>
 800fd32:	2200      	movs	r2, #0
 800fd34:	4611      	mov	r1, r2
 800fd36:	9b06      	ldr	r3, [sp, #24]
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f000 f9c7 	bl	80100cc <uxr_stamp_session_header>
 800fd3e:	a806      	add	r0, sp, #24
 800fd40:	f7fe fde4 	bl	800e90c <ucdr_buffer_length>
 800fd44:	462b      	mov	r3, r5
 800fd46:	4602      	mov	r2, r0
 800fd48:	a902      	add	r1, sp, #8
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f7ff ff10 	bl	800fb70 <wait_session_status>
 800fd50:	b118      	cbz	r0, 800fd5a <uxr_delete_session_retries+0x4a>
 800fd52:	7960      	ldrb	r0, [r4, #5]
 800fd54:	fab0 f080 	clz	r0, r0
 800fd58:	0940      	lsrs	r0, r0, #5
 800fd5a:	b00f      	add	sp, #60	@ 0x3c
 800fd5c:	bd30      	pop	{r4, r5, pc}
 800fd5e:	bf00      	nop

0800fd60 <uxr_create_session>:
 800fd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd64:	f100 0b08 	add.w	fp, r0, #8
 800fd68:	b0ab      	sub	sp, #172	@ 0xac
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	4658      	mov	r0, fp
 800fd6e:	f000 ff2b 	bl	8010bc8 <uxr_reset_stream_storage>
 800fd72:	4620      	mov	r0, r4
 800fd74:	f000 fa00 	bl	8010178 <uxr_session_header_offset>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9000      	str	r0, [sp, #0]
 800fd7c:	221c      	movs	r2, #28
 800fd7e:	a90b      	add	r1, sp, #44	@ 0x2c
 800fd80:	a812      	add	r0, sp, #72	@ 0x48
 800fd82:	f7fe fd85 	bl	800e890 <ucdr_init_buffer_origin_offset>
 800fd86:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd88:	8a1a      	ldrh	r2, [r3, #16]
 800fd8a:	3a04      	subs	r2, #4
 800fd8c:	b292      	uxth	r2, r2
 800fd8e:	a912      	add	r1, sp, #72	@ 0x48
 800fd90:	4620      	mov	r0, r4
 800fd92:	f000 f917 	bl	800ffc4 <uxr_buffer_create_session>
 800fd96:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f000 f983 	bl	80100a4 <uxr_stamp_create_session_header>
 800fd9e:	a812      	add	r0, sp, #72	@ 0x48
 800fda0:	f7fe fdb4 	bl	800e90c <ucdr_buffer_length>
 800fda4:	23ff      	movs	r3, #255	@ 0xff
 800fda6:	7163      	strb	r3, [r4, #5]
 800fda8:	230a      	movs	r3, #10
 800fdaa:	46da      	mov	sl, fp
 800fdac:	9303      	str	r3, [sp, #12]
 800fdae:	4683      	mov	fp, r0
 800fdb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fdb2:	465a      	mov	r2, fp
 800fdb4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fdb8:	a90b      	add	r1, sp, #44	@ 0x2c
 800fdba:	47a8      	blx	r5
 800fdbc:	f001 f824 	bl	8010e08 <uxr_millis>
 800fdc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	e009      	b.n	800fddc <uxr_create_session+0x7c>
 800fdc8:	f001 f81e 	bl	8010e08 <uxr_millis>
 800fdcc:	1b40      	subs	r0, r0, r5
 800fdce:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	7962      	ldrb	r2, [r4, #5]
 800fdd6:	dd38      	ble.n	800fe4a <uxr_create_session+0xea>
 800fdd8:	2aff      	cmp	r2, #255	@ 0xff
 800fdda:	d13c      	bne.n	800fe56 <uxr_create_session+0xf6>
 800fddc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fdde:	a907      	add	r1, sp, #28
 800fde0:	6896      	ldr	r6, [r2, #8]
 800fde2:	6810      	ldr	r0, [r2, #0]
 800fde4:	aa08      	add	r2, sp, #32
 800fde6:	47b0      	blx	r6
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d0ed      	beq.n	800fdc8 <uxr_create_session+0x68>
 800fdec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fdf0:	a81a      	add	r0, sp, #104	@ 0x68
 800fdf2:	f7fe fd5f 	bl	800e8b4 <ucdr_init_buffer>
 800fdf6:	2600      	movs	r6, #0
 800fdf8:	f10d 031a 	add.w	r3, sp, #26
 800fdfc:	aa06      	add	r2, sp, #24
 800fdfe:	a91a      	add	r1, sp, #104	@ 0x68
 800fe00:	4620      	mov	r0, r4
 800fe02:	f88d 6018 	strb.w	r6, [sp, #24]
 800fe06:	f000 f975 	bl	80100f4 <uxr_read_session_header>
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d0dc      	beq.n	800fdc8 <uxr_create_session+0x68>
 800fe0e:	4631      	mov	r1, r6
 800fe10:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fe14:	f000 fea4 	bl	8010b60 <uxr_stream_id_from_raw>
 800fe18:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fe1c:	2e01      	cmp	r6, #1
 800fe1e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fe22:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800fe26:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fe2a:	d053      	beq.n	800fed4 <uxr_create_session+0x174>
 800fe2c:	2e02      	cmp	r6, #2
 800fe2e:	d018      	beq.n	800fe62 <uxr_create_session+0x102>
 800fe30:	2e00      	cmp	r6, #0
 800fe32:	d1c9      	bne.n	800fdc8 <uxr_create_session+0x68>
 800fe34:	4631      	mov	r1, r6
 800fe36:	4630      	mov	r0, r6
 800fe38:	f000 fe92 	bl	8010b60 <uxr_stream_id_from_raw>
 800fe3c:	a91a      	add	r1, sp, #104	@ 0x68
 800fe3e:	4602      	mov	r2, r0
 800fe40:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe42:	4620      	mov	r0, r4
 800fe44:	f7ff fac6 	bl	800f3d4 <read_submessage_list>
 800fe48:	e7be      	b.n	800fdc8 <uxr_create_session+0x68>
 800fe4a:	9b03      	ldr	r3, [sp, #12]
 800fe4c:	3b01      	subs	r3, #1
 800fe4e:	9303      	str	r3, [sp, #12]
 800fe50:	d001      	beq.n	800fe56 <uxr_create_session+0xf6>
 800fe52:	2aff      	cmp	r2, #255	@ 0xff
 800fe54:	d0ac      	beq.n	800fdb0 <uxr_create_session+0x50>
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	d051      	beq.n	800fefe <uxr_create_session+0x19e>
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	b02b      	add	sp, #172	@ 0xac
 800fe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe62:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fe66:	9304      	str	r3, [sp, #16]
 800fe68:	4639      	mov	r1, r7
 800fe6a:	4650      	mov	r0, sl
 800fe6c:	f000 ff66 	bl	8010d3c <uxr_get_input_reliable_stream>
 800fe70:	4680      	mov	r8, r0
 800fe72:	b348      	cbz	r0, 800fec8 <uxr_create_session+0x168>
 800fe74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fe76:	9205      	str	r2, [sp, #20]
 800fe78:	a81a      	add	r0, sp, #104	@ 0x68
 800fe7a:	f7fe fd4b 	bl	800e914 <ucdr_buffer_remaining>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	f10d 0019 	add.w	r0, sp, #25
 800fe84:	9000      	str	r0, [sp, #0]
 800fe86:	9a05      	ldr	r2, [sp, #20]
 800fe88:	4649      	mov	r1, r9
 800fe8a:	4640      	mov	r0, r8
 800fe8c:	f006 fb84 	bl	8016598 <uxr_receive_reliable_message>
 800fe90:	b1d0      	cbz	r0, 800fec8 <uxr_create_session+0x168>
 800fe92:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d038      	beq.n	800ff0c <uxr_create_session+0x1ac>
 800fe9a:	9e04      	ldr	r6, [sp, #16]
 800fe9c:	e00a      	b.n	800feb4 <uxr_create_session+0x154>
 800fe9e:	f04f 0302 	mov.w	r3, #2
 800fea2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800fea6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800feaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800feae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800feb0:	f7ff fa90 	bl	800f3d4 <read_submessage_list>
 800feb4:	a922      	add	r1, sp, #136	@ 0x88
 800feb6:	2204      	movs	r2, #4
 800feb8:	4640      	mov	r0, r8
 800feba:	f006 fbed 	bl	8016698 <uxr_next_input_reliable_buffer_available>
 800febe:	4603      	mov	r3, r0
 800fec0:	a922      	add	r1, sp, #136	@ 0x88
 800fec2:	4620      	mov	r0, r4
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1ea      	bne.n	800fe9e <uxr_create_session+0x13e>
 800fec8:	9904      	ldr	r1, [sp, #16]
 800feca:	463a      	mov	r2, r7
 800fecc:	4620      	mov	r0, r4
 800fece:	f7ff f8fb 	bl	800f0c8 <write_submessage_acknack.isra.0>
 800fed2:	e779      	b.n	800fdc8 <uxr_create_session+0x68>
 800fed4:	4639      	mov	r1, r7
 800fed6:	4650      	mov	r0, sl
 800fed8:	f000 ff26 	bl	8010d28 <uxr_get_input_best_effort_stream>
 800fedc:	2800      	cmp	r0, #0
 800fede:	f43f af73 	beq.w	800fdc8 <uxr_create_session+0x68>
 800fee2:	4649      	mov	r1, r9
 800fee4:	f006 fac4 	bl	8016470 <uxr_receive_best_effort_message>
 800fee8:	2800      	cmp	r0, #0
 800feea:	f43f af6d 	beq.w	800fdc8 <uxr_create_session+0x68>
 800feee:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fef4:	a91a      	add	r1, sp, #104	@ 0x68
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7ff fa6c 	bl	800f3d4 <read_submessage_list>
 800fefc:	e764      	b.n	800fdc8 <uxr_create_session+0x68>
 800fefe:	4650      	mov	r0, sl
 800ff00:	f000 fe62 	bl	8010bc8 <uxr_reset_stream_storage>
 800ff04:	2001      	movs	r0, #1
 800ff06:	b02b      	add	sp, #172	@ 0xac
 800ff08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800ff10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff12:	a91a      	add	r1, sp, #104	@ 0x68
 800ff14:	4620      	mov	r0, r4
 800ff16:	f7ff fa5d 	bl	800f3d4 <read_submessage_list>
 800ff1a:	e7be      	b.n	800fe9a <uxr_create_session+0x13a>

0800ff1c <uxr_prepare_stream_to_write_submessage>:
 800ff1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff20:	b082      	sub	sp, #8
 800ff22:	4682      	mov	sl, r0
 800ff24:	4610      	mov	r0, r2
 800ff26:	4615      	mov	r5, r2
 800ff28:	461e      	mov	r6, r3
 800ff2a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800ff2e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800ff32:	9101      	str	r1, [sp, #4]
 800ff34:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ff38:	f000 ff60 	bl	8010dfc <uxr_submessage_padding>
 800ff3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff40:	f105 0904 	add.w	r9, r5, #4
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	4481      	add	r9, r0
 800ff48:	d01d      	beq.n	800ff86 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	d116      	bne.n	800ff7c <uxr_prepare_stream_to_write_submessage+0x60>
 800ff4e:	4621      	mov	r1, r4
 800ff50:	f10a 0008 	add.w	r0, sl, #8
 800ff54:	f000 fede 	bl	8010d14 <uxr_get_output_reliable_stream>
 800ff58:	4604      	mov	r4, r0
 800ff5a:	b158      	cbz	r0, 800ff74 <uxr_prepare_stream_to_write_submessage+0x58>
 800ff5c:	4649      	mov	r1, r9
 800ff5e:	4632      	mov	r2, r6
 800ff60:	f006 fd56 	bl	8016a10 <uxr_prepare_reliable_buffer_to_write>
 800ff64:	4604      	mov	r4, r0
 800ff66:	b12c      	cbz	r4, 800ff74 <uxr_prepare_stream_to_write_submessage+0x58>
 800ff68:	4643      	mov	r3, r8
 800ff6a:	b2aa      	uxth	r2, r5
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	4630      	mov	r0, r6
 800ff70:	f000 ff04 	bl	8010d7c <uxr_buffer_submessage_header>
 800ff74:	4620      	mov	r0, r4
 800ff76:	b002      	add	sp, #8
 800ff78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff7c:	2400      	movs	r4, #0
 800ff7e:	4620      	mov	r0, r4
 800ff80:	b002      	add	sp, #8
 800ff82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff86:	4621      	mov	r1, r4
 800ff88:	f10a 0008 	add.w	r0, sl, #8
 800ff8c:	f000 feba 	bl	8010d04 <uxr_get_output_best_effort_stream>
 800ff90:	4604      	mov	r4, r0
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d0ee      	beq.n	800ff74 <uxr_prepare_stream_to_write_submessage+0x58>
 800ff96:	4649      	mov	r1, r9
 800ff98:	4632      	mov	r2, r6
 800ff9a:	f006 fc69 	bl	8016870 <uxr_prepare_best_effort_buffer_to_write>
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	e7e1      	b.n	800ff66 <uxr_prepare_stream_to_write_submessage+0x4a>
 800ffa2:	bf00      	nop

0800ffa4 <uxr_init_session_info>:
 800ffa4:	0e13      	lsrs	r3, r2, #24
 800ffa6:	7043      	strb	r3, [r0, #1]
 800ffa8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800ffac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ffb0:	7001      	strb	r1, [r0, #0]
 800ffb2:	70c3      	strb	r3, [r0, #3]
 800ffb4:	2109      	movs	r1, #9
 800ffb6:	23ff      	movs	r3, #255	@ 0xff
 800ffb8:	f880 c002 	strb.w	ip, [r0, #2]
 800ffbc:	7102      	strb	r2, [r0, #4]
 800ffbe:	80c1      	strh	r1, [r0, #6]
 800ffc0:	7143      	strb	r3, [r0, #5]
 800ffc2:	4770      	bx	lr

0800ffc4 <uxr_buffer_create_session>:
 800ffc4:	b530      	push	{r4, r5, lr}
 800ffc6:	b089      	sub	sp, #36	@ 0x24
 800ffc8:	2300      	movs	r3, #0
 800ffca:	4d12      	ldr	r5, [pc, #72]	@ (8010014 <uxr_buffer_create_session+0x50>)
 800ffcc:	9307      	str	r3, [sp, #28]
 800ffce:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	9301      	str	r3, [sp, #4]
 800ffd6:	80c2      	strh	r2, [r0, #6]
 800ffd8:	f88d 2004 	strb.w	r2, [sp, #4]
 800ffdc:	682a      	ldr	r2, [r5, #0]
 800ffde:	9200      	str	r2, [sp, #0]
 800ffe0:	88aa      	ldrh	r2, [r5, #4]
 800ffe2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ffe6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800ffea:	9202      	str	r2, [sp, #8]
 800ffec:	460c      	mov	r4, r1
 800ffee:	7802      	ldrb	r2, [r0, #0]
 800fff0:	9303      	str	r3, [sp, #12]
 800fff2:	4619      	mov	r1, r3
 800fff4:	f88d 200c 	strb.w	r2, [sp, #12]
 800fff8:	4620      	mov	r0, r4
 800fffa:	2210      	movs	r2, #16
 800fffc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010000:	9306      	str	r3, [sp, #24]
 8010002:	f000 febb 	bl	8010d7c <uxr_buffer_submessage_header>
 8010006:	4669      	mov	r1, sp
 8010008:	4620      	mov	r0, r4
 801000a:	f001 fe13 	bl	8011c34 <uxr_serialize_CREATE_CLIENT_Payload>
 801000e:	b009      	add	sp, #36	@ 0x24
 8010010:	bd30      	pop	{r4, r5, pc}
 8010012:	bf00      	nop
 8010014:	08018e74 	.word	0x08018e74

08010018 <uxr_buffer_delete_session>:
 8010018:	b510      	push	{r4, lr}
 801001a:	4b0c      	ldr	r3, [pc, #48]	@ (801004c <uxr_buffer_delete_session+0x34>)
 801001c:	b082      	sub	sp, #8
 801001e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8010022:	f8ad c006 	strh.w	ip, [sp, #6]
 8010026:	460c      	mov	r4, r1
 8010028:	2202      	movs	r2, #2
 801002a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801002e:	80c2      	strh	r2, [r0, #6]
 8010030:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010034:	2204      	movs	r2, #4
 8010036:	2300      	movs	r3, #0
 8010038:	2103      	movs	r1, #3
 801003a:	4620      	mov	r0, r4
 801003c:	f000 fe9e 	bl	8010d7c <uxr_buffer_submessage_header>
 8010040:	a901      	add	r1, sp, #4
 8010042:	4620      	mov	r0, r4
 8010044:	f001 fe9c 	bl	8011d80 <uxr_serialize_DELETE_Payload>
 8010048:	b002      	add	sp, #8
 801004a:	bd10      	pop	{r4, pc}
 801004c:	08018e74 	.word	0x08018e74

08010050 <uxr_read_create_session_status>:
 8010050:	b510      	push	{r4, lr}
 8010052:	b088      	sub	sp, #32
 8010054:	4604      	mov	r4, r0
 8010056:	4608      	mov	r0, r1
 8010058:	a901      	add	r1, sp, #4
 801005a:	f001 fea1 	bl	8011da0 <uxr_deserialize_STATUS_AGENT_Payload>
 801005e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010062:	7163      	strb	r3, [r4, #5]
 8010064:	b008      	add	sp, #32
 8010066:	bd10      	pop	{r4, pc}

08010068 <uxr_read_delete_session_status>:
 8010068:	b510      	push	{r4, lr}
 801006a:	4604      	mov	r4, r0
 801006c:	b084      	sub	sp, #16
 801006e:	4608      	mov	r0, r1
 8010070:	a902      	add	r1, sp, #8
 8010072:	f001 fec5 	bl	8011e00 <uxr_deserialize_STATUS_Payload>
 8010076:	88e3      	ldrh	r3, [r4, #6]
 8010078:	2b02      	cmp	r3, #2
 801007a:	d001      	beq.n	8010080 <uxr_read_delete_session_status+0x18>
 801007c:	b004      	add	sp, #16
 801007e:	bd10      	pop	{r4, pc}
 8010080:	f10d 000a 	add.w	r0, sp, #10
 8010084:	f7fe feb0 	bl	800ede8 <uxr_object_id_from_raw>
 8010088:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801008c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010090:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010094:	b29b      	uxth	r3, r3
 8010096:	2b02      	cmp	r3, #2
 8010098:	bf04      	itt	eq
 801009a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801009e:	7163      	strbeq	r3, [r4, #5]
 80100a0:	b004      	add	sp, #16
 80100a2:	bd10      	pop	{r4, pc}

080100a4 <uxr_stamp_create_session_header>:
 80100a4:	b510      	push	{r4, lr}
 80100a6:	2208      	movs	r2, #8
 80100a8:	b08a      	sub	sp, #40	@ 0x28
 80100aa:	4604      	mov	r4, r0
 80100ac:	eb0d 0002 	add.w	r0, sp, r2
 80100b0:	f7fe fc00 	bl	800e8b4 <ucdr_init_buffer>
 80100b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100b8:	9400      	str	r4, [sp, #0]
 80100ba:	2300      	movs	r3, #0
 80100bc:	461a      	mov	r2, r3
 80100be:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80100c2:	a802      	add	r0, sp, #8
 80100c4:	f001 f854 	bl	8011170 <uxr_serialize_message_header>
 80100c8:	b00a      	add	sp, #40	@ 0x28
 80100ca:	bd10      	pop	{r4, pc}

080100cc <uxr_stamp_session_header>:
 80100cc:	b530      	push	{r4, r5, lr}
 80100ce:	b08d      	sub	sp, #52	@ 0x34
 80100d0:	4604      	mov	r4, r0
 80100d2:	460d      	mov	r5, r1
 80100d4:	9203      	str	r2, [sp, #12]
 80100d6:	4619      	mov	r1, r3
 80100d8:	a804      	add	r0, sp, #16
 80100da:	2208      	movs	r2, #8
 80100dc:	f7fe fbea 	bl	800e8b4 <ucdr_init_buffer>
 80100e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e4:	9b03      	ldr	r3, [sp, #12]
 80100e6:	9400      	str	r4, [sp, #0]
 80100e8:	462a      	mov	r2, r5
 80100ea:	a804      	add	r0, sp, #16
 80100ec:	f001 f840 	bl	8011170 <uxr_serialize_message_header>
 80100f0:	b00d      	add	sp, #52	@ 0x34
 80100f2:	bd30      	pop	{r4, r5, pc}

080100f4 <uxr_read_session_header>:
 80100f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f8:	4607      	mov	r7, r0
 80100fa:	b084      	sub	sp, #16
 80100fc:	4608      	mov	r0, r1
 80100fe:	460c      	mov	r4, r1
 8010100:	4615      	mov	r5, r2
 8010102:	461e      	mov	r6, r3
 8010104:	f7fe fc06 	bl	800e914 <ucdr_buffer_remaining>
 8010108:	2808      	cmp	r0, #8
 801010a:	d803      	bhi.n	8010114 <uxr_read_session_header+0x20>
 801010c:	2000      	movs	r0, #0
 801010e:	b004      	add	sp, #16
 8010110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010114:	f10d 080c 	add.w	r8, sp, #12
 8010118:	4633      	mov	r3, r6
 801011a:	462a      	mov	r2, r5
 801011c:	f8cd 8000 	str.w	r8, [sp]
 8010120:	4620      	mov	r0, r4
 8010122:	f10d 010b 	add.w	r1, sp, #11
 8010126:	f001 f841 	bl	80111ac <uxr_deserialize_message_header>
 801012a:	783a      	ldrb	r2, [r7, #0]
 801012c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010130:	4293      	cmp	r3, r2
 8010132:	d1eb      	bne.n	801010c <uxr_read_session_header+0x18>
 8010134:	061b      	lsls	r3, r3, #24
 8010136:	d41c      	bmi.n	8010172 <uxr_read_session_header+0x7e>
 8010138:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801013c:	787b      	ldrb	r3, [r7, #1]
 801013e:	429a      	cmp	r2, r3
 8010140:	d003      	beq.n	801014a <uxr_read_session_header+0x56>
 8010142:	2001      	movs	r0, #1
 8010144:	f080 0001 	eor.w	r0, r0, #1
 8010148:	e7e1      	b.n	801010e <uxr_read_session_header+0x1a>
 801014a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801014e:	78bb      	ldrb	r3, [r7, #2]
 8010150:	429a      	cmp	r2, r3
 8010152:	f107 0102 	add.w	r1, r7, #2
 8010156:	d1f4      	bne.n	8010142 <uxr_read_session_header+0x4e>
 8010158:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801015c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010160:	429a      	cmp	r2, r3
 8010162:	d1ee      	bne.n	8010142 <uxr_read_session_header+0x4e>
 8010164:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010168:	784b      	ldrb	r3, [r1, #1]
 801016a:	429a      	cmp	r2, r3
 801016c:	d1e9      	bne.n	8010142 <uxr_read_session_header+0x4e>
 801016e:	2000      	movs	r0, #0
 8010170:	e7e8      	b.n	8010144 <uxr_read_session_header+0x50>
 8010172:	2001      	movs	r0, #1
 8010174:	e7cb      	b.n	801010e <uxr_read_session_header+0x1a>
 8010176:	bf00      	nop

08010178 <uxr_session_header_offset>:
 8010178:	f990 3000 	ldrsb.w	r3, [r0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	bfac      	ite	ge
 8010180:	2008      	movge	r0, #8
 8010182:	2004      	movlt	r0, #4
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop

08010188 <uxr_init_base_object_request>:
 8010188:	b510      	push	{r4, lr}
 801018a:	88c3      	ldrh	r3, [r0, #6]
 801018c:	b082      	sub	sp, #8
 801018e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010192:	9101      	str	r1, [sp, #4]
 8010194:	f1a3 010a 	sub.w	r1, r3, #10
 8010198:	b289      	uxth	r1, r1
 801019a:	42a1      	cmp	r1, r4
 801019c:	d80e      	bhi.n	80101bc <uxr_init_base_object_request+0x34>
 801019e:	3301      	adds	r3, #1
 80101a0:	b29c      	uxth	r4, r3
 80101a2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	80c4      	strh	r4, [r0, #6]
 80101aa:	9801      	ldr	r0, [sp, #4]
 80101ac:	7011      	strb	r1, [r2, #0]
 80101ae:	7053      	strb	r3, [r2, #1]
 80101b0:	1c91      	adds	r1, r2, #2
 80101b2:	f7fe fe2d 	bl	800ee10 <uxr_object_id_to_raw>
 80101b6:	4620      	mov	r0, r4
 80101b8:	b002      	add	sp, #8
 80101ba:	bd10      	pop	{r4, pc}
 80101bc:	230a      	movs	r3, #10
 80101be:	2100      	movs	r1, #0
 80101c0:	461c      	mov	r4, r3
 80101c2:	e7f1      	b.n	80101a8 <uxr_init_base_object_request+0x20>

080101c4 <uxr_parse_base_object_request>:
 80101c4:	b570      	push	{r4, r5, r6, lr}
 80101c6:	4604      	mov	r4, r0
 80101c8:	3002      	adds	r0, #2
 80101ca:	460d      	mov	r5, r1
 80101cc:	4616      	mov	r6, r2
 80101ce:	f7fe fe0b 	bl	800ede8 <uxr_object_id_from_raw>
 80101d2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80101d6:	8028      	strh	r0, [r5, #0]
 80101d8:	806b      	strh	r3, [r5, #2]
 80101da:	7822      	ldrb	r2, [r4, #0]
 80101dc:	7863      	ldrb	r3, [r4, #1]
 80101de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80101e2:	8033      	strh	r3, [r6, #0]
 80101e4:	bd70      	pop	{r4, r5, r6, pc}
 80101e6:	bf00      	nop

080101e8 <uxr_init_framing_io>:
 80101e8:	2300      	movs	r3, #0
 80101ea:	7041      	strb	r1, [r0, #1]
 80101ec:	7003      	strb	r3, [r0, #0]
 80101ee:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop

080101f4 <uxr_write_framed_msg>:
 80101f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f8:	4617      	mov	r7, r2
 80101fa:	7842      	ldrb	r2, [r0, #1]
 80101fc:	b083      	sub	sp, #12
 80101fe:	460e      	mov	r6, r1
 8010200:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8010204:	469a      	mov	sl, r3
 8010206:	2901      	cmp	r1, #1
 8010208:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801020c:	4604      	mov	r4, r0
 801020e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8010212:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010216:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801021a:	f240 8137 	bls.w	801048c <uxr_write_framed_msg+0x298>
 801021e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8010222:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8010226:	2901      	cmp	r1, #1
 8010228:	f04f 0202 	mov.w	r2, #2
 801022c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010230:	f240 808f 	bls.w	8010352 <uxr_write_framed_msg+0x15e>
 8010234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010236:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801023a:	b2dd      	uxtb	r5, r3
 801023c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010240:	2203      	movs	r2, #3
 8010242:	2901      	cmp	r1, #1
 8010244:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010248:	f240 809a 	bls.w	8010380 <uxr_write_framed_msg+0x18c>
 801024c:	18a1      	adds	r1, r4, r2
 801024e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010250:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8010254:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010258:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801025c:	3201      	adds	r2, #1
 801025e:	2801      	cmp	r0, #1
 8010260:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010264:	f240 80a0 	bls.w	80103a8 <uxr_write_framed_msg+0x1b4>
 8010268:	18a0      	adds	r0, r4, r2
 801026a:	3201      	adds	r2, #1
 801026c:	b2d2      	uxtb	r2, r2
 801026e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010272:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 80a9 	beq.w	80103ce <uxr_write_framed_msg+0x1da>
 801027c:	f04f 0900 	mov.w	r9, #0
 8010280:	46c8      	mov	r8, r9
 8010282:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010286:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801028a:	2901      	cmp	r1, #1
 801028c:	f240 80c3 	bls.w	8010416 <uxr_write_framed_msg+0x222>
 8010290:	2a29      	cmp	r2, #41	@ 0x29
 8010292:	f200 809f 	bhi.w	80103d4 <uxr_write_framed_msg+0x1e0>
 8010296:	18a1      	adds	r1, r4, r2
 8010298:	3201      	adds	r2, #1
 801029a:	b2d2      	uxtb	r2, r2
 801029c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80102a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80102a4:	ea89 0303 	eor.w	r3, r9, r3
 80102a8:	498c      	ldr	r1, [pc, #560]	@ (80104dc <uxr_write_framed_msg+0x2e8>)
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	f108 0801 	add.w	r8, r8, #1
 80102b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80102b4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80102b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102ba:	4543      	cmp	r3, r8
 80102bc:	d8e1      	bhi.n	8010282 <uxr_write_framed_msg+0x8e>
 80102be:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80102c2:	fa5f f889 	uxtb.w	r8, r9
 80102c6:	9301      	str	r3, [sp, #4]
 80102c8:	f04f 0900 	mov.w	r9, #0
 80102cc:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80102d0:	fa5f f18a 	uxtb.w	r1, sl
 80102d4:	2901      	cmp	r1, #1
 80102d6:	d921      	bls.n	801031c <uxr_write_framed_msg+0x128>
 80102d8:	2a29      	cmp	r2, #41	@ 0x29
 80102da:	f240 80af 	bls.w	801043c <uxr_write_framed_msg+0x248>
 80102de:	2500      	movs	r5, #0
 80102e0:	e000      	b.n	80102e4 <uxr_write_framed_msg+0xf0>
 80102e2:	b160      	cbz	r0, 80102fe <uxr_write_framed_msg+0x10a>
 80102e4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80102e8:	1b52      	subs	r2, r2, r5
 80102ea:	465b      	mov	r3, fp
 80102ec:	4421      	add	r1, r4
 80102ee:	4638      	mov	r0, r7
 80102f0:	47b0      	blx	r6
 80102f2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80102f6:	4405      	add	r5, r0
 80102f8:	4295      	cmp	r5, r2
 80102fa:	d3f2      	bcc.n	80102e2 <uxr_write_framed_msg+0xee>
 80102fc:	d003      	beq.n	8010306 <uxr_write_framed_msg+0x112>
 80102fe:	2000      	movs	r0, #0
 8010300:	b003      	add	sp, #12
 8010302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010306:	fa5f f18a 	uxtb.w	r1, sl
 801030a:	f04f 0300 	mov.w	r3, #0
 801030e:	2901      	cmp	r1, #1
 8010310:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010314:	f04f 0200 	mov.w	r2, #0
 8010318:	f200 8090 	bhi.w	801043c <uxr_write_framed_msg+0x248>
 801031c:	1c51      	adds	r1, r2, #1
 801031e:	b2c9      	uxtb	r1, r1
 8010320:	2929      	cmp	r1, #41	@ 0x29
 8010322:	d8dc      	bhi.n	80102de <uxr_write_framed_msg+0xea>
 8010324:	18a5      	adds	r5, r4, r2
 8010326:	4421      	add	r1, r4
 8010328:	3202      	adds	r2, #2
 801032a:	f088 0820 	eor.w	r8, r8, #32
 801032e:	4648      	mov	r0, r9
 8010330:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010334:	b2d2      	uxtb	r2, r2
 8010336:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801033a:	f04f 0901 	mov.w	r9, #1
 801033e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010342:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010346:	2800      	cmp	r0, #0
 8010348:	f040 8085 	bne.w	8010456 <uxr_write_framed_msg+0x262>
 801034c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010350:	e7bc      	b.n	80102cc <uxr_write_framed_msg+0xd8>
 8010352:	4611      	mov	r1, r2
 8010354:	f04f 0c03 	mov.w	ip, #3
 8010358:	2204      	movs	r2, #4
 801035a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801035c:	4421      	add	r1, r4
 801035e:	b2dd      	uxtb	r5, r3
 8010360:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8010364:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8010368:	44a4      	add	ip, r4
 801036a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801036e:	f080 0020 	eor.w	r0, r0, #32
 8010372:	2901      	cmp	r1, #1
 8010374:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8010378:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801037c:	f63f af66 	bhi.w	801024c <uxr_write_framed_msg+0x58>
 8010380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010382:	18a0      	adds	r0, r4, r2
 8010384:	f085 0520 	eor.w	r5, r5, #32
 8010388:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801038c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010390:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8010394:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8010398:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801039c:	3202      	adds	r2, #2
 801039e:	2801      	cmp	r0, #1
 80103a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80103a4:	f63f af60 	bhi.w	8010268 <uxr_write_framed_msg+0x74>
 80103a8:	1c50      	adds	r0, r2, #1
 80103aa:	18a5      	adds	r5, r4, r2
 80103ac:	fa54 f080 	uxtab	r0, r4, r0
 80103b0:	3202      	adds	r2, #2
 80103b2:	f081 0120 	eor.w	r1, r1, #32
 80103b6:	b2d2      	uxtb	r2, r2
 80103b8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80103bc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80103c0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80103c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f47f af57 	bne.w	801027c <uxr_write_framed_msg+0x88>
 80103ce:	9301      	str	r3, [sp, #4]
 80103d0:	4698      	mov	r8, r3
 80103d2:	e779      	b.n	80102c8 <uxr_write_framed_msg+0xd4>
 80103d4:	2500      	movs	r5, #0
 80103d6:	e001      	b.n	80103dc <uxr_write_framed_msg+0x1e8>
 80103d8:	2800      	cmp	r0, #0
 80103da:	d090      	beq.n	80102fe <uxr_write_framed_msg+0x10a>
 80103dc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80103e0:	1b52      	subs	r2, r2, r5
 80103e2:	465b      	mov	r3, fp
 80103e4:	4421      	add	r1, r4
 80103e6:	4638      	mov	r0, r7
 80103e8:	47b0      	blx	r6
 80103ea:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80103ee:	4405      	add	r5, r0
 80103f0:	4295      	cmp	r5, r2
 80103f2:	d3f1      	bcc.n	80103d8 <uxr_write_framed_msg+0x1e4>
 80103f4:	d183      	bne.n	80102fe <uxr_write_framed_msg+0x10a>
 80103f6:	f04f 0300 	mov.w	r3, #0
 80103fa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80103fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010400:	4543      	cmp	r3, r8
 8010402:	d964      	bls.n	80104ce <uxr_write_framed_msg+0x2da>
 8010404:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010408:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801040c:	2901      	cmp	r1, #1
 801040e:	f04f 0200 	mov.w	r2, #0
 8010412:	f63f af3d 	bhi.w	8010290 <uxr_write_framed_msg+0x9c>
 8010416:	1c51      	adds	r1, r2, #1
 8010418:	b2c9      	uxtb	r1, r1
 801041a:	2929      	cmp	r1, #41	@ 0x29
 801041c:	d8da      	bhi.n	80103d4 <uxr_write_framed_msg+0x1e0>
 801041e:	18a0      	adds	r0, r4, r2
 8010420:	4421      	add	r1, r4
 8010422:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8010426:	3202      	adds	r2, #2
 8010428:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801042c:	b2d2      	uxtb	r2, r2
 801042e:	f083 0020 	eor.w	r0, r3, #32
 8010432:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8010436:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801043a:	e733      	b.n	80102a4 <uxr_write_framed_msg+0xb0>
 801043c:	18a1      	adds	r1, r4, r2
 801043e:	3201      	adds	r2, #1
 8010440:	4648      	mov	r0, r9
 8010442:	b2d2      	uxtb	r2, r2
 8010444:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010448:	f04f 0901 	mov.w	r9, #1
 801044c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010450:	2800      	cmp	r0, #0
 8010452:	f43f af7b 	beq.w	801034c <uxr_write_framed_msg+0x158>
 8010456:	2500      	movs	r5, #0
 8010458:	e002      	b.n	8010460 <uxr_write_framed_msg+0x26c>
 801045a:	2800      	cmp	r0, #0
 801045c:	f43f af4f 	beq.w	80102fe <uxr_write_framed_msg+0x10a>
 8010460:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010464:	1b52      	subs	r2, r2, r5
 8010466:	465b      	mov	r3, fp
 8010468:	4421      	add	r1, r4
 801046a:	4638      	mov	r0, r7
 801046c:	47b0      	blx	r6
 801046e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010472:	4405      	add	r5, r0
 8010474:	4295      	cmp	r5, r2
 8010476:	d3f0      	bcc.n	801045a <uxr_write_framed_msg+0x266>
 8010478:	f47f af41 	bne.w	80102fe <uxr_write_framed_msg+0x10a>
 801047c:	2300      	movs	r3, #0
 801047e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010482:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010484:	b298      	uxth	r0, r3
 8010486:	b003      	add	sp, #12
 8010488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048c:	217d      	movs	r1, #125	@ 0x7d
 801048e:	f082 0220 	eor.w	r2, r2, #32
 8010492:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8010496:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801049a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801049e:	2901      	cmp	r1, #1
 80104a0:	f04f 0203 	mov.w	r2, #3
 80104a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80104a8:	d804      	bhi.n	80104b4 <uxr_write_framed_msg+0x2c0>
 80104aa:	4611      	mov	r1, r2
 80104ac:	f04f 0c04 	mov.w	ip, #4
 80104b0:	2205      	movs	r2, #5
 80104b2:	e752      	b.n	801035a <uxr_write_framed_msg+0x166>
 80104b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104b6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80104ba:	b2dd      	uxtb	r5, r3
 80104bc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80104c0:	2204      	movs	r2, #4
 80104c2:	2901      	cmp	r1, #1
 80104c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80104c8:	f63f aec0 	bhi.w	801024c <uxr_write_framed_msg+0x58>
 80104cc:	e758      	b.n	8010380 <uxr_write_framed_msg+0x18c>
 80104ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80104d2:	fa5f f889 	uxtb.w	r8, r9
 80104d6:	9301      	str	r3, [sp, #4]
 80104d8:	2200      	movs	r2, #0
 80104da:	e6f5      	b.n	80102c8 <uxr_write_framed_msg+0xd4>
 80104dc:	08019418 	.word	0x08019418

080104e0 <uxr_framing_read_transport>:
 80104e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e4:	4604      	mov	r4, r0
 80104e6:	b083      	sub	sp, #12
 80104e8:	461f      	mov	r7, r3
 80104ea:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80104ee:	4689      	mov	r9, r1
 80104f0:	4692      	mov	sl, r2
 80104f2:	f000 fc89 	bl	8010e08 <uxr_millis>
 80104f6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80104fa:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80104fe:	42b3      	cmp	r3, r6
 8010500:	4680      	mov	r8, r0
 8010502:	d061      	beq.n	80105c8 <uxr_framing_read_transport+0xe8>
 8010504:	d81c      	bhi.n	8010540 <uxr_framing_read_transport+0x60>
 8010506:	1e75      	subs	r5, r6, #1
 8010508:	1aed      	subs	r5, r5, r3
 801050a:	b2ed      	uxtb	r5, r5
 801050c:	2600      	movs	r6, #0
 801050e:	455d      	cmp	r5, fp
 8010510:	d81f      	bhi.n	8010552 <uxr_framing_read_transport+0x72>
 8010512:	19ab      	adds	r3, r5, r6
 8010514:	455b      	cmp	r3, fp
 8010516:	bf84      	itt	hi
 8010518:	ebab 0605 	subhi.w	r6, fp, r5
 801051c:	b2f6      	uxtbhi	r6, r6
 801051e:	b9ed      	cbnz	r5, 801055c <uxr_framing_read_transport+0x7c>
 8010520:	f04f 0b00 	mov.w	fp, #0
 8010524:	f000 fc70 	bl	8010e08 <uxr_millis>
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	eba0 0808 	sub.w	r8, r0, r8
 801052e:	eba3 0308 	sub.w	r3, r3, r8
 8010532:	4658      	mov	r0, fp
 8010534:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010538:	603b      	str	r3, [r7, #0]
 801053a:	b003      	add	sp, #12
 801053c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010540:	2e00      	cmp	r6, #0
 8010542:	d049      	beq.n	80105d8 <uxr_framing_read_transport+0xf8>
 8010544:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8010548:	b2ed      	uxtb	r5, r5
 801054a:	3e01      	subs	r6, #1
 801054c:	455d      	cmp	r5, fp
 801054e:	b2f6      	uxtb	r6, r6
 8010550:	d9df      	bls.n	8010512 <uxr_framing_read_transport+0x32>
 8010552:	fa5f f58b 	uxtb.w	r5, fp
 8010556:	2600      	movs	r6, #0
 8010558:	2d00      	cmp	r5, #0
 801055a:	d0e1      	beq.n	8010520 <uxr_framing_read_transport+0x40>
 801055c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010560:	3102      	adds	r1, #2
 8010562:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	4421      	add	r1, r4
 801056a:	462a      	mov	r2, r5
 801056c:	4650      	mov	r0, sl
 801056e:	47c8      	blx	r9
 8010570:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010574:	4a1a      	ldr	r2, [pc, #104]	@ (80105e0 <uxr_framing_read_transport+0x100>)
 8010576:	4403      	add	r3, r0
 8010578:	0859      	lsrs	r1, r3, #1
 801057a:	fba2 2101 	umull	r2, r1, r2, r1
 801057e:	0889      	lsrs	r1, r1, #2
 8010580:	222a      	movs	r2, #42	@ 0x2a
 8010582:	fb02 3111 	mls	r1, r2, r1, r3
 8010586:	4683      	mov	fp, r0
 8010588:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801058c:	2800      	cmp	r0, #0
 801058e:	d0c7      	beq.n	8010520 <uxr_framing_read_transport+0x40>
 8010590:	42a8      	cmp	r0, r5
 8010592:	d1c7      	bne.n	8010524 <uxr_framing_read_transport+0x44>
 8010594:	2e00      	cmp	r6, #0
 8010596:	d0c5      	beq.n	8010524 <uxr_framing_read_transport+0x44>
 8010598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801059a:	9300      	str	r3, [sp, #0]
 801059c:	3102      	adds	r1, #2
 801059e:	4632      	mov	r2, r6
 80105a0:	4421      	add	r1, r4
 80105a2:	2300      	movs	r3, #0
 80105a4:	4650      	mov	r0, sl
 80105a6:	47c8      	blx	r9
 80105a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80105ac:	4a0c      	ldr	r2, [pc, #48]	@ (80105e0 <uxr_framing_read_transport+0x100>)
 80105ae:	180b      	adds	r3, r1, r0
 80105b0:	0859      	lsrs	r1, r3, #1
 80105b2:	fba2 1201 	umull	r1, r2, r2, r1
 80105b6:	0892      	lsrs	r2, r2, #2
 80105b8:	212a      	movs	r1, #42	@ 0x2a
 80105ba:	fb01 3312 	mls	r3, r1, r2, r3
 80105be:	eb00 0b05 	add.w	fp, r0, r5
 80105c2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80105c6:	e7ad      	b.n	8010524 <uxr_framing_read_transport+0x44>
 80105c8:	2600      	movs	r6, #0
 80105ca:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80105ce:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80105d0:	d9bf      	bls.n	8010552 <uxr_framing_read_transport+0x72>
 80105d2:	2102      	movs	r1, #2
 80105d4:	2529      	movs	r5, #41	@ 0x29
 80105d6:	e7c4      	b.n	8010562 <uxr_framing_read_transport+0x82>
 80105d8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80105dc:	b2ed      	uxtb	r5, r5
 80105de:	e796      	b.n	801050e <uxr_framing_read_transport+0x2e>
 80105e0:	30c30c31 	.word	0x30c30c31

080105e4 <uxr_read_framed_msg>:
 80105e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e8:	461e      	mov	r6, r3
 80105ea:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80105ee:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80105f2:	429d      	cmp	r5, r3
 80105f4:	b083      	sub	sp, #12
 80105f6:	4604      	mov	r4, r0
 80105f8:	4688      	mov	r8, r1
 80105fa:	4691      	mov	r9, r2
 80105fc:	f000 8188 	beq.w	8010910 <uxr_read_framed_msg+0x32c>
 8010600:	7823      	ldrb	r3, [r4, #0]
 8010602:	4dc1      	ldr	r5, [pc, #772]	@ (8010908 <uxr_read_framed_msg+0x324>)
 8010604:	4fc1      	ldr	r7, [pc, #772]	@ (801090c <uxr_read_framed_msg+0x328>)
 8010606:	2b07      	cmp	r3, #7
 8010608:	d8fd      	bhi.n	8010606 <uxr_read_framed_msg+0x22>
 801060a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801060e:	0115      	.short	0x0115
 8010610:	00d600f6 	.word	0x00d600f6
 8010614:	009000b9 	.word	0x009000b9
 8010618:	0030004d 	.word	0x0030004d
 801061c:	0008      	.short	0x0008
 801061e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010622:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010626:	4299      	cmp	r1, r3
 8010628:	f000 814a 	beq.w	80108c0 <uxr_read_framed_msg+0x2dc>
 801062c:	18e2      	adds	r2, r4, r3
 801062e:	7892      	ldrb	r2, [r2, #2]
 8010630:	2a7d      	cmp	r2, #125	@ 0x7d
 8010632:	f000 8199 	beq.w	8010968 <uxr_read_framed_msg+0x384>
 8010636:	3301      	adds	r3, #1
 8010638:	0858      	lsrs	r0, r3, #1
 801063a:	fba5 1000 	umull	r1, r0, r5, r0
 801063e:	0880      	lsrs	r0, r0, #2
 8010640:	212a      	movs	r1, #42	@ 0x2a
 8010642:	fb01 3310 	mls	r3, r1, r0, r3
 8010646:	2a7e      	cmp	r2, #126	@ 0x7e
 8010648:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801064c:	f000 8252 	beq.w	8010af4 <uxr_read_framed_msg+0x510>
 8010650:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010652:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8010654:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010658:	b29b      	uxth	r3, r3
 801065a:	2200      	movs	r2, #0
 801065c:	4299      	cmp	r1, r3
 801065e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010660:	7022      	strb	r2, [r4, #0]
 8010662:	f000 8179 	beq.w	8010958 <uxr_read_framed_msg+0x374>
 8010666:	2000      	movs	r0, #0
 8010668:	b003      	add	sp, #12
 801066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010672:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010676:	4299      	cmp	r1, r3
 8010678:	f000 8131 	beq.w	80108de <uxr_read_framed_msg+0x2fa>
 801067c:	18e2      	adds	r2, r4, r3
 801067e:	7890      	ldrb	r0, [r2, #2]
 8010680:	287d      	cmp	r0, #125	@ 0x7d
 8010682:	f000 8190 	beq.w	80109a6 <uxr_read_framed_msg+0x3c2>
 8010686:	3301      	adds	r3, #1
 8010688:	085a      	lsrs	r2, r3, #1
 801068a:	fba5 1202 	umull	r1, r2, r5, r2
 801068e:	0892      	lsrs	r2, r2, #2
 8010690:	212a      	movs	r1, #42	@ 0x2a
 8010692:	fb01 3312 	mls	r3, r1, r2, r3
 8010696:	287e      	cmp	r0, #126	@ 0x7e
 8010698:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801069c:	f000 821a 	beq.w	8010ad4 <uxr_read_framed_msg+0x4f0>
 80106a0:	2307      	movs	r3, #7
 80106a2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80106a4:	7023      	strb	r3, [r4, #0]
 80106a6:	e7ae      	b.n	8010606 <uxr_read_framed_msg+0x22>
 80106a8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80106aa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80106ae:	459e      	cmp	lr, r3
 80106b0:	d938      	bls.n	8010724 <uxr_read_framed_msg+0x140>
 80106b2:	ee07 8a90 	vmov	s15, r8
 80106b6:	212a      	movs	r1, #42	@ 0x2a
 80106b8:	e020      	b.n	80106fc <uxr_read_framed_msg+0x118>
 80106ba:	f89b c002 	ldrb.w	ip, [fp, #2]
 80106be:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80106c2:	f000 80d4 	beq.w	801086e <uxr_read_framed_msg+0x28a>
 80106c6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80106ca:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80106ce:	f000 8219 	beq.w	8010b04 <uxr_read_framed_msg+0x520>
 80106d2:	f806 c003 	strb.w	ip, [r6, r3]
 80106d6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80106da:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80106dc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80106e0:	ea8a 000c 	eor.w	r0, sl, ip
 80106e4:	b2c0      	uxtb	r0, r0
 80106e6:	3301      	adds	r3, #1
 80106e8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80106f2:	4573      	cmp	r3, lr
 80106f4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80106f6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80106f8:	f080 8120 	bcs.w	801093c <uxr_read_framed_msg+0x358>
 80106fc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8010700:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010704:	f100 0c01 	add.w	ip, r0, #1
 8010708:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801070c:	fba5 8202 	umull	r8, r2, r5, r2
 8010710:	0892      	lsrs	r2, r2, #2
 8010712:	4582      	cmp	sl, r0
 8010714:	eb04 0b00 	add.w	fp, r4, r0
 8010718:	fb01 c212 	mls	r2, r1, r2, ip
 801071c:	d1cd      	bne.n	80106ba <uxr_read_framed_msg+0xd6>
 801071e:	ee17 8a90 	vmov	r8, s15
 8010722:	459e      	cmp	lr, r3
 8010724:	f040 8111 	bne.w	801094a <uxr_read_framed_msg+0x366>
 8010728:	2306      	movs	r3, #6
 801072a:	7023      	strb	r3, [r4, #0]
 801072c:	e76b      	b.n	8010606 <uxr_read_framed_msg+0x22>
 801072e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010732:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010736:	4298      	cmp	r0, r3
 8010738:	f000 80c2 	beq.w	80108c0 <uxr_read_framed_msg+0x2dc>
 801073c:	18e2      	adds	r2, r4, r3
 801073e:	7891      	ldrb	r1, [r2, #2]
 8010740:	297d      	cmp	r1, #125	@ 0x7d
 8010742:	f000 814c 	beq.w	80109de <uxr_read_framed_msg+0x3fa>
 8010746:	3301      	adds	r3, #1
 8010748:	085a      	lsrs	r2, r3, #1
 801074a:	fba5 0202 	umull	r0, r2, r5, r2
 801074e:	0892      	lsrs	r2, r2, #2
 8010750:	202a      	movs	r0, #42	@ 0x2a
 8010752:	fb00 3312 	mls	r3, r0, r2, r3
 8010756:	297e      	cmp	r1, #126	@ 0x7e
 8010758:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801075c:	f000 81ca 	beq.w	8010af4 <uxr_read_framed_msg+0x510>
 8010760:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8010762:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010766:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010768:	b29b      	uxth	r3, r3
 801076a:	2000      	movs	r0, #0
 801076c:	428b      	cmp	r3, r1
 801076e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010770:	8660      	strh	r0, [r4, #50]	@ 0x32
 8010772:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8010774:	f240 80df 	bls.w	8010936 <uxr_read_framed_msg+0x352>
 8010778:	7020      	strb	r0, [r4, #0]
 801077a:	b003      	add	sp, #12
 801077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010780:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010784:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010788:	4299      	cmp	r1, r3
 801078a:	f000 80a8 	beq.w	80108de <uxr_read_framed_msg+0x2fa>
 801078e:	18e2      	adds	r2, r4, r3
 8010790:	7890      	ldrb	r0, [r2, #2]
 8010792:	287d      	cmp	r0, #125	@ 0x7d
 8010794:	f000 8164 	beq.w	8010a60 <uxr_read_framed_msg+0x47c>
 8010798:	3301      	adds	r3, #1
 801079a:	085a      	lsrs	r2, r3, #1
 801079c:	fba5 1202 	umull	r1, r2, r5, r2
 80107a0:	0892      	lsrs	r2, r2, #2
 80107a2:	212a      	movs	r1, #42	@ 0x2a
 80107a4:	fb01 3312 	mls	r3, r1, r2, r3
 80107a8:	287e      	cmp	r0, #126	@ 0x7e
 80107aa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80107ae:	f000 8191 	beq.w	8010ad4 <uxr_read_framed_msg+0x4f0>
 80107b2:	2304      	movs	r3, #4
 80107b4:	8620      	strh	r0, [r4, #48]	@ 0x30
 80107b6:	7023      	strb	r3, [r4, #0]
 80107b8:	e725      	b.n	8010606 <uxr_read_framed_msg+0x22>
 80107ba:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80107be:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80107c2:	4290      	cmp	r0, r2
 80107c4:	f000 80b3 	beq.w	801092e <uxr_read_framed_msg+0x34a>
 80107c8:	18a3      	adds	r3, r4, r2
 80107ca:	7899      	ldrb	r1, [r3, #2]
 80107cc:	297d      	cmp	r1, #125	@ 0x7d
 80107ce:	f000 8164 	beq.w	8010a9a <uxr_read_framed_msg+0x4b6>
 80107d2:	3201      	adds	r2, #1
 80107d4:	0850      	lsrs	r0, r2, #1
 80107d6:	fba5 3000 	umull	r3, r0, r5, r0
 80107da:	0880      	lsrs	r0, r0, #2
 80107dc:	232a      	movs	r3, #42	@ 0x2a
 80107de:	fb03 2210 	mls	r2, r3, r0, r2
 80107e2:	297e      	cmp	r1, #126	@ 0x7e
 80107e4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80107e8:	f000 8188 	beq.w	8010afc <uxr_read_framed_msg+0x518>
 80107ec:	7863      	ldrb	r3, [r4, #1]
 80107ee:	428b      	cmp	r3, r1
 80107f0:	bf0c      	ite	eq
 80107f2:	2303      	moveq	r3, #3
 80107f4:	2300      	movne	r3, #0
 80107f6:	7023      	strb	r3, [r4, #0]
 80107f8:	e705      	b.n	8010606 <uxr_read_framed_msg+0x22>
 80107fa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80107fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010802:	2200      	movs	r2, #0
 8010804:	4299      	cmp	r1, r3
 8010806:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801080a:	d06c      	beq.n	80108e6 <uxr_read_framed_msg+0x302>
 801080c:	18e2      	adds	r2, r4, r3
 801080e:	7890      	ldrb	r0, [r2, #2]
 8010810:	287d      	cmp	r0, #125	@ 0x7d
 8010812:	f000 8101 	beq.w	8010a18 <uxr_read_framed_msg+0x434>
 8010816:	3301      	adds	r3, #1
 8010818:	085a      	lsrs	r2, r3, #1
 801081a:	fba5 1202 	umull	r1, r2, r5, r2
 801081e:	0892      	lsrs	r2, r2, #2
 8010820:	212a      	movs	r1, #42	@ 0x2a
 8010822:	fb01 3312 	mls	r3, r1, r2, r3
 8010826:	287e      	cmp	r0, #126	@ 0x7e
 8010828:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801082c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010830:	d059      	beq.n	80108e6 <uxr_read_framed_msg+0x302>
 8010832:	2302      	movs	r3, #2
 8010834:	7023      	strb	r3, [r4, #0]
 8010836:	e6e6      	b.n	8010606 <uxr_read_framed_msg+0x22>
 8010838:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801083c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010840:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8010844:	1c51      	adds	r1, r2, #1
 8010846:	084b      	lsrs	r3, r1, #1
 8010848:	fba5 c303 	umull	ip, r3, r5, r3
 801084c:	089b      	lsrs	r3, r3, #2
 801084e:	fb0e 1313 	mls	r3, lr, r3, r1
 8010852:	4592      	cmp	sl, r2
 8010854:	eb04 0002 	add.w	r0, r4, r2
 8010858:	b2da      	uxtb	r2, r3
 801085a:	f43f af04 	beq.w	8010666 <uxr_read_framed_msg+0x82>
 801085e:	7883      	ldrb	r3, [r0, #2]
 8010860:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010864:	2b7e      	cmp	r3, #126	@ 0x7e
 8010866:	d1ed      	bne.n	8010844 <uxr_read_framed_msg+0x260>
 8010868:	2301      	movs	r3, #1
 801086a:	7023      	strb	r3, [r4, #0]
 801086c:	e6cb      	b.n	8010606 <uxr_read_framed_msg+0x22>
 801086e:	f100 0c01 	add.w	ip, r0, #1
 8010872:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010876:	fba5 8202 	umull	r8, r2, r5, r2
 801087a:	0892      	lsrs	r2, r2, #2
 801087c:	fb01 c212 	mls	r2, r1, r2, ip
 8010880:	eb04 0c02 	add.w	ip, r4, r2
 8010884:	b2d2      	uxtb	r2, r2
 8010886:	4592      	cmp	sl, r2
 8010888:	f100 0002 	add.w	r0, r0, #2
 801088c:	f43f af47 	beq.w	801071e <uxr_read_framed_msg+0x13a>
 8010890:	0842      	lsrs	r2, r0, #1
 8010892:	f89c a002 	ldrb.w	sl, [ip, #2]
 8010896:	fba5 8202 	umull	r8, r2, r5, r2
 801089a:	0892      	lsrs	r2, r2, #2
 801089c:	fb01 0012 	mls	r0, r1, r2, r0
 80108a0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80108a4:	f08a 0c20 	eor.w	ip, sl, #32
 80108a8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80108ac:	f47f af11 	bne.w	80106d2 <uxr_read_framed_msg+0xee>
 80108b0:	459e      	cmp	lr, r3
 80108b2:	ee17 8a90 	vmov	r8, s15
 80108b6:	f43f af37 	beq.w	8010728 <uxr_read_framed_msg+0x144>
 80108ba:	2301      	movs	r3, #1
 80108bc:	7023      	strb	r3, [r4, #0]
 80108be:	e6a2      	b.n	8010606 <uxr_read_framed_msg+0x22>
 80108c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	2301      	movs	r3, #1
 80108c6:	9301      	str	r3, [sp, #4]
 80108c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108ca:	464a      	mov	r2, r9
 80108cc:	4641      	mov	r1, r8
 80108ce:	4620      	mov	r0, r4
 80108d0:	f7ff fe06 	bl	80104e0 <uxr_framing_read_transport>
 80108d4:	2800      	cmp	r0, #0
 80108d6:	f43f aec6 	beq.w	8010666 <uxr_read_framed_msg+0x82>
 80108da:	7823      	ldrb	r3, [r4, #0]
 80108dc:	e693      	b.n	8010606 <uxr_read_framed_msg+0x22>
 80108de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108e0:	9300      	str	r3, [sp, #0]
 80108e2:	2302      	movs	r3, #2
 80108e4:	e7ef      	b.n	80108c6 <uxr_read_framed_msg+0x2e2>
 80108e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	2304      	movs	r3, #4
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	464a      	mov	r2, r9
 80108f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108f2:	4641      	mov	r1, r8
 80108f4:	4620      	mov	r0, r4
 80108f6:	f7ff fdf3 	bl	80104e0 <uxr_framing_read_transport>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d1ed      	bne.n	80108da <uxr_read_framed_msg+0x2f6>
 80108fe:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010902:	2b7e      	cmp	r3, #126	@ 0x7e
 8010904:	d0e9      	beq.n	80108da <uxr_read_framed_msg+0x2f6>
 8010906:	e6ae      	b.n	8010666 <uxr_read_framed_msg+0x82>
 8010908:	30c30c31 	.word	0x30c30c31
 801090c:	08019418 	.word	0x08019418
 8010910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	2305      	movs	r3, #5
 8010916:	9301      	str	r3, [sp, #4]
 8010918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801091a:	f7ff fde1 	bl	80104e0 <uxr_framing_read_transport>
 801091e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010922:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010926:	429a      	cmp	r2, r3
 8010928:	f43f ae9d 	beq.w	8010666 <uxr_read_framed_msg+0x82>
 801092c:	e668      	b.n	8010600 <uxr_read_framed_msg+0x1c>
 801092e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	2303      	movs	r3, #3
 8010934:	e7c7      	b.n	80108c6 <uxr_read_framed_msg+0x2e2>
 8010936:	2305      	movs	r3, #5
 8010938:	7023      	strb	r3, [r4, #0]
 801093a:	e664      	b.n	8010606 <uxr_read_framed_msg+0x22>
 801093c:	ee17 8a90 	vmov	r8, s15
 8010940:	f43f aef2 	beq.w	8010728 <uxr_read_framed_msg+0x144>
 8010944:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010948:	d08e      	beq.n	8010868 <uxr_read_framed_msg+0x284>
 801094a:	ebae 0303 	sub.w	r3, lr, r3
 801094e:	3302      	adds	r3, #2
 8010950:	9301      	str	r3, [sp, #4]
 8010952:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	e7b7      	b.n	80108c8 <uxr_read_framed_msg+0x2e4>
 8010958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801095a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801095e:	7013      	strb	r3, [r2, #0]
 8010960:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8010962:	b003      	add	sp, #12
 8010964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010968:	f103 0c01 	add.w	ip, r3, #1
 801096c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010970:	fba5 0202 	umull	r0, r2, r5, r2
 8010974:	0892      	lsrs	r2, r2, #2
 8010976:	202a      	movs	r0, #42	@ 0x2a
 8010978:	fb00 c212 	mls	r2, r0, r2, ip
 801097c:	fa5f fc82 	uxtb.w	ip, r2
 8010980:	4561      	cmp	r1, ip
 8010982:	d09d      	beq.n	80108c0 <uxr_read_framed_msg+0x2dc>
 8010984:	3302      	adds	r3, #2
 8010986:	4422      	add	r2, r4
 8010988:	0859      	lsrs	r1, r3, #1
 801098a:	7892      	ldrb	r2, [r2, #2]
 801098c:	fba5 c101 	umull	ip, r1, r5, r1
 8010990:	0889      	lsrs	r1, r1, #2
 8010992:	fb00 3311 	mls	r3, r0, r1, r3
 8010996:	2a7e      	cmp	r2, #126	@ 0x7e
 8010998:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801099c:	f000 80aa 	beq.w	8010af4 <uxr_read_framed_msg+0x510>
 80109a0:	f082 0220 	eor.w	r2, r2, #32
 80109a4:	e654      	b.n	8010650 <uxr_read_framed_msg+0x6c>
 80109a6:	1c58      	adds	r0, r3, #1
 80109a8:	0842      	lsrs	r2, r0, #1
 80109aa:	fba5 c202 	umull	ip, r2, r5, r2
 80109ae:	0892      	lsrs	r2, r2, #2
 80109b0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80109b4:	fb0c 0212 	mls	r2, ip, r2, r0
 80109b8:	b2d0      	uxtb	r0, r2
 80109ba:	4281      	cmp	r1, r0
 80109bc:	d08f      	beq.n	80108de <uxr_read_framed_msg+0x2fa>
 80109be:	4422      	add	r2, r4
 80109c0:	3302      	adds	r3, #2
 80109c2:	7890      	ldrb	r0, [r2, #2]
 80109c4:	085a      	lsrs	r2, r3, #1
 80109c6:	fba5 1202 	umull	r1, r2, r5, r2
 80109ca:	0892      	lsrs	r2, r2, #2
 80109cc:	fb0c 3312 	mls	r3, ip, r2, r3
 80109d0:	287e      	cmp	r0, #126	@ 0x7e
 80109d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80109d6:	d07d      	beq.n	8010ad4 <uxr_read_framed_msg+0x4f0>
 80109d8:	f080 0020 	eor.w	r0, r0, #32
 80109dc:	e660      	b.n	80106a0 <uxr_read_framed_msg+0xbc>
 80109de:	1c59      	adds	r1, r3, #1
 80109e0:	084a      	lsrs	r2, r1, #1
 80109e2:	fba5 c202 	umull	ip, r2, r5, r2
 80109e6:	0892      	lsrs	r2, r2, #2
 80109e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80109ec:	fb0c 1212 	mls	r2, ip, r2, r1
 80109f0:	b2d1      	uxtb	r1, r2
 80109f2:	4288      	cmp	r0, r1
 80109f4:	f43f af64 	beq.w	80108c0 <uxr_read_framed_msg+0x2dc>
 80109f8:	4422      	add	r2, r4
 80109fa:	3302      	adds	r3, #2
 80109fc:	7891      	ldrb	r1, [r2, #2]
 80109fe:	085a      	lsrs	r2, r3, #1
 8010a00:	fba5 0202 	umull	r0, r2, r5, r2
 8010a04:	0892      	lsrs	r2, r2, #2
 8010a06:	fb0c 3312 	mls	r3, ip, r2, r3
 8010a0a:	297e      	cmp	r1, #126	@ 0x7e
 8010a0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a10:	d070      	beq.n	8010af4 <uxr_read_framed_msg+0x510>
 8010a12:	f081 0120 	eor.w	r1, r1, #32
 8010a16:	e6a3      	b.n	8010760 <uxr_read_framed_msg+0x17c>
 8010a18:	f103 0c01 	add.w	ip, r3, #1
 8010a1c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010a20:	fba5 0202 	umull	r0, r2, r5, r2
 8010a24:	0892      	lsrs	r2, r2, #2
 8010a26:	202a      	movs	r0, #42	@ 0x2a
 8010a28:	fb00 c212 	mls	r2, r0, r2, ip
 8010a2c:	fa5f fc82 	uxtb.w	ip, r2
 8010a30:	4561      	cmp	r1, ip
 8010a32:	f43f af58 	beq.w	80108e6 <uxr_read_framed_msg+0x302>
 8010a36:	4422      	add	r2, r4
 8010a38:	3302      	adds	r3, #2
 8010a3a:	7891      	ldrb	r1, [r2, #2]
 8010a3c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010a40:	085a      	lsrs	r2, r3, #1
 8010a42:	fba5 c202 	umull	ip, r2, r5, r2
 8010a46:	0892      	lsrs	r2, r2, #2
 8010a48:	fb00 3312 	mls	r3, r0, r2, r3
 8010a4c:	297e      	cmp	r1, #126	@ 0x7e
 8010a4e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a52:	f43f af48 	beq.w	80108e6 <uxr_read_framed_msg+0x302>
 8010a56:	f081 0120 	eor.w	r1, r1, #32
 8010a5a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010a5e:	e6e8      	b.n	8010832 <uxr_read_framed_msg+0x24e>
 8010a60:	1c58      	adds	r0, r3, #1
 8010a62:	0842      	lsrs	r2, r0, #1
 8010a64:	fba5 c202 	umull	ip, r2, r5, r2
 8010a68:	0892      	lsrs	r2, r2, #2
 8010a6a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010a6e:	fb0c 0212 	mls	r2, ip, r2, r0
 8010a72:	b2d0      	uxtb	r0, r2
 8010a74:	4281      	cmp	r1, r0
 8010a76:	f43f af32 	beq.w	80108de <uxr_read_framed_msg+0x2fa>
 8010a7a:	4422      	add	r2, r4
 8010a7c:	3302      	adds	r3, #2
 8010a7e:	7890      	ldrb	r0, [r2, #2]
 8010a80:	085a      	lsrs	r2, r3, #1
 8010a82:	fba5 1202 	umull	r1, r2, r5, r2
 8010a86:	0892      	lsrs	r2, r2, #2
 8010a88:	fb0c 3312 	mls	r3, ip, r2, r3
 8010a8c:	287e      	cmp	r0, #126	@ 0x7e
 8010a8e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a92:	d01f      	beq.n	8010ad4 <uxr_read_framed_msg+0x4f0>
 8010a94:	f080 0020 	eor.w	r0, r0, #32
 8010a98:	e68b      	b.n	80107b2 <uxr_read_framed_msg+0x1ce>
 8010a9a:	1c51      	adds	r1, r2, #1
 8010a9c:	084b      	lsrs	r3, r1, #1
 8010a9e:	fba5 c303 	umull	ip, r3, r5, r3
 8010aa2:	089b      	lsrs	r3, r3, #2
 8010aa4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010aa8:	fb0c 1313 	mls	r3, ip, r3, r1
 8010aac:	b2d9      	uxtb	r1, r3
 8010aae:	4288      	cmp	r0, r1
 8010ab0:	f43f af3d 	beq.w	801092e <uxr_read_framed_msg+0x34a>
 8010ab4:	3202      	adds	r2, #2
 8010ab6:	4423      	add	r3, r4
 8010ab8:	0850      	lsrs	r0, r2, #1
 8010aba:	789b      	ldrb	r3, [r3, #2]
 8010abc:	fba5 1000 	umull	r1, r0, r5, r0
 8010ac0:	0880      	lsrs	r0, r0, #2
 8010ac2:	fb0c 2210 	mls	r2, ip, r0, r2
 8010ac6:	2b7e      	cmp	r3, #126	@ 0x7e
 8010ac8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010acc:	d016      	beq.n	8010afc <uxr_read_framed_msg+0x518>
 8010ace:	f083 0120 	eor.w	r1, r3, #32
 8010ad2:	e68b      	b.n	80107ec <uxr_read_framed_msg+0x208>
 8010ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	2302      	movs	r3, #2
 8010ada:	9301      	str	r3, [sp, #4]
 8010adc:	464a      	mov	r2, r9
 8010ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ae0:	4641      	mov	r1, r8
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f7ff fcfc 	bl	80104e0 <uxr_framing_read_transport>
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	f47f aef6 	bne.w	80108da <uxr_read_framed_msg+0x2f6>
 8010aee:	2301      	movs	r3, #1
 8010af0:	7023      	strb	r3, [r4, #0]
 8010af2:	e588      	b.n	8010606 <uxr_read_framed_msg+0x22>
 8010af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	2301      	movs	r3, #1
 8010afa:	e7ee      	b.n	8010ada <uxr_read_framed_msg+0x4f6>
 8010afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	2303      	movs	r3, #3
 8010b02:	e7ea      	b.n	8010ada <uxr_read_framed_msg+0x4f6>
 8010b04:	ee17 8a90 	vmov	r8, s15
 8010b08:	e6ae      	b.n	8010868 <uxr_read_framed_msg+0x284>
 8010b0a:	bf00      	nop

08010b0c <uxr_stream_id>:
 8010b0c:	2901      	cmp	r1, #1
 8010b0e:	b082      	sub	sp, #8
 8010b10:	d01d      	beq.n	8010b4e <uxr_stream_id+0x42>
 8010b12:	2902      	cmp	r1, #2
 8010b14:	f04f 0c00 	mov.w	ip, #0
 8010b18:	d01e      	beq.n	8010b58 <uxr_stream_id+0x4c>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	f36c 0307 	bfi	r3, ip, #0, #8
 8010b20:	f360 230f 	bfi	r3, r0, #8, #8
 8010b24:	f361 4317 	bfi	r3, r1, #16, #8
 8010b28:	f362 631f 	bfi	r3, r2, #24, #8
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	2000      	movs	r0, #0
 8010b30:	f362 0007 	bfi	r0, r2, #0, #8
 8010b34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010b38:	f362 200f 	bfi	r0, r2, #8, #8
 8010b3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b40:	f362 4017 	bfi	r0, r2, #16, #8
 8010b44:	0e1b      	lsrs	r3, r3, #24
 8010b46:	f363 601f 	bfi	r0, r3, #24, #8
 8010b4a:	b002      	add	sp, #8
 8010b4c:	4770      	bx	lr
 8010b4e:	f100 0c01 	add.w	ip, r0, #1
 8010b52:	fa5f fc8c 	uxtb.w	ip, ip
 8010b56:	e7e0      	b.n	8010b1a <uxr_stream_id+0xe>
 8010b58:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010b5c:	e7dd      	b.n	8010b1a <uxr_stream_id+0xe>
 8010b5e:	bf00      	nop

08010b60 <uxr_stream_id_from_raw>:
 8010b60:	b082      	sub	sp, #8
 8010b62:	b130      	cbz	r0, 8010b72 <uxr_stream_id_from_raw+0x12>
 8010b64:	0603      	lsls	r3, r0, #24
 8010b66:	d420      	bmi.n	8010baa <uxr_stream_id_from_raw+0x4a>
 8010b68:	1e42      	subs	r2, r0, #1
 8010b6a:	b2d2      	uxtb	r2, r2
 8010b6c:	f04f 0c01 	mov.w	ip, #1
 8010b70:	e001      	b.n	8010b76 <uxr_stream_id_from_raw+0x16>
 8010b72:	4684      	mov	ip, r0
 8010b74:	4602      	mov	r2, r0
 8010b76:	2300      	movs	r3, #0
 8010b78:	f360 0307 	bfi	r3, r0, #0, #8
 8010b7c:	f362 230f 	bfi	r3, r2, #8, #8
 8010b80:	f36c 4317 	bfi	r3, ip, #16, #8
 8010b84:	f361 631f 	bfi	r3, r1, #24, #8
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	2000      	movs	r0, #0
 8010b8c:	f362 0007 	bfi	r0, r2, #0, #8
 8010b90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010b94:	f362 200f 	bfi	r0, r2, #8, #8
 8010b98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b9c:	f362 4017 	bfi	r0, r2, #16, #8
 8010ba0:	0e1b      	lsrs	r3, r3, #24
 8010ba2:	f363 601f 	bfi	r0, r3, #24, #8
 8010ba6:	b002      	add	sp, #8
 8010ba8:	4770      	bx	lr
 8010baa:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010bae:	f04f 0c02 	mov.w	ip, #2
 8010bb2:	e7e0      	b.n	8010b76 <uxr_stream_id_from_raw+0x16>

08010bb4 <uxr_init_stream_storage>:
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	7403      	strb	r3, [r0, #16]
 8010bb8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010bbc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010bc0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop

08010bc8 <uxr_reset_stream_storage>:
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	7c03      	ldrb	r3, [r0, #16]
 8010bcc:	4604      	mov	r4, r0
 8010bce:	b153      	cbz	r3, 8010be6 <uxr_reset_stream_storage+0x1e>
 8010bd0:	4606      	mov	r6, r0
 8010bd2:	2500      	movs	r5, #0
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	f005 fe45 	bl	8016864 <uxr_reset_output_best_effort_stream>
 8010bda:	7c23      	ldrb	r3, [r4, #16]
 8010bdc:	3501      	adds	r5, #1
 8010bde:	42ab      	cmp	r3, r5
 8010be0:	f106 0610 	add.w	r6, r6, #16
 8010be4:	d8f6      	bhi.n	8010bd4 <uxr_reset_stream_storage+0xc>
 8010be6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bea:	b163      	cbz	r3, 8010c06 <uxr_reset_stream_storage+0x3e>
 8010bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010bf0:	2500      	movs	r5, #0
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f005 fc38 	bl	8016468 <uxr_reset_input_best_effort_stream>
 8010bf8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bfc:	3501      	adds	r5, #1
 8010bfe:	42ab      	cmp	r3, r5
 8010c00:	f106 0602 	add.w	r6, r6, #2
 8010c04:	d8f5      	bhi.n	8010bf2 <uxr_reset_stream_storage+0x2a>
 8010c06:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010c0a:	b163      	cbz	r3, 8010c26 <uxr_reset_stream_storage+0x5e>
 8010c0c:	f104 0618 	add.w	r6, r4, #24
 8010c10:	2500      	movs	r5, #0
 8010c12:	4630      	mov	r0, r6
 8010c14:	f005 fed2 	bl	80169bc <uxr_reset_output_reliable_stream>
 8010c18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010c1c:	3501      	adds	r5, #1
 8010c1e:	42ab      	cmp	r3, r5
 8010c20:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010c24:	d8f5      	bhi.n	8010c12 <uxr_reset_stream_storage+0x4a>
 8010c26:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010c2a:	b163      	cbz	r3, 8010c46 <uxr_reset_stream_storage+0x7e>
 8010c2c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010c30:	2500      	movs	r5, #0
 8010c32:	4630      	mov	r0, r6
 8010c34:	f005 fc8c 	bl	8016550 <uxr_reset_input_reliable_stream>
 8010c38:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010c3c:	3501      	adds	r5, #1
 8010c3e:	42ab      	cmp	r3, r5
 8010c40:	f106 0618 	add.w	r6, r6, #24
 8010c44:	d8f5      	bhi.n	8010c32 <uxr_reset_stream_storage+0x6a>
 8010c46:	bd70      	pop	{r4, r5, r6, pc}

08010c48 <uxr_add_output_best_effort_buffer>:
 8010c48:	b510      	push	{r4, lr}
 8010c4a:	7c04      	ldrb	r4, [r0, #16]
 8010c4c:	f104 0c01 	add.w	ip, r4, #1
 8010c50:	b082      	sub	sp, #8
 8010c52:	f880 c010 	strb.w	ip, [r0, #16]
 8010c56:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010c5a:	f005 fdf9 	bl	8016850 <uxr_init_output_best_effort_stream>
 8010c5e:	2201      	movs	r2, #1
 8010c60:	4611      	mov	r1, r2
 8010c62:	4620      	mov	r0, r4
 8010c64:	b002      	add	sp, #8
 8010c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c6a:	f7ff bf4f 	b.w	8010b0c <uxr_stream_id>
 8010c6e:	bf00      	nop

08010c70 <uxr_add_output_reliable_buffer>:
 8010c70:	b510      	push	{r4, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	4684      	mov	ip, r0
 8010c76:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010c7a:	9000      	str	r0, [sp, #0]
 8010c7c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010c80:	2028      	movs	r0, #40	@ 0x28
 8010c82:	fb00 c004 	mla	r0, r0, r4, ip
 8010c86:	f104 0e01 	add.w	lr, r4, #1
 8010c8a:	3018      	adds	r0, #24
 8010c8c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010c90:	f005 fe5c 	bl	801694c <uxr_init_output_reliable_stream>
 8010c94:	2201      	movs	r2, #1
 8010c96:	2102      	movs	r1, #2
 8010c98:	4620      	mov	r0, r4
 8010c9a:	b004      	add	sp, #16
 8010c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca0:	f7ff bf34 	b.w	8010b0c <uxr_stream_id>

08010ca4 <uxr_add_input_best_effort_buffer>:
 8010ca4:	b510      	push	{r4, lr}
 8010ca6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010caa:	4603      	mov	r3, r0
 8010cac:	1c62      	adds	r2, r4, #1
 8010cae:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010cbc:	f005 fbd0 	bl	8016460 <uxr_init_input_best_effort_stream>
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	2101      	movs	r1, #1
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	b002      	add	sp, #8
 8010cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ccc:	f7ff bf1e 	b.w	8010b0c <uxr_stream_id>

08010cd0 <uxr_add_input_reliable_buffer>:
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	4684      	mov	ip, r0
 8010cd6:	9806      	ldr	r0, [sp, #24]
 8010cd8:	9000      	str	r0, [sp, #0]
 8010cda:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010cde:	2018      	movs	r0, #24
 8010ce0:	fb00 c004 	mla	r0, r0, r4, ip
 8010ce4:	f104 0e01 	add.w	lr, r4, #1
 8010ce8:	3048      	adds	r0, #72	@ 0x48
 8010cea:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010cee:	f005 fc03 	bl	80164f8 <uxr_init_input_reliable_stream>
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	2102      	movs	r1, #2
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	b004      	add	sp, #16
 8010cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cfe:	f7ff bf05 	b.w	8010b0c <uxr_stream_id>
 8010d02:	bf00      	nop

08010d04 <uxr_get_output_best_effort_stream>:
 8010d04:	7c03      	ldrb	r3, [r0, #16]
 8010d06:	428b      	cmp	r3, r1
 8010d08:	bf8c      	ite	hi
 8010d0a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010d0e:	2000      	movls	r0, #0
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop

08010d14 <uxr_get_output_reliable_stream>:
 8010d14:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010d18:	428b      	cmp	r3, r1
 8010d1a:	bf83      	ittte	hi
 8010d1c:	2328      	movhi	r3, #40	@ 0x28
 8010d1e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010d22:	3018      	addhi	r0, #24
 8010d24:	2000      	movls	r0, #0
 8010d26:	4770      	bx	lr

08010d28 <uxr_get_input_best_effort_stream>:
 8010d28:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010d2c:	428b      	cmp	r3, r1
 8010d2e:	bf86      	itte	hi
 8010d30:	3121      	addhi	r1, #33	@ 0x21
 8010d32:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010d36:	2000      	movls	r0, #0
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop

08010d3c <uxr_get_input_reliable_stream>:
 8010d3c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010d40:	428b      	cmp	r3, r1
 8010d42:	bf83      	ittte	hi
 8010d44:	2318      	movhi	r3, #24
 8010d46:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010d4a:	3048      	addhi	r0, #72	@ 0x48
 8010d4c:	2000      	movls	r0, #0
 8010d4e:	4770      	bx	lr

08010d50 <uxr_output_streams_confirmed>:
 8010d50:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010d54:	b183      	cbz	r3, 8010d78 <uxr_output_streams_confirmed+0x28>
 8010d56:	b570      	push	{r4, r5, r6, lr}
 8010d58:	4606      	mov	r6, r0
 8010d5a:	f100 0518 	add.w	r5, r0, #24
 8010d5e:	2400      	movs	r4, #0
 8010d60:	e001      	b.n	8010d66 <uxr_output_streams_confirmed+0x16>
 8010d62:	3528      	adds	r5, #40	@ 0x28
 8010d64:	b138      	cbz	r0, 8010d76 <uxr_output_streams_confirmed+0x26>
 8010d66:	4628      	mov	r0, r5
 8010d68:	f006 f898 	bl	8016e9c <uxr_is_output_up_to_date>
 8010d6c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010d70:	3401      	adds	r4, #1
 8010d72:	42a3      	cmp	r3, r4
 8010d74:	d8f5      	bhi.n	8010d62 <uxr_output_streams_confirmed+0x12>
 8010d76:	bd70      	pop	{r4, r5, r6, pc}
 8010d78:	2001      	movs	r0, #1
 8010d7a:	4770      	bx	lr

08010d7c <uxr_buffer_submessage_header>:
 8010d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d7e:	4604      	mov	r4, r0
 8010d80:	460e      	mov	r6, r1
 8010d82:	2104      	movs	r1, #4
 8010d84:	4615      	mov	r5, r2
 8010d86:	461f      	mov	r7, r3
 8010d88:	f7fd fdae 	bl	800e8e8 <ucdr_align_to>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	ea47 0203 	orr.w	r2, r7, r3
 8010d92:	4631      	mov	r1, r6
 8010d94:	7523      	strb	r3, [r4, #20]
 8010d96:	4620      	mov	r0, r4
 8010d98:	462b      	mov	r3, r5
 8010d9a:	f000 fa27 	bl	80111ec <uxr_serialize_submessage_header>
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f7fd fdb8 	bl	800e914 <ucdr_buffer_remaining>
 8010da4:	42a8      	cmp	r0, r5
 8010da6:	bf34      	ite	cc
 8010da8:	2000      	movcc	r0, #0
 8010daa:	2001      	movcs	r0, #1
 8010dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dae:	bf00      	nop

08010db0 <uxr_read_submessage_header>:
 8010db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010db4:	4604      	mov	r4, r0
 8010db6:	460d      	mov	r5, r1
 8010db8:	2104      	movs	r1, #4
 8010dba:	4616      	mov	r6, r2
 8010dbc:	4698      	mov	r8, r3
 8010dbe:	f7fd fd93 	bl	800e8e8 <ucdr_align_to>
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f7fd fda6 	bl	800e914 <ucdr_buffer_remaining>
 8010dc8:	2803      	cmp	r0, #3
 8010dca:	bf8c      	ite	hi
 8010dcc:	2701      	movhi	r7, #1
 8010dce:	2700      	movls	r7, #0
 8010dd0:	d802      	bhi.n	8010dd8 <uxr_read_submessage_header+0x28>
 8010dd2:	4638      	mov	r0, r7
 8010dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd8:	4633      	mov	r3, r6
 8010dda:	4642      	mov	r2, r8
 8010ddc:	4620      	mov	r0, r4
 8010dde:	4629      	mov	r1, r5
 8010de0:	f000 fa18 	bl	8011214 <uxr_deserialize_submessage_header>
 8010de4:	f898 3000 	ldrb.w	r3, [r8]
 8010de8:	f003 0201 	and.w	r2, r3, #1
 8010dec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010df0:	f888 3000 	strb.w	r3, [r8]
 8010df4:	7522      	strb	r2, [r4, #20]
 8010df6:	4638      	mov	r0, r7
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dfc <uxr_submessage_padding>:
 8010dfc:	f010 0003 	ands.w	r0, r0, #3
 8010e00:	bf18      	it	ne
 8010e02:	f1c0 0004 	rsbne	r0, r0, #4
 8010e06:	4770      	bx	lr

08010e08 <uxr_millis>:
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	4669      	mov	r1, sp
 8010e0e:	2001      	movs	r0, #1
 8010e10:	f7f0 fe86 	bl	8001b20 <clock_gettime>
 8010e14:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010e18:	4906      	ldr	r1, [pc, #24]	@ (8010e34 <uxr_millis+0x2c>)
 8010e1a:	fba0 0301 	umull	r0, r3, r0, r1
 8010e1e:	1900      	adds	r0, r0, r4
 8010e20:	fb01 3102 	mla	r1, r1, r2, r3
 8010e24:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010e28:	4a03      	ldr	r2, [pc, #12]	@ (8010e38 <uxr_millis+0x30>)
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f7ef fa60 	bl	80002f0 <__aeabi_ldivmod>
 8010e30:	b004      	add	sp, #16
 8010e32:	bd10      	pop	{r4, pc}
 8010e34:	3b9aca00 	.word	0x3b9aca00
 8010e38:	000f4240 	.word	0x000f4240

08010e3c <uxr_nanos>:
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	4669      	mov	r1, sp
 8010e42:	2001      	movs	r0, #1
 8010e44:	f7f0 fe6c 	bl	8001b20 <clock_gettime>
 8010e48:	4a06      	ldr	r2, [pc, #24]	@ (8010e64 <uxr_nanos+0x28>)
 8010e4a:	9800      	ldr	r0, [sp, #0]
 8010e4c:	9902      	ldr	r1, [sp, #8]
 8010e4e:	9c01      	ldr	r4, [sp, #4]
 8010e50:	fba0 0302 	umull	r0, r3, r0, r2
 8010e54:	1840      	adds	r0, r0, r1
 8010e56:	fb02 3304 	mla	r3, r2, r4, r3
 8010e5a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010e5e:	b004      	add	sp, #16
 8010e60:	bd10      	pop	{r4, pc}
 8010e62:	bf00      	nop
 8010e64:	3b9aca00 	.word	0x3b9aca00

08010e68 <on_full_output_buffer_fragmented>:
 8010e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6c:	460c      	mov	r4, r1
 8010e6e:	b08a      	sub	sp, #40	@ 0x28
 8010e70:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010e74:	4606      	mov	r6, r0
 8010e76:	f104 0008 	add.w	r0, r4, #8
 8010e7a:	f7ff ff4b 	bl	8010d14 <uxr_get_output_reliable_stream>
 8010e7e:	4605      	mov	r5, r0
 8010e80:	f006 f816 	bl	8016eb0 <get_available_free_slots>
 8010e84:	b968      	cbnz	r0, 8010ea2 <on_full_output_buffer_fragmented+0x3a>
 8010e86:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	4798      	blx	r3
 8010e8e:	b918      	cbnz	r0, 8010e98 <on_full_output_buffer_fragmented+0x30>
 8010e90:	2001      	movs	r0, #1
 8010e92:	b00a      	add	sp, #40	@ 0x28
 8010e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f006 f809 	bl	8016eb0 <get_available_free_slots>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d0f6      	beq.n	8010e90 <on_full_output_buffer_fragmented+0x28>
 8010ea2:	8929      	ldrh	r1, [r5, #8]
 8010ea4:	89eb      	ldrh	r3, [r5, #14]
 8010ea6:	7b28      	ldrb	r0, [r5, #12]
 8010ea8:	686a      	ldr	r2, [r5, #4]
 8010eaa:	fbb2 f8f1 	udiv	r8, r2, r1
 8010eae:	fbb3 f2f1 	udiv	r2, r3, r1
 8010eb2:	fb01 3112 	mls	r1, r1, r2, r3
 8010eb6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010eba:	b289      	uxth	r1, r1
 8010ebc:	fb08 f101 	mul.w	r1, r8, r1
 8010ec0:	30fc      	adds	r0, #252	@ 0xfc
 8010ec2:	f1a8 0804 	sub.w	r8, r8, #4
 8010ec6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010eca:	4440      	add	r0, r8
 8010ecc:	b287      	uxth	r7, r0
 8010ece:	1bdb      	subs	r3, r3, r7
 8010ed0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010ed4:	682b      	ldr	r3, [r5, #0]
 8010ed6:	3104      	adds	r1, #4
 8010ed8:	4419      	add	r1, r3
 8010eda:	4642      	mov	r2, r8
 8010edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	a802      	add	r0, sp, #8
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f7fd fcd3 	bl	800e890 <ucdr_init_buffer_origin_offset>
 8010eea:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010eee:	f102 0308 	add.w	r3, r2, #8
 8010ef2:	4543      	cmp	r3, r8
 8010ef4:	d928      	bls.n	8010f48 <on_full_output_buffer_fragmented+0xe0>
 8010ef6:	463a      	mov	r2, r7
 8010ef8:	2300      	movs	r3, #0
 8010efa:	210d      	movs	r1, #13
 8010efc:	a802      	add	r0, sp, #8
 8010efe:	f7ff ff3d 	bl	8010d7c <uxr_buffer_submessage_header>
 8010f02:	8929      	ldrh	r1, [r5, #8]
 8010f04:	89eb      	ldrh	r3, [r5, #14]
 8010f06:	fbb3 f2f1 	udiv	r2, r3, r1
 8010f0a:	fb01 3312 	mls	r3, r1, r2, r3
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	686a      	ldr	r2, [r5, #4]
 8010f12:	fbb2 f2f1 	udiv	r2, r2, r1
 8010f16:	fb02 f303 	mul.w	r3, r2, r3
 8010f1a:	682a      	ldr	r2, [r5, #0]
 8010f1c:	f842 8003 	str.w	r8, [r2, r3]
 8010f20:	89e8      	ldrh	r0, [r5, #14]
 8010f22:	2101      	movs	r1, #1
 8010f24:	f005 ffe4 	bl	8016ef0 <uxr_seq_num_add>
 8010f28:	9904      	ldr	r1, [sp, #16]
 8010f2a:	9a03      	ldr	r2, [sp, #12]
 8010f2c:	81e8      	strh	r0, [r5, #14]
 8010f2e:	1a52      	subs	r2, r2, r1
 8010f30:	4630      	mov	r0, r6
 8010f32:	f7fd fcbf 	bl	800e8b4 <ucdr_init_buffer>
 8010f36:	4630      	mov	r0, r6
 8010f38:	490f      	ldr	r1, [pc, #60]	@ (8010f78 <on_full_output_buffer_fragmented+0x110>)
 8010f3a:	4622      	mov	r2, r4
 8010f3c:	f7fd fc8e 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 8010f40:	2000      	movs	r0, #0
 8010f42:	b00a      	add	sp, #40	@ 0x28
 8010f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f48:	b292      	uxth	r2, r2
 8010f4a:	2302      	movs	r3, #2
 8010f4c:	210d      	movs	r1, #13
 8010f4e:	a802      	add	r0, sp, #8
 8010f50:	f7ff ff14 	bl	8010d7c <uxr_buffer_submessage_header>
 8010f54:	8928      	ldrh	r0, [r5, #8]
 8010f56:	89eb      	ldrh	r3, [r5, #14]
 8010f58:	fbb3 f1f0 	udiv	r1, r3, r0
 8010f5c:	fb00 3311 	mls	r3, r0, r1, r3
 8010f60:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010f64:	6869      	ldr	r1, [r5, #4]
 8010f66:	fbb1 f1f0 	udiv	r1, r1, r0
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	fb01 f303 	mul.w	r3, r1, r3
 8010f70:	6829      	ldr	r1, [r5, #0]
 8010f72:	3208      	adds	r2, #8
 8010f74:	50ca      	str	r2, [r1, r3]
 8010f76:	e7d3      	b.n	8010f20 <on_full_output_buffer_fragmented+0xb8>
 8010f78:	08010e69 	.word	0x08010e69

08010f7c <uxr_prepare_output_stream>:
 8010f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f7e:	b087      	sub	sp, #28
 8010f80:	2707      	movs	r7, #7
 8010f82:	9202      	str	r2, [sp, #8]
 8010f84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f86:	9103      	str	r1, [sp, #12]
 8010f88:	2500      	movs	r5, #0
 8010f8a:	3204      	adds	r2, #4
 8010f8c:	e9cd 7500 	strd	r7, r5, [sp]
 8010f90:	461c      	mov	r4, r3
 8010f92:	4606      	mov	r6, r0
 8010f94:	f7fe ffc2 	bl	800ff1c <uxr_prepare_stream_to_write_submessage>
 8010f98:	f080 0201 	eor.w	r2, r0, #1
 8010f9c:	b2d2      	uxtb	r2, r2
 8010f9e:	75a2      	strb	r2, [r4, #22]
 8010fa0:	b112      	cbz	r2, 8010fa8 <uxr_prepare_output_stream+0x2c>
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	b007      	add	sp, #28
 8010fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fa8:	aa05      	add	r2, sp, #20
 8010faa:	9902      	ldr	r1, [sp, #8]
 8010fac:	4630      	mov	r0, r6
 8010fae:	f7ff f8eb 	bl	8010188 <uxr_init_base_object_request>
 8010fb2:	a905      	add	r1, sp, #20
 8010fb4:	4605      	mov	r5, r0
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f000 ffa0 	bl	8011efc <uxr_serialize_WRITE_DATA_Payload_Data>
 8010fbc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010fc0:	69a6      	ldr	r6, [r4, #24]
 8010fc2:	69e7      	ldr	r7, [r4, #28]
 8010fc4:	1a52      	subs	r2, r2, r1
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f7fd fc74 	bl	800e8b4 <ucdr_init_buffer>
 8010fcc:	4620      	mov	r0, r4
 8010fce:	463a      	mov	r2, r7
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	f7fd fc43 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	b007      	add	sp, #28
 8010fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fdc <uxr_prepare_output_stream_fragmented>:
 8010fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe0:	b091      	sub	sp, #68	@ 0x44
 8010fe2:	4605      	mov	r5, r0
 8010fe4:	9105      	str	r1, [sp, #20]
 8010fe6:	3008      	adds	r0, #8
 8010fe8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010fec:	461e      	mov	r6, r3
 8010fee:	9204      	str	r2, [sp, #16]
 8010ff0:	f7ff fe90 	bl	8010d14 <uxr_get_output_reliable_stream>
 8010ff4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	f000 8091 	beq.w	8011120 <uxr_prepare_output_stream_fragmented+0x144>
 8010ffe:	4604      	mov	r4, r0
 8011000:	2800      	cmp	r0, #0
 8011002:	f000 808d 	beq.w	8011120 <uxr_prepare_output_stream_fragmented+0x144>
 8011006:	f005 ff53 	bl	8016eb0 <get_available_free_slots>
 801100a:	2800      	cmp	r0, #0
 801100c:	f000 8083 	beq.w	8011116 <uxr_prepare_output_stream_fragmented+0x13a>
 8011010:	8922      	ldrh	r2, [r4, #8]
 8011012:	89e7      	ldrh	r7, [r4, #14]
 8011014:	fbb7 f9f2 	udiv	r9, r7, r2
 8011018:	fb02 7919 	mls	r9, r2, r9, r7
 801101c:	fa1f f989 	uxth.w	r9, r9
 8011020:	6863      	ldr	r3, [r4, #4]
 8011022:	fbb3 f2f2 	udiv	r2, r3, r2
 8011026:	6823      	ldr	r3, [r4, #0]
 8011028:	9203      	str	r2, [sp, #12]
 801102a:	fb02 f909 	mul.w	r9, r2, r9
 801102e:	f109 0904 	add.w	r9, r9, #4
 8011032:	4499      	add	r9, r3
 8011034:	7b23      	ldrb	r3, [r4, #12]
 8011036:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801103a:	4543      	cmp	r3, r8
 801103c:	f1a2 0b04 	sub.w	fp, r2, #4
 8011040:	d37a      	bcc.n	8011138 <uxr_prepare_output_stream_fragmented+0x15c>
 8011042:	f1ab 0a04 	sub.w	sl, fp, #4
 8011046:	ebaa 0a03 	sub.w	sl, sl, r3
 801104a:	465a      	mov	r2, fp
 801104c:	2300      	movs	r3, #0
 801104e:	4649      	mov	r1, r9
 8011050:	a808      	add	r0, sp, #32
 8011052:	f8cd 8000 	str.w	r8, [sp]
 8011056:	f7fd fc1b 	bl	800e890 <ucdr_init_buffer_origin_offset>
 801105a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801105c:	fa1f fa8a 	uxth.w	sl, sl
 8011060:	4652      	mov	r2, sl
 8011062:	f103 0a08 	add.w	sl, r3, #8
 8011066:	45da      	cmp	sl, fp
 8011068:	bf34      	ite	cc
 801106a:	2302      	movcc	r3, #2
 801106c:	2300      	movcs	r3, #0
 801106e:	210d      	movs	r1, #13
 8011070:	a808      	add	r0, sp, #32
 8011072:	f7ff fe83 	bl	8010d7c <uxr_buffer_submessage_header>
 8011076:	8921      	ldrh	r1, [r4, #8]
 8011078:	fbb7 f2f1 	udiv	r2, r7, r1
 801107c:	fb01 7212 	mls	r2, r1, r2, r7
 8011080:	b292      	uxth	r2, r2
 8011082:	6863      	ldr	r3, [r4, #4]
 8011084:	fbb3 f3f1 	udiv	r3, r3, r1
 8011088:	fb02 f303 	mul.w	r3, r2, r3
 801108c:	6822      	ldr	r2, [r4, #0]
 801108e:	4638      	mov	r0, r7
 8011090:	f842 b003 	str.w	fp, [r2, r3]
 8011094:	2101      	movs	r1, #1
 8011096:	f005 ff2b 	bl	8016ef0 <uxr_seq_num_add>
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	f108 0104 	add.w	r1, r8, #4
 80110a0:	f1a3 0208 	sub.w	r2, r3, #8
 80110a4:	eba2 0208 	sub.w	r2, r2, r8
 80110a8:	4449      	add	r1, r9
 80110aa:	4607      	mov	r7, r0
 80110ac:	4630      	mov	r0, r6
 80110ae:	f7fd fc01 	bl	800e8b4 <ucdr_init_buffer>
 80110b2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80110b4:	81e7      	strh	r7, [r4, #14]
 80110b6:	1d1a      	adds	r2, r3, #4
 80110b8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80110bc:	bf28      	it	cs
 80110be:	2200      	movcs	r2, #0
 80110c0:	2300      	movs	r3, #0
 80110c2:	b292      	uxth	r2, r2
 80110c4:	2107      	movs	r1, #7
 80110c6:	4630      	mov	r0, r6
 80110c8:	f7ff fe58 	bl	8010d7c <uxr_buffer_submessage_header>
 80110cc:	9904      	ldr	r1, [sp, #16]
 80110ce:	aa07      	add	r2, sp, #28
 80110d0:	4628      	mov	r0, r5
 80110d2:	f7ff f859 	bl	8010188 <uxr_init_base_object_request>
 80110d6:	4604      	mov	r4, r0
 80110d8:	b318      	cbz	r0, 8011122 <uxr_prepare_output_stream_fragmented+0x146>
 80110da:	a907      	add	r1, sp, #28
 80110dc:	4630      	mov	r0, r6
 80110de:	f000 ff0d 	bl	8011efc <uxr_serialize_WRITE_DATA_Payload_Data>
 80110e2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80110e6:	4630      	mov	r0, r6
 80110e8:	1a52      	subs	r2, r2, r1
 80110ea:	f7fd fbe3 	bl	800e8b4 <ucdr_init_buffer>
 80110ee:	9b05      	ldr	r3, [sp, #20]
 80110f0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80110f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80110f6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80110fa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80110fc:	491b      	ldr	r1, [pc, #108]	@ (801116c <uxr_prepare_output_stream_fragmented+0x190>)
 80110fe:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8011102:	4630      	mov	r0, r6
 8011104:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011108:	462a      	mov	r2, r5
 801110a:	f7fd fba7 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 801110e:	4620      	mov	r0, r4
 8011110:	b011      	add	sp, #68	@ 0x44
 8011112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011116:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011118:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801111a:	4628      	mov	r0, r5
 801111c:	4798      	blx	r3
 801111e:	b920      	cbnz	r0, 801112a <uxr_prepare_output_stream_fragmented+0x14e>
 8011120:	2400      	movs	r4, #0
 8011122:	4620      	mov	r0, r4
 8011124:	b011      	add	sp, #68	@ 0x44
 8011126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112a:	4620      	mov	r0, r4
 801112c:	f005 fec0 	bl	8016eb0 <get_available_free_slots>
 8011130:	2800      	cmp	r0, #0
 8011132:	f47f af6d 	bne.w	8011010 <uxr_prepare_output_stream_fragmented+0x34>
 8011136:	e7f3      	b.n	8011120 <uxr_prepare_output_stream_fragmented+0x144>
 8011138:	4638      	mov	r0, r7
 801113a:	2101      	movs	r1, #1
 801113c:	f005 fed8 	bl	8016ef0 <uxr_seq_num_add>
 8011140:	8921      	ldrh	r1, [r4, #8]
 8011142:	fbb0 f2f1 	udiv	r2, r0, r1
 8011146:	fb01 0912 	mls	r9, r1, r2, r0
 801114a:	fa1f f289 	uxth.w	r2, r9
 801114e:	6863      	ldr	r3, [r4, #4]
 8011150:	fbb3 f9f1 	udiv	r9, r3, r1
 8011154:	6823      	ldr	r3, [r4, #0]
 8011156:	fb02 f909 	mul.w	r9, r2, r9
 801115a:	f109 0904 	add.w	r9, r9, #4
 801115e:	4499      	add	r9, r3
 8011160:	4607      	mov	r7, r0
 8011162:	7b23      	ldrb	r3, [r4, #12]
 8011164:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011168:	e76b      	b.n	8011042 <uxr_prepare_output_stream_fragmented+0x66>
 801116a:	bf00      	nop
 801116c:	08010e69 	.word	0x08010e69

08011170 <uxr_serialize_message_header>:
 8011170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011172:	b083      	sub	sp, #12
 8011174:	4616      	mov	r6, r2
 8011176:	4604      	mov	r4, r0
 8011178:	9301      	str	r3, [sp, #4]
 801117a:	460d      	mov	r5, r1
 801117c:	9f08      	ldr	r7, [sp, #32]
 801117e:	f7fc fbc1 	bl	800d904 <ucdr_serialize_uint8_t>
 8011182:	4631      	mov	r1, r6
 8011184:	4620      	mov	r0, r4
 8011186:	f7fc fbbd 	bl	800d904 <ucdr_serialize_uint8_t>
 801118a:	9a01      	ldr	r2, [sp, #4]
 801118c:	2101      	movs	r1, #1
 801118e:	4620      	mov	r0, r4
 8011190:	f7fc fc64 	bl	800da5c <ucdr_serialize_endian_uint16_t>
 8011194:	062b      	lsls	r3, r5, #24
 8011196:	d501      	bpl.n	801119c <uxr_serialize_message_header+0x2c>
 8011198:	b003      	add	sp, #12
 801119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801119c:	2204      	movs	r2, #4
 801119e:	4639      	mov	r1, r7
 80111a0:	4620      	mov	r0, r4
 80111a2:	b003      	add	sp, #12
 80111a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80111a8:	f005 b822 	b.w	80161f0 <ucdr_serialize_array_uint8_t>

080111ac <uxr_deserialize_message_header>:
 80111ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ae:	b083      	sub	sp, #12
 80111b0:	4616      	mov	r6, r2
 80111b2:	4604      	mov	r4, r0
 80111b4:	9301      	str	r3, [sp, #4]
 80111b6:	460d      	mov	r5, r1
 80111b8:	9f08      	ldr	r7, [sp, #32]
 80111ba:	f7fc fbb9 	bl	800d930 <ucdr_deserialize_uint8_t>
 80111be:	4631      	mov	r1, r6
 80111c0:	4620      	mov	r0, r4
 80111c2:	f7fc fbb5 	bl	800d930 <ucdr_deserialize_uint8_t>
 80111c6:	9a01      	ldr	r2, [sp, #4]
 80111c8:	2101      	movs	r1, #1
 80111ca:	4620      	mov	r0, r4
 80111cc:	f7fc fd3a 	bl	800dc44 <ucdr_deserialize_endian_uint16_t>
 80111d0:	f995 3000 	ldrsb.w	r3, [r5]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	da01      	bge.n	80111dc <uxr_deserialize_message_header+0x30>
 80111d8:	b003      	add	sp, #12
 80111da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111dc:	2204      	movs	r2, #4
 80111de:	4639      	mov	r1, r7
 80111e0:	4620      	mov	r0, r4
 80111e2:	b003      	add	sp, #12
 80111e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80111e8:	f005 b866 	b.w	80162b8 <ucdr_deserialize_array_uint8_t>

080111ec <uxr_serialize_submessage_header>:
 80111ec:	b530      	push	{r4, r5, lr}
 80111ee:	b083      	sub	sp, #12
 80111f0:	4615      	mov	r5, r2
 80111f2:	4604      	mov	r4, r0
 80111f4:	9301      	str	r3, [sp, #4]
 80111f6:	f7fc fb85 	bl	800d904 <ucdr_serialize_uint8_t>
 80111fa:	4629      	mov	r1, r5
 80111fc:	4620      	mov	r0, r4
 80111fe:	f7fc fb81 	bl	800d904 <ucdr_serialize_uint8_t>
 8011202:	9a01      	ldr	r2, [sp, #4]
 8011204:	2101      	movs	r1, #1
 8011206:	4620      	mov	r0, r4
 8011208:	b003      	add	sp, #12
 801120a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801120e:	f7fc bc25 	b.w	800da5c <ucdr_serialize_endian_uint16_t>
 8011212:	bf00      	nop

08011214 <uxr_deserialize_submessage_header>:
 8011214:	b530      	push	{r4, r5, lr}
 8011216:	b083      	sub	sp, #12
 8011218:	4615      	mov	r5, r2
 801121a:	4604      	mov	r4, r0
 801121c:	9301      	str	r3, [sp, #4]
 801121e:	f7fc fb87 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011222:	4629      	mov	r1, r5
 8011224:	4620      	mov	r0, r4
 8011226:	f7fc fb83 	bl	800d930 <ucdr_deserialize_uint8_t>
 801122a:	9a01      	ldr	r2, [sp, #4]
 801122c:	2101      	movs	r1, #1
 801122e:	4620      	mov	r0, r4
 8011230:	b003      	add	sp, #12
 8011232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011236:	f7fc bd05 	b.w	800dc44 <ucdr_deserialize_endian_uint16_t>
 801123a:	bf00      	nop

0801123c <uxr_serialize_CLIENT_Representation>:
 801123c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011240:	2204      	movs	r2, #4
 8011242:	460e      	mov	r6, r1
 8011244:	4605      	mov	r5, r0
 8011246:	f004 ffd3 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 801124a:	2202      	movs	r2, #2
 801124c:	4607      	mov	r7, r0
 801124e:	1d31      	adds	r1, r6, #4
 8011250:	4628      	mov	r0, r5
 8011252:	f004 ffcd 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011256:	4038      	ands	r0, r7
 8011258:	2202      	movs	r2, #2
 801125a:	1db1      	adds	r1, r6, #6
 801125c:	b2c7      	uxtb	r7, r0
 801125e:	4628      	mov	r0, r5
 8011260:	f004 ffc6 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011264:	2204      	movs	r2, #4
 8011266:	4007      	ands	r7, r0
 8011268:	f106 0108 	add.w	r1, r6, #8
 801126c:	4628      	mov	r0, r5
 801126e:	f004 ffbf 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011272:	7b31      	ldrb	r1, [r6, #12]
 8011274:	4007      	ands	r7, r0
 8011276:	4628      	mov	r0, r5
 8011278:	f7fc fb44 	bl	800d904 <ucdr_serialize_uint8_t>
 801127c:	7b71      	ldrb	r1, [r6, #13]
 801127e:	4007      	ands	r7, r0
 8011280:	4628      	mov	r0, r5
 8011282:	f7fc fb11 	bl	800d8a8 <ucdr_serialize_bool>
 8011286:	7b73      	ldrb	r3, [r6, #13]
 8011288:	ea07 0800 	and.w	r8, r7, r0
 801128c:	b93b      	cbnz	r3, 801129e <uxr_serialize_CLIENT_Representation+0x62>
 801128e:	8bb1      	ldrh	r1, [r6, #28]
 8011290:	4628      	mov	r0, r5
 8011292:	f7fc fb63 	bl	800d95c <ucdr_serialize_uint16_t>
 8011296:	ea08 0000 	and.w	r0, r8, r0
 801129a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801129e:	6931      	ldr	r1, [r6, #16]
 80112a0:	4628      	mov	r0, r5
 80112a2:	f7fc fd45 	bl	800dd30 <ucdr_serialize_uint32_t>
 80112a6:	6933      	ldr	r3, [r6, #16]
 80112a8:	b1e3      	cbz	r3, 80112e4 <uxr_serialize_CLIENT_Representation+0xa8>
 80112aa:	b1c0      	cbz	r0, 80112de <uxr_serialize_CLIENT_Representation+0xa2>
 80112ac:	4637      	mov	r7, r6
 80112ae:	f04f 0900 	mov.w	r9, #0
 80112b2:	e001      	b.n	80112b8 <uxr_serialize_CLIENT_Representation+0x7c>
 80112b4:	3708      	adds	r7, #8
 80112b6:	b194      	cbz	r4, 80112de <uxr_serialize_CLIENT_Representation+0xa2>
 80112b8:	6979      	ldr	r1, [r7, #20]
 80112ba:	4628      	mov	r0, r5
 80112bc:	f005 f8b8 	bl	8016430 <ucdr_serialize_string>
 80112c0:	69b9      	ldr	r1, [r7, #24]
 80112c2:	4604      	mov	r4, r0
 80112c4:	4628      	mov	r0, r5
 80112c6:	f005 f8b3 	bl	8016430 <ucdr_serialize_string>
 80112ca:	6933      	ldr	r3, [r6, #16]
 80112cc:	f109 0901 	add.w	r9, r9, #1
 80112d0:	4004      	ands	r4, r0
 80112d2:	4599      	cmp	r9, r3
 80112d4:	b2e4      	uxtb	r4, r4
 80112d6:	d3ed      	bcc.n	80112b4 <uxr_serialize_CLIENT_Representation+0x78>
 80112d8:	ea08 0804 	and.w	r8, r8, r4
 80112dc:	e7d7      	b.n	801128e <uxr_serialize_CLIENT_Representation+0x52>
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	e7d4      	b.n	801128e <uxr_serialize_CLIENT_Representation+0x52>
 80112e4:	ea08 0800 	and.w	r8, r8, r0
 80112e8:	e7d1      	b.n	801128e <uxr_serialize_CLIENT_Representation+0x52>
 80112ea:	bf00      	nop

080112ec <uxr_deserialize_CLIENT_Representation>:
 80112ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112f0:	2204      	movs	r2, #4
 80112f2:	460c      	mov	r4, r1
 80112f4:	4605      	mov	r5, r0
 80112f6:	f004 ffdf 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 80112fa:	2202      	movs	r2, #2
 80112fc:	4607      	mov	r7, r0
 80112fe:	1d21      	adds	r1, r4, #4
 8011300:	4628      	mov	r0, r5
 8011302:	f004 ffd9 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011306:	4038      	ands	r0, r7
 8011308:	2202      	movs	r2, #2
 801130a:	1da1      	adds	r1, r4, #6
 801130c:	b2c6      	uxtb	r6, r0
 801130e:	4628      	mov	r0, r5
 8011310:	f004 ffd2 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011314:	2204      	movs	r2, #4
 8011316:	4006      	ands	r6, r0
 8011318:	f104 0108 	add.w	r1, r4, #8
 801131c:	4628      	mov	r0, r5
 801131e:	f004 ffcb 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011322:	f104 010c 	add.w	r1, r4, #12
 8011326:	4006      	ands	r6, r0
 8011328:	4628      	mov	r0, r5
 801132a:	f7fc fb01 	bl	800d930 <ucdr_deserialize_uint8_t>
 801132e:	f104 010d 	add.w	r1, r4, #13
 8011332:	ea06 0700 	and.w	r7, r6, r0
 8011336:	4628      	mov	r0, r5
 8011338:	f7fc facc 	bl	800d8d4 <ucdr_deserialize_bool>
 801133c:	7b63      	ldrb	r3, [r4, #13]
 801133e:	4007      	ands	r7, r0
 8011340:	b93b      	cbnz	r3, 8011352 <uxr_deserialize_CLIENT_Representation+0x66>
 8011342:	f104 011c 	add.w	r1, r4, #28
 8011346:	4628      	mov	r0, r5
 8011348:	f7fc fc08 	bl	800db5c <ucdr_deserialize_uint16_t>
 801134c:	4038      	ands	r0, r7
 801134e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011352:	f104 0110 	add.w	r1, r4, #16
 8011356:	4628      	mov	r0, r5
 8011358:	f7fc fe1a 	bl	800df90 <ucdr_deserialize_uint32_t>
 801135c:	6923      	ldr	r3, [r4, #16]
 801135e:	2b01      	cmp	r3, #1
 8011360:	d903      	bls.n	801136a <uxr_deserialize_CLIENT_Representation+0x7e>
 8011362:	2301      	movs	r3, #1
 8011364:	75ab      	strb	r3, [r5, #22]
 8011366:	2700      	movs	r7, #0
 8011368:	e7eb      	b.n	8011342 <uxr_deserialize_CLIENT_Representation+0x56>
 801136a:	b30b      	cbz	r3, 80113b0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801136c:	2800      	cmp	r0, #0
 801136e:	d0fa      	beq.n	8011366 <uxr_deserialize_CLIENT_Representation+0x7a>
 8011370:	46a0      	mov	r8, r4
 8011372:	f04f 0900 	mov.w	r9, #0
 8011376:	e001      	b.n	801137c <uxr_deserialize_CLIENT_Representation+0x90>
 8011378:	2e00      	cmp	r6, #0
 801137a:	d0f4      	beq.n	8011366 <uxr_deserialize_CLIENT_Representation+0x7a>
 801137c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011384:	4628      	mov	r0, r5
 8011386:	f005 f863 	bl	8016450 <ucdr_deserialize_string>
 801138a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801138e:	4606      	mov	r6, r0
 8011390:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011394:	4628      	mov	r0, r5
 8011396:	f005 f85b 	bl	8016450 <ucdr_deserialize_string>
 801139a:	6923      	ldr	r3, [r4, #16]
 801139c:	f109 0901 	add.w	r9, r9, #1
 80113a0:	4006      	ands	r6, r0
 80113a2:	4599      	cmp	r9, r3
 80113a4:	f108 0808 	add.w	r8, r8, #8
 80113a8:	b2f6      	uxtb	r6, r6
 80113aa:	d3e5      	bcc.n	8011378 <uxr_deserialize_CLIENT_Representation+0x8c>
 80113ac:	4037      	ands	r7, r6
 80113ae:	e7c8      	b.n	8011342 <uxr_deserialize_CLIENT_Representation+0x56>
 80113b0:	4007      	ands	r7, r0
 80113b2:	e7c6      	b.n	8011342 <uxr_deserialize_CLIENT_Representation+0x56>

080113b4 <uxr_serialize_AGENT_Representation>:
 80113b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b8:	2204      	movs	r2, #4
 80113ba:	460f      	mov	r7, r1
 80113bc:	4605      	mov	r5, r0
 80113be:	f004 ff17 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 80113c2:	2202      	movs	r2, #2
 80113c4:	4604      	mov	r4, r0
 80113c6:	1d39      	adds	r1, r7, #4
 80113c8:	4628      	mov	r0, r5
 80113ca:	f004 ff11 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 80113ce:	4020      	ands	r0, r4
 80113d0:	2202      	movs	r2, #2
 80113d2:	1db9      	adds	r1, r7, #6
 80113d4:	b2c4      	uxtb	r4, r0
 80113d6:	4628      	mov	r0, r5
 80113d8:	f004 ff0a 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 80113dc:	7a39      	ldrb	r1, [r7, #8]
 80113de:	4004      	ands	r4, r0
 80113e0:	4628      	mov	r0, r5
 80113e2:	f7fc fa61 	bl	800d8a8 <ucdr_serialize_bool>
 80113e6:	7a3b      	ldrb	r3, [r7, #8]
 80113e8:	ea00 0804 	and.w	r8, r0, r4
 80113ec:	b913      	cbnz	r3, 80113f4 <uxr_serialize_AGENT_Representation+0x40>
 80113ee:	4640      	mov	r0, r8
 80113f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113f4:	68f9      	ldr	r1, [r7, #12]
 80113f6:	4628      	mov	r0, r5
 80113f8:	f7fc fc9a 	bl	800dd30 <ucdr_serialize_uint32_t>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	b303      	cbz	r3, 8011442 <uxr_serialize_AGENT_Representation+0x8e>
 8011400:	b1d0      	cbz	r0, 8011438 <uxr_serialize_AGENT_Representation+0x84>
 8011402:	463e      	mov	r6, r7
 8011404:	f04f 0900 	mov.w	r9, #0
 8011408:	e001      	b.n	801140e <uxr_serialize_AGENT_Representation+0x5a>
 801140a:	3608      	adds	r6, #8
 801140c:	b1a4      	cbz	r4, 8011438 <uxr_serialize_AGENT_Representation+0x84>
 801140e:	6931      	ldr	r1, [r6, #16]
 8011410:	4628      	mov	r0, r5
 8011412:	f005 f80d 	bl	8016430 <ucdr_serialize_string>
 8011416:	6971      	ldr	r1, [r6, #20]
 8011418:	4604      	mov	r4, r0
 801141a:	4628      	mov	r0, r5
 801141c:	f005 f808 	bl	8016430 <ucdr_serialize_string>
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f109 0901 	add.w	r9, r9, #1
 8011426:	4004      	ands	r4, r0
 8011428:	4599      	cmp	r9, r3
 801142a:	b2e4      	uxtb	r4, r4
 801142c:	d3ed      	bcc.n	801140a <uxr_serialize_AGENT_Representation+0x56>
 801142e:	ea08 0804 	and.w	r8, r8, r4
 8011432:	4640      	mov	r0, r8
 8011434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011438:	f04f 0800 	mov.w	r8, #0
 801143c:	4640      	mov	r0, r8
 801143e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011442:	ea08 0800 	and.w	r8, r8, r0
 8011446:	e7d2      	b.n	80113ee <uxr_serialize_AGENT_Representation+0x3a>

08011448 <uxr_serialize_DATAWRITER_Representation>:
 8011448:	b570      	push	{r4, r5, r6, lr}
 801144a:	460d      	mov	r5, r1
 801144c:	7809      	ldrb	r1, [r1, #0]
 801144e:	4606      	mov	r6, r0
 8011450:	f7fc fa58 	bl	800d904 <ucdr_serialize_uint8_t>
 8011454:	4604      	mov	r4, r0
 8011456:	b130      	cbz	r0, 8011466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011458:	782b      	ldrb	r3, [r5, #0]
 801145a:	2b02      	cmp	r3, #2
 801145c:	d00c      	beq.n	8011478 <uxr_serialize_DATAWRITER_Representation+0x30>
 801145e:	2b03      	cmp	r3, #3
 8011460:	d010      	beq.n	8011484 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011462:	2b01      	cmp	r3, #1
 8011464:	d008      	beq.n	8011478 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011466:	2202      	movs	r2, #2
 8011468:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801146c:	4630      	mov	r0, r6
 801146e:	f004 febf 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011472:	4020      	ands	r0, r4
 8011474:	b2c0      	uxtb	r0, r0
 8011476:	bd70      	pop	{r4, r5, r6, pc}
 8011478:	6869      	ldr	r1, [r5, #4]
 801147a:	4630      	mov	r0, r6
 801147c:	f004 ffd8 	bl	8016430 <ucdr_serialize_string>
 8011480:	4604      	mov	r4, r0
 8011482:	e7f0      	b.n	8011466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011484:	4629      	mov	r1, r5
 8011486:	4630      	mov	r0, r6
 8011488:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801148c:	3104      	adds	r1, #4
 801148e:	f004 ffa3 	bl	80163d8 <ucdr_serialize_sequence_uint8_t>
 8011492:	4604      	mov	r4, r0
 8011494:	e7e7      	b.n	8011466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011496:	bf00      	nop

08011498 <uxr_serialize_ObjectVariant.part.0>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	780b      	ldrb	r3, [r1, #0]
 801149c:	3b01      	subs	r3, #1
 801149e:	460c      	mov	r4, r1
 80114a0:	4605      	mov	r5, r0
 80114a2:	2b0d      	cmp	r3, #13
 80114a4:	d854      	bhi.n	8011550 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80114a6:	e8df f003 	tbb	[pc, r3]
 80114aa:	0730      	.short	0x0730
 80114ac:	07071b1b 	.word	0x07071b1b
 80114b0:	0c530707 	.word	0x0c530707
 80114b4:	494e0c0c 	.word	0x494e0c0c
 80114b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114bc:	3104      	adds	r1, #4
 80114be:	f7ff bfc3 	b.w	8011448 <uxr_serialize_DATAWRITER_Representation>
 80114c2:	7909      	ldrb	r1, [r1, #4]
 80114c4:	f7fc fa1e 	bl	800d904 <ucdr_serialize_uint8_t>
 80114c8:	b1e8      	cbz	r0, 8011506 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80114ca:	7923      	ldrb	r3, [r4, #4]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d001      	beq.n	80114d4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d13d      	bne.n	8011550 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80114d4:	68a1      	ldr	r1, [r4, #8]
 80114d6:	4628      	mov	r0, r5
 80114d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114dc:	f004 bfa8 	b.w	8016430 <ucdr_serialize_string>
 80114e0:	7909      	ldrb	r1, [r1, #4]
 80114e2:	f7fc fa0f 	bl	800d904 <ucdr_serialize_uint8_t>
 80114e6:	4606      	mov	r6, r0
 80114e8:	b120      	cbz	r0, 80114f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80114ea:	7923      	ldrb	r3, [r4, #4]
 80114ec:	2b02      	cmp	r3, #2
 80114ee:	d039      	beq.n	8011564 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80114f0:	2b03      	cmp	r3, #3
 80114f2:	d02f      	beq.n	8011554 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80114f4:	2202      	movs	r2, #2
 80114f6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80114fa:	4628      	mov	r0, r5
 80114fc:	f004 fe78 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011500:	4030      	ands	r0, r6
 8011502:	b2c0      	uxtb	r0, r0
 8011504:	bd70      	pop	{r4, r5, r6, pc}
 8011506:	2000      	movs	r0, #0
 8011508:	bd70      	pop	{r4, r5, r6, pc}
 801150a:	7909      	ldrb	r1, [r1, #4]
 801150c:	f7fc f9fa 	bl	800d904 <ucdr_serialize_uint8_t>
 8011510:	4606      	mov	r6, r0
 8011512:	b158      	cbz	r0, 801152c <uxr_serialize_ObjectVariant.part.0+0x94>
 8011514:	7923      	ldrb	r3, [r4, #4]
 8011516:	2b02      	cmp	r3, #2
 8011518:	d003      	beq.n	8011522 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801151a:	2b03      	cmp	r3, #3
 801151c:	d028      	beq.n	8011570 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801151e:	2b01      	cmp	r3, #1
 8011520:	d104      	bne.n	801152c <uxr_serialize_ObjectVariant.part.0+0x94>
 8011522:	68a1      	ldr	r1, [r4, #8]
 8011524:	4628      	mov	r0, r5
 8011526:	f004 ff83 	bl	8016430 <ucdr_serialize_string>
 801152a:	4606      	mov	r6, r0
 801152c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011530:	4628      	mov	r0, r5
 8011532:	f7fc ff4f 	bl	800e3d4 <ucdr_serialize_int16_t>
 8011536:	4030      	ands	r0, r6
 8011538:	b2c0      	uxtb	r0, r0
 801153a:	bd70      	pop	{r4, r5, r6, pc}
 801153c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011540:	3104      	adds	r1, #4
 8011542:	f7ff be7b 	b.w	801123c <uxr_serialize_CLIENT_Representation>
 8011546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801154a:	3104      	adds	r1, #4
 801154c:	f7ff bf32 	b.w	80113b4 <uxr_serialize_AGENT_Representation>
 8011550:	2001      	movs	r0, #1
 8011552:	bd70      	pop	{r4, r5, r6, pc}
 8011554:	68a2      	ldr	r2, [r4, #8]
 8011556:	f104 010c 	add.w	r1, r4, #12
 801155a:	4628      	mov	r0, r5
 801155c:	f004 ff3c 	bl	80163d8 <ucdr_serialize_sequence_uint8_t>
 8011560:	4606      	mov	r6, r0
 8011562:	e7c7      	b.n	80114f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011564:	68a1      	ldr	r1, [r4, #8]
 8011566:	4628      	mov	r0, r5
 8011568:	f004 ff62 	bl	8016430 <ucdr_serialize_string>
 801156c:	4606      	mov	r6, r0
 801156e:	e7c1      	b.n	80114f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011570:	68a2      	ldr	r2, [r4, #8]
 8011572:	f104 010c 	add.w	r1, r4, #12
 8011576:	4628      	mov	r0, r5
 8011578:	f004 ff2e 	bl	80163d8 <ucdr_serialize_sequence_uint8_t>
 801157c:	4606      	mov	r6, r0
 801157e:	e7d5      	b.n	801152c <uxr_serialize_ObjectVariant.part.0+0x94>

08011580 <uxr_deserialize_DATAWRITER_Representation>:
 8011580:	b570      	push	{r4, r5, r6, lr}
 8011582:	4606      	mov	r6, r0
 8011584:	460d      	mov	r5, r1
 8011586:	f7fc f9d3 	bl	800d930 <ucdr_deserialize_uint8_t>
 801158a:	4604      	mov	r4, r0
 801158c:	b130      	cbz	r0, 801159c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801158e:	782b      	ldrb	r3, [r5, #0]
 8011590:	2b02      	cmp	r3, #2
 8011592:	d00c      	beq.n	80115ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011594:	2b03      	cmp	r3, #3
 8011596:	d012      	beq.n	80115be <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011598:	2b01      	cmp	r3, #1
 801159a:	d008      	beq.n	80115ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801159c:	2202      	movs	r2, #2
 801159e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80115a2:	4630      	mov	r0, r6
 80115a4:	f004 fe88 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 80115a8:	4020      	ands	r0, r4
 80115aa:	b2c0      	uxtb	r0, r0
 80115ac:	bd70      	pop	{r4, r5, r6, pc}
 80115ae:	6869      	ldr	r1, [r5, #4]
 80115b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115b4:	4630      	mov	r0, r6
 80115b6:	f004 ff4b 	bl	8016450 <ucdr_deserialize_string>
 80115ba:	4604      	mov	r4, r0
 80115bc:	e7ee      	b.n	801159c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80115be:	1d2b      	adds	r3, r5, #4
 80115c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115c4:	f105 0108 	add.w	r1, r5, #8
 80115c8:	4630      	mov	r0, r6
 80115ca:	f004 ff17 	bl	80163fc <ucdr_deserialize_sequence_uint8_t>
 80115ce:	4604      	mov	r4, r0
 80115d0:	e7e4      	b.n	801159c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80115d2:	bf00      	nop

080115d4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	460d      	mov	r5, r1
 80115d8:	7809      	ldrb	r1, [r1, #0]
 80115da:	4606      	mov	r6, r0
 80115dc:	f7fc f964 	bl	800d8a8 <ucdr_serialize_bool>
 80115e0:	782b      	ldrb	r3, [r5, #0]
 80115e2:	4604      	mov	r4, r0
 80115e4:	b94b      	cbnz	r3, 80115fa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80115e6:	7a29      	ldrb	r1, [r5, #8]
 80115e8:	4630      	mov	r0, r6
 80115ea:	f7fc f95d 	bl	800d8a8 <ucdr_serialize_bool>
 80115ee:	7a2b      	ldrb	r3, [r5, #8]
 80115f0:	4004      	ands	r4, r0
 80115f2:	b2e4      	uxtb	r4, r4
 80115f4:	b943      	cbnz	r3, 8011608 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80115f6:	4620      	mov	r0, r4
 80115f8:	bd70      	pop	{r4, r5, r6, pc}
 80115fa:	6869      	ldr	r1, [r5, #4]
 80115fc:	4630      	mov	r0, r6
 80115fe:	f004 ff17 	bl	8016430 <ucdr_serialize_string>
 8011602:	4004      	ands	r4, r0
 8011604:	b2e4      	uxtb	r4, r4
 8011606:	e7ee      	b.n	80115e6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011608:	68e9      	ldr	r1, [r5, #12]
 801160a:	4630      	mov	r0, r6
 801160c:	f004 ff10 	bl	8016430 <ucdr_serialize_string>
 8011610:	4004      	ands	r4, r0
 8011612:	4620      	mov	r0, r4
 8011614:	bd70      	pop	{r4, r5, r6, pc}
 8011616:	bf00      	nop

08011618 <uxr_serialize_OBJK_Topic_Binary>:
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	460d      	mov	r5, r1
 801161c:	6809      	ldr	r1, [r1, #0]
 801161e:	4606      	mov	r6, r0
 8011620:	f004 ff06 	bl	8016430 <ucdr_serialize_string>
 8011624:	7929      	ldrb	r1, [r5, #4]
 8011626:	4604      	mov	r4, r0
 8011628:	4630      	mov	r0, r6
 801162a:	f7fc f93d 	bl	800d8a8 <ucdr_serialize_bool>
 801162e:	792b      	ldrb	r3, [r5, #4]
 8011630:	4004      	ands	r4, r0
 8011632:	b2e4      	uxtb	r4, r4
 8011634:	b943      	cbnz	r3, 8011648 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011636:	7b29      	ldrb	r1, [r5, #12]
 8011638:	4630      	mov	r0, r6
 801163a:	f7fc f935 	bl	800d8a8 <ucdr_serialize_bool>
 801163e:	7b2b      	ldrb	r3, [r5, #12]
 8011640:	4004      	ands	r4, r0
 8011642:	b93b      	cbnz	r3, 8011654 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011644:	4620      	mov	r0, r4
 8011646:	bd70      	pop	{r4, r5, r6, pc}
 8011648:	68a9      	ldr	r1, [r5, #8]
 801164a:	4630      	mov	r0, r6
 801164c:	f004 fef0 	bl	8016430 <ucdr_serialize_string>
 8011650:	4004      	ands	r4, r0
 8011652:	e7f0      	b.n	8011636 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011654:	6929      	ldr	r1, [r5, #16]
 8011656:	4630      	mov	r0, r6
 8011658:	f004 feea 	bl	8016430 <ucdr_serialize_string>
 801165c:	4004      	ands	r4, r0
 801165e:	b2e4      	uxtb	r4, r4
 8011660:	4620      	mov	r0, r4
 8011662:	bd70      	pop	{r4, r5, r6, pc}

08011664 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	7809      	ldrb	r1, [r1, #0]
 801166c:	4606      	mov	r6, r0
 801166e:	f7fc f91b 	bl	800d8a8 <ucdr_serialize_bool>
 8011672:	7823      	ldrb	r3, [r4, #0]
 8011674:	4605      	mov	r5, r0
 8011676:	b96b      	cbnz	r3, 8011694 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011678:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801167c:	4630      	mov	r0, r6
 801167e:	f7fc f913 	bl	800d8a8 <ucdr_serialize_bool>
 8011682:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011686:	4005      	ands	r5, r0
 8011688:	b2ed      	uxtb	r5, r5
 801168a:	2b00      	cmp	r3, #0
 801168c:	d169      	bne.n	8011762 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801168e:	4628      	mov	r0, r5
 8011690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011694:	6861      	ldr	r1, [r4, #4]
 8011696:	4630      	mov	r0, r6
 8011698:	f7fc fb4a 	bl	800dd30 <ucdr_serialize_uint32_t>
 801169c:	6863      	ldr	r3, [r4, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d06b      	beq.n	801177a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d067      	beq.n	8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116a6:	68a1      	ldr	r1, [r4, #8]
 80116a8:	4630      	mov	r0, r6
 80116aa:	f004 fec1 	bl	8016430 <ucdr_serialize_string>
 80116ae:	6863      	ldr	r3, [r4, #4]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d953      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d05e      	beq.n	8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116b8:	68e1      	ldr	r1, [r4, #12]
 80116ba:	4630      	mov	r0, r6
 80116bc:	f004 feb8 	bl	8016430 <ucdr_serialize_string>
 80116c0:	6863      	ldr	r3, [r4, #4]
 80116c2:	2b02      	cmp	r3, #2
 80116c4:	d94a      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d055      	beq.n	8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116ca:	6921      	ldr	r1, [r4, #16]
 80116cc:	4630      	mov	r0, r6
 80116ce:	f004 feaf 	bl	8016430 <ucdr_serialize_string>
 80116d2:	6863      	ldr	r3, [r4, #4]
 80116d4:	2b03      	cmp	r3, #3
 80116d6:	d941      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d04c      	beq.n	8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116dc:	6961      	ldr	r1, [r4, #20]
 80116de:	4630      	mov	r0, r6
 80116e0:	f004 fea6 	bl	8016430 <ucdr_serialize_string>
 80116e4:	6863      	ldr	r3, [r4, #4]
 80116e6:	2b04      	cmp	r3, #4
 80116e8:	d938      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d043      	beq.n	8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116ee:	69a1      	ldr	r1, [r4, #24]
 80116f0:	4630      	mov	r0, r6
 80116f2:	f004 fe9d 	bl	8016430 <ucdr_serialize_string>
 80116f6:	6863      	ldr	r3, [r4, #4]
 80116f8:	2b05      	cmp	r3, #5
 80116fa:	d92f      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d03a      	beq.n	8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011700:	69e1      	ldr	r1, [r4, #28]
 8011702:	4630      	mov	r0, r6
 8011704:	f004 fe94 	bl	8016430 <ucdr_serialize_string>
 8011708:	6863      	ldr	r3, [r4, #4]
 801170a:	2b06      	cmp	r3, #6
 801170c:	d926      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801170e:	b390      	cbz	r0, 8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011710:	6a21      	ldr	r1, [r4, #32]
 8011712:	4630      	mov	r0, r6
 8011714:	f004 fe8c 	bl	8016430 <ucdr_serialize_string>
 8011718:	6863      	ldr	r3, [r4, #4]
 801171a:	2b07      	cmp	r3, #7
 801171c:	d91e      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801171e:	b350      	cbz	r0, 8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011720:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011722:	4630      	mov	r0, r6
 8011724:	f004 fe84 	bl	8016430 <ucdr_serialize_string>
 8011728:	6863      	ldr	r3, [r4, #4]
 801172a:	2b08      	cmp	r3, #8
 801172c:	d916      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801172e:	b310      	cbz	r0, 8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011730:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011732:	4630      	mov	r0, r6
 8011734:	f004 fe7c 	bl	8016430 <ucdr_serialize_string>
 8011738:	6863      	ldr	r3, [r4, #4]
 801173a:	2b09      	cmp	r3, #9
 801173c:	d90e      	bls.n	801175c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801173e:	b1d0      	cbz	r0, 8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011740:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011744:	2709      	movs	r7, #9
 8011746:	e000      	b.n	801174a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011748:	b1a8      	cbz	r0, 8011776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801174a:	f858 1b04 	ldr.w	r1, [r8], #4
 801174e:	4630      	mov	r0, r6
 8011750:	f004 fe6e 	bl	8016430 <ucdr_serialize_string>
 8011754:	6862      	ldr	r2, [r4, #4]
 8011756:	3701      	adds	r7, #1
 8011758:	4297      	cmp	r7, r2
 801175a:	d3f5      	bcc.n	8011748 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801175c:	4005      	ands	r5, r0
 801175e:	b2ed      	uxtb	r5, r5
 8011760:	e78a      	b.n	8011678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011762:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011764:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011768:	4630      	mov	r0, r6
 801176a:	f004 fe35 	bl	80163d8 <ucdr_serialize_sequence_uint8_t>
 801176e:	4005      	ands	r5, r0
 8011770:	4628      	mov	r0, r5
 8011772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011776:	2500      	movs	r5, #0
 8011778:	e77e      	b.n	8011678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801177a:	4028      	ands	r0, r5
 801177c:	b2c5      	uxtb	r5, r0
 801177e:	e77b      	b.n	8011678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011780 <uxr_serialize_OBJK_Publisher_Binary>:
 8011780:	b570      	push	{r4, r5, r6, lr}
 8011782:	460d      	mov	r5, r1
 8011784:	7809      	ldrb	r1, [r1, #0]
 8011786:	4606      	mov	r6, r0
 8011788:	f7fc f88e 	bl	800d8a8 <ucdr_serialize_bool>
 801178c:	782b      	ldrb	r3, [r5, #0]
 801178e:	4604      	mov	r4, r0
 8011790:	b94b      	cbnz	r3, 80117a6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011792:	7a29      	ldrb	r1, [r5, #8]
 8011794:	4630      	mov	r0, r6
 8011796:	f7fc f887 	bl	800d8a8 <ucdr_serialize_bool>
 801179a:	7a2b      	ldrb	r3, [r5, #8]
 801179c:	4004      	ands	r4, r0
 801179e:	b2e4      	uxtb	r4, r4
 80117a0:	b943      	cbnz	r3, 80117b4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80117a2:	4620      	mov	r0, r4
 80117a4:	bd70      	pop	{r4, r5, r6, pc}
 80117a6:	6869      	ldr	r1, [r5, #4]
 80117a8:	4630      	mov	r0, r6
 80117aa:	f004 fe41 	bl	8016430 <ucdr_serialize_string>
 80117ae:	4004      	ands	r4, r0
 80117b0:	b2e4      	uxtb	r4, r4
 80117b2:	e7ee      	b.n	8011792 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80117b4:	f105 010c 	add.w	r1, r5, #12
 80117b8:	4630      	mov	r0, r6
 80117ba:	f7ff ff53 	bl	8011664 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80117be:	4004      	ands	r4, r0
 80117c0:	4620      	mov	r0, r4
 80117c2:	bd70      	pop	{r4, r5, r6, pc}

080117c4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80117c4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80117c8:	4688      	mov	r8, r1
 80117ca:	8809      	ldrh	r1, [r1, #0]
 80117cc:	4681      	mov	r9, r0
 80117ce:	f7fc f8c5 	bl	800d95c <ucdr_serialize_uint16_t>
 80117d2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80117d6:	4606      	mov	r6, r0
 80117d8:	4648      	mov	r0, r9
 80117da:	f7fc f865 	bl	800d8a8 <ucdr_serialize_bool>
 80117de:	f898 3002 	ldrb.w	r3, [r8, #2]
 80117e2:	4006      	ands	r6, r0
 80117e4:	b2f5      	uxtb	r5, r6
 80117e6:	b9eb      	cbnz	r3, 8011824 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80117e8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80117ec:	4648      	mov	r0, r9
 80117ee:	f7fc f85b 	bl	800d8a8 <ucdr_serialize_bool>
 80117f2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80117f6:	4005      	ands	r5, r0
 80117f8:	bb7b      	cbnz	r3, 801185a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80117fa:	f898 100c 	ldrb.w	r1, [r8, #12]
 80117fe:	4648      	mov	r0, r9
 8011800:	f7fc f852 	bl	800d8a8 <ucdr_serialize_bool>
 8011804:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011808:	4005      	ands	r5, r0
 801180a:	b9f3      	cbnz	r3, 801184a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801180c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011810:	4648      	mov	r0, r9
 8011812:	f7fc f849 	bl	800d8a8 <ucdr_serialize_bool>
 8011816:	f898 3014 	ldrb.w	r3, [r8, #20]
 801181a:	4005      	ands	r5, r0
 801181c:	b94b      	cbnz	r3, 8011832 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801181e:	4628      	mov	r0, r5
 8011820:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011824:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011828:	4648      	mov	r0, r9
 801182a:	f7fc f897 	bl	800d95c <ucdr_serialize_uint16_t>
 801182e:	4005      	ands	r5, r0
 8011830:	e7da      	b.n	80117e8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011832:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011836:	f108 011c 	add.w	r1, r8, #28
 801183a:	4648      	mov	r0, r9
 801183c:	f004 fdcc 	bl	80163d8 <ucdr_serialize_sequence_uint8_t>
 8011840:	4028      	ands	r0, r5
 8011842:	b2c5      	uxtb	r5, r0
 8011844:	4628      	mov	r0, r5
 8011846:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801184a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801184e:	4648      	mov	r0, r9
 8011850:	f7fc fa6e 	bl	800dd30 <ucdr_serialize_uint32_t>
 8011854:	4028      	ands	r0, r5
 8011856:	b2c5      	uxtb	r5, r0
 8011858:	e7d8      	b.n	801180c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801185a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801185e:	4648      	mov	r0, r9
 8011860:	f7fc fa66 	bl	800dd30 <ucdr_serialize_uint32_t>
 8011864:	4028      	ands	r0, r5
 8011866:	b2c5      	uxtb	r5, r0
 8011868:	e7c7      	b.n	80117fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801186a:	bf00      	nop

0801186c <uxr_serialize_OBJK_DataWriter_Binary>:
 801186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186e:	2202      	movs	r2, #2
 8011870:	460d      	mov	r5, r1
 8011872:	4606      	mov	r6, r0
 8011874:	f004 fcbc 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011878:	78a9      	ldrb	r1, [r5, #2]
 801187a:	4604      	mov	r4, r0
 801187c:	4630      	mov	r0, r6
 801187e:	f7fc f813 	bl	800d8a8 <ucdr_serialize_bool>
 8011882:	78ab      	ldrb	r3, [r5, #2]
 8011884:	4004      	ands	r4, r0
 8011886:	b2e4      	uxtb	r4, r4
 8011888:	b90b      	cbnz	r3, 801188e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801188a:	4620      	mov	r0, r4
 801188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188e:	f105 0108 	add.w	r1, r5, #8
 8011892:	4630      	mov	r0, r6
 8011894:	f7ff ff96 	bl	80117c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011898:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801189c:	4607      	mov	r7, r0
 801189e:	4630      	mov	r0, r6
 80118a0:	f7fc f802 	bl	800d8a8 <ucdr_serialize_bool>
 80118a4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80118a8:	4038      	ands	r0, r7
 80118aa:	b2c7      	uxtb	r7, r0
 80118ac:	b913      	cbnz	r3, 80118b4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80118ae:	403c      	ands	r4, r7
 80118b0:	4620      	mov	r0, r4
 80118b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80118b8:	4630      	mov	r0, r6
 80118ba:	f7fc fc8f 	bl	800e1dc <ucdr_serialize_uint64_t>
 80118be:	4007      	ands	r7, r0
 80118c0:	e7f5      	b.n	80118ae <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80118c2:	bf00      	nop

080118c4 <uxr_deserialize_ObjectVariant>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	4605      	mov	r5, r0
 80118c8:	460e      	mov	r6, r1
 80118ca:	f7fc f831 	bl	800d930 <ucdr_deserialize_uint8_t>
 80118ce:	b168      	cbz	r0, 80118ec <uxr_deserialize_ObjectVariant+0x28>
 80118d0:	7833      	ldrb	r3, [r6, #0]
 80118d2:	3b01      	subs	r3, #1
 80118d4:	4604      	mov	r4, r0
 80118d6:	2b0d      	cmp	r3, #13
 80118d8:	d809      	bhi.n	80118ee <uxr_deserialize_ObjectVariant+0x2a>
 80118da:	e8df f003 	tbb	[pc, r3]
 80118de:	0a41      	.short	0x0a41
 80118e0:	0a0a2323 	.word	0x0a0a2323
 80118e4:	10080a0a 	.word	0x10080a0a
 80118e8:	565c1010 	.word	0x565c1010
 80118ec:	2400      	movs	r4, #0
 80118ee:	4620      	mov	r0, r4
 80118f0:	bd70      	pop	{r4, r5, r6, pc}
 80118f2:	1d31      	adds	r1, r6, #4
 80118f4:	4628      	mov	r0, r5
 80118f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118fa:	f7ff be41 	b.w	8011580 <uxr_deserialize_DATAWRITER_Representation>
 80118fe:	1d31      	adds	r1, r6, #4
 8011900:	4628      	mov	r0, r5
 8011902:	f7fc f815 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011906:	2800      	cmp	r0, #0
 8011908:	d0f0      	beq.n	80118ec <uxr_deserialize_ObjectVariant+0x28>
 801190a:	7933      	ldrb	r3, [r6, #4]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d001      	beq.n	8011914 <uxr_deserialize_ObjectVariant+0x50>
 8011910:	2b02      	cmp	r3, #2
 8011912:	d1ec      	bne.n	80118ee <uxr_deserialize_ObjectVariant+0x2a>
 8011914:	68b1      	ldr	r1, [r6, #8]
 8011916:	4628      	mov	r0, r5
 8011918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801191c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011920:	f004 bd96 	b.w	8016450 <ucdr_deserialize_string>
 8011924:	1d31      	adds	r1, r6, #4
 8011926:	4628      	mov	r0, r5
 8011928:	f7fc f802 	bl	800d930 <ucdr_deserialize_uint8_t>
 801192c:	4604      	mov	r4, r0
 801192e:	b170      	cbz	r0, 801194e <uxr_deserialize_ObjectVariant+0x8a>
 8011930:	7933      	ldrb	r3, [r6, #4]
 8011932:	2b02      	cmp	r3, #2
 8011934:	d04c      	beq.n	80119d0 <uxr_deserialize_ObjectVariant+0x10c>
 8011936:	2b03      	cmp	r3, #3
 8011938:	d109      	bne.n	801194e <uxr_deserialize_ObjectVariant+0x8a>
 801193a:	f106 0308 	add.w	r3, r6, #8
 801193e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011942:	f106 010c 	add.w	r1, r6, #12
 8011946:	4628      	mov	r0, r5
 8011948:	f004 fd58 	bl	80163fc <ucdr_deserialize_sequence_uint8_t>
 801194c:	4604      	mov	r4, r0
 801194e:	2202      	movs	r2, #2
 8011950:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011954:	4628      	mov	r0, r5
 8011956:	f004 fcaf 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 801195a:	4020      	ands	r0, r4
 801195c:	b2c4      	uxtb	r4, r0
 801195e:	e7c6      	b.n	80118ee <uxr_deserialize_ObjectVariant+0x2a>
 8011960:	1d31      	adds	r1, r6, #4
 8011962:	4628      	mov	r0, r5
 8011964:	f7fb ffe4 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011968:	4604      	mov	r4, r0
 801196a:	b130      	cbz	r0, 801197a <uxr_deserialize_ObjectVariant+0xb6>
 801196c:	7933      	ldrb	r3, [r6, #4]
 801196e:	2b02      	cmp	r3, #2
 8011970:	d036      	beq.n	80119e0 <uxr_deserialize_ObjectVariant+0x11c>
 8011972:	2b03      	cmp	r3, #3
 8011974:	d03c      	beq.n	80119f0 <uxr_deserialize_ObjectVariant+0x12c>
 8011976:	2b01      	cmp	r3, #1
 8011978:	d032      	beq.n	80119e0 <uxr_deserialize_ObjectVariant+0x11c>
 801197a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801197e:	4628      	mov	r0, r5
 8011980:	f7fc fda8 	bl	800e4d4 <ucdr_deserialize_int16_t>
 8011984:	4020      	ands	r0, r4
 8011986:	b2c4      	uxtb	r4, r0
 8011988:	e7b1      	b.n	80118ee <uxr_deserialize_ObjectVariant+0x2a>
 801198a:	1d31      	adds	r1, r6, #4
 801198c:	4628      	mov	r0, r5
 801198e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011992:	f7ff bcab 	b.w	80112ec <uxr_deserialize_CLIENT_Representation>
 8011996:	2204      	movs	r2, #4
 8011998:	18b1      	adds	r1, r6, r2
 801199a:	4628      	mov	r0, r5
 801199c:	f004 fc8c 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 80119a0:	2202      	movs	r2, #2
 80119a2:	f106 0108 	add.w	r1, r6, #8
 80119a6:	4604      	mov	r4, r0
 80119a8:	4628      	mov	r0, r5
 80119aa:	f004 fc85 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 80119ae:	2202      	movs	r2, #2
 80119b0:	4004      	ands	r4, r0
 80119b2:	f106 010a 	add.w	r1, r6, #10
 80119b6:	4628      	mov	r0, r5
 80119b8:	f004 fc7e 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 80119bc:	b2e4      	uxtb	r4, r4
 80119be:	4603      	mov	r3, r0
 80119c0:	f106 010c 	add.w	r1, r6, #12
 80119c4:	4628      	mov	r0, r5
 80119c6:	401c      	ands	r4, r3
 80119c8:	f7fb ff84 	bl	800d8d4 <ucdr_deserialize_bool>
 80119cc:	4004      	ands	r4, r0
 80119ce:	e78e      	b.n	80118ee <uxr_deserialize_ObjectVariant+0x2a>
 80119d0:	68b1      	ldr	r1, [r6, #8]
 80119d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119d6:	4628      	mov	r0, r5
 80119d8:	f004 fd3a 	bl	8016450 <ucdr_deserialize_string>
 80119dc:	4604      	mov	r4, r0
 80119de:	e7b6      	b.n	801194e <uxr_deserialize_ObjectVariant+0x8a>
 80119e0:	68b1      	ldr	r1, [r6, #8]
 80119e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119e6:	4628      	mov	r0, r5
 80119e8:	f004 fd32 	bl	8016450 <ucdr_deserialize_string>
 80119ec:	4604      	mov	r4, r0
 80119ee:	e7c4      	b.n	801197a <uxr_deserialize_ObjectVariant+0xb6>
 80119f0:	f106 0308 	add.w	r3, r6, #8
 80119f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119f8:	f106 010c 	add.w	r1, r6, #12
 80119fc:	4628      	mov	r0, r5
 80119fe:	f004 fcfd 	bl	80163fc <ucdr_deserialize_sequence_uint8_t>
 8011a02:	4604      	mov	r4, r0
 8011a04:	e7b9      	b.n	801197a <uxr_deserialize_ObjectVariant+0xb6>
 8011a06:	bf00      	nop

08011a08 <uxr_deserialize_BaseObjectRequest>:
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	2202      	movs	r2, #2
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	460e      	mov	r6, r1
 8011a10:	f004 fc52 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011a14:	2202      	movs	r2, #2
 8011a16:	4604      	mov	r4, r0
 8011a18:	18b1      	adds	r1, r6, r2
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f004 fc4c 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011a20:	4020      	ands	r0, r4
 8011a22:	b2c0      	uxtb	r0, r0
 8011a24:	bd70      	pop	{r4, r5, r6, pc}
 8011a26:	bf00      	nop

08011a28 <uxr_serialize_ActivityInfoVariant>:
 8011a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a2c:	460d      	mov	r5, r1
 8011a2e:	7809      	ldrb	r1, [r1, #0]
 8011a30:	4607      	mov	r7, r0
 8011a32:	f7fb ff67 	bl	800d904 <ucdr_serialize_uint8_t>
 8011a36:	4681      	mov	r9, r0
 8011a38:	b138      	cbz	r0, 8011a4a <uxr_serialize_ActivityInfoVariant+0x22>
 8011a3a:	782b      	ldrb	r3, [r5, #0]
 8011a3c:	2b06      	cmp	r3, #6
 8011a3e:	f000 8082 	beq.w	8011b46 <uxr_serialize_ActivityInfoVariant+0x11e>
 8011a42:	2b0d      	cmp	r3, #13
 8011a44:	d016      	beq.n	8011a74 <uxr_serialize_ActivityInfoVariant+0x4c>
 8011a46:	2b05      	cmp	r3, #5
 8011a48:	d002      	beq.n	8011a50 <uxr_serialize_ActivityInfoVariant+0x28>
 8011a4a:	4648      	mov	r0, r9
 8011a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a50:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011a54:	4638      	mov	r0, r7
 8011a56:	f7fc fcbd 	bl	800e3d4 <ucdr_serialize_int16_t>
 8011a5a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011a5e:	4681      	mov	r9, r0
 8011a60:	4638      	mov	r0, r7
 8011a62:	f7fc fbbb 	bl	800e1dc <ucdr_serialize_uint64_t>
 8011a66:	ea09 0000 	and.w	r0, r9, r0
 8011a6a:	fa5f f980 	uxtb.w	r9, r0
 8011a6e:	4648      	mov	r0, r9
 8011a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a74:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011a78:	4638      	mov	r0, r7
 8011a7a:	f7fc fcab 	bl	800e3d4 <ucdr_serialize_int16_t>
 8011a7e:	68e9      	ldr	r1, [r5, #12]
 8011a80:	4681      	mov	r9, r0
 8011a82:	4638      	mov	r0, r7
 8011a84:	f7fc f954 	bl	800dd30 <ucdr_serialize_uint32_t>
 8011a88:	68eb      	ldr	r3, [r5, #12]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d0eb      	beq.n	8011a66 <uxr_serialize_ActivityInfoVariant+0x3e>
 8011a8e:	b320      	cbz	r0, 8011ada <uxr_serialize_ActivityInfoVariant+0xb2>
 8011a90:	f105 080c 	add.w	r8, r5, #12
 8011a94:	2600      	movs	r6, #0
 8011a96:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011a9a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8011a9e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011aa2:	4638      	mov	r0, r7
 8011aa4:	f7fb ff2e 	bl	800d904 <ucdr_serialize_uint8_t>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d053      	beq.n	8011b54 <uxr_serialize_ActivityInfoVariant+0x12c>
 8011aac:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011ab0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011ab4:	0074      	lsls	r4, r6, #1
 8011ab6:	00c9      	lsls	r1, r1, #3
 8011ab8:	2b03      	cmp	r3, #3
 8011aba:	d854      	bhi.n	8011b66 <uxr_serialize_ActivityInfoVariant+0x13e>
 8011abc:	e8df f003 	tbb	[pc, r3]
 8011ac0:	02102132 	.word	0x02102132
 8011ac4:	4441      	add	r1, r8
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	6889      	ldr	r1, [r1, #8]
 8011aca:	f004 fcb1 	bl	8016430 <ucdr_serialize_string>
 8011ace:	68ea      	ldr	r2, [r5, #12]
 8011ad0:	3601      	adds	r6, #1
 8011ad2:	4296      	cmp	r6, r2
 8011ad4:	d242      	bcs.n	8011b5c <uxr_serialize_ActivityInfoVariant+0x134>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d1dd      	bne.n	8011a96 <uxr_serialize_ActivityInfoVariant+0x6e>
 8011ada:	f04f 0900 	mov.w	r9, #0
 8011ade:	e7b4      	b.n	8011a4a <uxr_serialize_ActivityInfoVariant+0x22>
 8011ae0:	3108      	adds	r1, #8
 8011ae2:	4441      	add	r1, r8
 8011ae4:	2210      	movs	r2, #16
 8011ae6:	4638      	mov	r0, r7
 8011ae8:	f004 fb82 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011aec:	4434      	add	r4, r6
 8011aee:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011af2:	4604      	mov	r4, r0
 8011af4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011af6:	4638      	mov	r0, r7
 8011af8:	f7fc f91a 	bl	800dd30 <ucdr_serialize_uint32_t>
 8011afc:	4020      	ands	r0, r4
 8011afe:	b2c0      	uxtb	r0, r0
 8011b00:	e7e5      	b.n	8011ace <uxr_serialize_ActivityInfoVariant+0xa6>
 8011b02:	3108      	adds	r1, #8
 8011b04:	4441      	add	r1, r8
 8011b06:	2204      	movs	r2, #4
 8011b08:	4638      	mov	r0, r7
 8011b0a:	f004 fb71 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011b0e:	4434      	add	r4, r6
 8011b10:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011b14:	4604      	mov	r4, r0
 8011b16:	8b19      	ldrh	r1, [r3, #24]
 8011b18:	4638      	mov	r0, r7
 8011b1a:	f7fb ff1f 	bl	800d95c <ucdr_serialize_uint16_t>
 8011b1e:	4020      	ands	r0, r4
 8011b20:	b2c0      	uxtb	r0, r0
 8011b22:	e7d4      	b.n	8011ace <uxr_serialize_ActivityInfoVariant+0xa6>
 8011b24:	3108      	adds	r1, #8
 8011b26:	4441      	add	r1, r8
 8011b28:	2202      	movs	r2, #2
 8011b2a:	4638      	mov	r0, r7
 8011b2c:	f004 fb60 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011b30:	4434      	add	r4, r6
 8011b32:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011b36:	4604      	mov	r4, r0
 8011b38:	7d99      	ldrb	r1, [r3, #22]
 8011b3a:	4638      	mov	r0, r7
 8011b3c:	f7fb fee2 	bl	800d904 <ucdr_serialize_uint8_t>
 8011b40:	4020      	ands	r0, r4
 8011b42:	b2c0      	uxtb	r0, r0
 8011b44:	e7c3      	b.n	8011ace <uxr_serialize_ActivityInfoVariant+0xa6>
 8011b46:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011b4a:	4638      	mov	r0, r7
 8011b4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b50:	f7fc bc40 	b.w	800e3d4 <ucdr_serialize_int16_t>
 8011b54:	68ea      	ldr	r2, [r5, #12]
 8011b56:	3601      	adds	r6, #1
 8011b58:	42b2      	cmp	r2, r6
 8011b5a:	d8be      	bhi.n	8011ada <uxr_serialize_ActivityInfoVariant+0xb2>
 8011b5c:	ea09 0900 	and.w	r9, r9, r0
 8011b60:	fa5f f989 	uxtb.w	r9, r9
 8011b64:	e771      	b.n	8011a4a <uxr_serialize_ActivityInfoVariant+0x22>
 8011b66:	68eb      	ldr	r3, [r5, #12]
 8011b68:	3601      	adds	r6, #1
 8011b6a:	429e      	cmp	r6, r3
 8011b6c:	f10a 0a18 	add.w	sl, sl, #24
 8011b70:	d395      	bcc.n	8011a9e <uxr_serialize_ActivityInfoVariant+0x76>
 8011b72:	e76a      	b.n	8011a4a <uxr_serialize_ActivityInfoVariant+0x22>

08011b74 <uxr_deserialize_BaseObjectReply>:
 8011b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b78:	2202      	movs	r2, #2
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	460f      	mov	r7, r1
 8011b7e:	f004 fb9b 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011b82:	2202      	movs	r2, #2
 8011b84:	18b9      	adds	r1, r7, r2
 8011b86:	4605      	mov	r5, r0
 8011b88:	4630      	mov	r0, r6
 8011b8a:	f004 fb95 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011b8e:	1d39      	adds	r1, r7, #4
 8011b90:	4680      	mov	r8, r0
 8011b92:	4630      	mov	r0, r6
 8011b94:	f7fb fecc 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011b98:	1d79      	adds	r1, r7, #5
 8011b9a:	4604      	mov	r4, r0
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	f7fb fec7 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011ba2:	ea05 0508 	and.w	r5, r5, r8
 8011ba6:	402c      	ands	r4, r5
 8011ba8:	4020      	ands	r0, r4
 8011baa:	b2c0      	uxtb	r0, r0
 8011bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011bb0 <uxr_serialize_ReadSpecification>:
 8011bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb4:	460e      	mov	r6, r1
 8011bb6:	7809      	ldrb	r1, [r1, #0]
 8011bb8:	4607      	mov	r7, r0
 8011bba:	f7fb fea3 	bl	800d904 <ucdr_serialize_uint8_t>
 8011bbe:	7871      	ldrb	r1, [r6, #1]
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	4638      	mov	r0, r7
 8011bc4:	f7fb fe9e 	bl	800d904 <ucdr_serialize_uint8_t>
 8011bc8:	78b1      	ldrb	r1, [r6, #2]
 8011bca:	4004      	ands	r4, r0
 8011bcc:	4638      	mov	r0, r7
 8011bce:	f7fb fe6b 	bl	800d8a8 <ucdr_serialize_bool>
 8011bd2:	78b3      	ldrb	r3, [r6, #2]
 8011bd4:	b2e4      	uxtb	r4, r4
 8011bd6:	4004      	ands	r4, r0
 8011bd8:	b94b      	cbnz	r3, 8011bee <uxr_serialize_ReadSpecification+0x3e>
 8011bda:	7a31      	ldrb	r1, [r6, #8]
 8011bdc:	4638      	mov	r0, r7
 8011bde:	f7fb fe63 	bl	800d8a8 <ucdr_serialize_bool>
 8011be2:	7a33      	ldrb	r3, [r6, #8]
 8011be4:	4004      	ands	r4, r0
 8011be6:	b943      	cbnz	r3, 8011bfa <uxr_serialize_ReadSpecification+0x4a>
 8011be8:	4620      	mov	r0, r4
 8011bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bee:	6871      	ldr	r1, [r6, #4]
 8011bf0:	4638      	mov	r0, r7
 8011bf2:	f004 fc1d 	bl	8016430 <ucdr_serialize_string>
 8011bf6:	4004      	ands	r4, r0
 8011bf8:	e7ef      	b.n	8011bda <uxr_serialize_ReadSpecification+0x2a>
 8011bfa:	8971      	ldrh	r1, [r6, #10]
 8011bfc:	4638      	mov	r0, r7
 8011bfe:	f7fb fead 	bl	800d95c <ucdr_serialize_uint16_t>
 8011c02:	89b1      	ldrh	r1, [r6, #12]
 8011c04:	4605      	mov	r5, r0
 8011c06:	4638      	mov	r0, r7
 8011c08:	f7fb fea8 	bl	800d95c <ucdr_serialize_uint16_t>
 8011c0c:	89f1      	ldrh	r1, [r6, #14]
 8011c0e:	4005      	ands	r5, r0
 8011c10:	4638      	mov	r0, r7
 8011c12:	f7fb fea3 	bl	800d95c <ucdr_serialize_uint16_t>
 8011c16:	8a31      	ldrh	r1, [r6, #16]
 8011c18:	4680      	mov	r8, r0
 8011c1a:	4638      	mov	r0, r7
 8011c1c:	f7fb fe9e 	bl	800d95c <ucdr_serialize_uint16_t>
 8011c20:	b2ed      	uxtb	r5, r5
 8011c22:	4025      	ands	r5, r4
 8011c24:	ea08 0505 	and.w	r5, r8, r5
 8011c28:	ea00 0405 	and.w	r4, r0, r5
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c32:	bf00      	nop

08011c34 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011c34:	f7ff bb02 	b.w	801123c <uxr_serialize_CLIENT_Representation>

08011c38 <uxr_serialize_CREATE_Payload>:
 8011c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c3a:	2202      	movs	r2, #2
 8011c3c:	4607      	mov	r7, r0
 8011c3e:	460e      	mov	r6, r1
 8011c40:	f004 fad6 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011c44:	2202      	movs	r2, #2
 8011c46:	18b1      	adds	r1, r6, r2
 8011c48:	4605      	mov	r5, r0
 8011c4a:	4638      	mov	r0, r7
 8011c4c:	f004 fad0 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011c50:	7931      	ldrb	r1, [r6, #4]
 8011c52:	4604      	mov	r4, r0
 8011c54:	4638      	mov	r0, r7
 8011c56:	f7fb fe55 	bl	800d904 <ucdr_serialize_uint8_t>
 8011c5a:	b170      	cbz	r0, 8011c7a <uxr_serialize_CREATE_Payload+0x42>
 8011c5c:	7933      	ldrb	r3, [r6, #4]
 8011c5e:	402c      	ands	r4, r5
 8011c60:	3b01      	subs	r3, #1
 8011c62:	b2e4      	uxtb	r4, r4
 8011c64:	2b0d      	cmp	r3, #13
 8011c66:	d809      	bhi.n	8011c7c <uxr_serialize_CREATE_Payload+0x44>
 8011c68:	e8df f003 	tbb	[pc, r3]
 8011c6c:	23230a4c 	.word	0x23230a4c
 8011c70:	0a0a0a0a 	.word	0x0a0a0a0a
 8011c74:	12121208 	.word	0x12121208
 8011c78:	3e45      	.short	0x3e45
 8011c7a:	2400      	movs	r4, #0
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c80:	f106 0108 	add.w	r1, r6, #8
 8011c84:	4638      	mov	r0, r7
 8011c86:	f7ff fbdf 	bl	8011448 <uxr_serialize_DATAWRITER_Representation>
 8011c8a:	4004      	ands	r4, r0
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c90:	7a31      	ldrb	r1, [r6, #8]
 8011c92:	4638      	mov	r0, r7
 8011c94:	f7fb fe36 	bl	800d904 <ucdr_serialize_uint8_t>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d0ee      	beq.n	8011c7a <uxr_serialize_CREATE_Payload+0x42>
 8011c9c:	7a33      	ldrb	r3, [r6, #8]
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d001      	beq.n	8011ca6 <uxr_serialize_CREATE_Payload+0x6e>
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	d1ea      	bne.n	8011c7c <uxr_serialize_CREATE_Payload+0x44>
 8011ca6:	68f1      	ldr	r1, [r6, #12]
 8011ca8:	4638      	mov	r0, r7
 8011caa:	f004 fbc1 	bl	8016430 <ucdr_serialize_string>
 8011cae:	4004      	ands	r4, r0
 8011cb0:	e7e4      	b.n	8011c7c <uxr_serialize_CREATE_Payload+0x44>
 8011cb2:	7a31      	ldrb	r1, [r6, #8]
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	f7fb fe25 	bl	800d904 <ucdr_serialize_uint8_t>
 8011cba:	4605      	mov	r5, r0
 8011cbc:	b158      	cbz	r0, 8011cd6 <uxr_serialize_CREATE_Payload+0x9e>
 8011cbe:	7a33      	ldrb	r3, [r6, #8]
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d034      	beq.n	8011d2e <uxr_serialize_CREATE_Payload+0xf6>
 8011cc4:	2b03      	cmp	r3, #3
 8011cc6:	d106      	bne.n	8011cd6 <uxr_serialize_CREATE_Payload+0x9e>
 8011cc8:	68f2      	ldr	r2, [r6, #12]
 8011cca:	f106 0110 	add.w	r1, r6, #16
 8011cce:	4638      	mov	r0, r7
 8011cd0:	f004 fb82 	bl	80163d8 <ucdr_serialize_sequence_uint8_t>
 8011cd4:	4605      	mov	r5, r0
 8011cd6:	2202      	movs	r2, #2
 8011cd8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011cdc:	4638      	mov	r0, r7
 8011cde:	f004 fa87 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011ce2:	4028      	ands	r0, r5
 8011ce4:	4004      	ands	r4, r0
 8011ce6:	e7c9      	b.n	8011c7c <uxr_serialize_CREATE_Payload+0x44>
 8011ce8:	f106 0108 	add.w	r1, r6, #8
 8011cec:	4638      	mov	r0, r7
 8011cee:	f7ff faa5 	bl	801123c <uxr_serialize_CLIENT_Representation>
 8011cf2:	4004      	ands	r4, r0
 8011cf4:	e7c2      	b.n	8011c7c <uxr_serialize_CREATE_Payload+0x44>
 8011cf6:	f106 0108 	add.w	r1, r6, #8
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	f7ff fb5a 	bl	80113b4 <uxr_serialize_AGENT_Representation>
 8011d00:	4004      	ands	r4, r0
 8011d02:	e7bb      	b.n	8011c7c <uxr_serialize_CREATE_Payload+0x44>
 8011d04:	7a31      	ldrb	r1, [r6, #8]
 8011d06:	4638      	mov	r0, r7
 8011d08:	f7fb fdfc 	bl	800d904 <ucdr_serialize_uint8_t>
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	b130      	cbz	r0, 8011d1e <uxr_serialize_CREATE_Payload+0xe6>
 8011d10:	7a33      	ldrb	r3, [r6, #8]
 8011d12:	2b02      	cmp	r3, #2
 8011d14:	d011      	beq.n	8011d3a <uxr_serialize_CREATE_Payload+0x102>
 8011d16:	2b03      	cmp	r3, #3
 8011d18:	d015      	beq.n	8011d46 <uxr_serialize_CREATE_Payload+0x10e>
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d00d      	beq.n	8011d3a <uxr_serialize_CREATE_Payload+0x102>
 8011d1e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011d22:	4638      	mov	r0, r7
 8011d24:	f7fc fb56 	bl	800e3d4 <ucdr_serialize_int16_t>
 8011d28:	4028      	ands	r0, r5
 8011d2a:	4004      	ands	r4, r0
 8011d2c:	e7a6      	b.n	8011c7c <uxr_serialize_CREATE_Payload+0x44>
 8011d2e:	68f1      	ldr	r1, [r6, #12]
 8011d30:	4638      	mov	r0, r7
 8011d32:	f004 fb7d 	bl	8016430 <ucdr_serialize_string>
 8011d36:	4605      	mov	r5, r0
 8011d38:	e7cd      	b.n	8011cd6 <uxr_serialize_CREATE_Payload+0x9e>
 8011d3a:	68f1      	ldr	r1, [r6, #12]
 8011d3c:	4638      	mov	r0, r7
 8011d3e:	f004 fb77 	bl	8016430 <ucdr_serialize_string>
 8011d42:	4605      	mov	r5, r0
 8011d44:	e7eb      	b.n	8011d1e <uxr_serialize_CREATE_Payload+0xe6>
 8011d46:	68f2      	ldr	r2, [r6, #12]
 8011d48:	f106 0110 	add.w	r1, r6, #16
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	f004 fb43 	bl	80163d8 <ucdr_serialize_sequence_uint8_t>
 8011d52:	4605      	mov	r5, r0
 8011d54:	e7e3      	b.n	8011d1e <uxr_serialize_CREATE_Payload+0xe6>
 8011d56:	bf00      	nop

08011d58 <uxr_deserialize_GET_INFO_Payload>:
 8011d58:	b570      	push	{r4, r5, r6, lr}
 8011d5a:	2202      	movs	r2, #2
 8011d5c:	4605      	mov	r5, r0
 8011d5e:	460e      	mov	r6, r1
 8011d60:	f004 faaa 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011d64:	2202      	movs	r2, #2
 8011d66:	18b1      	adds	r1, r6, r2
 8011d68:	4604      	mov	r4, r0
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	f004 faa4 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011d70:	1d31      	adds	r1, r6, #4
 8011d72:	4004      	ands	r4, r0
 8011d74:	4628      	mov	r0, r5
 8011d76:	f7fc f90b 	bl	800df90 <ucdr_deserialize_uint32_t>
 8011d7a:	b2e4      	uxtb	r4, r4
 8011d7c:	4020      	ands	r0, r4
 8011d7e:	bd70      	pop	{r4, r5, r6, pc}

08011d80 <uxr_serialize_DELETE_Payload>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	2202      	movs	r2, #2
 8011d84:	4605      	mov	r5, r0
 8011d86:	460e      	mov	r6, r1
 8011d88:	f004 fa32 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011d8c:	2202      	movs	r2, #2
 8011d8e:	4604      	mov	r4, r0
 8011d90:	18b1      	adds	r1, r6, r2
 8011d92:	4628      	mov	r0, r5
 8011d94:	f004 fa2c 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011d98:	4020      	ands	r0, r4
 8011d9a:	b2c0      	uxtb	r0, r0
 8011d9c:	bd70      	pop	{r4, r5, r6, pc}
 8011d9e:	bf00      	nop

08011da0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da4:	4605      	mov	r5, r0
 8011da6:	460e      	mov	r6, r1
 8011da8:	f7fb fdc2 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011dac:	1c71      	adds	r1, r6, #1
 8011dae:	4604      	mov	r4, r0
 8011db0:	4628      	mov	r0, r5
 8011db2:	f7fb fdbd 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011db6:	2204      	movs	r2, #4
 8011db8:	18b1      	adds	r1, r6, r2
 8011dba:	4680      	mov	r8, r0
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	f004 fa7b 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011dc2:	f106 0108 	add.w	r1, r6, #8
 8011dc6:	4607      	mov	r7, r0
 8011dc8:	2202      	movs	r2, #2
 8011dca:	4628      	mov	r0, r5
 8011dcc:	f004 fa74 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011dd0:	ea04 0308 	and.w	r3, r4, r8
 8011dd4:	b2db      	uxtb	r3, r3
 8011dd6:	ea03 0407 	and.w	r4, r3, r7
 8011dda:	2202      	movs	r2, #2
 8011ddc:	4607      	mov	r7, r0
 8011dde:	f106 010a 	add.w	r1, r6, #10
 8011de2:	4628      	mov	r0, r5
 8011de4:	f004 fa68 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011de8:	f106 010c 	add.w	r1, r6, #12
 8011dec:	4603      	mov	r3, r0
 8011dee:	4628      	mov	r0, r5
 8011df0:	461d      	mov	r5, r3
 8011df2:	f7fb fd6f 	bl	800d8d4 <ucdr_deserialize_bool>
 8011df6:	403c      	ands	r4, r7
 8011df8:	4025      	ands	r5, r4
 8011dfa:	4028      	ands	r0, r5
 8011dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e00 <uxr_deserialize_STATUS_Payload>:
 8011e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	2202      	movs	r2, #2
 8011e06:	4606      	mov	r6, r0
 8011e08:	460f      	mov	r7, r1
 8011e0a:	f004 fa55 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011e0e:	2202      	movs	r2, #2
 8011e10:	18b9      	adds	r1, r7, r2
 8011e12:	4605      	mov	r5, r0
 8011e14:	4630      	mov	r0, r6
 8011e16:	f004 fa4f 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011e1a:	1d39      	adds	r1, r7, #4
 8011e1c:	4680      	mov	r8, r0
 8011e1e:	4630      	mov	r0, r6
 8011e20:	f7fb fd86 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011e24:	1d79      	adds	r1, r7, #5
 8011e26:	4604      	mov	r4, r0
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f7fb fd81 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011e2e:	ea05 0508 	and.w	r5, r5, r8
 8011e32:	402c      	ands	r4, r5
 8011e34:	4020      	ands	r0, r4
 8011e36:	b2c0      	uxtb	r0, r0
 8011e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e3c <uxr_serialize_INFO_Payload>:
 8011e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e40:	2202      	movs	r2, #2
 8011e42:	460c      	mov	r4, r1
 8011e44:	4605      	mov	r5, r0
 8011e46:	f004 f9d3 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011e4a:	2202      	movs	r2, #2
 8011e4c:	18a1      	adds	r1, r4, r2
 8011e4e:	4680      	mov	r8, r0
 8011e50:	4628      	mov	r0, r5
 8011e52:	f004 f9cd 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011e56:	7921      	ldrb	r1, [r4, #4]
 8011e58:	4607      	mov	r7, r0
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	f7fb fd52 	bl	800d904 <ucdr_serialize_uint8_t>
 8011e60:	7961      	ldrb	r1, [r4, #5]
 8011e62:	4606      	mov	r6, r0
 8011e64:	4628      	mov	r0, r5
 8011e66:	f7fb fd4d 	bl	800d904 <ucdr_serialize_uint8_t>
 8011e6a:	ea08 0807 	and.w	r8, r8, r7
 8011e6e:	ea06 0608 	and.w	r6, r6, r8
 8011e72:	4006      	ands	r6, r0
 8011e74:	7a21      	ldrb	r1, [r4, #8]
 8011e76:	4628      	mov	r0, r5
 8011e78:	f7fb fd16 	bl	800d8a8 <ucdr_serialize_bool>
 8011e7c:	7a23      	ldrb	r3, [r4, #8]
 8011e7e:	b2f7      	uxtb	r7, r6
 8011e80:	4606      	mov	r6, r0
 8011e82:	b96b      	cbnz	r3, 8011ea0 <uxr_serialize_INFO_Payload+0x64>
 8011e84:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011e88:	4628      	mov	r0, r5
 8011e8a:	f7fb fd0d 	bl	800d8a8 <ucdr_serialize_bool>
 8011e8e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011e92:	4030      	ands	r0, r6
 8011e94:	b2c6      	uxtb	r6, r0
 8011e96:	b983      	cbnz	r3, 8011eba <uxr_serialize_INFO_Payload+0x7e>
 8011e98:	ea06 0007 	and.w	r0, r6, r7
 8011e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea0:	7b21      	ldrb	r1, [r4, #12]
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	f7fb fd2e 	bl	800d904 <ucdr_serialize_uint8_t>
 8011ea8:	b188      	cbz	r0, 8011ece <uxr_serialize_INFO_Payload+0x92>
 8011eaa:	f104 010c 	add.w	r1, r4, #12
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f7ff faf2 	bl	8011498 <uxr_serialize_ObjectVariant.part.0>
 8011eb4:	4030      	ands	r0, r6
 8011eb6:	b2c6      	uxtb	r6, r0
 8011eb8:	e7e4      	b.n	8011e84 <uxr_serialize_INFO_Payload+0x48>
 8011eba:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	f7ff fdb2 	bl	8011a28 <uxr_serialize_ActivityInfoVariant>
 8011ec4:	4006      	ands	r6, r0
 8011ec6:	ea06 0007 	and.w	r0, r6, r7
 8011eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ece:	4606      	mov	r6, r0
 8011ed0:	e7d8      	b.n	8011e84 <uxr_serialize_INFO_Payload+0x48>
 8011ed2:	bf00      	nop

08011ed4 <uxr_serialize_READ_DATA_Payload>:
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460e      	mov	r6, r1
 8011edc:	f004 f988 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	18b1      	adds	r1, r6, r2
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	f004 f982 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011eec:	1d31      	adds	r1, r6, #4
 8011eee:	4004      	ands	r4, r0
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	f7ff fe5d 	bl	8011bb0 <uxr_serialize_ReadSpecification>
 8011ef6:	b2e4      	uxtb	r4, r4
 8011ef8:	4020      	ands	r0, r4
 8011efa:	bd70      	pop	{r4, r5, r6, pc}

08011efc <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011efc:	b570      	push	{r4, r5, r6, lr}
 8011efe:	2202      	movs	r2, #2
 8011f00:	4605      	mov	r5, r0
 8011f02:	460e      	mov	r6, r1
 8011f04:	f004 f974 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011f08:	2202      	movs	r2, #2
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	18b1      	adds	r1, r6, r2
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f004 f96e 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011f14:	4020      	ands	r0, r4
 8011f16:	b2c0      	uxtb	r0, r0
 8011f18:	bd70      	pop	{r4, r5, r6, pc}
 8011f1a:	bf00      	nop

08011f1c <uxr_serialize_ACKNACK_Payload>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	460c      	mov	r4, r1
 8011f20:	460e      	mov	r6, r1
 8011f22:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011f26:	4605      	mov	r5, r0
 8011f28:	f7fb fd18 	bl	800d95c <ucdr_serialize_uint16_t>
 8011f2c:	2202      	movs	r2, #2
 8011f2e:	4621      	mov	r1, r4
 8011f30:	4604      	mov	r4, r0
 8011f32:	4628      	mov	r0, r5
 8011f34:	f004 f95c 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 8011f38:	7931      	ldrb	r1, [r6, #4]
 8011f3a:	4004      	ands	r4, r0
 8011f3c:	4628      	mov	r0, r5
 8011f3e:	f7fb fce1 	bl	800d904 <ucdr_serialize_uint8_t>
 8011f42:	b2e4      	uxtb	r4, r4
 8011f44:	4020      	ands	r0, r4
 8011f46:	bd70      	pop	{r4, r5, r6, pc}

08011f48 <uxr_deserialize_ACKNACK_Payload>:
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	460e      	mov	r6, r1
 8011f4e:	f7fb fe05 	bl	800db5c <ucdr_deserialize_uint16_t>
 8011f52:	2202      	movs	r2, #2
 8011f54:	18b1      	adds	r1, r6, r2
 8011f56:	4604      	mov	r4, r0
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f004 f9ad 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8011f5e:	1d31      	adds	r1, r6, #4
 8011f60:	4004      	ands	r4, r0
 8011f62:	4628      	mov	r0, r5
 8011f64:	f7fb fce4 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011f68:	b2e4      	uxtb	r4, r4
 8011f6a:	4020      	ands	r0, r4
 8011f6c:	bd70      	pop	{r4, r5, r6, pc}
 8011f6e:	bf00      	nop

08011f70 <uxr_serialize_HEARTBEAT_Payload>:
 8011f70:	b570      	push	{r4, r5, r6, lr}
 8011f72:	460d      	mov	r5, r1
 8011f74:	8809      	ldrh	r1, [r1, #0]
 8011f76:	4606      	mov	r6, r0
 8011f78:	f7fb fcf0 	bl	800d95c <ucdr_serialize_uint16_t>
 8011f7c:	8869      	ldrh	r1, [r5, #2]
 8011f7e:	4604      	mov	r4, r0
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7fb fceb 	bl	800d95c <ucdr_serialize_uint16_t>
 8011f86:	7929      	ldrb	r1, [r5, #4]
 8011f88:	4004      	ands	r4, r0
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	f7fb fcba 	bl	800d904 <ucdr_serialize_uint8_t>
 8011f90:	b2e4      	uxtb	r4, r4
 8011f92:	4020      	ands	r0, r4
 8011f94:	bd70      	pop	{r4, r5, r6, pc}
 8011f96:	bf00      	nop

08011f98 <uxr_deserialize_HEARTBEAT_Payload>:
 8011f98:	b570      	push	{r4, r5, r6, lr}
 8011f9a:	4605      	mov	r5, r0
 8011f9c:	460e      	mov	r6, r1
 8011f9e:	f7fb fddd 	bl	800db5c <ucdr_deserialize_uint16_t>
 8011fa2:	1cb1      	adds	r1, r6, #2
 8011fa4:	4604      	mov	r4, r0
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	f7fb fdd8 	bl	800db5c <ucdr_deserialize_uint16_t>
 8011fac:	1d31      	adds	r1, r6, #4
 8011fae:	4004      	ands	r4, r0
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	f7fb fcbd 	bl	800d930 <ucdr_deserialize_uint8_t>
 8011fb6:	b2e4      	uxtb	r4, r4
 8011fb8:	4020      	ands	r0, r4
 8011fba:	bd70      	pop	{r4, r5, r6, pc}

08011fbc <uxr_serialize_TIMESTAMP_Payload>:
 8011fbc:	b570      	push	{r4, r5, r6, lr}
 8011fbe:	460d      	mov	r5, r1
 8011fc0:	6809      	ldr	r1, [r1, #0]
 8011fc2:	4606      	mov	r6, r0
 8011fc4:	f7fc fafa 	bl	800e5bc <ucdr_serialize_int32_t>
 8011fc8:	6869      	ldr	r1, [r5, #4]
 8011fca:	4604      	mov	r4, r0
 8011fcc:	4630      	mov	r0, r6
 8011fce:	f7fb feaf 	bl	800dd30 <ucdr_serialize_uint32_t>
 8011fd2:	4020      	ands	r0, r4
 8011fd4:	b2c0      	uxtb	r0, r0
 8011fd6:	bd70      	pop	{r4, r5, r6, pc}

08011fd8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fdc:	4605      	mov	r5, r0
 8011fde:	460e      	mov	r6, r1
 8011fe0:	f7fc fb84 	bl	800e6ec <ucdr_deserialize_int32_t>
 8011fe4:	1d31      	adds	r1, r6, #4
 8011fe6:	4607      	mov	r7, r0
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f7fb ffd1 	bl	800df90 <ucdr_deserialize_uint32_t>
 8011fee:	f106 0108 	add.w	r1, r6, #8
 8011ff2:	4680      	mov	r8, r0
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f7fc fb79 	bl	800e6ec <ucdr_deserialize_int32_t>
 8011ffa:	f106 010c 	add.w	r1, r6, #12
 8011ffe:	4604      	mov	r4, r0
 8012000:	4628      	mov	r0, r5
 8012002:	f7fb ffc5 	bl	800df90 <ucdr_deserialize_uint32_t>
 8012006:	ea07 0708 	and.w	r7, r7, r8
 801200a:	403c      	ands	r4, r7
 801200c:	f106 0110 	add.w	r1, r6, #16
 8012010:	4004      	ands	r4, r0
 8012012:	4628      	mov	r0, r5
 8012014:	f7fc fb6a 	bl	800e6ec <ucdr_deserialize_int32_t>
 8012018:	f106 0114 	add.w	r1, r6, #20
 801201c:	4607      	mov	r7, r0
 801201e:	4628      	mov	r0, r5
 8012020:	f7fb ffb6 	bl	800df90 <ucdr_deserialize_uint32_t>
 8012024:	b2e4      	uxtb	r4, r4
 8012026:	403c      	ands	r4, r7
 8012028:	4020      	ands	r0, r4
 801202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801202e:	bf00      	nop

08012030 <uxr_serialize_SampleIdentity>:
 8012030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012034:	220c      	movs	r2, #12
 8012036:	4604      	mov	r4, r0
 8012038:	460d      	mov	r5, r1
 801203a:	f004 f8d9 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 801203e:	2203      	movs	r2, #3
 8012040:	f105 010c 	add.w	r1, r5, #12
 8012044:	4607      	mov	r7, r0
 8012046:	4620      	mov	r0, r4
 8012048:	f004 f8d2 	bl	80161f0 <ucdr_serialize_array_uint8_t>
 801204c:	7be9      	ldrb	r1, [r5, #15]
 801204e:	4680      	mov	r8, r0
 8012050:	4620      	mov	r0, r4
 8012052:	f7fb fc57 	bl	800d904 <ucdr_serialize_uint8_t>
 8012056:	6929      	ldr	r1, [r5, #16]
 8012058:	4606      	mov	r6, r0
 801205a:	4620      	mov	r0, r4
 801205c:	f7fc faae 	bl	800e5bc <ucdr_serialize_int32_t>
 8012060:	6969      	ldr	r1, [r5, #20]
 8012062:	4603      	mov	r3, r0
 8012064:	4620      	mov	r0, r4
 8012066:	ea07 0708 	and.w	r7, r7, r8
 801206a:	461c      	mov	r4, r3
 801206c:	f7fb fe60 	bl	800dd30 <ucdr_serialize_uint32_t>
 8012070:	403e      	ands	r6, r7
 8012072:	4034      	ands	r4, r6
 8012074:	4020      	ands	r0, r4
 8012076:	b2c0      	uxtb	r0, r0
 8012078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801207c <uxr_deserialize_SampleIdentity>:
 801207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012080:	220c      	movs	r2, #12
 8012082:	4604      	mov	r4, r0
 8012084:	460d      	mov	r5, r1
 8012086:	f004 f917 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 801208a:	2203      	movs	r2, #3
 801208c:	f105 010c 	add.w	r1, r5, #12
 8012090:	4607      	mov	r7, r0
 8012092:	4620      	mov	r0, r4
 8012094:	f004 f910 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8012098:	f105 010f 	add.w	r1, r5, #15
 801209c:	4680      	mov	r8, r0
 801209e:	4620      	mov	r0, r4
 80120a0:	f7fb fc46 	bl	800d930 <ucdr_deserialize_uint8_t>
 80120a4:	f105 0110 	add.w	r1, r5, #16
 80120a8:	4606      	mov	r6, r0
 80120aa:	4620      	mov	r0, r4
 80120ac:	f7fc fb1e 	bl	800e6ec <ucdr_deserialize_int32_t>
 80120b0:	f105 0114 	add.w	r1, r5, #20
 80120b4:	4603      	mov	r3, r0
 80120b6:	4620      	mov	r0, r4
 80120b8:	ea07 0708 	and.w	r7, r7, r8
 80120bc:	461c      	mov	r4, r3
 80120be:	f7fb ff67 	bl	800df90 <ucdr_deserialize_uint32_t>
 80120c2:	403e      	ands	r6, r7
 80120c4:	4034      	ands	r4, r6
 80120c6:	4020      	ands	r0, r4
 80120c8:	b2c0      	uxtb	r0, r0
 80120ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ce:	bf00      	nop

080120d0 <rcl_client_get_rmw_handle>:
 80120d0:	b118      	cbz	r0, 80120da <rcl_client_get_rmw_handle+0xa>
 80120d2:	6800      	ldr	r0, [r0, #0]
 80120d4:	b108      	cbz	r0, 80120da <rcl_client_get_rmw_handle+0xa>
 80120d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80120da:	4770      	bx	lr

080120dc <rcl_send_request>:
 80120dc:	b570      	push	{r4, r5, r6, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	b1e8      	cbz	r0, 801211e <rcl_send_request+0x42>
 80120e2:	4604      	mov	r4, r0
 80120e4:	6800      	ldr	r0, [r0, #0]
 80120e6:	b1d0      	cbz	r0, 801211e <rcl_send_request+0x42>
 80120e8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80120ec:	b1bb      	cbz	r3, 801211e <rcl_send_request+0x42>
 80120ee:	460e      	mov	r6, r1
 80120f0:	b1d1      	cbz	r1, 8012128 <rcl_send_request+0x4c>
 80120f2:	4615      	mov	r5, r2
 80120f4:	b1c2      	cbz	r2, 8012128 <rcl_send_request+0x4c>
 80120f6:	2105      	movs	r1, #5
 80120f8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80120fc:	f002 fda4 	bl	8014c48 <__atomic_load_8>
 8012100:	6823      	ldr	r3, [r4, #0]
 8012102:	e9c5 0100 	strd	r0, r1, [r5]
 8012106:	462a      	mov	r2, r5
 8012108:	4631      	mov	r1, r6
 801210a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801210e:	f003 fc8f 	bl	8015a30 <rmw_send_request>
 8012112:	4606      	mov	r6, r0
 8012114:	b160      	cbz	r0, 8012130 <rcl_send_request+0x54>
 8012116:	2601      	movs	r6, #1
 8012118:	4630      	mov	r0, r6
 801211a:	b002      	add	sp, #8
 801211c:	bd70      	pop	{r4, r5, r6, pc}
 801211e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8012122:	4630      	mov	r0, r6
 8012124:	b002      	add	sp, #8
 8012126:	bd70      	pop	{r4, r5, r6, pc}
 8012128:	260b      	movs	r6, #11
 801212a:	4630      	mov	r0, r6
 801212c:	b002      	add	sp, #8
 801212e:	bd70      	pop	{r4, r5, r6, pc}
 8012130:	6820      	ldr	r0, [r4, #0]
 8012132:	2105      	movs	r1, #5
 8012134:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012138:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801213c:	9100      	str	r1, [sp, #0]
 801213e:	f002 fdef 	bl	8014d20 <__atomic_exchange_8>
 8012142:	4630      	mov	r0, r6
 8012144:	b002      	add	sp, #8
 8012146:	bd70      	pop	{r4, r5, r6, pc}

08012148 <rcl_take_response>:
 8012148:	b570      	push	{r4, r5, r6, lr}
 801214a:	468e      	mov	lr, r1
 801214c:	460c      	mov	r4, r1
 801214e:	4616      	mov	r6, r2
 8012150:	4605      	mov	r5, r0
 8012152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012156:	b08c      	sub	sp, #48	@ 0x30
 8012158:	f10d 0c18 	add.w	ip, sp, #24
 801215c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012160:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012164:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012168:	b35d      	cbz	r5, 80121c2 <rcl_take_response+0x7a>
 801216a:	682b      	ldr	r3, [r5, #0]
 801216c:	b34b      	cbz	r3, 80121c2 <rcl_take_response+0x7a>
 801216e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012172:	b330      	cbz	r0, 80121c2 <rcl_take_response+0x7a>
 8012174:	b346      	cbz	r6, 80121c8 <rcl_take_response+0x80>
 8012176:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80121d0 <rcl_take_response+0x88>
 801217a:	2300      	movs	r3, #0
 801217c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012180:	4632      	mov	r2, r6
 8012182:	f10d 0307 	add.w	r3, sp, #7
 8012186:	a902      	add	r1, sp, #8
 8012188:	ed8d 7b02 	vstr	d7, [sp, #8]
 801218c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012190:	f003 fd56 	bl	8015c40 <rmw_take_response>
 8012194:	4605      	mov	r5, r0
 8012196:	b9c8      	cbnz	r0, 80121cc <rcl_take_response+0x84>
 8012198:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801219c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80121a0:	2a00      	cmp	r2, #0
 80121a2:	bf08      	it	eq
 80121a4:	461d      	moveq	r5, r3
 80121a6:	f10d 0e18 	add.w	lr, sp, #24
 80121aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121ae:	46a4      	mov	ip, r4
 80121b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80121b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80121bc:	4628      	mov	r0, r5
 80121be:	b00c      	add	sp, #48	@ 0x30
 80121c0:	bd70      	pop	{r4, r5, r6, pc}
 80121c2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80121c6:	e7ee      	b.n	80121a6 <rcl_take_response+0x5e>
 80121c8:	250b      	movs	r5, #11
 80121ca:	e7ec      	b.n	80121a6 <rcl_take_response+0x5e>
 80121cc:	2501      	movs	r5, #1
 80121ce:	e7ea      	b.n	80121a6 <rcl_take_response+0x5e>
	...

080121d8 <rcl_client_is_valid>:
 80121d8:	b130      	cbz	r0, 80121e8 <rcl_client_is_valid+0x10>
 80121da:	6800      	ldr	r0, [r0, #0]
 80121dc:	b120      	cbz	r0, 80121e8 <rcl_client_is_valid+0x10>
 80121de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80121e2:	3800      	subs	r0, #0
 80121e4:	bf18      	it	ne
 80121e6:	2001      	movne	r0, #1
 80121e8:	4770      	bx	lr
 80121ea:	bf00      	nop

080121ec <rcl_convert_rmw_ret_to_rcl_ret>:
 80121ec:	280b      	cmp	r0, #11
 80121ee:	dc0d      	bgt.n	801220c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80121f0:	2800      	cmp	r0, #0
 80121f2:	db09      	blt.n	8012208 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80121f4:	280b      	cmp	r0, #11
 80121f6:	d807      	bhi.n	8012208 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80121f8:	e8df f000 	tbb	[pc, r0]
 80121fc:	07060607 	.word	0x07060607
 8012200:	06060606 	.word	0x06060606
 8012204:	07070606 	.word	0x07070606
 8012208:	2001      	movs	r0, #1
 801220a:	4770      	bx	lr
 801220c:	28cb      	cmp	r0, #203	@ 0xcb
 801220e:	bf18      	it	ne
 8012210:	2001      	movne	r0, #1
 8012212:	4770      	bx	lr

08012214 <rcl_get_zero_initialized_context>:
 8012214:	4a03      	ldr	r2, [pc, #12]	@ (8012224 <rcl_get_zero_initialized_context+0x10>)
 8012216:	4603      	mov	r3, r0
 8012218:	e892 0003 	ldmia.w	r2, {r0, r1}
 801221c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012220:	4618      	mov	r0, r3
 8012222:	4770      	bx	lr
 8012224:	08019618 	.word	0x08019618

08012228 <rcl_context_is_valid>:
 8012228:	b118      	cbz	r0, 8012232 <rcl_context_is_valid+0xa>
 801222a:	6840      	ldr	r0, [r0, #4]
 801222c:	3800      	subs	r0, #0
 801222e:	bf18      	it	ne
 8012230:	2001      	movne	r0, #1
 8012232:	4770      	bx	lr

08012234 <__cleanup_context>:
 8012234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012238:	4606      	mov	r6, r0
 801223a:	6800      	ldr	r0, [r0, #0]
 801223c:	2300      	movs	r3, #0
 801223e:	6073      	str	r3, [r6, #4]
 8012240:	2800      	cmp	r0, #0
 8012242:	d049      	beq.n	80122d8 <__cleanup_context+0xa4>
 8012244:	6947      	ldr	r7, [r0, #20]
 8012246:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801224a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801224e:	b137      	cbz	r7, 801225e <__cleanup_context+0x2a>
 8012250:	3014      	adds	r0, #20
 8012252:	f7f8 fee9 	bl	800b028 <rcl_init_options_fini>
 8012256:	4607      	mov	r7, r0
 8012258:	2800      	cmp	r0, #0
 801225a:	d144      	bne.n	80122e6 <__cleanup_context+0xb2>
 801225c:	6830      	ldr	r0, [r6, #0]
 801225e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012260:	b143      	cbz	r3, 8012274 <__cleanup_context+0x40>
 8012262:	3028      	adds	r0, #40	@ 0x28
 8012264:	f7fa fae0 	bl	800c828 <rmw_context_fini>
 8012268:	b118      	cbz	r0, 8012272 <__cleanup_context+0x3e>
 801226a:	2f00      	cmp	r7, #0
 801226c:	d03e      	beq.n	80122ec <__cleanup_context+0xb8>
 801226e:	f7fa f813 	bl	800c298 <rcutils_reset_error>
 8012272:	6830      	ldr	r0, [r6, #0]
 8012274:	6a03      	ldr	r3, [r0, #32]
 8012276:	b1db      	cbz	r3, 80122b0 <__cleanup_context+0x7c>
 8012278:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801227c:	2a01      	cmp	r2, #1
 801227e:	f17c 0100 	sbcs.w	r1, ip, #0
 8012282:	db11      	blt.n	80122a8 <__cleanup_context+0x74>
 8012284:	2400      	movs	r4, #0
 8012286:	4625      	mov	r5, r4
 8012288:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801228c:	4649      	mov	r1, r9
 801228e:	b1b8      	cbz	r0, 80122c0 <__cleanup_context+0x8c>
 8012290:	47c0      	blx	r8
 8012292:	6833      	ldr	r3, [r6, #0]
 8012294:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012298:	3401      	adds	r4, #1
 801229a:	f145 0500 	adc.w	r5, r5, #0
 801229e:	4294      	cmp	r4, r2
 80122a0:	eb75 010c 	sbcs.w	r1, r5, ip
 80122a4:	6a1b      	ldr	r3, [r3, #32]
 80122a6:	dbef      	blt.n	8012288 <__cleanup_context+0x54>
 80122a8:	4618      	mov	r0, r3
 80122aa:	4649      	mov	r1, r9
 80122ac:	47c0      	blx	r8
 80122ae:	6830      	ldr	r0, [r6, #0]
 80122b0:	4649      	mov	r1, r9
 80122b2:	47c0      	blx	r8
 80122b4:	2300      	movs	r3, #0
 80122b6:	e9c6 3300 	strd	r3, r3, [r6]
 80122ba:	4638      	mov	r0, r7
 80122bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122c0:	3401      	adds	r4, #1
 80122c2:	f145 0500 	adc.w	r5, r5, #0
 80122c6:	4294      	cmp	r4, r2
 80122c8:	eb75 010c 	sbcs.w	r1, r5, ip
 80122cc:	dbdc      	blt.n	8012288 <__cleanup_context+0x54>
 80122ce:	4618      	mov	r0, r3
 80122d0:	4649      	mov	r1, r9
 80122d2:	47c0      	blx	r8
 80122d4:	6830      	ldr	r0, [r6, #0]
 80122d6:	e7eb      	b.n	80122b0 <__cleanup_context+0x7c>
 80122d8:	4607      	mov	r7, r0
 80122da:	2300      	movs	r3, #0
 80122dc:	e9c6 3300 	strd	r3, r3, [r6]
 80122e0:	4638      	mov	r0, r7
 80122e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122e6:	f7f9 ffd7 	bl	800c298 <rcutils_reset_error>
 80122ea:	e7b7      	b.n	801225c <__cleanup_context+0x28>
 80122ec:	f7ff ff7e 	bl	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 80122f0:	4607      	mov	r7, r0
 80122f2:	e7bc      	b.n	801226e <__cleanup_context+0x3a>

080122f4 <rcl_init>:
 80122f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122f8:	1e05      	subs	r5, r0, #0
 80122fa:	b09e      	sub	sp, #120	@ 0x78
 80122fc:	460e      	mov	r6, r1
 80122fe:	4690      	mov	r8, r2
 8012300:	461f      	mov	r7, r3
 8012302:	f340 809c 	ble.w	801243e <rcl_init+0x14a>
 8012306:	2900      	cmp	r1, #0
 8012308:	f000 809c 	beq.w	8012444 <rcl_init+0x150>
 801230c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012310:	f04f 0c00 	mov.w	ip, #0
 8012314:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012318:	f10c 0c01 	add.w	ip, ip, #1
 801231c:	2c00      	cmp	r4, #0
 801231e:	f000 8091 	beq.w	8012444 <rcl_init+0x150>
 8012322:	4565      	cmp	r5, ip
 8012324:	d1f6      	bne.n	8012314 <rcl_init+0x20>
 8012326:	f1b8 0f00 	cmp.w	r8, #0
 801232a:	f000 808b 	beq.w	8012444 <rcl_init+0x150>
 801232e:	f8d8 4000 	ldr.w	r4, [r8]
 8012332:	2c00      	cmp	r4, #0
 8012334:	f000 8086 	beq.w	8012444 <rcl_init+0x150>
 8012338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801233a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801233e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012342:	6823      	ldr	r3, [r4, #0]
 8012344:	f8cc 3000 	str.w	r3, [ip]
 8012348:	a819      	add	r0, sp, #100	@ 0x64
 801234a:	f7f9 ff7f 	bl	800c24c <rcutils_allocator_is_valid>
 801234e:	2800      	cmp	r0, #0
 8012350:	d078      	beq.n	8012444 <rcl_init+0x150>
 8012352:	2f00      	cmp	r7, #0
 8012354:	d076      	beq.n	8012444 <rcl_init+0x150>
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d178      	bne.n	801244e <rcl_init+0x15a>
 801235c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012360:	2178      	movs	r1, #120	@ 0x78
 8012362:	2001      	movs	r0, #1
 8012364:	4798      	blx	r3
 8012366:	4604      	mov	r4, r0
 8012368:	6038      	str	r0, [r7, #0]
 801236a:	2800      	cmp	r0, #0
 801236c:	f000 80b6 	beq.w	80124dc <rcl_init+0x1e8>
 8012370:	a802      	add	r0, sp, #8
 8012372:	f002 ffb9 	bl	80152e8 <rmw_get_zero_initialized_context>
 8012376:	a902      	add	r1, sp, #8
 8012378:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801237c:	2250      	movs	r2, #80	@ 0x50
 801237e:	ac19      	add	r4, sp, #100	@ 0x64
 8012380:	f005 fe39 	bl	8017ff6 <memcpy>
 8012384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012386:	f8d7 e000 	ldr.w	lr, [r7]
 801238a:	46f4      	mov	ip, lr
 801238c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012390:	6823      	ldr	r3, [r4, #0]
 8012392:	f8cc 3000 	str.w	r3, [ip]
 8012396:	f10e 0114 	add.w	r1, lr, #20
 801239a:	4640      	mov	r0, r8
 801239c:	f7f8 fe6e 	bl	800b07c <rcl_init_options_copy>
 80123a0:	4604      	mov	r4, r0
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d144      	bne.n	8012430 <rcl_init+0x13c>
 80123a6:	f8d7 9000 	ldr.w	r9, [r7]
 80123aa:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80123ae:	f8c9 0020 	str.w	r0, [r9, #32]
 80123b2:	f8c9 5018 	str.w	r5, [r9, #24]
 80123b6:	f8c9 801c 	str.w	r8, [r9, #28]
 80123ba:	2d00      	cmp	r5, #0
 80123bc:	d04e      	beq.n	801245c <rcl_init+0x168>
 80123be:	2e00      	cmp	r6, #0
 80123c0:	d04c      	beq.n	801245c <rcl_init+0x168>
 80123c2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80123c6:	2104      	movs	r1, #4
 80123c8:	4628      	mov	r0, r5
 80123ca:	4798      	blx	r3
 80123cc:	f8c9 0020 	str.w	r0, [r9, #32]
 80123d0:	f8d7 9000 	ldr.w	r9, [r7]
 80123d4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80123d8:	46ca      	mov	sl, r9
 80123da:	b343      	cbz	r3, 801242e <rcl_init+0x13a>
 80123dc:	2d01      	cmp	r5, #1
 80123de:	f178 0300 	sbcs.w	r3, r8, #0
 80123e2:	db3b      	blt.n	801245c <rcl_init+0x168>
 80123e4:	2400      	movs	r4, #0
 80123e6:	3e04      	subs	r6, #4
 80123e8:	46a1      	mov	r9, r4
 80123ea:	e00b      	b.n	8012404 <rcl_init+0x110>
 80123ec:	6831      	ldr	r1, [r6, #0]
 80123ee:	f005 fe02 	bl	8017ff6 <memcpy>
 80123f2:	3401      	adds	r4, #1
 80123f4:	f149 0900 	adc.w	r9, r9, #0
 80123f8:	45c8      	cmp	r8, r9
 80123fa:	bf08      	it	eq
 80123fc:	42a5      	cmpeq	r5, r4
 80123fe:	d02b      	beq.n	8012458 <rcl_init+0x164>
 8012400:	f8d7 a000 	ldr.w	sl, [r7]
 8012404:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012408:	f7ed ff14 	bl	8000234 <strlen>
 801240c:	1c42      	adds	r2, r0, #1
 801240e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012410:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8012412:	f8da a020 	ldr.w	sl, [sl, #32]
 8012416:	9201      	str	r2, [sp, #4]
 8012418:	4610      	mov	r0, r2
 801241a:	4798      	blx	r3
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012422:	6a1b      	ldr	r3, [r3, #32]
 8012424:	9a01      	ldr	r2, [sp, #4]
 8012426:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801242a:	2800      	cmp	r0, #0
 801242c:	d1de      	bne.n	80123ec <rcl_init+0xf8>
 801242e:	240a      	movs	r4, #10
 8012430:	4638      	mov	r0, r7
 8012432:	f7ff feff 	bl	8012234 <__cleanup_context>
 8012436:	4620      	mov	r0, r4
 8012438:	b01e      	add	sp, #120	@ 0x78
 801243a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801243e:	2900      	cmp	r1, #0
 8012440:	f43f af71 	beq.w	8012326 <rcl_init+0x32>
 8012444:	240b      	movs	r4, #11
 8012446:	4620      	mov	r0, r4
 8012448:	b01e      	add	sp, #120	@ 0x78
 801244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801244e:	2464      	movs	r4, #100	@ 0x64
 8012450:	4620      	mov	r0, r4
 8012452:	b01e      	add	sp, #120	@ 0x78
 8012454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012458:	f8d7 9000 	ldr.w	r9, [r7]
 801245c:	4926      	ldr	r1, [pc, #152]	@ (80124f8 <rcl_init+0x204>)
 801245e:	680b      	ldr	r3, [r1, #0]
 8012460:	3301      	adds	r3, #1
 8012462:	d036      	beq.n	80124d2 <rcl_init+0x1de>
 8012464:	600b      	str	r3, [r1, #0]
 8012466:	461a      	mov	r2, r3
 8012468:	2400      	movs	r4, #0
 801246a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801246e:	607b      	str	r3, [r7, #4]
 8012470:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012472:	3301      	adds	r3, #1
 8012474:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012478:	d034      	beq.n	80124e4 <rcl_init+0x1f0>
 801247a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801247e:	b93b      	cbnz	r3, 8012490 <rcl_init+0x19c>
 8012480:	3030      	adds	r0, #48	@ 0x30
 8012482:	f000 f83b 	bl	80124fc <rcl_get_localhost_only>
 8012486:	4604      	mov	r4, r0
 8012488:	2800      	cmp	r0, #0
 801248a:	d1d1      	bne.n	8012430 <rcl_init+0x13c>
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	6958      	ldr	r0, [r3, #20]
 8012490:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8012492:	aa18      	add	r2, sp, #96	@ 0x60
 8012494:	a917      	add	r1, sp, #92	@ 0x5c
 8012496:	f001 f871 	bl	801357c <rcl_validate_enclave_name>
 801249a:	4604      	mov	r4, r0
 801249c:	2800      	cmp	r0, #0
 801249e:	d1c7      	bne.n	8012430 <rcl_init+0x13c>
 80124a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80124a2:	b9eb      	cbnz	r3, 80124e0 <rcl_init+0x1ec>
 80124a4:	6839      	ldr	r1, [r7, #0]
 80124a6:	694b      	ldr	r3, [r1, #20]
 80124a8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80124aa:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80124ae:	f000 fb3f 	bl	8012b30 <rcl_get_security_options_from_environment>
 80124b2:	4604      	mov	r4, r0
 80124b4:	2800      	cmp	r0, #0
 80124b6:	d1bb      	bne.n	8012430 <rcl_init+0x13c>
 80124b8:	6839      	ldr	r1, [r7, #0]
 80124ba:	6948      	ldr	r0, [r1, #20]
 80124bc:	3128      	adds	r1, #40	@ 0x28
 80124be:	3018      	adds	r0, #24
 80124c0:	f7fa f87c 	bl	800c5bc <rmw_init>
 80124c4:	4604      	mov	r4, r0
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d0bd      	beq.n	8012446 <rcl_init+0x152>
 80124ca:	f7ff fe8f 	bl	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 80124ce:	4604      	mov	r4, r0
 80124d0:	e7ae      	b.n	8012430 <rcl_init+0x13c>
 80124d2:	2201      	movs	r2, #1
 80124d4:	461c      	mov	r4, r3
 80124d6:	600a      	str	r2, [r1, #0]
 80124d8:	4613      	mov	r3, r2
 80124da:	e7c6      	b.n	801246a <rcl_init+0x176>
 80124dc:	240a      	movs	r4, #10
 80124de:	e7b2      	b.n	8012446 <rcl_init+0x152>
 80124e0:	2401      	movs	r4, #1
 80124e2:	e7a5      	b.n	8012430 <rcl_init+0x13c>
 80124e4:	3024      	adds	r0, #36	@ 0x24
 80124e6:	f004 fd23 	bl	8016f30 <rcl_get_default_domain_id>
 80124ea:	4604      	mov	r4, r0
 80124ec:	2800      	cmp	r0, #0
 80124ee:	d19f      	bne.n	8012430 <rcl_init+0x13c>
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	6958      	ldr	r0, [r3, #20]
 80124f4:	e7c1      	b.n	801247a <rcl_init+0x186>
 80124f6:	bf00      	nop
 80124f8:	2000cb78 	.word	0x2000cb78

080124fc <rcl_get_localhost_only>:
 80124fc:	b510      	push	{r4, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	2300      	movs	r3, #0
 8012502:	9301      	str	r3, [sp, #4]
 8012504:	b1b8      	cbz	r0, 8012536 <rcl_get_localhost_only+0x3a>
 8012506:	4604      	mov	r4, r0
 8012508:	a901      	add	r1, sp, #4
 801250a:	480c      	ldr	r0, [pc, #48]	@ (801253c <rcl_get_localhost_only+0x40>)
 801250c:	f002 fc40 	bl	8014d90 <rcutils_get_env>
 8012510:	b110      	cbz	r0, 8012518 <rcl_get_localhost_only+0x1c>
 8012512:	2001      	movs	r0, #1
 8012514:	b002      	add	sp, #8
 8012516:	bd10      	pop	{r4, pc}
 8012518:	9b01      	ldr	r3, [sp, #4]
 801251a:	b113      	cbz	r3, 8012522 <rcl_get_localhost_only+0x26>
 801251c:	781a      	ldrb	r2, [r3, #0]
 801251e:	2a31      	cmp	r2, #49	@ 0x31
 8012520:	d004      	beq.n	801252c <rcl_get_localhost_only+0x30>
 8012522:	2302      	movs	r3, #2
 8012524:	2000      	movs	r0, #0
 8012526:	7023      	strb	r3, [r4, #0]
 8012528:	b002      	add	sp, #8
 801252a:	bd10      	pop	{r4, pc}
 801252c:	785b      	ldrb	r3, [r3, #1]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1f7      	bne.n	8012522 <rcl_get_localhost_only+0x26>
 8012532:	2301      	movs	r3, #1
 8012534:	e7f6      	b.n	8012524 <rcl_get_localhost_only+0x28>
 8012536:	200b      	movs	r0, #11
 8012538:	b002      	add	sp, #8
 801253a:	bd10      	pop	{r4, pc}
 801253c:	08019620 	.word	0x08019620

08012540 <rcl_get_zero_initialized_node>:
 8012540:	4a03      	ldr	r2, [pc, #12]	@ (8012550 <rcl_get_zero_initialized_node+0x10>)
 8012542:	4603      	mov	r3, r0
 8012544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012548:	e883 0003 	stmia.w	r3, {r0, r1}
 801254c:	4618      	mov	r0, r3
 801254e:	4770      	bx	lr
 8012550:	0801963c 	.word	0x0801963c

08012554 <rcl_node_init>:
 8012554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012558:	b0a9      	sub	sp, #164	@ 0xa4
 801255a:	4604      	mov	r4, r0
 801255c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012560:	a823      	add	r0, sp, #140	@ 0x8c
 8012562:	460e      	mov	r6, r1
 8012564:	4615      	mov	r5, r2
 8012566:	461f      	mov	r7, r3
 8012568:	f004 ff56 	bl	8017418 <rcl_guard_condition_get_default_options>
 801256c:	f1b8 0f00 	cmp.w	r8, #0
 8012570:	f000 80e6 	beq.w	8012740 <rcl_node_init+0x1ec>
 8012574:	4640      	mov	r0, r8
 8012576:	f7f9 fe69 	bl	800c24c <rcutils_allocator_is_valid>
 801257a:	2800      	cmp	r0, #0
 801257c:	f000 80e0 	beq.w	8012740 <rcl_node_init+0x1ec>
 8012580:	2e00      	cmp	r6, #0
 8012582:	f000 80dd 	beq.w	8012740 <rcl_node_init+0x1ec>
 8012586:	2d00      	cmp	r5, #0
 8012588:	f000 80da 	beq.w	8012740 <rcl_node_init+0x1ec>
 801258c:	2c00      	cmp	r4, #0
 801258e:	f000 80d7 	beq.w	8012740 <rcl_node_init+0x1ec>
 8012592:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012596:	f1b9 0f00 	cmp.w	r9, #0
 801259a:	f040 80fd 	bne.w	8012798 <rcl_node_init+0x244>
 801259e:	2f00      	cmp	r7, #0
 80125a0:	f000 80ce 	beq.w	8012740 <rcl_node_init+0x1ec>
 80125a4:	4638      	mov	r0, r7
 80125a6:	f7ff fe3f 	bl	8012228 <rcl_context_is_valid>
 80125aa:	4682      	mov	sl, r0
 80125ac:	2800      	cmp	r0, #0
 80125ae:	f000 80cd 	beq.w	801274c <rcl_node_init+0x1f8>
 80125b2:	464a      	mov	r2, r9
 80125b4:	a922      	add	r1, sp, #136	@ 0x88
 80125b6:	4630      	mov	r0, r6
 80125b8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80125bc:	f003 f812 	bl	80155e4 <rmw_validate_node_name>
 80125c0:	4681      	mov	r9, r0
 80125c2:	2800      	cmp	r0, #0
 80125c4:	f040 80be 	bne.w	8012744 <rcl_node_init+0x1f0>
 80125c8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80125ca:	2800      	cmp	r0, #0
 80125cc:	f040 80f0 	bne.w	80127b0 <rcl_node_init+0x25c>
 80125d0:	4628      	mov	r0, r5
 80125d2:	f7ed fe2f 	bl	8000234 <strlen>
 80125d6:	2800      	cmp	r0, #0
 80125d8:	f040 80bb 	bne.w	8012752 <rcl_node_init+0x1fe>
 80125dc:	4d7c      	ldr	r5, [pc, #496]	@ (80127d0 <rcl_node_init+0x27c>)
 80125de:	a922      	add	r1, sp, #136	@ 0x88
 80125e0:	2200      	movs	r2, #0
 80125e2:	4628      	mov	r0, r5
 80125e4:	f002 ffe0 	bl	80155a8 <rmw_validate_namespace>
 80125e8:	4681      	mov	r9, r0
 80125ea:	2800      	cmp	r0, #0
 80125ec:	f040 80aa 	bne.w	8012744 <rcl_node_init+0x1f0>
 80125f0:	4682      	mov	sl, r0
 80125f2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80125f4:	2800      	cmp	r0, #0
 80125f6:	f040 80e0 	bne.w	80127ba <rcl_node_init+0x266>
 80125fa:	f8d8 3000 	ldr.w	r3, [r8]
 80125fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012602:	2078      	movs	r0, #120	@ 0x78
 8012604:	4798      	blx	r3
 8012606:	4681      	mov	r9, r0
 8012608:	6060      	str	r0, [r4, #4]
 801260a:	2800      	cmp	r0, #0
 801260c:	f000 80ca 	beq.w	80127a4 <rcl_node_init+0x250>
 8012610:	2200      	movs	r2, #0
 8012612:	2300      	movs	r3, #0
 8012614:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8012618:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 801261c:	a808      	add	r0, sp, #32
 801261e:	f000 f907 	bl	8012830 <rcl_node_get_default_options>
 8012622:	a908      	add	r1, sp, #32
 8012624:	4648      	mov	r0, r9
 8012626:	2268      	movs	r2, #104	@ 0x68
 8012628:	f005 fce5 	bl	8017ff6 <memcpy>
 801262c:	6861      	ldr	r1, [r4, #4]
 801262e:	6027      	str	r7, [r4, #0]
 8012630:	4640      	mov	r0, r8
 8012632:	f000 f90b 	bl	801284c <rcl_node_options_copy>
 8012636:	2800      	cmp	r0, #0
 8012638:	d158      	bne.n	80126ec <rcl_node_init+0x198>
 801263a:	4628      	mov	r0, r5
 801263c:	f7ed fdfa 	bl	8000234 <strlen>
 8012640:	4428      	add	r0, r5
 8012642:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012646:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801264a:	2b2f      	cmp	r3, #47	@ 0x2f
 801264c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012650:	9300      	str	r3, [sp, #0]
 8012652:	bf0c      	ite	eq
 8012654:	4b5f      	ldreq	r3, [pc, #380]	@ (80127d4 <rcl_node_init+0x280>)
 8012656:	4b60      	ldrne	r3, [pc, #384]	@ (80127d8 <rcl_node_init+0x284>)
 8012658:	9302      	str	r3, [sp, #8]
 801265a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801265e:	9301      	str	r3, [sp, #4]
 8012660:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012664:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012668:	f002 fbba 	bl	8014de0 <rcutils_format_string_limit>
 801266c:	6823      	ldr	r3, [r4, #0]
 801266e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8012672:	6818      	ldr	r0, [r3, #0]
 8012674:	4631      	mov	r1, r6
 8012676:	3028      	adds	r0, #40	@ 0x28
 8012678:	462a      	mov	r2, r5
 801267a:	6866      	ldr	r6, [r4, #4]
 801267c:	f7fa f980 	bl	800c980 <rmw_create_node>
 8012680:	6863      	ldr	r3, [r4, #4]
 8012682:	66b0      	str	r0, [r6, #104]	@ 0x68
 8012684:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012686:	2800      	cmp	r0, #0
 8012688:	d032      	beq.n	80126f0 <rcl_node_init+0x19c>
 801268a:	f7fa fa0d 	bl	800caa8 <rmw_node_get_graph_guard_condition>
 801268e:	4681      	mov	r9, r0
 8012690:	b360      	cbz	r0, 80126ec <rcl_node_init+0x198>
 8012692:	f8d8 3000 	ldr.w	r3, [r8]
 8012696:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801269a:	6866      	ldr	r6, [r4, #4]
 801269c:	2008      	movs	r0, #8
 801269e:	4798      	blx	r3
 80126a0:	6863      	ldr	r3, [r4, #4]
 80126a2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80126a4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80126a8:	f1bb 0f00 	cmp.w	fp, #0
 80126ac:	d020      	beq.n	80126f0 <rcl_node_init+0x19c>
 80126ae:	a806      	add	r0, sp, #24
 80126b0:	f004 fdd6 	bl	8017260 <rcl_get_zero_initialized_guard_condition>
 80126b4:	a806      	add	r0, sp, #24
 80126b6:	c803      	ldmia	r0, {r0, r1}
 80126b8:	6863      	ldr	r3, [r4, #4]
 80126ba:	46c4      	mov	ip, r8
 80126bc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80126c0:	e88b 0003 	stmia.w	fp, {r0, r1}
 80126c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126c8:	ae23      	add	r6, sp, #140	@ 0x8c
 80126ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80126cc:	f8dc 3000 	ldr.w	r3, [ip]
 80126d0:	6033      	str	r3, [r6, #0]
 80126d2:	ab28      	add	r3, sp, #160	@ 0xa0
 80126d4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80126d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80126dc:	4649      	mov	r1, r9
 80126de:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80126e0:	463a      	mov	r2, r7
 80126e2:	4670      	mov	r0, lr
 80126e4:	f004 fe12 	bl	801730c <rcl_guard_condition_init_from_rmw>
 80126e8:	4681      	mov	r9, r0
 80126ea:	b328      	cbz	r0, 8012738 <rcl_node_init+0x1e4>
 80126ec:	6863      	ldr	r3, [r4, #4]
 80126ee:	b1f3      	cbz	r3, 801272e <rcl_node_init+0x1da>
 80126f0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80126f2:	b128      	cbz	r0, 8012700 <rcl_node_init+0x1ac>
 80126f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80126f8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80126fc:	4798      	blx	r3
 80126fe:	6863      	ldr	r3, [r4, #4]
 8012700:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012702:	b110      	cbz	r0, 801270a <rcl_node_init+0x1b6>
 8012704:	f7fa f954 	bl	800c9b0 <rmw_destroy_node>
 8012708:	6863      	ldr	r3, [r4, #4]
 801270a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801270c:	b148      	cbz	r0, 8012722 <rcl_node_init+0x1ce>
 801270e:	f004 fe5d 	bl	80173cc <rcl_guard_condition_fini>
 8012712:	6863      	ldr	r3, [r4, #4]
 8012714:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012718:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801271a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801271e:	4798      	blx	r3
 8012720:	6863      	ldr	r3, [r4, #4]
 8012722:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012726:	4618      	mov	r0, r3
 8012728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801272c:	4798      	blx	r3
 801272e:	2300      	movs	r3, #0
 8012730:	e9c4 3300 	strd	r3, r3, [r4]
 8012734:	f04f 0901 	mov.w	r9, #1
 8012738:	f1ba 0f00 	cmp.w	sl, #0
 801273c:	d125      	bne.n	801278a <rcl_node_init+0x236>
 801273e:	e001      	b.n	8012744 <rcl_node_init+0x1f0>
 8012740:	f04f 090b 	mov.w	r9, #11
 8012744:	4648      	mov	r0, r9
 8012746:	b029      	add	sp, #164	@ 0xa4
 8012748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801274c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012750:	e7f8      	b.n	8012744 <rcl_node_init+0x1f0>
 8012752:	782b      	ldrb	r3, [r5, #0]
 8012754:	2b2f      	cmp	r3, #47	@ 0x2f
 8012756:	f43f af42 	beq.w	80125de <rcl_node_init+0x8a>
 801275a:	9503      	str	r5, [sp, #12]
 801275c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012760:	9300      	str	r3, [sp, #0]
 8012762:	4b1e      	ldr	r3, [pc, #120]	@ (80127dc <rcl_node_init+0x288>)
 8012764:	9302      	str	r3, [sp, #8]
 8012766:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801276a:	9301      	str	r3, [sp, #4]
 801276c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012770:	f002 fb36 	bl	8014de0 <rcutils_format_string_limit>
 8012774:	4605      	mov	r5, r0
 8012776:	b340      	cbz	r0, 80127ca <rcl_node_init+0x276>
 8012778:	2200      	movs	r2, #0
 801277a:	a922      	add	r1, sp, #136	@ 0x88
 801277c:	9222      	str	r2, [sp, #136]	@ 0x88
 801277e:	f002 ff13 	bl	80155a8 <rmw_validate_namespace>
 8012782:	4681      	mov	r9, r0
 8012784:	2800      	cmp	r0, #0
 8012786:	f43f af34 	beq.w	80125f2 <rcl_node_init+0x9e>
 801278a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801278e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012792:	4628      	mov	r0, r5
 8012794:	4798      	blx	r3
 8012796:	e7d5      	b.n	8012744 <rcl_node_init+0x1f0>
 8012798:	f04f 0964 	mov.w	r9, #100	@ 0x64
 801279c:	4648      	mov	r0, r9
 801279e:	b029      	add	sp, #164	@ 0xa4
 80127a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a4:	f04f 090a 	mov.w	r9, #10
 80127a8:	f1ba 0f00 	cmp.w	sl, #0
 80127ac:	d1ed      	bne.n	801278a <rcl_node_init+0x236>
 80127ae:	e7c9      	b.n	8012744 <rcl_node_init+0x1f0>
 80127b0:	f002 ff6a 	bl	8015688 <rmw_node_name_validation_result_string>
 80127b4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80127b8:	e7c4      	b.n	8012744 <rcl_node_init+0x1f0>
 80127ba:	f002 ff07 	bl	80155cc <rmw_namespace_validation_result_string>
 80127be:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80127c2:	f1ba 0f00 	cmp.w	sl, #0
 80127c6:	d1e0      	bne.n	801278a <rcl_node_init+0x236>
 80127c8:	e7bc      	b.n	8012744 <rcl_node_init+0x1f0>
 80127ca:	f04f 090a 	mov.w	r9, #10
 80127ce:	e7b9      	b.n	8012744 <rcl_node_init+0x1f0>
 80127d0:	08019088 	.word	0x08019088
 80127d4:	080190d4 	.word	0x080190d4
 80127d8:	0801908c 	.word	0x0801908c
 80127dc:	08019638 	.word	0x08019638

080127e0 <rcl_node_is_valid>:
 80127e0:	b130      	cbz	r0, 80127f0 <rcl_node_is_valid+0x10>
 80127e2:	6843      	ldr	r3, [r0, #4]
 80127e4:	b123      	cbz	r3, 80127f0 <rcl_node_is_valid+0x10>
 80127e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80127e8:	b113      	cbz	r3, 80127f0 <rcl_node_is_valid+0x10>
 80127ea:	6800      	ldr	r0, [r0, #0]
 80127ec:	f7ff bd1c 	b.w	8012228 <rcl_context_is_valid>
 80127f0:	2000      	movs	r0, #0
 80127f2:	4770      	bx	lr

080127f4 <rcl_node_get_name>:
 80127f4:	b120      	cbz	r0, 8012800 <rcl_node_get_name+0xc>
 80127f6:	6840      	ldr	r0, [r0, #4]
 80127f8:	b110      	cbz	r0, 8012800 <rcl_node_get_name+0xc>
 80127fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80127fc:	b100      	cbz	r0, 8012800 <rcl_node_get_name+0xc>
 80127fe:	6880      	ldr	r0, [r0, #8]
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop

08012804 <rcl_node_get_namespace>:
 8012804:	b120      	cbz	r0, 8012810 <rcl_node_get_namespace+0xc>
 8012806:	6840      	ldr	r0, [r0, #4]
 8012808:	b110      	cbz	r0, 8012810 <rcl_node_get_namespace+0xc>
 801280a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801280c:	b100      	cbz	r0, 8012810 <rcl_node_get_namespace+0xc>
 801280e:	68c0      	ldr	r0, [r0, #12]
 8012810:	4770      	bx	lr
 8012812:	bf00      	nop

08012814 <rcl_node_get_options>:
 8012814:	b128      	cbz	r0, 8012822 <rcl_node_get_options+0xe>
 8012816:	6840      	ldr	r0, [r0, #4]
 8012818:	b118      	cbz	r0, 8012822 <rcl_node_get_options+0xe>
 801281a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801281c:	2b00      	cmp	r3, #0
 801281e:	bf08      	it	eq
 8012820:	2000      	moveq	r0, #0
 8012822:	4770      	bx	lr

08012824 <rcl_node_get_rmw_handle>:
 8012824:	b110      	cbz	r0, 801282c <rcl_node_get_rmw_handle+0x8>
 8012826:	6840      	ldr	r0, [r0, #4]
 8012828:	b100      	cbz	r0, 801282c <rcl_node_get_rmw_handle+0x8>
 801282a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801282c:	4770      	bx	lr
 801282e:	bf00      	nop

08012830 <rcl_node_get_default_options>:
 8012830:	b510      	push	{r4, lr}
 8012832:	2268      	movs	r2, #104	@ 0x68
 8012834:	4604      	mov	r4, r0
 8012836:	2100      	movs	r1, #0
 8012838:	f005 fb14 	bl	8017e64 <memset>
 801283c:	4620      	mov	r0, r4
 801283e:	f7f9 fcf7 	bl	800c230 <rcutils_get_default_allocator>
 8012842:	2301      	movs	r3, #1
 8012844:	7523      	strb	r3, [r4, #20]
 8012846:	4620      	mov	r0, r4
 8012848:	bd10      	pop	{r4, pc}
 801284a:	bf00      	nop

0801284c <rcl_node_options_copy>:
 801284c:	b1d0      	cbz	r0, 8012884 <rcl_node_options_copy+0x38>
 801284e:	b570      	push	{r4, r5, r6, lr}
 8012850:	460c      	mov	r4, r1
 8012852:	b1a9      	cbz	r1, 8012880 <rcl_node_options_copy+0x34>
 8012854:	4288      	cmp	r0, r1
 8012856:	4684      	mov	ip, r0
 8012858:	d012      	beq.n	8012880 <rcl_node_options_copy+0x34>
 801285a:	4605      	mov	r5, r0
 801285c:	8a86      	ldrh	r6, [r0, #20]
 801285e:	468e      	mov	lr, r1
 8012860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012862:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012866:	682b      	ldr	r3, [r5, #0]
 8012868:	f8ce 3000 	str.w	r3, [lr]
 801286c:	f10c 0118 	add.w	r1, ip, #24
 8012870:	2250      	movs	r2, #80	@ 0x50
 8012872:	82a6      	strh	r6, [r4, #20]
 8012874:	f104 0018 	add.w	r0, r4, #24
 8012878:	f005 fbbd 	bl	8017ff6 <memcpy>
 801287c:	2000      	movs	r0, #0
 801287e:	bd70      	pop	{r4, r5, r6, pc}
 8012880:	200b      	movs	r0, #11
 8012882:	bd70      	pop	{r4, r5, r6, pc}
 8012884:	200b      	movs	r0, #11
 8012886:	4770      	bx	lr

08012888 <rcl_node_resolve_name>:
 8012888:	b082      	sub	sp, #8
 801288a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801288e:	b091      	sub	sp, #68	@ 0x44
 8012890:	ac1a      	add	r4, sp, #104	@ 0x68
 8012892:	e884 000c 	stmia.w	r4, {r2, r3}
 8012896:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801289a:	2800      	cmp	r0, #0
 801289c:	d03b      	beq.n	8012916 <rcl_node_resolve_name+0x8e>
 801289e:	460c      	mov	r4, r1
 80128a0:	4605      	mov	r5, r0
 80128a2:	f7ff ffb7 	bl	8012814 <rcl_node_get_options>
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d037      	beq.n	801291a <rcl_node_resolve_name+0x92>
 80128aa:	4628      	mov	r0, r5
 80128ac:	f7ff ffa2 	bl	80127f4 <rcl_node_get_name>
 80128b0:	4606      	mov	r6, r0
 80128b2:	4628      	mov	r0, r5
 80128b4:	f7ff ffa6 	bl	8012804 <rcl_node_get_namespace>
 80128b8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80128bc:	4681      	mov	r9, r0
 80128be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128c2:	ad0b      	add	r5, sp, #44	@ 0x2c
 80128c4:	46ac      	mov	ip, r5
 80128c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128ca:	f8de 3000 	ldr.w	r3, [lr]
 80128ce:	f8cc 3000 	str.w	r3, [ip]
 80128d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80128d4:	b1fb      	cbz	r3, 8012916 <rcl_node_resolve_name+0x8e>
 80128d6:	468a      	mov	sl, r1
 80128d8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80128dc:	f002 fbd8 	bl	8015090 <rcutils_get_zero_initialized_string_map>
 80128e0:	ab10      	add	r3, sp, #64	@ 0x40
 80128e2:	9008      	str	r0, [sp, #32]
 80128e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80128e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80128ec:	2100      	movs	r1, #0
 80128ee:	e895 000c 	ldmia.w	r5, {r2, r3}
 80128f2:	a808      	add	r0, sp, #32
 80128f4:	f002 fc44 	bl	8015180 <rcutils_string_map_init>
 80128f8:	4607      	mov	r7, r0
 80128fa:	b180      	cbz	r0, 801291e <rcl_node_resolve_name+0x96>
 80128fc:	f7f9 fcb4 	bl	800c268 <rcutils_get_error_string>
 8012900:	f7f9 fcca 	bl	800c298 <rcutils_reset_error>
 8012904:	2f0a      	cmp	r7, #10
 8012906:	bf18      	it	ne
 8012908:	2701      	movne	r7, #1
 801290a:	4638      	mov	r0, r7
 801290c:	b011      	add	sp, #68	@ 0x44
 801290e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012912:	b002      	add	sp, #8
 8012914:	4770      	bx	lr
 8012916:	270b      	movs	r7, #11
 8012918:	e7f7      	b.n	801290a <rcl_node_resolve_name+0x82>
 801291a:	2701      	movs	r7, #1
 801291c:	e7f5      	b.n	801290a <rcl_node_resolve_name+0x82>
 801291e:	9009      	str	r0, [sp, #36]	@ 0x24
 8012920:	9007      	str	r0, [sp, #28]
 8012922:	a808      	add	r0, sp, #32
 8012924:	f004 fc96 	bl	8017254 <rcl_get_default_topic_name_substitutions>
 8012928:	4607      	mov	r7, r0
 801292a:	b1a8      	cbz	r0, 8012958 <rcl_node_resolve_name+0xd0>
 801292c:	280a      	cmp	r0, #10
 801292e:	9c07      	ldr	r4, [sp, #28]
 8012930:	d000      	beq.n	8012934 <rcl_node_resolve_name+0xac>
 8012932:	2701      	movs	r7, #1
 8012934:	a808      	add	r0, sp, #32
 8012936:	f002 fc63 	bl	8015200 <rcutils_string_map_fini>
 801293a:	2800      	cmp	r0, #0
 801293c:	d13d      	bne.n	80129ba <rcl_node_resolve_name+0x132>
 801293e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012940:	4659      	mov	r1, fp
 8012942:	47d0      	blx	sl
 8012944:	4659      	mov	r1, fp
 8012946:	4620      	mov	r0, r4
 8012948:	47d0      	blx	sl
 801294a:	f1b8 0f00 	cmp.w	r8, #0
 801294e:	d0dc      	beq.n	801290a <rcl_node_resolve_name+0x82>
 8012950:	2f67      	cmp	r7, #103	@ 0x67
 8012952:	bf08      	it	eq
 8012954:	2768      	moveq	r7, #104	@ 0x68
 8012956:	e7d8      	b.n	801290a <rcl_node_resolve_name+0x82>
 8012958:	ab09      	add	r3, sp, #36	@ 0x24
 801295a:	9305      	str	r3, [sp, #20]
 801295c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801295e:	46ec      	mov	ip, sp
 8012960:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	f8cc 3000 	str.w	r3, [ip]
 801296a:	464a      	mov	r2, r9
 801296c:	4631      	mov	r1, r6
 801296e:	4620      	mov	r0, r4
 8012970:	ab08      	add	r3, sp, #32
 8012972:	f004 fb11 	bl	8016f98 <rcl_expand_topic_name>
 8012976:	4607      	mov	r7, r0
 8012978:	b9b8      	cbnz	r0, 80129aa <rcl_node_resolve_name+0x122>
 801297a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801297c:	9009      	str	r0, [sp, #36]	@ 0x24
 801297e:	4602      	mov	r2, r0
 8012980:	a90a      	add	r1, sp, #40	@ 0x28
 8012982:	4620      	mov	r0, r4
 8012984:	f002 fd4c 	bl	8015420 <rmw_validate_full_topic_name>
 8012988:	b988      	cbnz	r0, 80129ae <rcl_node_resolve_name+0x126>
 801298a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801298c:	b9d5      	cbnz	r5, 80129c4 <rcl_node_resolve_name+0x13c>
 801298e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012990:	a808      	add	r0, sp, #32
 8012992:	601c      	str	r4, [r3, #0]
 8012994:	f002 fc34 	bl	8015200 <rcutils_string_map_fini>
 8012998:	4607      	mov	r7, r0
 801299a:	b1a8      	cbz	r0, 80129c8 <rcl_node_resolve_name+0x140>
 801299c:	f7f9 fc64 	bl	800c268 <rcutils_get_error_string>
 80129a0:	462c      	mov	r4, r5
 80129a2:	f7f9 fc79 	bl	800c298 <rcutils_reset_error>
 80129a6:	2701      	movs	r7, #1
 80129a8:	e7c9      	b.n	801293e <rcl_node_resolve_name+0xb6>
 80129aa:	9c07      	ldr	r4, [sp, #28]
 80129ac:	e7c2      	b.n	8012934 <rcl_node_resolve_name+0xac>
 80129ae:	f7f9 fc5b 	bl	800c268 <rcutils_get_error_string>
 80129b2:	2701      	movs	r7, #1
 80129b4:	f7f9 fc70 	bl	800c298 <rcutils_reset_error>
 80129b8:	e7bc      	b.n	8012934 <rcl_node_resolve_name+0xac>
 80129ba:	f7f9 fc55 	bl	800c268 <rcutils_get_error_string>
 80129be:	f7f9 fc6b 	bl	800c298 <rcutils_reset_error>
 80129c2:	e7bc      	b.n	801293e <rcl_node_resolve_name+0xb6>
 80129c4:	2767      	movs	r7, #103	@ 0x67
 80129c6:	e7b5      	b.n	8012934 <rcl_node_resolve_name+0xac>
 80129c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80129ca:	4659      	mov	r1, fp
 80129cc:	47d0      	blx	sl
 80129ce:	4659      	mov	r1, fp
 80129d0:	4638      	mov	r0, r7
 80129d2:	47d0      	blx	sl
 80129d4:	e799      	b.n	801290a <rcl_node_resolve_name+0x82>
 80129d6:	bf00      	nop

080129d8 <exact_match_lookup>:
 80129d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129da:	f102 0708 	add.w	r7, r2, #8
 80129de:	460b      	mov	r3, r1
 80129e0:	4614      	mov	r4, r2
 80129e2:	4606      	mov	r6, r0
 80129e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80129e8:	b085      	sub	sp, #20
 80129ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80129ee:	4618      	mov	r0, r3
 80129f0:	4919      	ldr	r1, [pc, #100]	@ (8012a58 <exact_match_lookup+0x80>)
 80129f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80129f6:	f002 f9e5 	bl	8014dc4 <rcutils_join_path>
 80129fa:	7833      	ldrb	r3, [r6, #0]
 80129fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80129fe:	4605      	mov	r5, r0
 8012a00:	d023      	beq.n	8012a4a <exact_match_lookup+0x72>
 8012a02:	f104 030c 	add.w	r3, r4, #12
 8012a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a0a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a0e:	1c70      	adds	r0, r6, #1
 8012a10:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012a14:	f002 f9dc 	bl	8014dd0 <rcutils_to_native_path>
 8012a18:	4606      	mov	r6, r0
 8012a1a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012a1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a22:	4631      	mov	r1, r6
 8012a24:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f002 f9cb 	bl	8014dc4 <rcutils_join_path>
 8012a2e:	6862      	ldr	r2, [r4, #4]
 8012a30:	6921      	ldr	r1, [r4, #16]
 8012a32:	4603      	mov	r3, r0
 8012a34:	4630      	mov	r0, r6
 8012a36:	461e      	mov	r6, r3
 8012a38:	4790      	blx	r2
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	6863      	ldr	r3, [r4, #4]
 8012a3e:	6921      	ldr	r1, [r4, #16]
 8012a40:	4798      	blx	r3
 8012a42:	4635      	mov	r5, r6
 8012a44:	4628      	mov	r0, r5
 8012a46:	b005      	add	sp, #20
 8012a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a4a:	7873      	ldrb	r3, [r6, #1]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1d8      	bne.n	8012a02 <exact_match_lookup+0x2a>
 8012a50:	4628      	mov	r0, r5
 8012a52:	b005      	add	sp, #20
 8012a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a56:	bf00      	nop
 8012a58:	08019680 	.word	0x08019680

08012a5c <rcl_get_secure_root>:
 8012a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a60:	b085      	sub	sp, #20
 8012a62:	b168      	cbz	r0, 8012a80 <rcl_get_secure_root+0x24>
 8012a64:	4607      	mov	r7, r0
 8012a66:	4608      	mov	r0, r1
 8012a68:	460c      	mov	r4, r1
 8012a6a:	f7f9 fbef 	bl	800c24c <rcutils_allocator_is_valid>
 8012a6e:	b138      	cbz	r0, 8012a80 <rcl_get_secure_root+0x24>
 8012a70:	2300      	movs	r3, #0
 8012a72:	482d      	ldr	r0, [pc, #180]	@ (8012b28 <rcl_get_secure_root+0xcc>)
 8012a74:	9303      	str	r3, [sp, #12]
 8012a76:	a903      	add	r1, sp, #12
 8012a78:	f002 f98a 	bl	8014d90 <rcutils_get_env>
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	b120      	cbz	r0, 8012a8a <rcl_get_secure_root+0x2e>
 8012a80:	2500      	movs	r5, #0
 8012a82:	4628      	mov	r0, r5
 8012a84:	b005      	add	sp, #20
 8012a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a8a:	9b03      	ldr	r3, [sp, #12]
 8012a8c:	781a      	ldrb	r2, [r3, #0]
 8012a8e:	2a00      	cmp	r2, #0
 8012a90:	d0f6      	beq.n	8012a80 <rcl_get_secure_root+0x24>
 8012a92:	f104 090c 	add.w	r9, r4, #12
 8012a96:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012a9a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012aa4:	f002 fab6 	bl	8015014 <rcutils_strdup>
 8012aa8:	4680      	mov	r8, r0
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	d0e8      	beq.n	8012a80 <rcl_get_secure_root+0x24>
 8012aae:	481f      	ldr	r0, [pc, #124]	@ (8012b2c <rcl_get_secure_root+0xd0>)
 8012ab0:	9503      	str	r5, [sp, #12]
 8012ab2:	a903      	add	r1, sp, #12
 8012ab4:	f002 f96c 	bl	8014d90 <rcutils_get_env>
 8012ab8:	b160      	cbz	r0, 8012ad4 <rcl_get_secure_root+0x78>
 8012aba:	2600      	movs	r6, #0
 8012abc:	6863      	ldr	r3, [r4, #4]
 8012abe:	6921      	ldr	r1, [r4, #16]
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	4798      	blx	r3
 8012ac4:	4640      	mov	r0, r8
 8012ac6:	6863      	ldr	r3, [r4, #4]
 8012ac8:	6921      	ldr	r1, [r4, #16]
 8012aca:	4798      	blx	r3
 8012acc:	4628      	mov	r0, r5
 8012ace:	b005      	add	sp, #20
 8012ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad4:	9b03      	ldr	r3, [sp, #12]
 8012ad6:	781e      	ldrb	r6, [r3, #0]
 8012ad8:	b1f6      	cbz	r6, 8012b18 <rcl_get_secure_root+0xbc>
 8012ada:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012ade:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012ae8:	f002 fa94 	bl	8015014 <rcutils_strdup>
 8012aec:	4606      	mov	r6, r0
 8012aee:	2800      	cmp	r0, #0
 8012af0:	d0e3      	beq.n	8012aba <rcl_get_secure_root+0x5e>
 8012af2:	4622      	mov	r2, r4
 8012af4:	4641      	mov	r1, r8
 8012af6:	f7ff ff6f 	bl	80129d8 <exact_match_lookup>
 8012afa:	4605      	mov	r5, r0
 8012afc:	2d00      	cmp	r5, #0
 8012afe:	d0dd      	beq.n	8012abc <rcl_get_secure_root+0x60>
 8012b00:	4628      	mov	r0, r5
 8012b02:	f002 f95d 	bl	8014dc0 <rcutils_is_directory>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	d1d7      	bne.n	8012abc <rcl_get_secure_root+0x60>
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	6921      	ldr	r1, [r4, #16]
 8012b10:	461d      	mov	r5, r3
 8012b12:	6863      	ldr	r3, [r4, #4]
 8012b14:	4798      	blx	r3
 8012b16:	e7d1      	b.n	8012abc <rcl_get_secure_root+0x60>
 8012b18:	4622      	mov	r2, r4
 8012b1a:	4638      	mov	r0, r7
 8012b1c:	4641      	mov	r1, r8
 8012b1e:	f7ff ff5b 	bl	80129d8 <exact_match_lookup>
 8012b22:	4605      	mov	r5, r0
 8012b24:	e7ea      	b.n	8012afc <rcl_get_secure_root+0xa0>
 8012b26:	bf00      	nop
 8012b28:	0801968c 	.word	0x0801968c
 8012b2c:	080196a4 	.word	0x080196a4

08012b30 <rcl_get_security_options_from_environment>:
 8012b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b34:	b082      	sub	sp, #8
 8012b36:	2300      	movs	r3, #0
 8012b38:	4606      	mov	r6, r0
 8012b3a:	460f      	mov	r7, r1
 8012b3c:	4820      	ldr	r0, [pc, #128]	@ (8012bc0 <rcl_get_security_options_from_environment+0x90>)
 8012b3e:	9301      	str	r3, [sp, #4]
 8012b40:	a901      	add	r1, sp, #4
 8012b42:	4690      	mov	r8, r2
 8012b44:	f002 f924 	bl	8014d90 <rcutils_get_env>
 8012b48:	b120      	cbz	r0, 8012b54 <rcl_get_security_options_from_environment+0x24>
 8012b4a:	2501      	movs	r5, #1
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	b002      	add	sp, #8
 8012b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b54:	491b      	ldr	r1, [pc, #108]	@ (8012bc4 <rcl_get_security_options_from_environment+0x94>)
 8012b56:	4604      	mov	r4, r0
 8012b58:	9801      	ldr	r0, [sp, #4]
 8012b5a:	f7ed fb61 	bl	8000220 <strcmp>
 8012b5e:	4605      	mov	r5, r0
 8012b60:	b9e8      	cbnz	r0, 8012b9e <rcl_get_security_options_from_environment+0x6e>
 8012b62:	9001      	str	r0, [sp, #4]
 8012b64:	f1b8 0f00 	cmp.w	r8, #0
 8012b68:	d020      	beq.n	8012bac <rcl_get_security_options_from_environment+0x7c>
 8012b6a:	4817      	ldr	r0, [pc, #92]	@ (8012bc8 <rcl_get_security_options_from_environment+0x98>)
 8012b6c:	a901      	add	r1, sp, #4
 8012b6e:	f002 f90f 	bl	8014d90 <rcutils_get_env>
 8012b72:	2800      	cmp	r0, #0
 8012b74:	d1e9      	bne.n	8012b4a <rcl_get_security_options_from_environment+0x1a>
 8012b76:	4915      	ldr	r1, [pc, #84]	@ (8012bcc <rcl_get_security_options_from_environment+0x9c>)
 8012b78:	9801      	ldr	r0, [sp, #4]
 8012b7a:	f7ed fb51 	bl	8000220 <strcmp>
 8012b7e:	fab0 f080 	clz	r0, r0
 8012b82:	0940      	lsrs	r0, r0, #5
 8012b84:	f888 0000 	strb.w	r0, [r8]
 8012b88:	4639      	mov	r1, r7
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	f7ff ff66 	bl	8012a5c <rcl_get_secure_root>
 8012b90:	b170      	cbz	r0, 8012bb0 <rcl_get_security_options_from_environment+0x80>
 8012b92:	f8c8 0004 	str.w	r0, [r8, #4]
 8012b96:	4628      	mov	r0, r5
 8012b98:	b002      	add	sp, #8
 8012b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9e:	4625      	mov	r5, r4
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f888 4000 	strb.w	r4, [r8]
 8012ba6:	b002      	add	sp, #8
 8012ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bac:	250b      	movs	r5, #11
 8012bae:	e7cd      	b.n	8012b4c <rcl_get_security_options_from_environment+0x1c>
 8012bb0:	f898 5000 	ldrb.w	r5, [r8]
 8012bb4:	f1a5 0501 	sub.w	r5, r5, #1
 8012bb8:	fab5 f585 	clz	r5, r5
 8012bbc:	096d      	lsrs	r5, r5, #5
 8012bbe:	e7c5      	b.n	8012b4c <rcl_get_security_options_from_environment+0x1c>
 8012bc0:	08019644 	.word	0x08019644
 8012bc4:	08019658 	.word	0x08019658
 8012bc8:	08019660 	.word	0x08019660
 8012bcc:	08019678 	.word	0x08019678

08012bd0 <rcl_service_get_rmw_handle>:
 8012bd0:	b118      	cbz	r0, 8012bda <rcl_service_get_rmw_handle+0xa>
 8012bd2:	6800      	ldr	r0, [r0, #0]
 8012bd4:	b108      	cbz	r0, 8012bda <rcl_service_get_rmw_handle+0xa>
 8012bd6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012bda:	4770      	bx	lr

08012bdc <rcl_take_request>:
 8012bdc:	b570      	push	{r4, r5, r6, lr}
 8012bde:	468e      	mov	lr, r1
 8012be0:	460c      	mov	r4, r1
 8012be2:	4616      	mov	r6, r2
 8012be4:	4605      	mov	r5, r0
 8012be6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012bea:	b08c      	sub	sp, #48	@ 0x30
 8012bec:	f10d 0c18 	add.w	ip, sp, #24
 8012bf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bf4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012bf8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012bfc:	b30d      	cbz	r5, 8012c42 <rcl_take_request+0x66>
 8012bfe:	682b      	ldr	r3, [r5, #0]
 8012c00:	b1fb      	cbz	r3, 8012c42 <rcl_take_request+0x66>
 8012c02:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012c06:	b1e0      	cbz	r0, 8012c42 <rcl_take_request+0x66>
 8012c08:	b336      	cbz	r6, 8012c58 <rcl_take_request+0x7c>
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012c10:	4632      	mov	r2, r6
 8012c12:	f10d 0307 	add.w	r3, sp, #7
 8012c16:	a902      	add	r1, sp, #8
 8012c18:	f002 ff58 	bl	8015acc <rmw_take_request>
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	b198      	cbz	r0, 8012c48 <rcl_take_request+0x6c>
 8012c20:	280a      	cmp	r0, #10
 8012c22:	bf18      	it	ne
 8012c24:	2501      	movne	r5, #1
 8012c26:	f10d 0e18 	add.w	lr, sp, #24
 8012c2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c2e:	46a4      	mov	ip, r4
 8012c30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c34:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012c38:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	b00c      	add	sp, #48	@ 0x30
 8012c40:	bd70      	pop	{r4, r5, r6, pc}
 8012c42:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012c46:	e7ee      	b.n	8012c26 <rcl_take_request+0x4a>
 8012c48:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012c4c:	f240 2359 	movw	r3, #601	@ 0x259
 8012c50:	2a00      	cmp	r2, #0
 8012c52:	bf08      	it	eq
 8012c54:	461d      	moveq	r5, r3
 8012c56:	e7e6      	b.n	8012c26 <rcl_take_request+0x4a>
 8012c58:	250b      	movs	r5, #11
 8012c5a:	e7e4      	b.n	8012c26 <rcl_take_request+0x4a>

08012c5c <rcl_send_response>:
 8012c5c:	b170      	cbz	r0, 8012c7c <rcl_send_response+0x20>
 8012c5e:	6800      	ldr	r0, [r0, #0]
 8012c60:	b160      	cbz	r0, 8012c7c <rcl_send_response+0x20>
 8012c62:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012c66:	b148      	cbz	r0, 8012c7c <rcl_send_response+0x20>
 8012c68:	b159      	cbz	r1, 8012c82 <rcl_send_response+0x26>
 8012c6a:	b510      	push	{r4, lr}
 8012c6c:	b15a      	cbz	r2, 8012c86 <rcl_send_response+0x2a>
 8012c6e:	f002 ff8b 	bl	8015b88 <rmw_send_response>
 8012c72:	b110      	cbz	r0, 8012c7a <rcl_send_response+0x1e>
 8012c74:	2802      	cmp	r0, #2
 8012c76:	bf18      	it	ne
 8012c78:	2001      	movne	r0, #1
 8012c7a:	bd10      	pop	{r4, pc}
 8012c7c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012c80:	4770      	bx	lr
 8012c82:	200b      	movs	r0, #11
 8012c84:	4770      	bx	lr
 8012c86:	200b      	movs	r0, #11
 8012c88:	bd10      	pop	{r4, pc}
 8012c8a:	bf00      	nop

08012c8c <rcl_service_is_valid>:
 8012c8c:	b130      	cbz	r0, 8012c9c <rcl_service_is_valid+0x10>
 8012c8e:	6800      	ldr	r0, [r0, #0]
 8012c90:	b120      	cbz	r0, 8012c9c <rcl_service_is_valid+0x10>
 8012c92:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012c96:	3800      	subs	r0, #0
 8012c98:	bf18      	it	ne
 8012c9a:	2001      	movne	r0, #1
 8012c9c:	4770      	bx	lr
 8012c9e:	bf00      	nop

08012ca0 <rcl_take>:
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	d04a      	beq.n	8012d3a <rcl_take+0x9a>
 8012ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ca8:	4604      	mov	r4, r0
 8012caa:	6800      	ldr	r0, [r0, #0]
 8012cac:	b0a4      	sub	sp, #144	@ 0x90
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d03b      	beq.n	8012d2a <rcl_take+0x8a>
 8012cb2:	461f      	mov	r7, r3
 8012cb4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d036      	beq.n	8012d2a <rcl_take+0x8a>
 8012cbc:	460e      	mov	r6, r1
 8012cbe:	2900      	cmp	r1, #0
 8012cc0:	d039      	beq.n	8012d36 <rcl_take+0x96>
 8012cc2:	4615      	mov	r5, r2
 8012cc4:	2a00      	cmp	r2, #0
 8012cc6:	d03c      	beq.n	8012d42 <rcl_take+0xa2>
 8012cc8:	a802      	add	r0, sp, #8
 8012cca:	f002 fba1 	bl	8015410 <rmw_get_zero_initialized_message_info>
 8012cce:	f10d 0c08 	add.w	ip, sp, #8
 8012cd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012cd6:	46ae      	mov	lr, r5
 8012cd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012cdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ce0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ce4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ce8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012cec:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012cf0:	f04f 0800 	mov.w	r8, #0
 8012cf4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012cf8:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012cfc:	6822      	ldr	r2, [r4, #0]
 8012cfe:	462b      	mov	r3, r5
 8012d00:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012d04:	9700      	str	r7, [sp, #0]
 8012d06:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	f002 ffe2 	bl	8015cd4 <rmw_take_with_info>
 8012d10:	4603      	mov	r3, r0
 8012d12:	b9c0      	cbnz	r0, 8012d46 <rcl_take+0xa6>
 8012d14:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012d18:	f240 1291 	movw	r2, #401	@ 0x191
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	bf08      	it	eq
 8012d20:	4613      	moveq	r3, r2
 8012d22:	4618      	mov	r0, r3
 8012d24:	b024      	add	sp, #144	@ 0x90
 8012d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d2a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012d2e:	4618      	mov	r0, r3
 8012d30:	b024      	add	sp, #144	@ 0x90
 8012d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d36:	230b      	movs	r3, #11
 8012d38:	e7f3      	b.n	8012d22 <rcl_take+0x82>
 8012d3a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012d3e:	4618      	mov	r0, r3
 8012d40:	4770      	bx	lr
 8012d42:	ad14      	add	r5, sp, #80	@ 0x50
 8012d44:	e7c0      	b.n	8012cc8 <rcl_take+0x28>
 8012d46:	f7ff fa51 	bl	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	e7e9      	b.n	8012d22 <rcl_take+0x82>
 8012d4e:	bf00      	nop

08012d50 <rcl_subscription_get_rmw_handle>:
 8012d50:	b118      	cbz	r0, 8012d5a <rcl_subscription_get_rmw_handle+0xa>
 8012d52:	6800      	ldr	r0, [r0, #0]
 8012d54:	b108      	cbz	r0, 8012d5a <rcl_subscription_get_rmw_handle+0xa>
 8012d56:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012d5a:	4770      	bx	lr

08012d5c <rcl_subscription_is_valid>:
 8012d5c:	b130      	cbz	r0, 8012d6c <rcl_subscription_is_valid+0x10>
 8012d5e:	6800      	ldr	r0, [r0, #0]
 8012d60:	b120      	cbz	r0, 8012d6c <rcl_subscription_is_valid+0x10>
 8012d62:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012d66:	3800      	subs	r0, #0
 8012d68:	bf18      	it	ne
 8012d6a:	2001      	movne	r0, #1
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop

08012d70 <rcl_get_system_time>:
 8012d70:	4608      	mov	r0, r1
 8012d72:	f7f9 baad 	b.w	800c2d0 <rcutils_system_time_now>
 8012d76:	bf00      	nop

08012d78 <rcl_get_steady_time>:
 8012d78:	4608      	mov	r0, r1
 8012d7a:	f7f9 bad1 	b.w	800c320 <rcutils_steady_time_now>
 8012d7e:	bf00      	nop

08012d80 <rcl_get_ros_time>:
 8012d80:	7a03      	ldrb	r3, [r0, #8]
 8012d82:	b510      	push	{r4, lr}
 8012d84:	460c      	mov	r4, r1
 8012d86:	b133      	cbz	r3, 8012d96 <rcl_get_ros_time+0x16>
 8012d88:	2105      	movs	r1, #5
 8012d8a:	f001 ff5d 	bl	8014c48 <__atomic_load_8>
 8012d8e:	e9c4 0100 	strd	r0, r1, [r4]
 8012d92:	2000      	movs	r0, #0
 8012d94:	bd10      	pop	{r4, pc}
 8012d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d9a:	4608      	mov	r0, r1
 8012d9c:	f7f9 ba98 	b.w	800c2d0 <rcutils_system_time_now>

08012da0 <rcl_clock_init>:
 8012da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012da2:	4605      	mov	r5, r0
 8012da4:	4610      	mov	r0, r2
 8012da6:	4614      	mov	r4, r2
 8012da8:	460e      	mov	r6, r1
 8012daa:	f7f9 fa4f 	bl	800c24c <rcutils_allocator_is_valid>
 8012dae:	b128      	cbz	r0, 8012dbc <rcl_clock_init+0x1c>
 8012db0:	2d03      	cmp	r5, #3
 8012db2:	d803      	bhi.n	8012dbc <rcl_clock_init+0x1c>
 8012db4:	e8df f005 	tbb	[pc, r5]
 8012db8:	06532e1d 	.word	0x06532e1d
 8012dbc:	f04f 0c0b 	mov.w	ip, #11
 8012dc0:	4660      	mov	r0, ip
 8012dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dc4:	2e00      	cmp	r6, #0
 8012dc6:	d0f9      	beq.n	8012dbc <rcl_clock_init+0x1c>
 8012dc8:	2c00      	cmp	r4, #0
 8012dca:	d0f7      	beq.n	8012dbc <rcl_clock_init+0x1c>
 8012dcc:	2300      	movs	r3, #0
 8012dce:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012dd2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012e88 <rcl_clock_init+0xe8>
 8012dd6:	6133      	str	r3, [r6, #16]
 8012dd8:	f106 0514 	add.w	r5, r6, #20
 8012ddc:	469c      	mov	ip, r3
 8012dde:	2703      	movs	r7, #3
 8012de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012de4:	6823      	ldr	r3, [r4, #0]
 8012de6:	602b      	str	r3, [r5, #0]
 8012de8:	7037      	strb	r7, [r6, #0]
 8012dea:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012dee:	4660      	mov	r0, ip
 8012df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012df2:	2e00      	cmp	r6, #0
 8012df4:	d0e2      	beq.n	8012dbc <rcl_clock_init+0x1c>
 8012df6:	2300      	movs	r3, #0
 8012df8:	7033      	strb	r3, [r6, #0]
 8012dfa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012dfe:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012e02:	469c      	mov	ip, r3
 8012e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e06:	f106 0514 	add.w	r5, r6, #20
 8012e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	602b      	str	r3, [r5, #0]
 8012e10:	4660      	mov	r0, ip
 8012e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e14:	2e00      	cmp	r6, #0
 8012e16:	d0d1      	beq.n	8012dbc <rcl_clock_init+0x1c>
 8012e18:	2c00      	cmp	r4, #0
 8012e1a:	d0cf      	beq.n	8012dbc <rcl_clock_init+0x1c>
 8012e1c:	2700      	movs	r7, #0
 8012e1e:	7037      	strb	r7, [r6, #0]
 8012e20:	46a4      	mov	ip, r4
 8012e22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e26:	f106 0514 	add.w	r5, r6, #20
 8012e2a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012e2e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e34:	f8dc 3000 	ldr.w	r3, [ip]
 8012e38:	602b      	str	r3, [r5, #0]
 8012e3a:	6921      	ldr	r1, [r4, #16]
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	2010      	movs	r0, #16
 8012e40:	4798      	blx	r3
 8012e42:	6130      	str	r0, [r6, #16]
 8012e44:	b1d0      	cbz	r0, 8012e7c <rcl_clock_init+0xdc>
 8012e46:	2200      	movs	r2, #0
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e9c0 2300 	strd	r2, r3, [r0]
 8012e4e:	2301      	movs	r3, #1
 8012e50:	7207      	strb	r7, [r0, #8]
 8012e52:	4a0c      	ldr	r2, [pc, #48]	@ (8012e84 <rcl_clock_init+0xe4>)
 8012e54:	7033      	strb	r3, [r6, #0]
 8012e56:	46bc      	mov	ip, r7
 8012e58:	60f2      	str	r2, [r6, #12]
 8012e5a:	4660      	mov	r0, ip
 8012e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e5e:	2e00      	cmp	r6, #0
 8012e60:	d0ac      	beq.n	8012dbc <rcl_clock_init+0x1c>
 8012e62:	2c00      	cmp	r4, #0
 8012e64:	d0aa      	beq.n	8012dbc <rcl_clock_init+0x1c>
 8012e66:	2300      	movs	r3, #0
 8012e68:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e6c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012e8c <rcl_clock_init+0xec>
 8012e70:	6133      	str	r3, [r6, #16]
 8012e72:	f106 0514 	add.w	r5, r6, #20
 8012e76:	469c      	mov	ip, r3
 8012e78:	2702      	movs	r7, #2
 8012e7a:	e7b1      	b.n	8012de0 <rcl_clock_init+0x40>
 8012e7c:	f04f 0c0a 	mov.w	ip, #10
 8012e80:	e79e      	b.n	8012dc0 <rcl_clock_init+0x20>
 8012e82:	bf00      	nop
 8012e84:	08012d81 	.word	0x08012d81
 8012e88:	08012d79 	.word	0x08012d79
 8012e8c:	08012d71 	.word	0x08012d71

08012e90 <rcl_clock_get_now>:
 8012e90:	b140      	cbz	r0, 8012ea4 <rcl_clock_get_now+0x14>
 8012e92:	b139      	cbz	r1, 8012ea4 <rcl_clock_get_now+0x14>
 8012e94:	7803      	ldrb	r3, [r0, #0]
 8012e96:	b11b      	cbz	r3, 8012ea0 <rcl_clock_get_now+0x10>
 8012e98:	68c3      	ldr	r3, [r0, #12]
 8012e9a:	b10b      	cbz	r3, 8012ea0 <rcl_clock_get_now+0x10>
 8012e9c:	6900      	ldr	r0, [r0, #16]
 8012e9e:	4718      	bx	r3
 8012ea0:	2001      	movs	r0, #1
 8012ea2:	4770      	bx	lr
 8012ea4:	200b      	movs	r0, #11
 8012ea6:	4770      	bx	lr

08012ea8 <rcl_clock_add_jump_callback>:
 8012ea8:	b082      	sub	sp, #8
 8012eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eae:	a906      	add	r1, sp, #24
 8012eb0:	e881 000c 	stmia.w	r1, {r2, r3}
 8012eb4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012eb8:	b320      	cbz	r0, 8012f04 <rcl_clock_add_jump_callback+0x5c>
 8012eba:	4604      	mov	r4, r0
 8012ebc:	3014      	adds	r0, #20
 8012ebe:	f7f9 f9c5 	bl	800c24c <rcutils_allocator_is_valid>
 8012ec2:	b1f8      	cbz	r0, 8012f04 <rcl_clock_add_jump_callback+0x5c>
 8012ec4:	b1f6      	cbz	r6, 8012f04 <rcl_clock_add_jump_callback+0x5c>
 8012ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	db1b      	blt.n	8012f04 <rcl_clock_add_jump_callback+0x5c>
 8012ecc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012ed0:	2a01      	cmp	r2, #1
 8012ed2:	f173 0300 	sbcs.w	r3, r3, #0
 8012ed6:	da15      	bge.n	8012f04 <rcl_clock_add_jump_callback+0x5c>
 8012ed8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012edc:	2f00      	cmp	r7, #0
 8012ede:	d042      	beq.n	8012f66 <rcl_clock_add_jump_callback+0xbe>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	e003      	b.n	8012eee <rcl_clock_add_jump_callback+0x46>
 8012ee6:	42bb      	cmp	r3, r7
 8012ee8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012eec:	d011      	beq.n	8012f12 <rcl_clock_add_jump_callback+0x6a>
 8012eee:	6811      	ldr	r1, [r2, #0]
 8012ef0:	42b1      	cmp	r1, r6
 8012ef2:	f103 0301 	add.w	r3, r3, #1
 8012ef6:	d1f6      	bne.n	8012ee6 <rcl_clock_add_jump_callback+0x3e>
 8012ef8:	6a11      	ldr	r1, [r2, #32]
 8012efa:	42a9      	cmp	r1, r5
 8012efc:	d1f3      	bne.n	8012ee6 <rcl_clock_add_jump_callback+0x3e>
 8012efe:	f04f 0e01 	mov.w	lr, #1
 8012f02:	e001      	b.n	8012f08 <rcl_clock_add_jump_callback+0x60>
 8012f04:	f04f 0e0b 	mov.w	lr, #11
 8012f08:	4670      	mov	r0, lr
 8012f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0e:	b002      	add	sp, #8
 8012f10:	4770      	bx	lr
 8012f12:	3301      	adds	r3, #1
 8012f14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012f18:	00d9      	lsls	r1, r3, #3
 8012f1a:	69e3      	ldr	r3, [r4, #28]
 8012f1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012f1e:	4798      	blx	r3
 8012f20:	b1f0      	cbz	r0, 8012f60 <rcl_clock_add_jump_callback+0xb8>
 8012f22:	68a3      	ldr	r3, [r4, #8]
 8012f24:	6060      	str	r0, [r4, #4]
 8012f26:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012f2a:	f10d 0c18 	add.w	ip, sp, #24
 8012f2e:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012f32:	f103 0801 	add.w	r8, r3, #1
 8012f36:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012f3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f3e:	f106 0708 	add.w	r7, r6, #8
 8012f42:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012f44:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012f48:	f04f 0e00 	mov.w	lr, #0
 8012f4c:	e887 0003 	stmia.w	r7, {r0, r1}
 8012f50:	6235      	str	r5, [r6, #32]
 8012f52:	4670      	mov	r0, lr
 8012f54:	f8c4 8008 	str.w	r8, [r4, #8]
 8012f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5c:	b002      	add	sp, #8
 8012f5e:	4770      	bx	lr
 8012f60:	f04f 0e0a 	mov.w	lr, #10
 8012f64:	e7d0      	b.n	8012f08 <rcl_clock_add_jump_callback+0x60>
 8012f66:	2128      	movs	r1, #40	@ 0x28
 8012f68:	e7d7      	b.n	8012f1a <rcl_clock_add_jump_callback+0x72>
 8012f6a:	bf00      	nop

08012f6c <rcl_clock_remove_jump_callback>:
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d057      	beq.n	8013020 <rcl_clock_remove_jump_callback+0xb4>
 8012f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f74:	4605      	mov	r5, r0
 8012f76:	3014      	adds	r0, #20
 8012f78:	4688      	mov	r8, r1
 8012f7a:	4692      	mov	sl, r2
 8012f7c:	f7f9 f966 	bl	800c24c <rcutils_allocator_is_valid>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	d03b      	beq.n	8012ffc <rcl_clock_remove_jump_callback+0x90>
 8012f84:	f1b8 0f00 	cmp.w	r8, #0
 8012f88:	d038      	beq.n	8012ffc <rcl_clock_remove_jump_callback+0x90>
 8012f8a:	68ae      	ldr	r6, [r5, #8]
 8012f8c:	b166      	cbz	r6, 8012fa8 <rcl_clock_remove_jump_callback+0x3c>
 8012f8e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012f92:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012f96:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012f9a:	464c      	mov	r4, r9
 8012f9c:	6823      	ldr	r3, [r4, #0]
 8012f9e:	4543      	cmp	r3, r8
 8012fa0:	d005      	beq.n	8012fae <rcl_clock_remove_jump_callback+0x42>
 8012fa2:	3428      	adds	r4, #40	@ 0x28
 8012fa4:	42a7      	cmp	r7, r4
 8012fa6:	d1f9      	bne.n	8012f9c <rcl_clock_remove_jump_callback+0x30>
 8012fa8:	2001      	movs	r0, #1
 8012faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fae:	6a23      	ldr	r3, [r4, #32]
 8012fb0:	3428      	adds	r4, #40	@ 0x28
 8012fb2:	42bc      	cmp	r4, r7
 8012fb4:	d02d      	beq.n	8013012 <rcl_clock_remove_jump_callback+0xa6>
 8012fb6:	4553      	cmp	r3, sl
 8012fb8:	d1f0      	bne.n	8012f9c <rcl_clock_remove_jump_callback+0x30>
 8012fba:	46a6      	mov	lr, r4
 8012fbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012fc0:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012fc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012fc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012fcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012fd0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012fd4:	3428      	adds	r4, #40	@ 0x28
 8012fd6:	42a7      	cmp	r7, r4
 8012fd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012fdc:	d1ed      	bne.n	8012fba <rcl_clock_remove_jump_callback+0x4e>
 8012fde:	3e01      	subs	r6, #1
 8012fe0:	60ae      	str	r6, [r5, #8]
 8012fe2:	b176      	cbz	r6, 8013002 <rcl_clock_remove_jump_callback+0x96>
 8012fe4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012fe8:	69eb      	ldr	r3, [r5, #28]
 8012fea:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012fec:	00f1      	lsls	r1, r6, #3
 8012fee:	4648      	mov	r0, r9
 8012ff0:	4798      	blx	r3
 8012ff2:	b1b8      	cbz	r0, 8013024 <rcl_clock_remove_jump_callback+0xb8>
 8012ff4:	6068      	str	r0, [r5, #4]
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ffc:	200b      	movs	r0, #11
 8012ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013002:	4648      	mov	r0, r9
 8013004:	69ab      	ldr	r3, [r5, #24]
 8013006:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8013008:	4798      	blx	r3
 801300a:	606e      	str	r6, [r5, #4]
 801300c:	4630      	mov	r0, r6
 801300e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013012:	4553      	cmp	r3, sl
 8013014:	d1c8      	bne.n	8012fa8 <rcl_clock_remove_jump_callback+0x3c>
 8013016:	3e01      	subs	r6, #1
 8013018:	60ae      	str	r6, [r5, #8]
 801301a:	2e00      	cmp	r6, #0
 801301c:	d1e2      	bne.n	8012fe4 <rcl_clock_remove_jump_callback+0x78>
 801301e:	e7f0      	b.n	8013002 <rcl_clock_remove_jump_callback+0x96>
 8013020:	200b      	movs	r0, #11
 8013022:	4770      	bx	lr
 8013024:	200a      	movs	r0, #10
 8013026:	e7ea      	b.n	8012ffe <rcl_clock_remove_jump_callback+0x92>

08013028 <_rcl_timer_time_jump>:
 8013028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801302c:	4605      	mov	r5, r0
 801302e:	b084      	sub	sp, #16
 8013030:	4614      	mov	r4, r2
 8013032:	b131      	cbz	r1, 8013042 <_rcl_timer_time_jump+0x1a>
 8013034:	7803      	ldrb	r3, [r0, #0]
 8013036:	3b02      	subs	r3, #2
 8013038:	2b01      	cmp	r3, #1
 801303a:	d93f      	bls.n	80130bc <_rcl_timer_time_jump+0x94>
 801303c:	b004      	add	sp, #16
 801303e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013042:	6813      	ldr	r3, [r2, #0]
 8013044:	a902      	add	r1, sp, #8
 8013046:	6818      	ldr	r0, [r3, #0]
 8013048:	f7ff ff22 	bl	8012e90 <rcl_clock_get_now>
 801304c:	2800      	cmp	r0, #0
 801304e:	d1f5      	bne.n	801303c <_rcl_timer_time_jump+0x14>
 8013050:	6820      	ldr	r0, [r4, #0]
 8013052:	2105      	movs	r1, #5
 8013054:	3020      	adds	r0, #32
 8013056:	f001 fdf7 	bl	8014c48 <__atomic_load_8>
 801305a:	6823      	ldr	r3, [r4, #0]
 801305c:	4681      	mov	r9, r0
 801305e:	4688      	mov	r8, r1
 8013060:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8013064:	2105      	movs	r1, #5
 8013066:	f001 fdef 	bl	8014c48 <__atomic_load_8>
 801306a:	4607      	mov	r7, r0
 801306c:	6820      	ldr	r0, [r4, #0]
 801306e:	460e      	mov	r6, r1
 8013070:	3018      	adds	r0, #24
 8013072:	2105      	movs	r1, #5
 8013074:	f001 fde8 	bl	8014c48 <__atomic_load_8>
 8013078:	782b      	ldrb	r3, [r5, #0]
 801307a:	9a02      	ldr	r2, [sp, #8]
 801307c:	3b02      	subs	r3, #2
 801307e:	2b01      	cmp	r3, #1
 8013080:	460d      	mov	r5, r1
 8013082:	9b03      	ldr	r3, [sp, #12]
 8013084:	4682      	mov	sl, r0
 8013086:	d937      	bls.n	80130f8 <_rcl_timer_time_jump+0xd0>
 8013088:	42ba      	cmp	r2, r7
 801308a:	eb73 0106 	sbcs.w	r1, r3, r6
 801308e:	da5f      	bge.n	8013150 <_rcl_timer_time_jump+0x128>
 8013090:	454a      	cmp	r2, r9
 8013092:	eb73 0108 	sbcs.w	r1, r3, r8
 8013096:	dad1      	bge.n	801303c <_rcl_timer_time_jump+0x14>
 8013098:	6820      	ldr	r0, [r4, #0]
 801309a:	eb1a 0202 	adds.w	r2, sl, r2
 801309e:	eb43 0305 	adc.w	r3, r3, r5
 80130a2:	2505      	movs	r5, #5
 80130a4:	3028      	adds	r0, #40	@ 0x28
 80130a6:	9500      	str	r5, [sp, #0]
 80130a8:	f001 fe04 	bl	8014cb4 <__atomic_store_8>
 80130ac:	6820      	ldr	r0, [r4, #0]
 80130ae:	9500      	str	r5, [sp, #0]
 80130b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130b4:	3020      	adds	r0, #32
 80130b6:	f001 fdfd 	bl	8014cb4 <__atomic_store_8>
 80130ba:	e7bf      	b.n	801303c <_rcl_timer_time_jump+0x14>
 80130bc:	6813      	ldr	r3, [r2, #0]
 80130be:	a902      	add	r1, sp, #8
 80130c0:	6818      	ldr	r0, [r3, #0]
 80130c2:	f7ff fee5 	bl	8012e90 <rcl_clock_get_now>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d1b8      	bne.n	801303c <_rcl_timer_time_jump+0x14>
 80130ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130ce:	4313      	orrs	r3, r2
 80130d0:	d0b4      	beq.n	801303c <_rcl_timer_time_jump+0x14>
 80130d2:	6820      	ldr	r0, [r4, #0]
 80130d4:	2105      	movs	r1, #5
 80130d6:	3028      	adds	r0, #40	@ 0x28
 80130d8:	f001 fdb6 	bl	8014c48 <__atomic_load_8>
 80130dc:	9d02      	ldr	r5, [sp, #8]
 80130de:	9b03      	ldr	r3, [sp, #12]
 80130e0:	4602      	mov	r2, r0
 80130e2:	6820      	ldr	r0, [r4, #0]
 80130e4:	1b52      	subs	r2, r2, r5
 80130e6:	f04f 0405 	mov.w	r4, #5
 80130ea:	9400      	str	r4, [sp, #0]
 80130ec:	eb61 0303 	sbc.w	r3, r1, r3
 80130f0:	3030      	adds	r0, #48	@ 0x30
 80130f2:	f001 fddf 	bl	8014cb4 <__atomic_store_8>
 80130f6:	e7a1      	b.n	801303c <_rcl_timer_time_jump+0x14>
 80130f8:	4313      	orrs	r3, r2
 80130fa:	d09f      	beq.n	801303c <_rcl_timer_time_jump+0x14>
 80130fc:	6820      	ldr	r0, [r4, #0]
 80130fe:	f04f 0805 	mov.w	r8, #5
 8013102:	2300      	movs	r3, #0
 8013104:	f8cd 8000 	str.w	r8, [sp]
 8013108:	3030      	adds	r0, #48	@ 0x30
 801310a:	2200      	movs	r2, #0
 801310c:	f001 fe08 	bl	8014d20 <__atomic_exchange_8>
 8013110:	ea51 0300 	orrs.w	r3, r1, r0
 8013114:	4606      	mov	r6, r0
 8013116:	460f      	mov	r7, r1
 8013118:	d090      	beq.n	801303c <_rcl_timer_time_jump+0x14>
 801311a:	9a02      	ldr	r2, [sp, #8]
 801311c:	9b03      	ldr	r3, [sp, #12]
 801311e:	f8cd 8000 	str.w	r8, [sp]
 8013122:	1a12      	subs	r2, r2, r0
 8013124:	6820      	ldr	r0, [r4, #0]
 8013126:	eb63 0301 	sbc.w	r3, r3, r1
 801312a:	eb12 020a 	adds.w	r2, r2, sl
 801312e:	eb43 0305 	adc.w	r3, r3, r5
 8013132:	3028      	adds	r0, #40	@ 0x28
 8013134:	f001 fdbe 	bl	8014cb4 <__atomic_store_8>
 8013138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801313c:	f8cd 8000 	str.w	r8, [sp]
 8013140:	6820      	ldr	r0, [r4, #0]
 8013142:	1b92      	subs	r2, r2, r6
 8013144:	eb63 0307 	sbc.w	r3, r3, r7
 8013148:	3020      	adds	r0, #32
 801314a:	f001 fdb3 	bl	8014cb4 <__atomic_store_8>
 801314e:	e775      	b.n	801303c <_rcl_timer_time_jump+0x14>
 8013150:	6820      	ldr	r0, [r4, #0]
 8013152:	3008      	adds	r0, #8
 8013154:	f004 f97c 	bl	8017450 <rcl_trigger_guard_condition>
 8013158:	e770      	b.n	801303c <_rcl_timer_time_jump+0x14>
 801315a:	bf00      	nop

0801315c <rcl_get_zero_initialized_timer>:
 801315c:	4b01      	ldr	r3, [pc, #4]	@ (8013164 <rcl_get_zero_initialized_timer+0x8>)
 801315e:	6818      	ldr	r0, [r3, #0]
 8013160:	4770      	bx	lr
 8013162:	bf00      	nop
 8013164:	080196c4 	.word	0x080196c4

08013168 <rcl_timer_init>:
 8013168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801316c:	b0aa      	sub	sp, #168	@ 0xa8
 801316e:	4604      	mov	r4, r0
 8013170:	a835      	add	r0, sp, #212	@ 0xd4
 8013172:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8013176:	460d      	mov	r5, r1
 8013178:	4692      	mov	sl, r2
 801317a:	f7f9 f867 	bl	800c24c <rcutils_allocator_is_valid>
 801317e:	2800      	cmp	r0, #0
 8013180:	d064      	beq.n	801324c <rcl_timer_init+0xe4>
 8013182:	2c00      	cmp	r4, #0
 8013184:	d062      	beq.n	801324c <rcl_timer_init+0xe4>
 8013186:	2d00      	cmp	r5, #0
 8013188:	d060      	beq.n	801324c <rcl_timer_init+0xe4>
 801318a:	2f00      	cmp	r7, #0
 801318c:	db5e      	blt.n	801324c <rcl_timer_init+0xe4>
 801318e:	6823      	ldr	r3, [r4, #0]
 8013190:	b123      	cbz	r3, 801319c <rcl_timer_init+0x34>
 8013192:	2664      	movs	r6, #100	@ 0x64
 8013194:	4630      	mov	r0, r6
 8013196:	b02a      	add	sp, #168	@ 0xa8
 8013198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801319c:	a908      	add	r1, sp, #32
 801319e:	4628      	mov	r0, r5
 80131a0:	f7ff fe76 	bl	8012e90 <rcl_clock_get_now>
 80131a4:	4606      	mov	r6, r0
 80131a6:	2800      	cmp	r0, #0
 80131a8:	d1f4      	bne.n	8013194 <rcl_timer_init+0x2c>
 80131aa:	ae06      	add	r6, sp, #24
 80131ac:	4630      	mov	r0, r6
 80131ae:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80131b2:	f004 f855 	bl	8017260 <rcl_get_zero_initialized_guard_condition>
 80131b6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80131ba:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80131be:	ae0b      	add	r6, sp, #44	@ 0x2c
 80131c0:	e889 0003 	stmia.w	r9, {r0, r1}
 80131c4:	4630      	mov	r0, r6
 80131c6:	f004 f927 	bl	8017418 <rcl_guard_condition_get_default_options>
 80131ca:	ab0d      	add	r3, sp, #52	@ 0x34
 80131cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80131d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80131d4:	4651      	mov	r1, sl
 80131d6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80131da:	4648      	mov	r0, r9
 80131dc:	f004 f84a 	bl	8017274 <rcl_guard_condition_init>
 80131e0:	4606      	mov	r6, r0
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d1d6      	bne.n	8013194 <rcl_timer_init+0x2c>
 80131e6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	2b01      	cmp	r3, #1
 80131ec:	d033      	beq.n	8013256 <rcl_timer_init+0xee>
 80131ee:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80131f0:	911a      	str	r1, [sp, #104]	@ 0x68
 80131f2:	4642      	mov	r2, r8
 80131f4:	463b      	mov	r3, r7
 80131f6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80131fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80131fe:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80132b0 <rcl_timer_init+0x148>
 8013202:	eb12 0008 	adds.w	r0, r2, r8
 8013206:	eb47 0103 	adc.w	r1, r7, r3
 801320a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801320e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8013212:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8013216:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801321a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801321e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8013222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013226:	f8de 3000 	ldr.w	r3, [lr]
 801322a:	f8cc 3000 	str.w	r3, [ip]
 801322e:	f04f 0a00 	mov.w	sl, #0
 8013232:	4619      	mov	r1, r3
 8013234:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8013238:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801323a:	2050      	movs	r0, #80	@ 0x50
 801323c:	4798      	blx	r3
 801323e:	6020      	str	r0, [r4, #0]
 8013240:	b358      	cbz	r0, 801329a <rcl_timer_init+0x132>
 8013242:	2250      	movs	r2, #80	@ 0x50
 8013244:	a916      	add	r1, sp, #88	@ 0x58
 8013246:	f004 fed6 	bl	8017ff6 <memcpy>
 801324a:	e7a3      	b.n	8013194 <rcl_timer_init+0x2c>
 801324c:	260b      	movs	r6, #11
 801324e:	4630      	mov	r0, r6
 8013250:	b02a      	add	sp, #168	@ 0xa8
 8013252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013256:	2001      	movs	r0, #1
 8013258:	2100      	movs	r1, #0
 801325a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801325e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013262:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013266:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801326a:	4a13      	ldr	r2, [pc, #76]	@ (80132b8 <rcl_timer_init+0x150>)
 801326c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013270:	9405      	str	r4, [sp, #20]
 8013272:	9204      	str	r2, [sp, #16]
 8013274:	ab12      	add	r3, sp, #72	@ 0x48
 8013276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013278:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801327c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013280:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8013284:	4628      	mov	r0, r5
 8013286:	f7ff fe0f 	bl	8012ea8 <rcl_clock_add_jump_callback>
 801328a:	4682      	mov	sl, r0
 801328c:	2800      	cmp	r0, #0
 801328e:	d0ae      	beq.n	80131ee <rcl_timer_init+0x86>
 8013290:	4648      	mov	r0, r9
 8013292:	f004 f89b 	bl	80173cc <rcl_guard_condition_fini>
 8013296:	4656      	mov	r6, sl
 8013298:	e77c      	b.n	8013194 <rcl_timer_init+0x2c>
 801329a:	4648      	mov	r0, r9
 801329c:	f004 f896 	bl	80173cc <rcl_guard_condition_fini>
 80132a0:	4905      	ldr	r1, [pc, #20]	@ (80132b8 <rcl_timer_init+0x150>)
 80132a2:	4622      	mov	r2, r4
 80132a4:	4628      	mov	r0, r5
 80132a6:	f7ff fe61 	bl	8012f6c <rcl_clock_remove_jump_callback>
 80132aa:	260a      	movs	r6, #10
 80132ac:	e772      	b.n	8013194 <rcl_timer_init+0x2c>
 80132ae:	bf00      	nop
	...
 80132b8:	08013029 	.word	0x08013029

080132bc <rcl_timer_call>:
 80132bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c0:	b087      	sub	sp, #28
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d06d      	beq.n	80133a2 <rcl_timer_call+0xe6>
 80132c6:	6803      	ldr	r3, [r0, #0]
 80132c8:	4604      	mov	r4, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d063      	beq.n	8013396 <rcl_timer_call+0xda>
 80132ce:	f3bf 8f5b 	dmb	ish
 80132d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80132d6:	f3bf 8f5b 	dmb	ish
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d150      	bne.n	8013380 <rcl_timer_call+0xc4>
 80132de:	6803      	ldr	r3, [r0, #0]
 80132e0:	a904      	add	r1, sp, #16
 80132e2:	6818      	ldr	r0, [r3, #0]
 80132e4:	f7ff fdd4 	bl	8012e90 <rcl_clock_get_now>
 80132e8:	4605      	mov	r5, r0
 80132ea:	2800      	cmp	r0, #0
 80132ec:	d14a      	bne.n	8013384 <rcl_timer_call+0xc8>
 80132ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	db4a      	blt.n	801338c <rcl_timer_call+0xd0>
 80132f6:	6820      	ldr	r0, [r4, #0]
 80132f8:	f04f 0a05 	mov.w	sl, #5
 80132fc:	f8cd a000 	str.w	sl, [sp]
 8013300:	3020      	adds	r0, #32
 8013302:	f001 fd0d 	bl	8014d20 <__atomic_exchange_8>
 8013306:	6823      	ldr	r3, [r4, #0]
 8013308:	f3bf 8f5b 	dmb	ish
 801330c:	4680      	mov	r8, r0
 801330e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013312:	f3bf 8f5b 	dmb	ish
 8013316:	6820      	ldr	r0, [r4, #0]
 8013318:	4689      	mov	r9, r1
 801331a:	3028      	adds	r0, #40	@ 0x28
 801331c:	4651      	mov	r1, sl
 801331e:	f001 fc93 	bl	8014c48 <__atomic_load_8>
 8013322:	4606      	mov	r6, r0
 8013324:	6820      	ldr	r0, [r4, #0]
 8013326:	460f      	mov	r7, r1
 8013328:	3018      	adds	r0, #24
 801332a:	4651      	mov	r1, sl
 801332c:	f001 fc8c 	bl	8014c48 <__atomic_load_8>
 8013330:	1836      	adds	r6, r6, r0
 8013332:	4602      	mov	r2, r0
 8013334:	4682      	mov	sl, r0
 8013336:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801333a:	eb47 0701 	adc.w	r7, r7, r1
 801333e:	4286      	cmp	r6, r0
 8013340:	460b      	mov	r3, r1
 8013342:	eb77 010c 	sbcs.w	r1, r7, ip
 8013346:	da04      	bge.n	8013352 <rcl_timer_call+0x96>
 8013348:	ea53 0102 	orrs.w	r1, r3, r2
 801334c:	d12e      	bne.n	80133ac <rcl_timer_call+0xf0>
 801334e:	4606      	mov	r6, r0
 8013350:	4667      	mov	r7, ip
 8013352:	6820      	ldr	r0, [r4, #0]
 8013354:	2105      	movs	r1, #5
 8013356:	4632      	mov	r2, r6
 8013358:	463b      	mov	r3, r7
 801335a:	3028      	adds	r0, #40	@ 0x28
 801335c:	9100      	str	r1, [sp, #0]
 801335e:	f001 fca9 	bl	8014cb4 <__atomic_store_8>
 8013362:	f1bb 0f00 	cmp.w	fp, #0
 8013366:	d00d      	beq.n	8013384 <rcl_timer_call+0xc8>
 8013368:	9a04      	ldr	r2, [sp, #16]
 801336a:	9b05      	ldr	r3, [sp, #20]
 801336c:	ebb2 0208 	subs.w	r2, r2, r8
 8013370:	4620      	mov	r0, r4
 8013372:	eb63 0309 	sbc.w	r3, r3, r9
 8013376:	47d8      	blx	fp
 8013378:	4628      	mov	r0, r5
 801337a:	b007      	add	sp, #28
 801337c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013380:	f240 3521 	movw	r5, #801	@ 0x321
 8013384:	4628      	mov	r0, r5
 8013386:	b007      	add	sp, #28
 8013388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801338c:	2501      	movs	r5, #1
 801338e:	4628      	mov	r0, r5
 8013390:	b007      	add	sp, #28
 8013392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013396:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801339a:	4628      	mov	r0, r5
 801339c:	b007      	add	sp, #28
 801339e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a2:	250b      	movs	r5, #11
 80133a4:	4628      	mov	r0, r5
 80133a6:	b007      	add	sp, #28
 80133a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ac:	1b80      	subs	r0, r0, r6
 80133ae:	eb6c 0107 	sbc.w	r1, ip, r7
 80133b2:	3801      	subs	r0, #1
 80133b4:	f161 0100 	sbc.w	r1, r1, #0
 80133b8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80133bc:	f7ec ff98 	bl	80002f0 <__aeabi_ldivmod>
 80133c0:	9b02      	ldr	r3, [sp, #8]
 80133c2:	3001      	adds	r0, #1
 80133c4:	f141 0100 	adc.w	r1, r1, #0
 80133c8:	fb00 f303 	mul.w	r3, r0, r3
 80133cc:	fb01 330a 	mla	r3, r1, sl, r3
 80133d0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80133d4:	1986      	adds	r6, r0, r6
 80133d6:	4453      	add	r3, sl
 80133d8:	eb43 0707 	adc.w	r7, r3, r7
 80133dc:	e7b9      	b.n	8013352 <rcl_timer_call+0x96>
 80133de:	bf00      	nop

080133e0 <rcl_timer_is_ready>:
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	b378      	cbz	r0, 8013446 <rcl_timer_is_ready+0x66>
 80133e6:	6803      	ldr	r3, [r0, #0]
 80133e8:	4604      	mov	r4, r0
 80133ea:	b383      	cbz	r3, 801344e <rcl_timer_is_ready+0x6e>
 80133ec:	460d      	mov	r5, r1
 80133ee:	b351      	cbz	r1, 8013446 <rcl_timer_is_ready+0x66>
 80133f0:	f3bf 8f5b 	dmb	ish
 80133f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80133f8:	f3bf 8f5b 	dmb	ish
 80133fc:	b953      	cbnz	r3, 8013414 <rcl_timer_is_ready+0x34>
 80133fe:	6803      	ldr	r3, [r0, #0]
 8013400:	4669      	mov	r1, sp
 8013402:	6818      	ldr	r0, [r3, #0]
 8013404:	f7ff fd44 	bl	8012e90 <rcl_clock_get_now>
 8013408:	4606      	mov	r6, r0
 801340a:	b140      	cbz	r0, 801341e <rcl_timer_is_ready+0x3e>
 801340c:	f240 3321 	movw	r3, #801	@ 0x321
 8013410:	4298      	cmp	r0, r3
 8013412:	d101      	bne.n	8013418 <rcl_timer_is_ready+0x38>
 8013414:	2600      	movs	r6, #0
 8013416:	702e      	strb	r6, [r5, #0]
 8013418:	4630      	mov	r0, r6
 801341a:	b002      	add	sp, #8
 801341c:	bd70      	pop	{r4, r5, r6, pc}
 801341e:	6820      	ldr	r0, [r4, #0]
 8013420:	2105      	movs	r1, #5
 8013422:	3028      	adds	r0, #40	@ 0x28
 8013424:	f001 fc10 	bl	8014c48 <__atomic_load_8>
 8013428:	9b00      	ldr	r3, [sp, #0]
 801342a:	1ac0      	subs	r0, r0, r3
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	eb61 0103 	sbc.w	r1, r1, r3
 8013432:	2801      	cmp	r0, #1
 8013434:	f171 0300 	sbcs.w	r3, r1, #0
 8013438:	bfb4      	ite	lt
 801343a:	2301      	movlt	r3, #1
 801343c:	2300      	movge	r3, #0
 801343e:	4630      	mov	r0, r6
 8013440:	702b      	strb	r3, [r5, #0]
 8013442:	b002      	add	sp, #8
 8013444:	bd70      	pop	{r4, r5, r6, pc}
 8013446:	260b      	movs	r6, #11
 8013448:	4630      	mov	r0, r6
 801344a:	b002      	add	sp, #8
 801344c:	bd70      	pop	{r4, r5, r6, pc}
 801344e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013452:	e7e1      	b.n	8013418 <rcl_timer_is_ready+0x38>

08013454 <rcl_timer_get_time_until_next_call>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	b330      	cbz	r0, 80134a8 <rcl_timer_get_time_until_next_call+0x54>
 801345a:	6803      	ldr	r3, [r0, #0]
 801345c:	4604      	mov	r4, r0
 801345e:	b33b      	cbz	r3, 80134b0 <rcl_timer_get_time_until_next_call+0x5c>
 8013460:	460d      	mov	r5, r1
 8013462:	b309      	cbz	r1, 80134a8 <rcl_timer_get_time_until_next_call+0x54>
 8013464:	f3bf 8f5b 	dmb	ish
 8013468:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801346c:	f3bf 8f5b 	dmb	ish
 8013470:	b9ab      	cbnz	r3, 801349e <rcl_timer_get_time_until_next_call+0x4a>
 8013472:	6803      	ldr	r3, [r0, #0]
 8013474:	4669      	mov	r1, sp
 8013476:	6818      	ldr	r0, [r3, #0]
 8013478:	f7ff fd0a 	bl	8012e90 <rcl_clock_get_now>
 801347c:	4606      	mov	r6, r0
 801347e:	b958      	cbnz	r0, 8013498 <rcl_timer_get_time_until_next_call+0x44>
 8013480:	6820      	ldr	r0, [r4, #0]
 8013482:	2105      	movs	r1, #5
 8013484:	3028      	adds	r0, #40	@ 0x28
 8013486:	f001 fbdf 	bl	8014c48 <__atomic_load_8>
 801348a:	9b00      	ldr	r3, [sp, #0]
 801348c:	1ac0      	subs	r0, r0, r3
 801348e:	9b01      	ldr	r3, [sp, #4]
 8013490:	6028      	str	r0, [r5, #0]
 8013492:	eb61 0103 	sbc.w	r1, r1, r3
 8013496:	6069      	str	r1, [r5, #4]
 8013498:	4630      	mov	r0, r6
 801349a:	b002      	add	sp, #8
 801349c:	bd70      	pop	{r4, r5, r6, pc}
 801349e:	f240 3621 	movw	r6, #801	@ 0x321
 80134a2:	4630      	mov	r0, r6
 80134a4:	b002      	add	sp, #8
 80134a6:	bd70      	pop	{r4, r5, r6, pc}
 80134a8:	260b      	movs	r6, #11
 80134aa:	4630      	mov	r0, r6
 80134ac:	b002      	add	sp, #8
 80134ae:	bd70      	pop	{r4, r5, r6, pc}
 80134b0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80134b4:	e7f0      	b.n	8013498 <rcl_timer_get_time_until_next_call+0x44>
 80134b6:	bf00      	nop

080134b8 <rcl_timer_get_guard_condition>:
 80134b8:	b130      	cbz	r0, 80134c8 <rcl_timer_get_guard_condition+0x10>
 80134ba:	6800      	ldr	r0, [r0, #0]
 80134bc:	b120      	cbz	r0, 80134c8 <rcl_timer_get_guard_condition+0x10>
 80134be:	68c3      	ldr	r3, [r0, #12]
 80134c0:	b10b      	cbz	r3, 80134c6 <rcl_timer_get_guard_condition+0xe>
 80134c2:	3008      	adds	r0, #8
 80134c4:	4770      	bx	lr
 80134c6:	4618      	mov	r0, r3
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop

080134cc <rcl_validate_enclave_name_with_size>:
 80134cc:	b378      	cbz	r0, 801352e <rcl_validate_enclave_name_with_size+0x62>
 80134ce:	b570      	push	{r4, r5, r6, lr}
 80134d0:	4615      	mov	r5, r2
 80134d2:	b0c2      	sub	sp, #264	@ 0x108
 80134d4:	b302      	cbz	r2, 8013518 <rcl_validate_enclave_name_with_size+0x4c>
 80134d6:	461e      	mov	r6, r3
 80134d8:	466a      	mov	r2, sp
 80134da:	ab01      	add	r3, sp, #4
 80134dc:	460c      	mov	r4, r1
 80134de:	f002 f815 	bl	801550c <rmw_validate_namespace_with_size>
 80134e2:	4684      	mov	ip, r0
 80134e4:	b9e8      	cbnz	r0, 8013522 <rcl_validate_enclave_name_with_size+0x56>
 80134e6:	9b00      	ldr	r3, [sp, #0]
 80134e8:	b923      	cbnz	r3, 80134f4 <rcl_validate_enclave_name_with_size+0x28>
 80134ea:	2300      	movs	r3, #0
 80134ec:	602b      	str	r3, [r5, #0]
 80134ee:	4660      	mov	r0, ip
 80134f0:	b042      	add	sp, #264	@ 0x108
 80134f2:	bd70      	pop	{r4, r5, r6, pc}
 80134f4:	2b07      	cmp	r3, #7
 80134f6:	d007      	beq.n	8013508 <rcl_validate_enclave_name_with_size+0x3c>
 80134f8:	1e5a      	subs	r2, r3, #1
 80134fa:	2a05      	cmp	r2, #5
 80134fc:	d833      	bhi.n	8013566 <rcl_validate_enclave_name_with_size+0x9a>
 80134fe:	e8df f002 	tbb	[pc, r2]
 8013502:	2c2f      	.short	0x2c2f
 8013504:	1a232629 	.word	0x1a232629
 8013508:	2cff      	cmp	r4, #255	@ 0xff
 801350a:	d9ee      	bls.n	80134ea <rcl_validate_enclave_name_with_size+0x1e>
 801350c:	602b      	str	r3, [r5, #0]
 801350e:	2e00      	cmp	r6, #0
 8013510:	d0ed      	beq.n	80134ee <rcl_validate_enclave_name_with_size+0x22>
 8013512:	23fe      	movs	r3, #254	@ 0xfe
 8013514:	6033      	str	r3, [r6, #0]
 8013516:	e7ea      	b.n	80134ee <rcl_validate_enclave_name_with_size+0x22>
 8013518:	f04f 0c0b 	mov.w	ip, #11
 801351c:	4660      	mov	r0, ip
 801351e:	b042      	add	sp, #264	@ 0x108
 8013520:	bd70      	pop	{r4, r5, r6, pc}
 8013522:	f7fe fe63 	bl	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 8013526:	4684      	mov	ip, r0
 8013528:	4660      	mov	r0, ip
 801352a:	b042      	add	sp, #264	@ 0x108
 801352c:	bd70      	pop	{r4, r5, r6, pc}
 801352e:	f04f 0c0b 	mov.w	ip, #11
 8013532:	4660      	mov	r0, ip
 8013534:	4770      	bx	lr
 8013536:	2306      	movs	r3, #6
 8013538:	602b      	str	r3, [r5, #0]
 801353a:	2e00      	cmp	r6, #0
 801353c:	d0d7      	beq.n	80134ee <rcl_validate_enclave_name_with_size+0x22>
 801353e:	9b01      	ldr	r3, [sp, #4]
 8013540:	6033      	str	r3, [r6, #0]
 8013542:	4660      	mov	r0, ip
 8013544:	b042      	add	sp, #264	@ 0x108
 8013546:	bd70      	pop	{r4, r5, r6, pc}
 8013548:	2305      	movs	r3, #5
 801354a:	602b      	str	r3, [r5, #0]
 801354c:	e7f5      	b.n	801353a <rcl_validate_enclave_name_with_size+0x6e>
 801354e:	2304      	movs	r3, #4
 8013550:	602b      	str	r3, [r5, #0]
 8013552:	e7f2      	b.n	801353a <rcl_validate_enclave_name_with_size+0x6e>
 8013554:	2303      	movs	r3, #3
 8013556:	602b      	str	r3, [r5, #0]
 8013558:	e7ef      	b.n	801353a <rcl_validate_enclave_name_with_size+0x6e>
 801355a:	2302      	movs	r3, #2
 801355c:	602b      	str	r3, [r5, #0]
 801355e:	e7ec      	b.n	801353a <rcl_validate_enclave_name_with_size+0x6e>
 8013560:	2301      	movs	r3, #1
 8013562:	602b      	str	r3, [r5, #0]
 8013564:	e7e9      	b.n	801353a <rcl_validate_enclave_name_with_size+0x6e>
 8013566:	4a04      	ldr	r2, [pc, #16]	@ (8013578 <rcl_validate_enclave_name_with_size+0xac>)
 8013568:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801356c:	a802      	add	r0, sp, #8
 801356e:	f001 fd25 	bl	8014fbc <rcutils_snprintf>
 8013572:	f04f 0c01 	mov.w	ip, #1
 8013576:	e7ba      	b.n	80134ee <rcl_validate_enclave_name_with_size+0x22>
 8013578:	080196c8 	.word	0x080196c8

0801357c <rcl_validate_enclave_name>:
 801357c:	b168      	cbz	r0, 801359a <rcl_validate_enclave_name+0x1e>
 801357e:	b570      	push	{r4, r5, r6, lr}
 8013580:	460d      	mov	r5, r1
 8013582:	4616      	mov	r6, r2
 8013584:	4604      	mov	r4, r0
 8013586:	f7ec fe55 	bl	8000234 <strlen>
 801358a:	4633      	mov	r3, r6
 801358c:	4601      	mov	r1, r0
 801358e:	462a      	mov	r2, r5
 8013590:	4620      	mov	r0, r4
 8013592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013596:	f7ff bf99 	b.w	80134cc <rcl_validate_enclave_name_with_size>
 801359a:	200b      	movs	r0, #11
 801359c:	4770      	bx	lr
 801359e:	bf00      	nop

080135a0 <rcl_get_zero_initialized_wait_set>:
 80135a0:	b510      	push	{r4, lr}
 80135a2:	4c08      	ldr	r4, [pc, #32]	@ (80135c4 <rcl_get_zero_initialized_wait_set+0x24>)
 80135a4:	4686      	mov	lr, r0
 80135a6:	4684      	mov	ip, r0
 80135a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135ba:	6823      	ldr	r3, [r4, #0]
 80135bc:	f8cc 3000 	str.w	r3, [ip]
 80135c0:	4670      	mov	r0, lr
 80135c2:	bd10      	pop	{r4, pc}
 80135c4:	08019728 	.word	0x08019728

080135c8 <rcl_wait_set_is_valid>:
 80135c8:	b118      	cbz	r0, 80135d2 <rcl_wait_set_is_valid+0xa>
 80135ca:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80135cc:	3800      	subs	r0, #0
 80135ce:	bf18      	it	ne
 80135d0:	2001      	movne	r0, #1
 80135d2:	4770      	bx	lr

080135d4 <rcl_wait_set_fini>:
 80135d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d8:	b082      	sub	sp, #8
 80135da:	2800      	cmp	r0, #0
 80135dc:	f000 8095 	beq.w	801370a <rcl_wait_set_fini+0x136>
 80135e0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80135e2:	4604      	mov	r4, r0
 80135e4:	2e00      	cmp	r6, #0
 80135e6:	f000 808c 	beq.w	8013702 <rcl_wait_set_fini+0x12e>
 80135ea:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80135ec:	f002 fd48 	bl	8016080 <rmw_destroy_wait_set>
 80135f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135f2:	1e06      	subs	r6, r0, #0
 80135f4:	bf18      	it	ne
 80135f6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80135fa:	2d00      	cmp	r5, #0
 80135fc:	f000 8081 	beq.w	8013702 <rcl_wait_set_fini+0x12e>
 8013600:	6820      	ldr	r0, [r4, #0]
 8013602:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013606:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013608:	2700      	movs	r7, #0
 801360a:	6067      	str	r7, [r4, #4]
 801360c:	602f      	str	r7, [r5, #0]
 801360e:	b120      	cbz	r0, 801361a <rcl_wait_set_fini+0x46>
 8013610:	9101      	str	r1, [sp, #4]
 8013612:	47c0      	blx	r8
 8013614:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013616:	9901      	ldr	r1, [sp, #4]
 8013618:	6027      	str	r7, [r4, #0]
 801361a:	68a8      	ldr	r0, [r5, #8]
 801361c:	b120      	cbz	r0, 8013628 <rcl_wait_set_fini+0x54>
 801361e:	47c0      	blx	r8
 8013620:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013622:	2300      	movs	r3, #0
 8013624:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013628:	68a0      	ldr	r0, [r4, #8]
 801362a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801362c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801362e:	f04f 0800 	mov.w	r8, #0
 8013632:	f8c4 800c 	str.w	r8, [r4, #12]
 8013636:	f8c5 800c 	str.w	r8, [r5, #12]
 801363a:	b128      	cbz	r0, 8013648 <rcl_wait_set_fini+0x74>
 801363c:	47b8      	blx	r7
 801363e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013640:	f8c4 8008 	str.w	r8, [r4, #8]
 8013644:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013646:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013648:	6968      	ldr	r0, [r5, #20]
 801364a:	f04f 0800 	mov.w	r8, #0
 801364e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013652:	b128      	cbz	r0, 8013660 <rcl_wait_set_fini+0x8c>
 8013654:	47b8      	blx	r7
 8013656:	f8c5 8014 	str.w	r8, [r5, #20]
 801365a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801365c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801365e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013660:	6920      	ldr	r0, [r4, #16]
 8013662:	f04f 0800 	mov.w	r8, #0
 8013666:	f8c4 8014 	str.w	r8, [r4, #20]
 801366a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801366e:	b128      	cbz	r0, 801367c <rcl_wait_set_fini+0xa8>
 8013670:	47b8      	blx	r7
 8013672:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013674:	f8c4 8010 	str.w	r8, [r4, #16]
 8013678:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801367a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801367c:	69a0      	ldr	r0, [r4, #24]
 801367e:	f04f 0800 	mov.w	r8, #0
 8013682:	f8c4 801c 	str.w	r8, [r4, #28]
 8013686:	f8c5 8018 	str.w	r8, [r5, #24]
 801368a:	b128      	cbz	r0, 8013698 <rcl_wait_set_fini+0xc4>
 801368c:	9101      	str	r1, [sp, #4]
 801368e:	47b8      	blx	r7
 8013690:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013692:	9901      	ldr	r1, [sp, #4]
 8013694:	f8c4 8018 	str.w	r8, [r4, #24]
 8013698:	6a28      	ldr	r0, [r5, #32]
 801369a:	b120      	cbz	r0, 80136a6 <rcl_wait_set_fini+0xd2>
 801369c:	47b8      	blx	r7
 801369e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136a0:	2300      	movs	r3, #0
 80136a2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80136a6:	6a20      	ldr	r0, [r4, #32]
 80136a8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80136ac:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80136ae:	2700      	movs	r7, #0
 80136b0:	6267      	str	r7, [r4, #36]	@ 0x24
 80136b2:	626f      	str	r7, [r5, #36]	@ 0x24
 80136b4:	b120      	cbz	r0, 80136c0 <rcl_wait_set_fini+0xec>
 80136b6:	9101      	str	r1, [sp, #4]
 80136b8:	47c0      	blx	r8
 80136ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136bc:	9901      	ldr	r1, [sp, #4]
 80136be:	6227      	str	r7, [r4, #32]
 80136c0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80136c2:	b120      	cbz	r0, 80136ce <rcl_wait_set_fini+0xfa>
 80136c4:	47c0      	blx	r8
 80136c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136c8:	2300      	movs	r3, #0
 80136ca:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80136ce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80136d0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80136d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80136d6:	2700      	movs	r7, #0
 80136d8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80136da:	632f      	str	r7, [r5, #48]	@ 0x30
 80136dc:	b120      	cbz	r0, 80136e8 <rcl_wait_set_fini+0x114>
 80136de:	9101      	str	r1, [sp, #4]
 80136e0:	47c0      	blx	r8
 80136e2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136e4:	9901      	ldr	r1, [sp, #4]
 80136e6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80136e8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80136ea:	b120      	cbz	r0, 80136f6 <rcl_wait_set_fini+0x122>
 80136ec:	47c0      	blx	r8
 80136ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136f0:	2300      	movs	r3, #0
 80136f2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80136f6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80136f8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80136fa:	4628      	mov	r0, r5
 80136fc:	4798      	blx	r3
 80136fe:	2300      	movs	r3, #0
 8013700:	6323      	str	r3, [r4, #48]	@ 0x30
 8013702:	4630      	mov	r0, r6
 8013704:	b002      	add	sp, #8
 8013706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801370a:	260b      	movs	r6, #11
 801370c:	4630      	mov	r0, r6
 801370e:	b002      	add	sp, #8
 8013710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013714 <rcl_wait_set_add_subscription>:
 8013714:	b318      	cbz	r0, 801375e <rcl_wait_set_add_subscription+0x4a>
 8013716:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013718:	b570      	push	{r4, r5, r6, lr}
 801371a:	4604      	mov	r4, r0
 801371c:	b30b      	cbz	r3, 8013762 <rcl_wait_set_add_subscription+0x4e>
 801371e:	b319      	cbz	r1, 8013768 <rcl_wait_set_add_subscription+0x54>
 8013720:	681d      	ldr	r5, [r3, #0]
 8013722:	6840      	ldr	r0, [r0, #4]
 8013724:	4285      	cmp	r5, r0
 8013726:	d217      	bcs.n	8013758 <rcl_wait_set_add_subscription+0x44>
 8013728:	6820      	ldr	r0, [r4, #0]
 801372a:	1c6e      	adds	r6, r5, #1
 801372c:	601e      	str	r6, [r3, #0]
 801372e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013732:	b102      	cbz	r2, 8013736 <rcl_wait_set_add_subscription+0x22>
 8013734:	6015      	str	r5, [r2, #0]
 8013736:	4608      	mov	r0, r1
 8013738:	f7ff fb0a 	bl	8012d50 <rcl_subscription_get_rmw_handle>
 801373c:	b150      	cbz	r0, 8013754 <rcl_wait_set_add_subscription+0x40>
 801373e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013740:	6842      	ldr	r2, [r0, #4]
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013748:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801374a:	6853      	ldr	r3, [r2, #4]
 801374c:	3301      	adds	r3, #1
 801374e:	2000      	movs	r0, #0
 8013750:	6053      	str	r3, [r2, #4]
 8013752:	bd70      	pop	{r4, r5, r6, pc}
 8013754:	2001      	movs	r0, #1
 8013756:	bd70      	pop	{r4, r5, r6, pc}
 8013758:	f240 3086 	movw	r0, #902	@ 0x386
 801375c:	bd70      	pop	{r4, r5, r6, pc}
 801375e:	200b      	movs	r0, #11
 8013760:	4770      	bx	lr
 8013762:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013766:	bd70      	pop	{r4, r5, r6, pc}
 8013768:	200b      	movs	r0, #11
 801376a:	bd70      	pop	{r4, r5, r6, pc}

0801376c <rcl_wait_set_clear>:
 801376c:	2800      	cmp	r0, #0
 801376e:	d073      	beq.n	8013858 <rcl_wait_set_clear+0xec>
 8013770:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013772:	b510      	push	{r4, lr}
 8013774:	4604      	mov	r4, r0
 8013776:	2b00      	cmp	r3, #0
 8013778:	d070      	beq.n	801385c <rcl_wait_set_clear+0xf0>
 801377a:	6800      	ldr	r0, [r0, #0]
 801377c:	b138      	cbz	r0, 801378e <rcl_wait_set_clear+0x22>
 801377e:	6862      	ldr	r2, [r4, #4]
 8013780:	2100      	movs	r1, #0
 8013782:	0092      	lsls	r2, r2, #2
 8013784:	f004 fb6e 	bl	8017e64 <memset>
 8013788:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801378a:	2200      	movs	r2, #0
 801378c:	601a      	str	r2, [r3, #0]
 801378e:	68a0      	ldr	r0, [r4, #8]
 8013790:	b138      	cbz	r0, 80137a2 <rcl_wait_set_clear+0x36>
 8013792:	68e2      	ldr	r2, [r4, #12]
 8013794:	2100      	movs	r1, #0
 8013796:	0092      	lsls	r2, r2, #2
 8013798:	f004 fb64 	bl	8017e64 <memset>
 801379c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801379e:	2200      	movs	r2, #0
 80137a0:	60da      	str	r2, [r3, #12]
 80137a2:	69a0      	ldr	r0, [r4, #24]
 80137a4:	b138      	cbz	r0, 80137b6 <rcl_wait_set_clear+0x4a>
 80137a6:	69e2      	ldr	r2, [r4, #28]
 80137a8:	2100      	movs	r1, #0
 80137aa:	0092      	lsls	r2, r2, #2
 80137ac:	f004 fb5a 	bl	8017e64 <memset>
 80137b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137b2:	2200      	movs	r2, #0
 80137b4:	619a      	str	r2, [r3, #24]
 80137b6:	6a20      	ldr	r0, [r4, #32]
 80137b8:	b138      	cbz	r0, 80137ca <rcl_wait_set_clear+0x5e>
 80137ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80137bc:	2100      	movs	r1, #0
 80137be:	0092      	lsls	r2, r2, #2
 80137c0:	f004 fb50 	bl	8017e64 <memset>
 80137c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137c6:	2200      	movs	r2, #0
 80137c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80137ca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80137cc:	b138      	cbz	r0, 80137de <rcl_wait_set_clear+0x72>
 80137ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80137d0:	2100      	movs	r1, #0
 80137d2:	0092      	lsls	r2, r2, #2
 80137d4:	f004 fb46 	bl	8017e64 <memset>
 80137d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137da:	2200      	movs	r2, #0
 80137dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80137de:	6920      	ldr	r0, [r4, #16]
 80137e0:	b138      	cbz	r0, 80137f2 <rcl_wait_set_clear+0x86>
 80137e2:	6962      	ldr	r2, [r4, #20]
 80137e4:	2100      	movs	r1, #0
 80137e6:	0092      	lsls	r2, r2, #2
 80137e8:	f004 fb3c 	bl	8017e64 <memset>
 80137ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137ee:	2200      	movs	r2, #0
 80137f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80137f2:	6898      	ldr	r0, [r3, #8]
 80137f4:	b138      	cbz	r0, 8013806 <rcl_wait_set_clear+0x9a>
 80137f6:	685a      	ldr	r2, [r3, #4]
 80137f8:	2100      	movs	r1, #0
 80137fa:	0092      	lsls	r2, r2, #2
 80137fc:	f004 fb32 	bl	8017e64 <memset>
 8013800:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013802:	2200      	movs	r2, #0
 8013804:	605a      	str	r2, [r3, #4]
 8013806:	6958      	ldr	r0, [r3, #20]
 8013808:	b138      	cbz	r0, 801381a <rcl_wait_set_clear+0xae>
 801380a:	691a      	ldr	r2, [r3, #16]
 801380c:	2100      	movs	r1, #0
 801380e:	0092      	lsls	r2, r2, #2
 8013810:	f004 fb28 	bl	8017e64 <memset>
 8013814:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013816:	2200      	movs	r2, #0
 8013818:	611a      	str	r2, [r3, #16]
 801381a:	6a18      	ldr	r0, [r3, #32]
 801381c:	b138      	cbz	r0, 801382e <rcl_wait_set_clear+0xc2>
 801381e:	69da      	ldr	r2, [r3, #28]
 8013820:	2100      	movs	r1, #0
 8013822:	0092      	lsls	r2, r2, #2
 8013824:	f004 fb1e 	bl	8017e64 <memset>
 8013828:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801382a:	2200      	movs	r2, #0
 801382c:	61da      	str	r2, [r3, #28]
 801382e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013830:	b138      	cbz	r0, 8013842 <rcl_wait_set_clear+0xd6>
 8013832:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013834:	2100      	movs	r1, #0
 8013836:	0092      	lsls	r2, r2, #2
 8013838:	f004 fb14 	bl	8017e64 <memset>
 801383c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801383e:	2200      	movs	r2, #0
 8013840:	629a      	str	r2, [r3, #40]	@ 0x28
 8013842:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013844:	b138      	cbz	r0, 8013856 <rcl_wait_set_clear+0xea>
 8013846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013848:	2100      	movs	r1, #0
 801384a:	0092      	lsls	r2, r2, #2
 801384c:	f004 fb0a 	bl	8017e64 <memset>
 8013850:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013852:	2000      	movs	r0, #0
 8013854:	6358      	str	r0, [r3, #52]	@ 0x34
 8013856:	bd10      	pop	{r4, pc}
 8013858:	200b      	movs	r0, #11
 801385a:	4770      	bx	lr
 801385c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013860:	bd10      	pop	{r4, pc}
 8013862:	bf00      	nop

08013864 <rcl_wait_set_resize>:
 8013864:	2800      	cmp	r0, #0
 8013866:	f000 8185 	beq.w	8013b74 <rcl_wait_set_resize+0x310>
 801386a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801386e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013870:	b083      	sub	sp, #12
 8013872:	4605      	mov	r5, r0
 8013874:	2c00      	cmp	r4, #0
 8013876:	f000 817f 	beq.w	8013b78 <rcl_wait_set_resize+0x314>
 801387a:	f04f 0900 	mov.w	r9, #0
 801387e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8013882:	461f      	mov	r7, r3
 8013884:	4688      	mov	r8, r1
 8013886:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801388a:	4616      	mov	r6, r2
 801388c:	f8c0 9004 	str.w	r9, [r0, #4]
 8013890:	f8c4 9000 	str.w	r9, [r4]
 8013894:	2900      	cmp	r1, #0
 8013896:	f000 80bd 	beq.w	8013a14 <rcl_wait_set_resize+0x1b0>
 801389a:	008c      	lsls	r4, r1, #2
 801389c:	6800      	ldr	r0, [r0, #0]
 801389e:	9301      	str	r3, [sp, #4]
 80138a0:	4652      	mov	r2, sl
 80138a2:	4621      	mov	r1, r4
 80138a4:	4798      	blx	r3
 80138a6:	9b01      	ldr	r3, [sp, #4]
 80138a8:	6028      	str	r0, [r5, #0]
 80138aa:	2800      	cmp	r0, #0
 80138ac:	f000 80cb 	beq.w	8013a46 <rcl_wait_set_resize+0x1e2>
 80138b0:	4622      	mov	r2, r4
 80138b2:	4649      	mov	r1, r9
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	f004 fad5 	bl	8017e64 <memset>
 80138ba:	f8c5 8004 	str.w	r8, [r5, #4]
 80138be:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80138c2:	9b01      	ldr	r3, [sp, #4]
 80138c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80138c8:	f8c8 9004 	str.w	r9, [r8, #4]
 80138cc:	4652      	mov	r2, sl
 80138ce:	4621      	mov	r1, r4
 80138d0:	4798      	blx	r3
 80138d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80138d8:	689b      	ldr	r3, [r3, #8]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 80ac 	beq.w	8013a38 <rcl_wait_set_resize+0x1d4>
 80138e0:	4622      	mov	r2, r4
 80138e2:	4649      	mov	r1, r9
 80138e4:	4618      	mov	r0, r3
 80138e6:	f004 fabd 	bl	8017e64 <memset>
 80138ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138ec:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138f0:	f04f 0800 	mov.w	r8, #0
 80138f4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80138f8:	f8c5 800c 	str.w	r8, [r5, #12]
 80138fc:	f8c4 800c 	str.w	r8, [r4, #12]
 8013900:	2e00      	cmp	r6, #0
 8013902:	f040 80a4 	bne.w	8013a4e <rcl_wait_set_resize+0x1ea>
 8013906:	68a8      	ldr	r0, [r5, #8]
 8013908:	b128      	cbz	r0, 8013916 <rcl_wait_set_resize+0xb2>
 801390a:	4649      	mov	r1, r9
 801390c:	4790      	blx	r2
 801390e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013910:	60ae      	str	r6, [r5, #8]
 8013912:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013916:	f04f 0800 	mov.w	r8, #0
 801391a:	19f6      	adds	r6, r6, r7
 801391c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013920:	f040 80ac 	bne.w	8013a7c <rcl_wait_set_resize+0x218>
 8013924:	6960      	ldr	r0, [r4, #20]
 8013926:	b130      	cbz	r0, 8013936 <rcl_wait_set_resize+0xd2>
 8013928:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801392a:	4649      	mov	r1, r9
 801392c:	4798      	blx	r3
 801392e:	6166      	str	r6, [r4, #20]
 8013930:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013932:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013936:	2600      	movs	r6, #0
 8013938:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801393c:	616e      	str	r6, [r5, #20]
 801393e:	6426      	str	r6, [r4, #64]	@ 0x40
 8013940:	2f00      	cmp	r7, #0
 8013942:	f040 80ad 	bne.w	8013aa0 <rcl_wait_set_resize+0x23c>
 8013946:	6928      	ldr	r0, [r5, #16]
 8013948:	b138      	cbz	r0, 801395a <rcl_wait_set_resize+0xf6>
 801394a:	4649      	mov	r1, r9
 801394c:	47d0      	blx	sl
 801394e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013950:	612f      	str	r7, [r5, #16]
 8013952:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013956:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801395a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801395c:	2600      	movs	r6, #0
 801395e:	61ee      	str	r6, [r5, #28]
 8013960:	61a6      	str	r6, [r4, #24]
 8013962:	2b00      	cmp	r3, #0
 8013964:	f040 80af 	bne.w	8013ac6 <rcl_wait_set_resize+0x262>
 8013968:	69a8      	ldr	r0, [r5, #24]
 801396a:	b120      	cbz	r0, 8013976 <rcl_wait_set_resize+0x112>
 801396c:	4649      	mov	r1, r9
 801396e:	47d0      	blx	sl
 8013970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013972:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013974:	61ab      	str	r3, [r5, #24]
 8013976:	6a20      	ldr	r0, [r4, #32]
 8013978:	b128      	cbz	r0, 8013986 <rcl_wait_set_resize+0x122>
 801397a:	4649      	mov	r1, r9
 801397c:	47d0      	blx	sl
 801397e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013980:	2300      	movs	r3, #0
 8013982:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013988:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801398a:	2600      	movs	r6, #0
 801398c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013990:	626e      	str	r6, [r5, #36]	@ 0x24
 8013992:	6266      	str	r6, [r4, #36]	@ 0x24
 8013994:	2b00      	cmp	r3, #0
 8013996:	f000 80b6 	beq.w	8013b06 <rcl_wait_set_resize+0x2a2>
 801399a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801399e:	6a28      	ldr	r0, [r5, #32]
 80139a0:	463a      	mov	r2, r7
 80139a2:	4651      	mov	r1, sl
 80139a4:	47c8      	blx	r9
 80139a6:	6228      	str	r0, [r5, #32]
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d04c      	beq.n	8013a46 <rcl_wait_set_resize+0x1e2>
 80139ac:	4652      	mov	r2, sl
 80139ae:	4631      	mov	r1, r6
 80139b0:	f004 fa58 	bl	8017e64 <memset>
 80139b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80139b8:	626b      	str	r3, [r5, #36]	@ 0x24
 80139ba:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80139bc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80139be:	463a      	mov	r2, r7
 80139c0:	4651      	mov	r1, sl
 80139c2:	47c8      	blx	r9
 80139c4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80139c6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80139c8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80139ca:	2c00      	cmp	r4, #0
 80139cc:	f000 80f0 	beq.w	8013bb0 <rcl_wait_set_resize+0x34c>
 80139d0:	4620      	mov	r0, r4
 80139d2:	4652      	mov	r2, sl
 80139d4:	4631      	mov	r1, r6
 80139d6:	f004 fa45 	bl	8017e64 <memset>
 80139da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139de:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80139e0:	2600      	movs	r6, #0
 80139e2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80139e6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80139e8:	6326      	str	r6, [r4, #48]	@ 0x30
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	f040 809d 	bne.w	8013b2a <rcl_wait_set_resize+0x2c6>
 80139f0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80139f2:	b120      	cbz	r0, 80139fe <rcl_wait_set_resize+0x19a>
 80139f4:	4639      	mov	r1, r7
 80139f6:	47c0      	blx	r8
 80139f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139fc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80139fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013a00:	b310      	cbz	r0, 8013a48 <rcl_wait_set_resize+0x1e4>
 8013a02:	4639      	mov	r1, r7
 8013a04:	47c0      	blx	r8
 8013a06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013a08:	2000      	movs	r0, #0
 8013a0a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013a0e:	b003      	add	sp, #12
 8013a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a14:	6800      	ldr	r0, [r0, #0]
 8013a16:	b120      	cbz	r0, 8013a22 <rcl_wait_set_resize+0x1be>
 8013a18:	4651      	mov	r1, sl
 8013a1a:	47d8      	blx	fp
 8013a1c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a1e:	f8c5 8000 	str.w	r8, [r5]
 8013a22:	68a0      	ldr	r0, [r4, #8]
 8013a24:	2800      	cmp	r0, #0
 8013a26:	f43f af61 	beq.w	80138ec <rcl_wait_set_resize+0x88>
 8013a2a:	4651      	mov	r1, sl
 8013a2c:	47d8      	blx	fp
 8013a2e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a30:	2300      	movs	r3, #0
 8013a32:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013a36:	e759      	b.n	80138ec <rcl_wait_set_resize+0x88>
 8013a38:	6828      	ldr	r0, [r5, #0]
 8013a3a:	9301      	str	r3, [sp, #4]
 8013a3c:	4651      	mov	r1, sl
 8013a3e:	47d8      	blx	fp
 8013a40:	9b01      	ldr	r3, [sp, #4]
 8013a42:	e9c5 3300 	strd	r3, r3, [r5]
 8013a46:	200a      	movs	r0, #10
 8013a48:	b003      	add	sp, #12
 8013a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a4e:	00b4      	lsls	r4, r6, #2
 8013a50:	68a8      	ldr	r0, [r5, #8]
 8013a52:	464a      	mov	r2, r9
 8013a54:	4621      	mov	r1, r4
 8013a56:	4798      	blx	r3
 8013a58:	60a8      	str	r0, [r5, #8]
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d0f3      	beq.n	8013a46 <rcl_wait_set_resize+0x1e2>
 8013a5e:	4622      	mov	r2, r4
 8013a60:	4641      	mov	r1, r8
 8013a62:	f004 f9ff 	bl	8017e64 <memset>
 8013a66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a68:	60ee      	str	r6, [r5, #12]
 8013a6a:	f04f 0800 	mov.w	r8, #0
 8013a6e:	19f6      	adds	r6, r6, r7
 8013a70:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a74:	f8c4 8010 	str.w	r8, [r4, #16]
 8013a78:	f43f af54 	beq.w	8013924 <rcl_wait_set_resize+0xc0>
 8013a7c:	00b6      	lsls	r6, r6, #2
 8013a7e:	464a      	mov	r2, r9
 8013a80:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013a82:	6960      	ldr	r0, [r4, #20]
 8013a84:	4631      	mov	r1, r6
 8013a86:	4798      	blx	r3
 8013a88:	4681      	mov	r9, r0
 8013a8a:	6160      	str	r0, [r4, #20]
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	d076      	beq.n	8013b7e <rcl_wait_set_resize+0x31a>
 8013a90:	4632      	mov	r2, r6
 8013a92:	4641      	mov	r1, r8
 8013a94:	f004 f9e6 	bl	8017e64 <memset>
 8013a98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a9a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a9e:	e74a      	b.n	8013936 <rcl_wait_set_resize+0xd2>
 8013aa0:	00bc      	lsls	r4, r7, #2
 8013aa2:	6928      	ldr	r0, [r5, #16]
 8013aa4:	464a      	mov	r2, r9
 8013aa6:	4621      	mov	r1, r4
 8013aa8:	47c0      	blx	r8
 8013aaa:	6128      	str	r0, [r5, #16]
 8013aac:	2800      	cmp	r0, #0
 8013aae:	d0ca      	beq.n	8013a46 <rcl_wait_set_resize+0x1e2>
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	f004 f9d6 	bl	8017e64 <memset>
 8013ab8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013aba:	616f      	str	r7, [r5, #20]
 8013abc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013ac0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013ac4:	e749      	b.n	801395a <rcl_wait_set_resize+0xf6>
 8013ac6:	009c      	lsls	r4, r3, #2
 8013ac8:	69a8      	ldr	r0, [r5, #24]
 8013aca:	464a      	mov	r2, r9
 8013acc:	4621      	mov	r1, r4
 8013ace:	47c0      	blx	r8
 8013ad0:	61a8      	str	r0, [r5, #24]
 8013ad2:	2800      	cmp	r0, #0
 8013ad4:	d0b7      	beq.n	8013a46 <rcl_wait_set_resize+0x1e2>
 8013ad6:	4622      	mov	r2, r4
 8013ad8:	4631      	mov	r1, r6
 8013ada:	f004 f9c3 	bl	8017e64 <memset>
 8013ade:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013ae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ae2:	61eb      	str	r3, [r5, #28]
 8013ae4:	6a38      	ldr	r0, [r7, #32]
 8013ae6:	61fe      	str	r6, [r7, #28]
 8013ae8:	464a      	mov	r2, r9
 8013aea:	4621      	mov	r1, r4
 8013aec:	47c0      	blx	r8
 8013aee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013af0:	6238      	str	r0, [r7, #32]
 8013af2:	6a1f      	ldr	r7, [r3, #32]
 8013af4:	2f00      	cmp	r7, #0
 8013af6:	d054      	beq.n	8013ba2 <rcl_wait_set_resize+0x33e>
 8013af8:	4622      	mov	r2, r4
 8013afa:	4631      	mov	r1, r6
 8013afc:	4638      	mov	r0, r7
 8013afe:	f004 f9b1 	bl	8017e64 <memset>
 8013b02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013b04:	e73f      	b.n	8013986 <rcl_wait_set_resize+0x122>
 8013b06:	6a28      	ldr	r0, [r5, #32]
 8013b08:	b120      	cbz	r0, 8013b14 <rcl_wait_set_resize+0x2b0>
 8013b0a:	4639      	mov	r1, r7
 8013b0c:	47c0      	blx	r8
 8013b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b10:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013b12:	622b      	str	r3, [r5, #32]
 8013b14:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013b16:	2800      	cmp	r0, #0
 8013b18:	f43f af60 	beq.w	80139dc <rcl_wait_set_resize+0x178>
 8013b1c:	4639      	mov	r1, r7
 8013b1e:	47c0      	blx	r8
 8013b20:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013b22:	2300      	movs	r3, #0
 8013b24:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013b28:	e758      	b.n	80139dc <rcl_wait_set_resize+0x178>
 8013b2a:	009c      	lsls	r4, r3, #2
 8013b2c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013b2e:	463a      	mov	r2, r7
 8013b30:	4621      	mov	r1, r4
 8013b32:	47c8      	blx	r9
 8013b34:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013b36:	2800      	cmp	r0, #0
 8013b38:	d085      	beq.n	8013a46 <rcl_wait_set_resize+0x1e2>
 8013b3a:	4622      	mov	r2, r4
 8013b3c:	4631      	mov	r1, r6
 8013b3e:	f004 f991 	bl	8017e64 <memset>
 8013b42:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013b46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b48:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013b4a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013b4e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013b52:	463a      	mov	r2, r7
 8013b54:	4621      	mov	r1, r4
 8013b56:	47c8      	blx	r9
 8013b58:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b5a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b60:	b36b      	cbz	r3, 8013bbe <rcl_wait_set_resize+0x35a>
 8013b62:	4622      	mov	r2, r4
 8013b64:	4631      	mov	r1, r6
 8013b66:	4618      	mov	r0, r3
 8013b68:	f004 f97c 	bl	8017e64 <memset>
 8013b6c:	4630      	mov	r0, r6
 8013b6e:	b003      	add	sp, #12
 8013b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b74:	200b      	movs	r0, #11
 8013b76:	4770      	bx	lr
 8013b78:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b7c:	e764      	b.n	8013a48 <rcl_wait_set_resize+0x1e4>
 8013b7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b80:	68a8      	ldr	r0, [r5, #8]
 8013b82:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b86:	4798      	blx	r3
 8013b88:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b8a:	6928      	ldr	r0, [r5, #16]
 8013b8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013b8e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013b90:	f8c5 900c 	str.w	r9, [r5, #12]
 8013b94:	f8c5 9008 	str.w	r9, [r5, #8]
 8013b98:	4790      	blx	r2
 8013b9a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013b9e:	200a      	movs	r0, #10
 8013ba0:	e752      	b.n	8013a48 <rcl_wait_set_resize+0x1e4>
 8013ba2:	69a8      	ldr	r0, [r5, #24]
 8013ba4:	4649      	mov	r1, r9
 8013ba6:	47d0      	blx	sl
 8013ba8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013bac:	200a      	movs	r0, #10
 8013bae:	e74b      	b.n	8013a48 <rcl_wait_set_resize+0x1e4>
 8013bb0:	6a28      	ldr	r0, [r5, #32]
 8013bb2:	4639      	mov	r1, r7
 8013bb4:	47c0      	blx	r8
 8013bb6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013bba:	200a      	movs	r0, #10
 8013bbc:	e744      	b.n	8013a48 <rcl_wait_set_resize+0x1e4>
 8013bbe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013bc0:	9301      	str	r3, [sp, #4]
 8013bc2:	4639      	mov	r1, r7
 8013bc4:	47c0      	blx	r8
 8013bc6:	9b01      	ldr	r3, [sp, #4]
 8013bc8:	200a      	movs	r0, #10
 8013bca:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013bce:	e73b      	b.n	8013a48 <rcl_wait_set_resize+0x1e4>

08013bd0 <rcl_wait_set_init>:
 8013bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bd4:	b084      	sub	sp, #16
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	a810      	add	r0, sp, #64	@ 0x40
 8013bda:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013bde:	460f      	mov	r7, r1
 8013be0:	4690      	mov	r8, r2
 8013be2:	4699      	mov	r9, r3
 8013be4:	f7f8 fb32 	bl	800c24c <rcutils_allocator_is_valid>
 8013be8:	2800      	cmp	r0, #0
 8013bea:	d06b      	beq.n	8013cc4 <rcl_wait_set_init+0xf4>
 8013bec:	2c00      	cmp	r4, #0
 8013bee:	d069      	beq.n	8013cc4 <rcl_wait_set_init+0xf4>
 8013bf0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013bf2:	b125      	cbz	r5, 8013bfe <rcl_wait_set_init+0x2e>
 8013bf4:	2564      	movs	r5, #100	@ 0x64
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	b004      	add	sp, #16
 8013bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bfe:	f1ba 0f00 	cmp.w	sl, #0
 8013c02:	d05f      	beq.n	8013cc4 <rcl_wait_set_init+0xf4>
 8013c04:	4650      	mov	r0, sl
 8013c06:	f7fe fb0f 	bl	8012228 <rcl_context_is_valid>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d067      	beq.n	8013cde <rcl_wait_set_init+0x10e>
 8013c0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013c10:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8013c12:	205c      	movs	r0, #92	@ 0x5c
 8013c14:	4798      	blx	r3
 8013c16:	6320      	str	r0, [r4, #48]	@ 0x30
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d062      	beq.n	8013ce2 <rcl_wait_set_init+0x112>
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	225c      	movs	r2, #92	@ 0x5c
 8013c20:	f004 f920 	bl	8017e64 <memset>
 8013c24:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013c28:	eb03 0e02 	add.w	lr, r3, r2
 8013c2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c2e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013c30:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013c34:	449e      	add	lr, r3
 8013c36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013c3a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013c3e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013c42:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013c46:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013c4a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013c4e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013c52:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013c56:	f8da a000 	ldr.w	sl, [sl]
 8013c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c5c:	44c6      	add	lr, r8
 8013c5e:	f8dc 3000 	ldr.w	r3, [ip]
 8013c62:	602b      	str	r3, [r5, #0]
 8013c64:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013c68:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013c6c:	f002 f9fe 	bl	801606c <rmw_create_wait_set>
 8013c70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c72:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8013c74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013c76:	b350      	cbz	r0, 8013cce <rcl_wait_set_init+0xfe>
 8013c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c7a:	9302      	str	r3, [sp, #8]
 8013c7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c7e:	9301      	str	r3, [sp, #4]
 8013c80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c82:	9300      	str	r3, [sp, #0]
 8013c84:	4642      	mov	r2, r8
 8013c86:	464b      	mov	r3, r9
 8013c88:	4639      	mov	r1, r7
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	f7ff fdea 	bl	8013864 <rcl_wait_set_resize>
 8013c90:	4605      	mov	r5, r0
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d0af      	beq.n	8013bf6 <rcl_wait_set_init+0x26>
 8013c96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c98:	bb2b      	cbnz	r3, 8013ce6 <rcl_wait_set_init+0x116>
 8013c9a:	2600      	movs	r6, #0
 8013c9c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013ca0:	9600      	str	r6, [sp, #0]
 8013ca2:	4633      	mov	r3, r6
 8013ca4:	4632      	mov	r2, r6
 8013ca6:	4631      	mov	r1, r6
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f7ff fddb 	bl	8013864 <rcl_wait_set_resize>
 8013cae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013cb0:	2800      	cmp	r0, #0
 8013cb2:	d0a0      	beq.n	8013bf6 <rcl_wait_set_init+0x26>
 8013cb4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013cb6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013cb8:	4798      	blx	r3
 8013cba:	4628      	mov	r0, r5
 8013cbc:	6326      	str	r6, [r4, #48]	@ 0x30
 8013cbe:	b004      	add	sp, #16
 8013cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cc4:	250b      	movs	r5, #11
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	b004      	add	sp, #16
 8013cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cce:	2501      	movs	r5, #1
 8013cd0:	f002 f9d6 	bl	8016080 <rmw_destroy_wait_set>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	bf18      	it	ne
 8013cd8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013cdc:	e7dd      	b.n	8013c9a <rcl_wait_set_init+0xca>
 8013cde:	2565      	movs	r5, #101	@ 0x65
 8013ce0:	e789      	b.n	8013bf6 <rcl_wait_set_init+0x26>
 8013ce2:	250a      	movs	r5, #10
 8013ce4:	e787      	b.n	8013bf6 <rcl_wait_set_init+0x26>
 8013ce6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013ce8:	e7f2      	b.n	8013cd0 <rcl_wait_set_init+0x100>
 8013cea:	bf00      	nop

08013cec <rcl_wait_set_add_guard_condition>:
 8013cec:	b318      	cbz	r0, 8013d36 <rcl_wait_set_add_guard_condition+0x4a>
 8013cee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013cf0:	b570      	push	{r4, r5, r6, lr}
 8013cf2:	4604      	mov	r4, r0
 8013cf4:	b30b      	cbz	r3, 8013d3a <rcl_wait_set_add_guard_condition+0x4e>
 8013cf6:	b319      	cbz	r1, 8013d40 <rcl_wait_set_add_guard_condition+0x54>
 8013cf8:	68dd      	ldr	r5, [r3, #12]
 8013cfa:	68c0      	ldr	r0, [r0, #12]
 8013cfc:	4285      	cmp	r5, r0
 8013cfe:	d217      	bcs.n	8013d30 <rcl_wait_set_add_guard_condition+0x44>
 8013d00:	68a0      	ldr	r0, [r4, #8]
 8013d02:	1c6e      	adds	r6, r5, #1
 8013d04:	60de      	str	r6, [r3, #12]
 8013d06:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013d0a:	b102      	cbz	r2, 8013d0e <rcl_wait_set_add_guard_condition+0x22>
 8013d0c:	6015      	str	r5, [r2, #0]
 8013d0e:	4608      	mov	r0, r1
 8013d10:	f003 fbae 	bl	8017470 <rcl_guard_condition_get_rmw_handle>
 8013d14:	b150      	cbz	r0, 8013d2c <rcl_wait_set_add_guard_condition+0x40>
 8013d16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d18:	6842      	ldr	r2, [r0, #4]
 8013d1a:	695b      	ldr	r3, [r3, #20]
 8013d1c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d20:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d22:	6913      	ldr	r3, [r2, #16]
 8013d24:	3301      	adds	r3, #1
 8013d26:	2000      	movs	r0, #0
 8013d28:	6113      	str	r3, [r2, #16]
 8013d2a:	bd70      	pop	{r4, r5, r6, pc}
 8013d2c:	2001      	movs	r0, #1
 8013d2e:	bd70      	pop	{r4, r5, r6, pc}
 8013d30:	f240 3086 	movw	r0, #902	@ 0x386
 8013d34:	bd70      	pop	{r4, r5, r6, pc}
 8013d36:	200b      	movs	r0, #11
 8013d38:	4770      	bx	lr
 8013d3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d3e:	bd70      	pop	{r4, r5, r6, pc}
 8013d40:	200b      	movs	r0, #11
 8013d42:	bd70      	pop	{r4, r5, r6, pc}

08013d44 <rcl_wait_set_add_timer>:
 8013d44:	b328      	cbz	r0, 8013d92 <rcl_wait_set_add_timer+0x4e>
 8013d46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d48:	b570      	push	{r4, r5, r6, lr}
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	b31b      	cbz	r3, 8013d96 <rcl_wait_set_add_timer+0x52>
 8013d4e:	b329      	cbz	r1, 8013d9c <rcl_wait_set_add_timer+0x58>
 8013d50:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013d52:	6965      	ldr	r5, [r4, #20]
 8013d54:	42a8      	cmp	r0, r5
 8013d56:	d219      	bcs.n	8013d8c <rcl_wait_set_add_timer+0x48>
 8013d58:	6925      	ldr	r5, [r4, #16]
 8013d5a:	1c46      	adds	r6, r0, #1
 8013d5c:	641e      	str	r6, [r3, #64]	@ 0x40
 8013d5e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013d62:	b102      	cbz	r2, 8013d66 <rcl_wait_set_add_timer+0x22>
 8013d64:	6010      	str	r0, [r2, #0]
 8013d66:	4608      	mov	r0, r1
 8013d68:	f7ff fba6 	bl	80134b8 <rcl_timer_get_guard_condition>
 8013d6c:	b168      	cbz	r0, 8013d8a <rcl_wait_set_add_timer+0x46>
 8013d6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d70:	68e3      	ldr	r3, [r4, #12]
 8013d72:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013d74:	3b01      	subs	r3, #1
 8013d76:	441d      	add	r5, r3
 8013d78:	f003 fb7a 	bl	8017470 <rcl_guard_condition_get_rmw_handle>
 8013d7c:	b180      	cbz	r0, 8013da0 <rcl_wait_set_add_timer+0x5c>
 8013d7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d80:	6842      	ldr	r2, [r0, #4]
 8013d82:	695b      	ldr	r3, [r3, #20]
 8013d84:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d88:	2000      	movs	r0, #0
 8013d8a:	bd70      	pop	{r4, r5, r6, pc}
 8013d8c:	f240 3086 	movw	r0, #902	@ 0x386
 8013d90:	bd70      	pop	{r4, r5, r6, pc}
 8013d92:	200b      	movs	r0, #11
 8013d94:	4770      	bx	lr
 8013d96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d9a:	bd70      	pop	{r4, r5, r6, pc}
 8013d9c:	200b      	movs	r0, #11
 8013d9e:	bd70      	pop	{r4, r5, r6, pc}
 8013da0:	2001      	movs	r0, #1
 8013da2:	bd70      	pop	{r4, r5, r6, pc}

08013da4 <rcl_wait_set_add_client>:
 8013da4:	b318      	cbz	r0, 8013dee <rcl_wait_set_add_client+0x4a>
 8013da6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013da8:	b570      	push	{r4, r5, r6, lr}
 8013daa:	4604      	mov	r4, r0
 8013dac:	b30b      	cbz	r3, 8013df2 <rcl_wait_set_add_client+0x4e>
 8013dae:	b319      	cbz	r1, 8013df8 <rcl_wait_set_add_client+0x54>
 8013db0:	699d      	ldr	r5, [r3, #24]
 8013db2:	69c0      	ldr	r0, [r0, #28]
 8013db4:	4285      	cmp	r5, r0
 8013db6:	d217      	bcs.n	8013de8 <rcl_wait_set_add_client+0x44>
 8013db8:	69a0      	ldr	r0, [r4, #24]
 8013dba:	1c6e      	adds	r6, r5, #1
 8013dbc:	619e      	str	r6, [r3, #24]
 8013dbe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013dc2:	b102      	cbz	r2, 8013dc6 <rcl_wait_set_add_client+0x22>
 8013dc4:	6015      	str	r5, [r2, #0]
 8013dc6:	4608      	mov	r0, r1
 8013dc8:	f7fe f982 	bl	80120d0 <rcl_client_get_rmw_handle>
 8013dcc:	b150      	cbz	r0, 8013de4 <rcl_wait_set_add_client+0x40>
 8013dce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013dd0:	6842      	ldr	r2, [r0, #4]
 8013dd2:	6a1b      	ldr	r3, [r3, #32]
 8013dd4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013dd8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013dda:	69d3      	ldr	r3, [r2, #28]
 8013ddc:	3301      	adds	r3, #1
 8013dde:	2000      	movs	r0, #0
 8013de0:	61d3      	str	r3, [r2, #28]
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	2001      	movs	r0, #1
 8013de6:	bd70      	pop	{r4, r5, r6, pc}
 8013de8:	f240 3086 	movw	r0, #902	@ 0x386
 8013dec:	bd70      	pop	{r4, r5, r6, pc}
 8013dee:	200b      	movs	r0, #11
 8013df0:	4770      	bx	lr
 8013df2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013df6:	bd70      	pop	{r4, r5, r6, pc}
 8013df8:	200b      	movs	r0, #11
 8013dfa:	bd70      	pop	{r4, r5, r6, pc}

08013dfc <rcl_wait_set_add_service>:
 8013dfc:	b318      	cbz	r0, 8013e46 <rcl_wait_set_add_service+0x4a>
 8013dfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013e00:	b570      	push	{r4, r5, r6, lr}
 8013e02:	4604      	mov	r4, r0
 8013e04:	b30b      	cbz	r3, 8013e4a <rcl_wait_set_add_service+0x4e>
 8013e06:	b319      	cbz	r1, 8013e50 <rcl_wait_set_add_service+0x54>
 8013e08:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013e0a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013e0c:	4285      	cmp	r5, r0
 8013e0e:	d217      	bcs.n	8013e40 <rcl_wait_set_add_service+0x44>
 8013e10:	6a20      	ldr	r0, [r4, #32]
 8013e12:	1c6e      	adds	r6, r5, #1
 8013e14:	625e      	str	r6, [r3, #36]	@ 0x24
 8013e16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013e1a:	b102      	cbz	r2, 8013e1e <rcl_wait_set_add_service+0x22>
 8013e1c:	6015      	str	r5, [r2, #0]
 8013e1e:	4608      	mov	r0, r1
 8013e20:	f7fe fed6 	bl	8012bd0 <rcl_service_get_rmw_handle>
 8013e24:	b150      	cbz	r0, 8013e3c <rcl_wait_set_add_service+0x40>
 8013e26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e28:	6842      	ldr	r2, [r0, #4]
 8013e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013e32:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013e34:	3301      	adds	r3, #1
 8013e36:	2000      	movs	r0, #0
 8013e38:	6293      	str	r3, [r2, #40]	@ 0x28
 8013e3a:	bd70      	pop	{r4, r5, r6, pc}
 8013e3c:	2001      	movs	r0, #1
 8013e3e:	bd70      	pop	{r4, r5, r6, pc}
 8013e40:	f240 3086 	movw	r0, #902	@ 0x386
 8013e44:	bd70      	pop	{r4, r5, r6, pc}
 8013e46:	200b      	movs	r0, #11
 8013e48:	4770      	bx	lr
 8013e4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e4e:	bd70      	pop	{r4, r5, r6, pc}
 8013e50:	200b      	movs	r0, #11
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	0000      	movs	r0, r0
	...

08013e58 <rcl_wait>:
 8013e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e5c:	ed2d 8b02 	vpush	{d8}
 8013e60:	b08d      	sub	sp, #52	@ 0x34
 8013e62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013e66:	2800      	cmp	r0, #0
 8013e68:	f000 8143 	beq.w	80140f2 <rcl_wait+0x29a>
 8013e6c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013e6e:	4605      	mov	r5, r0
 8013e70:	2e00      	cmp	r6, #0
 8013e72:	f000 8112 	beq.w	801409a <rcl_wait+0x242>
 8013e76:	6843      	ldr	r3, [r0, #4]
 8013e78:	b983      	cbnz	r3, 8013e9c <rcl_wait+0x44>
 8013e7a:	68eb      	ldr	r3, [r5, #12]
 8013e7c:	b973      	cbnz	r3, 8013e9c <rcl_wait+0x44>
 8013e7e:	696b      	ldr	r3, [r5, #20]
 8013e80:	b963      	cbnz	r3, 8013e9c <rcl_wait+0x44>
 8013e82:	69eb      	ldr	r3, [r5, #28]
 8013e84:	b953      	cbnz	r3, 8013e9c <rcl_wait+0x44>
 8013e86:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013e88:	b943      	cbnz	r3, 8013e9c <rcl_wait+0x44>
 8013e8a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013e8c:	b933      	cbnz	r3, 8013e9c <rcl_wait+0x44>
 8013e8e:	f240 3085 	movw	r0, #901	@ 0x385
 8013e92:	b00d      	add	sp, #52	@ 0x34
 8013e94:	ecbd 8b02 	vpop	{d8}
 8013e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e9c:	9b04      	ldr	r3, [sp, #16]
 8013e9e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	9b05      	ldr	r3, [sp, #20]
 8013ea4:	f173 0300 	sbcs.w	r3, r3, #0
 8013ea8:	f2c0 80f0 	blt.w	801408c <rcl_wait+0x234>
 8013eac:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013eb0:	4643      	mov	r3, r8
 8013eb2:	2a00      	cmp	r2, #0
 8013eb4:	f000 8133 	beq.w	801411e <rcl_wait+0x2c6>
 8013eb8:	2400      	movs	r4, #0
 8013eba:	4613      	mov	r3, r2
 8013ebc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8014130 <rcl_wait+0x2d8>
 8013ec0:	46a2      	mov	sl, r4
 8013ec2:	46a3      	mov	fp, r4
 8013ec4:	f240 3921 	movw	r9, #801	@ 0x321
 8013ec8:	4632      	mov	r2, r6
 8013eca:	e014      	b.n	8013ef6 <rcl_wait+0x9e>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d1e0      	bne.n	8013e92 <rcl_wait+0x3a>
 8013ed0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013ed4:	4542      	cmp	r2, r8
 8013ed6:	eb73 0107 	sbcs.w	r1, r3, r7
 8013eda:	da03      	bge.n	8013ee4 <rcl_wait+0x8c>
 8013edc:	4690      	mov	r8, r2
 8013ede:	461f      	mov	r7, r3
 8013ee0:	f04f 0b01 	mov.w	fp, #1
 8013ee4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013ee6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013ee8:	3401      	adds	r4, #1
 8013eea:	f14a 0a00 	adc.w	sl, sl, #0
 8013eee:	429c      	cmp	r4, r3
 8013ef0:	f17a 0100 	sbcs.w	r1, sl, #0
 8013ef4:	d228      	bcs.n	8013f48 <rcl_wait+0xf0>
 8013ef6:	6928      	ldr	r0, [r5, #16]
 8013ef8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013efc:	a908      	add	r1, sp, #32
 8013efe:	00a6      	lsls	r6, r4, #2
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d0f1      	beq.n	8013ee8 <rcl_wait+0x90>
 8013f04:	68eb      	ldr	r3, [r5, #12]
 8013f06:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013f0a:	4423      	add	r3, r4
 8013f0c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013f10:	f1be 0f00 	cmp.w	lr, #0
 8013f14:	d006      	beq.n	8013f24 <rcl_wait+0xcc>
 8013f16:	6913      	ldr	r3, [r2, #16]
 8013f18:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	6113      	str	r3, [r2, #16]
 8013f20:	692b      	ldr	r3, [r5, #16]
 8013f22:	5998      	ldr	r0, [r3, r6]
 8013f24:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013f28:	f7ff fa94 	bl	8013454 <rcl_timer_get_time_until_next_call>
 8013f2c:	4548      	cmp	r0, r9
 8013f2e:	d1cd      	bne.n	8013ecc <rcl_wait+0x74>
 8013f30:	692b      	ldr	r3, [r5, #16]
 8013f32:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013f34:	2100      	movs	r1, #0
 8013f36:	5199      	str	r1, [r3, r6]
 8013f38:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013f3a:	3401      	adds	r4, #1
 8013f3c:	f14a 0a00 	adc.w	sl, sl, #0
 8013f40:	429c      	cmp	r4, r3
 8013f42:	f17a 0100 	sbcs.w	r1, sl, #0
 8013f46:	d3d6      	bcc.n	8013ef6 <rcl_wait+0x9e>
 8013f48:	4616      	mov	r6, r2
 8013f4a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013f4e:	4313      	orrs	r3, r2
 8013f50:	46d9      	mov	r9, fp
 8013f52:	f040 80a9 	bne.w	80140a8 <rcl_wait+0x250>
 8013f56:	2300      	movs	r3, #0
 8013f58:	2200      	movs	r2, #0
 8013f5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013f5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013f62:	ab08      	add	r3, sp, #32
 8013f64:	9302      	str	r3, [sp, #8]
 8013f66:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013f68:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013f6c:	e9cd 3200 	strd	r3, r2, [sp]
 8013f70:	f106 0110 	add.w	r1, r6, #16
 8013f74:	f106 031c 	add.w	r3, r6, #28
 8013f78:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013f7c:	1d30      	adds	r0, r6, #4
 8013f7e:	f001 fefd 	bl	8015d7c <rmw_wait>
 8013f82:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f86:	4680      	mov	r8, r0
 8013f88:	b1ca      	cbz	r2, 8013fbe <rcl_wait+0x166>
 8013f8a:	2400      	movs	r4, #0
 8013f8c:	4627      	mov	r7, r4
 8013f8e:	692a      	ldr	r2, [r5, #16]
 8013f90:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013f94:	f10d 011f 	add.w	r1, sp, #31
 8013f98:	00a6      	lsls	r6, r4, #2
 8013f9a:	b160      	cbz	r0, 8013fb6 <rcl_wait+0x15e>
 8013f9c:	f88d 701f 	strb.w	r7, [sp, #31]
 8013fa0:	f7ff fa1e 	bl	80133e0 <rcl_timer_is_ready>
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	f47f af74 	bne.w	8013e92 <rcl_wait+0x3a>
 8013faa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013fae:	b90b      	cbnz	r3, 8013fb4 <rcl_wait+0x15c>
 8013fb0:	692a      	ldr	r2, [r5, #16]
 8013fb2:	5193      	str	r3, [r2, r6]
 8013fb4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013fb8:	3401      	adds	r4, #1
 8013fba:	42a2      	cmp	r2, r4
 8013fbc:	d8e7      	bhi.n	8013f8e <rcl_wait+0x136>
 8013fbe:	f038 0002 	bics.w	r0, r8, #2
 8013fc2:	f040 8090 	bne.w	80140e6 <rcl_wait+0x28e>
 8013fc6:	686e      	ldr	r6, [r5, #4]
 8013fc8:	4602      	mov	r2, r0
 8013fca:	b91e      	cbnz	r6, 8013fd4 <rcl_wait+0x17c>
 8013fcc:	e00d      	b.n	8013fea <rcl_wait+0x192>
 8013fce:	3201      	adds	r2, #1
 8013fd0:	42b2      	cmp	r2, r6
 8013fd2:	d00a      	beq.n	8013fea <rcl_wait+0x192>
 8013fd4:	6899      	ldr	r1, [r3, #8]
 8013fd6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fda:	2900      	cmp	r1, #0
 8013fdc:	d1f7      	bne.n	8013fce <rcl_wait+0x176>
 8013fde:	682c      	ldr	r4, [r5, #0]
 8013fe0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013fe4:	3201      	adds	r2, #1
 8013fe6:	42b2      	cmp	r2, r6
 8013fe8:	d1f4      	bne.n	8013fd4 <rcl_wait+0x17c>
 8013fea:	68ee      	ldr	r6, [r5, #12]
 8013fec:	2200      	movs	r2, #0
 8013fee:	b91e      	cbnz	r6, 8013ff8 <rcl_wait+0x1a0>
 8013ff0:	e00d      	b.n	801400e <rcl_wait+0x1b6>
 8013ff2:	3201      	adds	r2, #1
 8013ff4:	42b2      	cmp	r2, r6
 8013ff6:	d00a      	beq.n	801400e <rcl_wait+0x1b6>
 8013ff8:	6959      	ldr	r1, [r3, #20]
 8013ffa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013ffe:	2900      	cmp	r1, #0
 8014000:	d1f7      	bne.n	8013ff2 <rcl_wait+0x19a>
 8014002:	68ac      	ldr	r4, [r5, #8]
 8014004:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014008:	3201      	adds	r2, #1
 801400a:	42b2      	cmp	r2, r6
 801400c:	d1f4      	bne.n	8013ff8 <rcl_wait+0x1a0>
 801400e:	69ee      	ldr	r6, [r5, #28]
 8014010:	2200      	movs	r2, #0
 8014012:	b91e      	cbnz	r6, 801401c <rcl_wait+0x1c4>
 8014014:	e00d      	b.n	8014032 <rcl_wait+0x1da>
 8014016:	3201      	adds	r2, #1
 8014018:	42b2      	cmp	r2, r6
 801401a:	d00a      	beq.n	8014032 <rcl_wait+0x1da>
 801401c:	6a19      	ldr	r1, [r3, #32]
 801401e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014022:	2900      	cmp	r1, #0
 8014024:	d1f7      	bne.n	8014016 <rcl_wait+0x1be>
 8014026:	69ac      	ldr	r4, [r5, #24]
 8014028:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801402c:	3201      	adds	r2, #1
 801402e:	42b2      	cmp	r2, r6
 8014030:	d1f4      	bne.n	801401c <rcl_wait+0x1c4>
 8014032:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8014034:	2200      	movs	r2, #0
 8014036:	b91e      	cbnz	r6, 8014040 <rcl_wait+0x1e8>
 8014038:	e00d      	b.n	8014056 <rcl_wait+0x1fe>
 801403a:	3201      	adds	r2, #1
 801403c:	4296      	cmp	r6, r2
 801403e:	d00a      	beq.n	8014056 <rcl_wait+0x1fe>
 8014040:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014042:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014046:	2900      	cmp	r1, #0
 8014048:	d1f7      	bne.n	801403a <rcl_wait+0x1e2>
 801404a:	6a2c      	ldr	r4, [r5, #32]
 801404c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014050:	3201      	adds	r2, #1
 8014052:	4296      	cmp	r6, r2
 8014054:	d1f4      	bne.n	8014040 <rcl_wait+0x1e8>
 8014056:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8014058:	2200      	movs	r2, #0
 801405a:	b91e      	cbnz	r6, 8014064 <rcl_wait+0x20c>
 801405c:	e00d      	b.n	801407a <rcl_wait+0x222>
 801405e:	3201      	adds	r2, #1
 8014060:	42b2      	cmp	r2, r6
 8014062:	d00a      	beq.n	801407a <rcl_wait+0x222>
 8014064:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014066:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801406a:	2900      	cmp	r1, #0
 801406c:	d1f7      	bne.n	801405e <rcl_wait+0x206>
 801406e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8014070:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014074:	3201      	adds	r2, #1
 8014076:	42b2      	cmp	r2, r6
 8014078:	d1f4      	bne.n	8014064 <rcl_wait+0x20c>
 801407a:	f1b8 0f02 	cmp.w	r8, #2
 801407e:	f47f af08 	bne.w	8013e92 <rcl_wait+0x3a>
 8014082:	464b      	mov	r3, r9
 8014084:	2b00      	cmp	r3, #0
 8014086:	bf08      	it	eq
 8014088:	2002      	moveq	r0, #2
 801408a:	e702      	b.n	8013e92 <rcl_wait+0x3a>
 801408c:	2a00      	cmp	r2, #0
 801408e:	d03a      	beq.n	8014106 <rcl_wait+0x2ae>
 8014090:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014094:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014098:	e70e      	b.n	8013eb8 <rcl_wait+0x60>
 801409a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801409e:	b00d      	add	sp, #52	@ 0x34
 80140a0:	ecbd 8b02 	vpop	{d8}
 80140a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a8:	9b04      	ldr	r3, [sp, #16]
 80140aa:	2b01      	cmp	r3, #1
 80140ac:	9b05      	ldr	r3, [sp, #20]
 80140ae:	f173 0300 	sbcs.w	r3, r3, #0
 80140b2:	db24      	blt.n	80140fe <rcl_wait+0x2a6>
 80140b4:	2f00      	cmp	r7, #0
 80140b6:	bfbc      	itt	lt
 80140b8:	f04f 0800 	movlt.w	r8, #0
 80140bc:	4647      	movlt	r7, r8
 80140be:	a31e      	add	r3, pc, #120	@ (adr r3, 8014138 <rcl_wait+0x2e0>)
 80140c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c4:	4640      	mov	r0, r8
 80140c6:	4639      	mov	r1, r7
 80140c8:	f7ec f912 	bl	80002f0 <__aeabi_ldivmod>
 80140cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8014138 <rcl_wait+0x2e0>)
 80140ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80140d6:	4640      	mov	r0, r8
 80140d8:	4639      	mov	r1, r7
 80140da:	f7ec f909 	bl	80002f0 <__aeabi_ldivmod>
 80140de:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80140e2:	ab08      	add	r3, sp, #32
 80140e4:	e73e      	b.n	8013f64 <rcl_wait+0x10c>
 80140e6:	2001      	movs	r0, #1
 80140e8:	b00d      	add	sp, #52	@ 0x34
 80140ea:	ecbd 8b02 	vpop	{d8}
 80140ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140f2:	200b      	movs	r0, #11
 80140f4:	b00d      	add	sp, #52	@ 0x34
 80140f6:	ecbd 8b02 	vpop	{d8}
 80140fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140fe:	465b      	mov	r3, fp
 8014100:	2b00      	cmp	r3, #0
 8014102:	d1d7      	bne.n	80140b4 <rcl_wait+0x25c>
 8014104:	e72e      	b.n	8013f64 <rcl_wait+0x10c>
 8014106:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801410a:	430b      	orrs	r3, r1
 801410c:	bf08      	it	eq
 801410e:	4691      	moveq	r9, r2
 8014110:	f43f af21 	beq.w	8013f56 <rcl_wait+0xfe>
 8014114:	9b04      	ldr	r3, [sp, #16]
 8014116:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801411a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801411e:	2b01      	cmp	r3, #1
 8014120:	9b05      	ldr	r3, [sp, #20]
 8014122:	f173 0300 	sbcs.w	r3, r3, #0
 8014126:	f04f 0300 	mov.w	r3, #0
 801412a:	4699      	mov	r9, r3
 801412c:	dac2      	bge.n	80140b4 <rcl_wait+0x25c>
 801412e:	e719      	b.n	8013f64 <rcl_wait+0x10c>
 8014130:	ffffffff 	.word	0xffffffff
 8014134:	7fffffff 	.word	0x7fffffff
 8014138:	3b9aca00 	.word	0x3b9aca00
 801413c:	00000000 	.word	0x00000000

08014140 <rcl_action_take_goal_response>:
 8014140:	2800      	cmp	r0, #0
 8014142:	d039      	beq.n	80141b8 <rcl_action_take_goal_response+0x78>
 8014144:	b570      	push	{r4, r5, r6, lr}
 8014146:	4604      	mov	r4, r0
 8014148:	6800      	ldr	r0, [r0, #0]
 801414a:	b380      	cbz	r0, 80141ae <rcl_action_take_goal_response+0x6e>
 801414c:	460d      	mov	r5, r1
 801414e:	4616      	mov	r6, r2
 8014150:	f7fe f842 	bl	80121d8 <rcl_client_is_valid>
 8014154:	b330      	cbz	r0, 80141a4 <rcl_action_take_goal_response+0x64>
 8014156:	6820      	ldr	r0, [r4, #0]
 8014158:	3004      	adds	r0, #4
 801415a:	f7fe f83d 	bl	80121d8 <rcl_client_is_valid>
 801415e:	b308      	cbz	r0, 80141a4 <rcl_action_take_goal_response+0x64>
 8014160:	6820      	ldr	r0, [r4, #0]
 8014162:	3008      	adds	r0, #8
 8014164:	f7fe f838 	bl	80121d8 <rcl_client_is_valid>
 8014168:	b1e0      	cbz	r0, 80141a4 <rcl_action_take_goal_response+0x64>
 801416a:	6820      	ldr	r0, [r4, #0]
 801416c:	300c      	adds	r0, #12
 801416e:	f7fe fdf5 	bl	8012d5c <rcl_subscription_is_valid>
 8014172:	b1b8      	cbz	r0, 80141a4 <rcl_action_take_goal_response+0x64>
 8014174:	6820      	ldr	r0, [r4, #0]
 8014176:	3010      	adds	r0, #16
 8014178:	f7fe fdf0 	bl	8012d5c <rcl_subscription_is_valid>
 801417c:	b190      	cbz	r0, 80141a4 <rcl_action_take_goal_response+0x64>
 801417e:	b1cd      	cbz	r5, 80141b4 <rcl_action_take_goal_response+0x74>
 8014180:	b1c6      	cbz	r6, 80141b4 <rcl_action_take_goal_response+0x74>
 8014182:	6820      	ldr	r0, [r4, #0]
 8014184:	4632      	mov	r2, r6
 8014186:	4629      	mov	r1, r5
 8014188:	f7fd ffde 	bl	8012148 <rcl_take_response>
 801418c:	b148      	cbz	r0, 80141a2 <rcl_action_take_goal_response+0x62>
 801418e:	280a      	cmp	r0, #10
 8014190:	d007      	beq.n	80141a2 <rcl_action_take_goal_response+0x62>
 8014192:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014196:	f640 0337 	movw	r3, #2103	@ 0x837
 801419a:	4290      	cmp	r0, r2
 801419c:	bf0c      	ite	eq
 801419e:	4618      	moveq	r0, r3
 80141a0:	2001      	movne	r0, #1
 80141a2:	bd70      	pop	{r4, r5, r6, pc}
 80141a4:	f7f8 f878 	bl	800c298 <rcutils_reset_error>
 80141a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80141ac:	bd70      	pop	{r4, r5, r6, pc}
 80141ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80141b2:	bd70      	pop	{r4, r5, r6, pc}
 80141b4:	200b      	movs	r0, #11
 80141b6:	bd70      	pop	{r4, r5, r6, pc}
 80141b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop

080141c0 <rcl_action_send_result_request>:
 80141c0:	b390      	cbz	r0, 8014228 <rcl_action_send_result_request+0x68>
 80141c2:	b570      	push	{r4, r5, r6, lr}
 80141c4:	4604      	mov	r4, r0
 80141c6:	6800      	ldr	r0, [r0, #0]
 80141c8:	b348      	cbz	r0, 801421e <rcl_action_send_result_request+0x5e>
 80141ca:	460d      	mov	r5, r1
 80141cc:	4616      	mov	r6, r2
 80141ce:	f7fe f803 	bl	80121d8 <rcl_client_is_valid>
 80141d2:	b1f8      	cbz	r0, 8014214 <rcl_action_send_result_request+0x54>
 80141d4:	6820      	ldr	r0, [r4, #0]
 80141d6:	3004      	adds	r0, #4
 80141d8:	f7fd fffe 	bl	80121d8 <rcl_client_is_valid>
 80141dc:	b1d0      	cbz	r0, 8014214 <rcl_action_send_result_request+0x54>
 80141de:	6820      	ldr	r0, [r4, #0]
 80141e0:	3008      	adds	r0, #8
 80141e2:	f7fd fff9 	bl	80121d8 <rcl_client_is_valid>
 80141e6:	b1a8      	cbz	r0, 8014214 <rcl_action_send_result_request+0x54>
 80141e8:	6820      	ldr	r0, [r4, #0]
 80141ea:	300c      	adds	r0, #12
 80141ec:	f7fe fdb6 	bl	8012d5c <rcl_subscription_is_valid>
 80141f0:	b180      	cbz	r0, 8014214 <rcl_action_send_result_request+0x54>
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	3010      	adds	r0, #16
 80141f6:	f7fe fdb1 	bl	8012d5c <rcl_subscription_is_valid>
 80141fa:	b158      	cbz	r0, 8014214 <rcl_action_send_result_request+0x54>
 80141fc:	b195      	cbz	r5, 8014224 <rcl_action_send_result_request+0x64>
 80141fe:	b18e      	cbz	r6, 8014224 <rcl_action_send_result_request+0x64>
 8014200:	6820      	ldr	r0, [r4, #0]
 8014202:	4632      	mov	r2, r6
 8014204:	4629      	mov	r1, r5
 8014206:	3008      	adds	r0, #8
 8014208:	f7fd ff68 	bl	80120dc <rcl_send_request>
 801420c:	3800      	subs	r0, #0
 801420e:	bf18      	it	ne
 8014210:	2001      	movne	r0, #1
 8014212:	bd70      	pop	{r4, r5, r6, pc}
 8014214:	f7f8 f840 	bl	800c298 <rcutils_reset_error>
 8014218:	f640 0036 	movw	r0, #2102	@ 0x836
 801421c:	bd70      	pop	{r4, r5, r6, pc}
 801421e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014222:	bd70      	pop	{r4, r5, r6, pc}
 8014224:	200b      	movs	r0, #11
 8014226:	bd70      	pop	{r4, r5, r6, pc}
 8014228:	f640 0036 	movw	r0, #2102	@ 0x836
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop

08014230 <rcl_action_take_result_response>:
 8014230:	2800      	cmp	r0, #0
 8014232:	d03a      	beq.n	80142aa <rcl_action_take_result_response+0x7a>
 8014234:	b570      	push	{r4, r5, r6, lr}
 8014236:	4604      	mov	r4, r0
 8014238:	6800      	ldr	r0, [r0, #0]
 801423a:	b388      	cbz	r0, 80142a0 <rcl_action_take_result_response+0x70>
 801423c:	460d      	mov	r5, r1
 801423e:	4616      	mov	r6, r2
 8014240:	f7fd ffca 	bl	80121d8 <rcl_client_is_valid>
 8014244:	b338      	cbz	r0, 8014296 <rcl_action_take_result_response+0x66>
 8014246:	6820      	ldr	r0, [r4, #0]
 8014248:	3004      	adds	r0, #4
 801424a:	f7fd ffc5 	bl	80121d8 <rcl_client_is_valid>
 801424e:	b310      	cbz	r0, 8014296 <rcl_action_take_result_response+0x66>
 8014250:	6820      	ldr	r0, [r4, #0]
 8014252:	3008      	adds	r0, #8
 8014254:	f7fd ffc0 	bl	80121d8 <rcl_client_is_valid>
 8014258:	b1e8      	cbz	r0, 8014296 <rcl_action_take_result_response+0x66>
 801425a:	6820      	ldr	r0, [r4, #0]
 801425c:	300c      	adds	r0, #12
 801425e:	f7fe fd7d 	bl	8012d5c <rcl_subscription_is_valid>
 8014262:	b1c0      	cbz	r0, 8014296 <rcl_action_take_result_response+0x66>
 8014264:	6820      	ldr	r0, [r4, #0]
 8014266:	3010      	adds	r0, #16
 8014268:	f7fe fd78 	bl	8012d5c <rcl_subscription_is_valid>
 801426c:	b198      	cbz	r0, 8014296 <rcl_action_take_result_response+0x66>
 801426e:	b1d5      	cbz	r5, 80142a6 <rcl_action_take_result_response+0x76>
 8014270:	b1ce      	cbz	r6, 80142a6 <rcl_action_take_result_response+0x76>
 8014272:	6820      	ldr	r0, [r4, #0]
 8014274:	4632      	mov	r2, r6
 8014276:	4629      	mov	r1, r5
 8014278:	3008      	adds	r0, #8
 801427a:	f7fd ff65 	bl	8012148 <rcl_take_response>
 801427e:	b148      	cbz	r0, 8014294 <rcl_action_take_result_response+0x64>
 8014280:	280a      	cmp	r0, #10
 8014282:	d007      	beq.n	8014294 <rcl_action_take_result_response+0x64>
 8014284:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014288:	f640 0337 	movw	r3, #2103	@ 0x837
 801428c:	4290      	cmp	r0, r2
 801428e:	bf0c      	ite	eq
 8014290:	4618      	moveq	r0, r3
 8014292:	2001      	movne	r0, #1
 8014294:	bd70      	pop	{r4, r5, r6, pc}
 8014296:	f7f7 ffff 	bl	800c298 <rcutils_reset_error>
 801429a:	f640 0036 	movw	r0, #2102	@ 0x836
 801429e:	bd70      	pop	{r4, r5, r6, pc}
 80142a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80142a4:	bd70      	pop	{r4, r5, r6, pc}
 80142a6:	200b      	movs	r0, #11
 80142a8:	bd70      	pop	{r4, r5, r6, pc}
 80142aa:	f640 0036 	movw	r0, #2102	@ 0x836
 80142ae:	4770      	bx	lr

080142b0 <rcl_action_take_cancel_response>:
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d03a      	beq.n	801432a <rcl_action_take_cancel_response+0x7a>
 80142b4:	b570      	push	{r4, r5, r6, lr}
 80142b6:	4604      	mov	r4, r0
 80142b8:	6800      	ldr	r0, [r0, #0]
 80142ba:	b388      	cbz	r0, 8014320 <rcl_action_take_cancel_response+0x70>
 80142bc:	460d      	mov	r5, r1
 80142be:	4616      	mov	r6, r2
 80142c0:	f7fd ff8a 	bl	80121d8 <rcl_client_is_valid>
 80142c4:	b338      	cbz	r0, 8014316 <rcl_action_take_cancel_response+0x66>
 80142c6:	6820      	ldr	r0, [r4, #0]
 80142c8:	3004      	adds	r0, #4
 80142ca:	f7fd ff85 	bl	80121d8 <rcl_client_is_valid>
 80142ce:	b310      	cbz	r0, 8014316 <rcl_action_take_cancel_response+0x66>
 80142d0:	6820      	ldr	r0, [r4, #0]
 80142d2:	3008      	adds	r0, #8
 80142d4:	f7fd ff80 	bl	80121d8 <rcl_client_is_valid>
 80142d8:	b1e8      	cbz	r0, 8014316 <rcl_action_take_cancel_response+0x66>
 80142da:	6820      	ldr	r0, [r4, #0]
 80142dc:	300c      	adds	r0, #12
 80142de:	f7fe fd3d 	bl	8012d5c <rcl_subscription_is_valid>
 80142e2:	b1c0      	cbz	r0, 8014316 <rcl_action_take_cancel_response+0x66>
 80142e4:	6820      	ldr	r0, [r4, #0]
 80142e6:	3010      	adds	r0, #16
 80142e8:	f7fe fd38 	bl	8012d5c <rcl_subscription_is_valid>
 80142ec:	b198      	cbz	r0, 8014316 <rcl_action_take_cancel_response+0x66>
 80142ee:	b1d5      	cbz	r5, 8014326 <rcl_action_take_cancel_response+0x76>
 80142f0:	b1ce      	cbz	r6, 8014326 <rcl_action_take_cancel_response+0x76>
 80142f2:	6820      	ldr	r0, [r4, #0]
 80142f4:	4632      	mov	r2, r6
 80142f6:	4629      	mov	r1, r5
 80142f8:	3004      	adds	r0, #4
 80142fa:	f7fd ff25 	bl	8012148 <rcl_take_response>
 80142fe:	b148      	cbz	r0, 8014314 <rcl_action_take_cancel_response+0x64>
 8014300:	280a      	cmp	r0, #10
 8014302:	d007      	beq.n	8014314 <rcl_action_take_cancel_response+0x64>
 8014304:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014308:	f640 0337 	movw	r3, #2103	@ 0x837
 801430c:	4290      	cmp	r0, r2
 801430e:	bf0c      	ite	eq
 8014310:	4618      	moveq	r0, r3
 8014312:	2001      	movne	r0, #1
 8014314:	bd70      	pop	{r4, r5, r6, pc}
 8014316:	f7f7 ffbf 	bl	800c298 <rcutils_reset_error>
 801431a:	f640 0036 	movw	r0, #2102	@ 0x836
 801431e:	bd70      	pop	{r4, r5, r6, pc}
 8014320:	f640 0036 	movw	r0, #2102	@ 0x836
 8014324:	bd70      	pop	{r4, r5, r6, pc}
 8014326:	200b      	movs	r0, #11
 8014328:	bd70      	pop	{r4, r5, r6, pc}
 801432a:	f640 0036 	movw	r0, #2102	@ 0x836
 801432e:	4770      	bx	lr

08014330 <rcl_action_take_feedback>:
 8014330:	2800      	cmp	r0, #0
 8014332:	d038      	beq.n	80143a6 <rcl_action_take_feedback+0x76>
 8014334:	b530      	push	{r4, r5, lr}
 8014336:	4604      	mov	r4, r0
 8014338:	6800      	ldr	r0, [r0, #0]
 801433a:	b091      	sub	sp, #68	@ 0x44
 801433c:	b378      	cbz	r0, 801439e <rcl_action_take_feedback+0x6e>
 801433e:	460d      	mov	r5, r1
 8014340:	f7fd ff4a 	bl	80121d8 <rcl_client_is_valid>
 8014344:	b328      	cbz	r0, 8014392 <rcl_action_take_feedback+0x62>
 8014346:	6820      	ldr	r0, [r4, #0]
 8014348:	3004      	adds	r0, #4
 801434a:	f7fd ff45 	bl	80121d8 <rcl_client_is_valid>
 801434e:	b300      	cbz	r0, 8014392 <rcl_action_take_feedback+0x62>
 8014350:	6820      	ldr	r0, [r4, #0]
 8014352:	3008      	adds	r0, #8
 8014354:	f7fd ff40 	bl	80121d8 <rcl_client_is_valid>
 8014358:	b1d8      	cbz	r0, 8014392 <rcl_action_take_feedback+0x62>
 801435a:	6820      	ldr	r0, [r4, #0]
 801435c:	300c      	adds	r0, #12
 801435e:	f7fe fcfd 	bl	8012d5c <rcl_subscription_is_valid>
 8014362:	b1b0      	cbz	r0, 8014392 <rcl_action_take_feedback+0x62>
 8014364:	6820      	ldr	r0, [r4, #0]
 8014366:	3010      	adds	r0, #16
 8014368:	f7fe fcf8 	bl	8012d5c <rcl_subscription_is_valid>
 801436c:	b188      	cbz	r0, 8014392 <rcl_action_take_feedback+0x62>
 801436e:	b1ed      	cbz	r5, 80143ac <rcl_action_take_feedback+0x7c>
 8014370:	6820      	ldr	r0, [r4, #0]
 8014372:	2300      	movs	r3, #0
 8014374:	466a      	mov	r2, sp
 8014376:	4629      	mov	r1, r5
 8014378:	300c      	adds	r0, #12
 801437a:	f7fe fc91 	bl	8012ca0 <rcl_take>
 801437e:	b160      	cbz	r0, 801439a <rcl_action_take_feedback+0x6a>
 8014380:	f240 1391 	movw	r3, #401	@ 0x191
 8014384:	4298      	cmp	r0, r3
 8014386:	d014      	beq.n	80143b2 <rcl_action_take_feedback+0x82>
 8014388:	280a      	cmp	r0, #10
 801438a:	bf18      	it	ne
 801438c:	2001      	movne	r0, #1
 801438e:	b011      	add	sp, #68	@ 0x44
 8014390:	bd30      	pop	{r4, r5, pc}
 8014392:	f7f7 ff81 	bl	800c298 <rcutils_reset_error>
 8014396:	f640 0036 	movw	r0, #2102	@ 0x836
 801439a:	b011      	add	sp, #68	@ 0x44
 801439c:	bd30      	pop	{r4, r5, pc}
 801439e:	f640 0036 	movw	r0, #2102	@ 0x836
 80143a2:	b011      	add	sp, #68	@ 0x44
 80143a4:	bd30      	pop	{r4, r5, pc}
 80143a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80143aa:	4770      	bx	lr
 80143ac:	200b      	movs	r0, #11
 80143ae:	b011      	add	sp, #68	@ 0x44
 80143b0:	bd30      	pop	{r4, r5, pc}
 80143b2:	f640 0037 	movw	r0, #2103	@ 0x837
 80143b6:	e7f0      	b.n	801439a <rcl_action_take_feedback+0x6a>

080143b8 <rcl_action_wait_set_add_action_client>:
 80143b8:	2800      	cmp	r0, #0
 80143ba:	d048      	beq.n	801444e <rcl_action_wait_set_add_action_client+0x96>
 80143bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143be:	460c      	mov	r4, r1
 80143c0:	2900      	cmp	r1, #0
 80143c2:	d03c      	beq.n	801443e <rcl_action_wait_set_add_action_client+0x86>
 80143c4:	4605      	mov	r5, r0
 80143c6:	6808      	ldr	r0, [r1, #0]
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d038      	beq.n	801443e <rcl_action_wait_set_add_action_client+0x86>
 80143cc:	4617      	mov	r7, r2
 80143ce:	461e      	mov	r6, r3
 80143d0:	f7fd ff02 	bl	80121d8 <rcl_client_is_valid>
 80143d4:	b3b0      	cbz	r0, 8014444 <rcl_action_wait_set_add_action_client+0x8c>
 80143d6:	6820      	ldr	r0, [r4, #0]
 80143d8:	3004      	adds	r0, #4
 80143da:	f7fd fefd 	bl	80121d8 <rcl_client_is_valid>
 80143de:	b388      	cbz	r0, 8014444 <rcl_action_wait_set_add_action_client+0x8c>
 80143e0:	6820      	ldr	r0, [r4, #0]
 80143e2:	3008      	adds	r0, #8
 80143e4:	f7fd fef8 	bl	80121d8 <rcl_client_is_valid>
 80143e8:	b360      	cbz	r0, 8014444 <rcl_action_wait_set_add_action_client+0x8c>
 80143ea:	6820      	ldr	r0, [r4, #0]
 80143ec:	300c      	adds	r0, #12
 80143ee:	f7fe fcb5 	bl	8012d5c <rcl_subscription_is_valid>
 80143f2:	b338      	cbz	r0, 8014444 <rcl_action_wait_set_add_action_client+0x8c>
 80143f4:	6820      	ldr	r0, [r4, #0]
 80143f6:	3010      	adds	r0, #16
 80143f8:	f7fe fcb0 	bl	8012d5c <rcl_subscription_is_valid>
 80143fc:	b310      	cbz	r0, 8014444 <rcl_action_wait_set_add_action_client+0x8c>
 80143fe:	6821      	ldr	r1, [r4, #0]
 8014400:	4628      	mov	r0, r5
 8014402:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8014406:	f7ff fccd 	bl	8013da4 <rcl_wait_set_add_client>
 801440a:	b9b8      	cbnz	r0, 801443c <rcl_action_wait_set_add_action_client+0x84>
 801440c:	6821      	ldr	r1, [r4, #0]
 801440e:	4628      	mov	r0, r5
 8014410:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8014414:	3104      	adds	r1, #4
 8014416:	f7ff fcc5 	bl	8013da4 <rcl_wait_set_add_client>
 801441a:	b978      	cbnz	r0, 801443c <rcl_action_wait_set_add_action_client+0x84>
 801441c:	6821      	ldr	r1, [r4, #0]
 801441e:	4628      	mov	r0, r5
 8014420:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014424:	3108      	adds	r1, #8
 8014426:	f7ff fcbd 	bl	8013da4 <rcl_wait_set_add_client>
 801442a:	b938      	cbnz	r0, 801443c <rcl_action_wait_set_add_action_client+0x84>
 801442c:	6821      	ldr	r1, [r4, #0]
 801442e:	4628      	mov	r0, r5
 8014430:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014434:	310c      	adds	r1, #12
 8014436:	f7ff f96d 	bl	8013714 <rcl_wait_set_add_subscription>
 801443a:	b158      	cbz	r0, 8014454 <rcl_action_wait_set_add_action_client+0x9c>
 801443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801443e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014444:	f7f7 ff28 	bl	800c298 <rcutils_reset_error>
 8014448:	f640 0036 	movw	r0, #2102	@ 0x836
 801444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801444e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014452:	4770      	bx	lr
 8014454:	6821      	ldr	r1, [r4, #0]
 8014456:	4628      	mov	r0, r5
 8014458:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801445c:	3110      	adds	r1, #16
 801445e:	f7ff f959 	bl	8013714 <rcl_wait_set_add_subscription>
 8014462:	2800      	cmp	r0, #0
 8014464:	d1ea      	bne.n	801443c <rcl_action_wait_set_add_action_client+0x84>
 8014466:	b11f      	cbz	r7, 8014470 <rcl_action_wait_set_add_action_client+0xb8>
 8014468:	6823      	ldr	r3, [r4, #0]
 801446a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801446e:	603b      	str	r3, [r7, #0]
 8014470:	2e00      	cmp	r6, #0
 8014472:	d0e3      	beq.n	801443c <rcl_action_wait_set_add_action_client+0x84>
 8014474:	6823      	ldr	r3, [r4, #0]
 8014476:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801447a:	6033      	str	r3, [r6, #0]
 801447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801447e:	bf00      	nop

08014480 <rcl_action_client_wait_set_get_entities_ready>:
 8014480:	2800      	cmp	r0, #0
 8014482:	f000 808d 	beq.w	80145a0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8014486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801448a:	460c      	mov	r4, r1
 801448c:	2900      	cmp	r1, #0
 801448e:	d077      	beq.n	8014580 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014490:	4605      	mov	r5, r0
 8014492:	6808      	ldr	r0, [r1, #0]
 8014494:	2800      	cmp	r0, #0
 8014496:	d073      	beq.n	8014580 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014498:	4616      	mov	r6, r2
 801449a:	461f      	mov	r7, r3
 801449c:	f7fd fe9c 	bl	80121d8 <rcl_client_is_valid>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	d071      	beq.n	8014588 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80144a4:	6820      	ldr	r0, [r4, #0]
 80144a6:	3004      	adds	r0, #4
 80144a8:	f7fd fe96 	bl	80121d8 <rcl_client_is_valid>
 80144ac:	2800      	cmp	r0, #0
 80144ae:	d06b      	beq.n	8014588 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80144b0:	6820      	ldr	r0, [r4, #0]
 80144b2:	3008      	adds	r0, #8
 80144b4:	f7fd fe90 	bl	80121d8 <rcl_client_is_valid>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d065      	beq.n	8014588 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80144bc:	6820      	ldr	r0, [r4, #0]
 80144be:	300c      	adds	r0, #12
 80144c0:	f7fe fc4c 	bl	8012d5c <rcl_subscription_is_valid>
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d05f      	beq.n	8014588 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80144c8:	6820      	ldr	r0, [r4, #0]
 80144ca:	3010      	adds	r0, #16
 80144cc:	f7fe fc46 	bl	8012d5c <rcl_subscription_is_valid>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	d059      	beq.n	8014588 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80144d4:	2e00      	cmp	r6, #0
 80144d6:	d060      	beq.n	801459a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80144d8:	2f00      	cmp	r7, #0
 80144da:	d05e      	beq.n	801459a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80144dc:	9b06      	ldr	r3, [sp, #24]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d05b      	beq.n	801459a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80144e2:	9b07      	ldr	r3, [sp, #28]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d058      	beq.n	801459a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80144e8:	9b08      	ldr	r3, [sp, #32]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d055      	beq.n	801459a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80144ee:	6823      	ldr	r3, [r4, #0]
 80144f0:	686a      	ldr	r2, [r5, #4]
 80144f2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80144f6:	428a      	cmp	r2, r1
 80144f8:	d94c      	bls.n	8014594 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80144fa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80144fe:	4282      	cmp	r2, r0
 8014500:	d948      	bls.n	8014594 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014502:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014506:	69ea      	ldr	r2, [r5, #28]
 8014508:	42a2      	cmp	r2, r4
 801450a:	d943      	bls.n	8014594 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801450c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014510:	4562      	cmp	r2, ip
 8014512:	d93f      	bls.n	8014594 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014514:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014518:	4572      	cmp	r2, lr
 801451a:	d93b      	bls.n	8014594 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801451c:	69aa      	ldr	r2, [r5, #24]
 801451e:	682d      	ldr	r5, [r5, #0]
 8014520:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014524:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014528:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801452c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014530:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014534:	f103 0c0c 	add.w	ip, r3, #12
 8014538:	eba5 050c 	sub.w	r5, r5, ip
 801453c:	fab5 f585 	clz	r5, r5
 8014540:	096d      	lsrs	r5, r5, #5
 8014542:	7035      	strb	r5, [r6, #0]
 8014544:	f103 0510 	add.w	r5, r3, #16
 8014548:	1b64      	subs	r4, r4, r5
 801454a:	fab4 f484 	clz	r4, r4
 801454e:	0964      	lsrs	r4, r4, #5
 8014550:	703c      	strb	r4, [r7, #0]
 8014552:	eba3 0008 	sub.w	r0, r3, r8
 8014556:	1d1c      	adds	r4, r3, #4
 8014558:	3308      	adds	r3, #8
 801455a:	1ad3      	subs	r3, r2, r3
 801455c:	fab0 f080 	clz	r0, r0
 8014560:	9a06      	ldr	r2, [sp, #24]
 8014562:	0940      	lsrs	r0, r0, #5
 8014564:	1b09      	subs	r1, r1, r4
 8014566:	7010      	strb	r0, [r2, #0]
 8014568:	fab1 f181 	clz	r1, r1
 801456c:	9a07      	ldr	r2, [sp, #28]
 801456e:	0949      	lsrs	r1, r1, #5
 8014570:	7011      	strb	r1, [r2, #0]
 8014572:	fab3 f383 	clz	r3, r3
 8014576:	9a08      	ldr	r2, [sp, #32]
 8014578:	095b      	lsrs	r3, r3, #5
 801457a:	2000      	movs	r0, #0
 801457c:	7013      	strb	r3, [r2, #0]
 801457e:	e001      	b.n	8014584 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014580:	f640 0036 	movw	r0, #2102	@ 0x836
 8014584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014588:	f7f7 fe86 	bl	800c298 <rcutils_reset_error>
 801458c:	f640 0036 	movw	r0, #2102	@ 0x836
 8014590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014594:	2001      	movs	r0, #1
 8014596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801459a:	200b      	movs	r0, #11
 801459c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145a0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80145a4:	4770      	bx	lr
 80145a6:	bf00      	nop

080145a8 <rcl_action_take_goal_request>:
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d039      	beq.n	8014620 <rcl_action_take_goal_request+0x78>
 80145ac:	b570      	push	{r4, r5, r6, lr}
 80145ae:	4604      	mov	r4, r0
 80145b0:	6800      	ldr	r0, [r0, #0]
 80145b2:	b380      	cbz	r0, 8014616 <rcl_action_take_goal_request+0x6e>
 80145b4:	460d      	mov	r5, r1
 80145b6:	4616      	mov	r6, r2
 80145b8:	f7fe fb68 	bl	8012c8c <rcl_service_is_valid>
 80145bc:	b330      	cbz	r0, 801460c <rcl_action_take_goal_request+0x64>
 80145be:	6820      	ldr	r0, [r4, #0]
 80145c0:	3004      	adds	r0, #4
 80145c2:	f7fe fb63 	bl	8012c8c <rcl_service_is_valid>
 80145c6:	b308      	cbz	r0, 801460c <rcl_action_take_goal_request+0x64>
 80145c8:	6820      	ldr	r0, [r4, #0]
 80145ca:	3008      	adds	r0, #8
 80145cc:	f7fe fb5e 	bl	8012c8c <rcl_service_is_valid>
 80145d0:	b1e0      	cbz	r0, 801460c <rcl_action_take_goal_request+0x64>
 80145d2:	6820      	ldr	r0, [r4, #0]
 80145d4:	300c      	adds	r0, #12
 80145d6:	f7f6 feb3 	bl	800b340 <rcl_publisher_is_valid>
 80145da:	b1b8      	cbz	r0, 801460c <rcl_action_take_goal_request+0x64>
 80145dc:	6820      	ldr	r0, [r4, #0]
 80145de:	3010      	adds	r0, #16
 80145e0:	f7f6 feae 	bl	800b340 <rcl_publisher_is_valid>
 80145e4:	b190      	cbz	r0, 801460c <rcl_action_take_goal_request+0x64>
 80145e6:	b1cd      	cbz	r5, 801461c <rcl_action_take_goal_request+0x74>
 80145e8:	b1c6      	cbz	r6, 801461c <rcl_action_take_goal_request+0x74>
 80145ea:	6820      	ldr	r0, [r4, #0]
 80145ec:	4632      	mov	r2, r6
 80145ee:	4629      	mov	r1, r5
 80145f0:	f7fe faf4 	bl	8012bdc <rcl_take_request>
 80145f4:	b148      	cbz	r0, 801460a <rcl_action_take_goal_request+0x62>
 80145f6:	280a      	cmp	r0, #10
 80145f8:	d007      	beq.n	801460a <rcl_action_take_goal_request+0x62>
 80145fa:	f240 2259 	movw	r2, #601	@ 0x259
 80145fe:	f640 0399 	movw	r3, #2201	@ 0x899
 8014602:	4290      	cmp	r0, r2
 8014604:	bf0c      	ite	eq
 8014606:	4618      	moveq	r0, r3
 8014608:	2001      	movne	r0, #1
 801460a:	bd70      	pop	{r4, r5, r6, pc}
 801460c:	f7f7 fe44 	bl	800c298 <rcutils_reset_error>
 8014610:	f640 0098 	movw	r0, #2200	@ 0x898
 8014614:	bd70      	pop	{r4, r5, r6, pc}
 8014616:	f640 0098 	movw	r0, #2200	@ 0x898
 801461a:	bd70      	pop	{r4, r5, r6, pc}
 801461c:	200b      	movs	r0, #11
 801461e:	bd70      	pop	{r4, r5, r6, pc}
 8014620:	f640 0098 	movw	r0, #2200	@ 0x898
 8014624:	4770      	bx	lr
 8014626:	bf00      	nop

08014628 <rcl_action_send_goal_response>:
 8014628:	b390      	cbz	r0, 8014690 <rcl_action_send_goal_response+0x68>
 801462a:	b570      	push	{r4, r5, r6, lr}
 801462c:	4604      	mov	r4, r0
 801462e:	6800      	ldr	r0, [r0, #0]
 8014630:	b348      	cbz	r0, 8014686 <rcl_action_send_goal_response+0x5e>
 8014632:	460d      	mov	r5, r1
 8014634:	4616      	mov	r6, r2
 8014636:	f7fe fb29 	bl	8012c8c <rcl_service_is_valid>
 801463a:	b1f8      	cbz	r0, 801467c <rcl_action_send_goal_response+0x54>
 801463c:	6820      	ldr	r0, [r4, #0]
 801463e:	3004      	adds	r0, #4
 8014640:	f7fe fb24 	bl	8012c8c <rcl_service_is_valid>
 8014644:	b1d0      	cbz	r0, 801467c <rcl_action_send_goal_response+0x54>
 8014646:	6820      	ldr	r0, [r4, #0]
 8014648:	3008      	adds	r0, #8
 801464a:	f7fe fb1f 	bl	8012c8c <rcl_service_is_valid>
 801464e:	b1a8      	cbz	r0, 801467c <rcl_action_send_goal_response+0x54>
 8014650:	6820      	ldr	r0, [r4, #0]
 8014652:	300c      	adds	r0, #12
 8014654:	f7f6 fe74 	bl	800b340 <rcl_publisher_is_valid>
 8014658:	b180      	cbz	r0, 801467c <rcl_action_send_goal_response+0x54>
 801465a:	6820      	ldr	r0, [r4, #0]
 801465c:	3010      	adds	r0, #16
 801465e:	f7f6 fe6f 	bl	800b340 <rcl_publisher_is_valid>
 8014662:	b158      	cbz	r0, 801467c <rcl_action_send_goal_response+0x54>
 8014664:	b195      	cbz	r5, 801468c <rcl_action_send_goal_response+0x64>
 8014666:	b18e      	cbz	r6, 801468c <rcl_action_send_goal_response+0x64>
 8014668:	6820      	ldr	r0, [r4, #0]
 801466a:	4632      	mov	r2, r6
 801466c:	4629      	mov	r1, r5
 801466e:	f7fe faf5 	bl	8012c5c <rcl_send_response>
 8014672:	b110      	cbz	r0, 801467a <rcl_action_send_goal_response+0x52>
 8014674:	2802      	cmp	r0, #2
 8014676:	bf18      	it	ne
 8014678:	2001      	movne	r0, #1
 801467a:	bd70      	pop	{r4, r5, r6, pc}
 801467c:	f7f7 fe0c 	bl	800c298 <rcutils_reset_error>
 8014680:	f640 0098 	movw	r0, #2200	@ 0x898
 8014684:	bd70      	pop	{r4, r5, r6, pc}
 8014686:	f640 0098 	movw	r0, #2200	@ 0x898
 801468a:	bd70      	pop	{r4, r5, r6, pc}
 801468c:	200b      	movs	r0, #11
 801468e:	bd70      	pop	{r4, r5, r6, pc}
 8014690:	f640 0098 	movw	r0, #2200	@ 0x898
 8014694:	4770      	bx	lr
 8014696:	bf00      	nop

08014698 <rcl_action_take_result_request>:
 8014698:	2800      	cmp	r0, #0
 801469a:	d03a      	beq.n	8014712 <rcl_action_take_result_request+0x7a>
 801469c:	b570      	push	{r4, r5, r6, lr}
 801469e:	4604      	mov	r4, r0
 80146a0:	6800      	ldr	r0, [r0, #0]
 80146a2:	b388      	cbz	r0, 8014708 <rcl_action_take_result_request+0x70>
 80146a4:	460d      	mov	r5, r1
 80146a6:	4616      	mov	r6, r2
 80146a8:	f7fe faf0 	bl	8012c8c <rcl_service_is_valid>
 80146ac:	b338      	cbz	r0, 80146fe <rcl_action_take_result_request+0x66>
 80146ae:	6820      	ldr	r0, [r4, #0]
 80146b0:	3004      	adds	r0, #4
 80146b2:	f7fe faeb 	bl	8012c8c <rcl_service_is_valid>
 80146b6:	b310      	cbz	r0, 80146fe <rcl_action_take_result_request+0x66>
 80146b8:	6820      	ldr	r0, [r4, #0]
 80146ba:	3008      	adds	r0, #8
 80146bc:	f7fe fae6 	bl	8012c8c <rcl_service_is_valid>
 80146c0:	b1e8      	cbz	r0, 80146fe <rcl_action_take_result_request+0x66>
 80146c2:	6820      	ldr	r0, [r4, #0]
 80146c4:	300c      	adds	r0, #12
 80146c6:	f7f6 fe3b 	bl	800b340 <rcl_publisher_is_valid>
 80146ca:	b1c0      	cbz	r0, 80146fe <rcl_action_take_result_request+0x66>
 80146cc:	6820      	ldr	r0, [r4, #0]
 80146ce:	3010      	adds	r0, #16
 80146d0:	f7f6 fe36 	bl	800b340 <rcl_publisher_is_valid>
 80146d4:	b198      	cbz	r0, 80146fe <rcl_action_take_result_request+0x66>
 80146d6:	b1d5      	cbz	r5, 801470e <rcl_action_take_result_request+0x76>
 80146d8:	b1ce      	cbz	r6, 801470e <rcl_action_take_result_request+0x76>
 80146da:	6820      	ldr	r0, [r4, #0]
 80146dc:	4632      	mov	r2, r6
 80146de:	4629      	mov	r1, r5
 80146e0:	3008      	adds	r0, #8
 80146e2:	f7fe fa7b 	bl	8012bdc <rcl_take_request>
 80146e6:	b148      	cbz	r0, 80146fc <rcl_action_take_result_request+0x64>
 80146e8:	280a      	cmp	r0, #10
 80146ea:	d007      	beq.n	80146fc <rcl_action_take_result_request+0x64>
 80146ec:	f240 2259 	movw	r2, #601	@ 0x259
 80146f0:	f640 0399 	movw	r3, #2201	@ 0x899
 80146f4:	4290      	cmp	r0, r2
 80146f6:	bf0c      	ite	eq
 80146f8:	4618      	moveq	r0, r3
 80146fa:	2001      	movne	r0, #1
 80146fc:	bd70      	pop	{r4, r5, r6, pc}
 80146fe:	f7f7 fdcb 	bl	800c298 <rcutils_reset_error>
 8014702:	f640 0098 	movw	r0, #2200	@ 0x898
 8014706:	bd70      	pop	{r4, r5, r6, pc}
 8014708:	f640 0098 	movw	r0, #2200	@ 0x898
 801470c:	bd70      	pop	{r4, r5, r6, pc}
 801470e:	200b      	movs	r0, #11
 8014710:	bd70      	pop	{r4, r5, r6, pc}
 8014712:	f640 0098 	movw	r0, #2200	@ 0x898
 8014716:	4770      	bx	lr

08014718 <rcl_action_take_cancel_request>:
 8014718:	2800      	cmp	r0, #0
 801471a:	d03a      	beq.n	8014792 <rcl_action_take_cancel_request+0x7a>
 801471c:	b570      	push	{r4, r5, r6, lr}
 801471e:	4604      	mov	r4, r0
 8014720:	6800      	ldr	r0, [r0, #0]
 8014722:	b388      	cbz	r0, 8014788 <rcl_action_take_cancel_request+0x70>
 8014724:	460d      	mov	r5, r1
 8014726:	4616      	mov	r6, r2
 8014728:	f7fe fab0 	bl	8012c8c <rcl_service_is_valid>
 801472c:	b338      	cbz	r0, 801477e <rcl_action_take_cancel_request+0x66>
 801472e:	6820      	ldr	r0, [r4, #0]
 8014730:	3004      	adds	r0, #4
 8014732:	f7fe faab 	bl	8012c8c <rcl_service_is_valid>
 8014736:	b310      	cbz	r0, 801477e <rcl_action_take_cancel_request+0x66>
 8014738:	6820      	ldr	r0, [r4, #0]
 801473a:	3008      	adds	r0, #8
 801473c:	f7fe faa6 	bl	8012c8c <rcl_service_is_valid>
 8014740:	b1e8      	cbz	r0, 801477e <rcl_action_take_cancel_request+0x66>
 8014742:	6820      	ldr	r0, [r4, #0]
 8014744:	300c      	adds	r0, #12
 8014746:	f7f6 fdfb 	bl	800b340 <rcl_publisher_is_valid>
 801474a:	b1c0      	cbz	r0, 801477e <rcl_action_take_cancel_request+0x66>
 801474c:	6820      	ldr	r0, [r4, #0]
 801474e:	3010      	adds	r0, #16
 8014750:	f7f6 fdf6 	bl	800b340 <rcl_publisher_is_valid>
 8014754:	b198      	cbz	r0, 801477e <rcl_action_take_cancel_request+0x66>
 8014756:	b1d5      	cbz	r5, 801478e <rcl_action_take_cancel_request+0x76>
 8014758:	b1ce      	cbz	r6, 801478e <rcl_action_take_cancel_request+0x76>
 801475a:	6820      	ldr	r0, [r4, #0]
 801475c:	4632      	mov	r2, r6
 801475e:	4629      	mov	r1, r5
 8014760:	3004      	adds	r0, #4
 8014762:	f7fe fa3b 	bl	8012bdc <rcl_take_request>
 8014766:	b148      	cbz	r0, 801477c <rcl_action_take_cancel_request+0x64>
 8014768:	280a      	cmp	r0, #10
 801476a:	d007      	beq.n	801477c <rcl_action_take_cancel_request+0x64>
 801476c:	f240 2259 	movw	r2, #601	@ 0x259
 8014770:	f640 0399 	movw	r3, #2201	@ 0x899
 8014774:	4290      	cmp	r0, r2
 8014776:	bf0c      	ite	eq
 8014778:	4618      	moveq	r0, r3
 801477a:	2001      	movne	r0, #1
 801477c:	bd70      	pop	{r4, r5, r6, pc}
 801477e:	f7f7 fd8b 	bl	800c298 <rcutils_reset_error>
 8014782:	f640 0098 	movw	r0, #2200	@ 0x898
 8014786:	bd70      	pop	{r4, r5, r6, pc}
 8014788:	f640 0098 	movw	r0, #2200	@ 0x898
 801478c:	bd70      	pop	{r4, r5, r6, pc}
 801478e:	200b      	movs	r0, #11
 8014790:	bd70      	pop	{r4, r5, r6, pc}
 8014792:	f640 0098 	movw	r0, #2200	@ 0x898
 8014796:	4770      	bx	lr

08014798 <rcl_action_send_cancel_response>:
 8014798:	b398      	cbz	r0, 8014802 <rcl_action_send_cancel_response+0x6a>
 801479a:	b570      	push	{r4, r5, r6, lr}
 801479c:	4604      	mov	r4, r0
 801479e:	6800      	ldr	r0, [r0, #0]
 80147a0:	b350      	cbz	r0, 80147f8 <rcl_action_send_cancel_response+0x60>
 80147a2:	460d      	mov	r5, r1
 80147a4:	4616      	mov	r6, r2
 80147a6:	f7fe fa71 	bl	8012c8c <rcl_service_is_valid>
 80147aa:	b300      	cbz	r0, 80147ee <rcl_action_send_cancel_response+0x56>
 80147ac:	6820      	ldr	r0, [r4, #0]
 80147ae:	3004      	adds	r0, #4
 80147b0:	f7fe fa6c 	bl	8012c8c <rcl_service_is_valid>
 80147b4:	b1d8      	cbz	r0, 80147ee <rcl_action_send_cancel_response+0x56>
 80147b6:	6820      	ldr	r0, [r4, #0]
 80147b8:	3008      	adds	r0, #8
 80147ba:	f7fe fa67 	bl	8012c8c <rcl_service_is_valid>
 80147be:	b1b0      	cbz	r0, 80147ee <rcl_action_send_cancel_response+0x56>
 80147c0:	6820      	ldr	r0, [r4, #0]
 80147c2:	300c      	adds	r0, #12
 80147c4:	f7f6 fdbc 	bl	800b340 <rcl_publisher_is_valid>
 80147c8:	b188      	cbz	r0, 80147ee <rcl_action_send_cancel_response+0x56>
 80147ca:	6820      	ldr	r0, [r4, #0]
 80147cc:	3010      	adds	r0, #16
 80147ce:	f7f6 fdb7 	bl	800b340 <rcl_publisher_is_valid>
 80147d2:	b160      	cbz	r0, 80147ee <rcl_action_send_cancel_response+0x56>
 80147d4:	b19d      	cbz	r5, 80147fe <rcl_action_send_cancel_response+0x66>
 80147d6:	b196      	cbz	r6, 80147fe <rcl_action_send_cancel_response+0x66>
 80147d8:	6820      	ldr	r0, [r4, #0]
 80147da:	4632      	mov	r2, r6
 80147dc:	4629      	mov	r1, r5
 80147de:	3004      	adds	r0, #4
 80147e0:	f7fe fa3c 	bl	8012c5c <rcl_send_response>
 80147e4:	b110      	cbz	r0, 80147ec <rcl_action_send_cancel_response+0x54>
 80147e6:	2802      	cmp	r0, #2
 80147e8:	bf18      	it	ne
 80147ea:	2001      	movne	r0, #1
 80147ec:	bd70      	pop	{r4, r5, r6, pc}
 80147ee:	f7f7 fd53 	bl	800c298 <rcutils_reset_error>
 80147f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80147f6:	bd70      	pop	{r4, r5, r6, pc}
 80147f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80147fc:	bd70      	pop	{r4, r5, r6, pc}
 80147fe:	200b      	movs	r0, #11
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	f640 0098 	movw	r0, #2200	@ 0x898
 8014806:	4770      	bx	lr

08014808 <rcl_action_wait_set_add_action_server>:
 8014808:	2800      	cmp	r0, #0
 801480a:	d04d      	beq.n	80148a8 <rcl_action_wait_set_add_action_server+0xa0>
 801480c:	b570      	push	{r4, r5, r6, lr}
 801480e:	460c      	mov	r4, r1
 8014810:	b159      	cbz	r1, 801482a <rcl_action_wait_set_add_action_server+0x22>
 8014812:	4605      	mov	r5, r0
 8014814:	6808      	ldr	r0, [r1, #0]
 8014816:	b140      	cbz	r0, 801482a <rcl_action_wait_set_add_action_server+0x22>
 8014818:	4616      	mov	r6, r2
 801481a:	f7fe fa37 	bl	8012c8c <rcl_service_is_valid>
 801481e:	b120      	cbz	r0, 801482a <rcl_action_wait_set_add_action_server+0x22>
 8014820:	6820      	ldr	r0, [r4, #0]
 8014822:	3004      	adds	r0, #4
 8014824:	f7fe fa32 	bl	8012c8c <rcl_service_is_valid>
 8014828:	b910      	cbnz	r0, 8014830 <rcl_action_wait_set_add_action_server+0x28>
 801482a:	f640 0098 	movw	r0, #2200	@ 0x898
 801482e:	bd70      	pop	{r4, r5, r6, pc}
 8014830:	6820      	ldr	r0, [r4, #0]
 8014832:	3008      	adds	r0, #8
 8014834:	f7fe fa2a 	bl	8012c8c <rcl_service_is_valid>
 8014838:	2800      	cmp	r0, #0
 801483a:	d0f6      	beq.n	801482a <rcl_action_wait_set_add_action_server+0x22>
 801483c:	6820      	ldr	r0, [r4, #0]
 801483e:	300c      	adds	r0, #12
 8014840:	f7f6 fd96 	bl	800b370 <rcl_publisher_is_valid_except_context>
 8014844:	2800      	cmp	r0, #0
 8014846:	d0f0      	beq.n	801482a <rcl_action_wait_set_add_action_server+0x22>
 8014848:	6820      	ldr	r0, [r4, #0]
 801484a:	3010      	adds	r0, #16
 801484c:	f7f6 fd90 	bl	800b370 <rcl_publisher_is_valid_except_context>
 8014850:	2800      	cmp	r0, #0
 8014852:	d0ea      	beq.n	801482a <rcl_action_wait_set_add_action_server+0x22>
 8014854:	6821      	ldr	r1, [r4, #0]
 8014856:	4628      	mov	r0, r5
 8014858:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801485c:	f7ff face 	bl	8013dfc <rcl_wait_set_add_service>
 8014860:	2800      	cmp	r0, #0
 8014862:	d1e4      	bne.n	801482e <rcl_action_wait_set_add_action_server+0x26>
 8014864:	6821      	ldr	r1, [r4, #0]
 8014866:	4628      	mov	r0, r5
 8014868:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801486c:	3104      	adds	r1, #4
 801486e:	f7ff fac5 	bl	8013dfc <rcl_wait_set_add_service>
 8014872:	2800      	cmp	r0, #0
 8014874:	d1db      	bne.n	801482e <rcl_action_wait_set_add_action_server+0x26>
 8014876:	6821      	ldr	r1, [r4, #0]
 8014878:	4628      	mov	r0, r5
 801487a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801487e:	3108      	adds	r1, #8
 8014880:	f7ff fabc 	bl	8013dfc <rcl_wait_set_add_service>
 8014884:	2800      	cmp	r0, #0
 8014886:	d1d2      	bne.n	801482e <rcl_action_wait_set_add_action_server+0x26>
 8014888:	6821      	ldr	r1, [r4, #0]
 801488a:	4628      	mov	r0, r5
 801488c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014890:	3114      	adds	r1, #20
 8014892:	f7ff fa57 	bl	8013d44 <rcl_wait_set_add_timer>
 8014896:	2800      	cmp	r0, #0
 8014898:	d1c9      	bne.n	801482e <rcl_action_wait_set_add_action_server+0x26>
 801489a:	2e00      	cmp	r6, #0
 801489c:	d0c7      	beq.n	801482e <rcl_action_wait_set_add_action_server+0x26>
 801489e:	6823      	ldr	r3, [r4, #0]
 80148a0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80148a4:	6033      	str	r3, [r6, #0]
 80148a6:	bd70      	pop	{r4, r5, r6, pc}
 80148a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop

080148b0 <rcl_action_server_wait_set_get_entities_ready>:
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d05a      	beq.n	801496a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80148b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148b6:	460c      	mov	r4, r1
 80148b8:	b161      	cbz	r1, 80148d4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148ba:	4605      	mov	r5, r0
 80148bc:	6808      	ldr	r0, [r1, #0]
 80148be:	b148      	cbz	r0, 80148d4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148c0:	4616      	mov	r6, r2
 80148c2:	461f      	mov	r7, r3
 80148c4:	f7fe f9e2 	bl	8012c8c <rcl_service_is_valid>
 80148c8:	b120      	cbz	r0, 80148d4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148ca:	6820      	ldr	r0, [r4, #0]
 80148cc:	3004      	adds	r0, #4
 80148ce:	f7fe f9dd 	bl	8012c8c <rcl_service_is_valid>
 80148d2:	b910      	cbnz	r0, 80148da <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80148d4:	f640 0098 	movw	r0, #2200	@ 0x898
 80148d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148da:	6820      	ldr	r0, [r4, #0]
 80148dc:	3008      	adds	r0, #8
 80148de:	f7fe f9d5 	bl	8012c8c <rcl_service_is_valid>
 80148e2:	2800      	cmp	r0, #0
 80148e4:	d0f6      	beq.n	80148d4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148e6:	6820      	ldr	r0, [r4, #0]
 80148e8:	300c      	adds	r0, #12
 80148ea:	f7f6 fd41 	bl	800b370 <rcl_publisher_is_valid_except_context>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d0f0      	beq.n	80148d4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148f2:	6820      	ldr	r0, [r4, #0]
 80148f4:	3010      	adds	r0, #16
 80148f6:	f7f6 fd3b 	bl	800b370 <rcl_publisher_is_valid_except_context>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d0ea      	beq.n	80148d4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148fe:	b3be      	cbz	r6, 8014970 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014900:	b3b7      	cbz	r7, 8014970 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014902:	9b06      	ldr	r3, [sp, #24]
 8014904:	b3a3      	cbz	r3, 8014970 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014906:	9b07      	ldr	r3, [sp, #28]
 8014908:	b393      	cbz	r3, 8014970 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801490a:	6821      	ldr	r1, [r4, #0]
 801490c:	692a      	ldr	r2, [r5, #16]
 801490e:	6a2c      	ldr	r4, [r5, #32]
 8014910:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8014914:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014918:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801491c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014920:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8014924:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014928:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801492c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014930:	1a64      	subs	r4, r4, r1
 8014932:	fab4 f484 	clz	r4, r4
 8014936:	0964      	lsrs	r4, r4, #5
 8014938:	7034      	strb	r4, [r6, #0]
 801493a:	1d0c      	adds	r4, r1, #4
 801493c:	1b1b      	subs	r3, r3, r4
 801493e:	fab3 f383 	clz	r3, r3
 8014942:	095b      	lsrs	r3, r3, #5
 8014944:	f101 0408 	add.w	r4, r1, #8
 8014948:	703b      	strb	r3, [r7, #0]
 801494a:	f101 0314 	add.w	r3, r1, #20
 801494e:	1b01      	subs	r1, r0, r4
 8014950:	1ad3      	subs	r3, r2, r3
 8014952:	fab1 f181 	clz	r1, r1
 8014956:	9a06      	ldr	r2, [sp, #24]
 8014958:	0949      	lsrs	r1, r1, #5
 801495a:	7011      	strb	r1, [r2, #0]
 801495c:	fab3 f383 	clz	r3, r3
 8014960:	9a07      	ldr	r2, [sp, #28]
 8014962:	095b      	lsrs	r3, r3, #5
 8014964:	2000      	movs	r0, #0
 8014966:	7013      	strb	r3, [r2, #0]
 8014968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801496a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801496e:	4770      	bx	lr
 8014970:	200b      	movs	r0, #11
 8014972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014974 <_execute_event_handler>:
 8014974:	2002      	movs	r0, #2
 8014976:	4770      	bx	lr

08014978 <_cancel_goal_event_handler>:
 8014978:	2003      	movs	r0, #3
 801497a:	4770      	bx	lr

0801497c <_succeed_event_handler>:
 801497c:	2004      	movs	r0, #4
 801497e:	4770      	bx	lr

08014980 <_abort_event_handler>:
 8014980:	2006      	movs	r0, #6
 8014982:	4770      	bx	lr

08014984 <_canceled_event_handler>:
 8014984:	2005      	movs	r0, #5
 8014986:	4770      	bx	lr

08014988 <rcl_action_transition_goal_state>:
 8014988:	b2c2      	uxtb	r2, r0
 801498a:	2a06      	cmp	r2, #6
 801498c:	d80c      	bhi.n	80149a8 <rcl_action_transition_goal_state+0x20>
 801498e:	2904      	cmp	r1, #4
 8014990:	d80a      	bhi.n	80149a8 <rcl_action_transition_goal_state+0x20>
 8014992:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8014996:	b410      	push	{r4}
 8014998:	1853      	adds	r3, r2, r1
 801499a:	4c06      	ldr	r4, [pc, #24]	@ (80149b4 <rcl_action_transition_goal_state+0x2c>)
 801499c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80149a0:	b123      	cbz	r3, 80149ac <rcl_action_transition_goal_state+0x24>
 80149a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149a6:	4718      	bx	r3
 80149a8:	2000      	movs	r0, #0
 80149aa:	4770      	bx	lr
 80149ac:	2000      	movs	r0, #0
 80149ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149b2:	4770      	bx	lr
 80149b4:	0801975c 	.word	0x0801975c

080149b8 <rcl_action_get_zero_initialized_cancel_response>:
 80149b8:	b510      	push	{r4, lr}
 80149ba:	4c07      	ldr	r4, [pc, #28]	@ (80149d8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80149bc:	4686      	mov	lr, r0
 80149be:	4684      	mov	ip, r0
 80149c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149cc:	6823      	ldr	r3, [r4, #0]
 80149ce:	f8cc 3000 	str.w	r3, [ip]
 80149d2:	4670      	mov	r0, lr
 80149d4:	bd10      	pop	{r4, pc}
 80149d6:	bf00      	nop
 80149d8:	080197e8 	.word	0x080197e8

080149dc <rclc_action_send_result_request>:
 80149dc:	b1d0      	cbz	r0, 8014a14 <rclc_action_send_result_request+0x38>
 80149de:	b500      	push	{lr}
 80149e0:	4684      	mov	ip, r0
 80149e2:	b087      	sub	sp, #28
 80149e4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80149e8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80149ec:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80149f0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80149f4:	f10d 0e08 	add.w	lr, sp, #8
 80149f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014a00:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8014a04:	a902      	add	r1, sp, #8
 8014a06:	3010      	adds	r0, #16
 8014a08:	f7ff fbda 	bl	80141c0 <rcl_action_send_result_request>
 8014a0c:	b920      	cbnz	r0, 8014a18 <rclc_action_send_result_request+0x3c>
 8014a0e:	b007      	add	sp, #28
 8014a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a14:	200b      	movs	r0, #11
 8014a16:	4770      	bx	lr
 8014a18:	9001      	str	r0, [sp, #4]
 8014a1a:	f7f7 fc3d 	bl	800c298 <rcutils_reset_error>
 8014a1e:	9801      	ldr	r0, [sp, #4]
 8014a20:	b007      	add	sp, #28
 8014a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a26:	bf00      	nop

08014a28 <rclc_action_take_goal_handle>:
 8014a28:	b160      	cbz	r0, 8014a44 <rclc_action_take_goal_handle+0x1c>
 8014a2a:	6883      	ldr	r3, [r0, #8]
 8014a2c:	b143      	cbz	r3, 8014a40 <rclc_action_take_goal_handle+0x18>
 8014a2e:	6819      	ldr	r1, [r3, #0]
 8014a30:	6081      	str	r1, [r0, #8]
 8014a32:	2200      	movs	r2, #0
 8014a34:	721a      	strb	r2, [r3, #8]
 8014a36:	68c1      	ldr	r1, [r0, #12]
 8014a38:	6019      	str	r1, [r3, #0]
 8014a3a:	621a      	str	r2, [r3, #32]
 8014a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8014a3e:	60c3      	str	r3, [r0, #12]
 8014a40:	4618      	mov	r0, r3
 8014a42:	4770      	bx	lr
 8014a44:	4603      	mov	r3, r0
 8014a46:	e7fb      	b.n	8014a40 <rclc_action_take_goal_handle+0x18>

08014a48 <rclc_action_remove_used_goal_handle>:
 8014a48:	b180      	cbz	r0, 8014a6c <rclc_action_remove_used_goal_handle+0x24>
 8014a4a:	b179      	cbz	r1, 8014a6c <rclc_action_remove_used_goal_handle+0x24>
 8014a4c:	68c3      	ldr	r3, [r0, #12]
 8014a4e:	4299      	cmp	r1, r3
 8014a50:	d00d      	beq.n	8014a6e <rclc_action_remove_used_goal_handle+0x26>
 8014a52:	b12b      	cbz	r3, 8014a60 <rclc_action_remove_used_goal_handle+0x18>
 8014a54:	681a      	ldr	r2, [r3, #0]
 8014a56:	4291      	cmp	r1, r2
 8014a58:	d003      	beq.n	8014a62 <rclc_action_remove_used_goal_handle+0x1a>
 8014a5a:	4613      	mov	r3, r2
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d1f9      	bne.n	8014a54 <rclc_action_remove_used_goal_handle+0xc>
 8014a60:	4770      	bx	lr
 8014a62:	680a      	ldr	r2, [r1, #0]
 8014a64:	601a      	str	r2, [r3, #0]
 8014a66:	6883      	ldr	r3, [r0, #8]
 8014a68:	600b      	str	r3, [r1, #0]
 8014a6a:	6081      	str	r1, [r0, #8]
 8014a6c:	4770      	bx	lr
 8014a6e:	680b      	ldr	r3, [r1, #0]
 8014a70:	60c3      	str	r3, [r0, #12]
 8014a72:	e7f8      	b.n	8014a66 <rclc_action_remove_used_goal_handle+0x1e>

08014a74 <rclc_action_find_goal_handle_by_uuid>:
 8014a74:	b538      	push	{r3, r4, r5, lr}
 8014a76:	b180      	cbz	r0, 8014a9a <rclc_action_find_goal_handle_by_uuid+0x26>
 8014a78:	460d      	mov	r5, r1
 8014a7a:	b181      	cbz	r1, 8014a9e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8014a7c:	68c4      	ldr	r4, [r0, #12]
 8014a7e:	b914      	cbnz	r4, 8014a86 <rclc_action_find_goal_handle_by_uuid+0x12>
 8014a80:	e009      	b.n	8014a96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a82:	6824      	ldr	r4, [r4, #0]
 8014a84:	b13c      	cbz	r4, 8014a96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a86:	f104 0009 	add.w	r0, r4, #9
 8014a8a:	2210      	movs	r2, #16
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	f003 f9bf 	bl	8017e10 <memcmp>
 8014a92:	2800      	cmp	r0, #0
 8014a94:	d1f5      	bne.n	8014a82 <rclc_action_find_goal_handle_by_uuid+0xe>
 8014a96:	4620      	mov	r0, r4
 8014a98:	bd38      	pop	{r3, r4, r5, pc}
 8014a9a:	4604      	mov	r4, r0
 8014a9c:	e7fb      	b.n	8014a96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a9e:	460c      	mov	r4, r1
 8014aa0:	e7f9      	b.n	8014a96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014aa2:	bf00      	nop

08014aa4 <rclc_action_find_first_handle_by_status>:
 8014aa4:	b140      	cbz	r0, 8014ab8 <rclc_action_find_first_handle_by_status+0x14>
 8014aa6:	68c0      	ldr	r0, [r0, #12]
 8014aa8:	b910      	cbnz	r0, 8014ab0 <rclc_action_find_first_handle_by_status+0xc>
 8014aaa:	e005      	b.n	8014ab8 <rclc_action_find_first_handle_by_status+0x14>
 8014aac:	6800      	ldr	r0, [r0, #0]
 8014aae:	b118      	cbz	r0, 8014ab8 <rclc_action_find_first_handle_by_status+0x14>
 8014ab0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014ab4:	428b      	cmp	r3, r1
 8014ab6:	d1f9      	bne.n	8014aac <rclc_action_find_first_handle_by_status+0x8>
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop

08014abc <rclc_action_find_first_terminated_handle>:
 8014abc:	b140      	cbz	r0, 8014ad0 <rclc_action_find_first_terminated_handle+0x14>
 8014abe:	68c0      	ldr	r0, [r0, #12]
 8014ac0:	b910      	cbnz	r0, 8014ac8 <rclc_action_find_first_terminated_handle+0xc>
 8014ac2:	e005      	b.n	8014ad0 <rclc_action_find_first_terminated_handle+0x14>
 8014ac4:	6800      	ldr	r0, [r0, #0]
 8014ac6:	b118      	cbz	r0, 8014ad0 <rclc_action_find_first_terminated_handle+0x14>
 8014ac8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014acc:	2b03      	cmp	r3, #3
 8014ace:	ddf9      	ble.n	8014ac4 <rclc_action_find_first_terminated_handle+0x8>
 8014ad0:	4770      	bx	lr
 8014ad2:	bf00      	nop

08014ad4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014ad4:	b170      	cbz	r0, 8014af4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014ad6:	68c0      	ldr	r0, [r0, #12]
 8014ad8:	b160      	cbz	r0, 8014af4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014ada:	b410      	push	{r4}
 8014adc:	e001      	b.n	8014ae2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014ade:	6800      	ldr	r0, [r0, #0]
 8014ae0:	b128      	cbz	r0, 8014aee <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014ae2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014ae6:	4299      	cmp	r1, r3
 8014ae8:	bf08      	it	eq
 8014aea:	4294      	cmpeq	r4, r2
 8014aec:	d1f7      	bne.n	8014ade <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014af2:	4770      	bx	lr
 8014af4:	4770      	bx	lr
 8014af6:	bf00      	nop

08014af8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014af8:	b170      	cbz	r0, 8014b18 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014afa:	68c0      	ldr	r0, [r0, #12]
 8014afc:	b160      	cbz	r0, 8014b18 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014afe:	b410      	push	{r4}
 8014b00:	e001      	b.n	8014b06 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014b02:	6800      	ldr	r0, [r0, #0]
 8014b04:	b128      	cbz	r0, 8014b12 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014b06:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014b0a:	4299      	cmp	r1, r3
 8014b0c:	bf08      	it	eq
 8014b0e:	4294      	cmpeq	r4, r2
 8014b10:	d1f7      	bne.n	8014b02 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b16:	4770      	bx	lr
 8014b18:	4770      	bx	lr
 8014b1a:	bf00      	nop

08014b1c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014b1c:	b170      	cbz	r0, 8014b3c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014b1e:	68c0      	ldr	r0, [r0, #12]
 8014b20:	b160      	cbz	r0, 8014b3c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014b22:	b410      	push	{r4}
 8014b24:	e001      	b.n	8014b2a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014b26:	6800      	ldr	r0, [r0, #0]
 8014b28:	b128      	cbz	r0, 8014b36 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014b2a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014b2e:	4299      	cmp	r1, r3
 8014b30:	bf08      	it	eq
 8014b32:	4294      	cmpeq	r4, r2
 8014b34:	d1f7      	bne.n	8014b26 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b3a:	4770      	bx	lr
 8014b3c:	4770      	bx	lr
 8014b3e:	bf00      	nop

08014b40 <rclc_action_find_first_handle_with_goal_response>:
 8014b40:	b140      	cbz	r0, 8014b54 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014b42:	68c0      	ldr	r0, [r0, #12]
 8014b44:	b910      	cbnz	r0, 8014b4c <rclc_action_find_first_handle_with_goal_response+0xc>
 8014b46:	e005      	b.n	8014b54 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014b48:	6800      	ldr	r0, [r0, #0]
 8014b4a:	b118      	cbz	r0, 8014b54 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014b4c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d0f9      	beq.n	8014b48 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014b54:	4770      	bx	lr
 8014b56:	bf00      	nop

08014b58 <rclc_action_find_first_handle_with_result_response>:
 8014b58:	b140      	cbz	r0, 8014b6c <rclc_action_find_first_handle_with_result_response+0x14>
 8014b5a:	68c0      	ldr	r0, [r0, #12]
 8014b5c:	b910      	cbnz	r0, 8014b64 <rclc_action_find_first_handle_with_result_response+0xc>
 8014b5e:	e005      	b.n	8014b6c <rclc_action_find_first_handle_with_result_response+0x14>
 8014b60:	6800      	ldr	r0, [r0, #0]
 8014b62:	b118      	cbz	r0, 8014b6c <rclc_action_find_first_handle_with_result_response+0x14>
 8014b64:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d0f9      	beq.n	8014b60 <rclc_action_find_first_handle_with_result_response+0x8>
 8014b6c:	4770      	bx	lr
 8014b6e:	bf00      	nop

08014b70 <rclc_action_server_response_goal_request>:
 8014b70:	b198      	cbz	r0, 8014b9a <rclc_action_server_response_goal_request+0x2a>
 8014b72:	b510      	push	{r4, lr}
 8014b74:	6844      	ldr	r4, [r0, #4]
 8014b76:	b086      	sub	sp, #24
 8014b78:	2200      	movs	r2, #0
 8014b7a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014b7e:	460b      	mov	r3, r1
 8014b80:	9205      	str	r2, [sp, #20]
 8014b82:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8014b86:	aa03      	add	r2, sp, #12
 8014b88:	f104 0010 	add.w	r0, r4, #16
 8014b8c:	f88d 300c 	strb.w	r3, [sp, #12]
 8014b90:	f7ff fd4a 	bl	8014628 <rcl_action_send_goal_response>
 8014b94:	b918      	cbnz	r0, 8014b9e <rclc_action_server_response_goal_request+0x2e>
 8014b96:	b006      	add	sp, #24
 8014b98:	bd10      	pop	{r4, pc}
 8014b9a:	200b      	movs	r0, #11
 8014b9c:	4770      	bx	lr
 8014b9e:	9001      	str	r0, [sp, #4]
 8014ba0:	f7f7 fb7a 	bl	800c298 <rcutils_reset_error>
 8014ba4:	9801      	ldr	r0, [sp, #4]
 8014ba6:	b006      	add	sp, #24
 8014ba8:	bd10      	pop	{r4, pc}
 8014baa:	bf00      	nop
 8014bac:	0000      	movs	r0, r0
	...

08014bb0 <rclc_action_server_goal_cancel_accept>:
 8014bb0:	b310      	cbz	r0, 8014bf8 <rclc_action_server_goal_cancel_accept+0x48>
 8014bb2:	b510      	push	{r4, lr}
 8014bb4:	b090      	sub	sp, #64	@ 0x40
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	a806      	add	r0, sp, #24
 8014bba:	f7ff fefd 	bl	80149b8 <rcl_action_get_zero_initialized_cancel_response>
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014bc4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014bc8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014bcc:	f88d 3018 	strb.w	r3, [sp, #24]
 8014bd0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014bd4:	f8cd d01c 	str.w	sp, [sp, #28]
 8014bd8:	46ec      	mov	ip, sp
 8014bda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014bde:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014c00 <rclc_action_server_goal_cancel_accept+0x50>
 8014be2:	6860      	ldr	r0, [r4, #4]
 8014be4:	aa06      	add	r2, sp, #24
 8014be6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014bea:	3010      	adds	r0, #16
 8014bec:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014bf0:	f7ff fdd2 	bl	8014798 <rcl_action_send_cancel_response>
 8014bf4:	b010      	add	sp, #64	@ 0x40
 8014bf6:	bd10      	pop	{r4, pc}
 8014bf8:	200b      	movs	r0, #11
 8014bfa:	4770      	bx	lr
 8014bfc:	f3af 8000 	nop.w
 8014c00:	00000001 	.word	0x00000001
 8014c04:	00000001 	.word	0x00000001

08014c08 <rclc_action_server_goal_cancel_reject>:
 8014c08:	b082      	sub	sp, #8
 8014c0a:	b530      	push	{r4, r5, lr}
 8014c0c:	b08b      	sub	sp, #44	@ 0x2c
 8014c0e:	ac0e      	add	r4, sp, #56	@ 0x38
 8014c10:	e884 000c 	stmia.w	r4, {r2, r3}
 8014c14:	b188      	cbz	r0, 8014c3a <rclc_action_server_goal_cancel_reject+0x32>
 8014c16:	4604      	mov	r4, r0
 8014c18:	a801      	add	r0, sp, #4
 8014c1a:	460d      	mov	r5, r1
 8014c1c:	f7ff fecc 	bl	80149b8 <rcl_action_get_zero_initialized_cancel_response>
 8014c20:	aa01      	add	r2, sp, #4
 8014c22:	a90e      	add	r1, sp, #56	@ 0x38
 8014c24:	f104 0010 	add.w	r0, r4, #16
 8014c28:	f88d 5004 	strb.w	r5, [sp, #4]
 8014c2c:	f7ff fdb4 	bl	8014798 <rcl_action_send_cancel_response>
 8014c30:	b00b      	add	sp, #44	@ 0x2c
 8014c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c36:	b002      	add	sp, #8
 8014c38:	4770      	bx	lr
 8014c3a:	200b      	movs	r0, #11
 8014c3c:	b00b      	add	sp, #44	@ 0x2c
 8014c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c42:	b002      	add	sp, #8
 8014c44:	4770      	bx	lr
 8014c46:	bf00      	nop

08014c48 <__atomic_load_8>:
 8014c48:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014c4c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014c50:	4a15      	ldr	r2, [pc, #84]	@ (8014ca8 <__atomic_load_8+0x60>)
 8014c52:	4b16      	ldr	r3, [pc, #88]	@ (8014cac <__atomic_load_8+0x64>)
 8014c54:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014c58:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014c5c:	fb02 f101 	mul.w	r1, r2, r1
 8014c60:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014c64:	fba3 2301 	umull	r2, r3, r3, r1
 8014c68:	091b      	lsrs	r3, r3, #4
 8014c6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014c6e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014c72:	b4d0      	push	{r4, r6, r7}
 8014c74:	4c0e      	ldr	r4, [pc, #56]	@ (8014cb0 <__atomic_load_8+0x68>)
 8014c76:	1ac9      	subs	r1, r1, r3
 8014c78:	1862      	adds	r2, r4, r1
 8014c7a:	f04f 0c01 	mov.w	ip, #1
 8014c7e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014c82:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014c86:	2e00      	cmp	r6, #0
 8014c88:	d1f9      	bne.n	8014c7e <__atomic_load_8+0x36>
 8014c8a:	f3bf 8f5b 	dmb	ish
 8014c8e:	b2db      	uxtb	r3, r3
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d1f4      	bne.n	8014c7e <__atomic_load_8+0x36>
 8014c94:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014c98:	f3bf 8f5b 	dmb	ish
 8014c9c:	5463      	strb	r3, [r4, r1]
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	4639      	mov	r1, r7
 8014ca2:	bcd0      	pop	{r4, r6, r7}
 8014ca4:	4770      	bx	lr
 8014ca6:	bf00      	nop
 8014ca8:	27d4eb2d 	.word	0x27d4eb2d
 8014cac:	b21642c9 	.word	0xb21642c9
 8014cb0:	2000cb7c 	.word	0x2000cb7c

08014cb4 <__atomic_store_8>:
 8014cb4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014cb8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014cbc:	b570      	push	{r4, r5, r6, lr}
 8014cbe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014cc2:	4c14      	ldr	r4, [pc, #80]	@ (8014d14 <__atomic_store_8+0x60>)
 8014cc4:	4d14      	ldr	r5, [pc, #80]	@ (8014d18 <__atomic_store_8+0x64>)
 8014cc6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014cca:	fb04 f101 	mul.w	r1, r4, r1
 8014cce:	4c13      	ldr	r4, [pc, #76]	@ (8014d1c <__atomic_store_8+0x68>)
 8014cd0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014cd4:	fba4 4e01 	umull	r4, lr, r4, r1
 8014cd8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014cdc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014ce0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014ce4:	eba1 0e0e 	sub.w	lr, r1, lr
 8014ce8:	eb05 0c0e 	add.w	ip, r5, lr
 8014cec:	f04f 0401 	mov.w	r4, #1
 8014cf0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014cf4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014cf8:	2e00      	cmp	r6, #0
 8014cfa:	d1f9      	bne.n	8014cf0 <__atomic_store_8+0x3c>
 8014cfc:	f3bf 8f5b 	dmb	ish
 8014d00:	b2c9      	uxtb	r1, r1
 8014d02:	2900      	cmp	r1, #0
 8014d04:	d1f4      	bne.n	8014cf0 <__atomic_store_8+0x3c>
 8014d06:	e9c0 2300 	strd	r2, r3, [r0]
 8014d0a:	f3bf 8f5b 	dmb	ish
 8014d0e:	f805 100e 	strb.w	r1, [r5, lr]
 8014d12:	bd70      	pop	{r4, r5, r6, pc}
 8014d14:	27d4eb2d 	.word	0x27d4eb2d
 8014d18:	2000cb7c 	.word	0x2000cb7c
 8014d1c:	b21642c9 	.word	0xb21642c9

08014d20 <__atomic_exchange_8>:
 8014d20:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014d24:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014d28:	4916      	ldr	r1, [pc, #88]	@ (8014d84 <__atomic_exchange_8+0x64>)
 8014d2a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014d2e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014d32:	fb01 fc0c 	mul.w	ip, r1, ip
 8014d36:	4914      	ldr	r1, [pc, #80]	@ (8014d88 <__atomic_exchange_8+0x68>)
 8014d38:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014d3c:	b570      	push	{r4, r5, r6, lr}
 8014d3e:	4605      	mov	r5, r0
 8014d40:	fba1 010c 	umull	r0, r1, r1, ip
 8014d44:	0909      	lsrs	r1, r1, #4
 8014d46:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014d4a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8014d8c <__atomic_exchange_8+0x6c>)
 8014d50:	ebac 0c01 	sub.w	ip, ip, r1
 8014d54:	eb06 010c 	add.w	r1, r6, ip
 8014d58:	f04f 0e01 	mov.w	lr, #1
 8014d5c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014d60:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d1f9      	bne.n	8014d5c <__atomic_exchange_8+0x3c>
 8014d68:	f3bf 8f5b 	dmb	ish
 8014d6c:	b2e4      	uxtb	r4, r4
 8014d6e:	2c00      	cmp	r4, #0
 8014d70:	d1f4      	bne.n	8014d5c <__atomic_exchange_8+0x3c>
 8014d72:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014d76:	e9c5 2300 	strd	r2, r3, [r5]
 8014d7a:	f3bf 8f5b 	dmb	ish
 8014d7e:	f806 400c 	strb.w	r4, [r6, ip]
 8014d82:	bd70      	pop	{r4, r5, r6, pc}
 8014d84:	27d4eb2d 	.word	0x27d4eb2d
 8014d88:	b21642c9 	.word	0xb21642c9
 8014d8c:	2000cb7c 	.word	0x2000cb7c

08014d90 <rcutils_get_env>:
 8014d90:	b168      	cbz	r0, 8014dae <rcutils_get_env+0x1e>
 8014d92:	b510      	push	{r4, lr}
 8014d94:	460c      	mov	r4, r1
 8014d96:	b129      	cbz	r1, 8014da4 <rcutils_get_env+0x14>
 8014d98:	f002 fc96 	bl	80176c8 <getenv>
 8014d9c:	b120      	cbz	r0, 8014da8 <rcutils_get_env+0x18>
 8014d9e:	6020      	str	r0, [r4, #0]
 8014da0:	2000      	movs	r0, #0
 8014da2:	bd10      	pop	{r4, pc}
 8014da4:	4803      	ldr	r0, [pc, #12]	@ (8014db4 <rcutils_get_env+0x24>)
 8014da6:	bd10      	pop	{r4, pc}
 8014da8:	4b03      	ldr	r3, [pc, #12]	@ (8014db8 <rcutils_get_env+0x28>)
 8014daa:	6023      	str	r3, [r4, #0]
 8014dac:	bd10      	pop	{r4, pc}
 8014dae:	4803      	ldr	r0, [pc, #12]	@ (8014dbc <rcutils_get_env+0x2c>)
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop
 8014db4:	08019828 	.word	0x08019828
 8014db8:	0801994c 	.word	0x0801994c
 8014dbc:	0801980c 	.word	0x0801980c

08014dc0 <rcutils_is_directory>:
 8014dc0:	2000      	movs	r0, #0
 8014dc2:	4770      	bx	lr

08014dc4 <rcutils_join_path>:
 8014dc4:	b082      	sub	sp, #8
 8014dc6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014dca:	2000      	movs	r0, #0
 8014dcc:	b002      	add	sp, #8
 8014dce:	4770      	bx	lr

08014dd0 <rcutils_to_native_path>:
 8014dd0:	b084      	sub	sp, #16
 8014dd2:	a801      	add	r0, sp, #4
 8014dd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014dd8:	b004      	add	sp, #16
 8014dda:	2000      	movs	r0, #0
 8014ddc:	4770      	bx	lr
 8014dde:	bf00      	nop

08014de0 <rcutils_format_string_limit>:
 8014de0:	b40f      	push	{r0, r1, r2, r3}
 8014de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014de4:	b083      	sub	sp, #12
 8014de6:	ac08      	add	r4, sp, #32
 8014de8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014dee:	b34e      	cbz	r6, 8014e44 <rcutils_format_string_limit+0x64>
 8014df0:	a808      	add	r0, sp, #32
 8014df2:	f7f7 fa2b 	bl	800c24c <rcutils_allocator_is_valid>
 8014df6:	b328      	cbz	r0, 8014e44 <rcutils_format_string_limit+0x64>
 8014df8:	2100      	movs	r1, #0
 8014dfa:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014dfc:	4632      	mov	r2, r6
 8014dfe:	4608      	mov	r0, r1
 8014e00:	e9cd 3300 	strd	r3, r3, [sp]
 8014e04:	f000 f8f4 	bl	8014ff0 <rcutils_vsnprintf>
 8014e08:	1c43      	adds	r3, r0, #1
 8014e0a:	4605      	mov	r5, r0
 8014e0c:	d01a      	beq.n	8014e44 <rcutils_format_string_limit+0x64>
 8014e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014e12:	1c47      	adds	r7, r0, #1
 8014e14:	429f      	cmp	r7, r3
 8014e16:	bf84      	itt	hi
 8014e18:	461f      	movhi	r7, r3
 8014e1a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014e1e:	4638      	mov	r0, r7
 8014e20:	9b08      	ldr	r3, [sp, #32]
 8014e22:	4798      	blx	r3
 8014e24:	4604      	mov	r4, r0
 8014e26:	b168      	cbz	r0, 8014e44 <rcutils_format_string_limit+0x64>
 8014e28:	9b01      	ldr	r3, [sp, #4]
 8014e2a:	4632      	mov	r2, r6
 8014e2c:	4639      	mov	r1, r7
 8014e2e:	f000 f8df 	bl	8014ff0 <rcutils_vsnprintf>
 8014e32:	2800      	cmp	r0, #0
 8014e34:	db02      	blt.n	8014e3c <rcutils_format_string_limit+0x5c>
 8014e36:	2300      	movs	r3, #0
 8014e38:	5563      	strb	r3, [r4, r5]
 8014e3a:	e004      	b.n	8014e46 <rcutils_format_string_limit+0x66>
 8014e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e3e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014e40:	4620      	mov	r0, r4
 8014e42:	4798      	blx	r3
 8014e44:	2400      	movs	r4, #0
 8014e46:	4620      	mov	r0, r4
 8014e48:	b003      	add	sp, #12
 8014e4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e4e:	b004      	add	sp, #16
 8014e50:	4770      	bx	lr
 8014e52:	bf00      	nop

08014e54 <rcutils_repl_str>:
 8014e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e58:	ed2d 8b02 	vpush	{d8}
 8014e5c:	b087      	sub	sp, #28
 8014e5e:	4680      	mov	r8, r0
 8014e60:	4608      	mov	r0, r1
 8014e62:	f8cd 8004 	str.w	r8, [sp, #4]
 8014e66:	ee08 2a10 	vmov	s16, r2
 8014e6a:	468a      	mov	sl, r1
 8014e6c:	4699      	mov	r9, r3
 8014e6e:	f7eb f9e1 	bl	8000234 <strlen>
 8014e72:	2600      	movs	r6, #0
 8014e74:	4647      	mov	r7, r8
 8014e76:	9002      	str	r0, [sp, #8]
 8014e78:	46b3      	mov	fp, r6
 8014e7a:	2510      	movs	r5, #16
 8014e7c:	46b0      	mov	r8, r6
 8014e7e:	e01d      	b.n	8014ebc <rcutils_repl_str+0x68>
 8014e80:	f10b 0b01 	add.w	fp, fp, #1
 8014e84:	455e      	cmp	r6, fp
 8014e86:	d211      	bcs.n	8014eac <rcutils_repl_str+0x58>
 8014e88:	442e      	add	r6, r5
 8014e8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014e8e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014e92:	00b1      	lsls	r1, r6, #2
 8014e94:	4798      	blx	r3
 8014e96:	2800      	cmp	r0, #0
 8014e98:	f000 8088 	beq.w	8014fac <rcutils_repl_str+0x158>
 8014e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ea0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014ea4:	4680      	mov	r8, r0
 8014ea6:	bf28      	it	cs
 8014ea8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014eac:	9a01      	ldr	r2, [sp, #4]
 8014eae:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014eb2:	1aa2      	subs	r2, r4, r2
 8014eb4:	f843 2c04 	str.w	r2, [r3, #-4]
 8014eb8:	9b02      	ldr	r3, [sp, #8]
 8014eba:	18e7      	adds	r7, r4, r3
 8014ebc:	4651      	mov	r1, sl
 8014ebe:	4638      	mov	r0, r7
 8014ec0:	f002 fff7 	bl	8017eb2 <strstr>
 8014ec4:	4604      	mov	r4, r0
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	2c00      	cmp	r4, #0
 8014eca:	d1d9      	bne.n	8014e80 <rcutils_repl_str+0x2c>
 8014ecc:	46b8      	mov	r8, r7
 8014ece:	4607      	mov	r7, r0
 8014ed0:	4640      	mov	r0, r8
 8014ed2:	f7eb f9af 	bl	8000234 <strlen>
 8014ed6:	9b01      	ldr	r3, [sp, #4]
 8014ed8:	eba8 0303 	sub.w	r3, r8, r3
 8014edc:	181c      	adds	r4, r3, r0
 8014ede:	9404      	str	r4, [sp, #16]
 8014ee0:	f1bb 0f00 	cmp.w	fp, #0
 8014ee4:	d04a      	beq.n	8014f7c <rcutils_repl_str+0x128>
 8014ee6:	ee18 0a10 	vmov	r0, s16
 8014eea:	f7eb f9a3 	bl	8000234 <strlen>
 8014eee:	9b02      	ldr	r3, [sp, #8]
 8014ef0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014ef4:	1ac3      	subs	r3, r0, r3
 8014ef6:	fb0b 4303 	mla	r3, fp, r3, r4
 8014efa:	461a      	mov	r2, r3
 8014efc:	9305      	str	r3, [sp, #20]
 8014efe:	4606      	mov	r6, r0
 8014f00:	f8d9 3000 	ldr.w	r3, [r9]
 8014f04:	1c50      	adds	r0, r2, #1
 8014f06:	4798      	blx	r3
 8014f08:	9003      	str	r0, [sp, #12]
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	d04f      	beq.n	8014fae <rcutils_repl_str+0x15a>
 8014f0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014f12:	683a      	ldr	r2, [r7, #0]
 8014f14:	4641      	mov	r1, r8
 8014f16:	f003 f86e 	bl	8017ff6 <memcpy>
 8014f1a:	683d      	ldr	r5, [r7, #0]
 8014f1c:	9b03      	ldr	r3, [sp, #12]
 8014f1e:	9701      	str	r7, [sp, #4]
 8014f20:	46ba      	mov	sl, r7
 8014f22:	441d      	add	r5, r3
 8014f24:	9f02      	ldr	r7, [sp, #8]
 8014f26:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f2a:	2401      	movs	r4, #1
 8014f2c:	46d1      	mov	r9, sl
 8014f2e:	ee18 aa10 	vmov	sl, s16
 8014f32:	e00a      	b.n	8014f4a <rcutils_repl_str+0xf6>
 8014f34:	f8d9 5000 	ldr.w	r5, [r9]
 8014f38:	1aaa      	subs	r2, r5, r2
 8014f3a:	1885      	adds	r5, r0, r2
 8014f3c:	f003 f85b 	bl	8017ff6 <memcpy>
 8014f40:	45a3      	cmp	fp, r4
 8014f42:	f104 0201 	add.w	r2, r4, #1
 8014f46:	d935      	bls.n	8014fb4 <rcutils_repl_str+0x160>
 8014f48:	4614      	mov	r4, r2
 8014f4a:	4632      	mov	r2, r6
 8014f4c:	4651      	mov	r1, sl
 8014f4e:	4628      	mov	r0, r5
 8014f50:	f003 f851 	bl	8017ff6 <memcpy>
 8014f54:	f859 2b04 	ldr.w	r2, [r9], #4
 8014f58:	45a3      	cmp	fp, r4
 8014f5a:	443a      	add	r2, r7
 8014f5c:	eb05 0006 	add.w	r0, r5, r6
 8014f60:	eb08 0102 	add.w	r1, r8, r2
 8014f64:	d1e6      	bne.n	8014f34 <rcutils_repl_str+0xe0>
 8014f66:	9b04      	ldr	r3, [sp, #16]
 8014f68:	1a9a      	subs	r2, r3, r2
 8014f6a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014f6e:	f003 f842 	bl	8017ff6 <memcpy>
 8014f72:	9a03      	ldr	r2, [sp, #12]
 8014f74:	9905      	ldr	r1, [sp, #20]
 8014f76:	2300      	movs	r3, #0
 8014f78:	5453      	strb	r3, [r2, r1]
 8014f7a:	e00b      	b.n	8014f94 <rcutils_repl_str+0x140>
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f8d9 3000 	ldr.w	r3, [r9]
 8014f82:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f86:	3001      	adds	r0, #1
 8014f88:	4798      	blx	r3
 8014f8a:	9003      	str	r0, [sp, #12]
 8014f8c:	b110      	cbz	r0, 8014f94 <rcutils_repl_str+0x140>
 8014f8e:	9901      	ldr	r1, [sp, #4]
 8014f90:	f003 f829 	bl	8017fe6 <strcpy>
 8014f94:	4638      	mov	r0, r7
 8014f96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014f9a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f9e:	4798      	blx	r3
 8014fa0:	9803      	ldr	r0, [sp, #12]
 8014fa2:	b007      	add	sp, #28
 8014fa4:	ecbd 8b02 	vpop	{d8}
 8014fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fac:	4647      	mov	r7, r8
 8014fae:	2300      	movs	r3, #0
 8014fb0:	9303      	str	r3, [sp, #12]
 8014fb2:	e7ef      	b.n	8014f94 <rcutils_repl_str+0x140>
 8014fb4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014fb8:	e7db      	b.n	8014f72 <rcutils_repl_str+0x11e>
 8014fba:	bf00      	nop

08014fbc <rcutils_snprintf>:
 8014fbc:	b40c      	push	{r2, r3}
 8014fbe:	b530      	push	{r4, r5, lr}
 8014fc0:	b083      	sub	sp, #12
 8014fc2:	ab06      	add	r3, sp, #24
 8014fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fc8:	9301      	str	r3, [sp, #4]
 8014fca:	b152      	cbz	r2, 8014fe2 <rcutils_snprintf+0x26>
 8014fcc:	b138      	cbz	r0, 8014fde <rcutils_snprintf+0x22>
 8014fce:	b141      	cbz	r1, 8014fe2 <rcutils_snprintf+0x26>
 8014fd0:	f002 ff10 	bl	8017df4 <vsniprintf>
 8014fd4:	b003      	add	sp, #12
 8014fd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fda:	b002      	add	sp, #8
 8014fdc:	4770      	bx	lr
 8014fde:	2900      	cmp	r1, #0
 8014fe0:	d0f6      	beq.n	8014fd0 <rcutils_snprintf+0x14>
 8014fe2:	f002 ffd3 	bl	8017f8c <__errno>
 8014fe6:	2316      	movs	r3, #22
 8014fe8:	6003      	str	r3, [r0, #0]
 8014fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fee:	e7f1      	b.n	8014fd4 <rcutils_snprintf+0x18>

08014ff0 <rcutils_vsnprintf>:
 8014ff0:	b570      	push	{r4, r5, r6, lr}
 8014ff2:	b13a      	cbz	r2, 8015004 <rcutils_vsnprintf+0x14>
 8014ff4:	b120      	cbz	r0, 8015000 <rcutils_vsnprintf+0x10>
 8014ff6:	b129      	cbz	r1, 8015004 <rcutils_vsnprintf+0x14>
 8014ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ffc:	f002 befa 	b.w	8017df4 <vsniprintf>
 8015000:	2900      	cmp	r1, #0
 8015002:	d0f9      	beq.n	8014ff8 <rcutils_vsnprintf+0x8>
 8015004:	f002 ffc2 	bl	8017f8c <__errno>
 8015008:	2316      	movs	r3, #22
 801500a:	6003      	str	r3, [r0, #0]
 801500c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015010:	bd70      	pop	{r4, r5, r6, pc}
 8015012:	bf00      	nop

08015014 <rcutils_strdup>:
 8015014:	b084      	sub	sp, #16
 8015016:	b570      	push	{r4, r5, r6, lr}
 8015018:	b082      	sub	sp, #8
 801501a:	ac07      	add	r4, sp, #28
 801501c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015020:	4605      	mov	r5, r0
 8015022:	b1b0      	cbz	r0, 8015052 <rcutils_strdup+0x3e>
 8015024:	f7eb f906 	bl	8000234 <strlen>
 8015028:	1c42      	adds	r2, r0, #1
 801502a:	9b07      	ldr	r3, [sp, #28]
 801502c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801502e:	9201      	str	r2, [sp, #4]
 8015030:	4606      	mov	r6, r0
 8015032:	4610      	mov	r0, r2
 8015034:	4798      	blx	r3
 8015036:	4604      	mov	r4, r0
 8015038:	b128      	cbz	r0, 8015046 <rcutils_strdup+0x32>
 801503a:	9a01      	ldr	r2, [sp, #4]
 801503c:	4629      	mov	r1, r5
 801503e:	f002 ffda 	bl	8017ff6 <memcpy>
 8015042:	2300      	movs	r3, #0
 8015044:	55a3      	strb	r3, [r4, r6]
 8015046:	4620      	mov	r0, r4
 8015048:	b002      	add	sp, #8
 801504a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801504e:	b004      	add	sp, #16
 8015050:	4770      	bx	lr
 8015052:	4604      	mov	r4, r0
 8015054:	e7f7      	b.n	8015046 <rcutils_strdup+0x32>
 8015056:	bf00      	nop

08015058 <rcutils_strndup>:
 8015058:	b082      	sub	sp, #8
 801505a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801505c:	ac06      	add	r4, sp, #24
 801505e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015062:	4605      	mov	r5, r0
 8015064:	b188      	cbz	r0, 801508a <rcutils_strndup+0x32>
 8015066:	1c4f      	adds	r7, r1, #1
 8015068:	460e      	mov	r6, r1
 801506a:	4638      	mov	r0, r7
 801506c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801506e:	4790      	blx	r2
 8015070:	4604      	mov	r4, r0
 8015072:	b128      	cbz	r0, 8015080 <rcutils_strndup+0x28>
 8015074:	463a      	mov	r2, r7
 8015076:	4629      	mov	r1, r5
 8015078:	f002 ffbd 	bl	8017ff6 <memcpy>
 801507c:	2300      	movs	r3, #0
 801507e:	55a3      	strb	r3, [r4, r6]
 8015080:	4620      	mov	r0, r4
 8015082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015086:	b002      	add	sp, #8
 8015088:	4770      	bx	lr
 801508a:	4604      	mov	r4, r0
 801508c:	e7f8      	b.n	8015080 <rcutils_strndup+0x28>
 801508e:	bf00      	nop

08015090 <rcutils_get_zero_initialized_string_map>:
 8015090:	4b01      	ldr	r3, [pc, #4]	@ (8015098 <rcutils_get_zero_initialized_string_map+0x8>)
 8015092:	2000      	movs	r0, #0
 8015094:	6018      	str	r0, [r3, #0]
 8015096:	4770      	bx	lr
 8015098:	2000cb94 	.word	0x2000cb94

0801509c <rcutils_string_map_reserve>:
 801509c:	2800      	cmp	r0, #0
 801509e:	d05f      	beq.n	8015160 <rcutils_string_map_reserve+0xc4>
 80150a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a4:	460c      	mov	r4, r1
 80150a6:	6801      	ldr	r1, [r0, #0]
 80150a8:	b082      	sub	sp, #8
 80150aa:	4605      	mov	r5, r0
 80150ac:	b129      	cbz	r1, 80150ba <rcutils_string_map_reserve+0x1e>
 80150ae:	68cb      	ldr	r3, [r1, #12]
 80150b0:	42a3      	cmp	r3, r4
 80150b2:	d906      	bls.n	80150c2 <rcutils_string_map_reserve+0x26>
 80150b4:	461c      	mov	r4, r3
 80150b6:	2900      	cmp	r1, #0
 80150b8:	d1f9      	bne.n	80150ae <rcutils_string_map_reserve+0x12>
 80150ba:	201f      	movs	r0, #31
 80150bc:	b002      	add	sp, #8
 80150be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c2:	688b      	ldr	r3, [r1, #8]
 80150c4:	42a3      	cmp	r3, r4
 80150c6:	d047      	beq.n	8015158 <rcutils_string_map_reserve+0xbc>
 80150c8:	6a0e      	ldr	r6, [r1, #32]
 80150ca:	2c00      	cmp	r4, #0
 80150cc:	d034      	beq.n	8015138 <rcutils_string_map_reserve+0x9c>
 80150ce:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80150d2:	d243      	bcs.n	801515c <rcutils_string_map_reserve+0xc0>
 80150d4:	00a7      	lsls	r7, r4, #2
 80150d6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80150da:	6808      	ldr	r0, [r1, #0]
 80150dc:	4632      	mov	r2, r6
 80150de:	4639      	mov	r1, r7
 80150e0:	47c0      	blx	r8
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d03a      	beq.n	801515c <rcutils_string_map_reserve+0xc0>
 80150e6:	682b      	ldr	r3, [r5, #0]
 80150e8:	4632      	mov	r2, r6
 80150ea:	6018      	str	r0, [r3, #0]
 80150ec:	4639      	mov	r1, r7
 80150ee:	6858      	ldr	r0, [r3, #4]
 80150f0:	47c0      	blx	r8
 80150f2:	2800      	cmp	r0, #0
 80150f4:	d032      	beq.n	801515c <rcutils_string_map_reserve+0xc0>
 80150f6:	682d      	ldr	r5, [r5, #0]
 80150f8:	68ab      	ldr	r3, [r5, #8]
 80150fa:	6068      	str	r0, [r5, #4]
 80150fc:	42a3      	cmp	r3, r4
 80150fe:	d226      	bcs.n	801514e <rcutils_string_map_reserve+0xb2>
 8015100:	682a      	ldr	r2, [r5, #0]
 8015102:	eb00 0c07 	add.w	ip, r0, r7
 8015106:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801510a:	45e6      	cmp	lr, ip
 801510c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015110:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8015114:	d203      	bcs.n	801511e <rcutils_string_map_reserve+0x82>
 8015116:	eb02 0c07 	add.w	ip, r2, r7
 801511a:	4566      	cmp	r6, ip
 801511c:	d322      	bcc.n	8015164 <rcutils_string_map_reserve+0xc8>
 801511e:	1ae3      	subs	r3, r4, r3
 8015120:	009a      	lsls	r2, r3, #2
 8015122:	4670      	mov	r0, lr
 8015124:	2100      	movs	r1, #0
 8015126:	9201      	str	r2, [sp, #4]
 8015128:	f002 fe9c 	bl	8017e64 <memset>
 801512c:	9a01      	ldr	r2, [sp, #4]
 801512e:	2100      	movs	r1, #0
 8015130:	4630      	mov	r0, r6
 8015132:	f002 fe97 	bl	8017e64 <memset>
 8015136:	e00a      	b.n	801514e <rcutils_string_map_reserve+0xb2>
 8015138:	694f      	ldr	r7, [r1, #20]
 801513a:	6808      	ldr	r0, [r1, #0]
 801513c:	4631      	mov	r1, r6
 801513e:	47b8      	blx	r7
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	4631      	mov	r1, r6
 8015144:	6858      	ldr	r0, [r3, #4]
 8015146:	601c      	str	r4, [r3, #0]
 8015148:	47b8      	blx	r7
 801514a:	682d      	ldr	r5, [r5, #0]
 801514c:	606c      	str	r4, [r5, #4]
 801514e:	2000      	movs	r0, #0
 8015150:	60ac      	str	r4, [r5, #8]
 8015152:	b002      	add	sp, #8
 8015154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015158:	2000      	movs	r0, #0
 801515a:	e7af      	b.n	80150bc <rcutils_string_map_reserve+0x20>
 801515c:	200a      	movs	r0, #10
 801515e:	e7ad      	b.n	80150bc <rcutils_string_map_reserve+0x20>
 8015160:	200b      	movs	r0, #11
 8015162:	4770      	bx	lr
 8015164:	1f0b      	subs	r3, r1, #4
 8015166:	4418      	add	r0, r3
 8015168:	4413      	add	r3, r2
 801516a:	3a04      	subs	r2, #4
 801516c:	4417      	add	r7, r2
 801516e:	2200      	movs	r2, #0
 8015170:	f843 2f04 	str.w	r2, [r3, #4]!
 8015174:	42bb      	cmp	r3, r7
 8015176:	f840 2f04 	str.w	r2, [r0, #4]!
 801517a:	d1f9      	bne.n	8015170 <rcutils_string_map_reserve+0xd4>
 801517c:	e7e7      	b.n	801514e <rcutils_string_map_reserve+0xb2>
 801517e:	bf00      	nop

08015180 <rcutils_string_map_init>:
 8015180:	b082      	sub	sp, #8
 8015182:	b570      	push	{r4, r5, r6, lr}
 8015184:	ac04      	add	r4, sp, #16
 8015186:	e884 000c 	stmia.w	r4, {r2, r3}
 801518a:	b380      	cbz	r0, 80151ee <rcutils_string_map_init+0x6e>
 801518c:	6806      	ldr	r6, [r0, #0]
 801518e:	4604      	mov	r4, r0
 8015190:	b12e      	cbz	r6, 801519e <rcutils_string_map_init+0x1e>
 8015192:	251e      	movs	r5, #30
 8015194:	4628      	mov	r0, r5
 8015196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801519a:	b002      	add	sp, #8
 801519c:	4770      	bx	lr
 801519e:	a804      	add	r0, sp, #16
 80151a0:	460d      	mov	r5, r1
 80151a2:	f7f7 f853 	bl	800c24c <rcutils_allocator_is_valid>
 80151a6:	b310      	cbz	r0, 80151ee <rcutils_string_map_init+0x6e>
 80151a8:	9b04      	ldr	r3, [sp, #16]
 80151aa:	9908      	ldr	r1, [sp, #32]
 80151ac:	2024      	movs	r0, #36	@ 0x24
 80151ae:	4798      	blx	r3
 80151b0:	6020      	str	r0, [r4, #0]
 80151b2:	b310      	cbz	r0, 80151fa <rcutils_string_map_init+0x7a>
 80151b4:	f10d 0e10 	add.w	lr, sp, #16
 80151b8:	e9c0 6600 	strd	r6, r6, [r0]
 80151bc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80151c0:	f100 0c10 	add.w	ip, r0, #16
 80151c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151cc:	f8de 3000 	ldr.w	r3, [lr]
 80151d0:	f8cc 3000 	str.w	r3, [ip]
 80151d4:	4629      	mov	r1, r5
 80151d6:	4620      	mov	r0, r4
 80151d8:	f7ff ff60 	bl	801509c <rcutils_string_map_reserve>
 80151dc:	4605      	mov	r5, r0
 80151de:	2800      	cmp	r0, #0
 80151e0:	d0d8      	beq.n	8015194 <rcutils_string_map_init+0x14>
 80151e2:	9b05      	ldr	r3, [sp, #20]
 80151e4:	9908      	ldr	r1, [sp, #32]
 80151e6:	6820      	ldr	r0, [r4, #0]
 80151e8:	4798      	blx	r3
 80151ea:	6026      	str	r6, [r4, #0]
 80151ec:	e7d2      	b.n	8015194 <rcutils_string_map_init+0x14>
 80151ee:	250b      	movs	r5, #11
 80151f0:	4628      	mov	r0, r5
 80151f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151f6:	b002      	add	sp, #8
 80151f8:	4770      	bx	lr
 80151fa:	250a      	movs	r5, #10
 80151fc:	e7ca      	b.n	8015194 <rcutils_string_map_init+0x14>
 80151fe:	bf00      	nop

08015200 <rcutils_string_map_fini>:
 8015200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015204:	b082      	sub	sp, #8
 8015206:	2800      	cmp	r0, #0
 8015208:	d03a      	beq.n	8015280 <rcutils_string_map_fini+0x80>
 801520a:	6804      	ldr	r4, [r0, #0]
 801520c:	4606      	mov	r6, r0
 801520e:	2c00      	cmp	r4, #0
 8015210:	d032      	beq.n	8015278 <rcutils_string_map_fini+0x78>
 8015212:	68a3      	ldr	r3, [r4, #8]
 8015214:	b32b      	cbz	r3, 8015262 <rcutils_string_map_fini+0x62>
 8015216:	2500      	movs	r5, #0
 8015218:	6822      	ldr	r2, [r4, #0]
 801521a:	462f      	mov	r7, r5
 801521c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015220:	b1e0      	cbz	r0, 801525c <rcutils_string_map_fini+0x5c>
 8015222:	6a21      	ldr	r1, [r4, #32]
 8015224:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015228:	9101      	str	r1, [sp, #4]
 801522a:	47c0      	blx	r8
 801522c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015230:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015234:	9901      	ldr	r1, [sp, #4]
 8015236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801523a:	47c0      	blx	r8
 801523c:	68e3      	ldr	r3, [r4, #12]
 801523e:	6862      	ldr	r2, [r4, #4]
 8015240:	3b01      	subs	r3, #1
 8015242:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015246:	60e3      	str	r3, [r4, #12]
 8015248:	6834      	ldr	r4, [r6, #0]
 801524a:	68a3      	ldr	r3, [r4, #8]
 801524c:	3501      	adds	r5, #1
 801524e:	429d      	cmp	r5, r3
 8015250:	d207      	bcs.n	8015262 <rcutils_string_map_fini+0x62>
 8015252:	6822      	ldr	r2, [r4, #0]
 8015254:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015258:	2800      	cmp	r0, #0
 801525a:	d1e2      	bne.n	8015222 <rcutils_string_map_fini+0x22>
 801525c:	3501      	adds	r5, #1
 801525e:	429d      	cmp	r5, r3
 8015260:	d3dc      	bcc.n	801521c <rcutils_string_map_fini+0x1c>
 8015262:	2100      	movs	r1, #0
 8015264:	4630      	mov	r0, r6
 8015266:	f7ff ff19 	bl	801509c <rcutils_string_map_reserve>
 801526a:	4604      	mov	r4, r0
 801526c:	b920      	cbnz	r0, 8015278 <rcutils_string_map_fini+0x78>
 801526e:	6830      	ldr	r0, [r6, #0]
 8015270:	6943      	ldr	r3, [r0, #20]
 8015272:	6a01      	ldr	r1, [r0, #32]
 8015274:	4798      	blx	r3
 8015276:	6034      	str	r4, [r6, #0]
 8015278:	4620      	mov	r0, r4
 801527a:	b002      	add	sp, #8
 801527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015280:	240b      	movs	r4, #11
 8015282:	4620      	mov	r0, r4
 8015284:	b002      	add	sp, #8
 8015286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801528a:	bf00      	nop

0801528c <rcutils_string_map_getn>:
 801528c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015290:	b300      	cbz	r0, 80152d4 <rcutils_string_map_getn+0x48>
 8015292:	6807      	ldr	r7, [r0, #0]
 8015294:	b1ff      	cbz	r7, 80152d6 <rcutils_string_map_getn+0x4a>
 8015296:	4688      	mov	r8, r1
 8015298:	b1e1      	cbz	r1, 80152d4 <rcutils_string_map_getn+0x48>
 801529a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801529e:	683e      	ldr	r6, [r7, #0]
 80152a0:	f1ba 0f00 	cmp.w	sl, #0
 80152a4:	d016      	beq.n	80152d4 <rcutils_string_map_getn+0x48>
 80152a6:	4691      	mov	r9, r2
 80152a8:	3e04      	subs	r6, #4
 80152aa:	2400      	movs	r4, #0
 80152ac:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80152b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80152b4:	4628      	mov	r0, r5
 80152b6:	3401      	adds	r4, #1
 80152b8:	b155      	cbz	r5, 80152d0 <rcutils_string_map_getn+0x44>
 80152ba:	f7ea ffbb 	bl	8000234 <strlen>
 80152be:	4548      	cmp	r0, r9
 80152c0:	4602      	mov	r2, r0
 80152c2:	4629      	mov	r1, r5
 80152c4:	bf38      	it	cc
 80152c6:	464a      	movcc	r2, r9
 80152c8:	4640      	mov	r0, r8
 80152ca:	f002 fde0 	bl	8017e8e <strncmp>
 80152ce:	b128      	cbz	r0, 80152dc <rcutils_string_map_getn+0x50>
 80152d0:	45a2      	cmp	sl, r4
 80152d2:	d1eb      	bne.n	80152ac <rcutils_string_map_getn+0x20>
 80152d4:	2700      	movs	r7, #0
 80152d6:	4638      	mov	r0, r7
 80152d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f853 700b 	ldr.w	r7, [r3, fp]
 80152e2:	4638      	mov	r0, r7
 80152e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152e8 <rmw_get_zero_initialized_context>:
 80152e8:	b510      	push	{r4, lr}
 80152ea:	4604      	mov	r4, r0
 80152ec:	3010      	adds	r0, #16
 80152ee:	f7f7 f83f 	bl	800c370 <rmw_get_zero_initialized_init_options>
 80152f2:	2300      	movs	r3, #0
 80152f4:	2000      	movs	r0, #0
 80152f6:	2100      	movs	r1, #0
 80152f8:	e9c4 0100 	strd	r0, r1, [r4]
 80152fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015300:	60a3      	str	r3, [r4, #8]
 8015302:	4620      	mov	r0, r4
 8015304:	bd10      	pop	{r4, pc}
 8015306:	bf00      	nop

08015308 <rmw_time_equal>:
 8015308:	b4f0      	push	{r4, r5, r6, r7}
 801530a:	b084      	sub	sp, #16
 801530c:	ac04      	add	r4, sp, #16
 801530e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015312:	4603      	mov	r3, r0
 8015314:	4924      	ldr	r1, [pc, #144]	@ (80153a8 <rmw_time_equal+0xa0>)
 8015316:	9e03      	ldr	r6, [sp, #12]
 8015318:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801531c:	2202      	movs	r2, #2
 801531e:	4299      	cmp	r1, r3
 8015320:	41aa      	sbcs	r2, r5
 8015322:	d330      	bcc.n	8015386 <rmw_time_equal+0x7e>
 8015324:	4c21      	ldr	r4, [pc, #132]	@ (80153ac <rmw_time_equal+0xa4>)
 8015326:	fba3 3204 	umull	r3, r2, r3, r4
 801532a:	fb04 2205 	mla	r2, r4, r5, r2
 801532e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015332:	43dd      	mvns	r5, r3
 8015334:	1a8c      	subs	r4, r1, r2
 8015336:	4285      	cmp	r5, r0
 8015338:	41b4      	sbcs	r4, r6
 801533a:	d332      	bcc.n	80153a2 <rmw_time_equal+0x9a>
 801533c:	eb10 0c03 	adds.w	ip, r0, r3
 8015340:	eb42 0106 	adc.w	r1, r2, r6
 8015344:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015348:	4817      	ldr	r0, [pc, #92]	@ (80153a8 <rmw_time_equal+0xa0>)
 801534a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801534c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801534e:	2202      	movs	r2, #2
 8015350:	4298      	cmp	r0, r3
 8015352:	41b2      	sbcs	r2, r6
 8015354:	d31c      	bcc.n	8015390 <rmw_time_equal+0x88>
 8015356:	4c15      	ldr	r4, [pc, #84]	@ (80153ac <rmw_time_equal+0xa4>)
 8015358:	fba3 3204 	umull	r3, r2, r3, r4
 801535c:	fb04 2206 	mla	r2, r4, r6, r2
 8015360:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015364:	43de      	mvns	r6, r3
 8015366:	1a84      	subs	r4, r0, r2
 8015368:	42ae      	cmp	r6, r5
 801536a:	41bc      	sbcs	r4, r7
 801536c:	d315      	bcc.n	801539a <rmw_time_equal+0x92>
 801536e:	195b      	adds	r3, r3, r5
 8015370:	eb42 0207 	adc.w	r2, r2, r7
 8015374:	428a      	cmp	r2, r1
 8015376:	bf08      	it	eq
 8015378:	4563      	cmpeq	r3, ip
 801537a:	bf0c      	ite	eq
 801537c:	2001      	moveq	r0, #1
 801537e:	2000      	movne	r0, #0
 8015380:	b004      	add	sp, #16
 8015382:	bcf0      	pop	{r4, r5, r6, r7}
 8015384:	4770      	bx	lr
 8015386:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801538a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801538e:	e7d9      	b.n	8015344 <rmw_time_equal+0x3c>
 8015390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015394:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015398:	e7ec      	b.n	8015374 <rmw_time_equal+0x6c>
 801539a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801539e:	4602      	mov	r2, r0
 80153a0:	e7e8      	b.n	8015374 <rmw_time_equal+0x6c>
 80153a2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80153a6:	e7cd      	b.n	8015344 <rmw_time_equal+0x3c>
 80153a8:	25c17d04 	.word	0x25c17d04
 80153ac:	3b9aca00 	.word	0x3b9aca00

080153b0 <rmw_time_total_nsec>:
 80153b0:	b470      	push	{r4, r5, r6}
 80153b2:	b085      	sub	sp, #20
 80153b4:	ac04      	add	r4, sp, #16
 80153b6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80153ba:	4603      	mov	r3, r0
 80153bc:	4912      	ldr	r1, [pc, #72]	@ (8015408 <rmw_time_total_nsec+0x58>)
 80153be:	9e03      	ldr	r6, [sp, #12]
 80153c0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80153c4:	2202      	movs	r2, #2
 80153c6:	4299      	cmp	r1, r3
 80153c8:	41aa      	sbcs	r2, r5
 80153ca:	d311      	bcc.n	80153f0 <rmw_time_total_nsec+0x40>
 80153cc:	4c0f      	ldr	r4, [pc, #60]	@ (801540c <rmw_time_total_nsec+0x5c>)
 80153ce:	fba3 3204 	umull	r3, r2, r3, r4
 80153d2:	fb04 2205 	mla	r2, r4, r5, r2
 80153d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80153da:	43dd      	mvns	r5, r3
 80153dc:	1a8c      	subs	r4, r1, r2
 80153de:	4285      	cmp	r5, r0
 80153e0:	41b4      	sbcs	r4, r6
 80153e2:	d30c      	bcc.n	80153fe <rmw_time_total_nsec+0x4e>
 80153e4:	1818      	adds	r0, r3, r0
 80153e6:	eb42 0106 	adc.w	r1, r2, r6
 80153ea:	b005      	add	sp, #20
 80153ec:	bc70      	pop	{r4, r5, r6}
 80153ee:	4770      	bx	lr
 80153f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80153f8:	b005      	add	sp, #20
 80153fa:	bc70      	pop	{r4, r5, r6}
 80153fc:	4770      	bx	lr
 80153fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015402:	b005      	add	sp, #20
 8015404:	bc70      	pop	{r4, r5, r6}
 8015406:	4770      	bx	lr
 8015408:	25c17d04 	.word	0x25c17d04
 801540c:	3b9aca00 	.word	0x3b9aca00

08015410 <rmw_get_zero_initialized_message_info>:
 8015410:	b510      	push	{r4, lr}
 8015412:	2240      	movs	r2, #64	@ 0x40
 8015414:	4604      	mov	r4, r0
 8015416:	2100      	movs	r1, #0
 8015418:	f002 fd24 	bl	8017e64 <memset>
 801541c:	4620      	mov	r0, r4
 801541e:	bd10      	pop	{r4, pc}

08015420 <rmw_validate_full_topic_name>:
 8015420:	2800      	cmp	r0, #0
 8015422:	d057      	beq.n	80154d4 <rmw_validate_full_topic_name+0xb4>
 8015424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015428:	460d      	mov	r5, r1
 801542a:	2900      	cmp	r1, #0
 801542c:	d054      	beq.n	80154d8 <rmw_validate_full_topic_name+0xb8>
 801542e:	4616      	mov	r6, r2
 8015430:	4604      	mov	r4, r0
 8015432:	f7ea feff 	bl	8000234 <strlen>
 8015436:	b148      	cbz	r0, 801544c <rmw_validate_full_topic_name+0x2c>
 8015438:	7823      	ldrb	r3, [r4, #0]
 801543a:	2b2f      	cmp	r3, #47	@ 0x2f
 801543c:	d00d      	beq.n	801545a <rmw_validate_full_topic_name+0x3a>
 801543e:	2302      	movs	r3, #2
 8015440:	602b      	str	r3, [r5, #0]
 8015442:	b13e      	cbz	r6, 8015454 <rmw_validate_full_topic_name+0x34>
 8015444:	2000      	movs	r0, #0
 8015446:	6030      	str	r0, [r6, #0]
 8015448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801544c:	2301      	movs	r3, #1
 801544e:	602b      	str	r3, [r5, #0]
 8015450:	2e00      	cmp	r6, #0
 8015452:	d1f7      	bne.n	8015444 <rmw_validate_full_topic_name+0x24>
 8015454:	2000      	movs	r0, #0
 8015456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801545a:	1e43      	subs	r3, r0, #1
 801545c:	5ce2      	ldrb	r2, [r4, r3]
 801545e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015460:	d03c      	beq.n	80154dc <rmw_validate_full_topic_name+0xbc>
 8015462:	1e63      	subs	r3, r4, #1
 8015464:	eb03 0800 	add.w	r8, r3, r0
 8015468:	f1c4 0e01 	rsb	lr, r4, #1
 801546c:	eb0e 0703 	add.w	r7, lr, r3
 8015470:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015474:	f021 0220 	bic.w	r2, r1, #32
 8015478:	3a41      	subs	r2, #65	@ 0x41
 801547a:	2a19      	cmp	r2, #25
 801547c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015480:	d90b      	bls.n	801549a <rmw_validate_full_topic_name+0x7a>
 8015482:	295f      	cmp	r1, #95	@ 0x5f
 8015484:	d009      	beq.n	801549a <rmw_validate_full_topic_name+0x7a>
 8015486:	f1bc 0f0a 	cmp.w	ip, #10
 801548a:	d906      	bls.n	801549a <rmw_validate_full_topic_name+0x7a>
 801548c:	2304      	movs	r3, #4
 801548e:	602b      	str	r3, [r5, #0]
 8015490:	2e00      	cmp	r6, #0
 8015492:	d0df      	beq.n	8015454 <rmw_validate_full_topic_name+0x34>
 8015494:	6037      	str	r7, [r6, #0]
 8015496:	2000      	movs	r0, #0
 8015498:	e7d6      	b.n	8015448 <rmw_validate_full_topic_name+0x28>
 801549a:	4543      	cmp	r3, r8
 801549c:	d1e6      	bne.n	801546c <rmw_validate_full_topic_name+0x4c>
 801549e:	4f1a      	ldr	r7, [pc, #104]	@ (8015508 <rmw_validate_full_topic_name+0xe8>)
 80154a0:	2301      	movs	r3, #1
 80154a2:	e004      	b.n	80154ae <rmw_validate_full_topic_name+0x8e>
 80154a4:	4298      	cmp	r0, r3
 80154a6:	f104 0401 	add.w	r4, r4, #1
 80154aa:	d91c      	bls.n	80154e6 <rmw_validate_full_topic_name+0xc6>
 80154ac:	4613      	mov	r3, r2
 80154ae:	4298      	cmp	r0, r3
 80154b0:	f103 0201 	add.w	r2, r3, #1
 80154b4:	d0f6      	beq.n	80154a4 <rmw_validate_full_topic_name+0x84>
 80154b6:	7821      	ldrb	r1, [r4, #0]
 80154b8:	292f      	cmp	r1, #47	@ 0x2f
 80154ba:	d1f3      	bne.n	80154a4 <rmw_validate_full_topic_name+0x84>
 80154bc:	7861      	ldrb	r1, [r4, #1]
 80154be:	292f      	cmp	r1, #47	@ 0x2f
 80154c0:	d01c      	beq.n	80154fc <rmw_validate_full_topic_name+0xdc>
 80154c2:	5dc9      	ldrb	r1, [r1, r7]
 80154c4:	0749      	lsls	r1, r1, #29
 80154c6:	d5ed      	bpl.n	80154a4 <rmw_validate_full_topic_name+0x84>
 80154c8:	2206      	movs	r2, #6
 80154ca:	602a      	str	r2, [r5, #0]
 80154cc:	2e00      	cmp	r6, #0
 80154ce:	d0c1      	beq.n	8015454 <rmw_validate_full_topic_name+0x34>
 80154d0:	6033      	str	r3, [r6, #0]
 80154d2:	e7bf      	b.n	8015454 <rmw_validate_full_topic_name+0x34>
 80154d4:	200b      	movs	r0, #11
 80154d6:	4770      	bx	lr
 80154d8:	200b      	movs	r0, #11
 80154da:	e7b5      	b.n	8015448 <rmw_validate_full_topic_name+0x28>
 80154dc:	2203      	movs	r2, #3
 80154de:	602a      	str	r2, [r5, #0]
 80154e0:	2e00      	cmp	r6, #0
 80154e2:	d1f5      	bne.n	80154d0 <rmw_validate_full_topic_name+0xb0>
 80154e4:	e7b6      	b.n	8015454 <rmw_validate_full_topic_name+0x34>
 80154e6:	28f7      	cmp	r0, #247	@ 0xf7
 80154e8:	d802      	bhi.n	80154f0 <rmw_validate_full_topic_name+0xd0>
 80154ea:	2000      	movs	r0, #0
 80154ec:	6028      	str	r0, [r5, #0]
 80154ee:	e7ab      	b.n	8015448 <rmw_validate_full_topic_name+0x28>
 80154f0:	2307      	movs	r3, #7
 80154f2:	602b      	str	r3, [r5, #0]
 80154f4:	2e00      	cmp	r6, #0
 80154f6:	d0ad      	beq.n	8015454 <rmw_validate_full_topic_name+0x34>
 80154f8:	23f6      	movs	r3, #246	@ 0xf6
 80154fa:	e7e9      	b.n	80154d0 <rmw_validate_full_topic_name+0xb0>
 80154fc:	2205      	movs	r2, #5
 80154fe:	602a      	str	r2, [r5, #0]
 8015500:	2e00      	cmp	r6, #0
 8015502:	d1e5      	bne.n	80154d0 <rmw_validate_full_topic_name+0xb0>
 8015504:	e7a6      	b.n	8015454 <rmw_validate_full_topic_name+0x34>
 8015506:	bf00      	nop
 8015508:	08019c3c 	.word	0x08019c3c

0801550c <rmw_validate_namespace_with_size>:
 801550c:	b340      	cbz	r0, 8015560 <rmw_validate_namespace_with_size+0x54>
 801550e:	b570      	push	{r4, r5, r6, lr}
 8015510:	4614      	mov	r4, r2
 8015512:	b0c2      	sub	sp, #264	@ 0x108
 8015514:	b332      	cbz	r2, 8015564 <rmw_validate_namespace_with_size+0x58>
 8015516:	2901      	cmp	r1, #1
 8015518:	460d      	mov	r5, r1
 801551a:	461e      	mov	r6, r3
 801551c:	d102      	bne.n	8015524 <rmw_validate_namespace_with_size+0x18>
 801551e:	7803      	ldrb	r3, [r0, #0]
 8015520:	2b2f      	cmp	r3, #47	@ 0x2f
 8015522:	d012      	beq.n	801554a <rmw_validate_namespace_with_size+0x3e>
 8015524:	aa01      	add	r2, sp, #4
 8015526:	4669      	mov	r1, sp
 8015528:	f7ff ff7a 	bl	8015420 <rmw_validate_full_topic_name>
 801552c:	b978      	cbnz	r0, 801554e <rmw_validate_namespace_with_size+0x42>
 801552e:	9b00      	ldr	r3, [sp, #0]
 8015530:	b14b      	cbz	r3, 8015546 <rmw_validate_namespace_with_size+0x3a>
 8015532:	2b07      	cmp	r3, #7
 8015534:	d007      	beq.n	8015546 <rmw_validate_namespace_with_size+0x3a>
 8015536:	1e5a      	subs	r2, r3, #1
 8015538:	2a05      	cmp	r2, #5
 801553a:	d82b      	bhi.n	8015594 <rmw_validate_namespace_with_size+0x88>
 801553c:	e8df f002 	tbb	[pc, r2]
 8015540:	1e212427 	.word	0x1e212427
 8015544:	141b      	.short	0x141b
 8015546:	2df5      	cmp	r5, #245	@ 0xf5
 8015548:	d803      	bhi.n	8015552 <rmw_validate_namespace_with_size+0x46>
 801554a:	2000      	movs	r0, #0
 801554c:	6020      	str	r0, [r4, #0]
 801554e:	b042      	add	sp, #264	@ 0x108
 8015550:	bd70      	pop	{r4, r5, r6, pc}
 8015552:	2307      	movs	r3, #7
 8015554:	6023      	str	r3, [r4, #0]
 8015556:	2e00      	cmp	r6, #0
 8015558:	d0f9      	beq.n	801554e <rmw_validate_namespace_with_size+0x42>
 801555a:	23f4      	movs	r3, #244	@ 0xf4
 801555c:	6033      	str	r3, [r6, #0]
 801555e:	e7f6      	b.n	801554e <rmw_validate_namespace_with_size+0x42>
 8015560:	200b      	movs	r0, #11
 8015562:	4770      	bx	lr
 8015564:	200b      	movs	r0, #11
 8015566:	e7f2      	b.n	801554e <rmw_validate_namespace_with_size+0x42>
 8015568:	2306      	movs	r3, #6
 801556a:	6023      	str	r3, [r4, #0]
 801556c:	2e00      	cmp	r6, #0
 801556e:	d0ee      	beq.n	801554e <rmw_validate_namespace_with_size+0x42>
 8015570:	9b01      	ldr	r3, [sp, #4]
 8015572:	6033      	str	r3, [r6, #0]
 8015574:	e7eb      	b.n	801554e <rmw_validate_namespace_with_size+0x42>
 8015576:	2305      	movs	r3, #5
 8015578:	6023      	str	r3, [r4, #0]
 801557a:	e7f7      	b.n	801556c <rmw_validate_namespace_with_size+0x60>
 801557c:	2304      	movs	r3, #4
 801557e:	6023      	str	r3, [r4, #0]
 8015580:	e7f4      	b.n	801556c <rmw_validate_namespace_with_size+0x60>
 8015582:	2303      	movs	r3, #3
 8015584:	6023      	str	r3, [r4, #0]
 8015586:	e7f1      	b.n	801556c <rmw_validate_namespace_with_size+0x60>
 8015588:	2302      	movs	r3, #2
 801558a:	6023      	str	r3, [r4, #0]
 801558c:	e7ee      	b.n	801556c <rmw_validate_namespace_with_size+0x60>
 801558e:	2301      	movs	r3, #1
 8015590:	6023      	str	r3, [r4, #0]
 8015592:	e7eb      	b.n	801556c <rmw_validate_namespace_with_size+0x60>
 8015594:	4a03      	ldr	r2, [pc, #12]	@ (80155a4 <rmw_validate_namespace_with_size+0x98>)
 8015596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801559a:	a802      	add	r0, sp, #8
 801559c:	f7ff fd0e 	bl	8014fbc <rcutils_snprintf>
 80155a0:	2001      	movs	r0, #1
 80155a2:	e7d4      	b.n	801554e <rmw_validate_namespace_with_size+0x42>
 80155a4:	08019844 	.word	0x08019844

080155a8 <rmw_validate_namespace>:
 80155a8:	b168      	cbz	r0, 80155c6 <rmw_validate_namespace+0x1e>
 80155aa:	b570      	push	{r4, r5, r6, lr}
 80155ac:	460d      	mov	r5, r1
 80155ae:	4616      	mov	r6, r2
 80155b0:	4604      	mov	r4, r0
 80155b2:	f7ea fe3f 	bl	8000234 <strlen>
 80155b6:	4633      	mov	r3, r6
 80155b8:	4601      	mov	r1, r0
 80155ba:	462a      	mov	r2, r5
 80155bc:	4620      	mov	r0, r4
 80155be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155c2:	f7ff bfa3 	b.w	801550c <rmw_validate_namespace_with_size>
 80155c6:	200b      	movs	r0, #11
 80155c8:	4770      	bx	lr
 80155ca:	bf00      	nop

080155cc <rmw_namespace_validation_result_string>:
 80155cc:	2807      	cmp	r0, #7
 80155ce:	bf9a      	itte	ls
 80155d0:	4b02      	ldrls	r3, [pc, #8]	@ (80155dc <rmw_namespace_validation_result_string+0x10>)
 80155d2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80155d6:	4802      	ldrhi	r0, [pc, #8]	@ (80155e0 <rmw_namespace_validation_result_string+0x14>)
 80155d8:	4770      	bx	lr
 80155da:	bf00      	nop
 80155dc:	08019a3c 	.word	0x08019a3c
 80155e0:	08019894 	.word	0x08019894

080155e4 <rmw_validate_node_name>:
 80155e4:	2800      	cmp	r0, #0
 80155e6:	d03b      	beq.n	8015660 <rmw_validate_node_name+0x7c>
 80155e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ec:	460d      	mov	r5, r1
 80155ee:	2900      	cmp	r1, #0
 80155f0:	d038      	beq.n	8015664 <rmw_validate_node_name+0x80>
 80155f2:	4616      	mov	r6, r2
 80155f4:	4604      	mov	r4, r0
 80155f6:	f7ea fe1d 	bl	8000234 <strlen>
 80155fa:	b1e0      	cbz	r0, 8015636 <rmw_validate_node_name+0x52>
 80155fc:	1e63      	subs	r3, r4, #1
 80155fe:	eb03 0800 	add.w	r8, r3, r0
 8015602:	f1c4 0101 	rsb	r1, r4, #1
 8015606:	18cf      	adds	r7, r1, r3
 8015608:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801560c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015610:	f02e 0c20 	bic.w	ip, lr, #32
 8015614:	2a09      	cmp	r2, #9
 8015616:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801561a:	d914      	bls.n	8015646 <rmw_validate_node_name+0x62>
 801561c:	f1bc 0f19 	cmp.w	ip, #25
 8015620:	d911      	bls.n	8015646 <rmw_validate_node_name+0x62>
 8015622:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015626:	d00e      	beq.n	8015646 <rmw_validate_node_name+0x62>
 8015628:	2302      	movs	r3, #2
 801562a:	602b      	str	r3, [r5, #0]
 801562c:	b106      	cbz	r6, 8015630 <rmw_validate_node_name+0x4c>
 801562e:	6037      	str	r7, [r6, #0]
 8015630:	2000      	movs	r0, #0
 8015632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015636:	2301      	movs	r3, #1
 8015638:	602b      	str	r3, [r5, #0]
 801563a:	2e00      	cmp	r6, #0
 801563c:	d0f8      	beq.n	8015630 <rmw_validate_node_name+0x4c>
 801563e:	2000      	movs	r0, #0
 8015640:	6030      	str	r0, [r6, #0]
 8015642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015646:	4543      	cmp	r3, r8
 8015648:	d1dd      	bne.n	8015606 <rmw_validate_node_name+0x22>
 801564a:	7822      	ldrb	r2, [r4, #0]
 801564c:	4b0d      	ldr	r3, [pc, #52]	@ (8015684 <rmw_validate_node_name+0xa0>)
 801564e:	5cd3      	ldrb	r3, [r2, r3]
 8015650:	f013 0304 	ands.w	r3, r3, #4
 8015654:	d110      	bne.n	8015678 <rmw_validate_node_name+0x94>
 8015656:	28ff      	cmp	r0, #255	@ 0xff
 8015658:	d806      	bhi.n	8015668 <rmw_validate_node_name+0x84>
 801565a:	602b      	str	r3, [r5, #0]
 801565c:	4618      	mov	r0, r3
 801565e:	e7e8      	b.n	8015632 <rmw_validate_node_name+0x4e>
 8015660:	200b      	movs	r0, #11
 8015662:	4770      	bx	lr
 8015664:	200b      	movs	r0, #11
 8015666:	e7e4      	b.n	8015632 <rmw_validate_node_name+0x4e>
 8015668:	2204      	movs	r2, #4
 801566a:	602a      	str	r2, [r5, #0]
 801566c:	2e00      	cmp	r6, #0
 801566e:	d0df      	beq.n	8015630 <rmw_validate_node_name+0x4c>
 8015670:	22fe      	movs	r2, #254	@ 0xfe
 8015672:	6032      	str	r2, [r6, #0]
 8015674:	4618      	mov	r0, r3
 8015676:	e7dc      	b.n	8015632 <rmw_validate_node_name+0x4e>
 8015678:	2303      	movs	r3, #3
 801567a:	602b      	str	r3, [r5, #0]
 801567c:	2e00      	cmp	r6, #0
 801567e:	d1de      	bne.n	801563e <rmw_validate_node_name+0x5a>
 8015680:	e7d6      	b.n	8015630 <rmw_validate_node_name+0x4c>
 8015682:	bf00      	nop
 8015684:	08019c3c 	.word	0x08019c3c

08015688 <rmw_node_name_validation_result_string>:
 8015688:	2804      	cmp	r0, #4
 801568a:	bf9a      	itte	ls
 801568c:	4b02      	ldrls	r3, [pc, #8]	@ (8015698 <rmw_node_name_validation_result_string+0x10>)
 801568e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015692:	4802      	ldrhi	r0, [pc, #8]	@ (801569c <rmw_node_name_validation_result_string+0x14>)
 8015694:	4770      	bx	lr
 8015696:	bf00      	nop
 8015698:	08019b48 	.word	0x08019b48
 801569c:	08019a5c 	.word	0x08019a5c

080156a0 <on_status>:
 80156a0:	b082      	sub	sp, #8
 80156a2:	b002      	add	sp, #8
 80156a4:	4770      	bx	lr
 80156a6:	bf00      	nop

080156a8 <on_topic>:
 80156a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156ac:	4a22      	ldr	r2, [pc, #136]	@ (8015738 <on_topic+0x90>)
 80156ae:	b094      	sub	sp, #80	@ 0x50
 80156b0:	6812      	ldr	r2, [r2, #0]
 80156b2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80156b4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80156b8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80156bc:	b3c2      	cbz	r2, 8015730 <on_topic+0x88>
 80156be:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80156c2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80156c6:	e001      	b.n	80156cc <on_topic+0x24>
 80156c8:	6852      	ldr	r2, [r2, #4]
 80156ca:	b38a      	cbz	r2, 8015730 <on_topic+0x88>
 80156cc:	6894      	ldr	r4, [r2, #8]
 80156ce:	8aa3      	ldrh	r3, [r4, #20]
 80156d0:	428b      	cmp	r3, r1
 80156d2:	d1f9      	bne.n	80156c8 <on_topic+0x20>
 80156d4:	7da3      	ldrb	r3, [r4, #22]
 80156d6:	4283      	cmp	r3, r0
 80156d8:	d1f6      	bne.n	80156c8 <on_topic+0x20>
 80156da:	2248      	movs	r2, #72	@ 0x48
 80156dc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80156e0:	4668      	mov	r0, sp
 80156e2:	f002 fc88 	bl	8017ff6 <memcpy>
 80156e6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80156ea:	cb0c      	ldmia	r3, {r2, r3}
 80156ec:	4620      	mov	r0, r4
 80156ee:	f7f7 fe43 	bl	800d378 <rmw_uxrce_get_static_input_buffer_for_entity>
 80156f2:	4607      	mov	r7, r0
 80156f4:	b1e0      	cbz	r0, 8015730 <on_topic+0x88>
 80156f6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80156fa:	4632      	mov	r2, r6
 80156fc:	4628      	mov	r0, r5
 80156fe:	f108 0110 	add.w	r1, r8, #16
 8015702:	f000 fdd9 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8015706:	b930      	cbnz	r0, 8015716 <on_topic+0x6e>
 8015708:	480c      	ldr	r0, [pc, #48]	@ (801573c <on_topic+0x94>)
 801570a:	4639      	mov	r1, r7
 801570c:	b014      	add	sp, #80	@ 0x50
 801570e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015712:	f000 b8bd 	b.w	8015890 <put_memory>
 8015716:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801571a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801571e:	f7f7 fc29 	bl	800cf74 <rmw_uros_epoch_nanos>
 8015722:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015726:	2305      	movs	r3, #5
 8015728:	e942 0102 	strd	r0, r1, [r2, #-8]
 801572c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015730:	b014      	add	sp, #80	@ 0x50
 8015732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015736:	bf00      	nop
 8015738:	2000cb44 	.word	0x2000cb44
 801573c:	2000cb34 	.word	0x2000cb34

08015740 <on_request>:
 8015740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015744:	4823      	ldr	r0, [pc, #140]	@ (80157d4 <on_request+0x94>)
 8015746:	b094      	sub	sp, #80	@ 0x50
 8015748:	6800      	ldr	r0, [r0, #0]
 801574a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801574c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015750:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015752:	2800      	cmp	r0, #0
 8015754:	d03b      	beq.n	80157ce <on_request+0x8e>
 8015756:	461d      	mov	r5, r3
 8015758:	e001      	b.n	801575e <on_request+0x1e>
 801575a:	6840      	ldr	r0, [r0, #4]
 801575c:	b3b8      	cbz	r0, 80157ce <on_request+0x8e>
 801575e:	6884      	ldr	r4, [r0, #8]
 8015760:	8b21      	ldrh	r1, [r4, #24]
 8015762:	4291      	cmp	r1, r2
 8015764:	d1f9      	bne.n	801575a <on_request+0x1a>
 8015766:	2248      	movs	r2, #72	@ 0x48
 8015768:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801576c:	4668      	mov	r0, sp
 801576e:	f002 fc42 	bl	8017ff6 <memcpy>
 8015772:	f104 0320 	add.w	r3, r4, #32
 8015776:	cb0c      	ldmia	r3, {r2, r3}
 8015778:	4620      	mov	r0, r4
 801577a:	f7f7 fdfd 	bl	800d378 <rmw_uxrce_get_static_input_buffer_for_entity>
 801577e:	4680      	mov	r8, r0
 8015780:	b328      	cbz	r0, 80157ce <on_request+0x8e>
 8015782:	4638      	mov	r0, r7
 8015784:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015788:	4632      	mov	r2, r6
 801578a:	f107 0110 	add.w	r1, r7, #16
 801578e:	f000 fd93 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 8015792:	b930      	cbnz	r0, 80157a2 <on_request+0x62>
 8015794:	4810      	ldr	r0, [pc, #64]	@ (80157d8 <on_request+0x98>)
 8015796:	4641      	mov	r1, r8
 8015798:	b014      	add	sp, #80	@ 0x50
 801579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801579e:	f000 b877 	b.w	8015890 <put_memory>
 80157a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157a4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80157a8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80157ac:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80157b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80157b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80157bc:	f7f7 fbda 	bl	800cf74 <rmw_uros_epoch_nanos>
 80157c0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80157c4:	2303      	movs	r3, #3
 80157c6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80157ca:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80157ce:	b014      	add	sp, #80	@ 0x50
 80157d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d4:	2000cb14 	.word	0x2000cb14
 80157d8:	2000cb34 	.word	0x2000cb34

080157dc <on_reply>:
 80157dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e0:	4821      	ldr	r0, [pc, #132]	@ (8015868 <on_reply+0x8c>)
 80157e2:	b094      	sub	sp, #80	@ 0x50
 80157e4:	6800      	ldr	r0, [r0, #0]
 80157e6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80157e8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80157ec:	9113      	str	r1, [sp, #76]	@ 0x4c
 80157ee:	b3b8      	cbz	r0, 8015860 <on_reply+0x84>
 80157f0:	461d      	mov	r5, r3
 80157f2:	e001      	b.n	80157f8 <on_reply+0x1c>
 80157f4:	6840      	ldr	r0, [r0, #4]
 80157f6:	b398      	cbz	r0, 8015860 <on_reply+0x84>
 80157f8:	6884      	ldr	r4, [r0, #8]
 80157fa:	8b21      	ldrh	r1, [r4, #24]
 80157fc:	4291      	cmp	r1, r2
 80157fe:	d1f9      	bne.n	80157f4 <on_reply+0x18>
 8015800:	2248      	movs	r2, #72	@ 0x48
 8015802:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015806:	4668      	mov	r0, sp
 8015808:	f002 fbf5 	bl	8017ff6 <memcpy>
 801580c:	f104 0320 	add.w	r3, r4, #32
 8015810:	cb0c      	ldmia	r3, {r2, r3}
 8015812:	4620      	mov	r0, r4
 8015814:	f7f7 fdb0 	bl	800d378 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015818:	4680      	mov	r8, r0
 801581a:	b308      	cbz	r0, 8015860 <on_reply+0x84>
 801581c:	4638      	mov	r0, r7
 801581e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015822:	4632      	mov	r2, r6
 8015824:	f107 0110 	add.w	r1, r7, #16
 8015828:	f000 fd46 	bl	80162b8 <ucdr_deserialize_array_uint8_t>
 801582c:	b930      	cbnz	r0, 801583c <on_reply+0x60>
 801582e:	480f      	ldr	r0, [pc, #60]	@ (801586c <on_reply+0x90>)
 8015830:	4641      	mov	r1, r8
 8015832:	b014      	add	sp, #80	@ 0x50
 8015834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015838:	f000 b82a 	b.w	8015890 <put_memory>
 801583c:	2200      	movs	r2, #0
 801583e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015842:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015846:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801584a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801584e:	f7f7 fb91 	bl	800cf74 <rmw_uros_epoch_nanos>
 8015852:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015856:	2304      	movs	r3, #4
 8015858:	e942 0102 	strd	r0, r1, [r2, #-8]
 801585c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015860:	b014      	add	sp, #80	@ 0x50
 8015862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015866:	bf00      	nop
 8015868:	20008224 	.word	0x20008224
 801586c:	2000cb34 	.word	0x2000cb34

08015870 <get_memory>:
 8015870:	4603      	mov	r3, r0
 8015872:	6840      	ldr	r0, [r0, #4]
 8015874:	b158      	cbz	r0, 801588e <get_memory+0x1e>
 8015876:	6842      	ldr	r2, [r0, #4]
 8015878:	605a      	str	r2, [r3, #4]
 801587a:	b10a      	cbz	r2, 8015880 <get_memory+0x10>
 801587c:	2100      	movs	r1, #0
 801587e:	6011      	str	r1, [r2, #0]
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	6042      	str	r2, [r0, #4]
 8015884:	b102      	cbz	r2, 8015888 <get_memory+0x18>
 8015886:	6010      	str	r0, [r2, #0]
 8015888:	2200      	movs	r2, #0
 801588a:	6002      	str	r2, [r0, #0]
 801588c:	6018      	str	r0, [r3, #0]
 801588e:	4770      	bx	lr

08015890 <put_memory>:
 8015890:	680b      	ldr	r3, [r1, #0]
 8015892:	b10b      	cbz	r3, 8015898 <put_memory+0x8>
 8015894:	684a      	ldr	r2, [r1, #4]
 8015896:	605a      	str	r2, [r3, #4]
 8015898:	684a      	ldr	r2, [r1, #4]
 801589a:	b102      	cbz	r2, 801589e <put_memory+0xe>
 801589c:	6013      	str	r3, [r2, #0]
 801589e:	6803      	ldr	r3, [r0, #0]
 80158a0:	428b      	cmp	r3, r1
 80158a2:	6843      	ldr	r3, [r0, #4]
 80158a4:	bf08      	it	eq
 80158a6:	6002      	streq	r2, [r0, #0]
 80158a8:	604b      	str	r3, [r1, #4]
 80158aa:	b103      	cbz	r3, 80158ae <put_memory+0x1e>
 80158ac:	6019      	str	r1, [r3, #0]
 80158ae:	2300      	movs	r3, #0
 80158b0:	600b      	str	r3, [r1, #0]
 80158b2:	6041      	str	r1, [r0, #4]
 80158b4:	4770      	bx	lr
 80158b6:	bf00      	nop

080158b8 <rmw_destroy_client>:
 80158b8:	b570      	push	{r4, r5, r6, lr}
 80158ba:	b128      	cbz	r0, 80158c8 <rmw_destroy_client+0x10>
 80158bc:	4604      	mov	r4, r0
 80158be:	6800      	ldr	r0, [r0, #0]
 80158c0:	460d      	mov	r5, r1
 80158c2:	f7f7 fecf 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 80158c6:	b910      	cbnz	r0, 80158ce <rmw_destroy_client+0x16>
 80158c8:	2401      	movs	r4, #1
 80158ca:	4620      	mov	r0, r4
 80158cc:	bd70      	pop	{r4, r5, r6, pc}
 80158ce:	6863      	ldr	r3, [r4, #4]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d0f9      	beq.n	80158c8 <rmw_destroy_client+0x10>
 80158d4:	2d00      	cmp	r5, #0
 80158d6:	d0f7      	beq.n	80158c8 <rmw_destroy_client+0x10>
 80158d8:	6828      	ldr	r0, [r5, #0]
 80158da:	f7f7 fec3 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 80158de:	2800      	cmp	r0, #0
 80158e0:	d0f2      	beq.n	80158c8 <rmw_destroy_client+0x10>
 80158e2:	686e      	ldr	r6, [r5, #4]
 80158e4:	2e00      	cmp	r6, #0
 80158e6:	d0ef      	beq.n	80158c8 <rmw_destroy_client+0x10>
 80158e8:	6864      	ldr	r4, [r4, #4]
 80158ea:	6932      	ldr	r2, [r6, #16]
 80158ec:	6920      	ldr	r0, [r4, #16]
 80158ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158f6:	6819      	ldr	r1, [r3, #0]
 80158f8:	f7f9 fa98 	bl	800ee2c <uxr_buffer_cancel_data>
 80158fc:	4602      	mov	r2, r0
 80158fe:	6920      	ldr	r0, [r4, #16]
 8015900:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015904:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015908:	f7f7 fe2c 	bl	800d564 <run_xrce_session>
 801590c:	6920      	ldr	r0, [r4, #16]
 801590e:	6932      	ldr	r2, [r6, #16]
 8015910:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015914:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015918:	6819      	ldr	r1, [r3, #0]
 801591a:	f7f9 f83b 	bl	800e994 <uxr_buffer_delete_entity>
 801591e:	4602      	mov	r2, r0
 8015920:	6920      	ldr	r0, [r4, #16]
 8015922:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015926:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801592a:	f7f7 fe1b 	bl	800d564 <run_xrce_session>
 801592e:	2800      	cmp	r0, #0
 8015930:	4628      	mov	r0, r5
 8015932:	bf14      	ite	ne
 8015934:	2400      	movne	r4, #0
 8015936:	2402      	moveq	r4, #2
 8015938:	f7f7 fcfc 	bl	800d334 <rmw_uxrce_fini_client_memory>
 801593c:	e7c5      	b.n	80158ca <rmw_destroy_client+0x12>
 801593e:	bf00      	nop

08015940 <rmw_get_implementation_identifier>:
 8015940:	4b01      	ldr	r3, [pc, #4]	@ (8015948 <rmw_get_implementation_identifier+0x8>)
 8015942:	6818      	ldr	r0, [r3, #0]
 8015944:	4770      	bx	lr
 8015946:	bf00      	nop
 8015948:	08019b74 	.word	0x08019b74

0801594c <create_topic>:
 801594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015950:	4605      	mov	r5, r0
 8015952:	b084      	sub	sp, #16
 8015954:	4822      	ldr	r0, [pc, #136]	@ (80159e0 <create_topic+0x94>)
 8015956:	460f      	mov	r7, r1
 8015958:	4616      	mov	r6, r2
 801595a:	f7ff ff89 	bl	8015870 <get_memory>
 801595e:	4604      	mov	r4, r0
 8015960:	2800      	cmp	r0, #0
 8015962:	d039      	beq.n	80159d8 <create_topic+0x8c>
 8015964:	692b      	ldr	r3, [r5, #16]
 8015966:	6884      	ldr	r4, [r0, #8]
 8015968:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80159e8 <create_topic+0x9c>
 801596c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015970:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015974:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015978:	1c42      	adds	r2, r0, #1
 801597a:	2102      	movs	r1, #2
 801597c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015980:	f7f9 fa24 	bl	800edcc <uxr_object_id>
 8015984:	223c      	movs	r2, #60	@ 0x3c
 8015986:	6120      	str	r0, [r4, #16]
 8015988:	4641      	mov	r1, r8
 801598a:	4638      	mov	r0, r7
 801598c:	f7f7 fe50 	bl	800d630 <generate_topic_name>
 8015990:	b1f0      	cbz	r0, 80159d0 <create_topic+0x84>
 8015992:	4f14      	ldr	r7, [pc, #80]	@ (80159e4 <create_topic+0x98>)
 8015994:	4630      	mov	r0, r6
 8015996:	2264      	movs	r2, #100	@ 0x64
 8015998:	4639      	mov	r1, r7
 801599a:	f7f7 fe19 	bl	800d5d0 <generate_type_name>
 801599e:	b1b8      	cbz	r0, 80159d0 <create_topic+0x84>
 80159a0:	6928      	ldr	r0, [r5, #16]
 80159a2:	2306      	movs	r3, #6
 80159a4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80159a8:	f8cd 8000 	str.w	r8, [sp]
 80159ac:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80159b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159b4:	6811      	ldr	r1, [r2, #0]
 80159b6:	696b      	ldr	r3, [r5, #20]
 80159b8:	6922      	ldr	r2, [r4, #16]
 80159ba:	f7f9 f869 	bl	800ea90 <uxr_buffer_create_topic_bin>
 80159be:	4602      	mov	r2, r0
 80159c0:	6928      	ldr	r0, [r5, #16]
 80159c2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80159c6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80159ca:	f7f7 fdcb 	bl	800d564 <run_xrce_session>
 80159ce:	b918      	cbnz	r0, 80159d8 <create_topic+0x8c>
 80159d0:	4620      	mov	r0, r4
 80159d2:	f7f7 fcc5 	bl	800d360 <rmw_uxrce_fini_topic_memory>
 80159d6:	2400      	movs	r4, #0
 80159d8:	4620      	mov	r0, r4
 80159da:	b004      	add	sp, #16
 80159dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159e0:	2000cb54 	.word	0x2000cb54
 80159e4:	2000cbd4 	.word	0x2000cbd4
 80159e8:	2000cb98 	.word	0x2000cb98

080159ec <destroy_topic>:
 80159ec:	b538      	push	{r3, r4, r5, lr}
 80159ee:	6985      	ldr	r5, [r0, #24]
 80159f0:	b1d5      	cbz	r5, 8015a28 <destroy_topic+0x3c>
 80159f2:	4604      	mov	r4, r0
 80159f4:	6928      	ldr	r0, [r5, #16]
 80159f6:	6922      	ldr	r2, [r4, #16]
 80159f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80159fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a00:	6819      	ldr	r1, [r3, #0]
 8015a02:	f7f8 ffc7 	bl	800e994 <uxr_buffer_delete_entity>
 8015a06:	4602      	mov	r2, r0
 8015a08:	6928      	ldr	r0, [r5, #16]
 8015a0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015a0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015a12:	f7f7 fda7 	bl	800d564 <run_xrce_session>
 8015a16:	2800      	cmp	r0, #0
 8015a18:	4620      	mov	r0, r4
 8015a1a:	bf14      	ite	ne
 8015a1c:	2400      	movne	r4, #0
 8015a1e:	2402      	moveq	r4, #2
 8015a20:	f7f7 fc9e 	bl	800d360 <rmw_uxrce_fini_topic_memory>
 8015a24:	4620      	mov	r0, r4
 8015a26:	bd38      	pop	{r3, r4, r5, pc}
 8015a28:	2401      	movs	r4, #1
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	bd38      	pop	{r3, r4, r5, pc}
 8015a2e:	bf00      	nop

08015a30 <rmw_send_request>:
 8015a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a34:	4604      	mov	r4, r0
 8015a36:	6800      	ldr	r0, [r0, #0]
 8015a38:	b08b      	sub	sp, #44	@ 0x2c
 8015a3a:	460e      	mov	r6, r1
 8015a3c:	4615      	mov	r5, r2
 8015a3e:	b128      	cbz	r0, 8015a4c <rmw_send_request+0x1c>
 8015a40:	4b21      	ldr	r3, [pc, #132]	@ (8015ac8 <rmw_send_request+0x98>)
 8015a42:	6819      	ldr	r1, [r3, #0]
 8015a44:	f7ea fbec 	bl	8000220 <strcmp>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	d139      	bne.n	8015ac0 <rmw_send_request+0x90>
 8015a4c:	6864      	ldr	r4, [r4, #4]
 8015a4e:	6963      	ldr	r3, [r4, #20]
 8015a50:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015a54:	689b      	ldr	r3, [r3, #8]
 8015a56:	4798      	blx	r3
 8015a58:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015a62:	4798      	blx	r3
 8015a64:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015a68:	9000      	str	r0, [sp, #0]
 8015a6a:	6922      	ldr	r2, [r4, #16]
 8015a6c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015a6e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015a72:	ab02      	add	r3, sp, #8
 8015a74:	f7fb fa82 	bl	8010f7c <uxr_prepare_output_stream>
 8015a78:	2700      	movs	r7, #0
 8015a7a:	6028      	str	r0, [r5, #0]
 8015a7c:	606f      	str	r7, [r5, #4]
 8015a7e:	b198      	cbz	r0, 8015aa8 <rmw_send_request+0x78>
 8015a80:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015a84:	a902      	add	r1, sp, #8
 8015a86:	4630      	mov	r0, r6
 8015a88:	4798      	blx	r3
 8015a8a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015a8e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015a92:	2b01      	cmp	r3, #1
 8015a94:	d00c      	beq.n	8015ab0 <rmw_send_request+0x80>
 8015a96:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015a98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a9c:	f7f9 ff9c 	bl	800f9d8 <uxr_run_session_until_confirm_delivery>
 8015aa0:	4638      	mov	r0, r7
 8015aa2:	b00b      	add	sp, #44	@ 0x2c
 8015aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015aa8:	2001      	movs	r0, #1
 8015aaa:	b00b      	add	sp, #44	@ 0x2c
 8015aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ab0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ab4:	f7f9 fbd0 	bl	800f258 <uxr_flash_output_streams>
 8015ab8:	4638      	mov	r0, r7
 8015aba:	b00b      	add	sp, #44	@ 0x2c
 8015abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ac0:	200c      	movs	r0, #12
 8015ac2:	b00b      	add	sp, #44	@ 0x2c
 8015ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ac8:	08019b74 	.word	0x08019b74

08015acc <rmw_take_request>:
 8015acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ad0:	4605      	mov	r5, r0
 8015ad2:	6800      	ldr	r0, [r0, #0]
 8015ad4:	b089      	sub	sp, #36	@ 0x24
 8015ad6:	460c      	mov	r4, r1
 8015ad8:	4690      	mov	r8, r2
 8015ada:	461e      	mov	r6, r3
 8015adc:	b128      	cbz	r0, 8015aea <rmw_take_request+0x1e>
 8015ade:	4b28      	ldr	r3, [pc, #160]	@ (8015b80 <rmw_take_request+0xb4>)
 8015ae0:	6819      	ldr	r1, [r3, #0]
 8015ae2:	f7ea fb9d 	bl	8000220 <strcmp>
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	d146      	bne.n	8015b78 <rmw_take_request+0xac>
 8015aea:	b10e      	cbz	r6, 8015af0 <rmw_take_request+0x24>
 8015aec:	2300      	movs	r3, #0
 8015aee:	7033      	strb	r3, [r6, #0]
 8015af0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015af4:	f7f7 fcb8 	bl	800d468 <rmw_uxrce_clean_expired_static_input_buffer>
 8015af8:	4648      	mov	r0, r9
 8015afa:	f7f7 fc8d 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015afe:	4607      	mov	r7, r0
 8015b00:	b3b0      	cbz	r0, 8015b70 <rmw_take_request+0xa4>
 8015b02:	6885      	ldr	r5, [r0, #8]
 8015b04:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015b08:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015b0c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015b10:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015b14:	7423      	strb	r3, [r4, #16]
 8015b16:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015b1a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015b1e:	74e2      	strb	r2, [r4, #19]
 8015b20:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015b24:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015b28:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8015b2c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015b30:	61e1      	str	r1, [r4, #28]
 8015b32:	6162      	str	r2, [r4, #20]
 8015b34:	61a3      	str	r3, [r4, #24]
 8015b36:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015b3a:	689b      	ldr	r3, [r3, #8]
 8015b3c:	4798      	blx	r3
 8015b3e:	6844      	ldr	r4, [r0, #4]
 8015b40:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8015b44:	f105 0110 	add.w	r1, r5, #16
 8015b48:	4668      	mov	r0, sp
 8015b4a:	f7f8 feb3 	bl	800e8b4 <ucdr_init_buffer>
 8015b4e:	68e3      	ldr	r3, [r4, #12]
 8015b50:	4641      	mov	r1, r8
 8015b52:	4668      	mov	r0, sp
 8015b54:	4798      	blx	r3
 8015b56:	4639      	mov	r1, r7
 8015b58:	4604      	mov	r4, r0
 8015b5a:	480a      	ldr	r0, [pc, #40]	@ (8015b84 <rmw_take_request+0xb8>)
 8015b5c:	f7ff fe98 	bl	8015890 <put_memory>
 8015b60:	b106      	cbz	r6, 8015b64 <rmw_take_request+0x98>
 8015b62:	7034      	strb	r4, [r6, #0]
 8015b64:	f084 0001 	eor.w	r0, r4, #1
 8015b68:	b2c0      	uxtb	r0, r0
 8015b6a:	b009      	add	sp, #36	@ 0x24
 8015b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b70:	2001      	movs	r0, #1
 8015b72:	b009      	add	sp, #36	@ 0x24
 8015b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b78:	200c      	movs	r0, #12
 8015b7a:	b009      	add	sp, #36	@ 0x24
 8015b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b80:	08019b74 	.word	0x08019b74
 8015b84:	2000cb34 	.word	0x2000cb34

08015b88 <rmw_send_response>:
 8015b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b8a:	4605      	mov	r5, r0
 8015b8c:	6800      	ldr	r0, [r0, #0]
 8015b8e:	b091      	sub	sp, #68	@ 0x44
 8015b90:	460c      	mov	r4, r1
 8015b92:	4616      	mov	r6, r2
 8015b94:	b128      	cbz	r0, 8015ba2 <rmw_send_response+0x1a>
 8015b96:	4b29      	ldr	r3, [pc, #164]	@ (8015c3c <rmw_send_response+0xb4>)
 8015b98:	6819      	ldr	r1, [r3, #0]
 8015b9a:	f7ea fb41 	bl	8000220 <strcmp>
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	d141      	bne.n	8015c26 <rmw_send_response+0x9e>
 8015ba2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015ba6:	9306      	str	r3, [sp, #24]
 8015ba8:	4623      	mov	r3, r4
 8015baa:	9207      	str	r2, [sp, #28]
 8015bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bb0:	686d      	ldr	r5, [r5, #4]
 8015bb2:	789b      	ldrb	r3, [r3, #2]
 8015bb4:	68a1      	ldr	r1, [r4, #8]
 8015bb6:	f88d 2017 	strb.w	r2, [sp, #23]
 8015bba:	f88d 3016 	strb.w	r3, [sp, #22]
 8015bbe:	68e2      	ldr	r2, [r4, #12]
 8015bc0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015bc4:	6860      	ldr	r0, [r4, #4]
 8015bc6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015bca:	ab02      	add	r3, sp, #8
 8015bcc:	c307      	stmia	r3!, {r0, r1, r2}
 8015bce:	696b      	ldr	r3, [r5, #20]
 8015bd0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015bd2:	68db      	ldr	r3, [r3, #12]
 8015bd4:	4798      	blx	r3
 8015bd6:	6844      	ldr	r4, [r0, #4]
 8015bd8:	4630      	mov	r0, r6
 8015bda:	6923      	ldr	r3, [r4, #16]
 8015bdc:	4798      	blx	r3
 8015bde:	f100 0318 	add.w	r3, r0, #24
 8015be2:	6938      	ldr	r0, [r7, #16]
 8015be4:	9300      	str	r3, [sp, #0]
 8015be6:	692a      	ldr	r2, [r5, #16]
 8015be8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015bea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015bee:	ab08      	add	r3, sp, #32
 8015bf0:	f7fb f9c4 	bl	8010f7c <uxr_prepare_output_stream>
 8015bf4:	b910      	cbnz	r0, 8015bfc <rmw_send_response+0x74>
 8015bf6:	2001      	movs	r0, #1
 8015bf8:	b011      	add	sp, #68	@ 0x44
 8015bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bfc:	a902      	add	r1, sp, #8
 8015bfe:	a808      	add	r0, sp, #32
 8015c00:	f7fc fa16 	bl	8012030 <uxr_serialize_SampleIdentity>
 8015c04:	68a3      	ldr	r3, [r4, #8]
 8015c06:	a908      	add	r1, sp, #32
 8015c08:	4630      	mov	r0, r6
 8015c0a:	4798      	blx	r3
 8015c0c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015c10:	6938      	ldr	r0, [r7, #16]
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d00a      	beq.n	8015c2c <rmw_send_response+0xa4>
 8015c16:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015c18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c1c:	f7f9 fedc 	bl	800f9d8 <uxr_run_session_until_confirm_delivery>
 8015c20:	2000      	movs	r0, #0
 8015c22:	b011      	add	sp, #68	@ 0x44
 8015c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c26:	200c      	movs	r0, #12
 8015c28:	b011      	add	sp, #68	@ 0x44
 8015c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c30:	f7f9 fb12 	bl	800f258 <uxr_flash_output_streams>
 8015c34:	2000      	movs	r0, #0
 8015c36:	b011      	add	sp, #68	@ 0x44
 8015c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	08019b74 	.word	0x08019b74

08015c40 <rmw_take_response>:
 8015c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c44:	4604      	mov	r4, r0
 8015c46:	6800      	ldr	r0, [r0, #0]
 8015c48:	b088      	sub	sp, #32
 8015c4a:	4688      	mov	r8, r1
 8015c4c:	4617      	mov	r7, r2
 8015c4e:	461d      	mov	r5, r3
 8015c50:	b120      	cbz	r0, 8015c5c <rmw_take_response+0x1c>
 8015c52:	4b1e      	ldr	r3, [pc, #120]	@ (8015ccc <rmw_take_response+0x8c>)
 8015c54:	6819      	ldr	r1, [r3, #0]
 8015c56:	f7ea fae3 	bl	8000220 <strcmp>
 8015c5a:	bb78      	cbnz	r0, 8015cbc <rmw_take_response+0x7c>
 8015c5c:	b10d      	cbz	r5, 8015c62 <rmw_take_response+0x22>
 8015c5e:	2300      	movs	r3, #0
 8015c60:	702b      	strb	r3, [r5, #0]
 8015c62:	6864      	ldr	r4, [r4, #4]
 8015c64:	f7f7 fc00 	bl	800d468 <rmw_uxrce_clean_expired_static_input_buffer>
 8015c68:	4620      	mov	r0, r4
 8015c6a:	f7f7 fbd5 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c6e:	4606      	mov	r6, r0
 8015c70:	b340      	cbz	r0, 8015cc4 <rmw_take_response+0x84>
 8015c72:	6963      	ldr	r3, [r4, #20]
 8015c74:	6884      	ldr	r4, [r0, #8]
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015c7c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015c80:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015c84:	4798      	blx	r3
 8015c86:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015c8a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015c8e:	f104 0110 	add.w	r1, r4, #16
 8015c92:	4668      	mov	r0, sp
 8015c94:	f7f8 fe0e 	bl	800e8b4 <ucdr_init_buffer>
 8015c98:	4639      	mov	r1, r7
 8015c9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c9e:	4668      	mov	r0, sp
 8015ca0:	4798      	blx	r3
 8015ca2:	4631      	mov	r1, r6
 8015ca4:	4604      	mov	r4, r0
 8015ca6:	480a      	ldr	r0, [pc, #40]	@ (8015cd0 <rmw_take_response+0x90>)
 8015ca8:	f7ff fdf2 	bl	8015890 <put_memory>
 8015cac:	b105      	cbz	r5, 8015cb0 <rmw_take_response+0x70>
 8015cae:	702c      	strb	r4, [r5, #0]
 8015cb0:	f084 0001 	eor.w	r0, r4, #1
 8015cb4:	b2c0      	uxtb	r0, r0
 8015cb6:	b008      	add	sp, #32
 8015cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cbc:	200c      	movs	r0, #12
 8015cbe:	b008      	add	sp, #32
 8015cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cc4:	2001      	movs	r0, #1
 8015cc6:	b008      	add	sp, #32
 8015cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ccc:	08019b74 	.word	0x08019b74
 8015cd0:	2000cb34 	.word	0x2000cb34

08015cd4 <rmw_take_with_info>:
 8015cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	6800      	ldr	r0, [r0, #0]
 8015cda:	b089      	sub	sp, #36	@ 0x24
 8015cdc:	460f      	mov	r7, r1
 8015cde:	4615      	mov	r5, r2
 8015ce0:	b128      	cbz	r0, 8015cee <rmw_take_with_info+0x1a>
 8015ce2:	4b24      	ldr	r3, [pc, #144]	@ (8015d74 <rmw_take_with_info+0xa0>)
 8015ce4:	6819      	ldr	r1, [r3, #0]
 8015ce6:	f7ea fa9b 	bl	8000220 <strcmp>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d13e      	bne.n	8015d6c <rmw_take_with_info+0x98>
 8015cee:	b305      	cbz	r5, 8015d32 <rmw_take_with_info+0x5e>
 8015cf0:	6864      	ldr	r4, [r4, #4]
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	702b      	strb	r3, [r5, #0]
 8015cf6:	f7f7 fbb7 	bl	800d468 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	f7f7 fb8c 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d00:	4606      	mov	r6, r0
 8015d02:	b1f0      	cbz	r0, 8015d42 <rmw_take_with_info+0x6e>
 8015d04:	6881      	ldr	r1, [r0, #8]
 8015d06:	4668      	mov	r0, sp
 8015d08:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015d0c:	3110      	adds	r1, #16
 8015d0e:	f7f8 fdd1 	bl	800e8b4 <ucdr_init_buffer>
 8015d12:	69a3      	ldr	r3, [r4, #24]
 8015d14:	4639      	mov	r1, r7
 8015d16:	68db      	ldr	r3, [r3, #12]
 8015d18:	4668      	mov	r0, sp
 8015d1a:	4798      	blx	r3
 8015d1c:	4631      	mov	r1, r6
 8015d1e:	4604      	mov	r4, r0
 8015d20:	4815      	ldr	r0, [pc, #84]	@ (8015d78 <rmw_take_with_info+0xa4>)
 8015d22:	f7ff fdb5 	bl	8015890 <put_memory>
 8015d26:	702c      	strb	r4, [r5, #0]
 8015d28:	f084 0001 	eor.w	r0, r4, #1
 8015d2c:	b2c0      	uxtb	r0, r0
 8015d2e:	b009      	add	sp, #36	@ 0x24
 8015d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d32:	6864      	ldr	r4, [r4, #4]
 8015d34:	f7f7 fb98 	bl	800d468 <rmw_uxrce_clean_expired_static_input_buffer>
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f7f7 fb6d 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d3e:	4605      	mov	r5, r0
 8015d40:	b910      	cbnz	r0, 8015d48 <rmw_take_with_info+0x74>
 8015d42:	2001      	movs	r0, #1
 8015d44:	b009      	add	sp, #36	@ 0x24
 8015d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d48:	68a9      	ldr	r1, [r5, #8]
 8015d4a:	4668      	mov	r0, sp
 8015d4c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015d50:	3110      	adds	r1, #16
 8015d52:	f7f8 fdaf 	bl	800e8b4 <ucdr_init_buffer>
 8015d56:	69a3      	ldr	r3, [r4, #24]
 8015d58:	4639      	mov	r1, r7
 8015d5a:	68db      	ldr	r3, [r3, #12]
 8015d5c:	4668      	mov	r0, sp
 8015d5e:	4798      	blx	r3
 8015d60:	4629      	mov	r1, r5
 8015d62:	4604      	mov	r4, r0
 8015d64:	4804      	ldr	r0, [pc, #16]	@ (8015d78 <rmw_take_with_info+0xa4>)
 8015d66:	f7ff fd93 	bl	8015890 <put_memory>
 8015d6a:	e7dd      	b.n	8015d28 <rmw_take_with_info+0x54>
 8015d6c:	200c      	movs	r0, #12
 8015d6e:	b009      	add	sp, #36	@ 0x24
 8015d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d72:	bf00      	nop
 8015d74:	08019b74 	.word	0x08019b74
 8015d78:	2000cb34 	.word	0x2000cb34

08015d7c <rmw_wait>:
 8015d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d80:	b089      	sub	sp, #36	@ 0x24
 8015d82:	4605      	mov	r5, r0
 8015d84:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015d86:	460e      	mov	r6, r1
 8015d88:	4698      	mov	r8, r3
 8015d8a:	4691      	mov	r9, r2
 8015d8c:	2a00      	cmp	r2, #0
 8015d8e:	f000 810a 	beq.w	8015fa6 <rmw_wait+0x22a>
 8015d92:	b16c      	cbz	r4, 8015db0 <rmw_wait+0x34>
 8015d94:	4bae      	ldr	r3, [pc, #696]	@ (8016050 <rmw_wait+0x2d4>)
 8015d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d98:	af04      	add	r7, sp, #16
 8015d9a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015d9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015da2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015da6:	f7ff faaf 	bl	8015308 <rmw_time_equal>
 8015daa:	2800      	cmp	r0, #0
 8015dac:	f000 8127 	beq.w	8015ffe <rmw_wait+0x282>
 8015db0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015db4:	f7f7 fb58 	bl	800d468 <rmw_uxrce_clean_expired_static_input_buffer>
 8015db8:	4ba6      	ldr	r3, [pc, #664]	@ (8016054 <rmw_wait+0x2d8>)
 8015dba:	681c      	ldr	r4, [r3, #0]
 8015dbc:	b14c      	cbz	r4, 8015dd2 <rmw_wait+0x56>
 8015dbe:	4623      	mov	r3, r4
 8015dc0:	2100      	movs	r1, #0
 8015dc2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015dc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015dca:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d1f7      	bne.n	8015dc2 <rmw_wait+0x46>
 8015dd2:	f1b9 0f00 	cmp.w	r9, #0
 8015dd6:	d011      	beq.n	8015dfc <rmw_wait+0x80>
 8015dd8:	f8d9 1000 	ldr.w	r1, [r9]
 8015ddc:	b171      	cbz	r1, 8015dfc <rmw_wait+0x80>
 8015dde:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015de2:	2300      	movs	r3, #0
 8015de4:	2001      	movs	r0, #1
 8015de6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015dea:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015dec:	6912      	ldr	r2, [r2, #16]
 8015dee:	3301      	adds	r3, #1
 8015df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015df4:	4299      	cmp	r1, r3
 8015df6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015dfa:	d1f4      	bne.n	8015de6 <rmw_wait+0x6a>
 8015dfc:	f1b8 0f00 	cmp.w	r8, #0
 8015e00:	d011      	beq.n	8015e26 <rmw_wait+0xaa>
 8015e02:	f8d8 1000 	ldr.w	r1, [r8]
 8015e06:	b171      	cbz	r1, 8015e26 <rmw_wait+0xaa>
 8015e08:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	2001      	movs	r0, #1
 8015e10:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015e14:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015e16:	6912      	ldr	r2, [r2, #16]
 8015e18:	3301      	adds	r3, #1
 8015e1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015e1e:	4299      	cmp	r1, r3
 8015e20:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015e24:	d1f4      	bne.n	8015e10 <rmw_wait+0x94>
 8015e26:	b185      	cbz	r5, 8015e4a <rmw_wait+0xce>
 8015e28:	6829      	ldr	r1, [r5, #0]
 8015e2a:	b171      	cbz	r1, 8015e4a <rmw_wait+0xce>
 8015e2c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015e30:	2300      	movs	r3, #0
 8015e32:	2001      	movs	r0, #1
 8015e34:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015e38:	6a12      	ldr	r2, [r2, #32]
 8015e3a:	6912      	ldr	r2, [r2, #16]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015e42:	4299      	cmp	r1, r3
 8015e44:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015e48:	d1f4      	bne.n	8015e34 <rmw_wait+0xb8>
 8015e4a:	b34c      	cbz	r4, 8015ea0 <rmw_wait+0x124>
 8015e4c:	4622      	mov	r2, r4
 8015e4e:	2300      	movs	r3, #0
 8015e50:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015e54:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015e58:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015e5c:	440b      	add	r3, r1
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	2a00      	cmp	r2, #0
 8015e62:	d1f5      	bne.n	8015e50 <rmw_wait+0xd4>
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	f000 8084 	beq.w	8015f72 <rmw_wait+0x1f6>
 8015e6a:	1c7a      	adds	r2, r7, #1
 8015e6c:	d00d      	beq.n	8015e8a <rmw_wait+0x10e>
 8015e6e:	ee07 7a90 	vmov	s15, r7
 8015e72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015e76:	ee07 3a90 	vmov	s15, r3
 8015e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e82:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015e86:	ee17 7a90 	vmov	r7, s15
 8015e8a:	68a0      	ldr	r0, [r4, #8]
 8015e8c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015e90:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f040 8090 	bne.w	8015fba <rmw_wait+0x23e>
 8015e9a:	6864      	ldr	r4, [r4, #4]
 8015e9c:	2c00      	cmp	r4, #0
 8015e9e:	d1f4      	bne.n	8015e8a <rmw_wait+0x10e>
 8015ea0:	f1b9 0f00 	cmp.w	r9, #0
 8015ea4:	f000 80bc 	beq.w	8016020 <rmw_wait+0x2a4>
 8015ea8:	f8d9 7000 	ldr.w	r7, [r9]
 8015eac:	2f00      	cmp	r7, #0
 8015eae:	f000 808e 	beq.w	8015fce <rmw_wait+0x252>
 8015eb2:	2400      	movs	r4, #0
 8015eb4:	4627      	mov	r7, r4
 8015eb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015eba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ebe:	f7f7 faab 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	d05f      	beq.n	8015f86 <rmw_wait+0x20a>
 8015ec6:	f8d9 3000 	ldr.w	r3, [r9]
 8015eca:	3401      	adds	r4, #1
 8015ecc:	42a3      	cmp	r3, r4
 8015ece:	f04f 0701 	mov.w	r7, #1
 8015ed2:	d8f0      	bhi.n	8015eb6 <rmw_wait+0x13a>
 8015ed4:	f1b8 0f00 	cmp.w	r8, #0
 8015ed8:	d012      	beq.n	8015f00 <rmw_wait+0x184>
 8015eda:	f8d8 3000 	ldr.w	r3, [r8]
 8015ede:	b17b      	cbz	r3, 8015f00 <rmw_wait+0x184>
 8015ee0:	2400      	movs	r4, #0
 8015ee2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ee6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015eea:	f7f7 fa95 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	d051      	beq.n	8015f96 <rmw_wait+0x21a>
 8015ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8015ef6:	3401      	adds	r4, #1
 8015ef8:	42a3      	cmp	r3, r4
 8015efa:	f04f 0701 	mov.w	r7, #1
 8015efe:	d8f0      	bhi.n	8015ee2 <rmw_wait+0x166>
 8015f00:	b1dd      	cbz	r5, 8015f3a <rmw_wait+0x1be>
 8015f02:	682b      	ldr	r3, [r5, #0]
 8015f04:	b1cb      	cbz	r3, 8015f3a <rmw_wait+0x1be>
 8015f06:	2400      	movs	r4, #0
 8015f08:	686b      	ldr	r3, [r5, #4]
 8015f0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015f0e:	f7f7 fa83 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015f12:	b158      	cbz	r0, 8015f2c <rmw_wait+0x1b0>
 8015f14:	682b      	ldr	r3, [r5, #0]
 8015f16:	3401      	adds	r4, #1
 8015f18:	42a3      	cmp	r3, r4
 8015f1a:	d969      	bls.n	8015ff0 <rmw_wait+0x274>
 8015f1c:	686b      	ldr	r3, [r5, #4]
 8015f1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015f22:	2701      	movs	r7, #1
 8015f24:	f7f7 fa78 	bl	800d418 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015f28:	2800      	cmp	r0, #0
 8015f2a:	d1f3      	bne.n	8015f14 <rmw_wait+0x198>
 8015f2c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015f30:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f34:	3401      	adds	r4, #1
 8015f36:	42a3      	cmp	r3, r4
 8015f38:	d8e6      	bhi.n	8015f08 <rmw_wait+0x18c>
 8015f3a:	b1a6      	cbz	r6, 8015f66 <rmw_wait+0x1ea>
 8015f3c:	6834      	ldr	r4, [r6, #0]
 8015f3e:	b194      	cbz	r4, 8015f66 <rmw_wait+0x1ea>
 8015f40:	2300      	movs	r3, #0
 8015f42:	461d      	mov	r5, r3
 8015f44:	e004      	b.n	8015f50 <rmw_wait+0x1d4>
 8015f46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	42a3      	cmp	r3, r4
 8015f4e:	d00a      	beq.n	8015f66 <rmw_wait+0x1ea>
 8015f50:	6870      	ldr	r0, [r6, #4]
 8015f52:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015f56:	7c0a      	ldrb	r2, [r1, #16]
 8015f58:	2a00      	cmp	r2, #0
 8015f5a:	d0f4      	beq.n	8015f46 <rmw_wait+0x1ca>
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	42a3      	cmp	r3, r4
 8015f60:	740d      	strb	r5, [r1, #16]
 8015f62:	4617      	mov	r7, r2
 8015f64:	d1f4      	bne.n	8015f50 <rmw_wait+0x1d4>
 8015f66:	2f00      	cmp	r7, #0
 8015f68:	d03e      	beq.n	8015fe8 <rmw_wait+0x26c>
 8015f6a:	2000      	movs	r0, #0
 8015f6c:	b009      	add	sp, #36	@ 0x24
 8015f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f72:	68a0      	ldr	r0, [r4, #8]
 8015f74:	2100      	movs	r1, #0
 8015f76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f7a:	f7f9 fcf3 	bl	800f964 <uxr_run_session_timeout>
 8015f7e:	6864      	ldr	r4, [r4, #4]
 8015f80:	2c00      	cmp	r4, #0
 8015f82:	d1f6      	bne.n	8015f72 <rmw_wait+0x1f6>
 8015f84:	e78c      	b.n	8015ea0 <rmw_wait+0x124>
 8015f86:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015f8a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f8e:	3401      	adds	r4, #1
 8015f90:	42a3      	cmp	r3, r4
 8015f92:	d890      	bhi.n	8015eb6 <rmw_wait+0x13a>
 8015f94:	e79e      	b.n	8015ed4 <rmw_wait+0x158>
 8015f96:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015f9a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f9e:	3401      	adds	r4, #1
 8015fa0:	429c      	cmp	r4, r3
 8015fa2:	d39e      	bcc.n	8015ee2 <rmw_wait+0x166>
 8015fa4:	e7ac      	b.n	8015f00 <rmw_wait+0x184>
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	f47f aef3 	bne.w	8015d92 <rmw_wait+0x16>
 8015fac:	2800      	cmp	r0, #0
 8015fae:	f47f aef0 	bne.w	8015d92 <rmw_wait+0x16>
 8015fb2:	2900      	cmp	r1, #0
 8015fb4:	f47f aeed 	bne.w	8015d92 <rmw_wait+0x16>
 8015fb8:	e7d7      	b.n	8015f6a <rmw_wait+0x1ee>
 8015fba:	4639      	mov	r1, r7
 8015fbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fc0:	f7f9 fcea 	bl	800f998 <uxr_run_session_until_data>
 8015fc4:	6864      	ldr	r4, [r4, #4]
 8015fc6:	2c00      	cmp	r4, #0
 8015fc8:	f47f af5f 	bne.w	8015e8a <rmw_wait+0x10e>
 8015fcc:	e768      	b.n	8015ea0 <rmw_wait+0x124>
 8015fce:	f1b8 0f00 	cmp.w	r8, #0
 8015fd2:	d032      	beq.n	801603a <rmw_wait+0x2be>
 8015fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d181      	bne.n	8015ee0 <rmw_wait+0x164>
 8015fdc:	461f      	mov	r7, r3
 8015fde:	2d00      	cmp	r5, #0
 8015fe0:	d18f      	bne.n	8015f02 <rmw_wait+0x186>
 8015fe2:	462f      	mov	r7, r5
 8015fe4:	2e00      	cmp	r6, #0
 8015fe6:	d1a9      	bne.n	8015f3c <rmw_wait+0x1c0>
 8015fe8:	2002      	movs	r0, #2
 8015fea:	b009      	add	sp, #36	@ 0x24
 8015fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ff0:	2e00      	cmp	r6, #0
 8015ff2:	d0ba      	beq.n	8015f6a <rmw_wait+0x1ee>
 8015ff4:	6834      	ldr	r4, [r6, #0]
 8015ff6:	2701      	movs	r7, #1
 8015ff8:	2c00      	cmp	r4, #0
 8015ffa:	d1a1      	bne.n	8015f40 <rmw_wait+0x1c4>
 8015ffc:	e7b5      	b.n	8015f6a <rmw_wait+0x1ee>
 8015ffe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016002:	f7ff f9d5 	bl	80153b0 <rmw_time_total_nsec>
 8016006:	2300      	movs	r3, #0
 8016008:	4a13      	ldr	r2, [pc, #76]	@ (8016058 <rmw_wait+0x2dc>)
 801600a:	f7ea f9c1 	bl	8000390 <__aeabi_uldivmod>
 801600e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016012:	f171 0300 	sbcs.w	r3, r1, #0
 8016016:	4607      	mov	r7, r0
 8016018:	bfa8      	it	ge
 801601a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801601e:	e6c9      	b.n	8015db4 <rmw_wait+0x38>
 8016020:	f1b8 0f00 	cmp.w	r8, #0
 8016024:	d009      	beq.n	801603a <rmw_wait+0x2be>
 8016026:	f8d8 3000 	ldr.w	r3, [r8]
 801602a:	464f      	mov	r7, r9
 801602c:	2b00      	cmp	r3, #0
 801602e:	f47f af57 	bne.w	8015ee0 <rmw_wait+0x164>
 8016032:	2d00      	cmp	r5, #0
 8016034:	f47f af65 	bne.w	8015f02 <rmw_wait+0x186>
 8016038:	e7d3      	b.n	8015fe2 <rmw_wait+0x266>
 801603a:	b17d      	cbz	r5, 801605c <rmw_wait+0x2e0>
 801603c:	682b      	ldr	r3, [r5, #0]
 801603e:	4647      	mov	r7, r8
 8016040:	2b00      	cmp	r3, #0
 8016042:	f47f af60 	bne.w	8015f06 <rmw_wait+0x18a>
 8016046:	2e00      	cmp	r6, #0
 8016048:	f47f af78 	bne.w	8015f3c <rmw_wait+0x1c0>
 801604c:	e7cc      	b.n	8015fe8 <rmw_wait+0x26c>
 801604e:	bf00      	nop
 8016050:	08018e80 	.word	0x08018e80
 8016054:	2000cb24 	.word	0x2000cb24
 8016058:	000f4240 	.word	0x000f4240
 801605c:	2e00      	cmp	r6, #0
 801605e:	d0c3      	beq.n	8015fe8 <rmw_wait+0x26c>
 8016060:	6834      	ldr	r4, [r6, #0]
 8016062:	462f      	mov	r7, r5
 8016064:	2c00      	cmp	r4, #0
 8016066:	f47f af6b 	bne.w	8015f40 <rmw_wait+0x1c4>
 801606a:	e7bd      	b.n	8015fe8 <rmw_wait+0x26c>

0801606c <rmw_create_wait_set>:
 801606c:	b508      	push	{r3, lr}
 801606e:	4803      	ldr	r0, [pc, #12]	@ (801607c <rmw_create_wait_set+0x10>)
 8016070:	f7ff fbfe 	bl	8015870 <get_memory>
 8016074:	b108      	cbz	r0, 801607a <rmw_create_wait_set+0xe>
 8016076:	6880      	ldr	r0, [r0, #8]
 8016078:	3010      	adds	r0, #16
 801607a:	bd08      	pop	{r3, pc}
 801607c:	2000cb64 	.word	0x2000cb64

08016080 <rmw_destroy_wait_set>:
 8016080:	b508      	push	{r3, lr}
 8016082:	4b08      	ldr	r3, [pc, #32]	@ (80160a4 <rmw_destroy_wait_set+0x24>)
 8016084:	6819      	ldr	r1, [r3, #0]
 8016086:	b911      	cbnz	r1, 801608e <rmw_destroy_wait_set+0xe>
 8016088:	e00a      	b.n	80160a0 <rmw_destroy_wait_set+0x20>
 801608a:	6849      	ldr	r1, [r1, #4]
 801608c:	b141      	cbz	r1, 80160a0 <rmw_destroy_wait_set+0x20>
 801608e:	688b      	ldr	r3, [r1, #8]
 8016090:	3310      	adds	r3, #16
 8016092:	4298      	cmp	r0, r3
 8016094:	d1f9      	bne.n	801608a <rmw_destroy_wait_set+0xa>
 8016096:	4803      	ldr	r0, [pc, #12]	@ (80160a4 <rmw_destroy_wait_set+0x24>)
 8016098:	f7ff fbfa 	bl	8015890 <put_memory>
 801609c:	2000      	movs	r0, #0
 801609e:	bd08      	pop	{r3, pc}
 80160a0:	2001      	movs	r0, #1
 80160a2:	bd08      	pop	{r3, pc}
 80160a4:	2000cb64 	.word	0x2000cb64

080160a8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80160a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ac:	6805      	ldr	r5, [r0, #0]
 80160ae:	4604      	mov	r4, r0
 80160b0:	4628      	mov	r0, r5
 80160b2:	460e      	mov	r6, r1
 80160b4:	f7ea f8b4 	bl	8000220 <strcmp>
 80160b8:	b1c8      	cbz	r0, 80160ee <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80160ba:	4b11      	ldr	r3, [pc, #68]	@ (8016100 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	429d      	cmp	r5, r3
 80160c0:	d112      	bne.n	80160e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80160c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80160c6:	f8d8 4000 	ldr.w	r4, [r8]
 80160ca:	b16c      	cbz	r4, 80160e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80160cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80160d0:	2700      	movs	r7, #0
 80160d2:	3d04      	subs	r5, #4
 80160d4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80160d8:	4631      	mov	r1, r6
 80160da:	f7ea f8a1 	bl	8000220 <strcmp>
 80160de:	00bb      	lsls	r3, r7, #2
 80160e0:	b140      	cbz	r0, 80160f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80160e2:	3701      	adds	r7, #1
 80160e4:	42bc      	cmp	r4, r7
 80160e6:	d1f5      	bne.n	80160d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80160e8:	2000      	movs	r0, #0
 80160ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ee:	4620      	mov	r0, r4
 80160f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80160f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160fc:	58d3      	ldr	r3, [r2, r3]
 80160fe:	4718      	bx	r3
 8016100:	200001b4 	.word	0x200001b4

08016104 <std_msgs__msg__Bool__init>:
 8016104:	3800      	subs	r0, #0
 8016106:	bf18      	it	ne
 8016108:	2001      	movne	r0, #1
 801610a:	4770      	bx	lr

0801610c <std_msgs__msg__Bool__fini>:
 801610c:	4770      	bx	lr
 801610e:	bf00      	nop

08016110 <std_msgs__msg__Int8__init>:
 8016110:	3800      	subs	r0, #0
 8016112:	bf18      	it	ne
 8016114:	2001      	movne	r0, #1
 8016116:	4770      	bx	lr

08016118 <std_msgs__msg__Int8__fini>:
 8016118:	4770      	bx	lr
 801611a:	bf00      	nop

0801611c <std_msgs__msg__UInt16__init>:
 801611c:	3800      	subs	r0, #0
 801611e:	bf18      	it	ne
 8016120:	2001      	movne	r0, #1
 8016122:	4770      	bx	lr

08016124 <std_msgs__msg__UInt16__fini>:
 8016124:	4770      	bx	lr
 8016126:	bf00      	nop

08016128 <ucdr_serialize_endian_array_char>:
 8016128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801612c:	4619      	mov	r1, r3
 801612e:	461f      	mov	r7, r3
 8016130:	4605      	mov	r5, r0
 8016132:	4690      	mov	r8, r2
 8016134:	f7f8 fb6a 	bl	800e80c <ucdr_check_buffer_available_for>
 8016138:	b9e0      	cbnz	r0, 8016174 <ucdr_serialize_endian_array_char+0x4c>
 801613a:	463e      	mov	r6, r7
 801613c:	e009      	b.n	8016152 <ucdr_serialize_endian_array_char+0x2a>
 801613e:	68a8      	ldr	r0, [r5, #8]
 8016140:	f001 ff59 	bl	8017ff6 <memcpy>
 8016144:	68ab      	ldr	r3, [r5, #8]
 8016146:	6928      	ldr	r0, [r5, #16]
 8016148:	4423      	add	r3, r4
 801614a:	4420      	add	r0, r4
 801614c:	1b36      	subs	r6, r6, r4
 801614e:	60ab      	str	r3, [r5, #8]
 8016150:	6128      	str	r0, [r5, #16]
 8016152:	4631      	mov	r1, r6
 8016154:	2201      	movs	r2, #1
 8016156:	4628      	mov	r0, r5
 8016158:	f7f8 fbe0 	bl	800e91c <ucdr_check_final_buffer_behavior_array>
 801615c:	1bb9      	subs	r1, r7, r6
 801615e:	4441      	add	r1, r8
 8016160:	4604      	mov	r4, r0
 8016162:	4602      	mov	r2, r0
 8016164:	2800      	cmp	r0, #0
 8016166:	d1ea      	bne.n	801613e <ucdr_serialize_endian_array_char+0x16>
 8016168:	2301      	movs	r3, #1
 801616a:	7da8      	ldrb	r0, [r5, #22]
 801616c:	756b      	strb	r3, [r5, #21]
 801616e:	4058      	eors	r0, r3
 8016170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016174:	463a      	mov	r2, r7
 8016176:	68a8      	ldr	r0, [r5, #8]
 8016178:	4641      	mov	r1, r8
 801617a:	f001 ff3c 	bl	8017ff6 <memcpy>
 801617e:	68aa      	ldr	r2, [r5, #8]
 8016180:	692b      	ldr	r3, [r5, #16]
 8016182:	443a      	add	r2, r7
 8016184:	443b      	add	r3, r7
 8016186:	60aa      	str	r2, [r5, #8]
 8016188:	612b      	str	r3, [r5, #16]
 801618a:	e7ed      	b.n	8016168 <ucdr_serialize_endian_array_char+0x40>

0801618c <ucdr_deserialize_endian_array_char>:
 801618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016190:	4619      	mov	r1, r3
 8016192:	461f      	mov	r7, r3
 8016194:	4605      	mov	r5, r0
 8016196:	4690      	mov	r8, r2
 8016198:	f7f8 fb38 	bl	800e80c <ucdr_check_buffer_available_for>
 801619c:	b9e0      	cbnz	r0, 80161d8 <ucdr_deserialize_endian_array_char+0x4c>
 801619e:	463e      	mov	r6, r7
 80161a0:	e009      	b.n	80161b6 <ucdr_deserialize_endian_array_char+0x2a>
 80161a2:	68a9      	ldr	r1, [r5, #8]
 80161a4:	f001 ff27 	bl	8017ff6 <memcpy>
 80161a8:	68ab      	ldr	r3, [r5, #8]
 80161aa:	6928      	ldr	r0, [r5, #16]
 80161ac:	4423      	add	r3, r4
 80161ae:	4420      	add	r0, r4
 80161b0:	1b36      	subs	r6, r6, r4
 80161b2:	60ab      	str	r3, [r5, #8]
 80161b4:	6128      	str	r0, [r5, #16]
 80161b6:	2201      	movs	r2, #1
 80161b8:	4631      	mov	r1, r6
 80161ba:	4628      	mov	r0, r5
 80161bc:	f7f8 fbae 	bl	800e91c <ucdr_check_final_buffer_behavior_array>
 80161c0:	4604      	mov	r4, r0
 80161c2:	1bb8      	subs	r0, r7, r6
 80161c4:	4440      	add	r0, r8
 80161c6:	4622      	mov	r2, r4
 80161c8:	2c00      	cmp	r4, #0
 80161ca:	d1ea      	bne.n	80161a2 <ucdr_deserialize_endian_array_char+0x16>
 80161cc:	2301      	movs	r3, #1
 80161ce:	7da8      	ldrb	r0, [r5, #22]
 80161d0:	756b      	strb	r3, [r5, #21]
 80161d2:	4058      	eors	r0, r3
 80161d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161d8:	463a      	mov	r2, r7
 80161da:	68a9      	ldr	r1, [r5, #8]
 80161dc:	4640      	mov	r0, r8
 80161de:	f001 ff0a 	bl	8017ff6 <memcpy>
 80161e2:	68aa      	ldr	r2, [r5, #8]
 80161e4:	692b      	ldr	r3, [r5, #16]
 80161e6:	443a      	add	r2, r7
 80161e8:	443b      	add	r3, r7
 80161ea:	60aa      	str	r2, [r5, #8]
 80161ec:	612b      	str	r3, [r5, #16]
 80161ee:	e7ed      	b.n	80161cc <ucdr_deserialize_endian_array_char+0x40>

080161f0 <ucdr_serialize_array_uint8_t>:
 80161f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f4:	4688      	mov	r8, r1
 80161f6:	4611      	mov	r1, r2
 80161f8:	4617      	mov	r7, r2
 80161fa:	4605      	mov	r5, r0
 80161fc:	f7f8 fb06 	bl	800e80c <ucdr_check_buffer_available_for>
 8016200:	b9e0      	cbnz	r0, 801623c <ucdr_serialize_array_uint8_t+0x4c>
 8016202:	463e      	mov	r6, r7
 8016204:	e009      	b.n	801621a <ucdr_serialize_array_uint8_t+0x2a>
 8016206:	68a8      	ldr	r0, [r5, #8]
 8016208:	f001 fef5 	bl	8017ff6 <memcpy>
 801620c:	68aa      	ldr	r2, [r5, #8]
 801620e:	692b      	ldr	r3, [r5, #16]
 8016210:	4422      	add	r2, r4
 8016212:	4423      	add	r3, r4
 8016214:	1b36      	subs	r6, r6, r4
 8016216:	60aa      	str	r2, [r5, #8]
 8016218:	612b      	str	r3, [r5, #16]
 801621a:	4631      	mov	r1, r6
 801621c:	2201      	movs	r2, #1
 801621e:	4628      	mov	r0, r5
 8016220:	f7f8 fb7c 	bl	800e91c <ucdr_check_final_buffer_behavior_array>
 8016224:	1bb9      	subs	r1, r7, r6
 8016226:	4441      	add	r1, r8
 8016228:	4604      	mov	r4, r0
 801622a:	4602      	mov	r2, r0
 801622c:	2800      	cmp	r0, #0
 801622e:	d1ea      	bne.n	8016206 <ucdr_serialize_array_uint8_t+0x16>
 8016230:	2301      	movs	r3, #1
 8016232:	7da8      	ldrb	r0, [r5, #22]
 8016234:	756b      	strb	r3, [r5, #21]
 8016236:	4058      	eors	r0, r3
 8016238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801623c:	463a      	mov	r2, r7
 801623e:	68a8      	ldr	r0, [r5, #8]
 8016240:	4641      	mov	r1, r8
 8016242:	f001 fed8 	bl	8017ff6 <memcpy>
 8016246:	68aa      	ldr	r2, [r5, #8]
 8016248:	692b      	ldr	r3, [r5, #16]
 801624a:	443a      	add	r2, r7
 801624c:	443b      	add	r3, r7
 801624e:	60aa      	str	r2, [r5, #8]
 8016250:	612b      	str	r3, [r5, #16]
 8016252:	e7ed      	b.n	8016230 <ucdr_serialize_array_uint8_t+0x40>

08016254 <ucdr_serialize_endian_array_uint8_t>:
 8016254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016258:	4619      	mov	r1, r3
 801625a:	461f      	mov	r7, r3
 801625c:	4605      	mov	r5, r0
 801625e:	4690      	mov	r8, r2
 8016260:	f7f8 fad4 	bl	800e80c <ucdr_check_buffer_available_for>
 8016264:	b9e0      	cbnz	r0, 80162a0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8016266:	463e      	mov	r6, r7
 8016268:	e009      	b.n	801627e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801626a:	68a8      	ldr	r0, [r5, #8]
 801626c:	f001 fec3 	bl	8017ff6 <memcpy>
 8016270:	68ab      	ldr	r3, [r5, #8]
 8016272:	6928      	ldr	r0, [r5, #16]
 8016274:	4423      	add	r3, r4
 8016276:	4420      	add	r0, r4
 8016278:	1b36      	subs	r6, r6, r4
 801627a:	60ab      	str	r3, [r5, #8]
 801627c:	6128      	str	r0, [r5, #16]
 801627e:	4631      	mov	r1, r6
 8016280:	2201      	movs	r2, #1
 8016282:	4628      	mov	r0, r5
 8016284:	f7f8 fb4a 	bl	800e91c <ucdr_check_final_buffer_behavior_array>
 8016288:	1bb9      	subs	r1, r7, r6
 801628a:	4441      	add	r1, r8
 801628c:	4604      	mov	r4, r0
 801628e:	4602      	mov	r2, r0
 8016290:	2800      	cmp	r0, #0
 8016292:	d1ea      	bne.n	801626a <ucdr_serialize_endian_array_uint8_t+0x16>
 8016294:	2301      	movs	r3, #1
 8016296:	7da8      	ldrb	r0, [r5, #22]
 8016298:	756b      	strb	r3, [r5, #21]
 801629a:	4058      	eors	r0, r3
 801629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a0:	463a      	mov	r2, r7
 80162a2:	68a8      	ldr	r0, [r5, #8]
 80162a4:	4641      	mov	r1, r8
 80162a6:	f001 fea6 	bl	8017ff6 <memcpy>
 80162aa:	68aa      	ldr	r2, [r5, #8]
 80162ac:	692b      	ldr	r3, [r5, #16]
 80162ae:	443a      	add	r2, r7
 80162b0:	443b      	add	r3, r7
 80162b2:	60aa      	str	r2, [r5, #8]
 80162b4:	612b      	str	r3, [r5, #16]
 80162b6:	e7ed      	b.n	8016294 <ucdr_serialize_endian_array_uint8_t+0x40>

080162b8 <ucdr_deserialize_array_uint8_t>:
 80162b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162bc:	4688      	mov	r8, r1
 80162be:	4611      	mov	r1, r2
 80162c0:	4617      	mov	r7, r2
 80162c2:	4605      	mov	r5, r0
 80162c4:	f7f8 faa2 	bl	800e80c <ucdr_check_buffer_available_for>
 80162c8:	b9e0      	cbnz	r0, 8016304 <ucdr_deserialize_array_uint8_t+0x4c>
 80162ca:	463e      	mov	r6, r7
 80162cc:	e009      	b.n	80162e2 <ucdr_deserialize_array_uint8_t+0x2a>
 80162ce:	68a9      	ldr	r1, [r5, #8]
 80162d0:	f001 fe91 	bl	8017ff6 <memcpy>
 80162d4:	68aa      	ldr	r2, [r5, #8]
 80162d6:	692b      	ldr	r3, [r5, #16]
 80162d8:	4422      	add	r2, r4
 80162da:	4423      	add	r3, r4
 80162dc:	1b36      	subs	r6, r6, r4
 80162de:	60aa      	str	r2, [r5, #8]
 80162e0:	612b      	str	r3, [r5, #16]
 80162e2:	2201      	movs	r2, #1
 80162e4:	4631      	mov	r1, r6
 80162e6:	4628      	mov	r0, r5
 80162e8:	f7f8 fb18 	bl	800e91c <ucdr_check_final_buffer_behavior_array>
 80162ec:	4604      	mov	r4, r0
 80162ee:	1bb8      	subs	r0, r7, r6
 80162f0:	4440      	add	r0, r8
 80162f2:	4622      	mov	r2, r4
 80162f4:	2c00      	cmp	r4, #0
 80162f6:	d1ea      	bne.n	80162ce <ucdr_deserialize_array_uint8_t+0x16>
 80162f8:	2301      	movs	r3, #1
 80162fa:	7da8      	ldrb	r0, [r5, #22]
 80162fc:	756b      	strb	r3, [r5, #21]
 80162fe:	4058      	eors	r0, r3
 8016300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016304:	463a      	mov	r2, r7
 8016306:	68a9      	ldr	r1, [r5, #8]
 8016308:	4640      	mov	r0, r8
 801630a:	f001 fe74 	bl	8017ff6 <memcpy>
 801630e:	68aa      	ldr	r2, [r5, #8]
 8016310:	692b      	ldr	r3, [r5, #16]
 8016312:	443a      	add	r2, r7
 8016314:	443b      	add	r3, r7
 8016316:	60aa      	str	r2, [r5, #8]
 8016318:	612b      	str	r3, [r5, #16]
 801631a:	e7ed      	b.n	80162f8 <ucdr_deserialize_array_uint8_t+0x40>

0801631c <ucdr_deserialize_endian_array_uint8_t>:
 801631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016320:	4619      	mov	r1, r3
 8016322:	461f      	mov	r7, r3
 8016324:	4605      	mov	r5, r0
 8016326:	4690      	mov	r8, r2
 8016328:	f7f8 fa70 	bl	800e80c <ucdr_check_buffer_available_for>
 801632c:	b9e0      	cbnz	r0, 8016368 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801632e:	463e      	mov	r6, r7
 8016330:	e009      	b.n	8016346 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016332:	68a9      	ldr	r1, [r5, #8]
 8016334:	f001 fe5f 	bl	8017ff6 <memcpy>
 8016338:	68ab      	ldr	r3, [r5, #8]
 801633a:	6928      	ldr	r0, [r5, #16]
 801633c:	4423      	add	r3, r4
 801633e:	4420      	add	r0, r4
 8016340:	1b36      	subs	r6, r6, r4
 8016342:	60ab      	str	r3, [r5, #8]
 8016344:	6128      	str	r0, [r5, #16]
 8016346:	2201      	movs	r2, #1
 8016348:	4631      	mov	r1, r6
 801634a:	4628      	mov	r0, r5
 801634c:	f7f8 fae6 	bl	800e91c <ucdr_check_final_buffer_behavior_array>
 8016350:	4604      	mov	r4, r0
 8016352:	1bb8      	subs	r0, r7, r6
 8016354:	4440      	add	r0, r8
 8016356:	4622      	mov	r2, r4
 8016358:	2c00      	cmp	r4, #0
 801635a:	d1ea      	bne.n	8016332 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801635c:	2301      	movs	r3, #1
 801635e:	7da8      	ldrb	r0, [r5, #22]
 8016360:	756b      	strb	r3, [r5, #21]
 8016362:	4058      	eors	r0, r3
 8016364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016368:	463a      	mov	r2, r7
 801636a:	68a9      	ldr	r1, [r5, #8]
 801636c:	4640      	mov	r0, r8
 801636e:	f001 fe42 	bl	8017ff6 <memcpy>
 8016372:	68aa      	ldr	r2, [r5, #8]
 8016374:	692b      	ldr	r3, [r5, #16]
 8016376:	443a      	add	r2, r7
 8016378:	443b      	add	r3, r7
 801637a:	60aa      	str	r2, [r5, #8]
 801637c:	612b      	str	r3, [r5, #16]
 801637e:	e7ed      	b.n	801635c <ucdr_deserialize_endian_array_uint8_t+0x40>

08016380 <ucdr_serialize_sequence_char>:
 8016380:	b570      	push	{r4, r5, r6, lr}
 8016382:	4615      	mov	r5, r2
 8016384:	460e      	mov	r6, r1
 8016386:	7d01      	ldrb	r1, [r0, #20]
 8016388:	4604      	mov	r4, r0
 801638a:	f7f7 fd69 	bl	800de60 <ucdr_serialize_endian_uint32_t>
 801638e:	b90d      	cbnz	r5, 8016394 <ucdr_serialize_sequence_char+0x14>
 8016390:	2001      	movs	r0, #1
 8016392:	bd70      	pop	{r4, r5, r6, pc}
 8016394:	7d21      	ldrb	r1, [r4, #20]
 8016396:	462b      	mov	r3, r5
 8016398:	4632      	mov	r2, r6
 801639a:	4620      	mov	r0, r4
 801639c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163a0:	f7ff bec2 	b.w	8016128 <ucdr_serialize_endian_array_char>

080163a4 <ucdr_deserialize_sequence_char>:
 80163a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163a8:	461d      	mov	r5, r3
 80163aa:	4616      	mov	r6, r2
 80163ac:	460f      	mov	r7, r1
 80163ae:	461a      	mov	r2, r3
 80163b0:	7d01      	ldrb	r1, [r0, #20]
 80163b2:	4604      	mov	r4, r0
 80163b4:	f7f7 fe7c 	bl	800e0b0 <ucdr_deserialize_endian_uint32_t>
 80163b8:	682b      	ldr	r3, [r5, #0]
 80163ba:	429e      	cmp	r6, r3
 80163bc:	bf3c      	itt	cc
 80163be:	2201      	movcc	r2, #1
 80163c0:	75a2      	strbcc	r2, [r4, #22]
 80163c2:	b913      	cbnz	r3, 80163ca <ucdr_deserialize_sequence_char+0x26>
 80163c4:	2001      	movs	r0, #1
 80163c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163ca:	7d21      	ldrb	r1, [r4, #20]
 80163cc:	463a      	mov	r2, r7
 80163ce:	4620      	mov	r0, r4
 80163d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163d4:	f7ff beda 	b.w	801618c <ucdr_deserialize_endian_array_char>

080163d8 <ucdr_serialize_sequence_uint8_t>:
 80163d8:	b570      	push	{r4, r5, r6, lr}
 80163da:	4615      	mov	r5, r2
 80163dc:	460e      	mov	r6, r1
 80163de:	7d01      	ldrb	r1, [r0, #20]
 80163e0:	4604      	mov	r4, r0
 80163e2:	f7f7 fd3d 	bl	800de60 <ucdr_serialize_endian_uint32_t>
 80163e6:	b90d      	cbnz	r5, 80163ec <ucdr_serialize_sequence_uint8_t+0x14>
 80163e8:	2001      	movs	r0, #1
 80163ea:	bd70      	pop	{r4, r5, r6, pc}
 80163ec:	7d21      	ldrb	r1, [r4, #20]
 80163ee:	462b      	mov	r3, r5
 80163f0:	4632      	mov	r2, r6
 80163f2:	4620      	mov	r0, r4
 80163f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163f8:	f7ff bf2c 	b.w	8016254 <ucdr_serialize_endian_array_uint8_t>

080163fc <ucdr_deserialize_sequence_uint8_t>:
 80163fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016400:	461d      	mov	r5, r3
 8016402:	4616      	mov	r6, r2
 8016404:	460f      	mov	r7, r1
 8016406:	461a      	mov	r2, r3
 8016408:	7d01      	ldrb	r1, [r0, #20]
 801640a:	4604      	mov	r4, r0
 801640c:	f7f7 fe50 	bl	800e0b0 <ucdr_deserialize_endian_uint32_t>
 8016410:	682b      	ldr	r3, [r5, #0]
 8016412:	429e      	cmp	r6, r3
 8016414:	bf3c      	itt	cc
 8016416:	2201      	movcc	r2, #1
 8016418:	75a2      	strbcc	r2, [r4, #22]
 801641a:	b913      	cbnz	r3, 8016422 <ucdr_deserialize_sequence_uint8_t+0x26>
 801641c:	2001      	movs	r0, #1
 801641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016422:	7d21      	ldrb	r1, [r4, #20]
 8016424:	463a      	mov	r2, r7
 8016426:	4620      	mov	r0, r4
 8016428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801642c:	f7ff bf76 	b.w	801631c <ucdr_deserialize_endian_array_uint8_t>

08016430 <ucdr_serialize_string>:
 8016430:	b510      	push	{r4, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	4604      	mov	r4, r0
 8016436:	4608      	mov	r0, r1
 8016438:	9101      	str	r1, [sp, #4]
 801643a:	f7e9 fefb 	bl	8000234 <strlen>
 801643e:	9901      	ldr	r1, [sp, #4]
 8016440:	1c42      	adds	r2, r0, #1
 8016442:	4620      	mov	r0, r4
 8016444:	b002      	add	sp, #8
 8016446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801644a:	f7ff bf99 	b.w	8016380 <ucdr_serialize_sequence_char>
 801644e:	bf00      	nop

08016450 <ucdr_deserialize_string>:
 8016450:	b500      	push	{lr}
 8016452:	b083      	sub	sp, #12
 8016454:	ab01      	add	r3, sp, #4
 8016456:	f7ff ffa5 	bl	80163a4 <ucdr_deserialize_sequence_char>
 801645a:	b003      	add	sp, #12
 801645c:	f85d fb04 	ldr.w	pc, [sp], #4

08016460 <uxr_init_input_best_effort_stream>:
 8016460:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016464:	8003      	strh	r3, [r0, #0]
 8016466:	4770      	bx	lr

08016468 <uxr_reset_input_best_effort_stream>:
 8016468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801646c:	8003      	strh	r3, [r0, #0]
 801646e:	4770      	bx	lr

08016470 <uxr_receive_best_effort_message>:
 8016470:	b538      	push	{r3, r4, r5, lr}
 8016472:	4604      	mov	r4, r0
 8016474:	8800      	ldrh	r0, [r0, #0]
 8016476:	460d      	mov	r5, r1
 8016478:	f000 fd42 	bl	8016f00 <uxr_seq_num_cmp>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016484:	bfb8      	it	lt
 8016486:	8025      	strhlt	r5, [r4, #0]
 8016488:	bd38      	pop	{r3, r4, r5, pc}
 801648a:	bf00      	nop

0801648c <on_full_input_buffer>:
 801648c:	b570      	push	{r4, r5, r6, lr}
 801648e:	4605      	mov	r5, r0
 8016490:	460c      	mov	r4, r1
 8016492:	682b      	ldr	r3, [r5, #0]
 8016494:	6809      	ldr	r1, [r1, #0]
 8016496:	8920      	ldrh	r0, [r4, #8]
 8016498:	6862      	ldr	r2, [r4, #4]
 801649a:	fbb2 f2f0 	udiv	r2, r2, r0
 801649e:	eba3 0c01 	sub.w	ip, r3, r1
 80164a2:	fbbc fcf2 	udiv	ip, ip, r2
 80164a6:	f10c 0c01 	add.w	ip, ip, #1
 80164aa:	fa1f f38c 	uxth.w	r3, ip
 80164ae:	fbb3 f6f0 	udiv	r6, r3, r0
 80164b2:	fb00 3316 	mls	r3, r0, r6, r3
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	fb02 f303 	mul.w	r3, r2, r3
 80164bc:	1d18      	adds	r0, r3, #4
 80164be:	4408      	add	r0, r1
 80164c0:	7d26      	ldrb	r6, [r4, #20]
 80164c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80164c6:	b116      	cbz	r6, 80164ce <on_full_input_buffer+0x42>
 80164c8:	2600      	movs	r6, #0
 80164ca:	f840 6c04 	str.w	r6, [r0, #-4]
 80164ce:	2a03      	cmp	r2, #3
 80164d0:	d801      	bhi.n	80164d6 <on_full_input_buffer+0x4a>
 80164d2:	2001      	movs	r0, #1
 80164d4:	bd70      	pop	{r4, r5, r6, pc}
 80164d6:	3308      	adds	r3, #8
 80164d8:	4419      	add	r1, r3
 80164da:	4628      	mov	r0, r5
 80164dc:	692b      	ldr	r3, [r5, #16]
 80164de:	3a04      	subs	r2, #4
 80164e0:	f7f8 f9e0 	bl	800e8a4 <ucdr_init_buffer_origin>
 80164e4:	4628      	mov	r0, r5
 80164e6:	4903      	ldr	r1, [pc, #12]	@ (80164f4 <on_full_input_buffer+0x68>)
 80164e8:	4622      	mov	r2, r4
 80164ea:	f7f8 f9b7 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 80164ee:	2000      	movs	r0, #0
 80164f0:	bd70      	pop	{r4, r5, r6, pc}
 80164f2:	bf00      	nop
 80164f4:	0801648d 	.word	0x0801648d

080164f8 <uxr_init_input_reliable_stream>:
 80164f8:	b500      	push	{lr}
 80164fa:	e9c0 1200 	strd	r1, r2, [r0]
 80164fe:	f04f 0e00 	mov.w	lr, #0
 8016502:	9a01      	ldr	r2, [sp, #4]
 8016504:	8103      	strh	r3, [r0, #8]
 8016506:	6102      	str	r2, [r0, #16]
 8016508:	f880 e014 	strb.w	lr, [r0, #20]
 801650c:	b1d3      	cbz	r3, 8016544 <uxr_init_input_reliable_stream+0x4c>
 801650e:	f8c1 e000 	str.w	lr, [r1]
 8016512:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016516:	f1bc 0f01 	cmp.w	ip, #1
 801651a:	d913      	bls.n	8016544 <uxr_init_input_reliable_stream+0x4c>
 801651c:	2301      	movs	r3, #1
 801651e:	fbb3 f1fc 	udiv	r1, r3, ip
 8016522:	fb0c 3111 	mls	r1, ip, r1, r3
 8016526:	b289      	uxth	r1, r1
 8016528:	6842      	ldr	r2, [r0, #4]
 801652a:	fbb2 f2fc 	udiv	r2, r2, ip
 801652e:	fb01 f202 	mul.w	r2, r1, r2
 8016532:	6801      	ldr	r1, [r0, #0]
 8016534:	f841 e002 	str.w	lr, [r1, r2]
 8016538:	3301      	adds	r3, #1
 801653a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801653e:	b29b      	uxth	r3, r3
 8016540:	459c      	cmp	ip, r3
 8016542:	d8ec      	bhi.n	801651e <uxr_init_input_reliable_stream+0x26>
 8016544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016548:	60c3      	str	r3, [r0, #12]
 801654a:	f85d fb04 	ldr.w	pc, [sp], #4
 801654e:	bf00      	nop

08016550 <uxr_reset_input_reliable_stream>:
 8016550:	8901      	ldrh	r1, [r0, #8]
 8016552:	b1e9      	cbz	r1, 8016590 <uxr_reset_input_reliable_stream+0x40>
 8016554:	f04f 0c00 	mov.w	ip, #0
 8016558:	b500      	push	{lr}
 801655a:	4663      	mov	r3, ip
 801655c:	46e6      	mov	lr, ip
 801655e:	fbb3 f2f1 	udiv	r2, r3, r1
 8016562:	fb01 3312 	mls	r3, r1, r2, r3
 8016566:	b29b      	uxth	r3, r3
 8016568:	6842      	ldr	r2, [r0, #4]
 801656a:	fbb2 f2f1 	udiv	r2, r2, r1
 801656e:	fb02 f303 	mul.w	r3, r2, r3
 8016572:	6802      	ldr	r2, [r0, #0]
 8016574:	f842 e003 	str.w	lr, [r2, r3]
 8016578:	f10c 0c01 	add.w	ip, ip, #1
 801657c:	8901      	ldrh	r1, [r0, #8]
 801657e:	fa1f f38c 	uxth.w	r3, ip
 8016582:	4299      	cmp	r1, r3
 8016584:	d8eb      	bhi.n	801655e <uxr_reset_input_reliable_stream+0xe>
 8016586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801658a:	60c3      	str	r3, [r0, #12]
 801658c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016594:	60c3      	str	r3, [r0, #12]
 8016596:	4770      	bx	lr

08016598 <uxr_receive_reliable_message>:
 8016598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801659c:	4604      	mov	r4, r0
 801659e:	460d      	mov	r5, r1
 80165a0:	8901      	ldrh	r1, [r0, #8]
 80165a2:	8980      	ldrh	r0, [r0, #12]
 80165a4:	4690      	mov	r8, r2
 80165a6:	461f      	mov	r7, r3
 80165a8:	f000 fca2 	bl	8016ef0 <uxr_seq_num_add>
 80165ac:	4629      	mov	r1, r5
 80165ae:	4606      	mov	r6, r0
 80165b0:	89a0      	ldrh	r0, [r4, #12]
 80165b2:	f000 fca5 	bl	8016f00 <uxr_seq_num_cmp>
 80165b6:	2800      	cmp	r0, #0
 80165b8:	db0a      	blt.n	80165d0 <uxr_receive_reliable_message+0x38>
 80165ba:	2600      	movs	r6, #0
 80165bc:	89e0      	ldrh	r0, [r4, #14]
 80165be:	4629      	mov	r1, r5
 80165c0:	f000 fc9e 	bl	8016f00 <uxr_seq_num_cmp>
 80165c4:	2800      	cmp	r0, #0
 80165c6:	da00      	bge.n	80165ca <uxr_receive_reliable_message+0x32>
 80165c8:	81e5      	strh	r5, [r4, #14]
 80165ca:	4630      	mov	r0, r6
 80165cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165d0:	4630      	mov	r0, r6
 80165d2:	4629      	mov	r1, r5
 80165d4:	f000 fc94 	bl	8016f00 <uxr_seq_num_cmp>
 80165d8:	2800      	cmp	r0, #0
 80165da:	dbee      	blt.n	80165ba <uxr_receive_reliable_message+0x22>
 80165dc:	6923      	ldr	r3, [r4, #16]
 80165de:	4640      	mov	r0, r8
 80165e0:	4798      	blx	r3
 80165e2:	2101      	movs	r1, #1
 80165e4:	4681      	mov	r9, r0
 80165e6:	89a0      	ldrh	r0, [r4, #12]
 80165e8:	f000 fc82 	bl	8016ef0 <uxr_seq_num_add>
 80165ec:	f1b9 0f00 	cmp.w	r9, #0
 80165f0:	d101      	bne.n	80165f6 <uxr_receive_reliable_message+0x5e>
 80165f2:	4285      	cmp	r5, r0
 80165f4:	d047      	beq.n	8016686 <uxr_receive_reliable_message+0xee>
 80165f6:	8922      	ldrh	r2, [r4, #8]
 80165f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80165fc:	fb02 5010 	mls	r0, r2, r0, r5
 8016600:	b280      	uxth	r0, r0
 8016602:	6863      	ldr	r3, [r4, #4]
 8016604:	fbb3 f3f2 	udiv	r3, r3, r2
 8016608:	fb00 f303 	mul.w	r3, r0, r3
 801660c:	6820      	ldr	r0, [r4, #0]
 801660e:	3304      	adds	r3, #4
 8016610:	4418      	add	r0, r3
 8016612:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1cf      	bne.n	80165ba <uxr_receive_reliable_message+0x22>
 801661a:	4641      	mov	r1, r8
 801661c:	463a      	mov	r2, r7
 801661e:	f001 fcea 	bl	8017ff6 <memcpy>
 8016622:	8921      	ldrh	r1, [r4, #8]
 8016624:	fbb5 f2f1 	udiv	r2, r5, r1
 8016628:	fb01 5212 	mls	r2, r1, r2, r5
 801662c:	b292      	uxth	r2, r2
 801662e:	6863      	ldr	r3, [r4, #4]
 8016630:	fbb3 f3f1 	udiv	r3, r3, r1
 8016634:	fb02 f303 	mul.w	r3, r2, r3
 8016638:	6822      	ldr	r2, [r4, #0]
 801663a:	50d7      	str	r7, [r2, r3]
 801663c:	9a08      	ldr	r2, [sp, #32]
 801663e:	2301      	movs	r3, #1
 8016640:	7013      	strb	r3, [r2, #0]
 8016642:	f1b9 0f00 	cmp.w	r9, #0
 8016646:	d0b8      	beq.n	80165ba <uxr_receive_reliable_message+0x22>
 8016648:	89a6      	ldrh	r6, [r4, #12]
 801664a:	4630      	mov	r0, r6
 801664c:	2101      	movs	r1, #1
 801664e:	f000 fc4f 	bl	8016ef0 <uxr_seq_num_add>
 8016652:	8922      	ldrh	r2, [r4, #8]
 8016654:	6863      	ldr	r3, [r4, #4]
 8016656:	fbb3 f3f2 	udiv	r3, r3, r2
 801665a:	4606      	mov	r6, r0
 801665c:	fbb0 f0f2 	udiv	r0, r0, r2
 8016660:	fb02 6010 	mls	r0, r2, r0, r6
 8016664:	b280      	uxth	r0, r0
 8016666:	fb00 f303 	mul.w	r3, r0, r3
 801666a:	6820      	ldr	r0, [r4, #0]
 801666c:	3304      	adds	r3, #4
 801666e:	4418      	add	r0, r3
 8016670:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d0a0      	beq.n	80165ba <uxr_receive_reliable_message+0x22>
 8016678:	6923      	ldr	r3, [r4, #16]
 801667a:	4798      	blx	r3
 801667c:	2802      	cmp	r0, #2
 801667e:	d008      	beq.n	8016692 <uxr_receive_reliable_message+0xfa>
 8016680:	2801      	cmp	r0, #1
 8016682:	d0e2      	beq.n	801664a <uxr_receive_reliable_message+0xb2>
 8016684:	e799      	b.n	80165ba <uxr_receive_reliable_message+0x22>
 8016686:	9b08      	ldr	r3, [sp, #32]
 8016688:	81a5      	strh	r5, [r4, #12]
 801668a:	2601      	movs	r6, #1
 801668c:	f883 9000 	strb.w	r9, [r3]
 8016690:	e794      	b.n	80165bc <uxr_receive_reliable_message+0x24>
 8016692:	2601      	movs	r6, #1
 8016694:	e792      	b.n	80165bc <uxr_receive_reliable_message+0x24>
 8016696:	bf00      	nop

08016698 <uxr_next_input_reliable_buffer_available>:
 8016698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801669c:	4604      	mov	r4, r0
 801669e:	460f      	mov	r7, r1
 80166a0:	8980      	ldrh	r0, [r0, #12]
 80166a2:	2101      	movs	r1, #1
 80166a4:	4690      	mov	r8, r2
 80166a6:	f000 fc23 	bl	8016ef0 <uxr_seq_num_add>
 80166aa:	8922      	ldrh	r2, [r4, #8]
 80166ac:	fbb0 f6f2 	udiv	r6, r0, r2
 80166b0:	fb02 0616 	mls	r6, r2, r6, r0
 80166b4:	b2b6      	uxth	r6, r6
 80166b6:	6863      	ldr	r3, [r4, #4]
 80166b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80166bc:	fb06 f303 	mul.w	r3, r6, r3
 80166c0:	6826      	ldr	r6, [r4, #0]
 80166c2:	3304      	adds	r3, #4
 80166c4:	441e      	add	r6, r3
 80166c6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80166ca:	f1b9 0f00 	cmp.w	r9, #0
 80166ce:	d023      	beq.n	8016718 <uxr_next_input_reliable_buffer_available+0x80>
 80166d0:	6923      	ldr	r3, [r4, #16]
 80166d2:	4605      	mov	r5, r0
 80166d4:	4630      	mov	r0, r6
 80166d6:	4798      	blx	r3
 80166d8:	4682      	mov	sl, r0
 80166da:	b300      	cbz	r0, 801671e <uxr_next_input_reliable_buffer_available+0x86>
 80166dc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80166e0:	2101      	movs	r1, #1
 80166e2:	4650      	mov	r0, sl
 80166e4:	f000 fc04 	bl	8016ef0 <uxr_seq_num_add>
 80166e8:	8921      	ldrh	r1, [r4, #8]
 80166ea:	fbb0 f2f1 	udiv	r2, r0, r1
 80166ee:	4682      	mov	sl, r0
 80166f0:	fb01 0212 	mls	r2, r1, r2, r0
 80166f4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80166f8:	b292      	uxth	r2, r2
 80166fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80166fe:	fb02 f303 	mul.w	r3, r2, r3
 8016702:	3304      	adds	r3, #4
 8016704:	4418      	add	r0, r3
 8016706:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801670a:	b12b      	cbz	r3, 8016718 <uxr_next_input_reliable_buffer_available+0x80>
 801670c:	6923      	ldr	r3, [r4, #16]
 801670e:	4798      	blx	r3
 8016710:	2802      	cmp	r0, #2
 8016712:	d01b      	beq.n	801674c <uxr_next_input_reliable_buffer_available+0xb4>
 8016714:	2801      	cmp	r0, #1
 8016716:	d0e3      	beq.n	80166e0 <uxr_next_input_reliable_buffer_available+0x48>
 8016718:	2000      	movs	r0, #0
 801671a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671e:	464a      	mov	r2, r9
 8016720:	4631      	mov	r1, r6
 8016722:	4638      	mov	r0, r7
 8016724:	f7f8 f8c6 	bl	800e8b4 <ucdr_init_buffer>
 8016728:	8921      	ldrh	r1, [r4, #8]
 801672a:	fbb5 f2f1 	udiv	r2, r5, r1
 801672e:	fb01 5212 	mls	r2, r1, r2, r5
 8016732:	b292      	uxth	r2, r2
 8016734:	6863      	ldr	r3, [r4, #4]
 8016736:	fbb3 f3f1 	udiv	r3, r3, r1
 801673a:	fb02 f303 	mul.w	r3, r2, r3
 801673e:	6822      	ldr	r2, [r4, #0]
 8016740:	f842 a003 	str.w	sl, [r2, r3]
 8016744:	2001      	movs	r0, #1
 8016746:	81a5      	strh	r5, [r4, #12]
 8016748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801674c:	8920      	ldrh	r0, [r4, #8]
 801674e:	fbb5 f3f0 	udiv	r3, r5, r0
 8016752:	fb00 5513 	mls	r5, r0, r3, r5
 8016756:	b2ad      	uxth	r5, r5
 8016758:	6863      	ldr	r3, [r4, #4]
 801675a:	fbb3 f3f0 	udiv	r3, r3, r0
 801675e:	fb03 f505 	mul.w	r5, r3, r5
 8016762:	6823      	ldr	r3, [r4, #0]
 8016764:	2000      	movs	r0, #0
 8016766:	5158      	str	r0, [r3, r5]
 8016768:	eb06 0108 	add.w	r1, r6, r8
 801676c:	eba9 0208 	sub.w	r2, r9, r8
 8016770:	4638      	mov	r0, r7
 8016772:	f7f8 f89f 	bl	800e8b4 <ucdr_init_buffer>
 8016776:	4638      	mov	r0, r7
 8016778:	4903      	ldr	r1, [pc, #12]	@ (8016788 <uxr_next_input_reliable_buffer_available+0xf0>)
 801677a:	4622      	mov	r2, r4
 801677c:	f7f8 f86e 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 8016780:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016784:	2001      	movs	r0, #1
 8016786:	e7c8      	b.n	801671a <uxr_next_input_reliable_buffer_available+0x82>
 8016788:	0801648d 	.word	0x0801648d

0801678c <uxr_process_heartbeat>:
 801678c:	b538      	push	{r3, r4, r5, lr}
 801678e:	4611      	mov	r1, r2
 8016790:	4604      	mov	r4, r0
 8016792:	89c0      	ldrh	r0, [r0, #14]
 8016794:	4615      	mov	r5, r2
 8016796:	f000 fbb3 	bl	8016f00 <uxr_seq_num_cmp>
 801679a:	2800      	cmp	r0, #0
 801679c:	bfb8      	it	lt
 801679e:	81e5      	strhlt	r5, [r4, #14]
 80167a0:	bd38      	pop	{r3, r4, r5, pc}
 80167a2:	bf00      	nop

080167a4 <uxr_compute_acknack>:
 80167a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167a8:	8903      	ldrh	r3, [r0, #8]
 80167aa:	8985      	ldrh	r5, [r0, #12]
 80167ac:	4604      	mov	r4, r0
 80167ae:	460e      	mov	r6, r1
 80167b0:	b1d3      	cbz	r3, 80167e8 <uxr_compute_acknack+0x44>
 80167b2:	4628      	mov	r0, r5
 80167b4:	2701      	movs	r7, #1
 80167b6:	e003      	b.n	80167c0 <uxr_compute_acknack+0x1c>
 80167b8:	4567      	cmp	r7, ip
 80167ba:	d215      	bcs.n	80167e8 <uxr_compute_acknack+0x44>
 80167bc:	89a0      	ldrh	r0, [r4, #12]
 80167be:	3701      	adds	r7, #1
 80167c0:	b2b9      	uxth	r1, r7
 80167c2:	f000 fb95 	bl	8016ef0 <uxr_seq_num_add>
 80167c6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80167ca:	fbb0 f3fc 	udiv	r3, r0, ip
 80167ce:	fb0c 0313 	mls	r3, ip, r3, r0
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80167d8:	fbb3 f3fc 	udiv	r3, r3, ip
 80167dc:	fb02 f303 	mul.w	r3, r2, r3
 80167e0:	58cb      	ldr	r3, [r1, r3]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d1e8      	bne.n	80167b8 <uxr_compute_acknack+0x14>
 80167e6:	4605      	mov	r5, r0
 80167e8:	8035      	strh	r5, [r6, #0]
 80167ea:	2101      	movs	r1, #1
 80167ec:	4628      	mov	r0, r5
 80167ee:	89e7      	ldrh	r7, [r4, #14]
 80167f0:	f000 fb82 	bl	8016ef8 <uxr_seq_num_sub>
 80167f4:	4601      	mov	r1, r0
 80167f6:	4638      	mov	r0, r7
 80167f8:	f000 fb7e 	bl	8016ef8 <uxr_seq_num_sub>
 80167fc:	4605      	mov	r5, r0
 80167fe:	b318      	cbz	r0, 8016848 <uxr_compute_acknack+0xa4>
 8016800:	f04f 0900 	mov.w	r9, #0
 8016804:	464f      	mov	r7, r9
 8016806:	f04f 0801 	mov.w	r8, #1
 801680a:	fa1f f189 	uxth.w	r1, r9
 801680e:	8830      	ldrh	r0, [r6, #0]
 8016810:	f000 fb6e 	bl	8016ef0 <uxr_seq_num_add>
 8016814:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016818:	fbb0 f3fc 	udiv	r3, r0, ip
 801681c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016820:	fb03 001c 	mls	r0, r3, ip, r0
 8016824:	b283      	uxth	r3, r0
 8016826:	fbb2 f2fc 	udiv	r2, r2, ip
 801682a:	fb02 f303 	mul.w	r3, r2, r3
 801682e:	fa08 f209 	lsl.w	r2, r8, r9
 8016832:	58cb      	ldr	r3, [r1, r3]
 8016834:	f109 0901 	add.w	r9, r9, #1
 8016838:	b90b      	cbnz	r3, 801683e <uxr_compute_acknack+0x9a>
 801683a:	4317      	orrs	r7, r2
 801683c:	b2bf      	uxth	r7, r7
 801683e:	454d      	cmp	r5, r9
 8016840:	d1e3      	bne.n	801680a <uxr_compute_acknack+0x66>
 8016842:	4638      	mov	r0, r7
 8016844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016848:	4607      	mov	r7, r0
 801684a:	4638      	mov	r0, r7
 801684c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016850 <uxr_init_output_best_effort_stream>:
 8016850:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016854:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016858:	6001      	str	r1, [r0, #0]
 801685a:	7303      	strb	r3, [r0, #12]
 801685c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016860:	4770      	bx	lr
 8016862:	bf00      	nop

08016864 <uxr_reset_output_best_effort_stream>:
 8016864:	7b02      	ldrb	r2, [r0, #12]
 8016866:	6042      	str	r2, [r0, #4]
 8016868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801686c:	81c3      	strh	r3, [r0, #14]
 801686e:	4770      	bx	lr

08016870 <uxr_prepare_best_effort_buffer_to_write>:
 8016870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016872:	4604      	mov	r4, r0
 8016874:	b083      	sub	sp, #12
 8016876:	6840      	ldr	r0, [r0, #4]
 8016878:	460d      	mov	r5, r1
 801687a:	4616      	mov	r6, r2
 801687c:	f7fa fabe 	bl	8010dfc <uxr_submessage_padding>
 8016880:	6863      	ldr	r3, [r4, #4]
 8016882:	4418      	add	r0, r3
 8016884:	68a3      	ldr	r3, [r4, #8]
 8016886:	1942      	adds	r2, r0, r5
 8016888:	4293      	cmp	r3, r2
 801688a:	bf2c      	ite	cs
 801688c:	2701      	movcs	r7, #1
 801688e:	2700      	movcc	r7, #0
 8016890:	d202      	bcs.n	8016898 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016892:	4638      	mov	r0, r7
 8016894:	b003      	add	sp, #12
 8016896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016898:	9000      	str	r0, [sp, #0]
 801689a:	6821      	ldr	r1, [r4, #0]
 801689c:	4630      	mov	r0, r6
 801689e:	2300      	movs	r3, #0
 80168a0:	f7f7 fff6 	bl	800e890 <ucdr_init_buffer_origin_offset>
 80168a4:	6861      	ldr	r1, [r4, #4]
 80168a6:	4638      	mov	r0, r7
 80168a8:	4429      	add	r1, r5
 80168aa:	6061      	str	r1, [r4, #4]
 80168ac:	b003      	add	sp, #12
 80168ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080168b0 <uxr_prepare_best_effort_buffer_to_send>:
 80168b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b4:	4604      	mov	r4, r0
 80168b6:	461d      	mov	r5, r3
 80168b8:	6840      	ldr	r0, [r0, #4]
 80168ba:	7b23      	ldrb	r3, [r4, #12]
 80168bc:	4298      	cmp	r0, r3
 80168be:	bf8c      	ite	hi
 80168c0:	2601      	movhi	r6, #1
 80168c2:	2600      	movls	r6, #0
 80168c4:	d802      	bhi.n	80168cc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80168c6:	4630      	mov	r0, r6
 80168c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168cc:	4688      	mov	r8, r1
 80168ce:	89e0      	ldrh	r0, [r4, #14]
 80168d0:	2101      	movs	r1, #1
 80168d2:	4617      	mov	r7, r2
 80168d4:	f000 fb0c 	bl	8016ef0 <uxr_seq_num_add>
 80168d8:	6823      	ldr	r3, [r4, #0]
 80168da:	81e0      	strh	r0, [r4, #14]
 80168dc:	8028      	strh	r0, [r5, #0]
 80168de:	f8c8 3000 	str.w	r3, [r8]
 80168e2:	6863      	ldr	r3, [r4, #4]
 80168e4:	603b      	str	r3, [r7, #0]
 80168e6:	7b23      	ldrb	r3, [r4, #12]
 80168e8:	6063      	str	r3, [r4, #4]
 80168ea:	4630      	mov	r0, r6
 80168ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168f0 <on_full_output_buffer>:
 80168f0:	b538      	push	{r3, r4, r5, lr}
 80168f2:	6802      	ldr	r2, [r0, #0]
 80168f4:	460c      	mov	r4, r1
 80168f6:	6809      	ldr	r1, [r1, #0]
 80168f8:	8923      	ldrh	r3, [r4, #8]
 80168fa:	eba2 0c01 	sub.w	ip, r2, r1
 80168fe:	6862      	ldr	r2, [r4, #4]
 8016900:	fbb2 f2f3 	udiv	r2, r2, r3
 8016904:	fbbc fcf2 	udiv	ip, ip, r2
 8016908:	f10c 0c01 	add.w	ip, ip, #1
 801690c:	fa1f fc8c 	uxth.w	ip, ip
 8016910:	fbbc fef3 	udiv	lr, ip, r3
 8016914:	fb03 c31e 	mls	r3, r3, lr, ip
 8016918:	b29b      	uxth	r3, r3
 801691a:	fb02 f303 	mul.w	r3, r2, r3
 801691e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016922:	58ca      	ldr	r2, [r1, r3]
 8016924:	4463      	add	r3, ip
 8016926:	eba2 020c 	sub.w	r2, r2, ip
 801692a:	3308      	adds	r3, #8
 801692c:	4605      	mov	r5, r0
 801692e:	4419      	add	r1, r3
 8016930:	3a04      	subs	r2, #4
 8016932:	6903      	ldr	r3, [r0, #16]
 8016934:	f7f7 ffb6 	bl	800e8a4 <ucdr_init_buffer_origin>
 8016938:	4628      	mov	r0, r5
 801693a:	4903      	ldr	r1, [pc, #12]	@ (8016948 <on_full_output_buffer+0x58>)
 801693c:	4622      	mov	r2, r4
 801693e:	f7f7 ff8d 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 8016942:	2000      	movs	r0, #0
 8016944:	bd38      	pop	{r3, r4, r5, pc}
 8016946:	bf00      	nop
 8016948:	080168f1 	.word	0x080168f1

0801694c <uxr_init_output_reliable_stream>:
 801694c:	b410      	push	{r4}
 801694e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016952:	8103      	strh	r3, [r0, #8]
 8016954:	e9c0 1200 	strd	r1, r2, [r0]
 8016958:	f880 c00c 	strb.w	ip, [r0, #12]
 801695c:	b1d3      	cbz	r3, 8016994 <uxr_init_output_reliable_stream+0x48>
 801695e:	f8c1 c000 	str.w	ip, [r1]
 8016962:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016966:	f1bc 0f01 	cmp.w	ip, #1
 801696a:	d913      	bls.n	8016994 <uxr_init_output_reliable_stream+0x48>
 801696c:	2301      	movs	r3, #1
 801696e:	fbb3 f1fc 	udiv	r1, r3, ip
 8016972:	fb0c 3111 	mls	r1, ip, r1, r3
 8016976:	b289      	uxth	r1, r1
 8016978:	6842      	ldr	r2, [r0, #4]
 801697a:	6804      	ldr	r4, [r0, #0]
 801697c:	fbb2 f2fc 	udiv	r2, r2, ip
 8016980:	fb01 f202 	mul.w	r2, r1, r2
 8016984:	7b01      	ldrb	r1, [r0, #12]
 8016986:	50a1      	str	r1, [r4, r2]
 8016988:	3301      	adds	r3, #1
 801698a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801698e:	b29b      	uxth	r3, r3
 8016990:	459c      	cmp	ip, r3
 8016992:	d8ec      	bhi.n	801696e <uxr_init_output_reliable_stream+0x22>
 8016994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016998:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801699c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80169a0:	4905      	ldr	r1, [pc, #20]	@ (80169b8 <uxr_init_output_reliable_stream+0x6c>)
 80169a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169a6:	f8c0 100e 	str.w	r1, [r0, #14]
 80169aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169ae:	2300      	movs	r3, #0
 80169b0:	8242      	strh	r2, [r0, #18]
 80169b2:	8403      	strh	r3, [r0, #32]
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop
 80169b8:	ffff0000 	.word	0xffff0000

080169bc <uxr_reset_output_reliable_stream>:
 80169bc:	8901      	ldrh	r1, [r0, #8]
 80169be:	b1b1      	cbz	r1, 80169ee <uxr_reset_output_reliable_stream+0x32>
 80169c0:	f04f 0c00 	mov.w	ip, #0
 80169c4:	4663      	mov	r3, ip
 80169c6:	fbb3 f2f1 	udiv	r2, r3, r1
 80169ca:	fb01 3312 	mls	r3, r1, r2, r3
 80169ce:	b29b      	uxth	r3, r3
 80169d0:	6842      	ldr	r2, [r0, #4]
 80169d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80169d6:	6801      	ldr	r1, [r0, #0]
 80169d8:	fb02 f303 	mul.w	r3, r2, r3
 80169dc:	7b02      	ldrb	r2, [r0, #12]
 80169de:	50ca      	str	r2, [r1, r3]
 80169e0:	f10c 0c01 	add.w	ip, ip, #1
 80169e4:	8901      	ldrh	r1, [r0, #8]
 80169e6:	fa1f f38c 	uxth.w	r3, ip
 80169ea:	4299      	cmp	r1, r3
 80169ec:	d8eb      	bhi.n	80169c6 <uxr_reset_output_reliable_stream+0xa>
 80169ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169f2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80169f6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80169fa:	4904      	ldr	r1, [pc, #16]	@ (8016a0c <uxr_reset_output_reliable_stream+0x50>)
 80169fc:	f8c0 100e 	str.w	r1, [r0, #14]
 8016a00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a04:	2300      	movs	r3, #0
 8016a06:	8242      	strh	r2, [r0, #18]
 8016a08:	8403      	strh	r3, [r0, #32]
 8016a0a:	4770      	bx	lr
 8016a0c:	ffff0000 	.word	0xffff0000

08016a10 <uxr_prepare_reliable_buffer_to_write>:
 8016a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a14:	4604      	mov	r4, r0
 8016a16:	b091      	sub	sp, #68	@ 0x44
 8016a18:	8900      	ldrh	r0, [r0, #8]
 8016a1a:	89e6      	ldrh	r6, [r4, #14]
 8016a1c:	6823      	ldr	r3, [r4, #0]
 8016a1e:	9204      	str	r2, [sp, #16]
 8016a20:	fbb6 f2f0 	udiv	r2, r6, r0
 8016a24:	fb00 6212 	mls	r2, r0, r2, r6
 8016a28:	b292      	uxth	r2, r2
 8016a2a:	6865      	ldr	r5, [r4, #4]
 8016a2c:	fbb5 f5f0 	udiv	r5, r5, r0
 8016a30:	fb05 3202 	mla	r2, r5, r2, r3
 8016a34:	3204      	adds	r2, #4
 8016a36:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8016a3a:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016a3e:	9203      	str	r2, [sp, #12]
 8016a40:	468b      	mov	fp, r1
 8016a42:	1f2f      	subs	r7, r5, #4
 8016a44:	2800      	cmp	r0, #0
 8016a46:	f000 814c 	beq.w	8016ce2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8016a4a:	f04f 0c00 	mov.w	ip, #0
 8016a4e:	46e2      	mov	sl, ip
 8016a50:	4661      	mov	r1, ip
 8016a52:	fbb1 f2f0 	udiv	r2, r1, r0
 8016a56:	fb00 1212 	mls	r2, r0, r2, r1
 8016a5a:	b292      	uxth	r2, r2
 8016a5c:	fb05 f202 	mul.w	r2, r5, r2
 8016a60:	f10c 0c01 	add.w	ip, ip, #1
 8016a64:	589a      	ldr	r2, [r3, r2]
 8016a66:	454a      	cmp	r2, r9
 8016a68:	bf08      	it	eq
 8016a6a:	f10a 0a01 	addeq.w	sl, sl, #1
 8016a6e:	fa1f f18c 	uxth.w	r1, ip
 8016a72:	bf08      	it	eq
 8016a74:	fa1f fa8a 	uxtheq.w	sl, sl
 8016a78:	4281      	cmp	r1, r0
 8016a7a:	d3ea      	bcc.n	8016a52 <uxr_prepare_reliable_buffer_to_write+0x42>
 8016a7c:	4640      	mov	r0, r8
 8016a7e:	2104      	movs	r1, #4
 8016a80:	f8cd a014 	str.w	sl, [sp, #20]
 8016a84:	f7f7 ff1a 	bl	800e8bc <ucdr_alignment>
 8016a88:	4480      	add	r8, r0
 8016a8a:	eb08 020b 	add.w	r2, r8, fp
 8016a8e:	42ba      	cmp	r2, r7
 8016a90:	f240 80cd 	bls.w	8016c2e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016a94:	7b22      	ldrb	r2, [r4, #12]
 8016a96:	445a      	add	r2, fp
 8016a98:	42ba      	cmp	r2, r7
 8016a9a:	f240 80b5 	bls.w	8016c08 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016a9e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016aa2:	33fc      	adds	r3, #252	@ 0xfc
 8016aa4:	b2ba      	uxth	r2, r7
 8016aa6:	4413      	add	r3, r2
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	fb0a f903 	mul.w	r9, sl, r3
 8016aae:	45d9      	cmp	r9, fp
 8016ab0:	9305      	str	r3, [sp, #20]
 8016ab2:	9306      	str	r3, [sp, #24]
 8016ab4:	f0c0 80b7 	bcc.w	8016c26 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016ab8:	f108 0304 	add.w	r3, r8, #4
 8016abc:	42bb      	cmp	r3, r7
 8016abe:	f080 80db 	bcs.w	8016c78 <uxr_prepare_reliable_buffer_to_write+0x268>
 8016ac2:	f1a2 0904 	sub.w	r9, r2, #4
 8016ac6:	eba9 0908 	sub.w	r9, r9, r8
 8016aca:	9b05      	ldr	r3, [sp, #20]
 8016acc:	fa1f f989 	uxth.w	r9, r9
 8016ad0:	ebab 0b09 	sub.w	fp, fp, r9
 8016ad4:	fbbb f2f3 	udiv	r2, fp, r3
 8016ad8:	fb03 b312 	mls	r3, r3, r2, fp
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	f000 80c8 	beq.w	8016c72 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016ae2:	3201      	adds	r2, #1
 8016ae4:	b292      	uxth	r2, r2
 8016ae6:	9306      	str	r3, [sp, #24]
 8016ae8:	4552      	cmp	r2, sl
 8016aea:	f200 809c 	bhi.w	8016c26 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016aee:	f10d 0b20 	add.w	fp, sp, #32
 8016af2:	2a00      	cmp	r2, #0
 8016af4:	d042      	beq.n	8016b7c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8016af6:	f8cd 801c 	str.w	r8, [sp, #28]
 8016afa:	f04f 0a00 	mov.w	sl, #0
 8016afe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016b02:	9505      	str	r5, [sp, #20]
 8016b04:	f10d 0b20 	add.w	fp, sp, #32
 8016b08:	4615      	mov	r5, r2
 8016b0a:	e000      	b.n	8016b0e <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016b0c:	46c1      	mov	r9, r8
 8016b0e:	8920      	ldrh	r0, [r4, #8]
 8016b10:	fbb6 f2f0 	udiv	r2, r6, r0
 8016b14:	fb00 6112 	mls	r1, r0, r2, r6
 8016b18:	b28a      	uxth	r2, r1
 8016b1a:	6863      	ldr	r3, [r4, #4]
 8016b1c:	fbb3 f1f0 	udiv	r1, r3, r0
 8016b20:	6823      	ldr	r3, [r4, #0]
 8016b22:	fb02 f101 	mul.w	r1, r2, r1
 8016b26:	3104      	adds	r1, #4
 8016b28:	4419      	add	r1, r3
 8016b2a:	4658      	mov	r0, fp
 8016b2c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016b30:	9200      	str	r2, [sp, #0]
 8016b32:	2300      	movs	r3, #0
 8016b34:	463a      	mov	r2, r7
 8016b36:	f7f7 feab 	bl	800e890 <ucdr_init_buffer_origin_offset>
 8016b3a:	464a      	mov	r2, r9
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	210d      	movs	r1, #13
 8016b40:	4658      	mov	r0, fp
 8016b42:	f7fa f91b 	bl	8010d7c <uxr_buffer_submessage_header>
 8016b46:	8921      	ldrh	r1, [r4, #8]
 8016b48:	fbb6 f2f1 	udiv	r2, r6, r1
 8016b4c:	fb01 6212 	mls	r2, r1, r2, r6
 8016b50:	b292      	uxth	r2, r2
 8016b52:	6863      	ldr	r3, [r4, #4]
 8016b54:	fbb3 f3f1 	udiv	r3, r3, r1
 8016b58:	fb02 f303 	mul.w	r3, r2, r3
 8016b5c:	6822      	ldr	r2, [r4, #0]
 8016b5e:	4630      	mov	r0, r6
 8016b60:	50d7      	str	r7, [r2, r3]
 8016b62:	2101      	movs	r1, #1
 8016b64:	f000 f9c4 	bl	8016ef0 <uxr_seq_num_add>
 8016b68:	f10a 0a01 	add.w	sl, sl, #1
 8016b6c:	fa1f f38a 	uxth.w	r3, sl
 8016b70:	429d      	cmp	r5, r3
 8016b72:	4606      	mov	r6, r0
 8016b74:	d8ca      	bhi.n	8016b0c <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016b76:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016b7a:	9d05      	ldr	r5, [sp, #20]
 8016b7c:	8920      	ldrh	r0, [r4, #8]
 8016b7e:	fbb6 f3f0 	udiv	r3, r6, r0
 8016b82:	fb00 6313 	mls	r3, r0, r3, r6
 8016b86:	b299      	uxth	r1, r3
 8016b88:	6863      	ldr	r3, [r4, #4]
 8016b8a:	fbb3 f3f0 	udiv	r3, r3, r0
 8016b8e:	fb01 f303 	mul.w	r3, r1, r3
 8016b92:	6821      	ldr	r1, [r4, #0]
 8016b94:	3304      	adds	r3, #4
 8016b96:	4419      	add	r1, r3
 8016b98:	463a      	mov	r2, r7
 8016b9a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016b9e:	9000      	str	r0, [sp, #0]
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	4658      	mov	r0, fp
 8016ba4:	f7f7 fe74 	bl	800e890 <ucdr_init_buffer_origin_offset>
 8016ba8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016bac:	4658      	mov	r0, fp
 8016bae:	fa1f f289 	uxth.w	r2, r9
 8016bb2:	2302      	movs	r3, #2
 8016bb4:	210d      	movs	r1, #13
 8016bb6:	f7fa f8e1 	bl	8010d7c <uxr_buffer_submessage_header>
 8016bba:	9b03      	ldr	r3, [sp, #12]
 8016bbc:	8927      	ldrh	r7, [r4, #8]
 8016bbe:	7b20      	ldrb	r0, [r4, #12]
 8016bc0:	f108 0104 	add.w	r1, r8, #4
 8016bc4:	440b      	add	r3, r1
 8016bc6:	4619      	mov	r1, r3
 8016bc8:	fbb6 f3f7 	udiv	r3, r6, r7
 8016bcc:	fb07 6313 	mls	r3, r7, r3, r6
 8016bd0:	f1a5 0208 	sub.w	r2, r5, #8
 8016bd4:	b29d      	uxth	r5, r3
 8016bd6:	3004      	adds	r0, #4
 8016bd8:	6863      	ldr	r3, [r4, #4]
 8016bda:	fbb3 f3f7 	udiv	r3, r3, r7
 8016bde:	fb05 f303 	mul.w	r3, r5, r3
 8016be2:	6825      	ldr	r5, [r4, #0]
 8016be4:	4448      	add	r0, r9
 8016be6:	50e8      	str	r0, [r5, r3]
 8016be8:	9d04      	ldr	r5, [sp, #16]
 8016bea:	eba2 0208 	sub.w	r2, r2, r8
 8016bee:	4628      	mov	r0, r5
 8016bf0:	f7f7 fe60 	bl	800e8b4 <ucdr_init_buffer>
 8016bf4:	4628      	mov	r0, r5
 8016bf6:	493c      	ldr	r1, [pc, #240]	@ (8016ce8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016bf8:	4622      	mov	r2, r4
 8016bfa:	f7f7 fe2f 	bl	800e85c <ucdr_set_on_full_buffer_callback>
 8016bfe:	2001      	movs	r0, #1
 8016c00:	81e6      	strh	r6, [r4, #14]
 8016c02:	b011      	add	sp, #68	@ 0x44
 8016c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c08:	2101      	movs	r1, #1
 8016c0a:	89e0      	ldrh	r0, [r4, #14]
 8016c0c:	f000 f970 	bl	8016ef0 <uxr_seq_num_add>
 8016c10:	8921      	ldrh	r1, [r4, #8]
 8016c12:	4605      	mov	r5, r0
 8016c14:	8a60      	ldrh	r0, [r4, #18]
 8016c16:	f000 f96b 	bl	8016ef0 <uxr_seq_num_add>
 8016c1a:	4601      	mov	r1, r0
 8016c1c:	4628      	mov	r0, r5
 8016c1e:	f000 f96f 	bl	8016f00 <uxr_seq_num_cmp>
 8016c22:	2800      	cmp	r0, #0
 8016c24:	dd42      	ble.n	8016cac <uxr_prepare_reliable_buffer_to_write+0x29c>
 8016c26:	2000      	movs	r0, #0
 8016c28:	b011      	add	sp, #68	@ 0x44
 8016c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c2e:	8921      	ldrh	r1, [r4, #8]
 8016c30:	8a60      	ldrh	r0, [r4, #18]
 8016c32:	9205      	str	r2, [sp, #20]
 8016c34:	f000 f95c 	bl	8016ef0 <uxr_seq_num_add>
 8016c38:	4601      	mov	r1, r0
 8016c3a:	4630      	mov	r0, r6
 8016c3c:	f000 f960 	bl	8016f00 <uxr_seq_num_cmp>
 8016c40:	2800      	cmp	r0, #0
 8016c42:	9a05      	ldr	r2, [sp, #20]
 8016c44:	dcef      	bgt.n	8016c26 <uxr_prepare_reliable_buffer_to_write+0x216>
 8016c46:	8927      	ldrh	r7, [r4, #8]
 8016c48:	fbb6 f3f7 	udiv	r3, r6, r7
 8016c4c:	fb07 6313 	mls	r3, r7, r3, r6
 8016c50:	b29d      	uxth	r5, r3
 8016c52:	6863      	ldr	r3, [r4, #4]
 8016c54:	6824      	ldr	r4, [r4, #0]
 8016c56:	fbb3 f3f7 	udiv	r3, r3, r7
 8016c5a:	fb05 f303 	mul.w	r3, r5, r3
 8016c5e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016c62:	50e2      	str	r2, [r4, r3]
 8016c64:	2300      	movs	r3, #0
 8016c66:	f8cd 8000 	str.w	r8, [sp]
 8016c6a:	f7f7 fe11 	bl	800e890 <ucdr_init_buffer_origin_offset>
 8016c6e:	2001      	movs	r0, #1
 8016c70:	e7da      	b.n	8016c28 <uxr_prepare_reliable_buffer_to_write+0x218>
 8016c72:	b293      	uxth	r3, r2
 8016c74:	461a      	mov	r2, r3
 8016c76:	e737      	b.n	8016ae8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016c78:	4630      	mov	r0, r6
 8016c7a:	2101      	movs	r1, #1
 8016c7c:	9207      	str	r2, [sp, #28]
 8016c7e:	f000 f937 	bl	8016ef0 <uxr_seq_num_add>
 8016c82:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016c86:	fbb0 f1fc 	udiv	r1, r0, ip
 8016c8a:	fb0c 0111 	mls	r1, ip, r1, r0
 8016c8e:	4606      	mov	r6, r0
 8016c90:	b288      	uxth	r0, r1
 8016c92:	6863      	ldr	r3, [r4, #4]
 8016c94:	fbb3 f1fc 	udiv	r1, r3, ip
 8016c98:	6823      	ldr	r3, [r4, #0]
 8016c9a:	9a07      	ldr	r2, [sp, #28]
 8016c9c:	fb00 f101 	mul.w	r1, r0, r1
 8016ca0:	3104      	adds	r1, #4
 8016ca2:	440b      	add	r3, r1
 8016ca4:	9303      	str	r3, [sp, #12]
 8016ca6:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016caa:	e70a      	b.n	8016ac2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016cac:	8921      	ldrh	r1, [r4, #8]
 8016cae:	fbb5 f3f1 	udiv	r3, r5, r1
 8016cb2:	fb01 5313 	mls	r3, r1, r3, r5
 8016cb6:	b29a      	uxth	r2, r3
 8016cb8:	6863      	ldr	r3, [r4, #4]
 8016cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8016cbe:	6821      	ldr	r1, [r4, #0]
 8016cc0:	9804      	ldr	r0, [sp, #16]
 8016cc2:	fb02 f303 	mul.w	r3, r2, r3
 8016cc6:	3304      	adds	r3, #4
 8016cc8:	7b22      	ldrb	r2, [r4, #12]
 8016cca:	4419      	add	r1, r3
 8016ccc:	445a      	add	r2, fp
 8016cce:	f841 2c04 	str.w	r2, [r1, #-4]
 8016cd2:	7b23      	ldrb	r3, [r4, #12]
 8016cd4:	9300      	str	r3, [sp, #0]
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	f7f7 fdda 	bl	800e890 <ucdr_init_buffer_origin_offset>
 8016cdc:	81e5      	strh	r5, [r4, #14]
 8016cde:	2001      	movs	r0, #1
 8016ce0:	e7a2      	b.n	8016c28 <uxr_prepare_reliable_buffer_to_write+0x218>
 8016ce2:	4682      	mov	sl, r0
 8016ce4:	e6ca      	b.n	8016a7c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016ce6:	bf00      	nop
 8016ce8:	080168f1 	.word	0x080168f1

08016cec <uxr_prepare_next_reliable_buffer_to_send>:
 8016cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cee:	4604      	mov	r4, r0
 8016cf0:	460f      	mov	r7, r1
 8016cf2:	8a00      	ldrh	r0, [r0, #16]
 8016cf4:	2101      	movs	r1, #1
 8016cf6:	4616      	mov	r6, r2
 8016cf8:	461d      	mov	r5, r3
 8016cfa:	f000 f8f9 	bl	8016ef0 <uxr_seq_num_add>
 8016cfe:	8028      	strh	r0, [r5, #0]
 8016d00:	8922      	ldrh	r2, [r4, #8]
 8016d02:	fbb0 f3f2 	udiv	r3, r0, r2
 8016d06:	fb02 0c13 	mls	ip, r2, r3, r0
 8016d0a:	fa1f fc8c 	uxth.w	ip, ip
 8016d0e:	6863      	ldr	r3, [r4, #4]
 8016d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d14:	fb0c fc03 	mul.w	ip, ip, r3
 8016d18:	6823      	ldr	r3, [r4, #0]
 8016d1a:	89e1      	ldrh	r1, [r4, #14]
 8016d1c:	f10c 0c04 	add.w	ip, ip, #4
 8016d20:	4463      	add	r3, ip
 8016d22:	603b      	str	r3, [r7, #0]
 8016d24:	6823      	ldr	r3, [r4, #0]
 8016d26:	449c      	add	ip, r3
 8016d28:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016d2c:	6033      	str	r3, [r6, #0]
 8016d2e:	f000 f8e7 	bl	8016f00 <uxr_seq_num_cmp>
 8016d32:	2800      	cmp	r0, #0
 8016d34:	dd01      	ble.n	8016d3a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016d36:	2000      	movs	r0, #0
 8016d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d3a:	7b23      	ldrb	r3, [r4, #12]
 8016d3c:	6832      	ldr	r2, [r6, #0]
 8016d3e:	429a      	cmp	r2, r3
 8016d40:	d9f9      	bls.n	8016d36 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d42:	8a61      	ldrh	r1, [r4, #18]
 8016d44:	8a20      	ldrh	r0, [r4, #16]
 8016d46:	f000 f8d7 	bl	8016ef8 <uxr_seq_num_sub>
 8016d4a:	8923      	ldrh	r3, [r4, #8]
 8016d4c:	4283      	cmp	r3, r0
 8016d4e:	d0f2      	beq.n	8016d36 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d50:	8828      	ldrh	r0, [r5, #0]
 8016d52:	89e3      	ldrh	r3, [r4, #14]
 8016d54:	8220      	strh	r0, [r4, #16]
 8016d56:	4298      	cmp	r0, r3
 8016d58:	d001      	beq.n	8016d5e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016d5a:	2001      	movs	r0, #1
 8016d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d5e:	2101      	movs	r1, #1
 8016d60:	f000 f8c6 	bl	8016ef0 <uxr_seq_num_add>
 8016d64:	81e0      	strh	r0, [r4, #14]
 8016d66:	2001      	movs	r0, #1
 8016d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d6a:	bf00      	nop

08016d6c <uxr_update_output_stream_heartbeat_timestamp>:
 8016d6c:	b570      	push	{r4, r5, r6, lr}
 8016d6e:	8a01      	ldrh	r1, [r0, #16]
 8016d70:	4604      	mov	r4, r0
 8016d72:	8a40      	ldrh	r0, [r0, #18]
 8016d74:	4615      	mov	r5, r2
 8016d76:	461e      	mov	r6, r3
 8016d78:	f000 f8c2 	bl	8016f00 <uxr_seq_num_cmp>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	db07      	blt.n	8016d90 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016d88:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	bd70      	pop	{r4, r5, r6, pc}
 8016d90:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016d94:	b940      	cbnz	r0, 8016da8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016d96:	2301      	movs	r3, #1
 8016d98:	f884 3020 	strb.w	r3, [r4, #32]
 8016d9c:	3564      	adds	r5, #100	@ 0x64
 8016d9e:	f146 0600 	adc.w	r6, r6, #0
 8016da2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016da6:	bd70      	pop	{r4, r5, r6, pc}
 8016da8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016dac:	4295      	cmp	r5, r2
 8016dae:	eb76 0303 	sbcs.w	r3, r6, r3
 8016db2:	bfa5      	ittet	ge
 8016db4:	3001      	addge	r0, #1
 8016db6:	f884 0020 	strbge.w	r0, [r4, #32]
 8016dba:	2000      	movlt	r0, #0
 8016dbc:	2001      	movge	r0, #1
 8016dbe:	e7ed      	b.n	8016d9c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016dc0 <uxr_begin_output_nack_buffer_it>:
 8016dc0:	8a40      	ldrh	r0, [r0, #18]
 8016dc2:	4770      	bx	lr

08016dc4 <uxr_next_reliable_nack_buffer_to_send>:
 8016dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dc8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016dcc:	b082      	sub	sp, #8
 8016dce:	f1b8 0f00 	cmp.w	r8, #0
 8016dd2:	d011      	beq.n	8016df8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016dd4:	4604      	mov	r4, r0
 8016dd6:	8818      	ldrh	r0, [r3, #0]
 8016dd8:	460e      	mov	r6, r1
 8016dda:	4617      	mov	r7, r2
 8016ddc:	461d      	mov	r5, r3
 8016dde:	2101      	movs	r1, #1
 8016de0:	f000 f886 	bl	8016ef0 <uxr_seq_num_add>
 8016de4:	8028      	strh	r0, [r5, #0]
 8016de6:	8a21      	ldrh	r1, [r4, #16]
 8016de8:	f000 f88a 	bl	8016f00 <uxr_seq_num_cmp>
 8016dec:	2800      	cmp	r0, #0
 8016dee:	dd07      	ble.n	8016e00 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016df0:	f04f 0800 	mov.w	r8, #0
 8016df4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016df8:	4640      	mov	r0, r8
 8016dfa:	b002      	add	sp, #8
 8016dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e00:	8921      	ldrh	r1, [r4, #8]
 8016e02:	8828      	ldrh	r0, [r5, #0]
 8016e04:	6823      	ldr	r3, [r4, #0]
 8016e06:	fbb0 f2f1 	udiv	r2, r0, r1
 8016e0a:	fb01 0c12 	mls	ip, r1, r2, r0
 8016e0e:	fa1f f28c 	uxth.w	r2, ip
 8016e12:	9301      	str	r3, [sp, #4]
 8016e14:	6863      	ldr	r3, [r4, #4]
 8016e16:	fbb3 fcf1 	udiv	ip, r3, r1
 8016e1a:	9b01      	ldr	r3, [sp, #4]
 8016e1c:	fb02 fc0c 	mul.w	ip, r2, ip
 8016e20:	f10c 0c04 	add.w	ip, ip, #4
 8016e24:	4463      	add	r3, ip
 8016e26:	6033      	str	r3, [r6, #0]
 8016e28:	6823      	ldr	r3, [r4, #0]
 8016e2a:	4463      	add	r3, ip
 8016e2c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016e30:	603b      	str	r3, [r7, #0]
 8016e32:	7b22      	ldrb	r2, [r4, #12]
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d0d2      	beq.n	8016dde <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016e38:	4640      	mov	r0, r8
 8016e3a:	b002      	add	sp, #8
 8016e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e40 <uxr_process_acknack>:
 8016e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e42:	4604      	mov	r4, r0
 8016e44:	460e      	mov	r6, r1
 8016e46:	4610      	mov	r0, r2
 8016e48:	2101      	movs	r1, #1
 8016e4a:	f000 f855 	bl	8016ef8 <uxr_seq_num_sub>
 8016e4e:	8a61      	ldrh	r1, [r4, #18]
 8016e50:	f000 f852 	bl	8016ef8 <uxr_seq_num_sub>
 8016e54:	b1c0      	cbz	r0, 8016e88 <uxr_process_acknack+0x48>
 8016e56:	4605      	mov	r5, r0
 8016e58:	2700      	movs	r7, #0
 8016e5a:	2101      	movs	r1, #1
 8016e5c:	8a60      	ldrh	r0, [r4, #18]
 8016e5e:	f000 f847 	bl	8016ef0 <uxr_seq_num_add>
 8016e62:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e66:	fbb0 f1fc 	udiv	r1, r0, ip
 8016e6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e6e:	fb0c 0111 	mls	r1, ip, r1, r0
 8016e72:	b289      	uxth	r1, r1
 8016e74:	3701      	adds	r7, #1
 8016e76:	fbb3 f3fc 	udiv	r3, r3, ip
 8016e7a:	fb01 f303 	mul.w	r3, r1, r3
 8016e7e:	42bd      	cmp	r5, r7
 8016e80:	7b21      	ldrb	r1, [r4, #12]
 8016e82:	8260      	strh	r0, [r4, #18]
 8016e84:	50d1      	str	r1, [r2, r3]
 8016e86:	d1e8      	bne.n	8016e5a <uxr_process_acknack+0x1a>
 8016e88:	3e00      	subs	r6, #0
 8016e8a:	f04f 0300 	mov.w	r3, #0
 8016e8e:	bf18      	it	ne
 8016e90:	2601      	movne	r6, #1
 8016e92:	f884 3020 	strb.w	r3, [r4, #32]
 8016e96:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e9c <uxr_is_output_up_to_date>:
 8016e9c:	8a01      	ldrh	r1, [r0, #16]
 8016e9e:	8a40      	ldrh	r0, [r0, #18]
 8016ea0:	b508      	push	{r3, lr}
 8016ea2:	f000 f82d 	bl	8016f00 <uxr_seq_num_cmp>
 8016ea6:	fab0 f080 	clz	r0, r0
 8016eaa:	0940      	lsrs	r0, r0, #5
 8016eac:	bd08      	pop	{r3, pc}
 8016eae:	bf00      	nop

08016eb0 <get_available_free_slots>:
 8016eb0:	8902      	ldrh	r2, [r0, #8]
 8016eb2:	b1da      	cbz	r2, 8016eec <get_available_free_slots+0x3c>
 8016eb4:	b530      	push	{r4, r5, lr}
 8016eb6:	2100      	movs	r1, #0
 8016eb8:	6843      	ldr	r3, [r0, #4]
 8016eba:	6805      	ldr	r5, [r0, #0]
 8016ebc:	7b04      	ldrb	r4, [r0, #12]
 8016ebe:	fbb3 fef2 	udiv	lr, r3, r2
 8016ec2:	4608      	mov	r0, r1
 8016ec4:	460b      	mov	r3, r1
 8016ec6:	fbb3 fcf2 	udiv	ip, r3, r2
 8016eca:	fb02 331c 	mls	r3, r2, ip, r3
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	fb0e f303 	mul.w	r3, lr, r3
 8016ed4:	3101      	adds	r1, #1
 8016ed6:	f855 c003 	ldr.w	ip, [r5, r3]
 8016eda:	4564      	cmp	r4, ip
 8016edc:	bf08      	it	eq
 8016ede:	3001      	addeq	r0, #1
 8016ee0:	b28b      	uxth	r3, r1
 8016ee2:	bf08      	it	eq
 8016ee4:	b280      	uxtheq	r0, r0
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d3ed      	bcc.n	8016ec6 <get_available_free_slots+0x16>
 8016eea:	bd30      	pop	{r4, r5, pc}
 8016eec:	4610      	mov	r0, r2
 8016eee:	4770      	bx	lr

08016ef0 <uxr_seq_num_add>:
 8016ef0:	4408      	add	r0, r1
 8016ef2:	b280      	uxth	r0, r0
 8016ef4:	4770      	bx	lr
 8016ef6:	bf00      	nop

08016ef8 <uxr_seq_num_sub>:
 8016ef8:	1a40      	subs	r0, r0, r1
 8016efa:	b280      	uxth	r0, r0
 8016efc:	4770      	bx	lr
 8016efe:	bf00      	nop

08016f00 <uxr_seq_num_cmp>:
 8016f00:	4288      	cmp	r0, r1
 8016f02:	d011      	beq.n	8016f28 <uxr_seq_num_cmp+0x28>
 8016f04:	d309      	bcc.n	8016f1a <uxr_seq_num_cmp+0x1a>
 8016f06:	4288      	cmp	r0, r1
 8016f08:	d910      	bls.n	8016f2c <uxr_seq_num_cmp+0x2c>
 8016f0a:	1a40      	subs	r0, r0, r1
 8016f0c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016f10:	bfd4      	ite	le
 8016f12:	2001      	movle	r0, #1
 8016f14:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016f18:	4770      	bx	lr
 8016f1a:	1a0b      	subs	r3, r1, r0
 8016f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016f20:	daf1      	bge.n	8016f06 <uxr_seq_num_cmp+0x6>
 8016f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f26:	4770      	bx	lr
 8016f28:	2000      	movs	r0, #0
 8016f2a:	4770      	bx	lr
 8016f2c:	2001      	movs	r0, #1
 8016f2e:	4770      	bx	lr

08016f30 <rcl_get_default_domain_id>:
 8016f30:	b530      	push	{r4, r5, lr}
 8016f32:	b083      	sub	sp, #12
 8016f34:	2300      	movs	r3, #0
 8016f36:	9300      	str	r3, [sp, #0]
 8016f38:	b1d0      	cbz	r0, 8016f70 <rcl_get_default_domain_id+0x40>
 8016f3a:	4604      	mov	r4, r0
 8016f3c:	4669      	mov	r1, sp
 8016f3e:	4815      	ldr	r0, [pc, #84]	@ (8016f94 <rcl_get_default_domain_id+0x64>)
 8016f40:	f7fd ff26 	bl	8014d90 <rcutils_get_env>
 8016f44:	4602      	mov	r2, r0
 8016f46:	b110      	cbz	r0, 8016f4e <rcl_get_default_domain_id+0x1e>
 8016f48:	2001      	movs	r0, #1
 8016f4a:	b003      	add	sp, #12
 8016f4c:	bd30      	pop	{r4, r5, pc}
 8016f4e:	9b00      	ldr	r3, [sp, #0]
 8016f50:	b18b      	cbz	r3, 8016f76 <rcl_get_default_domain_id+0x46>
 8016f52:	7818      	ldrb	r0, [r3, #0]
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d0f8      	beq.n	8016f4a <rcl_get_default_domain_id+0x1a>
 8016f58:	a901      	add	r1, sp, #4
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	9201      	str	r2, [sp, #4]
 8016f5e:	f000 fdc9 	bl	8017af4 <strtoul>
 8016f62:	4605      	mov	r5, r0
 8016f64:	b150      	cbz	r0, 8016f7c <rcl_get_default_domain_id+0x4c>
 8016f66:	1c43      	adds	r3, r0, #1
 8016f68:	d00d      	beq.n	8016f86 <rcl_get_default_domain_id+0x56>
 8016f6a:	6025      	str	r5, [r4, #0]
 8016f6c:	2000      	movs	r0, #0
 8016f6e:	e7ec      	b.n	8016f4a <rcl_get_default_domain_id+0x1a>
 8016f70:	200b      	movs	r0, #11
 8016f72:	b003      	add	sp, #12
 8016f74:	bd30      	pop	{r4, r5, pc}
 8016f76:	4618      	mov	r0, r3
 8016f78:	b003      	add	sp, #12
 8016f7a:	bd30      	pop	{r4, r5, pc}
 8016f7c:	9b01      	ldr	r3, [sp, #4]
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d0f2      	beq.n	8016f6a <rcl_get_default_domain_id+0x3a>
 8016f84:	e7e0      	b.n	8016f48 <rcl_get_default_domain_id+0x18>
 8016f86:	f001 f801 	bl	8017f8c <__errno>
 8016f8a:	6803      	ldr	r3, [r0, #0]
 8016f8c:	2b22      	cmp	r3, #34	@ 0x22
 8016f8e:	d1ec      	bne.n	8016f6a <rcl_get_default_domain_id+0x3a>
 8016f90:	e7da      	b.n	8016f48 <rcl_get_default_domain_id+0x18>
 8016f92:	bf00      	nop
 8016f94:	08019b90 	.word	0x08019b90

08016f98 <rcl_expand_topic_name>:
 8016f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f9c:	b08b      	sub	sp, #44	@ 0x2c
 8016f9e:	9306      	str	r3, [sp, #24]
 8016fa0:	2800      	cmp	r0, #0
 8016fa2:	f000 80ad 	beq.w	8017100 <rcl_expand_topic_name+0x168>
 8016fa6:	460e      	mov	r6, r1
 8016fa8:	2900      	cmp	r1, #0
 8016faa:	f000 80a9 	beq.w	8017100 <rcl_expand_topic_name+0x168>
 8016fae:	4617      	mov	r7, r2
 8016fb0:	2a00      	cmp	r2, #0
 8016fb2:	f000 80a5 	beq.w	8017100 <rcl_expand_topic_name+0x168>
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	f000 80a2 	beq.w	8017100 <rcl_expand_topic_name+0x168>
 8016fbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	f000 809e 	beq.w	8017100 <rcl_expand_topic_name+0x168>
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	a909      	add	r1, sp, #36	@ 0x24
 8016fc8:	4680      	mov	r8, r0
 8016fca:	f000 fa57 	bl	801747c <rcl_validate_topic_name>
 8016fce:	4604      	mov	r4, r0
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	f040 8096 	bne.w	8017102 <rcl_expand_topic_name+0x16a>
 8016fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	f040 809a 	bne.w	8017112 <rcl_expand_topic_name+0x17a>
 8016fde:	4602      	mov	r2, r0
 8016fe0:	a909      	add	r1, sp, #36	@ 0x24
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	f7fe fafe 	bl	80155e4 <rmw_validate_node_name>
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	f040 808e 	bne.w	801710a <rcl_expand_topic_name+0x172>
 8016fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ff0:	2a00      	cmp	r2, #0
 8016ff2:	f040 8093 	bne.w	801711c <rcl_expand_topic_name+0x184>
 8016ff6:	a909      	add	r1, sp, #36	@ 0x24
 8016ff8:	4638      	mov	r0, r7
 8016ffa:	f7fe fad5 	bl	80155a8 <rmw_validate_namespace>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	f040 8083 	bne.w	801710a <rcl_expand_topic_name+0x172>
 8017004:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017006:	2c00      	cmp	r4, #0
 8017008:	f040 80ed 	bne.w	80171e6 <rcl_expand_topic_name+0x24e>
 801700c:	217b      	movs	r1, #123	@ 0x7b
 801700e:	4640      	mov	r0, r8
 8017010:	f000 ff30 	bl	8017e74 <strchr>
 8017014:	f898 3000 	ldrb.w	r3, [r8]
 8017018:	2b2f      	cmp	r3, #47	@ 0x2f
 801701a:	4605      	mov	r5, r0
 801701c:	f000 809e 	beq.w	801715c <rcl_expand_topic_name+0x1c4>
 8017020:	2b7e      	cmp	r3, #126	@ 0x7e
 8017022:	f040 80a2 	bne.w	801716a <rcl_expand_topic_name+0x1d2>
 8017026:	4638      	mov	r0, r7
 8017028:	f7e9 f904 	bl	8000234 <strlen>
 801702c:	4a82      	ldr	r2, [pc, #520]	@ (8017238 <rcl_expand_topic_name+0x2a0>)
 801702e:	4b83      	ldr	r3, [pc, #524]	@ (801723c <rcl_expand_topic_name+0x2a4>)
 8017030:	2801      	cmp	r0, #1
 8017032:	bf18      	it	ne
 8017034:	4613      	movne	r3, r2
 8017036:	9302      	str	r3, [sp, #8]
 8017038:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017040:	f108 0301 	add.w	r3, r8, #1
 8017044:	9305      	str	r3, [sp, #20]
 8017046:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801704a:	9301      	str	r3, [sp, #4]
 801704c:	ab14      	add	r3, sp, #80	@ 0x50
 801704e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017050:	f7fd fec6 	bl	8014de0 <rcutils_format_string_limit>
 8017054:	4682      	mov	sl, r0
 8017056:	2800      	cmp	r0, #0
 8017058:	f000 80c7 	beq.w	80171ea <rcl_expand_topic_name+0x252>
 801705c:	2d00      	cmp	r5, #0
 801705e:	f000 80a2 	beq.w	80171a6 <rcl_expand_topic_name+0x20e>
 8017062:	217b      	movs	r1, #123	@ 0x7b
 8017064:	f000 ff06 	bl	8017e74 <strchr>
 8017068:	46d1      	mov	r9, sl
 801706a:	4605      	mov	r5, r0
 801706c:	9407      	str	r4, [sp, #28]
 801706e:	46d3      	mov	fp, sl
 8017070:	464c      	mov	r4, r9
 8017072:	2d00      	cmp	r5, #0
 8017074:	f000 80be 	beq.w	80171f4 <rcl_expand_topic_name+0x25c>
 8017078:	217d      	movs	r1, #125	@ 0x7d
 801707a:	4620      	mov	r0, r4
 801707c:	f000 fefa 	bl	8017e74 <strchr>
 8017080:	eba0 0905 	sub.w	r9, r0, r5
 8017084:	f109 0a01 	add.w	sl, r9, #1
 8017088:	486d      	ldr	r0, [pc, #436]	@ (8017240 <rcl_expand_topic_name+0x2a8>)
 801708a:	4652      	mov	r2, sl
 801708c:	4629      	mov	r1, r5
 801708e:	f000 fefe 	bl	8017e8e <strncmp>
 8017092:	2800      	cmp	r0, #0
 8017094:	d067      	beq.n	8017166 <rcl_expand_topic_name+0x1ce>
 8017096:	486b      	ldr	r0, [pc, #428]	@ (8017244 <rcl_expand_topic_name+0x2ac>)
 8017098:	4652      	mov	r2, sl
 801709a:	4629      	mov	r1, r5
 801709c:	f000 fef7 	bl	8017e8e <strncmp>
 80170a0:	b130      	cbz	r0, 80170b0 <rcl_expand_topic_name+0x118>
 80170a2:	4869      	ldr	r0, [pc, #420]	@ (8017248 <rcl_expand_topic_name+0x2b0>)
 80170a4:	4652      	mov	r2, sl
 80170a6:	4629      	mov	r1, r5
 80170a8:	f000 fef1 	bl	8017e8e <strncmp>
 80170ac:	2800      	cmp	r0, #0
 80170ae:	d137      	bne.n	8017120 <rcl_expand_topic_name+0x188>
 80170b0:	46b9      	mov	r9, r7
 80170b2:	ab16      	add	r3, sp, #88	@ 0x58
 80170b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80170b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80170bc:	ab14      	add	r3, sp, #80	@ 0x50
 80170be:	4628      	mov	r0, r5
 80170c0:	cb0c      	ldmia	r3, {r2, r3}
 80170c2:	4651      	mov	r1, sl
 80170c4:	f7fd ffc8 	bl	8015058 <rcutils_strndup>
 80170c8:	4605      	mov	r5, r0
 80170ca:	2800      	cmp	r0, #0
 80170cc:	f000 809c 	beq.w	8017208 <rcl_expand_topic_name+0x270>
 80170d0:	464a      	mov	r2, r9
 80170d2:	4620      	mov	r0, r4
 80170d4:	ab14      	add	r3, sp, #80	@ 0x50
 80170d6:	4629      	mov	r1, r5
 80170d8:	f7fd febc 	bl	8014e54 <rcutils_repl_str>
 80170dc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80170de:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80170e0:	4604      	mov	r4, r0
 80170e2:	4628      	mov	r0, r5
 80170e4:	4798      	blx	r3
 80170e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80170e8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80170ea:	4658      	mov	r0, fp
 80170ec:	4798      	blx	r3
 80170ee:	2c00      	cmp	r4, #0
 80170f0:	d07b      	beq.n	80171ea <rcl_expand_topic_name+0x252>
 80170f2:	217b      	movs	r1, #123	@ 0x7b
 80170f4:	4620      	mov	r0, r4
 80170f6:	f000 febd 	bl	8017e74 <strchr>
 80170fa:	46a3      	mov	fp, r4
 80170fc:	4605      	mov	r5, r0
 80170fe:	e7b8      	b.n	8017072 <rcl_expand_topic_name+0xda>
 8017100:	240b      	movs	r4, #11
 8017102:	4620      	mov	r0, r4
 8017104:	b00b      	add	sp, #44	@ 0x2c
 8017106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801710a:	f7fb f86f 	bl	80121ec <rcl_convert_rmw_ret_to_rcl_ret>
 801710e:	4604      	mov	r4, r0
 8017110:	e7f7      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 8017112:	2467      	movs	r4, #103	@ 0x67
 8017114:	4620      	mov	r0, r4
 8017116:	b00b      	add	sp, #44	@ 0x2c
 8017118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801711c:	24c9      	movs	r4, #201	@ 0xc9
 801711e:	e7f0      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 8017120:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8017124:	9806      	ldr	r0, [sp, #24]
 8017126:	1c69      	adds	r1, r5, #1
 8017128:	f7fe f8b0 	bl	801528c <rcutils_string_map_getn>
 801712c:	4681      	mov	r9, r0
 801712e:	2800      	cmp	r0, #0
 8017130:	d1bf      	bne.n	80170b2 <rcl_expand_topic_name+0x11a>
 8017132:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017134:	aa16      	add	r2, sp, #88	@ 0x58
 8017136:	6018      	str	r0, [r3, #0]
 8017138:	ca07      	ldmia	r2, {r0, r1, r2}
 801713a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801713e:	ab14      	add	r3, sp, #80	@ 0x50
 8017140:	cb0c      	ldmia	r3, {r2, r3}
 8017142:	4651      	mov	r1, sl
 8017144:	4628      	mov	r0, r5
 8017146:	f7fd ff87 	bl	8015058 <rcutils_strndup>
 801714a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801714c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801714e:	4798      	blx	r3
 8017150:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017152:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017154:	4658      	mov	r0, fp
 8017156:	2469      	movs	r4, #105	@ 0x69
 8017158:	4798      	blx	r3
 801715a:	e7d2      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 801715c:	2800      	cmp	r0, #0
 801715e:	d05b      	beq.n	8017218 <rcl_expand_topic_name+0x280>
 8017160:	46c1      	mov	r9, r8
 8017162:	46a2      	mov	sl, r4
 8017164:	e782      	b.n	801706c <rcl_expand_topic_name+0xd4>
 8017166:	46b1      	mov	r9, r6
 8017168:	e7a3      	b.n	80170b2 <rcl_expand_topic_name+0x11a>
 801716a:	2800      	cmp	r0, #0
 801716c:	d1f8      	bne.n	8017160 <rcl_expand_topic_name+0x1c8>
 801716e:	4638      	mov	r0, r7
 8017170:	f7e9 f860 	bl	8000234 <strlen>
 8017174:	4a35      	ldr	r2, [pc, #212]	@ (801724c <rcl_expand_topic_name+0x2b4>)
 8017176:	4b36      	ldr	r3, [pc, #216]	@ (8017250 <rcl_expand_topic_name+0x2b8>)
 8017178:	f8cd 8010 	str.w	r8, [sp, #16]
 801717c:	2801      	cmp	r0, #1
 801717e:	bf18      	it	ne
 8017180:	4613      	movne	r3, r2
 8017182:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017186:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801718a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801718c:	9703      	str	r7, [sp, #12]
 801718e:	9200      	str	r2, [sp, #0]
 8017190:	ab14      	add	r3, sp, #80	@ 0x50
 8017192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017194:	f7fd fe24 	bl	8014de0 <rcutils_format_string_limit>
 8017198:	4682      	mov	sl, r0
 801719a:	4653      	mov	r3, sl
 801719c:	b32b      	cbz	r3, 80171ea <rcl_expand_topic_name+0x252>
 801719e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171a0:	f8c3 a000 	str.w	sl, [r3]
 80171a4:	e7ad      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 80171a6:	f89a 3000 	ldrb.w	r3, [sl]
 80171aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80171ac:	d0f7      	beq.n	801719e <rcl_expand_topic_name+0x206>
 80171ae:	4638      	mov	r0, r7
 80171b0:	f7e9 f840 	bl	8000234 <strlen>
 80171b4:	4a25      	ldr	r2, [pc, #148]	@ (801724c <rcl_expand_topic_name+0x2b4>)
 80171b6:	4b26      	ldr	r3, [pc, #152]	@ (8017250 <rcl_expand_topic_name+0x2b8>)
 80171b8:	f8cd a010 	str.w	sl, [sp, #16]
 80171bc:	2801      	cmp	r0, #1
 80171be:	bf18      	it	ne
 80171c0:	4613      	movne	r3, r2
 80171c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80171c6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80171ca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80171cc:	9703      	str	r7, [sp, #12]
 80171ce:	9200      	str	r2, [sp, #0]
 80171d0:	ab14      	add	r3, sp, #80	@ 0x50
 80171d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80171d4:	f7fd fe04 	bl	8014de0 <rcutils_format_string_limit>
 80171d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80171da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80171dc:	4605      	mov	r5, r0
 80171de:	4650      	mov	r0, sl
 80171e0:	4798      	blx	r3
 80171e2:	46aa      	mov	sl, r5
 80171e4:	e7d9      	b.n	801719a <rcl_expand_topic_name+0x202>
 80171e6:	24ca      	movs	r4, #202	@ 0xca
 80171e8:	e78b      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 80171ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80171ec:	2300      	movs	r3, #0
 80171ee:	6013      	str	r3, [r2, #0]
 80171f0:	240a      	movs	r4, #10
 80171f2:	e786      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 80171f4:	465b      	mov	r3, fp
 80171f6:	9c07      	ldr	r4, [sp, #28]
 80171f8:	46da      	mov	sl, fp
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d1d3      	bne.n	80171a6 <rcl_expand_topic_name+0x20e>
 80171fe:	f898 3000 	ldrb.w	r3, [r8]
 8017202:	2b2f      	cmp	r3, #47	@ 0x2f
 8017204:	d0cb      	beq.n	801719e <rcl_expand_topic_name+0x206>
 8017206:	e7b2      	b.n	801716e <rcl_expand_topic_name+0x1d6>
 8017208:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801720c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801720e:	6015      	str	r5, [r2, #0]
 8017210:	4658      	mov	r0, fp
 8017212:	4798      	blx	r3
 8017214:	240a      	movs	r4, #10
 8017216:	e774      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 8017218:	ab17      	add	r3, sp, #92	@ 0x5c
 801721a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801721e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017222:	ab14      	add	r3, sp, #80	@ 0x50
 8017224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017226:	4640      	mov	r0, r8
 8017228:	f7fd fef4 	bl	8015014 <rcutils_strdup>
 801722c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801722e:	2800      	cmp	r0, #0
 8017230:	6018      	str	r0, [r3, #0]
 8017232:	bf08      	it	eq
 8017234:	240a      	moveq	r4, #10
 8017236:	e764      	b.n	8017102 <rcl_expand_topic_name+0x16a>
 8017238:	08019ba0 	.word	0x08019ba0
 801723c:	080190c4 	.word	0x080190c4
 8017240:	08019ba8 	.word	0x08019ba8
 8017244:	08019bb0 	.word	0x08019bb0
 8017248:	08019bb8 	.word	0x08019bb8
 801724c:	0801908c 	.word	0x0801908c
 8017250:	080190d4 	.word	0x080190d4

08017254 <rcl_get_default_topic_name_substitutions>:
 8017254:	2800      	cmp	r0, #0
 8017256:	bf0c      	ite	eq
 8017258:	200b      	moveq	r0, #11
 801725a:	2000      	movne	r0, #0
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop

08017260 <rcl_get_zero_initialized_guard_condition>:
 8017260:	4a03      	ldr	r2, [pc, #12]	@ (8017270 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017262:	4603      	mov	r3, r0
 8017264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017268:	e883 0003 	stmia.w	r3, {r0, r1}
 801726c:	4618      	mov	r0, r3
 801726e:	4770      	bx	lr
 8017270:	08019bc4 	.word	0x08019bc4

08017274 <rcl_guard_condition_init>:
 8017274:	b082      	sub	sp, #8
 8017276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017278:	b087      	sub	sp, #28
 801727a:	ac0c      	add	r4, sp, #48	@ 0x30
 801727c:	e884 000c 	stmia.w	r4, {r2, r3}
 8017280:	46a6      	mov	lr, r4
 8017282:	460d      	mov	r5, r1
 8017284:	4604      	mov	r4, r0
 8017286:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801728a:	f10d 0c04 	add.w	ip, sp, #4
 801728e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017292:	f8de 3000 	ldr.w	r3, [lr]
 8017296:	f8cc 3000 	str.w	r3, [ip]
 801729a:	a801      	add	r0, sp, #4
 801729c:	f7f4 ffd6 	bl	800c24c <rcutils_allocator_is_valid>
 80172a0:	b338      	cbz	r0, 80172f2 <rcl_guard_condition_init+0x7e>
 80172a2:	b334      	cbz	r4, 80172f2 <rcl_guard_condition_init+0x7e>
 80172a4:	6866      	ldr	r6, [r4, #4]
 80172a6:	b9ee      	cbnz	r6, 80172e4 <rcl_guard_condition_init+0x70>
 80172a8:	b31d      	cbz	r5, 80172f2 <rcl_guard_condition_init+0x7e>
 80172aa:	4628      	mov	r0, r5
 80172ac:	f7fa ffbc 	bl	8012228 <rcl_context_is_valid>
 80172b0:	b308      	cbz	r0, 80172f6 <rcl_guard_condition_init+0x82>
 80172b2:	9b01      	ldr	r3, [sp, #4]
 80172b4:	9905      	ldr	r1, [sp, #20]
 80172b6:	201c      	movs	r0, #28
 80172b8:	4798      	blx	r3
 80172ba:	4607      	mov	r7, r0
 80172bc:	6060      	str	r0, [r4, #4]
 80172be:	b310      	cbz	r0, 8017306 <rcl_guard_condition_init+0x92>
 80172c0:	6828      	ldr	r0, [r5, #0]
 80172c2:	3028      	adds	r0, #40	@ 0x28
 80172c4:	f000 f9ac 	bl	8017620 <rmw_create_guard_condition>
 80172c8:	6038      	str	r0, [r7, #0]
 80172ca:	6860      	ldr	r0, [r4, #4]
 80172cc:	6805      	ldr	r5, [r0, #0]
 80172ce:	b1a5      	cbz	r5, 80172fa <rcl_guard_condition_init+0x86>
 80172d0:	2301      	movs	r3, #1
 80172d2:	ac01      	add	r4, sp, #4
 80172d4:	7103      	strb	r3, [r0, #4]
 80172d6:	f100 0708 	add.w	r7, r0, #8
 80172da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80172dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	603b      	str	r3, [r7, #0]
 80172e2:	e000      	b.n	80172e6 <rcl_guard_condition_init+0x72>
 80172e4:	2664      	movs	r6, #100	@ 0x64
 80172e6:	4630      	mov	r0, r6
 80172e8:	b007      	add	sp, #28
 80172ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80172ee:	b002      	add	sp, #8
 80172f0:	4770      	bx	lr
 80172f2:	260b      	movs	r6, #11
 80172f4:	e7f7      	b.n	80172e6 <rcl_guard_condition_init+0x72>
 80172f6:	2665      	movs	r6, #101	@ 0x65
 80172f8:	e7f5      	b.n	80172e6 <rcl_guard_condition_init+0x72>
 80172fa:	9b02      	ldr	r3, [sp, #8]
 80172fc:	9905      	ldr	r1, [sp, #20]
 80172fe:	4798      	blx	r3
 8017300:	2601      	movs	r6, #1
 8017302:	6065      	str	r5, [r4, #4]
 8017304:	e7ef      	b.n	80172e6 <rcl_guard_condition_init+0x72>
 8017306:	260a      	movs	r6, #10
 8017308:	e7ed      	b.n	80172e6 <rcl_guard_condition_init+0x72>
 801730a:	bf00      	nop

0801730c <rcl_guard_condition_init_from_rmw>:
 801730c:	b082      	sub	sp, #8
 801730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017312:	b086      	sub	sp, #24
 8017314:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017318:	4604      	mov	r4, r0
 801731a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801731e:	460e      	mov	r6, r1
 8017320:	4617      	mov	r7, r2
 8017322:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017326:	f10d 0e04 	add.w	lr, sp, #4
 801732a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801732e:	f8dc 3000 	ldr.w	r3, [ip]
 8017332:	f8ce 3000 	str.w	r3, [lr]
 8017336:	a801      	add	r0, sp, #4
 8017338:	f7f4 ff88 	bl	800c24c <rcutils_allocator_is_valid>
 801733c:	b350      	cbz	r0, 8017394 <rcl_guard_condition_init_from_rmw+0x88>
 801733e:	b34c      	cbz	r4, 8017394 <rcl_guard_condition_init_from_rmw+0x88>
 8017340:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017344:	f1b8 0f00 	cmp.w	r8, #0
 8017348:	d11e      	bne.n	8017388 <rcl_guard_condition_init_from_rmw+0x7c>
 801734a:	b31f      	cbz	r7, 8017394 <rcl_guard_condition_init_from_rmw+0x88>
 801734c:	4638      	mov	r0, r7
 801734e:	f7fa ff6b 	bl	8012228 <rcl_context_is_valid>
 8017352:	b328      	cbz	r0, 80173a0 <rcl_guard_condition_init_from_rmw+0x94>
 8017354:	9b01      	ldr	r3, [sp, #4]
 8017356:	9905      	ldr	r1, [sp, #20]
 8017358:	201c      	movs	r0, #28
 801735a:	4798      	blx	r3
 801735c:	4605      	mov	r5, r0
 801735e:	6060      	str	r0, [r4, #4]
 8017360:	b358      	cbz	r0, 80173ba <rcl_guard_condition_init_from_rmw+0xae>
 8017362:	b1fe      	cbz	r6, 80173a4 <rcl_guard_condition_init_from_rmw+0x98>
 8017364:	6006      	str	r6, [r0, #0]
 8017366:	f880 8004 	strb.w	r8, [r0, #4]
 801736a:	ac01      	add	r4, sp, #4
 801736c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801736e:	f105 0c08 	add.w	ip, r5, #8
 8017372:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017376:	6823      	ldr	r3, [r4, #0]
 8017378:	f8cc 3000 	str.w	r3, [ip]
 801737c:	2000      	movs	r0, #0
 801737e:	b006      	add	sp, #24
 8017380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017384:	b002      	add	sp, #8
 8017386:	4770      	bx	lr
 8017388:	2064      	movs	r0, #100	@ 0x64
 801738a:	b006      	add	sp, #24
 801738c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017390:	b002      	add	sp, #8
 8017392:	4770      	bx	lr
 8017394:	200b      	movs	r0, #11
 8017396:	b006      	add	sp, #24
 8017398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801739c:	b002      	add	sp, #8
 801739e:	4770      	bx	lr
 80173a0:	2065      	movs	r0, #101	@ 0x65
 80173a2:	e7f2      	b.n	801738a <rcl_guard_condition_init_from_rmw+0x7e>
 80173a4:	6838      	ldr	r0, [r7, #0]
 80173a6:	3028      	adds	r0, #40	@ 0x28
 80173a8:	f000 f93a 	bl	8017620 <rmw_create_guard_condition>
 80173ac:	6028      	str	r0, [r5, #0]
 80173ae:	6865      	ldr	r5, [r4, #4]
 80173b0:	682e      	ldr	r6, [r5, #0]
 80173b2:	b126      	cbz	r6, 80173be <rcl_guard_condition_init_from_rmw+0xb2>
 80173b4:	2301      	movs	r3, #1
 80173b6:	712b      	strb	r3, [r5, #4]
 80173b8:	e7d7      	b.n	801736a <rcl_guard_condition_init_from_rmw+0x5e>
 80173ba:	200a      	movs	r0, #10
 80173bc:	e7e5      	b.n	801738a <rcl_guard_condition_init_from_rmw+0x7e>
 80173be:	4628      	mov	r0, r5
 80173c0:	9b02      	ldr	r3, [sp, #8]
 80173c2:	9905      	ldr	r1, [sp, #20]
 80173c4:	4798      	blx	r3
 80173c6:	6066      	str	r6, [r4, #4]
 80173c8:	2001      	movs	r0, #1
 80173ca:	e7de      	b.n	801738a <rcl_guard_condition_init_from_rmw+0x7e>

080173cc <rcl_guard_condition_fini>:
 80173cc:	b570      	push	{r4, r5, r6, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	b1f0      	cbz	r0, 8017410 <rcl_guard_condition_fini+0x44>
 80173d2:	6843      	ldr	r3, [r0, #4]
 80173d4:	4604      	mov	r4, r0
 80173d6:	b163      	cbz	r3, 80173f2 <rcl_guard_condition_fini+0x26>
 80173d8:	6818      	ldr	r0, [r3, #0]
 80173da:	68de      	ldr	r6, [r3, #12]
 80173dc:	6999      	ldr	r1, [r3, #24]
 80173de:	b160      	cbz	r0, 80173fa <rcl_guard_condition_fini+0x2e>
 80173e0:	791d      	ldrb	r5, [r3, #4]
 80173e2:	b965      	cbnz	r5, 80173fe <rcl_guard_condition_fini+0x32>
 80173e4:	4618      	mov	r0, r3
 80173e6:	47b0      	blx	r6
 80173e8:	2300      	movs	r3, #0
 80173ea:	4628      	mov	r0, r5
 80173ec:	6063      	str	r3, [r4, #4]
 80173ee:	b002      	add	sp, #8
 80173f0:	bd70      	pop	{r4, r5, r6, pc}
 80173f2:	461d      	mov	r5, r3
 80173f4:	4628      	mov	r0, r5
 80173f6:	b002      	add	sp, #8
 80173f8:	bd70      	pop	{r4, r5, r6, pc}
 80173fa:	4605      	mov	r5, r0
 80173fc:	e7f2      	b.n	80173e4 <rcl_guard_condition_fini+0x18>
 80173fe:	9101      	str	r1, [sp, #4]
 8017400:	f000 f922 	bl	8017648 <rmw_destroy_guard_condition>
 8017404:	1e05      	subs	r5, r0, #0
 8017406:	6863      	ldr	r3, [r4, #4]
 8017408:	9901      	ldr	r1, [sp, #4]
 801740a:	bf18      	it	ne
 801740c:	2501      	movne	r5, #1
 801740e:	e7e9      	b.n	80173e4 <rcl_guard_condition_fini+0x18>
 8017410:	250b      	movs	r5, #11
 8017412:	4628      	mov	r0, r5
 8017414:	b002      	add	sp, #8
 8017416:	bd70      	pop	{r4, r5, r6, pc}

08017418 <rcl_guard_condition_get_default_options>:
 8017418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801741a:	b087      	sub	sp, #28
 801741c:	4606      	mov	r6, r0
 801741e:	4668      	mov	r0, sp
 8017420:	f7f4 ff06 	bl	800c230 <rcutils_get_default_allocator>
 8017424:	4b09      	ldr	r3, [pc, #36]	@ (801744c <rcl_guard_condition_get_default_options+0x34>)
 8017426:	46ee      	mov	lr, sp
 8017428:	469c      	mov	ip, r3
 801742a:	461d      	mov	r5, r3
 801742c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017430:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017436:	4634      	mov	r4, r6
 8017438:	f8de 7000 	ldr.w	r7, [lr]
 801743c:	f8cc 7000 	str.w	r7, [ip]
 8017440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017442:	4630      	mov	r0, r6
 8017444:	6027      	str	r7, [r4, #0]
 8017446:	b007      	add	sp, #28
 8017448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801744a:	bf00      	nop
 801744c:	2000cc38 	.word	0x2000cc38

08017450 <rcl_trigger_guard_condition>:
 8017450:	b148      	cbz	r0, 8017466 <rcl_trigger_guard_condition+0x16>
 8017452:	b508      	push	{r3, lr}
 8017454:	6843      	ldr	r3, [r0, #4]
 8017456:	b143      	cbz	r3, 801746a <rcl_trigger_guard_condition+0x1a>
 8017458:	6818      	ldr	r0, [r3, #0]
 801745a:	f000 f909 	bl	8017670 <rmw_trigger_guard_condition>
 801745e:	3800      	subs	r0, #0
 8017460:	bf18      	it	ne
 8017462:	2001      	movne	r0, #1
 8017464:	bd08      	pop	{r3, pc}
 8017466:	200b      	movs	r0, #11
 8017468:	4770      	bx	lr
 801746a:	200b      	movs	r0, #11
 801746c:	bd08      	pop	{r3, pc}
 801746e:	bf00      	nop

08017470 <rcl_guard_condition_get_rmw_handle>:
 8017470:	b110      	cbz	r0, 8017478 <rcl_guard_condition_get_rmw_handle+0x8>
 8017472:	6840      	ldr	r0, [r0, #4]
 8017474:	b100      	cbz	r0, 8017478 <rcl_guard_condition_get_rmw_handle+0x8>
 8017476:	6800      	ldr	r0, [r0, #0]
 8017478:	4770      	bx	lr
 801747a:	bf00      	nop

0801747c <rcl_validate_topic_name>:
 801747c:	2800      	cmp	r0, #0
 801747e:	d07a      	beq.n	8017576 <rcl_validate_topic_name+0xfa>
 8017480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017484:	460e      	mov	r6, r1
 8017486:	2900      	cmp	r1, #0
 8017488:	d07c      	beq.n	8017584 <rcl_validate_topic_name+0x108>
 801748a:	4617      	mov	r7, r2
 801748c:	4605      	mov	r5, r0
 801748e:	f7e8 fed1 	bl	8000234 <strlen>
 8017492:	b1b0      	cbz	r0, 80174c2 <rcl_validate_topic_name+0x46>
 8017494:	f895 9000 	ldrb.w	r9, [r5]
 8017498:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801761c <rcl_validate_topic_name+0x1a0>
 801749c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80174a0:	f013 0304 	ands.w	r3, r3, #4
 80174a4:	d169      	bne.n	801757a <rcl_validate_topic_name+0xfe>
 80174a6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80174aa:	f815 2008 	ldrb.w	r2, [r5, r8]
 80174ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80174b0:	d10e      	bne.n	80174d0 <rcl_validate_topic_name+0x54>
 80174b2:	2202      	movs	r2, #2
 80174b4:	6032      	str	r2, [r6, #0]
 80174b6:	b36f      	cbz	r7, 8017514 <rcl_validate_topic_name+0x98>
 80174b8:	f8c7 8000 	str.w	r8, [r7]
 80174bc:	4618      	mov	r0, r3
 80174be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174c2:	2301      	movs	r3, #1
 80174c4:	6033      	str	r3, [r6, #0]
 80174c6:	b32f      	cbz	r7, 8017514 <rcl_validate_topic_name+0x98>
 80174c8:	2000      	movs	r0, #0
 80174ca:	6038      	str	r0, [r7, #0]
 80174cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174d0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80174d4:	461c      	mov	r4, r3
 80174d6:	4619      	mov	r1, r3
 80174d8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80174dc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80174e0:	f1be 0f09 	cmp.w	lr, #9
 80174e4:	d919      	bls.n	801751a <rcl_validate_topic_name+0x9e>
 80174e6:	f022 0e20 	bic.w	lr, r2, #32
 80174ea:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80174ee:	f1be 0f19 	cmp.w	lr, #25
 80174f2:	d912      	bls.n	801751a <rcl_validate_topic_name+0x9e>
 80174f4:	2a5f      	cmp	r2, #95	@ 0x5f
 80174f6:	d019      	beq.n	801752c <rcl_validate_topic_name+0xb0>
 80174f8:	2a2f      	cmp	r2, #47	@ 0x2f
 80174fa:	d051      	beq.n	80175a0 <rcl_validate_topic_name+0x124>
 80174fc:	2a7e      	cmp	r2, #126	@ 0x7e
 80174fe:	d048      	beq.n	8017592 <rcl_validate_topic_name+0x116>
 8017500:	2a7b      	cmp	r2, #123	@ 0x7b
 8017502:	d054      	beq.n	80175ae <rcl_validate_topic_name+0x132>
 8017504:	2a7d      	cmp	r2, #125	@ 0x7d
 8017506:	d161      	bne.n	80175cc <rcl_validate_topic_name+0x150>
 8017508:	2c00      	cmp	r4, #0
 801750a:	d155      	bne.n	80175b8 <rcl_validate_topic_name+0x13c>
 801750c:	2305      	movs	r3, #5
 801750e:	6033      	str	r3, [r6, #0]
 8017510:	b107      	cbz	r7, 8017514 <rcl_validate_topic_name+0x98>
 8017512:	6039      	str	r1, [r7, #0]
 8017514:	2000      	movs	r0, #0
 8017516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801751a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801751e:	0752      	lsls	r2, r2, #29
 8017520:	d504      	bpl.n	801752c <rcl_validate_topic_name+0xb0>
 8017522:	b11c      	cbz	r4, 801752c <rcl_validate_topic_name+0xb0>
 8017524:	b111      	cbz	r1, 801752c <rcl_validate_topic_name+0xb0>
 8017526:	1e4a      	subs	r2, r1, #1
 8017528:	429a      	cmp	r2, r3
 801752a:	d02d      	beq.n	8017588 <rcl_validate_topic_name+0x10c>
 801752c:	3101      	adds	r1, #1
 801752e:	4288      	cmp	r0, r1
 8017530:	d1d2      	bne.n	80174d8 <rcl_validate_topic_name+0x5c>
 8017532:	2c00      	cmp	r4, #0
 8017534:	d145      	bne.n	80175c2 <rcl_validate_topic_name+0x146>
 8017536:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801753a:	d04f      	beq.n	80175dc <rcl_validate_topic_name+0x160>
 801753c:	4620      	mov	r0, r4
 801753e:	2301      	movs	r3, #1
 8017540:	e006      	b.n	8017550 <rcl_validate_topic_name+0xd4>
 8017542:	428b      	cmp	r3, r1
 8017544:	f105 0501 	add.w	r5, r5, #1
 8017548:	f103 0201 	add.w	r2, r3, #1
 801754c:	d236      	bcs.n	80175bc <rcl_validate_topic_name+0x140>
 801754e:	4613      	mov	r3, r2
 8017550:	4580      	cmp	r8, r0
 8017552:	f100 0001 	add.w	r0, r0, #1
 8017556:	d0f4      	beq.n	8017542 <rcl_validate_topic_name+0xc6>
 8017558:	782a      	ldrb	r2, [r5, #0]
 801755a:	2a2f      	cmp	r2, #47	@ 0x2f
 801755c:	d1f1      	bne.n	8017542 <rcl_validate_topic_name+0xc6>
 801755e:	786a      	ldrb	r2, [r5, #1]
 8017560:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017564:	0754      	lsls	r4, r2, #29
 8017566:	d5ec      	bpl.n	8017542 <rcl_validate_topic_name+0xc6>
 8017568:	2204      	movs	r2, #4
 801756a:	6032      	str	r2, [r6, #0]
 801756c:	2f00      	cmp	r7, #0
 801756e:	d0d1      	beq.n	8017514 <rcl_validate_topic_name+0x98>
 8017570:	603b      	str	r3, [r7, #0]
 8017572:	2000      	movs	r0, #0
 8017574:	e7aa      	b.n	80174cc <rcl_validate_topic_name+0x50>
 8017576:	200b      	movs	r0, #11
 8017578:	4770      	bx	lr
 801757a:	2304      	movs	r3, #4
 801757c:	6033      	str	r3, [r6, #0]
 801757e:	2f00      	cmp	r7, #0
 8017580:	d1a2      	bne.n	80174c8 <rcl_validate_topic_name+0x4c>
 8017582:	e7c7      	b.n	8017514 <rcl_validate_topic_name+0x98>
 8017584:	200b      	movs	r0, #11
 8017586:	e7a1      	b.n	80174cc <rcl_validate_topic_name+0x50>
 8017588:	2309      	movs	r3, #9
 801758a:	6033      	str	r3, [r6, #0]
 801758c:	2f00      	cmp	r7, #0
 801758e:	d1c0      	bne.n	8017512 <rcl_validate_topic_name+0x96>
 8017590:	e7c0      	b.n	8017514 <rcl_validate_topic_name+0x98>
 8017592:	2900      	cmp	r1, #0
 8017594:	d0ca      	beq.n	801752c <rcl_validate_topic_name+0xb0>
 8017596:	2306      	movs	r3, #6
 8017598:	6033      	str	r3, [r6, #0]
 801759a:	2f00      	cmp	r7, #0
 801759c:	d1b9      	bne.n	8017512 <rcl_validate_topic_name+0x96>
 801759e:	e7b9      	b.n	8017514 <rcl_validate_topic_name+0x98>
 80175a0:	2c00      	cmp	r4, #0
 80175a2:	d0c3      	beq.n	801752c <rcl_validate_topic_name+0xb0>
 80175a4:	2308      	movs	r3, #8
 80175a6:	6033      	str	r3, [r6, #0]
 80175a8:	2f00      	cmp	r7, #0
 80175aa:	d1b2      	bne.n	8017512 <rcl_validate_topic_name+0x96>
 80175ac:	e7b2      	b.n	8017514 <rcl_validate_topic_name+0x98>
 80175ae:	2c00      	cmp	r4, #0
 80175b0:	d1f8      	bne.n	80175a4 <rcl_validate_topic_name+0x128>
 80175b2:	460b      	mov	r3, r1
 80175b4:	2401      	movs	r4, #1
 80175b6:	e7b9      	b.n	801752c <rcl_validate_topic_name+0xb0>
 80175b8:	2400      	movs	r4, #0
 80175ba:	e7b7      	b.n	801752c <rcl_validate_topic_name+0xb0>
 80175bc:	2000      	movs	r0, #0
 80175be:	6030      	str	r0, [r6, #0]
 80175c0:	e784      	b.n	80174cc <rcl_validate_topic_name+0x50>
 80175c2:	2205      	movs	r2, #5
 80175c4:	6032      	str	r2, [r6, #0]
 80175c6:	2f00      	cmp	r7, #0
 80175c8:	d1d2      	bne.n	8017570 <rcl_validate_topic_name+0xf4>
 80175ca:	e7a3      	b.n	8017514 <rcl_validate_topic_name+0x98>
 80175cc:	2c00      	cmp	r4, #0
 80175ce:	bf14      	ite	ne
 80175d0:	2308      	movne	r3, #8
 80175d2:	2303      	moveq	r3, #3
 80175d4:	6033      	str	r3, [r6, #0]
 80175d6:	2f00      	cmp	r7, #0
 80175d8:	d19b      	bne.n	8017512 <rcl_validate_topic_name+0x96>
 80175da:	e79b      	b.n	8017514 <rcl_validate_topic_name+0x98>
 80175dc:	2301      	movs	r3, #1
 80175de:	e00a      	b.n	80175f6 <rcl_validate_topic_name+0x17a>
 80175e0:	2c01      	cmp	r4, #1
 80175e2:	d013      	beq.n	801760c <rcl_validate_topic_name+0x190>
 80175e4:	4299      	cmp	r1, r3
 80175e6:	f104 0401 	add.w	r4, r4, #1
 80175ea:	f105 0501 	add.w	r5, r5, #1
 80175ee:	f103 0201 	add.w	r2, r3, #1
 80175f2:	d9e3      	bls.n	80175bc <rcl_validate_topic_name+0x140>
 80175f4:	4613      	mov	r3, r2
 80175f6:	45a0      	cmp	r8, r4
 80175f8:	d0f4      	beq.n	80175e4 <rcl_validate_topic_name+0x168>
 80175fa:	782a      	ldrb	r2, [r5, #0]
 80175fc:	2a2f      	cmp	r2, #47	@ 0x2f
 80175fe:	d1ef      	bne.n	80175e0 <rcl_validate_topic_name+0x164>
 8017600:	786a      	ldrb	r2, [r5, #1]
 8017602:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017606:	0752      	lsls	r2, r2, #29
 8017608:	d5ec      	bpl.n	80175e4 <rcl_validate_topic_name+0x168>
 801760a:	e7ad      	b.n	8017568 <rcl_validate_topic_name+0xec>
 801760c:	2307      	movs	r3, #7
 801760e:	6033      	str	r3, [r6, #0]
 8017610:	2f00      	cmp	r7, #0
 8017612:	f43f af7f 	beq.w	8017514 <rcl_validate_topic_name+0x98>
 8017616:	603c      	str	r4, [r7, #0]
 8017618:	2000      	movs	r0, #0
 801761a:	e757      	b.n	80174cc <rcl_validate_topic_name+0x50>
 801761c:	08019c3c 	.word	0x08019c3c

08017620 <rmw_create_guard_condition>:
 8017620:	b538      	push	{r3, r4, r5, lr}
 8017622:	4605      	mov	r5, r0
 8017624:	4807      	ldr	r0, [pc, #28]	@ (8017644 <rmw_create_guard_condition+0x24>)
 8017626:	f7fe f923 	bl	8015870 <get_memory>
 801762a:	b148      	cbz	r0, 8017640 <rmw_create_guard_condition+0x20>
 801762c:	6884      	ldr	r4, [r0, #8]
 801762e:	2300      	movs	r3, #0
 8017630:	7423      	strb	r3, [r4, #16]
 8017632:	61e5      	str	r5, [r4, #28]
 8017634:	f7fe f984 	bl	8015940 <rmw_get_implementation_identifier>
 8017638:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801763c:	f104 0014 	add.w	r0, r4, #20
 8017640:	bd38      	pop	{r3, r4, r5, pc}
 8017642:	bf00      	nop
 8017644:	2000cad4 	.word	0x2000cad4

08017648 <rmw_destroy_guard_condition>:
 8017648:	b508      	push	{r3, lr}
 801764a:	4b08      	ldr	r3, [pc, #32]	@ (801766c <rmw_destroy_guard_condition+0x24>)
 801764c:	6819      	ldr	r1, [r3, #0]
 801764e:	b911      	cbnz	r1, 8017656 <rmw_destroy_guard_condition+0xe>
 8017650:	e00a      	b.n	8017668 <rmw_destroy_guard_condition+0x20>
 8017652:	6849      	ldr	r1, [r1, #4]
 8017654:	b141      	cbz	r1, 8017668 <rmw_destroy_guard_condition+0x20>
 8017656:	688b      	ldr	r3, [r1, #8]
 8017658:	3314      	adds	r3, #20
 801765a:	4298      	cmp	r0, r3
 801765c:	d1f9      	bne.n	8017652 <rmw_destroy_guard_condition+0xa>
 801765e:	4803      	ldr	r0, [pc, #12]	@ (801766c <rmw_destroy_guard_condition+0x24>)
 8017660:	f7fe f916 	bl	8015890 <put_memory>
 8017664:	2000      	movs	r0, #0
 8017666:	bd08      	pop	{r3, pc}
 8017668:	2001      	movs	r0, #1
 801766a:	bd08      	pop	{r3, pc}
 801766c:	2000cad4 	.word	0x2000cad4

08017670 <rmw_trigger_guard_condition>:
 8017670:	b160      	cbz	r0, 801768c <rmw_trigger_guard_condition+0x1c>
 8017672:	b510      	push	{r4, lr}
 8017674:	4604      	mov	r4, r0
 8017676:	6800      	ldr	r0, [r0, #0]
 8017678:	f7f5 fff4 	bl	800d664 <is_uxrce_rmw_identifier_valid>
 801767c:	b908      	cbnz	r0, 8017682 <rmw_trigger_guard_condition+0x12>
 801767e:	2001      	movs	r0, #1
 8017680:	bd10      	pop	{r4, pc}
 8017682:	6863      	ldr	r3, [r4, #4]
 8017684:	2201      	movs	r2, #1
 8017686:	741a      	strb	r2, [r3, #16]
 8017688:	2000      	movs	r0, #0
 801768a:	bd10      	pop	{r4, pc}
 801768c:	2001      	movs	r0, #1
 801768e:	4770      	bx	lr

08017690 <calloc>:
 8017690:	4b02      	ldr	r3, [pc, #8]	@ (801769c <calloc+0xc>)
 8017692:	460a      	mov	r2, r1
 8017694:	4601      	mov	r1, r0
 8017696:	6818      	ldr	r0, [r3, #0]
 8017698:	f000 b802 	b.w	80176a0 <_calloc_r>
 801769c:	200001c8 	.word	0x200001c8

080176a0 <_calloc_r>:
 80176a0:	b570      	push	{r4, r5, r6, lr}
 80176a2:	fba1 5402 	umull	r5, r4, r1, r2
 80176a6:	b93c      	cbnz	r4, 80176b8 <_calloc_r+0x18>
 80176a8:	4629      	mov	r1, r5
 80176aa:	f000 f887 	bl	80177bc <_malloc_r>
 80176ae:	4606      	mov	r6, r0
 80176b0:	b928      	cbnz	r0, 80176be <_calloc_r+0x1e>
 80176b2:	2600      	movs	r6, #0
 80176b4:	4630      	mov	r0, r6
 80176b6:	bd70      	pop	{r4, r5, r6, pc}
 80176b8:	220c      	movs	r2, #12
 80176ba:	6002      	str	r2, [r0, #0]
 80176bc:	e7f9      	b.n	80176b2 <_calloc_r+0x12>
 80176be:	462a      	mov	r2, r5
 80176c0:	4621      	mov	r1, r4
 80176c2:	f000 fbcf 	bl	8017e64 <memset>
 80176c6:	e7f5      	b.n	80176b4 <_calloc_r+0x14>

080176c8 <getenv>:
 80176c8:	b507      	push	{r0, r1, r2, lr}
 80176ca:	4b04      	ldr	r3, [pc, #16]	@ (80176dc <getenv+0x14>)
 80176cc:	4601      	mov	r1, r0
 80176ce:	aa01      	add	r2, sp, #4
 80176d0:	6818      	ldr	r0, [r3, #0]
 80176d2:	f000 f805 	bl	80176e0 <_findenv_r>
 80176d6:	b003      	add	sp, #12
 80176d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80176dc:	200001c8 	.word	0x200001c8

080176e0 <_findenv_r>:
 80176e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017754 <_findenv_r+0x74>
 80176e8:	4606      	mov	r6, r0
 80176ea:	4689      	mov	r9, r1
 80176ec:	4617      	mov	r7, r2
 80176ee:	f000 fcaf 	bl	8018050 <__env_lock>
 80176f2:	f8da 4000 	ldr.w	r4, [sl]
 80176f6:	b134      	cbz	r4, 8017706 <_findenv_r+0x26>
 80176f8:	464b      	mov	r3, r9
 80176fa:	4698      	mov	r8, r3
 80176fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017700:	b13a      	cbz	r2, 8017712 <_findenv_r+0x32>
 8017702:	2a3d      	cmp	r2, #61	@ 0x3d
 8017704:	d1f9      	bne.n	80176fa <_findenv_r+0x1a>
 8017706:	4630      	mov	r0, r6
 8017708:	f000 fca8 	bl	801805c <__env_unlock>
 801770c:	2000      	movs	r0, #0
 801770e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017712:	eba8 0809 	sub.w	r8, r8, r9
 8017716:	46a3      	mov	fp, r4
 8017718:	f854 0b04 	ldr.w	r0, [r4], #4
 801771c:	2800      	cmp	r0, #0
 801771e:	d0f2      	beq.n	8017706 <_findenv_r+0x26>
 8017720:	4642      	mov	r2, r8
 8017722:	4649      	mov	r1, r9
 8017724:	f000 fbb3 	bl	8017e8e <strncmp>
 8017728:	2800      	cmp	r0, #0
 801772a:	d1f4      	bne.n	8017716 <_findenv_r+0x36>
 801772c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017730:	eb03 0508 	add.w	r5, r3, r8
 8017734:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017738:	2b3d      	cmp	r3, #61	@ 0x3d
 801773a:	d1ec      	bne.n	8017716 <_findenv_r+0x36>
 801773c:	f8da 3000 	ldr.w	r3, [sl]
 8017740:	ebab 0303 	sub.w	r3, fp, r3
 8017744:	109b      	asrs	r3, r3, #2
 8017746:	4630      	mov	r0, r6
 8017748:	603b      	str	r3, [r7, #0]
 801774a:	f000 fc87 	bl	801805c <__env_unlock>
 801774e:	1c68      	adds	r0, r5, #1
 8017750:	e7dd      	b.n	801770e <_findenv_r+0x2e>
 8017752:	bf00      	nop
 8017754:	20000000 	.word	0x20000000

08017758 <malloc>:
 8017758:	4b02      	ldr	r3, [pc, #8]	@ (8017764 <malloc+0xc>)
 801775a:	4601      	mov	r1, r0
 801775c:	6818      	ldr	r0, [r3, #0]
 801775e:	f000 b82d 	b.w	80177bc <_malloc_r>
 8017762:	bf00      	nop
 8017764:	200001c8 	.word	0x200001c8

08017768 <free>:
 8017768:	4b02      	ldr	r3, [pc, #8]	@ (8017774 <free+0xc>)
 801776a:	4601      	mov	r1, r0
 801776c:	6818      	ldr	r0, [r3, #0]
 801776e:	f000 bc7b 	b.w	8018068 <_free_r>
 8017772:	bf00      	nop
 8017774:	200001c8 	.word	0x200001c8

08017778 <sbrk_aligned>:
 8017778:	b570      	push	{r4, r5, r6, lr}
 801777a:	4e0f      	ldr	r6, [pc, #60]	@ (80177b8 <sbrk_aligned+0x40>)
 801777c:	460c      	mov	r4, r1
 801777e:	6831      	ldr	r1, [r6, #0]
 8017780:	4605      	mov	r5, r0
 8017782:	b911      	cbnz	r1, 801778a <sbrk_aligned+0x12>
 8017784:	f000 fbe0 	bl	8017f48 <_sbrk_r>
 8017788:	6030      	str	r0, [r6, #0]
 801778a:	4621      	mov	r1, r4
 801778c:	4628      	mov	r0, r5
 801778e:	f000 fbdb 	bl	8017f48 <_sbrk_r>
 8017792:	1c43      	adds	r3, r0, #1
 8017794:	d103      	bne.n	801779e <sbrk_aligned+0x26>
 8017796:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801779a:	4620      	mov	r0, r4
 801779c:	bd70      	pop	{r4, r5, r6, pc}
 801779e:	1cc4      	adds	r4, r0, #3
 80177a0:	f024 0403 	bic.w	r4, r4, #3
 80177a4:	42a0      	cmp	r0, r4
 80177a6:	d0f8      	beq.n	801779a <sbrk_aligned+0x22>
 80177a8:	1a21      	subs	r1, r4, r0
 80177aa:	4628      	mov	r0, r5
 80177ac:	f000 fbcc 	bl	8017f48 <_sbrk_r>
 80177b0:	3001      	adds	r0, #1
 80177b2:	d1f2      	bne.n	801779a <sbrk_aligned+0x22>
 80177b4:	e7ef      	b.n	8017796 <sbrk_aligned+0x1e>
 80177b6:	bf00      	nop
 80177b8:	2000cc4c 	.word	0x2000cc4c

080177bc <_malloc_r>:
 80177bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177c0:	1ccd      	adds	r5, r1, #3
 80177c2:	f025 0503 	bic.w	r5, r5, #3
 80177c6:	3508      	adds	r5, #8
 80177c8:	2d0c      	cmp	r5, #12
 80177ca:	bf38      	it	cc
 80177cc:	250c      	movcc	r5, #12
 80177ce:	2d00      	cmp	r5, #0
 80177d0:	4606      	mov	r6, r0
 80177d2:	db01      	blt.n	80177d8 <_malloc_r+0x1c>
 80177d4:	42a9      	cmp	r1, r5
 80177d6:	d904      	bls.n	80177e2 <_malloc_r+0x26>
 80177d8:	230c      	movs	r3, #12
 80177da:	6033      	str	r3, [r6, #0]
 80177dc:	2000      	movs	r0, #0
 80177de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80178b8 <_malloc_r+0xfc>
 80177e6:	f000 f869 	bl	80178bc <__malloc_lock>
 80177ea:	f8d8 3000 	ldr.w	r3, [r8]
 80177ee:	461c      	mov	r4, r3
 80177f0:	bb44      	cbnz	r4, 8017844 <_malloc_r+0x88>
 80177f2:	4629      	mov	r1, r5
 80177f4:	4630      	mov	r0, r6
 80177f6:	f7ff ffbf 	bl	8017778 <sbrk_aligned>
 80177fa:	1c43      	adds	r3, r0, #1
 80177fc:	4604      	mov	r4, r0
 80177fe:	d158      	bne.n	80178b2 <_malloc_r+0xf6>
 8017800:	f8d8 4000 	ldr.w	r4, [r8]
 8017804:	4627      	mov	r7, r4
 8017806:	2f00      	cmp	r7, #0
 8017808:	d143      	bne.n	8017892 <_malloc_r+0xd6>
 801780a:	2c00      	cmp	r4, #0
 801780c:	d04b      	beq.n	80178a6 <_malloc_r+0xea>
 801780e:	6823      	ldr	r3, [r4, #0]
 8017810:	4639      	mov	r1, r7
 8017812:	4630      	mov	r0, r6
 8017814:	eb04 0903 	add.w	r9, r4, r3
 8017818:	f000 fb96 	bl	8017f48 <_sbrk_r>
 801781c:	4581      	cmp	r9, r0
 801781e:	d142      	bne.n	80178a6 <_malloc_r+0xea>
 8017820:	6821      	ldr	r1, [r4, #0]
 8017822:	1a6d      	subs	r5, r5, r1
 8017824:	4629      	mov	r1, r5
 8017826:	4630      	mov	r0, r6
 8017828:	f7ff ffa6 	bl	8017778 <sbrk_aligned>
 801782c:	3001      	adds	r0, #1
 801782e:	d03a      	beq.n	80178a6 <_malloc_r+0xea>
 8017830:	6823      	ldr	r3, [r4, #0]
 8017832:	442b      	add	r3, r5
 8017834:	6023      	str	r3, [r4, #0]
 8017836:	f8d8 3000 	ldr.w	r3, [r8]
 801783a:	685a      	ldr	r2, [r3, #4]
 801783c:	bb62      	cbnz	r2, 8017898 <_malloc_r+0xdc>
 801783e:	f8c8 7000 	str.w	r7, [r8]
 8017842:	e00f      	b.n	8017864 <_malloc_r+0xa8>
 8017844:	6822      	ldr	r2, [r4, #0]
 8017846:	1b52      	subs	r2, r2, r5
 8017848:	d420      	bmi.n	801788c <_malloc_r+0xd0>
 801784a:	2a0b      	cmp	r2, #11
 801784c:	d917      	bls.n	801787e <_malloc_r+0xc2>
 801784e:	1961      	adds	r1, r4, r5
 8017850:	42a3      	cmp	r3, r4
 8017852:	6025      	str	r5, [r4, #0]
 8017854:	bf18      	it	ne
 8017856:	6059      	strne	r1, [r3, #4]
 8017858:	6863      	ldr	r3, [r4, #4]
 801785a:	bf08      	it	eq
 801785c:	f8c8 1000 	streq.w	r1, [r8]
 8017860:	5162      	str	r2, [r4, r5]
 8017862:	604b      	str	r3, [r1, #4]
 8017864:	4630      	mov	r0, r6
 8017866:	f000 f82f 	bl	80178c8 <__malloc_unlock>
 801786a:	f104 000b 	add.w	r0, r4, #11
 801786e:	1d23      	adds	r3, r4, #4
 8017870:	f020 0007 	bic.w	r0, r0, #7
 8017874:	1ac2      	subs	r2, r0, r3
 8017876:	bf1c      	itt	ne
 8017878:	1a1b      	subne	r3, r3, r0
 801787a:	50a3      	strne	r3, [r4, r2]
 801787c:	e7af      	b.n	80177de <_malloc_r+0x22>
 801787e:	6862      	ldr	r2, [r4, #4]
 8017880:	42a3      	cmp	r3, r4
 8017882:	bf0c      	ite	eq
 8017884:	f8c8 2000 	streq.w	r2, [r8]
 8017888:	605a      	strne	r2, [r3, #4]
 801788a:	e7eb      	b.n	8017864 <_malloc_r+0xa8>
 801788c:	4623      	mov	r3, r4
 801788e:	6864      	ldr	r4, [r4, #4]
 8017890:	e7ae      	b.n	80177f0 <_malloc_r+0x34>
 8017892:	463c      	mov	r4, r7
 8017894:	687f      	ldr	r7, [r7, #4]
 8017896:	e7b6      	b.n	8017806 <_malloc_r+0x4a>
 8017898:	461a      	mov	r2, r3
 801789a:	685b      	ldr	r3, [r3, #4]
 801789c:	42a3      	cmp	r3, r4
 801789e:	d1fb      	bne.n	8017898 <_malloc_r+0xdc>
 80178a0:	2300      	movs	r3, #0
 80178a2:	6053      	str	r3, [r2, #4]
 80178a4:	e7de      	b.n	8017864 <_malloc_r+0xa8>
 80178a6:	230c      	movs	r3, #12
 80178a8:	6033      	str	r3, [r6, #0]
 80178aa:	4630      	mov	r0, r6
 80178ac:	f000 f80c 	bl	80178c8 <__malloc_unlock>
 80178b0:	e794      	b.n	80177dc <_malloc_r+0x20>
 80178b2:	6005      	str	r5, [r0, #0]
 80178b4:	e7d6      	b.n	8017864 <_malloc_r+0xa8>
 80178b6:	bf00      	nop
 80178b8:	2000cc50 	.word	0x2000cc50

080178bc <__malloc_lock>:
 80178bc:	4801      	ldr	r0, [pc, #4]	@ (80178c4 <__malloc_lock+0x8>)
 80178be:	f000 bb90 	b.w	8017fe2 <__retarget_lock_acquire_recursive>
 80178c2:	bf00      	nop
 80178c4:	2000cd95 	.word	0x2000cd95

080178c8 <__malloc_unlock>:
 80178c8:	4801      	ldr	r0, [pc, #4]	@ (80178d0 <__malloc_unlock+0x8>)
 80178ca:	f000 bb8b 	b.w	8017fe4 <__retarget_lock_release_recursive>
 80178ce:	bf00      	nop
 80178d0:	2000cd95 	.word	0x2000cd95

080178d4 <srand>:
 80178d4:	b538      	push	{r3, r4, r5, lr}
 80178d6:	4b10      	ldr	r3, [pc, #64]	@ (8017918 <srand+0x44>)
 80178d8:	681d      	ldr	r5, [r3, #0]
 80178da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80178dc:	4604      	mov	r4, r0
 80178de:	b9b3      	cbnz	r3, 801790e <srand+0x3a>
 80178e0:	2018      	movs	r0, #24
 80178e2:	f7ff ff39 	bl	8017758 <malloc>
 80178e6:	4602      	mov	r2, r0
 80178e8:	6328      	str	r0, [r5, #48]	@ 0x30
 80178ea:	b920      	cbnz	r0, 80178f6 <srand+0x22>
 80178ec:	4b0b      	ldr	r3, [pc, #44]	@ (801791c <srand+0x48>)
 80178ee:	480c      	ldr	r0, [pc, #48]	@ (8017920 <srand+0x4c>)
 80178f0:	2146      	movs	r1, #70	@ 0x46
 80178f2:	f000 fb8f 	bl	8018014 <__assert_func>
 80178f6:	490b      	ldr	r1, [pc, #44]	@ (8017924 <srand+0x50>)
 80178f8:	4b0b      	ldr	r3, [pc, #44]	@ (8017928 <srand+0x54>)
 80178fa:	e9c0 1300 	strd	r1, r3, [r0]
 80178fe:	4b0b      	ldr	r3, [pc, #44]	@ (801792c <srand+0x58>)
 8017900:	6083      	str	r3, [r0, #8]
 8017902:	230b      	movs	r3, #11
 8017904:	8183      	strh	r3, [r0, #12]
 8017906:	2100      	movs	r1, #0
 8017908:	2001      	movs	r0, #1
 801790a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801790e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017910:	2200      	movs	r2, #0
 8017912:	611c      	str	r4, [r3, #16]
 8017914:	615a      	str	r2, [r3, #20]
 8017916:	bd38      	pop	{r3, r4, r5, pc}
 8017918:	200001c8 	.word	0x200001c8
 801791c:	08019bcc 	.word	0x08019bcc
 8017920:	08019be3 	.word	0x08019be3
 8017924:	abcd330e 	.word	0xabcd330e
 8017928:	e66d1234 	.word	0xe66d1234
 801792c:	0005deec 	.word	0x0005deec

08017930 <rand>:
 8017930:	4b16      	ldr	r3, [pc, #88]	@ (801798c <rand+0x5c>)
 8017932:	b510      	push	{r4, lr}
 8017934:	681c      	ldr	r4, [r3, #0]
 8017936:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017938:	b9b3      	cbnz	r3, 8017968 <rand+0x38>
 801793a:	2018      	movs	r0, #24
 801793c:	f7ff ff0c 	bl	8017758 <malloc>
 8017940:	4602      	mov	r2, r0
 8017942:	6320      	str	r0, [r4, #48]	@ 0x30
 8017944:	b920      	cbnz	r0, 8017950 <rand+0x20>
 8017946:	4b12      	ldr	r3, [pc, #72]	@ (8017990 <rand+0x60>)
 8017948:	4812      	ldr	r0, [pc, #72]	@ (8017994 <rand+0x64>)
 801794a:	2152      	movs	r1, #82	@ 0x52
 801794c:	f000 fb62 	bl	8018014 <__assert_func>
 8017950:	4911      	ldr	r1, [pc, #68]	@ (8017998 <rand+0x68>)
 8017952:	4b12      	ldr	r3, [pc, #72]	@ (801799c <rand+0x6c>)
 8017954:	e9c0 1300 	strd	r1, r3, [r0]
 8017958:	4b11      	ldr	r3, [pc, #68]	@ (80179a0 <rand+0x70>)
 801795a:	6083      	str	r3, [r0, #8]
 801795c:	230b      	movs	r3, #11
 801795e:	8183      	strh	r3, [r0, #12]
 8017960:	2100      	movs	r1, #0
 8017962:	2001      	movs	r0, #1
 8017964:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017968:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801796a:	480e      	ldr	r0, [pc, #56]	@ (80179a4 <rand+0x74>)
 801796c:	690b      	ldr	r3, [r1, #16]
 801796e:	694c      	ldr	r4, [r1, #20]
 8017970:	4a0d      	ldr	r2, [pc, #52]	@ (80179a8 <rand+0x78>)
 8017972:	4358      	muls	r0, r3
 8017974:	fb02 0004 	mla	r0, r2, r4, r0
 8017978:	fba3 3202 	umull	r3, r2, r3, r2
 801797c:	3301      	adds	r3, #1
 801797e:	eb40 0002 	adc.w	r0, r0, r2
 8017982:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017986:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801798a:	bd10      	pop	{r4, pc}
 801798c:	200001c8 	.word	0x200001c8
 8017990:	08019bcc 	.word	0x08019bcc
 8017994:	08019be3 	.word	0x08019be3
 8017998:	abcd330e 	.word	0xabcd330e
 801799c:	e66d1234 	.word	0xe66d1234
 80179a0:	0005deec 	.word	0x0005deec
 80179a4:	5851f42d 	.word	0x5851f42d
 80179a8:	4c957f2d 	.word	0x4c957f2d

080179ac <realloc>:
 80179ac:	4b02      	ldr	r3, [pc, #8]	@ (80179b8 <realloc+0xc>)
 80179ae:	460a      	mov	r2, r1
 80179b0:	4601      	mov	r1, r0
 80179b2:	6818      	ldr	r0, [r3, #0]
 80179b4:	f000 b802 	b.w	80179bc <_realloc_r>
 80179b8:	200001c8 	.word	0x200001c8

080179bc <_realloc_r>:
 80179bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179c0:	4680      	mov	r8, r0
 80179c2:	4615      	mov	r5, r2
 80179c4:	460c      	mov	r4, r1
 80179c6:	b921      	cbnz	r1, 80179d2 <_realloc_r+0x16>
 80179c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179cc:	4611      	mov	r1, r2
 80179ce:	f7ff bef5 	b.w	80177bc <_malloc_r>
 80179d2:	b92a      	cbnz	r2, 80179e0 <_realloc_r+0x24>
 80179d4:	f000 fb48 	bl	8018068 <_free_r>
 80179d8:	2400      	movs	r4, #0
 80179da:	4620      	mov	r0, r4
 80179dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e0:	f000 fb8c 	bl	80180fc <_malloc_usable_size_r>
 80179e4:	4285      	cmp	r5, r0
 80179e6:	4606      	mov	r6, r0
 80179e8:	d802      	bhi.n	80179f0 <_realloc_r+0x34>
 80179ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80179ee:	d8f4      	bhi.n	80179da <_realloc_r+0x1e>
 80179f0:	4629      	mov	r1, r5
 80179f2:	4640      	mov	r0, r8
 80179f4:	f7ff fee2 	bl	80177bc <_malloc_r>
 80179f8:	4607      	mov	r7, r0
 80179fa:	2800      	cmp	r0, #0
 80179fc:	d0ec      	beq.n	80179d8 <_realloc_r+0x1c>
 80179fe:	42b5      	cmp	r5, r6
 8017a00:	462a      	mov	r2, r5
 8017a02:	4621      	mov	r1, r4
 8017a04:	bf28      	it	cs
 8017a06:	4632      	movcs	r2, r6
 8017a08:	f000 faf5 	bl	8017ff6 <memcpy>
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	4640      	mov	r0, r8
 8017a10:	f000 fb2a 	bl	8018068 <_free_r>
 8017a14:	463c      	mov	r4, r7
 8017a16:	e7e0      	b.n	80179da <_realloc_r+0x1e>

08017a18 <_strtoul_l.constprop.0>:
 8017a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a1c:	4e34      	ldr	r6, [pc, #208]	@ (8017af0 <_strtoul_l.constprop.0+0xd8>)
 8017a1e:	4686      	mov	lr, r0
 8017a20:	460d      	mov	r5, r1
 8017a22:	4628      	mov	r0, r5
 8017a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a28:	5d37      	ldrb	r7, [r6, r4]
 8017a2a:	f017 0708 	ands.w	r7, r7, #8
 8017a2e:	d1f8      	bne.n	8017a22 <_strtoul_l.constprop.0+0xa>
 8017a30:	2c2d      	cmp	r4, #45	@ 0x2d
 8017a32:	d12f      	bne.n	8017a94 <_strtoul_l.constprop.0+0x7c>
 8017a34:	782c      	ldrb	r4, [r5, #0]
 8017a36:	2701      	movs	r7, #1
 8017a38:	1c85      	adds	r5, r0, #2
 8017a3a:	f033 0010 	bics.w	r0, r3, #16
 8017a3e:	d109      	bne.n	8017a54 <_strtoul_l.constprop.0+0x3c>
 8017a40:	2c30      	cmp	r4, #48	@ 0x30
 8017a42:	d12c      	bne.n	8017a9e <_strtoul_l.constprop.0+0x86>
 8017a44:	7828      	ldrb	r0, [r5, #0]
 8017a46:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017a4a:	2858      	cmp	r0, #88	@ 0x58
 8017a4c:	d127      	bne.n	8017a9e <_strtoul_l.constprop.0+0x86>
 8017a4e:	786c      	ldrb	r4, [r5, #1]
 8017a50:	2310      	movs	r3, #16
 8017a52:	3502      	adds	r5, #2
 8017a54:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017a58:	2600      	movs	r6, #0
 8017a5a:	fbb8 f8f3 	udiv	r8, r8, r3
 8017a5e:	fb03 f908 	mul.w	r9, r3, r8
 8017a62:	ea6f 0909 	mvn.w	r9, r9
 8017a66:	4630      	mov	r0, r6
 8017a68:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017a6c:	f1bc 0f09 	cmp.w	ip, #9
 8017a70:	d81c      	bhi.n	8017aac <_strtoul_l.constprop.0+0x94>
 8017a72:	4664      	mov	r4, ip
 8017a74:	42a3      	cmp	r3, r4
 8017a76:	dd2a      	ble.n	8017ace <_strtoul_l.constprop.0+0xb6>
 8017a78:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017a7c:	d007      	beq.n	8017a8e <_strtoul_l.constprop.0+0x76>
 8017a7e:	4580      	cmp	r8, r0
 8017a80:	d322      	bcc.n	8017ac8 <_strtoul_l.constprop.0+0xb0>
 8017a82:	d101      	bne.n	8017a88 <_strtoul_l.constprop.0+0x70>
 8017a84:	45a1      	cmp	r9, r4
 8017a86:	db1f      	blt.n	8017ac8 <_strtoul_l.constprop.0+0xb0>
 8017a88:	fb00 4003 	mla	r0, r0, r3, r4
 8017a8c:	2601      	movs	r6, #1
 8017a8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a92:	e7e9      	b.n	8017a68 <_strtoul_l.constprop.0+0x50>
 8017a94:	2c2b      	cmp	r4, #43	@ 0x2b
 8017a96:	bf04      	itt	eq
 8017a98:	782c      	ldrbeq	r4, [r5, #0]
 8017a9a:	1c85      	addeq	r5, r0, #2
 8017a9c:	e7cd      	b.n	8017a3a <_strtoul_l.constprop.0+0x22>
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d1d8      	bne.n	8017a54 <_strtoul_l.constprop.0+0x3c>
 8017aa2:	2c30      	cmp	r4, #48	@ 0x30
 8017aa4:	bf0c      	ite	eq
 8017aa6:	2308      	moveq	r3, #8
 8017aa8:	230a      	movne	r3, #10
 8017aaa:	e7d3      	b.n	8017a54 <_strtoul_l.constprop.0+0x3c>
 8017aac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017ab0:	f1bc 0f19 	cmp.w	ip, #25
 8017ab4:	d801      	bhi.n	8017aba <_strtoul_l.constprop.0+0xa2>
 8017ab6:	3c37      	subs	r4, #55	@ 0x37
 8017ab8:	e7dc      	b.n	8017a74 <_strtoul_l.constprop.0+0x5c>
 8017aba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017abe:	f1bc 0f19 	cmp.w	ip, #25
 8017ac2:	d804      	bhi.n	8017ace <_strtoul_l.constprop.0+0xb6>
 8017ac4:	3c57      	subs	r4, #87	@ 0x57
 8017ac6:	e7d5      	b.n	8017a74 <_strtoul_l.constprop.0+0x5c>
 8017ac8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017acc:	e7df      	b.n	8017a8e <_strtoul_l.constprop.0+0x76>
 8017ace:	1c73      	adds	r3, r6, #1
 8017ad0:	d106      	bne.n	8017ae0 <_strtoul_l.constprop.0+0xc8>
 8017ad2:	2322      	movs	r3, #34	@ 0x22
 8017ad4:	f8ce 3000 	str.w	r3, [lr]
 8017ad8:	4630      	mov	r0, r6
 8017ada:	b932      	cbnz	r2, 8017aea <_strtoul_l.constprop.0+0xd2>
 8017adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ae0:	b107      	cbz	r7, 8017ae4 <_strtoul_l.constprop.0+0xcc>
 8017ae2:	4240      	negs	r0, r0
 8017ae4:	2a00      	cmp	r2, #0
 8017ae6:	d0f9      	beq.n	8017adc <_strtoul_l.constprop.0+0xc4>
 8017ae8:	b106      	cbz	r6, 8017aec <_strtoul_l.constprop.0+0xd4>
 8017aea:	1e69      	subs	r1, r5, #1
 8017aec:	6011      	str	r1, [r2, #0]
 8017aee:	e7f5      	b.n	8017adc <_strtoul_l.constprop.0+0xc4>
 8017af0:	08019c3c 	.word	0x08019c3c

08017af4 <strtoul>:
 8017af4:	4613      	mov	r3, r2
 8017af6:	460a      	mov	r2, r1
 8017af8:	4601      	mov	r1, r0
 8017afa:	4802      	ldr	r0, [pc, #8]	@ (8017b04 <strtoul+0x10>)
 8017afc:	6800      	ldr	r0, [r0, #0]
 8017afe:	f7ff bf8b 	b.w	8017a18 <_strtoul_l.constprop.0>
 8017b02:	bf00      	nop
 8017b04:	200001c8 	.word	0x200001c8

08017b08 <std>:
 8017b08:	2300      	movs	r3, #0
 8017b0a:	b510      	push	{r4, lr}
 8017b0c:	4604      	mov	r4, r0
 8017b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8017b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b16:	6083      	str	r3, [r0, #8]
 8017b18:	8181      	strh	r1, [r0, #12]
 8017b1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8017b1c:	81c2      	strh	r2, [r0, #14]
 8017b1e:	6183      	str	r3, [r0, #24]
 8017b20:	4619      	mov	r1, r3
 8017b22:	2208      	movs	r2, #8
 8017b24:	305c      	adds	r0, #92	@ 0x5c
 8017b26:	f000 f99d 	bl	8017e64 <memset>
 8017b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8017b60 <std+0x58>)
 8017b2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8017b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8017b64 <std+0x5c>)
 8017b30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017b32:	4b0d      	ldr	r3, [pc, #52]	@ (8017b68 <std+0x60>)
 8017b34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017b36:	4b0d      	ldr	r3, [pc, #52]	@ (8017b6c <std+0x64>)
 8017b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8017b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8017b70 <std+0x68>)
 8017b3c:	6224      	str	r4, [r4, #32]
 8017b3e:	429c      	cmp	r4, r3
 8017b40:	d006      	beq.n	8017b50 <std+0x48>
 8017b42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017b46:	4294      	cmp	r4, r2
 8017b48:	d002      	beq.n	8017b50 <std+0x48>
 8017b4a:	33d0      	adds	r3, #208	@ 0xd0
 8017b4c:	429c      	cmp	r4, r3
 8017b4e:	d105      	bne.n	8017b5c <std+0x54>
 8017b50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b58:	f000 ba42 	b.w	8017fe0 <__retarget_lock_init_recursive>
 8017b5c:	bd10      	pop	{r4, pc}
 8017b5e:	bf00      	nop
 8017b60:	08017d19 	.word	0x08017d19
 8017b64:	08017d3b 	.word	0x08017d3b
 8017b68:	08017d73 	.word	0x08017d73
 8017b6c:	08017d97 	.word	0x08017d97
 8017b70:	2000cc54 	.word	0x2000cc54

08017b74 <stdio_exit_handler>:
 8017b74:	4a02      	ldr	r2, [pc, #8]	@ (8017b80 <stdio_exit_handler+0xc>)
 8017b76:	4903      	ldr	r1, [pc, #12]	@ (8017b84 <stdio_exit_handler+0x10>)
 8017b78:	4803      	ldr	r0, [pc, #12]	@ (8017b88 <stdio_exit_handler+0x14>)
 8017b7a:	f000 b869 	b.w	8017c50 <_fwalk_sglue>
 8017b7e:	bf00      	nop
 8017b80:	200001bc 	.word	0x200001bc
 8017b84:	08018a65 	.word	0x08018a65
 8017b88:	200001cc 	.word	0x200001cc

08017b8c <cleanup_stdio>:
 8017b8c:	6841      	ldr	r1, [r0, #4]
 8017b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8017bc0 <cleanup_stdio+0x34>)
 8017b90:	4299      	cmp	r1, r3
 8017b92:	b510      	push	{r4, lr}
 8017b94:	4604      	mov	r4, r0
 8017b96:	d001      	beq.n	8017b9c <cleanup_stdio+0x10>
 8017b98:	f000 ff64 	bl	8018a64 <_fflush_r>
 8017b9c:	68a1      	ldr	r1, [r4, #8]
 8017b9e:	4b09      	ldr	r3, [pc, #36]	@ (8017bc4 <cleanup_stdio+0x38>)
 8017ba0:	4299      	cmp	r1, r3
 8017ba2:	d002      	beq.n	8017baa <cleanup_stdio+0x1e>
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	f000 ff5d 	bl	8018a64 <_fflush_r>
 8017baa:	68e1      	ldr	r1, [r4, #12]
 8017bac:	4b06      	ldr	r3, [pc, #24]	@ (8017bc8 <cleanup_stdio+0x3c>)
 8017bae:	4299      	cmp	r1, r3
 8017bb0:	d004      	beq.n	8017bbc <cleanup_stdio+0x30>
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bb8:	f000 bf54 	b.w	8018a64 <_fflush_r>
 8017bbc:	bd10      	pop	{r4, pc}
 8017bbe:	bf00      	nop
 8017bc0:	2000cc54 	.word	0x2000cc54
 8017bc4:	2000ccbc 	.word	0x2000ccbc
 8017bc8:	2000cd24 	.word	0x2000cd24

08017bcc <global_stdio_init.part.0>:
 8017bcc:	b510      	push	{r4, lr}
 8017bce:	4b0b      	ldr	r3, [pc, #44]	@ (8017bfc <global_stdio_init.part.0+0x30>)
 8017bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8017c00 <global_stdio_init.part.0+0x34>)
 8017bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8017c04 <global_stdio_init.part.0+0x38>)
 8017bd4:	601a      	str	r2, [r3, #0]
 8017bd6:	4620      	mov	r0, r4
 8017bd8:	2200      	movs	r2, #0
 8017bda:	2104      	movs	r1, #4
 8017bdc:	f7ff ff94 	bl	8017b08 <std>
 8017be0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017be4:	2201      	movs	r2, #1
 8017be6:	2109      	movs	r1, #9
 8017be8:	f7ff ff8e 	bl	8017b08 <std>
 8017bec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017bf0:	2202      	movs	r2, #2
 8017bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bf6:	2112      	movs	r1, #18
 8017bf8:	f7ff bf86 	b.w	8017b08 <std>
 8017bfc:	2000cd8c 	.word	0x2000cd8c
 8017c00:	2000cc54 	.word	0x2000cc54
 8017c04:	08017b75 	.word	0x08017b75

08017c08 <__sfp_lock_acquire>:
 8017c08:	4801      	ldr	r0, [pc, #4]	@ (8017c10 <__sfp_lock_acquire+0x8>)
 8017c0a:	f000 b9ea 	b.w	8017fe2 <__retarget_lock_acquire_recursive>
 8017c0e:	bf00      	nop
 8017c10:	2000cd96 	.word	0x2000cd96

08017c14 <__sfp_lock_release>:
 8017c14:	4801      	ldr	r0, [pc, #4]	@ (8017c1c <__sfp_lock_release+0x8>)
 8017c16:	f000 b9e5 	b.w	8017fe4 <__retarget_lock_release_recursive>
 8017c1a:	bf00      	nop
 8017c1c:	2000cd96 	.word	0x2000cd96

08017c20 <__sinit>:
 8017c20:	b510      	push	{r4, lr}
 8017c22:	4604      	mov	r4, r0
 8017c24:	f7ff fff0 	bl	8017c08 <__sfp_lock_acquire>
 8017c28:	6a23      	ldr	r3, [r4, #32]
 8017c2a:	b11b      	cbz	r3, 8017c34 <__sinit+0x14>
 8017c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c30:	f7ff bff0 	b.w	8017c14 <__sfp_lock_release>
 8017c34:	4b04      	ldr	r3, [pc, #16]	@ (8017c48 <__sinit+0x28>)
 8017c36:	6223      	str	r3, [r4, #32]
 8017c38:	4b04      	ldr	r3, [pc, #16]	@ (8017c4c <__sinit+0x2c>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d1f5      	bne.n	8017c2c <__sinit+0xc>
 8017c40:	f7ff ffc4 	bl	8017bcc <global_stdio_init.part.0>
 8017c44:	e7f2      	b.n	8017c2c <__sinit+0xc>
 8017c46:	bf00      	nop
 8017c48:	08017b8d 	.word	0x08017b8d
 8017c4c:	2000cd8c 	.word	0x2000cd8c

08017c50 <_fwalk_sglue>:
 8017c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c54:	4607      	mov	r7, r0
 8017c56:	4688      	mov	r8, r1
 8017c58:	4614      	mov	r4, r2
 8017c5a:	2600      	movs	r6, #0
 8017c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c60:	f1b9 0901 	subs.w	r9, r9, #1
 8017c64:	d505      	bpl.n	8017c72 <_fwalk_sglue+0x22>
 8017c66:	6824      	ldr	r4, [r4, #0]
 8017c68:	2c00      	cmp	r4, #0
 8017c6a:	d1f7      	bne.n	8017c5c <_fwalk_sglue+0xc>
 8017c6c:	4630      	mov	r0, r6
 8017c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c72:	89ab      	ldrh	r3, [r5, #12]
 8017c74:	2b01      	cmp	r3, #1
 8017c76:	d907      	bls.n	8017c88 <_fwalk_sglue+0x38>
 8017c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c7c:	3301      	adds	r3, #1
 8017c7e:	d003      	beq.n	8017c88 <_fwalk_sglue+0x38>
 8017c80:	4629      	mov	r1, r5
 8017c82:	4638      	mov	r0, r7
 8017c84:	47c0      	blx	r8
 8017c86:	4306      	orrs	r6, r0
 8017c88:	3568      	adds	r5, #104	@ 0x68
 8017c8a:	e7e9      	b.n	8017c60 <_fwalk_sglue+0x10>

08017c8c <iprintf>:
 8017c8c:	b40f      	push	{r0, r1, r2, r3}
 8017c8e:	b507      	push	{r0, r1, r2, lr}
 8017c90:	4906      	ldr	r1, [pc, #24]	@ (8017cac <iprintf+0x20>)
 8017c92:	ab04      	add	r3, sp, #16
 8017c94:	6808      	ldr	r0, [r1, #0]
 8017c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c9a:	6881      	ldr	r1, [r0, #8]
 8017c9c:	9301      	str	r3, [sp, #4]
 8017c9e:	f000 fbb7 	bl	8018410 <_vfiprintf_r>
 8017ca2:	b003      	add	sp, #12
 8017ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ca8:	b004      	add	sp, #16
 8017caa:	4770      	bx	lr
 8017cac:	200001c8 	.word	0x200001c8

08017cb0 <sniprintf>:
 8017cb0:	b40c      	push	{r2, r3}
 8017cb2:	b530      	push	{r4, r5, lr}
 8017cb4:	4b17      	ldr	r3, [pc, #92]	@ (8017d14 <sniprintf+0x64>)
 8017cb6:	1e0c      	subs	r4, r1, #0
 8017cb8:	681d      	ldr	r5, [r3, #0]
 8017cba:	b09d      	sub	sp, #116	@ 0x74
 8017cbc:	da08      	bge.n	8017cd0 <sniprintf+0x20>
 8017cbe:	238b      	movs	r3, #139	@ 0x8b
 8017cc0:	602b      	str	r3, [r5, #0]
 8017cc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017cc6:	b01d      	add	sp, #116	@ 0x74
 8017cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ccc:	b002      	add	sp, #8
 8017cce:	4770      	bx	lr
 8017cd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017cd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cd8:	bf14      	ite	ne
 8017cda:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017cde:	4623      	moveq	r3, r4
 8017ce0:	9304      	str	r3, [sp, #16]
 8017ce2:	9307      	str	r3, [sp, #28]
 8017ce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ce8:	9002      	str	r0, [sp, #8]
 8017cea:	9006      	str	r0, [sp, #24]
 8017cec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017cf0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017cf2:	ab21      	add	r3, sp, #132	@ 0x84
 8017cf4:	a902      	add	r1, sp, #8
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	9301      	str	r3, [sp, #4]
 8017cfa:	f000 fa63 	bl	80181c4 <_svfiprintf_r>
 8017cfe:	1c43      	adds	r3, r0, #1
 8017d00:	bfbc      	itt	lt
 8017d02:	238b      	movlt	r3, #139	@ 0x8b
 8017d04:	602b      	strlt	r3, [r5, #0]
 8017d06:	2c00      	cmp	r4, #0
 8017d08:	d0dd      	beq.n	8017cc6 <sniprintf+0x16>
 8017d0a:	9b02      	ldr	r3, [sp, #8]
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	701a      	strb	r2, [r3, #0]
 8017d10:	e7d9      	b.n	8017cc6 <sniprintf+0x16>
 8017d12:	bf00      	nop
 8017d14:	200001c8 	.word	0x200001c8

08017d18 <__sread>:
 8017d18:	b510      	push	{r4, lr}
 8017d1a:	460c      	mov	r4, r1
 8017d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d20:	f000 f900 	bl	8017f24 <_read_r>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	bfab      	itete	ge
 8017d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8017d2c:	181b      	addge	r3, r3, r0
 8017d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017d32:	bfac      	ite	ge
 8017d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017d36:	81a3      	strhlt	r3, [r4, #12]
 8017d38:	bd10      	pop	{r4, pc}

08017d3a <__swrite>:
 8017d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3e:	461f      	mov	r7, r3
 8017d40:	898b      	ldrh	r3, [r1, #12]
 8017d42:	05db      	lsls	r3, r3, #23
 8017d44:	4605      	mov	r5, r0
 8017d46:	460c      	mov	r4, r1
 8017d48:	4616      	mov	r6, r2
 8017d4a:	d505      	bpl.n	8017d58 <__swrite+0x1e>
 8017d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d50:	2302      	movs	r3, #2
 8017d52:	2200      	movs	r2, #0
 8017d54:	f000 f8d4 	bl	8017f00 <_lseek_r>
 8017d58:	89a3      	ldrh	r3, [r4, #12]
 8017d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017d62:	81a3      	strh	r3, [r4, #12]
 8017d64:	4632      	mov	r2, r6
 8017d66:	463b      	mov	r3, r7
 8017d68:	4628      	mov	r0, r5
 8017d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d6e:	f000 b8fb 	b.w	8017f68 <_write_r>

08017d72 <__sseek>:
 8017d72:	b510      	push	{r4, lr}
 8017d74:	460c      	mov	r4, r1
 8017d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d7a:	f000 f8c1 	bl	8017f00 <_lseek_r>
 8017d7e:	1c43      	adds	r3, r0, #1
 8017d80:	89a3      	ldrh	r3, [r4, #12]
 8017d82:	bf15      	itete	ne
 8017d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017d8e:	81a3      	strheq	r3, [r4, #12]
 8017d90:	bf18      	it	ne
 8017d92:	81a3      	strhne	r3, [r4, #12]
 8017d94:	bd10      	pop	{r4, pc}

08017d96 <__sclose>:
 8017d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d9a:	f000 b8a1 	b.w	8017ee0 <_close_r>

08017d9e <_vsniprintf_r>:
 8017d9e:	b530      	push	{r4, r5, lr}
 8017da0:	4614      	mov	r4, r2
 8017da2:	2c00      	cmp	r4, #0
 8017da4:	b09b      	sub	sp, #108	@ 0x6c
 8017da6:	4605      	mov	r5, r0
 8017da8:	461a      	mov	r2, r3
 8017daa:	da05      	bge.n	8017db8 <_vsniprintf_r+0x1a>
 8017dac:	238b      	movs	r3, #139	@ 0x8b
 8017dae:	6003      	str	r3, [r0, #0]
 8017db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017db4:	b01b      	add	sp, #108	@ 0x6c
 8017db6:	bd30      	pop	{r4, r5, pc}
 8017db8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017dbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017dc0:	bf14      	ite	ne
 8017dc2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017dc6:	4623      	moveq	r3, r4
 8017dc8:	9302      	str	r3, [sp, #8]
 8017dca:	9305      	str	r3, [sp, #20]
 8017dcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017dd0:	9100      	str	r1, [sp, #0]
 8017dd2:	9104      	str	r1, [sp, #16]
 8017dd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017dd8:	4669      	mov	r1, sp
 8017dda:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017ddc:	f000 f9f2 	bl	80181c4 <_svfiprintf_r>
 8017de0:	1c43      	adds	r3, r0, #1
 8017de2:	bfbc      	itt	lt
 8017de4:	238b      	movlt	r3, #139	@ 0x8b
 8017de6:	602b      	strlt	r3, [r5, #0]
 8017de8:	2c00      	cmp	r4, #0
 8017dea:	d0e3      	beq.n	8017db4 <_vsniprintf_r+0x16>
 8017dec:	9b00      	ldr	r3, [sp, #0]
 8017dee:	2200      	movs	r2, #0
 8017df0:	701a      	strb	r2, [r3, #0]
 8017df2:	e7df      	b.n	8017db4 <_vsniprintf_r+0x16>

08017df4 <vsniprintf>:
 8017df4:	b507      	push	{r0, r1, r2, lr}
 8017df6:	9300      	str	r3, [sp, #0]
 8017df8:	4613      	mov	r3, r2
 8017dfa:	460a      	mov	r2, r1
 8017dfc:	4601      	mov	r1, r0
 8017dfe:	4803      	ldr	r0, [pc, #12]	@ (8017e0c <vsniprintf+0x18>)
 8017e00:	6800      	ldr	r0, [r0, #0]
 8017e02:	f7ff ffcc 	bl	8017d9e <_vsniprintf_r>
 8017e06:	b003      	add	sp, #12
 8017e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e0c:	200001c8 	.word	0x200001c8

08017e10 <memcmp>:
 8017e10:	b510      	push	{r4, lr}
 8017e12:	3901      	subs	r1, #1
 8017e14:	4402      	add	r2, r0
 8017e16:	4290      	cmp	r0, r2
 8017e18:	d101      	bne.n	8017e1e <memcmp+0xe>
 8017e1a:	2000      	movs	r0, #0
 8017e1c:	e005      	b.n	8017e2a <memcmp+0x1a>
 8017e1e:	7803      	ldrb	r3, [r0, #0]
 8017e20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017e24:	42a3      	cmp	r3, r4
 8017e26:	d001      	beq.n	8017e2c <memcmp+0x1c>
 8017e28:	1b18      	subs	r0, r3, r4
 8017e2a:	bd10      	pop	{r4, pc}
 8017e2c:	3001      	adds	r0, #1
 8017e2e:	e7f2      	b.n	8017e16 <memcmp+0x6>

08017e30 <memmove>:
 8017e30:	4288      	cmp	r0, r1
 8017e32:	b510      	push	{r4, lr}
 8017e34:	eb01 0402 	add.w	r4, r1, r2
 8017e38:	d902      	bls.n	8017e40 <memmove+0x10>
 8017e3a:	4284      	cmp	r4, r0
 8017e3c:	4623      	mov	r3, r4
 8017e3e:	d807      	bhi.n	8017e50 <memmove+0x20>
 8017e40:	1e43      	subs	r3, r0, #1
 8017e42:	42a1      	cmp	r1, r4
 8017e44:	d008      	beq.n	8017e58 <memmove+0x28>
 8017e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e4e:	e7f8      	b.n	8017e42 <memmove+0x12>
 8017e50:	4402      	add	r2, r0
 8017e52:	4601      	mov	r1, r0
 8017e54:	428a      	cmp	r2, r1
 8017e56:	d100      	bne.n	8017e5a <memmove+0x2a>
 8017e58:	bd10      	pop	{r4, pc}
 8017e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e62:	e7f7      	b.n	8017e54 <memmove+0x24>

08017e64 <memset>:
 8017e64:	4402      	add	r2, r0
 8017e66:	4603      	mov	r3, r0
 8017e68:	4293      	cmp	r3, r2
 8017e6a:	d100      	bne.n	8017e6e <memset+0xa>
 8017e6c:	4770      	bx	lr
 8017e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8017e72:	e7f9      	b.n	8017e68 <memset+0x4>

08017e74 <strchr>:
 8017e74:	b2c9      	uxtb	r1, r1
 8017e76:	4603      	mov	r3, r0
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e7e:	b112      	cbz	r2, 8017e86 <strchr+0x12>
 8017e80:	428a      	cmp	r2, r1
 8017e82:	d1f9      	bne.n	8017e78 <strchr+0x4>
 8017e84:	4770      	bx	lr
 8017e86:	2900      	cmp	r1, #0
 8017e88:	bf18      	it	ne
 8017e8a:	2000      	movne	r0, #0
 8017e8c:	4770      	bx	lr

08017e8e <strncmp>:
 8017e8e:	b510      	push	{r4, lr}
 8017e90:	b16a      	cbz	r2, 8017eae <strncmp+0x20>
 8017e92:	3901      	subs	r1, #1
 8017e94:	1884      	adds	r4, r0, r2
 8017e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017e9e:	429a      	cmp	r2, r3
 8017ea0:	d103      	bne.n	8017eaa <strncmp+0x1c>
 8017ea2:	42a0      	cmp	r0, r4
 8017ea4:	d001      	beq.n	8017eaa <strncmp+0x1c>
 8017ea6:	2a00      	cmp	r2, #0
 8017ea8:	d1f5      	bne.n	8017e96 <strncmp+0x8>
 8017eaa:	1ad0      	subs	r0, r2, r3
 8017eac:	bd10      	pop	{r4, pc}
 8017eae:	4610      	mov	r0, r2
 8017eb0:	e7fc      	b.n	8017eac <strncmp+0x1e>

08017eb2 <strstr>:
 8017eb2:	780a      	ldrb	r2, [r1, #0]
 8017eb4:	b570      	push	{r4, r5, r6, lr}
 8017eb6:	b96a      	cbnz	r2, 8017ed4 <strstr+0x22>
 8017eb8:	bd70      	pop	{r4, r5, r6, pc}
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d109      	bne.n	8017ed2 <strstr+0x20>
 8017ebe:	460c      	mov	r4, r1
 8017ec0:	4605      	mov	r5, r0
 8017ec2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d0f6      	beq.n	8017eb8 <strstr+0x6>
 8017eca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017ece:	429e      	cmp	r6, r3
 8017ed0:	d0f7      	beq.n	8017ec2 <strstr+0x10>
 8017ed2:	3001      	adds	r0, #1
 8017ed4:	7803      	ldrb	r3, [r0, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d1ef      	bne.n	8017eba <strstr+0x8>
 8017eda:	4618      	mov	r0, r3
 8017edc:	e7ec      	b.n	8017eb8 <strstr+0x6>
	...

08017ee0 <_close_r>:
 8017ee0:	b538      	push	{r3, r4, r5, lr}
 8017ee2:	4d06      	ldr	r5, [pc, #24]	@ (8017efc <_close_r+0x1c>)
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	4604      	mov	r4, r0
 8017ee8:	4608      	mov	r0, r1
 8017eea:	602b      	str	r3, [r5, #0]
 8017eec:	f7e9 ff82 	bl	8001df4 <_close>
 8017ef0:	1c43      	adds	r3, r0, #1
 8017ef2:	d102      	bne.n	8017efa <_close_r+0x1a>
 8017ef4:	682b      	ldr	r3, [r5, #0]
 8017ef6:	b103      	cbz	r3, 8017efa <_close_r+0x1a>
 8017ef8:	6023      	str	r3, [r4, #0]
 8017efa:	bd38      	pop	{r3, r4, r5, pc}
 8017efc:	2000cd90 	.word	0x2000cd90

08017f00 <_lseek_r>:
 8017f00:	b538      	push	{r3, r4, r5, lr}
 8017f02:	4d07      	ldr	r5, [pc, #28]	@ (8017f20 <_lseek_r+0x20>)
 8017f04:	4604      	mov	r4, r0
 8017f06:	4608      	mov	r0, r1
 8017f08:	4611      	mov	r1, r2
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	602a      	str	r2, [r5, #0]
 8017f0e:	461a      	mov	r2, r3
 8017f10:	f7e9 ff97 	bl	8001e42 <_lseek>
 8017f14:	1c43      	adds	r3, r0, #1
 8017f16:	d102      	bne.n	8017f1e <_lseek_r+0x1e>
 8017f18:	682b      	ldr	r3, [r5, #0]
 8017f1a:	b103      	cbz	r3, 8017f1e <_lseek_r+0x1e>
 8017f1c:	6023      	str	r3, [r4, #0]
 8017f1e:	bd38      	pop	{r3, r4, r5, pc}
 8017f20:	2000cd90 	.word	0x2000cd90

08017f24 <_read_r>:
 8017f24:	b538      	push	{r3, r4, r5, lr}
 8017f26:	4d07      	ldr	r5, [pc, #28]	@ (8017f44 <_read_r+0x20>)
 8017f28:	4604      	mov	r4, r0
 8017f2a:	4608      	mov	r0, r1
 8017f2c:	4611      	mov	r1, r2
 8017f2e:	2200      	movs	r2, #0
 8017f30:	602a      	str	r2, [r5, #0]
 8017f32:	461a      	mov	r2, r3
 8017f34:	f7e9 ff25 	bl	8001d82 <_read>
 8017f38:	1c43      	adds	r3, r0, #1
 8017f3a:	d102      	bne.n	8017f42 <_read_r+0x1e>
 8017f3c:	682b      	ldr	r3, [r5, #0]
 8017f3e:	b103      	cbz	r3, 8017f42 <_read_r+0x1e>
 8017f40:	6023      	str	r3, [r4, #0]
 8017f42:	bd38      	pop	{r3, r4, r5, pc}
 8017f44:	2000cd90 	.word	0x2000cd90

08017f48 <_sbrk_r>:
 8017f48:	b538      	push	{r3, r4, r5, lr}
 8017f4a:	4d06      	ldr	r5, [pc, #24]	@ (8017f64 <_sbrk_r+0x1c>)
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	4604      	mov	r4, r0
 8017f50:	4608      	mov	r0, r1
 8017f52:	602b      	str	r3, [r5, #0]
 8017f54:	f7e9 ff82 	bl	8001e5c <_sbrk>
 8017f58:	1c43      	adds	r3, r0, #1
 8017f5a:	d102      	bne.n	8017f62 <_sbrk_r+0x1a>
 8017f5c:	682b      	ldr	r3, [r5, #0]
 8017f5e:	b103      	cbz	r3, 8017f62 <_sbrk_r+0x1a>
 8017f60:	6023      	str	r3, [r4, #0]
 8017f62:	bd38      	pop	{r3, r4, r5, pc}
 8017f64:	2000cd90 	.word	0x2000cd90

08017f68 <_write_r>:
 8017f68:	b538      	push	{r3, r4, r5, lr}
 8017f6a:	4d07      	ldr	r5, [pc, #28]	@ (8017f88 <_write_r+0x20>)
 8017f6c:	4604      	mov	r4, r0
 8017f6e:	4608      	mov	r0, r1
 8017f70:	4611      	mov	r1, r2
 8017f72:	2200      	movs	r2, #0
 8017f74:	602a      	str	r2, [r5, #0]
 8017f76:	461a      	mov	r2, r3
 8017f78:	f7e9 ff20 	bl	8001dbc <_write>
 8017f7c:	1c43      	adds	r3, r0, #1
 8017f7e:	d102      	bne.n	8017f86 <_write_r+0x1e>
 8017f80:	682b      	ldr	r3, [r5, #0]
 8017f82:	b103      	cbz	r3, 8017f86 <_write_r+0x1e>
 8017f84:	6023      	str	r3, [r4, #0]
 8017f86:	bd38      	pop	{r3, r4, r5, pc}
 8017f88:	2000cd90 	.word	0x2000cd90

08017f8c <__errno>:
 8017f8c:	4b01      	ldr	r3, [pc, #4]	@ (8017f94 <__errno+0x8>)
 8017f8e:	6818      	ldr	r0, [r3, #0]
 8017f90:	4770      	bx	lr
 8017f92:	bf00      	nop
 8017f94:	200001c8 	.word	0x200001c8

08017f98 <__libc_init_array>:
 8017f98:	b570      	push	{r4, r5, r6, lr}
 8017f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8017fd0 <__libc_init_array+0x38>)
 8017f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8017fd4 <__libc_init_array+0x3c>)
 8017f9e:	1b64      	subs	r4, r4, r5
 8017fa0:	10a4      	asrs	r4, r4, #2
 8017fa2:	2600      	movs	r6, #0
 8017fa4:	42a6      	cmp	r6, r4
 8017fa6:	d109      	bne.n	8017fbc <__libc_init_array+0x24>
 8017fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8017fd8 <__libc_init_array+0x40>)
 8017faa:	4c0c      	ldr	r4, [pc, #48]	@ (8017fdc <__libc_init_array+0x44>)
 8017fac:	f000 fef8 	bl	8018da0 <_init>
 8017fb0:	1b64      	subs	r4, r4, r5
 8017fb2:	10a4      	asrs	r4, r4, #2
 8017fb4:	2600      	movs	r6, #0
 8017fb6:	42a6      	cmp	r6, r4
 8017fb8:	d105      	bne.n	8017fc6 <__libc_init_array+0x2e>
 8017fba:	bd70      	pop	{r4, r5, r6, pc}
 8017fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fc0:	4798      	blx	r3
 8017fc2:	3601      	adds	r6, #1
 8017fc4:	e7ee      	b.n	8017fa4 <__libc_init_array+0xc>
 8017fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fca:	4798      	blx	r3
 8017fcc:	3601      	adds	r6, #1
 8017fce:	e7f2      	b.n	8017fb6 <__libc_init_array+0x1e>
 8017fd0:	08019db4 	.word	0x08019db4
 8017fd4:	08019db4 	.word	0x08019db4
 8017fd8:	08019db4 	.word	0x08019db4
 8017fdc:	08019dc4 	.word	0x08019dc4

08017fe0 <__retarget_lock_init_recursive>:
 8017fe0:	4770      	bx	lr

08017fe2 <__retarget_lock_acquire_recursive>:
 8017fe2:	4770      	bx	lr

08017fe4 <__retarget_lock_release_recursive>:
 8017fe4:	4770      	bx	lr

08017fe6 <strcpy>:
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017fec:	f803 2b01 	strb.w	r2, [r3], #1
 8017ff0:	2a00      	cmp	r2, #0
 8017ff2:	d1f9      	bne.n	8017fe8 <strcpy+0x2>
 8017ff4:	4770      	bx	lr

08017ff6 <memcpy>:
 8017ff6:	440a      	add	r2, r1
 8017ff8:	4291      	cmp	r1, r2
 8017ffa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017ffe:	d100      	bne.n	8018002 <memcpy+0xc>
 8018000:	4770      	bx	lr
 8018002:	b510      	push	{r4, lr}
 8018004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018008:	f803 4f01 	strb.w	r4, [r3, #1]!
 801800c:	4291      	cmp	r1, r2
 801800e:	d1f9      	bne.n	8018004 <memcpy+0xe>
 8018010:	bd10      	pop	{r4, pc}
	...

08018014 <__assert_func>:
 8018014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018016:	4614      	mov	r4, r2
 8018018:	461a      	mov	r2, r3
 801801a:	4b09      	ldr	r3, [pc, #36]	@ (8018040 <__assert_func+0x2c>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	4605      	mov	r5, r0
 8018020:	68d8      	ldr	r0, [r3, #12]
 8018022:	b954      	cbnz	r4, 801803a <__assert_func+0x26>
 8018024:	4b07      	ldr	r3, [pc, #28]	@ (8018044 <__assert_func+0x30>)
 8018026:	461c      	mov	r4, r3
 8018028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801802c:	9100      	str	r1, [sp, #0]
 801802e:	462b      	mov	r3, r5
 8018030:	4905      	ldr	r1, [pc, #20]	@ (8018048 <__assert_func+0x34>)
 8018032:	f000 fd3f 	bl	8018ab4 <fiprintf>
 8018036:	f000 fde3 	bl	8018c00 <abort>
 801803a:	4b04      	ldr	r3, [pc, #16]	@ (801804c <__assert_func+0x38>)
 801803c:	e7f4      	b.n	8018028 <__assert_func+0x14>
 801803e:	bf00      	nop
 8018040:	200001c8 	.word	0x200001c8
 8018044:	08019d77 	.word	0x08019d77
 8018048:	08019d49 	.word	0x08019d49
 801804c:	08019d3c 	.word	0x08019d3c

08018050 <__env_lock>:
 8018050:	4801      	ldr	r0, [pc, #4]	@ (8018058 <__env_lock+0x8>)
 8018052:	f7ff bfc6 	b.w	8017fe2 <__retarget_lock_acquire_recursive>
 8018056:	bf00      	nop
 8018058:	2000cd94 	.word	0x2000cd94

0801805c <__env_unlock>:
 801805c:	4801      	ldr	r0, [pc, #4]	@ (8018064 <__env_unlock+0x8>)
 801805e:	f7ff bfc1 	b.w	8017fe4 <__retarget_lock_release_recursive>
 8018062:	bf00      	nop
 8018064:	2000cd94 	.word	0x2000cd94

08018068 <_free_r>:
 8018068:	b538      	push	{r3, r4, r5, lr}
 801806a:	4605      	mov	r5, r0
 801806c:	2900      	cmp	r1, #0
 801806e:	d041      	beq.n	80180f4 <_free_r+0x8c>
 8018070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018074:	1f0c      	subs	r4, r1, #4
 8018076:	2b00      	cmp	r3, #0
 8018078:	bfb8      	it	lt
 801807a:	18e4      	addlt	r4, r4, r3
 801807c:	f7ff fc1e 	bl	80178bc <__malloc_lock>
 8018080:	4a1d      	ldr	r2, [pc, #116]	@ (80180f8 <_free_r+0x90>)
 8018082:	6813      	ldr	r3, [r2, #0]
 8018084:	b933      	cbnz	r3, 8018094 <_free_r+0x2c>
 8018086:	6063      	str	r3, [r4, #4]
 8018088:	6014      	str	r4, [r2, #0]
 801808a:	4628      	mov	r0, r5
 801808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018090:	f7ff bc1a 	b.w	80178c8 <__malloc_unlock>
 8018094:	42a3      	cmp	r3, r4
 8018096:	d908      	bls.n	80180aa <_free_r+0x42>
 8018098:	6820      	ldr	r0, [r4, #0]
 801809a:	1821      	adds	r1, r4, r0
 801809c:	428b      	cmp	r3, r1
 801809e:	bf01      	itttt	eq
 80180a0:	6819      	ldreq	r1, [r3, #0]
 80180a2:	685b      	ldreq	r3, [r3, #4]
 80180a4:	1809      	addeq	r1, r1, r0
 80180a6:	6021      	streq	r1, [r4, #0]
 80180a8:	e7ed      	b.n	8018086 <_free_r+0x1e>
 80180aa:	461a      	mov	r2, r3
 80180ac:	685b      	ldr	r3, [r3, #4]
 80180ae:	b10b      	cbz	r3, 80180b4 <_free_r+0x4c>
 80180b0:	42a3      	cmp	r3, r4
 80180b2:	d9fa      	bls.n	80180aa <_free_r+0x42>
 80180b4:	6811      	ldr	r1, [r2, #0]
 80180b6:	1850      	adds	r0, r2, r1
 80180b8:	42a0      	cmp	r0, r4
 80180ba:	d10b      	bne.n	80180d4 <_free_r+0x6c>
 80180bc:	6820      	ldr	r0, [r4, #0]
 80180be:	4401      	add	r1, r0
 80180c0:	1850      	adds	r0, r2, r1
 80180c2:	4283      	cmp	r3, r0
 80180c4:	6011      	str	r1, [r2, #0]
 80180c6:	d1e0      	bne.n	801808a <_free_r+0x22>
 80180c8:	6818      	ldr	r0, [r3, #0]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	6053      	str	r3, [r2, #4]
 80180ce:	4408      	add	r0, r1
 80180d0:	6010      	str	r0, [r2, #0]
 80180d2:	e7da      	b.n	801808a <_free_r+0x22>
 80180d4:	d902      	bls.n	80180dc <_free_r+0x74>
 80180d6:	230c      	movs	r3, #12
 80180d8:	602b      	str	r3, [r5, #0]
 80180da:	e7d6      	b.n	801808a <_free_r+0x22>
 80180dc:	6820      	ldr	r0, [r4, #0]
 80180de:	1821      	adds	r1, r4, r0
 80180e0:	428b      	cmp	r3, r1
 80180e2:	bf04      	itt	eq
 80180e4:	6819      	ldreq	r1, [r3, #0]
 80180e6:	685b      	ldreq	r3, [r3, #4]
 80180e8:	6063      	str	r3, [r4, #4]
 80180ea:	bf04      	itt	eq
 80180ec:	1809      	addeq	r1, r1, r0
 80180ee:	6021      	streq	r1, [r4, #0]
 80180f0:	6054      	str	r4, [r2, #4]
 80180f2:	e7ca      	b.n	801808a <_free_r+0x22>
 80180f4:	bd38      	pop	{r3, r4, r5, pc}
 80180f6:	bf00      	nop
 80180f8:	2000cc50 	.word	0x2000cc50

080180fc <_malloc_usable_size_r>:
 80180fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018100:	1f18      	subs	r0, r3, #4
 8018102:	2b00      	cmp	r3, #0
 8018104:	bfbc      	itt	lt
 8018106:	580b      	ldrlt	r3, [r1, r0]
 8018108:	18c0      	addlt	r0, r0, r3
 801810a:	4770      	bx	lr

0801810c <__ssputs_r>:
 801810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018110:	688e      	ldr	r6, [r1, #8]
 8018112:	461f      	mov	r7, r3
 8018114:	42be      	cmp	r6, r7
 8018116:	680b      	ldr	r3, [r1, #0]
 8018118:	4682      	mov	sl, r0
 801811a:	460c      	mov	r4, r1
 801811c:	4690      	mov	r8, r2
 801811e:	d82d      	bhi.n	801817c <__ssputs_r+0x70>
 8018120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018128:	d026      	beq.n	8018178 <__ssputs_r+0x6c>
 801812a:	6965      	ldr	r5, [r4, #20]
 801812c:	6909      	ldr	r1, [r1, #16]
 801812e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018132:	eba3 0901 	sub.w	r9, r3, r1
 8018136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801813a:	1c7b      	adds	r3, r7, #1
 801813c:	444b      	add	r3, r9
 801813e:	106d      	asrs	r5, r5, #1
 8018140:	429d      	cmp	r5, r3
 8018142:	bf38      	it	cc
 8018144:	461d      	movcc	r5, r3
 8018146:	0553      	lsls	r3, r2, #21
 8018148:	d527      	bpl.n	801819a <__ssputs_r+0x8e>
 801814a:	4629      	mov	r1, r5
 801814c:	f7ff fb36 	bl	80177bc <_malloc_r>
 8018150:	4606      	mov	r6, r0
 8018152:	b360      	cbz	r0, 80181ae <__ssputs_r+0xa2>
 8018154:	6921      	ldr	r1, [r4, #16]
 8018156:	464a      	mov	r2, r9
 8018158:	f7ff ff4d 	bl	8017ff6 <memcpy>
 801815c:	89a3      	ldrh	r3, [r4, #12]
 801815e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018166:	81a3      	strh	r3, [r4, #12]
 8018168:	6126      	str	r6, [r4, #16]
 801816a:	6165      	str	r5, [r4, #20]
 801816c:	444e      	add	r6, r9
 801816e:	eba5 0509 	sub.w	r5, r5, r9
 8018172:	6026      	str	r6, [r4, #0]
 8018174:	60a5      	str	r5, [r4, #8]
 8018176:	463e      	mov	r6, r7
 8018178:	42be      	cmp	r6, r7
 801817a:	d900      	bls.n	801817e <__ssputs_r+0x72>
 801817c:	463e      	mov	r6, r7
 801817e:	6820      	ldr	r0, [r4, #0]
 8018180:	4632      	mov	r2, r6
 8018182:	4641      	mov	r1, r8
 8018184:	f7ff fe54 	bl	8017e30 <memmove>
 8018188:	68a3      	ldr	r3, [r4, #8]
 801818a:	1b9b      	subs	r3, r3, r6
 801818c:	60a3      	str	r3, [r4, #8]
 801818e:	6823      	ldr	r3, [r4, #0]
 8018190:	4433      	add	r3, r6
 8018192:	6023      	str	r3, [r4, #0]
 8018194:	2000      	movs	r0, #0
 8018196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801819a:	462a      	mov	r2, r5
 801819c:	f7ff fc0e 	bl	80179bc <_realloc_r>
 80181a0:	4606      	mov	r6, r0
 80181a2:	2800      	cmp	r0, #0
 80181a4:	d1e0      	bne.n	8018168 <__ssputs_r+0x5c>
 80181a6:	6921      	ldr	r1, [r4, #16]
 80181a8:	4650      	mov	r0, sl
 80181aa:	f7ff ff5d 	bl	8018068 <_free_r>
 80181ae:	230c      	movs	r3, #12
 80181b0:	f8ca 3000 	str.w	r3, [sl]
 80181b4:	89a3      	ldrh	r3, [r4, #12]
 80181b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181ba:	81a3      	strh	r3, [r4, #12]
 80181bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181c0:	e7e9      	b.n	8018196 <__ssputs_r+0x8a>
	...

080181c4 <_svfiprintf_r>:
 80181c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c8:	4698      	mov	r8, r3
 80181ca:	898b      	ldrh	r3, [r1, #12]
 80181cc:	061b      	lsls	r3, r3, #24
 80181ce:	b09d      	sub	sp, #116	@ 0x74
 80181d0:	4607      	mov	r7, r0
 80181d2:	460d      	mov	r5, r1
 80181d4:	4614      	mov	r4, r2
 80181d6:	d510      	bpl.n	80181fa <_svfiprintf_r+0x36>
 80181d8:	690b      	ldr	r3, [r1, #16]
 80181da:	b973      	cbnz	r3, 80181fa <_svfiprintf_r+0x36>
 80181dc:	2140      	movs	r1, #64	@ 0x40
 80181de:	f7ff faed 	bl	80177bc <_malloc_r>
 80181e2:	6028      	str	r0, [r5, #0]
 80181e4:	6128      	str	r0, [r5, #16]
 80181e6:	b930      	cbnz	r0, 80181f6 <_svfiprintf_r+0x32>
 80181e8:	230c      	movs	r3, #12
 80181ea:	603b      	str	r3, [r7, #0]
 80181ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181f0:	b01d      	add	sp, #116	@ 0x74
 80181f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f6:	2340      	movs	r3, #64	@ 0x40
 80181f8:	616b      	str	r3, [r5, #20]
 80181fa:	2300      	movs	r3, #0
 80181fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80181fe:	2320      	movs	r3, #32
 8018200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018204:	f8cd 800c 	str.w	r8, [sp, #12]
 8018208:	2330      	movs	r3, #48	@ 0x30
 801820a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80183a8 <_svfiprintf_r+0x1e4>
 801820e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018212:	f04f 0901 	mov.w	r9, #1
 8018216:	4623      	mov	r3, r4
 8018218:	469a      	mov	sl, r3
 801821a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801821e:	b10a      	cbz	r2, 8018224 <_svfiprintf_r+0x60>
 8018220:	2a25      	cmp	r2, #37	@ 0x25
 8018222:	d1f9      	bne.n	8018218 <_svfiprintf_r+0x54>
 8018224:	ebba 0b04 	subs.w	fp, sl, r4
 8018228:	d00b      	beq.n	8018242 <_svfiprintf_r+0x7e>
 801822a:	465b      	mov	r3, fp
 801822c:	4622      	mov	r2, r4
 801822e:	4629      	mov	r1, r5
 8018230:	4638      	mov	r0, r7
 8018232:	f7ff ff6b 	bl	801810c <__ssputs_r>
 8018236:	3001      	adds	r0, #1
 8018238:	f000 80a7 	beq.w	801838a <_svfiprintf_r+0x1c6>
 801823c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801823e:	445a      	add	r2, fp
 8018240:	9209      	str	r2, [sp, #36]	@ 0x24
 8018242:	f89a 3000 	ldrb.w	r3, [sl]
 8018246:	2b00      	cmp	r3, #0
 8018248:	f000 809f 	beq.w	801838a <_svfiprintf_r+0x1c6>
 801824c:	2300      	movs	r3, #0
 801824e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018256:	f10a 0a01 	add.w	sl, sl, #1
 801825a:	9304      	str	r3, [sp, #16]
 801825c:	9307      	str	r3, [sp, #28]
 801825e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018262:	931a      	str	r3, [sp, #104]	@ 0x68
 8018264:	4654      	mov	r4, sl
 8018266:	2205      	movs	r2, #5
 8018268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801826c:	484e      	ldr	r0, [pc, #312]	@ (80183a8 <_svfiprintf_r+0x1e4>)
 801826e:	f7e7 ffef 	bl	8000250 <memchr>
 8018272:	9a04      	ldr	r2, [sp, #16]
 8018274:	b9d8      	cbnz	r0, 80182ae <_svfiprintf_r+0xea>
 8018276:	06d0      	lsls	r0, r2, #27
 8018278:	bf44      	itt	mi
 801827a:	2320      	movmi	r3, #32
 801827c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018280:	0711      	lsls	r1, r2, #28
 8018282:	bf44      	itt	mi
 8018284:	232b      	movmi	r3, #43	@ 0x2b
 8018286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801828a:	f89a 3000 	ldrb.w	r3, [sl]
 801828e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018290:	d015      	beq.n	80182be <_svfiprintf_r+0xfa>
 8018292:	9a07      	ldr	r2, [sp, #28]
 8018294:	4654      	mov	r4, sl
 8018296:	2000      	movs	r0, #0
 8018298:	f04f 0c0a 	mov.w	ip, #10
 801829c:	4621      	mov	r1, r4
 801829e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182a2:	3b30      	subs	r3, #48	@ 0x30
 80182a4:	2b09      	cmp	r3, #9
 80182a6:	d94b      	bls.n	8018340 <_svfiprintf_r+0x17c>
 80182a8:	b1b0      	cbz	r0, 80182d8 <_svfiprintf_r+0x114>
 80182aa:	9207      	str	r2, [sp, #28]
 80182ac:	e014      	b.n	80182d8 <_svfiprintf_r+0x114>
 80182ae:	eba0 0308 	sub.w	r3, r0, r8
 80182b2:	fa09 f303 	lsl.w	r3, r9, r3
 80182b6:	4313      	orrs	r3, r2
 80182b8:	9304      	str	r3, [sp, #16]
 80182ba:	46a2      	mov	sl, r4
 80182bc:	e7d2      	b.n	8018264 <_svfiprintf_r+0xa0>
 80182be:	9b03      	ldr	r3, [sp, #12]
 80182c0:	1d19      	adds	r1, r3, #4
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	9103      	str	r1, [sp, #12]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	bfbb      	ittet	lt
 80182ca:	425b      	neglt	r3, r3
 80182cc:	f042 0202 	orrlt.w	r2, r2, #2
 80182d0:	9307      	strge	r3, [sp, #28]
 80182d2:	9307      	strlt	r3, [sp, #28]
 80182d4:	bfb8      	it	lt
 80182d6:	9204      	strlt	r2, [sp, #16]
 80182d8:	7823      	ldrb	r3, [r4, #0]
 80182da:	2b2e      	cmp	r3, #46	@ 0x2e
 80182dc:	d10a      	bne.n	80182f4 <_svfiprintf_r+0x130>
 80182de:	7863      	ldrb	r3, [r4, #1]
 80182e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80182e2:	d132      	bne.n	801834a <_svfiprintf_r+0x186>
 80182e4:	9b03      	ldr	r3, [sp, #12]
 80182e6:	1d1a      	adds	r2, r3, #4
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	9203      	str	r2, [sp, #12]
 80182ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182f0:	3402      	adds	r4, #2
 80182f2:	9305      	str	r3, [sp, #20]
 80182f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80183b8 <_svfiprintf_r+0x1f4>
 80182f8:	7821      	ldrb	r1, [r4, #0]
 80182fa:	2203      	movs	r2, #3
 80182fc:	4650      	mov	r0, sl
 80182fe:	f7e7 ffa7 	bl	8000250 <memchr>
 8018302:	b138      	cbz	r0, 8018314 <_svfiprintf_r+0x150>
 8018304:	9b04      	ldr	r3, [sp, #16]
 8018306:	eba0 000a 	sub.w	r0, r0, sl
 801830a:	2240      	movs	r2, #64	@ 0x40
 801830c:	4082      	lsls	r2, r0
 801830e:	4313      	orrs	r3, r2
 8018310:	3401      	adds	r4, #1
 8018312:	9304      	str	r3, [sp, #16]
 8018314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018318:	4824      	ldr	r0, [pc, #144]	@ (80183ac <_svfiprintf_r+0x1e8>)
 801831a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801831e:	2206      	movs	r2, #6
 8018320:	f7e7 ff96 	bl	8000250 <memchr>
 8018324:	2800      	cmp	r0, #0
 8018326:	d036      	beq.n	8018396 <_svfiprintf_r+0x1d2>
 8018328:	4b21      	ldr	r3, [pc, #132]	@ (80183b0 <_svfiprintf_r+0x1ec>)
 801832a:	bb1b      	cbnz	r3, 8018374 <_svfiprintf_r+0x1b0>
 801832c:	9b03      	ldr	r3, [sp, #12]
 801832e:	3307      	adds	r3, #7
 8018330:	f023 0307 	bic.w	r3, r3, #7
 8018334:	3308      	adds	r3, #8
 8018336:	9303      	str	r3, [sp, #12]
 8018338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801833a:	4433      	add	r3, r6
 801833c:	9309      	str	r3, [sp, #36]	@ 0x24
 801833e:	e76a      	b.n	8018216 <_svfiprintf_r+0x52>
 8018340:	fb0c 3202 	mla	r2, ip, r2, r3
 8018344:	460c      	mov	r4, r1
 8018346:	2001      	movs	r0, #1
 8018348:	e7a8      	b.n	801829c <_svfiprintf_r+0xd8>
 801834a:	2300      	movs	r3, #0
 801834c:	3401      	adds	r4, #1
 801834e:	9305      	str	r3, [sp, #20]
 8018350:	4619      	mov	r1, r3
 8018352:	f04f 0c0a 	mov.w	ip, #10
 8018356:	4620      	mov	r0, r4
 8018358:	f810 2b01 	ldrb.w	r2, [r0], #1
 801835c:	3a30      	subs	r2, #48	@ 0x30
 801835e:	2a09      	cmp	r2, #9
 8018360:	d903      	bls.n	801836a <_svfiprintf_r+0x1a6>
 8018362:	2b00      	cmp	r3, #0
 8018364:	d0c6      	beq.n	80182f4 <_svfiprintf_r+0x130>
 8018366:	9105      	str	r1, [sp, #20]
 8018368:	e7c4      	b.n	80182f4 <_svfiprintf_r+0x130>
 801836a:	fb0c 2101 	mla	r1, ip, r1, r2
 801836e:	4604      	mov	r4, r0
 8018370:	2301      	movs	r3, #1
 8018372:	e7f0      	b.n	8018356 <_svfiprintf_r+0x192>
 8018374:	ab03      	add	r3, sp, #12
 8018376:	9300      	str	r3, [sp, #0]
 8018378:	462a      	mov	r2, r5
 801837a:	4b0e      	ldr	r3, [pc, #56]	@ (80183b4 <_svfiprintf_r+0x1f0>)
 801837c:	a904      	add	r1, sp, #16
 801837e:	4638      	mov	r0, r7
 8018380:	f3af 8000 	nop.w
 8018384:	1c42      	adds	r2, r0, #1
 8018386:	4606      	mov	r6, r0
 8018388:	d1d6      	bne.n	8018338 <_svfiprintf_r+0x174>
 801838a:	89ab      	ldrh	r3, [r5, #12]
 801838c:	065b      	lsls	r3, r3, #25
 801838e:	f53f af2d 	bmi.w	80181ec <_svfiprintf_r+0x28>
 8018392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018394:	e72c      	b.n	80181f0 <_svfiprintf_r+0x2c>
 8018396:	ab03      	add	r3, sp, #12
 8018398:	9300      	str	r3, [sp, #0]
 801839a:	462a      	mov	r2, r5
 801839c:	4b05      	ldr	r3, [pc, #20]	@ (80183b4 <_svfiprintf_r+0x1f0>)
 801839e:	a904      	add	r1, sp, #16
 80183a0:	4638      	mov	r0, r7
 80183a2:	f000 f9bb 	bl	801871c <_printf_i>
 80183a6:	e7ed      	b.n	8018384 <_svfiprintf_r+0x1c0>
 80183a8:	08019d78 	.word	0x08019d78
 80183ac:	08019d82 	.word	0x08019d82
 80183b0:	00000000 	.word	0x00000000
 80183b4:	0801810d 	.word	0x0801810d
 80183b8:	08019d7e 	.word	0x08019d7e

080183bc <__sfputc_r>:
 80183bc:	6893      	ldr	r3, [r2, #8]
 80183be:	3b01      	subs	r3, #1
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	b410      	push	{r4}
 80183c4:	6093      	str	r3, [r2, #8]
 80183c6:	da08      	bge.n	80183da <__sfputc_r+0x1e>
 80183c8:	6994      	ldr	r4, [r2, #24]
 80183ca:	42a3      	cmp	r3, r4
 80183cc:	db01      	blt.n	80183d2 <__sfputc_r+0x16>
 80183ce:	290a      	cmp	r1, #10
 80183d0:	d103      	bne.n	80183da <__sfputc_r+0x1e>
 80183d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183d6:	f000 bb7f 	b.w	8018ad8 <__swbuf_r>
 80183da:	6813      	ldr	r3, [r2, #0]
 80183dc:	1c58      	adds	r0, r3, #1
 80183de:	6010      	str	r0, [r2, #0]
 80183e0:	7019      	strb	r1, [r3, #0]
 80183e2:	4608      	mov	r0, r1
 80183e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183e8:	4770      	bx	lr

080183ea <__sfputs_r>:
 80183ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ec:	4606      	mov	r6, r0
 80183ee:	460f      	mov	r7, r1
 80183f0:	4614      	mov	r4, r2
 80183f2:	18d5      	adds	r5, r2, r3
 80183f4:	42ac      	cmp	r4, r5
 80183f6:	d101      	bne.n	80183fc <__sfputs_r+0x12>
 80183f8:	2000      	movs	r0, #0
 80183fa:	e007      	b.n	801840c <__sfputs_r+0x22>
 80183fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018400:	463a      	mov	r2, r7
 8018402:	4630      	mov	r0, r6
 8018404:	f7ff ffda 	bl	80183bc <__sfputc_r>
 8018408:	1c43      	adds	r3, r0, #1
 801840a:	d1f3      	bne.n	80183f4 <__sfputs_r+0xa>
 801840c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018410 <_vfiprintf_r>:
 8018410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018414:	460d      	mov	r5, r1
 8018416:	b09d      	sub	sp, #116	@ 0x74
 8018418:	4614      	mov	r4, r2
 801841a:	4698      	mov	r8, r3
 801841c:	4606      	mov	r6, r0
 801841e:	b118      	cbz	r0, 8018428 <_vfiprintf_r+0x18>
 8018420:	6a03      	ldr	r3, [r0, #32]
 8018422:	b90b      	cbnz	r3, 8018428 <_vfiprintf_r+0x18>
 8018424:	f7ff fbfc 	bl	8017c20 <__sinit>
 8018428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801842a:	07d9      	lsls	r1, r3, #31
 801842c:	d405      	bmi.n	801843a <_vfiprintf_r+0x2a>
 801842e:	89ab      	ldrh	r3, [r5, #12]
 8018430:	059a      	lsls	r2, r3, #22
 8018432:	d402      	bmi.n	801843a <_vfiprintf_r+0x2a>
 8018434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018436:	f7ff fdd4 	bl	8017fe2 <__retarget_lock_acquire_recursive>
 801843a:	89ab      	ldrh	r3, [r5, #12]
 801843c:	071b      	lsls	r3, r3, #28
 801843e:	d501      	bpl.n	8018444 <_vfiprintf_r+0x34>
 8018440:	692b      	ldr	r3, [r5, #16]
 8018442:	b99b      	cbnz	r3, 801846c <_vfiprintf_r+0x5c>
 8018444:	4629      	mov	r1, r5
 8018446:	4630      	mov	r0, r6
 8018448:	f000 fb84 	bl	8018b54 <__swsetup_r>
 801844c:	b170      	cbz	r0, 801846c <_vfiprintf_r+0x5c>
 801844e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018450:	07dc      	lsls	r4, r3, #31
 8018452:	d504      	bpl.n	801845e <_vfiprintf_r+0x4e>
 8018454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018458:	b01d      	add	sp, #116	@ 0x74
 801845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801845e:	89ab      	ldrh	r3, [r5, #12]
 8018460:	0598      	lsls	r0, r3, #22
 8018462:	d4f7      	bmi.n	8018454 <_vfiprintf_r+0x44>
 8018464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018466:	f7ff fdbd 	bl	8017fe4 <__retarget_lock_release_recursive>
 801846a:	e7f3      	b.n	8018454 <_vfiprintf_r+0x44>
 801846c:	2300      	movs	r3, #0
 801846e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018470:	2320      	movs	r3, #32
 8018472:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018476:	f8cd 800c 	str.w	r8, [sp, #12]
 801847a:	2330      	movs	r3, #48	@ 0x30
 801847c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801862c <_vfiprintf_r+0x21c>
 8018480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018484:	f04f 0901 	mov.w	r9, #1
 8018488:	4623      	mov	r3, r4
 801848a:	469a      	mov	sl, r3
 801848c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018490:	b10a      	cbz	r2, 8018496 <_vfiprintf_r+0x86>
 8018492:	2a25      	cmp	r2, #37	@ 0x25
 8018494:	d1f9      	bne.n	801848a <_vfiprintf_r+0x7a>
 8018496:	ebba 0b04 	subs.w	fp, sl, r4
 801849a:	d00b      	beq.n	80184b4 <_vfiprintf_r+0xa4>
 801849c:	465b      	mov	r3, fp
 801849e:	4622      	mov	r2, r4
 80184a0:	4629      	mov	r1, r5
 80184a2:	4630      	mov	r0, r6
 80184a4:	f7ff ffa1 	bl	80183ea <__sfputs_r>
 80184a8:	3001      	adds	r0, #1
 80184aa:	f000 80a7 	beq.w	80185fc <_vfiprintf_r+0x1ec>
 80184ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80184b0:	445a      	add	r2, fp
 80184b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80184b4:	f89a 3000 	ldrb.w	r3, [sl]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	f000 809f 	beq.w	80185fc <_vfiprintf_r+0x1ec>
 80184be:	2300      	movs	r3, #0
 80184c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80184c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184c8:	f10a 0a01 	add.w	sl, sl, #1
 80184cc:	9304      	str	r3, [sp, #16]
 80184ce:	9307      	str	r3, [sp, #28]
 80184d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80184d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80184d6:	4654      	mov	r4, sl
 80184d8:	2205      	movs	r2, #5
 80184da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184de:	4853      	ldr	r0, [pc, #332]	@ (801862c <_vfiprintf_r+0x21c>)
 80184e0:	f7e7 feb6 	bl	8000250 <memchr>
 80184e4:	9a04      	ldr	r2, [sp, #16]
 80184e6:	b9d8      	cbnz	r0, 8018520 <_vfiprintf_r+0x110>
 80184e8:	06d1      	lsls	r1, r2, #27
 80184ea:	bf44      	itt	mi
 80184ec:	2320      	movmi	r3, #32
 80184ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80184f2:	0713      	lsls	r3, r2, #28
 80184f4:	bf44      	itt	mi
 80184f6:	232b      	movmi	r3, #43	@ 0x2b
 80184f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80184fc:	f89a 3000 	ldrb.w	r3, [sl]
 8018500:	2b2a      	cmp	r3, #42	@ 0x2a
 8018502:	d015      	beq.n	8018530 <_vfiprintf_r+0x120>
 8018504:	9a07      	ldr	r2, [sp, #28]
 8018506:	4654      	mov	r4, sl
 8018508:	2000      	movs	r0, #0
 801850a:	f04f 0c0a 	mov.w	ip, #10
 801850e:	4621      	mov	r1, r4
 8018510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018514:	3b30      	subs	r3, #48	@ 0x30
 8018516:	2b09      	cmp	r3, #9
 8018518:	d94b      	bls.n	80185b2 <_vfiprintf_r+0x1a2>
 801851a:	b1b0      	cbz	r0, 801854a <_vfiprintf_r+0x13a>
 801851c:	9207      	str	r2, [sp, #28]
 801851e:	e014      	b.n	801854a <_vfiprintf_r+0x13a>
 8018520:	eba0 0308 	sub.w	r3, r0, r8
 8018524:	fa09 f303 	lsl.w	r3, r9, r3
 8018528:	4313      	orrs	r3, r2
 801852a:	9304      	str	r3, [sp, #16]
 801852c:	46a2      	mov	sl, r4
 801852e:	e7d2      	b.n	80184d6 <_vfiprintf_r+0xc6>
 8018530:	9b03      	ldr	r3, [sp, #12]
 8018532:	1d19      	adds	r1, r3, #4
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	9103      	str	r1, [sp, #12]
 8018538:	2b00      	cmp	r3, #0
 801853a:	bfbb      	ittet	lt
 801853c:	425b      	neglt	r3, r3
 801853e:	f042 0202 	orrlt.w	r2, r2, #2
 8018542:	9307      	strge	r3, [sp, #28]
 8018544:	9307      	strlt	r3, [sp, #28]
 8018546:	bfb8      	it	lt
 8018548:	9204      	strlt	r2, [sp, #16]
 801854a:	7823      	ldrb	r3, [r4, #0]
 801854c:	2b2e      	cmp	r3, #46	@ 0x2e
 801854e:	d10a      	bne.n	8018566 <_vfiprintf_r+0x156>
 8018550:	7863      	ldrb	r3, [r4, #1]
 8018552:	2b2a      	cmp	r3, #42	@ 0x2a
 8018554:	d132      	bne.n	80185bc <_vfiprintf_r+0x1ac>
 8018556:	9b03      	ldr	r3, [sp, #12]
 8018558:	1d1a      	adds	r2, r3, #4
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	9203      	str	r2, [sp, #12]
 801855e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018562:	3402      	adds	r4, #2
 8018564:	9305      	str	r3, [sp, #20]
 8018566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801863c <_vfiprintf_r+0x22c>
 801856a:	7821      	ldrb	r1, [r4, #0]
 801856c:	2203      	movs	r2, #3
 801856e:	4650      	mov	r0, sl
 8018570:	f7e7 fe6e 	bl	8000250 <memchr>
 8018574:	b138      	cbz	r0, 8018586 <_vfiprintf_r+0x176>
 8018576:	9b04      	ldr	r3, [sp, #16]
 8018578:	eba0 000a 	sub.w	r0, r0, sl
 801857c:	2240      	movs	r2, #64	@ 0x40
 801857e:	4082      	lsls	r2, r0
 8018580:	4313      	orrs	r3, r2
 8018582:	3401      	adds	r4, #1
 8018584:	9304      	str	r3, [sp, #16]
 8018586:	f814 1b01 	ldrb.w	r1, [r4], #1
 801858a:	4829      	ldr	r0, [pc, #164]	@ (8018630 <_vfiprintf_r+0x220>)
 801858c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018590:	2206      	movs	r2, #6
 8018592:	f7e7 fe5d 	bl	8000250 <memchr>
 8018596:	2800      	cmp	r0, #0
 8018598:	d03f      	beq.n	801861a <_vfiprintf_r+0x20a>
 801859a:	4b26      	ldr	r3, [pc, #152]	@ (8018634 <_vfiprintf_r+0x224>)
 801859c:	bb1b      	cbnz	r3, 80185e6 <_vfiprintf_r+0x1d6>
 801859e:	9b03      	ldr	r3, [sp, #12]
 80185a0:	3307      	adds	r3, #7
 80185a2:	f023 0307 	bic.w	r3, r3, #7
 80185a6:	3308      	adds	r3, #8
 80185a8:	9303      	str	r3, [sp, #12]
 80185aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185ac:	443b      	add	r3, r7
 80185ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80185b0:	e76a      	b.n	8018488 <_vfiprintf_r+0x78>
 80185b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80185b6:	460c      	mov	r4, r1
 80185b8:	2001      	movs	r0, #1
 80185ba:	e7a8      	b.n	801850e <_vfiprintf_r+0xfe>
 80185bc:	2300      	movs	r3, #0
 80185be:	3401      	adds	r4, #1
 80185c0:	9305      	str	r3, [sp, #20]
 80185c2:	4619      	mov	r1, r3
 80185c4:	f04f 0c0a 	mov.w	ip, #10
 80185c8:	4620      	mov	r0, r4
 80185ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185ce:	3a30      	subs	r2, #48	@ 0x30
 80185d0:	2a09      	cmp	r2, #9
 80185d2:	d903      	bls.n	80185dc <_vfiprintf_r+0x1cc>
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d0c6      	beq.n	8018566 <_vfiprintf_r+0x156>
 80185d8:	9105      	str	r1, [sp, #20]
 80185da:	e7c4      	b.n	8018566 <_vfiprintf_r+0x156>
 80185dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80185e0:	4604      	mov	r4, r0
 80185e2:	2301      	movs	r3, #1
 80185e4:	e7f0      	b.n	80185c8 <_vfiprintf_r+0x1b8>
 80185e6:	ab03      	add	r3, sp, #12
 80185e8:	9300      	str	r3, [sp, #0]
 80185ea:	462a      	mov	r2, r5
 80185ec:	4b12      	ldr	r3, [pc, #72]	@ (8018638 <_vfiprintf_r+0x228>)
 80185ee:	a904      	add	r1, sp, #16
 80185f0:	4630      	mov	r0, r6
 80185f2:	f3af 8000 	nop.w
 80185f6:	4607      	mov	r7, r0
 80185f8:	1c78      	adds	r0, r7, #1
 80185fa:	d1d6      	bne.n	80185aa <_vfiprintf_r+0x19a>
 80185fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185fe:	07d9      	lsls	r1, r3, #31
 8018600:	d405      	bmi.n	801860e <_vfiprintf_r+0x1fe>
 8018602:	89ab      	ldrh	r3, [r5, #12]
 8018604:	059a      	lsls	r2, r3, #22
 8018606:	d402      	bmi.n	801860e <_vfiprintf_r+0x1fe>
 8018608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801860a:	f7ff fceb 	bl	8017fe4 <__retarget_lock_release_recursive>
 801860e:	89ab      	ldrh	r3, [r5, #12]
 8018610:	065b      	lsls	r3, r3, #25
 8018612:	f53f af1f 	bmi.w	8018454 <_vfiprintf_r+0x44>
 8018616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018618:	e71e      	b.n	8018458 <_vfiprintf_r+0x48>
 801861a:	ab03      	add	r3, sp, #12
 801861c:	9300      	str	r3, [sp, #0]
 801861e:	462a      	mov	r2, r5
 8018620:	4b05      	ldr	r3, [pc, #20]	@ (8018638 <_vfiprintf_r+0x228>)
 8018622:	a904      	add	r1, sp, #16
 8018624:	4630      	mov	r0, r6
 8018626:	f000 f879 	bl	801871c <_printf_i>
 801862a:	e7e4      	b.n	80185f6 <_vfiprintf_r+0x1e6>
 801862c:	08019d78 	.word	0x08019d78
 8018630:	08019d82 	.word	0x08019d82
 8018634:	00000000 	.word	0x00000000
 8018638:	080183eb 	.word	0x080183eb
 801863c:	08019d7e 	.word	0x08019d7e

08018640 <_printf_common>:
 8018640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018644:	4616      	mov	r6, r2
 8018646:	4698      	mov	r8, r3
 8018648:	688a      	ldr	r2, [r1, #8]
 801864a:	690b      	ldr	r3, [r1, #16]
 801864c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018650:	4293      	cmp	r3, r2
 8018652:	bfb8      	it	lt
 8018654:	4613      	movlt	r3, r2
 8018656:	6033      	str	r3, [r6, #0]
 8018658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801865c:	4607      	mov	r7, r0
 801865e:	460c      	mov	r4, r1
 8018660:	b10a      	cbz	r2, 8018666 <_printf_common+0x26>
 8018662:	3301      	adds	r3, #1
 8018664:	6033      	str	r3, [r6, #0]
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	0699      	lsls	r1, r3, #26
 801866a:	bf42      	ittt	mi
 801866c:	6833      	ldrmi	r3, [r6, #0]
 801866e:	3302      	addmi	r3, #2
 8018670:	6033      	strmi	r3, [r6, #0]
 8018672:	6825      	ldr	r5, [r4, #0]
 8018674:	f015 0506 	ands.w	r5, r5, #6
 8018678:	d106      	bne.n	8018688 <_printf_common+0x48>
 801867a:	f104 0a19 	add.w	sl, r4, #25
 801867e:	68e3      	ldr	r3, [r4, #12]
 8018680:	6832      	ldr	r2, [r6, #0]
 8018682:	1a9b      	subs	r3, r3, r2
 8018684:	42ab      	cmp	r3, r5
 8018686:	dc26      	bgt.n	80186d6 <_printf_common+0x96>
 8018688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801868c:	6822      	ldr	r2, [r4, #0]
 801868e:	3b00      	subs	r3, #0
 8018690:	bf18      	it	ne
 8018692:	2301      	movne	r3, #1
 8018694:	0692      	lsls	r2, r2, #26
 8018696:	d42b      	bmi.n	80186f0 <_printf_common+0xb0>
 8018698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801869c:	4641      	mov	r1, r8
 801869e:	4638      	mov	r0, r7
 80186a0:	47c8      	blx	r9
 80186a2:	3001      	adds	r0, #1
 80186a4:	d01e      	beq.n	80186e4 <_printf_common+0xa4>
 80186a6:	6823      	ldr	r3, [r4, #0]
 80186a8:	6922      	ldr	r2, [r4, #16]
 80186aa:	f003 0306 	and.w	r3, r3, #6
 80186ae:	2b04      	cmp	r3, #4
 80186b0:	bf02      	ittt	eq
 80186b2:	68e5      	ldreq	r5, [r4, #12]
 80186b4:	6833      	ldreq	r3, [r6, #0]
 80186b6:	1aed      	subeq	r5, r5, r3
 80186b8:	68a3      	ldr	r3, [r4, #8]
 80186ba:	bf0c      	ite	eq
 80186bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186c0:	2500      	movne	r5, #0
 80186c2:	4293      	cmp	r3, r2
 80186c4:	bfc4      	itt	gt
 80186c6:	1a9b      	subgt	r3, r3, r2
 80186c8:	18ed      	addgt	r5, r5, r3
 80186ca:	2600      	movs	r6, #0
 80186cc:	341a      	adds	r4, #26
 80186ce:	42b5      	cmp	r5, r6
 80186d0:	d11a      	bne.n	8018708 <_printf_common+0xc8>
 80186d2:	2000      	movs	r0, #0
 80186d4:	e008      	b.n	80186e8 <_printf_common+0xa8>
 80186d6:	2301      	movs	r3, #1
 80186d8:	4652      	mov	r2, sl
 80186da:	4641      	mov	r1, r8
 80186dc:	4638      	mov	r0, r7
 80186de:	47c8      	blx	r9
 80186e0:	3001      	adds	r0, #1
 80186e2:	d103      	bne.n	80186ec <_printf_common+0xac>
 80186e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80186e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ec:	3501      	adds	r5, #1
 80186ee:	e7c6      	b.n	801867e <_printf_common+0x3e>
 80186f0:	18e1      	adds	r1, r4, r3
 80186f2:	1c5a      	adds	r2, r3, #1
 80186f4:	2030      	movs	r0, #48	@ 0x30
 80186f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80186fa:	4422      	add	r2, r4
 80186fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018704:	3302      	adds	r3, #2
 8018706:	e7c7      	b.n	8018698 <_printf_common+0x58>
 8018708:	2301      	movs	r3, #1
 801870a:	4622      	mov	r2, r4
 801870c:	4641      	mov	r1, r8
 801870e:	4638      	mov	r0, r7
 8018710:	47c8      	blx	r9
 8018712:	3001      	adds	r0, #1
 8018714:	d0e6      	beq.n	80186e4 <_printf_common+0xa4>
 8018716:	3601      	adds	r6, #1
 8018718:	e7d9      	b.n	80186ce <_printf_common+0x8e>
	...

0801871c <_printf_i>:
 801871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018720:	7e0f      	ldrb	r7, [r1, #24]
 8018722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018724:	2f78      	cmp	r7, #120	@ 0x78
 8018726:	4691      	mov	r9, r2
 8018728:	4680      	mov	r8, r0
 801872a:	460c      	mov	r4, r1
 801872c:	469a      	mov	sl, r3
 801872e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018732:	d807      	bhi.n	8018744 <_printf_i+0x28>
 8018734:	2f62      	cmp	r7, #98	@ 0x62
 8018736:	d80a      	bhi.n	801874e <_printf_i+0x32>
 8018738:	2f00      	cmp	r7, #0
 801873a:	f000 80d2 	beq.w	80188e2 <_printf_i+0x1c6>
 801873e:	2f58      	cmp	r7, #88	@ 0x58
 8018740:	f000 80b9 	beq.w	80188b6 <_printf_i+0x19a>
 8018744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801874c:	e03a      	b.n	80187c4 <_printf_i+0xa8>
 801874e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018752:	2b15      	cmp	r3, #21
 8018754:	d8f6      	bhi.n	8018744 <_printf_i+0x28>
 8018756:	a101      	add	r1, pc, #4	@ (adr r1, 801875c <_printf_i+0x40>)
 8018758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801875c:	080187b5 	.word	0x080187b5
 8018760:	080187c9 	.word	0x080187c9
 8018764:	08018745 	.word	0x08018745
 8018768:	08018745 	.word	0x08018745
 801876c:	08018745 	.word	0x08018745
 8018770:	08018745 	.word	0x08018745
 8018774:	080187c9 	.word	0x080187c9
 8018778:	08018745 	.word	0x08018745
 801877c:	08018745 	.word	0x08018745
 8018780:	08018745 	.word	0x08018745
 8018784:	08018745 	.word	0x08018745
 8018788:	080188c9 	.word	0x080188c9
 801878c:	080187f3 	.word	0x080187f3
 8018790:	08018883 	.word	0x08018883
 8018794:	08018745 	.word	0x08018745
 8018798:	08018745 	.word	0x08018745
 801879c:	080188eb 	.word	0x080188eb
 80187a0:	08018745 	.word	0x08018745
 80187a4:	080187f3 	.word	0x080187f3
 80187a8:	08018745 	.word	0x08018745
 80187ac:	08018745 	.word	0x08018745
 80187b0:	0801888b 	.word	0x0801888b
 80187b4:	6833      	ldr	r3, [r6, #0]
 80187b6:	1d1a      	adds	r2, r3, #4
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	6032      	str	r2, [r6, #0]
 80187bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80187c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80187c4:	2301      	movs	r3, #1
 80187c6:	e09d      	b.n	8018904 <_printf_i+0x1e8>
 80187c8:	6833      	ldr	r3, [r6, #0]
 80187ca:	6820      	ldr	r0, [r4, #0]
 80187cc:	1d19      	adds	r1, r3, #4
 80187ce:	6031      	str	r1, [r6, #0]
 80187d0:	0606      	lsls	r6, r0, #24
 80187d2:	d501      	bpl.n	80187d8 <_printf_i+0xbc>
 80187d4:	681d      	ldr	r5, [r3, #0]
 80187d6:	e003      	b.n	80187e0 <_printf_i+0xc4>
 80187d8:	0645      	lsls	r5, r0, #25
 80187da:	d5fb      	bpl.n	80187d4 <_printf_i+0xb8>
 80187dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80187e0:	2d00      	cmp	r5, #0
 80187e2:	da03      	bge.n	80187ec <_printf_i+0xd0>
 80187e4:	232d      	movs	r3, #45	@ 0x2d
 80187e6:	426d      	negs	r5, r5
 80187e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80187ec:	4859      	ldr	r0, [pc, #356]	@ (8018954 <_printf_i+0x238>)
 80187ee:	230a      	movs	r3, #10
 80187f0:	e011      	b.n	8018816 <_printf_i+0xfa>
 80187f2:	6821      	ldr	r1, [r4, #0]
 80187f4:	6833      	ldr	r3, [r6, #0]
 80187f6:	0608      	lsls	r0, r1, #24
 80187f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80187fc:	d402      	bmi.n	8018804 <_printf_i+0xe8>
 80187fe:	0649      	lsls	r1, r1, #25
 8018800:	bf48      	it	mi
 8018802:	b2ad      	uxthmi	r5, r5
 8018804:	2f6f      	cmp	r7, #111	@ 0x6f
 8018806:	4853      	ldr	r0, [pc, #332]	@ (8018954 <_printf_i+0x238>)
 8018808:	6033      	str	r3, [r6, #0]
 801880a:	bf14      	ite	ne
 801880c:	230a      	movne	r3, #10
 801880e:	2308      	moveq	r3, #8
 8018810:	2100      	movs	r1, #0
 8018812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018816:	6866      	ldr	r6, [r4, #4]
 8018818:	60a6      	str	r6, [r4, #8]
 801881a:	2e00      	cmp	r6, #0
 801881c:	bfa2      	ittt	ge
 801881e:	6821      	ldrge	r1, [r4, #0]
 8018820:	f021 0104 	bicge.w	r1, r1, #4
 8018824:	6021      	strge	r1, [r4, #0]
 8018826:	b90d      	cbnz	r5, 801882c <_printf_i+0x110>
 8018828:	2e00      	cmp	r6, #0
 801882a:	d04b      	beq.n	80188c4 <_printf_i+0x1a8>
 801882c:	4616      	mov	r6, r2
 801882e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018832:	fb03 5711 	mls	r7, r3, r1, r5
 8018836:	5dc7      	ldrb	r7, [r0, r7]
 8018838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801883c:	462f      	mov	r7, r5
 801883e:	42bb      	cmp	r3, r7
 8018840:	460d      	mov	r5, r1
 8018842:	d9f4      	bls.n	801882e <_printf_i+0x112>
 8018844:	2b08      	cmp	r3, #8
 8018846:	d10b      	bne.n	8018860 <_printf_i+0x144>
 8018848:	6823      	ldr	r3, [r4, #0]
 801884a:	07df      	lsls	r7, r3, #31
 801884c:	d508      	bpl.n	8018860 <_printf_i+0x144>
 801884e:	6923      	ldr	r3, [r4, #16]
 8018850:	6861      	ldr	r1, [r4, #4]
 8018852:	4299      	cmp	r1, r3
 8018854:	bfde      	ittt	le
 8018856:	2330      	movle	r3, #48	@ 0x30
 8018858:	f806 3c01 	strble.w	r3, [r6, #-1]
 801885c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018860:	1b92      	subs	r2, r2, r6
 8018862:	6122      	str	r2, [r4, #16]
 8018864:	f8cd a000 	str.w	sl, [sp]
 8018868:	464b      	mov	r3, r9
 801886a:	aa03      	add	r2, sp, #12
 801886c:	4621      	mov	r1, r4
 801886e:	4640      	mov	r0, r8
 8018870:	f7ff fee6 	bl	8018640 <_printf_common>
 8018874:	3001      	adds	r0, #1
 8018876:	d14a      	bne.n	801890e <_printf_i+0x1f2>
 8018878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801887c:	b004      	add	sp, #16
 801887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018882:	6823      	ldr	r3, [r4, #0]
 8018884:	f043 0320 	orr.w	r3, r3, #32
 8018888:	6023      	str	r3, [r4, #0]
 801888a:	4833      	ldr	r0, [pc, #204]	@ (8018958 <_printf_i+0x23c>)
 801888c:	2778      	movs	r7, #120	@ 0x78
 801888e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018892:	6823      	ldr	r3, [r4, #0]
 8018894:	6831      	ldr	r1, [r6, #0]
 8018896:	061f      	lsls	r7, r3, #24
 8018898:	f851 5b04 	ldr.w	r5, [r1], #4
 801889c:	d402      	bmi.n	80188a4 <_printf_i+0x188>
 801889e:	065f      	lsls	r7, r3, #25
 80188a0:	bf48      	it	mi
 80188a2:	b2ad      	uxthmi	r5, r5
 80188a4:	6031      	str	r1, [r6, #0]
 80188a6:	07d9      	lsls	r1, r3, #31
 80188a8:	bf44      	itt	mi
 80188aa:	f043 0320 	orrmi.w	r3, r3, #32
 80188ae:	6023      	strmi	r3, [r4, #0]
 80188b0:	b11d      	cbz	r5, 80188ba <_printf_i+0x19e>
 80188b2:	2310      	movs	r3, #16
 80188b4:	e7ac      	b.n	8018810 <_printf_i+0xf4>
 80188b6:	4827      	ldr	r0, [pc, #156]	@ (8018954 <_printf_i+0x238>)
 80188b8:	e7e9      	b.n	801888e <_printf_i+0x172>
 80188ba:	6823      	ldr	r3, [r4, #0]
 80188bc:	f023 0320 	bic.w	r3, r3, #32
 80188c0:	6023      	str	r3, [r4, #0]
 80188c2:	e7f6      	b.n	80188b2 <_printf_i+0x196>
 80188c4:	4616      	mov	r6, r2
 80188c6:	e7bd      	b.n	8018844 <_printf_i+0x128>
 80188c8:	6833      	ldr	r3, [r6, #0]
 80188ca:	6825      	ldr	r5, [r4, #0]
 80188cc:	6961      	ldr	r1, [r4, #20]
 80188ce:	1d18      	adds	r0, r3, #4
 80188d0:	6030      	str	r0, [r6, #0]
 80188d2:	062e      	lsls	r6, r5, #24
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	d501      	bpl.n	80188dc <_printf_i+0x1c0>
 80188d8:	6019      	str	r1, [r3, #0]
 80188da:	e002      	b.n	80188e2 <_printf_i+0x1c6>
 80188dc:	0668      	lsls	r0, r5, #25
 80188de:	d5fb      	bpl.n	80188d8 <_printf_i+0x1bc>
 80188e0:	8019      	strh	r1, [r3, #0]
 80188e2:	2300      	movs	r3, #0
 80188e4:	6123      	str	r3, [r4, #16]
 80188e6:	4616      	mov	r6, r2
 80188e8:	e7bc      	b.n	8018864 <_printf_i+0x148>
 80188ea:	6833      	ldr	r3, [r6, #0]
 80188ec:	1d1a      	adds	r2, r3, #4
 80188ee:	6032      	str	r2, [r6, #0]
 80188f0:	681e      	ldr	r6, [r3, #0]
 80188f2:	6862      	ldr	r2, [r4, #4]
 80188f4:	2100      	movs	r1, #0
 80188f6:	4630      	mov	r0, r6
 80188f8:	f7e7 fcaa 	bl	8000250 <memchr>
 80188fc:	b108      	cbz	r0, 8018902 <_printf_i+0x1e6>
 80188fe:	1b80      	subs	r0, r0, r6
 8018900:	6060      	str	r0, [r4, #4]
 8018902:	6863      	ldr	r3, [r4, #4]
 8018904:	6123      	str	r3, [r4, #16]
 8018906:	2300      	movs	r3, #0
 8018908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801890c:	e7aa      	b.n	8018864 <_printf_i+0x148>
 801890e:	6923      	ldr	r3, [r4, #16]
 8018910:	4632      	mov	r2, r6
 8018912:	4649      	mov	r1, r9
 8018914:	4640      	mov	r0, r8
 8018916:	47d0      	blx	sl
 8018918:	3001      	adds	r0, #1
 801891a:	d0ad      	beq.n	8018878 <_printf_i+0x15c>
 801891c:	6823      	ldr	r3, [r4, #0]
 801891e:	079b      	lsls	r3, r3, #30
 8018920:	d413      	bmi.n	801894a <_printf_i+0x22e>
 8018922:	68e0      	ldr	r0, [r4, #12]
 8018924:	9b03      	ldr	r3, [sp, #12]
 8018926:	4298      	cmp	r0, r3
 8018928:	bfb8      	it	lt
 801892a:	4618      	movlt	r0, r3
 801892c:	e7a6      	b.n	801887c <_printf_i+0x160>
 801892e:	2301      	movs	r3, #1
 8018930:	4632      	mov	r2, r6
 8018932:	4649      	mov	r1, r9
 8018934:	4640      	mov	r0, r8
 8018936:	47d0      	blx	sl
 8018938:	3001      	adds	r0, #1
 801893a:	d09d      	beq.n	8018878 <_printf_i+0x15c>
 801893c:	3501      	adds	r5, #1
 801893e:	68e3      	ldr	r3, [r4, #12]
 8018940:	9903      	ldr	r1, [sp, #12]
 8018942:	1a5b      	subs	r3, r3, r1
 8018944:	42ab      	cmp	r3, r5
 8018946:	dcf2      	bgt.n	801892e <_printf_i+0x212>
 8018948:	e7eb      	b.n	8018922 <_printf_i+0x206>
 801894a:	2500      	movs	r5, #0
 801894c:	f104 0619 	add.w	r6, r4, #25
 8018950:	e7f5      	b.n	801893e <_printf_i+0x222>
 8018952:	bf00      	nop
 8018954:	08019d89 	.word	0x08019d89
 8018958:	08019d9a 	.word	0x08019d9a

0801895c <__sflush_r>:
 801895c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018964:	0716      	lsls	r6, r2, #28
 8018966:	4605      	mov	r5, r0
 8018968:	460c      	mov	r4, r1
 801896a:	d454      	bmi.n	8018a16 <__sflush_r+0xba>
 801896c:	684b      	ldr	r3, [r1, #4]
 801896e:	2b00      	cmp	r3, #0
 8018970:	dc02      	bgt.n	8018978 <__sflush_r+0x1c>
 8018972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018974:	2b00      	cmp	r3, #0
 8018976:	dd48      	ble.n	8018a0a <__sflush_r+0xae>
 8018978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801897a:	2e00      	cmp	r6, #0
 801897c:	d045      	beq.n	8018a0a <__sflush_r+0xae>
 801897e:	2300      	movs	r3, #0
 8018980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018984:	682f      	ldr	r7, [r5, #0]
 8018986:	6a21      	ldr	r1, [r4, #32]
 8018988:	602b      	str	r3, [r5, #0]
 801898a:	d030      	beq.n	80189ee <__sflush_r+0x92>
 801898c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801898e:	89a3      	ldrh	r3, [r4, #12]
 8018990:	0759      	lsls	r1, r3, #29
 8018992:	d505      	bpl.n	80189a0 <__sflush_r+0x44>
 8018994:	6863      	ldr	r3, [r4, #4]
 8018996:	1ad2      	subs	r2, r2, r3
 8018998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801899a:	b10b      	cbz	r3, 80189a0 <__sflush_r+0x44>
 801899c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801899e:	1ad2      	subs	r2, r2, r3
 80189a0:	2300      	movs	r3, #0
 80189a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80189a4:	6a21      	ldr	r1, [r4, #32]
 80189a6:	4628      	mov	r0, r5
 80189a8:	47b0      	blx	r6
 80189aa:	1c43      	adds	r3, r0, #1
 80189ac:	89a3      	ldrh	r3, [r4, #12]
 80189ae:	d106      	bne.n	80189be <__sflush_r+0x62>
 80189b0:	6829      	ldr	r1, [r5, #0]
 80189b2:	291d      	cmp	r1, #29
 80189b4:	d82b      	bhi.n	8018a0e <__sflush_r+0xb2>
 80189b6:	4a2a      	ldr	r2, [pc, #168]	@ (8018a60 <__sflush_r+0x104>)
 80189b8:	410a      	asrs	r2, r1
 80189ba:	07d6      	lsls	r6, r2, #31
 80189bc:	d427      	bmi.n	8018a0e <__sflush_r+0xb2>
 80189be:	2200      	movs	r2, #0
 80189c0:	6062      	str	r2, [r4, #4]
 80189c2:	04d9      	lsls	r1, r3, #19
 80189c4:	6922      	ldr	r2, [r4, #16]
 80189c6:	6022      	str	r2, [r4, #0]
 80189c8:	d504      	bpl.n	80189d4 <__sflush_r+0x78>
 80189ca:	1c42      	adds	r2, r0, #1
 80189cc:	d101      	bne.n	80189d2 <__sflush_r+0x76>
 80189ce:	682b      	ldr	r3, [r5, #0]
 80189d0:	b903      	cbnz	r3, 80189d4 <__sflush_r+0x78>
 80189d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80189d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80189d6:	602f      	str	r7, [r5, #0]
 80189d8:	b1b9      	cbz	r1, 8018a0a <__sflush_r+0xae>
 80189da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80189de:	4299      	cmp	r1, r3
 80189e0:	d002      	beq.n	80189e8 <__sflush_r+0x8c>
 80189e2:	4628      	mov	r0, r5
 80189e4:	f7ff fb40 	bl	8018068 <_free_r>
 80189e8:	2300      	movs	r3, #0
 80189ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80189ec:	e00d      	b.n	8018a0a <__sflush_r+0xae>
 80189ee:	2301      	movs	r3, #1
 80189f0:	4628      	mov	r0, r5
 80189f2:	47b0      	blx	r6
 80189f4:	4602      	mov	r2, r0
 80189f6:	1c50      	adds	r0, r2, #1
 80189f8:	d1c9      	bne.n	801898e <__sflush_r+0x32>
 80189fa:	682b      	ldr	r3, [r5, #0]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d0c6      	beq.n	801898e <__sflush_r+0x32>
 8018a00:	2b1d      	cmp	r3, #29
 8018a02:	d001      	beq.n	8018a08 <__sflush_r+0xac>
 8018a04:	2b16      	cmp	r3, #22
 8018a06:	d11e      	bne.n	8018a46 <__sflush_r+0xea>
 8018a08:	602f      	str	r7, [r5, #0]
 8018a0a:	2000      	movs	r0, #0
 8018a0c:	e022      	b.n	8018a54 <__sflush_r+0xf8>
 8018a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a12:	b21b      	sxth	r3, r3
 8018a14:	e01b      	b.n	8018a4e <__sflush_r+0xf2>
 8018a16:	690f      	ldr	r7, [r1, #16]
 8018a18:	2f00      	cmp	r7, #0
 8018a1a:	d0f6      	beq.n	8018a0a <__sflush_r+0xae>
 8018a1c:	0793      	lsls	r3, r2, #30
 8018a1e:	680e      	ldr	r6, [r1, #0]
 8018a20:	bf08      	it	eq
 8018a22:	694b      	ldreq	r3, [r1, #20]
 8018a24:	600f      	str	r7, [r1, #0]
 8018a26:	bf18      	it	ne
 8018a28:	2300      	movne	r3, #0
 8018a2a:	eba6 0807 	sub.w	r8, r6, r7
 8018a2e:	608b      	str	r3, [r1, #8]
 8018a30:	f1b8 0f00 	cmp.w	r8, #0
 8018a34:	dde9      	ble.n	8018a0a <__sflush_r+0xae>
 8018a36:	6a21      	ldr	r1, [r4, #32]
 8018a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018a3a:	4643      	mov	r3, r8
 8018a3c:	463a      	mov	r2, r7
 8018a3e:	4628      	mov	r0, r5
 8018a40:	47b0      	blx	r6
 8018a42:	2800      	cmp	r0, #0
 8018a44:	dc08      	bgt.n	8018a58 <__sflush_r+0xfc>
 8018a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a4e:	81a3      	strh	r3, [r4, #12]
 8018a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a58:	4407      	add	r7, r0
 8018a5a:	eba8 0800 	sub.w	r8, r8, r0
 8018a5e:	e7e7      	b.n	8018a30 <__sflush_r+0xd4>
 8018a60:	dfbffffe 	.word	0xdfbffffe

08018a64 <_fflush_r>:
 8018a64:	b538      	push	{r3, r4, r5, lr}
 8018a66:	690b      	ldr	r3, [r1, #16]
 8018a68:	4605      	mov	r5, r0
 8018a6a:	460c      	mov	r4, r1
 8018a6c:	b913      	cbnz	r3, 8018a74 <_fflush_r+0x10>
 8018a6e:	2500      	movs	r5, #0
 8018a70:	4628      	mov	r0, r5
 8018a72:	bd38      	pop	{r3, r4, r5, pc}
 8018a74:	b118      	cbz	r0, 8018a7e <_fflush_r+0x1a>
 8018a76:	6a03      	ldr	r3, [r0, #32]
 8018a78:	b90b      	cbnz	r3, 8018a7e <_fflush_r+0x1a>
 8018a7a:	f7ff f8d1 	bl	8017c20 <__sinit>
 8018a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d0f3      	beq.n	8018a6e <_fflush_r+0xa>
 8018a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018a88:	07d0      	lsls	r0, r2, #31
 8018a8a:	d404      	bmi.n	8018a96 <_fflush_r+0x32>
 8018a8c:	0599      	lsls	r1, r3, #22
 8018a8e:	d402      	bmi.n	8018a96 <_fflush_r+0x32>
 8018a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a92:	f7ff faa6 	bl	8017fe2 <__retarget_lock_acquire_recursive>
 8018a96:	4628      	mov	r0, r5
 8018a98:	4621      	mov	r1, r4
 8018a9a:	f7ff ff5f 	bl	801895c <__sflush_r>
 8018a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018aa0:	07da      	lsls	r2, r3, #31
 8018aa2:	4605      	mov	r5, r0
 8018aa4:	d4e4      	bmi.n	8018a70 <_fflush_r+0xc>
 8018aa6:	89a3      	ldrh	r3, [r4, #12]
 8018aa8:	059b      	lsls	r3, r3, #22
 8018aaa:	d4e1      	bmi.n	8018a70 <_fflush_r+0xc>
 8018aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018aae:	f7ff fa99 	bl	8017fe4 <__retarget_lock_release_recursive>
 8018ab2:	e7dd      	b.n	8018a70 <_fflush_r+0xc>

08018ab4 <fiprintf>:
 8018ab4:	b40e      	push	{r1, r2, r3}
 8018ab6:	b503      	push	{r0, r1, lr}
 8018ab8:	4601      	mov	r1, r0
 8018aba:	ab03      	add	r3, sp, #12
 8018abc:	4805      	ldr	r0, [pc, #20]	@ (8018ad4 <fiprintf+0x20>)
 8018abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ac2:	6800      	ldr	r0, [r0, #0]
 8018ac4:	9301      	str	r3, [sp, #4]
 8018ac6:	f7ff fca3 	bl	8018410 <_vfiprintf_r>
 8018aca:	b002      	add	sp, #8
 8018acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ad0:	b003      	add	sp, #12
 8018ad2:	4770      	bx	lr
 8018ad4:	200001c8 	.word	0x200001c8

08018ad8 <__swbuf_r>:
 8018ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ada:	460e      	mov	r6, r1
 8018adc:	4614      	mov	r4, r2
 8018ade:	4605      	mov	r5, r0
 8018ae0:	b118      	cbz	r0, 8018aea <__swbuf_r+0x12>
 8018ae2:	6a03      	ldr	r3, [r0, #32]
 8018ae4:	b90b      	cbnz	r3, 8018aea <__swbuf_r+0x12>
 8018ae6:	f7ff f89b 	bl	8017c20 <__sinit>
 8018aea:	69a3      	ldr	r3, [r4, #24]
 8018aec:	60a3      	str	r3, [r4, #8]
 8018aee:	89a3      	ldrh	r3, [r4, #12]
 8018af0:	071a      	lsls	r2, r3, #28
 8018af2:	d501      	bpl.n	8018af8 <__swbuf_r+0x20>
 8018af4:	6923      	ldr	r3, [r4, #16]
 8018af6:	b943      	cbnz	r3, 8018b0a <__swbuf_r+0x32>
 8018af8:	4621      	mov	r1, r4
 8018afa:	4628      	mov	r0, r5
 8018afc:	f000 f82a 	bl	8018b54 <__swsetup_r>
 8018b00:	b118      	cbz	r0, 8018b0a <__swbuf_r+0x32>
 8018b02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018b06:	4638      	mov	r0, r7
 8018b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b0a:	6823      	ldr	r3, [r4, #0]
 8018b0c:	6922      	ldr	r2, [r4, #16]
 8018b0e:	1a98      	subs	r0, r3, r2
 8018b10:	6963      	ldr	r3, [r4, #20]
 8018b12:	b2f6      	uxtb	r6, r6
 8018b14:	4283      	cmp	r3, r0
 8018b16:	4637      	mov	r7, r6
 8018b18:	dc05      	bgt.n	8018b26 <__swbuf_r+0x4e>
 8018b1a:	4621      	mov	r1, r4
 8018b1c:	4628      	mov	r0, r5
 8018b1e:	f7ff ffa1 	bl	8018a64 <_fflush_r>
 8018b22:	2800      	cmp	r0, #0
 8018b24:	d1ed      	bne.n	8018b02 <__swbuf_r+0x2a>
 8018b26:	68a3      	ldr	r3, [r4, #8]
 8018b28:	3b01      	subs	r3, #1
 8018b2a:	60a3      	str	r3, [r4, #8]
 8018b2c:	6823      	ldr	r3, [r4, #0]
 8018b2e:	1c5a      	adds	r2, r3, #1
 8018b30:	6022      	str	r2, [r4, #0]
 8018b32:	701e      	strb	r6, [r3, #0]
 8018b34:	6962      	ldr	r2, [r4, #20]
 8018b36:	1c43      	adds	r3, r0, #1
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d004      	beq.n	8018b46 <__swbuf_r+0x6e>
 8018b3c:	89a3      	ldrh	r3, [r4, #12]
 8018b3e:	07db      	lsls	r3, r3, #31
 8018b40:	d5e1      	bpl.n	8018b06 <__swbuf_r+0x2e>
 8018b42:	2e0a      	cmp	r6, #10
 8018b44:	d1df      	bne.n	8018b06 <__swbuf_r+0x2e>
 8018b46:	4621      	mov	r1, r4
 8018b48:	4628      	mov	r0, r5
 8018b4a:	f7ff ff8b 	bl	8018a64 <_fflush_r>
 8018b4e:	2800      	cmp	r0, #0
 8018b50:	d0d9      	beq.n	8018b06 <__swbuf_r+0x2e>
 8018b52:	e7d6      	b.n	8018b02 <__swbuf_r+0x2a>

08018b54 <__swsetup_r>:
 8018b54:	b538      	push	{r3, r4, r5, lr}
 8018b56:	4b29      	ldr	r3, [pc, #164]	@ (8018bfc <__swsetup_r+0xa8>)
 8018b58:	4605      	mov	r5, r0
 8018b5a:	6818      	ldr	r0, [r3, #0]
 8018b5c:	460c      	mov	r4, r1
 8018b5e:	b118      	cbz	r0, 8018b68 <__swsetup_r+0x14>
 8018b60:	6a03      	ldr	r3, [r0, #32]
 8018b62:	b90b      	cbnz	r3, 8018b68 <__swsetup_r+0x14>
 8018b64:	f7ff f85c 	bl	8017c20 <__sinit>
 8018b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b6c:	0719      	lsls	r1, r3, #28
 8018b6e:	d422      	bmi.n	8018bb6 <__swsetup_r+0x62>
 8018b70:	06da      	lsls	r2, r3, #27
 8018b72:	d407      	bmi.n	8018b84 <__swsetup_r+0x30>
 8018b74:	2209      	movs	r2, #9
 8018b76:	602a      	str	r2, [r5, #0]
 8018b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b7c:	81a3      	strh	r3, [r4, #12]
 8018b7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018b82:	e033      	b.n	8018bec <__swsetup_r+0x98>
 8018b84:	0758      	lsls	r0, r3, #29
 8018b86:	d512      	bpl.n	8018bae <__swsetup_r+0x5a>
 8018b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018b8a:	b141      	cbz	r1, 8018b9e <__swsetup_r+0x4a>
 8018b8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018b90:	4299      	cmp	r1, r3
 8018b92:	d002      	beq.n	8018b9a <__swsetup_r+0x46>
 8018b94:	4628      	mov	r0, r5
 8018b96:	f7ff fa67 	bl	8018068 <_free_r>
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8018b9e:	89a3      	ldrh	r3, [r4, #12]
 8018ba0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018ba4:	81a3      	strh	r3, [r4, #12]
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	6063      	str	r3, [r4, #4]
 8018baa:	6923      	ldr	r3, [r4, #16]
 8018bac:	6023      	str	r3, [r4, #0]
 8018bae:	89a3      	ldrh	r3, [r4, #12]
 8018bb0:	f043 0308 	orr.w	r3, r3, #8
 8018bb4:	81a3      	strh	r3, [r4, #12]
 8018bb6:	6923      	ldr	r3, [r4, #16]
 8018bb8:	b94b      	cbnz	r3, 8018bce <__swsetup_r+0x7a>
 8018bba:	89a3      	ldrh	r3, [r4, #12]
 8018bbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018bc4:	d003      	beq.n	8018bce <__swsetup_r+0x7a>
 8018bc6:	4621      	mov	r1, r4
 8018bc8:	4628      	mov	r0, r5
 8018bca:	f000 f846 	bl	8018c5a <__smakebuf_r>
 8018bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bd2:	f013 0201 	ands.w	r2, r3, #1
 8018bd6:	d00a      	beq.n	8018bee <__swsetup_r+0x9a>
 8018bd8:	2200      	movs	r2, #0
 8018bda:	60a2      	str	r2, [r4, #8]
 8018bdc:	6962      	ldr	r2, [r4, #20]
 8018bde:	4252      	negs	r2, r2
 8018be0:	61a2      	str	r2, [r4, #24]
 8018be2:	6922      	ldr	r2, [r4, #16]
 8018be4:	b942      	cbnz	r2, 8018bf8 <__swsetup_r+0xa4>
 8018be6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018bea:	d1c5      	bne.n	8018b78 <__swsetup_r+0x24>
 8018bec:	bd38      	pop	{r3, r4, r5, pc}
 8018bee:	0799      	lsls	r1, r3, #30
 8018bf0:	bf58      	it	pl
 8018bf2:	6962      	ldrpl	r2, [r4, #20]
 8018bf4:	60a2      	str	r2, [r4, #8]
 8018bf6:	e7f4      	b.n	8018be2 <__swsetup_r+0x8e>
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	e7f7      	b.n	8018bec <__swsetup_r+0x98>
 8018bfc:	200001c8 	.word	0x200001c8

08018c00 <abort>:
 8018c00:	b508      	push	{r3, lr}
 8018c02:	2006      	movs	r0, #6
 8018c04:	f000 f88e 	bl	8018d24 <raise>
 8018c08:	2001      	movs	r0, #1
 8018c0a:	f7e9 f8af 	bl	8001d6c <_exit>

08018c0e <__swhatbuf_r>:
 8018c0e:	b570      	push	{r4, r5, r6, lr}
 8018c10:	460c      	mov	r4, r1
 8018c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c16:	2900      	cmp	r1, #0
 8018c18:	b096      	sub	sp, #88	@ 0x58
 8018c1a:	4615      	mov	r5, r2
 8018c1c:	461e      	mov	r6, r3
 8018c1e:	da0d      	bge.n	8018c3c <__swhatbuf_r+0x2e>
 8018c20:	89a3      	ldrh	r3, [r4, #12]
 8018c22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018c26:	f04f 0100 	mov.w	r1, #0
 8018c2a:	bf14      	ite	ne
 8018c2c:	2340      	movne	r3, #64	@ 0x40
 8018c2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018c32:	2000      	movs	r0, #0
 8018c34:	6031      	str	r1, [r6, #0]
 8018c36:	602b      	str	r3, [r5, #0]
 8018c38:	b016      	add	sp, #88	@ 0x58
 8018c3a:	bd70      	pop	{r4, r5, r6, pc}
 8018c3c:	466a      	mov	r2, sp
 8018c3e:	f000 f879 	bl	8018d34 <_fstat_r>
 8018c42:	2800      	cmp	r0, #0
 8018c44:	dbec      	blt.n	8018c20 <__swhatbuf_r+0x12>
 8018c46:	9901      	ldr	r1, [sp, #4]
 8018c48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018c4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018c50:	4259      	negs	r1, r3
 8018c52:	4159      	adcs	r1, r3
 8018c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018c58:	e7eb      	b.n	8018c32 <__swhatbuf_r+0x24>

08018c5a <__smakebuf_r>:
 8018c5a:	898b      	ldrh	r3, [r1, #12]
 8018c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c5e:	079d      	lsls	r5, r3, #30
 8018c60:	4606      	mov	r6, r0
 8018c62:	460c      	mov	r4, r1
 8018c64:	d507      	bpl.n	8018c76 <__smakebuf_r+0x1c>
 8018c66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018c6a:	6023      	str	r3, [r4, #0]
 8018c6c:	6123      	str	r3, [r4, #16]
 8018c6e:	2301      	movs	r3, #1
 8018c70:	6163      	str	r3, [r4, #20]
 8018c72:	b003      	add	sp, #12
 8018c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c76:	ab01      	add	r3, sp, #4
 8018c78:	466a      	mov	r2, sp
 8018c7a:	f7ff ffc8 	bl	8018c0e <__swhatbuf_r>
 8018c7e:	9f00      	ldr	r7, [sp, #0]
 8018c80:	4605      	mov	r5, r0
 8018c82:	4639      	mov	r1, r7
 8018c84:	4630      	mov	r0, r6
 8018c86:	f7fe fd99 	bl	80177bc <_malloc_r>
 8018c8a:	b948      	cbnz	r0, 8018ca0 <__smakebuf_r+0x46>
 8018c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c90:	059a      	lsls	r2, r3, #22
 8018c92:	d4ee      	bmi.n	8018c72 <__smakebuf_r+0x18>
 8018c94:	f023 0303 	bic.w	r3, r3, #3
 8018c98:	f043 0302 	orr.w	r3, r3, #2
 8018c9c:	81a3      	strh	r3, [r4, #12]
 8018c9e:	e7e2      	b.n	8018c66 <__smakebuf_r+0xc>
 8018ca0:	89a3      	ldrh	r3, [r4, #12]
 8018ca2:	6020      	str	r0, [r4, #0]
 8018ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018ca8:	81a3      	strh	r3, [r4, #12]
 8018caa:	9b01      	ldr	r3, [sp, #4]
 8018cac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018cb0:	b15b      	cbz	r3, 8018cca <__smakebuf_r+0x70>
 8018cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018cb6:	4630      	mov	r0, r6
 8018cb8:	f000 f84e 	bl	8018d58 <_isatty_r>
 8018cbc:	b128      	cbz	r0, 8018cca <__smakebuf_r+0x70>
 8018cbe:	89a3      	ldrh	r3, [r4, #12]
 8018cc0:	f023 0303 	bic.w	r3, r3, #3
 8018cc4:	f043 0301 	orr.w	r3, r3, #1
 8018cc8:	81a3      	strh	r3, [r4, #12]
 8018cca:	89a3      	ldrh	r3, [r4, #12]
 8018ccc:	431d      	orrs	r5, r3
 8018cce:	81a5      	strh	r5, [r4, #12]
 8018cd0:	e7cf      	b.n	8018c72 <__smakebuf_r+0x18>

08018cd2 <_raise_r>:
 8018cd2:	291f      	cmp	r1, #31
 8018cd4:	b538      	push	{r3, r4, r5, lr}
 8018cd6:	4605      	mov	r5, r0
 8018cd8:	460c      	mov	r4, r1
 8018cda:	d904      	bls.n	8018ce6 <_raise_r+0x14>
 8018cdc:	2316      	movs	r3, #22
 8018cde:	6003      	str	r3, [r0, #0]
 8018ce0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ce4:	bd38      	pop	{r3, r4, r5, pc}
 8018ce6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018ce8:	b112      	cbz	r2, 8018cf0 <_raise_r+0x1e>
 8018cea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018cee:	b94b      	cbnz	r3, 8018d04 <_raise_r+0x32>
 8018cf0:	4628      	mov	r0, r5
 8018cf2:	f000 f853 	bl	8018d9c <_getpid_r>
 8018cf6:	4622      	mov	r2, r4
 8018cf8:	4601      	mov	r1, r0
 8018cfa:	4628      	mov	r0, r5
 8018cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d00:	f000 b83a 	b.w	8018d78 <_kill_r>
 8018d04:	2b01      	cmp	r3, #1
 8018d06:	d00a      	beq.n	8018d1e <_raise_r+0x4c>
 8018d08:	1c59      	adds	r1, r3, #1
 8018d0a:	d103      	bne.n	8018d14 <_raise_r+0x42>
 8018d0c:	2316      	movs	r3, #22
 8018d0e:	6003      	str	r3, [r0, #0]
 8018d10:	2001      	movs	r0, #1
 8018d12:	e7e7      	b.n	8018ce4 <_raise_r+0x12>
 8018d14:	2100      	movs	r1, #0
 8018d16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	4798      	blx	r3
 8018d1e:	2000      	movs	r0, #0
 8018d20:	e7e0      	b.n	8018ce4 <_raise_r+0x12>
	...

08018d24 <raise>:
 8018d24:	4b02      	ldr	r3, [pc, #8]	@ (8018d30 <raise+0xc>)
 8018d26:	4601      	mov	r1, r0
 8018d28:	6818      	ldr	r0, [r3, #0]
 8018d2a:	f7ff bfd2 	b.w	8018cd2 <_raise_r>
 8018d2e:	bf00      	nop
 8018d30:	200001c8 	.word	0x200001c8

08018d34 <_fstat_r>:
 8018d34:	b538      	push	{r3, r4, r5, lr}
 8018d36:	4d07      	ldr	r5, [pc, #28]	@ (8018d54 <_fstat_r+0x20>)
 8018d38:	2300      	movs	r3, #0
 8018d3a:	4604      	mov	r4, r0
 8018d3c:	4608      	mov	r0, r1
 8018d3e:	4611      	mov	r1, r2
 8018d40:	602b      	str	r3, [r5, #0]
 8018d42:	f7e9 f863 	bl	8001e0c <_fstat>
 8018d46:	1c43      	adds	r3, r0, #1
 8018d48:	d102      	bne.n	8018d50 <_fstat_r+0x1c>
 8018d4a:	682b      	ldr	r3, [r5, #0]
 8018d4c:	b103      	cbz	r3, 8018d50 <_fstat_r+0x1c>
 8018d4e:	6023      	str	r3, [r4, #0]
 8018d50:	bd38      	pop	{r3, r4, r5, pc}
 8018d52:	bf00      	nop
 8018d54:	2000cd90 	.word	0x2000cd90

08018d58 <_isatty_r>:
 8018d58:	b538      	push	{r3, r4, r5, lr}
 8018d5a:	4d06      	ldr	r5, [pc, #24]	@ (8018d74 <_isatty_r+0x1c>)
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	4604      	mov	r4, r0
 8018d60:	4608      	mov	r0, r1
 8018d62:	602b      	str	r3, [r5, #0]
 8018d64:	f7e9 f862 	bl	8001e2c <_isatty>
 8018d68:	1c43      	adds	r3, r0, #1
 8018d6a:	d102      	bne.n	8018d72 <_isatty_r+0x1a>
 8018d6c:	682b      	ldr	r3, [r5, #0]
 8018d6e:	b103      	cbz	r3, 8018d72 <_isatty_r+0x1a>
 8018d70:	6023      	str	r3, [r4, #0]
 8018d72:	bd38      	pop	{r3, r4, r5, pc}
 8018d74:	2000cd90 	.word	0x2000cd90

08018d78 <_kill_r>:
 8018d78:	b538      	push	{r3, r4, r5, lr}
 8018d7a:	4d07      	ldr	r5, [pc, #28]	@ (8018d98 <_kill_r+0x20>)
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	4604      	mov	r4, r0
 8018d80:	4608      	mov	r0, r1
 8018d82:	4611      	mov	r1, r2
 8018d84:	602b      	str	r3, [r5, #0]
 8018d86:	f7e8 ffe1 	bl	8001d4c <_kill>
 8018d8a:	1c43      	adds	r3, r0, #1
 8018d8c:	d102      	bne.n	8018d94 <_kill_r+0x1c>
 8018d8e:	682b      	ldr	r3, [r5, #0]
 8018d90:	b103      	cbz	r3, 8018d94 <_kill_r+0x1c>
 8018d92:	6023      	str	r3, [r4, #0]
 8018d94:	bd38      	pop	{r3, r4, r5, pc}
 8018d96:	bf00      	nop
 8018d98:	2000cd90 	.word	0x2000cd90

08018d9c <_getpid_r>:
 8018d9c:	f7e8 bfce 	b.w	8001d3c <_getpid>

08018da0 <_init>:
 8018da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018da2:	bf00      	nop
 8018da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018da6:	bc08      	pop	{r3}
 8018da8:	469e      	mov	lr, r3
 8018daa:	4770      	bx	lr

08018dac <_fini>:
 8018dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dae:	bf00      	nop
 8018db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018db2:	bc08      	pop	{r3}
 8018db4:	469e      	mov	lr, r3
 8018db6:	4770      	bx	lr
