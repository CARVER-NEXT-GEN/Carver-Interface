
Carver-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a8c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  08017c70  08017c70  00018c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b00  08018b00  0001a194  2**0
                  CONTENTS
  4 .ARM          00000008  08018b00  08018b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b08  08018b08  0001a194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018b08  08018b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018b14  08018b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08018b18  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb18  20000198  08018cac  0001a198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000ccb0  08018cac  0001acb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002193b  00000000  00000000  0001a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c69  00000000  00000000  0003baff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00040768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fa  00000000  00000000  00042068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7d5  00000000  00000000  00043362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020192  00000000  00000000  00070b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117404  00000000  00000000  00090cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a80cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007454  00000000  00000000  001a8144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001af598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000198 	.word	0x20000198
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017c54 	.word	0x08017c54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000019c 	.word	0x2000019c
 800021c:	08017c54 	.word	0x08017c54

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	@ 0x30
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2220      	movs	r2, #32
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f016 fb3d 	bl	8016d18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800069e:	4b32      	ldr	r3, [pc, #200]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c0:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006cc:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d2:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006da:	2201      	movs	r2, #1
 80006dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	4817      	ldr	r0, [pc, #92]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800070a:	f001 fde7 	bl	80022dc <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000714:	f000 ff31 	bl	800157a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000724:	f003 f8b4 	bl	8003890 <HAL_ADCEx_MultiModeConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800072e:	f000 ff24 	bl	800157a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_ADC1_Init+0xec>)
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000736:	2306      	movs	r3, #6
 8000738:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073e:	237f      	movs	r3, #127	@ 0x7f
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000742:	2304      	movs	r3, #4
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f002 fadc 	bl	8002d0c <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 ff0e 	bl	800157a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	@ 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001b4 	.word	0x200001b4
 800076c:	04300002 	.word	0x04300002

08000770 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b09e      	sub	sp, #120	@ 0x78
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2254      	movs	r2, #84	@ 0x54
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f016 fac1 	bl	8016d18 <memset>
  if(adcHandle->Instance==ADC1)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800079e:	d167      	bne.n	8000870 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f004 fdd9 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007bc:	f000 fedd 	bl	800157a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007dc:	4a26      	ldr	r2, [pc, #152]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e4:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Vout_Poten_Pin;
 80007f0:	2301      	movs	r3, #1
 80007f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Vout_Poten_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000800:	4619      	mov	r1, r3
 8000802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000806:	f003 fd99 	bl	800433c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800080c:	4a1c      	ldr	r2, [pc, #112]	@ (8000880 <HAL_ADC_MspInit+0x110>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000812:	2205      	movs	r2, #5
 8000814:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800082a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800082e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000836:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800083a:	2220      	movs	r2, #32
 800083c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000846:	f003 fa3b 	bl	8003cc0 <HAL_DMA_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000850:	f000 fe93 	bl	800157a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a09      	ldr	r2, [pc, #36]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000858:	655a      	str	r2, [r3, #84]	@ 0x54
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2105      	movs	r1, #5
 8000864:	2012      	movs	r0, #18
 8000866:	f003 f9f6 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800086a:	2012      	movs	r0, #18
 800086c:	f003 fa0d 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000870:	bf00      	nop
 8000872:	3778      	adds	r7, #120	@ 0x78
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	20000220 	.word	0x20000220
 8000880:	40020030 	.word	0x40020030

08000884 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
 8000888:	2228      	movs	r2, #40	@ 0x28
 800088a:	4907      	ldr	r1, [pc, #28]	@ (80008a8 <MX_FREERTOS_Init+0x24>)
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <MX_FREERTOS_Init+0x28>)
 800088e:	f001 fee1 	bl	8002654 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000892:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <MX_FREERTOS_Init+0x2c>)
 8000894:	2100      	movs	r1, #0
 8000896:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <MX_FREERTOS_Init+0x30>)
 8000898:	f006 fe16 	bl	80074c8 <osThreadNew>
 800089c:	4603      	mov	r3, r0
 800089e:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <MX_FREERTOS_Init+0x34>)
 80008a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000029c 	.word	0x2000029c
 80008ac:	200001b4 	.word	0x200001b4
 80008b0:	08017d28 	.word	0x08017d28
 80008b4:	080008bd 	.word	0x080008bd
 80008b8:	200002ec 	.word	0x200002ec

080008bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008c0:	b0ec      	sub	sp, #432	@ 0x1b0
 80008c2:	af02      	add	r7, sp, #8
 80008c4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80008c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008cc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 80008ce:	4b64      	ldr	r3, [pc, #400]	@ (8000a60 <StartDefaultTask+0x1a4>)
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	4b64      	ldr	r3, [pc, #400]	@ (8000a64 <StartDefaultTask+0x1a8>)
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	4b64      	ldr	r3, [pc, #400]	@ (8000a68 <StartDefaultTask+0x1ac>)
 80008d8:	4a64      	ldr	r2, [pc, #400]	@ (8000a6c <StartDefaultTask+0x1b0>)
 80008da:	4965      	ldr	r1, [pc, #404]	@ (8000a70 <StartDefaultTask+0x1b4>)
 80008dc:	2001      	movs	r0, #1
 80008de:	f00a fd43 	bl	800b368 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80008e2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00a fc5a 	bl	800b1a0 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80008ec:	4b61      	ldr	r3, [pc, #388]	@ (8000a74 <StartDefaultTask+0x1b8>)
 80008ee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	freeRTOS_allocator.deallocate = microros_deallocate;
 80008f2:	4b61      	ldr	r3, [pc, #388]	@ (8000a78 <StartDefaultTask+0x1bc>)
 80008f4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.reallocate = microros_reallocate;
 80008f8:	4b60      	ldr	r3, [pc, #384]	@ (8000a7c <StartDefaultTask+0x1c0>)
 80008fa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80008fe:	4b60      	ldr	r3, [pc, #384]	@ (8000a80 <StartDefaultTask+0x1c4>)
 8000900:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000904:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000908:	4618      	mov	r0, r3
 800090a:	f00a fc57 	bl	800b1bc <rcutils_set_default_allocator>
 800090e:	4603      	mov	r3, r0
 8000910:	f083 0301 	eor.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800091a:	21c0      	movs	r1, #192	@ 0xc0
 800091c:	4859      	ldr	r0, [pc, #356]	@ (8000a84 <StartDefaultTask+0x1c8>)
 800091e:	f016 f90f 	bl	8016b40 <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(8);
 8000922:	4b59      	ldr	r3, [pc, #356]	@ (8000a88 <StartDefaultTask+0x1cc>)
 8000924:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 8000928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * uint16_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16);
 8000936:	f00b feab 	bl	800c690 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>
 800093a:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	const rosidl_message_type_support_t * bool_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool);
 800093e:	f00b fe8f 	bl	800c660 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>
 8000942:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194


	allocator = rcl_get_default_allocator();
 8000946:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800094a:	4618      	mov	r0, r3
 800094c:	f00a fc54 	bl	800b1f8 <rcutils_get_default_allocator>
 8000950:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000954:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000958:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 800095c:	461d      	mov	r5, r3
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	682b      	ldr	r3, [r5, #0]
 8000964:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8000966:	463b      	mov	r3, r7
 8000968:	4618      	mov	r0, r3
 800096a:	f00a f86b 	bl	800aa44 <rclc_executor_get_zero_initialized_executor>
 800096e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000972:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8000976:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800097a:	4611      	mov	r1, r2
 800097c:	2288      	movs	r2, #136	@ 0x88
 800097e:	4618      	mov	r0, r3
 8000980:	f016 fa93 	bl	8016eaa <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8000984:	f009 fb00 	bl	8009f88 <rcl_get_zero_initialized_init_options>
 8000988:	4602      	mov	r2, r0
 800098a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800098e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000992:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000994:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8000998:	466a      	mov	r2, sp
 800099a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800099e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80009a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ac:	4620      	mov	r0, r4
 80009ae:	f009 faed 	bl	8009f8c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 80009b2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80009b6:	21c6      	movs	r1, #198	@ 0xc6
 80009b8:	4618      	mov	r0, r3
 80009ba:	f009 fbe3 	bl	800a184 <rcl_init_options_set_domain_id>

	// create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80009be:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80009c2:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80009c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	f00a fb09 	bl	800afe8 <rclc_support_init_with_options>

	// create timer
	rclc_timer_init_default(&XLR8_timer, &support, timer_period, timer_callback);
 80009d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80009da:	2200      	movs	r2, #0
 80009dc:	4698      	mov	r8, r3
 80009de:	4691      	mov	r9, r2
 80009e0:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80009e4:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <StartDefaultTask+0x1d0>)
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4642      	mov	r2, r8
 80009ee:	464b      	mov	r3, r9
 80009f0:	f00a fb9e 	bl	800b130 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "uros_H7_Node", "", &support);
 80009f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009f8:	4a25      	ldr	r2, [pc, #148]	@ (8000a90 <StartDefaultTask+0x1d4>)
 80009fa:	4926      	ldr	r1, [pc, #152]	@ (8000a94 <StartDefaultTask+0x1d8>)
 80009fc:	4826      	ldr	r0, [pc, #152]	@ (8000a98 <StartDefaultTask+0x1dc>)
 80009fe:	f00a fb27 	bl	800b050 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&xrl8_publisher, &node, uint16_type_support, "accl_publisher");
 8000a02:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <StartDefaultTask+0x1e0>)
 8000a04:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000a08:	4923      	ldr	r1, [pc, #140]	@ (8000a98 <StartDefaultTask+0x1dc>)
 8000a0a:	4825      	ldr	r0, [pc, #148]	@ (8000aa0 <StartDefaultTask+0x1e4>)
 8000a0c:	f00a fb5c 	bl	800b0c8 <rclc_publisher_init_best_effort>
	rclc_publisher_init_best_effort(&emer_publisher, &node, bool_type_support, "H7_Emergency");
 8000a10:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <StartDefaultTask+0x1e8>)
 8000a12:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000a16:	4920      	ldr	r1, [pc, #128]	@ (8000a98 <StartDefaultTask+0x1dc>)
 8000a18:	4823      	ldr	r0, [pc, #140]	@ (8000aa8 <StartDefaultTask+0x1ec>)
 8000a1a:	f00a fb55 	bl	800b0c8 <rclc_publisher_init_best_effort>
	// create service server

	// create service client

	// create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8000a1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000a22:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a26:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000a2a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8000a2e:	f00a f813 	bl	800aa58 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &XLR8_timer);
 8000a32:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 8000a36:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f00a f87b 	bl	800ab38 <rclc_executor_add_timer>

	rclc_executor_spin(&executor);
 8000a42:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00a fa8c 	bl	800af64 <rclc_executor_spin>
	rmw_uros_sync_session(timeout_ms);
 8000a4c:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8000a50:	f00b fa82 	bl	800bf58 <rmw_uros_sync_session>
//	for(;;)
//	{
//	//	osDelay(10);
//	}
  /* USER CODE END StartDefaultTask */
}
 8000a54:	bf00      	nop
 8000a56:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a60:	08001221 	.word	0x08001221
 8000a64:	080011bd 	.word	0x080011bd
 8000a68:	0800119d 	.word	0x0800119d
 8000a6c:	08001171 	.word	0x08001171
 8000a70:	200065ac 	.word	0x200065ac
 8000a74:	08001589 	.word	0x08001589
 8000a78:	080015cd 	.word	0x080015cd
 8000a7c:	08001605 	.word	0x08001605
 8000a80:	08001671 	.word	0x08001671
 8000a84:	08017c7c 	.word	0x08017c7c
 8000a88:	007a1200 	.word	0x007a1200
 8000a8c:	08000aad 	.word	0x08000aad
 8000a90:	08017ca4 	.word	0x08017ca4
 8000a94:	08017ca8 	.word	0x08017ca8
 8000a98:	20000280 	.word	0x20000280
 8000a9c:	08017cb8 	.word	0x08017cb8
 8000aa0:	20000288 	.word	0x20000288
 8000aa4:	08017cc8 	.word	0x08017cc8
 8000aa8:	20000290 	.word	0x20000290

08000aac <timer_callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d04b      	beq.n	8000b56 <timer_callback+0xaa>


		if (sync_counter++ >= 254) {  // Sync session at lower frequency
 8000abe:	4b28      	ldr	r3, [pc, #160]	@ (8000b60 <timer_callback+0xb4>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	b2d1      	uxtb	r1, r2
 8000ac6:	4a26      	ldr	r2, [pc, #152]	@ (8000b60 <timer_callback+0xb4>)
 8000ac8:	7011      	strb	r1, [r2, #0]
 8000aca:	2bfd      	cmp	r3, #253	@ 0xfd
 8000acc:	d906      	bls.n	8000adc <timer_callback+0x30>
			rmw_uros_sync_session(1000);
 8000ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad2:	f00b fa41 	bl	800bf58 <rmw_uros_sync_session>
			sync_counter = 0;
 8000ad6:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <timer_callback+0xb4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
		}

		xlr8_publish(calculate_average(adc_buffer, BUFFER_SIZE));
 8000adc:	2128      	movs	r1, #40	@ 0x28
 8000ade:	4821      	ldr	r0, [pc, #132]	@ (8000b64 <timer_callback+0xb8>)
 8000ae0:	f000 f896 	bl	8000c10 <calculate_average>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f84c 	bl	8000b84 <xlr8_publish>
		emergency_publish(HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin));
 8000aec:	2120      	movs	r1, #32
 8000aee:	481e      	ldr	r0, [pc, #120]	@ (8000b68 <timer_callback+0xbc>)
 8000af0:	f003 fda6 	bl	8004640 <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f864 	bl	8000bc4 <emergency_publish>

		pinState = HAL_GPIO_ReadPin(Mode1_GPIO_Port, Mode1_Pin);
 8000afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f003 fd9c 	bl	8004640 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <timer_callback+0xc0>)
 8000b0e:	701a      	strb	r2, [r3, #0]
		pinState1 = HAL_GPIO_ReadPin(Mode2_GPIO_Port, Mode2_Pin);
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	4815      	ldr	r0, [pc, #84]	@ (8000b68 <timer_callback+0xbc>)
 8000b14:	f003 fd94 	bl	8004640 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <timer_callback+0xc4>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		pinState2 = HAL_GPIO_ReadPin(Mode3_GPIO_Port, Mode3_Pin);
 8000b20:	2140      	movs	r1, #64	@ 0x40
 8000b22:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <timer_callback+0xc8>)
 8000b24:	f003 fd8c 	bl	8004640 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <timer_callback+0xcc>)
 8000b2e:	701a      	strb	r2, [r3, #0]
		pinState3 = HAL_GPIO_ReadPin(Mode4_GPIO_Port, Mode4_Pin);
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b36:	f003 fd83 	bl	8004640 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <timer_callback+0xd0>)
 8000b40:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4c:	f003 fd90 	bl	8004670 <HAL_GPIO_WritePin>

		HAL_IWDG_Refresh(&hiwdg);
 8000b50:	480b      	ldr	r0, [pc, #44]	@ (8000b80 <timer_callback+0xd4>)
 8000b52:	f003 fe17 	bl	8004784 <HAL_IWDG_Refresh>
	}

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000295 	.word	0x20000295
 8000b64:	2000029c 	.word	0x2000029c
 8000b68:	48000800 	.word	0x48000800
 8000b6c:	20000296 	.word	0x20000296
 8000b70:	20000297 	.word	0x20000297
 8000b74:	48000400 	.word	0x48000400
 8000b78:	20000298 	.word	0x20000298
 8000b7c:	20000299 	.word	0x20000299
 8000b80:	2000658c 	.word	0x2000658c

08000b84 <xlr8_publish>:

void xlr8_publish(uint16_t xlr8)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
	XRL8_msg.data = xlr8;
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <xlr8_publish+0x34>)
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	8013      	strh	r3, [r2, #0]
	rcl_ret_t ret = rcl_publish(&xrl8_publisher, &XRL8_msg, NULL);
 8000b94:	2200      	movs	r2, #0
 8000b96:	4908      	ldr	r1, [pc, #32]	@ (8000bb8 <xlr8_publish+0x34>)
 8000b98:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <xlr8_publish+0x38>)
 8000b9a:	f009 fbc5 	bl	800a328 <rcl_publish>
 8000b9e:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <xlr8_publish+0x2c>
 8000ba6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <xlr8_publish+0x3c>)
 8000bac:	f015 ffc8 	bl	8016b40 <iprintf>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000028c 	.word	0x2000028c
 8000bbc:	20000288 	.word	0x20000288
 8000bc0:	08017cd8 	.word	0x08017cd8

08000bc4 <emergency_publish>:

void emergency_publish(GPIO_PinState emer_state)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	emer_msg.data = !emer_state;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf0c      	ite	eq
 8000bd4:	2301      	moveq	r3, #1
 8000bd6:	2300      	movne	r3, #0
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <emergency_publish+0x40>)
 8000bdc:	701a      	strb	r2, [r3, #0]
	rcl_ret_t ret = rcl_publish(&emer_publisher, &emer_msg, NULL);
 8000bde:	2200      	movs	r2, #0
 8000be0:	4908      	ldr	r1, [pc, #32]	@ (8000c04 <emergency_publish+0x40>)
 8000be2:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <emergency_publish+0x44>)
 8000be4:	f009 fba0 	bl	800a328 <rcl_publish>
 8000be8:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <emergency_publish+0x36>
 8000bf0:	f240 1125 	movw	r1, #293	@ 0x125
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <emergency_publish+0x48>)
 8000bf6:	f015 ffa3 	bl	8016b40 <iprintf>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000294 	.word	0x20000294
 8000c08:	20000290 	.word	0x20000290
 8000c0c:	08017cd8 	.word	0x08017cd8

08000c10 <calculate_average>:

uint16_t calculate_average(uint16_t *buffer, uint16_t length) {
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
    uint32_t sum = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	817b      	strh	r3, [r7, #10]
 8000c24:	e00b      	b.n	8000c3e <calculate_average+0x2e>
        sum += buffer[i];
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000c38:	897b      	ldrh	r3, [r7, #10]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	817b      	strh	r3, [r7, #10]
 8000c3e:	897a      	ldrh	r2, [r7, #10]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3ef      	bcc.n	8000c26 <calculate_average+0x16>
    }
    return (uint16_t)(sum / length);
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	b29b      	uxth	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000c68:	f007 fd02 	bl	8008670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <pvPortMallocMicroROS+0x17c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000c74:	f000 f986 	bl	8000f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000c78:	4b58      	ldr	r3, [pc, #352]	@ (8000ddc <pvPortMallocMicroROS+0x180>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f040 8090 	bne.w	8000da6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d01e      	beq.n	8000cca <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d015      	beq.n	8000cca <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f023 0307 	bic.w	r3, r3, #7
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00b      	beq.n	8000cca <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cb6:	f383 8811 	msr	BASEPRI, r3
 8000cba:	f3bf 8f6f 	isb	sy
 8000cbe:	f3bf 8f4f 	dsb	sy
 8000cc2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	e7fd      	b.n	8000cc6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d06a      	beq.n	8000da6 <pvPortMallocMicroROS+0x14a>
 8000cd0:	4b43      	ldr	r3, [pc, #268]	@ (8000de0 <pvPortMallocMicroROS+0x184>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d865      	bhi.n	8000da6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000cda:	4b42      	ldr	r3, [pc, #264]	@ (8000de4 <pvPortMallocMicroROS+0x188>)
 8000cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000cde:	4b41      	ldr	r3, [pc, #260]	@ (8000de4 <pvPortMallocMicroROS+0x188>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ce4:	e004      	b.n	8000cf0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d903      	bls.n	8000d02 <pvPortMallocMicroROS+0xa6>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f1      	bne.n	8000ce6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <pvPortMallocMicroROS+0x17c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d04c      	beq.n	8000da6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2208      	movs	r2, #8
 8000d12:	4413      	add	r3, r2
 8000d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	1ad2      	subs	r2, r2, r3
 8000d26:	2308      	movs	r3, #8
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d920      	bls.n	8000d70 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00b      	beq.n	8000d58 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d44:	f383 8811 	msr	BASEPRI, r3
 8000d48:	f3bf 8f6f 	isb	sy
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	613b      	str	r3, [r7, #16]
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1ad2      	subs	r2, r2, r3
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d6a:	69b8      	ldr	r0, [r7, #24]
 8000d6c:	f000 f96c 	bl	8001048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <pvPortMallocMicroROS+0x184>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	4a19      	ldr	r2, [pc, #100]	@ (8000de0 <pvPortMallocMicroROS+0x184>)
 8000d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <pvPortMallocMicroROS+0x184>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <pvPortMallocMicroROS+0x18c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d203      	bcs.n	8000d92 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <pvPortMallocMicroROS+0x184>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a16      	ldr	r2, [pc, #88]	@ (8000de8 <pvPortMallocMicroROS+0x18c>)
 8000d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <pvPortMallocMicroROS+0x180>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000da6:	f007 fc71 	bl	800868c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00b      	beq.n	8000dcc <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	f3bf 8f6f 	isb	sy
 8000dc0:	f3bf 8f4f 	dsb	sy
 8000dc4:	60fb      	str	r3, [r7, #12]
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000dcc:	69fb      	ldr	r3, [r7, #28]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3728      	adds	r7, #40	@ 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20005d74 	.word	0x20005d74
 8000ddc:	20005d80 	.word	0x20005d80
 8000de0:	20005d78 	.word	0x20005d78
 8000de4:	20005d6c 	.word	0x20005d6c
 8000de8:	20005d7c 	.word	0x20005d7c

08000dec <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d04a      	beq.n	8000e94 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	425b      	negs	r3, r3
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <vPortFreeMicroROS+0xb0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10b      	bne.n	8000e32 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	60fb      	str	r3, [r7, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	e7fd      	b.n	8000e2e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	60bb      	str	r3, [r7, #8]
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	e7fd      	b.n	8000e4e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <vPortFreeMicroROS+0xb0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d019      	beq.n	8000e94 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d115      	bne.n	8000e94 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <vPortFreeMicroROS+0xb0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000e78:	f007 fbfa 	bl	8008670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <vPortFreeMicroROS+0xb4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <vPortFreeMicroROS+0xb4>)
 8000e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e8a:	6938      	ldr	r0, [r7, #16]
 8000e8c:	f000 f8dc 	bl	8001048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000e90:	f007 fbfc 	bl	800868c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20005d80 	.word	0x20005d80
 8000ea0:	20005d78 	.word	0x20005d78

08000ea4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <getBlockSize+0x38>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]

	return count;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20005d80 	.word	0x20005d80

08000ee0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000eea:	f007 fbc1 	bl	8008670 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000eee:	6838      	ldr	r0, [r7, #0]
 8000ef0:	f7ff feb4 	bl	8000c5c <pvPortMallocMicroROS>
 8000ef4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d017      	beq.n	8000f2c <pvPortReallocMicroROS+0x4c>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d014      	beq.n	8000f2c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffce 	bl	8000ea4 <getBlockSize>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d201      	bcs.n	8000f1c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	68b8      	ldr	r0, [r7, #8]
 8000f22:	f015 ffc2 	bl	8016eaa <memcpy>

		vPortFreeMicroROS(pv);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff60 	bl	8000dec <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f2c:	f007 fbae 	bl	800868c <xTaskResumeAll>

	return newmem;
 8000f30:	68bb      	ldr	r3, [r7, #8]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f44:	f007 fb94 	bl	8008670 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff fe82 	bl	8000c5c <pvPortMallocMicroROS>
 8000f58:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000f5e:	e004      	b.n	8000f6a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	613a      	str	r2, [r7, #16]
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	617a      	str	r2, [r7, #20]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f5      	bne.n	8000f60 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000f74:	f007 fb8a 	bl	800868c <xTaskResumeAll>
  	return mem;
 8000f78:	68fb      	ldr	r3, [r7, #12]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f90:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <prvHeapInit+0xac>)
 8000f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00c      	beq.n	8000fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3307      	adds	r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f023 0307 	bic.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001030 <prvHeapInit+0xac>)
 8000fb4:	4413      	add	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <prvHeapInit+0xb0>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <prvHeapInit+0xb0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	4413      	add	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f023 0307 	bic.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <prvHeapInit+0xb4>)
 8000fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <prvHeapInit+0xb4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <prvHeapInit+0xb4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <prvHeapInit+0xb4>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <prvHeapInit+0xb8>)
 8001012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <prvHeapInit+0xbc>)
 800101a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <prvHeapInit+0xc0>)
 800101e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	2000516c 	.word	0x2000516c
 8001034:	20005d6c 	.word	0x20005d6c
 8001038:	20005d74 	.word	0x20005d74
 800103c:	20005d7c 	.word	0x20005d7c
 8001040:	20005d78 	.word	0x20005d78
 8001044:	20005d80 	.word	0x20005d80

08001048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <prvInsertBlockIntoFreeList+0xac>)
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e002      	b.n	800105c <prvInsertBlockIntoFreeList+0x14>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d8f7      	bhi.n	8001056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	4413      	add	r3, r2
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d108      	bne.n	800108a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	441a      	add	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	441a      	add	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d118      	bne.n	80010d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <prvInsertBlockIntoFreeList+0xb0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d00d      	beq.n	80010c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	441a      	add	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e008      	b.n	80010d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <prvInsertBlockIntoFreeList+0xb0>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e003      	b.n	80010d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d002      	beq.n	80010e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20005d6c 	.word	0x20005d6c
 80010f8:	20005d74 	.word	0x20005d74

080010fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_DMA_Init+0x70>)
 8001104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <MX_DMA_Init+0x70>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6493      	str	r3, [r2, #72]	@ 0x48
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_DMA_Init+0x70>)
 8001110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_DMA_Init+0x70>)
 800111c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <MX_DMA_Init+0x70>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6493      	str	r3, [r2, #72]	@ 0x48
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_DMA_Init+0x70>)
 8001128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	200b      	movs	r0, #11
 8001138:	f002 fd8d 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800113c:	200b      	movs	r0, #11
 800113e:	f002 fda4 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	200c      	movs	r0, #12
 8001148:	f002 fd85 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800114c:	200c      	movs	r0, #12
 800114e:	f002 fd9c 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2105      	movs	r1, #5
 8001156:	200d      	movs	r0, #13
 8001158:	f002 fd7d 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800115c:	200d      	movs	r0, #13
 800115e:	f002 fd94 	bl	8003c8a <HAL_NVIC_EnableIRQ>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800117e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001184:	4904      	ldr	r1, [pc, #16]	@ (8001198 <cubemx_transport_open+0x28>)
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f004 fc0c 	bl	80059a4 <HAL_UART_Receive_DMA>
    return true;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20005d84 	.word	0x20005d84

0800119c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f004 fc45 	bl	8005a3c <HAL_UART_DMAStop>
    return true;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011d0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d8:	2b20      	cmp	r3, #32
 80011da:	d11b      	bne.n	8001214 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	6978      	ldr	r0, [r7, #20]
 80011e6:	f004 fb5d 	bl	80058a4 <HAL_UART_Transmit_DMA>
 80011ea:	4603      	mov	r3, r0
 80011ec:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011ee:	e002      	b.n	80011f6 <cubemx_transport_write+0x3a>
            osDelay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f006 f9fb 	bl	80075ec <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011f6:	7cfb      	ldrb	r3, [r7, #19]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d104      	bne.n	8001206 <cubemx_transport_write+0x4a>
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001202:	2b20      	cmp	r3, #32
 8001204:	d1f4      	bne.n	80011f0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001206:	7cfb      	ldrb	r3, [r7, #19]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <cubemx_transport_write+0x54>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	e002      	b.n	8001216 <cubemx_transport_write+0x5a>
 8001210:	2300      	movs	r3, #0
 8001212:	e000      	b.n	8001216 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001214:	2300      	movs	r3, #0
    }
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001234:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
}
 800123c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800124c:	4a1b      	ldr	r2, [pc, #108]	@ (80012bc <cubemx_transport_read+0x9c>)
 800124e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001250:	b662      	cpsie	i
}
 8001252:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	3301      	adds	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800125a:	2001      	movs	r0, #1
 800125c:	f006 f9c6 	bl	80075ec <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <cubemx_transport_read+0xa0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <cubemx_transport_read+0x9c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d103      	bne.n	8001274 <cubemx_transport_read+0x54>
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbe2      	blt.n	800123a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001278:	e011      	b.n	800129e <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <cubemx_transport_read+0xa0>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	440b      	add	r3, r1
 8001284:	490f      	ldr	r1, [pc, #60]	@ (80012c4 <cubemx_transport_read+0xa4>)
 8001286:	5c8a      	ldrb	r2, [r1, r2]
 8001288:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <cubemx_transport_read+0xa0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001294:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <cubemx_transport_read+0xa0>)
 8001296:	6013      	str	r3, [r2, #0]
        wrote++;
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	3301      	adds	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <cubemx_transport_read+0xa0>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <cubemx_transport_read+0x9c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d003      	beq.n	80012b2 <cubemx_transport_read+0x92>
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3e3      	bcc.n	800127a <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80012b2:	69bb      	ldr	r3, [r7, #24]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20006588 	.word	0x20006588
 80012c0:	20006584 	.word	0x20006584
 80012c4:	20005d84 	.word	0x20005d84

080012c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b62      	ldr	r3, [pc, #392]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4a61      	ldr	r2, [pc, #388]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b59      	ldr	r3, [pc, #356]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b56      	ldr	r3, [pc, #344]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a55      	ldr	r2, [pc, #340]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b53      	ldr	r3, [pc, #332]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b50      	ldr	r3, [pc, #320]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a4f      	ldr	r2, [pc, #316]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <MX_GPIO_Init+0x1a0>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001346:	f003 f993 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001354:	f003 f98c 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Mode4_GPIO_Port, Lamp_Mode4_Pin, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800135e:	4843      	ldr	r0, [pc, #268]	@ (800146c <MX_GPIO_Init+0x1a4>)
 8001360:	f003 f986 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp_Mode2_Pin|Lamp_Mode3_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2128      	movs	r1, #40	@ 0x28
 8001368:	4841      	ldr	r0, [pc, #260]	@ (8001470 <MX_GPIO_Init+0x1a8>)
 800136a:	f003 f981 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800136e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001374:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4839      	ldr	r0, [pc, #228]	@ (800146c <MX_GPIO_Init+0x1a4>)
 8001386:	f002 ffd9 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800138a:	2320      	movs	r3, #32
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a4:	f002 ffca 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Mode4_Pin|Mode1_Pin;
 80013a8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c0:	f002 ffbc 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Emergency_Pin|Mode2_Pin;
 80013c4:	23a0      	movs	r3, #160	@ 0xa0
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4825      	ldr	r0, [pc, #148]	@ (800146c <MX_GPIO_Init+0x1a4>)
 80013d8:	f002 ffb0 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lamp_Mode1_Pin;
 80013dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Lamp_Mode1_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f8:	f002 ffa0 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lamp_Mode4_Pin;
 80013fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Lamp_Mode4_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4815      	ldr	r0, [pc, #84]	@ (800146c <MX_GPIO_Init+0x1a4>)
 8001416:	f002 ff91 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Lamp_Mode2_Pin|Lamp_Mode3_Pin;
 800141a:	2328      	movs	r3, #40	@ 0x28
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	480f      	ldr	r0, [pc, #60]	@ (8001470 <MX_GPIO_Init+0x1a8>)
 8001432:	f002 ff83 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mode3_Pin;
 8001436:	2340      	movs	r3, #64	@ 0x40
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode3_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4809      	ldr	r0, [pc, #36]	@ (8001470 <MX_GPIO_Init+0x1a8>)
 800144a:	f002 ff77 	bl	800433c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2105      	movs	r1, #5
 8001452:	2028      	movs	r0, #40	@ 0x28
 8001454:	f002 fbff 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001458:	2028      	movs	r0, #40	@ 0x28
 800145a:	f002 fc16 	bl	8003c8a <HAL_NVIC_EnableIRQ>

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	48000800 	.word	0x48000800
 8001470:	48000400 	.word	0x48000400

08001474 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_IWDG_Init+0x34>)
 800147a:	4a0c      	ldr	r2, [pc, #48]	@ (80014ac <MX_IWDG_Init+0x38>)
 800147c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <MX_IWDG_Init+0x34>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_IWDG_Init+0x34>)
 8001486:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800148a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_IWDG_Init+0x34>)
 800148e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001492:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_IWDG_Init+0x34>)
 8001496:	f003 f926 	bl	80046e6 <HAL_IWDG_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80014a0:	f000 f86b 	bl	800157a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000658c 	.word	0x2000658c
 80014ac:	40003000 	.word	0x40003000

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f000 fc61 	bl	8001d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f812 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f7ff ff04 	bl	80012c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014c0:	f7ff fe1c 	bl	80010fc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80014c4:	f000 fb28 	bl	8001b18 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80014c8:	f7ff f8da 	bl	8000680 <MX_ADC1_Init>
  MX_IWDG_Init();
 80014cc:	f7ff ffd2 	bl	8001474 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014d0:	f005 ffb0 	bl	8007434 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80014d4:	f7ff f9d6 	bl	8000884 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014d8:	f005 ffd0 	bl	800747c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <main+0x2c>

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	@ 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2238      	movs	r2, #56	@ 0x38
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f015 fc12 	bl	8016d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001502:	2000      	movs	r0, #0
 8001504:	f003 f94e 	bl	80047a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001508:	230a      	movs	r3, #10
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001512:	2340      	movs	r3, #64	@ 0x40
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001516:	2301      	movs	r3, #1
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151a:	2302      	movs	r3, #2
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151e:	2302      	movs	r3, #2
 8001520:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001522:	2304      	movs	r3, #4
 8001524:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001526:	2355      	movs	r3, #85	@ 0x55
 8001528:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001532:	2302      	movs	r3, #2
 8001534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	4618      	mov	r0, r3
 800153c:	f003 f9e6 	bl	800490c <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001546:	f000 f818 	bl	800157a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154e:	2303      	movs	r3, #3
 8001550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2104      	movs	r1, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fce4 	bl	8004f30 <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800156e:	f000 f804 	bl	800157a <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	@ 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800157e:	b672      	cpsid	i
}
 8001580:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001582:	bf00      	nop
 8001584:	e7fd      	b.n	8001582 <Error_Handler+0x8>
	...

08001588 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <microros_allocate+0x3c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <microros_allocate+0x3c>)
 80015a0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <microros_allocate+0x40>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <microros_allocate+0x40>)
 80015b0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fb52 	bl	8000c5c <pvPortMallocMicroROS>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000659c 	.word	0x2000659c
 80015c8:	200065a0 	.word	0x200065a0

080015cc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fc61 	bl	8000ea4 <getBlockSize>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <microros_deallocate+0x34>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <microros_deallocate+0x34>)
 80015ee:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fbfb 	bl	8000dec <vPortFreeMicroROS>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200065a0 	.word	0x200065a0

08001604 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <microros_reallocate+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	461a      	mov	r2, r3
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <microros_reallocate+0x64>)
 800161e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <microros_reallocate+0x68>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	4413      	add	r3, r2
 800162a:	461a      	mov	r2, r3
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <microros_reallocate+0x68>)
 800162e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d104      	bne.n	8001640 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001636:	68b8      	ldr	r0, [r7, #8]
 8001638:	f7ff fb10 	bl	8000c5c <pvPortMallocMicroROS>
 800163c:	4603      	mov	r3, r0
 800163e:	e00e      	b.n	800165e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fc2f 	bl	8000ea4 <getBlockSize>
 8001646:	4603      	mov	r3, r0
 8001648:	4a08      	ldr	r2, [pc, #32]	@ (800166c <microros_reallocate+0x68>)
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <microros_reallocate+0x68>)
 8001652:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fc42 	bl	8000ee0 <pvPortReallocMicroROS>
 800165c:	4603      	mov	r3, r0
  }
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000659c 	.word	0x2000659c
 800166c:	200065a0 	.word	0x200065a0

08001670 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <microros_zero_allocate+0x48>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	4413      	add	r3, r2
 800168a:	461a      	mov	r2, r3
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <microros_zero_allocate+0x48>)
 800168e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <microros_zero_allocate+0x4c>)
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	4413      	add	r3, r2
 800169e:	461a      	mov	r2, r3
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <microros_zero_allocate+0x4c>)
 80016a2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f7ff fc47 	bl	8000f3a <pvPortCallocMicroROS>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000659c 	.word	0x2000659c
 80016bc:	200065a0 	.word	0x200065a0

080016c0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80016c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80016d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016d6:	a320      	add	r3, pc, #128	@ (adr r3, 8001758 <UTILS_NanosecondsToTimespec+0x98>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe fe08 	bl	80002f0 <__aeabi_ldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80016ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8001758 <UTILS_NanosecondsToTimespec+0x98>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe fdfc 	bl	80002f0 <__aeabi_ldivmod>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	da20      	bge.n	8001746 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a11      	ldr	r2, [pc, #68]	@ (8001750 <UTILS_NanosecondsToTimespec+0x90>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1712      	asrs	r2, r2, #28
 8001710:	17db      	asrs	r3, r3, #31
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	6979      	ldr	r1, [r7, #20]
 8001720:	17c8      	asrs	r0, r1, #31
 8001722:	460c      	mov	r4, r1
 8001724:	4605      	mov	r5, r0
 8001726:	ebb2 0804 	subs.w	r8, r2, r4
 800172a:	eb63 0905 	sbc.w	r9, r3, r5
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	4906      	ldr	r1, [pc, #24]	@ (8001754 <UTILS_NanosecondsToTimespec+0x94>)
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	441a      	add	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
    }
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001750:	44b82fa1 	.word	0x44b82fa1
 8001754:	3b9aca00 	.word	0x3b9aca00
 8001758:	3b9aca00 	.word	0x3b9aca00
 800175c:	00000000 	.word	0x00000000

08001760 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b08e      	sub	sp, #56	@ 0x38
 8001766:	af00      	add	r7, sp, #0
 8001768:	6278      	str	r0, [r7, #36]	@ 0x24
 800176a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800176c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001770:	2300      	movs	r3, #0
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001786:	4618      	mov	r0, r3
 8001788:	f007 f9fc 	bl	8008b84 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	17da      	asrs	r2, r3, #31
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	61fa      	str	r2, [r7, #28]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	69b9      	ldr	r1, [r7, #24]
 800179e:	000b      	movs	r3, r1
 80017a0:	2200      	movs	r2, #0
 80017a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80017a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a8:	2200      	movs	r2, #0
 80017aa:	461c      	mov	r4, r3
 80017ac:	4615      	mov	r5, r2
 80017ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b2:	1911      	adds	r1, r2, r4
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	416b      	adcs	r3, r5
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017be:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80017c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	f04f 0500 	mov.w	r5, #0
 80017d2:	015d      	lsls	r5, r3, #5
 80017d4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80017d8:	0154      	lsls	r4, r2, #5
 80017da:	4622      	mov	r2, r4
 80017dc:	462b      	mov	r3, r5
 80017de:	ebb2 0800 	subs.w	r8, r2, r0
 80017e2:	eb63 0901 	sbc.w	r9, r3, r1
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80017f2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80017f6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80017fa:	4690      	mov	r8, r2
 80017fc:	4699      	mov	r9, r3
 80017fe:	eb18 0a00 	adds.w	sl, r8, r0
 8001802:	eb49 0b01 	adc.w	fp, r9, r1
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001812:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001816:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800181a:	ebb2 040a 	subs.w	r4, r2, sl
 800181e:	603c      	str	r4, [r7, #0]
 8001820:	eb63 030b 	sbc.w	r3, r3, fp
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800182a:	4623      	mov	r3, r4
 800182c:	181b      	adds	r3, r3, r0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	462b      	mov	r3, r5
 8001832:	eb41 0303 	adc.w	r3, r1, r3
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800183e:	f7ff ff3f 	bl	80016c0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001842:	2300      	movs	r3, #0
 8001844:	4618      	mov	r0, r3
 8001846:	3738      	adds	r7, #56	@ 0x38
 8001848:	46bd      	mov	sp, r7
 800184a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_MspInit+0x50>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185a:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <HAL_MspInit+0x50>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6613      	str	r3, [r2, #96]	@ 0x60
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <HAL_MspInit+0x50>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_MspInit+0x50>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <HAL_MspInit+0x50>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6593      	str	r3, [r2, #88]	@ 0x58
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_MspInit+0x50>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	210f      	movs	r1, #15
 800188a:	f06f 0001 	mvn.w	r0, #1
 800188e:	f002 f9e2 	bl	8003c56 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001892:	f003 f82b 	bl	80048ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <NMI_Handler+0x4>

080018ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <MemManage_Handler+0x4>

080018bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <UsageFault_Handler+0x4>

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f000 fa9f 	bl	8001e20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018e2:	f007 fad3 	bl	8008e8c <xTaskGetSchedulerState>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d001      	beq.n	80018f0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018ec:	f008 f8cc 	bl	8009a88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <DMA1_Channel1_IRQHandler+0x10>)
 80018fa:	f002 fbc4 	bl	8004086 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20006640 	.word	0x20006640

08001908 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA1_Channel2_IRQHandler+0x10>)
 800190e:	f002 fbba 	bl	8004086 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200066a0 	.word	0x200066a0

0800191c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <DMA1_Channel3_IRQHandler+0x10>)
 8001922:	f002 fbb0 	bl	8004086 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000220 	.word	0x20000220

08001930 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <ADC1_2_IRQHandler+0x10>)
 8001936:	f000 ff61 	bl	80027fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001b4 	.word	0x200001b4

08001944 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001948:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800194c:	f002 fea8 	bl	80046a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <LPUART1_IRQHandler+0x10>)
 800195a:	f004 f905 	bl	8005b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200065ac 	.word	0x200065ac

08001968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_kill>:

int _kill(int pid, int sig)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001982:	f015 fa5d 	bl	8016e40 <__errno>
 8001986:	4603      	mov	r3, r0
 8001988:	2216      	movs	r2, #22
 800198a:	601a      	str	r2, [r3, #0]
  return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_exit>:

void _exit (int status)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ffe7 	bl	8001978 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019aa:	bf00      	nop
 80019ac:	e7fd      	b.n	80019aa <_exit+0x12>

080019ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e00a      	b.n	80019d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c0:	f3af 8000 	nop.w
 80019c4:	4601      	mov	r1, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	60ba      	str	r2, [r7, #8]
 80019cc:	b2ca      	uxtb	r2, r1
 80019ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbf0      	blt.n	80019c0 <_read+0x12>
  }

  return len;
 80019de:	687b      	ldr	r3, [r7, #4]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e009      	b.n	8001a0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	60ba      	str	r2, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbf1      	blt.n	80019fa <_write+0x12>
  }
  return len;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_close>:

int _close(int file)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a48:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_isatty>:

int _isatty(int file)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	@ (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f015 f9c2 	bl	8016e40 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20020000 	.word	0x20020000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	200065a8 	.word	0x200065a8
 8001af0:	2000ccb0 	.word	0x2000ccb0

08001af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b1e:	4a22      	ldr	r2, [pc, #136]	@ (8001ba8 <MX_LPUART1_UART_Init+0x90>)
 8001b20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b48:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b5a:	4812      	ldr	r0, [pc, #72]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b5c:	f003 fe52 	bl	8005804 <HAL_UART_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b66:	f7ff fd08 	bl	800157a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	480d      	ldr	r0, [pc, #52]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b6e:	f005 fb62 	bl	8007236 <HAL_UARTEx_SetTxFifoThreshold>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b78:	f7ff fcff 	bl	800157a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b80:	f005 fb97 	bl	80072b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b8a:	f7ff fcf6 	bl	800157a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_LPUART1_UART_Init+0x8c>)
 8001b90:	f005 fb18 	bl	80071c4 <HAL_UARTEx_DisableFifoMode>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b9a:	f7ff fcee 	bl	800157a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200065ac 	.word	0x200065ac
 8001ba8:	40008000 	.word	0x40008000

08001bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b09e      	sub	sp, #120	@ 0x78
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2254      	movs	r2, #84	@ 0x54
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f015 f8a3 	bl	8016d18 <memset>
  if(uartHandle->Instance==LPUART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001d10 <HAL_UART_MspInit+0x164>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	f040 8094 	bne.w	8001d06 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bde:	2320      	movs	r3, #32
 8001be0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fbbc 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bf6:	f7ff fcc0 	bl	800157a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bfa:	4b46      	ldr	r3, [pc, #280]	@ (8001d14 <HAL_UART_MspInit+0x168>)
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	4a45      	ldr	r2, [pc, #276]	@ (8001d14 <HAL_UART_MspInit+0x168>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c06:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <HAL_UART_MspInit+0x168>)
 8001c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <HAL_UART_MspInit+0x168>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	4a3f      	ldr	r2, [pc, #252]	@ (8001d14 <HAL_UART_MspInit+0x168>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <HAL_UART_MspInit+0x168>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c48:	f002 fb78 	bl	800433c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001c4c:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c4e:	4a33      	ldr	r2, [pc, #204]	@ (8001d1c <HAL_UART_MspInit+0x170>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c54:	2223      	movs	r2, #35	@ 0x23
 8001c56:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c58:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c64:	4b2c      	ldr	r3, [pc, #176]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c66:	2280      	movs	r2, #128	@ 0x80
 8001c68:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c70:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001c76:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c7c:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c7e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001c82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001c84:	4824      	ldr	r0, [pc, #144]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c86:	f002 f81b 	bl	8003cc0 <HAL_DMA_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001c90:	f7ff fc73 	bl	800157a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a20      	ldr	r2, [pc, #128]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c98:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d18 <HAL_UART_MspInit+0x16c>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001ca2:	4a20      	ldr	r2, [pc, #128]	@ (8001d24 <HAL_UART_MspInit+0x178>)
 8001ca4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001ca8:	2222      	movs	r2, #34	@ 0x22
 8001caa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001ccc:	2220      	movs	r2, #32
 8001cce:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cd2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001cd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001cd8:	4811      	ldr	r0, [pc, #68]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cda:	f001 fff1 	bl	8003cc0 <HAL_DMA_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001ce4:	f7ff fc49 	bl	800157a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d20 <HAL_UART_MspInit+0x174>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	205b      	movs	r0, #91	@ 0x5b
 8001cfc:	f001 ffab 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001d00:	205b      	movs	r0, #91	@ 0x5b
 8001d02:	f001 ffc2 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3778      	adds	r7, #120	@ 0x78
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40008000 	.word	0x40008000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	20006640 	.word	0x20006640
 8001d1c:	40020008 	.word	0x40020008
 8001d20:	200066a0 	.word	0x200066a0
 8001d24:	4002001c 	.word	0x4002001c

08001d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d28:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d2c:	f7ff fee2 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d32:	490d      	ldr	r1, [pc, #52]	@ (8001d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <LoopForever+0xe>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d48:	4c0a      	ldr	r4, [pc, #40]	@ (8001d74 <LoopForever+0x16>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d56:	f015 f879 	bl	8016e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5a:	f7ff fba9 	bl	80014b0 <main>

08001d5e <LoopForever>:

LoopForever:
    b LoopForever
 8001d5e:	e7fe      	b.n	8001d5e <LoopForever>
  ldr   r0, =_estack
 8001d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8001d6c:	08018b18 	.word	0x08018b18
  ldr r2, =_sbss
 8001d70:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001d74:	2000ccb0 	.word	0x2000ccb0

08001d78 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC3_IRQHandler>

08001d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f001 ff5b 	bl	8003c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f000 f80e 	bl	8001dac <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	e001      	b.n	8001da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9c:	f7ff fd58 	bl	8001850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da0:	79fb      	ldrb	r3, [r7, #7]

}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <HAL_InitTick+0x68>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d022      	beq.n	8001e06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dc0:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_InitTick+0x6c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_InitTick+0x68>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 ff66 	bl	8003ca6 <HAL_SYSTICK_Config>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	d809      	bhi.n	8001dfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de6:	2200      	movs	r2, #0
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dee:	f001 ff32 	bl	8003c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_InitTick+0x70>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e004      	b.n	8001e0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e001      	b.n	8001e0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000000c 	.word	0x2000000c
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x1c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_IncTick+0x20>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a03      	ldr	r2, [pc, #12]	@ (8001e3c <HAL_IncTick+0x1c>)
 8001e30:	6013      	str	r3, [r2, #0]
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20006700 	.word	0x20006700
 8001e40:	2000000c 	.word	0x2000000c

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20006700 	.word	0x20006700

08001e5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3360      	adds	r3, #96	@ 0x60
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <LL_ADC_SetOffset+0x44>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	03fff000 	.word	0x03fff000

08001f0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3360      	adds	r3, #96	@ 0x60
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3360      	adds	r3, #96	@ 0x60
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b087      	sub	sp, #28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3360      	adds	r3, #96	@ 0x60
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f98:	bf00      	nop
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3360      	adds	r3, #96	@ 0x60
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	615a      	str	r2, [r3, #20]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002026:	b480      	push	{r7}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3330      	adds	r3, #48	@ 0x30
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	4413      	add	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	211f      	movs	r1, #31
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	f003 011f 	and.w	r1, r3, #31
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3314      	adds	r3, #20
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0e5b      	lsrs	r3, r3, #25
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	0d1b      	lsrs	r3, r3, #20
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2107      	movs	r1, #7
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	0d1b      	lsrs	r3, r3, #20
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	43db      	mvns	r3, r3
 8002116:	401a      	ands	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0318 	and.w	r3, r3, #24
 800211e:	4908      	ldr	r1, [pc, #32]	@ (8002140 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002120:	40d9      	lsrs	r1, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	400b      	ands	r3, r1
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	0007ffff 	.word	0x0007ffff

08002144 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 031f 	and.w	r3, r3, #31
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800218c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6093      	str	r3, [r2, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021b4:	d101      	bne.n	80021ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002204:	d101      	bne.n	800220a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <LL_ADC_IsEnabled+0x18>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <LL_ADC_IsEnabled+0x1a>
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002276:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800227a:	f043 0204 	orr.w	r2, r3, #4
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d101      	bne.n	80022cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1a9      	b.n	800264a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe fa33 	bl	8000770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff3f 	bl	80021a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff25 	bl	800217c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff5a 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff3e 	bl	80021c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800234c:	4b9c      	ldr	r3, [pc, #624]	@ (80025c0 <HAL_ADC_Init+0x2e4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	4a9c      	ldr	r2, [pc, #624]	@ (80025c4 <HAL_ADC_Init+0x2e8>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002360:	e002      	b.n	8002368 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3b01      	subs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff3c 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	f043 0210 	orr.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff75 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 80023a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8142 	bne.w	8002638 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 813e 	bne.w	8002638 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023c4:	f043 0202 	orr.w	r2, r3, #2
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff35 	bl	8002240 <LL_ADC_IsEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d141      	bne.n	8002460 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023e4:	d004      	beq.n	80023f0 <HAL_ADC_Init+0x114>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a77      	ldr	r2, [pc, #476]	@ (80025c8 <HAL_ADC_Init+0x2ec>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10f      	bne.n	8002410 <HAL_ADC_Init+0x134>
 80023f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023f4:	f7ff ff24 	bl	8002240 <LL_ADC_IsEnabled>
 80023f8:	4604      	mov	r4, r0
 80023fa:	4873      	ldr	r0, [pc, #460]	@ (80025c8 <HAL_ADC_Init+0x2ec>)
 80023fc:	f7ff ff20 	bl	8002240 <LL_ADC_IsEnabled>
 8002400:	4603      	mov	r3, r0
 8002402:	4323      	orrs	r3, r4
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e012      	b.n	8002436 <HAL_ADC_Init+0x15a>
 8002410:	486e      	ldr	r0, [pc, #440]	@ (80025cc <HAL_ADC_Init+0x2f0>)
 8002412:	f7ff ff15 	bl	8002240 <LL_ADC_IsEnabled>
 8002416:	4604      	mov	r4, r0
 8002418:	486d      	ldr	r0, [pc, #436]	@ (80025d0 <HAL_ADC_Init+0x2f4>)
 800241a:	f7ff ff11 	bl	8002240 <LL_ADC_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	431c      	orrs	r4, r3
 8002422:	486c      	ldr	r0, [pc, #432]	@ (80025d4 <HAL_ADC_Init+0x2f8>)
 8002424:	f7ff ff0c 	bl	8002240 <LL_ADC_IsEnabled>
 8002428:	4603      	mov	r3, r0
 800242a:	4323      	orrs	r3, r4
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_Init+0x172>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5f      	ldr	r2, [pc, #380]	@ (80025c8 <HAL_ADC_Init+0x2ec>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_ADC_Init+0x176>
 800244e:	4a62      	ldr	r2, [pc, #392]	@ (80025d8 <HAL_ADC_Init+0x2fc>)
 8002450:	e000      	b.n	8002454 <HAL_ADC_Init+0x178>
 8002452:	4a62      	ldr	r2, [pc, #392]	@ (80025dc <HAL_ADC_Init+0x300>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7ff fcfe 	bl	8001e5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f5b      	ldrb	r3, [r3, #29]
 8002464:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002470:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002476:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800247e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800248a:	2b01      	cmp	r3, #1
 800248c:	d106      	bne.n	800249c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	045b      	lsls	r3, r3, #17
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	4b48      	ldr	r3, [pc, #288]	@ (80025e0 <HAL_ADC_Init+0x304>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fee4 	bl	80022b4 <LL_ADC_INJ_IsConversionOngoing>
 80024ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d17f      	bne.n	80025f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d17c      	bne.n	80025f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002506:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002516:	f023 0302 	bic.w	r3, r3, #2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	430b      	orrs	r3, r1
 8002522:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d017      	beq.n	800255c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800253a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002544:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002548:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6911      	ldr	r1, [r2, #16]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800255a:	e013      	b.n	8002584 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800256a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800257c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002580:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800258a:	2b01      	cmp	r3, #1
 800258c:	d12a      	bne.n	80025e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025a4:	4311      	orrs	r1, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025b0:	430a      	orrs	r2, r1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	611a      	str	r2, [r3, #16]
 80025be:	e019      	b.n	80025f4 <HAL_ADC_Init+0x318>
 80025c0:	20000004 	.word	0x20000004
 80025c4:	053e2d63 	.word	0x053e2d63
 80025c8:	50000100 	.word	0x50000100
 80025cc:	50000400 	.word	0x50000400
 80025d0:	50000500 	.word	0x50000500
 80025d4:	50000600 	.word	0x50000600
 80025d8:	50000300 	.word	0x50000300
 80025dc:	50000700 	.word	0x50000700
 80025e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10c      	bne.n	8002616 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f023 010f 	bic.w	r1, r3, #15
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	1e5a      	subs	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
 8002614:	e007      	b.n	8002626 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 020f 	bic.w	r2, r2, #15
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002636:	e007      	b.n	8002648 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop

08002654 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002668:	d004      	beq.n	8002674 <HAL_ADC_Start_DMA+0x20>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a5a      	ldr	r2, [pc, #360]	@ (80027d8 <HAL_ADC_Start_DMA+0x184>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_ADC_Start_DMA+0x24>
 8002674:	4b59      	ldr	r3, [pc, #356]	@ (80027dc <HAL_ADC_Start_DMA+0x188>)
 8002676:	e000      	b.n	800267a <HAL_ADC_Start_DMA+0x26>
 8002678:	4b59      	ldr	r3, [pc, #356]	@ (80027e0 <HAL_ADC_Start_DMA+0x18c>)
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd62 	bl	8002144 <LL_ADC_GetMultimode>
 8002680:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fe01 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 809b 	bne.w	80027ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Start_DMA+0x4e>
 800269e:	2302      	movs	r3, #2
 80026a0:	e096      	b.n	80027d0 <HAL_ADC_Start_DMA+0x17c>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4d      	ldr	r2, [pc, #308]	@ (80027e4 <HAL_ADC_Start_DMA+0x190>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d008      	beq.n	80026c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d002      	beq.n	80026c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b09      	cmp	r3, #9
 80026c4:	d17a      	bne.n	80027bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 ff60 	bl	800358c <ADC_Enable>
 80026cc:	4603      	mov	r3, r0
 80026ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d16d      	bne.n	80027b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3a      	ldr	r2, [pc, #232]	@ (80027d8 <HAL_ADC_Start_DMA+0x184>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_ADC_Start_DMA+0xb4>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3b      	ldr	r2, [pc, #236]	@ (80027e8 <HAL_ADC_Start_DMA+0x194>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d002      	beq.n	8002704 <HAL_ADC_Start_DMA+0xb0>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	e003      	b.n	800270c <HAL_ADC_Start_DMA+0xb8>
 8002704:	4b39      	ldr	r3, [pc, #228]	@ (80027ec <HAL_ADC_Start_DMA+0x198>)
 8002706:	e001      	b.n	800270c <HAL_ADC_Start_DMA+0xb8>
 8002708:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4293      	cmp	r3, r2
 8002712:	d002      	beq.n	800271a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002736:	f023 0206 	bic.w	r2, r3, #6
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	661a      	str	r2, [r3, #96]	@ 0x60
 800273e:	e002      	b.n	8002746 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <HAL_ADC_Start_DMA+0x19c>)
 800274c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002752:	4a28      	ldr	r2, [pc, #160]	@ (80027f4 <HAL_ADC_Start_DMA+0x1a0>)
 8002754:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	4a27      	ldr	r2, [pc, #156]	@ (80027f8 <HAL_ADC_Start_DMA+0x1a4>)
 800275c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	221c      	movs	r2, #28
 8002764:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0210 	orr.w	r2, r2, #16
 800277c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3340      	adds	r3, #64	@ 0x40
 8002798:	4619      	mov	r1, r3
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f001 fb37 	bl	8003e10 <HAL_DMA_Start_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fd5b 	bl	8002266 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80027b0:	e00d      	b.n	80027ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80027ba:	e008      	b.n	80027ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80027c8:	e001      	b.n	80027ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	50000100 	.word	0x50000100
 80027dc:	50000300 	.word	0x50000300
 80027e0:	50000700 	.word	0x50000700
 80027e4:	50000600 	.word	0x50000600
 80027e8:	50000500 	.word	0x50000500
 80027ec:	50000400 	.word	0x50000400
 80027f0:	080036b9 	.word	0x080036b9
 80027f4:	08003791 	.word	0x08003791
 80027f8:	080037ad 	.word	0x080037ad

080027fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002820:	d004      	beq.n	800282c <HAL_ADC_IRQHandler+0x30>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a8e      	ldr	r2, [pc, #568]	@ (8002a60 <HAL_ADC_IRQHandler+0x264>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_ADC_IRQHandler+0x34>
 800282c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a64 <HAL_ADC_IRQHandler+0x268>)
 800282e:	e000      	b.n	8002832 <HAL_ADC_IRQHandler+0x36>
 8002830:	4b8d      	ldr	r3, [pc, #564]	@ (8002a68 <HAL_ADC_IRQHandler+0x26c>)
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fc86 	bl	8002144 <LL_ADC_GetMultimode>
 8002838:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d017      	beq.n	8002874 <HAL_ADC_IRQHandler+0x78>
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d012      	beq.n	8002874 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f001 f808 	bl	800387c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2202      	movs	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <HAL_ADC_IRQHandler+0x8c>
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8094 	beq.w	80029bc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 808e 	beq.w	80029bc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fb9f 	bl	8002000 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d072      	beq.n	80029ae <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a64      	ldr	r2, [pc, #400]	@ (8002a60 <HAL_ADC_IRQHandler+0x264>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_ADC_IRQHandler+0xea>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a65      	ldr	r2, [pc, #404]	@ (8002a6c <HAL_ADC_IRQHandler+0x270>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d002      	beq.n	80028e2 <HAL_ADC_IRQHandler+0xe6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e003      	b.n	80028ea <HAL_ADC_IRQHandler+0xee>
 80028e2:	4b63      	ldr	r3, [pc, #396]	@ (8002a70 <HAL_ADC_IRQHandler+0x274>)
 80028e4:	e001      	b.n	80028ea <HAL_ADC_IRQHandler+0xee>
 80028e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d008      	beq.n	8002904 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d002      	beq.n	8002904 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b09      	cmp	r3, #9
 8002902:	d104      	bne.n	800290e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	e014      	b.n	8002938 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a53      	ldr	r2, [pc, #332]	@ (8002a60 <HAL_ADC_IRQHandler+0x264>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_ADC_IRQHandler+0x130>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a53      	ldr	r2, [pc, #332]	@ (8002a6c <HAL_ADC_IRQHandler+0x270>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d002      	beq.n	8002928 <HAL_ADC_IRQHandler+0x12c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e003      	b.n	8002930 <HAL_ADC_IRQHandler+0x134>
 8002928:	4b51      	ldr	r3, [pc, #324]	@ (8002a70 <HAL_ADC_IRQHandler+0x274>)
 800292a:	e001      	b.n	8002930 <HAL_ADC_IRQHandler+0x134>
 800292c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002930:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d135      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b08      	cmp	r3, #8
 800294e:	d12e      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fc9a 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11a      	bne.n	8002996 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020c 	bic.w	r2, r2, #12
 800296e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d112      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002994:	e00b      	b.n	80029ae <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f043 0210 	orr.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f984 	bl	8002cbc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	220c      	movs	r2, #12
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_IRQHandler+0x1d4>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80b3 	beq.w	8002b42 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80ad 	beq.w	8002b42 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fb3a 	bl	800207e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a0a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff faf5 	bl	8002000 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a16:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a10      	ldr	r2, [pc, #64]	@ (8002a60 <HAL_ADC_IRQHandler+0x264>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_ADC_IRQHandler+0x23a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_ADC_IRQHandler+0x270>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d002      	beq.n	8002a32 <HAL_ADC_IRQHandler+0x236>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_IRQHandler+0x23e>
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_ADC_IRQHandler+0x274>)
 8002a34:	e001      	b.n	8002a3a <HAL_ADC_IRQHandler+0x23e>
 8002a36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d008      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d002      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b07      	cmp	r3, #7
 8002a52:	d10f      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	e01f      	b.n	8002a9e <HAL_ADC_IRQHandler+0x2a2>
 8002a5e:	bf00      	nop
 8002a60:	50000100 	.word	0x50000100
 8002a64:	50000300 	.word	0x50000300
 8002a68:	50000700 	.word	0x50000700
 8002a6c:	50000500 	.word	0x50000500
 8002a70:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a8b      	ldr	r2, [pc, #556]	@ (8002ca8 <HAL_ADC_IRQHandler+0x4ac>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_ADC_IRQHandler+0x296>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a8a      	ldr	r2, [pc, #552]	@ (8002cac <HAL_ADC_IRQHandler+0x4b0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d002      	beq.n	8002a8e <HAL_ADC_IRQHandler+0x292>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_IRQHandler+0x29a>
 8002a8e:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <HAL_ADC_IRQHandler+0x4b4>)
 8002a90:	e001      	b.n	8002a96 <HAL_ADC_IRQHandler+0x29a>
 8002a92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a96:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d047      	beq.n	8002b34 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_ADC_IRQHandler+0x2c2>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d03f      	beq.n	8002b34 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d13a      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac8:	2b40      	cmp	r3, #64	@ 0x40
 8002aca:	d133      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d12e      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fbea 	bl	80022b4 <LL_ADC_INJ_IsConversionOngoing>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11a      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002af4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d112      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b1a:	e00b      	b.n	8002b34 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fe79 	bl	800382c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2260      	movs	r2, #96	@ 0x60
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d011      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x374>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8be 	bl	8002ce4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d012      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x3a4>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fe5f 	bl	8003854 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x3d4>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fe51 	bl	8003868 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d043      	beq.n	8002c62 <HAL_ADC_IRQHandler+0x466>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d03e      	beq.n	8002c62 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002bec:	2301      	movs	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf0:	e021      	b.n	8002c36 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x410>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a28      	ldr	r2, [pc, #160]	@ (8002ca8 <HAL_ADC_IRQHandler+0x4ac>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_IRQHandler+0x414>
 8002c0c:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <HAL_ADC_IRQHandler+0x4b8>)
 8002c0e:	e000      	b.n	8002c12 <HAL_ADC_IRQHandler+0x416>
 8002c10:	4b29      	ldr	r3, [pc, #164]	@ (8002cb8 <HAL_ADC_IRQHandler+0x4bc>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff faa4 	bl	8002160 <LL_ADC_GetMultiDMATransfer>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c22:	e008      	b.n	8002c36 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c32:	2301      	movs	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d10e      	bne.n	8002c5a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4c:	f043 0202 	orr.w	r2, r3, #2
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f84f 	bl	8002cf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_ADC_IRQHandler+0x4a2>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d013      	beq.n	8002c9e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	f043 0208 	orr.w	r2, r3, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c96:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fdd1 	bl	8003840 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	@ 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	50000100 	.word	0x50000100
 8002cac:	50000500 	.word	0x50000500
 8002cb0:	50000400 	.word	0x50000400
 8002cb4:	50000300 	.word	0x50000300
 8002cb8:	50000700 	.word	0x50000700

08002cbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0b6      	sub	sp, #216	@ 0xd8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x24>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f000 bc13 	b.w	8003556 <HAL_ADC_ConfigChannel+0x84a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff faa6 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 83f3 	bne.w	8003530 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7ff f965 	bl	8002026 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fa94 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 8002d66:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff faa0 	bl	80022b4 <LL_ADC_INJ_IsConversionOngoing>
 8002d74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f040 81d9 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 81d4 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d94:	d10f      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7ff f97f 	bl	80020a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f913 	bl	8001fda <LL_ADC_SetSamplingTimeCommonConfig>
 8002db4:	e00e      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7ff f96e 	bl	80020a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff f903 	bl	8001fda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d022      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6919      	ldr	r1, [r3, #16]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e06:	f7ff f85d 	bl	8001ec4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6919      	ldr	r1, [r3, #16]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f7ff f8a9 	bl	8001f6e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x126>
 8002e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e30:	e000      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x128>
 8002e32:	2300      	movs	r3, #0
 8002e34:	461a      	mov	r2, r3
 8002e36:	f7ff f8b5 	bl	8001fa4 <LL_ADC_SetOffsetSaturation>
 8002e3a:	e17b      	b.n	8003134 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f862 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x15c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f857 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	e01e      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x19a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff f84c 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e96:	2320      	movs	r3, #32
 8002e98:	e004      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d105      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x1b2>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	0e9b      	lsrs	r3, r3, #26
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	e018      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x1e4>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	e004      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d106      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f81b 	bl	8001f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe ffff 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x222>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fff4 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	e01e      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x260>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe ffe9 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e004      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x278>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	e018      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x2aa>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e004      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d106      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe ffb8 	bl	8001f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe ff9c 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x2e8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe ff91 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 021f 	and.w	r2, r3, #31
 8002ff2:	e01e      	b.n	8003032 <HAL_ADC_ConfigChannel+0x326>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe ff86 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8003000:	4603      	mov	r3, r0
 8003002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003012:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800301a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e004      	b.n	8003030 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003026:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <HAL_ADC_ConfigChannel+0x33e>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	e016      	b.n	8003078 <HAL_ADC_ConfigChannel+0x36c>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800305c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800305e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003062:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e004      	b.n	8003078 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800306e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	2102      	movs	r1, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe ff57 	bl	8001f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2103      	movs	r1, #3
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe ff3b 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x3aa>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2103      	movs	r1, #3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe ff30 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	e017      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x3da>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe ff25 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80030dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x3f2>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	0e9b      	lsrs	r3, r3, #26
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	e011      	b.n	8003122 <HAL_ADC_ConfigChannel+0x416>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800310c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800310e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e003      	b.n	8003122 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800311a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003122:	429a      	cmp	r2, r3
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	2103      	movs	r1, #3
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe ff02 	bl	8001f38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f881 	bl	8002240 <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 813d 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f7fe ffd2 	bl	80020fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4aa2      	ldr	r2, [pc, #648]	@ (80033e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f040 812e 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_ADC_ConfigChannel+0x480>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2b09      	cmp	r3, #9
 8003182:	bf94      	ite	ls
 8003184:	2301      	movls	r3, #1
 8003186:	2300      	movhi	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e019      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x4b4>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800319a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800319c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800319e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80031a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	bf94      	ite	ls
 80031ba:	2301      	movls	r3, #1
 80031bc:	2300      	movhi	r3, #0
 80031be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d079      	beq.n	80032b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x4d4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	3301      	adds	r3, #1
 80031d8:	069b      	lsls	r3, r3, #26
 80031da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031de:	e015      	b.n	800320c <HAL_ADC_ConfigChannel+0x500>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_ADC_ConfigChannel+0x520>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	3301      	adds	r3, #1
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	e017      	b.n	800325c <HAL_ADC_ConfigChannel+0x550>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800323a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800323e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x576>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	051b      	lsls	r3, r3, #20
 8003280:	e018      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x5a8>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e003      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800329e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b4:	430b      	orrs	r3, r1
 80032b6:	e07e      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x5c8>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	3301      	adds	r3, #1
 80032cc:	069b      	lsls	r3, r3, #26
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d2:	e015      	b.n	8003300 <HAL_ADC_ConfigChannel+0x5f4>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e003      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	069b      	lsls	r3, r3, #26
 80032fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x614>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	e017      	b.n	8003350 <HAL_ADC_ConfigChannel+0x644>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	61fb      	str	r3, [r7, #28]
  return result;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	ea42 0103 	orr.w	r1, r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_ADC_ConfigChannel+0x670>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	3301      	adds	r3, #1
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	3b1e      	subs	r3, #30
 8003374:	051b      	lsls	r3, r3, #20
 8003376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800337a:	e01b      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x6a8>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	613b      	str	r3, [r7, #16]
  return result;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e003      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	3b1e      	subs	r3, #30
 80033ae:	051b      	lsls	r3, r3, #20
 80033b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fe fe72 	bl	80020a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_ADC_ConfigChannel+0x6e0>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80be 	beq.w	800354a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d6:	d004      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0x6d6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10a      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x6ec>
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80033e4:	e009      	b.n	80033fa <HAL_ADC_ConfigChannel+0x6ee>
 80033e6:	bf00      	nop
 80033e8:	407f0000 	.word	0x407f0000
 80033ec:	80080000 	.word	0x80080000
 80033f0:	50000100 	.word	0x50000100
 80033f4:	50000300 	.word	0x50000300
 80033f8:	4b59      	ldr	r3, [pc, #356]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fd54 	bl	8001ea8 <LL_ADC_GetCommonPathInternalCh>
 8003400:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a56      	ldr	r2, [pc, #344]	@ (8003564 <HAL_ADC_ConfigChannel+0x858>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_ADC_ConfigChannel+0x70c>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a55      	ldr	r2, [pc, #340]	@ (8003568 <HAL_ADC_ConfigChannel+0x85c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d13a      	bne.n	800348e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800341c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d134      	bne.n	800348e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800342c:	d005      	beq.n	800343a <HAL_ADC_ConfigChannel+0x72e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4e      	ldr	r2, [pc, #312]	@ (800356c <HAL_ADC_ConfigChannel+0x860>)
 8003434:	4293      	cmp	r3, r2
 8003436:	f040 8085 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003442:	d004      	beq.n	800344e <HAL_ADC_ConfigChannel+0x742>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a49      	ldr	r2, [pc, #292]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x746>
 800344e:	4a49      	ldr	r2, [pc, #292]	@ (8003574 <HAL_ADC_ConfigChannel+0x868>)
 8003450:	e000      	b.n	8003454 <HAL_ADC_ConfigChannel+0x748>
 8003452:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003458:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f7fe fd0f 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003464:	4b44      	ldr	r3, [pc, #272]	@ (8003578 <HAL_ADC_ConfigChannel+0x86c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	4a44      	ldr	r2, [pc, #272]	@ (800357c <HAL_ADC_ConfigChannel+0x870>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	099b      	lsrs	r3, r3, #6
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800347e:	e002      	b.n	8003486 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3b01      	subs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800348c:	e05a      	b.n	8003544 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <HAL_ADC_ConfigChannel+0x874>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d125      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d11f      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d104      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x7ac>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a34      	ldr	r2, [pc, #208]	@ (8003584 <HAL_ADC_ConfigChannel+0x878>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d047      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_ConfigChannel+0x7c0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x7c4>
 80034cc:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <HAL_ADC_ConfigChannel+0x868>)
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x7c6>
 80034d0:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 80034d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f7fe fcd0 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e2:	e031      	b.n	8003548 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <HAL_ADC_ConfigChannel+0x87c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d12d      	bne.n	800354a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d127      	bne.n	800354a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350c:	d004      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x80c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <HAL_ADC_ConfigChannel+0x864>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x810>
 8003518:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <HAL_ADC_ConfigChannel+0x868>)
 800351a:	e000      	b.n	800351e <HAL_ADC_ConfigChannel+0x812>
 800351c:	4a10      	ldr	r2, [pc, #64]	@ (8003560 <HAL_ADC_ConfigChannel+0x854>)
 800351e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003522:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7fe fcaa 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
 800352e:	e00c      	b.n	800354a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003542:	e002      	b.n	800354a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003548:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003552:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003556:	4618      	mov	r0, r3
 8003558:	37d8      	adds	r7, #216	@ 0xd8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	50000700 	.word	0x50000700
 8003564:	c3210000 	.word	0xc3210000
 8003568:	90c00010 	.word	0x90c00010
 800356c:	50000600 	.word	0x50000600
 8003570:	50000100 	.word	0x50000100
 8003574:	50000300 	.word	0x50000300
 8003578:	20000004 	.word	0x20000004
 800357c:	053e2d63 	.word	0x053e2d63
 8003580:	c7520000 	.word	0xc7520000
 8003584:	50000500 	.word	0x50000500
 8003588:	cb840000 	.word	0xcb840000

0800358c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fe4f 	bl	8002240 <LL_ADC_IsEnabled>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d176      	bne.n	8003696 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	4b3c      	ldr	r3, [pc, #240]	@ (80036a0 <ADC_Enable+0x114>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e062      	b.n	8003698 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fe1e 	bl	8002218 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e4:	d004      	beq.n	80035f0 <ADC_Enable+0x64>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <ADC_Enable+0x118>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <ADC_Enable+0x68>
 80035f0:	4b2d      	ldr	r3, [pc, #180]	@ (80036a8 <ADC_Enable+0x11c>)
 80035f2:	e000      	b.n	80035f6 <ADC_Enable+0x6a>
 80035f4:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <ADC_Enable+0x120>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fc56 	bl	8001ea8 <LL_ADC_GetCommonPathInternalCh>
 80035fc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003602:	2b00      	cmp	r3, #0
 8003604:	d013      	beq.n	800362e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003606:	4b2a      	ldr	r3, [pc, #168]	@ (80036b0 <ADC_Enable+0x124>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	4a29      	ldr	r2, [pc, #164]	@ (80036b4 <ADC_Enable+0x128>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003620:	e002      	b.n	8003628 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3b01      	subs	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f9      	bne.n	8003622 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800362e:	f7fe fc09 	bl	8001e44 <HAL_GetTick>
 8003632:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003634:	e028      	b.n	8003688 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fe00 	bl	8002240 <LL_ADC_IsEnabled>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fde4 	bl	8002218 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003650:	f7fe fbf8 	bl	8001e44 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d914      	bls.n	8003688 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d00d      	beq.n	8003688 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f043 0210 	orr.w	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d1cf      	bne.n	8003636 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	8000003f 	.word	0x8000003f
 80036a4:	50000100 	.word	0x50000100
 80036a8:	50000300 	.word	0x50000300
 80036ac:	50000700 	.word	0x50000700
 80036b0:	20000004 	.word	0x20000004
 80036b4:	053e2d63 	.word	0x053e2d63

080036b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d14b      	bne.n	800376a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d021      	beq.n	8003730 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fc85 	bl	8002000 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d032      	beq.n	8003762 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d12b      	bne.n	8003762 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800372e:	e018      	b.n	8003762 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d111      	bne.n	8003762 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff faaa 	bl	8002cbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003768:	e00e      	b.n	8003788 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fabe 	bl	8002cf8 <HAL_ADC_ErrorCallback>
}
 800377c:	e004      	b.n	8003788 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fa96 	bl	8002cd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff fa90 	bl	8002cf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <LL_ADC_IsEnabled>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <LL_ADC_IsEnabled+0x18>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <LL_ADC_IsEnabled+0x1a>
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_REG_IsConversionOngoing>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d101      	bne.n	800381e <LL_ADC_REG_IsConversionOngoing+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b0a1      	sub	sp, #132	@ 0x84
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0e7      	b.n	8003a7e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038b6:	2300      	movs	r3, #0
 80038b8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ba:	2300      	movs	r3, #0
 80038bc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c6:	d102      	bne.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	e009      	b.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d102      	bne.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80038d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	e001      	b.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0be      	b.n	8003a7e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff7f 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003908:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff79 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 80a0 	bne.w	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800391c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 809c 	bne.w	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800392c:	d004      	beq.n	8003938 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a55      	ldr	r2, [pc, #340]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003938:	4b56      	ldr	r3, [pc, #344]	@ (8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800393a:	e000      	b.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800393c:	4b56      	ldr	r3, [pc, #344]	@ (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800393e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d04b      	beq.n	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800395a:	035b      	lsls	r3, r3, #13
 800395c:	430b      	orrs	r3, r1
 800395e:	431a      	orrs	r2, r3
 8003960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003962:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800396c:	d004      	beq.n	8003978 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a45      	ldr	r2, [pc, #276]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10f      	bne.n	8003998 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003978:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800397c:	f7ff ff30 	bl	80037e0 <LL_ADC_IsEnabled>
 8003980:	4604      	mov	r4, r0
 8003982:	4841      	ldr	r0, [pc, #260]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003984:	f7ff ff2c 	bl	80037e0 <LL_ADC_IsEnabled>
 8003988:	4603      	mov	r3, r0
 800398a:	4323      	orrs	r3, r4
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e012      	b.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003998:	483c      	ldr	r0, [pc, #240]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800399a:	f7ff ff21 	bl	80037e0 <LL_ADC_IsEnabled>
 800399e:	4604      	mov	r4, r0
 80039a0:	483b      	ldr	r0, [pc, #236]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039a2:	f7ff ff1d 	bl	80037e0 <LL_ADC_IsEnabled>
 80039a6:	4603      	mov	r3, r0
 80039a8:	431c      	orrs	r4, r3
 80039aa:	483c      	ldr	r0, [pc, #240]	@ (8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039ac:	f7ff ff18 	bl	80037e0 <LL_ADC_IsEnabled>
 80039b0:	4603      	mov	r3, r0
 80039b2:	4323      	orrs	r3, r4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d056      	beq.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039ca:	f023 030f 	bic.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	6811      	ldr	r1, [r2, #0]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	431a      	orrs	r2, r3
 80039da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039dc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039de:	e047      	b.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f4:	d004      	beq.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a23      	ldr	r2, [pc, #140]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10f      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a00:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a04:	f7ff feec 	bl	80037e0 <LL_ADC_IsEnabled>
 8003a08:	4604      	mov	r4, r0
 8003a0a:	481f      	ldr	r0, [pc, #124]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a0c:	f7ff fee8 	bl	80037e0 <LL_ADC_IsEnabled>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4323      	orrs	r3, r4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e012      	b.n	8003a46 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a20:	481a      	ldr	r0, [pc, #104]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a22:	f7ff fedd 	bl	80037e0 <LL_ADC_IsEnabled>
 8003a26:	4604      	mov	r4, r0
 8003a28:	4819      	ldr	r0, [pc, #100]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a2a:	f7ff fed9 	bl	80037e0 <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	431c      	orrs	r4, r3
 8003a32:	481a      	ldr	r0, [pc, #104]	@ (8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a34:	f7ff fed4 	bl	80037e0 <LL_ADC_IsEnabled>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4323      	orrs	r3, r4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d012      	beq.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a52:	f023 030f 	bic.w	r3, r3, #15
 8003a56:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a58:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5a:	e009      	b.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a6e:	e000      	b.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a7a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3784      	adds	r7, #132	@ 0x84
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}
 8003a86:	bf00      	nop
 8003a88:	50000100 	.word	0x50000100
 8003a8c:	50000400 	.word	0x50000400
 8003a90:	50000500 	.word	0x50000500
 8003a94:	50000300 	.word	0x50000300
 8003a98:	50000700 	.word	0x50000700
 8003a9c:	50000600 	.word	0x50000600

08003aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003abc:	4013      	ands	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ad2:	4a04      	ldr	r2, [pc, #16]	@ (8003ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	60d3      	str	r3, [r2, #12]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aec:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <__NVIC_GetPriorityGrouping+0x18>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	f003 0307 	and.w	r3, r3, #7
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	db0b      	blt.n	8003b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	4907      	ldr	r1, [pc, #28]	@ (8003b3c <__NVIC_EnableIRQ+0x38>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2001      	movs	r0, #1
 8003b26:	fa00 f202 	lsl.w	r2, r0, r2
 8003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000e100 	.word	0xe000e100

08003b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	6039      	str	r1, [r7, #0]
 8003b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	db0a      	blt.n	8003b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	490c      	ldr	r1, [pc, #48]	@ (8003b8c <__NVIC_SetPriority+0x4c>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	0112      	lsls	r2, r2, #4
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	440b      	add	r3, r1
 8003b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b68:	e00a      	b.n	8003b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4908      	ldr	r1, [pc, #32]	@ (8003b90 <__NVIC_SetPriority+0x50>)
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	3b04      	subs	r3, #4
 8003b78:	0112      	lsls	r2, r2, #4
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	761a      	strb	r2, [r3, #24]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000e100 	.word	0xe000e100
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	@ 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f1c3 0307 	rsb	r3, r3, #7
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	bf28      	it	cs
 8003bb2:	2304      	movcs	r3, #4
 8003bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d902      	bls.n	8003bc4 <NVIC_EncodePriority+0x30>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3b03      	subs	r3, #3
 8003bc2:	e000      	b.n	8003bc6 <NVIC_EncodePriority+0x32>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bec:	4313      	orrs	r3, r2
         );
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3724      	adds	r7, #36	@ 0x24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c0c:	d301      	bcc.n	8003c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00f      	b.n	8003c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c12:	4a0a      	ldr	r2, [pc, #40]	@ (8003c3c <SysTick_Config+0x40>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c1a:	210f      	movs	r1, #15
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c20:	f7ff ff8e 	bl	8003b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <SysTick_Config+0x40>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c2a:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <SysTick_Config+0x40>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	e000e010 	.word	0xe000e010

08003c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff29 	bl	8003aa0 <__NVIC_SetPriorityGrouping>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c64:	f7ff ff40 	bl	8003ae8 <__NVIC_GetPriorityGrouping>
 8003c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7ff ff90 	bl	8003b94 <NVIC_EncodePriority>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff5f 	bl	8003b40 <__NVIC_SetPriority>
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff33 	bl	8003b04 <__NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffa4 	bl	8003bfc <SysTick_Config>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e08d      	b.n	8003dee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b47      	ldr	r3, [pc, #284]	@ (8003df8 <HAL_DMA_Init+0x138>)
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d80f      	bhi.n	8003cfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b45      	ldr	r3, [pc, #276]	@ (8003dfc <HAL_DMA_Init+0x13c>)
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a45      	ldr	r2, [pc, #276]	@ (8003e00 <HAL_DMA_Init+0x140>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	009a      	lsls	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a42      	ldr	r2, [pc, #264]	@ (8003e04 <HAL_DMA_Init+0x144>)
 8003cfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cfc:	e00e      	b.n	8003d1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b40      	ldr	r3, [pc, #256]	@ (8003e08 <HAL_DMA_Init+0x148>)
 8003d06:	4413      	add	r3, r2
 8003d08:	4a3d      	ldr	r2, [pc, #244]	@ (8003e00 <HAL_DMA_Init+0x140>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	009a      	lsls	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a3c      	ldr	r2, [pc, #240]	@ (8003e0c <HAL_DMA_Init+0x14c>)
 8003d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fa82 	bl	8004278 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d7c:	d102      	bne.n	8003d84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d98:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_DMA_Init+0x104>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d80c      	bhi.n	8003dc4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 faa2 	bl	80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	e008      	b.n	8003dd6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40020407 	.word	0x40020407
 8003dfc:	bffdfff8 	.word	0xbffdfff8
 8003e00:	cccccccd 	.word	0xcccccccd
 8003e04:	40020000 	.word	0x40020000
 8003e08:	bffdfbf8 	.word	0xbffdfbf8
 8003e0c:	40020400 	.word	0x40020400

08003e10 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_DMA_Start_IT+0x20>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e066      	b.n	8003efe <HAL_DMA_Start_IT+0xee>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d155      	bne.n	8003ef0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f9c7 	bl	80041fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 020e 	orr.w	r2, r2, #14
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e00f      	b.n	8003ea8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 020a 	orr.w	r2, r2, #10
 8003ea6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003edc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e005      	b.n	8003efc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d005      	beq.n	8003f2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e037      	b.n	8003f9a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 020e 	bic.w	r2, r2, #14
 8003f38:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f48:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f003 021f 	and.w	r2, r3, #31
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f76:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00c      	beq.n	8003f9a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f8e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f98:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d00d      	beq.n	8003fec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
 8003fea:	e047      	b.n	800407c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 020e 	bic.w	r2, r2, #14
 8003ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800401a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f202 	lsl.w	r2, r1, r2
 800402e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004038:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004050:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800405a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
    }
  }
  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2204      	movs	r2, #4
 80040a8:	409a      	lsls	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d026      	beq.n	8004100 <HAL_DMA_IRQHandler+0x7a>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d021      	beq.n	8004100 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0204 	bic.w	r2, r2, #4
 80040d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f003 021f 	and.w	r2, r3, #31
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2104      	movs	r1, #4
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d071      	beq.n	80041da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040fe:	e06c      	b.n	80041da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2202      	movs	r2, #2
 800410a:	409a      	lsls	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02e      	beq.n	8004172 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d029      	beq.n	8004172 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 020a 	bic.w	r2, r2, #10
 800413a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	2102      	movs	r1, #2
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d038      	beq.n	80041da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004170:	e033      	b.n	80041da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2208      	movs	r2, #8
 800417c:	409a      	lsls	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02a      	beq.n	80041dc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d025      	beq.n	80041dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 020e 	bic.w	r2, r2, #14
 800419e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f202 	lsl.w	r2, r1, r2
 80041b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
}
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004212:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004224:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	f003 021f 	and.w	r2, r3, #31
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b10      	cmp	r3, #16
 8004248:	d108      	bne.n	800425c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800425a:	e007      	b.n	800426c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	4b16      	ldr	r3, [pc, #88]	@ (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004288:	429a      	cmp	r2, r3
 800428a:	d802      	bhi.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800428c:	4b15      	ldr	r3, [pc, #84]	@ (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e001      	b.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004294:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3b08      	subs	r3, #8
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	009a      	lsls	r2, r3, #2
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a0b      	ldr	r2, [pc, #44]	@ (80042f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2201      	movs	r2, #1
 80042cc:	409a      	lsls	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40020407 	.word	0x40020407
 80042e4:	40020800 	.word	0x40020800
 80042e8:	40020820 	.word	0x40020820
 80042ec:	cccccccd 	.word	0xcccccccd
 80042f0:	40020880 	.word	0x40020880

080042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a08      	ldr	r2, [pc, #32]	@ (8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004316:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2201      	movs	r2, #1
 8004322:	409a      	lsls	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	1000823f 	.word	0x1000823f
 8004338:	40020940 	.word	0x40020940

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800434a:	e15a      	b.n	8004602 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 814c 	beq.w	80045fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d005      	beq.n	800437c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004378:	2b02      	cmp	r3, #2
 800437a:	d130      	bne.n	80043de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	2203      	movs	r2, #3
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043b2:	2201      	movs	r2, #1
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0201 	and.w	r2, r3, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d017      	beq.n	800441a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	2203      	movs	r2, #3
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d123      	bne.n	800446e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	08da      	lsrs	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3208      	adds	r2, #8
 800442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	08da      	lsrs	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3208      	adds	r2, #8
 8004468:	6939      	ldr	r1, [r7, #16]
 800446a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2203      	movs	r2, #3
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a6 	beq.w	80045fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004620 <HAL_GPIO_Init+0x2e4>)
 80044b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004620 <HAL_GPIO_Init+0x2e4>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80044bc:	4b58      	ldr	r3, [pc, #352]	@ (8004620 <HAL_GPIO_Init+0x2e4>)
 80044be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c8:	4a56      	ldr	r2, [pc, #344]	@ (8004624 <HAL_GPIO_Init+0x2e8>)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	220f      	movs	r2, #15
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044f2:	d01f      	beq.n	8004534 <HAL_GPIO_Init+0x1f8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004628 <HAL_GPIO_Init+0x2ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d019      	beq.n	8004530 <HAL_GPIO_Init+0x1f4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a4b      	ldr	r2, [pc, #300]	@ (800462c <HAL_GPIO_Init+0x2f0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <HAL_GPIO_Init+0x1f0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a4a      	ldr	r2, [pc, #296]	@ (8004630 <HAL_GPIO_Init+0x2f4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00d      	beq.n	8004528 <HAL_GPIO_Init+0x1ec>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a49      	ldr	r2, [pc, #292]	@ (8004634 <HAL_GPIO_Init+0x2f8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <HAL_GPIO_Init+0x1e8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a48      	ldr	r2, [pc, #288]	@ (8004638 <HAL_GPIO_Init+0x2fc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_GPIO_Init+0x1e4>
 800451c:	2305      	movs	r3, #5
 800451e:	e00a      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004520:	2306      	movs	r3, #6
 8004522:	e008      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004524:	2304      	movs	r3, #4
 8004526:	e006      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004528:	2303      	movs	r3, #3
 800452a:	e004      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 800452c:	2302      	movs	r3, #2
 800452e:	e002      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004534:	2300      	movs	r3, #0
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	f002 0203 	and.w	r2, r2, #3
 800453c:	0092      	lsls	r2, r2, #2
 800453e:	4093      	lsls	r3, r2
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004546:	4937      	ldr	r1, [pc, #220]	@ (8004624 <HAL_GPIO_Init+0x2e8>)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	3302      	adds	r3, #2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004554:	4b39      	ldr	r3, [pc, #228]	@ (800463c <HAL_GPIO_Init+0x300>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	43db      	mvns	r3, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004578:	4a30      	ldr	r2, [pc, #192]	@ (800463c <HAL_GPIO_Init+0x300>)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800457e:	4b2f      	ldr	r3, [pc, #188]	@ (800463c <HAL_GPIO_Init+0x300>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045a2:	4a26      	ldr	r2, [pc, #152]	@ (800463c <HAL_GPIO_Init+0x300>)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045a8:	4b24      	ldr	r3, [pc, #144]	@ (800463c <HAL_GPIO_Init+0x300>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045cc:	4a1b      	ldr	r2, [pc, #108]	@ (800463c <HAL_GPIO_Init+0x300>)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045d2:	4b1a      	ldr	r3, [pc, #104]	@ (800463c <HAL_GPIO_Init+0x300>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045f6:	4a11      	ldr	r2, [pc, #68]	@ (800463c <HAL_GPIO_Init+0x300>)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3301      	adds	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f ae9d 	bne.w	800434c <HAL_GPIO_Init+0x10>
  }
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40021000 	.word	0x40021000
 8004624:	40010000 	.word	0x40010000
 8004628:	48000400 	.word	0x48000400
 800462c:	48000800 	.word	0x48000800
 8004630:	48000c00 	.word	0x48000c00
 8004634:	48001000 	.word	0x48001000
 8004638:	48001400 	.word	0x48001400
 800463c:	40010400 	.word	0x40010400

08004640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
 800465c:	e001      	b.n	8004662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
 800467c:	4613      	mov	r3, r2
 800467e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004680:	787b      	ldrb	r3, [r7, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800468c:	e002      	b.n	8004694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046aa:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046b6:	4a05      	ldr	r2, [pc, #20]	@ (80046cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f806 	bl	80046d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40010400 	.word	0x40010400

080046d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e041      	b.n	800477c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004700:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f245 5255 	movw	r2, #21845	@ 0x5555
 800470a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6852      	ldr	r2, [r2, #4]
 8004714:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6892      	ldr	r2, [r2, #8]
 800471e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004720:	f7fd fb90 	bl	8001e44 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004726:	e00f      	b.n	8004748 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004728:	f7fd fb8c 	bl	8001e44 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b31      	cmp	r3, #49	@ 0x31
 8004734:	d908      	bls.n	8004748 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e019      	b.n	800477c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e8      	bne.n	8004728 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d005      	beq.n	8004770 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68d2      	ldr	r2, [r2, #12]
 800476c:	611a      	str	r2, [r3, #16]
 800476e:	e004      	b.n	800477a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004794:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d141      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047b2:	4b4b      	ldr	r3, [pc, #300]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047be:	d131      	bne.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047c0:	4b47      	ldr	r3, [pc, #284]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c6:	4a46      	ldr	r2, [pc, #280]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047d0:	4b43      	ldr	r3, [pc, #268]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047d8:	4a41      	ldr	r2, [pc, #260]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047e0:	4b40      	ldr	r3, [pc, #256]	@ (80048e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2232      	movs	r2, #50	@ 0x32
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	4a3f      	ldr	r2, [pc, #252]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	0c9b      	lsrs	r3, r3, #18
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f6:	e002      	b.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fe:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480a:	d102      	bne.n	8004812 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f2      	bne.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004812:	4b33      	ldr	r3, [pc, #204]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481e:	d158      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e057      	b.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004824:	4b2e      	ldr	r3, [pc, #184]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800482a:	4a2d      	ldr	r2, [pc, #180]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004830:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004834:	e04d      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800483c:	d141      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800483e:	4b28      	ldr	r3, [pc, #160]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d131      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800484c:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004852:	4a23      	ldr	r2, [pc, #140]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004858:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800485c:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004864:	4a1e      	ldr	r2, [pc, #120]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800486c:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2232      	movs	r2, #50	@ 0x32
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	4a1c      	ldr	r2, [pc, #112]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	0c9b      	lsrs	r3, r3, #18
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004882:	e002      	b.n	800488a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3b01      	subs	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004896:	d102      	bne.n	800489e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f2      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800489e:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048aa:	d112      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e011      	b.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b6:	4a0a      	ldr	r2, [pc, #40]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048c0:	e007      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048c2:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ca:	4a05      	ldr	r2, [pc, #20]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40007000 	.word	0x40007000
 80048e4:	20000004 	.word	0x20000004
 80048e8:	431bde83 	.word	0x431bde83

080048ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048f0:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a04      	ldr	r2, [pc, #16]	@ (8004908 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048fa:	6093      	str	r3, [r2, #8]
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40007000 	.word	0x40007000

0800490c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e2fe      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d075      	beq.n	8004a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492a:	4b97      	ldr	r3, [pc, #604]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004934:	4b94      	ldr	r3, [pc, #592]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d102      	bne.n	800494a <HAL_RCC_OscConfig+0x3e>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d002      	beq.n	8004950 <HAL_RCC_OscConfig+0x44>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b8d      	ldr	r3, [pc, #564]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x108>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e2d9      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x74>
 8004972:	4b85      	ldr	r3, [pc, #532]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a84      	ldr	r2, [pc, #528]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x98>
 800498a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b7c      	ldr	r3, [pc, #496]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7b      	ldr	r2, [pc, #492]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 80049a4:	4b78      	ldr	r3, [pc, #480]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a77      	ldr	r2, [pc, #476]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b75      	ldr	r3, [pc, #468]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a74      	ldr	r2, [pc, #464]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd fa3e 	bl	8001e44 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fd fa3a 	bl	8001e44 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e29e      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049de:	4b6a      	ldr	r3, [pc, #424]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xc0>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd fa2a 	bl	8001e44 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fd fa26 	bl	8001e44 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	@ 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e28a      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a06:	4b60      	ldr	r3, [pc, #384]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0xe8>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d075      	beq.n	8004b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a22:	4b59      	ldr	r3, [pc, #356]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a2c:	4b56      	ldr	r3, [pc, #344]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d102      	bne.n	8004a42 <HAL_RCC_OscConfig+0x136>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_OscConfig+0x13c>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11f      	bne.n	8004a88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	4b4f      	ldr	r3, [pc, #316]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x154>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e25d      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b49      	ldr	r3, [pc, #292]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	4946      	ldr	r1, [pc, #280]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a74:	4b45      	ldr	r3, [pc, #276]	@ (8004b8c <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd f997 	bl	8001dac <HAL_InitTick>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d043      	beq.n	8004b0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e249      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d023      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a90:	4b3d      	ldr	r3, [pc, #244]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3c      	ldr	r2, [pc, #240]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd f9d2 	bl	8001e44 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa4:	f7fd f9ce 	bl	8001e44 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e232      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab6:	4b34      	ldr	r3, [pc, #208]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b31      	ldr	r3, [pc, #196]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	492d      	ldr	r1, [pc, #180]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
 8004ad6:	e01a      	b.n	8004b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd f9ae 	bl	8001e44 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd f9aa 	bl	8001e44 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e20e      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004afe:	4b22      	ldr	r3, [pc, #136]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x1e0>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d041      	beq.n	8004b9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b22:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b28:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd f987 	bl	8001e44 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3a:	f7fd f983 	bl	8001e44 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e1e7      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCC_OscConfig+0x22e>
 8004b5a:	e020      	b.n	8004b9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b62:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd f96a 	bl	8001e44 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b72:	e00d      	b.n	8004b90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fd f966 	bl	8001e44 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d906      	bls.n	8004b90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e1ca      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b90:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ea      	bne.n	8004b74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a6 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bac:	2300      	movs	r3, #0
 8004bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bb0:	4b84      	ldr	r3, [pc, #528]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x2b4>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCC_OscConfig+0x2b6>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bd2:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be2:	4b79      	ldr	r3, [pc, #484]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bee:	4b76      	ldr	r3, [pc, #472]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fd f923 	bl	8001e44 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fd f91f 	bl	8001e44 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e183      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c14:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d108      	bne.n	8004c3a <HAL_RCC_OscConfig+0x32e>
 8004c28:	4b66      	ldr	r3, [pc, #408]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a65      	ldr	r2, [pc, #404]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c38:	e024      	b.n	8004c84 <HAL_RCC_OscConfig+0x378>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d110      	bne.n	8004c64 <HAL_RCC_OscConfig+0x358>
 8004c42:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	4a5e      	ldr	r2, [pc, #376]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c4a:	f043 0304 	orr.w	r3, r3, #4
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c52:	4b5c      	ldr	r3, [pc, #368]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c58:	4a5a      	ldr	r2, [pc, #360]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c62:	e00f      	b.n	8004c84 <HAL_RCC_OscConfig+0x378>
 8004c64:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6a:	4a56      	ldr	r2, [pc, #344]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c74:	4b53      	ldr	r3, [pc, #332]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7a:	4a52      	ldr	r2, [pc, #328]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c7c:	f023 0304 	bic.w	r3, r3, #4
 8004c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d016      	beq.n	8004cba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8c:	f7fd f8da 	bl	8001e44 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fd f8d6 	bl	8001e44 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e138      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004caa:	4b46      	ldr	r3, [pc, #280]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ed      	beq.n	8004c94 <HAL_RCC_OscConfig+0x388>
 8004cb8:	e015      	b.n	8004ce6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fd f8c3 	bl	8001e44 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd f8bf 	bl	8001e44 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e121      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1ed      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce6:	7ffb      	ldrb	r3, [r7, #31]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cec:	4b35      	ldr	r3, [pc, #212]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	4a34      	ldr	r2, [pc, #208]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d03c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d12:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fd f892 	bl	8001e44 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d24:	f7fd f88e 	bl	8001e44 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0f2      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d36:	4b23      	ldr	r3, [pc, #140]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ef      	beq.n	8004d24 <HAL_RCC_OscConfig+0x418>
 8004d44:	e01b      	b.n	8004d7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d46:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd f875 	bl	8001e44 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d5e:	f7fd f871 	bl	8001e44 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0d5      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d70:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ef      	bne.n	8004d5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80c9 	beq.w	8004f1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d88:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	f000 8083 	beq.w	8004e9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d15e      	bne.n	8004e5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004da4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd f84b 	bl	8001e44 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	e00c      	b.n	8004dcc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fd f847 	bl	8001e44 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d905      	bls.n	8004dcc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0ab      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dcc:	4b55      	ldr	r3, [pc, #340]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ec      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd8:	4b52      	ldr	r3, [pc, #328]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	4b52      	ldr	r3, [pc, #328]	@ (8004f28 <HAL_RCC_OscConfig+0x61c>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6a11      	ldr	r1, [r2, #32]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004de8:	3a01      	subs	r2, #1
 8004dea:	0112      	lsls	r2, r2, #4
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004df2:	0212      	lsls	r2, r2, #8
 8004df4:	4311      	orrs	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	0552      	lsls	r2, r2, #21
 8004e00:	4311      	orrs	r1, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e06:	0852      	lsrs	r2, r2, #1
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	0652      	lsls	r2, r2, #25
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e12:	06d2      	lsls	r2, r2, #27
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4943      	ldr	r1, [pc, #268]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b41      	ldr	r3, [pc, #260]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a40      	ldr	r2, [pc, #256]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e28:	4b3e      	ldr	r3, [pc, #248]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd f806 	bl	8001e44 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3c:	f7fd f802 	bl	8001e44 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e066      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4e:	4b35      	ldr	r3, [pc, #212]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x530>
 8004e5a:	e05e      	b.n	8004f1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fc ffec 	bl	8001e44 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fc ffe8 	bl	8001e44 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04c      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	4b28      	ldr	r3, [pc, #160]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e8e:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	4924      	ldr	r1, [pc, #144]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e94:	4b25      	ldr	r3, [pc, #148]	@ (8004f2c <HAL_RCC_OscConfig+0x620>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
 8004e9a:	e03e      	b.n	8004f1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e039      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0203 	and.w	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d12c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d123      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11b      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d113      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	3b01      	subs	r3, #1
 8004efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d109      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	019f800c 	.word	0x019f800c
 8004f2c:	feeefffc 	.word	0xfeeefffc

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e11e      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b91      	ldr	r3, [pc, #580]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d910      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b8e      	ldr	r3, [pc, #568]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 020f 	bic.w	r2, r3, #15
 8004f5e:	498c      	ldr	r1, [pc, #560]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b8a      	ldr	r3, [pc, #552]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e106      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d073      	beq.n	800506c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d129      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8c:	4b81      	ldr	r3, [pc, #516]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0f4      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f9c:	f000 f99e 	bl	80052dc <RCC_GetSysClockFreqFromPLLSource>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8005198 <HAL_RCC_ClockConfig+0x268>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d93f      	bls.n	800502a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004faa:	4b7a      	ldr	r3, [pc, #488]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d033      	beq.n	800502a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d12f      	bne.n	800502a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fca:	4b72      	ldr	r3, [pc, #456]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fd2:	4a70      	ldr	r2, [pc, #448]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fda:	2380      	movs	r3, #128	@ 0x80
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e024      	b.n	800502a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0c6      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff8:	4b66      	ldr	r3, [pc, #408]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0be      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005008:	f000 f8ce 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 800500c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4a61      	ldr	r2, [pc, #388]	@ (8005198 <HAL_RCC_ClockConfig+0x268>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d909      	bls.n	800502a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005016:	4b5f      	ldr	r3, [pc, #380]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800501e:	4a5d      	ldr	r2, [pc, #372]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005024:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005026:	2380      	movs	r3, #128	@ 0x80
 8005028:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800502a:	4b5a      	ldr	r3, [pc, #360]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 0203 	bic.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4957      	ldr	r1, [pc, #348]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005038:	4313      	orrs	r3, r2
 800503a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503c:	f7fc ff02 	bl	8001e44 <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	e00a      	b.n	800505a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005044:	f7fc fefe 	bl	8001e44 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e095      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	4b4e      	ldr	r3, [pc, #312]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 020c 	and.w	r2, r3, #12
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	429a      	cmp	r2, r3
 800506a:	d1eb      	bne.n	8005044 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d023      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005084:	4b43      	ldr	r3, [pc, #268]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a42      	ldr	r2, [pc, #264]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800508a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800508e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800509c:	4b3d      	ldr	r3, [pc, #244]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ac:	4b39      	ldr	r3, [pc, #228]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4936      	ldr	r1, [pc, #216]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
 80050be:	e008      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d105      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050c6:	4b33      	ldr	r3, [pc, #204]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4a32      	ldr	r2, [pc, #200]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d21d      	bcs.n	800511c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f023 020f 	bic.w	r2, r3, #15
 80050e8:	4929      	ldr	r1, [pc, #164]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050f0:	f7fc fea8 	bl	8001e44 <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fc fea4 	bl	8001e44 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e03b      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b20      	ldr	r3, [pc, #128]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d1ed      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b1a      	ldr	r3, [pc, #104]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4917      	ldr	r1, [pc, #92]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490f      	ldr	r1, [pc, #60]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800515a:	f000 f825 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490c      	ldr	r1, [pc, #48]	@ (800519c <HAL_RCC_ClockConfig+0x26c>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	4a0a      	ldr	r2, [pc, #40]	@ (80051a0 <HAL_RCC_ClockConfig+0x270>)
 8005178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <HAL_RCC_ClockConfig+0x274>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fc fe14 	bl	8001dac <HAL_InitTick>
 8005184:	4603      	mov	r3, r0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40022000 	.word	0x40022000
 8005194:	40021000 	.word	0x40021000
 8005198:	04c4b400 	.word	0x04c4b400
 800519c:	08017d4c 	.word	0x08017d4c
 80051a0:	20000004 	.word	0x20000004
 80051a4:	20000008 	.word	0x20000008

080051a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d102      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005264 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e047      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051c0:	4b27      	ldr	r3, [pc, #156]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 030c 	and.w	r3, r3, #12
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d102      	bne.n	80051d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051cc:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	e03e      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051d2:	4b23      	ldr	r3, [pc, #140]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d136      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051de:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	3301      	adds	r3, #1
 80051f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d10c      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	4a16      	ldr	r2, [pc, #88]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005206:	68d2      	ldr	r2, [r2, #12]
 8005208:	0a12      	lsrs	r2, r2, #8
 800520a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	617b      	str	r3, [r7, #20]
      break;
 8005214:	e00c      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005216:	4a13      	ldr	r2, [pc, #76]	@ (8005264 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	4a10      	ldr	r2, [pc, #64]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005220:	68d2      	ldr	r2, [r2, #12]
 8005222:	0a12      	lsrs	r2, r2, #8
 8005224:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
      break;
 800522e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005230:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	0e5b      	lsrs	r3, r3, #25
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	3301      	adds	r3, #1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e001      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005250:	693b      	ldr	r3, [r7, #16]
}
 8005252:	4618      	mov	r0, r3
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000
 8005264:	00f42400 	.word	0x00f42400
 8005268:	016e3600 	.word	0x016e3600

0800526c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005270:	4b03      	ldr	r3, [pc, #12]	@ (8005280 <HAL_RCC_GetHCLKFreq+0x14>)
 8005272:	681b      	ldr	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000004 	.word	0x20000004

08005284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005288:	f7ff fff0 	bl	800526c <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4904      	ldr	r1, [pc, #16]	@ (80052ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000
 80052ac:	08017d5c 	.word	0x08017d5c

080052b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052b4:	f7ff ffda 	bl	800526c <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	0adb      	lsrs	r3, r3, #11
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4904      	ldr	r1, [pc, #16]	@ (80052d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000
 80052d8:	08017d5c 	.word	0x08017d5c

080052dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052e2:	4b1e      	ldr	r3, [pc, #120]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d10c      	bne.n	800531a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005300:	4a17      	ldr	r2, [pc, #92]	@ (8005360 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	4a14      	ldr	r2, [pc, #80]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800530a:	68d2      	ldr	r2, [r2, #12]
 800530c:	0a12      	lsrs	r2, r2, #8
 800530e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	617b      	str	r3, [r7, #20]
    break;
 8005318:	e00c      	b.n	8005334 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800531a:	4a12      	ldr	r2, [pc, #72]	@ (8005364 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	4a0e      	ldr	r2, [pc, #56]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	0a12      	lsrs	r2, r2, #8
 8005328:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
    break;
 8005332:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005334:	4b09      	ldr	r3, [pc, #36]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	0e5b      	lsrs	r3, r3, #25
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	3301      	adds	r3, #1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800534e:	687b      	ldr	r3, [r7, #4]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40021000 	.word	0x40021000
 8005360:	016e3600 	.word	0x016e3600
 8005364:	00f42400 	.word	0x00f42400

08005368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005370:	2300      	movs	r3, #0
 8005372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005374:	2300      	movs	r3, #0
 8005376:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8098 	beq.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538a:	4b43      	ldr	r3, [pc, #268]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005396:	4b40      	ldr	r3, [pc, #256]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539a:	4a3f      	ldr	r2, [pc, #252]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ae:	2301      	movs	r3, #1
 80053b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053b2:	4b3a      	ldr	r3, [pc, #232]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a39      	ldr	r2, [pc, #228]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053be:	f7fc fd41 	bl	8001e44 <HAL_GetTick>
 80053c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c4:	e009      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fc fd3d 	bl	8001e44 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d902      	bls.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	74fb      	strb	r3, [r7, #19]
        break;
 80053d8:	e005      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053da:	4b30      	ldr	r3, [pc, #192]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ef      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d159      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01e      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	429a      	cmp	r2, r3
 8005406:	d019      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005408:	4b23      	ldr	r3, [pc, #140]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005412:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005414:	4b20      	ldr	r3, [pc, #128]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541a:	4a1f      	ldr	r2, [pc, #124]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005424:	4b1c      	ldr	r3, [pc, #112]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542a:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005434:	4a18      	ldr	r2, [pc, #96]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fc fcfd 	bl	8001e44 <HAL_GetTick>
 800544a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544c:	e00b      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544e:	f7fc fcf9 	bl	8001e44 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545c:	4293      	cmp	r3, r2
 800545e:	d902      	bls.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	74fb      	strb	r3, [r7, #19]
            break;
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ec      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547a:	4b07      	ldr	r3, [pc, #28]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005488:	4903      	ldr	r1, [pc, #12]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005490:	e008      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005492:	7cfb      	ldrb	r3, [r7, #19]
 8005494:	74bb      	strb	r3, [r7, #18]
 8005496:	e005      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005498:	40021000 	.word	0x40021000
 800549c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a4:	7c7b      	ldrb	r3, [r7, #17]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054aa:	4ba7      	ldr	r3, [pc, #668]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ae:	4aa6      	ldr	r2, [pc, #664]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054c2:	4ba1      	ldr	r3, [pc, #644]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f023 0203 	bic.w	r2, r3, #3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	499d      	ldr	r1, [pc, #628]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e4:	4b98      	ldr	r3, [pc, #608]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	f023 020c 	bic.w	r2, r3, #12
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4995      	ldr	r1, [pc, #596]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005506:	4b90      	ldr	r3, [pc, #576]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	498c      	ldr	r1, [pc, #560]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005528:	4b87      	ldr	r3, [pc, #540]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	4984      	ldr	r1, [pc, #528]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800554a:	4b7f      	ldr	r3, [pc, #508]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005550:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	497b      	ldr	r1, [pc, #492]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800556c:	4b76      	ldr	r3, [pc, #472]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	4973      	ldr	r1, [pc, #460]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800558e:	4b6e      	ldr	r3, [pc, #440]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005594:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	496a      	ldr	r1, [pc, #424]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055b0:	4b65      	ldr	r3, [pc, #404]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	4962      	ldr	r1, [pc, #392]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	4959      	ldr	r1, [pc, #356]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055f4:	4b54      	ldr	r3, [pc, #336]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	4951      	ldr	r1, [pc, #324]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005616:	4b4c      	ldr	r3, [pc, #304]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	4948      	ldr	r1, [pc, #288]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005638:	4b43      	ldr	r3, [pc, #268]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005646:	4940      	ldr	r1, [pc, #256]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005656:	d105      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005658:	4b3b      	ldr	r3, [pc, #236]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a3a      	ldr	r2, [pc, #232]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005662:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005670:	4b35      	ldr	r3, [pc, #212]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567e:	4932      	ldr	r1, [pc, #200]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005690:	4b2d      	ldr	r3, [pc, #180]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a2c      	ldr	r2, [pc, #176]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800569a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056a8:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	4924      	ldr	r1, [pc, #144]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056c6:	d105      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e0:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ee:	4916      	ldr	r1, [pc, #88]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056fe:	d105      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a10      	ldr	r2, [pc, #64]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d019      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	4908      	ldr	r1, [pc, #32]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005736:	d109      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005738:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a02      	ldr	r2, [pc, #8]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005742:	60d3      	str	r3, [r2, #12]
 8005744:	e002      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005746:	bf00      	nop
 8005748:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d015      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005758:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	4926      	ldr	r1, [pc, #152]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005776:	d105      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005778:	4b21      	ldr	r3, [pc, #132]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a20      	ldr	r2, [pc, #128]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005782:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d015      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005790:	4b1b      	ldr	r3, [pc, #108]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005796:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800579e:	4918      	ldr	r1, [pc, #96]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ae:	d105      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057b0:	4b13      	ldr	r3, [pc, #76]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	4a12      	ldr	r2, [pc, #72]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d015      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d6:	490a      	ldr	r1, [pc, #40]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e6:	d105      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e8:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a04      	ldr	r2, [pc, #16]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40021000 	.word	0x40021000

08005804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e042      	b.n	800589c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fc f9bf 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2224      	movs	r2, #36	@ 0x24
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 f806 	bl	8006860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fd07 	bl	8006268 <UART_SetConfig>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e01b      	b.n	800589c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f885 	bl	80069a4 <UART_CheckIdleState>
 800589a:	4603      	mov	r3, r0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	@ 0x28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d167      	bne.n	800598c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_Transmit_DMA+0x24>
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e060      	b.n	800598e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	88fa      	ldrh	r2, [r7, #6]
 80058de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2221      	movs	r2, #33	@ 0x21
 80058ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d028      	beq.n	800594c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058fe:	4a26      	ldr	r2, [pc, #152]	@ (8005998 <HAL_UART_Transmit_DMA+0xf4>)
 8005900:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005906:	4a25      	ldr	r2, [pc, #148]	@ (800599c <HAL_UART_Transmit_DMA+0xf8>)
 8005908:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800590e:	4a24      	ldr	r2, [pc, #144]	@ (80059a0 <HAL_UART_Transmit_DMA+0xfc>)
 8005910:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005916:	2200      	movs	r2, #0
 8005918:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005922:	4619      	mov	r1, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3328      	adds	r3, #40	@ 0x28
 800592a:	461a      	mov	r2, r3
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	f7fe fa6f 	bl	8003e10 <HAL_DMA_Start_IT>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2210      	movs	r2, #16
 800593c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e020      	b.n	800598e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2240      	movs	r2, #64	@ 0x40
 8005952:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	613b      	str	r3, [r7, #16]
   return(result);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596a:	627b      	str	r3, [r7, #36]	@ 0x24
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005974:	623a      	str	r2, [r7, #32]
 8005976:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	69f9      	ldr	r1, [r7, #28]
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	61bb      	str	r3, [r7, #24]
   return(result);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e5      	bne.n	8005954 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3728      	adds	r7, #40	@ 0x28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	08006e6f 	.word	0x08006e6f
 800599c:	08006f09 	.word	0x08006f09
 80059a0:	0800708f 	.word	0x0800708f

080059a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	@ 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d137      	bne.n	8005a2c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Receive_DMA+0x24>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e030      	b.n	8005a2e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a18      	ldr	r2, [pc, #96]	@ (8005a38 <HAL_UART_Receive_DMA+0x94>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d01f      	beq.n	8005a1c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d018      	beq.n	8005a1c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	613b      	str	r3, [r7, #16]
   return(result);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	623b      	str	r3, [r7, #32]
 8005a0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	69f9      	ldr	r1, [r7, #28]
 8005a0e:	6a3a      	ldr	r2, [r7, #32]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e6      	bne.n	80059ea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f001 f8d6 	bl	8006bd4 <UART_Start_Receive_DMA>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	e000      	b.n	8005a2e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	@ 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40008000 	.word	0x40008000

08005a3c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b090      	sub	sp, #64	@ 0x40
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5e:	2b80      	cmp	r3, #128	@ 0x80
 8005a60:	d139      	bne.n	8005ad6 <HAL_UART_DMAStop+0x9a>
 8005a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a64:	2b21      	cmp	r3, #33	@ 0x21
 8005a66:	d136      	bne.n	8005ad6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe fa2c 	bl	8003f06 <HAL_DMA_Abort>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe fb93 	bl	80041e4 <HAL_DMA_GetError>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d105      	bne.n	8005ad0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2210      	movs	r2, #16
 8005ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e047      	b.n	8005b60 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 f925 	bl	8006d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae0:	2b40      	cmp	r3, #64	@ 0x40
 8005ae2:	d13c      	bne.n	8005b5e <HAL_UART_DMAStop+0x122>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	2b22      	cmp	r3, #34	@ 0x22
 8005ae8:	d139      	bne.n	8005b5e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0a:	61ba      	str	r2, [r7, #24]
 8005b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e5      	bne.n	8005aea <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d017      	beq.n	8005b58 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe f9e9 	bl	8003f06 <HAL_DMA_Abort>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fb4f 	bl	80041e4 <HAL_DMA_GetError>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d105      	bne.n	8005b58 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2210      	movs	r2, #16
 8005b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e003      	b.n	8005b60 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 f922 	bl	8006da2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3740      	adds	r7, #64	@ 0x40
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b96:	4013      	ands	r3, r2
 8005b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d11b      	bne.n	8005bdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d015      	beq.n	8005bdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8300 	beq.w	80061d2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
      }
      return;
 8005bda:	e2fa      	b.n	80061d2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8123 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005be6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005bea:	4b8d      	ldr	r3, [pc, #564]	@ (8005e20 <HAL_UART_IRQHandler+0x2b8>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8005e24 <HAL_UART_IRQHandler+0x2bc>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8116 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d011      	beq.n	8005c30 <HAL_UART_IRQHandler+0xc8>
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d011      	beq.n	8005c60 <HAL_UART_IRQHandler+0xf8>
 8005c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c56:	f043 0204 	orr.w	r2, r3, #4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d011      	beq.n	8005c90 <HAL_UART_IRQHandler+0x128>
 8005c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	f043 0202 	orr.w	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d017      	beq.n	8005ccc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ca8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005cac:	4b5c      	ldr	r3, [pc, #368]	@ (8005e20 <HAL_UART_IRQHandler+0x2b8>)
 8005cae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc2:	f043 0208 	orr.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d012      	beq.n	8005cfe <HAL_UART_IRQHandler+0x196>
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8266 	beq.w	80061d6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d52:	2b40      	cmp	r3, #64	@ 0x40
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d054      	beq.n	8005e0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 f81d 	bl	8006da2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d146      	bne.n	8005e04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005da2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1d9      	bne.n	8005d76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d017      	beq.n	8005dfc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dd2:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <HAL_UART_IRQHandler+0x2c0>)
 8005dd4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe f8eb 	bl	8003fb8 <HAL_DMA_Abort_IT>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d019      	beq.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005df6:	4610      	mov	r0, r2
 8005df8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfa:	e00f      	b.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa1d 	bl	800623c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e02:	e00b      	b.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa19 	bl	800623c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	e007      	b.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa15 	bl	800623c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005e1a:	e1dc      	b.n	80061d6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	bf00      	nop
    return;
 8005e1e:	e1da      	b.n	80061d6 <HAL_UART_IRQHandler+0x66e>
 8005e20:	10000001 	.word	0x10000001
 8005e24:	04000120 	.word	0x04000120
 8005e28:	0800710f 	.word	0x0800710f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 8170 	bne.w	8006116 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8169 	beq.w	8006116 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8162 	beq.w	8006116 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2210      	movs	r2, #16
 8005e58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e64:	2b40      	cmp	r3, #64	@ 0x40
 8005e66:	f040 80d8 	bne.w	800601a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80af 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	f080 80a7 	bcs.w	8005fe0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f040 8087 	bne.w	8005fbe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005eda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ede:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1da      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e1      	bne.n	8005efa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3308      	adds	r3, #8
 8005f56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f8c:	f023 0310 	bic.w	r3, r3, #16
 8005f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fa0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e4      	bne.n	8005f7c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fd ffa4 	bl	8003f06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f939 	bl	8006250 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005fde:	e0fc      	b.n	80061da <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fea:	429a      	cmp	r2, r3
 8005fec:	f040 80f5 	bne.w	80061da <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	f040 80eb 	bne.w	80061da <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f91c 	bl	8006250 <HAL_UARTEx_RxEventCallback>
      return;
 8006018:	e0df      	b.n	80061da <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006026:	b29b      	uxth	r3, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80d1 	beq.w	80061de <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800603c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80cc 	beq.w	80061de <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800605a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006068:	647b      	str	r3, [r7, #68]	@ 0x44
 800606a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800606e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e4      	bne.n	8006046 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	623b      	str	r3, [r7, #32]
   return(result);
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80060a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e1      	bne.n	800607c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 0310 	bic.w	r3, r3, #16
 80060e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	69b9      	ldr	r1, [r7, #24]
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	617b      	str	r3, [r7, #20]
   return(result);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e4      	bne.n	80060cc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f89e 	bl	8006250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006114:	e063      	b.n	80061de <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00e      	beq.n	8006140 <HAL_UART_IRQHandler+0x5d8>
 8006122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006136:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f825 	bl	8007188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800613e:	e051      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	d014      	beq.n	8006176 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800615c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006168:	2b00      	cmp	r3, #0
 800616a:	d03a      	beq.n	80061e2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
    }
    return;
 8006174:	e035      	b.n	80061e2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <HAL_UART_IRQHandler+0x62e>
 8006182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 ffcf 	bl	8007132 <UART_EndTransmit_IT>
    return;
 8006194:	e026      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_UART_IRQHandler+0x64e>
 80061a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fffe 	bl	80071b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061b4:	e016      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <HAL_UART_IRQHandler+0x67c>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	da0c      	bge.n	80061e4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 ffe6 	bl	800719c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061d0:	e008      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
      return;
 80061d2:	bf00      	nop
 80061d4:	e006      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
    return;
 80061d6:	bf00      	nop
 80061d8:	e004      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
      return;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
      return;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <HAL_UART_IRQHandler+0x67c>
    return;
 80061e2:	bf00      	nop
  }
}
 80061e4:	37e8      	adds	r7, #232	@ 0xe8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop

080061ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b08c      	sub	sp, #48	@ 0x30
 800626e:	af00      	add	r7, sp, #0
 8006270:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	431a      	orrs	r2, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4313      	orrs	r3, r2
 800628e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4baa      	ldr	r3, [pc, #680]	@ (8006540 <UART_SetConfig+0x2d8>)
 8006298:	4013      	ands	r3, r2
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a9f      	ldr	r2, [pc, #636]	@ (8006544 <UART_SetConfig+0x2dc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062d0:	4313      	orrs	r3, r2
 80062d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80062de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	f023 010f 	bic.w	r1, r3, #15
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a90      	ldr	r2, [pc, #576]	@ (8006548 <UART_SetConfig+0x2e0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d125      	bne.n	8006358 <UART_SetConfig+0xf0>
 800630c:	4b8f      	ldr	r3, [pc, #572]	@ (800654c <UART_SetConfig+0x2e4>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b03      	cmp	r3, #3
 8006318:	d81a      	bhi.n	8006350 <UART_SetConfig+0xe8>
 800631a:	a201      	add	r2, pc, #4	@ (adr r2, 8006320 <UART_SetConfig+0xb8>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006331 	.word	0x08006331
 8006324:	08006341 	.word	0x08006341
 8006328:	08006339 	.word	0x08006339
 800632c:	08006349 	.word	0x08006349
 8006330:	2301      	movs	r3, #1
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006336:	e116      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006338:	2302      	movs	r3, #2
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800633e:	e112      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006340:	2304      	movs	r3, #4
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006346:	e10e      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634e:	e10a      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006350:	2310      	movs	r3, #16
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006356:	e106      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a7c      	ldr	r2, [pc, #496]	@ (8006550 <UART_SetConfig+0x2e8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d138      	bne.n	80063d4 <UART_SetConfig+0x16c>
 8006362:	4b7a      	ldr	r3, [pc, #488]	@ (800654c <UART_SetConfig+0x2e4>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b0c      	cmp	r3, #12
 800636e:	d82d      	bhi.n	80063cc <UART_SetConfig+0x164>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <UART_SetConfig+0x110>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080063cd 	.word	0x080063cd
 8006380:	080063cd 	.word	0x080063cd
 8006384:	080063cd 	.word	0x080063cd
 8006388:	080063bd 	.word	0x080063bd
 800638c:	080063cd 	.word	0x080063cd
 8006390:	080063cd 	.word	0x080063cd
 8006394:	080063cd 	.word	0x080063cd
 8006398:	080063b5 	.word	0x080063b5
 800639c:	080063cd 	.word	0x080063cd
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	080063cd 	.word	0x080063cd
 80063a8:	080063c5 	.word	0x080063c5
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e0d8      	b.n	8006566 <UART_SetConfig+0x2fe>
 80063b4:	2302      	movs	r3, #2
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	e0d4      	b.n	8006566 <UART_SetConfig+0x2fe>
 80063bc:	2304      	movs	r3, #4
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c2:	e0d0      	b.n	8006566 <UART_SetConfig+0x2fe>
 80063c4:	2308      	movs	r3, #8
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ca:	e0cc      	b.n	8006566 <UART_SetConfig+0x2fe>
 80063cc:	2310      	movs	r3, #16
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d2:	e0c8      	b.n	8006566 <UART_SetConfig+0x2fe>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006554 <UART_SetConfig+0x2ec>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d125      	bne.n	800642a <UART_SetConfig+0x1c2>
 80063de:	4b5b      	ldr	r3, [pc, #364]	@ (800654c <UART_SetConfig+0x2e4>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063e8:	2b30      	cmp	r3, #48	@ 0x30
 80063ea:	d016      	beq.n	800641a <UART_SetConfig+0x1b2>
 80063ec:	2b30      	cmp	r3, #48	@ 0x30
 80063ee:	d818      	bhi.n	8006422 <UART_SetConfig+0x1ba>
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d00a      	beq.n	800640a <UART_SetConfig+0x1a2>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d814      	bhi.n	8006422 <UART_SetConfig+0x1ba>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <UART_SetConfig+0x19a>
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d008      	beq.n	8006412 <UART_SetConfig+0x1aa>
 8006400:	e00f      	b.n	8006422 <UART_SetConfig+0x1ba>
 8006402:	2300      	movs	r3, #0
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006408:	e0ad      	b.n	8006566 <UART_SetConfig+0x2fe>
 800640a:	2302      	movs	r3, #2
 800640c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006410:	e0a9      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006412:	2304      	movs	r3, #4
 8006414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006418:	e0a5      	b.n	8006566 <UART_SetConfig+0x2fe>
 800641a:	2308      	movs	r3, #8
 800641c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006420:	e0a1      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006422:	2310      	movs	r3, #16
 8006424:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006428:	e09d      	b.n	8006566 <UART_SetConfig+0x2fe>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a4a      	ldr	r2, [pc, #296]	@ (8006558 <UART_SetConfig+0x2f0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d125      	bne.n	8006480 <UART_SetConfig+0x218>
 8006434:	4b45      	ldr	r3, [pc, #276]	@ (800654c <UART_SetConfig+0x2e4>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800643e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006440:	d016      	beq.n	8006470 <UART_SetConfig+0x208>
 8006442:	2bc0      	cmp	r3, #192	@ 0xc0
 8006444:	d818      	bhi.n	8006478 <UART_SetConfig+0x210>
 8006446:	2b80      	cmp	r3, #128	@ 0x80
 8006448:	d00a      	beq.n	8006460 <UART_SetConfig+0x1f8>
 800644a:	2b80      	cmp	r3, #128	@ 0x80
 800644c:	d814      	bhi.n	8006478 <UART_SetConfig+0x210>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <UART_SetConfig+0x1f0>
 8006452:	2b40      	cmp	r3, #64	@ 0x40
 8006454:	d008      	beq.n	8006468 <UART_SetConfig+0x200>
 8006456:	e00f      	b.n	8006478 <UART_SetConfig+0x210>
 8006458:	2300      	movs	r3, #0
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645e:	e082      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006460:	2302      	movs	r3, #2
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006466:	e07e      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006468:	2304      	movs	r3, #4
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646e:	e07a      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006470:	2308      	movs	r3, #8
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006476:	e076      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006478:	2310      	movs	r3, #16
 800647a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800647e:	e072      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a35      	ldr	r2, [pc, #212]	@ (800655c <UART_SetConfig+0x2f4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d12a      	bne.n	80064e0 <UART_SetConfig+0x278>
 800648a:	4b30      	ldr	r3, [pc, #192]	@ (800654c <UART_SetConfig+0x2e4>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006494:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006498:	d01a      	beq.n	80064d0 <UART_SetConfig+0x268>
 800649a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800649e:	d81b      	bhi.n	80064d8 <UART_SetConfig+0x270>
 80064a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064a4:	d00c      	beq.n	80064c0 <UART_SetConfig+0x258>
 80064a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064aa:	d815      	bhi.n	80064d8 <UART_SetConfig+0x270>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <UART_SetConfig+0x250>
 80064b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b4:	d008      	beq.n	80064c8 <UART_SetConfig+0x260>
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x270>
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064be:	e052      	b.n	8006566 <UART_SetConfig+0x2fe>
 80064c0:	2302      	movs	r3, #2
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c6:	e04e      	b.n	8006566 <UART_SetConfig+0x2fe>
 80064c8:	2304      	movs	r3, #4
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ce:	e04a      	b.n	8006566 <UART_SetConfig+0x2fe>
 80064d0:	2308      	movs	r3, #8
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064d6:	e046      	b.n	8006566 <UART_SetConfig+0x2fe>
 80064d8:	2310      	movs	r3, #16
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e042      	b.n	8006566 <UART_SetConfig+0x2fe>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a17      	ldr	r2, [pc, #92]	@ (8006544 <UART_SetConfig+0x2dc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d13a      	bne.n	8006560 <UART_SetConfig+0x2f8>
 80064ea:	4b18      	ldr	r3, [pc, #96]	@ (800654c <UART_SetConfig+0x2e4>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064f8:	d01a      	beq.n	8006530 <UART_SetConfig+0x2c8>
 80064fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064fe:	d81b      	bhi.n	8006538 <UART_SetConfig+0x2d0>
 8006500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006504:	d00c      	beq.n	8006520 <UART_SetConfig+0x2b8>
 8006506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800650a:	d815      	bhi.n	8006538 <UART_SetConfig+0x2d0>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <UART_SetConfig+0x2b0>
 8006510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006514:	d008      	beq.n	8006528 <UART_SetConfig+0x2c0>
 8006516:	e00f      	b.n	8006538 <UART_SetConfig+0x2d0>
 8006518:	2300      	movs	r3, #0
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800651e:	e022      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006520:	2302      	movs	r3, #2
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006526:	e01e      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800652e:	e01a      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006536:	e016      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800653e:	e012      	b.n	8006566 <UART_SetConfig+0x2fe>
 8006540:	cfff69f3 	.word	0xcfff69f3
 8006544:	40008000 	.word	0x40008000
 8006548:	40013800 	.word	0x40013800
 800654c:	40021000 	.word	0x40021000
 8006550:	40004400 	.word	0x40004400
 8006554:	40004800 	.word	0x40004800
 8006558:	40004c00 	.word	0x40004c00
 800655c:	40005000 	.word	0x40005000
 8006560:	2310      	movs	r3, #16
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4aae      	ldr	r2, [pc, #696]	@ (8006824 <UART_SetConfig+0x5bc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	f040 8097 	bne.w	80066a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006572:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006576:	2b08      	cmp	r3, #8
 8006578:	d823      	bhi.n	80065c2 <UART_SetConfig+0x35a>
 800657a:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <UART_SetConfig+0x318>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065c3 	.word	0x080065c3
 8006588:	080065ad 	.word	0x080065ad
 800658c:	080065c3 	.word	0x080065c3
 8006590:	080065b3 	.word	0x080065b3
 8006594:	080065c3 	.word	0x080065c3
 8006598:	080065c3 	.word	0x080065c3
 800659c:	080065c3 	.word	0x080065c3
 80065a0:	080065bb 	.word	0x080065bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fe fe6e 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 80065a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065aa:	e010      	b.n	80065ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ac:	4b9e      	ldr	r3, [pc, #632]	@ (8006828 <UART_SetConfig+0x5c0>)
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065b0:	e00d      	b.n	80065ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b2:	f7fe fdf9 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 80065b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065b8:	e009      	b.n	80065ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065c0:	e005      	b.n	80065ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8130 	beq.w	8006836 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	4a94      	ldr	r2, [pc, #592]	@ (800682c <UART_SetConfig+0x5c4>)
 80065dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e0:	461a      	mov	r2, r3
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d305      	bcc.n	8006606 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	429a      	cmp	r2, r3
 8006604:	d903      	bls.n	800660e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800660c:	e113      	b.n	8006836 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	2200      	movs	r2, #0
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	60fa      	str	r2, [r7, #12]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	4a84      	ldr	r2, [pc, #528]	@ (800682c <UART_SetConfig+0x5c4>)
 800661c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006620:	b29b      	uxth	r3, r3
 8006622:	2200      	movs	r2, #0
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800662c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006630:	f7f9 feae 	bl	8000390 <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4610      	mov	r0, r2
 800663a:	4619      	mov	r1, r3
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	020b      	lsls	r3, r1, #8
 8006646:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800664a:	0202      	lsls	r2, r0, #8
 800664c:	6979      	ldr	r1, [r7, #20]
 800664e:	6849      	ldr	r1, [r1, #4]
 8006650:	0849      	lsrs	r1, r1, #1
 8006652:	2000      	movs	r0, #0
 8006654:	460c      	mov	r4, r1
 8006656:	4605      	mov	r5, r0
 8006658:	eb12 0804 	adds.w	r8, r2, r4
 800665c:	eb43 0905 	adc.w	r9, r3, r5
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	469a      	mov	sl, r3
 8006668:	4693      	mov	fp, r2
 800666a:	4652      	mov	r2, sl
 800666c:	465b      	mov	r3, fp
 800666e:	4640      	mov	r0, r8
 8006670:	4649      	mov	r1, r9
 8006672:	f7f9 fe8d 	bl	8000390 <__aeabi_uldivmod>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4613      	mov	r3, r2
 800667c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006684:	d308      	bcc.n	8006698 <UART_SetConfig+0x430>
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800668c:	d204      	bcs.n	8006698 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	e0ce      	b.n	8006836 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800669e:	e0ca      	b.n	8006836 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a8:	d166      	bne.n	8006778 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80066aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d827      	bhi.n	8006702 <UART_SetConfig+0x49a>
 80066b2:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <UART_SetConfig+0x450>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	08006703 	.word	0x08006703
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	08006703 	.word	0x08006703
 80066d0:	08006703 	.word	0x08006703
 80066d4:	08006703 	.word	0x08006703
 80066d8:	080066fb 	.word	0x080066fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fe fdd2 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 80066e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066e2:	e014      	b.n	800670e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fe fde4 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066ea:	e010      	b.n	800670e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006828 <UART_SetConfig+0x5c0>)
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066f0:	e00d      	b.n	800670e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f2:	f7fe fd59 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 80066f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066f8:	e009      	b.n	800670e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006700:	e005      	b.n	800670e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800670c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8090 	beq.w	8006836 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	4a44      	ldr	r2, [pc, #272]	@ (800682c <UART_SetConfig+0x5c4>)
 800671c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006720:	461a      	mov	r2, r3
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	fbb3 f3f2 	udiv	r3, r3, r2
 8006728:	005a      	lsls	r2, r3, #1
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	441a      	add	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	2b0f      	cmp	r3, #15
 8006740:	d916      	bls.n	8006770 <UART_SetConfig+0x508>
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006748:	d212      	bcs.n	8006770 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f023 030f 	bic.w	r3, r3, #15
 8006752:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	b29b      	uxth	r3, r3
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	b29a      	uxth	r2, r3
 8006760:	8bfb      	ldrh	r3, [r7, #30]
 8006762:	4313      	orrs	r3, r2
 8006764:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	8bfa      	ldrh	r2, [r7, #30]
 800676c:	60da      	str	r2, [r3, #12]
 800676e:	e062      	b.n	8006836 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006776:	e05e      	b.n	8006836 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006778:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800677c:	2b08      	cmp	r3, #8
 800677e:	d828      	bhi.n	80067d2 <UART_SetConfig+0x56a>
 8006780:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <UART_SetConfig+0x520>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067ad 	.word	0x080067ad
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	080067d3 	.word	0x080067d3
 8006798:	080067c3 	.word	0x080067c3
 800679c:	080067d3 	.word	0x080067d3
 80067a0:	080067d3 	.word	0x080067d3
 80067a4:	080067d3 	.word	0x080067d3
 80067a8:	080067cb 	.word	0x080067cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fe fd6a 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 80067b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067b2:	e014      	b.n	80067de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7fe fd7c 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 80067b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067ba:	e010      	b.n	80067de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006828 <UART_SetConfig+0x5c0>)
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067c0:	e00d      	b.n	80067de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c2:	f7fe fcf1 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 80067c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067c8:	e009      	b.n	80067de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067d0:	e005      	b.n	80067de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067dc:	bf00      	nop
    }

    if (pclk != 0U)
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d028      	beq.n	8006836 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	4a10      	ldr	r2, [pc, #64]	@ (800682c <UART_SetConfig+0x5c4>)
 80067ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ee:	461a      	mov	r2, r3
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	441a      	add	r2, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	fbb2 f3f3 	udiv	r3, r2, r3
 8006806:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	2b0f      	cmp	r3, #15
 800680c:	d910      	bls.n	8006830 <UART_SetConfig+0x5c8>
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006814:	d20c      	bcs.n	8006830 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	b29a      	uxth	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
 8006820:	e009      	b.n	8006836 <UART_SetConfig+0x5ce>
 8006822:	bf00      	nop
 8006824:	40008000 	.word	0x40008000
 8006828:	00f42400 	.word	0x00f42400
 800682c:	08017d64 	.word	0x08017d64
      }
      else
      {
        ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2201      	movs	r2, #1
 800683a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2201      	movs	r2, #1
 8006842:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2200      	movs	r2, #0
 800684a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2200      	movs	r2, #0
 8006850:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006852:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006856:	4618      	mov	r0, r3
 8006858:	3730      	adds	r7, #48	@ 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01a      	beq.n	8006976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800695e:	d10a      	bne.n	8006976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b098      	sub	sp, #96	@ 0x60
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b4:	f7fb fa46 	bl	8001e44 <HAL_GetTick>
 80069b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d12f      	bne.n	8006a28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d0:	2200      	movs	r2, #0
 80069d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f88e 	bl	8006af8 <UART_WaitOnFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d022      	beq.n	8006a28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e6      	bne.n	80069e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e063      	b.n	8006af0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d149      	bne.n	8006aca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f857 	bl	8006af8 <UART_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d03c      	beq.n	8006aca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa2:	61fa      	str	r2, [r7, #28]
 8006aa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	69b9      	ldr	r1, [r7, #24]
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e012      	b.n	8006af0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3758      	adds	r7, #88	@ 0x58
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b08:	e04f      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b10:	d04b      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b12:	f7fb f997 	bl	8001e44 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d302      	bcc.n	8006b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e04e      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d037      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b80      	cmp	r3, #128	@ 0x80
 8006b3e:	d034      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b40      	cmp	r3, #64	@ 0x40
 8006b44:	d031      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d110      	bne.n	8006b76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2208      	movs	r2, #8
 8006b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f920 	bl	8006da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2208      	movs	r2, #8
 8006b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e029      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b84:	d111      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f906 	bl	8006da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e00f      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d0a0      	beq.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b096      	sub	sp, #88	@ 0x58
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	88fa      	ldrh	r2, [r7, #6]
 8006bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2222      	movs	r2, #34	@ 0x22
 8006bfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d02d      	beq.n	8006c66 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c10:	4a40      	ldr	r2, [pc, #256]	@ (8006d14 <UART_Start_Receive_DMA+0x140>)
 8006c12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8006d18 <UART_Start_Receive_DMA+0x144>)
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c24:	4a3d      	ldr	r2, [pc, #244]	@ (8006d1c <UART_Start_Receive_DMA+0x148>)
 8006c26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2e:	2200      	movs	r2, #0
 8006c30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3324      	adds	r3, #36	@ 0x24
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c44:	461a      	mov	r2, r3
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	f7fd f8e2 	bl	8003e10 <HAL_DMA_Start_IT>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2210      	movs	r2, #16
 8006c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e051      	b.n	8006d0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d018      	beq.n	8006ca0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c8e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e6      	bne.n	8006c6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cc0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e5      	bne.n	8006ca0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cf4:	623a      	str	r2, [r7, #32]
 8006cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69f9      	ldr	r1, [r7, #28]
 8006cfa:	6a3a      	ldr	r2, [r7, #32]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3758      	adds	r7, #88	@ 0x58
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	08006f25 	.word	0x08006f25
 8006d18:	08007051 	.word	0x08007051
 8006d1c:	0800708f 	.word	0x0800708f

08006d20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b08f      	sub	sp, #60	@ 0x3c
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d48:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e6      	bne.n	8006d28 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7a:	61ba      	str	r2, [r7, #24]
 8006d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6979      	ldr	r1, [r7, #20]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	613b      	str	r3, [r7, #16]
   return(result);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e5      	bne.n	8006d5a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006d96:	bf00      	nop
 8006d98:	373c      	adds	r7, #60	@ 0x3c
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b095      	sub	sp, #84	@ 0x54
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e6      	bne.n	8006daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e3      	bne.n	8006ddc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d118      	bne.n	8006e4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 0310 	bic.w	r3, r3, #16
 8006e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6979      	ldr	r1, [r7, #20]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	613b      	str	r3, [r7, #16]
   return(result);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e6      	bne.n	8006e1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e62:	bf00      	nop
 8006e64:	3754      	adds	r7, #84	@ 0x54
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b090      	sub	sp, #64	@ 0x40
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d137      	bne.n	8006efa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ef8:	e002      	b.n	8006f00 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006efa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006efc:	f7ff f976 	bl	80061ec <HAL_UART_TxCpltCallback>
}
 8006f00:	bf00      	nop
 8006f02:	3740      	adds	r7, #64	@ 0x40
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f14:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f7ff f972 	bl	8006200 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b09c      	sub	sp, #112	@ 0x70
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d171      	bne.n	8007024 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e6      	bne.n	8006f48 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006fce:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d118      	bne.n	8007024 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0310 	bic.w	r3, r3, #16
 8007006:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	69b9      	ldr	r1, [r7, #24]
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	617b      	str	r3, [r7, #20]
   return(result);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007026:	2200      	movs	r2, #0
 8007028:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800702c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d107      	bne.n	8007042 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007038:	4619      	mov	r1, r3
 800703a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800703c:	f7ff f908 	bl	8006250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007040:	e002      	b.n	8007048 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007042:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007044:	f7ff f8e6 	bl	8006214 <HAL_UART_RxCpltCallback>
}
 8007048:	bf00      	nop
 800704a:	3770      	adds	r7, #112	@ 0x70
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d109      	bne.n	8007080 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	b29b      	uxth	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff f8e9 	bl	8006250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800707e:	e002      	b.n	8007086 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff f8d1 	bl	8006228 <HAL_UART_RxHalfCpltCallback>
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b6:	2b80      	cmp	r3, #128	@ 0x80
 80070b8:	d109      	bne.n	80070ce <UART_DMAError+0x40>
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b21      	cmp	r3, #33	@ 0x21
 80070be:	d106      	bne.n	80070ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80070c8:	6978      	ldr	r0, [r7, #20]
 80070ca:	f7ff fe29 	bl	8006d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d8:	2b40      	cmp	r3, #64	@ 0x40
 80070da:	d109      	bne.n	80070f0 <UART_DMAError+0x62>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b22      	cmp	r3, #34	@ 0x22
 80070e0:	d106      	bne.n	80070f0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80070ea:	6978      	ldr	r0, [r7, #20]
 80070ec:	f7ff fe59 	bl	8006da2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f6:	f043 0210 	orr.w	r2, r3, #16
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007100:	6978      	ldr	r0, [r7, #20]
 8007102:	f7ff f89b 	bl	800623c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007106:	bf00      	nop
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff f889 	bl	800623c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b088      	sub	sp, #32
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	60bb      	str	r3, [r7, #8]
   return(result);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6979      	ldr	r1, [r7, #20]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	613b      	str	r3, [r7, #16]
   return(result);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff f836 	bl	80061ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007180:	bf00      	nop
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_UARTEx_DisableFifoMode+0x16>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e027      	b.n	800722a <HAL_UARTEx_DisableFifoMode+0x66>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	@ 0x24
 80071e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800724a:	2302      	movs	r3, #2
 800724c:	e02d      	b.n	80072aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2224      	movs	r2, #36	@ 0x24
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f850 	bl	8007330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e02d      	b.n	8007326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2224      	movs	r2, #36	@ 0x24
 80072d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f812 	bl	8007330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800733c:	2b00      	cmp	r3, #0
 800733e:	d108      	bne.n	8007352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007350:	e031      	b.n	80073b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007352:	2308      	movs	r3, #8
 8007354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007356:	2308      	movs	r3, #8
 8007358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	0e5b      	lsrs	r3, r3, #25
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	0f5b      	lsrs	r3, r3, #29
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	7b3a      	ldrb	r2, [r7, #12]
 800737e:	4911      	ldr	r1, [pc, #68]	@ (80073c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007380:	5c8a      	ldrb	r2, [r1, r2]
 8007382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007386:	7b3a      	ldrb	r2, [r7, #12]
 8007388:	490f      	ldr	r1, [pc, #60]	@ (80073c8 <UARTEx_SetNbDataToProcess+0x98>)
 800738a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800738c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	7b7a      	ldrb	r2, [r7, #13]
 800739c:	4909      	ldr	r1, [pc, #36]	@ (80073c4 <UARTEx_SetNbDataToProcess+0x94>)
 800739e:	5c8a      	ldrb	r2, [r1, r2]
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073a4:	7b7a      	ldrb	r2, [r7, #13]
 80073a6:	4908      	ldr	r1, [pc, #32]	@ (80073c8 <UARTEx_SetNbDataToProcess+0x98>)
 80073a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	08017d7c 	.word	0x08017d7c
 80073c8:	08017d84 	.word	0x08017d84

080073cc <__NVIC_SetPriority>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	db0a      	blt.n	80073f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	490c      	ldr	r1, [pc, #48]	@ (8007418 <__NVIC_SetPriority+0x4c>)
 80073e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ea:	0112      	lsls	r2, r2, #4
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	440b      	add	r3, r1
 80073f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80073f4:	e00a      	b.n	800740c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	4908      	ldr	r1, [pc, #32]	@ (800741c <__NVIC_SetPriority+0x50>)
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	3b04      	subs	r3, #4
 8007404:	0112      	lsls	r2, r2, #4
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	440b      	add	r3, r1
 800740a:	761a      	strb	r2, [r3, #24]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	e000e100 	.word	0xe000e100
 800741c:	e000ed00 	.word	0xe000ed00

08007420 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007424:	2100      	movs	r1, #0
 8007426:	f06f 0004 	mvn.w	r0, #4
 800742a:	f7ff ffcf 	bl	80073cc <__NVIC_SetPriority>
#endif
}
 800742e:	bf00      	nop
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800743a:	f3ef 8305 	mrs	r3, IPSR
 800743e:	603b      	str	r3, [r7, #0]
  return(result);
 8007440:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007446:	f06f 0305 	mvn.w	r3, #5
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	e00c      	b.n	8007468 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800744e:	4b0a      	ldr	r3, [pc, #40]	@ (8007478 <osKernelInitialize+0x44>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007456:	4b08      	ldr	r3, [pc, #32]	@ (8007478 <osKernelInitialize+0x44>)
 8007458:	2201      	movs	r2, #1
 800745a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800745c:	2300      	movs	r3, #0
 800745e:	607b      	str	r3, [r7, #4]
 8007460:	e002      	b.n	8007468 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007466:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007468:	687b      	ldr	r3, [r7, #4]
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20006704 	.word	0x20006704

0800747c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007482:	f3ef 8305 	mrs	r3, IPSR
 8007486:	603b      	str	r3, [r7, #0]
  return(result);
 8007488:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <osKernelStart+0x1a>
    stat = osErrorISR;
 800748e:	f06f 0305 	mvn.w	r3, #5
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	e010      	b.n	80074b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007496:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <osKernelStart+0x48>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d109      	bne.n	80074b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800749e:	f7ff ffbf 	bl	8007420 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074a2:	4b08      	ldr	r3, [pc, #32]	@ (80074c4 <osKernelStart+0x48>)
 80074a4:	2202      	movs	r2, #2
 80074a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074a8:	f001 f87a 	bl	80085a0 <vTaskStartScheduler>
      stat = osOK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	e002      	b.n	80074b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074b8:	687b      	ldr	r3, [r7, #4]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20006704 	.word	0x20006704

080074c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	@ 0x38
 80074cc:	af04      	add	r7, sp, #16
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d8:	f3ef 8305 	mrs	r3, IPSR
 80074dc:	617b      	str	r3, [r7, #20]
  return(result);
 80074de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d17e      	bne.n	80075e2 <osThreadNew+0x11a>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d07b      	beq.n	80075e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80074ea:	2380      	movs	r3, #128	@ 0x80
 80074ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074ee:	2318      	movs	r3, #24
 80074f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80074f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d045      	beq.n	800758e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <osThreadNew+0x48>
        name = attr->name;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d008      	beq.n	8007536 <osThreadNew+0x6e>
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b38      	cmp	r3, #56	@ 0x38
 8007528:	d805      	bhi.n	8007536 <osThreadNew+0x6e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <osThreadNew+0x72>
        return (NULL);
 8007536:	2300      	movs	r3, #0
 8007538:	e054      	b.n	80075e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	089b      	lsrs	r3, r3, #2
 8007548:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00e      	beq.n	8007570 <osThreadNew+0xa8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2b5b      	cmp	r3, #91	@ 0x5b
 8007558:	d90a      	bls.n	8007570 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800755e:	2b00      	cmp	r3, #0
 8007560:	d006      	beq.n	8007570 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <osThreadNew+0xa8>
        mem = 1;
 800756a:	2301      	movs	r3, #1
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	e010      	b.n	8007592 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10c      	bne.n	8007592 <osThreadNew+0xca>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <osThreadNew+0xca>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <osThreadNew+0xca>
          mem = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e001      	b.n	8007592 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d110      	bne.n	80075ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075a0:	9202      	str	r2, [sp, #8]
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6a3a      	ldr	r2, [r7, #32]
 80075ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fe1a 	bl	80081e8 <xTaskCreateStatic>
 80075b4:	4603      	mov	r3, r0
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	e013      	b.n	80075e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d110      	bne.n	80075e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f107 0310 	add.w	r3, r7, #16
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fe68 	bl	80082a8 <xTaskCreate>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d001      	beq.n	80075e2 <osThreadNew+0x11a>
            hTask = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075e2:	693b      	ldr	r3, [r7, #16]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3728      	adds	r7, #40	@ 0x28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f4:	f3ef 8305 	mrs	r3, IPSR
 80075f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80075fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <osDelay+0x1c>
    stat = osErrorISR;
 8007600:	f06f 0305 	mvn.w	r3, #5
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	e007      	b.n	8007618 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007608:	2300      	movs	r3, #0
 800760a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 ff8e 	bl	8008534 <vTaskDelay>
    }
  }

  return (stat);
 8007618:	68fb      	ldr	r3, [r7, #12]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a07      	ldr	r2, [pc, #28]	@ (8007650 <vApplicationGetIdleTaskMemory+0x2c>)
 8007634:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	4a06      	ldr	r2, [pc, #24]	@ (8007654 <vApplicationGetIdleTaskMemory+0x30>)
 800763a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2280      	movs	r2, #128	@ 0x80
 8007640:	601a      	str	r2, [r3, #0]
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20006708 	.word	0x20006708
 8007654:	20006764 	.word	0x20006764

08007658 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a07      	ldr	r2, [pc, #28]	@ (8007684 <vApplicationGetTimerTaskMemory+0x2c>)
 8007668:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4a06      	ldr	r2, [pc, #24]	@ (8007688 <vApplicationGetTimerTaskMemory+0x30>)
 800766e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007676:	601a      	str	r2, [r3, #0]
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	20006964 	.word	0x20006964
 8007688:	200069c0 	.word	0x200069c0

0800768c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f103 0208 	add.w	r2, r3, #8
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f103 0208 	add.w	r2, r3, #8
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f103 0208 	add.w	r2, r3, #8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007744:	d103      	bne.n	800774e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e00c      	b.n	8007768 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3308      	adds	r3, #8
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e002      	b.n	800775c <vListInsert+0x2e>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	429a      	cmp	r2, r3
 8007766:	d2f6      	bcs.n	8007756 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6892      	ldr	r2, [r2, #8]
 80077b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6852      	ldr	r2, [r2, #4]
 80077c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d103      	bne.n	80077d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	1e5a      	subs	r2, r3, #1
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10b      	bne.n	8007820 <xQueueGenericReset+0x2c>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	60bb      	str	r3, [r7, #8]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007820:	f002 f8a2 	bl	8009968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800782c:	68f9      	ldr	r1, [r7, #12]
 800782e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007830:	fb01 f303 	mul.w	r3, r1, r3
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007850:	3b01      	subs	r3, #1
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007856:	fb01 f303 	mul.w	r3, r1, r3
 800785a:	441a      	add	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	22ff      	movs	r2, #255	@ 0xff
 8007864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	22ff      	movs	r2, #255	@ 0xff
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d114      	bne.n	80078a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01a      	beq.n	80078b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3310      	adds	r3, #16
 8007882:	4618      	mov	r0, r3
 8007884:	f001 f91a 	bl	8008abc <xTaskRemoveFromEventList>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d012      	beq.n	80078b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800788e:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <xQueueGenericReset+0xd0>)
 8007890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	e009      	b.n	80078b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3310      	adds	r3, #16
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fef1 	bl	800768c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3324      	adds	r3, #36	@ 0x24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff feec 	bl	800768c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078b4:	f002 f88a 	bl	80099cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078b8:	2301      	movs	r3, #1
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08e      	sub	sp, #56	@ 0x38
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	e7fd      	b.n	80078f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <xQueueGenericCreateStatic+0x56>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <xQueueGenericCreateStatic+0x5a>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <xQueueGenericCreateStatic+0x5c>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10b      	bne.n	8007940 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	623b      	str	r3, [r7, #32]
}
 800793a:	bf00      	nop
 800793c:	bf00      	nop
 800793e:	e7fd      	b.n	800793c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <xQueueGenericCreateStatic+0x84>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <xQueueGenericCreateStatic+0x88>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <xQueueGenericCreateStatic+0x8a>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	61fb      	str	r3, [r7, #28]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800796e:	2350      	movs	r3, #80	@ 0x50
 8007970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b50      	cmp	r3, #80	@ 0x50
 8007976:	d00b      	beq.n	8007990 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	61bb      	str	r3, [r7, #24]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007990:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00d      	beq.n	80079b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f805 	bl	80079c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3730      	adds	r7, #48	@ 0x30
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e002      	b.n	80079e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079f0:	2101      	movs	r1, #1
 80079f2:	69b8      	ldr	r0, [r7, #24]
 80079f4:	f7ff fefe 	bl	80077f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a00:	bf00      	nop
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	@ 0x38
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <xQueueGenericSend+0x34>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a36:	bf00      	nop
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <xQueueGenericSend+0x42>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <xQueueGenericSend+0x46>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <xQueueGenericSend+0x48>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10b      	bne.n	8007a6c <xQueueGenericSend+0x64>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d103      	bne.n	8007a7a <xQueueGenericSend+0x72>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <xQueueGenericSend+0x76>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <xQueueGenericSend+0x78>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <xQueueGenericSend+0x94>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	623b      	str	r3, [r7, #32]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a9c:	f001 f9f6 	bl	8008e8c <xTaskGetSchedulerState>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <xQueueGenericSend+0xa4>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <xQueueGenericSend+0xa8>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <xQueueGenericSend+0xaa>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <xQueueGenericSend+0xc6>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	61fb      	str	r3, [r7, #28]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ace:	f001 ff4b 	bl	8009968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <xQueueGenericSend+0xdc>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d129      	bne.n	8007b38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aea:	f000 fa0f 	bl	8007f0c <prvCopyDataToQueue>
 8007aee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afa:	3324      	adds	r3, #36	@ 0x24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 ffdd 	bl	8008abc <xTaskRemoveFromEventList>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d013      	beq.n	8007b30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b08:	4b3f      	ldr	r3, [pc, #252]	@ (8007c08 <xQueueGenericSend+0x200>)
 8007b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	e00a      	b.n	8007b30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b20:	4b39      	ldr	r3, [pc, #228]	@ (8007c08 <xQueueGenericSend+0x200>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b30:	f001 ff4c 	bl	80099cc <vPortExitCritical>
				return pdPASS;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e063      	b.n	8007c00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b3e:	f001 ff45 	bl	80099cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e05c      	b.n	8007c00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b4c:	f107 0314 	add.w	r3, r7, #20
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 f83f 	bl	8008bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b56:	2301      	movs	r3, #1
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b5a:	f001 ff37 	bl	80099cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b5e:	f000 fd87 	bl	8008670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b62:	f001 ff01 	bl	8009968 <vPortEnterCritical>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b6c:	b25b      	sxtb	r3, r3
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b72:	d103      	bne.n	8007b7c <xQueueGenericSend+0x174>
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b82:	b25b      	sxtb	r3, r3
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b88:	d103      	bne.n	8007b92 <xQueueGenericSend+0x18a>
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b92:	f001 ff1b 	bl	80099cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b96:	1d3a      	adds	r2, r7, #4
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 f82e 	bl	8008c00 <xTaskCheckForTimeOut>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d124      	bne.n	8007bf4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007baa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bac:	f000 faa6 	bl	80080fc <prvIsQueueFull>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d018      	beq.n	8007be8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	3310      	adds	r3, #16
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 ff2a 	bl	8008a18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bc6:	f000 fa31 	bl	800802c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bca:	f000 fd5f 	bl	800868c <xTaskResumeAll>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f47f af7c 	bne.w	8007ace <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <xQueueGenericSend+0x200>)
 8007bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	e772      	b.n	8007ace <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bea:	f000 fa1f 	bl	800802c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bee:	f000 fd4d 	bl	800868c <xTaskResumeAll>
 8007bf2:	e76c      	b.n	8007ace <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bf6:	f000 fa19 	bl	800802c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bfa:	f000 fd47 	bl	800868c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3738      	adds	r7, #56	@ 0x38
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b090      	sub	sp, #64	@ 0x40
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <xQueueGenericSendFromISR+0x3e>
 8007c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <xQueueGenericSendFromISR+0x42>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <xQueueGenericSendFromISR+0x44>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10b      	bne.n	8007c6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d103      	bne.n	8007c7a <xQueueGenericSendFromISR+0x6e>
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <xQueueGenericSendFromISR+0x72>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <xQueueGenericSendFromISR+0x74>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	623b      	str	r3, [r7, #32]
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c9c:	f001 ff44 	bl	8009b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ca0:	f3ef 8211 	mrs	r2, BASEPRI
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	61fa      	str	r2, [r7, #28]
 8007cb6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d302      	bcc.n	8007cce <xQueueGenericSendFromISR+0xc2>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d12f      	bne.n	8007d2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ce4:	f000 f912 	bl	8007f0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ce8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cf0:	d112      	bne.n	8007d18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d016      	beq.n	8007d28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	3324      	adds	r3, #36	@ 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fedc 	bl	8008abc <xTaskRemoveFromEventList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00e      	beq.n	8007d28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e007      	b.n	8007d28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	b25a      	sxtb	r2, r3
 8007d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d2c:	e001      	b.n	8007d32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3740      	adds	r7, #64	@ 0x40
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08c      	sub	sp, #48	@ 0x30
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10b      	bne.n	8007d7a <xQueueReceive+0x32>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	623b      	str	r3, [r7, #32]
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	e7fd      	b.n	8007d76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <xQueueReceive+0x40>
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <xQueueReceive+0x44>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e000      	b.n	8007d8e <xQueueReceive+0x46>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10b      	bne.n	8007daa <xQueueReceive+0x62>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	61fb      	str	r3, [r7, #28]
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop
 8007da8:	e7fd      	b.n	8007da6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007daa:	f001 f86f 	bl	8008e8c <xTaskGetSchedulerState>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <xQueueReceive+0x72>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <xQueueReceive+0x76>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <xQueueReceive+0x78>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <xQueueReceive+0x94>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	61bb      	str	r3, [r7, #24]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ddc:	f001 fdc4 	bl	8009968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01f      	beq.n	8007e2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007df0:	f000 f8f6 	bl	8007fe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00f      	beq.n	8007e24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	3310      	adds	r3, #16
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fe57 	bl	8008abc <xTaskRemoveFromEventList>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e14:	4b3c      	ldr	r3, [pc, #240]	@ (8007f08 <xQueueReceive+0x1c0>)
 8007e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e24:	f001 fdd2 	bl	80099cc <vPortExitCritical>
				return pdPASS;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e069      	b.n	8007f00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d103      	bne.n	8007e3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e32:	f001 fdcb 	bl	80099cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e062      	b.n	8007f00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e40:	f107 0310 	add.w	r3, r7, #16
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fec5 	bl	8008bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e4e:	f001 fdbd 	bl	80099cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e52:	f000 fc0d 	bl	8008670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e56:	f001 fd87 	bl	8009968 <vPortEnterCritical>
 8007e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e60:	b25b      	sxtb	r3, r3
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e66:	d103      	bne.n	8007e70 <xQueueReceive+0x128>
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e76:	b25b      	sxtb	r3, r3
 8007e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e7c:	d103      	bne.n	8007e86 <xQueueReceive+0x13e>
 8007e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e86:	f001 fda1 	bl	80099cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e8a:	1d3a      	adds	r2, r7, #4
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 feb4 	bl	8008c00 <xTaskCheckForTimeOut>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d123      	bne.n	8007ee6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ea0:	f000 f916 	bl	80080d0 <prvIsQueueEmpty>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d017      	beq.n	8007eda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eac:	3324      	adds	r3, #36	@ 0x24
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fdb0 	bl	8008a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007eba:	f000 f8b7 	bl	800802c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ebe:	f000 fbe5 	bl	800868c <xTaskResumeAll>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d189      	bne.n	8007ddc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f08 <xQueueReceive+0x1c0>)
 8007eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	e780      	b.n	8007ddc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007edc:	f000 f8a6 	bl	800802c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ee0:	f000 fbd4 	bl	800868c <xTaskResumeAll>
 8007ee4:	e77a      	b.n	8007ddc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ee8:	f000 f8a0 	bl	800802c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eec:	f000 fbce 	bl	800868c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ef0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ef2:	f000 f8ed 	bl	80080d0 <prvIsQueueEmpty>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f43f af6f 	beq.w	8007ddc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007efe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3730      	adds	r7, #48	@ 0x30
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10d      	bne.n	8007f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d14d      	bne.n	8007fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 ffc6 	bl	8008ec8 <xTaskPriorityDisinherit>
 8007f3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	e043      	b.n	8007fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d119      	bne.n	8007f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6858      	ldr	r0, [r3, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f54:	461a      	mov	r2, r3
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	f00e ffa7 	bl	8016eaa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d32b      	bcc.n	8007fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	605a      	str	r2, [r3, #4]
 8007f7e:	e026      	b.n	8007fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68d8      	ldr	r0, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f88:	461a      	mov	r2, r3
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	f00e ff8d 	bl	8016eaa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	425b      	negs	r3, r3
 8007f9a:	441a      	add	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d207      	bcs.n	8007fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d105      	bne.n	8007fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007fd6:	697b      	ldr	r3, [r7, #20]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffa:	441a      	add	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	429a      	cmp	r2, r3
 800800a:	d303      	bcc.n	8008014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68d9      	ldr	r1, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801c:	461a      	mov	r2, r3
 800801e:	6838      	ldr	r0, [r7, #0]
 8008020:	f00e ff43 	bl	8016eaa <memcpy>
	}
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008034:	f001 fc98 	bl	8009968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800803e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008040:	e011      	b.n	8008066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	d012      	beq.n	8008070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3324      	adds	r3, #36	@ 0x24
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fd34 	bl	8008abc <xTaskRemoveFromEventList>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800805a:	f000 fe35 	bl	8008cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	3b01      	subs	r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800806a:	2b00      	cmp	r3, #0
 800806c:	dce9      	bgt.n	8008042 <prvUnlockQueue+0x16>
 800806e:	e000      	b.n	8008072 <prvUnlockQueue+0x46>
					break;
 8008070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	22ff      	movs	r2, #255	@ 0xff
 8008076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800807a:	f001 fca7 	bl	80099cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800807e:	f001 fc73 	bl	8009968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800808a:	e011      	b.n	80080b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d012      	beq.n	80080ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3310      	adds	r3, #16
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fd0f 	bl	8008abc <xTaskRemoveFromEventList>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080a4:	f000 fe10 	bl	8008cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dce9      	bgt.n	800808c <prvUnlockQueue+0x60>
 80080b8:	e000      	b.n	80080bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	22ff      	movs	r2, #255	@ 0xff
 80080c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080c4:	f001 fc82 	bl	80099cc <vPortExitCritical>
}
 80080c8:	bf00      	nop
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080d8:	f001 fc46 	bl	8009968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080e4:	2301      	movs	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e001      	b.n	80080ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080ee:	f001 fc6d 	bl	80099cc <vPortExitCritical>

	return xReturn;
 80080f2:	68fb      	ldr	r3, [r7, #12]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008104:	f001 fc30 	bl	8009968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008110:	429a      	cmp	r2, r3
 8008112:	d102      	bne.n	800811a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	e001      	b.n	800811e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800811e:	f001 fc55 	bl	80099cc <vPortExitCritical>

	return xReturn;
 8008122:	68fb      	ldr	r3, [r7, #12]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	e014      	b.n	8008166 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800813c:	4a0f      	ldr	r2, [pc, #60]	@ (800817c <vQueueAddToRegistry+0x50>)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10b      	bne.n	8008160 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008148:	490c      	ldr	r1, [pc, #48]	@ (800817c <vQueueAddToRegistry+0x50>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008152:	4a0a      	ldr	r2, [pc, #40]	@ (800817c <vQueueAddToRegistry+0x50>)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	4413      	add	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800815e:	e006      	b.n	800816e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b07      	cmp	r3, #7
 800816a:	d9e7      	bls.n	800813c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20006dc0 	.word	0x20006dc0

08008180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008190:	f001 fbea 	bl	8009968 <vPortEnterCritical>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800819a:	b25b      	sxtb	r3, r3
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081a0:	d103      	bne.n	80081aa <vQueueWaitForMessageRestricted+0x2a>
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081b6:	d103      	bne.n	80081c0 <vQueueWaitForMessageRestricted+0x40>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081c0:	f001 fc04 	bl	80099cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	3324      	adds	r3, #36	@ 0x24
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fc45 	bl	8008a64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081da:	6978      	ldr	r0, [r7, #20]
 80081dc:	f7ff ff26 	bl	800802c <prvUnlockQueue>
	}
 80081e0:	bf00      	nop
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	@ 0x38
 80081ec:	af04      	add	r7, sp, #16
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xTaskCreateStatic+0x2c>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	623b      	str	r3, [r7, #32]
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <xTaskCreateStatic+0x4a>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	61fb      	str	r3, [r7, #28]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008232:	235c      	movs	r3, #92	@ 0x5c
 8008234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b5c      	cmp	r3, #92	@ 0x5c
 800823a:	d00b      	beq.n	8008254 <xTaskCreateStatic+0x6c>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	61bb      	str	r3, [r7, #24]
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008254:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01e      	beq.n	800829a <xTaskCreateStatic+0xb2>
 800825c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01b      	beq.n	800829a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008264:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	2202      	movs	r2, #2
 8008270:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008274:	2300      	movs	r3, #0
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	9302      	str	r3, [sp, #8]
 800827c:	f107 0314 	add.w	r3, r7, #20
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f850 	bl	8008332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008294:	f000 f8de 	bl	8008454 <prvAddNewTaskToReadyList>
 8008298:	e001      	b.n	800829e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800829e:	697b      	ldr	r3, [r7, #20]
	}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3728      	adds	r7, #40	@ 0x28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08c      	sub	sp, #48	@ 0x30
 80082ac:	af04      	add	r7, sp, #16
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	4613      	mov	r3, r2
 80082b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fc75 	bl	8009bac <pvPortMalloc>
 80082c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082ca:	205c      	movs	r0, #92	@ 0x5c
 80082cc:	f001 fc6e 	bl	8009bac <pvPortMalloc>
 80082d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80082de:	e005      	b.n	80082ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082e0:	6978      	ldr	r0, [r7, #20]
 80082e2:	f001 fd31 	bl	8009d48 <vPortFree>
 80082e6:	e001      	b.n	80082ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d017      	beq.n	8008322 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f80e 	bl	8008332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008316:	69f8      	ldr	r0, [r7, #28]
 8008318:	f000 f89c 	bl	8008454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800831c:	2301      	movs	r3, #1
 800831e:	61bb      	str	r3, [r7, #24]
 8008320:	e002      	b.n	8008328 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008326:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008328:	69bb      	ldr	r3, [r7, #24]
	}
 800832a:	4618      	mov	r0, r3
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b088      	sub	sp, #32
 8008336:	af00      	add	r7, sp, #0
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	607a      	str	r2, [r7, #4]
 800833e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	461a      	mov	r2, r3
 800834a:	21a5      	movs	r1, #165	@ 0xa5
 800834c:	f00e fce4 	bl	8016d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800835a:	3b01      	subs	r3, #1
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	617b      	str	r3, [r7, #20]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d01f      	beq.n	80083d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	e012      	b.n	80083be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	7819      	ldrb	r1, [r3, #0]
 80083a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	3334      	adds	r3, #52	@ 0x34
 80083a8:	460a      	mov	r2, r1
 80083aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d006      	beq.n	80083c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	3301      	adds	r3, #1
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	2b0f      	cmp	r3, #15
 80083c2:	d9e9      	bls.n	8008398 <prvInitialiseNewTask+0x66>
 80083c4:	e000      	b.n	80083c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80083c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083d0:	e003      	b.n	80083da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083dc:	2b37      	cmp	r3, #55	@ 0x37
 80083de:	d901      	bls.n	80083e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083e0:	2337      	movs	r3, #55	@ 0x37
 80083e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	2200      	movs	r2, #0
 80083f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff f966 	bl	80076cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	3318      	adds	r3, #24
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff f961 	bl	80076cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800841e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	2200      	movs	r2, #0
 8008424:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	68f9      	ldr	r1, [r7, #12]
 8008432:	69b8      	ldr	r0, [r7, #24]
 8008434:	f001 f966 	bl	8009704 <pxPortInitialiseStack>
 8008438:	4602      	mov	r2, r0
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800843e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800844a:	bf00      	nop
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800845c:	f001 fa84 	bl	8009968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008460:	4b2d      	ldr	r3, [pc, #180]	@ (8008518 <prvAddNewTaskToReadyList+0xc4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	4a2c      	ldr	r2, [pc, #176]	@ (8008518 <prvAddNewTaskToReadyList+0xc4>)
 8008468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800846a:	4b2c      	ldr	r3, [pc, #176]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008472:	4a2a      	ldr	r2, [pc, #168]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008478:	4b27      	ldr	r3, [pc, #156]	@ (8008518 <prvAddNewTaskToReadyList+0xc4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d110      	bne.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008480:	f000 fc46 	bl	8008d10 <prvInitialiseTaskLists>
 8008484:	e00d      	b.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008486:	4b26      	ldr	r3, [pc, #152]	@ (8008520 <prvAddNewTaskToReadyList+0xcc>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800848e:	4b23      	ldr	r3, [pc, #140]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	429a      	cmp	r2, r3
 800849a:	d802      	bhi.n	80084a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800849c:	4a1f      	ldr	r2, [pc, #124]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084a2:	4b20      	ldr	r3, [pc, #128]	@ (8008524 <prvAddNewTaskToReadyList+0xd0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008524 <prvAddNewTaskToReadyList+0xd0>)
 80084aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008524 <prvAddNewTaskToReadyList+0xd0>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008528 <prvAddNewTaskToReadyList+0xd4>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d903      	bls.n	80084c8 <prvAddNewTaskToReadyList+0x74>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	4a18      	ldr	r2, [pc, #96]	@ (8008528 <prvAddNewTaskToReadyList+0xd4>)
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4a15      	ldr	r2, [pc, #84]	@ (800852c <prvAddNewTaskToReadyList+0xd8>)
 80084d6:	441a      	add	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7ff f901 	bl	80076e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084e4:	f001 fa72 	bl	80099cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <prvAddNewTaskToReadyList+0xcc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00e      	beq.n	800850e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084f0:	4b0a      	ldr	r3, [pc, #40]	@ (800851c <prvAddNewTaskToReadyList+0xc8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d207      	bcs.n	800850e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <prvAddNewTaskToReadyList+0xdc>)
 8008500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	200072d4 	.word	0x200072d4
 800851c:	20006e00 	.word	0x20006e00
 8008520:	200072e0 	.word	0x200072e0
 8008524:	200072f0 	.word	0x200072f0
 8008528:	200072dc 	.word	0x200072dc
 800852c:	20006e04 	.word	0x20006e04
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d018      	beq.n	8008578 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008546:	4b14      	ldr	r3, [pc, #80]	@ (8008598 <vTaskDelay+0x64>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <vTaskDelay+0x32>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60bb      	str	r3, [r7, #8]
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	e7fd      	b.n	8008562 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008566:	f000 f883 	bl	8008670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800856a:	2100      	movs	r1, #0
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fd1b 	bl	8008fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008572:	f000 f88b 	bl	800868c <xTaskResumeAll>
 8008576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d107      	bne.n	800858e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800857e:	4b07      	ldr	r3, [pc, #28]	@ (800859c <vTaskDelay+0x68>)
 8008580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200072fc 	.word	0x200072fc
 800859c:	e000ed04 	.word	0xe000ed04

080085a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08a      	sub	sp, #40	@ 0x28
 80085a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085ae:	463a      	mov	r2, r7
 80085b0:	1d39      	adds	r1, r7, #4
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff f834 	bl	8007624 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	9202      	str	r2, [sp, #8]
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	2300      	movs	r3, #0
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	2300      	movs	r3, #0
 80085cc:	460a      	mov	r2, r1
 80085ce:	4922      	ldr	r1, [pc, #136]	@ (8008658 <vTaskStartScheduler+0xb8>)
 80085d0:	4822      	ldr	r0, [pc, #136]	@ (800865c <vTaskStartScheduler+0xbc>)
 80085d2:	f7ff fe09 	bl	80081e8 <xTaskCreateStatic>
 80085d6:	4603      	mov	r3, r0
 80085d8:	4a21      	ldr	r2, [pc, #132]	@ (8008660 <vTaskStartScheduler+0xc0>)
 80085da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085dc:	4b20      	ldr	r3, [pc, #128]	@ (8008660 <vTaskStartScheduler+0xc0>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085e4:	2301      	movs	r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e001      	b.n	80085ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d102      	bne.n	80085fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085f4:	f000 fd2c 	bl	8009050 <xTimerCreateTimerTask>
 80085f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d116      	bne.n	800862e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
}
 8008612:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008614:	4b13      	ldr	r3, [pc, #76]	@ (8008664 <vTaskStartScheduler+0xc4>)
 8008616:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800861a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800861c:	4b12      	ldr	r3, [pc, #72]	@ (8008668 <vTaskStartScheduler+0xc8>)
 800861e:	2201      	movs	r2, #1
 8008620:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008622:	4b12      	ldr	r3, [pc, #72]	@ (800866c <vTaskStartScheduler+0xcc>)
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008628:	f001 f8fa 	bl	8009820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800862c:	e00f      	b.n	800864e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008634:	d10b      	bne.n	800864e <vTaskStartScheduler+0xae>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	60fb      	str	r3, [r7, #12]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <vTaskStartScheduler+0xaa>
}
 800864e:	bf00      	nop
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	08017cf4 	.word	0x08017cf4
 800865c:	08008ce1 	.word	0x08008ce1
 8008660:	200072f8 	.word	0x200072f8
 8008664:	200072f4 	.word	0x200072f4
 8008668:	200072e0 	.word	0x200072e0
 800866c:	200072d8 	.word	0x200072d8

08008670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008674:	4b04      	ldr	r3, [pc, #16]	@ (8008688 <vTaskSuspendAll+0x18>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3301      	adds	r3, #1
 800867a:	4a03      	ldr	r2, [pc, #12]	@ (8008688 <vTaskSuspendAll+0x18>)
 800867c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800867e:	bf00      	nop
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	200072fc 	.word	0x200072fc

0800868c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800869a:	4b42      	ldr	r3, [pc, #264]	@ (80087a4 <xTaskResumeAll+0x118>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <xTaskResumeAll+0x2e>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	603b      	str	r3, [r7, #0]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086ba:	f001 f955 	bl	8009968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086be:	4b39      	ldr	r3, [pc, #228]	@ (80087a4 <xTaskResumeAll+0x118>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	4a37      	ldr	r2, [pc, #220]	@ (80087a4 <xTaskResumeAll+0x118>)
 80086c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c8:	4b36      	ldr	r3, [pc, #216]	@ (80087a4 <xTaskResumeAll+0x118>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d162      	bne.n	8008796 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086d0:	4b35      	ldr	r3, [pc, #212]	@ (80087a8 <xTaskResumeAll+0x11c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d05e      	beq.n	8008796 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086d8:	e02f      	b.n	800873a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086da:	4b34      	ldr	r3, [pc, #208]	@ (80087ac <xTaskResumeAll+0x120>)
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3318      	adds	r3, #24
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7ff f85a 	bl	80077a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff f855 	bl	80077a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086fa:	4b2d      	ldr	r3, [pc, #180]	@ (80087b0 <xTaskResumeAll+0x124>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d903      	bls.n	800870a <xTaskResumeAll+0x7e>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008706:	4a2a      	ldr	r2, [pc, #168]	@ (80087b0 <xTaskResumeAll+0x124>)
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4a27      	ldr	r2, [pc, #156]	@ (80087b4 <xTaskResumeAll+0x128>)
 8008718:	441a      	add	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3304      	adds	r3, #4
 800871e:	4619      	mov	r1, r3
 8008720:	4610      	mov	r0, r2
 8008722:	f7fe ffe0 	bl	80076e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800872a:	4b23      	ldr	r3, [pc, #140]	@ (80087b8 <xTaskResumeAll+0x12c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008730:	429a      	cmp	r2, r3
 8008732:	d302      	bcc.n	800873a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008734:	4b21      	ldr	r3, [pc, #132]	@ (80087bc <xTaskResumeAll+0x130>)
 8008736:	2201      	movs	r2, #1
 8008738:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800873a:	4b1c      	ldr	r3, [pc, #112]	@ (80087ac <xTaskResumeAll+0x120>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1cb      	bne.n	80086da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008748:	f000 fb80 	bl	8008e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800874c:	4b1c      	ldr	r3, [pc, #112]	@ (80087c0 <xTaskResumeAll+0x134>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d010      	beq.n	800877a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008758:	f000 f846 	bl	80087e8 <xTaskIncrementTick>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008762:	4b16      	ldr	r3, [pc, #88]	@ (80087bc <xTaskResumeAll+0x130>)
 8008764:	2201      	movs	r2, #1
 8008766:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3b01      	subs	r3, #1
 800876c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1f1      	bne.n	8008758 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008774:	4b12      	ldr	r3, [pc, #72]	@ (80087c0 <xTaskResumeAll+0x134>)
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800877a:	4b10      	ldr	r3, [pc, #64]	@ (80087bc <xTaskResumeAll+0x130>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008782:	2301      	movs	r3, #1
 8008784:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008786:	4b0f      	ldr	r3, [pc, #60]	@ (80087c4 <xTaskResumeAll+0x138>)
 8008788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008796:	f001 f919 	bl	80099cc <vPortExitCritical>

	return xAlreadyYielded;
 800879a:	68bb      	ldr	r3, [r7, #8]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200072fc 	.word	0x200072fc
 80087a8:	200072d4 	.word	0x200072d4
 80087ac:	20007294 	.word	0x20007294
 80087b0:	200072dc 	.word	0x200072dc
 80087b4:	20006e04 	.word	0x20006e04
 80087b8:	20006e00 	.word	0x20006e00
 80087bc:	200072e8 	.word	0x200072e8
 80087c0:	200072e4 	.word	0x200072e4
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ce:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <xTaskGetTickCount+0x1c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087d4:	687b      	ldr	r3, [r7, #4]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	200072d8 	.word	0x200072d8

080087e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008930 <xTaskIncrementTick+0x148>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 8090 	bne.w	800891c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008934 <xTaskIncrementTick+0x14c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008804:	4a4b      	ldr	r2, [pc, #300]	@ (8008934 <xTaskIncrementTick+0x14c>)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d121      	bne.n	8008854 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008810:	4b49      	ldr	r3, [pc, #292]	@ (8008938 <xTaskIncrementTick+0x150>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00b      	beq.n	8008832 <xTaskIncrementTick+0x4a>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	603b      	str	r3, [r7, #0]
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	e7fd      	b.n	800882e <xTaskIncrementTick+0x46>
 8008832:	4b41      	ldr	r3, [pc, #260]	@ (8008938 <xTaskIncrementTick+0x150>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	4b40      	ldr	r3, [pc, #256]	@ (800893c <xTaskIncrementTick+0x154>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a3e      	ldr	r2, [pc, #248]	@ (8008938 <xTaskIncrementTick+0x150>)
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	4a3e      	ldr	r2, [pc, #248]	@ (800893c <xTaskIncrementTick+0x154>)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	4b3e      	ldr	r3, [pc, #248]	@ (8008940 <xTaskIncrementTick+0x158>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	4a3c      	ldr	r2, [pc, #240]	@ (8008940 <xTaskIncrementTick+0x158>)
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	f000 fafc 	bl	8008e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008854:	4b3b      	ldr	r3, [pc, #236]	@ (8008944 <xTaskIncrementTick+0x15c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	429a      	cmp	r2, r3
 800885c:	d349      	bcc.n	80088f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800885e:	4b36      	ldr	r3, [pc, #216]	@ (8008938 <xTaskIncrementTick+0x150>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d104      	bne.n	8008872 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008868:	4b36      	ldr	r3, [pc, #216]	@ (8008944 <xTaskIncrementTick+0x15c>)
 800886a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800886e:	601a      	str	r2, [r3, #0]
					break;
 8008870:	e03f      	b.n	80088f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008872:	4b31      	ldr	r3, [pc, #196]	@ (8008938 <xTaskIncrementTick+0x150>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d203      	bcs.n	8008892 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800888a:	4a2e      	ldr	r2, [pc, #184]	@ (8008944 <xTaskIncrementTick+0x15c>)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008890:	e02f      	b.n	80088f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	3304      	adds	r3, #4
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe ff82 	bl	80077a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3318      	adds	r3, #24
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe ff79 	bl	80077a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b2:	4b25      	ldr	r3, [pc, #148]	@ (8008948 <xTaskIncrementTick+0x160>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d903      	bls.n	80088c2 <xTaskIncrementTick+0xda>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	4a22      	ldr	r2, [pc, #136]	@ (8008948 <xTaskIncrementTick+0x160>)
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4a1f      	ldr	r2, [pc, #124]	@ (800894c <xTaskIncrementTick+0x164>)
 80088d0:	441a      	add	r2, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	3304      	adds	r3, #4
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f7fe ff04 	bl	80076e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008950 <xTaskIncrementTick+0x168>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d3b8      	bcc.n	800885e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80088ec:	2301      	movs	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f0:	e7b5      	b.n	800885e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088f2:	4b17      	ldr	r3, [pc, #92]	@ (8008950 <xTaskIncrementTick+0x168>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f8:	4914      	ldr	r1, [pc, #80]	@ (800894c <xTaskIncrementTick+0x164>)
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d901      	bls.n	800890e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800890e:	4b11      	ldr	r3, [pc, #68]	@ (8008954 <xTaskIncrementTick+0x16c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d007      	beq.n	8008926 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e004      	b.n	8008926 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800891c:	4b0e      	ldr	r3, [pc, #56]	@ (8008958 <xTaskIncrementTick+0x170>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3301      	adds	r3, #1
 8008922:	4a0d      	ldr	r2, [pc, #52]	@ (8008958 <xTaskIncrementTick+0x170>)
 8008924:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008926:	697b      	ldr	r3, [r7, #20]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	200072fc 	.word	0x200072fc
 8008934:	200072d8 	.word	0x200072d8
 8008938:	2000728c 	.word	0x2000728c
 800893c:	20007290 	.word	0x20007290
 8008940:	200072ec 	.word	0x200072ec
 8008944:	200072f4 	.word	0x200072f4
 8008948:	200072dc 	.word	0x200072dc
 800894c:	20006e04 	.word	0x20006e04
 8008950:	20006e00 	.word	0x20006e00
 8008954:	200072e8 	.word	0x200072e8
 8008958:	200072e4 	.word	0x200072e4

0800895c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008962:	4b28      	ldr	r3, [pc, #160]	@ (8008a04 <vTaskSwitchContext+0xa8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800896a:	4b27      	ldr	r3, [pc, #156]	@ (8008a08 <vTaskSwitchContext+0xac>)
 800896c:	2201      	movs	r2, #1
 800896e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008970:	e042      	b.n	80089f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008972:	4b25      	ldr	r3, [pc, #148]	@ (8008a08 <vTaskSwitchContext+0xac>)
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008978:	4b24      	ldr	r3, [pc, #144]	@ (8008a0c <vTaskSwitchContext+0xb0>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e011      	b.n	80089a4 <vTaskSwitchContext+0x48>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <vTaskSwitchContext+0x42>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	607b      	str	r3, [r7, #4]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vTaskSwitchContext+0x3e>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	491a      	ldr	r1, [pc, #104]	@ (8008a10 <vTaskSwitchContext+0xb4>)
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4613      	mov	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0e3      	beq.n	8008980 <vTaskSwitchContext+0x24>
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4a13      	ldr	r2, [pc, #76]	@ (8008a10 <vTaskSwitchContext+0xb4>)
 80089c4:	4413      	add	r3, r2
 80089c6:	60bb      	str	r3, [r7, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	3308      	adds	r3, #8
 80089da:	429a      	cmp	r2, r3
 80089dc:	d104      	bne.n	80089e8 <vTaskSwitchContext+0x8c>
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	605a      	str	r2, [r3, #4]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	4a09      	ldr	r2, [pc, #36]	@ (8008a14 <vTaskSwitchContext+0xb8>)
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	4a06      	ldr	r2, [pc, #24]	@ (8008a0c <vTaskSwitchContext+0xb0>)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6013      	str	r3, [r2, #0]
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	200072fc 	.word	0x200072fc
 8008a08:	200072e8 	.word	0x200072e8
 8008a0c:	200072dc 	.word	0x200072dc
 8008a10:	20006e04 	.word	0x20006e04
 8008a14:	20006e00 	.word	0x20006e00

08008a18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10b      	bne.n	8008a40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	60fb      	str	r3, [r7, #12]
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	e7fd      	b.n	8008a3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a40:	4b07      	ldr	r3, [pc, #28]	@ (8008a60 <vTaskPlaceOnEventList+0x48>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3318      	adds	r3, #24
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7fe fe70 	bl	800772e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a4e:	2101      	movs	r1, #1
 8008a50:	6838      	ldr	r0, [r7, #0]
 8008a52:	f000 faa9 	bl	8008fa8 <prvAddCurrentTaskToDelayedList>
}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20006e00 	.word	0x20006e00

08008a64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	617b      	str	r3, [r7, #20]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3318      	adds	r3, #24
 8008a94:	4619      	mov	r1, r3
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7fe fe25 	bl	80076e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008aa6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	68b8      	ldr	r0, [r7, #8]
 8008aac:	f000 fa7c 	bl	8008fa8 <prvAddCurrentTaskToDelayedList>
	}
 8008ab0:	bf00      	nop
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20006e00 	.word	0x20006e00

08008abc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60fb      	str	r3, [r7, #12]
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	e7fd      	b.n	8008ae6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3318      	adds	r3, #24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fe56 	bl	80077a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af4:	4b1d      	ldr	r3, [pc, #116]	@ (8008b6c <xTaskRemoveFromEventList+0xb0>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11d      	bne.n	8008b38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fe4d 	bl	80077a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b0a:	4b19      	ldr	r3, [pc, #100]	@ (8008b70 <xTaskRemoveFromEventList+0xb4>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d903      	bls.n	8008b1a <xTaskRemoveFromEventList+0x5e>
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b16:	4a16      	ldr	r2, [pc, #88]	@ (8008b70 <xTaskRemoveFromEventList+0xb4>)
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4a13      	ldr	r2, [pc, #76]	@ (8008b74 <xTaskRemoveFromEventList+0xb8>)
 8008b28:	441a      	add	r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f7fe fdd8 	bl	80076e6 <vListInsertEnd>
 8008b36:	e005      	b.n	8008b44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	3318      	adds	r3, #24
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	480e      	ldr	r0, [pc, #56]	@ (8008b78 <xTaskRemoveFromEventList+0xbc>)
 8008b40:	f7fe fdd1 	bl	80076e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b48:	4b0c      	ldr	r3, [pc, #48]	@ (8008b7c <xTaskRemoveFromEventList+0xc0>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d905      	bls.n	8008b5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b52:	2301      	movs	r3, #1
 8008b54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b56:	4b0a      	ldr	r3, [pc, #40]	@ (8008b80 <xTaskRemoveFromEventList+0xc4>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e001      	b.n	8008b62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b62:	697b      	ldr	r3, [r7, #20]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200072fc 	.word	0x200072fc
 8008b70:	200072dc 	.word	0x200072dc
 8008b74:	20006e04 	.word	0x20006e04
 8008b78:	20007294 	.word	0x20007294
 8008b7c:	20006e00 	.word	0x20006e00
 8008b80:	200072e8 	.word	0x200072e8

08008b84 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	e7fd      	b.n	8008ba6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008baa:	f000 fedd 	bl	8009968 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bae:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <vTaskSetTimeOutState+0x48>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008bb6:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <vTaskSetTimeOutState+0x4c>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008bbe:	f000 ff05 	bl	80099cc <vPortExitCritical>
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200072ec 	.word	0x200072ec
 8008bd0:	200072d8 	.word	0x200072d8

08008bd4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bdc:	4b06      	ldr	r3, [pc, #24]	@ (8008bf8 <vTaskInternalSetTimeOutState+0x24>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008be4:	4b05      	ldr	r3, [pc, #20]	@ (8008bfc <vTaskInternalSetTimeOutState+0x28>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	605a      	str	r2, [r3, #4]
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	200072ec 	.word	0x200072ec
 8008bfc:	200072d8 	.word	0x200072d8

08008c00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b088      	sub	sp, #32
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10b      	bne.n	8008c28 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	613b      	str	r3, [r7, #16]
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	e7fd      	b.n	8008c24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10b      	bne.n	8008c46 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	60fb      	str	r3, [r7, #12]
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	e7fd      	b.n	8008c42 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008c46:	f000 fe8f 	bl	8009968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cc0 <xTaskCheckForTimeOut+0xc0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c62:	d102      	bne.n	8008c6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	61fb      	str	r3, [r7, #28]
 8008c68:	e023      	b.n	8008cb2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b15      	ldr	r3, [pc, #84]	@ (8008cc4 <xTaskCheckForTimeOut+0xc4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d007      	beq.n	8008c86 <xTaskCheckForTimeOut+0x86>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d302      	bcc.n	8008c86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c80:	2301      	movs	r3, #1
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e015      	b.n	8008cb2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d20b      	bcs.n	8008ca8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	1ad2      	subs	r2, r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff99 	bl	8008bd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
 8008ca6:	e004      	b.n	8008cb2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cb2:	f000 fe8b 	bl	80099cc <vPortExitCritical>

	return xReturn;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3720      	adds	r7, #32
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	200072d8 	.word	0x200072d8
 8008cc4:	200072ec 	.word	0x200072ec

08008cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ccc:	4b03      	ldr	r3, [pc, #12]	@ (8008cdc <vTaskMissedYield+0x14>)
 8008cce:	2201      	movs	r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	200072e8 	.word	0x200072e8

08008ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ce8:	f000 f852 	bl	8008d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <prvIdleTask+0x28>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d9f9      	bls.n	8008ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <prvIdleTask+0x2c>)
 8008cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d04:	e7f0      	b.n	8008ce8 <prvIdleTask+0x8>
 8008d06:	bf00      	nop
 8008d08:	20006e04 	.word	0x20006e04
 8008d0c:	e000ed04 	.word	0xe000ed04

08008d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
 8008d1a:	e00c      	b.n	8008d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4a12      	ldr	r2, [pc, #72]	@ (8008d70 <prvInitialiseTaskLists+0x60>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fcae 	bl	800768c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3301      	adds	r3, #1
 8008d34:	607b      	str	r3, [r7, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b37      	cmp	r3, #55	@ 0x37
 8008d3a:	d9ef      	bls.n	8008d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d3c:	480d      	ldr	r0, [pc, #52]	@ (8008d74 <prvInitialiseTaskLists+0x64>)
 8008d3e:	f7fe fca5 	bl	800768c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d42:	480d      	ldr	r0, [pc, #52]	@ (8008d78 <prvInitialiseTaskLists+0x68>)
 8008d44:	f7fe fca2 	bl	800768c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d48:	480c      	ldr	r0, [pc, #48]	@ (8008d7c <prvInitialiseTaskLists+0x6c>)
 8008d4a:	f7fe fc9f 	bl	800768c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d4e:	480c      	ldr	r0, [pc, #48]	@ (8008d80 <prvInitialiseTaskLists+0x70>)
 8008d50:	f7fe fc9c 	bl	800768c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d54:	480b      	ldr	r0, [pc, #44]	@ (8008d84 <prvInitialiseTaskLists+0x74>)
 8008d56:	f7fe fc99 	bl	800768c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d88 <prvInitialiseTaskLists+0x78>)
 8008d5c:	4a05      	ldr	r2, [pc, #20]	@ (8008d74 <prvInitialiseTaskLists+0x64>)
 8008d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d60:	4b0a      	ldr	r3, [pc, #40]	@ (8008d8c <prvInitialiseTaskLists+0x7c>)
 8008d62:	4a05      	ldr	r2, [pc, #20]	@ (8008d78 <prvInitialiseTaskLists+0x68>)
 8008d64:	601a      	str	r2, [r3, #0]
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20006e04 	.word	0x20006e04
 8008d74:	20007264 	.word	0x20007264
 8008d78:	20007278 	.word	0x20007278
 8008d7c:	20007294 	.word	0x20007294
 8008d80:	200072a8 	.word	0x200072a8
 8008d84:	200072c0 	.word	0x200072c0
 8008d88:	2000728c 	.word	0x2000728c
 8008d8c:	20007290 	.word	0x20007290

08008d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d96:	e019      	b.n	8008dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d98:	f000 fde6 	bl	8009968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9c:	4b10      	ldr	r3, [pc, #64]	@ (8008de0 <prvCheckTasksWaitingTermination+0x50>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3304      	adds	r3, #4
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fcf9 	bl	80077a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dae:	4b0d      	ldr	r3, [pc, #52]	@ (8008de4 <prvCheckTasksWaitingTermination+0x54>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	4a0b      	ldr	r2, [pc, #44]	@ (8008de4 <prvCheckTasksWaitingTermination+0x54>)
 8008db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008db8:	4b0b      	ldr	r3, [pc, #44]	@ (8008de8 <prvCheckTasksWaitingTermination+0x58>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8008de8 <prvCheckTasksWaitingTermination+0x58>)
 8008dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dc2:	f000 fe03 	bl	80099cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f810 	bl	8008dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dcc:	4b06      	ldr	r3, [pc, #24]	@ (8008de8 <prvCheckTasksWaitingTermination+0x58>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e1      	bne.n	8008d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	200072a8 	.word	0x200072a8
 8008de4:	200072d4 	.word	0x200072d4
 8008de8:	200072bc 	.word	0x200072bc

08008dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d108      	bne.n	8008e10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 ffa0 	bl	8009d48 <vPortFree>
				vPortFree( pxTCB );
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 ff9d 	bl	8009d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e0e:	e019      	b.n	8008e44 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d103      	bne.n	8008e22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 ff94 	bl	8009d48 <vPortFree>
	}
 8008e20:	e010      	b.n	8008e44 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d00b      	beq.n	8008e44 <prvDeleteTCB+0x58>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	60fb      	str	r3, [r7, #12]
}
 8008e3e:	bf00      	nop
 8008e40:	bf00      	nop
 8008e42:	e7fd      	b.n	8008e40 <prvDeleteTCB+0x54>
	}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e52:	4b0c      	ldr	r3, [pc, #48]	@ (8008e84 <prvResetNextTaskUnblockTime+0x38>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d104      	bne.n	8008e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e88 <prvResetNextTaskUnblockTime+0x3c>)
 8008e5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e64:	e008      	b.n	8008e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e66:	4b07      	ldr	r3, [pc, #28]	@ (8008e84 <prvResetNextTaskUnblockTime+0x38>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	4a04      	ldr	r2, [pc, #16]	@ (8008e88 <prvResetNextTaskUnblockTime+0x3c>)
 8008e76:	6013      	str	r3, [r2, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	2000728c 	.word	0x2000728c
 8008e88:	200072f4 	.word	0x200072f4

08008e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e92:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec0 <xTaskGetSchedulerState+0x34>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	607b      	str	r3, [r7, #4]
 8008e9e:	e008      	b.n	8008eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea0:	4b08      	ldr	r3, [pc, #32]	@ (8008ec4 <xTaskGetSchedulerState+0x38>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d102      	bne.n	8008eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	607b      	str	r3, [r7, #4]
 8008eac:	e001      	b.n	8008eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008eb2:	687b      	ldr	r3, [r7, #4]
	}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	200072e0 	.word	0x200072e0
 8008ec4:	200072fc 	.word	0x200072fc

08008ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d058      	beq.n	8008f90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ede:	4b2f      	ldr	r3, [pc, #188]	@ (8008f9c <xTaskPriorityDisinherit+0xd4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d00b      	beq.n	8008f00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	60fb      	str	r3, [r7, #12]
}
 8008efa:	bf00      	nop
 8008efc:	bf00      	nop
 8008efe:	e7fd      	b.n	8008efc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10b      	bne.n	8008f20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	60bb      	str	r3, [r7, #8]
}
 8008f1a:	bf00      	nop
 8008f1c:	bf00      	nop
 8008f1e:	e7fd      	b.n	8008f1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f24:	1e5a      	subs	r2, r3, #1
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d02c      	beq.n	8008f90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d128      	bne.n	8008f90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fc2c 	bl	80077a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f60:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa0 <xTaskPriorityDisinherit+0xd8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d903      	bls.n	8008f70 <xTaskPriorityDisinherit+0xa8>
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa0 <xTaskPriorityDisinherit+0xd8>)
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4a09      	ldr	r2, [pc, #36]	@ (8008fa4 <xTaskPriorityDisinherit+0xdc>)
 8008f7e:	441a      	add	r2, r3
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f7fe fbad 	bl	80076e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f90:	697b      	ldr	r3, [r7, #20]
	}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20006e00 	.word	0x20006e00
 8008fa0:	200072dc 	.word	0x200072dc
 8008fa4:	20006e04 	.word	0x20006e04

08008fa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fb2:	4b21      	ldr	r3, [pc, #132]	@ (8009038 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fb8:	4b20      	ldr	r3, [pc, #128]	@ (800903c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fbee 	bl	80077a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fca:	d10a      	bne.n	8008fe2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d007      	beq.n	8008fe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800903c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4819      	ldr	r0, [pc, #100]	@ (8009040 <prvAddCurrentTaskToDelayedList+0x98>)
 8008fdc:	f7fe fb83 	bl	80076e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fe0:	e026      	b.n	8009030 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fea:	4b14      	ldr	r3, [pc, #80]	@ (800903c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d209      	bcs.n	800900e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ffa:	4b12      	ldr	r3, [pc, #72]	@ (8009044 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800903c <prvAddCurrentTaskToDelayedList+0x94>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7fe fb91 	bl	800772e <vListInsert>
}
 800900c:	e010      	b.n	8009030 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800900e:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <prvAddCurrentTaskToDelayedList+0x94>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3304      	adds	r3, #4
 8009018:	4619      	mov	r1, r3
 800901a:	4610      	mov	r0, r2
 800901c:	f7fe fb87 	bl	800772e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009020:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	429a      	cmp	r2, r3
 8009028:	d202      	bcs.n	8009030 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800902a:	4a08      	ldr	r2, [pc, #32]	@ (800904c <prvAddCurrentTaskToDelayedList+0xa4>)
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	6013      	str	r3, [r2, #0]
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	200072d8 	.word	0x200072d8
 800903c:	20006e00 	.word	0x20006e00
 8009040:	200072c0 	.word	0x200072c0
 8009044:	20007290 	.word	0x20007290
 8009048:	2000728c 	.word	0x2000728c
 800904c:	200072f4 	.word	0x200072f4

08009050 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	@ 0x28
 8009054:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800905a:	f000 fb13 	bl	8009684 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800905e:	4b1d      	ldr	r3, [pc, #116]	@ (80090d4 <xTimerCreateTimerTask+0x84>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d021      	beq.n	80090aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800906e:	1d3a      	adds	r2, r7, #4
 8009070:	f107 0108 	add.w	r1, r7, #8
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe faed 	bl	8007658 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	9202      	str	r2, [sp, #8]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2302      	movs	r3, #2
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2300      	movs	r3, #0
 800908e:	460a      	mov	r2, r1
 8009090:	4911      	ldr	r1, [pc, #68]	@ (80090d8 <xTimerCreateTimerTask+0x88>)
 8009092:	4812      	ldr	r0, [pc, #72]	@ (80090dc <xTimerCreateTimerTask+0x8c>)
 8009094:	f7ff f8a8 	bl	80081e8 <xTaskCreateStatic>
 8009098:	4603      	mov	r3, r0
 800909a:	4a11      	ldr	r2, [pc, #68]	@ (80090e0 <xTimerCreateTimerTask+0x90>)
 800909c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800909e:	4b10      	ldr	r3, [pc, #64]	@ (80090e0 <xTimerCreateTimerTask+0x90>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090a6:	2301      	movs	r3, #1
 80090a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	613b      	str	r3, [r7, #16]
}
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090c8:	697b      	ldr	r3, [r7, #20]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20007330 	.word	0x20007330
 80090d8:	08017cfc 	.word	0x08017cfc
 80090dc:	0800921d 	.word	0x0800921d
 80090e0:	20007334 	.word	0x20007334

080090e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08a      	sub	sp, #40	@ 0x28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10b      	bne.n	8009114 <xTimerGenericCommand+0x30>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	623b      	str	r3, [r7, #32]
}
 800910e:	bf00      	nop
 8009110:	bf00      	nop
 8009112:	e7fd      	b.n	8009110 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009114:	4b19      	ldr	r3, [pc, #100]	@ (800917c <xTimerGenericCommand+0x98>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d02a      	beq.n	8009172 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b05      	cmp	r3, #5
 800912c:	dc18      	bgt.n	8009160 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800912e:	f7ff fead 	bl	8008e8c <xTaskGetSchedulerState>
 8009132:	4603      	mov	r3, r0
 8009134:	2b02      	cmp	r3, #2
 8009136:	d109      	bne.n	800914c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009138:	4b10      	ldr	r3, [pc, #64]	@ (800917c <xTimerGenericCommand+0x98>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	f107 0110 	add.w	r1, r7, #16
 8009140:	2300      	movs	r3, #0
 8009142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009144:	f7fe fc60 	bl	8007a08 <xQueueGenericSend>
 8009148:	6278      	str	r0, [r7, #36]	@ 0x24
 800914a:	e012      	b.n	8009172 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800914c:	4b0b      	ldr	r3, [pc, #44]	@ (800917c <xTimerGenericCommand+0x98>)
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	f107 0110 	add.w	r1, r7, #16
 8009154:	2300      	movs	r3, #0
 8009156:	2200      	movs	r2, #0
 8009158:	f7fe fc56 	bl	8007a08 <xQueueGenericSend>
 800915c:	6278      	str	r0, [r7, #36]	@ 0x24
 800915e:	e008      	b.n	8009172 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009160:	4b06      	ldr	r3, [pc, #24]	@ (800917c <xTimerGenericCommand+0x98>)
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	f107 0110 	add.w	r1, r7, #16
 8009168:	2300      	movs	r3, #0
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	f7fe fd4e 	bl	8007c0c <xQueueGenericSendFromISR>
 8009170:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009174:	4618      	mov	r0, r3
 8009176:	3728      	adds	r7, #40	@ 0x28
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20007330 	.word	0x20007330

08009180 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af02      	add	r7, sp, #8
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800918a:	4b23      	ldr	r3, [pc, #140]	@ (8009218 <prvProcessExpiredTimer+0x98>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	3304      	adds	r3, #4
 8009198:	4618      	mov	r0, r3
 800919a:	f7fe fb01 	bl	80077a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091a4:	f003 0304 	and.w	r3, r3, #4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d023      	beq.n	80091f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	18d1      	adds	r1, r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	6978      	ldr	r0, [r7, #20]
 80091ba:	f000 f8d5 	bl	8009368 <prvInsertTimerInActiveList>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d020      	beq.n	8009206 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091c4:	2300      	movs	r3, #0
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	2300      	movs	r3, #0
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	2100      	movs	r1, #0
 80091ce:	6978      	ldr	r0, [r7, #20]
 80091d0:	f7ff ff88 	bl	80090e4 <xTimerGenericCommand>
 80091d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d114      	bne.n	8009206 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	60fb      	str	r3, [r7, #12]
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	e7fd      	b.n	80091f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091fa:	f023 0301 	bic.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	6978      	ldr	r0, [r7, #20]
 800920c:	4798      	blx	r3
}
 800920e:	bf00      	nop
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20007328 	.word	0x20007328

0800921c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f859 	bl	80092e0 <prvGetNextExpireTime>
 800922e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4619      	mov	r1, r3
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f805 	bl	8009244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800923a:	f000 f8d7 	bl	80093ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800923e:	bf00      	nop
 8009240:	e7f0      	b.n	8009224 <prvTimerTask+0x8>
	...

08009244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800924e:	f7ff fa0f 	bl	8008670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009252:	f107 0308 	add.w	r3, r7, #8
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f866 	bl	8009328 <prvSampleTimeNow>
 800925c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d130      	bne.n	80092c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <prvProcessTimerOrBlockTask+0x3c>
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	429a      	cmp	r2, r3
 8009270:	d806      	bhi.n	8009280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009272:	f7ff fa0b 	bl	800868c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ff81 	bl	8009180 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800927e:	e024      	b.n	80092ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009286:	4b13      	ldr	r3, [pc, #76]	@ (80092d4 <prvProcessTimerOrBlockTask+0x90>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <prvProcessTimerOrBlockTask+0x50>
 8009290:	2301      	movs	r3, #1
 8009292:	e000      	b.n	8009296 <prvProcessTimerOrBlockTask+0x52>
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009298:	4b0f      	ldr	r3, [pc, #60]	@ (80092d8 <prvProcessTimerOrBlockTask+0x94>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7fe ff6b 	bl	8008180 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092aa:	f7ff f9ef 	bl	800868c <xTaskResumeAll>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092b4:	4b09      	ldr	r3, [pc, #36]	@ (80092dc <prvProcessTimerOrBlockTask+0x98>)
 80092b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	f3bf 8f6f 	isb	sy
}
 80092c4:	e001      	b.n	80092ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092c6:	f7ff f9e1 	bl	800868c <xTaskResumeAll>
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	2000732c 	.word	0x2000732c
 80092d8:	20007330 	.word	0x20007330
 80092dc:	e000ed04 	.word	0xe000ed04

080092e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009324 <prvGetNextExpireTime+0x44>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <prvGetNextExpireTime+0x16>
 80092f2:	2201      	movs	r2, #1
 80092f4:	e000      	b.n	80092f8 <prvGetNextExpireTime+0x18>
 80092f6:	2200      	movs	r2, #0
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d105      	bne.n	8009310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009304:	4b07      	ldr	r3, [pc, #28]	@ (8009324 <prvGetNextExpireTime+0x44>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	e001      	b.n	8009314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009314:	68fb      	ldr	r3, [r7, #12]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20007328 	.word	0x20007328

08009328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009330:	f7ff fa4a 	bl	80087c8 <xTaskGetTickCount>
 8009334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009336:	4b0b      	ldr	r3, [pc, #44]	@ (8009364 <prvSampleTimeNow+0x3c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	429a      	cmp	r2, r3
 800933e:	d205      	bcs.n	800934c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009340:	f000 f93a 	bl	80095b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	e002      	b.n	8009352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009352:	4a04      	ldr	r2, [pc, #16]	@ (8009364 <prvSampleTimeNow+0x3c>)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009358:	68fb      	ldr	r3, [r7, #12]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20007338 	.word	0x20007338

08009368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009376:	2300      	movs	r3, #0
 8009378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	d812      	bhi.n	80093b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	1ad2      	subs	r2, r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	429a      	cmp	r2, r3
 800939a:	d302      	bcc.n	80093a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800939c:	2301      	movs	r3, #1
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e01b      	b.n	80093da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093a2:	4b10      	ldr	r3, [pc, #64]	@ (80093e4 <prvInsertTimerInActiveList+0x7c>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3304      	adds	r3, #4
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f7fe f9be 	bl	800772e <vListInsert>
 80093b2:	e012      	b.n	80093da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d206      	bcs.n	80093ca <prvInsertTimerInActiveList+0x62>
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d302      	bcc.n	80093ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093c4:	2301      	movs	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	e007      	b.n	80093da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093ca:	4b07      	ldr	r3, [pc, #28]	@ (80093e8 <prvInsertTimerInActiveList+0x80>)
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3304      	adds	r3, #4
 80093d2:	4619      	mov	r1, r3
 80093d4:	4610      	mov	r0, r2
 80093d6:	f7fe f9aa 	bl	800772e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093da:	697b      	ldr	r3, [r7, #20]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	2000732c 	.word	0x2000732c
 80093e8:	20007328 	.word	0x20007328

080093ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08e      	sub	sp, #56	@ 0x38
 80093f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093f2:	e0ce      	b.n	8009592 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	da19      	bge.n	800942e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093fa:	1d3b      	adds	r3, r7, #4
 80093fc:	3304      	adds	r3, #4
 80093fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10b      	bne.n	800941e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	61fb      	str	r3, [r7, #28]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800941e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009424:	6850      	ldr	r0, [r2, #4]
 8009426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009428:	6892      	ldr	r2, [r2, #8]
 800942a:	4611      	mov	r1, r2
 800942c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f2c0 80ae 	blt.w	8009592 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009444:	3304      	adds	r3, #4
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe f9aa 	bl	80077a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800944c:	463b      	mov	r3, r7
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff ff6a 	bl	8009328 <prvSampleTimeNow>
 8009454:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b09      	cmp	r3, #9
 800945a:	f200 8097 	bhi.w	800958c <prvProcessReceivedCommands+0x1a0>
 800945e:	a201      	add	r2, pc, #4	@ (adr r2, 8009464 <prvProcessReceivedCommands+0x78>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	0800948d 	.word	0x0800948d
 8009468:	0800948d 	.word	0x0800948d
 800946c:	0800948d 	.word	0x0800948d
 8009470:	08009503 	.word	0x08009503
 8009474:	08009517 	.word	0x08009517
 8009478:	08009563 	.word	0x08009563
 800947c:	0800948d 	.word	0x0800948d
 8009480:	0800948d 	.word	0x0800948d
 8009484:	08009503 	.word	0x08009503
 8009488:	08009517 	.word	0x08009517
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009492:	f043 0301 	orr.w	r3, r3, #1
 8009496:	b2da      	uxtb	r2, r3
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	18d1      	adds	r1, r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094ac:	f7ff ff5c 	bl	8009368 <prvInsertTimerInActiveList>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d06c      	beq.n	8009590 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d061      	beq.n	8009590 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	441a      	add	r2, r3
 80094d4:	2300      	movs	r3, #0
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	2300      	movs	r3, #0
 80094da:	2100      	movs	r1, #0
 80094dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094de:	f7ff fe01 	bl	80090e4 <xTimerGenericCommand>
 80094e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d152      	bne.n	8009590 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	61bb      	str	r3, [r7, #24]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	b2da      	uxtb	r2, r3
 800950e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009510:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009514:	e03d      	b.n	8009592 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800951c:	f043 0301 	orr.w	r3, r3, #1
 8009520:	b2da      	uxtb	r2, r3
 8009522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009524:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800952e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10b      	bne.n	800954e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	617b      	str	r3, [r7, #20]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	18d1      	adds	r1, r2, r3
 8009556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800955a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800955c:	f7ff ff04 	bl	8009368 <prvInsertTimerInActiveList>
					break;
 8009560:	e017      	b.n	8009592 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d103      	bne.n	8009578 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009572:	f000 fbe9 	bl	8009d48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009576:	e00c      	b.n	8009592 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800957e:	f023 0301 	bic.w	r3, r3, #1
 8009582:	b2da      	uxtb	r2, r3
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800958a:	e002      	b.n	8009592 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800958c:	bf00      	nop
 800958e:	e000      	b.n	8009592 <prvProcessReceivedCommands+0x1a6>
					break;
 8009590:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009592:	4b08      	ldr	r3, [pc, #32]	@ (80095b4 <prvProcessReceivedCommands+0x1c8>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	1d39      	adds	r1, r7, #4
 8009598:	2200      	movs	r2, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fbd4 	bl	8007d48 <xQueueReceive>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f47f af26 	bne.w	80093f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	3730      	adds	r7, #48	@ 0x30
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20007330 	.word	0x20007330

080095b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095be:	e049      	b.n	8009654 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c0:	4b2e      	ldr	r3, [pc, #184]	@ (800967c <prvSwitchTimerLists+0xc4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ca:	4b2c      	ldr	r3, [pc, #176]	@ (800967c <prvSwitchTimerLists+0xc4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe f8e1 	bl	80077a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d02f      	beq.n	8009654 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	429a      	cmp	r2, r3
 8009604:	d90e      	bls.n	8009624 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009612:	4b1a      	ldr	r3, [pc, #104]	@ (800967c <prvSwitchTimerLists+0xc4>)
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3304      	adds	r3, #4
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f7fe f886 	bl	800772e <vListInsert>
 8009622:	e017      	b.n	8009654 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009624:	2300      	movs	r3, #0
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	2100      	movs	r1, #0
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fd58 	bl	80090e4 <xTimerGenericCommand>
 8009634:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10b      	bne.n	8009654 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	603b      	str	r3, [r7, #0]
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009654:	4b09      	ldr	r3, [pc, #36]	@ (800967c <prvSwitchTimerLists+0xc4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1b0      	bne.n	80095c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800965e:	4b07      	ldr	r3, [pc, #28]	@ (800967c <prvSwitchTimerLists+0xc4>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009664:	4b06      	ldr	r3, [pc, #24]	@ (8009680 <prvSwitchTimerLists+0xc8>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a04      	ldr	r2, [pc, #16]	@ (800967c <prvSwitchTimerLists+0xc4>)
 800966a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800966c:	4a04      	ldr	r2, [pc, #16]	@ (8009680 <prvSwitchTimerLists+0xc8>)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	6013      	str	r3, [r2, #0]
}
 8009672:	bf00      	nop
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20007328 	.word	0x20007328
 8009680:	2000732c 	.word	0x2000732c

08009684 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800968a:	f000 f96d 	bl	8009968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800968e:	4b15      	ldr	r3, [pc, #84]	@ (80096e4 <prvCheckForValidListAndQueue+0x60>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d120      	bne.n	80096d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009696:	4814      	ldr	r0, [pc, #80]	@ (80096e8 <prvCheckForValidListAndQueue+0x64>)
 8009698:	f7fd fff8 	bl	800768c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800969c:	4813      	ldr	r0, [pc, #76]	@ (80096ec <prvCheckForValidListAndQueue+0x68>)
 800969e:	f7fd fff5 	bl	800768c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096a2:	4b13      	ldr	r3, [pc, #76]	@ (80096f0 <prvCheckForValidListAndQueue+0x6c>)
 80096a4:	4a10      	ldr	r2, [pc, #64]	@ (80096e8 <prvCheckForValidListAndQueue+0x64>)
 80096a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096a8:	4b12      	ldr	r3, [pc, #72]	@ (80096f4 <prvCheckForValidListAndQueue+0x70>)
 80096aa:	4a10      	ldr	r2, [pc, #64]	@ (80096ec <prvCheckForValidListAndQueue+0x68>)
 80096ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096ae:	2300      	movs	r3, #0
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	4b11      	ldr	r3, [pc, #68]	@ (80096f8 <prvCheckForValidListAndQueue+0x74>)
 80096b4:	4a11      	ldr	r2, [pc, #68]	@ (80096fc <prvCheckForValidListAndQueue+0x78>)
 80096b6:	2110      	movs	r1, #16
 80096b8:	200a      	movs	r0, #10
 80096ba:	f7fe f905 	bl	80078c8 <xQueueGenericCreateStatic>
 80096be:	4603      	mov	r3, r0
 80096c0:	4a08      	ldr	r2, [pc, #32]	@ (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096c4:	4b07      	ldr	r3, [pc, #28]	@ (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096cc:	4b05      	ldr	r3, [pc, #20]	@ (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	490b      	ldr	r1, [pc, #44]	@ (8009700 <prvCheckForValidListAndQueue+0x7c>)
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fd2a 	bl	800812c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d8:	f000 f978 	bl	80099cc <vPortExitCritical>
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20007330 	.word	0x20007330
 80096e8:	20007300 	.word	0x20007300
 80096ec:	20007314 	.word	0x20007314
 80096f0:	20007328 	.word	0x20007328
 80096f4:	2000732c 	.word	0x2000732c
 80096f8:	200073dc 	.word	0x200073dc
 80096fc:	2000733c 	.word	0x2000733c
 8009700:	08017d04 	.word	0x08017d04

08009704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3b04      	subs	r3, #4
 8009714:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800971c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3b04      	subs	r3, #4
 8009722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3b04      	subs	r3, #4
 8009732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009734:	4a0c      	ldr	r2, [pc, #48]	@ (8009768 <pxPortInitialiseStack+0x64>)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3b14      	subs	r3, #20
 800973e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3b04      	subs	r3, #4
 800974a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f06f 0202 	mvn.w	r2, #2
 8009752:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3b20      	subs	r3, #32
 8009758:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800975a:	68fb      	ldr	r3, [r7, #12]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	0800976d 	.word	0x0800976d

0800976c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009776:	4b13      	ldr	r3, [pc, #76]	@ (80097c4 <prvTaskExitError+0x58>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800977e:	d00b      	beq.n	8009798 <prvTaskExitError+0x2c>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	bf00      	nop
 8009796:	e7fd      	b.n	8009794 <prvTaskExitError+0x28>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	60bb      	str	r3, [r7, #8]
}
 80097aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097ac:	bf00      	nop
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0fc      	beq.n	80097ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	20000010 	.word	0x20000010
	...

080097d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097d0:	4b07      	ldr	r3, [pc, #28]	@ (80097f0 <pxCurrentTCBConst2>)
 80097d2:	6819      	ldr	r1, [r3, #0]
 80097d4:	6808      	ldr	r0, [r1, #0]
 80097d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	f380 8809 	msr	PSP, r0
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f380 8811 	msr	BASEPRI, r0
 80097ea:	4770      	bx	lr
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst2>:
 80097f0:	20006e00 	.word	0x20006e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097f8:	4808      	ldr	r0, [pc, #32]	@ (800981c <prvPortStartFirstTask+0x24>)
 80097fa:	6800      	ldr	r0, [r0, #0]
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	f380 8808 	msr	MSP, r0
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8814 	msr	CONTROL, r0
 800980a:	b662      	cpsie	i
 800980c:	b661      	cpsie	f
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	df00      	svc	0
 8009818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800981a:	bf00      	nop
 800981c:	e000ed08 	.word	0xe000ed08

08009820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009826:	4b47      	ldr	r3, [pc, #284]	@ (8009944 <xPortStartScheduler+0x124>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a47      	ldr	r2, [pc, #284]	@ (8009948 <xPortStartScheduler+0x128>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d10b      	bne.n	8009848 <xPortStartScheduler+0x28>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	613b      	str	r3, [r7, #16]
}
 8009842:	bf00      	nop
 8009844:	bf00      	nop
 8009846:	e7fd      	b.n	8009844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009848:	4b3e      	ldr	r3, [pc, #248]	@ (8009944 <xPortStartScheduler+0x124>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a3f      	ldr	r2, [pc, #252]	@ (800994c <xPortStartScheduler+0x12c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d10b      	bne.n	800986a <xPortStartScheduler+0x4a>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	60fb      	str	r3, [r7, #12]
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	e7fd      	b.n	8009866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800986a:	4b39      	ldr	r3, [pc, #228]	@ (8009950 <xPortStartScheduler+0x130>)
 800986c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	22ff      	movs	r2, #255	@ 0xff
 800987a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009884:	78fb      	ldrb	r3, [r7, #3]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800988c:	b2da      	uxtb	r2, r3
 800988e:	4b31      	ldr	r3, [pc, #196]	@ (8009954 <xPortStartScheduler+0x134>)
 8009890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009892:	4b31      	ldr	r3, [pc, #196]	@ (8009958 <xPortStartScheduler+0x138>)
 8009894:	2207      	movs	r2, #7
 8009896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009898:	e009      	b.n	80098ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800989a:	4b2f      	ldr	r3, [pc, #188]	@ (8009958 <xPortStartScheduler+0x138>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3b01      	subs	r3, #1
 80098a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009958 <xPortStartScheduler+0x138>)
 80098a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098b6:	2b80      	cmp	r3, #128	@ 0x80
 80098b8:	d0ef      	beq.n	800989a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098ba:	4b27      	ldr	r3, [pc, #156]	@ (8009958 <xPortStartScheduler+0x138>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1c3 0307 	rsb	r3, r3, #7
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d00b      	beq.n	80098de <xPortStartScheduler+0xbe>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	60bb      	str	r3, [r7, #8]
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	e7fd      	b.n	80098da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098de:	4b1e      	ldr	r3, [pc, #120]	@ (8009958 <xPortStartScheduler+0x138>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009958 <xPortStartScheduler+0x138>)
 80098e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009958 <xPortStartScheduler+0x138>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80098f0:	4a19      	ldr	r2, [pc, #100]	@ (8009958 <xPortStartScheduler+0x138>)
 80098f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098fc:	4b17      	ldr	r3, [pc, #92]	@ (800995c <xPortStartScheduler+0x13c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a16      	ldr	r2, [pc, #88]	@ (800995c <xPortStartScheduler+0x13c>)
 8009902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009908:	4b14      	ldr	r3, [pc, #80]	@ (800995c <xPortStartScheduler+0x13c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a13      	ldr	r2, [pc, #76]	@ (800995c <xPortStartScheduler+0x13c>)
 800990e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009914:	f000 f8da 	bl	8009acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009918:	4b11      	ldr	r3, [pc, #68]	@ (8009960 <xPortStartScheduler+0x140>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800991e:	f000 f8f9 	bl	8009b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009922:	4b10      	ldr	r3, [pc, #64]	@ (8009964 <xPortStartScheduler+0x144>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a0f      	ldr	r2, [pc, #60]	@ (8009964 <xPortStartScheduler+0x144>)
 8009928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800992c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800992e:	f7ff ff63 	bl	80097f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009932:	f7ff f813 	bl	800895c <vTaskSwitchContext>
	prvTaskExitError();
 8009936:	f7ff ff19 	bl	800976c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	e000ed00 	.word	0xe000ed00
 8009948:	410fc271 	.word	0x410fc271
 800994c:	410fc270 	.word	0x410fc270
 8009950:	e000e400 	.word	0xe000e400
 8009954:	2000742c 	.word	0x2000742c
 8009958:	20007430 	.word	0x20007430
 800995c:	e000ed20 	.word	0xe000ed20
 8009960:	20000010 	.word	0x20000010
 8009964:	e000ef34 	.word	0xe000ef34

08009968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	607b      	str	r3, [r7, #4]
}
 8009980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009982:	4b10      	ldr	r3, [pc, #64]	@ (80099c4 <vPortEnterCritical+0x5c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3301      	adds	r3, #1
 8009988:	4a0e      	ldr	r2, [pc, #56]	@ (80099c4 <vPortEnterCritical+0x5c>)
 800998a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800998c:	4b0d      	ldr	r3, [pc, #52]	@ (80099c4 <vPortEnterCritical+0x5c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d110      	bne.n	80099b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009994:	4b0c      	ldr	r3, [pc, #48]	@ (80099c8 <vPortEnterCritical+0x60>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00b      	beq.n	80099b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	603b      	str	r3, [r7, #0]
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	e7fd      	b.n	80099b2 <vPortEnterCritical+0x4a>
	}
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	20000010 	.word	0x20000010
 80099c8:	e000ed04 	.word	0xe000ed04

080099cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099d2:	4b12      	ldr	r3, [pc, #72]	@ (8009a1c <vPortExitCritical+0x50>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10b      	bne.n	80099f2 <vPortExitCritical+0x26>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	607b      	str	r3, [r7, #4]
}
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
 80099f0:	e7fd      	b.n	80099ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099f2:	4b0a      	ldr	r3, [pc, #40]	@ (8009a1c <vPortExitCritical+0x50>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	4a08      	ldr	r2, [pc, #32]	@ (8009a1c <vPortExitCritical+0x50>)
 80099fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099fc:	4b07      	ldr	r3, [pc, #28]	@ (8009a1c <vPortExitCritical+0x50>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d105      	bne.n	8009a10 <vPortExitCritical+0x44>
 8009a04:	2300      	movs	r3, #0
 8009a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	f383 8811 	msr	BASEPRI, r3
}
 8009a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	20000010 	.word	0x20000010

08009a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a20:	f3ef 8009 	mrs	r0, PSP
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	4b15      	ldr	r3, [pc, #84]	@ (8009a80 <pxCurrentTCBConst>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f01e 0f10 	tst.w	lr, #16
 8009a30:	bf08      	it	eq
 8009a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3a:	6010      	str	r0, [r2, #0]
 8009a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a44:	f380 8811 	msr	BASEPRI, r0
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f7fe ff84 	bl	800895c <vTaskSwitchContext>
 8009a54:	f04f 0000 	mov.w	r0, #0
 8009a58:	f380 8811 	msr	BASEPRI, r0
 8009a5c:	bc09      	pop	{r0, r3}
 8009a5e:	6819      	ldr	r1, [r3, #0]
 8009a60:	6808      	ldr	r0, [r1, #0]
 8009a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a66:	f01e 0f10 	tst.w	lr, #16
 8009a6a:	bf08      	it	eq
 8009a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a70:	f380 8809 	msr	PSP, r0
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	f3af 8000 	nop.w

08009a80 <pxCurrentTCBConst>:
 8009a80:	20006e00 	.word	0x20006e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop

08009a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	607b      	str	r3, [r7, #4]
}
 8009aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009aa2:	f7fe fea1 	bl	80087e8 <xTaskIncrementTick>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aac:	4b06      	ldr	r3, [pc, #24]	@ (8009ac8 <xPortSysTickHandler+0x40>)
 8009aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	f383 8811 	msr	BASEPRI, r3
}
 8009abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b00 <vPortSetupTimerInterrupt+0x34>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b04 <vPortSetupTimerInterrupt+0x38>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009adc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b08 <vPortSetupTimerInterrupt+0x3c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8009b0c <vPortSetupTimerInterrupt+0x40>)
 8009ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae6:	099b      	lsrs	r3, r3, #6
 8009ae8:	4a09      	ldr	r2, [pc, #36]	@ (8009b10 <vPortSetupTimerInterrupt+0x44>)
 8009aea:	3b01      	subs	r3, #1
 8009aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009aee:	4b04      	ldr	r3, [pc, #16]	@ (8009b00 <vPortSetupTimerInterrupt+0x34>)
 8009af0:	2207      	movs	r2, #7
 8009af2:	601a      	str	r2, [r3, #0]
}
 8009af4:	bf00      	nop
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	e000e010 	.word	0xe000e010
 8009b04:	e000e018 	.word	0xe000e018
 8009b08:	20000004 	.word	0x20000004
 8009b0c:	10624dd3 	.word	0x10624dd3
 8009b10:	e000e014 	.word	0xe000e014

08009b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b24 <vPortEnableVFP+0x10>
 8009b18:	6801      	ldr	r1, [r0, #0]
 8009b1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b1e:	6001      	str	r1, [r0, #0]
 8009b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b22:	bf00      	nop
 8009b24:	e000ed88 	.word	0xe000ed88

08009b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b2e:	f3ef 8305 	mrs	r3, IPSR
 8009b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b0f      	cmp	r3, #15
 8009b38:	d915      	bls.n	8009b66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b3a:	4a18      	ldr	r2, [pc, #96]	@ (8009b9c <vPortValidateInterruptPriority+0x74>)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b44:	4b16      	ldr	r3, [pc, #88]	@ (8009ba0 <vPortValidateInterruptPriority+0x78>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	7afa      	ldrb	r2, [r7, #11]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d20b      	bcs.n	8009b66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	607b      	str	r3, [r7, #4]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba4 <vPortValidateInterruptPriority+0x7c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba8 <vPortValidateInterruptPriority+0x80>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d90b      	bls.n	8009b8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	603b      	str	r3, [r7, #0]
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	e7fd      	b.n	8009b8a <vPortValidateInterruptPriority+0x62>
	}
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	e000e3f0 	.word	0xe000e3f0
 8009ba0:	2000742c 	.word	0x2000742c
 8009ba4:	e000ed0c 	.word	0xe000ed0c
 8009ba8:	20007430 	.word	0x20007430

08009bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08a      	sub	sp, #40	@ 0x28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bb8:	f7fe fd5a 	bl	8008670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8009d30 <pvPortMalloc+0x184>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bc4:	f000 f924 	bl	8009e10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8009d34 <pvPortMalloc+0x188>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f040 8095 	bne.w	8009d00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01e      	beq.n	8009c1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bdc:	2208      	movs	r2, #8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4413      	add	r3, r2
 8009be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f003 0307 	and.w	r3, r3, #7
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d015      	beq.n	8009c1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f023 0307 	bic.w	r3, r3, #7
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <pvPortMalloc+0x6e>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	617b      	str	r3, [r7, #20]
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	e7fd      	b.n	8009c16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d06f      	beq.n	8009d00 <pvPortMalloc+0x154>
 8009c20:	4b45      	ldr	r3, [pc, #276]	@ (8009d38 <pvPortMalloc+0x18c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d86a      	bhi.n	8009d00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c2a:	4b44      	ldr	r3, [pc, #272]	@ (8009d3c <pvPortMalloc+0x190>)
 8009c2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c2e:	4b43      	ldr	r3, [pc, #268]	@ (8009d3c <pvPortMalloc+0x190>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c34:	e004      	b.n	8009c40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d903      	bls.n	8009c52 <pvPortMalloc+0xa6>
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f1      	bne.n	8009c36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c52:	4b37      	ldr	r3, [pc, #220]	@ (8009d30 <pvPortMalloc+0x184>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d051      	beq.n	8009d00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2208      	movs	r2, #8
 8009c62:	4413      	add	r3, r2
 8009c64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	1ad2      	subs	r2, r2, r3
 8009c76:	2308      	movs	r3, #8
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d920      	bls.n	8009cc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4413      	add	r3, r2
 8009c84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <pvPortMalloc+0xfc>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	613b      	str	r3, [r7, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	e7fd      	b.n	8009ca4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	1ad2      	subs	r2, r2, r3
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cba:	69b8      	ldr	r0, [r7, #24]
 8009cbc:	f000 f90a 	bl	8009ed4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d38 <pvPortMalloc+0x18c>)
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	4a1b      	ldr	r2, [pc, #108]	@ (8009d38 <pvPortMalloc+0x18c>)
 8009ccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cce:	4b1a      	ldr	r3, [pc, #104]	@ (8009d38 <pvPortMalloc+0x18c>)
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d40 <pvPortMalloc+0x194>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d203      	bcs.n	8009ce2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cda:	4b17      	ldr	r3, [pc, #92]	@ (8009d38 <pvPortMalloc+0x18c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a18      	ldr	r2, [pc, #96]	@ (8009d40 <pvPortMalloc+0x194>)
 8009ce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	4b13      	ldr	r3, [pc, #76]	@ (8009d34 <pvPortMalloc+0x188>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cf6:	4b13      	ldr	r3, [pc, #76]	@ (8009d44 <pvPortMalloc+0x198>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	4a11      	ldr	r2, [pc, #68]	@ (8009d44 <pvPortMalloc+0x198>)
 8009cfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d00:	f7fe fcc4 	bl	800868c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <pvPortMalloc+0x17a>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60fb      	str	r3, [r7, #12]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <pvPortMalloc+0x176>
	return pvReturn;
 8009d26:	69fb      	ldr	r3, [r7, #28]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3728      	adds	r7, #40	@ 0x28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	2000803c 	.word	0x2000803c
 8009d34:	20008050 	.word	0x20008050
 8009d38:	20008040 	.word	0x20008040
 8009d3c:	20008034 	.word	0x20008034
 8009d40:	20008044 	.word	0x20008044
 8009d44:	20008048 	.word	0x20008048

08009d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d04f      	beq.n	8009dfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d5a:	2308      	movs	r3, #8
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4413      	add	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	4b25      	ldr	r3, [pc, #148]	@ (8009e04 <vPortFree+0xbc>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4013      	ands	r3, r2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10b      	bne.n	8009d8e <vPortFree+0x46>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60fb      	str	r3, [r7, #12]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <vPortFree+0x66>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	60bb      	str	r3, [r7, #8]
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	e7fd      	b.n	8009daa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	4b14      	ldr	r3, [pc, #80]	@ (8009e04 <vPortFree+0xbc>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4013      	ands	r3, r2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d01e      	beq.n	8009dfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d11a      	bne.n	8009dfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e04 <vPortFree+0xbc>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	401a      	ands	r2, r3
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dd4:	f7fe fc4c 	bl	8008670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8009e08 <vPortFree+0xc0>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4413      	add	r3, r2
 8009de2:	4a09      	ldr	r2, [pc, #36]	@ (8009e08 <vPortFree+0xc0>)
 8009de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009de6:	6938      	ldr	r0, [r7, #16]
 8009de8:	f000 f874 	bl	8009ed4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009dec:	4b07      	ldr	r3, [pc, #28]	@ (8009e0c <vPortFree+0xc4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	4a06      	ldr	r2, [pc, #24]	@ (8009e0c <vPortFree+0xc4>)
 8009df4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009df6:	f7fe fc49 	bl	800868c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dfa:	bf00      	nop
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20008050 	.word	0x20008050
 8009e08:	20008040 	.word	0x20008040
 8009e0c:	2000804c 	.word	0x2000804c

08009e10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009e1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e1c:	4b27      	ldr	r3, [pc, #156]	@ (8009ebc <prvHeapInit+0xac>)
 8009e1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00c      	beq.n	8009e44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3307      	adds	r3, #7
 8009e2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 0307 	bic.w	r3, r3, #7
 8009e36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8009ebc <prvHeapInit+0xac>)
 8009e40:	4413      	add	r3, r2
 8009e42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e48:	4a1d      	ldr	r2, [pc, #116]	@ (8009ec0 <prvHeapInit+0xb0>)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ec0 <prvHeapInit+0xb0>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	4413      	add	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e5c:	2208      	movs	r2, #8
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	1a9b      	subs	r3, r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0307 	bic.w	r3, r3, #7
 8009e6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4a15      	ldr	r2, [pc, #84]	@ (8009ec4 <prvHeapInit+0xb4>)
 8009e70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e72:	4b14      	ldr	r3, [pc, #80]	@ (8009ec4 <prvHeapInit+0xb4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2200      	movs	r2, #0
 8009e78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e7a:	4b12      	ldr	r3, [pc, #72]	@ (8009ec4 <prvHeapInit+0xb4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	1ad2      	subs	r2, r2, r3
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e90:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec4 <prvHeapInit+0xb4>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8009ec8 <prvHeapInit+0xb8>)
 8009e9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	4a09      	ldr	r2, [pc, #36]	@ (8009ecc <prvHeapInit+0xbc>)
 8009ea6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ea8:	4b09      	ldr	r3, [pc, #36]	@ (8009ed0 <prvHeapInit+0xc0>)
 8009eaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20007434 	.word	0x20007434
 8009ec0:	20008034 	.word	0x20008034
 8009ec4:	2000803c 	.word	0x2000803c
 8009ec8:	20008044 	.word	0x20008044
 8009ecc:	20008040 	.word	0x20008040
 8009ed0:	20008050 	.word	0x20008050

08009ed4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009edc:	4b28      	ldr	r3, [pc, #160]	@ (8009f80 <prvInsertBlockIntoFreeList+0xac>)
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e002      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x14>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d8f7      	bhi.n	8009ee2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4413      	add	r3, r2
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d108      	bne.n	8009f16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	441a      	add	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	441a      	add	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d118      	bne.n	8009f5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	4b15      	ldr	r3, [pc, #84]	@ (8009f84 <prvInsertBlockIntoFreeList+0xb0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d00d      	beq.n	8009f52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	441a      	add	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	e008      	b.n	8009f64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f52:	4b0c      	ldr	r3, [pc, #48]	@ (8009f84 <prvInsertBlockIntoFreeList+0xb0>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	e003      	b.n	8009f64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d002      	beq.n	8009f72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f72:	bf00      	nop
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20008034 	.word	0x20008034
 8009f84:	2000803c 	.word	0x2000803c

08009f88 <rcl_get_zero_initialized_init_options>:
 8009f88:	2000      	movs	r0, #0
 8009f8a:	4770      	bx	lr

08009f8c <rcl_init_options_init>:
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f90:	b097      	sub	sp, #92	@ 0x5c
 8009f92:	ae1d      	add	r6, sp, #116	@ 0x74
 8009f94:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d058      	beq.n	800a04e <rcl_init_options_init+0xc2>
 8009f9c:	6803      	ldr	r3, [r0, #0]
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b133      	cbz	r3, 8009fb0 <rcl_init_options_init+0x24>
 8009fa2:	2464      	movs	r4, #100	@ 0x64
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	b017      	add	sp, #92	@ 0x5c
 8009fa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009fac:	b004      	add	sp, #16
 8009fae:	4770      	bx	lr
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f001 f92f 	bl	800b214 <rcutils_allocator_is_valid>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d049      	beq.n	800a04e <rcl_init_options_init+0xc2>
 8009fba:	46b4      	mov	ip, r6
 8009fbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009fc0:	ac11      	add	r4, sp, #68	@ 0x44
 8009fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fc4:	f8dc 3000 	ldr.w	r3, [ip]
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8009fcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fce:	2050      	movs	r0, #80	@ 0x50
 8009fd0:	4798      	blx	r3
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	6028      	str	r0, [r5, #0]
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d03b      	beq.n	800a052 <rcl_init_options_init+0xc6>
 8009fda:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009fde:	4686      	mov	lr, r0
 8009fe0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009fe4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009fe8:	f8dc 3000 	ldr.w	r3, [ip]
 8009fec:	f8ce 3000 	str.w	r3, [lr]
 8009ff0:	a802      	add	r0, sp, #8
 8009ff2:	f001 f9a1 	bl	800b338 <rmw_get_zero_initialized_init_options>
 8009ff6:	f10d 0e08 	add.w	lr, sp, #8
 8009ffa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ffe:	f104 0c18 	add.w	ip, r4, #24
 800a002:	682f      	ldr	r7, [r5, #0]
 800a004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a008:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a00c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a010:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a014:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a018:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a01c:	ac20      	add	r4, sp, #128	@ 0x80
 800a01e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a022:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a026:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a02a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a02e:	f107 0018 	add.w	r0, r7, #24
 800a032:	f001 f9af 	bl	800b394 <rmw_init_options_init>
 800a036:	4604      	mov	r4, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	d0b3      	beq.n	8009fa4 <rcl_init_options_init+0x18>
 800a03c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a03e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a040:	6828      	ldr	r0, [r5, #0]
 800a042:	4798      	blx	r3
 800a044:	4620      	mov	r0, r4
 800a046:	f007 f831 	bl	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 800a04a:	4604      	mov	r4, r0
 800a04c:	e7aa      	b.n	8009fa4 <rcl_init_options_init+0x18>
 800a04e:	240b      	movs	r4, #11
 800a050:	e7a8      	b.n	8009fa4 <rcl_init_options_init+0x18>
 800a052:	240a      	movs	r4, #10
 800a054:	e7a6      	b.n	8009fa4 <rcl_init_options_init+0x18>
 800a056:	bf00      	nop

0800a058 <rcl_init_options_fini>:
 800a058:	b530      	push	{r4, r5, lr}
 800a05a:	b087      	sub	sp, #28
 800a05c:	b1f0      	cbz	r0, 800a09c <rcl_init_options_fini+0x44>
 800a05e:	6803      	ldr	r3, [r0, #0]
 800a060:	4604      	mov	r4, r0
 800a062:	b1db      	cbz	r3, 800a09c <rcl_init_options_fini+0x44>
 800a064:	469c      	mov	ip, r3
 800a066:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a06a:	f10d 0e04 	add.w	lr, sp, #4
 800a06e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a072:	f8dc 3000 	ldr.w	r3, [ip]
 800a076:	f8ce 3000 	str.w	r3, [lr]
 800a07a:	a801      	add	r0, sp, #4
 800a07c:	f001 f8ca 	bl	800b214 <rcutils_allocator_is_valid>
 800a080:	b160      	cbz	r0, 800a09c <rcl_init_options_fini+0x44>
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	3018      	adds	r0, #24
 800a086:	f001 fa35 	bl	800b4f4 <rmw_init_options_fini>
 800a08a:	4605      	mov	r5, r0
 800a08c:	b950      	cbnz	r0, 800a0a4 <rcl_init_options_fini+0x4c>
 800a08e:	6820      	ldr	r0, [r4, #0]
 800a090:	9b02      	ldr	r3, [sp, #8]
 800a092:	9905      	ldr	r1, [sp, #20]
 800a094:	4798      	blx	r3
 800a096:	4628      	mov	r0, r5
 800a098:	b007      	add	sp, #28
 800a09a:	bd30      	pop	{r4, r5, pc}
 800a09c:	250b      	movs	r5, #11
 800a09e:	4628      	mov	r0, r5
 800a0a0:	b007      	add	sp, #28
 800a0a2:	bd30      	pop	{r4, r5, pc}
 800a0a4:	f007 f802 	bl	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	e7f8      	b.n	800a09e <rcl_init_options_fini+0x46>

0800a0ac <rcl_init_options_copy>:
 800a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b0:	b094      	sub	sp, #80	@ 0x50
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d058      	beq.n	800a168 <rcl_init_options_copy+0xbc>
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	6800      	ldr	r0, [r0, #0]
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d054      	beq.n	800a168 <rcl_init_options_copy+0xbc>
 800a0be:	460e      	mov	r6, r1
 800a0c0:	f001 f8a8 	bl	800b214 <rcutils_allocator_is_valid>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d04f      	beq.n	800a168 <rcl_init_options_copy+0xbc>
 800a0c8:	2e00      	cmp	r6, #0
 800a0ca:	d04d      	beq.n	800a168 <rcl_init_options_copy+0xbc>
 800a0cc:	6833      	ldr	r3, [r6, #0]
 800a0ce:	b123      	cbz	r3, 800a0da <rcl_init_options_copy+0x2e>
 800a0d0:	2464      	movs	r4, #100	@ 0x64
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	b014      	add	sp, #80	@ 0x50
 800a0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0da:	6827      	ldr	r7, [r4, #0]
 800a0dc:	46bc      	mov	ip, r7
 800a0de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0e2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800a0e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a0ea:	f8d7 8000 	ldr.w	r8, [r7]
 800a0ee:	602b      	str	r3, [r5, #0]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	2050      	movs	r0, #80	@ 0x50
 800a0f4:	47c0      	blx	r8
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	6030      	str	r0, [r6, #0]
 800a0fa:	b3d0      	cbz	r0, 800a172 <rcl_init_options_copy+0xc6>
 800a0fc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800a100:	4686      	mov	lr, r0
 800a102:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a106:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a10a:	f8dc 3000 	ldr.w	r3, [ip]
 800a10e:	f8ce 3000 	str.w	r3, [lr]
 800a112:	4668      	mov	r0, sp
 800a114:	f001 f910 	bl	800b338 <rmw_get_zero_initialized_init_options>
 800a118:	46ee      	mov	lr, sp
 800a11a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a11e:	f105 0c18 	add.w	ip, r5, #24
 800a122:	6824      	ldr	r4, [r4, #0]
 800a124:	6835      	ldr	r5, [r6, #0]
 800a126:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a12a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a12e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a13a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a13e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a142:	f104 0018 	add.w	r0, r4, #24
 800a146:	f105 0118 	add.w	r1, r5, #24
 800a14a:	f001 f98b 	bl	800b464 <rmw_init_options_copy>
 800a14e:	4604      	mov	r4, r0
 800a150:	2800      	cmp	r0, #0
 800a152:	d0be      	beq.n	800a0d2 <rcl_init_options_copy+0x26>
 800a154:	f001 f86c 	bl	800b230 <rcutils_get_error_string>
 800a158:	f001 f882 	bl	800b260 <rcutils_reset_error>
 800a15c:	4630      	mov	r0, r6
 800a15e:	f7ff ff7b 	bl	800a058 <rcl_init_options_fini>
 800a162:	b140      	cbz	r0, 800a176 <rcl_init_options_copy+0xca>
 800a164:	4604      	mov	r4, r0
 800a166:	e7b4      	b.n	800a0d2 <rcl_init_options_copy+0x26>
 800a168:	240b      	movs	r4, #11
 800a16a:	4620      	mov	r0, r4
 800a16c:	b014      	add	sp, #80	@ 0x50
 800a16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a172:	240a      	movs	r4, #10
 800a174:	e7ad      	b.n	800a0d2 <rcl_init_options_copy+0x26>
 800a176:	4620      	mov	r0, r4
 800a178:	b014      	add	sp, #80	@ 0x50
 800a17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	f006 bf95 	b.w	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 800a182:	bf00      	nop

0800a184 <rcl_init_options_set_domain_id>:
 800a184:	b120      	cbz	r0, 800a190 <rcl_init_options_set_domain_id+0xc>
 800a186:	6803      	ldr	r3, [r0, #0]
 800a188:	b113      	cbz	r3, 800a190 <rcl_init_options_set_domain_id+0xc>
 800a18a:	6259      	str	r1, [r3, #36]	@ 0x24
 800a18c:	2000      	movs	r0, #0
 800a18e:	4770      	bx	lr
 800a190:	200b      	movs	r0, #11
 800a192:	4770      	bx	lr

0800a194 <rcl_get_zero_initialized_publisher>:
 800a194:	4b01      	ldr	r3, [pc, #4]	@ (800a19c <rcl_get_zero_initialized_publisher+0x8>)
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	08017d8c 	.word	0x08017d8c

0800a1a0 <rcl_publisher_init>:
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	b088      	sub	sp, #32
 800a1a6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d069      	beq.n	800a280 <rcl_publisher_init+0xe0>
 800a1ac:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4648      	mov	r0, r9
 800a1b4:	460e      	mov	r6, r1
 800a1b6:	4690      	mov	r8, r2
 800a1b8:	461f      	mov	r7, r3
 800a1ba:	f001 f82b 	bl	800b214 <rcutils_allocator_is_valid>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d05e      	beq.n	800a280 <rcl_publisher_init+0xe0>
 800a1c2:	2c00      	cmp	r4, #0
 800a1c4:	d05c      	beq.n	800a280 <rcl_publisher_init+0xe0>
 800a1c6:	f8d4 a000 	ldr.w	sl, [r4]
 800a1ca:	f1ba 0f00 	cmp.w	sl, #0
 800a1ce:	d004      	beq.n	800a1da <rcl_publisher_init+0x3a>
 800a1d0:	2764      	movs	r7, #100	@ 0x64
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	b008      	add	sp, #32
 800a1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f007 fa60 	bl	80116a0 <rcl_node_is_valid>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d052      	beq.n	800a28a <rcl_publisher_init+0xea>
 800a1e4:	f1b8 0f00 	cmp.w	r8, #0
 800a1e8:	d04a      	beq.n	800a280 <rcl_publisher_init+0xe0>
 800a1ea:	2f00      	cmp	r7, #0
 800a1ec:	d048      	beq.n	800a280 <rcl_publisher_init+0xe0>
 800a1ee:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a1f2:	aa07      	add	r2, sp, #28
 800a1f4:	9205      	str	r2, [sp, #20]
 800a1f6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a1fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a202:	f8cd a01c 	str.w	sl, [sp, #28]
 800a206:	4639      	mov	r1, r7
 800a208:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a20c:	4630      	mov	r0, r6
 800a20e:	f007 fa9b 	bl	8011748 <rcl_node_resolve_name>
 800a212:	4607      	mov	r7, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	d14f      	bne.n	800a2b8 <rcl_publisher_init+0x118>
 800a218:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a21a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a21c:	20c8      	movs	r0, #200	@ 0xc8
 800a21e:	4798      	blx	r3
 800a220:	6020      	str	r0, [r4, #0]
 800a222:	2800      	cmp	r0, #0
 800a224:	d04e      	beq.n	800a2c4 <rcl_publisher_init+0x124>
 800a226:	4630      	mov	r0, r6
 800a228:	f007 fa5c 	bl	80116e4 <rcl_node_get_rmw_handle>
 800a22c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	9a07      	ldr	r2, [sp, #28]
 800a234:	6827      	ldr	r7, [r4, #0]
 800a236:	462b      	mov	r3, r5
 800a238:	4641      	mov	r1, r8
 800a23a:	f001 fc83 	bl	800bb44 <rmw_create_publisher>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a244:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a248:	b370      	cbz	r0, 800a2a8 <rcl_publisher_init+0x108>
 800a24a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a24e:	f001 fd57 	bl	800bd00 <rmw_publisher_get_actual_qos>
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	4607      	mov	r7, r0
 800a256:	b9d0      	cbnz	r0, 800a28e <rcl_publisher_init+0xee>
 800a258:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a25c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a260:	4629      	mov	r1, r5
 800a262:	2270      	movs	r2, #112	@ 0x70
 800a264:	4618      	mov	r0, r3
 800a266:	f00c fe20 	bl	8016eaa <memcpy>
 800a26a:	6832      	ldr	r2, [r6, #0]
 800a26c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a270:	9807      	ldr	r0, [sp, #28]
 800a272:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a274:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a276:	4798      	blx	r3
 800a278:	4638      	mov	r0, r7
 800a27a:	b008      	add	sp, #32
 800a27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a280:	270b      	movs	r7, #11
 800a282:	4638      	mov	r0, r7
 800a284:	b008      	add	sp, #32
 800a286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28a:	27c8      	movs	r7, #200	@ 0xc8
 800a28c:	e7a1      	b.n	800a1d2 <rcl_publisher_init+0x32>
 800a28e:	b18b      	cbz	r3, 800a2b4 <rcl_publisher_init+0x114>
 800a290:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a294:	b142      	cbz	r2, 800a2a8 <rcl_publisher_init+0x108>
 800a296:	4630      	mov	r0, r6
 800a298:	f007 fa24 	bl	80116e4 <rcl_node_get_rmw_handle>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a2a2:	f001 fd3d 	bl	800bd20 <rmw_destroy_publisher>
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a2aa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	4790      	blx	r2
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	2701      	movs	r7, #1
 800a2b6:	e7db      	b.n	800a270 <rcl_publisher_init+0xd0>
 800a2b8:	2867      	cmp	r0, #103	@ 0x67
 800a2ba:	d0d9      	beq.n	800a270 <rcl_publisher_init+0xd0>
 800a2bc:	2869      	cmp	r0, #105	@ 0x69
 800a2be:	d003      	beq.n	800a2c8 <rcl_publisher_init+0x128>
 800a2c0:	280a      	cmp	r0, #10
 800a2c2:	d1f7      	bne.n	800a2b4 <rcl_publisher_init+0x114>
 800a2c4:	270a      	movs	r7, #10
 800a2c6:	e7d3      	b.n	800a270 <rcl_publisher_init+0xd0>
 800a2c8:	2767      	movs	r7, #103	@ 0x67
 800a2ca:	e7d1      	b.n	800a270 <rcl_publisher_init+0xd0>

0800a2cc <rcl_publisher_get_default_options>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	4d14      	ldr	r5, [pc, #80]	@ (800a320 <rcl_publisher_get_default_options+0x54>)
 800a2d0:	4914      	ldr	r1, [pc, #80]	@ (800a324 <rcl_publisher_get_default_options+0x58>)
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	2250      	movs	r2, #80	@ 0x50
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f00c fde6 	bl	8016eaa <memcpy>
 800a2de:	a802      	add	r0, sp, #8
 800a2e0:	f000 ff8a 	bl	800b1f8 <rcutils_get_default_allocator>
 800a2e4:	f10d 0c08 	add.w	ip, sp, #8
 800a2e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a2ec:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a2f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a2f4:	466e      	mov	r6, sp
 800a2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2fa:	f8ce 3000 	str.w	r3, [lr]
 800a2fe:	4630      	mov	r0, r6
 800a300:	f001 f82a 	bl	800b358 <rmw_get_default_publisher_options>
 800a304:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a308:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a30c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a310:	2270      	movs	r2, #112	@ 0x70
 800a312:	4629      	mov	r1, r5
 800a314:	4620      	mov	r0, r4
 800a316:	f00c fdc8 	bl	8016eaa <memcpy>
 800a31a:	4620      	mov	r0, r4
 800a31c:	b008      	add	sp, #32
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	20008058 	.word	0x20008058
 800a324:	08017d90 	.word	0x08017d90

0800a328 <rcl_publish>:
 800a328:	b1f8      	cbz	r0, 800a36a <rcl_publish+0x42>
 800a32a:	6803      	ldr	r3, [r0, #0]
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	4604      	mov	r4, r0
 800a330:	b1b3      	cbz	r3, 800a360 <rcl_publish+0x38>
 800a332:	4616      	mov	r6, r2
 800a334:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a338:	b192      	cbz	r2, 800a360 <rcl_publish+0x38>
 800a33a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a33e:	460d      	mov	r5, r1
 800a340:	f006 fed2 	bl	80110e8 <rcl_context_is_valid>
 800a344:	b160      	cbz	r0, 800a360 <rcl_publish+0x38>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a34c:	b140      	cbz	r0, 800a360 <rcl_publish+0x38>
 800a34e:	b155      	cbz	r5, 800a366 <rcl_publish+0x3e>
 800a350:	4632      	mov	r2, r6
 800a352:	4629      	mov	r1, r5
 800a354:	f001 fb96 	bl	800ba84 <rmw_publish>
 800a358:	3800      	subs	r0, #0
 800a35a:	bf18      	it	ne
 800a35c:	2001      	movne	r0, #1
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	200b      	movs	r0, #11
 800a368:	bd70      	pop	{r4, r5, r6, pc}
 800a36a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a36e:	4770      	bx	lr

0800a370 <rcl_publisher_is_valid>:
 800a370:	b1a0      	cbz	r0, 800a39c <rcl_publisher_is_valid+0x2c>
 800a372:	6803      	ldr	r3, [r0, #0]
 800a374:	b510      	push	{r4, lr}
 800a376:	4604      	mov	r4, r0
 800a378:	b173      	cbz	r3, 800a398 <rcl_publisher_is_valid+0x28>
 800a37a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a37e:	b15a      	cbz	r2, 800a398 <rcl_publisher_is_valid+0x28>
 800a380:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a384:	f006 feb0 	bl	80110e8 <rcl_context_is_valid>
 800a388:	b130      	cbz	r0, 800a398 <rcl_publisher_is_valid+0x28>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a390:	3800      	subs	r0, #0
 800a392:	bf18      	it	ne
 800a394:	2001      	movne	r0, #1
 800a396:	bd10      	pop	{r4, pc}
 800a398:	2000      	movs	r0, #0
 800a39a:	bd10      	pop	{r4, pc}
 800a39c:	2000      	movs	r0, #0
 800a39e:	4770      	bx	lr

0800a3a0 <rcl_publisher_is_valid_except_context>:
 800a3a0:	b130      	cbz	r0, 800a3b0 <rcl_publisher_is_valid_except_context+0x10>
 800a3a2:	6800      	ldr	r0, [r0, #0]
 800a3a4:	b120      	cbz	r0, 800a3b0 <rcl_publisher_is_valid_except_context+0x10>
 800a3a6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a3aa:	3800      	subs	r0, #0
 800a3ac:	bf18      	it	ne
 800a3ae:	2001      	movne	r0, #1
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop

0800a3b4 <_rclc_check_for_new_data>:
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d046      	beq.n	800a446 <_rclc_check_for_new_data+0x92>
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	7802      	ldrb	r2, [r0, #0]
 800a3bc:	b084      	sub	sp, #16
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2a0a      	cmp	r2, #10
 800a3c2:	d842      	bhi.n	800a44a <_rclc_check_for_new_data+0x96>
 800a3c4:	e8df f002 	tbb	[pc, r2]
 800a3c8:	14181212 	.word	0x14181212
 800a3cc:	06060614 	.word	0x06060614
 800a3d0:	2e1a      	.short	0x2e1a
 800a3d2:	16          	.byte	0x16
 800a3d3:	00          	.byte	0x00
 800a3d4:	6a0a      	ldr	r2, [r1, #32]
 800a3d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a3d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a3dc:	2000      	movs	r0, #0
 800a3de:	1a12      	subs	r2, r2, r0
 800a3e0:	bf18      	it	ne
 800a3e2:	2201      	movne	r2, #1
 800a3e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a3e8:	b004      	add	sp, #16
 800a3ea:	bd10      	pop	{r4, pc}
 800a3ec:	680a      	ldr	r2, [r1, #0]
 800a3ee:	e7f2      	b.n	800a3d6 <_rclc_check_for_new_data+0x22>
 800a3f0:	698a      	ldr	r2, [r1, #24]
 800a3f2:	e7f0      	b.n	800a3d6 <_rclc_check_for_new_data+0x22>
 800a3f4:	688a      	ldr	r2, [r1, #8]
 800a3f6:	e7ee      	b.n	800a3d6 <_rclc_check_for_new_data+0x22>
 800a3f8:	690a      	ldr	r2, [r1, #16]
 800a3fa:	e7ec      	b.n	800a3d6 <_rclc_check_for_new_data+0x22>
 800a3fc:	685c      	ldr	r4, [r3, #4]
 800a3fe:	4608      	mov	r0, r1
 800a400:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a404:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a408:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a40c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a416:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a41a:	f104 0110 	add.w	r1, r4, #16
 800a41e:	f008 ff8f 	bl	8013340 <rcl_action_client_wait_set_get_entities_ready>
 800a422:	e7e1      	b.n	800a3e8 <_rclc_check_for_new_data+0x34>
 800a424:	685c      	ldr	r4, [r3, #4]
 800a426:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a42a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a42e:	e9cd 3200 	strd	r3, r2, [sp]
 800a432:	4608      	mov	r0, r1
 800a434:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a438:	f104 0220 	add.w	r2, r4, #32
 800a43c:	f104 0110 	add.w	r1, r4, #16
 800a440:	f009 f996 	bl	8013770 <rcl_action_server_wait_set_get_entities_ready>
 800a444:	e7d0      	b.n	800a3e8 <_rclc_check_for_new_data+0x34>
 800a446:	200b      	movs	r0, #11
 800a448:	4770      	bx	lr
 800a44a:	2001      	movs	r0, #1
 800a44c:	e7cc      	b.n	800a3e8 <_rclc_check_for_new_data+0x34>
 800a44e:	bf00      	nop

0800a450 <_rclc_take_new_data>:
 800a450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a452:	b09b      	sub	sp, #108	@ 0x6c
 800a454:	2800      	cmp	r0, #0
 800a456:	f000 8088 	beq.w	800a56a <_rclc_take_new_data+0x11a>
 800a45a:	7803      	ldrb	r3, [r0, #0]
 800a45c:	4604      	mov	r4, r0
 800a45e:	2b0a      	cmp	r3, #10
 800a460:	f200 8167 	bhi.w	800a732 <_rclc_take_new_data+0x2e2>
 800a464:	e8df f003 	tbb	[pc, r3]
 800a468:	44152d2d 	.word	0x44152d2d
 800a46c:	19191944 	.word	0x19191944
 800a470:	065a      	.short	0x065a
 800a472:	15          	.byte	0x15
 800a473:	00          	.byte	0x00
 800a474:	6840      	ldr	r0, [r0, #4]
 800a476:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f040 80b2 	bne.w	800a5e4 <_rclc_take_new_data+0x194>
 800a480:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a484:	2b00      	cmp	r3, #0
 800a486:	f040 80e4 	bne.w	800a652 <_rclc_take_new_data+0x202>
 800a48a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d16f      	bne.n	800a572 <_rclc_take_new_data+0x122>
 800a492:	2500      	movs	r5, #0
 800a494:	4628      	mov	r0, r5
 800a496:	b01b      	add	sp, #108	@ 0x6c
 800a498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a49a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a49c:	6a0b      	ldr	r3, [r1, #32]
 800a49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0f5      	beq.n	800a492 <_rclc_take_new_data+0x42>
 800a4a6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a4aa:	f104 0110 	add.w	r1, r4, #16
 800a4ae:	f007 faf5 	bl	8011a9c <rcl_take_request>
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d0ec      	beq.n	800a492 <_rclc_take_new_data+0x42>
 800a4b8:	f240 2359 	movw	r3, #601	@ 0x259
 800a4bc:	4298      	cmp	r0, r3
 800a4be:	d013      	beq.n	800a4e8 <_rclc_take_new_data+0x98>
 800a4c0:	e029      	b.n	800a516 <_rclc_take_new_data+0xc6>
 800a4c2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a4c4:	680b      	ldr	r3, [r1, #0]
 800a4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0e1      	beq.n	800a492 <_rclc_take_new_data+0x42>
 800a4ce:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	aa0a      	add	r2, sp, #40	@ 0x28
 800a4d6:	f007 fb43 	bl	8011b60 <rcl_take>
 800a4da:	4605      	mov	r5, r0
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d0d9      	beq.n	800a494 <_rclc_take_new_data+0x44>
 800a4e0:	f240 1391 	movw	r3, #401	@ 0x191
 800a4e4:	4298      	cmp	r0, r3
 800a4e6:	d116      	bne.n	800a516 <_rclc_take_new_data+0xc6>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a4ee:	e7d1      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a4f0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a4f2:	698b      	ldr	r3, [r1, #24]
 800a4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0ca      	beq.n	800a492 <_rclc_take_new_data+0x42>
 800a4fc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a500:	f104 0110 	add.w	r1, r4, #16
 800a504:	f006 fd80 	bl	8011008 <rcl_take_response>
 800a508:	4605      	mov	r5, r0
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d0c1      	beq.n	800a492 <_rclc_take_new_data+0x42>
 800a50e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a512:	4298      	cmp	r0, r3
 800a514:	d0be      	beq.n	800a494 <_rclc_take_new_data+0x44>
 800a516:	f000 fea3 	bl	800b260 <rcutils_reset_error>
 800a51a:	e7bb      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a51c:	6840      	ldr	r0, [r0, #4]
 800a51e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a522:	2b00      	cmp	r3, #0
 800a524:	d17d      	bne.n	800a622 <_rclc_take_new_data+0x1d2>
 800a526:	69c3      	ldr	r3, [r0, #28]
 800a528:	b11b      	cbz	r3, 800a532 <_rclc_take_new_data+0xe2>
 800a52a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d144      	bne.n	800a5bc <_rclc_take_new_data+0x16c>
 800a532:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a536:	2b00      	cmp	r3, #0
 800a538:	f040 80ac 	bne.w	800a694 <_rclc_take_new_data+0x244>
 800a53c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0a6      	beq.n	800a492 <_rclc_take_new_data+0x42>
 800a544:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a546:	a90a      	add	r1, sp, #40	@ 0x28
 800a548:	3010      	adds	r0, #16
 800a54a:	f008 fdd1 	bl	80130f0 <rcl_action_take_result_response>
 800a54e:	4605      	mov	r5, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	d1e0      	bne.n	800a516 <_rclc_take_new_data+0xc6>
 800a554:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a558:	6860      	ldr	r0, [r4, #4]
 800a55a:	f009 fa2d 	bl	80139b8 <rclc_action_find_handle_by_result_request_sequence_number>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d098      	beq.n	800a494 <_rclc_take_new_data+0x44>
 800a562:	2301      	movs	r3, #1
 800a564:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a568:	e794      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a56a:	250b      	movs	r5, #11
 800a56c:	4628      	mov	r0, r5
 800a56e:	b01b      	add	sp, #108	@ 0x6c
 800a570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a572:	ae04      	add	r6, sp, #16
 800a574:	aa0a      	add	r2, sp, #40	@ 0x28
 800a576:	3010      	adds	r0, #16
 800a578:	4631      	mov	r1, r6
 800a57a:	f009 f82d 	bl	80135d8 <rcl_action_take_cancel_request>
 800a57e:	4605      	mov	r5, r0
 800a580:	2800      	cmp	r0, #0
 800a582:	d1c8      	bne.n	800a516 <_rclc_take_new_data+0xc6>
 800a584:	6860      	ldr	r0, [r4, #4]
 800a586:	a90a      	add	r1, sp, #40	@ 0x28
 800a588:	f009 f9d4 	bl	8013934 <rclc_action_find_goal_handle_by_uuid>
 800a58c:	4607      	mov	r7, r0
 800a58e:	2800      	cmp	r0, #0
 800a590:	f000 80bb 	beq.w	800a70a <_rclc_take_new_data+0x2ba>
 800a594:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a598:	2101      	movs	r1, #1
 800a59a:	f009 f955 	bl	8013848 <rcl_action_transition_goal_state>
 800a59e:	2803      	cmp	r0, #3
 800a5a0:	4684      	mov	ip, r0
 800a5a2:	f040 80a7 	bne.w	800a6f4 <_rclc_take_new_data+0x2a4>
 800a5a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a5a8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a5ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a5b2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a5b6:	f887 c008 	strb.w	ip, [r7, #8]
 800a5ba:	e76b      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a5bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a5be:	3010      	adds	r0, #16
 800a5c0:	f008 fe16 	bl	80131f0 <rcl_action_take_feedback>
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d1a5      	bne.n	800a516 <_rclc_take_new_data+0xc6>
 800a5ca:	6860      	ldr	r0, [r4, #4]
 800a5cc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a5ce:	f009 f9b1 	bl	8013934 <rclc_action_find_goal_handle_by_uuid>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f000 80a3 	beq.w	800a720 <_rclc_take_new_data+0x2d0>
 800a5da:	2201      	movs	r2, #1
 800a5dc:	6860      	ldr	r0, [r4, #4]
 800a5de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a5e2:	e7a6      	b.n	800a532 <_rclc_take_new_data+0xe2>
 800a5e4:	f009 f980 	bl	80138e8 <rclc_action_take_goal_handle>
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	6860      	ldr	r0, [r4, #4]
 800a5ec:	2e00      	cmp	r6, #0
 800a5ee:	f43f af47 	beq.w	800a480 <_rclc_take_new_data+0x30>
 800a5f2:	6070      	str	r0, [r6, #4]
 800a5f4:	69f2      	ldr	r2, [r6, #28]
 800a5f6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a5fa:	3010      	adds	r0, #16
 800a5fc:	f008 ff34 	bl	8013468 <rcl_action_take_goal_request>
 800a600:	4605      	mov	r5, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	f040 808e 	bne.w	800a724 <_rclc_take_new_data+0x2d4>
 800a608:	69f7      	ldr	r7, [r6, #28]
 800a60a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a60c:	7235      	strb	r5, [r6, #8]
 800a60e:	f8c6 0009 	str.w	r0, [r6, #9]
 800a612:	f8c6 100d 	str.w	r1, [r6, #13]
 800a616:	6860      	ldr	r0, [r4, #4]
 800a618:	f8c6 2011 	str.w	r2, [r6, #17]
 800a61c:	f8c6 3015 	str.w	r3, [r6, #21]
 800a620:	e72e      	b.n	800a480 <_rclc_take_new_data+0x30>
 800a622:	aa04      	add	r2, sp, #16
 800a624:	a90a      	add	r1, sp, #40	@ 0x28
 800a626:	3010      	adds	r0, #16
 800a628:	f008 fcea 	bl	8013000 <rcl_action_take_goal_response>
 800a62c:	4605      	mov	r5, r0
 800a62e:	2800      	cmp	r0, #0
 800a630:	f47f af71 	bne.w	800a516 <_rclc_take_new_data+0xc6>
 800a634:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a638:	6860      	ldr	r0, [r4, #4]
 800a63a:	f009 f9ab 	bl	8013994 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a63e:	b130      	cbz	r0, 800a64e <_rclc_take_new_data+0x1fe>
 800a640:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a644:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a648:	2201      	movs	r2, #1
 800a64a:	f880 2020 	strb.w	r2, [r0, #32]
 800a64e:	6860      	ldr	r0, [r4, #4]
 800a650:	e769      	b.n	800a526 <_rclc_take_new_data+0xd6>
 800a652:	aa04      	add	r2, sp, #16
 800a654:	3010      	adds	r0, #16
 800a656:	a90a      	add	r1, sp, #40	@ 0x28
 800a658:	f008 ff7e 	bl	8013558 <rcl_action_take_result_request>
 800a65c:	4605      	mov	r5, r0
 800a65e:	2800      	cmp	r0, #0
 800a660:	f47f af59 	bne.w	800a516 <_rclc_take_new_data+0xc6>
 800a664:	6860      	ldr	r0, [r4, #4]
 800a666:	a904      	add	r1, sp, #16
 800a668:	f009 f964 	bl	8013934 <rclc_action_find_goal_handle_by_uuid>
 800a66c:	4607      	mov	r7, r0
 800a66e:	b160      	cbz	r0, 800a68a <_rclc_take_new_data+0x23a>
 800a670:	ad0a      	add	r5, sp, #40	@ 0x28
 800a672:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a678:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a67a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a67e:	f04f 0c02 	mov.w	ip, #2
 800a682:	e886 0003 	stmia.w	r6, {r0, r1}
 800a686:	f887 c008 	strb.w	ip, [r7, #8]
 800a68a:	6860      	ldr	r0, [r4, #4]
 800a68c:	2300      	movs	r3, #0
 800a68e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a692:	e6fa      	b.n	800a48a <_rclc_take_new_data+0x3a>
 800a694:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a698:	a90a      	add	r1, sp, #40	@ 0x28
 800a69a:	3010      	adds	r0, #16
 800a69c:	f008 fd68 	bl	8013170 <rcl_action_take_cancel_response>
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f47f af37 	bne.w	800a516 <_rclc_take_new_data+0xc6>
 800a6a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a6ac:	6860      	ldr	r0, [r4, #4]
 800a6ae:	f009 f995 	bl	80139dc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	6860      	ldr	r0, [r4, #4]
 800a6b6:	2e00      	cmp	r6, #0
 800a6b8:	f43f af40 	beq.w	800a53c <_rclc_take_new_data+0xec>
 800a6bc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a6be:	2701      	movs	r7, #1
 800a6c0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f43f af3a 	beq.w	800a53c <_rclc_take_new_data+0xec>
 800a6c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a6ca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a6ce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a6d2:	f009 f92f 	bl	8013934 <rclc_action_find_goal_handle_by_uuid>
 800a6d6:	b138      	cbz	r0, 800a6e8 <_rclc_take_new_data+0x298>
 800a6d8:	6860      	ldr	r0, [r4, #4]
 800a6da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a6dc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a6e0:	3501      	adds	r5, #1
 800a6e2:	42ab      	cmp	r3, r5
 800a6e4:	d8f0      	bhi.n	800a6c8 <_rclc_take_new_data+0x278>
 800a6e6:	e729      	b.n	800a53c <_rclc_take_new_data+0xec>
 800a6e8:	6860      	ldr	r0, [r4, #4]
 800a6ea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	42ab      	cmp	r3, r5
 800a6f0:	d8ea      	bhi.n	800a6c8 <_rclc_take_new_data+0x278>
 800a6f2:	e723      	b.n	800a53c <_rclc_take_new_data+0xec>
 800a6f4:	ab06      	add	r3, sp, #24
 800a6f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a6f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a6fc:	2103      	movs	r1, #3
 800a6fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a702:	6860      	ldr	r0, [r4, #4]
 800a704:	f009 f9e0 	bl	8013ac8 <rclc_action_server_goal_cancel_reject>
 800a708:	e6c4      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a70a:	ab06      	add	r3, sp, #24
 800a70c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a70e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a712:	2102      	movs	r1, #2
 800a714:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a718:	6860      	ldr	r0, [r4, #4]
 800a71a:	f009 f9d5 	bl	8013ac8 <rclc_action_server_goal_cancel_reject>
 800a71e:	e6b9      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a720:	6860      	ldr	r0, [r4, #4]
 800a722:	e706      	b.n	800a532 <_rclc_take_new_data+0xe2>
 800a724:	6860      	ldr	r0, [r4, #4]
 800a726:	4631      	mov	r1, r6
 800a728:	f009 f8ee 	bl	8013908 <rclc_action_remove_used_goal_handle>
 800a72c:	f000 fd98 	bl	800b260 <rcutils_reset_error>
 800a730:	e6b0      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a732:	2501      	movs	r5, #1
 800a734:	e6ae      	b.n	800a494 <_rclc_take_new_data+0x44>
 800a736:	bf00      	nop

0800a738 <_rclc_execute.part.0>:
 800a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73a:	7803      	ldrb	r3, [r0, #0]
 800a73c:	b087      	sub	sp, #28
 800a73e:	4604      	mov	r4, r0
 800a740:	2b0a      	cmp	r3, #10
 800a742:	f200 8136 	bhi.w	800a9b2 <_rclc_execute.part.0+0x27a>
 800a746:	e8df f003 	tbb	[pc, r3]
 800a74a:	435e      	.short	0x435e
 800a74c:	06a1664f 	.word	0x06a1664f
 800a750:	6c1e0606 	.word	0x6c1e0606
 800a754:	59          	.byte	0x59
 800a755:	00          	.byte	0x00
 800a756:	2b06      	cmp	r3, #6
 800a758:	f000 8122 	beq.w	800a9a0 <_rclc_execute.part.0+0x268>
 800a75c:	2b07      	cmp	r3, #7
 800a75e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a760:	f040 8118 	bne.w	800a994 <_rclc_execute.part.0+0x25c>
 800a764:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800a768:	6880      	ldr	r0, [r0, #8]
 800a76a:	4798      	blx	r3
 800a76c:	f104 0110 	add.w	r1, r4, #16
 800a770:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a772:	6860      	ldr	r0, [r4, #4]
 800a774:	f007 f9d2 	bl	8011b1c <rcl_send_response>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d033      	beq.n	800a7e4 <_rclc_execute.part.0+0xac>
 800a77c:	9005      	str	r0, [sp, #20]
 800a77e:	f000 fd6f 	bl	800b260 <rcutils_reset_error>
 800a782:	9805      	ldr	r0, [sp, #20]
 800a784:	e02e      	b.n	800a7e4 <_rclc_execute.part.0+0xac>
 800a786:	6840      	ldr	r0, [r0, #4]
 800a788:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 8086 	beq.w	800a89e <_rclc_execute.part.0+0x166>
 800a792:	2600      	movs	r6, #0
 800a794:	2701      	movs	r7, #1
 800a796:	e004      	b.n	800a7a2 <_rclc_execute.part.0+0x6a>
 800a798:	f009 f880 	bl	801389c <rclc_action_send_result_request>
 800a79c:	b998      	cbnz	r0, 800a7c6 <_rclc_execute.part.0+0x8e>
 800a79e:	722f      	strb	r7, [r5, #8]
 800a7a0:	6860      	ldr	r0, [r4, #4]
 800a7a2:	f009 f92d 	bl	8013a00 <rclc_action_find_first_handle_with_goal_response>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d077      	beq.n	800a89c <_rclc_execute.part.0+0x164>
 800a7ac:	6863      	ldr	r3, [r4, #4]
 800a7ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800a7b6:	f885 6020 	strb.w	r6, [r5, #32]
 800a7ba:	4798      	blx	r3
 800a7bc:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1e8      	bne.n	800a798 <_rclc_execute.part.0+0x60>
 800a7c6:	6860      	ldr	r0, [r4, #4]
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f009 f89d 	bl	8013908 <rclc_action_remove_used_goal_handle>
 800a7ce:	e7e7      	b.n	800a7a0 <_rclc_execute.part.0+0x68>
 800a7d0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a7d4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800a7d8:	2d00      	cmp	r5, #0
 800a7da:	f000 80c9 	beq.w	800a970 <_rclc_execute.part.0+0x238>
 800a7de:	6880      	ldr	r0, [r0, #8]
 800a7e0:	4798      	blx	r3
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	b007      	add	sp, #28
 800a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e8:	6840      	ldr	r0, [r0, #4]
 800a7ea:	f007 fcc7 	bl	801217c <rcl_timer_call>
 800a7ee:	f240 3321 	movw	r3, #801	@ 0x321
 800a7f2:	4298      	cmp	r0, r3
 800a7f4:	d004      	beq.n	800a800 <_rclc_execute.part.0+0xc8>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d0f4      	beq.n	800a7e4 <_rclc_execute.part.0+0xac>
 800a7fa:	e7bf      	b.n	800a77c <_rclc_execute.part.0+0x44>
 800a7fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a7fe:	4798      	blx	r3
 800a800:	2000      	movs	r0, #0
 800a802:	b007      	add	sp, #28
 800a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a806:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a80a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a80c:	b925      	cbnz	r5, 800a818 <_rclc_execute.part.0+0xe0>
 800a80e:	4628      	mov	r0, r5
 800a810:	4798      	blx	r3
 800a812:	4628      	mov	r0, r5
 800a814:	e7e6      	b.n	800a7e4 <_rclc_execute.part.0+0xac>
 800a816:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a818:	68a0      	ldr	r0, [r4, #8]
 800a81a:	4798      	blx	r3
 800a81c:	2000      	movs	r0, #0
 800a81e:	b007      	add	sp, #28
 800a820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a822:	6840      	ldr	r0, [r0, #4]
 800a824:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a828:	bb3b      	cbnz	r3, 800a87a <_rclc_execute.part.0+0x142>
 800a82a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d07b      	beq.n	800a92a <_rclc_execute.part.0+0x1f2>
 800a832:	f640 0634 	movw	r6, #2100	@ 0x834
 800a836:	2701      	movs	r7, #1
 800a838:	e007      	b.n	800a84a <_rclc_execute.part.0+0x112>
 800a83a:	4628      	mov	r0, r5
 800a83c:	f009 f8f8 	bl	8013a30 <rclc_action_server_response_goal_request>
 800a840:	6860      	ldr	r0, [r4, #4]
 800a842:	4629      	mov	r1, r5
 800a844:	f009 f860 	bl	8013908 <rclc_action_remove_used_goal_handle>
 800a848:	6860      	ldr	r0, [r4, #4]
 800a84a:	2100      	movs	r1, #0
 800a84c:	f009 f88a 	bl	8013964 <rclc_action_find_first_handle_by_status>
 800a850:	4605      	mov	r5, r0
 800a852:	2800      	cmp	r0, #0
 800a854:	d066      	beq.n	800a924 <_rclc_execute.part.0+0x1ec>
 800a856:	6863      	ldr	r3, [r4, #4]
 800a858:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	4798      	blx	r3
 800a85e:	42b0      	cmp	r0, r6
 800a860:	f04f 0100 	mov.w	r1, #0
 800a864:	d1e9      	bne.n	800a83a <_rclc_execute.part.0+0x102>
 800a866:	2101      	movs	r1, #1
 800a868:	4628      	mov	r0, r5
 800a86a:	f009 f8e1 	bl	8013a30 <rclc_action_server_response_goal_request>
 800a86e:	722f      	strb	r7, [r5, #8]
 800a870:	e7ea      	b.n	800a848 <_rclc_execute.part.0+0x110>
 800a872:	6848      	ldr	r0, [r1, #4]
 800a874:	f009 f848 	bl	8013908 <rclc_action_remove_used_goal_handle>
 800a878:	6860      	ldr	r0, [r4, #4]
 800a87a:	f009 f87f 	bl	801397c <rclc_action_find_first_terminated_handle>
 800a87e:	4601      	mov	r1, r0
 800a880:	2800      	cmp	r0, #0
 800a882:	d1f6      	bne.n	800a872 <_rclc_execute.part.0+0x13a>
 800a884:	6860      	ldr	r0, [r4, #4]
 800a886:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800a88a:	e7ce      	b.n	800a82a <_rclc_execute.part.0+0xf2>
 800a88c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a88e:	6880      	ldr	r0, [r0, #8]
 800a890:	f104 0110 	add.w	r1, r4, #16
 800a894:	4798      	blx	r3
 800a896:	2000      	movs	r0, #0
 800a898:	b007      	add	sp, #28
 800a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89c:	6860      	ldr	r0, [r4, #4]
 800a89e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a8a2:	b18b      	cbz	r3, 800a8c8 <_rclc_execute.part.0+0x190>
 800a8a4:	68c5      	ldr	r5, [r0, #12]
 800a8a6:	b32d      	cbz	r5, 800a8f4 <_rclc_execute.part.0+0x1bc>
 800a8a8:	2600      	movs	r6, #0
 800a8aa:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800a8ae:	b143      	cbz	r3, 800a8c2 <_rclc_execute.part.0+0x18a>
 800a8b0:	69c3      	ldr	r3, [r0, #28]
 800a8b2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800a8b6:	b123      	cbz	r3, 800a8c2 <_rclc_execute.part.0+0x18a>
 800a8b8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a8ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a8bc:	4628      	mov	r0, r5
 800a8be:	4798      	blx	r3
 800a8c0:	6860      	ldr	r0, [r4, #4]
 800a8c2:	682d      	ldr	r5, [r5, #0]
 800a8c4:	2d00      	cmp	r5, #0
 800a8c6:	d1f0      	bne.n	800a8aa <_rclc_execute.part.0+0x172>
 800a8c8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a8cc:	b193      	cbz	r3, 800a8f4 <_rclc_execute.part.0+0x1bc>
 800a8ce:	68c5      	ldr	r5, [r0, #12]
 800a8d0:	b185      	cbz	r5, 800a8f4 <_rclc_execute.part.0+0x1bc>
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800a8d8:	b14b      	cbz	r3, 800a8ee <_rclc_execute.part.0+0x1b6>
 800a8da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a8dc:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800a8e0:	b12b      	cbz	r3, 800a8ee <_rclc_execute.part.0+0x1b6>
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800a8e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a8ea:	4798      	blx	r3
 800a8ec:	6860      	ldr	r0, [r4, #4]
 800a8ee:	682d      	ldr	r5, [r5, #0]
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	d1ef      	bne.n	800a8d4 <_rclc_execute.part.0+0x19c>
 800a8f4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d081      	beq.n	800a800 <_rclc_execute.part.0+0xc8>
 800a8fc:	2700      	movs	r7, #0
 800a8fe:	e00b      	b.n	800a918 <_rclc_execute.part.0+0x1e0>
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a904:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a906:	6a1e      	ldr	r6, [r3, #32]
 800a908:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a90c:	47b0      	blx	r6
 800a90e:	6860      	ldr	r0, [r4, #4]
 800a910:	4629      	mov	r1, r5
 800a912:	f008 fff9 	bl	8013908 <rclc_action_remove_used_goal_handle>
 800a916:	6860      	ldr	r0, [r4, #4]
 800a918:	f009 f87e 	bl	8013a18 <rclc_action_find_first_handle_with_result_response>
 800a91c:	4605      	mov	r5, r0
 800a91e:	2800      	cmp	r0, #0
 800a920:	d1ee      	bne.n	800a900 <_rclc_execute.part.0+0x1c8>
 800a922:	e76d      	b.n	800a800 <_rclc_execute.part.0+0xc8>
 800a924:	6860      	ldr	r0, [r4, #4]
 800a926:	f880 5020 	strb.w	r5, [r0, #32]
 800a92a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f43f af66 	beq.w	800a800 <_rclc_execute.part.0+0xc8>
 800a934:	68c5      	ldr	r5, [r0, #12]
 800a936:	b1b5      	cbz	r5, 800a966 <_rclc_execute.part.0+0x22e>
 800a938:	2602      	movs	r6, #2
 800a93a:	e001      	b.n	800a940 <_rclc_execute.part.0+0x208>
 800a93c:	682d      	ldr	r5, [r5, #0]
 800a93e:	b195      	cbz	r5, 800a966 <_rclc_execute.part.0+0x22e>
 800a940:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a944:	2b03      	cmp	r3, #3
 800a946:	d1f9      	bne.n	800a93c <_rclc_execute.part.0+0x204>
 800a948:	69c3      	ldr	r3, [r0, #28]
 800a94a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a94c:	4628      	mov	r0, r5
 800a94e:	4798      	blx	r3
 800a950:	4603      	mov	r3, r0
 800a952:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a956:	4628      	mov	r0, r5
 800a958:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a95c:	b163      	cbz	r3, 800a978 <_rclc_execute.part.0+0x240>
 800a95e:	f009 f887 	bl	8013a70 <rclc_action_server_goal_cancel_accept>
 800a962:	6860      	ldr	r0, [r4, #4]
 800a964:	e7ea      	b.n	800a93c <_rclc_execute.part.0+0x204>
 800a966:	2300      	movs	r3, #0
 800a968:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a96c:	4618      	mov	r0, r3
 800a96e:	e739      	b.n	800a7e4 <_rclc_execute.part.0+0xac>
 800a970:	4628      	mov	r0, r5
 800a972:	4798      	blx	r3
 800a974:	4628      	mov	r0, r5
 800a976:	e735      	b.n	800a7e4 <_rclc_execute.part.0+0xac>
 800a978:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a97a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a97e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800a982:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a986:	6860      	ldr	r0, [r4, #4]
 800a988:	2101      	movs	r1, #1
 800a98a:	f009 f89d 	bl	8013ac8 <rclc_action_server_goal_cancel_reject>
 800a98e:	722e      	strb	r6, [r5, #8]
 800a990:	6860      	ldr	r0, [r4, #4]
 800a992:	e7d3      	b.n	800a93c <_rclc_execute.part.0+0x204>
 800a994:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a996:	6880      	ldr	r0, [r0, #8]
 800a998:	4798      	blx	r3
 800a99a:	f104 0110 	add.w	r1, r4, #16
 800a99e:	e6e7      	b.n	800a770 <_rclc_execute.part.0+0x38>
 800a9a0:	f100 0110 	add.w	r1, r0, #16
 800a9a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a9a6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800a9a8:	6880      	ldr	r0, [r0, #8]
 800a9aa:	9105      	str	r1, [sp, #20]
 800a9ac:	4798      	blx	r3
 800a9ae:	9905      	ldr	r1, [sp, #20]
 800a9b0:	e6de      	b.n	800a770 <_rclc_execute.part.0+0x38>
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e716      	b.n	800a7e4 <_rclc_execute.part.0+0xac>
 800a9b6:	bf00      	nop

0800a9b8 <rclc_executor_trigger_any>:
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d03f      	beq.n	800aa3c <rclc_executor_trigger_any+0x84>
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d03e      	beq.n	800aa3e <rclc_executor_trigger_any+0x86>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d037      	beq.n	800aa3c <rclc_executor_trigger_any+0x84>
 800a9cc:	b430      	push	{r4, r5}
 800a9ce:	f893 c000 	ldrb.w	ip, [r3]
 800a9d2:	f1bc 0f08 	cmp.w	ip, #8
 800a9d6:	d11e      	bne.n	800aa16 <rclc_executor_trigger_any+0x5e>
 800a9d8:	685c      	ldr	r4, [r3, #4]
 800a9da:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a9dc:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800a9e0:	d105      	bne.n	800a9ee <rclc_executor_trigger_any+0x36>
 800a9e2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800a9e6:	b910      	cbnz	r0, 800a9ee <rclc_executor_trigger_any+0x36>
 800a9e8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800a9ec:	b128      	cbz	r0, 800a9fa <rclc_executor_trigger_any+0x42>
 800a9ee:	bc30      	pop	{r4, r5}
 800a9f0:	4770      	bx	lr
 800a9f2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d1f9      	bne.n	800a9ee <rclc_executor_trigger_any+0x36>
 800a9fa:	3201      	adds	r2, #1
 800a9fc:	4291      	cmp	r1, r2
 800a9fe:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aa02:	d018      	beq.n	800aa36 <rclc_executor_trigger_any+0x7e>
 800aa04:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d0f0      	beq.n	800a9ee <rclc_executor_trigger_any+0x36>
 800aa0c:	f893 c000 	ldrb.w	ip, [r3]
 800aa10:	f1bc 0f08 	cmp.w	ip, #8
 800aa14:	d0e0      	beq.n	800a9d8 <rclc_executor_trigger_any+0x20>
 800aa16:	f1bc 0f09 	cmp.w	ip, #9
 800aa1a:	d1ea      	bne.n	800a9f2 <rclc_executor_trigger_any+0x3a>
 800aa1c:	685c      	ldr	r4, [r3, #4]
 800aa1e:	6a25      	ldr	r5, [r4, #32]
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	d1e4      	bne.n	800a9ee <rclc_executor_trigger_any+0x36>
 800aa24:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d1e0      	bne.n	800a9ee <rclc_executor_trigger_any+0x36>
 800aa2c:	3201      	adds	r2, #1
 800aa2e:	4291      	cmp	r1, r2
 800aa30:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aa34:	d1e6      	bne.n	800aa04 <rclc_executor_trigger_any+0x4c>
 800aa36:	2000      	movs	r0, #0
 800aa38:	bc30      	pop	{r4, r5}
 800aa3a:	4770      	bx	lr
 800aa3c:	4770      	bx	lr
 800aa3e:	4608      	mov	r0, r1
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop

0800aa44 <rclc_executor_get_zero_initialized_executor>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	4903      	ldr	r1, [pc, #12]	@ (800aa54 <rclc_executor_get_zero_initialized_executor+0x10>)
 800aa48:	4604      	mov	r4, r0
 800aa4a:	2288      	movs	r2, #136	@ 0x88
 800aa4c:	f00c fa2d 	bl	8016eaa <memcpy>
 800aa50:	4620      	mov	r0, r4
 800aa52:	bd10      	pop	{r4, pc}
 800aa54:	08017de0 	.word	0x08017de0

0800aa58 <rclc_executor_init>:
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d05f      	beq.n	800ab1c <rclc_executor_init+0xc4>
 800aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa60:	460c      	mov	r4, r1
 800aa62:	b0b0      	sub	sp, #192	@ 0xc0
 800aa64:	2900      	cmp	r1, #0
 800aa66:	d051      	beq.n	800ab0c <rclc_executor_init+0xb4>
 800aa68:	4605      	mov	r5, r0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	4616      	mov	r6, r2
 800aa6e:	461f      	mov	r7, r3
 800aa70:	f000 fbd0 	bl	800b214 <rcutils_allocator_is_valid>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d049      	beq.n	800ab0c <rclc_executor_init+0xb4>
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	d047      	beq.n	800ab0c <rclc_executor_init+0xb4>
 800aa7c:	492c      	ldr	r1, [pc, #176]	@ (800ab30 <rclc_executor_init+0xd8>)
 800aa7e:	2288      	movs	r2, #136	@ 0x88
 800aa80:	a80e      	add	r0, sp, #56	@ 0x38
 800aa82:	f00c fa12 	bl	8016eaa <memcpy>
 800aa86:	a90e      	add	r1, sp, #56	@ 0x38
 800aa88:	2288      	movs	r2, #136	@ 0x88
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f00c fa0d 	bl	8016eaa <memcpy>
 800aa90:	602c      	str	r4, [r5, #0]
 800aa92:	4668      	mov	r0, sp
 800aa94:	60ae      	str	r6, [r5, #8]
 800aa96:	466c      	mov	r4, sp
 800aa98:	f007 fce2 	bl	8012460 <rcl_get_zero_initialized_wait_set>
 800aa9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa9e:	f105 0c14 	add.w	ip, r5, #20
 800aaa2:	f8d7 8000 	ldr.w	r8, [r7]
 800aaa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aaaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aab6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ab28 <rclc_executor_init+0xd0>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	f8cc 3000 	str.w	r3, [ip]
 800aac0:	6939      	ldr	r1, [r7, #16]
 800aac2:	612f      	str	r7, [r5, #16]
 800aac4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800aac8:	01b0      	lsls	r0, r6, #6
 800aaca:	47c0      	blx	r8
 800aacc:	6068      	str	r0, [r5, #4]
 800aace:	b338      	cbz	r0, 800ab20 <rclc_executor_init+0xc8>
 800aad0:	2400      	movs	r4, #0
 800aad2:	e000      	b.n	800aad6 <rclc_executor_init+0x7e>
 800aad4:	6868      	ldr	r0, [r5, #4]
 800aad6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800aada:	4631      	mov	r1, r6
 800aadc:	3401      	adds	r4, #1
 800aade:	f000 fa6b 	bl	800afb8 <rclc_executor_handle_init>
 800aae2:	42a6      	cmp	r6, r4
 800aae4:	d1f6      	bne.n	800aad4 <rclc_executor_init+0x7c>
 800aae6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800aaea:	f000 fa59 	bl	800afa0 <rclc_executor_handle_counters_zero_init>
 800aaee:	4a11      	ldr	r2, [pc, #68]	@ (800ab34 <rclc_executor_init+0xdc>)
 800aaf0:	686b      	ldr	r3, [r5, #4]
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800aaf8:	b163      	cbz	r3, 800ab14 <rclc_executor_init+0xbc>
 800aafa:	692b      	ldr	r3, [r5, #16]
 800aafc:	b153      	cbz	r3, 800ab14 <rclc_executor_init+0xbc>
 800aafe:	68ab      	ldr	r3, [r5, #8]
 800ab00:	b143      	cbz	r3, 800ab14 <rclc_executor_init+0xbc>
 800ab02:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800ab06:	b030      	add	sp, #192	@ 0xc0
 800ab08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0c:	200b      	movs	r0, #11
 800ab0e:	b030      	add	sp, #192	@ 0xc0
 800ab10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab14:	4618      	mov	r0, r3
 800ab16:	b030      	add	sp, #192	@ 0xc0
 800ab18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab1c:	200b      	movs	r0, #11
 800ab1e:	4770      	bx	lr
 800ab20:	200a      	movs	r0, #10
 800ab22:	e7f4      	b.n	800ab0e <rclc_executor_init+0xb6>
 800ab24:	f3af 8000 	nop.w
 800ab28:	3b9aca00 	.word	0x3b9aca00
 800ab2c:	00000000 	.word	0x00000000
 800ab30:	08017de0 	.word	0x08017de0
 800ab34:	0800a9b9 	.word	0x0800a9b9

0800ab38 <rclc_executor_add_timer>:
 800ab38:	b300      	cbz	r0, 800ab7c <rclc_executor_add_timer+0x44>
 800ab3a:	b1f9      	cbz	r1, 800ab7c <rclc_executor_add_timer+0x44>
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ab42:	4293      	cmp	r3, r2
 800ab44:	4604      	mov	r4, r0
 800ab46:	d301      	bcc.n	800ab4c <rclc_executor_add_timer+0x14>
 800ab48:	2001      	movs	r0, #1
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	6840      	ldr	r0, [r0, #4]
 800ab4e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ab52:	019d      	lsls	r5, r3, #6
 800ab54:	6051      	str	r1, [r2, #4]
 800ab56:	2102      	movs	r1, #2
 800ab58:	5341      	strh	r1, [r0, r5]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	2101      	movs	r1, #1
 800ab60:	f104 0514 	add.w	r5, r4, #20
 800ab64:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ab66:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ab68:	4628      	mov	r0, r5
 800ab6a:	60e3      	str	r3, [r4, #12]
 800ab6c:	f007 fc8c 	bl	8012488 <rcl_wait_set_is_valid>
 800ab70:	b930      	cbnz	r0, 800ab80 <rclc_executor_add_timer+0x48>
 800ab72:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ab74:	3301      	adds	r3, #1
 800ab76:	2000      	movs	r0, #0
 800ab78:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	200b      	movs	r0, #11
 800ab7e:	4770      	bx	lr
 800ab80:	4628      	mov	r0, r5
 800ab82:	f007 fc87 	bl	8012494 <rcl_wait_set_fini>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d0f3      	beq.n	800ab72 <rclc_executor_add_timer+0x3a>
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}

0800ab8c <rclc_executor_prepare>:
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d044      	beq.n	800ac1a <rclc_executor_prepare+0x8e>
 800ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab92:	f100 0514 	add.w	r5, r0, #20
 800ab96:	b09b      	sub	sp, #108	@ 0x6c
 800ab98:	4604      	mov	r4, r0
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f007 fc74 	bl	8012488 <rcl_wait_set_is_valid>
 800aba0:	b110      	cbz	r0, 800aba8 <rclc_executor_prepare+0x1c>
 800aba2:	2000      	movs	r0, #0
 800aba4:	b01b      	add	sp, #108	@ 0x6c
 800aba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aba8:	4628      	mov	r0, r5
 800abaa:	f007 fc73 	bl	8012494 <rcl_wait_set_fini>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d130      	bne.n	800ac14 <rclc_executor_prepare+0x88>
 800abb2:	a80c      	add	r0, sp, #48	@ 0x30
 800abb4:	f007 fc54 	bl	8012460 <rcl_get_zero_initialized_wait_set>
 800abb8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800abbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800abc0:	46ae      	mov	lr, r5
 800abc2:	6927      	ldr	r7, [r4, #16]
 800abc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800abc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800abcc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800abd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800abd4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800abd8:	f8dc 3000 	ldr.w	r3, [ip]
 800abdc:	f8ce 3000 	str.w	r3, [lr]
 800abe0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800abe2:	ae04      	add	r6, sp, #16
 800abe4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	6033      	str	r3, [r6, #0]
 800abec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abee:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800abf0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800abf4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800abf8:	e9cd 2100 	strd	r2, r1, [sp]
 800abfc:	4628      	mov	r0, r5
 800abfe:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ac00:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac02:	f007 ff45 	bl	8012a90 <rcl_wait_set_init>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d0cc      	beq.n	800aba4 <rclc_executor_prepare+0x18>
 800ac0a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ac0c:	f000 fb28 	bl	800b260 <rcutils_reset_error>
 800ac10:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ac12:	e7c7      	b.n	800aba4 <rclc_executor_prepare+0x18>
 800ac14:	f000 fb24 	bl	800b260 <rcutils_reset_error>
 800ac18:	e7cb      	b.n	800abb2 <rclc_executor_prepare+0x26>
 800ac1a:	200b      	movs	r0, #11
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop

0800ac20 <rclc_executor_spin_some.part.0>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	f100 0614 	add.w	r6, r0, #20
 800ac28:	b083      	sub	sp, #12
 800ac2a:	4691      	mov	r9, r2
 800ac2c:	4698      	mov	r8, r3
 800ac2e:	4605      	mov	r5, r0
 800ac30:	f7ff ffac 	bl	800ab8c <rclc_executor_prepare>
 800ac34:	4630      	mov	r0, r6
 800ac36:	f007 fcf9 	bl	801262c <rcl_wait_set_clear>
 800ac3a:	4607      	mov	r7, r0
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	f040 80ed 	bne.w	800ae1c <rclc_executor_spin_some.part.0+0x1fc>
 800ac42:	68ab      	ldr	r3, [r5, #8]
 800ac44:	4604      	mov	r4, r0
 800ac46:	b303      	cbz	r3, 800ac8a <rclc_executor_spin_some.part.0+0x6a>
 800ac48:	6869      	ldr	r1, [r5, #4]
 800ac4a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ac4e:	01a2      	lsls	r2, r4, #6
 800ac50:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ac54:	b1cb      	cbz	r3, 800ac8a <rclc_executor_spin_some.part.0+0x6a>
 800ac56:	5c8b      	ldrb	r3, [r1, r2]
 800ac58:	2b0a      	cmp	r3, #10
 800ac5a:	f200 80d8 	bhi.w	800ae0e <rclc_executor_spin_some.part.0+0x1ee>
 800ac5e:	e8df f003 	tbb	[pc, r3]
 800ac62:	9c9c      	.short	0x9c9c
 800ac64:	068c8ca7 	.word	0x068c8ca7
 800ac68:	bdc90606 	.word	0xbdc90606
 800ac6c:	b2          	.byte	0xb2
 800ac6d:	00          	.byte	0x00
 800ac6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ac72:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ac76:	4630      	mov	r0, r6
 800ac78:	f008 f820 	bl	8012cbc <rcl_wait_set_add_service>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f040 8086 	bne.w	800ad8e <rclc_executor_spin_some.part.0+0x16e>
 800ac82:	68ab      	ldr	r3, [r5, #8]
 800ac84:	3401      	adds	r4, #1
 800ac86:	429c      	cmp	r4, r3
 800ac88:	d3de      	bcc.n	800ac48 <rclc_executor_spin_some.part.0+0x28>
 800ac8a:	4643      	mov	r3, r8
 800ac8c:	464a      	mov	r2, r9
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f008 f842 	bl	8012d18 <rcl_wait>
 800ac94:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 80c7 	beq.w	800ae2c <rclc_executor_spin_some.part.0+0x20c>
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	f040 80b5 	bne.w	800ae0e <rclc_executor_spin_some.part.0+0x1ee>
 800aca4:	68ab      	ldr	r3, [r5, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 8159 	beq.w	800af5e <rclc_executor_spin_some.part.0+0x33e>
 800acac:	2400      	movs	r4, #0
 800acae:	46a0      	mov	r8, r4
 800acb0:	f240 1991 	movw	r9, #401	@ 0x191
 800acb4:	e00a      	b.n	800accc <rclc_executor_spin_some.part.0+0xac>
 800acb6:	f7ff fb7d 	bl	800a3b4 <_rclc_check_for_new_data>
 800acba:	4604      	mov	r4, r0
 800acbc:	b110      	cbz	r0, 800acc4 <rclc_executor_spin_some.part.0+0xa4>
 800acbe:	4548      	cmp	r0, r9
 800acc0:	f040 80b2 	bne.w	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800acc4:	68ab      	ldr	r3, [r5, #8]
 800acc6:	4598      	cmp	r8, r3
 800acc8:	f080 8126 	bcs.w	800af18 <rclc_executor_spin_some.part.0+0x2f8>
 800accc:	686a      	ldr	r2, [r5, #4]
 800acce:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800acd2:	4631      	mov	r1, r6
 800acd4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800acd8:	f108 0801 	add.w	r8, r8, #1
 800acdc:	f1bc 0f00 	cmp.w	ip, #0
 800ace0:	d1e9      	bne.n	800acb6 <rclc_executor_spin_some.part.0+0x96>
 800ace2:	4619      	mov	r1, r3
 800ace4:	4610      	mov	r0, r2
 800ace6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800acea:	4798      	blx	r3
 800acec:	2800      	cmp	r0, #0
 800acee:	f000 809b 	beq.w	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800acf2:	68ab      	ldr	r3, [r5, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8097 	beq.w	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800acfa:	f04f 0800 	mov.w	r8, #0
 800acfe:	f240 1991 	movw	r9, #401	@ 0x191
 800ad02:	e009      	b.n	800ad18 <rclc_executor_spin_some.part.0+0xf8>
 800ad04:	f7ff fba4 	bl	800a450 <_rclc_take_new_data>
 800ad08:	4604      	mov	r4, r0
 800ad0a:	b110      	cbz	r0, 800ad12 <rclc_executor_spin_some.part.0+0xf2>
 800ad0c:	4548      	cmp	r0, r9
 800ad0e:	f040 808b 	bne.w	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800ad12:	68ab      	ldr	r3, [r5, #8]
 800ad14:	4598      	cmp	r8, r3
 800ad16:	d209      	bcs.n	800ad2c <rclc_executor_spin_some.part.0+0x10c>
 800ad18:	6868      	ldr	r0, [r5, #4]
 800ad1a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ad1e:	4631      	mov	r1, r6
 800ad20:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ad24:	f108 0801 	add.w	r8, r8, #1
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	d1eb      	bne.n	800ad04 <rclc_executor_spin_some.part.0+0xe4>
 800ad2c:	2600      	movs	r6, #0
 800ad2e:	b97b      	cbnz	r3, 800ad50 <rclc_executor_spin_some.part.0+0x130>
 800ad30:	e07a      	b.n	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800ad32:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ad36:	2a08      	cmp	r2, #8
 800ad38:	f000 80fd 	beq.w	800af36 <rclc_executor_spin_some.part.0+0x316>
 800ad3c:	2a09      	cmp	r2, #9
 800ad3e:	f000 80ef 	beq.w	800af20 <rclc_executor_spin_some.part.0+0x300>
 800ad42:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800ad46:	b98a      	cbnz	r2, 800ad6c <rclc_executor_spin_some.part.0+0x14c>
 800ad48:	3601      	adds	r6, #1
 800ad4a:	429e      	cmp	r6, r3
 800ad4c:	d262      	bcs.n	800ae14 <rclc_executor_spin_some.part.0+0x1f4>
 800ad4e:	2400      	movs	r4, #0
 800ad50:	686a      	ldr	r2, [r5, #4]
 800ad52:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ad56:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ad5a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	d062      	beq.n	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800ad62:	7841      	ldrb	r1, [r0, #1]
 800ad64:	2900      	cmp	r1, #0
 800ad66:	d0e4      	beq.n	800ad32 <rclc_executor_spin_some.part.0+0x112>
 800ad68:	2901      	cmp	r1, #1
 800ad6a:	d1ed      	bne.n	800ad48 <rclc_executor_spin_some.part.0+0x128>
 800ad6c:	f7ff fce4 	bl	800a738 <_rclc_execute.part.0>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f040 80b6 	bne.w	800aee2 <rclc_executor_spin_some.part.0+0x2c2>
 800ad76:	68ab      	ldr	r3, [r5, #8]
 800ad78:	e7e6      	b.n	800ad48 <rclc_executor_spin_some.part.0+0x128>
 800ad7a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ad7e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ad82:	4630      	mov	r0, r6
 800ad84:	f007 ff6e 	bl	8012c64 <rcl_wait_set_add_client>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	f43f af7a 	beq.w	800ac82 <rclc_executor_spin_some.part.0+0x62>
 800ad8e:	9001      	str	r0, [sp, #4]
 800ad90:	f000 fa66 	bl	800b260 <rcutils_reset_error>
 800ad94:	9801      	ldr	r0, [sp, #4]
 800ad96:	4607      	mov	r7, r0
 800ad98:	e03c      	b.n	800ae14 <rclc_executor_spin_some.part.0+0x1f4>
 800ad9a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ad9e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ada2:	4630      	mov	r0, r6
 800ada4:	f007 fc16 	bl	80125d4 <rcl_wait_set_add_subscription>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	f43f af6a 	beq.w	800ac82 <rclc_executor_spin_some.part.0+0x62>
 800adae:	e7ee      	b.n	800ad8e <rclc_executor_spin_some.part.0+0x16e>
 800adb0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800adb4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800adb8:	4630      	mov	r0, r6
 800adba:	f007 ff23 	bl	8012c04 <rcl_wait_set_add_timer>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f43f af5f 	beq.w	800ac82 <rclc_executor_spin_some.part.0+0x62>
 800adc4:	e7e3      	b.n	800ad8e <rclc_executor_spin_some.part.0+0x16e>
 800adc6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800adca:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800adce:	4630      	mov	r0, r6
 800add0:	f007 feec 	bl	8012bac <rcl_wait_set_add_guard_condition>
 800add4:	2800      	cmp	r0, #0
 800add6:	f43f af54 	beq.w	800ac82 <rclc_executor_spin_some.part.0+0x62>
 800adda:	e7d8      	b.n	800ad8e <rclc_executor_spin_some.part.0+0x16e>
 800addc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ade0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ade4:	3110      	adds	r1, #16
 800ade6:	4630      	mov	r0, r6
 800ade8:	f008 fc6e 	bl	80136c8 <rcl_action_wait_set_add_action_server>
 800adec:	2800      	cmp	r0, #0
 800adee:	f43f af48 	beq.w	800ac82 <rclc_executor_spin_some.part.0+0x62>
 800adf2:	e7cc      	b.n	800ad8e <rclc_executor_spin_some.part.0+0x16e>
 800adf4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800adf8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800adfc:	3110      	adds	r1, #16
 800adfe:	2300      	movs	r3, #0
 800ae00:	4630      	mov	r0, r6
 800ae02:	f008 fa39 	bl	8013278 <rcl_action_wait_set_add_action_client>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f43f af3b 	beq.w	800ac82 <rclc_executor_spin_some.part.0+0x62>
 800ae0c:	e7bf      	b.n	800ad8e <rclc_executor_spin_some.part.0+0x16e>
 800ae0e:	f000 fa27 	bl	800b260 <rcutils_reset_error>
 800ae12:	2701      	movs	r7, #1
 800ae14:	4638      	mov	r0, r7
 800ae16:	b003      	add	sp, #12
 800ae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1c:	f000 fa20 	bl	800b260 <rcutils_reset_error>
 800ae20:	4638      	mov	r0, r7
 800ae22:	b003      	add	sp, #12
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	4627      	mov	r7, r4
 800ae2a:	e7f3      	b.n	800ae14 <rclc_executor_spin_some.part.0+0x1f4>
 800ae2c:	68ab      	ldr	r3, [r5, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 8092 	beq.w	800af58 <rclc_executor_spin_some.part.0+0x338>
 800ae34:	2400      	movs	r4, #0
 800ae36:	46a0      	mov	r8, r4
 800ae38:	f240 1991 	movw	r9, #401	@ 0x191
 800ae3c:	e008      	b.n	800ae50 <rclc_executor_spin_some.part.0+0x230>
 800ae3e:	f7ff fab9 	bl	800a3b4 <_rclc_check_for_new_data>
 800ae42:	4604      	mov	r4, r0
 800ae44:	b108      	cbz	r0, 800ae4a <rclc_executor_spin_some.part.0+0x22a>
 800ae46:	4548      	cmp	r0, r9
 800ae48:	d1ee      	bne.n	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800ae4a:	68ab      	ldr	r3, [r5, #8]
 800ae4c:	4598      	cmp	r8, r3
 800ae4e:	d265      	bcs.n	800af1c <rclc_executor_spin_some.part.0+0x2fc>
 800ae50:	686a      	ldr	r2, [r5, #4]
 800ae52:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ae56:	4631      	mov	r1, r6
 800ae58:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ae5c:	f108 0801 	add.w	r8, r8, #1
 800ae60:	f1bc 0f00 	cmp.w	ip, #0
 800ae64:	d1eb      	bne.n	800ae3e <rclc_executor_spin_some.part.0+0x21e>
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ae6e:	4798      	blx	r3
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d0d9      	beq.n	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800ae74:	68ab      	ldr	r3, [r5, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0d6      	beq.n	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800ae7a:	f04f 0800 	mov.w	r8, #0
 800ae7e:	f240 1991 	movw	r9, #401	@ 0x191
 800ae82:	f240 2a59 	movw	sl, #601	@ 0x259
 800ae86:	e00e      	b.n	800aea6 <rclc_executor_spin_some.part.0+0x286>
 800ae88:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d033      	beq.n	800aef8 <rclc_executor_spin_some.part.0+0x2d8>
 800ae90:	2b09      	cmp	r3, #9
 800ae92:	d028      	beq.n	800aee6 <rclc_executor_spin_some.part.0+0x2c6>
 800ae94:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ae98:	b9fb      	cbnz	r3, 800aeda <rclc_executor_spin_some.part.0+0x2ba>
 800ae9a:	68ab      	ldr	r3, [r5, #8]
 800ae9c:	f108 0801 	add.w	r8, r8, #1
 800aea0:	4598      	cmp	r8, r3
 800aea2:	d2b7      	bcs.n	800ae14 <rclc_executor_spin_some.part.0+0x1f4>
 800aea4:	2400      	movs	r4, #0
 800aea6:	6868      	ldr	r0, [r5, #4]
 800aea8:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800aeac:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800aeb0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d0b7      	beq.n	800ae28 <rclc_executor_spin_some.part.0+0x208>
 800aeb8:	4631      	mov	r1, r6
 800aeba:	f7ff fac9 	bl	800a450 <_rclc_take_new_data>
 800aebe:	b118      	cbz	r0, 800aec8 <rclc_executor_spin_some.part.0+0x2a8>
 800aec0:	4548      	cmp	r0, r9
 800aec2:	d001      	beq.n	800aec8 <rclc_executor_spin_some.part.0+0x2a8>
 800aec4:	4550      	cmp	r0, sl
 800aec6:	d10c      	bne.n	800aee2 <rclc_executor_spin_some.part.0+0x2c2>
 800aec8:	686b      	ldr	r3, [r5, #4]
 800aeca:	eb13 000b 	adds.w	r0, r3, fp
 800aece:	d021      	beq.n	800af14 <rclc_executor_spin_some.part.0+0x2f4>
 800aed0:	7842      	ldrb	r2, [r0, #1]
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	d0d8      	beq.n	800ae88 <rclc_executor_spin_some.part.0+0x268>
 800aed6:	2a01      	cmp	r2, #1
 800aed8:	d1df      	bne.n	800ae9a <rclc_executor_spin_some.part.0+0x27a>
 800aeda:	f7ff fc2d 	bl	800a738 <_rclc_execute.part.0>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d0db      	beq.n	800ae9a <rclc_executor_spin_some.part.0+0x27a>
 800aee2:	4607      	mov	r7, r0
 800aee4:	e796      	b.n	800ae14 <rclc_executor_spin_some.part.0+0x1f4>
 800aee6:	6843      	ldr	r3, [r0, #4]
 800aee8:	6a1a      	ldr	r2, [r3, #32]
 800aeea:	2a00      	cmp	r2, #0
 800aeec:	d1f5      	bne.n	800aeda <rclc_executor_spin_some.part.0+0x2ba>
 800aeee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0d1      	beq.n	800ae9a <rclc_executor_spin_some.part.0+0x27a>
 800aef6:	e7f0      	b.n	800aeda <rclc_executor_spin_some.part.0+0x2ba>
 800aef8:	6843      	ldr	r3, [r0, #4]
 800aefa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aefc:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800af00:	d1eb      	bne.n	800aeda <rclc_executor_spin_some.part.0+0x2ba>
 800af02:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800af06:	2a00      	cmp	r2, #0
 800af08:	d1e7      	bne.n	800aeda <rclc_executor_spin_some.part.0+0x2ba>
 800af0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0c3      	beq.n	800ae9a <rclc_executor_spin_some.part.0+0x27a>
 800af12:	e7e2      	b.n	800aeda <rclc_executor_spin_some.part.0+0x2ba>
 800af14:	270b      	movs	r7, #11
 800af16:	e77d      	b.n	800ae14 <rclc_executor_spin_some.part.0+0x1f4>
 800af18:	686a      	ldr	r2, [r5, #4]
 800af1a:	e6e2      	b.n	800ace2 <rclc_executor_spin_some.part.0+0xc2>
 800af1c:	686a      	ldr	r2, [r5, #4]
 800af1e:	e7a2      	b.n	800ae66 <rclc_executor_spin_some.part.0+0x246>
 800af20:	6842      	ldr	r2, [r0, #4]
 800af22:	6a11      	ldr	r1, [r2, #32]
 800af24:	2900      	cmp	r1, #0
 800af26:	f47f af21 	bne.w	800ad6c <rclc_executor_spin_some.part.0+0x14c>
 800af2a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800af2e:	2a00      	cmp	r2, #0
 800af30:	f43f af0a 	beq.w	800ad48 <rclc_executor_spin_some.part.0+0x128>
 800af34:	e71a      	b.n	800ad6c <rclc_executor_spin_some.part.0+0x14c>
 800af36:	6842      	ldr	r2, [r0, #4]
 800af38:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800af3a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800af3e:	f47f af15 	bne.w	800ad6c <rclc_executor_spin_some.part.0+0x14c>
 800af42:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800af46:	2900      	cmp	r1, #0
 800af48:	f47f af10 	bne.w	800ad6c <rclc_executor_spin_some.part.0+0x14c>
 800af4c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800af50:	2a00      	cmp	r2, #0
 800af52:	f43f aef9 	beq.w	800ad48 <rclc_executor_spin_some.part.0+0x128>
 800af56:	e709      	b.n	800ad6c <rclc_executor_spin_some.part.0+0x14c>
 800af58:	686a      	ldr	r2, [r5, #4]
 800af5a:	461c      	mov	r4, r3
 800af5c:	e783      	b.n	800ae66 <rclc_executor_spin_some.part.0+0x246>
 800af5e:	686a      	ldr	r2, [r5, #4]
 800af60:	461c      	mov	r4, r3
 800af62:	e6be      	b.n	800ace2 <rclc_executor_spin_some.part.0+0xc2>

0800af64 <rclc_executor_spin>:
 800af64:	b1d0      	cbz	r0, 800af9c <rclc_executor_spin+0x38>
 800af66:	b510      	push	{r4, lr}
 800af68:	4604      	mov	r4, r0
 800af6a:	b082      	sub	sp, #8
 800af6c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800af70:	6820      	ldr	r0, [r4, #0]
 800af72:	e9cd 2300 	strd	r2, r3, [sp]
 800af76:	f006 f8b7 	bl	80110e8 <rcl_context_is_valid>
 800af7a:	4601      	mov	r1, r0
 800af7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af80:	4620      	mov	r0, r4
 800af82:	b131      	cbz	r1, 800af92 <rclc_executor_spin+0x2e>
 800af84:	f7ff fe4c 	bl	800ac20 <rclc_executor_spin_some.part.0>
 800af88:	f030 0302 	bics.w	r3, r0, #2
 800af8c:	d0ee      	beq.n	800af6c <rclc_executor_spin+0x8>
 800af8e:	b002      	add	sp, #8
 800af90:	bd10      	pop	{r4, pc}
 800af92:	f000 f965 	bl	800b260 <rcutils_reset_error>
 800af96:	2001      	movs	r0, #1
 800af98:	b002      	add	sp, #8
 800af9a:	bd10      	pop	{r4, pc}
 800af9c:	200b      	movs	r0, #11
 800af9e:	4770      	bx	lr

0800afa0 <rclc_executor_handle_counters_zero_init>:
 800afa0:	b130      	cbz	r0, 800afb0 <rclc_executor_handle_counters_zero_init+0x10>
 800afa2:	b508      	push	{r3, lr}
 800afa4:	2220      	movs	r2, #32
 800afa6:	2100      	movs	r1, #0
 800afa8:	f00b feb6 	bl	8016d18 <memset>
 800afac:	2000      	movs	r0, #0
 800afae:	bd08      	pop	{r3, pc}
 800afb0:	200b      	movs	r0, #11
 800afb2:	4770      	bx	lr
 800afb4:	0000      	movs	r0, r0
	...

0800afb8 <rclc_executor_handle_init>:
 800afb8:	b168      	cbz	r0, 800afd6 <rclc_executor_handle_init+0x1e>
 800afba:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800afe0 <rclc_executor_handle_init+0x28>
 800afbe:	2300      	movs	r3, #0
 800afc0:	220b      	movs	r2, #11
 800afc2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800afc6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800afca:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800afce:	8002      	strh	r2, [r0, #0]
 800afd0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800afd2:	4618      	mov	r0, r3
 800afd4:	4770      	bx	lr
 800afd6:	200b      	movs	r0, #11
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	f3af 8000 	nop.w
	...

0800afe8 <rclc_support_init_with_options>:
 800afe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afec:	b083      	sub	sp, #12
 800afee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aff0:	b340      	cbz	r0, 800b044 <rclc_support_init_with_options+0x5c>
 800aff2:	461d      	mov	r5, r3
 800aff4:	b333      	cbz	r3, 800b044 <rclc_support_init_with_options+0x5c>
 800aff6:	b32e      	cbz	r6, 800b044 <rclc_support_init_with_options+0x5c>
 800aff8:	46e9      	mov	r9, sp
 800affa:	4604      	mov	r4, r0
 800affc:	4648      	mov	r0, r9
 800affe:	460f      	mov	r7, r1
 800b000:	4690      	mov	r8, r2
 800b002:	f006 f867 	bl	80110d4 <rcl_get_zero_initialized_context>
 800b006:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b00a:	462a      	mov	r2, r5
 800b00c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b010:	4623      	mov	r3, r4
 800b012:	4641      	mov	r1, r8
 800b014:	4638      	mov	r0, r7
 800b016:	f006 f8cd 	bl	80111b4 <rcl_init>
 800b01a:	4605      	mov	r5, r0
 800b01c:	b960      	cbnz	r0, 800b038 <rclc_support_init_with_options+0x50>
 800b01e:	60a6      	str	r6, [r4, #8]
 800b020:	4632      	mov	r2, r6
 800b022:	f104 010c 	add.w	r1, r4, #12
 800b026:	2003      	movs	r0, #3
 800b028:	f006 fe1a 	bl	8011c60 <rcl_clock_init>
 800b02c:	4605      	mov	r5, r0
 800b02e:	b918      	cbnz	r0, 800b038 <rclc_support_init_with_options+0x50>
 800b030:	4628      	mov	r0, r5
 800b032:	b003      	add	sp, #12
 800b034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b038:	f000 f912 	bl	800b260 <rcutils_reset_error>
 800b03c:	4628      	mov	r0, r5
 800b03e:	b003      	add	sp, #12
 800b040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b044:	250b      	movs	r5, #11
 800b046:	4628      	mov	r0, r5
 800b048:	b003      	add	sp, #12
 800b04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b04e:	bf00      	nop

0800b050 <rclc_node_init_default>:
 800b050:	b3b8      	cbz	r0, 800b0c2 <rclc_node_init_default+0x72>
 800b052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b056:	460d      	mov	r5, r1
 800b058:	b0a1      	sub	sp, #132	@ 0x84
 800b05a:	b329      	cbz	r1, 800b0a8 <rclc_node_init_default+0x58>
 800b05c:	4616      	mov	r6, r2
 800b05e:	b31a      	cbz	r2, 800b0a8 <rclc_node_init_default+0x58>
 800b060:	461f      	mov	r7, r3
 800b062:	b30b      	cbz	r3, 800b0a8 <rclc_node_init_default+0x58>
 800b064:	f10d 0810 	add.w	r8, sp, #16
 800b068:	4604      	mov	r4, r0
 800b06a:	4640      	mov	r0, r8
 800b06c:	f006 f9c8 	bl	8011400 <rcl_get_zero_initialized_node>
 800b070:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b074:	f10d 0918 	add.w	r9, sp, #24
 800b078:	e884 0003 	stmia.w	r4, {r0, r1}
 800b07c:	4648      	mov	r0, r9
 800b07e:	f006 fb37 	bl	80116f0 <rcl_node_get_default_options>
 800b082:	4640      	mov	r0, r8
 800b084:	f006 f9bc 	bl	8011400 <rcl_get_zero_initialized_node>
 800b088:	f8cd 9000 	str.w	r9, [sp]
 800b08c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b090:	463b      	mov	r3, r7
 800b092:	e884 0003 	stmia.w	r4, {r0, r1}
 800b096:	4632      	mov	r2, r6
 800b098:	4629      	mov	r1, r5
 800b09a:	4620      	mov	r0, r4
 800b09c:	f006 f9ba 	bl	8011414 <rcl_node_init>
 800b0a0:	b930      	cbnz	r0, 800b0b0 <rclc_node_init_default+0x60>
 800b0a2:	b021      	add	sp, #132	@ 0x84
 800b0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0a8:	200b      	movs	r0, #11
 800b0aa:	b021      	add	sp, #132	@ 0x84
 800b0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0b0:	9003      	str	r0, [sp, #12]
 800b0b2:	f000 f8d5 	bl	800b260 <rcutils_reset_error>
 800b0b6:	f000 f8d3 	bl	800b260 <rcutils_reset_error>
 800b0ba:	9803      	ldr	r0, [sp, #12]
 800b0bc:	b021      	add	sp, #132	@ 0x84
 800b0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0c2:	200b      	movs	r0, #11
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop

0800b0c8 <rclc_publisher_init_best_effort>:
 800b0c8:	b368      	cbz	r0, 800b126 <rclc_publisher_init_best_effort+0x5e>
 800b0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	b0a0      	sub	sp, #128	@ 0x80
 800b0d2:	b321      	cbz	r1, 800b11e <rclc_publisher_init_best_effort+0x56>
 800b0d4:	4616      	mov	r6, r2
 800b0d6:	b312      	cbz	r2, 800b11e <rclc_publisher_init_best_effort+0x56>
 800b0d8:	461f      	mov	r7, r3
 800b0da:	b303      	cbz	r3, 800b11e <rclc_publisher_init_best_effort+0x56>
 800b0dc:	4604      	mov	r4, r0
 800b0de:	f7ff f859 	bl	800a194 <rcl_get_zero_initialized_publisher>
 800b0e2:	f10d 0810 	add.w	r8, sp, #16
 800b0e6:	6020      	str	r0, [r4, #0]
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	f7ff f8ef 	bl	800a2cc <rcl_publisher_get_default_options>
 800b0ee:	490f      	ldr	r1, [pc, #60]	@ (800b12c <rclc_publisher_init_best_effort+0x64>)
 800b0f0:	2250      	movs	r2, #80	@ 0x50
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	f00b fed9 	bl	8016eaa <memcpy>
 800b0f8:	f8cd 8000 	str.w	r8, [sp]
 800b0fc:	463b      	mov	r3, r7
 800b0fe:	4632      	mov	r2, r6
 800b100:	4629      	mov	r1, r5
 800b102:	4620      	mov	r0, r4
 800b104:	f7ff f84c 	bl	800a1a0 <rcl_publisher_init>
 800b108:	b910      	cbnz	r0, 800b110 <rclc_publisher_init_best_effort+0x48>
 800b10a:	b020      	add	sp, #128	@ 0x80
 800b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b110:	9003      	str	r0, [sp, #12]
 800b112:	f000 f8a5 	bl	800b260 <rcutils_reset_error>
 800b116:	9803      	ldr	r0, [sp, #12]
 800b118:	b020      	add	sp, #128	@ 0x80
 800b11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11e:	200b      	movs	r0, #11
 800b120:	b020      	add	sp, #128	@ 0x80
 800b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b126:	200b      	movs	r0, #11
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	08017e68 	.word	0x08017e68

0800b130 <rclc_timer_init_default>:
 800b130:	b360      	cbz	r0, 800b18c <rclc_timer_init_default+0x5c>
 800b132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b136:	460e      	mov	r6, r1
 800b138:	b08a      	sub	sp, #40	@ 0x28
 800b13a:	b319      	cbz	r1, 800b184 <rclc_timer_init_default+0x54>
 800b13c:	4690      	mov	r8, r2
 800b13e:	461f      	mov	r7, r3
 800b140:	4605      	mov	r5, r0
 800b142:	f006 ff6b 	bl	801201c <rcl_get_zero_initialized_timer>
 800b146:	68b4      	ldr	r4, [r6, #8]
 800b148:	6028      	str	r0, [r5, #0]
 800b14a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b14c:	f10d 0c0c 	add.w	ip, sp, #12
 800b150:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	f8cc 3000 	str.w	r3, [ip]
 800b15a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b15c:	9302      	str	r3, [sp, #8]
 800b15e:	e9cd 8700 	strd	r8, r7, [sp]
 800b162:	4628      	mov	r0, r5
 800b164:	4632      	mov	r2, r6
 800b166:	f106 010c 	add.w	r1, r6, #12
 800b16a:	f006 ff5d 	bl	8012028 <rcl_timer_init>
 800b16e:	b910      	cbnz	r0, 800b176 <rclc_timer_init_default+0x46>
 800b170:	b00a      	add	sp, #40	@ 0x28
 800b172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b176:	9009      	str	r0, [sp, #36]	@ 0x24
 800b178:	f000 f872 	bl	800b260 <rcutils_reset_error>
 800b17c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b17e:	b00a      	add	sp, #40	@ 0x28
 800b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b184:	200b      	movs	r0, #11
 800b186:	b00a      	add	sp, #40	@ 0x28
 800b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b18c:	200b      	movs	r0, #11
 800b18e:	4770      	bx	lr

0800b190 <__default_zero_allocate>:
 800b190:	f00b b9d8 	b.w	8016544 <calloc>

0800b194 <__default_reallocate>:
 800b194:	f00b bb64 	b.w	8016860 <realloc>

0800b198 <__default_deallocate>:
 800b198:	f00b ba40 	b.w	801661c <free>

0800b19c <__default_allocate>:
 800b19c:	f00b ba36 	b.w	801660c <malloc>

0800b1a0 <rcutils_get_zero_initialized_allocator>:
 800b1a0:	b510      	push	{r4, lr}
 800b1a2:	4c05      	ldr	r4, [pc, #20]	@ (800b1b8 <rcutils_get_zero_initialized_allocator+0x18>)
 800b1a4:	4686      	mov	lr, r0
 800b1a6:	4684      	mov	ip, r0
 800b1a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b1aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	f8cc 3000 	str.w	r3, [ip]
 800b1b4:	4670      	mov	r0, lr
 800b1b6:	bd10      	pop	{r4, pc}
 800b1b8:	08017eb8 	.word	0x08017eb8

0800b1bc <rcutils_set_default_allocator>:
 800b1bc:	b1a8      	cbz	r0, 800b1ea <rcutils_set_default_allocator+0x2e>
 800b1be:	6802      	ldr	r2, [r0, #0]
 800b1c0:	b1a2      	cbz	r2, 800b1ec <rcutils_set_default_allocator+0x30>
 800b1c2:	6841      	ldr	r1, [r0, #4]
 800b1c4:	b1a1      	cbz	r1, 800b1f0 <rcutils_set_default_allocator+0x34>
 800b1c6:	b410      	push	{r4}
 800b1c8:	68c4      	ldr	r4, [r0, #12]
 800b1ca:	b164      	cbz	r4, 800b1e6 <rcutils_set_default_allocator+0x2a>
 800b1cc:	6880      	ldr	r0, [r0, #8]
 800b1ce:	b138      	cbz	r0, 800b1e0 <rcutils_set_default_allocator+0x24>
 800b1d0:	4b08      	ldr	r3, [pc, #32]	@ (800b1f4 <rcutils_set_default_allocator+0x38>)
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b1da:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b1de:	2001      	movs	r0, #1
 800b1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	e7fa      	b.n	800b1e0 <rcutils_set_default_allocator+0x24>
 800b1ea:	4770      	bx	lr
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	4770      	bx	lr
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	4770      	bx	lr
 800b1f4:	20000014 	.word	0x20000014

0800b1f8 <rcutils_get_default_allocator>:
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	4c05      	ldr	r4, [pc, #20]	@ (800b210 <rcutils_get_default_allocator+0x18>)
 800b1fc:	4686      	mov	lr, r0
 800b1fe:	4684      	mov	ip, r0
 800b200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b202:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	f8cc 3000 	str.w	r3, [ip]
 800b20c:	4670      	mov	r0, lr
 800b20e:	bd10      	pop	{r4, pc}
 800b210:	20000014 	.word	0x20000014

0800b214 <rcutils_allocator_is_valid>:
 800b214:	b158      	cbz	r0, 800b22e <rcutils_allocator_is_valid+0x1a>
 800b216:	6803      	ldr	r3, [r0, #0]
 800b218:	b143      	cbz	r3, 800b22c <rcutils_allocator_is_valid+0x18>
 800b21a:	6843      	ldr	r3, [r0, #4]
 800b21c:	b133      	cbz	r3, 800b22c <rcutils_allocator_is_valid+0x18>
 800b21e:	68c3      	ldr	r3, [r0, #12]
 800b220:	b123      	cbz	r3, 800b22c <rcutils_allocator_is_valid+0x18>
 800b222:	6880      	ldr	r0, [r0, #8]
 800b224:	3800      	subs	r0, #0
 800b226:	bf18      	it	ne
 800b228:	2001      	movne	r0, #1
 800b22a:	4770      	bx	lr
 800b22c:	4618      	mov	r0, r3
 800b22e:	4770      	bx	lr

0800b230 <rcutils_get_error_string>:
 800b230:	4b06      	ldr	r3, [pc, #24]	@ (800b24c <rcutils_get_error_string+0x1c>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	b13b      	cbz	r3, 800b246 <rcutils_get_error_string+0x16>
 800b236:	4b06      	ldr	r3, [pc, #24]	@ (800b250 <rcutils_get_error_string+0x20>)
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	b90a      	cbnz	r2, 800b240 <rcutils_get_error_string+0x10>
 800b23c:	2201      	movs	r2, #1
 800b23e:	701a      	strb	r2, [r3, #0]
 800b240:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <rcutils_get_error_string+0x24>)
 800b242:	7818      	ldrb	r0, [r3, #0]
 800b244:	4770      	bx	lr
 800b246:	4b04      	ldr	r3, [pc, #16]	@ (800b258 <rcutils_get_error_string+0x28>)
 800b248:	7818      	ldrb	r0, [r3, #0]
 800b24a:	4770      	bx	lr
 800b24c:	200080c8 	.word	0x200080c8
 800b250:	200080e1 	.word	0x200080e1
 800b254:	200080e0 	.word	0x200080e0
 800b258:	08017ecc 	.word	0x08017ecc
 800b25c:	00000000 	.word	0x00000000

0800b260 <rcutils_reset_error>:
 800b260:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b280 <rcutils_reset_error+0x20>
 800b264:	4a08      	ldr	r2, [pc, #32]	@ (800b288 <rcutils_reset_error+0x28>)
 800b266:	4809      	ldr	r0, [pc, #36]	@ (800b28c <rcutils_reset_error+0x2c>)
 800b268:	4909      	ldr	r1, [pc, #36]	@ (800b290 <rcutils_reset_error+0x30>)
 800b26a:	2300      	movs	r3, #0
 800b26c:	8013      	strh	r3, [r2, #0]
 800b26e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b272:	4a08      	ldr	r2, [pc, #32]	@ (800b294 <rcutils_reset_error+0x34>)
 800b274:	7003      	strb	r3, [r0, #0]
 800b276:	700b      	strb	r3, [r1, #0]
 800b278:	7013      	strb	r3, [r2, #0]
 800b27a:	4770      	bx	lr
 800b27c:	f3af 8000 	nop.w
	...
 800b288:	200080d0 	.word	0x200080d0
 800b28c:	200080e1 	.word	0x200080e1
 800b290:	200080e0 	.word	0x200080e0
 800b294:	200080c8 	.word	0x200080c8

0800b298 <rcutils_system_time_now>:
 800b298:	b308      	cbz	r0, 800b2de <rcutils_system_time_now+0x46>
 800b29a:	b570      	push	{r4, r5, r6, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4669      	mov	r1, sp
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	f7f6 fa5c 	bl	8001760 <clock_gettime>
 800b2a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b2ac:	2d00      	cmp	r5, #0
 800b2ae:	db13      	blt.n	800b2d8 <rcutils_system_time_now+0x40>
 800b2b0:	9902      	ldr	r1, [sp, #8]
 800b2b2:	2900      	cmp	r1, #0
 800b2b4:	db0d      	blt.n	800b2d2 <rcutils_system_time_now+0x3a>
 800b2b6:	4e0b      	ldr	r6, [pc, #44]	@ (800b2e4 <rcutils_system_time_now+0x4c>)
 800b2b8:	fba3 3206 	umull	r3, r2, r3, r6
 800b2bc:	185b      	adds	r3, r3, r1
 800b2be:	fb06 2205 	mla	r2, r6, r5, r2
 800b2c2:	f04f 0000 	mov.w	r0, #0
 800b2c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b2ca:	e9c4 3200 	strd	r3, r2, [r4]
 800b2ce:	b004      	add	sp, #16
 800b2d0:	bd70      	pop	{r4, r5, r6, pc}
 800b2d2:	ea53 0205 	orrs.w	r2, r3, r5
 800b2d6:	d1ee      	bne.n	800b2b6 <rcutils_system_time_now+0x1e>
 800b2d8:	2002      	movs	r0, #2
 800b2da:	b004      	add	sp, #16
 800b2dc:	bd70      	pop	{r4, r5, r6, pc}
 800b2de:	200b      	movs	r0, #11
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	3b9aca00 	.word	0x3b9aca00

0800b2e8 <rcutils_steady_time_now>:
 800b2e8:	b308      	cbz	r0, 800b32e <rcutils_steady_time_now+0x46>
 800b2ea:	b570      	push	{r4, r5, r6, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4669      	mov	r1, sp
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	f7f6 fa34 	bl	8001760 <clock_gettime>
 800b2f8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b2fc:	2d00      	cmp	r5, #0
 800b2fe:	db13      	blt.n	800b328 <rcutils_steady_time_now+0x40>
 800b300:	9902      	ldr	r1, [sp, #8]
 800b302:	2900      	cmp	r1, #0
 800b304:	db0d      	blt.n	800b322 <rcutils_steady_time_now+0x3a>
 800b306:	4e0b      	ldr	r6, [pc, #44]	@ (800b334 <rcutils_steady_time_now+0x4c>)
 800b308:	fba3 3206 	umull	r3, r2, r3, r6
 800b30c:	185b      	adds	r3, r3, r1
 800b30e:	fb06 2205 	mla	r2, r6, r5, r2
 800b312:	f04f 0000 	mov.w	r0, #0
 800b316:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b31a:	e9c4 3200 	strd	r3, r2, [r4]
 800b31e:	b004      	add	sp, #16
 800b320:	bd70      	pop	{r4, r5, r6, pc}
 800b322:	ea53 0205 	orrs.w	r2, r3, r5
 800b326:	d1ee      	bne.n	800b306 <rcutils_steady_time_now+0x1e>
 800b328:	2002      	movs	r0, #2
 800b32a:	b004      	add	sp, #16
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
 800b32e:	200b      	movs	r0, #11
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	3b9aca00 	.word	0x3b9aca00

0800b338 <rmw_get_zero_initialized_init_options>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	2238      	movs	r2, #56	@ 0x38
 800b33c:	4604      	mov	r4, r0
 800b33e:	2100      	movs	r1, #0
 800b340:	f00b fcea 	bl	8016d18 <memset>
 800b344:	f104 0010 	add.w	r0, r4, #16
 800b348:	f000 f80a 	bl	800b360 <rmw_get_default_security_options>
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b350:	60e3      	str	r3, [r4, #12]
 800b352:	4620      	mov	r0, r4
 800b354:	bd10      	pop	{r4, pc}
 800b356:	bf00      	nop

0800b358 <rmw_get_default_publisher_options>:
 800b358:	2200      	movs	r2, #0
 800b35a:	6002      	str	r2, [r0, #0]
 800b35c:	7102      	strb	r2, [r0, #4]
 800b35e:	4770      	bx	lr

0800b360 <rmw_get_default_security_options>:
 800b360:	2200      	movs	r2, #0
 800b362:	7002      	strb	r2, [r0, #0]
 800b364:	6042      	str	r2, [r0, #4]
 800b366:	4770      	bx	lr

0800b368 <rmw_uros_set_custom_transport>:
 800b368:	b470      	push	{r4, r5, r6}
 800b36a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b36e:	b162      	cbz	r2, 800b38a <rmw_uros_set_custom_transport+0x22>
 800b370:	b15b      	cbz	r3, 800b38a <rmw_uros_set_custom_transport+0x22>
 800b372:	b155      	cbz	r5, 800b38a <rmw_uros_set_custom_transport+0x22>
 800b374:	b14e      	cbz	r6, 800b38a <rmw_uros_set_custom_transport+0x22>
 800b376:	4c06      	ldr	r4, [pc, #24]	@ (800b390 <rmw_uros_set_custom_transport+0x28>)
 800b378:	7020      	strb	r0, [r4, #0]
 800b37a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b37e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b382:	6166      	str	r6, [r4, #20]
 800b384:	2000      	movs	r0, #0
 800b386:	bc70      	pop	{r4, r5, r6}
 800b388:	4770      	bx	lr
 800b38a:	200b      	movs	r0, #11
 800b38c:	bc70      	pop	{r4, r5, r6}
 800b38e:	4770      	bx	lr
 800b390:	200080e4 	.word	0x200080e4

0800b394 <rmw_init_options_init>:
 800b394:	b084      	sub	sp, #16
 800b396:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b398:	b083      	sub	sp, #12
 800b39a:	ad09      	add	r5, sp, #36	@ 0x24
 800b39c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b3a0:	b130      	cbz	r0, 800b3b0 <rmw_init_options_init+0x1c>
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	f7ff ff35 	bl	800b214 <rcutils_allocator_is_valid>
 800b3aa:	b108      	cbz	r0, 800b3b0 <rmw_init_options_init+0x1c>
 800b3ac:	68a6      	ldr	r6, [r4, #8]
 800b3ae:	b12e      	cbz	r6, 800b3bc <rmw_init_options_init+0x28>
 800b3b0:	200b      	movs	r0, #11
 800b3b2:	b003      	add	sp, #12
 800b3b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b3b8:	b004      	add	sp, #16
 800b3ba:	4770      	bx	lr
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e9c4 2300 	strd	r2, r3, [r4]
 800b3c4:	4b22      	ldr	r3, [pc, #136]	@ (800b450 <rmw_init_options_init+0xbc>)
 800b3c6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800b460 <rmw_init_options_init+0xcc>
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	60a3      	str	r3, [r4, #8]
 800b3ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3d0:	f104 0c20 	add.w	ip, r4, #32
 800b3d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b3d8:	466f      	mov	r7, sp
 800b3da:	682b      	ldr	r3, [r5, #0]
 800b3dc:	f8cc 3000 	str.w	r3, [ip]
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800b3e6:	60e6      	str	r6, [r4, #12]
 800b3e8:	f7ff ffba 	bl	800b360 <rmw_get_default_security_options>
 800b3ec:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b3f0:	f104 0310 	add.w	r3, r4, #16
 800b3f4:	e883 0003 	stmia.w	r3, {r0, r1}
 800b3f8:	2203      	movs	r2, #3
 800b3fa:	4816      	ldr	r0, [pc, #88]	@ (800b454 <rmw_init_options_init+0xc0>)
 800b3fc:	4916      	ldr	r1, [pc, #88]	@ (800b458 <rmw_init_options_init+0xc4>)
 800b3fe:	7626      	strb	r6, [r4, #24]
 800b400:	f000 febc 	bl	800c17c <rmw_uxrce_init_init_options_impl_memory>
 800b404:	4813      	ldr	r0, [pc, #76]	@ (800b454 <rmw_init_options_init+0xc0>)
 800b406:	f009 f993 	bl	8014730 <get_memory>
 800b40a:	b1f0      	cbz	r0, 800b44a <rmw_init_options_init+0xb6>
 800b40c:	4a13      	ldr	r2, [pc, #76]	@ (800b45c <rmw_init_options_init+0xc8>)
 800b40e:	6883      	ldr	r3, [r0, #8]
 800b410:	6851      	ldr	r1, [r2, #4]
 800b412:	7810      	ldrb	r0, [r2, #0]
 800b414:	6363      	str	r3, [r4, #52]	@ 0x34
 800b416:	7418      	strb	r0, [r3, #16]
 800b418:	6159      	str	r1, [r3, #20]
 800b41a:	68d1      	ldr	r1, [r2, #12]
 800b41c:	61d9      	str	r1, [r3, #28]
 800b41e:	6911      	ldr	r1, [r2, #16]
 800b420:	6219      	str	r1, [r3, #32]
 800b422:	6951      	ldr	r1, [r2, #20]
 800b424:	6892      	ldr	r2, [r2, #8]
 800b426:	619a      	str	r2, [r3, #24]
 800b428:	6259      	str	r1, [r3, #36]	@ 0x24
 800b42a:	f004 fc67 	bl	800fcfc <uxr_nanos>
 800b42e:	f00b f9ab 	bl	8016788 <srand>
 800b432:	f00b f9d7 	bl	80167e4 <rand>
 800b436:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b438:	6298      	str	r0, [r3, #40]	@ 0x28
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d0f9      	beq.n	800b432 <rmw_init_options_init+0x9e>
 800b43e:	2000      	movs	r0, #0
 800b440:	b003      	add	sp, #12
 800b442:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b446:	b004      	add	sp, #16
 800b448:	4770      	bx	lr
 800b44a:	2001      	movs	r0, #1
 800b44c:	e7b1      	b.n	800b3b2 <rmw_init_options_init+0x1e>
 800b44e:	bf00      	nop
 800b450:	080188c8 	.word	0x080188c8
 800b454:	2000c9fc 	.word	0x2000c9fc
 800b458:	20008298 	.word	0x20008298
 800b45c:	200080e4 	.word	0x200080e4
 800b460:	08017ed0 	.word	0x08017ed0

0800b464 <rmw_init_options_copy>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	b158      	cbz	r0, 800b480 <rmw_init_options_copy+0x1c>
 800b468:	460d      	mov	r5, r1
 800b46a:	b149      	cbz	r1, 800b480 <rmw_init_options_copy+0x1c>
 800b46c:	4604      	mov	r4, r0
 800b46e:	6880      	ldr	r0, [r0, #8]
 800b470:	b120      	cbz	r0, 800b47c <rmw_init_options_copy+0x18>
 800b472:	4b1e      	ldr	r3, [pc, #120]	@ (800b4ec <rmw_init_options_copy+0x88>)
 800b474:	6819      	ldr	r1, [r3, #0]
 800b476:	f7f4 fed3 	bl	8000220 <strcmp>
 800b47a:	bb90      	cbnz	r0, 800b4e2 <rmw_init_options_copy+0x7e>
 800b47c:	68ab      	ldr	r3, [r5, #8]
 800b47e:	b113      	cbz	r3, 800b486 <rmw_init_options_copy+0x22>
 800b480:	250b      	movs	r5, #11
 800b482:	4628      	mov	r0, r5
 800b484:	bd70      	pop	{r4, r5, r6, pc}
 800b486:	4623      	mov	r3, r4
 800b488:	462a      	mov	r2, r5
 800b48a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800b48e:	f8d3 c000 	ldr.w	ip, [r3]
 800b492:	6858      	ldr	r0, [r3, #4]
 800b494:	6899      	ldr	r1, [r3, #8]
 800b496:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b49a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b49e:	3310      	adds	r3, #16
 800b4a0:	42b3      	cmp	r3, r6
 800b4a2:	f8c2 c000 	str.w	ip, [r2]
 800b4a6:	6050      	str	r0, [r2, #4]
 800b4a8:	6091      	str	r1, [r2, #8]
 800b4aa:	f102 0210 	add.w	r2, r2, #16
 800b4ae:	d1ee      	bne.n	800b48e <rmw_init_options_copy+0x2a>
 800b4b0:	6819      	ldr	r1, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	480e      	ldr	r0, [pc, #56]	@ (800b4f0 <rmw_init_options_copy+0x8c>)
 800b4b6:	6053      	str	r3, [r2, #4]
 800b4b8:	6011      	str	r1, [r2, #0]
 800b4ba:	f009 f939 	bl	8014730 <get_memory>
 800b4be:	b198      	cbz	r0, 800b4e8 <rmw_init_options_copy+0x84>
 800b4c0:	6883      	ldr	r3, [r0, #8]
 800b4c2:	636b      	str	r3, [r5, #52]	@ 0x34
 800b4c4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b4c6:	f102 0c10 	add.w	ip, r2, #16
 800b4ca:	f103 0410 	add.w	r4, r3, #16
 800b4ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4d4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b4d8:	2500      	movs	r5, #0
 800b4da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4de:	4628      	mov	r0, r5
 800b4e0:	bd70      	pop	{r4, r5, r6, pc}
 800b4e2:	250c      	movs	r5, #12
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}
 800b4e8:	2501      	movs	r5, #1
 800b4ea:	e7ca      	b.n	800b482 <rmw_init_options_copy+0x1e>
 800b4ec:	080188c8 	.word	0x080188c8
 800b4f0:	2000c9fc 	.word	0x2000c9fc

0800b4f4 <rmw_init_options_fini>:
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d03d      	beq.n	800b574 <rmw_init_options_fini+0x80>
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	b08e      	sub	sp, #56	@ 0x38
 800b4fe:	3020      	adds	r0, #32
 800b500:	f7ff fe88 	bl	800b214 <rcutils_allocator_is_valid>
 800b504:	b360      	cbz	r0, 800b560 <rmw_init_options_fini+0x6c>
 800b506:	68a0      	ldr	r0, [r4, #8]
 800b508:	b120      	cbz	r0, 800b514 <rmw_init_options_fini+0x20>
 800b50a:	4b1c      	ldr	r3, [pc, #112]	@ (800b57c <rmw_init_options_fini+0x88>)
 800b50c:	6819      	ldr	r1, [r3, #0]
 800b50e:	f7f4 fe87 	bl	8000220 <strcmp>
 800b512:	bb68      	cbnz	r0, 800b570 <rmw_init_options_fini+0x7c>
 800b514:	4b1a      	ldr	r3, [pc, #104]	@ (800b580 <rmw_init_options_fini+0x8c>)
 800b516:	6819      	ldr	r1, [r3, #0]
 800b518:	b331      	cbz	r1, 800b568 <rmw_init_options_fini+0x74>
 800b51a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b51c:	e001      	b.n	800b522 <rmw_init_options_fini+0x2e>
 800b51e:	6849      	ldr	r1, [r1, #4]
 800b520:	b311      	cbz	r1, 800b568 <rmw_init_options_fini+0x74>
 800b522:	688b      	ldr	r3, [r1, #8]
 800b524:	429a      	cmp	r2, r3
 800b526:	d1fa      	bne.n	800b51e <rmw_init_options_fini+0x2a>
 800b528:	4815      	ldr	r0, [pc, #84]	@ (800b580 <rmw_init_options_fini+0x8c>)
 800b52a:	f009 f911 	bl	8014750 <put_memory>
 800b52e:	4668      	mov	r0, sp
 800b530:	f7ff ff02 	bl	800b338 <rmw_get_zero_initialized_init_options>
 800b534:	46ee      	mov	lr, sp
 800b536:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b53a:	46a4      	mov	ip, r4
 800b53c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b540:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b544:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b548:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b54c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b550:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b554:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b558:	2300      	movs	r3, #0
 800b55a:	4618      	mov	r0, r3
 800b55c:	b00e      	add	sp, #56	@ 0x38
 800b55e:	bd10      	pop	{r4, pc}
 800b560:	230b      	movs	r3, #11
 800b562:	4618      	mov	r0, r3
 800b564:	b00e      	add	sp, #56	@ 0x38
 800b566:	bd10      	pop	{r4, pc}
 800b568:	2301      	movs	r3, #1
 800b56a:	4618      	mov	r0, r3
 800b56c:	b00e      	add	sp, #56	@ 0x38
 800b56e:	bd10      	pop	{r4, pc}
 800b570:	230c      	movs	r3, #12
 800b572:	e7f2      	b.n	800b55a <rmw_init_options_fini+0x66>
 800b574:	230b      	movs	r3, #11
 800b576:	4618      	mov	r0, r3
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	080188c8 	.word	0x080188c8
 800b580:	2000c9fc 	.word	0x2000c9fc

0800b584 <rmw_init>:
 800b584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b588:	b083      	sub	sp, #12
 800b58a:	2800      	cmp	r0, #0
 800b58c:	f000 80d3 	beq.w	800b736 <rmw_init+0x1b2>
 800b590:	460e      	mov	r6, r1
 800b592:	2900      	cmp	r1, #0
 800b594:	f000 80cf 	beq.w	800b736 <rmw_init+0x1b2>
 800b598:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b59a:	4605      	mov	r5, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 80ca 	beq.w	800b736 <rmw_init+0x1b2>
 800b5a2:	4b78      	ldr	r3, [pc, #480]	@ (800b784 <rmw_init+0x200>)
 800b5a4:	6880      	ldr	r0, [r0, #8]
 800b5a6:	681f      	ldr	r7, [r3, #0]
 800b5a8:	b128      	cbz	r0, 800b5b6 <rmw_init+0x32>
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f4 fe38 	bl	8000220 <strcmp>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f040 80ca 	bne.w	800b74a <rmw_init+0x1c6>
 800b5b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5ba:	4c73      	ldr	r4, [pc, #460]	@ (800b788 <rmw_init+0x204>)
 800b5bc:	4973      	ldr	r1, [pc, #460]	@ (800b78c <rmw_init+0x208>)
 800b5be:	4874      	ldr	r0, [pc, #464]	@ (800b790 <rmw_init+0x20c>)
 800b5c0:	60b7      	str	r7, [r6, #8]
 800b5c2:	e9c6 2300 	strd	r2, r3, [r6]
 800b5c6:	68eb      	ldr	r3, [r5, #12]
 800b5c8:	64b3      	str	r3, [r6, #72]	@ 0x48
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f000 fd76 	bl	800c0bc <rmw_uxrce_init_session_memory>
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	4970      	ldr	r1, [pc, #448]	@ (800b794 <rmw_init+0x210>)
 800b5d4:	2204      	movs	r2, #4
 800b5d6:	f000 fdb1 	bl	800c13c <rmw_uxrce_init_static_input_buffer_memory>
 800b5da:	f04f 0800 	mov.w	r8, #0
 800b5de:	486c      	ldr	r0, [pc, #432]	@ (800b790 <rmw_init+0x20c>)
 800b5e0:	f884 800d 	strb.w	r8, [r4, #13]
 800b5e4:	f009 f8a4 	bl	8014730 <get_memory>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	f000 80a9 	beq.w	800b740 <rmw_init+0x1bc>
 800b5ee:	6884      	ldr	r4, [r0, #8]
 800b5f0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800b5f2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b5f4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800b5f8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b5fc:	9101      	str	r1, [sp, #4]
 800b5fe:	6a00      	ldr	r0, [r0, #32]
 800b600:	9000      	str	r0, [sp, #0]
 800b602:	f104 0910 	add.w	r9, r4, #16
 800b606:	4661      	mov	r1, ip
 800b608:	4648      	mov	r0, r9
 800b60a:	f002 faf9 	bl	800dc00 <uxr_set_custom_transport_callbacks>
 800b60e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b612:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b616:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800b61a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800b61e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800b622:	495d      	ldr	r1, [pc, #372]	@ (800b798 <rmw_init+0x214>)
 800b624:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800b628:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800b62c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800b630:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800b634:	4859      	ldr	r0, [pc, #356]	@ (800b79c <rmw_init+0x218>)
 800b636:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800b63a:	2201      	movs	r2, #1
 800b63c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800b63e:	f000 fd1d 	bl	800c07c <rmw_uxrce_init_node_memory>
 800b642:	4957      	ldr	r1, [pc, #348]	@ (800b7a0 <rmw_init+0x21c>)
 800b644:	4857      	ldr	r0, [pc, #348]	@ (800b7a4 <rmw_init+0x220>)
 800b646:	2205      	movs	r2, #5
 800b648:	f000 fcf8 	bl	800c03c <rmw_uxrce_init_subscription_memory>
 800b64c:	4956      	ldr	r1, [pc, #344]	@ (800b7a8 <rmw_init+0x224>)
 800b64e:	4857      	ldr	r0, [pc, #348]	@ (800b7ac <rmw_init+0x228>)
 800b650:	220a      	movs	r2, #10
 800b652:	f000 fcd3 	bl	800bffc <rmw_uxrce_init_publisher_memory>
 800b656:	4956      	ldr	r1, [pc, #344]	@ (800b7b0 <rmw_init+0x22c>)
 800b658:	4856      	ldr	r0, [pc, #344]	@ (800b7b4 <rmw_init+0x230>)
 800b65a:	2201      	movs	r2, #1
 800b65c:	f000 fc8e 	bl	800bf7c <rmw_uxrce_init_service_memory>
 800b660:	4955      	ldr	r1, [pc, #340]	@ (800b7b8 <rmw_init+0x234>)
 800b662:	4856      	ldr	r0, [pc, #344]	@ (800b7bc <rmw_init+0x238>)
 800b664:	2201      	movs	r2, #1
 800b666:	f000 fca9 	bl	800bfbc <rmw_uxrce_init_client_memory>
 800b66a:	4955      	ldr	r1, [pc, #340]	@ (800b7c0 <rmw_init+0x23c>)
 800b66c:	4855      	ldr	r0, [pc, #340]	@ (800b7c4 <rmw_init+0x240>)
 800b66e:	220f      	movs	r2, #15
 800b670:	f000 fd44 	bl	800c0fc <rmw_uxrce_init_topic_memory>
 800b674:	4954      	ldr	r1, [pc, #336]	@ (800b7c8 <rmw_init+0x244>)
 800b676:	4855      	ldr	r0, [pc, #340]	@ (800b7cc <rmw_init+0x248>)
 800b678:	2203      	movs	r2, #3
 800b67a:	f000 fd7f 	bl	800c17c <rmw_uxrce_init_init_options_impl_memory>
 800b67e:	4954      	ldr	r1, [pc, #336]	@ (800b7d0 <rmw_init+0x24c>)
 800b680:	4854      	ldr	r0, [pc, #336]	@ (800b7d4 <rmw_init+0x250>)
 800b682:	2204      	movs	r2, #4
 800b684:	f000 fd9a 	bl	800c1bc <rmw_uxrce_init_wait_set_memory>
 800b688:	4953      	ldr	r1, [pc, #332]	@ (800b7d8 <rmw_init+0x254>)
 800b68a:	4854      	ldr	r0, [pc, #336]	@ (800b7dc <rmw_init+0x258>)
 800b68c:	2204      	movs	r2, #4
 800b68e:	f000 fdb5 	bl	800c1fc <rmw_uxrce_init_guard_condition_memory>
 800b692:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800b694:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800b696:	4642      	mov	r2, r8
 800b698:	f000 fc38 	bl	800bf0c <rmw_uxrce_transport_init>
 800b69c:	4607      	mov	r7, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d158      	bne.n	800b754 <rmw_init+0x1d0>
 800b6a2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b6a4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800b6a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b6aa:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f002 fca2 	bl	800dff8 <uxr_init_session>
 800b6b4:	494a      	ldr	r1, [pc, #296]	@ (800b7e0 <rmw_init+0x25c>)
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f002 fcc1 	bl	800e040 <uxr_set_topic_callback>
 800b6be:	4949      	ldr	r1, [pc, #292]	@ (800b7e4 <rmw_init+0x260>)
 800b6c0:	463a      	mov	r2, r7
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f002 fcb8 	bl	800e038 <uxr_set_status_callback>
 800b6c8:	4947      	ldr	r1, [pc, #284]	@ (800b7e8 <rmw_init+0x264>)
 800b6ca:	463a      	mov	r2, r7
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f002 fcbb 	bl	800e048 <uxr_set_request_callback>
 800b6d2:	4946      	ldr	r1, [pc, #280]	@ (800b7ec <rmw_init+0x268>)
 800b6d4:	463a      	mov	r2, r7
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f002 fcba 	bl	800e050 <uxr_set_reply_callback>
 800b6dc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	0092      	lsls	r2, r2, #2
 800b6e4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	f002 fcef 	bl	800e0cc <uxr_create_input_reliable_stream>
 800b6ee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b6f2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800b6f6:	0092      	lsls	r2, r2, #2
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800b6fe:	4628      	mov	r0, r5
 800b700:	f002 fcbc 	bl	800e07c <uxr_create_output_reliable_stream>
 800b704:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800b708:	4628      	mov	r0, r5
 800b70a:	f002 fcd9 	bl	800e0c0 <uxr_create_input_best_effort_stream>
 800b70e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800b712:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800b716:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b71a:	3114      	adds	r1, #20
 800b71c:	4628      	mov	r0, r5
 800b71e:	f002 fc9b 	bl	800e058 <uxr_create_output_best_effort_stream>
 800b722:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800b726:	4628      	mov	r0, r5
 800b728:	f003 fa7a 	bl	800ec20 <uxr_create_session>
 800b72c:	b1f8      	cbz	r0, 800b76e <rmw_init+0x1ea>
 800b72e:	4638      	mov	r0, r7
 800b730:	b003      	add	sp, #12
 800b732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b736:	270b      	movs	r7, #11
 800b738:	4638      	mov	r0, r7
 800b73a:	b003      	add	sp, #12
 800b73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b740:	2701      	movs	r7, #1
 800b742:	4638      	mov	r0, r7
 800b744:	b003      	add	sp, #12
 800b746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b74a:	270c      	movs	r7, #12
 800b74c:	4638      	mov	r0, r7
 800b74e:	b003      	add	sp, #12
 800b750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b754:	4648      	mov	r0, r9
 800b756:	f002 fa95 	bl	800dc84 <uxr_close_custom_transport>
 800b75a:	480d      	ldr	r0, [pc, #52]	@ (800b790 <rmw_init+0x20c>)
 800b75c:	4621      	mov	r1, r4
 800b75e:	f008 fff7 	bl	8014750 <put_memory>
 800b762:	4638      	mov	r0, r7
 800b764:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800b768:	b003      	add	sp, #12
 800b76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b76e:	4648      	mov	r0, r9
 800b770:	f002 fa88 	bl	800dc84 <uxr_close_custom_transport>
 800b774:	4806      	ldr	r0, [pc, #24]	@ (800b790 <rmw_init+0x20c>)
 800b776:	4621      	mov	r1, r4
 800b778:	f008 ffea 	bl	8014750 <put_memory>
 800b77c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800b77e:	2701      	movs	r7, #1
 800b780:	e7d5      	b.n	800b72e <rmw_init+0x1aa>
 800b782:	bf00      	nop
 800b784:	080188c8 	.word	0x080188c8
 800b788:	2000ca4c 	.word	0x2000ca4c
 800b78c:	20008cf8 	.word	0x20008cf8
 800b790:	2000ca3c 	.word	0x2000ca3c
 800b794:	2000a2a0 	.word	0x2000a2a0
 800b798:	2000831c 	.word	0x2000831c
 800b79c:	2000ca0c 	.word	0x2000ca0c
 800b7a0:	2000c3a0 	.word	0x2000c3a0
 800b7a4:	2000ca5c 	.word	0x2000ca5c
 800b7a8:	200083c0 	.word	0x200083c0
 800b7ac:	2000ca1c 	.word	0x2000ca1c
 800b7b0:	20008c30 	.word	0x20008c30
 800b7b4:	2000ca2c 	.word	0x2000ca2c
 800b7b8:	20008150 	.word	0x20008150
 800b7bc:	2000813c 	.word	0x2000813c
 800b7c0:	2000c7d8 	.word	0x2000c7d8
 800b7c4:	2000ca6c 	.word	0x2000ca6c
 800b7c8:	20008298 	.word	0x20008298
 800b7cc:	2000c9fc 	.word	0x2000c9fc
 800b7d0:	2000c97c 	.word	0x2000c97c
 800b7d4:	2000ca7c 	.word	0x2000ca7c
 800b7d8:	20008218 	.word	0x20008218
 800b7dc:	2000c9ec 	.word	0x2000c9ec
 800b7e0:	08014569 	.word	0x08014569
 800b7e4:	08014561 	.word	0x08014561
 800b7e8:	08014601 	.word	0x08014601
 800b7ec:	0801469d 	.word	0x0801469d

0800b7f0 <rmw_context_fini>:
 800b7f0:	4b17      	ldr	r3, [pc, #92]	@ (800b850 <rmw_context_fini+0x60>)
 800b7f2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b7f4:	b570      	push	{r4, r5, r6, lr}
 800b7f6:	681c      	ldr	r4, [r3, #0]
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	b334      	cbz	r4, 800b84a <rmw_context_fini+0x5a>
 800b7fc:	2600      	movs	r6, #0
 800b7fe:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800b802:	6902      	ldr	r2, [r0, #16]
 800b804:	428a      	cmp	r2, r1
 800b806:	d018      	beq.n	800b83a <rmw_context_fini+0x4a>
 800b808:	2c00      	cmp	r4, #0
 800b80a:	d1f8      	bne.n	800b7fe <rmw_context_fini+0xe>
 800b80c:	b189      	cbz	r1, 800b832 <rmw_context_fini+0x42>
 800b80e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800b812:	789b      	ldrb	r3, [r3, #2]
 800b814:	2b01      	cmp	r3, #1
 800b816:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800b81a:	bf14      	ite	ne
 800b81c:	210a      	movne	r1, #10
 800b81e:	2100      	moveq	r1, #0
 800b820:	f003 f9d6 	bl	800ebd0 <uxr_delete_session_retries>
 800b824:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b826:	f000 fd09 	bl	800c23c <rmw_uxrce_fini_session_memory>
 800b82a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b82c:	3010      	adds	r0, #16
 800b82e:	f002 fa29 	bl	800dc84 <uxr_close_custom_transport>
 800b832:	2300      	movs	r3, #0
 800b834:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800b836:	4630      	mov	r0, r6
 800b838:	bd70      	pop	{r4, r5, r6, pc}
 800b83a:	3018      	adds	r0, #24
 800b83c:	f000 f89c 	bl	800b978 <rmw_destroy_node>
 800b840:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b842:	4606      	mov	r6, r0
 800b844:	2c00      	cmp	r4, #0
 800b846:	d1da      	bne.n	800b7fe <rmw_context_fini+0xe>
 800b848:	e7e0      	b.n	800b80c <rmw_context_fini+0x1c>
 800b84a:	4626      	mov	r6, r4
 800b84c:	e7de      	b.n	800b80c <rmw_context_fini+0x1c>
 800b84e:	bf00      	nop
 800b850:	2000ca0c 	.word	0x2000ca0c

0800b854 <create_node>:
 800b854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b858:	b083      	sub	sp, #12
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d05f      	beq.n	800b91e <create_node+0xca>
 800b85e:	4606      	mov	r6, r0
 800b860:	4835      	ldr	r0, [pc, #212]	@ (800b938 <create_node+0xe4>)
 800b862:	460f      	mov	r7, r1
 800b864:	4690      	mov	r8, r2
 800b866:	461d      	mov	r5, r3
 800b868:	f008 ff62 	bl	8014730 <get_memory>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d056      	beq.n	800b91e <create_node+0xca>
 800b870:	6884      	ldr	r4, [r0, #8]
 800b872:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	f008 ffc3 	bl	8014800 <rmw_get_implementation_identifier>
 800b87a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800b87e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b882:	f8c4 9020 	str.w	r9, [r4, #32]
 800b886:	4630      	mov	r0, r6
 800b888:	f7f4 fcd4 	bl	8000234 <strlen>
 800b88c:	1c42      	adds	r2, r0, #1
 800b88e:	2a3c      	cmp	r2, #60	@ 0x3c
 800b890:	f104 0518 	add.w	r5, r4, #24
 800b894:	d840      	bhi.n	800b918 <create_node+0xc4>
 800b896:	4648      	mov	r0, r9
 800b898:	4631      	mov	r1, r6
 800b89a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800b89e:	f00b fb04 	bl	8016eaa <memcpy>
 800b8a2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	f7f4 fcc4 	bl	8000234 <strlen>
 800b8ac:	1c42      	adds	r2, r0, #1
 800b8ae:	2a3c      	cmp	r2, #60	@ 0x3c
 800b8b0:	d832      	bhi.n	800b918 <create_node+0xc4>
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	f00b faf8 	bl	8016eaa <memcpy>
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800b8c6:	1842      	adds	r2, r0, r1
 800b8c8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800b8cc:	f002 f9de 	bl	800dc8c <uxr_object_id>
 800b8d0:	6160      	str	r0, [r4, #20]
 800b8d2:	783b      	ldrb	r3, [r7, #0]
 800b8d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8d6:	d127      	bne.n	800b928 <create_node+0xd4>
 800b8d8:	787b      	ldrb	r3, [r7, #1]
 800b8da:	bb2b      	cbnz	r3, 800b928 <create_node+0xd4>
 800b8dc:	4a17      	ldr	r2, [pc, #92]	@ (800b93c <create_node+0xe8>)
 800b8de:	4818      	ldr	r0, [pc, #96]	@ (800b940 <create_node+0xec>)
 800b8e0:	4633      	mov	r3, r6
 800b8e2:	213c      	movs	r1, #60	@ 0x3c
 800b8e4:	f00b f93e 	bl	8016b64 <sniprintf>
 800b8e8:	6920      	ldr	r0, [r4, #16]
 800b8ea:	4915      	ldr	r1, [pc, #84]	@ (800b940 <create_node+0xec>)
 800b8ec:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800b8f0:	9100      	str	r1, [sp, #0]
 800b8f2:	2106      	movs	r1, #6
 800b8f4:	9101      	str	r1, [sp, #4]
 800b8f6:	6811      	ldr	r1, [r2, #0]
 800b8f8:	6962      	ldr	r2, [r4, #20]
 800b8fa:	fa1f f388 	uxth.w	r3, r8
 800b8fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b902:	f001 fff3 	bl	800d8ec <uxr_buffer_create_participant_bin>
 800b906:	4602      	mov	r2, r0
 800b908:	6920      	ldr	r0, [r4, #16]
 800b90a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b90e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b912:	f000 fe0b 	bl	800c52c <run_xrce_session>
 800b916:	b918      	cbnz	r0, 800b920 <create_node+0xcc>
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 fc95 	bl	800c248 <rmw_uxrce_fini_node_memory>
 800b91e:	2500      	movs	r5, #0
 800b920:	4628      	mov	r0, r5
 800b922:	b003      	add	sp, #12
 800b924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b928:	4a06      	ldr	r2, [pc, #24]	@ (800b944 <create_node+0xf0>)
 800b92a:	9600      	str	r6, [sp, #0]
 800b92c:	463b      	mov	r3, r7
 800b92e:	213c      	movs	r1, #60	@ 0x3c
 800b930:	4803      	ldr	r0, [pc, #12]	@ (800b940 <create_node+0xec>)
 800b932:	f00b f917 	bl	8016b64 <sniprintf>
 800b936:	e7d7      	b.n	800b8e8 <create_node+0x94>
 800b938:	2000ca0c 	.word	0x2000ca0c
 800b93c:	08017f10 	.word	0x08017f10
 800b940:	20008100 	.word	0x20008100
 800b944:	08017ed4 	.word	0x08017ed4

0800b948 <rmw_create_node>:
 800b948:	b199      	cbz	r1, 800b972 <rmw_create_node+0x2a>
 800b94a:	780b      	ldrb	r3, [r1, #0]
 800b94c:	468c      	mov	ip, r1
 800b94e:	b183      	cbz	r3, 800b972 <rmw_create_node+0x2a>
 800b950:	b410      	push	{r4}
 800b952:	4614      	mov	r4, r2
 800b954:	b14a      	cbz	r2, 800b96a <rmw_create_node+0x22>
 800b956:	7813      	ldrb	r3, [r2, #0]
 800b958:	b13b      	cbz	r3, 800b96a <rmw_create_node+0x22>
 800b95a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800b95c:	4603      	mov	r3, r0
 800b95e:	4621      	mov	r1, r4
 800b960:	4660      	mov	r0, ip
 800b962:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b966:	f7ff bf75 	b.w	800b854 <create_node>
 800b96a:	2000      	movs	r0, #0
 800b96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	2000      	movs	r0, #0
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop

0800b978 <rmw_destroy_node>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	b328      	cbz	r0, 800b9c8 <rmw_destroy_node+0x50>
 800b97c:	4607      	mov	r7, r0
 800b97e:	6800      	ldr	r0, [r0, #0]
 800b980:	b120      	cbz	r0, 800b98c <rmw_destroy_node+0x14>
 800b982:	4b36      	ldr	r3, [pc, #216]	@ (800ba5c <rmw_destroy_node+0xe4>)
 800b984:	6819      	ldr	r1, [r3, #0]
 800b986:	f7f4 fc4b 	bl	8000220 <strcmp>
 800b98a:	b9e8      	cbnz	r0, 800b9c8 <rmw_destroy_node+0x50>
 800b98c:	687d      	ldr	r5, [r7, #4]
 800b98e:	b1dd      	cbz	r5, 800b9c8 <rmw_destroy_node+0x50>
 800b990:	4b33      	ldr	r3, [pc, #204]	@ (800ba60 <rmw_destroy_node+0xe8>)
 800b992:	681c      	ldr	r4, [r3, #0]
 800b994:	2c00      	cmp	r4, #0
 800b996:	d05f      	beq.n	800ba58 <rmw_destroy_node+0xe0>
 800b998:	2600      	movs	r6, #0
 800b99a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b99e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800b9a2:	429d      	cmp	r5, r3
 800b9a4:	d013      	beq.n	800b9ce <rmw_destroy_node+0x56>
 800b9a6:	2c00      	cmp	r4, #0
 800b9a8:	d1f7      	bne.n	800b99a <rmw_destroy_node+0x22>
 800b9aa:	4b2e      	ldr	r3, [pc, #184]	@ (800ba64 <rmw_destroy_node+0xec>)
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	b1c4      	cbz	r4, 800b9e2 <rmw_destroy_node+0x6a>
 800b9b0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b9b4:	6a0b      	ldr	r3, [r1, #32]
 800b9b6:	429d      	cmp	r5, r3
 800b9b8:	d1f9      	bne.n	800b9ae <rmw_destroy_node+0x36>
 800b9ba:	317c      	adds	r1, #124	@ 0x7c
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f000 fa45 	bl	800be4c <rmw_destroy_subscription>
 800b9c2:	2801      	cmp	r0, #1
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	d1f2      	bne.n	800b9ae <rmw_destroy_node+0x36>
 800b9c8:	2601      	movs	r6, #1
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ce:	3184      	adds	r1, #132	@ 0x84
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f000 f9a5 	bl	800bd20 <rmw_destroy_publisher>
 800b9d6:	2801      	cmp	r0, #1
 800b9d8:	4606      	mov	r6, r0
 800b9da:	d0f5      	beq.n	800b9c8 <rmw_destroy_node+0x50>
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	d1dc      	bne.n	800b99a <rmw_destroy_node+0x22>
 800b9e0:	e7e3      	b.n	800b9aa <rmw_destroy_node+0x32>
 800b9e2:	4b21      	ldr	r3, [pc, #132]	@ (800ba68 <rmw_destroy_node+0xf0>)
 800b9e4:	681c      	ldr	r4, [r3, #0]
 800b9e6:	b16c      	cbz	r4, 800ba04 <rmw_destroy_node+0x8c>
 800b9e8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b9ec:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b9ee:	429d      	cmp	r5, r3
 800b9f0:	d1f9      	bne.n	800b9e6 <rmw_destroy_node+0x6e>
 800b9f2:	317c      	adds	r1, #124	@ 0x7c
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f000 f9e5 	bl	800bdc4 <rmw_destroy_service>
 800b9fa:	2801      	cmp	r0, #1
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	d0e3      	beq.n	800b9c8 <rmw_destroy_node+0x50>
 800ba00:	2c00      	cmp	r4, #0
 800ba02:	d1f1      	bne.n	800b9e8 <rmw_destroy_node+0x70>
 800ba04:	4b19      	ldr	r3, [pc, #100]	@ (800ba6c <rmw_destroy_node+0xf4>)
 800ba06:	681c      	ldr	r4, [r3, #0]
 800ba08:	b16c      	cbz	r4, 800ba26 <rmw_destroy_node+0xae>
 800ba0a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ba0e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ba10:	429d      	cmp	r5, r3
 800ba12:	d1f9      	bne.n	800ba08 <rmw_destroy_node+0x90>
 800ba14:	317c      	adds	r1, #124	@ 0x7c
 800ba16:	4638      	mov	r0, r7
 800ba18:	f008 feae 	bl	8014778 <rmw_destroy_client>
 800ba1c:	2801      	cmp	r0, #1
 800ba1e:	4606      	mov	r6, r0
 800ba20:	d0d2      	beq.n	800b9c8 <rmw_destroy_node+0x50>
 800ba22:	2c00      	cmp	r4, #0
 800ba24:	d1f1      	bne.n	800ba0a <rmw_destroy_node+0x92>
 800ba26:	6928      	ldr	r0, [r5, #16]
 800ba28:	696a      	ldr	r2, [r5, #20]
 800ba2a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ba2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	f001 ff0e 	bl	800d854 <uxr_buffer_delete_entity>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	6928      	ldr	r0, [r5, #16]
 800ba3c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ba40:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ba44:	f000 fd72 	bl	800c52c <run_xrce_session>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	bf08      	it	eq
 800ba4c:	2602      	moveq	r6, #2
 800ba4e:	4638      	mov	r0, r7
 800ba50:	f000 fbfa 	bl	800c248 <rmw_uxrce_fini_node_memory>
 800ba54:	4630      	mov	r0, r6
 800ba56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba58:	4626      	mov	r6, r4
 800ba5a:	e7a6      	b.n	800b9aa <rmw_destroy_node+0x32>
 800ba5c:	080188c8 	.word	0x080188c8
 800ba60:	2000ca1c 	.word	0x2000ca1c
 800ba64:	2000ca5c 	.word	0x2000ca5c
 800ba68:	2000ca2c 	.word	0x2000ca2c
 800ba6c:	2000813c 	.word	0x2000813c

0800ba70 <rmw_node_get_graph_guard_condition>:
 800ba70:	6843      	ldr	r3, [r0, #4]
 800ba72:	6918      	ldr	r0, [r3, #16]
 800ba74:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop

0800ba7c <flush_session>:
 800ba7c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ba7e:	f002 bf0b 	b.w	800e898 <uxr_run_session_until_confirm_delivery>
 800ba82:	bf00      	nop

0800ba84 <rmw_publish>:
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d053      	beq.n	800bb30 <rmw_publish+0xac>
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	b08e      	sub	sp, #56	@ 0x38
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	d04b      	beq.n	800bb2a <rmw_publish+0xa6>
 800ba92:	4604      	mov	r4, r0
 800ba94:	6800      	ldr	r0, [r0, #0]
 800ba96:	f000 fdc9 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d045      	beq.n	800bb2a <rmw_publish+0xa6>
 800ba9e:	6866      	ldr	r6, [r4, #4]
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	d042      	beq.n	800bb2a <rmw_publish+0xa6>
 800baa4:	69b4      	ldr	r4, [r6, #24]
 800baa6:	4628      	mov	r0, r5
 800baa8:	6923      	ldr	r3, [r4, #16]
 800baaa:	4798      	blx	r3
 800baac:	69f3      	ldr	r3, [r6, #28]
 800baae:	9005      	str	r0, [sp, #20]
 800bab0:	b113      	cbz	r3, 800bab8 <rmw_publish+0x34>
 800bab2:	a805      	add	r0, sp, #20
 800bab4:	4798      	blx	r3
 800bab6:	9805      	ldr	r0, [sp, #20]
 800bab8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	9000      	str	r0, [sp, #0]
 800bac0:	6972      	ldr	r2, [r6, #20]
 800bac2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bac4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bac8:	ab06      	add	r3, sp, #24
 800baca:	f004 f9b7 	bl	800fe3c <uxr_prepare_output_stream>
 800bace:	b1d8      	cbz	r0, 800bb08 <rmw_publish+0x84>
 800bad0:	68a3      	ldr	r3, [r4, #8]
 800bad2:	a906      	add	r1, sp, #24
 800bad4:	4628      	mov	r0, r5
 800bad6:	4798      	blx	r3
 800bad8:	6a33      	ldr	r3, [r6, #32]
 800bada:	4604      	mov	r4, r0
 800badc:	b10b      	cbz	r3, 800bae2 <rmw_publish+0x5e>
 800bade:	a806      	add	r0, sp, #24
 800bae0:	4798      	blx	r3
 800bae2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800baec:	d022      	beq.n	800bb34 <rmw_publish+0xb0>
 800baee:	6918      	ldr	r0, [r3, #16]
 800baf0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800baf2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800baf6:	f002 fecf 	bl	800e898 <uxr_run_session_until_confirm_delivery>
 800bafa:	4020      	ands	r0, r4
 800bafc:	b2c4      	uxtb	r4, r0
 800bafe:	f084 0001 	eor.w	r0, r4, #1
 800bb02:	b2c0      	uxtb	r0, r0
 800bb04:	b00e      	add	sp, #56	@ 0x38
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bb0c:	6918      	ldr	r0, [r3, #16]
 800bb0e:	9b05      	ldr	r3, [sp, #20]
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	4b0b      	ldr	r3, [pc, #44]	@ (800bb40 <rmw_publish+0xbc>)
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	9602      	str	r6, [sp, #8]
 800bb18:	6972      	ldr	r2, [r6, #20]
 800bb1a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bb1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb20:	ab06      	add	r3, sp, #24
 800bb22:	f004 f9bb 	bl	800fe9c <uxr_prepare_output_stream_fragmented>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d1d2      	bne.n	800bad0 <rmw_publish+0x4c>
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	b00e      	add	sp, #56	@ 0x38
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	2001      	movs	r0, #1
 800bb32:	4770      	bx	lr
 800bb34:	6918      	ldr	r0, [r3, #16]
 800bb36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb3a:	f002 faed 	bl	800e118 <uxr_flash_output_streams>
 800bb3e:	e7de      	b.n	800bafe <rmw_publish+0x7a>
 800bb40:	0800ba7d 	.word	0x0800ba7d

0800bb44 <rmw_create_publisher>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	b087      	sub	sp, #28
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	f000 80cc 	beq.w	800bce8 <rmw_create_publisher+0x1a4>
 800bb50:	460e      	mov	r6, r1
 800bb52:	2900      	cmp	r1, #0
 800bb54:	f000 80c8 	beq.w	800bce8 <rmw_create_publisher+0x1a4>
 800bb58:	4604      	mov	r4, r0
 800bb5a:	6800      	ldr	r0, [r0, #0]
 800bb5c:	4615      	mov	r5, r2
 800bb5e:	4698      	mov	r8, r3
 800bb60:	f000 fd64 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	f000 80bf 	beq.w	800bce8 <rmw_create_publisher+0x1a4>
 800bb6a:	2d00      	cmp	r5, #0
 800bb6c:	f000 80bc 	beq.w	800bce8 <rmw_create_publisher+0x1a4>
 800bb70:	782b      	ldrb	r3, [r5, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 80b8 	beq.w	800bce8 <rmw_create_publisher+0x1a4>
 800bb78:	f1b8 0f00 	cmp.w	r8, #0
 800bb7c:	f000 80b4 	beq.w	800bce8 <rmw_create_publisher+0x1a4>
 800bb80:	485c      	ldr	r0, [pc, #368]	@ (800bcf4 <rmw_create_publisher+0x1b0>)
 800bb82:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bb86:	f008 fdd3 	bl	8014730 <get_memory>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f000 80ac 	beq.w	800bce8 <rmw_create_publisher+0x1a4>
 800bb90:	6884      	ldr	r4, [r0, #8]
 800bb92:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800bb96:	f008 fe33 	bl	8014800 <rmw_get_implementation_identifier>
 800bb9a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800bb9e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bba2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800bba6:	4628      	mov	r0, r5
 800bba8:	f7f4 fb44 	bl	8000234 <strlen>
 800bbac:	3001      	adds	r0, #1
 800bbae:	283c      	cmp	r0, #60	@ 0x3c
 800bbb0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800bbb4:	f200 8091 	bhi.w	800bcda <rmw_create_publisher+0x196>
 800bbb8:	4a4f      	ldr	r2, [pc, #316]	@ (800bcf8 <rmw_create_publisher+0x1b4>)
 800bbba:	462b      	mov	r3, r5
 800bbbc:	213c      	movs	r1, #60	@ 0x3c
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	f00a ffd0 	bl	8016b64 <sniprintf>
 800bbc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbc8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800bbca:	4641      	mov	r1, r8
 800bbcc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800bbd0:	2250      	movs	r2, #80	@ 0x50
 800bbd2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bbd6:	f00b f968 	bl	8016eaa <memcpy>
 800bbda:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bbde:	4947      	ldr	r1, [pc, #284]	@ (800bcfc <rmw_create_publisher+0x1b8>)
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbe6:	bf0c      	ite	eq
 800bbe8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800bbec:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800bbf0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f000 fd25 	bl	800c648 <get_message_typesupport_handle>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d06b      	beq.n	800bcda <rmw_create_publisher+0x196>
 800bc02:	6842      	ldr	r2, [r0, #4]
 800bc04:	61a2      	str	r2, [r4, #24]
 800bc06:	2a00      	cmp	r2, #0
 800bc08:	d067      	beq.n	800bcda <rmw_create_publisher+0x196>
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	4643      	mov	r3, r8
 800bc0e:	4648      	mov	r0, r9
 800bc10:	f008 fdfc 	bl	801480c <create_topic>
 800bc14:	6260      	str	r0, [r4, #36]	@ 0x24
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d063      	beq.n	800bce2 <rmw_create_publisher+0x19e>
 800bc1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc22:	2103      	movs	r1, #3
 800bc24:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800bc28:	1c42      	adds	r2, r0, #1
 800bc2a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800bc2e:	f002 f82d 	bl	800dc8c <uxr_object_id>
 800bc32:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800bc36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc3a:	6120      	str	r0, [r4, #16]
 800bc3c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800bc40:	6910      	ldr	r0, [r2, #16]
 800bc42:	2506      	movs	r5, #6
 800bc44:	9500      	str	r5, [sp, #0]
 800bc46:	6819      	ldr	r1, [r3, #0]
 800bc48:	6922      	ldr	r2, [r4, #16]
 800bc4a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bc4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bc52:	f001 feb3 	bl	800d9bc <uxr_buffer_create_publisher_bin>
 800bc56:	4602      	mov	r2, r0
 800bc58:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bc5c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bc60:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bc64:	f000 fc62 	bl	800c52c <run_xrce_session>
 800bc68:	b3b8      	cbz	r0, 800bcda <rmw_create_publisher+0x196>
 800bc6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc72:	2105      	movs	r1, #5
 800bc74:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800bc78:	1c42      	adds	r2, r0, #1
 800bc7a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800bc7e:	f002 f805 	bl	800dc8c <uxr_object_id>
 800bc82:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bc86:	6160      	str	r0, [r4, #20]
 800bc88:	691e      	ldr	r6, [r3, #16]
 800bc8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc8e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800bc92:	f10d 0a10 	add.w	sl, sp, #16
 800bc96:	4641      	mov	r1, r8
 800bc98:	4650      	mov	r0, sl
 800bc9a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800bc9e:	f000 fc61 	bl	800c564 <convert_qos_profile>
 800bca2:	9503      	str	r5, [sp, #12]
 800bca4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bca8:	9001      	str	r0, [sp, #4]
 800bcaa:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bcae:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800bcb8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bcbc:	f8d8 1000 	ldr.w	r1, [r8]
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f001 feab 	bl	800da1c <uxr_buffer_create_datawriter_bin>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bccc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bcd0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bcd4:	f000 fc2a 	bl	800c52c <run_xrce_session>
 800bcd8:	b938      	cbnz	r0, 800bcea <rmw_create_publisher+0x1a6>
 800bcda:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bcdc:	b108      	cbz	r0, 800bce2 <rmw_create_publisher+0x19e>
 800bcde:	f000 fb23 	bl	800c328 <rmw_uxrce_fini_topic_memory>
 800bce2:	4638      	mov	r0, r7
 800bce4:	f000 fac8 	bl	800c278 <rmw_uxrce_fini_publisher_memory>
 800bce8:	2700      	movs	r7, #0
 800bcea:	4638      	mov	r0, r7
 800bcec:	b007      	add	sp, #28
 800bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf2:	bf00      	nop
 800bcf4:	2000ca1c 	.word	0x2000ca1c
 800bcf8:	08017f10 	.word	0x08017f10
 800bcfc:	08017edc 	.word	0x08017edc

0800bd00 <rmw_publisher_get_actual_qos>:
 800bd00:	b150      	cbz	r0, 800bd18 <rmw_publisher_get_actual_qos+0x18>
 800bd02:	b508      	push	{r3, lr}
 800bd04:	460b      	mov	r3, r1
 800bd06:	b149      	cbz	r1, 800bd1c <rmw_publisher_get_actual_qos+0x1c>
 800bd08:	6841      	ldr	r1, [r0, #4]
 800bd0a:	2250      	movs	r2, #80	@ 0x50
 800bd0c:	3128      	adds	r1, #40	@ 0x28
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f00b f8cb 	bl	8016eaa <memcpy>
 800bd14:	2000      	movs	r0, #0
 800bd16:	bd08      	pop	{r3, pc}
 800bd18:	200b      	movs	r0, #11
 800bd1a:	4770      	bx	lr
 800bd1c:	200b      	movs	r0, #11
 800bd1e:	bd08      	pop	{r3, pc}

0800bd20 <rmw_destroy_publisher>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	b128      	cbz	r0, 800bd30 <rmw_destroy_publisher+0x10>
 800bd24:	4604      	mov	r4, r0
 800bd26:	6800      	ldr	r0, [r0, #0]
 800bd28:	460d      	mov	r5, r1
 800bd2a:	f000 fc7f 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800bd2e:	b910      	cbnz	r0, 800bd36 <rmw_destroy_publisher+0x16>
 800bd30:	2401      	movs	r4, #1
 800bd32:	4620      	mov	r0, r4
 800bd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd36:	6863      	ldr	r3, [r4, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0f9      	beq.n	800bd30 <rmw_destroy_publisher+0x10>
 800bd3c:	2d00      	cmp	r5, #0
 800bd3e:	d0f7      	beq.n	800bd30 <rmw_destroy_publisher+0x10>
 800bd40:	6828      	ldr	r0, [r5, #0]
 800bd42:	f000 fc73 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d0f2      	beq.n	800bd30 <rmw_destroy_publisher+0x10>
 800bd4a:	686c      	ldr	r4, [r5, #4]
 800bd4c:	2c00      	cmp	r4, #0
 800bd4e:	d0ef      	beq.n	800bd30 <rmw_destroy_publisher+0x10>
 800bd50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bd52:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800bd56:	f008 fda9 	bl	80148ac <destroy_topic>
 800bd5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bd5e:	6962      	ldr	r2, [r4, #20]
 800bd60:	6918      	ldr	r0, [r3, #16]
 800bd62:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bd66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bd6a:	6819      	ldr	r1, [r3, #0]
 800bd6c:	f001 fd72 	bl	800d854 <uxr_buffer_delete_entity>
 800bd70:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bd74:	6922      	ldr	r2, [r4, #16]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	6809      	ldr	r1, [r1, #0]
 800bd80:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bd84:	f001 fd66 	bl	800d854 <uxr_buffer_delete_entity>
 800bd88:	693e      	ldr	r6, [r7, #16]
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bd90:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bd94:	4604      	mov	r4, r0
 800bd96:	4630      	mov	r0, r6
 800bd98:	f000 fbc8 	bl	800c52c <run_xrce_session>
 800bd9c:	693e      	ldr	r6, [r7, #16]
 800bd9e:	4622      	mov	r2, r4
 800bda0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bda4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f000 fbbe 	bl	800c52c <run_xrce_session>
 800bdb0:	b12c      	cbz	r4, 800bdbe <rmw_destroy_publisher+0x9e>
 800bdb2:	b120      	cbz	r0, 800bdbe <rmw_destroy_publisher+0x9e>
 800bdb4:	2400      	movs	r4, #0
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f000 fa5e 	bl	800c278 <rmw_uxrce_fini_publisher_memory>
 800bdbc:	e7b9      	b.n	800bd32 <rmw_destroy_publisher+0x12>
 800bdbe:	2402      	movs	r4, #2
 800bdc0:	e7f9      	b.n	800bdb6 <rmw_destroy_publisher+0x96>
 800bdc2:	bf00      	nop

0800bdc4 <rmw_destroy_service>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	b128      	cbz	r0, 800bdd4 <rmw_destroy_service+0x10>
 800bdc8:	4604      	mov	r4, r0
 800bdca:	6800      	ldr	r0, [r0, #0]
 800bdcc:	460d      	mov	r5, r1
 800bdce:	f000 fc2d 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800bdd2:	b910      	cbnz	r0, 800bdda <rmw_destroy_service+0x16>
 800bdd4:	2401      	movs	r4, #1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	bd70      	pop	{r4, r5, r6, pc}
 800bdda:	6863      	ldr	r3, [r4, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d0f9      	beq.n	800bdd4 <rmw_destroy_service+0x10>
 800bde0:	2d00      	cmp	r5, #0
 800bde2:	d0f7      	beq.n	800bdd4 <rmw_destroy_service+0x10>
 800bde4:	6828      	ldr	r0, [r5, #0]
 800bde6:	f000 fc21 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d0f2      	beq.n	800bdd4 <rmw_destroy_service+0x10>
 800bdee:	686e      	ldr	r6, [r5, #4]
 800bdf0:	2e00      	cmp	r6, #0
 800bdf2:	d0ef      	beq.n	800bdd4 <rmw_destroy_service+0x10>
 800bdf4:	6864      	ldr	r4, [r4, #4]
 800bdf6:	6932      	ldr	r2, [r6, #16]
 800bdf8:	6920      	ldr	r0, [r4, #16]
 800bdfa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bdfe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	f001 ff72 	bl	800dcec <uxr_buffer_cancel_data>
 800be08:	4602      	mov	r2, r0
 800be0a:	6920      	ldr	r0, [r4, #16]
 800be0c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be10:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be14:	f000 fb8a 	bl	800c52c <run_xrce_session>
 800be18:	6920      	ldr	r0, [r4, #16]
 800be1a:	6932      	ldr	r2, [r6, #16]
 800be1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800be20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be24:	6819      	ldr	r1, [r3, #0]
 800be26:	f001 fd15 	bl	800d854 <uxr_buffer_delete_entity>
 800be2a:	4602      	mov	r2, r0
 800be2c:	6920      	ldr	r0, [r4, #16]
 800be2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be32:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be36:	f000 fb79 	bl	800c52c <run_xrce_session>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	4628      	mov	r0, r5
 800be3e:	bf14      	ite	ne
 800be40:	2400      	movne	r4, #0
 800be42:	2402      	moveq	r4, #2
 800be44:	f000 fa44 	bl	800c2d0 <rmw_uxrce_fini_service_memory>
 800be48:	e7c5      	b.n	800bdd6 <rmw_destroy_service+0x12>
 800be4a:	bf00      	nop

0800be4c <rmw_destroy_subscription>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	b128      	cbz	r0, 800be5c <rmw_destroy_subscription+0x10>
 800be50:	4604      	mov	r4, r0
 800be52:	6800      	ldr	r0, [r0, #0]
 800be54:	460d      	mov	r5, r1
 800be56:	f000 fbe9 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800be5a:	b910      	cbnz	r0, 800be62 <rmw_destroy_subscription+0x16>
 800be5c:	2401      	movs	r4, #1
 800be5e:	4620      	mov	r0, r4
 800be60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be62:	6863      	ldr	r3, [r4, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d0f9      	beq.n	800be5c <rmw_destroy_subscription+0x10>
 800be68:	2d00      	cmp	r5, #0
 800be6a:	d0f7      	beq.n	800be5c <rmw_destroy_subscription+0x10>
 800be6c:	6828      	ldr	r0, [r5, #0]
 800be6e:	f000 fbdd 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 800be72:	2800      	cmp	r0, #0
 800be74:	d0f2      	beq.n	800be5c <rmw_destroy_subscription+0x10>
 800be76:	686c      	ldr	r4, [r5, #4]
 800be78:	2c00      	cmp	r4, #0
 800be7a:	d0ef      	beq.n	800be5c <rmw_destroy_subscription+0x10>
 800be7c:	6a26      	ldr	r6, [r4, #32]
 800be7e:	6962      	ldr	r2, [r4, #20]
 800be80:	6930      	ldr	r0, [r6, #16]
 800be82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800be86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be8a:	6819      	ldr	r1, [r3, #0]
 800be8c:	f001 ff2e 	bl	800dcec <uxr_buffer_cancel_data>
 800be90:	4602      	mov	r2, r0
 800be92:	6930      	ldr	r0, [r6, #16]
 800be94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be9c:	f000 fb46 	bl	800c52c <run_xrce_session>
 800bea0:	69e0      	ldr	r0, [r4, #28]
 800bea2:	f008 fd03 	bl	80148ac <destroy_topic>
 800bea6:	6a23      	ldr	r3, [r4, #32]
 800bea8:	6962      	ldr	r2, [r4, #20]
 800beaa:	6918      	ldr	r0, [r3, #16]
 800beac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800beb0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800beb4:	6819      	ldr	r1, [r3, #0]
 800beb6:	f001 fccd 	bl	800d854 <uxr_buffer_delete_entity>
 800beba:	6a23      	ldr	r3, [r4, #32]
 800bebc:	6922      	ldr	r2, [r4, #16]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bec4:	4604      	mov	r4, r0
 800bec6:	6809      	ldr	r1, [r1, #0]
 800bec8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800becc:	f001 fcc2 	bl	800d854 <uxr_buffer_delete_entity>
 800bed0:	6937      	ldr	r7, [r6, #16]
 800bed2:	4622      	mov	r2, r4
 800bed4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800bed8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800bedc:	4604      	mov	r4, r0
 800bede:	4638      	mov	r0, r7
 800bee0:	f000 fb24 	bl	800c52c <run_xrce_session>
 800bee4:	6936      	ldr	r6, [r6, #16]
 800bee6:	4622      	mov	r2, r4
 800bee8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800beec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bef0:	4604      	mov	r4, r0
 800bef2:	4630      	mov	r0, r6
 800bef4:	f000 fb1a 	bl	800c52c <run_xrce_session>
 800bef8:	b12c      	cbz	r4, 800bf06 <rmw_destroy_subscription+0xba>
 800befa:	b120      	cbz	r0, 800bf06 <rmw_destroy_subscription+0xba>
 800befc:	2400      	movs	r4, #0
 800befe:	4628      	mov	r0, r5
 800bf00:	f000 f9d0 	bl	800c2a4 <rmw_uxrce_fini_subscription_memory>
 800bf04:	e7ab      	b.n	800be5e <rmw_destroy_subscription+0x12>
 800bf06:	2402      	movs	r4, #2
 800bf08:	e7f9      	b.n	800befe <rmw_destroy_subscription+0xb2>
 800bf0a:	bf00      	nop

0800bf0c <rmw_uxrce_transport_init>:
 800bf0c:	b508      	push	{r3, lr}
 800bf0e:	b108      	cbz	r0, 800bf14 <rmw_uxrce_transport_init+0x8>
 800bf10:	f100 0210 	add.w	r2, r0, #16
 800bf14:	b139      	cbz	r1, 800bf26 <rmw_uxrce_transport_init+0x1a>
 800bf16:	6949      	ldr	r1, [r1, #20]
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f001 fe7f 	bl	800dc1c <uxr_init_custom_transport>
 800bf1e:	f080 0001 	eor.w	r0, r0, #1
 800bf22:	b2c0      	uxtb	r0, r0
 800bf24:	bd08      	pop	{r3, pc}
 800bf26:	4b04      	ldr	r3, [pc, #16]	@ (800bf38 <rmw_uxrce_transport_init+0x2c>)
 800bf28:	4610      	mov	r0, r2
 800bf2a:	6859      	ldr	r1, [r3, #4]
 800bf2c:	f001 fe76 	bl	800dc1c <uxr_init_custom_transport>
 800bf30:	f080 0001 	eor.w	r0, r0, #1
 800bf34:	b2c0      	uxtb	r0, r0
 800bf36:	bd08      	pop	{r3, pc}
 800bf38:	200080e4 	.word	0x200080e4

0800bf3c <rmw_uros_epoch_nanos>:
 800bf3c:	4b05      	ldr	r3, [pc, #20]	@ (800bf54 <rmw_uros_epoch_nanos+0x18>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	b123      	cbz	r3, 800bf4c <rmw_uros_epoch_nanos+0x10>
 800bf42:	6898      	ldr	r0, [r3, #8]
 800bf44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf48:	f002 b8dc 	b.w	800e104 <uxr_epoch_nanos>
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	2100      	movs	r1, #0
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	2000ca3c 	.word	0x2000ca3c

0800bf58 <rmw_uros_sync_session>:
 800bf58:	b508      	push	{r3, lr}
 800bf5a:	4b07      	ldr	r3, [pc, #28]	@ (800bf78 <rmw_uros_sync_session+0x20>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	b14b      	cbz	r3, 800bf74 <rmw_uros_sync_session+0x1c>
 800bf60:	4601      	mov	r1, r0
 800bf62:	6898      	ldr	r0, [r3, #8]
 800bf64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf68:	f002 fd0e 	bl	800e988 <uxr_sync_session>
 800bf6c:	f080 0001 	eor.w	r0, r0, #1
 800bf70:	b2c0      	uxtb	r0, r0
 800bf72:	bd08      	pop	{r3, pc}
 800bf74:	2001      	movs	r0, #1
 800bf76:	bd08      	pop	{r3, pc}
 800bf78:	2000ca3c 	.word	0x2000ca3c

0800bf7c <rmw_uxrce_init_service_memory>:
 800bf7c:	b1e2      	cbz	r2, 800bfb8 <rmw_uxrce_init_service_memory+0x3c>
 800bf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf82:	7b05      	ldrb	r5, [r0, #12]
 800bf84:	4606      	mov	r6, r0
 800bf86:	b9ad      	cbnz	r5, 800bfb4 <rmw_uxrce_init_service_memory+0x38>
 800bf88:	23c8      	movs	r3, #200	@ 0xc8
 800bf8a:	e9c0 5500 	strd	r5, r5, [r0]
 800bf8e:	6083      	str	r3, [r0, #8]
 800bf90:	f240 1301 	movw	r3, #257	@ 0x101
 800bf94:	4617      	mov	r7, r2
 800bf96:	8183      	strh	r3, [r0, #12]
 800bf98:	460c      	mov	r4, r1
 800bf9a:	46a8      	mov	r8, r5
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	3501      	adds	r5, #1
 800bfa2:	f008 fbd5 	bl	8014750 <put_memory>
 800bfa6:	42af      	cmp	r7, r5
 800bfa8:	60a4      	str	r4, [r4, #8]
 800bfaa:	f884 800c 	strb.w	r8, [r4, #12]
 800bfae:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800bfb2:	d1f3      	bne.n	800bf9c <rmw_uxrce_init_service_memory+0x20>
 800bfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop

0800bfbc <rmw_uxrce_init_client_memory>:
 800bfbc:	b1e2      	cbz	r2, 800bff8 <rmw_uxrce_init_client_memory+0x3c>
 800bfbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc2:	7b05      	ldrb	r5, [r0, #12]
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	b9ad      	cbnz	r5, 800bff4 <rmw_uxrce_init_client_memory+0x38>
 800bfc8:	23c8      	movs	r3, #200	@ 0xc8
 800bfca:	e9c0 5500 	strd	r5, r5, [r0]
 800bfce:	6083      	str	r3, [r0, #8]
 800bfd0:	f240 1301 	movw	r3, #257	@ 0x101
 800bfd4:	4617      	mov	r7, r2
 800bfd6:	8183      	strh	r3, [r0, #12]
 800bfd8:	460c      	mov	r4, r1
 800bfda:	46a8      	mov	r8, r5
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4630      	mov	r0, r6
 800bfe0:	3501      	adds	r5, #1
 800bfe2:	f008 fbb5 	bl	8014750 <put_memory>
 800bfe6:	42af      	cmp	r7, r5
 800bfe8:	60a4      	str	r4, [r4, #8]
 800bfea:	f884 800c 	strb.w	r8, [r4, #12]
 800bfee:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800bff2:	d1f3      	bne.n	800bfdc <rmw_uxrce_init_client_memory+0x20>
 800bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop

0800bffc <rmw_uxrce_init_publisher_memory>:
 800bffc:	b1e2      	cbz	r2, 800c038 <rmw_uxrce_init_publisher_memory+0x3c>
 800bffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c002:	7b05      	ldrb	r5, [r0, #12]
 800c004:	4606      	mov	r6, r0
 800c006:	b9ad      	cbnz	r5, 800c034 <rmw_uxrce_init_publisher_memory+0x38>
 800c008:	23d8      	movs	r3, #216	@ 0xd8
 800c00a:	e9c0 5500 	strd	r5, r5, [r0]
 800c00e:	6083      	str	r3, [r0, #8]
 800c010:	f240 1301 	movw	r3, #257	@ 0x101
 800c014:	4617      	mov	r7, r2
 800c016:	8183      	strh	r3, [r0, #12]
 800c018:	460c      	mov	r4, r1
 800c01a:	46a8      	mov	r8, r5
 800c01c:	4621      	mov	r1, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	3501      	adds	r5, #1
 800c022:	f008 fb95 	bl	8014750 <put_memory>
 800c026:	42af      	cmp	r7, r5
 800c028:	60a4      	str	r4, [r4, #8]
 800c02a:	f884 800c 	strb.w	r8, [r4, #12]
 800c02e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c032:	d1f3      	bne.n	800c01c <rmw_uxrce_init_publisher_memory+0x20>
 800c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop

0800c03c <rmw_uxrce_init_subscription_memory>:
 800c03c:	b1e2      	cbz	r2, 800c078 <rmw_uxrce_init_subscription_memory+0x3c>
 800c03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c042:	7b05      	ldrb	r5, [r0, #12]
 800c044:	4606      	mov	r6, r0
 800c046:	b9ad      	cbnz	r5, 800c074 <rmw_uxrce_init_subscription_memory+0x38>
 800c048:	23d8      	movs	r3, #216	@ 0xd8
 800c04a:	e9c0 5500 	strd	r5, r5, [r0]
 800c04e:	6083      	str	r3, [r0, #8]
 800c050:	f240 1301 	movw	r3, #257	@ 0x101
 800c054:	4617      	mov	r7, r2
 800c056:	8183      	strh	r3, [r0, #12]
 800c058:	460c      	mov	r4, r1
 800c05a:	46a8      	mov	r8, r5
 800c05c:	4621      	mov	r1, r4
 800c05e:	4630      	mov	r0, r6
 800c060:	3501      	adds	r5, #1
 800c062:	f008 fb75 	bl	8014750 <put_memory>
 800c066:	42af      	cmp	r7, r5
 800c068:	60a4      	str	r4, [r4, #8]
 800c06a:	f884 800c 	strb.w	r8, [r4, #12]
 800c06e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c072:	d1f3      	bne.n	800c05c <rmw_uxrce_init_subscription_memory+0x20>
 800c074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop

0800c07c <rmw_uxrce_init_node_memory>:
 800c07c:	b1e2      	cbz	r2, 800c0b8 <rmw_uxrce_init_node_memory+0x3c>
 800c07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	7b05      	ldrb	r5, [r0, #12]
 800c084:	4606      	mov	r6, r0
 800c086:	b9ad      	cbnz	r5, 800c0b4 <rmw_uxrce_init_node_memory+0x38>
 800c088:	23a4      	movs	r3, #164	@ 0xa4
 800c08a:	e9c0 5500 	strd	r5, r5, [r0]
 800c08e:	6083      	str	r3, [r0, #8]
 800c090:	f240 1301 	movw	r3, #257	@ 0x101
 800c094:	4617      	mov	r7, r2
 800c096:	8183      	strh	r3, [r0, #12]
 800c098:	460c      	mov	r4, r1
 800c09a:	46a8      	mov	r8, r5
 800c09c:	4621      	mov	r1, r4
 800c09e:	4630      	mov	r0, r6
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	f008 fb55 	bl	8014750 <put_memory>
 800c0a6:	42af      	cmp	r7, r5
 800c0a8:	60a4      	str	r4, [r4, #8]
 800c0aa:	f884 800c 	strb.w	r8, [r4, #12]
 800c0ae:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c0b2:	d1f3      	bne.n	800c09c <rmw_uxrce_init_node_memory+0x20>
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop

0800c0bc <rmw_uxrce_init_session_memory>:
 800c0bc:	b1ea      	cbz	r2, 800c0fa <rmw_uxrce_init_session_memory+0x3e>
 800c0be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c2:	7b05      	ldrb	r5, [r0, #12]
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	b9b5      	cbnz	r5, 800c0f6 <rmw_uxrce_init_session_memory+0x3a>
 800c0c8:	e9c0 5500 	strd	r5, r5, [r0]
 800c0cc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c0d0:	f240 1301 	movw	r3, #257	@ 0x101
 800c0d4:	4617      	mov	r7, r2
 800c0d6:	f8c0 8008 	str.w	r8, [r0, #8]
 800c0da:	460c      	mov	r4, r1
 800c0dc:	8183      	strh	r3, [r0, #12]
 800c0de:	46a9      	mov	r9, r5
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	f008 fb33 	bl	8014750 <put_memory>
 800c0ea:	42af      	cmp	r7, r5
 800c0ec:	60a4      	str	r4, [r4, #8]
 800c0ee:	f884 900c 	strb.w	r9, [r4, #12]
 800c0f2:	4444      	add	r4, r8
 800c0f4:	d1f4      	bne.n	800c0e0 <rmw_uxrce_init_session_memory+0x24>
 800c0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0fa:	4770      	bx	lr

0800c0fc <rmw_uxrce_init_topic_memory>:
 800c0fc:	b1e2      	cbz	r2, 800c138 <rmw_uxrce_init_topic_memory+0x3c>
 800c0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c102:	7b05      	ldrb	r5, [r0, #12]
 800c104:	4606      	mov	r6, r0
 800c106:	b9ad      	cbnz	r5, 800c134 <rmw_uxrce_init_topic_memory+0x38>
 800c108:	231c      	movs	r3, #28
 800c10a:	e9c0 5500 	strd	r5, r5, [r0]
 800c10e:	6083      	str	r3, [r0, #8]
 800c110:	f240 1301 	movw	r3, #257	@ 0x101
 800c114:	4617      	mov	r7, r2
 800c116:	8183      	strh	r3, [r0, #12]
 800c118:	460c      	mov	r4, r1
 800c11a:	46a8      	mov	r8, r5
 800c11c:	4621      	mov	r1, r4
 800c11e:	4630      	mov	r0, r6
 800c120:	3501      	adds	r5, #1
 800c122:	f008 fb15 	bl	8014750 <put_memory>
 800c126:	42af      	cmp	r7, r5
 800c128:	60a4      	str	r4, [r4, #8]
 800c12a:	f884 800c 	strb.w	r8, [r4, #12]
 800c12e:	f104 041c 	add.w	r4, r4, #28
 800c132:	d1f3      	bne.n	800c11c <rmw_uxrce_init_topic_memory+0x20>
 800c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop

0800c13c <rmw_uxrce_init_static_input_buffer_memory>:
 800c13c:	b1ea      	cbz	r2, 800c17a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	7b05      	ldrb	r5, [r0, #12]
 800c144:	4606      	mov	r6, r0
 800c146:	b9b5      	cbnz	r5, 800c176 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c148:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c14c:	e9c0 5500 	strd	r5, r5, [r0]
 800c150:	6083      	str	r3, [r0, #8]
 800c152:	f240 1301 	movw	r3, #257	@ 0x101
 800c156:	4617      	mov	r7, r2
 800c158:	8183      	strh	r3, [r0, #12]
 800c15a:	460c      	mov	r4, r1
 800c15c:	46a8      	mov	r8, r5
 800c15e:	4621      	mov	r1, r4
 800c160:	4630      	mov	r0, r6
 800c162:	3501      	adds	r5, #1
 800c164:	f008 faf4 	bl	8014750 <put_memory>
 800c168:	42af      	cmp	r7, r5
 800c16a:	60a4      	str	r4, [r4, #8]
 800c16c:	f884 800c 	strb.w	r8, [r4, #12]
 800c170:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c174:	d1f3      	bne.n	800c15e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17a:	4770      	bx	lr

0800c17c <rmw_uxrce_init_init_options_impl_memory>:
 800c17c:	b1e2      	cbz	r2, 800c1b8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	7b05      	ldrb	r5, [r0, #12]
 800c184:	4606      	mov	r6, r0
 800c186:	b9ad      	cbnz	r5, 800c1b4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c188:	232c      	movs	r3, #44	@ 0x2c
 800c18a:	e9c0 5500 	strd	r5, r5, [r0]
 800c18e:	6083      	str	r3, [r0, #8]
 800c190:	f240 1301 	movw	r3, #257	@ 0x101
 800c194:	4617      	mov	r7, r2
 800c196:	8183      	strh	r3, [r0, #12]
 800c198:	460c      	mov	r4, r1
 800c19a:	46a8      	mov	r8, r5
 800c19c:	4621      	mov	r1, r4
 800c19e:	4630      	mov	r0, r6
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	f008 fad5 	bl	8014750 <put_memory>
 800c1a6:	42af      	cmp	r7, r5
 800c1a8:	60a4      	str	r4, [r4, #8]
 800c1aa:	f884 800c 	strb.w	r8, [r4, #12]
 800c1ae:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c1b2:	d1f3      	bne.n	800c19c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop

0800c1bc <rmw_uxrce_init_wait_set_memory>:
 800c1bc:	b1e2      	cbz	r2, 800c1f8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c2:	7b05      	ldrb	r5, [r0, #12]
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	b9ad      	cbnz	r5, 800c1f4 <rmw_uxrce_init_wait_set_memory+0x38>
 800c1c8:	231c      	movs	r3, #28
 800c1ca:	e9c0 5500 	strd	r5, r5, [r0]
 800c1ce:	6083      	str	r3, [r0, #8]
 800c1d0:	f240 1301 	movw	r3, #257	@ 0x101
 800c1d4:	4617      	mov	r7, r2
 800c1d6:	8183      	strh	r3, [r0, #12]
 800c1d8:	460c      	mov	r4, r1
 800c1da:	46a8      	mov	r8, r5
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4630      	mov	r0, r6
 800c1e0:	3501      	adds	r5, #1
 800c1e2:	f008 fab5 	bl	8014750 <put_memory>
 800c1e6:	42af      	cmp	r7, r5
 800c1e8:	60a4      	str	r4, [r4, #8]
 800c1ea:	f884 800c 	strb.w	r8, [r4, #12]
 800c1ee:	f104 041c 	add.w	r4, r4, #28
 800c1f2:	d1f3      	bne.n	800c1dc <rmw_uxrce_init_wait_set_memory+0x20>
 800c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop

0800c1fc <rmw_uxrce_init_guard_condition_memory>:
 800c1fc:	b1e2      	cbz	r2, 800c238 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	7b05      	ldrb	r5, [r0, #12]
 800c204:	4606      	mov	r6, r0
 800c206:	b9ad      	cbnz	r5, 800c234 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c208:	2320      	movs	r3, #32
 800c20a:	e9c0 5500 	strd	r5, r5, [r0]
 800c20e:	6083      	str	r3, [r0, #8]
 800c210:	f240 1301 	movw	r3, #257	@ 0x101
 800c214:	4617      	mov	r7, r2
 800c216:	8183      	strh	r3, [r0, #12]
 800c218:	460c      	mov	r4, r1
 800c21a:	46a8      	mov	r8, r5
 800c21c:	4621      	mov	r1, r4
 800c21e:	4630      	mov	r0, r6
 800c220:	3501      	adds	r5, #1
 800c222:	f008 fa95 	bl	8014750 <put_memory>
 800c226:	42af      	cmp	r7, r5
 800c228:	60a4      	str	r4, [r4, #8]
 800c22a:	f884 800c 	strb.w	r8, [r4, #12]
 800c22e:	f104 0420 	add.w	r4, r4, #32
 800c232:	d1f3      	bne.n	800c21c <rmw_uxrce_init_guard_condition_memory+0x20>
 800c234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop

0800c23c <rmw_uxrce_fini_session_memory>:
 800c23c:	4601      	mov	r1, r0
 800c23e:	4801      	ldr	r0, [pc, #4]	@ (800c244 <rmw_uxrce_fini_session_memory+0x8>)
 800c240:	f008 ba86 	b.w	8014750 <put_memory>
 800c244:	2000ca3c 	.word	0x2000ca3c

0800c248 <rmw_uxrce_fini_node_memory>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4604      	mov	r4, r0
 800c24c:	6800      	ldr	r0, [r0, #0]
 800c24e:	b128      	cbz	r0, 800c25c <rmw_uxrce_fini_node_memory+0x14>
 800c250:	4b07      	ldr	r3, [pc, #28]	@ (800c270 <rmw_uxrce_fini_node_memory+0x28>)
 800c252:	6819      	ldr	r1, [r3, #0]
 800c254:	f7f3 ffe4 	bl	8000220 <strcmp>
 800c258:	b940      	cbnz	r0, 800c26c <rmw_uxrce_fini_node_memory+0x24>
 800c25a:	6020      	str	r0, [r4, #0]
 800c25c:	6861      	ldr	r1, [r4, #4]
 800c25e:	b129      	cbz	r1, 800c26c <rmw_uxrce_fini_node_memory+0x24>
 800c260:	2500      	movs	r5, #0
 800c262:	4804      	ldr	r0, [pc, #16]	@ (800c274 <rmw_uxrce_fini_node_memory+0x2c>)
 800c264:	610d      	str	r5, [r1, #16]
 800c266:	f008 fa73 	bl	8014750 <put_memory>
 800c26a:	6065      	str	r5, [r4, #4]
 800c26c:	bd38      	pop	{r3, r4, r5, pc}
 800c26e:	bf00      	nop
 800c270:	080188c8 	.word	0x080188c8
 800c274:	2000ca0c 	.word	0x2000ca0c

0800c278 <rmw_uxrce_fini_publisher_memory>:
 800c278:	b510      	push	{r4, lr}
 800c27a:	4604      	mov	r4, r0
 800c27c:	6800      	ldr	r0, [r0, #0]
 800c27e:	b128      	cbz	r0, 800c28c <rmw_uxrce_fini_publisher_memory+0x14>
 800c280:	4b06      	ldr	r3, [pc, #24]	@ (800c29c <rmw_uxrce_fini_publisher_memory+0x24>)
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	f7f3 ffcc 	bl	8000220 <strcmp>
 800c288:	b938      	cbnz	r0, 800c29a <rmw_uxrce_fini_publisher_memory+0x22>
 800c28a:	6020      	str	r0, [r4, #0]
 800c28c:	6861      	ldr	r1, [r4, #4]
 800c28e:	b121      	cbz	r1, 800c29a <rmw_uxrce_fini_publisher_memory+0x22>
 800c290:	4803      	ldr	r0, [pc, #12]	@ (800c2a0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c292:	f008 fa5d 	bl	8014750 <put_memory>
 800c296:	2300      	movs	r3, #0
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	bd10      	pop	{r4, pc}
 800c29c:	080188c8 	.word	0x080188c8
 800c2a0:	2000ca1c 	.word	0x2000ca1c

0800c2a4 <rmw_uxrce_fini_subscription_memory>:
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	6800      	ldr	r0, [r0, #0]
 800c2aa:	b128      	cbz	r0, 800c2b8 <rmw_uxrce_fini_subscription_memory+0x14>
 800c2ac:	4b06      	ldr	r3, [pc, #24]	@ (800c2c8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c2ae:	6819      	ldr	r1, [r3, #0]
 800c2b0:	f7f3 ffb6 	bl	8000220 <strcmp>
 800c2b4:	b938      	cbnz	r0, 800c2c6 <rmw_uxrce_fini_subscription_memory+0x22>
 800c2b6:	6020      	str	r0, [r4, #0]
 800c2b8:	6861      	ldr	r1, [r4, #4]
 800c2ba:	b121      	cbz	r1, 800c2c6 <rmw_uxrce_fini_subscription_memory+0x22>
 800c2bc:	4803      	ldr	r0, [pc, #12]	@ (800c2cc <rmw_uxrce_fini_subscription_memory+0x28>)
 800c2be:	f008 fa47 	bl	8014750 <put_memory>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	bd10      	pop	{r4, pc}
 800c2c8:	080188c8 	.word	0x080188c8
 800c2cc:	2000ca5c 	.word	0x2000ca5c

0800c2d0 <rmw_uxrce_fini_service_memory>:
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	6800      	ldr	r0, [r0, #0]
 800c2d6:	b128      	cbz	r0, 800c2e4 <rmw_uxrce_fini_service_memory+0x14>
 800c2d8:	4b06      	ldr	r3, [pc, #24]	@ (800c2f4 <rmw_uxrce_fini_service_memory+0x24>)
 800c2da:	6819      	ldr	r1, [r3, #0]
 800c2dc:	f7f3 ffa0 	bl	8000220 <strcmp>
 800c2e0:	b938      	cbnz	r0, 800c2f2 <rmw_uxrce_fini_service_memory+0x22>
 800c2e2:	6020      	str	r0, [r4, #0]
 800c2e4:	6861      	ldr	r1, [r4, #4]
 800c2e6:	b121      	cbz	r1, 800c2f2 <rmw_uxrce_fini_service_memory+0x22>
 800c2e8:	4803      	ldr	r0, [pc, #12]	@ (800c2f8 <rmw_uxrce_fini_service_memory+0x28>)
 800c2ea:	f008 fa31 	bl	8014750 <put_memory>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	6063      	str	r3, [r4, #4]
 800c2f2:	bd10      	pop	{r4, pc}
 800c2f4:	080188c8 	.word	0x080188c8
 800c2f8:	2000ca2c 	.word	0x2000ca2c

0800c2fc <rmw_uxrce_fini_client_memory>:
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	4604      	mov	r4, r0
 800c300:	6800      	ldr	r0, [r0, #0]
 800c302:	b128      	cbz	r0, 800c310 <rmw_uxrce_fini_client_memory+0x14>
 800c304:	4b06      	ldr	r3, [pc, #24]	@ (800c320 <rmw_uxrce_fini_client_memory+0x24>)
 800c306:	6819      	ldr	r1, [r3, #0]
 800c308:	f7f3 ff8a 	bl	8000220 <strcmp>
 800c30c:	b938      	cbnz	r0, 800c31e <rmw_uxrce_fini_client_memory+0x22>
 800c30e:	6020      	str	r0, [r4, #0]
 800c310:	6861      	ldr	r1, [r4, #4]
 800c312:	b121      	cbz	r1, 800c31e <rmw_uxrce_fini_client_memory+0x22>
 800c314:	4803      	ldr	r0, [pc, #12]	@ (800c324 <rmw_uxrce_fini_client_memory+0x28>)
 800c316:	f008 fa1b 	bl	8014750 <put_memory>
 800c31a:	2300      	movs	r3, #0
 800c31c:	6063      	str	r3, [r4, #4]
 800c31e:	bd10      	pop	{r4, pc}
 800c320:	080188c8 	.word	0x080188c8
 800c324:	2000813c 	.word	0x2000813c

0800c328 <rmw_uxrce_fini_topic_memory>:
 800c328:	b510      	push	{r4, lr}
 800c32a:	4604      	mov	r4, r0
 800c32c:	4621      	mov	r1, r4
 800c32e:	4803      	ldr	r0, [pc, #12]	@ (800c33c <rmw_uxrce_fini_topic_memory+0x14>)
 800c330:	f008 fa0e 	bl	8014750 <put_memory>
 800c334:	2300      	movs	r3, #0
 800c336:	61a3      	str	r3, [r4, #24]
 800c338:	bd10      	pop	{r4, pc}
 800c33a:	bf00      	nop
 800c33c:	2000ca6c 	.word	0x2000ca6c

0800c340 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c340:	b082      	sub	sp, #8
 800c342:	b530      	push	{r4, r5, lr}
 800c344:	4925      	ldr	r1, [pc, #148]	@ (800c3dc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c346:	680d      	ldr	r5, [r1, #0]
 800c348:	ac03      	add	r4, sp, #12
 800c34a:	e884 000c 	stmia.w	r4, {r2, r3}
 800c34e:	461c      	mov	r4, r3
 800c350:	2d00      	cmp	r5, #0
 800c352:	d041      	beq.n	800c3d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c354:	462b      	mov	r3, r5
 800c356:	2100      	movs	r1, #0
 800c358:	689a      	ldr	r2, [r3, #8]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c360:	4290      	cmp	r0, r2
 800c362:	bf08      	it	eq
 800c364:	3101      	addeq	r1, #1
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1f6      	bne.n	800c358 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c36a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d029      	beq.n	800c3c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c372:	d907      	bls.n	800c384 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c374:	2b03      	cmp	r3, #3
 800c376:	d005      	beq.n	800c384 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c378:	2100      	movs	r1, #0
 800c37a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c37e:	4608      	mov	r0, r1
 800c380:	b002      	add	sp, #8
 800c382:	4770      	bx	lr
 800c384:	b314      	cbz	r4, 800c3cc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c386:	428c      	cmp	r4, r1
 800c388:	d820      	bhi.n	800c3cc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c38a:	2d00      	cmp	r5, #0
 800c38c:	d0f4      	beq.n	800c378 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c38e:	2100      	movs	r1, #0
 800c390:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c394:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c398:	e002      	b.n	800c3a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c39a:	686d      	ldr	r5, [r5, #4]
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	d0ec      	beq.n	800c37a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c3a0:	68ab      	ldr	r3, [r5, #8]
 800c3a2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c3a6:	4290      	cmp	r0, r2
 800c3a8:	d1f7      	bne.n	800c39a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c3aa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c3ae:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c3b2:	4562      	cmp	r2, ip
 800c3b4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c3b8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c3bc:	daed      	bge.n	800c39a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c3be:	4694      	mov	ip, r2
 800c3c0:	461c      	mov	r4, r3
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	e7e9      	b.n	800c39a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c3c6:	b10c      	cbz	r4, 800c3cc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c3c8:	428c      	cmp	r4, r1
 800c3ca:	d9d5      	bls.n	800c378 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c3cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3d0:	4802      	ldr	r0, [pc, #8]	@ (800c3dc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c3d2:	b002      	add	sp, #8
 800c3d4:	f008 b9ac 	b.w	8014730 <get_memory>
 800c3d8:	4629      	mov	r1, r5
 800c3da:	e7c6      	b.n	800c36a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c3dc:	2000ca4c 	.word	0x2000ca4c

0800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c3e0:	4b11      	ldr	r3, [pc, #68]	@ (800c428 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	b530      	push	{r4, r5, lr}
 800c3e6:	b1e3      	cbz	r3, 800c422 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c3e8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c3ec:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c3f0:	2400      	movs	r4, #0
 800c3f2:	e001      	b.n	800c3f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	b193      	cbz	r3, 800c41e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c3fe:	4288      	cmp	r0, r1
 800c400:	d1f8      	bne.n	800c3f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c402:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c406:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c40a:	4571      	cmp	r1, lr
 800c40c:	eb72 050c 	sbcs.w	r5, r2, ip
 800c410:	daf0      	bge.n	800c3f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c412:	461c      	mov	r4, r3
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	468e      	mov	lr, r1
 800c418:	4694      	mov	ip, r2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1ec      	bne.n	800c3f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c41e:	4620      	mov	r0, r4
 800c420:	bd30      	pop	{r4, r5, pc}
 800c422:	461c      	mov	r4, r3
 800c424:	4620      	mov	r0, r4
 800c426:	bd30      	pop	{r4, r5, pc}
 800c428:	2000ca4c 	.word	0x2000ca4c
 800c42c:	00000000 	.word	0x00000000

0800c430 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	4b3c      	ldr	r3, [pc, #240]	@ (800c528 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c436:	ed2d 8b06 	vpush	{d8-d10}
 800c43a:	681f      	ldr	r7, [r3, #0]
 800c43c:	b08d      	sub	sp, #52	@ 0x34
 800c43e:	f7ff fd7d 	bl	800bf3c <rmw_uros_epoch_nanos>
 800c442:	2f00      	cmp	r7, #0
 800c444:	d05d      	beq.n	800c502 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c446:	46b8      	mov	r8, r7
 800c448:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c510 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c44c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c450:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c454:	2b04      	cmp	r3, #4
 800c456:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c518 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c45a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c520 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c45e:	4681      	mov	r9, r0
 800c460:	468a      	mov	sl, r1
 800c462:	ac04      	add	r4, sp, #16
 800c464:	d03f      	beq.n	800c4e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c466:	2b05      	cmp	r3, #5
 800c468:	d044      	beq.n	800c4f4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d03b      	beq.n	800c4e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c46e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c472:	ed8d ab06 	vstr	d10, [sp, #24]
 800c476:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c47a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c47e:	ab08      	add	r3, sp, #32
 800c480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c482:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c486:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c48a:	f007 fe9d 	bl	80141c8 <rmw_time_equal>
 800c48e:	b118      	cbz	r0, 800c498 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c490:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c494:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c498:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c49c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c4a0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c4a4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c4a8:	f007 fee2 	bl	8014270 <rmw_time_total_nsec>
 800c4ac:	1830      	adds	r0, r6, r0
 800c4ae:	eb47 0101 	adc.w	r1, r7, r1
 800c4b2:	4548      	cmp	r0, r9
 800c4b4:	eb71 030a 	sbcs.w	r3, r1, sl
 800c4b8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c4bc:	db05      	blt.n	800c4ca <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c4be:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c4c2:	4591      	cmp	r9, r2
 800c4c4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c4c8:	da03      	bge.n	800c4d2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c4ca:	4817      	ldr	r0, [pc, #92]	@ (800c528 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c4cc:	4641      	mov	r1, r8
 800c4ce:	f008 f93f 	bl	8014750 <put_memory>
 800c4d2:	f1bb 0f00 	cmp.w	fp, #0
 800c4d6:	d014      	beq.n	800c502 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c4d8:	46d8      	mov	r8, fp
 800c4da:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c4de:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	d1bf      	bne.n	800c466 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c4e6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c4ea:	3340      	adds	r3, #64	@ 0x40
 800c4ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c4f2:	e7c0      	b.n	800c476 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c4f4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c4f8:	3348      	adds	r3, #72	@ 0x48
 800c4fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c500:	e7b9      	b.n	800c476 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c502:	b00d      	add	sp, #52	@ 0x34
 800c504:	ecbd 8b06 	vpop	{d8-d10}
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	f3af 8000 	nop.w
	...
 800c518:	00000001 	.word	0x00000001
 800c51c:	00000000 	.word	0x00000000
 800c520:	0000001e 	.word	0x0000001e
 800c524:	00000000 	.word	0x00000000
 800c528:	2000ca4c 	.word	0x2000ca4c

0800c52c <run_xrce_session>:
 800c52c:	b510      	push	{r4, lr}
 800c52e:	788c      	ldrb	r4, [r1, #2]
 800c530:	b086      	sub	sp, #24
 800c532:	2c01      	cmp	r4, #1
 800c534:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c538:	d00c      	beq.n	800c554 <run_xrce_session+0x28>
 800c53a:	4619      	mov	r1, r3
 800c53c:	2301      	movs	r3, #1
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	f10d 020e 	add.w	r2, sp, #14
 800c544:	f10d 0317 	add.w	r3, sp, #23
 800c548:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c54c:	f002 f9ca 	bl	800e8e4 <uxr_run_session_until_all_status>
 800c550:	b006      	add	sp, #24
 800c552:	bd10      	pop	{r4, pc}
 800c554:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c558:	f001 fdde 	bl	800e118 <uxr_flash_output_streams>
 800c55c:	4620      	mov	r0, r4
 800c55e:	b006      	add	sp, #24
 800c560:	bd10      	pop	{r4, pc}
 800c562:	bf00      	nop

0800c564 <convert_qos_profile>:
 800c564:	7a4a      	ldrb	r2, [r1, #9]
 800c566:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c56a:	2a02      	cmp	r2, #2
 800c56c:	bf18      	it	ne
 800c56e:	2200      	movne	r2, #0
 800c570:	7002      	strb	r2, [r0, #0]
 800c572:	780a      	ldrb	r2, [r1, #0]
 800c574:	8889      	ldrh	r1, [r1, #4]
 800c576:	8081      	strh	r1, [r0, #4]
 800c578:	f1ac 0c02 	sub.w	ip, ip, #2
 800c57c:	f1a2 0202 	sub.w	r2, r2, #2
 800c580:	fabc fc8c 	clz	ip, ip
 800c584:	fab2 f282 	clz	r2, r2
 800c588:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c58c:	0952      	lsrs	r2, r2, #5
 800c58e:	f880 c001 	strb.w	ip, [r0, #1]
 800c592:	7082      	strb	r2, [r0, #2]
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop

0800c598 <generate_type_name>:
 800c598:	b530      	push	{r4, r5, lr}
 800c59a:	2300      	movs	r3, #0
 800c59c:	700b      	strb	r3, [r1, #0]
 800c59e:	6803      	ldr	r3, [r0, #0]
 800c5a0:	b087      	sub	sp, #28
 800c5a2:	4614      	mov	r4, r2
 800c5a4:	b1d3      	cbz	r3, 800c5dc <generate_type_name+0x44>
 800c5a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c5e4 <generate_type_name+0x4c>)
 800c5a8:	4615      	mov	r5, r2
 800c5aa:	9203      	str	r2, [sp, #12]
 800c5ac:	9500      	str	r5, [sp, #0]
 800c5ae:	6842      	ldr	r2, [r0, #4]
 800c5b0:	480d      	ldr	r0, [pc, #52]	@ (800c5e8 <generate_type_name+0x50>)
 800c5b2:	9001      	str	r0, [sp, #4]
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	490d      	ldr	r1, [pc, #52]	@ (800c5ec <generate_type_name+0x54>)
 800c5b8:	9204      	str	r2, [sp, #16]
 800c5ba:	9105      	str	r1, [sp, #20]
 800c5bc:	9102      	str	r1, [sp, #8]
 800c5be:	4a0c      	ldr	r2, [pc, #48]	@ (800c5f0 <generate_type_name+0x58>)
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	f00a facf 	bl	8016b64 <sniprintf>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	db05      	blt.n	800c5d6 <generate_type_name+0x3e>
 800c5ca:	4284      	cmp	r4, r0
 800c5cc:	bfd4      	ite	le
 800c5ce:	2000      	movle	r0, #0
 800c5d0:	2001      	movgt	r0, #1
 800c5d2:	b007      	add	sp, #28
 800c5d4:	bd30      	pop	{r4, r5, pc}
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	b007      	add	sp, #28
 800c5da:	bd30      	pop	{r4, r5, pc}
 800c5dc:	4b05      	ldr	r3, [pc, #20]	@ (800c5f4 <generate_type_name+0x5c>)
 800c5de:	4a01      	ldr	r2, [pc, #4]	@ (800c5e4 <generate_type_name+0x4c>)
 800c5e0:	461d      	mov	r5, r3
 800c5e2:	e7e2      	b.n	800c5aa <generate_type_name+0x12>
 800c5e4:	08017f00 	.word	0x08017f00
 800c5e8:	08017f18 	.word	0x08017f18
 800c5ec:	08017f14 	.word	0x08017f14
 800c5f0:	08017f04 	.word	0x08017f04
 800c5f4:	080186a0 	.word	0x080186a0

0800c5f8 <generate_topic_name>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	9000      	str	r0, [sp, #0]
 800c600:	4b08      	ldr	r3, [pc, #32]	@ (800c624 <generate_topic_name+0x2c>)
 800c602:	4a09      	ldr	r2, [pc, #36]	@ (800c628 <generate_topic_name+0x30>)
 800c604:	4608      	mov	r0, r1
 800c606:	4621      	mov	r1, r4
 800c608:	f00a faac 	bl	8016b64 <sniprintf>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	db05      	blt.n	800c61c <generate_topic_name+0x24>
 800c610:	4284      	cmp	r4, r0
 800c612:	bfd4      	ite	le
 800c614:	2000      	movle	r0, #0
 800c616:	2001      	movgt	r0, #1
 800c618:	b002      	add	sp, #8
 800c61a:	bd10      	pop	{r4, pc}
 800c61c:	2000      	movs	r0, #0
 800c61e:	b002      	add	sp, #8
 800c620:	bd10      	pop	{r4, pc}
 800c622:	bf00      	nop
 800c624:	08017f24 	.word	0x08017f24
 800c628:	08017f1c 	.word	0x08017f1c

0800c62c <is_uxrce_rmw_identifier_valid>:
 800c62c:	b510      	push	{r4, lr}
 800c62e:	4604      	mov	r4, r0
 800c630:	b140      	cbz	r0, 800c644 <is_uxrce_rmw_identifier_valid+0x18>
 800c632:	f008 f8e5 	bl	8014800 <rmw_get_implementation_identifier>
 800c636:	4601      	mov	r1, r0
 800c638:	4620      	mov	r0, r4
 800c63a:	f7f3 fdf1 	bl	8000220 <strcmp>
 800c63e:	fab0 f080 	clz	r0, r0
 800c642:	0940      	lsrs	r0, r0, #5
 800c644:	bd10      	pop	{r4, pc}
 800c646:	bf00      	nop

0800c648 <get_message_typesupport_handle>:
 800c648:	6883      	ldr	r3, [r0, #8]
 800c64a:	4718      	bx	r3

0800c64c <get_message_typesupport_handle_function>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4604      	mov	r4, r0
 800c650:	6800      	ldr	r0, [r0, #0]
 800c652:	f7f3 fde5 	bl	8000220 <strcmp>
 800c656:	2800      	cmp	r0, #0
 800c658:	bf0c      	ite	eq
 800c65a:	4620      	moveq	r0, r4
 800c65c:	2000      	movne	r0, #0
 800c65e:	bd10      	pop	{r4, pc}

0800c660 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c660:	4b04      	ldr	r3, [pc, #16]	@ (800c674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	b10a      	cbz	r2, 800c66a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800c666:	4803      	ldr	r0, [pc, #12]	@ (800c674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c668:	4770      	bx	lr
 800c66a:	4a03      	ldr	r2, [pc, #12]	@ (800c678 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800c66c:	4801      	ldr	r0, [pc, #4]	@ (800c674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c66e:	6812      	ldr	r2, [r2, #0]
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	4770      	bx	lr
 800c674:	20000030 	.word	0x20000030
 800c678:	20000130 	.word	0x20000130

0800c67c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c67c:	4a02      	ldr	r2, [pc, #8]	@ (800c688 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xc>)
 800c67e:	4b03      	ldr	r3, [pc, #12]	@ (800c68c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x10>)
 800c680:	6812      	ldr	r2, [r2, #0]
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	20000130 	.word	0x20000130
 800c68c:	20000030 	.word	0x20000030

0800c690 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c690:	4b04      	ldr	r3, [pc, #16]	@ (800c6a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	b10a      	cbz	r2, 800c69a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800c696:	4803      	ldr	r0, [pc, #12]	@ (800c6a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c698:	4770      	bx	lr
 800c69a:	4a03      	ldr	r2, [pc, #12]	@ (800c6a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800c69c:	4801      	ldr	r0, [pc, #4]	@ (800c6a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c69e:	6812      	ldr	r2, [r2, #0]
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	4770      	bx	lr
 800c6a4:	20000044 	.word	0x20000044
 800c6a8:	20000130 	.word	0x20000130

0800c6ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c6ac:	4a02      	ldr	r2, [pc, #8]	@ (800c6b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xc>)
 800c6ae:	4b03      	ldr	r3, [pc, #12]	@ (800c6bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x10>)
 800c6b0:	6812      	ldr	r2, [r2, #0]
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	20000130 	.word	0x20000130
 800c6bc:	20000044 	.word	0x20000044

0800c6c0 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 800c6c0:	f008 bc80 	b.w	8014fc4 <std_msgs__msg__Bool__init>

0800c6c4 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 800c6c4:	f008 bc82 	b.w	8014fcc <std_msgs__msg__Bool__fini>

0800c6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c6c8:	4b04      	ldr	r3, [pc, #16]	@ (800c6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	b10a      	cbz	r2, 800c6d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800c6ce:	4803      	ldr	r0, [pc, #12]	@ (800c6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c6d0:	4770      	bx	lr
 800c6d2:	4a03      	ldr	r2, [pc, #12]	@ (800c6e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800c6d4:	4801      	ldr	r0, [pc, #4]	@ (800c6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c6d6:	6812      	ldr	r2, [r2, #0]
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	4770      	bx	lr
 800c6dc:	2000008c 	.word	0x2000008c
 800c6e0:	20000134 	.word	0x20000134

0800c6e4 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_init_function>:
 800c6e4:	f008 bc74 	b.w	8014fd0 <std_msgs__msg__UInt16__init>

0800c6e8 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_fini_function>:
 800c6e8:	f008 bc76 	b.w	8014fd8 <std_msgs__msg__UInt16__fini>

0800c6ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c6ec:	4b04      	ldr	r3, [pc, #16]	@ (800c700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	b10a      	cbz	r2, 800c6f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800c6f2:	4803      	ldr	r0, [pc, #12]	@ (800c700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c6f4:	4770      	bx	lr
 800c6f6:	4a03      	ldr	r2, [pc, #12]	@ (800c704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800c6f8:	4801      	ldr	r0, [pc, #4]	@ (800c700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c6fa:	6812      	ldr	r2, [r2, #0]
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	4770      	bx	lr
 800c700:	200000d4 	.word	0x200000d4
 800c704:	20000134 	.word	0x20000134

0800c708 <_Bool__max_serialized_size>:
 800c708:	b508      	push	{r3, lr}
 800c70a:	2101      	movs	r1, #1
 800c70c:	2000      	movs	r0, #0
 800c70e:	f001 f835 	bl	800d77c <ucdr_alignment>
 800c712:	3001      	adds	r0, #1
 800c714:	bd08      	pop	{r3, pc}
 800c716:	bf00      	nop

0800c718 <_Bool__cdr_deserialize>:
 800c718:	b109      	cbz	r1, 800c71e <_Bool__cdr_deserialize+0x6>
 800c71a:	f000 b867 	b.w	800c7ec <ucdr_deserialize_bool>
 800c71e:	4608      	mov	r0, r1
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop

0800c724 <get_serialized_size_std_msgs__msg__Bool>:
 800c724:	b138      	cbz	r0, 800c736 <get_serialized_size_std_msgs__msg__Bool+0x12>
 800c726:	b508      	push	{r3, lr}
 800c728:	460b      	mov	r3, r1
 800c72a:	4618      	mov	r0, r3
 800c72c:	2101      	movs	r1, #1
 800c72e:	f001 f825 	bl	800d77c <ucdr_alignment>
 800c732:	3001      	adds	r0, #1
 800c734:	bd08      	pop	{r3, pc}
 800c736:	4770      	bx	lr

0800c738 <_Bool__cdr_serialize>:
 800c738:	460a      	mov	r2, r1
 800c73a:	b118      	cbz	r0, 800c744 <_Bool__cdr_serialize+0xc>
 800c73c:	7801      	ldrb	r1, [r0, #0]
 800c73e:	4610      	mov	r0, r2
 800c740:	f000 b83e 	b.w	800c7c0 <ucdr_serialize_bool>
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop

0800c748 <_Bool__get_serialized_size>:
 800c748:	b130      	cbz	r0, 800c758 <_Bool__get_serialized_size+0x10>
 800c74a:	b508      	push	{r3, lr}
 800c74c:	2101      	movs	r1, #1
 800c74e:	2000      	movs	r0, #0
 800c750:	f001 f814 	bl	800d77c <ucdr_alignment>
 800c754:	3001      	adds	r0, #1
 800c756:	bd08      	pop	{r3, pc}
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop

0800c75c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c75c:	4800      	ldr	r0, [pc, #0]	@ (800c760 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 800c75e:	4770      	bx	lr
 800c760:	200000e0 	.word	0x200000e0

0800c764 <_UInt16__max_serialized_size>:
 800c764:	b508      	push	{r3, lr}
 800c766:	2102      	movs	r1, #2
 800c768:	2000      	movs	r0, #0
 800c76a:	f001 f807 	bl	800d77c <ucdr_alignment>
 800c76e:	3002      	adds	r0, #2
 800c770:	bd08      	pop	{r3, pc}
 800c772:	bf00      	nop

0800c774 <_UInt16__cdr_deserialize>:
 800c774:	b109      	cbz	r1, 800c77a <_UInt16__cdr_deserialize+0x6>
 800c776:	f000 b97d 	b.w	800ca74 <ucdr_deserialize_uint16_t>
 800c77a:	4608      	mov	r0, r1
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop

0800c780 <get_serialized_size_std_msgs__msg__UInt16>:
 800c780:	b138      	cbz	r0, 800c792 <get_serialized_size_std_msgs__msg__UInt16+0x12>
 800c782:	b508      	push	{r3, lr}
 800c784:	460b      	mov	r3, r1
 800c786:	4618      	mov	r0, r3
 800c788:	2102      	movs	r1, #2
 800c78a:	f000 fff7 	bl	800d77c <ucdr_alignment>
 800c78e:	3002      	adds	r0, #2
 800c790:	bd08      	pop	{r3, pc}
 800c792:	4770      	bx	lr

0800c794 <_UInt16__cdr_serialize>:
 800c794:	460a      	mov	r2, r1
 800c796:	b118      	cbz	r0, 800c7a0 <_UInt16__cdr_serialize+0xc>
 800c798:	8801      	ldrh	r1, [r0, #0]
 800c79a:	4610      	mov	r0, r2
 800c79c:	f000 b86a 	b.w	800c874 <ucdr_serialize_uint16_t>
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop

0800c7a4 <_UInt16__get_serialized_size>:
 800c7a4:	b130      	cbz	r0, 800c7b4 <_UInt16__get_serialized_size+0x10>
 800c7a6:	b508      	push	{r3, lr}
 800c7a8:	2102      	movs	r1, #2
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	f000 ffe6 	bl	800d77c <ucdr_alignment>
 800c7b0:	3002      	adds	r0, #2
 800c7b2:	bd08      	pop	{r3, pc}
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop

0800c7b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c7b8:	4800      	ldr	r0, [pc, #0]	@ (800c7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x4>)
 800c7ba:	4770      	bx	lr
 800c7bc:	20000108 	.word	0x20000108

0800c7c0 <ucdr_serialize_bool>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	f000 ff8c 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c7cc:	b148      	cbz	r0, 800c7e2 <ucdr_serialize_bool+0x22>
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	701d      	strb	r5, [r3, #0]
 800c7d2:	68a2      	ldr	r2, [r4, #8]
 800c7d4:	6923      	ldr	r3, [r4, #16]
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	440a      	add	r2, r1
 800c7da:	440b      	add	r3, r1
 800c7dc:	60a2      	str	r2, [r4, #8]
 800c7de:	6123      	str	r3, [r4, #16]
 800c7e0:	7561      	strb	r1, [r4, #21]
 800c7e2:	7da0      	ldrb	r0, [r4, #22]
 800c7e4:	f080 0001 	eor.w	r0, r0, #1
 800c7e8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ea:	bf00      	nop

0800c7ec <ucdr_deserialize_bool>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	f000 ff76 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c7f8:	b160      	cbz	r0, 800c814 <ucdr_deserialize_bool+0x28>
 800c7fa:	68a2      	ldr	r2, [r4, #8]
 800c7fc:	6923      	ldr	r3, [r4, #16]
 800c7fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c802:	3900      	subs	r1, #0
 800c804:	bf18      	it	ne
 800c806:	2101      	movne	r1, #1
 800c808:	7029      	strb	r1, [r5, #0]
 800c80a:	3301      	adds	r3, #1
 800c80c:	2101      	movs	r1, #1
 800c80e:	60a2      	str	r2, [r4, #8]
 800c810:	6123      	str	r3, [r4, #16]
 800c812:	7561      	strb	r1, [r4, #21]
 800c814:	7da0      	ldrb	r0, [r4, #22]
 800c816:	f080 0001 	eor.w	r0, r0, #1
 800c81a:	bd38      	pop	{r3, r4, r5, pc}

0800c81c <ucdr_serialize_uint8_t>:
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	460d      	mov	r5, r1
 800c820:	2101      	movs	r1, #1
 800c822:	4604      	mov	r4, r0
 800c824:	f000 ff5e 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c828:	b148      	cbz	r0, 800c83e <ucdr_serialize_uint8_t+0x22>
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	701d      	strb	r5, [r3, #0]
 800c82e:	68a2      	ldr	r2, [r4, #8]
 800c830:	6923      	ldr	r3, [r4, #16]
 800c832:	2101      	movs	r1, #1
 800c834:	440a      	add	r2, r1
 800c836:	440b      	add	r3, r1
 800c838:	60a2      	str	r2, [r4, #8]
 800c83a:	6123      	str	r3, [r4, #16]
 800c83c:	7561      	strb	r1, [r4, #21]
 800c83e:	7da0      	ldrb	r0, [r4, #22]
 800c840:	f080 0001 	eor.w	r0, r0, #1
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	bf00      	nop

0800c848 <ucdr_deserialize_uint8_t>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	460d      	mov	r5, r1
 800c84c:	2101      	movs	r1, #1
 800c84e:	4604      	mov	r4, r0
 800c850:	f000 ff48 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c854:	b150      	cbz	r0, 800c86c <ucdr_deserialize_uint8_t+0x24>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	702b      	strb	r3, [r5, #0]
 800c85c:	68a2      	ldr	r2, [r4, #8]
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	2101      	movs	r1, #1
 800c862:	440a      	add	r2, r1
 800c864:	440b      	add	r3, r1
 800c866:	60a2      	str	r2, [r4, #8]
 800c868:	6123      	str	r3, [r4, #16]
 800c86a:	7561      	strb	r1, [r4, #21]
 800c86c:	7da0      	ldrb	r0, [r4, #22]
 800c86e:	f080 0001 	eor.w	r0, r0, #1
 800c872:	bd38      	pop	{r3, r4, r5, pc}

0800c874 <ucdr_serialize_uint16_t>:
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	460b      	mov	r3, r1
 800c87c:	2102      	movs	r1, #2
 800c87e:	4604      	mov	r4, r0
 800c880:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c884:	f000 ff82 	bl	800d78c <ucdr_buffer_alignment>
 800c888:	4601      	mov	r1, r0
 800c88a:	4620      	mov	r0, r4
 800c88c:	7d67      	ldrb	r7, [r4, #21]
 800c88e:	f000 ffc1 	bl	800d814 <ucdr_advance_buffer>
 800c892:	2102      	movs	r1, #2
 800c894:	4620      	mov	r0, r4
 800c896:	f000 ff19 	bl	800d6cc <ucdr_check_buffer_available_for>
 800c89a:	bb78      	cbnz	r0, 800c8fc <ucdr_serialize_uint16_t+0x88>
 800c89c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	d926      	bls.n	800c8f2 <ucdr_serialize_uint16_t+0x7e>
 800c8a4:	1b5e      	subs	r6, r3, r5
 800c8a6:	60a3      	str	r3, [r4, #8]
 800c8a8:	6923      	ldr	r3, [r4, #16]
 800c8aa:	f1c6 0802 	rsb	r8, r6, #2
 800c8ae:	4433      	add	r3, r6
 800c8b0:	6123      	str	r3, [r4, #16]
 800c8b2:	4641      	mov	r1, r8
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f000 ff15 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d03b      	beq.n	800c936 <ucdr_serialize_uint16_t+0xc2>
 800c8be:	7d23      	ldrb	r3, [r4, #20]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d04a      	beq.n	800c95a <ucdr_serialize_uint16_t+0xe6>
 800c8c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8c8:	702b      	strb	r3, [r5, #0]
 800c8ca:	2e00      	cmp	r6, #0
 800c8cc:	d040      	beq.n	800c950 <ucdr_serialize_uint16_t+0xdc>
 800c8ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c8d2:	706b      	strb	r3, [r5, #1]
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	68a2      	ldr	r2, [r4, #8]
 800c8d8:	7da0      	ldrb	r0, [r4, #22]
 800c8da:	3302      	adds	r3, #2
 800c8dc:	1b9e      	subs	r6, r3, r6
 800c8de:	4442      	add	r2, r8
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	f080 0001 	eor.w	r0, r0, #1
 800c8e6:	60a2      	str	r2, [r4, #8]
 800c8e8:	6126      	str	r6, [r4, #16]
 800c8ea:	7563      	strb	r3, [r4, #21]
 800c8ec:	b002      	add	sp, #8
 800c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f2:	2102      	movs	r1, #2
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 fef5 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c8fa:	b190      	cbz	r0, 800c922 <ucdr_serialize_uint16_t+0xae>
 800c8fc:	7d23      	ldrb	r3, [r4, #20]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	68a3      	ldr	r3, [r4, #8]
 800c902:	d014      	beq.n	800c92e <ucdr_serialize_uint16_t+0xba>
 800c904:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c908:	701a      	strb	r2, [r3, #0]
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c910:	705a      	strb	r2, [r3, #1]
 800c912:	68a2      	ldr	r2, [r4, #8]
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	3202      	adds	r2, #2
 800c918:	3302      	adds	r3, #2
 800c91a:	2102      	movs	r1, #2
 800c91c:	60a2      	str	r2, [r4, #8]
 800c91e:	6123      	str	r3, [r4, #16]
 800c920:	7561      	strb	r1, [r4, #21]
 800c922:	7da0      	ldrb	r0, [r4, #22]
 800c924:	f080 0001 	eor.w	r0, r0, #1
 800c928:	b002      	add	sp, #8
 800c92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c92e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c932:	801a      	strh	r2, [r3, #0]
 800c934:	e7ed      	b.n	800c912 <ucdr_serialize_uint16_t+0x9e>
 800c936:	68a2      	ldr	r2, [r4, #8]
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	7da0      	ldrb	r0, [r4, #22]
 800c93c:	7567      	strb	r7, [r4, #21]
 800c93e:	1b92      	subs	r2, r2, r6
 800c940:	1b9b      	subs	r3, r3, r6
 800c942:	f080 0001 	eor.w	r0, r0, #1
 800c946:	60a2      	str	r2, [r4, #8]
 800c948:	6123      	str	r3, [r4, #16]
 800c94a:	b002      	add	sp, #8
 800c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c950:	68a3      	ldr	r3, [r4, #8]
 800c952:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	e7bc      	b.n	800c8d4 <ucdr_serialize_uint16_t+0x60>
 800c95a:	4628      	mov	r0, r5
 800c95c:	f10d 0506 	add.w	r5, sp, #6
 800c960:	4629      	mov	r1, r5
 800c962:	4632      	mov	r2, r6
 800c964:	f00a faa1 	bl	8016eaa <memcpy>
 800c968:	68a0      	ldr	r0, [r4, #8]
 800c96a:	4642      	mov	r2, r8
 800c96c:	19a9      	adds	r1, r5, r6
 800c96e:	f00a fa9c 	bl	8016eaa <memcpy>
 800c972:	e7af      	b.n	800c8d4 <ucdr_serialize_uint16_t+0x60>

0800c974 <ucdr_serialize_endian_uint16_t>:
 800c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c978:	b083      	sub	sp, #12
 800c97a:	460d      	mov	r5, r1
 800c97c:	2102      	movs	r1, #2
 800c97e:	4604      	mov	r4, r0
 800c980:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c984:	f000 ff02 	bl	800d78c <ucdr_buffer_alignment>
 800c988:	4601      	mov	r1, r0
 800c98a:	4620      	mov	r0, r4
 800c98c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c990:	f000 ff40 	bl	800d814 <ucdr_advance_buffer>
 800c994:	2102      	movs	r1, #2
 800c996:	4620      	mov	r0, r4
 800c998:	f000 fe98 	bl	800d6cc <ucdr_check_buffer_available_for>
 800c99c:	bb70      	cbnz	r0, 800c9fc <ucdr_serialize_endian_uint16_t+0x88>
 800c99e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c9a2:	42be      	cmp	r6, r7
 800c9a4:	d925      	bls.n	800c9f2 <ucdr_serialize_endian_uint16_t+0x7e>
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	60a6      	str	r6, [r4, #8]
 800c9aa:	1bf6      	subs	r6, r6, r7
 800c9ac:	4433      	add	r3, r6
 800c9ae:	f1c6 0902 	rsb	r9, r6, #2
 800c9b2:	6123      	str	r3, [r4, #16]
 800c9b4:	4649      	mov	r1, r9
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f000 fe94 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d039      	beq.n	800ca34 <ucdr_serialize_endian_uint16_t+0xc0>
 800c9c0:	2d01      	cmp	r5, #1
 800c9c2:	d04a      	beq.n	800ca5a <ucdr_serialize_endian_uint16_t+0xe6>
 800c9c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c9c8:	703b      	strb	r3, [r7, #0]
 800c9ca:	2e00      	cmp	r6, #0
 800c9cc:	d040      	beq.n	800ca50 <ucdr_serialize_endian_uint16_t+0xdc>
 800c9ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c9d2:	707b      	strb	r3, [r7, #1]
 800c9d4:	6923      	ldr	r3, [r4, #16]
 800c9d6:	68a2      	ldr	r2, [r4, #8]
 800c9d8:	7da0      	ldrb	r0, [r4, #22]
 800c9da:	3302      	adds	r3, #2
 800c9dc:	444a      	add	r2, r9
 800c9de:	1b9b      	subs	r3, r3, r6
 800c9e0:	2102      	movs	r1, #2
 800c9e2:	f080 0001 	eor.w	r0, r0, #1
 800c9e6:	60a2      	str	r2, [r4, #8]
 800c9e8:	6123      	str	r3, [r4, #16]
 800c9ea:	7561      	strb	r1, [r4, #21]
 800c9ec:	b003      	add	sp, #12
 800c9ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9f2:	2102      	movs	r1, #2
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f000 fe75 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800c9fa:	b188      	cbz	r0, 800ca20 <ucdr_serialize_endian_uint16_t+0xac>
 800c9fc:	2d01      	cmp	r5, #1
 800c9fe:	68a3      	ldr	r3, [r4, #8]
 800ca00:	d014      	beq.n	800ca2c <ucdr_serialize_endian_uint16_t+0xb8>
 800ca02:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca06:	701a      	strb	r2, [r3, #0]
 800ca08:	68a3      	ldr	r3, [r4, #8]
 800ca0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca0e:	705a      	strb	r2, [r3, #1]
 800ca10:	68a2      	ldr	r2, [r4, #8]
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	3202      	adds	r2, #2
 800ca16:	3302      	adds	r3, #2
 800ca18:	2102      	movs	r1, #2
 800ca1a:	60a2      	str	r2, [r4, #8]
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	7561      	strb	r1, [r4, #21]
 800ca20:	7da0      	ldrb	r0, [r4, #22]
 800ca22:	f080 0001 	eor.w	r0, r0, #1
 800ca26:	b003      	add	sp, #12
 800ca28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca30:	801a      	strh	r2, [r3, #0]
 800ca32:	e7ed      	b.n	800ca10 <ucdr_serialize_endian_uint16_t+0x9c>
 800ca34:	68a2      	ldr	r2, [r4, #8]
 800ca36:	6923      	ldr	r3, [r4, #16]
 800ca38:	7da0      	ldrb	r0, [r4, #22]
 800ca3a:	f884 8015 	strb.w	r8, [r4, #21]
 800ca3e:	1b92      	subs	r2, r2, r6
 800ca40:	1b9b      	subs	r3, r3, r6
 800ca42:	f080 0001 	eor.w	r0, r0, #1
 800ca46:	60a2      	str	r2, [r4, #8]
 800ca48:	6123      	str	r3, [r4, #16]
 800ca4a:	b003      	add	sp, #12
 800ca4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca50:	68a3      	ldr	r3, [r4, #8]
 800ca52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca56:	701a      	strb	r2, [r3, #0]
 800ca58:	e7bc      	b.n	800c9d4 <ucdr_serialize_endian_uint16_t+0x60>
 800ca5a:	f10d 0506 	add.w	r5, sp, #6
 800ca5e:	4629      	mov	r1, r5
 800ca60:	4632      	mov	r2, r6
 800ca62:	4638      	mov	r0, r7
 800ca64:	f00a fa21 	bl	8016eaa <memcpy>
 800ca68:	68a0      	ldr	r0, [r4, #8]
 800ca6a:	464a      	mov	r2, r9
 800ca6c:	19a9      	adds	r1, r5, r6
 800ca6e:	f00a fa1c 	bl	8016eaa <memcpy>
 800ca72:	e7af      	b.n	800c9d4 <ucdr_serialize_endian_uint16_t+0x60>

0800ca74 <ucdr_deserialize_uint16_t>:
 800ca74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	460d      	mov	r5, r1
 800ca7a:	2102      	movs	r1, #2
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	f000 fe85 	bl	800d78c <ucdr_buffer_alignment>
 800ca82:	4601      	mov	r1, r0
 800ca84:	4620      	mov	r0, r4
 800ca86:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ca8a:	f000 fec3 	bl	800d814 <ucdr_advance_buffer>
 800ca8e:	2102      	movs	r1, #2
 800ca90:	4620      	mov	r0, r4
 800ca92:	f000 fe1b 	bl	800d6cc <ucdr_check_buffer_available_for>
 800ca96:	bb60      	cbnz	r0, 800caf2 <ucdr_deserialize_uint16_t+0x7e>
 800ca98:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ca9c:	42be      	cmp	r6, r7
 800ca9e:	d923      	bls.n	800cae8 <ucdr_deserialize_uint16_t+0x74>
 800caa0:	6923      	ldr	r3, [r4, #16]
 800caa2:	60a6      	str	r6, [r4, #8]
 800caa4:	1bf6      	subs	r6, r6, r7
 800caa6:	4433      	add	r3, r6
 800caa8:	f1c6 0902 	rsb	r9, r6, #2
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	4649      	mov	r1, r9
 800cab0:	4620      	mov	r0, r4
 800cab2:	f000 fe17 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d034      	beq.n	800cb24 <ucdr_deserialize_uint16_t+0xb0>
 800caba:	7d23      	ldrb	r3, [r4, #20]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d042      	beq.n	800cb46 <ucdr_deserialize_uint16_t+0xd2>
 800cac0:	787b      	ldrb	r3, [r7, #1]
 800cac2:	702b      	strb	r3, [r5, #0]
 800cac4:	2e00      	cmp	r6, #0
 800cac6:	d03a      	beq.n	800cb3e <ucdr_deserialize_uint16_t+0xca>
 800cac8:	783b      	ldrb	r3, [r7, #0]
 800caca:	706b      	strb	r3, [r5, #1]
 800cacc:	6923      	ldr	r3, [r4, #16]
 800cace:	68a2      	ldr	r2, [r4, #8]
 800cad0:	7da0      	ldrb	r0, [r4, #22]
 800cad2:	2102      	movs	r1, #2
 800cad4:	3302      	adds	r3, #2
 800cad6:	444a      	add	r2, r9
 800cad8:	1b9b      	subs	r3, r3, r6
 800cada:	7561      	strb	r1, [r4, #21]
 800cadc:	60a2      	str	r2, [r4, #8]
 800cade:	6123      	str	r3, [r4, #16]
 800cae0:	f080 0001 	eor.w	r0, r0, #1
 800cae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cae8:	2102      	movs	r1, #2
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fdfa 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800caf0:	b180      	cbz	r0, 800cb14 <ucdr_deserialize_uint16_t+0xa0>
 800caf2:	7d23      	ldrb	r3, [r4, #20]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	68a3      	ldr	r3, [r4, #8]
 800caf8:	d011      	beq.n	800cb1e <ucdr_deserialize_uint16_t+0xaa>
 800cafa:	785b      	ldrb	r3, [r3, #1]
 800cafc:	702b      	strb	r3, [r5, #0]
 800cafe:	68a3      	ldr	r3, [r4, #8]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	706b      	strb	r3, [r5, #1]
 800cb04:	68a2      	ldr	r2, [r4, #8]
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	3202      	adds	r2, #2
 800cb0a:	3302      	adds	r3, #2
 800cb0c:	2102      	movs	r1, #2
 800cb0e:	60a2      	str	r2, [r4, #8]
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	7561      	strb	r1, [r4, #21]
 800cb14:	7da0      	ldrb	r0, [r4, #22]
 800cb16:	f080 0001 	eor.w	r0, r0, #1
 800cb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	802b      	strh	r3, [r5, #0]
 800cb22:	e7ef      	b.n	800cb04 <ucdr_deserialize_uint16_t+0x90>
 800cb24:	68a2      	ldr	r2, [r4, #8]
 800cb26:	6923      	ldr	r3, [r4, #16]
 800cb28:	7da0      	ldrb	r0, [r4, #22]
 800cb2a:	f884 8015 	strb.w	r8, [r4, #21]
 800cb2e:	1b92      	subs	r2, r2, r6
 800cb30:	1b9b      	subs	r3, r3, r6
 800cb32:	60a2      	str	r2, [r4, #8]
 800cb34:	6123      	str	r3, [r4, #16]
 800cb36:	f080 0001 	eor.w	r0, r0, #1
 800cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	706b      	strb	r3, [r5, #1]
 800cb44:	e7c2      	b.n	800cacc <ucdr_deserialize_uint16_t+0x58>
 800cb46:	4639      	mov	r1, r7
 800cb48:	4632      	mov	r2, r6
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f00a f9ad 	bl	8016eaa <memcpy>
 800cb50:	68a1      	ldr	r1, [r4, #8]
 800cb52:	464a      	mov	r2, r9
 800cb54:	19a8      	adds	r0, r5, r6
 800cb56:	f00a f9a8 	bl	8016eaa <memcpy>
 800cb5a:	e7b7      	b.n	800cacc <ucdr_deserialize_uint16_t+0x58>

0800cb5c <ucdr_deserialize_endian_uint16_t>:
 800cb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb60:	460e      	mov	r6, r1
 800cb62:	2102      	movs	r1, #2
 800cb64:	4604      	mov	r4, r0
 800cb66:	4615      	mov	r5, r2
 800cb68:	f000 fe10 	bl	800d78c <ucdr_buffer_alignment>
 800cb6c:	4601      	mov	r1, r0
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cb74:	f000 fe4e 	bl	800d814 <ucdr_advance_buffer>
 800cb78:	2102      	movs	r1, #2
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 fda6 	bl	800d6cc <ucdr_check_buffer_available_for>
 800cb80:	bb70      	cbnz	r0, 800cbe0 <ucdr_deserialize_endian_uint16_t+0x84>
 800cb82:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800cb86:	4547      	cmp	r7, r8
 800cb88:	d925      	bls.n	800cbd6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800cb8a:	6923      	ldr	r3, [r4, #16]
 800cb8c:	60a7      	str	r7, [r4, #8]
 800cb8e:	eba7 0708 	sub.w	r7, r7, r8
 800cb92:	443b      	add	r3, r7
 800cb94:	f1c7 0a02 	rsb	sl, r7, #2
 800cb98:	6123      	str	r3, [r4, #16]
 800cb9a:	4651      	mov	r1, sl
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fda1 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d034      	beq.n	800cc10 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cba6:	2e01      	cmp	r6, #1
 800cba8:	d043      	beq.n	800cc32 <ucdr_deserialize_endian_uint16_t+0xd6>
 800cbaa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cbae:	702b      	strb	r3, [r5, #0]
 800cbb0:	2f00      	cmp	r7, #0
 800cbb2:	d03a      	beq.n	800cc2a <ucdr_deserialize_endian_uint16_t+0xce>
 800cbb4:	f898 3000 	ldrb.w	r3, [r8]
 800cbb8:	706b      	strb	r3, [r5, #1]
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	68a2      	ldr	r2, [r4, #8]
 800cbbe:	7da0      	ldrb	r0, [r4, #22]
 800cbc0:	2102      	movs	r1, #2
 800cbc2:	3302      	adds	r3, #2
 800cbc4:	4452      	add	r2, sl
 800cbc6:	1bdb      	subs	r3, r3, r7
 800cbc8:	7561      	strb	r1, [r4, #21]
 800cbca:	60a2      	str	r2, [r4, #8]
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	f080 0001 	eor.w	r0, r0, #1
 800cbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd6:	2102      	movs	r1, #2
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 fd83 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800cbde:	b178      	cbz	r0, 800cc00 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cbe0:	2e01      	cmp	r6, #1
 800cbe2:	68a3      	ldr	r3, [r4, #8]
 800cbe4:	d011      	beq.n	800cc0a <ucdr_deserialize_endian_uint16_t+0xae>
 800cbe6:	785b      	ldrb	r3, [r3, #1]
 800cbe8:	702b      	strb	r3, [r5, #0]
 800cbea:	68a3      	ldr	r3, [r4, #8]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	706b      	strb	r3, [r5, #1]
 800cbf0:	68a2      	ldr	r2, [r4, #8]
 800cbf2:	6923      	ldr	r3, [r4, #16]
 800cbf4:	3202      	adds	r2, #2
 800cbf6:	3302      	adds	r3, #2
 800cbf8:	2102      	movs	r1, #2
 800cbfa:	60a2      	str	r2, [r4, #8]
 800cbfc:	6123      	str	r3, [r4, #16]
 800cbfe:	7561      	strb	r1, [r4, #21]
 800cc00:	7da0      	ldrb	r0, [r4, #22]
 800cc02:	f080 0001 	eor.w	r0, r0, #1
 800cc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc0a:	881b      	ldrh	r3, [r3, #0]
 800cc0c:	802b      	strh	r3, [r5, #0]
 800cc0e:	e7ef      	b.n	800cbf0 <ucdr_deserialize_endian_uint16_t+0x94>
 800cc10:	68a2      	ldr	r2, [r4, #8]
 800cc12:	6923      	ldr	r3, [r4, #16]
 800cc14:	7da0      	ldrb	r0, [r4, #22]
 800cc16:	f884 9015 	strb.w	r9, [r4, #21]
 800cc1a:	1bd2      	subs	r2, r2, r7
 800cc1c:	1bdb      	subs	r3, r3, r7
 800cc1e:	60a2      	str	r2, [r4, #8]
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	f080 0001 	eor.w	r0, r0, #1
 800cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2a:	68a3      	ldr	r3, [r4, #8]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	706b      	strb	r3, [r5, #1]
 800cc30:	e7c3      	b.n	800cbba <ucdr_deserialize_endian_uint16_t+0x5e>
 800cc32:	4641      	mov	r1, r8
 800cc34:	463a      	mov	r2, r7
 800cc36:	4628      	mov	r0, r5
 800cc38:	f00a f937 	bl	8016eaa <memcpy>
 800cc3c:	68a1      	ldr	r1, [r4, #8]
 800cc3e:	4652      	mov	r2, sl
 800cc40:	19e8      	adds	r0, r5, r7
 800cc42:	f00a f932 	bl	8016eaa <memcpy>
 800cc46:	e7b8      	b.n	800cbba <ucdr_deserialize_endian_uint16_t+0x5e>

0800cc48 <ucdr_serialize_uint32_t>:
 800cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	4604      	mov	r4, r0
 800cc50:	9101      	str	r1, [sp, #4]
 800cc52:	2104      	movs	r1, #4
 800cc54:	f000 fd9a 	bl	800d78c <ucdr_buffer_alignment>
 800cc58:	4601      	mov	r1, r0
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	7d67      	ldrb	r7, [r4, #21]
 800cc5e:	f000 fdd9 	bl	800d814 <ucdr_advance_buffer>
 800cc62:	2104      	movs	r1, #4
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fd31 	bl	800d6cc <ucdr_check_buffer_available_for>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d139      	bne.n	800cce2 <ucdr_serialize_uint32_t+0x9a>
 800cc6e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cc72:	42ab      	cmp	r3, r5
 800cc74:	d930      	bls.n	800ccd8 <ucdr_serialize_uint32_t+0x90>
 800cc76:	1b5e      	subs	r6, r3, r5
 800cc78:	60a3      	str	r3, [r4, #8]
 800cc7a:	6923      	ldr	r3, [r4, #16]
 800cc7c:	f1c6 0804 	rsb	r8, r6, #4
 800cc80:	4433      	add	r3, r6
 800cc82:	6123      	str	r3, [r4, #16]
 800cc84:	4641      	mov	r1, r8
 800cc86:	4620      	mov	r0, r4
 800cc88:	f000 fd2c 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d04c      	beq.n	800cd2a <ucdr_serialize_uint32_t+0xe2>
 800cc90:	7d23      	ldrb	r3, [r4, #20]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d063      	beq.n	800cd5e <ucdr_serialize_uint32_t+0x116>
 800cc96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc9a:	702b      	strb	r3, [r5, #0]
 800cc9c:	2e00      	cmp	r6, #0
 800cc9e:	d051      	beq.n	800cd44 <ucdr_serialize_uint32_t+0xfc>
 800cca0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cca4:	706b      	strb	r3, [r5, #1]
 800cca6:	2e01      	cmp	r6, #1
 800cca8:	d050      	beq.n	800cd4c <ucdr_serialize_uint32_t+0x104>
 800ccaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ccae:	70ab      	strb	r3, [r5, #2]
 800ccb0:	2e02      	cmp	r6, #2
 800ccb2:	d04f      	beq.n	800cd54 <ucdr_serialize_uint32_t+0x10c>
 800ccb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ccb8:	70eb      	strb	r3, [r5, #3]
 800ccba:	6923      	ldr	r3, [r4, #16]
 800ccbc:	68a2      	ldr	r2, [r4, #8]
 800ccbe:	7da0      	ldrb	r0, [r4, #22]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	1b9e      	subs	r6, r3, r6
 800ccc4:	4442      	add	r2, r8
 800ccc6:	2304      	movs	r3, #4
 800ccc8:	f080 0001 	eor.w	r0, r0, #1
 800cccc:	60a2      	str	r2, [r4, #8]
 800ccce:	6126      	str	r6, [r4, #16]
 800ccd0:	7563      	strb	r3, [r4, #21]
 800ccd2:	b002      	add	sp, #8
 800ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd8:	2104      	movs	r1, #4
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f000 fd02 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800cce0:	b1d0      	cbz	r0, 800cd18 <ucdr_serialize_uint32_t+0xd0>
 800cce2:	7d23      	ldrb	r3, [r4, #20]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	68a3      	ldr	r3, [r4, #8]
 800cce8:	d01c      	beq.n	800cd24 <ucdr_serialize_uint32_t+0xdc>
 800ccea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ccee:	701a      	strb	r2, [r3, #0]
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ccf6:	705a      	strb	r2, [r3, #1]
 800ccf8:	68a3      	ldr	r3, [r4, #8]
 800ccfa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ccfe:	709a      	strb	r2, [r3, #2]
 800cd00:	68a3      	ldr	r3, [r4, #8]
 800cd02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd06:	70da      	strb	r2, [r3, #3]
 800cd08:	68a2      	ldr	r2, [r4, #8]
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	3204      	adds	r2, #4
 800cd0e:	3304      	adds	r3, #4
 800cd10:	2104      	movs	r1, #4
 800cd12:	60a2      	str	r2, [r4, #8]
 800cd14:	6123      	str	r3, [r4, #16]
 800cd16:	7561      	strb	r1, [r4, #21]
 800cd18:	7da0      	ldrb	r0, [r4, #22]
 800cd1a:	f080 0001 	eor.w	r0, r0, #1
 800cd1e:	b002      	add	sp, #8
 800cd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd24:	9a01      	ldr	r2, [sp, #4]
 800cd26:	601a      	str	r2, [r3, #0]
 800cd28:	e7ee      	b.n	800cd08 <ucdr_serialize_uint32_t+0xc0>
 800cd2a:	68a2      	ldr	r2, [r4, #8]
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	7da0      	ldrb	r0, [r4, #22]
 800cd30:	7567      	strb	r7, [r4, #21]
 800cd32:	1b92      	subs	r2, r2, r6
 800cd34:	1b9b      	subs	r3, r3, r6
 800cd36:	f080 0001 	eor.w	r0, r0, #1
 800cd3a:	60a2      	str	r2, [r4, #8]
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	b002      	add	sp, #8
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd44:	68a3      	ldr	r3, [r4, #8]
 800cd46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd4a:	701a      	strb	r2, [r3, #0]
 800cd4c:	68a3      	ldr	r3, [r4, #8]
 800cd4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd52:	701a      	strb	r2, [r3, #0]
 800cd54:	68a3      	ldr	r3, [r4, #8]
 800cd56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd5a:	701a      	strb	r2, [r3, #0]
 800cd5c:	e7ad      	b.n	800ccba <ucdr_serialize_uint32_t+0x72>
 800cd5e:	4628      	mov	r0, r5
 800cd60:	ad01      	add	r5, sp, #4
 800cd62:	4629      	mov	r1, r5
 800cd64:	4632      	mov	r2, r6
 800cd66:	f00a f8a0 	bl	8016eaa <memcpy>
 800cd6a:	68a0      	ldr	r0, [r4, #8]
 800cd6c:	4642      	mov	r2, r8
 800cd6e:	19a9      	adds	r1, r5, r6
 800cd70:	f00a f89b 	bl	8016eaa <memcpy>
 800cd74:	e7a1      	b.n	800ccba <ucdr_serialize_uint32_t+0x72>
 800cd76:	bf00      	nop

0800cd78 <ucdr_serialize_endian_uint32_t>:
 800cd78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	b083      	sub	sp, #12
 800cd7e:	460d      	mov	r5, r1
 800cd80:	2104      	movs	r1, #4
 800cd82:	4604      	mov	r4, r0
 800cd84:	9201      	str	r2, [sp, #4]
 800cd86:	f000 fd01 	bl	800d78c <ucdr_buffer_alignment>
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cd92:	f000 fd3f 	bl	800d814 <ucdr_advance_buffer>
 800cd96:	2104      	movs	r1, #4
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fc97 	bl	800d6cc <ucdr_check_buffer_available_for>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d138      	bne.n	800ce14 <ucdr_serialize_endian_uint32_t+0x9c>
 800cda2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cda6:	42b7      	cmp	r7, r6
 800cda8:	d92f      	bls.n	800ce0a <ucdr_serialize_endian_uint32_t+0x92>
 800cdaa:	6923      	ldr	r3, [r4, #16]
 800cdac:	60a7      	str	r7, [r4, #8]
 800cdae:	1bbf      	subs	r7, r7, r6
 800cdb0:	443b      	add	r3, r7
 800cdb2:	f1c7 0904 	rsb	r9, r7, #4
 800cdb6:	6123      	str	r3, [r4, #16]
 800cdb8:	4649      	mov	r1, r9
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 fc92 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d04a      	beq.n	800ce5a <ucdr_serialize_endian_uint32_t+0xe2>
 800cdc4:	2d01      	cmp	r5, #1
 800cdc6:	d063      	beq.n	800ce90 <ucdr_serialize_endian_uint32_t+0x118>
 800cdc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cdcc:	7033      	strb	r3, [r6, #0]
 800cdce:	2f00      	cmp	r7, #0
 800cdd0:	d051      	beq.n	800ce76 <ucdr_serialize_endian_uint32_t+0xfe>
 800cdd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cdd6:	7073      	strb	r3, [r6, #1]
 800cdd8:	2f01      	cmp	r7, #1
 800cdda:	d050      	beq.n	800ce7e <ucdr_serialize_endian_uint32_t+0x106>
 800cddc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cde0:	70b3      	strb	r3, [r6, #2]
 800cde2:	2f02      	cmp	r7, #2
 800cde4:	d04f      	beq.n	800ce86 <ucdr_serialize_endian_uint32_t+0x10e>
 800cde6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cdea:	70f3      	strb	r3, [r6, #3]
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	68a2      	ldr	r2, [r4, #8]
 800cdf0:	7da0      	ldrb	r0, [r4, #22]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	444a      	add	r2, r9
 800cdf6:	1bdb      	subs	r3, r3, r7
 800cdf8:	2104      	movs	r1, #4
 800cdfa:	f080 0001 	eor.w	r0, r0, #1
 800cdfe:	60a2      	str	r2, [r4, #8]
 800ce00:	6123      	str	r3, [r4, #16]
 800ce02:	7561      	strb	r1, [r4, #21]
 800ce04:	b003      	add	sp, #12
 800ce06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce0a:	2104      	movs	r1, #4
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f000 fc69 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800ce12:	b1c8      	cbz	r0, 800ce48 <ucdr_serialize_endian_uint32_t+0xd0>
 800ce14:	2d01      	cmp	r5, #1
 800ce16:	68a3      	ldr	r3, [r4, #8]
 800ce18:	d01c      	beq.n	800ce54 <ucdr_serialize_endian_uint32_t+0xdc>
 800ce1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ce1e:	701a      	strb	r2, [r3, #0]
 800ce20:	68a3      	ldr	r3, [r4, #8]
 800ce22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce26:	705a      	strb	r2, [r3, #1]
 800ce28:	68a3      	ldr	r3, [r4, #8]
 800ce2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce2e:	709a      	strb	r2, [r3, #2]
 800ce30:	68a3      	ldr	r3, [r4, #8]
 800ce32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce36:	70da      	strb	r2, [r3, #3]
 800ce38:	68a2      	ldr	r2, [r4, #8]
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	3204      	adds	r2, #4
 800ce3e:	3304      	adds	r3, #4
 800ce40:	2104      	movs	r1, #4
 800ce42:	60a2      	str	r2, [r4, #8]
 800ce44:	6123      	str	r3, [r4, #16]
 800ce46:	7561      	strb	r1, [r4, #21]
 800ce48:	7da0      	ldrb	r0, [r4, #22]
 800ce4a:	f080 0001 	eor.w	r0, r0, #1
 800ce4e:	b003      	add	sp, #12
 800ce50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce54:	9a01      	ldr	r2, [sp, #4]
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	e7ee      	b.n	800ce38 <ucdr_serialize_endian_uint32_t+0xc0>
 800ce5a:	68a2      	ldr	r2, [r4, #8]
 800ce5c:	6923      	ldr	r3, [r4, #16]
 800ce5e:	7da0      	ldrb	r0, [r4, #22]
 800ce60:	f884 8015 	strb.w	r8, [r4, #21]
 800ce64:	1bd2      	subs	r2, r2, r7
 800ce66:	1bdb      	subs	r3, r3, r7
 800ce68:	f080 0001 	eor.w	r0, r0, #1
 800ce6c:	60a2      	str	r2, [r4, #8]
 800ce6e:	6123      	str	r3, [r4, #16]
 800ce70:	b003      	add	sp, #12
 800ce72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce76:	68a3      	ldr	r3, [r4, #8]
 800ce78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce7c:	701a      	strb	r2, [r3, #0]
 800ce7e:	68a3      	ldr	r3, [r4, #8]
 800ce80:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce84:	701a      	strb	r2, [r3, #0]
 800ce86:	68a3      	ldr	r3, [r4, #8]
 800ce88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	e7ad      	b.n	800cdec <ucdr_serialize_endian_uint32_t+0x74>
 800ce90:	ad01      	add	r5, sp, #4
 800ce92:	4629      	mov	r1, r5
 800ce94:	463a      	mov	r2, r7
 800ce96:	4630      	mov	r0, r6
 800ce98:	f00a f807 	bl	8016eaa <memcpy>
 800ce9c:	68a0      	ldr	r0, [r4, #8]
 800ce9e:	464a      	mov	r2, r9
 800cea0:	19e9      	adds	r1, r5, r7
 800cea2:	f00a f802 	bl	8016eaa <memcpy>
 800cea6:	e7a1      	b.n	800cdec <ucdr_serialize_endian_uint32_t+0x74>

0800cea8 <ucdr_deserialize_uint32_t>:
 800cea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceac:	460d      	mov	r5, r1
 800ceae:	2104      	movs	r1, #4
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	f000 fc6b 	bl	800d78c <ucdr_buffer_alignment>
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cebe:	f000 fca9 	bl	800d814 <ucdr_advance_buffer>
 800cec2:	2104      	movs	r1, #4
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 fc01 	bl	800d6cc <ucdr_check_buffer_available_for>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d138      	bne.n	800cf40 <ucdr_deserialize_uint32_t+0x98>
 800cece:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ced2:	42b7      	cmp	r7, r6
 800ced4:	d92f      	bls.n	800cf36 <ucdr_deserialize_uint32_t+0x8e>
 800ced6:	6923      	ldr	r3, [r4, #16]
 800ced8:	60a7      	str	r7, [r4, #8]
 800ceda:	1bbf      	subs	r7, r7, r6
 800cedc:	443b      	add	r3, r7
 800cede:	f1c7 0904 	rsb	r9, r7, #4
 800cee2:	6123      	str	r3, [r4, #16]
 800cee4:	4649      	mov	r1, r9
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fbfc 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d046      	beq.n	800cf7e <ucdr_deserialize_uint32_t+0xd6>
 800cef0:	7d23      	ldrb	r3, [r4, #20]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d05c      	beq.n	800cfb0 <ucdr_deserialize_uint32_t+0x108>
 800cef6:	78f3      	ldrb	r3, [r6, #3]
 800cef8:	702b      	strb	r3, [r5, #0]
 800cefa:	2f00      	cmp	r7, #0
 800cefc:	d04c      	beq.n	800cf98 <ucdr_deserialize_uint32_t+0xf0>
 800cefe:	78b3      	ldrb	r3, [r6, #2]
 800cf00:	706b      	strb	r3, [r5, #1]
 800cf02:	2f01      	cmp	r7, #1
 800cf04:	f105 0302 	add.w	r3, r5, #2
 800cf08:	d04a      	beq.n	800cfa0 <ucdr_deserialize_uint32_t+0xf8>
 800cf0a:	7873      	ldrb	r3, [r6, #1]
 800cf0c:	70ab      	strb	r3, [r5, #2]
 800cf0e:	2f02      	cmp	r7, #2
 800cf10:	f105 0303 	add.w	r3, r5, #3
 800cf14:	d048      	beq.n	800cfa8 <ucdr_deserialize_uint32_t+0x100>
 800cf16:	7833      	ldrb	r3, [r6, #0]
 800cf18:	70eb      	strb	r3, [r5, #3]
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	68a2      	ldr	r2, [r4, #8]
 800cf1e:	7da0      	ldrb	r0, [r4, #22]
 800cf20:	2104      	movs	r1, #4
 800cf22:	3304      	adds	r3, #4
 800cf24:	444a      	add	r2, r9
 800cf26:	1bdb      	subs	r3, r3, r7
 800cf28:	7561      	strb	r1, [r4, #21]
 800cf2a:	60a2      	str	r2, [r4, #8]
 800cf2c:	6123      	str	r3, [r4, #16]
 800cf2e:	f080 0001 	eor.w	r0, r0, #1
 800cf32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf36:	2104      	movs	r1, #4
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f000 fbd3 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800cf3e:	b1b0      	cbz	r0, 800cf6e <ucdr_deserialize_uint32_t+0xc6>
 800cf40:	7d23      	ldrb	r3, [r4, #20]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	d017      	beq.n	800cf78 <ucdr_deserialize_uint32_t+0xd0>
 800cf48:	78db      	ldrb	r3, [r3, #3]
 800cf4a:	702b      	strb	r3, [r5, #0]
 800cf4c:	68a3      	ldr	r3, [r4, #8]
 800cf4e:	789b      	ldrb	r3, [r3, #2]
 800cf50:	706b      	strb	r3, [r5, #1]
 800cf52:	68a3      	ldr	r3, [r4, #8]
 800cf54:	785b      	ldrb	r3, [r3, #1]
 800cf56:	70ab      	strb	r3, [r5, #2]
 800cf58:	68a3      	ldr	r3, [r4, #8]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	70eb      	strb	r3, [r5, #3]
 800cf5e:	68a2      	ldr	r2, [r4, #8]
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	3204      	adds	r2, #4
 800cf64:	3304      	adds	r3, #4
 800cf66:	2104      	movs	r1, #4
 800cf68:	60a2      	str	r2, [r4, #8]
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	7561      	strb	r1, [r4, #21]
 800cf6e:	7da0      	ldrb	r0, [r4, #22]
 800cf70:	f080 0001 	eor.w	r0, r0, #1
 800cf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	602b      	str	r3, [r5, #0]
 800cf7c:	e7ef      	b.n	800cf5e <ucdr_deserialize_uint32_t+0xb6>
 800cf7e:	68a2      	ldr	r2, [r4, #8]
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	7da0      	ldrb	r0, [r4, #22]
 800cf84:	f884 8015 	strb.w	r8, [r4, #21]
 800cf88:	1bd2      	subs	r2, r2, r7
 800cf8a:	1bdb      	subs	r3, r3, r7
 800cf8c:	60a2      	str	r2, [r4, #8]
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	f080 0001 	eor.w	r0, r0, #1
 800cf94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf98:	68a3      	ldr	r3, [r4, #8]
 800cf9a:	789b      	ldrb	r3, [r3, #2]
 800cf9c:	706b      	strb	r3, [r5, #1]
 800cf9e:	1cab      	adds	r3, r5, #2
 800cfa0:	68a2      	ldr	r2, [r4, #8]
 800cfa2:	7852      	ldrb	r2, [r2, #1]
 800cfa4:	f803 2b01 	strb.w	r2, [r3], #1
 800cfa8:	68a2      	ldr	r2, [r4, #8]
 800cfaa:	7812      	ldrb	r2, [r2, #0]
 800cfac:	701a      	strb	r2, [r3, #0]
 800cfae:	e7b4      	b.n	800cf1a <ucdr_deserialize_uint32_t+0x72>
 800cfb0:	4631      	mov	r1, r6
 800cfb2:	463a      	mov	r2, r7
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f009 ff78 	bl	8016eaa <memcpy>
 800cfba:	68a1      	ldr	r1, [r4, #8]
 800cfbc:	464a      	mov	r2, r9
 800cfbe:	19e8      	adds	r0, r5, r7
 800cfc0:	f009 ff73 	bl	8016eaa <memcpy>
 800cfc4:	e7a9      	b.n	800cf1a <ucdr_deserialize_uint32_t+0x72>
 800cfc6:	bf00      	nop

0800cfc8 <ucdr_deserialize_endian_uint32_t>:
 800cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	460e      	mov	r6, r1
 800cfce:	2104      	movs	r1, #4
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	4615      	mov	r5, r2
 800cfd4:	f000 fbda 	bl	800d78c <ucdr_buffer_alignment>
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cfe0:	f000 fc18 	bl	800d814 <ucdr_advance_buffer>
 800cfe4:	2104      	movs	r1, #4
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f000 fb70 	bl	800d6cc <ucdr_check_buffer_available_for>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d13c      	bne.n	800d06a <ucdr_deserialize_endian_uint32_t+0xa2>
 800cff0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800cff4:	42bb      	cmp	r3, r7
 800cff6:	d933      	bls.n	800d060 <ucdr_deserialize_endian_uint32_t+0x98>
 800cff8:	eba3 0807 	sub.w	r8, r3, r7
 800cffc:	60a3      	str	r3, [r4, #8]
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	f1c8 0a04 	rsb	sl, r8, #4
 800d004:	4443      	add	r3, r8
 800d006:	6123      	str	r3, [r4, #16]
 800d008:	4651      	mov	r1, sl
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fb6a 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d010:	2800      	cmp	r0, #0
 800d012:	d048      	beq.n	800d0a6 <ucdr_deserialize_endian_uint32_t+0xde>
 800d014:	2e01      	cmp	r6, #1
 800d016:	d061      	beq.n	800d0dc <ucdr_deserialize_endian_uint32_t+0x114>
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	702b      	strb	r3, [r5, #0]
 800d01c:	f1b8 0f00 	cmp.w	r8, #0
 800d020:	d050      	beq.n	800d0c4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d022:	78bb      	ldrb	r3, [r7, #2]
 800d024:	706b      	strb	r3, [r5, #1]
 800d026:	f1b8 0f01 	cmp.w	r8, #1
 800d02a:	f105 0302 	add.w	r3, r5, #2
 800d02e:	d04d      	beq.n	800d0cc <ucdr_deserialize_endian_uint32_t+0x104>
 800d030:	787b      	ldrb	r3, [r7, #1]
 800d032:	70ab      	strb	r3, [r5, #2]
 800d034:	f1b8 0f02 	cmp.w	r8, #2
 800d038:	f105 0303 	add.w	r3, r5, #3
 800d03c:	d04a      	beq.n	800d0d4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d03e:	783b      	ldrb	r3, [r7, #0]
 800d040:	70eb      	strb	r3, [r5, #3]
 800d042:	6923      	ldr	r3, [r4, #16]
 800d044:	68a2      	ldr	r2, [r4, #8]
 800d046:	7da0      	ldrb	r0, [r4, #22]
 800d048:	2104      	movs	r1, #4
 800d04a:	3304      	adds	r3, #4
 800d04c:	4452      	add	r2, sl
 800d04e:	eba3 0308 	sub.w	r3, r3, r8
 800d052:	7561      	strb	r1, [r4, #21]
 800d054:	60a2      	str	r2, [r4, #8]
 800d056:	6123      	str	r3, [r4, #16]
 800d058:	f080 0001 	eor.w	r0, r0, #1
 800d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d060:	2104      	movs	r1, #4
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fb3e 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d068:	b1a8      	cbz	r0, 800d096 <ucdr_deserialize_endian_uint32_t+0xce>
 800d06a:	2e01      	cmp	r6, #1
 800d06c:	68a3      	ldr	r3, [r4, #8]
 800d06e:	d017      	beq.n	800d0a0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d070:	78db      	ldrb	r3, [r3, #3]
 800d072:	702b      	strb	r3, [r5, #0]
 800d074:	68a3      	ldr	r3, [r4, #8]
 800d076:	789b      	ldrb	r3, [r3, #2]
 800d078:	706b      	strb	r3, [r5, #1]
 800d07a:	68a3      	ldr	r3, [r4, #8]
 800d07c:	785b      	ldrb	r3, [r3, #1]
 800d07e:	70ab      	strb	r3, [r5, #2]
 800d080:	68a3      	ldr	r3, [r4, #8]
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	70eb      	strb	r3, [r5, #3]
 800d086:	68a2      	ldr	r2, [r4, #8]
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	3204      	adds	r2, #4
 800d08c:	3304      	adds	r3, #4
 800d08e:	2104      	movs	r1, #4
 800d090:	60a2      	str	r2, [r4, #8]
 800d092:	6123      	str	r3, [r4, #16]
 800d094:	7561      	strb	r1, [r4, #21]
 800d096:	7da0      	ldrb	r0, [r4, #22]
 800d098:	f080 0001 	eor.w	r0, r0, #1
 800d09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	602b      	str	r3, [r5, #0]
 800d0a4:	e7ef      	b.n	800d086 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d0a6:	68a2      	ldr	r2, [r4, #8]
 800d0a8:	6923      	ldr	r3, [r4, #16]
 800d0aa:	7da0      	ldrb	r0, [r4, #22]
 800d0ac:	f884 9015 	strb.w	r9, [r4, #21]
 800d0b0:	eba2 0208 	sub.w	r2, r2, r8
 800d0b4:	eba3 0308 	sub.w	r3, r3, r8
 800d0b8:	60a2      	str	r2, [r4, #8]
 800d0ba:	6123      	str	r3, [r4, #16]
 800d0bc:	f080 0001 	eor.w	r0, r0, #1
 800d0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c4:	68a3      	ldr	r3, [r4, #8]
 800d0c6:	789b      	ldrb	r3, [r3, #2]
 800d0c8:	706b      	strb	r3, [r5, #1]
 800d0ca:	1cab      	adds	r3, r5, #2
 800d0cc:	68a2      	ldr	r2, [r4, #8]
 800d0ce:	7852      	ldrb	r2, [r2, #1]
 800d0d0:	f803 2b01 	strb.w	r2, [r3], #1
 800d0d4:	68a2      	ldr	r2, [r4, #8]
 800d0d6:	7812      	ldrb	r2, [r2, #0]
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	e7b2      	b.n	800d042 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d0dc:	4639      	mov	r1, r7
 800d0de:	4642      	mov	r2, r8
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	f009 fee2 	bl	8016eaa <memcpy>
 800d0e6:	68a1      	ldr	r1, [r4, #8]
 800d0e8:	4652      	mov	r2, sl
 800d0ea:	eb05 0008 	add.w	r0, r5, r8
 800d0ee:	f009 fedc 	bl	8016eaa <memcpy>
 800d0f2:	e7a6      	b.n	800d042 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d0f4 <ucdr_serialize_uint64_t>:
 800d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f8:	2108      	movs	r1, #8
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	e9cd 2300 	strd	r2, r3, [sp]
 800d102:	f000 fb43 	bl	800d78c <ucdr_buffer_alignment>
 800d106:	4601      	mov	r1, r0
 800d108:	4620      	mov	r0, r4
 800d10a:	7d67      	ldrb	r7, [r4, #21]
 800d10c:	f000 fb82 	bl	800d814 <ucdr_advance_buffer>
 800d110:	2108      	movs	r1, #8
 800d112:	4620      	mov	r0, r4
 800d114:	f000 fada 	bl	800d6cc <ucdr_check_buffer_available_for>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d14e      	bne.n	800d1ba <ucdr_serialize_uint64_t+0xc6>
 800d11c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d120:	42ab      	cmp	r3, r5
 800d122:	d945      	bls.n	800d1b0 <ucdr_serialize_uint64_t+0xbc>
 800d124:	1b5e      	subs	r6, r3, r5
 800d126:	60a3      	str	r3, [r4, #8]
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	f1c6 0808 	rsb	r8, r6, #8
 800d12e:	4433      	add	r3, r6
 800d130:	6123      	str	r3, [r4, #16]
 800d132:	4641      	mov	r1, r8
 800d134:	4620      	mov	r0, r4
 800d136:	f000 fad5 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d074      	beq.n	800d228 <ucdr_serialize_uint64_t+0x134>
 800d13e:	7d23      	ldrb	r3, [r4, #20]
 800d140:	2b01      	cmp	r3, #1
 800d142:	f000 809b 	beq.w	800d27c <ucdr_serialize_uint64_t+0x188>
 800d146:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d14a:	702b      	strb	r3, [r5, #0]
 800d14c:	2e00      	cmp	r6, #0
 800d14e:	d078      	beq.n	800d242 <ucdr_serialize_uint64_t+0x14e>
 800d150:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d154:	706b      	strb	r3, [r5, #1]
 800d156:	2e01      	cmp	r6, #1
 800d158:	d077      	beq.n	800d24a <ucdr_serialize_uint64_t+0x156>
 800d15a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d15e:	70ab      	strb	r3, [r5, #2]
 800d160:	2e02      	cmp	r6, #2
 800d162:	d076      	beq.n	800d252 <ucdr_serialize_uint64_t+0x15e>
 800d164:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d168:	70eb      	strb	r3, [r5, #3]
 800d16a:	2e03      	cmp	r6, #3
 800d16c:	d075      	beq.n	800d25a <ucdr_serialize_uint64_t+0x166>
 800d16e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d172:	712b      	strb	r3, [r5, #4]
 800d174:	2e04      	cmp	r6, #4
 800d176:	d074      	beq.n	800d262 <ucdr_serialize_uint64_t+0x16e>
 800d178:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d17c:	716b      	strb	r3, [r5, #5]
 800d17e:	2e05      	cmp	r6, #5
 800d180:	d073      	beq.n	800d26a <ucdr_serialize_uint64_t+0x176>
 800d182:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d186:	71ab      	strb	r3, [r5, #6]
 800d188:	2e06      	cmp	r6, #6
 800d18a:	d072      	beq.n	800d272 <ucdr_serialize_uint64_t+0x17e>
 800d18c:	f89d 3000 	ldrb.w	r3, [sp]
 800d190:	71eb      	strb	r3, [r5, #7]
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	68a2      	ldr	r2, [r4, #8]
 800d196:	7da0      	ldrb	r0, [r4, #22]
 800d198:	3308      	adds	r3, #8
 800d19a:	1b9e      	subs	r6, r3, r6
 800d19c:	4442      	add	r2, r8
 800d19e:	2308      	movs	r3, #8
 800d1a0:	f080 0001 	eor.w	r0, r0, #1
 800d1a4:	60a2      	str	r2, [r4, #8]
 800d1a6:	6126      	str	r6, [r4, #16]
 800d1a8:	7563      	strb	r3, [r4, #21]
 800d1aa:	b002      	add	sp, #8
 800d1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b0:	2108      	movs	r1, #8
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 fa96 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d1b8:	b350      	cbz	r0, 800d210 <ucdr_serialize_uint64_t+0x11c>
 800d1ba:	7d23      	ldrb	r3, [r4, #20]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d02d      	beq.n	800d21c <ucdr_serialize_uint64_t+0x128>
 800d1c0:	68a3      	ldr	r3, [r4, #8]
 800d1c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d1c6:	701a      	strb	r2, [r3, #0]
 800d1c8:	68a3      	ldr	r3, [r4, #8]
 800d1ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1ce:	705a      	strb	r2, [r3, #1]
 800d1d0:	68a3      	ldr	r3, [r4, #8]
 800d1d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d1d6:	709a      	strb	r2, [r3, #2]
 800d1d8:	68a3      	ldr	r3, [r4, #8]
 800d1da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d1de:	70da      	strb	r2, [r3, #3]
 800d1e0:	68a3      	ldr	r3, [r4, #8]
 800d1e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d1e6:	711a      	strb	r2, [r3, #4]
 800d1e8:	68a3      	ldr	r3, [r4, #8]
 800d1ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d1ee:	715a      	strb	r2, [r3, #5]
 800d1f0:	68a3      	ldr	r3, [r4, #8]
 800d1f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d1f6:	719a      	strb	r2, [r3, #6]
 800d1f8:	68a3      	ldr	r3, [r4, #8]
 800d1fa:	f89d 2000 	ldrb.w	r2, [sp]
 800d1fe:	71da      	strb	r2, [r3, #7]
 800d200:	68a2      	ldr	r2, [r4, #8]
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	3208      	adds	r2, #8
 800d206:	3308      	adds	r3, #8
 800d208:	2108      	movs	r1, #8
 800d20a:	60a2      	str	r2, [r4, #8]
 800d20c:	6123      	str	r3, [r4, #16]
 800d20e:	7561      	strb	r1, [r4, #21]
 800d210:	7da0      	ldrb	r0, [r4, #22]
 800d212:	f080 0001 	eor.w	r0, r0, #1
 800d216:	b002      	add	sp, #8
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	466b      	mov	r3, sp
 800d21e:	cb03      	ldmia	r3!, {r0, r1}
 800d220:	68a3      	ldr	r3, [r4, #8]
 800d222:	6018      	str	r0, [r3, #0]
 800d224:	6059      	str	r1, [r3, #4]
 800d226:	e7eb      	b.n	800d200 <ucdr_serialize_uint64_t+0x10c>
 800d228:	68a2      	ldr	r2, [r4, #8]
 800d22a:	6923      	ldr	r3, [r4, #16]
 800d22c:	7da0      	ldrb	r0, [r4, #22]
 800d22e:	7567      	strb	r7, [r4, #21]
 800d230:	1b92      	subs	r2, r2, r6
 800d232:	1b9b      	subs	r3, r3, r6
 800d234:	f080 0001 	eor.w	r0, r0, #1
 800d238:	60a2      	str	r2, [r4, #8]
 800d23a:	6123      	str	r3, [r4, #16]
 800d23c:	b002      	add	sp, #8
 800d23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d242:	68a3      	ldr	r3, [r4, #8]
 800d244:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d248:	701a      	strb	r2, [r3, #0]
 800d24a:	68a3      	ldr	r3, [r4, #8]
 800d24c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d250:	701a      	strb	r2, [r3, #0]
 800d252:	68a3      	ldr	r3, [r4, #8]
 800d254:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d258:	701a      	strb	r2, [r3, #0]
 800d25a:	68a3      	ldr	r3, [r4, #8]
 800d25c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d260:	701a      	strb	r2, [r3, #0]
 800d262:	68a3      	ldr	r3, [r4, #8]
 800d264:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d270:	701a      	strb	r2, [r3, #0]
 800d272:	68a3      	ldr	r3, [r4, #8]
 800d274:	f89d 2000 	ldrb.w	r2, [sp]
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	e78a      	b.n	800d192 <ucdr_serialize_uint64_t+0x9e>
 800d27c:	4628      	mov	r0, r5
 800d27e:	466d      	mov	r5, sp
 800d280:	4629      	mov	r1, r5
 800d282:	4632      	mov	r2, r6
 800d284:	f009 fe11 	bl	8016eaa <memcpy>
 800d288:	68a0      	ldr	r0, [r4, #8]
 800d28a:	4642      	mov	r2, r8
 800d28c:	19a9      	adds	r1, r5, r6
 800d28e:	f009 fe0c 	bl	8016eaa <memcpy>
 800d292:	e77e      	b.n	800d192 <ucdr_serialize_uint64_t+0x9e>

0800d294 <ucdr_serialize_int16_t>:
 800d294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	460b      	mov	r3, r1
 800d29c:	2102      	movs	r1, #2
 800d29e:	4604      	mov	r4, r0
 800d2a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d2a4:	f000 fa72 	bl	800d78c <ucdr_buffer_alignment>
 800d2a8:	4601      	mov	r1, r0
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	7d67      	ldrb	r7, [r4, #21]
 800d2ae:	f000 fab1 	bl	800d814 <ucdr_advance_buffer>
 800d2b2:	2102      	movs	r1, #2
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f000 fa09 	bl	800d6cc <ucdr_check_buffer_available_for>
 800d2ba:	bb78      	cbnz	r0, 800d31c <ucdr_serialize_int16_t+0x88>
 800d2bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d2c0:	42ab      	cmp	r3, r5
 800d2c2:	d926      	bls.n	800d312 <ucdr_serialize_int16_t+0x7e>
 800d2c4:	1b5e      	subs	r6, r3, r5
 800d2c6:	60a3      	str	r3, [r4, #8]
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	f1c6 0802 	rsb	r8, r6, #2
 800d2ce:	4433      	add	r3, r6
 800d2d0:	6123      	str	r3, [r4, #16]
 800d2d2:	4641      	mov	r1, r8
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fa05 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d03b      	beq.n	800d356 <ucdr_serialize_int16_t+0xc2>
 800d2de:	7d23      	ldrb	r3, [r4, #20]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d04a      	beq.n	800d37a <ucdr_serialize_int16_t+0xe6>
 800d2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2e8:	702b      	strb	r3, [r5, #0]
 800d2ea:	2e00      	cmp	r6, #0
 800d2ec:	d040      	beq.n	800d370 <ucdr_serialize_int16_t+0xdc>
 800d2ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2f2:	706b      	strb	r3, [r5, #1]
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	68a2      	ldr	r2, [r4, #8]
 800d2f8:	7da0      	ldrb	r0, [r4, #22]
 800d2fa:	3302      	adds	r3, #2
 800d2fc:	1b9e      	subs	r6, r3, r6
 800d2fe:	4442      	add	r2, r8
 800d300:	2302      	movs	r3, #2
 800d302:	f080 0001 	eor.w	r0, r0, #1
 800d306:	60a2      	str	r2, [r4, #8]
 800d308:	6126      	str	r6, [r4, #16]
 800d30a:	7563      	strb	r3, [r4, #21]
 800d30c:	b002      	add	sp, #8
 800d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d312:	2102      	movs	r1, #2
 800d314:	4620      	mov	r0, r4
 800d316:	f000 f9e5 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d31a:	b190      	cbz	r0, 800d342 <ucdr_serialize_int16_t+0xae>
 800d31c:	7d23      	ldrb	r3, [r4, #20]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	68a3      	ldr	r3, [r4, #8]
 800d322:	d014      	beq.n	800d34e <ucdr_serialize_int16_t+0xba>
 800d324:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	68a3      	ldr	r3, [r4, #8]
 800d32c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d330:	705a      	strb	r2, [r3, #1]
 800d332:	68a2      	ldr	r2, [r4, #8]
 800d334:	6923      	ldr	r3, [r4, #16]
 800d336:	3202      	adds	r2, #2
 800d338:	3302      	adds	r3, #2
 800d33a:	2102      	movs	r1, #2
 800d33c:	60a2      	str	r2, [r4, #8]
 800d33e:	6123      	str	r3, [r4, #16]
 800d340:	7561      	strb	r1, [r4, #21]
 800d342:	7da0      	ldrb	r0, [r4, #22]
 800d344:	f080 0001 	eor.w	r0, r0, #1
 800d348:	b002      	add	sp, #8
 800d34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d352:	801a      	strh	r2, [r3, #0]
 800d354:	e7ed      	b.n	800d332 <ucdr_serialize_int16_t+0x9e>
 800d356:	68a2      	ldr	r2, [r4, #8]
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	7da0      	ldrb	r0, [r4, #22]
 800d35c:	7567      	strb	r7, [r4, #21]
 800d35e:	1b92      	subs	r2, r2, r6
 800d360:	1b9b      	subs	r3, r3, r6
 800d362:	f080 0001 	eor.w	r0, r0, #1
 800d366:	60a2      	str	r2, [r4, #8]
 800d368:	6123      	str	r3, [r4, #16]
 800d36a:	b002      	add	sp, #8
 800d36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d370:	68a3      	ldr	r3, [r4, #8]
 800d372:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	e7bc      	b.n	800d2f4 <ucdr_serialize_int16_t+0x60>
 800d37a:	4628      	mov	r0, r5
 800d37c:	f10d 0506 	add.w	r5, sp, #6
 800d380:	4629      	mov	r1, r5
 800d382:	4632      	mov	r2, r6
 800d384:	f009 fd91 	bl	8016eaa <memcpy>
 800d388:	68a0      	ldr	r0, [r4, #8]
 800d38a:	4642      	mov	r2, r8
 800d38c:	19a9      	adds	r1, r5, r6
 800d38e:	f009 fd8c 	bl	8016eaa <memcpy>
 800d392:	e7af      	b.n	800d2f4 <ucdr_serialize_int16_t+0x60>

0800d394 <ucdr_deserialize_int16_t>:
 800d394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d398:	460d      	mov	r5, r1
 800d39a:	2102      	movs	r1, #2
 800d39c:	4604      	mov	r4, r0
 800d39e:	f000 f9f5 	bl	800d78c <ucdr_buffer_alignment>
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d3aa:	f000 fa33 	bl	800d814 <ucdr_advance_buffer>
 800d3ae:	2102      	movs	r1, #2
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f000 f98b 	bl	800d6cc <ucdr_check_buffer_available_for>
 800d3b6:	bb60      	cbnz	r0, 800d412 <ucdr_deserialize_int16_t+0x7e>
 800d3b8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d3bc:	42be      	cmp	r6, r7
 800d3be:	d923      	bls.n	800d408 <ucdr_deserialize_int16_t+0x74>
 800d3c0:	6923      	ldr	r3, [r4, #16]
 800d3c2:	60a6      	str	r6, [r4, #8]
 800d3c4:	1bf6      	subs	r6, r6, r7
 800d3c6:	4433      	add	r3, r6
 800d3c8:	f1c6 0902 	rsb	r9, r6, #2
 800d3cc:	6123      	str	r3, [r4, #16]
 800d3ce:	4649      	mov	r1, r9
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f000 f987 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d034      	beq.n	800d444 <ucdr_deserialize_int16_t+0xb0>
 800d3da:	7d23      	ldrb	r3, [r4, #20]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d042      	beq.n	800d466 <ucdr_deserialize_int16_t+0xd2>
 800d3e0:	787b      	ldrb	r3, [r7, #1]
 800d3e2:	702b      	strb	r3, [r5, #0]
 800d3e4:	2e00      	cmp	r6, #0
 800d3e6:	d03a      	beq.n	800d45e <ucdr_deserialize_int16_t+0xca>
 800d3e8:	783b      	ldrb	r3, [r7, #0]
 800d3ea:	706b      	strb	r3, [r5, #1]
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	68a2      	ldr	r2, [r4, #8]
 800d3f0:	7da0      	ldrb	r0, [r4, #22]
 800d3f2:	2102      	movs	r1, #2
 800d3f4:	3302      	adds	r3, #2
 800d3f6:	444a      	add	r2, r9
 800d3f8:	1b9b      	subs	r3, r3, r6
 800d3fa:	7561      	strb	r1, [r4, #21]
 800d3fc:	60a2      	str	r2, [r4, #8]
 800d3fe:	6123      	str	r3, [r4, #16]
 800d400:	f080 0001 	eor.w	r0, r0, #1
 800d404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d408:	2102      	movs	r1, #2
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 f96a 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d410:	b180      	cbz	r0, 800d434 <ucdr_deserialize_int16_t+0xa0>
 800d412:	7d23      	ldrb	r3, [r4, #20]
 800d414:	2b01      	cmp	r3, #1
 800d416:	68a3      	ldr	r3, [r4, #8]
 800d418:	d011      	beq.n	800d43e <ucdr_deserialize_int16_t+0xaa>
 800d41a:	785b      	ldrb	r3, [r3, #1]
 800d41c:	702b      	strb	r3, [r5, #0]
 800d41e:	68a3      	ldr	r3, [r4, #8]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	706b      	strb	r3, [r5, #1]
 800d424:	68a2      	ldr	r2, [r4, #8]
 800d426:	6923      	ldr	r3, [r4, #16]
 800d428:	3202      	adds	r2, #2
 800d42a:	3302      	adds	r3, #2
 800d42c:	2102      	movs	r1, #2
 800d42e:	60a2      	str	r2, [r4, #8]
 800d430:	6123      	str	r3, [r4, #16]
 800d432:	7561      	strb	r1, [r4, #21]
 800d434:	7da0      	ldrb	r0, [r4, #22]
 800d436:	f080 0001 	eor.w	r0, r0, #1
 800d43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	802b      	strh	r3, [r5, #0]
 800d442:	e7ef      	b.n	800d424 <ucdr_deserialize_int16_t+0x90>
 800d444:	68a2      	ldr	r2, [r4, #8]
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	7da0      	ldrb	r0, [r4, #22]
 800d44a:	f884 8015 	strb.w	r8, [r4, #21]
 800d44e:	1b92      	subs	r2, r2, r6
 800d450:	1b9b      	subs	r3, r3, r6
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6123      	str	r3, [r4, #16]
 800d456:	f080 0001 	eor.w	r0, r0, #1
 800d45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	706b      	strb	r3, [r5, #1]
 800d464:	e7c2      	b.n	800d3ec <ucdr_deserialize_int16_t+0x58>
 800d466:	4639      	mov	r1, r7
 800d468:	4632      	mov	r2, r6
 800d46a:	4628      	mov	r0, r5
 800d46c:	f009 fd1d 	bl	8016eaa <memcpy>
 800d470:	68a1      	ldr	r1, [r4, #8]
 800d472:	464a      	mov	r2, r9
 800d474:	19a8      	adds	r0, r5, r6
 800d476:	f009 fd18 	bl	8016eaa <memcpy>
 800d47a:	e7b7      	b.n	800d3ec <ucdr_deserialize_int16_t+0x58>

0800d47c <ucdr_serialize_int32_t>:
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	b082      	sub	sp, #8
 800d482:	4604      	mov	r4, r0
 800d484:	9101      	str	r1, [sp, #4]
 800d486:	2104      	movs	r1, #4
 800d488:	f000 f980 	bl	800d78c <ucdr_buffer_alignment>
 800d48c:	4601      	mov	r1, r0
 800d48e:	4620      	mov	r0, r4
 800d490:	7d67      	ldrb	r7, [r4, #21]
 800d492:	f000 f9bf 	bl	800d814 <ucdr_advance_buffer>
 800d496:	2104      	movs	r1, #4
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 f917 	bl	800d6cc <ucdr_check_buffer_available_for>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d139      	bne.n	800d516 <ucdr_serialize_int32_t+0x9a>
 800d4a2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d4a6:	42ab      	cmp	r3, r5
 800d4a8:	d930      	bls.n	800d50c <ucdr_serialize_int32_t+0x90>
 800d4aa:	1b5e      	subs	r6, r3, r5
 800d4ac:	60a3      	str	r3, [r4, #8]
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	f1c6 0804 	rsb	r8, r6, #4
 800d4b4:	4433      	add	r3, r6
 800d4b6:	6123      	str	r3, [r4, #16]
 800d4b8:	4641      	mov	r1, r8
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f000 f912 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d04c      	beq.n	800d55e <ucdr_serialize_int32_t+0xe2>
 800d4c4:	7d23      	ldrb	r3, [r4, #20]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d063      	beq.n	800d592 <ucdr_serialize_int32_t+0x116>
 800d4ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4ce:	702b      	strb	r3, [r5, #0]
 800d4d0:	2e00      	cmp	r6, #0
 800d4d2:	d051      	beq.n	800d578 <ucdr_serialize_int32_t+0xfc>
 800d4d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4d8:	706b      	strb	r3, [r5, #1]
 800d4da:	2e01      	cmp	r6, #1
 800d4dc:	d050      	beq.n	800d580 <ucdr_serialize_int32_t+0x104>
 800d4de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d4e2:	70ab      	strb	r3, [r5, #2]
 800d4e4:	2e02      	cmp	r6, #2
 800d4e6:	d04f      	beq.n	800d588 <ucdr_serialize_int32_t+0x10c>
 800d4e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4ec:	70eb      	strb	r3, [r5, #3]
 800d4ee:	6923      	ldr	r3, [r4, #16]
 800d4f0:	68a2      	ldr	r2, [r4, #8]
 800d4f2:	7da0      	ldrb	r0, [r4, #22]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	1b9e      	subs	r6, r3, r6
 800d4f8:	4442      	add	r2, r8
 800d4fa:	2304      	movs	r3, #4
 800d4fc:	f080 0001 	eor.w	r0, r0, #1
 800d500:	60a2      	str	r2, [r4, #8]
 800d502:	6126      	str	r6, [r4, #16]
 800d504:	7563      	strb	r3, [r4, #21]
 800d506:	b002      	add	sp, #8
 800d508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d50c:	2104      	movs	r1, #4
 800d50e:	4620      	mov	r0, r4
 800d510:	f000 f8e8 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d514:	b1d0      	cbz	r0, 800d54c <ucdr_serialize_int32_t+0xd0>
 800d516:	7d23      	ldrb	r3, [r4, #20]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	d01c      	beq.n	800d558 <ucdr_serialize_int32_t+0xdc>
 800d51e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d522:	701a      	strb	r2, [r3, #0]
 800d524:	68a3      	ldr	r3, [r4, #8]
 800d526:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d52a:	705a      	strb	r2, [r3, #1]
 800d52c:	68a3      	ldr	r3, [r4, #8]
 800d52e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d532:	709a      	strb	r2, [r3, #2]
 800d534:	68a3      	ldr	r3, [r4, #8]
 800d536:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d53a:	70da      	strb	r2, [r3, #3]
 800d53c:	68a2      	ldr	r2, [r4, #8]
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	3204      	adds	r2, #4
 800d542:	3304      	adds	r3, #4
 800d544:	2104      	movs	r1, #4
 800d546:	60a2      	str	r2, [r4, #8]
 800d548:	6123      	str	r3, [r4, #16]
 800d54a:	7561      	strb	r1, [r4, #21]
 800d54c:	7da0      	ldrb	r0, [r4, #22]
 800d54e:	f080 0001 	eor.w	r0, r0, #1
 800d552:	b002      	add	sp, #8
 800d554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d558:	9a01      	ldr	r2, [sp, #4]
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	e7ee      	b.n	800d53c <ucdr_serialize_int32_t+0xc0>
 800d55e:	68a2      	ldr	r2, [r4, #8]
 800d560:	6923      	ldr	r3, [r4, #16]
 800d562:	7da0      	ldrb	r0, [r4, #22]
 800d564:	7567      	strb	r7, [r4, #21]
 800d566:	1b92      	subs	r2, r2, r6
 800d568:	1b9b      	subs	r3, r3, r6
 800d56a:	f080 0001 	eor.w	r0, r0, #1
 800d56e:	60a2      	str	r2, [r4, #8]
 800d570:	6123      	str	r3, [r4, #16]
 800d572:	b002      	add	sp, #8
 800d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d578:	68a3      	ldr	r3, [r4, #8]
 800d57a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	68a3      	ldr	r3, [r4, #8]
 800d582:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d586:	701a      	strb	r2, [r3, #0]
 800d588:	68a3      	ldr	r3, [r4, #8]
 800d58a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	e7ad      	b.n	800d4ee <ucdr_serialize_int32_t+0x72>
 800d592:	4628      	mov	r0, r5
 800d594:	ad01      	add	r5, sp, #4
 800d596:	4629      	mov	r1, r5
 800d598:	4632      	mov	r2, r6
 800d59a:	f009 fc86 	bl	8016eaa <memcpy>
 800d59e:	68a0      	ldr	r0, [r4, #8]
 800d5a0:	4642      	mov	r2, r8
 800d5a2:	19a9      	adds	r1, r5, r6
 800d5a4:	f009 fc81 	bl	8016eaa <memcpy>
 800d5a8:	e7a1      	b.n	800d4ee <ucdr_serialize_int32_t+0x72>
 800d5aa:	bf00      	nop

0800d5ac <ucdr_deserialize_int32_t>:
 800d5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	460d      	mov	r5, r1
 800d5b2:	2104      	movs	r1, #4
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	f000 f8e9 	bl	800d78c <ucdr_buffer_alignment>
 800d5ba:	4601      	mov	r1, r0
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d5c2:	f000 f927 	bl	800d814 <ucdr_advance_buffer>
 800d5c6:	2104      	movs	r1, #4
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 f87f 	bl	800d6cc <ucdr_check_buffer_available_for>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d138      	bne.n	800d644 <ucdr_deserialize_int32_t+0x98>
 800d5d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d5d6:	42b7      	cmp	r7, r6
 800d5d8:	d92f      	bls.n	800d63a <ucdr_deserialize_int32_t+0x8e>
 800d5da:	6923      	ldr	r3, [r4, #16]
 800d5dc:	60a7      	str	r7, [r4, #8]
 800d5de:	1bbf      	subs	r7, r7, r6
 800d5e0:	443b      	add	r3, r7
 800d5e2:	f1c7 0904 	rsb	r9, r7, #4
 800d5e6:	6123      	str	r3, [r4, #16]
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f000 f87a 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d046      	beq.n	800d682 <ucdr_deserialize_int32_t+0xd6>
 800d5f4:	7d23      	ldrb	r3, [r4, #20]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d05c      	beq.n	800d6b4 <ucdr_deserialize_int32_t+0x108>
 800d5fa:	78f3      	ldrb	r3, [r6, #3]
 800d5fc:	702b      	strb	r3, [r5, #0]
 800d5fe:	2f00      	cmp	r7, #0
 800d600:	d04c      	beq.n	800d69c <ucdr_deserialize_int32_t+0xf0>
 800d602:	78b3      	ldrb	r3, [r6, #2]
 800d604:	706b      	strb	r3, [r5, #1]
 800d606:	2f01      	cmp	r7, #1
 800d608:	f105 0302 	add.w	r3, r5, #2
 800d60c:	d04a      	beq.n	800d6a4 <ucdr_deserialize_int32_t+0xf8>
 800d60e:	7873      	ldrb	r3, [r6, #1]
 800d610:	70ab      	strb	r3, [r5, #2]
 800d612:	2f02      	cmp	r7, #2
 800d614:	f105 0303 	add.w	r3, r5, #3
 800d618:	d048      	beq.n	800d6ac <ucdr_deserialize_int32_t+0x100>
 800d61a:	7833      	ldrb	r3, [r6, #0]
 800d61c:	70eb      	strb	r3, [r5, #3]
 800d61e:	6923      	ldr	r3, [r4, #16]
 800d620:	68a2      	ldr	r2, [r4, #8]
 800d622:	7da0      	ldrb	r0, [r4, #22]
 800d624:	2104      	movs	r1, #4
 800d626:	3304      	adds	r3, #4
 800d628:	444a      	add	r2, r9
 800d62a:	1bdb      	subs	r3, r3, r7
 800d62c:	7561      	strb	r1, [r4, #21]
 800d62e:	60a2      	str	r2, [r4, #8]
 800d630:	6123      	str	r3, [r4, #16]
 800d632:	f080 0001 	eor.w	r0, r0, #1
 800d636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d63a:	2104      	movs	r1, #4
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 f851 	bl	800d6e4 <ucdr_check_final_buffer_behavior>
 800d642:	b1b0      	cbz	r0, 800d672 <ucdr_deserialize_int32_t+0xc6>
 800d644:	7d23      	ldrb	r3, [r4, #20]
 800d646:	2b01      	cmp	r3, #1
 800d648:	68a3      	ldr	r3, [r4, #8]
 800d64a:	d017      	beq.n	800d67c <ucdr_deserialize_int32_t+0xd0>
 800d64c:	78db      	ldrb	r3, [r3, #3]
 800d64e:	702b      	strb	r3, [r5, #0]
 800d650:	68a3      	ldr	r3, [r4, #8]
 800d652:	789b      	ldrb	r3, [r3, #2]
 800d654:	706b      	strb	r3, [r5, #1]
 800d656:	68a3      	ldr	r3, [r4, #8]
 800d658:	785b      	ldrb	r3, [r3, #1]
 800d65a:	70ab      	strb	r3, [r5, #2]
 800d65c:	68a3      	ldr	r3, [r4, #8]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	70eb      	strb	r3, [r5, #3]
 800d662:	68a2      	ldr	r2, [r4, #8]
 800d664:	6923      	ldr	r3, [r4, #16]
 800d666:	3204      	adds	r2, #4
 800d668:	3304      	adds	r3, #4
 800d66a:	2104      	movs	r1, #4
 800d66c:	60a2      	str	r2, [r4, #8]
 800d66e:	6123      	str	r3, [r4, #16]
 800d670:	7561      	strb	r1, [r4, #21]
 800d672:	7da0      	ldrb	r0, [r4, #22]
 800d674:	f080 0001 	eor.w	r0, r0, #1
 800d678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	e7ef      	b.n	800d662 <ucdr_deserialize_int32_t+0xb6>
 800d682:	68a2      	ldr	r2, [r4, #8]
 800d684:	6923      	ldr	r3, [r4, #16]
 800d686:	7da0      	ldrb	r0, [r4, #22]
 800d688:	f884 8015 	strb.w	r8, [r4, #21]
 800d68c:	1bd2      	subs	r2, r2, r7
 800d68e:	1bdb      	subs	r3, r3, r7
 800d690:	60a2      	str	r2, [r4, #8]
 800d692:	6123      	str	r3, [r4, #16]
 800d694:	f080 0001 	eor.w	r0, r0, #1
 800d698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d69c:	68a3      	ldr	r3, [r4, #8]
 800d69e:	789b      	ldrb	r3, [r3, #2]
 800d6a0:	706b      	strb	r3, [r5, #1]
 800d6a2:	1cab      	adds	r3, r5, #2
 800d6a4:	68a2      	ldr	r2, [r4, #8]
 800d6a6:	7852      	ldrb	r2, [r2, #1]
 800d6a8:	f803 2b01 	strb.w	r2, [r3], #1
 800d6ac:	68a2      	ldr	r2, [r4, #8]
 800d6ae:	7812      	ldrb	r2, [r2, #0]
 800d6b0:	701a      	strb	r2, [r3, #0]
 800d6b2:	e7b4      	b.n	800d61e <ucdr_deserialize_int32_t+0x72>
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	463a      	mov	r2, r7
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	f009 fbf6 	bl	8016eaa <memcpy>
 800d6be:	68a1      	ldr	r1, [r4, #8]
 800d6c0:	464a      	mov	r2, r9
 800d6c2:	19e8      	adds	r0, r5, r7
 800d6c4:	f009 fbf1 	bl	8016eaa <memcpy>
 800d6c8:	e7a9      	b.n	800d61e <ucdr_deserialize_int32_t+0x72>
 800d6ca:	bf00      	nop

0800d6cc <ucdr_check_buffer_available_for>:
 800d6cc:	7d83      	ldrb	r3, [r0, #22]
 800d6ce:	b93b      	cbnz	r3, 800d6e0 <ucdr_check_buffer_available_for+0x14>
 800d6d0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d6d4:	4419      	add	r1, r3
 800d6d6:	4288      	cmp	r0, r1
 800d6d8:	bf34      	ite	cc
 800d6da:	2000      	movcc	r0, #0
 800d6dc:	2001      	movcs	r0, #1
 800d6de:	4770      	bx	lr
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	4770      	bx	lr

0800d6e4 <ucdr_check_final_buffer_behavior>:
 800d6e4:	7d83      	ldrb	r3, [r0, #22]
 800d6e6:	b943      	cbnz	r3, 800d6fa <ucdr_check_final_buffer_behavior+0x16>
 800d6e8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d6ec:	4291      	cmp	r1, r2
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	d205      	bcs.n	800d700 <ucdr_check_final_buffer_behavior+0x1c>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	bd10      	pop	{r4, pc}
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	4770      	bx	lr
 800d700:	6982      	ldr	r2, [r0, #24]
 800d702:	b13a      	cbz	r2, 800d714 <ucdr_check_final_buffer_behavior+0x30>
 800d704:	69c1      	ldr	r1, [r0, #28]
 800d706:	4790      	blx	r2
 800d708:	f080 0301 	eor.w	r3, r0, #1
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	75a0      	strb	r0, [r4, #22]
 800d710:	4618      	mov	r0, r3
 800d712:	bd10      	pop	{r4, pc}
 800d714:	2001      	movs	r0, #1
 800d716:	75a0      	strb	r0, [r4, #22]
 800d718:	e7fa      	b.n	800d710 <ucdr_check_final_buffer_behavior+0x2c>
 800d71a:	bf00      	nop

0800d71c <ucdr_set_on_full_buffer_callback>:
 800d71c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop

0800d724 <ucdr_init_buffer_origin_offset_endian>:
 800d724:	b410      	push	{r4}
 800d726:	9c01      	ldr	r4, [sp, #4]
 800d728:	6001      	str	r1, [r0, #0]
 800d72a:	440a      	add	r2, r1
 800d72c:	6042      	str	r2, [r0, #4]
 800d72e:	190a      	adds	r2, r1, r4
 800d730:	441c      	add	r4, r3
 800d732:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d736:	6082      	str	r2, [r0, #8]
 800d738:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d73c:	7503      	strb	r3, [r0, #20]
 800d73e:	2200      	movs	r2, #0
 800d740:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d744:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d748:	7542      	strb	r2, [r0, #21]
 800d74a:	7582      	strb	r2, [r0, #22]
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop

0800d750 <ucdr_init_buffer_origin_offset>:
 800d750:	b510      	push	{r4, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	9c04      	ldr	r4, [sp, #16]
 800d756:	9400      	str	r4, [sp, #0]
 800d758:	2401      	movs	r4, #1
 800d75a:	9401      	str	r4, [sp, #4]
 800d75c:	f7ff ffe2 	bl	800d724 <ucdr_init_buffer_origin_offset_endian>
 800d760:	b002      	add	sp, #8
 800d762:	bd10      	pop	{r4, pc}

0800d764 <ucdr_init_buffer_origin>:
 800d764:	b510      	push	{r4, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	2400      	movs	r4, #0
 800d76a:	9400      	str	r4, [sp, #0]
 800d76c:	f7ff fff0 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800d770:	b002      	add	sp, #8
 800d772:	bd10      	pop	{r4, pc}

0800d774 <ucdr_init_buffer>:
 800d774:	2300      	movs	r3, #0
 800d776:	f7ff bff5 	b.w	800d764 <ucdr_init_buffer_origin>
 800d77a:	bf00      	nop

0800d77c <ucdr_alignment>:
 800d77c:	fbb0 f3f1 	udiv	r3, r0, r1
 800d780:	fb03 0011 	mls	r0, r3, r1, r0
 800d784:	1a08      	subs	r0, r1, r0
 800d786:	3901      	subs	r1, #1
 800d788:	4008      	ands	r0, r1
 800d78a:	4770      	bx	lr

0800d78c <ucdr_buffer_alignment>:
 800d78c:	7d43      	ldrb	r3, [r0, #21]
 800d78e:	428b      	cmp	r3, r1
 800d790:	d208      	bcs.n	800d7a4 <ucdr_buffer_alignment+0x18>
 800d792:	6900      	ldr	r0, [r0, #16]
 800d794:	fbb0 f3f1 	udiv	r3, r0, r1
 800d798:	fb01 0013 	mls	r0, r1, r3, r0
 800d79c:	1a08      	subs	r0, r1, r0
 800d79e:	3901      	subs	r1, #1
 800d7a0:	4008      	ands	r0, r1
 800d7a2:	4770      	bx	lr
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	4770      	bx	lr

0800d7a8 <ucdr_align_to>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	460d      	mov	r5, r1
 800d7ae:	f7ff ffed 	bl	800d78c <ucdr_buffer_alignment>
 800d7b2:	68a3      	ldr	r3, [r4, #8]
 800d7b4:	6921      	ldr	r1, [r4, #16]
 800d7b6:	7565      	strb	r5, [r4, #21]
 800d7b8:	181a      	adds	r2, r3, r0
 800d7ba:	6863      	ldr	r3, [r4, #4]
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	4408      	add	r0, r1
 800d7c0:	bf28      	it	cs
 800d7c2:	4613      	movcs	r3, r2
 800d7c4:	6120      	str	r0, [r4, #16]
 800d7c6:	60a3      	str	r3, [r4, #8]
 800d7c8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ca:	bf00      	nop

0800d7cc <ucdr_buffer_length>:
 800d7cc:	6882      	ldr	r2, [r0, #8]
 800d7ce:	6800      	ldr	r0, [r0, #0]
 800d7d0:	1a10      	subs	r0, r2, r0
 800d7d2:	4770      	bx	lr

0800d7d4 <ucdr_buffer_remaining>:
 800d7d4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d7d8:	1a10      	subs	r0, r2, r0
 800d7da:	4770      	bx	lr

0800d7dc <ucdr_check_final_buffer_behavior_array>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	7d83      	ldrb	r3, [r0, #22]
 800d7e0:	b963      	cbnz	r3, 800d7fc <ucdr_check_final_buffer_behavior_array+0x20>
 800d7e2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	460d      	mov	r5, r1
 800d7ec:	d308      	bcc.n	800d800 <ucdr_check_final_buffer_behavior_array+0x24>
 800d7ee:	b139      	cbz	r1, 800d800 <ucdr_check_final_buffer_behavior_array+0x24>
 800d7f0:	6983      	ldr	r3, [r0, #24]
 800d7f2:	b163      	cbz	r3, 800d80e <ucdr_check_final_buffer_behavior_array+0x32>
 800d7f4:	69c1      	ldr	r1, [r0, #28]
 800d7f6:	4798      	blx	r3
 800d7f8:	75a0      	strb	r0, [r4, #22]
 800d7fa:	b108      	cbz	r0, 800d800 <ucdr_check_final_buffer_behavior_array+0x24>
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	4620      	mov	r0, r4
 800d802:	f7ff ffe7 	bl	800d7d4 <ucdr_buffer_remaining>
 800d806:	42a8      	cmp	r0, r5
 800d808:	bf28      	it	cs
 800d80a:	4628      	movcs	r0, r5
 800d80c:	bd38      	pop	{r3, r4, r5, pc}
 800d80e:	2301      	movs	r3, #1
 800d810:	7583      	strb	r3, [r0, #22]
 800d812:	e7f3      	b.n	800d7fc <ucdr_check_final_buffer_behavior_array+0x20>

0800d814 <ucdr_advance_buffer>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	4604      	mov	r4, r0
 800d818:	460d      	mov	r5, r1
 800d81a:	f7ff ff57 	bl	800d6cc <ucdr_check_buffer_available_for>
 800d81e:	b178      	cbz	r0, 800d840 <ucdr_advance_buffer+0x2c>
 800d820:	6923      	ldr	r3, [r4, #16]
 800d822:	68a2      	ldr	r2, [r4, #8]
 800d824:	442b      	add	r3, r5
 800d826:	6123      	str	r3, [r4, #16]
 800d828:	2301      	movs	r3, #1
 800d82a:	442a      	add	r2, r5
 800d82c:	7563      	strb	r3, [r4, #21]
 800d82e:	60a2      	str	r2, [r4, #8]
 800d830:	bd38      	pop	{r3, r4, r5, pc}
 800d832:	68a2      	ldr	r2, [r4, #8]
 800d834:	6923      	ldr	r3, [r4, #16]
 800d836:	4402      	add	r2, r0
 800d838:	4403      	add	r3, r0
 800d83a:	1a2d      	subs	r5, r5, r0
 800d83c:	60a2      	str	r2, [r4, #8]
 800d83e:	6123      	str	r3, [r4, #16]
 800d840:	4629      	mov	r1, r5
 800d842:	2201      	movs	r2, #1
 800d844:	4620      	mov	r0, r4
 800d846:	f7ff ffc9 	bl	800d7dc <ucdr_check_final_buffer_behavior_array>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d1f1      	bne.n	800d832 <ucdr_advance_buffer+0x1e>
 800d84e:	2301      	movs	r3, #1
 800d850:	7563      	strb	r3, [r4, #21]
 800d852:	bd38      	pop	{r3, r4, r5, pc}

0800d854 <uxr_buffer_delete_entity>:
 800d854:	b510      	push	{r4, lr}
 800d856:	2300      	movs	r3, #0
 800d858:	b08e      	sub	sp, #56	@ 0x38
 800d85a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d85e:	2303      	movs	r3, #3
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	2204      	movs	r2, #4
 800d864:	ab06      	add	r3, sp, #24
 800d866:	4604      	mov	r4, r0
 800d868:	9103      	str	r1, [sp, #12]
 800d86a:	f001 fab7 	bl	800eddc <uxr_prepare_stream_to_write_submessage>
 800d86e:	b918      	cbnz	r0, 800d878 <uxr_buffer_delete_entity+0x24>
 800d870:	4604      	mov	r4, r0
 800d872:	4620      	mov	r0, r4
 800d874:	b00e      	add	sp, #56	@ 0x38
 800d876:	bd10      	pop	{r4, pc}
 800d878:	9902      	ldr	r1, [sp, #8]
 800d87a:	aa05      	add	r2, sp, #20
 800d87c:	4620      	mov	r0, r4
 800d87e:	f001 fbe3 	bl	800f048 <uxr_init_base_object_request>
 800d882:	a905      	add	r1, sp, #20
 800d884:	4604      	mov	r4, r0
 800d886:	a806      	add	r0, sp, #24
 800d888:	f003 f9da 	bl	8010c40 <uxr_serialize_DELETE_Payload>
 800d88c:	4620      	mov	r0, r4
 800d88e:	b00e      	add	sp, #56	@ 0x38
 800d890:	bd10      	pop	{r4, pc}
 800d892:	bf00      	nop

0800d894 <uxr_common_create_entity>:
 800d894:	b510      	push	{r4, lr}
 800d896:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d89a:	b08c      	sub	sp, #48	@ 0x30
 800d89c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d8a0:	f1bc 0f01 	cmp.w	ip, #1
 800d8a4:	bf0c      	ite	eq
 800d8a6:	f003 0201 	andeq.w	r2, r3, #1
 800d8aa:	2200      	movne	r2, #0
 800d8ac:	330e      	adds	r3, #14
 800d8ae:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d8b2:	9101      	str	r1, [sp, #4]
 800d8b4:	441a      	add	r2, r3
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	9903      	ldr	r1, [sp, #12]
 800d8bc:	ab04      	add	r3, sp, #16
 800d8be:	b292      	uxth	r2, r2
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	f001 fa8b 	bl	800eddc <uxr_prepare_stream_to_write_submessage>
 800d8c6:	b918      	cbnz	r0, 800d8d0 <uxr_common_create_entity+0x3c>
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	b00c      	add	sp, #48	@ 0x30
 800d8ce:	bd10      	pop	{r4, pc}
 800d8d0:	9902      	ldr	r1, [sp, #8]
 800d8d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f001 fbb7 	bl	800f048 <uxr_init_base_object_request>
 800d8da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d8dc:	4604      	mov	r4, r0
 800d8de:	a804      	add	r0, sp, #16
 800d8e0:	f003 f90a 	bl	8010af8 <uxr_serialize_CREATE_Payload>
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	b00c      	add	sp, #48	@ 0x30
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	bf00      	nop

0800d8ec <uxr_buffer_create_participant_bin>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d8f2:	ac11      	add	r4, sp, #68	@ 0x44
 800d8f4:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d8fe:	7223      	strb	r3, [r4, #8]
 800d900:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d902:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d906:	2201      	movs	r2, #1
 800d908:	2100      	movs	r1, #0
 800d90a:	4605      	mov	r5, r0
 800d90c:	7122      	strb	r2, [r4, #4]
 800d90e:	f88d 1014 	strb.w	r1, [sp, #20]
 800d912:	b1cb      	cbz	r3, 800d948 <uxr_buffer_create_participant_bin+0x5c>
 800d914:	f88d 201c 	strb.w	r2, [sp, #28]
 800d918:	9308      	str	r3, [sp, #32]
 800d91a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d91e:	a915      	add	r1, sp, #84	@ 0x54
 800d920:	a809      	add	r0, sp, #36	@ 0x24
 800d922:	f7ff ff27 	bl	800d774 <ucdr_init_buffer>
 800d926:	a905      	add	r1, sp, #20
 800d928:	a809      	add	r0, sp, #36	@ 0x24
 800d92a:	f002 fdb3 	bl	8010494 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d92e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d930:	9600      	str	r6, [sp, #0]
 800d932:	9401      	str	r4, [sp, #4]
 800d934:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d938:	60e3      	str	r3, [r4, #12]
 800d93a:	4628      	mov	r0, r5
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	f7ff ffa9 	bl	800d894 <uxr_common_create_entity>
 800d942:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d946:	bd70      	pop	{r4, r5, r6, pc}
 800d948:	f88d 301c 	strb.w	r3, [sp, #28]
 800d94c:	e7e5      	b.n	800d91a <uxr_buffer_create_participant_bin+0x2e>
 800d94e:	bf00      	nop

0800d950 <uxr_buffer_create_topic_bin>:
 800d950:	b570      	push	{r4, r5, r6, lr}
 800d952:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d956:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d95a:	9105      	str	r1, [sp, #20]
 800d95c:	4605      	mov	r5, r0
 800d95e:	a997      	add	r1, sp, #604	@ 0x25c
 800d960:	4618      	mov	r0, r3
 800d962:	2302      	movs	r3, #2
 800d964:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d968:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d96c:	f000 f9b0 	bl	800dcd0 <uxr_object_id_to_raw>
 800d970:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d972:	9306      	str	r3, [sp, #24]
 800d974:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d976:	930a      	str	r3, [sp, #40]	@ 0x28
 800d978:	2303      	movs	r3, #3
 800d97a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d97e:	2301      	movs	r3, #1
 800d980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d984:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d988:	a917      	add	r1, sp, #92	@ 0x5c
 800d98a:	2300      	movs	r3, #0
 800d98c:	a80b      	add	r0, sp, #44	@ 0x2c
 800d98e:	f88d 301c 	strb.w	r3, [sp, #28]
 800d992:	f7ff feef 	bl	800d774 <ucdr_init_buffer>
 800d996:	a906      	add	r1, sp, #24
 800d998:	a80b      	add	r0, sp, #44	@ 0x2c
 800d99a:	f002 fd9d 	bl	80104d8 <uxr_serialize_OBJK_Topic_Binary>
 800d99e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d9a2:	ac13      	add	r4, sp, #76	@ 0x4c
 800d9a4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d9a8:	9600      	str	r6, [sp, #0]
 800d9aa:	9401      	str	r4, [sp, #4]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f7ff ff70 	bl	800d894 <uxr_common_create_entity>
 800d9b4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d9b8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ba:	bf00      	nop

0800d9bc <uxr_buffer_create_publisher_bin>:
 800d9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9be:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	9105      	str	r1, [sp, #20]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	2603      	movs	r6, #3
 800d9ca:	a992      	add	r1, sp, #584	@ 0x248
 800d9cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d9d0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d9d4:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d9d8:	f000 f97a 	bl	800dcd0 <uxr_object_id_to_raw>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9e2:	a912      	add	r1, sp, #72	@ 0x48
 800d9e4:	a806      	add	r0, sp, #24
 800d9e6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d9ea:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d9ee:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d9f2:	f7ff febf 	bl	800d774 <ucdr_init_buffer>
 800d9f6:	a993      	add	r1, sp, #588	@ 0x24c
 800d9f8:	a806      	add	r0, sp, #24
 800d9fa:	f002 fe21 	bl	8010640 <uxr_serialize_OBJK_Publisher_Binary>
 800d9fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da00:	9311      	str	r3, [sp, #68]	@ 0x44
 800da02:	ac0e      	add	r4, sp, #56	@ 0x38
 800da04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800da08:	9700      	str	r7, [sp, #0]
 800da0a:	9401      	str	r4, [sp, #4]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	4628      	mov	r0, r5
 800da10:	f7ff ff40 	bl	800d894 <uxr_common_create_entity>
 800da14:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800da18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da1a:	bf00      	nop

0800da1c <uxr_buffer_create_datawriter_bin>:
 800da1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da20:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800da24:	ac1d      	add	r4, sp, #116	@ 0x74
 800da26:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800da2a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800da2e:	9105      	str	r1, [sp, #20]
 800da30:	4606      	mov	r6, r0
 800da32:	a9a1      	add	r1, sp, #644	@ 0x284
 800da34:	4618      	mov	r0, r3
 800da36:	2305      	movs	r3, #5
 800da38:	7123      	strb	r3, [r4, #4]
 800da3a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800da3e:	2703      	movs	r7, #3
 800da40:	f000 f946 	bl	800dcd0 <uxr_object_id_to_raw>
 800da44:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800da46:	7227      	strb	r7, [r4, #8]
 800da48:	a90e      	add	r1, sp, #56	@ 0x38
 800da4a:	f000 f941 	bl	800dcd0 <uxr_object_id_to_raw>
 800da4e:	2300      	movs	r3, #0
 800da50:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800da54:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800da58:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800da5c:	3d00      	subs	r5, #0
 800da5e:	bf18      	it	ne
 800da60:	2501      	movne	r5, #1
 800da62:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800da66:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800da6a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800da6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800da72:	2301      	movs	r3, #1
 800da74:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800da78:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800da7c:	bb8a      	cbnz	r2, 800dae2 <uxr_buffer_create_datawriter_bin+0xc6>
 800da7e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800da82:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800da86:	f04f 0c13 	mov.w	ip, #19
 800da8a:	250b      	movs	r5, #11
 800da8c:	2221      	movs	r2, #33	@ 0x21
 800da8e:	2111      	movs	r1, #17
 800da90:	2009      	movs	r0, #9
 800da92:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800da96:	b923      	cbnz	r3, 800daa2 <uxr_buffer_create_datawriter_bin+0x86>
 800da98:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800da9c:	4672      	mov	r2, lr
 800da9e:	4661      	mov	r1, ip
 800daa0:	4628      	mov	r0, r5
 800daa2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d025      	beq.n	800daf6 <uxr_buffer_create_datawriter_bin+0xda>
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d029      	beq.n	800db02 <uxr_buffer_create_datawriter_bin+0xe6>
 800daae:	b32b      	cbz	r3, 800dafc <uxr_buffer_create_datawriter_bin+0xe0>
 800dab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dab4:	a921      	add	r1, sp, #132	@ 0x84
 800dab6:	a806      	add	r0, sp, #24
 800dab8:	f7ff fe5c 	bl	800d774 <ucdr_init_buffer>
 800dabc:	a90e      	add	r1, sp, #56	@ 0x38
 800dabe:	a806      	add	r0, sp, #24
 800dac0:	f002 fe34 	bl	801072c <uxr_serialize_OBJK_DataWriter_Binary>
 800dac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dac6:	f8cd 8000 	str.w	r8, [sp]
 800daca:	9401      	str	r4, [sp, #4]
 800dacc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dad0:	60e3      	str	r3, [r4, #12]
 800dad2:	4630      	mov	r0, r6
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	f7ff fedd 	bl	800d894 <uxr_common_create_entity>
 800dada:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800dade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800dae6:	f04f 0c12 	mov.w	ip, #18
 800daea:	250a      	movs	r5, #10
 800daec:	2220      	movs	r2, #32
 800daee:	2110      	movs	r1, #16
 800daf0:	2008      	movs	r0, #8
 800daf2:	2702      	movs	r7, #2
 800daf4:	e7cd      	b.n	800da92 <uxr_buffer_create_datawriter_bin+0x76>
 800daf6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800dafa:	e7d9      	b.n	800dab0 <uxr_buffer_create_datawriter_bin+0x94>
 800dafc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800db00:	e7d6      	b.n	800dab0 <uxr_buffer_create_datawriter_bin+0x94>
 800db02:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800db06:	e7d3      	b.n	800dab0 <uxr_buffer_create_datawriter_bin+0x94>

0800db08 <get_custom_error>:
 800db08:	4b01      	ldr	r3, [pc, #4]	@ (800db10 <get_custom_error+0x8>)
 800db0a:	7818      	ldrb	r0, [r3, #0]
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	2000ca8c 	.word	0x2000ca8c

0800db14 <recv_custom_msg>:
 800db14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db18:	4693      	mov	fp, r2
 800db1a:	b089      	sub	sp, #36	@ 0x24
 800db1c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800db20:	9305      	str	r3, [sp, #20]
 800db22:	468a      	mov	sl, r1
 800db24:	2100      	movs	r1, #0
 800db26:	4604      	mov	r4, r0
 800db28:	f88d 101e 	strb.w	r1, [sp, #30]
 800db2c:	b322      	cbz	r2, 800db78 <recv_custom_msg+0x64>
 800db2e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800db32:	f10d 081f 	add.w	r8, sp, #31
 800db36:	af05      	add	r7, sp, #20
 800db38:	f10d 061e 	add.w	r6, sp, #30
 800db3c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800db40:	e002      	b.n	800db48 <recv_custom_msg+0x34>
 800db42:	9b05      	ldr	r3, [sp, #20]
 800db44:	2b00      	cmp	r3, #0
 800db46:	dd0f      	ble.n	800db68 <recv_custom_msg+0x54>
 800db48:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800db4c:	4623      	mov	r3, r4
 800db4e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800db52:	e9cd 5600 	strd	r5, r6, [sp]
 800db56:	4622      	mov	r2, r4
 800db58:	4648      	mov	r0, r9
 800db5a:	f001 fca3 	bl	800f4a4 <uxr_read_framed_msg>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d0ef      	beq.n	800db42 <recv_custom_msg+0x2e>
 800db62:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800db66:	b1b3      	cbz	r3, 800db96 <recv_custom_msg+0x82>
 800db68:	4b0f      	ldr	r3, [pc, #60]	@ (800dba8 <recv_custom_msg+0x94>)
 800db6a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800db6e:	701a      	strb	r2, [r3, #0]
 800db70:	2000      	movs	r0, #0
 800db72:	b009      	add	sp, #36	@ 0x24
 800db74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db78:	f10d 021f 	add.w	r2, sp, #31
 800db7c:	9200      	str	r2, [sp, #0]
 800db7e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800db82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db86:	4601      	mov	r1, r0
 800db88:	47a8      	blx	r5
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d0ec      	beq.n	800db68 <recv_custom_msg+0x54>
 800db8e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1e8      	bne.n	800db68 <recv_custom_msg+0x54>
 800db96:	f8cb 0000 	str.w	r0, [fp]
 800db9a:	2001      	movs	r0, #1
 800db9c:	f8ca 4000 	str.w	r4, [sl]
 800dba0:	b009      	add	sp, #36	@ 0x24
 800dba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba6:	bf00      	nop
 800dba8:	2000ca8c 	.word	0x2000ca8c

0800dbac <send_custom_msg>:
 800dbac:	b530      	push	{r4, r5, lr}
 800dbae:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	4615      	mov	r5, r2
 800dbb6:	b974      	cbnz	r4, 800dbd6 <send_custom_msg+0x2a>
 800dbb8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800dbbc:	f10d 0317 	add.w	r3, sp, #23
 800dbc0:	47a0      	blx	r4
 800dbc2:	b108      	cbz	r0, 800dbc8 <send_custom_msg+0x1c>
 800dbc4:	42a8      	cmp	r0, r5
 800dbc6:	d015      	beq.n	800dbf4 <send_custom_msg+0x48>
 800dbc8:	4b0c      	ldr	r3, [pc, #48]	@ (800dbfc <send_custom_msg+0x50>)
 800dbca:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800dbce:	701a      	strb	r2, [r3, #0]
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	b007      	add	sp, #28
 800dbd4:	bd30      	pop	{r4, r5, pc}
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f10d 0117 	add.w	r1, sp, #23
 800dbde:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800dbe8:	9500      	str	r5, [sp, #0]
 800dbea:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800dbee:	f001 fa61 	bl	800f0b4 <uxr_write_framed_msg>
 800dbf2:	e7e6      	b.n	800dbc2 <send_custom_msg+0x16>
 800dbf4:	2001      	movs	r0, #1
 800dbf6:	b007      	add	sp, #28
 800dbf8:	bd30      	pop	{r4, r5, pc}
 800dbfa:	bf00      	nop
 800dbfc:	2000ca8c 	.word	0x2000ca8c

0800dc00 <uxr_set_custom_transport_callbacks>:
 800dc00:	b410      	push	{r4}
 800dc02:	9c01      	ldr	r4, [sp, #4]
 800dc04:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800dc08:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800dc0c:	9b02      	ldr	r3, [sp, #8]
 800dc0e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800dc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc16:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800dc1a:	4770      	bx	lr

0800dc1c <uxr_init_custom_transport>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800dc22:	b303      	cbz	r3, 800dc66 <uxr_init_custom_transport+0x4a>
 800dc24:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800dc28:	4604      	mov	r4, r0
 800dc2a:	b1e2      	cbz	r2, 800dc66 <uxr_init_custom_transport+0x4a>
 800dc2c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800dc30:	b1ca      	cbz	r2, 800dc66 <uxr_init_custom_transport+0x4a>
 800dc32:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800dc36:	b1b2      	cbz	r2, 800dc66 <uxr_init_custom_transport+0x4a>
 800dc38:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800dc3c:	4798      	blx	r3
 800dc3e:	4605      	mov	r5, r0
 800dc40:	b188      	cbz	r0, 800dc66 <uxr_init_custom_transport+0x4a>
 800dc42:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800dc46:	b98b      	cbnz	r3, 800dc6c <uxr_init_custom_transport+0x50>
 800dc48:	490b      	ldr	r1, [pc, #44]	@ (800dc78 <uxr_init_custom_transport+0x5c>)
 800dc4a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc7c <uxr_init_custom_transport+0x60>)
 800dc4c:	4a0c      	ldr	r2, [pc, #48]	@ (800dc80 <uxr_init_custom_transport+0x64>)
 800dc4e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800dc52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc56:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800dc5a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800dc5e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800dc62:	4628      	mov	r0, r5
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	2500      	movs	r5, #0
 800dc68:	4628      	mov	r0, r5
 800dc6a:	bd38      	pop	{r3, r4, r5, pc}
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800dc72:	f001 fa19 	bl	800f0a8 <uxr_init_framing_io>
 800dc76:	e7e7      	b.n	800dc48 <uxr_init_custom_transport+0x2c>
 800dc78:	0800dbad 	.word	0x0800dbad
 800dc7c:	0800db15 	.word	0x0800db15
 800dc80:	0800db09 	.word	0x0800db09

0800dc84 <uxr_close_custom_transport>:
 800dc84:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800dc88:	4718      	bx	r3
 800dc8a:	bf00      	nop

0800dc8c <uxr_object_id>:
 800dc8c:	b082      	sub	sp, #8
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f88d 1006 	strb.w	r1, [sp, #6]
 800dc94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dc98:	f360 030f 	bfi	r3, r0, #0, #16
 800dc9c:	f362 431f 	bfi	r3, r2, #16, #16
 800dca0:	4618      	mov	r0, r3
 800dca2:	b002      	add	sp, #8
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop

0800dca8 <uxr_object_id_from_raw>:
 800dca8:	7843      	ldrb	r3, [r0, #1]
 800dcaa:	7801      	ldrb	r1, [r0, #0]
 800dcac:	b082      	sub	sp, #8
 800dcae:	f003 020f 	and.w	r2, r3, #15
 800dcb2:	f88d 2006 	strb.w	r2, [sp, #6]
 800dcb6:	091b      	lsrs	r3, r3, #4
 800dcb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dcbc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	f363 000f 	bfi	r0, r3, #0, #16
 800dcc6:	f362 401f 	bfi	r0, r2, #16, #16
 800dcca:	b002      	add	sp, #8
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop

0800dcd0 <uxr_object_id_to_raw>:
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800dcdc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800dce0:	f881 c000 	strb.w	ip, [r1]
 800dce4:	7048      	strb	r0, [r1, #1]
 800dce6:	b002      	add	sp, #8
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop

0800dcec <uxr_buffer_cancel_data>:
 800dcec:	b510      	push	{r4, lr}
 800dcee:	b094      	sub	sp, #80	@ 0x50
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	9202      	str	r2, [sp, #8]
 800dcf4:	9205      	str	r2, [sp, #20]
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dcfe:	f88d 301e 	strb.w	r3, [sp, #30]
 800dd02:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800dd06:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800dd0a:	2308      	movs	r3, #8
 800dd0c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	2210      	movs	r2, #16
 800dd14:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd16:	4604      	mov	r4, r0
 800dd18:	9103      	str	r1, [sp, #12]
 800dd1a:	f001 f85f 	bl	800eddc <uxr_prepare_stream_to_write_submessage>
 800dd1e:	b918      	cbnz	r0, 800dd28 <uxr_buffer_cancel_data+0x3c>
 800dd20:	4604      	mov	r4, r0
 800dd22:	4620      	mov	r0, r4
 800dd24:	b014      	add	sp, #80	@ 0x50
 800dd26:	bd10      	pop	{r4, pc}
 800dd28:	9905      	ldr	r1, [sp, #20]
 800dd2a:	aa06      	add	r2, sp, #24
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f001 f98b 	bl	800f048 <uxr_init_base_object_request>
 800dd32:	a906      	add	r1, sp, #24
 800dd34:	4604      	mov	r4, r0
 800dd36:	a80c      	add	r0, sp, #48	@ 0x30
 800dd38:	f003 f82c 	bl	8010d94 <uxr_serialize_READ_DATA_Payload>
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	b014      	add	sp, #80	@ 0x50
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	bf00      	nop

0800dd44 <read_submessage_format>:
 800dd44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd48:	b095      	sub	sp, #84	@ 0x54
 800dd4a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800dd4e:	b113      	cbz	r3, 800dd56 <read_submessage_format+0x12>
 800dd50:	b015      	add	sp, #84	@ 0x54
 800dd52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd56:	460c      	mov	r4, r1
 800dd58:	4615      	mov	r5, r2
 800dd5a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800dd5e:	4607      	mov	r7, r0
 800dd60:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800dd62:	9004      	str	r0, [sp, #16]
 800dd64:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800dd66:	9005      	str	r0, [sp, #20]
 800dd68:	1a52      	subs	r2, r2, r1
 800dd6a:	a80c      	add	r0, sp, #48	@ 0x30
 800dd6c:	4699      	mov	r9, r3
 800dd6e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800dd72:	f7ff fcff 	bl	800d774 <ucdr_init_buffer>
 800dd76:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800dd7a:	a80c      	add	r0, sp, #48	@ 0x30
 800dd7c:	f7ff fcce 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 800dd80:	69e2      	ldr	r2, [r4, #28]
 800dd82:	b19a      	cbz	r2, 800ddac <read_submessage_format+0x68>
 800dd84:	f1b8 0f07 	cmp.w	r8, #7
 800dd88:	f882 9014 	strb.w	r9, [r2, #20]
 800dd8c:	d040      	beq.n	800de10 <read_submessage_format+0xcc>
 800dd8e:	f1b8 0f08 	cmp.w	r8, #8
 800dd92:	d02e      	beq.n	800ddf2 <read_submessage_format+0xae>
 800dd94:	f1b8 0f06 	cmp.w	r8, #6
 800dd98:	d011      	beq.n	800ddbe <read_submessage_format+0x7a>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	7513      	strb	r3, [r2, #20]
 800dd9e:	4629      	mov	r1, r5
 800dda0:	4620      	mov	r0, r4
 800dda2:	f7ff fd37 	bl	800d814 <ucdr_advance_buffer>
 800dda6:	b015      	add	sp, #84	@ 0x54
 800dda8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddac:	f1b8 0f07 	cmp.w	r8, #7
 800ddb0:	d02e      	beq.n	800de10 <read_submessage_format+0xcc>
 800ddb2:	f1b8 0f08 	cmp.w	r8, #8
 800ddb6:	d01c      	beq.n	800ddf2 <read_submessage_format+0xae>
 800ddb8:	f1b8 0f06 	cmp.w	r8, #6
 800ddbc:	d1ef      	bne.n	800dd9e <read_submessage_format+0x5a>
 800ddbe:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800ddc2:	f1b8 0f00 	cmp.w	r8, #0
 800ddc6:	d011      	beq.n	800ddec <read_submessage_format+0xa8>
 800ddc8:	ab0c      	add	r3, sp, #48	@ 0x30
 800ddca:	e9cd 3500 	strd	r3, r5, [sp]
 800ddce:	2306      	movs	r3, #6
 800ddd0:	f88d 3016 	strb.w	r3, [sp, #22]
 800ddd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddd8:	9302      	str	r3, [sp, #8]
 800ddda:	4632      	mov	r2, r6
 800dddc:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800dde0:	4638      	mov	r0, r7
 800dde2:	47c0      	blx	r8
 800dde4:	2301      	movs	r3, #1
 800dde6:	69e2      	ldr	r2, [r4, #28]
 800dde8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ddec:	2a00      	cmp	r2, #0
 800ddee:	d1d4      	bne.n	800dd9a <read_submessage_format+0x56>
 800ddf0:	e7d5      	b.n	800dd9e <read_submessage_format+0x5a>
 800ddf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d0f8      	beq.n	800ddec <read_submessage_format+0xa8>
 800ddfa:	a906      	add	r1, sp, #24
 800ddfc:	a80c      	add	r0, sp, #48	@ 0x30
 800ddfe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800de02:	f003 f89b 	bl	8010f3c <uxr_deserialize_SampleIdentity>
 800de06:	b9a0      	cbnz	r0, 800de32 <read_submessage_format+0xee>
 800de08:	69e2      	ldr	r2, [r4, #28]
 800de0a:	2a00      	cmp	r2, #0
 800de0c:	d1c5      	bne.n	800dd9a <read_submessage_format+0x56>
 800de0e:	e7c6      	b.n	800dd9e <read_submessage_format+0x5a>
 800de10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de14:	b13b      	cbz	r3, 800de26 <read_submessage_format+0xe2>
 800de16:	a906      	add	r1, sp, #24
 800de18:	a80c      	add	r0, sp, #48	@ 0x30
 800de1a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800de1e:	f002 fd53 	bl	80108c8 <uxr_deserialize_BaseObjectRequest>
 800de22:	bb60      	cbnz	r0, 800de7e <read_submessage_format+0x13a>
 800de24:	69e2      	ldr	r2, [r4, #28]
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	442b      	add	r3, r5
 800de2a:	60a3      	str	r3, [r4, #8]
 800de2c:	2a00      	cmp	r2, #0
 800de2e:	d1b4      	bne.n	800dd9a <read_submessage_format+0x56>
 800de30:	e7b5      	b.n	800dd9e <read_submessage_format+0x5a>
 800de32:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800de36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de38:	1a52      	subs	r2, r2, r1
 800de3a:	eba8 0803 	sub.w	r8, r8, r3
 800de3e:	a80c      	add	r0, sp, #48	@ 0x30
 800de40:	f7ff fc98 	bl	800d774 <ucdr_init_buffer>
 800de44:	44a8      	add	r8, r5
 800de46:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800de4a:	a80c      	add	r0, sp, #48	@ 0x30
 800de4c:	f7ff fc66 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 800de50:	fa1f f888 	uxth.w	r8, r8
 800de54:	ab0c      	add	r3, sp, #48	@ 0x30
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	f8cd 8004 	str.w	r8, [sp, #4]
 800de5c:	2108      	movs	r1, #8
 800de5e:	f88d 1016 	strb.w	r1, [sp, #22]
 800de62:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800de66:	9102      	str	r1, [sp, #8]
 800de68:	ab06      	add	r3, sp, #24
 800de6a:	4632      	mov	r2, r6
 800de6c:	9905      	ldr	r1, [sp, #20]
 800de6e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800de72:	4638      	mov	r0, r7
 800de74:	47b0      	blx	r6
 800de76:	2301      	movs	r3, #1
 800de78:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800de7c:	e7c4      	b.n	800de08 <read_submessage_format+0xc4>
 800de7e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800de82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de84:	1a52      	subs	r2, r2, r1
 800de86:	a80c      	add	r0, sp, #48	@ 0x30
 800de88:	eba8 0803 	sub.w	r8, r8, r3
 800de8c:	f7ff fc72 	bl	800d774 <ucdr_init_buffer>
 800de90:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800de94:	a80c      	add	r0, sp, #48	@ 0x30
 800de96:	f7ff fc41 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 800de9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800dea2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dea6:	44a8      	add	r8, r5
 800dea8:	fa1f f888 	uxth.w	r8, r8
 800deac:	f8cd 8004 	str.w	r8, [sp, #4]
 800deb0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800deb4:	2107      	movs	r1, #7
 800deb6:	f88d 1016 	strb.w	r1, [sp, #22]
 800deba:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800debe:	9102      	str	r1, [sp, #8]
 800dec0:	4632      	mov	r2, r6
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800dec8:	9905      	ldr	r1, [sp, #20]
 800deca:	4638      	mov	r0, r7
 800decc:	47b0      	blx	r6
 800dece:	2301      	movs	r3, #1
 800ded0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ded4:	e7a6      	b.n	800de24 <read_submessage_format+0xe0>
 800ded6:	bf00      	nop

0800ded8 <on_get_fragmentation_info>:
 800ded8:	b500      	push	{lr}
 800deda:	b08b      	sub	sp, #44	@ 0x2c
 800dedc:	4601      	mov	r1, r0
 800dede:	2204      	movs	r2, #4
 800dee0:	a802      	add	r0, sp, #8
 800dee2:	f7ff fc47 	bl	800d774 <ucdr_init_buffer>
 800dee6:	f10d 0305 	add.w	r3, sp, #5
 800deea:	f10d 0206 	add.w	r2, sp, #6
 800deee:	a901      	add	r1, sp, #4
 800def0:	a802      	add	r0, sp, #8
 800def2:	f001 febd 	bl	800fc70 <uxr_read_submessage_header>
 800def6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800defa:	2b0d      	cmp	r3, #13
 800defc:	d003      	beq.n	800df06 <on_get_fragmentation_info+0x2e>
 800defe:	2000      	movs	r0, #0
 800df00:	b00b      	add	sp, #44	@ 0x2c
 800df02:	f85d fb04 	ldr.w	pc, [sp], #4
 800df06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800df0a:	f013 0f02 	tst.w	r3, #2
 800df0e:	bf14      	ite	ne
 800df10:	2002      	movne	r0, #2
 800df12:	2001      	moveq	r0, #1
 800df14:	b00b      	add	sp, #44	@ 0x2c
 800df16:	f85d fb04 	ldr.w	pc, [sp], #4
 800df1a:	bf00      	nop

0800df1c <read_submessage_get_info>:
 800df1c:	b570      	push	{r4, r5, r6, lr}
 800df1e:	2500      	movs	r5, #0
 800df20:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800df24:	4604      	mov	r4, r0
 800df26:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800df2a:	460e      	mov	r6, r1
 800df2c:	a810      	add	r0, sp, #64	@ 0x40
 800df2e:	4629      	mov	r1, r5
 800df30:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800df34:	f008 fef0 	bl	8016d18 <memset>
 800df38:	a903      	add	r1, sp, #12
 800df3a:	4630      	mov	r0, r6
 800df3c:	f002 fe6c 	bl	8010c18 <uxr_deserialize_GET_INFO_Payload>
 800df40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800df44:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800df48:	4620      	mov	r0, r4
 800df4a:	f001 f875 	bl	800f038 <uxr_session_header_offset>
 800df4e:	462b      	mov	r3, r5
 800df50:	9000      	str	r0, [sp, #0]
 800df52:	220c      	movs	r2, #12
 800df54:	a905      	add	r1, sp, #20
 800df56:	a808      	add	r0, sp, #32
 800df58:	f7ff fbfa 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800df5c:	a910      	add	r1, sp, #64	@ 0x40
 800df5e:	a808      	add	r0, sp, #32
 800df60:	f002 fecc 	bl	8010cfc <uxr_serialize_INFO_Payload>
 800df64:	9b08      	ldr	r3, [sp, #32]
 800df66:	462a      	mov	r2, r5
 800df68:	4629      	mov	r1, r5
 800df6a:	4620      	mov	r0, r4
 800df6c:	f001 f80e 	bl	800ef8c <uxr_stamp_session_header>
 800df70:	a808      	add	r0, sp, #32
 800df72:	f7ff fc2b 	bl	800d7cc <ucdr_buffer_length>
 800df76:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df78:	4602      	mov	r2, r0
 800df7a:	a905      	add	r1, sp, #20
 800df7c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800df80:	47a0      	blx	r4
 800df82:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800df86:	bd70      	pop	{r4, r5, r6, pc}

0800df88 <write_submessage_acknack.isra.0>:
 800df88:	b570      	push	{r4, r5, r6, lr}
 800df8a:	b092      	sub	sp, #72	@ 0x48
 800df8c:	4605      	mov	r5, r0
 800df8e:	460e      	mov	r6, r1
 800df90:	4614      	mov	r4, r2
 800df92:	f001 f851 	bl	800f038 <uxr_session_header_offset>
 800df96:	a905      	add	r1, sp, #20
 800df98:	9000      	str	r0, [sp, #0]
 800df9a:	2300      	movs	r3, #0
 800df9c:	a80a      	add	r0, sp, #40	@ 0x28
 800df9e:	2211      	movs	r2, #17
 800dfa0:	f7ff fbd6 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800dfa4:	2218      	movs	r2, #24
 800dfa6:	fb02 5404 	mla	r4, r2, r4, r5
 800dfaa:	2300      	movs	r3, #0
 800dfac:	2205      	movs	r2, #5
 800dfae:	3450      	adds	r4, #80	@ 0x50
 800dfb0:	210a      	movs	r1, #10
 800dfb2:	a80a      	add	r0, sp, #40	@ 0x28
 800dfb4:	f001 fe42 	bl	800fc3c <uxr_buffer_submessage_header>
 800dfb8:	a903      	add	r1, sp, #12
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f007 fb4c 	bl	8015658 <uxr_compute_acknack>
 800dfc0:	ba40      	rev16	r0, r0
 800dfc2:	f8ad 000e 	strh.w	r0, [sp, #14]
 800dfc6:	a903      	add	r1, sp, #12
 800dfc8:	a80a      	add	r0, sp, #40	@ 0x28
 800dfca:	f88d 6010 	strb.w	r6, [sp, #16]
 800dfce:	f002 ff05 	bl	8010ddc <uxr_serialize_ACKNACK_Payload>
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	4628      	mov	r0, r5
 800dfda:	f000 ffd7 	bl	800ef8c <uxr_stamp_session_header>
 800dfde:	a80a      	add	r0, sp, #40	@ 0x28
 800dfe0:	f7ff fbf4 	bl	800d7cc <ucdr_buffer_length>
 800dfe4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	a905      	add	r1, sp, #20
 800dfea:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dfee:	47a0      	blx	r4
 800dff0:	b012      	add	sp, #72	@ 0x48
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	0000      	movs	r0, r0
	...

0800dff8 <uxr_init_session>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e030 <uxr_init_session+0x38>
 800dffe:	2300      	movs	r3, #0
 800e000:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e004:	4604      	mov	r4, r0
 800e006:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e00a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e00e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e012:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e016:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e01a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e01e:	2181      	movs	r1, #129	@ 0x81
 800e020:	f000 ff20 	bl	800ee64 <uxr_init_session_info>
 800e024:	f104 0008 	add.w	r0, r4, #8
 800e028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e02c:	f001 bd22 	b.w	800fa74 <uxr_init_stream_storage>
	...

0800e038 <uxr_set_status_callback>:
 800e038:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop

0800e040 <uxr_set_topic_callback>:
 800e040:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop

0800e048 <uxr_set_request_callback>:
 800e048:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop

0800e050 <uxr_set_reply_callback>:
 800e050:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop

0800e058 <uxr_create_output_best_effort_stream>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	e9cd 2100 	strd	r2, r1, [sp]
 800e060:	4604      	mov	r4, r0
 800e062:	f000 ffe9 	bl	800f038 <uxr_session_header_offset>
 800e066:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e06a:	4603      	mov	r3, r0
 800e06c:	f104 0008 	add.w	r0, r4, #8
 800e070:	b004      	add	sp, #16
 800e072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e076:	f001 bd47 	b.w	800fb08 <uxr_add_output_best_effort_buffer>
 800e07a:	bf00      	nop

0800e07c <uxr_create_output_reliable_stream>:
 800e07c:	b510      	push	{r4, lr}
 800e07e:	b088      	sub	sp, #32
 800e080:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e084:	4604      	mov	r4, r0
 800e086:	9303      	str	r3, [sp, #12]
 800e088:	f000 ffd6 	bl	800f038 <uxr_session_header_offset>
 800e08c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e090:	9000      	str	r0, [sp, #0]
 800e092:	9905      	ldr	r1, [sp, #20]
 800e094:	f104 0008 	add.w	r0, r4, #8
 800e098:	f001 fd4a 	bl	800fb30 <uxr_add_output_reliable_buffer>
 800e09c:	2200      	movs	r2, #0
 800e09e:	b2c3      	uxtb	r3, r0
 800e0a0:	f363 0207 	bfi	r2, r3, #0, #8
 800e0a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e0a8:	f363 220f 	bfi	r2, r3, #8, #8
 800e0ac:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e0b0:	f363 4217 	bfi	r2, r3, #16, #8
 800e0b4:	0e03      	lsrs	r3, r0, #24
 800e0b6:	f363 621f 	bfi	r2, r3, #24, #8
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	b008      	add	sp, #32
 800e0be:	bd10      	pop	{r4, pc}

0800e0c0 <uxr_create_input_best_effort_stream>:
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	3008      	adds	r0, #8
 800e0c4:	b002      	add	sp, #8
 800e0c6:	f001 bd4d 	b.w	800fb64 <uxr_add_input_best_effort_buffer>
 800e0ca:	bf00      	nop

0800e0cc <uxr_create_input_reliable_stream>:
 800e0cc:	b510      	push	{r4, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	4c0b      	ldr	r4, [pc, #44]	@ (800e100 <uxr_create_input_reliable_stream+0x34>)
 800e0d2:	9400      	str	r4, [sp, #0]
 800e0d4:	3008      	adds	r0, #8
 800e0d6:	f001 fd5b 	bl	800fb90 <uxr_add_input_reliable_buffer>
 800e0da:	2200      	movs	r2, #0
 800e0dc:	b2c3      	uxtb	r3, r0
 800e0de:	f363 0207 	bfi	r2, r3, #0, #8
 800e0e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e0e6:	f363 220f 	bfi	r2, r3, #8, #8
 800e0ea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e0ee:	f363 4217 	bfi	r2, r3, #16, #8
 800e0f2:	0e03      	lsrs	r3, r0, #24
 800e0f4:	f363 621f 	bfi	r2, r3, #24, #8
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	b004      	add	sp, #16
 800e0fc:	bd10      	pop	{r4, pc}
 800e0fe:	bf00      	nop
 800e100:	0800ded9 	.word	0x0800ded9

0800e104 <uxr_epoch_nanos>:
 800e104:	b510      	push	{r4, lr}
 800e106:	4604      	mov	r4, r0
 800e108:	f001 fdf8 	bl	800fcfc <uxr_nanos>
 800e10c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800e110:	1ac0      	subs	r0, r0, r3
 800e112:	eb61 0102 	sbc.w	r1, r1, r2
 800e116:	bd10      	pop	{r4, pc}

0800e118 <uxr_flash_output_streams>:
 800e118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e11c:	7e03      	ldrb	r3, [r0, #24]
 800e11e:	b084      	sub	sp, #16
 800e120:	4604      	mov	r4, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d035      	beq.n	800e192 <uxr_flash_output_streams+0x7a>
 800e126:	f04f 0900 	mov.w	r9, #0
 800e12a:	4648      	mov	r0, r9
 800e12c:	f10d 0802 	add.w	r8, sp, #2
 800e130:	af03      	add	r7, sp, #12
 800e132:	ae02      	add	r6, sp, #8
 800e134:	e006      	b.n	800e144 <uxr_flash_output_streams+0x2c>
 800e136:	7e23      	ldrb	r3, [r4, #24]
 800e138:	f109 0901 	add.w	r9, r9, #1
 800e13c:	fa5f f089 	uxtb.w	r0, r9
 800e140:	4283      	cmp	r3, r0
 800e142:	d926      	bls.n	800e192 <uxr_flash_output_streams+0x7a>
 800e144:	2201      	movs	r2, #1
 800e146:	4611      	mov	r1, r2
 800e148:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e14c:	f001 fc3e 	bl	800f9cc <uxr_stream_id>
 800e150:	3508      	adds	r5, #8
 800e152:	4684      	mov	ip, r0
 800e154:	4643      	mov	r3, r8
 800e156:	463a      	mov	r2, r7
 800e158:	4631      	mov	r1, r6
 800e15a:	4628      	mov	r0, r5
 800e15c:	f8cd c004 	str.w	ip, [sp, #4]
 800e160:	f007 fb00 	bl	8015764 <uxr_prepare_best_effort_buffer_to_send>
 800e164:	2800      	cmp	r0, #0
 800e166:	d0e6      	beq.n	800e136 <uxr_flash_output_streams+0x1e>
 800e168:	9b02      	ldr	r3, [sp, #8]
 800e16a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e16e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e172:	4620      	mov	r0, r4
 800e174:	f000 ff0a 	bl	800ef8c <uxr_stamp_session_header>
 800e178:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e17a:	9a03      	ldr	r2, [sp, #12]
 800e17c:	685d      	ldr	r5, [r3, #4]
 800e17e:	6818      	ldr	r0, [r3, #0]
 800e180:	9902      	ldr	r1, [sp, #8]
 800e182:	47a8      	blx	r5
 800e184:	f109 0901 	add.w	r9, r9, #1
 800e188:	7e23      	ldrb	r3, [r4, #24]
 800e18a:	fa5f f089 	uxtb.w	r0, r9
 800e18e:	4283      	cmp	r3, r0
 800e190:	d8d8      	bhi.n	800e144 <uxr_flash_output_streams+0x2c>
 800e192:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e196:	b38b      	cbz	r3, 800e1fc <uxr_flash_output_streams+0xe4>
 800e198:	f04f 0900 	mov.w	r9, #0
 800e19c:	f10d 0802 	add.w	r8, sp, #2
 800e1a0:	af03      	add	r7, sp, #12
 800e1a2:	ae02      	add	r6, sp, #8
 800e1a4:	4648      	mov	r0, r9
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	2102      	movs	r1, #2
 800e1aa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800e1ae:	f001 fc0d 	bl	800f9cc <uxr_stream_id>
 800e1b2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e1b6:	3520      	adds	r5, #32
 800e1b8:	9001      	str	r0, [sp, #4]
 800e1ba:	e00d      	b.n	800e1d8 <uxr_flash_output_streams+0xc0>
 800e1bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e1c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e1c4:	9b02      	ldr	r3, [sp, #8]
 800e1c6:	f000 fee1 	bl	800ef8c <uxr_stamp_session_header>
 800e1ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e1cc:	9a03      	ldr	r2, [sp, #12]
 800e1ce:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e1d2:	9902      	ldr	r1, [sp, #8]
 800e1d4:	6818      	ldr	r0, [r3, #0]
 800e1d6:	47d0      	blx	sl
 800e1d8:	4643      	mov	r3, r8
 800e1da:	463a      	mov	r2, r7
 800e1dc:	4631      	mov	r1, r6
 800e1de:	4628      	mov	r0, r5
 800e1e0:	f007 fcde 	bl	8015ba0 <uxr_prepare_next_reliable_buffer_to_send>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1e7      	bne.n	800e1bc <uxr_flash_output_streams+0xa4>
 800e1ec:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e1f0:	f109 0901 	add.w	r9, r9, #1
 800e1f4:	fa5f f089 	uxtb.w	r0, r9
 800e1f8:	4283      	cmp	r3, r0
 800e1fa:	d8d4      	bhi.n	800e1a6 <uxr_flash_output_streams+0x8e>
 800e1fc:	b004      	add	sp, #16
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	bf00      	nop

0800e204 <read_submessage_info>:
 800e204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e208:	460d      	mov	r5, r1
 800e20a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e20e:	4669      	mov	r1, sp
 800e210:	4607      	mov	r7, r0
 800e212:	4628      	mov	r0, r5
 800e214:	f002 fc0e 	bl	8010a34 <uxr_deserialize_BaseObjectReply>
 800e218:	a902      	add	r1, sp, #8
 800e21a:	4604      	mov	r4, r0
 800e21c:	4628      	mov	r0, r5
 800e21e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e222:	f7fe fae3 	bl	800c7ec <ucdr_deserialize_bool>
 800e226:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e22a:	4004      	ands	r4, r0
 800e22c:	b2e4      	uxtb	r4, r4
 800e22e:	b95b      	cbnz	r3, 800e248 <read_submessage_info+0x44>
 800e230:	a987      	add	r1, sp, #540	@ 0x21c
 800e232:	4628      	mov	r0, r5
 800e234:	f7fe fada 	bl	800c7ec <ucdr_deserialize_bool>
 800e238:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800e23c:	4606      	mov	r6, r0
 800e23e:	b94b      	cbnz	r3, 800e254 <read_submessage_info+0x50>
 800e240:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e248:	a903      	add	r1, sp, #12
 800e24a:	4628      	mov	r0, r5
 800e24c:	f002 fa9a 	bl	8010784 <uxr_deserialize_ObjectVariant>
 800e250:	4004      	ands	r4, r0
 800e252:	e7ed      	b.n	800e230 <read_submessage_info+0x2c>
 800e254:	a988      	add	r1, sp, #544	@ 0x220
 800e256:	4628      	mov	r0, r5
 800e258:	f7fe faf6 	bl	800c848 <ucdr_deserialize_uint8_t>
 800e25c:	4234      	tst	r4, r6
 800e25e:	d0ef      	beq.n	800e240 <read_submessage_info+0x3c>
 800e260:	2800      	cmp	r0, #0
 800e262:	d0ed      	beq.n	800e240 <read_submessage_info+0x3c>
 800e264:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800e268:	2b0d      	cmp	r3, #13
 800e26a:	d1e9      	bne.n	800e240 <read_submessage_info+0x3c>
 800e26c:	a98a      	add	r1, sp, #552	@ 0x228
 800e26e:	4628      	mov	r0, r5
 800e270:	f7ff f890 	bl	800d394 <ucdr_deserialize_int16_t>
 800e274:	b140      	cbz	r0, 800e288 <read_submessage_info+0x84>
 800e276:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	dd07      	ble.n	800e28e <read_submessage_info+0x8a>
 800e27e:	f1b8 0f00 	cmp.w	r8, #0
 800e282:	bf14      	ite	ne
 800e284:	2001      	movne	r0, #1
 800e286:	2002      	moveq	r0, #2
 800e288:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800e28c:	e7d8      	b.n	800e240 <read_submessage_info+0x3c>
 800e28e:	2000      	movs	r0, #0
 800e290:	e7fa      	b.n	800e288 <read_submessage_info+0x84>
 800e292:	bf00      	nop

0800e294 <read_submessage_list>:
 800e294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e298:	b097      	sub	sp, #92	@ 0x5c
 800e29a:	4ec1      	ldr	r6, [pc, #772]	@ (800e5a0 <read_submessage_list+0x30c>)
 800e29c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e29e:	4604      	mov	r4, r0
 800e2a0:	460d      	mov	r5, r1
 800e2a2:	f04f 0801 	mov.w	r8, #1
 800e2a6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e2aa:	aa0c      	add	r2, sp, #48	@ 0x30
 800e2ac:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f001 fcdd 	bl	800fc70 <uxr_read_submessage_header>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	f000 813e 	beq.w	800e538 <read_submessage_list+0x2a4>
 800e2bc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800e2c0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800e2c4:	3b02      	subs	r3, #2
 800e2c6:	2b0d      	cmp	r3, #13
 800e2c8:	d8ed      	bhi.n	800e2a6 <read_submessage_list+0x12>
 800e2ca:	a101      	add	r1, pc, #4	@ (adr r1, 800e2d0 <read_submessage_list+0x3c>)
 800e2cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2d0:	0800e52f 	.word	0x0800e52f
 800e2d4:	0800e2a7 	.word	0x0800e2a7
 800e2d8:	0800e51f 	.word	0x0800e51f
 800e2dc:	0800e4bd 	.word	0x0800e4bd
 800e2e0:	0800e4b3 	.word	0x0800e4b3
 800e2e4:	0800e2a7 	.word	0x0800e2a7
 800e2e8:	0800e2a7 	.word	0x0800e2a7
 800e2ec:	0800e413 	.word	0x0800e413
 800e2f0:	0800e3a3 	.word	0x0800e3a3
 800e2f4:	0800e363 	.word	0x0800e363
 800e2f8:	0800e2a7 	.word	0x0800e2a7
 800e2fc:	0800e2a7 	.word	0x0800e2a7
 800e300:	0800e2a7 	.word	0x0800e2a7
 800e304:	0800e309 	.word	0x0800e309
 800e308:	a910      	add	r1, sp, #64	@ 0x40
 800e30a:	4628      	mov	r0, r5
 800e30c:	f002 fdc4 	bl	8010e98 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e310:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800e314:	f1b9 0f00 	cmp.w	r9, #0
 800e318:	f000 8116 	beq.w	800e548 <read_submessage_list+0x2b4>
 800e31c:	f001 fcee 	bl	800fcfc <uxr_nanos>
 800e320:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e328:	2100      	movs	r1, #0
 800e32a:	468c      	mov	ip, r1
 800e32c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e330:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e334:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e336:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e338:	468c      	mov	ip, r1
 800e33a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e33e:	46e2      	mov	sl, ip
 800e340:	46bc      	mov	ip, r7
 800e342:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e346:	fbc0 7106 	smlal	r7, r1, r0, r6
 800e34a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800e34e:	e9cd 7100 	strd	r7, r1, [sp]
 800e352:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e356:	9106      	str	r1, [sp, #24]
 800e358:	4620      	mov	r0, r4
 800e35a:	47c8      	blx	r9
 800e35c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800e360:	e7a1      	b.n	800e2a6 <read_submessage_list+0x12>
 800e362:	a910      	add	r1, sp, #64	@ 0x40
 800e364:	4628      	mov	r0, r5
 800e366:	f002 fd77 	bl	8010e58 <uxr_deserialize_HEARTBEAT_Payload>
 800e36a:	2100      	movs	r1, #0
 800e36c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e370:	f001 fb56 	bl	800fa20 <uxr_stream_id_from_raw>
 800e374:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e378:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e37a:	4639      	mov	r1, r7
 800e37c:	f104 0008 	add.w	r0, r4, #8
 800e380:	f001 fc3c 	bl	800fbfc <uxr_get_input_reliable_stream>
 800e384:	2800      	cmp	r0, #0
 800e386:	d08e      	beq.n	800e2a6 <read_submessage_list+0x12>
 800e388:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e38c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e390:	f007 f956 	bl	8015640 <uxr_process_heartbeat>
 800e394:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e398:	463a      	mov	r2, r7
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7ff fdf4 	bl	800df88 <write_submessage_acknack.isra.0>
 800e3a0:	e781      	b.n	800e2a6 <read_submessage_list+0x12>
 800e3a2:	a910      	add	r1, sp, #64	@ 0x40
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	f002 fd2f 	bl	8010e08 <uxr_deserialize_ACKNACK_Payload>
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e3b0:	f001 fb36 	bl	800fa20 <uxr_stream_id_from_raw>
 800e3b4:	900d      	str	r0, [sp, #52]	@ 0x34
 800e3b6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e3ba:	f104 0008 	add.w	r0, r4, #8
 800e3be:	f001 fc09 	bl	800fbd4 <uxr_get_output_reliable_stream>
 800e3c2:	4607      	mov	r7, r0
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	f43f af6e 	beq.w	800e2a6 <read_submessage_list+0x12>
 800e3ca:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800e3ce:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800e3d2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e3d6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e3da:	b289      	uxth	r1, r1
 800e3dc:	f007 fc8a 	bl	8015cf4 <uxr_process_acknack>
 800e3e0:	4638      	mov	r0, r7
 800e3e2:	f007 fc47 	bl	8015c74 <uxr_begin_output_nack_buffer_it>
 800e3e6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e3ea:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e3ee:	e006      	b.n	800e3fe <read_submessage_list+0x16a>
 800e3f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e3f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e3f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e3f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3fa:	6818      	ldr	r0, [r3, #0]
 800e3fc:	47c8      	blx	r9
 800e3fe:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e402:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e404:	4651      	mov	r1, sl
 800e406:	4638      	mov	r0, r7
 800e408:	f007 fc36 	bl	8015c78 <uxr_next_reliable_nack_buffer_to_send>
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d1ef      	bne.n	800e3f0 <read_submessage_list+0x15c>
 800e410:	e749      	b.n	800e2a6 <read_submessage_list+0x12>
 800e412:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e416:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800e41a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e41e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800e422:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800e426:	4651      	mov	r1, sl
 800e428:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e42c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800e430:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800e434:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800e438:	4628      	mov	r0, r5
 800e43a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e43e:	f002 fa43 	bl	80108c8 <uxr_deserialize_BaseObjectRequest>
 800e442:	4650      	mov	r0, sl
 800e444:	a90f      	add	r1, sp, #60	@ 0x3c
 800e446:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e44a:	f000 fe1b 	bl	800f084 <uxr_parse_base_object_request>
 800e44e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800e452:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e454:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800e458:	9110      	str	r1, [sp, #64]	@ 0x40
 800e45a:	3f04      	subs	r7, #4
 800e45c:	f009 090e 	and.w	r9, r9, #14
 800e460:	b2bf      	uxth	r7, r7
 800e462:	f1bb 0f00 	cmp.w	fp, #0
 800e466:	d006      	beq.n	800e476 <read_submessage_list+0x1e2>
 800e468:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	4652      	mov	r2, sl
 800e470:	2300      	movs	r3, #0
 800e472:	4620      	mov	r0, r4
 800e474:	47d8      	blx	fp
 800e476:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e478:	b16a      	cbz	r2, 800e496 <read_submessage_list+0x202>
 800e47a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e47c:	2100      	movs	r1, #0
 800e47e:	3802      	subs	r0, #2
 800e480:	e002      	b.n	800e488 <read_submessage_list+0x1f4>
 800e482:	3101      	adds	r1, #1
 800e484:	4291      	cmp	r1, r2
 800e486:	d006      	beq.n	800e496 <read_submessage_list+0x202>
 800e488:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e48c:	4553      	cmp	r3, sl
 800e48e:	d1f8      	bne.n	800e482 <read_submessage_list+0x1ee>
 800e490:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e492:	2200      	movs	r2, #0
 800e494:	545a      	strb	r2, [r3, r1]
 800e496:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e49a:	9102      	str	r1, [sp, #8]
 800e49c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e49e:	9101      	str	r1, [sp, #4]
 800e4a0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e4a2:	9100      	str	r1, [sp, #0]
 800e4a4:	464b      	mov	r3, r9
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f7ff fc4a 	bl	800dd44 <read_submessage_format>
 800e4b0:	e6f9      	b.n	800e2a6 <read_submessage_list+0x12>
 800e4b2:	4629      	mov	r1, r5
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f7ff fea5 	bl	800e204 <read_submessage_info>
 800e4ba:	e6f4      	b.n	800e2a6 <read_submessage_list+0x12>
 800e4bc:	2a00      	cmp	r2, #0
 800e4be:	d03e      	beq.n	800e53e <read_submessage_list+0x2aa>
 800e4c0:	a910      	add	r1, sp, #64	@ 0x40
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f002 fbfc 	bl	8010cc0 <uxr_deserialize_STATUS_Payload>
 800e4c8:	a90e      	add	r1, sp, #56	@ 0x38
 800e4ca:	aa0d      	add	r2, sp, #52	@ 0x34
 800e4cc:	a810      	add	r0, sp, #64	@ 0x40
 800e4ce:	f000 fdd9 	bl	800f084 <uxr_parse_base_object_request>
 800e4d2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800e4d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e4d8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800e4dc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e4e0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e4e2:	f1ba 0f00 	cmp.w	sl, #0
 800e4e6:	d006      	beq.n	800e4f6 <read_submessage_list+0x262>
 800e4e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	463a      	mov	r2, r7
 800e4f0:	464b      	mov	r3, r9
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	47d0      	blx	sl
 800e4f6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e4f8:	2a00      	cmp	r2, #0
 800e4fa:	f43f aed4 	beq.w	800e2a6 <read_submessage_list+0x12>
 800e4fe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e500:	2100      	movs	r1, #0
 800e502:	3802      	subs	r0, #2
 800e504:	e003      	b.n	800e50e <read_submessage_list+0x27a>
 800e506:	3101      	adds	r1, #1
 800e508:	4291      	cmp	r1, r2
 800e50a:	f43f aecc 	beq.w	800e2a6 <read_submessage_list+0x12>
 800e50e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e512:	42bb      	cmp	r3, r7
 800e514:	d1f7      	bne.n	800e506 <read_submessage_list+0x272>
 800e516:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e518:	f803 9001 	strb.w	r9, [r3, r1]
 800e51c:	e6c3      	b.n	800e2a6 <read_submessage_list+0x12>
 800e51e:	2a00      	cmp	r2, #0
 800e520:	f47f aec1 	bne.w	800e2a6 <read_submessage_list+0x12>
 800e524:	4629      	mov	r1, r5
 800e526:	4620      	mov	r0, r4
 800e528:	f000 fcf2 	bl	800ef10 <uxr_read_create_session_status>
 800e52c:	e6bb      	b.n	800e2a6 <read_submessage_list+0x12>
 800e52e:	4629      	mov	r1, r5
 800e530:	4620      	mov	r0, r4
 800e532:	f7ff fcf3 	bl	800df1c <read_submessage_get_info>
 800e536:	e6b6      	b.n	800e2a6 <read_submessage_list+0x12>
 800e538:	b017      	add	sp, #92	@ 0x5c
 800e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53e:	4629      	mov	r1, r5
 800e540:	4620      	mov	r0, r4
 800e542:	f000 fcf1 	bl	800ef28 <uxr_read_delete_session_status>
 800e546:	e6ae      	b.n	800e2a6 <read_submessage_list+0x12>
 800e548:	f001 fbd8 	bl	800fcfc <uxr_nanos>
 800e54c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e54e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e550:	464f      	mov	r7, r9
 800e552:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e556:	1812      	adds	r2, r2, r0
 800e558:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e55a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e55c:	eb47 0101 	adc.w	r1, r7, r1
 800e560:	464f      	mov	r7, r9
 800e562:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e566:	463b      	mov	r3, r7
 800e568:	4684      	mov	ip, r0
 800e56a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e56e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e572:	eb1c 0c00 	adds.w	ip, ip, r0
 800e576:	464f      	mov	r7, r9
 800e578:	eb43 0307 	adc.w	r3, r3, r7
 800e57c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e580:	eb61 0303 	sbc.w	r3, r1, r3
 800e584:	0fda      	lsrs	r2, r3, #31
 800e586:	eb12 020c 	adds.w	r2, r2, ip
 800e58a:	f143 0300 	adc.w	r3, r3, #0
 800e58e:	0852      	lsrs	r2, r2, #1
 800e590:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e594:	105b      	asrs	r3, r3, #1
 800e596:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e59a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e59e:	e6dd      	b.n	800e35c <read_submessage_list+0xc8>
 800e5a0:	3b9aca00 	.word	0x3b9aca00

0800e5a4 <listen_message_reliably>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	1e0b      	subs	r3, r1, #0
 800e5aa:	b09d      	sub	sp, #116	@ 0x74
 800e5ac:	bfb8      	it	lt
 800e5ae:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e5b2:	4680      	mov	r8, r0
 800e5b4:	9305      	str	r3, [sp, #20]
 800e5b6:	f001 fb87 	bl	800fcc8 <uxr_millis>
 800e5ba:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e5be:	4681      	mov	r9, r0
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	f000 80a1 	beq.w	800e708 <listen_message_reliably+0x164>
 800e5c6:	2600      	movs	r6, #0
 800e5c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e5cc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e5d0:	9303      	str	r3, [sp, #12]
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	460f      	mov	r7, r1
 800e5d6:	e00f      	b.n	800e5f8 <listen_message_reliably+0x54>
 800e5d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e5dc:	9903      	ldr	r1, [sp, #12]
 800e5de:	455a      	cmp	r2, fp
 800e5e0:	f106 0601 	add.w	r6, r6, #1
 800e5e4:	eb73 0101 	sbcs.w	r1, r3, r1
 800e5e8:	b2f0      	uxtb	r0, r6
 800e5ea:	da01      	bge.n	800e5f0 <listen_message_reliably+0x4c>
 800e5ec:	4693      	mov	fp, r2
 800e5ee:	9303      	str	r3, [sp, #12]
 800e5f0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e5f4:	4283      	cmp	r3, r0
 800e5f6:	d960      	bls.n	800e6ba <listen_message_reliably+0x116>
 800e5f8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e5fc:	2102      	movs	r1, #2
 800e5fe:	2201      	movs	r2, #1
 800e600:	f001 f9e4 	bl	800f9cc <uxr_stream_id>
 800e604:	00e4      	lsls	r4, r4, #3
 800e606:	f104 0520 	add.w	r5, r4, #32
 800e60a:	4445      	add	r5, r8
 800e60c:	4601      	mov	r1, r0
 800e60e:	463b      	mov	r3, r7
 800e610:	464a      	mov	r2, r9
 800e612:	4628      	mov	r0, r5
 800e614:	9109      	str	r1, [sp, #36]	@ 0x24
 800e616:	f007 fb03 	bl	8015c20 <uxr_update_output_stream_heartbeat_timestamp>
 800e61a:	eb08 0304 	add.w	r3, r8, r4
 800e61e:	2800      	cmp	r0, #0
 800e620:	d0da      	beq.n	800e5d8 <listen_message_reliably+0x34>
 800e622:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e626:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e62a:	9304      	str	r3, [sp, #16]
 800e62c:	4640      	mov	r0, r8
 800e62e:	f000 fd03 	bl	800f038 <uxr_session_header_offset>
 800e632:	3501      	adds	r5, #1
 800e634:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e638:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e63c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e640:	2300      	movs	r3, #0
 800e642:	2211      	movs	r2, #17
 800e644:	9000      	str	r0, [sp, #0]
 800e646:	a90c      	add	r1, sp, #48	@ 0x30
 800e648:	4650      	mov	r0, sl
 800e64a:	f7ff f881 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800e64e:	2300      	movs	r3, #0
 800e650:	2205      	movs	r2, #5
 800e652:	210b      	movs	r1, #11
 800e654:	4650      	mov	r0, sl
 800e656:	f001 faf1 	bl	800fc3c <uxr_buffer_submessage_header>
 800e65a:	8968      	ldrh	r0, [r5, #10]
 800e65c:	2101      	movs	r1, #1
 800e65e:	f007 fba1 	bl	8015da4 <uxr_seq_num_add>
 800e662:	892b      	ldrh	r3, [r5, #8]
 800e664:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e668:	4602      	mov	r2, r0
 800e66a:	9b04      	ldr	r3, [sp, #16]
 800e66c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e670:	a90a      	add	r1, sp, #40	@ 0x28
 800e672:	4650      	mov	r0, sl
 800e674:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e678:	f002 fbda 	bl	8010e30 <uxr_serialize_HEARTBEAT_Payload>
 800e67c:	2200      	movs	r2, #0
 800e67e:	4611      	mov	r1, r2
 800e680:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e682:	4640      	mov	r0, r8
 800e684:	f000 fc82 	bl	800ef8c <uxr_stamp_session_header>
 800e688:	4650      	mov	r0, sl
 800e68a:	f7ff f89f 	bl	800d7cc <ucdr_buffer_length>
 800e68e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e692:	4602      	mov	r2, r0
 800e694:	a90c      	add	r1, sp, #48	@ 0x30
 800e696:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e69a:	4444      	add	r4, r8
 800e69c:	47a8      	blx	r5
 800e69e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e6a2:	9903      	ldr	r1, [sp, #12]
 800e6a4:	455a      	cmp	r2, fp
 800e6a6:	f106 0601 	add.w	r6, r6, #1
 800e6aa:	eb73 0101 	sbcs.w	r1, r3, r1
 800e6ae:	b2f0      	uxtb	r0, r6
 800e6b0:	db9c      	blt.n	800e5ec <listen_message_reliably+0x48>
 800e6b2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e6b6:	4283      	cmp	r3, r0
 800e6b8:	d89e      	bhi.n	800e5f8 <listen_message_reliably+0x54>
 800e6ba:	9a03      	ldr	r2, [sp, #12]
 800e6bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	bf08      	it	eq
 800e6c4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e6c8:	d01e      	beq.n	800e708 <listen_message_reliably+0x164>
 800e6ca:	ebab 0309 	sub.w	r3, fp, r9
 800e6ce:	9905      	ldr	r1, [sp, #20]
 800e6d0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	bf08      	it	eq
 800e6d8:	2301      	moveq	r3, #1
 800e6da:	4299      	cmp	r1, r3
 800e6dc:	bfa8      	it	ge
 800e6de:	4619      	movge	r1, r3
 800e6e0:	6894      	ldr	r4, [r2, #8]
 800e6e2:	6810      	ldr	r0, [r2, #0]
 800e6e4:	4689      	mov	r9, r1
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	aa08      	add	r2, sp, #32
 800e6ea:	a907      	add	r1, sp, #28
 800e6ec:	47a0      	blx	r4
 800e6ee:	b968      	cbnz	r0, 800e70c <listen_message_reliably+0x168>
 800e6f0:	9b05      	ldr	r3, [sp, #20]
 800e6f2:	eba3 0309 	sub.w	r3, r3, r9
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	9305      	str	r3, [sp, #20]
 800e6fa:	f73f af5c 	bgt.w	800e5b6 <listen_message_reliably+0x12>
 800e6fe:	4604      	mov	r4, r0
 800e700:	4620      	mov	r0, r4
 800e702:	b01d      	add	sp, #116	@ 0x74
 800e704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e708:	9b05      	ldr	r3, [sp, #20]
 800e70a:	e7e0      	b.n	800e6ce <listen_message_reliably+0x12a>
 800e70c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e710:	4604      	mov	r4, r0
 800e712:	a80c      	add	r0, sp, #48	@ 0x30
 800e714:	f7ff f82e 	bl	800d774 <ucdr_init_buffer>
 800e718:	2500      	movs	r5, #0
 800e71a:	f10d 031a 	add.w	r3, sp, #26
 800e71e:	aa06      	add	r2, sp, #24
 800e720:	a90c      	add	r1, sp, #48	@ 0x30
 800e722:	4640      	mov	r0, r8
 800e724:	f88d 5018 	strb.w	r5, [sp, #24]
 800e728:	f000 fc44 	bl	800efb4 <uxr_read_session_header>
 800e72c:	b918      	cbnz	r0, 800e736 <listen_message_reliably+0x192>
 800e72e:	4620      	mov	r0, r4
 800e730:	b01d      	add	sp, #116	@ 0x74
 800e732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e736:	4629      	mov	r1, r5
 800e738:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e73c:	f001 f970 	bl	800fa20 <uxr_stream_id_from_raw>
 800e740:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e744:	2d01      	cmp	r5, #1
 800e746:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e74a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e74e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e752:	d04b      	beq.n	800e7ec <listen_message_reliably+0x248>
 800e754:	2d02      	cmp	r5, #2
 800e756:	d00f      	beq.n	800e778 <listen_message_reliably+0x1d4>
 800e758:	2d00      	cmp	r5, #0
 800e75a:	d1e8      	bne.n	800e72e <listen_message_reliably+0x18a>
 800e75c:	4629      	mov	r1, r5
 800e75e:	4628      	mov	r0, r5
 800e760:	f001 f95e 	bl	800fa20 <uxr_stream_id_from_raw>
 800e764:	a90c      	add	r1, sp, #48	@ 0x30
 800e766:	4602      	mov	r2, r0
 800e768:	4640      	mov	r0, r8
 800e76a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e76c:	f7ff fd92 	bl	800e294 <read_submessage_list>
 800e770:	4620      	mov	r0, r4
 800e772:	b01d      	add	sp, #116	@ 0x74
 800e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e778:	4631      	mov	r1, r6
 800e77a:	f108 0008 	add.w	r0, r8, #8
 800e77e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e782:	f001 fa3b 	bl	800fbfc <uxr_get_input_reliable_stream>
 800e786:	4607      	mov	r7, r0
 800e788:	b338      	cbz	r0, 800e7da <listen_message_reliably+0x236>
 800e78a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e78c:	9203      	str	r2, [sp, #12]
 800e78e:	a80c      	add	r0, sp, #48	@ 0x30
 800e790:	f7ff f820 	bl	800d7d4 <ucdr_buffer_remaining>
 800e794:	4603      	mov	r3, r0
 800e796:	f10d 0019 	add.w	r0, sp, #25
 800e79a:	9000      	str	r0, [sp, #0]
 800e79c:	9a03      	ldr	r2, [sp, #12]
 800e79e:	4651      	mov	r1, sl
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	f006 fe53 	bl	801544c <uxr_receive_reliable_message>
 800e7a6:	b1c0      	cbz	r0, 800e7da <listen_message_reliably+0x236>
 800e7a8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e7ac:	b393      	cbz	r3, 800e814 <listen_message_reliably+0x270>
 800e7ae:	ad14      	add	r5, sp, #80	@ 0x50
 800e7b0:	f04f 0a02 	mov.w	sl, #2
 800e7b4:	e00a      	b.n	800e7cc <listen_message_reliably+0x228>
 800e7b6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e7ba:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e7be:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e7c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	4640      	mov	r0, r8
 800e7c8:	f7ff fd64 	bl	800e294 <read_submessage_list>
 800e7cc:	2204      	movs	r2, #4
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	4638      	mov	r0, r7
 800e7d2:	f006 febb 	bl	801554c <uxr_next_input_reliable_buffer_available>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d1ed      	bne.n	800e7b6 <listen_message_reliably+0x212>
 800e7da:	4640      	mov	r0, r8
 800e7dc:	4632      	mov	r2, r6
 800e7de:	4649      	mov	r1, r9
 800e7e0:	f7ff fbd2 	bl	800df88 <write_submessage_acknack.isra.0>
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	b01d      	add	sp, #116	@ 0x74
 800e7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ec:	4631      	mov	r1, r6
 800e7ee:	f108 0008 	add.w	r0, r8, #8
 800e7f2:	f001 f9f9 	bl	800fbe8 <uxr_get_input_best_effort_stream>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d099      	beq.n	800e72e <listen_message_reliably+0x18a>
 800e7fa:	4651      	mov	r1, sl
 800e7fc:	f006 fd92 	bl	8015324 <uxr_receive_best_effort_message>
 800e800:	2800      	cmp	r0, #0
 800e802:	d094      	beq.n	800e72e <listen_message_reliably+0x18a>
 800e804:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e808:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e80a:	a90c      	add	r1, sp, #48	@ 0x30
 800e80c:	4640      	mov	r0, r8
 800e80e:	f7ff fd41 	bl	800e294 <read_submessage_list>
 800e812:	e78c      	b.n	800e72e <listen_message_reliably+0x18a>
 800e814:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e818:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e81a:	a90c      	add	r1, sp, #48	@ 0x30
 800e81c:	4640      	mov	r0, r8
 800e81e:	f7ff fd39 	bl	800e294 <read_submessage_list>
 800e822:	e7c4      	b.n	800e7ae <listen_message_reliably+0x20a>

0800e824 <uxr_run_session_timeout>:
 800e824:	b570      	push	{r4, r5, r6, lr}
 800e826:	4604      	mov	r4, r0
 800e828:	460d      	mov	r5, r1
 800e82a:	f001 fa4d 	bl	800fcc8 <uxr_millis>
 800e82e:	4606      	mov	r6, r0
 800e830:	4620      	mov	r0, r4
 800e832:	f7ff fc71 	bl	800e118 <uxr_flash_output_streams>
 800e836:	4629      	mov	r1, r5
 800e838:	4620      	mov	r0, r4
 800e83a:	f7ff feb3 	bl	800e5a4 <listen_message_reliably>
 800e83e:	f001 fa43 	bl	800fcc8 <uxr_millis>
 800e842:	1b83      	subs	r3, r0, r6
 800e844:	1ae9      	subs	r1, r5, r3
 800e846:	2900      	cmp	r1, #0
 800e848:	dcf6      	bgt.n	800e838 <uxr_run_session_timeout+0x14>
 800e84a:	f104 0008 	add.w	r0, r4, #8
 800e84e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e852:	f001 b9dd 	b.w	800fc10 <uxr_output_streams_confirmed>
 800e856:	bf00      	nop

0800e858 <uxr_run_session_until_data>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	4604      	mov	r4, r0
 800e85c:	460d      	mov	r5, r1
 800e85e:	f001 fa33 	bl	800fcc8 <uxr_millis>
 800e862:	4606      	mov	r6, r0
 800e864:	4620      	mov	r0, r4
 800e866:	f7ff fc57 	bl	800e118 <uxr_flash_output_streams>
 800e86a:	2300      	movs	r3, #0
 800e86c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e870:	4629      	mov	r1, r5
 800e872:	e005      	b.n	800e880 <uxr_run_session_until_data+0x28>
 800e874:	f001 fa28 	bl	800fcc8 <uxr_millis>
 800e878:	1b83      	subs	r3, r0, r6
 800e87a:	1ae9      	subs	r1, r5, r3
 800e87c:	2900      	cmp	r1, #0
 800e87e:	dd07      	ble.n	800e890 <uxr_run_session_until_data+0x38>
 800e880:	4620      	mov	r0, r4
 800e882:	f7ff fe8f 	bl	800e5a4 <listen_message_reliably>
 800e886:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e88a:	2800      	cmp	r0, #0
 800e88c:	d0f2      	beq.n	800e874 <uxr_run_session_until_data+0x1c>
 800e88e:	bd70      	pop	{r4, r5, r6, pc}
 800e890:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e894:	bd70      	pop	{r4, r5, r6, pc}
 800e896:	bf00      	nop

0800e898 <uxr_run_session_until_confirm_delivery>:
 800e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	4606      	mov	r6, r0
 800e89e:	460d      	mov	r5, r1
 800e8a0:	f001 fa12 	bl	800fcc8 <uxr_millis>
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f7ff fc36 	bl	800e118 <uxr_flash_output_streams>
 800e8ac:	2d00      	cmp	r5, #0
 800e8ae:	f106 0808 	add.w	r8, r6, #8
 800e8b2:	bfa8      	it	ge
 800e8b4:	462c      	movge	r4, r5
 800e8b6:	da07      	bge.n	800e8c8 <uxr_run_session_until_confirm_delivery+0x30>
 800e8b8:	e00e      	b.n	800e8d8 <uxr_run_session_until_confirm_delivery+0x40>
 800e8ba:	f7ff fe73 	bl	800e5a4 <listen_message_reliably>
 800e8be:	f001 fa03 	bl	800fcc8 <uxr_millis>
 800e8c2:	1bc3      	subs	r3, r0, r7
 800e8c4:	1aec      	subs	r4, r5, r3
 800e8c6:	d407      	bmi.n	800e8d8 <uxr_run_session_until_confirm_delivery+0x40>
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	f001 f9a1 	bl	800fc10 <uxr_output_streams_confirmed>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d0f0      	beq.n	800e8ba <uxr_run_session_until_confirm_delivery+0x22>
 800e8d8:	4640      	mov	r0, r8
 800e8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8de:	f001 b997 	b.w	800fc10 <uxr_output_streams_confirmed>
 800e8e2:	bf00      	nop

0800e8e4 <uxr_run_session_until_all_status>:
 800e8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8e8:	9c08      	ldr	r4, [sp, #32]
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	460f      	mov	r7, r1
 800e8ee:	4691      	mov	r9, r2
 800e8f0:	461d      	mov	r5, r3
 800e8f2:	f7ff fc11 	bl	800e118 <uxr_flash_output_streams>
 800e8f6:	b124      	cbz	r4, 800e902 <uxr_run_session_until_all_status+0x1e>
 800e8f8:	4622      	mov	r2, r4
 800e8fa:	21ff      	movs	r1, #255	@ 0xff
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f008 fa0b 	bl	8016d18 <memset>
 800e902:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e906:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e908:	f001 f9de 	bl	800fcc8 <uxr_millis>
 800e90c:	3d01      	subs	r5, #1
 800e90e:	f1a9 0902 	sub.w	r9, r9, #2
 800e912:	4680      	mov	r8, r0
 800e914:	4639      	mov	r1, r7
 800e916:	4630      	mov	r0, r6
 800e918:	f7ff fe44 	bl	800e5a4 <listen_message_reliably>
 800e91c:	f001 f9d4 	bl	800fcc8 <uxr_millis>
 800e920:	eba0 0008 	sub.w	r0, r0, r8
 800e924:	1a39      	subs	r1, r7, r0
 800e926:	b344      	cbz	r4, 800e97a <uxr_run_session_until_all_status+0x96>
 800e928:	4628      	mov	r0, r5
 800e92a:	46ac      	mov	ip, r5
 800e92c:	2301      	movs	r3, #1
 800e92e:	e002      	b.n	800e936 <uxr_run_session_until_all_status+0x52>
 800e930:	42a3      	cmp	r3, r4
 800e932:	d20d      	bcs.n	800e950 <uxr_run_session_until_all_status+0x6c>
 800e934:	3301      	adds	r3, #1
 800e936:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e93a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e93e:	d1f7      	bne.n	800e930 <uxr_run_session_until_all_status+0x4c>
 800e940:	42a3      	cmp	r3, r4
 800e942:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e946:	d213      	bcs.n	800e970 <uxr_run_session_until_all_status+0x8c>
 800e948:	2a00      	cmp	r2, #0
 800e94a:	d0f3      	beq.n	800e934 <uxr_run_session_until_all_status+0x50>
 800e94c:	2900      	cmp	r1, #0
 800e94e:	dce2      	bgt.n	800e916 <uxr_run_session_until_all_status+0x32>
 800e950:	2300      	movs	r3, #0
 800e952:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e954:	442c      	add	r4, r5
 800e956:	e001      	b.n	800e95c <uxr_run_session_until_all_status+0x78>
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d812      	bhi.n	800e982 <uxr_run_session_until_all_status+0x9e>
 800e95c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e960:	4284      	cmp	r4, r0
 800e962:	d1f9      	bne.n	800e958 <uxr_run_session_until_all_status+0x74>
 800e964:	2b01      	cmp	r3, #1
 800e966:	bf8c      	ite	hi
 800e968:	2000      	movhi	r0, #0
 800e96a:	2001      	movls	r0, #1
 800e96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e970:	2900      	cmp	r1, #0
 800e972:	dded      	ble.n	800e950 <uxr_run_session_until_all_status+0x6c>
 800e974:	2a00      	cmp	r2, #0
 800e976:	d1ce      	bne.n	800e916 <uxr_run_session_until_all_status+0x32>
 800e978:	e7ea      	b.n	800e950 <uxr_run_session_until_all_status+0x6c>
 800e97a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e97c:	2001      	movs	r0, #1
 800e97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e982:	2000      	movs	r0, #0
 800e984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e988 <uxr_sync_session>:
 800e988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e98a:	b093      	sub	sp, #76	@ 0x4c
 800e98c:	4604      	mov	r4, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	f000 fb52 	bl	800f038 <uxr_session_header_offset>
 800e994:	2214      	movs	r2, #20
 800e996:	eb0d 0102 	add.w	r1, sp, r2
 800e99a:	9000      	str	r0, [sp, #0]
 800e99c:	2300      	movs	r3, #0
 800e99e:	a80a      	add	r0, sp, #40	@ 0x28
 800e9a0:	f7fe fed6 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	2208      	movs	r2, #8
 800e9a8:	210e      	movs	r1, #14
 800e9aa:	a80a      	add	r0, sp, #40	@ 0x28
 800e9ac:	f001 f946 	bl	800fc3c <uxr_buffer_submessage_header>
 800e9b0:	f001 f9a4 	bl	800fcfc <uxr_nanos>
 800e9b4:	a31c      	add	r3, pc, #112	@ (adr r3, 800ea28 <uxr_sync_session+0xa0>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	460e      	mov	r6, r1
 800e9bc:	4607      	mov	r7, r0
 800e9be:	f7f1 fc97 	bl	80002f0 <__aeabi_ldivmod>
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	9003      	str	r0, [sp, #12]
 800e9c6:	a318      	add	r3, pc, #96	@ (adr r3, 800ea28 <uxr_sync_session+0xa0>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7f1 fc8f 	bl	80002f0 <__aeabi_ldivmod>
 800e9d2:	a903      	add	r1, sp, #12
 800e9d4:	a80a      	add	r0, sp, #40	@ 0x28
 800e9d6:	9204      	str	r2, [sp, #16]
 800e9d8:	f002 fa50 	bl	8010e7c <uxr_serialize_TIMESTAMP_Payload>
 800e9dc:	2200      	movs	r2, #0
 800e9de:	4611      	mov	r1, r2
 800e9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f000 fad2 	bl	800ef8c <uxr_stamp_session_header>
 800e9e8:	a80a      	add	r0, sp, #40	@ 0x28
 800e9ea:	f7fe feef 	bl	800d7cc <ucdr_buffer_length>
 800e9ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	a905      	add	r1, sp, #20
 800e9f4:	e9d3 0600 	ldrd	r0, r6, [r3]
 800e9f8:	47b0      	blx	r6
 800e9fa:	f001 f965 	bl	800fcc8 <uxr_millis>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4606      	mov	r6, r0
 800ea02:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800ea06:	4629      	mov	r1, r5
 800ea08:	e000      	b.n	800ea0c <uxr_sync_session+0x84>
 800ea0a:	b950      	cbnz	r0, 800ea22 <uxr_sync_session+0x9a>
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f7ff fdc9 	bl	800e5a4 <listen_message_reliably>
 800ea12:	f001 f959 	bl	800fcc8 <uxr_millis>
 800ea16:	1b83      	subs	r3, r0, r6
 800ea18:	1ae9      	subs	r1, r5, r3
 800ea1a:	2900      	cmp	r1, #0
 800ea1c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800ea20:	dcf3      	bgt.n	800ea0a <uxr_sync_session+0x82>
 800ea22:	b013      	add	sp, #76	@ 0x4c
 800ea24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea26:	bf00      	nop
 800ea28:	3b9aca00 	.word	0x3b9aca00
 800ea2c:	00000000 	.word	0x00000000

0800ea30 <wait_session_status>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	4604      	mov	r4, r0
 800ea36:	b09d      	sub	sp, #116	@ 0x74
 800ea38:	20ff      	movs	r0, #255	@ 0xff
 800ea3a:	7160      	strb	r0, [r4, #5]
 800ea3c:	9303      	str	r3, [sp, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 80b6 	beq.w	800ebb0 <wait_session_status+0x180>
 800ea44:	468a      	mov	sl, r1
 800ea46:	4691      	mov	r9, r2
 800ea48:	f04f 0b00 	mov.w	fp, #0
 800ea4c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea4e:	464a      	mov	r2, r9
 800ea50:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ea54:	4651      	mov	r1, sl
 800ea56:	47a8      	blx	r5
 800ea58:	f001 f936 	bl	800fcc8 <uxr_millis>
 800ea5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea60:	4605      	mov	r5, r0
 800ea62:	e009      	b.n	800ea78 <wait_session_status+0x48>
 800ea64:	f001 f930 	bl	800fcc8 <uxr_millis>
 800ea68:	1b40      	subs	r0, r0, r5
 800ea6a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	dd40      	ble.n	800eaf4 <wait_session_status+0xc4>
 800ea72:	7960      	ldrb	r0, [r4, #5]
 800ea74:	28ff      	cmp	r0, #255	@ 0xff
 800ea76:	d145      	bne.n	800eb04 <wait_session_status+0xd4>
 800ea78:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ea7a:	a908      	add	r1, sp, #32
 800ea7c:	6896      	ldr	r6, [r2, #8]
 800ea7e:	6810      	ldr	r0, [r2, #0]
 800ea80:	aa09      	add	r2, sp, #36	@ 0x24
 800ea82:	47b0      	blx	r6
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d0ed      	beq.n	800ea64 <wait_session_status+0x34>
 800ea88:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ea8c:	a80c      	add	r0, sp, #48	@ 0x30
 800ea8e:	f7fe fe71 	bl	800d774 <ucdr_init_buffer>
 800ea92:	2600      	movs	r6, #0
 800ea94:	f10d 031e 	add.w	r3, sp, #30
 800ea98:	aa07      	add	r2, sp, #28
 800ea9a:	a90c      	add	r1, sp, #48	@ 0x30
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f88d 601c 	strb.w	r6, [sp, #28]
 800eaa2:	f000 fa87 	bl	800efb4 <uxr_read_session_header>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d0dc      	beq.n	800ea64 <wait_session_status+0x34>
 800eaaa:	4631      	mov	r1, r6
 800eaac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800eab0:	f000 ffb6 	bl	800fa20 <uxr_stream_id_from_raw>
 800eab4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800eab8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800eabc:	9302      	str	r3, [sp, #8]
 800eabe:	2f01      	cmp	r7, #1
 800eac0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800eac4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800eac8:	d05c      	beq.n	800eb84 <wait_session_status+0x154>
 800eaca:	2f02      	cmp	r7, #2
 800eacc:	d020      	beq.n	800eb10 <wait_session_status+0xe0>
 800eace:	2f00      	cmp	r7, #0
 800ead0:	d1c8      	bne.n	800ea64 <wait_session_status+0x34>
 800ead2:	4639      	mov	r1, r7
 800ead4:	4638      	mov	r0, r7
 800ead6:	f000 ffa3 	bl	800fa20 <uxr_stream_id_from_raw>
 800eada:	a90c      	add	r1, sp, #48	@ 0x30
 800eadc:	4602      	mov	r2, r0
 800eade:	900b      	str	r0, [sp, #44]	@ 0x2c
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7ff fbd7 	bl	800e294 <read_submessage_list>
 800eae6:	f001 f8ef 	bl	800fcc8 <uxr_millis>
 800eaea:	1b40      	subs	r0, r0, r5
 800eaec:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dcbe      	bgt.n	800ea72 <wait_session_status+0x42>
 800eaf4:	9b03      	ldr	r3, [sp, #12]
 800eaf6:	7960      	ldrb	r0, [r4, #5]
 800eaf8:	f10b 0b01 	add.w	fp, fp, #1
 800eafc:	455b      	cmp	r3, fp
 800eafe:	d001      	beq.n	800eb04 <wait_session_status+0xd4>
 800eb00:	28ff      	cmp	r0, #255	@ 0xff
 800eb02:	d0a3      	beq.n	800ea4c <wait_session_status+0x1c>
 800eb04:	38ff      	subs	r0, #255	@ 0xff
 800eb06:	bf18      	it	ne
 800eb08:	2001      	movne	r0, #1
 800eb0a:	b01d      	add	sp, #116	@ 0x74
 800eb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb10:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800eb14:	9304      	str	r3, [sp, #16]
 800eb16:	4631      	mov	r1, r6
 800eb18:	f104 0008 	add.w	r0, r4, #8
 800eb1c:	f001 f86e 	bl	800fbfc <uxr_get_input_reliable_stream>
 800eb20:	4680      	mov	r8, r0
 800eb22:	b348      	cbz	r0, 800eb78 <wait_session_status+0x148>
 800eb24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb26:	9205      	str	r2, [sp, #20]
 800eb28:	a80c      	add	r0, sp, #48	@ 0x30
 800eb2a:	f7fe fe53 	bl	800d7d4 <ucdr_buffer_remaining>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f10d 001d 	add.w	r0, sp, #29
 800eb34:	9000      	str	r0, [sp, #0]
 800eb36:	9a05      	ldr	r2, [sp, #20]
 800eb38:	9902      	ldr	r1, [sp, #8]
 800eb3a:	4640      	mov	r0, r8
 800eb3c:	f006 fc86 	bl	801544c <uxr_receive_reliable_message>
 800eb40:	b1d0      	cbz	r0, 800eb78 <wait_session_status+0x148>
 800eb42:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d03a      	beq.n	800ebc0 <wait_session_status+0x190>
 800eb4a:	9f04      	ldr	r7, [sp, #16]
 800eb4c:	e00a      	b.n	800eb64 <wait_session_status+0x134>
 800eb4e:	f04f 0302 	mov.w	r3, #2
 800eb52:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800eb56:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800eb5a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800eb5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb60:	f7ff fb98 	bl	800e294 <read_submessage_list>
 800eb64:	a914      	add	r1, sp, #80	@ 0x50
 800eb66:	2204      	movs	r2, #4
 800eb68:	4640      	mov	r0, r8
 800eb6a:	f006 fcef 	bl	801554c <uxr_next_input_reliable_buffer_available>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	a914      	add	r1, sp, #80	@ 0x50
 800eb72:	4620      	mov	r0, r4
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1ea      	bne.n	800eb4e <wait_session_status+0x11e>
 800eb78:	9904      	ldr	r1, [sp, #16]
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f7ff fa03 	bl	800df88 <write_submessage_acknack.isra.0>
 800eb82:	e76f      	b.n	800ea64 <wait_session_status+0x34>
 800eb84:	4631      	mov	r1, r6
 800eb86:	f104 0008 	add.w	r0, r4, #8
 800eb8a:	f001 f82d 	bl	800fbe8 <uxr_get_input_best_effort_stream>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	f43f af68 	beq.w	800ea64 <wait_session_status+0x34>
 800eb94:	9902      	ldr	r1, [sp, #8]
 800eb96:	f006 fbc5 	bl	8015324 <uxr_receive_best_effort_message>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	f43f af62 	beq.w	800ea64 <wait_session_status+0x34>
 800eba0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800eba4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eba6:	a90c      	add	r1, sp, #48	@ 0x30
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f7ff fb73 	bl	800e294 <read_submessage_list>
 800ebae:	e759      	b.n	800ea64 <wait_session_status+0x34>
 800ebb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ebb2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ebb6:	47a0      	blx	r4
 800ebb8:	2001      	movs	r0, #1
 800ebba:	b01d      	add	sp, #116	@ 0x74
 800ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800ebc4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ebc6:	a90c      	add	r1, sp, #48	@ 0x30
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f7ff fb63 	bl	800e294 <read_submessage_list>
 800ebce:	e7bc      	b.n	800eb4a <wait_session_status+0x11a>

0800ebd0 <uxr_delete_session_retries>:
 800ebd0:	b530      	push	{r4, r5, lr}
 800ebd2:	b08f      	sub	sp, #60	@ 0x3c
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	460d      	mov	r5, r1
 800ebd8:	f000 fa2e 	bl	800f038 <uxr_session_header_offset>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	2210      	movs	r2, #16
 800ebe0:	9000      	str	r0, [sp, #0]
 800ebe2:	a902      	add	r1, sp, #8
 800ebe4:	a806      	add	r0, sp, #24
 800ebe6:	f7fe fdb3 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800ebea:	a906      	add	r1, sp, #24
 800ebec:	4620      	mov	r0, r4
 800ebee:	f000 f973 	bl	800eed8 <uxr_buffer_delete_session>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	9b06      	ldr	r3, [sp, #24]
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	f000 f9c7 	bl	800ef8c <uxr_stamp_session_header>
 800ebfe:	a806      	add	r0, sp, #24
 800ec00:	f7fe fde4 	bl	800d7cc <ucdr_buffer_length>
 800ec04:	462b      	mov	r3, r5
 800ec06:	4602      	mov	r2, r0
 800ec08:	a902      	add	r1, sp, #8
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f7ff ff10 	bl	800ea30 <wait_session_status>
 800ec10:	b118      	cbz	r0, 800ec1a <uxr_delete_session_retries+0x4a>
 800ec12:	7960      	ldrb	r0, [r4, #5]
 800ec14:	fab0 f080 	clz	r0, r0
 800ec18:	0940      	lsrs	r0, r0, #5
 800ec1a:	b00f      	add	sp, #60	@ 0x3c
 800ec1c:	bd30      	pop	{r4, r5, pc}
 800ec1e:	bf00      	nop

0800ec20 <uxr_create_session>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	f100 0b08 	add.w	fp, r0, #8
 800ec28:	b0ab      	sub	sp, #172	@ 0xac
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4658      	mov	r0, fp
 800ec2e:	f000 ff2b 	bl	800fa88 <uxr_reset_stream_storage>
 800ec32:	4620      	mov	r0, r4
 800ec34:	f000 fa00 	bl	800f038 <uxr_session_header_offset>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	9000      	str	r0, [sp, #0]
 800ec3c:	221c      	movs	r2, #28
 800ec3e:	a90b      	add	r1, sp, #44	@ 0x2c
 800ec40:	a812      	add	r0, sp, #72	@ 0x48
 800ec42:	f7fe fd85 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800ec46:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec48:	8a1a      	ldrh	r2, [r3, #16]
 800ec4a:	3a04      	subs	r2, #4
 800ec4c:	b292      	uxth	r2, r2
 800ec4e:	a912      	add	r1, sp, #72	@ 0x48
 800ec50:	4620      	mov	r0, r4
 800ec52:	f000 f917 	bl	800ee84 <uxr_buffer_create_session>
 800ec56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 f983 	bl	800ef64 <uxr_stamp_create_session_header>
 800ec5e:	a812      	add	r0, sp, #72	@ 0x48
 800ec60:	f7fe fdb4 	bl	800d7cc <ucdr_buffer_length>
 800ec64:	23ff      	movs	r3, #255	@ 0xff
 800ec66:	7163      	strb	r3, [r4, #5]
 800ec68:	230a      	movs	r3, #10
 800ec6a:	46da      	mov	sl, fp
 800ec6c:	9303      	str	r3, [sp, #12]
 800ec6e:	4683      	mov	fp, r0
 800ec70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec72:	465a      	mov	r2, fp
 800ec74:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ec78:	a90b      	add	r1, sp, #44	@ 0x2c
 800ec7a:	47a8      	blx	r5
 800ec7c:	f001 f824 	bl	800fcc8 <uxr_millis>
 800ec80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ec84:	4605      	mov	r5, r0
 800ec86:	e009      	b.n	800ec9c <uxr_create_session+0x7c>
 800ec88:	f001 f81e 	bl	800fcc8 <uxr_millis>
 800ec8c:	1b40      	subs	r0, r0, r5
 800ec8e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	7962      	ldrb	r2, [r4, #5]
 800ec96:	dd38      	ble.n	800ed0a <uxr_create_session+0xea>
 800ec98:	2aff      	cmp	r2, #255	@ 0xff
 800ec9a:	d13c      	bne.n	800ed16 <uxr_create_session+0xf6>
 800ec9c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ec9e:	a907      	add	r1, sp, #28
 800eca0:	6896      	ldr	r6, [r2, #8]
 800eca2:	6810      	ldr	r0, [r2, #0]
 800eca4:	aa08      	add	r2, sp, #32
 800eca6:	47b0      	blx	r6
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d0ed      	beq.n	800ec88 <uxr_create_session+0x68>
 800ecac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ecb0:	a81a      	add	r0, sp, #104	@ 0x68
 800ecb2:	f7fe fd5f 	bl	800d774 <ucdr_init_buffer>
 800ecb6:	2600      	movs	r6, #0
 800ecb8:	f10d 031a 	add.w	r3, sp, #26
 800ecbc:	aa06      	add	r2, sp, #24
 800ecbe:	a91a      	add	r1, sp, #104	@ 0x68
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f88d 6018 	strb.w	r6, [sp, #24]
 800ecc6:	f000 f975 	bl	800efb4 <uxr_read_session_header>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d0dc      	beq.n	800ec88 <uxr_create_session+0x68>
 800ecce:	4631      	mov	r1, r6
 800ecd0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ecd4:	f000 fea4 	bl	800fa20 <uxr_stream_id_from_raw>
 800ecd8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800ecdc:	2e01      	cmp	r6, #1
 800ecde:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800ece2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800ece6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ecea:	d053      	beq.n	800ed94 <uxr_create_session+0x174>
 800ecec:	2e02      	cmp	r6, #2
 800ecee:	d018      	beq.n	800ed22 <uxr_create_session+0x102>
 800ecf0:	2e00      	cmp	r6, #0
 800ecf2:	d1c9      	bne.n	800ec88 <uxr_create_session+0x68>
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	f000 fe92 	bl	800fa20 <uxr_stream_id_from_raw>
 800ecfc:	a91a      	add	r1, sp, #104	@ 0x68
 800ecfe:	4602      	mov	r2, r0
 800ed00:	900a      	str	r0, [sp, #40]	@ 0x28
 800ed02:	4620      	mov	r0, r4
 800ed04:	f7ff fac6 	bl	800e294 <read_submessage_list>
 800ed08:	e7be      	b.n	800ec88 <uxr_create_session+0x68>
 800ed0a:	9b03      	ldr	r3, [sp, #12]
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	9303      	str	r3, [sp, #12]
 800ed10:	d001      	beq.n	800ed16 <uxr_create_session+0xf6>
 800ed12:	2aff      	cmp	r2, #255	@ 0xff
 800ed14:	d0ac      	beq.n	800ec70 <uxr_create_session+0x50>
 800ed16:	2a00      	cmp	r2, #0
 800ed18:	d051      	beq.n	800edbe <uxr_create_session+0x19e>
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	b02b      	add	sp, #172	@ 0xac
 800ed1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed22:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ed26:	9304      	str	r3, [sp, #16]
 800ed28:	4639      	mov	r1, r7
 800ed2a:	4650      	mov	r0, sl
 800ed2c:	f000 ff66 	bl	800fbfc <uxr_get_input_reliable_stream>
 800ed30:	4680      	mov	r8, r0
 800ed32:	b348      	cbz	r0, 800ed88 <uxr_create_session+0x168>
 800ed34:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ed36:	9205      	str	r2, [sp, #20]
 800ed38:	a81a      	add	r0, sp, #104	@ 0x68
 800ed3a:	f7fe fd4b 	bl	800d7d4 <ucdr_buffer_remaining>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	f10d 0019 	add.w	r0, sp, #25
 800ed44:	9000      	str	r0, [sp, #0]
 800ed46:	9a05      	ldr	r2, [sp, #20]
 800ed48:	4649      	mov	r1, r9
 800ed4a:	4640      	mov	r0, r8
 800ed4c:	f006 fb7e 	bl	801544c <uxr_receive_reliable_message>
 800ed50:	b1d0      	cbz	r0, 800ed88 <uxr_create_session+0x168>
 800ed52:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d038      	beq.n	800edcc <uxr_create_session+0x1ac>
 800ed5a:	9e04      	ldr	r6, [sp, #16]
 800ed5c:	e00a      	b.n	800ed74 <uxr_create_session+0x154>
 800ed5e:	f04f 0302 	mov.w	r3, #2
 800ed62:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800ed66:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800ed6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed70:	f7ff fa90 	bl	800e294 <read_submessage_list>
 800ed74:	a922      	add	r1, sp, #136	@ 0x88
 800ed76:	2204      	movs	r2, #4
 800ed78:	4640      	mov	r0, r8
 800ed7a:	f006 fbe7 	bl	801554c <uxr_next_input_reliable_buffer_available>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	a922      	add	r1, sp, #136	@ 0x88
 800ed82:	4620      	mov	r0, r4
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1ea      	bne.n	800ed5e <uxr_create_session+0x13e>
 800ed88:	9904      	ldr	r1, [sp, #16]
 800ed8a:	463a      	mov	r2, r7
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f7ff f8fb 	bl	800df88 <write_submessage_acknack.isra.0>
 800ed92:	e779      	b.n	800ec88 <uxr_create_session+0x68>
 800ed94:	4639      	mov	r1, r7
 800ed96:	4650      	mov	r0, sl
 800ed98:	f000 ff26 	bl	800fbe8 <uxr_get_input_best_effort_stream>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	f43f af73 	beq.w	800ec88 <uxr_create_session+0x68>
 800eda2:	4649      	mov	r1, r9
 800eda4:	f006 fabe 	bl	8015324 <uxr_receive_best_effort_message>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	f43f af6d 	beq.w	800ec88 <uxr_create_session+0x68>
 800edae:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800edb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800edb4:	a91a      	add	r1, sp, #104	@ 0x68
 800edb6:	4620      	mov	r0, r4
 800edb8:	f7ff fa6c 	bl	800e294 <read_submessage_list>
 800edbc:	e764      	b.n	800ec88 <uxr_create_session+0x68>
 800edbe:	4650      	mov	r0, sl
 800edc0:	f000 fe62 	bl	800fa88 <uxr_reset_stream_storage>
 800edc4:	2001      	movs	r0, #1
 800edc6:	b02b      	add	sp, #172	@ 0xac
 800edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edcc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800edd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800edd2:	a91a      	add	r1, sp, #104	@ 0x68
 800edd4:	4620      	mov	r0, r4
 800edd6:	f7ff fa5d 	bl	800e294 <read_submessage_list>
 800edda:	e7be      	b.n	800ed5a <uxr_create_session+0x13a>

0800eddc <uxr_prepare_stream_to_write_submessage>:
 800eddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ede0:	b082      	sub	sp, #8
 800ede2:	4682      	mov	sl, r0
 800ede4:	4610      	mov	r0, r2
 800ede6:	4615      	mov	r5, r2
 800ede8:	461e      	mov	r6, r3
 800edea:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800edee:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800edf2:	9101      	str	r1, [sp, #4]
 800edf4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800edf8:	f000 ff60 	bl	800fcbc <uxr_submessage_padding>
 800edfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee00:	f105 0904 	add.w	r9, r5, #4
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	4481      	add	r9, r0
 800ee08:	d01d      	beq.n	800ee46 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d116      	bne.n	800ee3c <uxr_prepare_stream_to_write_submessage+0x60>
 800ee0e:	4621      	mov	r1, r4
 800ee10:	f10a 0008 	add.w	r0, sl, #8
 800ee14:	f000 fede 	bl	800fbd4 <uxr_get_output_reliable_stream>
 800ee18:	4604      	mov	r4, r0
 800ee1a:	b158      	cbz	r0, 800ee34 <uxr_prepare_stream_to_write_submessage+0x58>
 800ee1c:	4649      	mov	r1, r9
 800ee1e:	4632      	mov	r2, r6
 800ee20:	f006 fd50 	bl	80158c4 <uxr_prepare_reliable_buffer_to_write>
 800ee24:	4604      	mov	r4, r0
 800ee26:	b12c      	cbz	r4, 800ee34 <uxr_prepare_stream_to_write_submessage+0x58>
 800ee28:	4643      	mov	r3, r8
 800ee2a:	b2aa      	uxth	r2, r5
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	4630      	mov	r0, r6
 800ee30:	f000 ff04 	bl	800fc3c <uxr_buffer_submessage_header>
 800ee34:	4620      	mov	r0, r4
 800ee36:	b002      	add	sp, #8
 800ee38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3c:	2400      	movs	r4, #0
 800ee3e:	4620      	mov	r0, r4
 800ee40:	b002      	add	sp, #8
 800ee42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee46:	4621      	mov	r1, r4
 800ee48:	f10a 0008 	add.w	r0, sl, #8
 800ee4c:	f000 feba 	bl	800fbc4 <uxr_get_output_best_effort_stream>
 800ee50:	4604      	mov	r4, r0
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d0ee      	beq.n	800ee34 <uxr_prepare_stream_to_write_submessage+0x58>
 800ee56:	4649      	mov	r1, r9
 800ee58:	4632      	mov	r2, r6
 800ee5a:	f006 fc63 	bl	8015724 <uxr_prepare_best_effort_buffer_to_write>
 800ee5e:	4604      	mov	r4, r0
 800ee60:	e7e1      	b.n	800ee26 <uxr_prepare_stream_to_write_submessage+0x4a>
 800ee62:	bf00      	nop

0800ee64 <uxr_init_session_info>:
 800ee64:	0e13      	lsrs	r3, r2, #24
 800ee66:	7043      	strb	r3, [r0, #1]
 800ee68:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800ee6c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ee70:	7001      	strb	r1, [r0, #0]
 800ee72:	70c3      	strb	r3, [r0, #3]
 800ee74:	2109      	movs	r1, #9
 800ee76:	23ff      	movs	r3, #255	@ 0xff
 800ee78:	f880 c002 	strb.w	ip, [r0, #2]
 800ee7c:	7102      	strb	r2, [r0, #4]
 800ee7e:	80c1      	strh	r1, [r0, #6]
 800ee80:	7143      	strb	r3, [r0, #5]
 800ee82:	4770      	bx	lr

0800ee84 <uxr_buffer_create_session>:
 800ee84:	b530      	push	{r4, r5, lr}
 800ee86:	b089      	sub	sp, #36	@ 0x24
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4d12      	ldr	r5, [pc, #72]	@ (800eed4 <uxr_buffer_create_session+0x50>)
 800ee8c:	9307      	str	r3, [sp, #28]
 800ee8e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ee92:	2201      	movs	r2, #1
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	80c2      	strh	r2, [r0, #6]
 800ee98:	f88d 2004 	strb.w	r2, [sp, #4]
 800ee9c:	682a      	ldr	r2, [r5, #0]
 800ee9e:	9200      	str	r2, [sp, #0]
 800eea0:	88aa      	ldrh	r2, [r5, #4]
 800eea2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800eea6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800eeaa:	9202      	str	r2, [sp, #8]
 800eeac:	460c      	mov	r4, r1
 800eeae:	7802      	ldrb	r2, [r0, #0]
 800eeb0:	9303      	str	r3, [sp, #12]
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	f88d 200c 	strb.w	r2, [sp, #12]
 800eeb8:	4620      	mov	r0, r4
 800eeba:	2210      	movs	r2, #16
 800eebc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800eec0:	9306      	str	r3, [sp, #24]
 800eec2:	f000 febb 	bl	800fc3c <uxr_buffer_submessage_header>
 800eec6:	4669      	mov	r1, sp
 800eec8:	4620      	mov	r0, r4
 800eeca:	f001 fe13 	bl	8010af4 <uxr_serialize_CREATE_CLIENT_Payload>
 800eece:	b009      	add	sp, #36	@ 0x24
 800eed0:	bd30      	pop	{r4, r5, pc}
 800eed2:	bf00      	nop
 800eed4:	08017d0c 	.word	0x08017d0c

0800eed8 <uxr_buffer_delete_session>:
 800eed8:	b510      	push	{r4, lr}
 800eeda:	4b0c      	ldr	r3, [pc, #48]	@ (800ef0c <uxr_buffer_delete_session+0x34>)
 800eedc:	b082      	sub	sp, #8
 800eede:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800eee2:	f8ad c006 	strh.w	ip, [sp, #6]
 800eee6:	460c      	mov	r4, r1
 800eee8:	2202      	movs	r2, #2
 800eeea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eeee:	80c2      	strh	r2, [r0, #6]
 800eef0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800eef4:	2204      	movs	r2, #4
 800eef6:	2300      	movs	r3, #0
 800eef8:	2103      	movs	r1, #3
 800eefa:	4620      	mov	r0, r4
 800eefc:	f000 fe9e 	bl	800fc3c <uxr_buffer_submessage_header>
 800ef00:	a901      	add	r1, sp, #4
 800ef02:	4620      	mov	r0, r4
 800ef04:	f001 fe9c 	bl	8010c40 <uxr_serialize_DELETE_Payload>
 800ef08:	b002      	add	sp, #8
 800ef0a:	bd10      	pop	{r4, pc}
 800ef0c:	08017d0c 	.word	0x08017d0c

0800ef10 <uxr_read_create_session_status>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	4604      	mov	r4, r0
 800ef16:	4608      	mov	r0, r1
 800ef18:	a901      	add	r1, sp, #4
 800ef1a:	f001 fea1 	bl	8010c60 <uxr_deserialize_STATUS_AGENT_Payload>
 800ef1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef22:	7163      	strb	r3, [r4, #5]
 800ef24:	b008      	add	sp, #32
 800ef26:	bd10      	pop	{r4, pc}

0800ef28 <uxr_read_delete_session_status>:
 800ef28:	b510      	push	{r4, lr}
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	b084      	sub	sp, #16
 800ef2e:	4608      	mov	r0, r1
 800ef30:	a902      	add	r1, sp, #8
 800ef32:	f001 fec5 	bl	8010cc0 <uxr_deserialize_STATUS_Payload>
 800ef36:	88e3      	ldrh	r3, [r4, #6]
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d001      	beq.n	800ef40 <uxr_read_delete_session_status+0x18>
 800ef3c:	b004      	add	sp, #16
 800ef3e:	bd10      	pop	{r4, pc}
 800ef40:	f10d 000a 	add.w	r0, sp, #10
 800ef44:	f7fe feb0 	bl	800dca8 <uxr_object_id_from_raw>
 800ef48:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ef4c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ef50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	bf04      	itt	eq
 800ef5a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800ef5e:	7163      	strbeq	r3, [r4, #5]
 800ef60:	b004      	add	sp, #16
 800ef62:	bd10      	pop	{r4, pc}

0800ef64 <uxr_stamp_create_session_header>:
 800ef64:	b510      	push	{r4, lr}
 800ef66:	2208      	movs	r2, #8
 800ef68:	b08a      	sub	sp, #40	@ 0x28
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	eb0d 0002 	add.w	r0, sp, r2
 800ef70:	f7fe fc00 	bl	800d774 <ucdr_init_buffer>
 800ef74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef78:	9400      	str	r4, [sp, #0]
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800ef82:	a802      	add	r0, sp, #8
 800ef84:	f001 f854 	bl	8010030 <uxr_serialize_message_header>
 800ef88:	b00a      	add	sp, #40	@ 0x28
 800ef8a:	bd10      	pop	{r4, pc}

0800ef8c <uxr_stamp_session_header>:
 800ef8c:	b530      	push	{r4, r5, lr}
 800ef8e:	b08d      	sub	sp, #52	@ 0x34
 800ef90:	4604      	mov	r4, r0
 800ef92:	460d      	mov	r5, r1
 800ef94:	9203      	str	r2, [sp, #12]
 800ef96:	4619      	mov	r1, r3
 800ef98:	a804      	add	r0, sp, #16
 800ef9a:	2208      	movs	r2, #8
 800ef9c:	f7fe fbea 	bl	800d774 <ucdr_init_buffer>
 800efa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efa4:	9b03      	ldr	r3, [sp, #12]
 800efa6:	9400      	str	r4, [sp, #0]
 800efa8:	462a      	mov	r2, r5
 800efaa:	a804      	add	r0, sp, #16
 800efac:	f001 f840 	bl	8010030 <uxr_serialize_message_header>
 800efb0:	b00d      	add	sp, #52	@ 0x34
 800efb2:	bd30      	pop	{r4, r5, pc}

0800efb4 <uxr_read_session_header>:
 800efb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	4607      	mov	r7, r0
 800efba:	b084      	sub	sp, #16
 800efbc:	4608      	mov	r0, r1
 800efbe:	460c      	mov	r4, r1
 800efc0:	4615      	mov	r5, r2
 800efc2:	461e      	mov	r6, r3
 800efc4:	f7fe fc06 	bl	800d7d4 <ucdr_buffer_remaining>
 800efc8:	2808      	cmp	r0, #8
 800efca:	d803      	bhi.n	800efd4 <uxr_read_session_header+0x20>
 800efcc:	2000      	movs	r0, #0
 800efce:	b004      	add	sp, #16
 800efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd4:	f10d 080c 	add.w	r8, sp, #12
 800efd8:	4633      	mov	r3, r6
 800efda:	462a      	mov	r2, r5
 800efdc:	f8cd 8000 	str.w	r8, [sp]
 800efe0:	4620      	mov	r0, r4
 800efe2:	f10d 010b 	add.w	r1, sp, #11
 800efe6:	f001 f841 	bl	801006c <uxr_deserialize_message_header>
 800efea:	783a      	ldrb	r2, [r7, #0]
 800efec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d1eb      	bne.n	800efcc <uxr_read_session_header+0x18>
 800eff4:	061b      	lsls	r3, r3, #24
 800eff6:	d41c      	bmi.n	800f032 <uxr_read_session_header+0x7e>
 800eff8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800effc:	787b      	ldrb	r3, [r7, #1]
 800effe:	429a      	cmp	r2, r3
 800f000:	d003      	beq.n	800f00a <uxr_read_session_header+0x56>
 800f002:	2001      	movs	r0, #1
 800f004:	f080 0001 	eor.w	r0, r0, #1
 800f008:	e7e1      	b.n	800efce <uxr_read_session_header+0x1a>
 800f00a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f00e:	78bb      	ldrb	r3, [r7, #2]
 800f010:	429a      	cmp	r2, r3
 800f012:	f107 0102 	add.w	r1, r7, #2
 800f016:	d1f4      	bne.n	800f002 <uxr_read_session_header+0x4e>
 800f018:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f01c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f020:	429a      	cmp	r2, r3
 800f022:	d1ee      	bne.n	800f002 <uxr_read_session_header+0x4e>
 800f024:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f028:	784b      	ldrb	r3, [r1, #1]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d1e9      	bne.n	800f002 <uxr_read_session_header+0x4e>
 800f02e:	2000      	movs	r0, #0
 800f030:	e7e8      	b.n	800f004 <uxr_read_session_header+0x50>
 800f032:	2001      	movs	r0, #1
 800f034:	e7cb      	b.n	800efce <uxr_read_session_header+0x1a>
 800f036:	bf00      	nop

0800f038 <uxr_session_header_offset>:
 800f038:	f990 3000 	ldrsb.w	r3, [r0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	bfac      	ite	ge
 800f040:	2008      	movge	r0, #8
 800f042:	2004      	movlt	r0, #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop

0800f048 <uxr_init_base_object_request>:
 800f048:	b510      	push	{r4, lr}
 800f04a:	88c3      	ldrh	r3, [r0, #6]
 800f04c:	b082      	sub	sp, #8
 800f04e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f052:	9101      	str	r1, [sp, #4]
 800f054:	f1a3 010a 	sub.w	r1, r3, #10
 800f058:	b289      	uxth	r1, r1
 800f05a:	42a1      	cmp	r1, r4
 800f05c:	d80e      	bhi.n	800f07c <uxr_init_base_object_request+0x34>
 800f05e:	3301      	adds	r3, #1
 800f060:	b29c      	uxth	r4, r3
 800f062:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f066:	b2db      	uxtb	r3, r3
 800f068:	80c4      	strh	r4, [r0, #6]
 800f06a:	9801      	ldr	r0, [sp, #4]
 800f06c:	7011      	strb	r1, [r2, #0]
 800f06e:	7053      	strb	r3, [r2, #1]
 800f070:	1c91      	adds	r1, r2, #2
 800f072:	f7fe fe2d 	bl	800dcd0 <uxr_object_id_to_raw>
 800f076:	4620      	mov	r0, r4
 800f078:	b002      	add	sp, #8
 800f07a:	bd10      	pop	{r4, pc}
 800f07c:	230a      	movs	r3, #10
 800f07e:	2100      	movs	r1, #0
 800f080:	461c      	mov	r4, r3
 800f082:	e7f1      	b.n	800f068 <uxr_init_base_object_request+0x20>

0800f084 <uxr_parse_base_object_request>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	4604      	mov	r4, r0
 800f088:	3002      	adds	r0, #2
 800f08a:	460d      	mov	r5, r1
 800f08c:	4616      	mov	r6, r2
 800f08e:	f7fe fe0b 	bl	800dca8 <uxr_object_id_from_raw>
 800f092:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f096:	8028      	strh	r0, [r5, #0]
 800f098:	806b      	strh	r3, [r5, #2]
 800f09a:	7822      	ldrb	r2, [r4, #0]
 800f09c:	7863      	ldrb	r3, [r4, #1]
 800f09e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f0a2:	8033      	strh	r3, [r6, #0]
 800f0a4:	bd70      	pop	{r4, r5, r6, pc}
 800f0a6:	bf00      	nop

0800f0a8 <uxr_init_framing_io>:
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	7041      	strb	r1, [r0, #1]
 800f0ac:	7003      	strb	r3, [r0, #0]
 800f0ae:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f0b0:	4770      	bx	lr
 800f0b2:	bf00      	nop

0800f0b4 <uxr_write_framed_msg>:
 800f0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b8:	4617      	mov	r7, r2
 800f0ba:	7842      	ldrb	r2, [r0, #1]
 800f0bc:	b083      	sub	sp, #12
 800f0be:	460e      	mov	r6, r1
 800f0c0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f0c4:	469a      	mov	sl, r3
 800f0c6:	2901      	cmp	r1, #1
 800f0c8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f0d2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f0d6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f0da:	f240 8137 	bls.w	800f34c <uxr_write_framed_msg+0x298>
 800f0de:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f0e2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f0e6:	2901      	cmp	r1, #1
 800f0e8:	f04f 0202 	mov.w	r2, #2
 800f0ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f0f0:	f240 808f 	bls.w	800f212 <uxr_write_framed_msg+0x15e>
 800f0f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0f6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800f0fa:	b2dd      	uxtb	r5, r3
 800f0fc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f100:	2203      	movs	r2, #3
 800f102:	2901      	cmp	r1, #1
 800f104:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f108:	f240 809a 	bls.w	800f240 <uxr_write_framed_msg+0x18c>
 800f10c:	18a1      	adds	r1, r4, r2
 800f10e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f110:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f114:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f118:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f11c:	3201      	adds	r2, #1
 800f11e:	2801      	cmp	r0, #1
 800f120:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f124:	f240 80a0 	bls.w	800f268 <uxr_write_framed_msg+0x1b4>
 800f128:	18a0      	adds	r0, r4, r2
 800f12a:	3201      	adds	r2, #1
 800f12c:	b2d2      	uxtb	r2, r2
 800f12e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f132:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f136:	2b00      	cmp	r3, #0
 800f138:	f000 80a9 	beq.w	800f28e <uxr_write_framed_msg+0x1da>
 800f13c:	f04f 0900 	mov.w	r9, #0
 800f140:	46c8      	mov	r8, r9
 800f142:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f146:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f14a:	2901      	cmp	r1, #1
 800f14c:	f240 80c3 	bls.w	800f2d6 <uxr_write_framed_msg+0x222>
 800f150:	2a29      	cmp	r2, #41	@ 0x29
 800f152:	f200 809f 	bhi.w	800f294 <uxr_write_framed_msg+0x1e0>
 800f156:	18a1      	adds	r1, r4, r2
 800f158:	3201      	adds	r2, #1
 800f15a:	b2d2      	uxtb	r2, r2
 800f15c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800f160:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f164:	ea89 0303 	eor.w	r3, r9, r3
 800f168:	498c      	ldr	r1, [pc, #560]	@ (800f39c <uxr_write_framed_msg+0x2e8>)
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	f108 0801 	add.w	r8, r8, #1
 800f170:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f174:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800f178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f17a:	4543      	cmp	r3, r8
 800f17c:	d8e1      	bhi.n	800f142 <uxr_write_framed_msg+0x8e>
 800f17e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f182:	fa5f f889 	uxtb.w	r8, r9
 800f186:	9301      	str	r3, [sp, #4]
 800f188:	f04f 0900 	mov.w	r9, #0
 800f18c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800f190:	fa5f f18a 	uxtb.w	r1, sl
 800f194:	2901      	cmp	r1, #1
 800f196:	d921      	bls.n	800f1dc <uxr_write_framed_msg+0x128>
 800f198:	2a29      	cmp	r2, #41	@ 0x29
 800f19a:	f240 80af 	bls.w	800f2fc <uxr_write_framed_msg+0x248>
 800f19e:	2500      	movs	r5, #0
 800f1a0:	e000      	b.n	800f1a4 <uxr_write_framed_msg+0xf0>
 800f1a2:	b160      	cbz	r0, 800f1be <uxr_write_framed_msg+0x10a>
 800f1a4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f1a8:	1b52      	subs	r2, r2, r5
 800f1aa:	465b      	mov	r3, fp
 800f1ac:	4421      	add	r1, r4
 800f1ae:	4638      	mov	r0, r7
 800f1b0:	47b0      	blx	r6
 800f1b2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f1b6:	4405      	add	r5, r0
 800f1b8:	4295      	cmp	r5, r2
 800f1ba:	d3f2      	bcc.n	800f1a2 <uxr_write_framed_msg+0xee>
 800f1bc:	d003      	beq.n	800f1c6 <uxr_write_framed_msg+0x112>
 800f1be:	2000      	movs	r0, #0
 800f1c0:	b003      	add	sp, #12
 800f1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c6:	fa5f f18a 	uxtb.w	r1, sl
 800f1ca:	f04f 0300 	mov.w	r3, #0
 800f1ce:	2901      	cmp	r1, #1
 800f1d0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f1d4:	f04f 0200 	mov.w	r2, #0
 800f1d8:	f200 8090 	bhi.w	800f2fc <uxr_write_framed_msg+0x248>
 800f1dc:	1c51      	adds	r1, r2, #1
 800f1de:	b2c9      	uxtb	r1, r1
 800f1e0:	2929      	cmp	r1, #41	@ 0x29
 800f1e2:	d8dc      	bhi.n	800f19e <uxr_write_framed_msg+0xea>
 800f1e4:	18a5      	adds	r5, r4, r2
 800f1e6:	4421      	add	r1, r4
 800f1e8:	3202      	adds	r2, #2
 800f1ea:	f088 0820 	eor.w	r8, r8, #32
 800f1ee:	4648      	mov	r0, r9
 800f1f0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800f1f4:	b2d2      	uxtb	r2, r2
 800f1f6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800f1fa:	f04f 0901 	mov.w	r9, #1
 800f1fe:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f202:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f206:	2800      	cmp	r0, #0
 800f208:	f040 8085 	bne.w	800f316 <uxr_write_framed_msg+0x262>
 800f20c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f210:	e7bc      	b.n	800f18c <uxr_write_framed_msg+0xd8>
 800f212:	4611      	mov	r1, r2
 800f214:	f04f 0c03 	mov.w	ip, #3
 800f218:	2204      	movs	r2, #4
 800f21a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f21c:	4421      	add	r1, r4
 800f21e:	b2dd      	uxtb	r5, r3
 800f220:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800f224:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800f228:	44a4      	add	ip, r4
 800f22a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f22e:	f080 0020 	eor.w	r0, r0, #32
 800f232:	2901      	cmp	r1, #1
 800f234:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800f238:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f23c:	f63f af66 	bhi.w	800f10c <uxr_write_framed_msg+0x58>
 800f240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f242:	18a0      	adds	r0, r4, r2
 800f244:	f085 0520 	eor.w	r5, r5, #32
 800f248:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f24c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f250:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800f254:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800f258:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f25c:	3202      	adds	r2, #2
 800f25e:	2801      	cmp	r0, #1
 800f260:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f264:	f63f af60 	bhi.w	800f128 <uxr_write_framed_msg+0x74>
 800f268:	1c50      	adds	r0, r2, #1
 800f26a:	18a5      	adds	r5, r4, r2
 800f26c:	fa54 f080 	uxtab	r0, r4, r0
 800f270:	3202      	adds	r2, #2
 800f272:	f081 0120 	eor.w	r1, r1, #32
 800f276:	b2d2      	uxtb	r2, r2
 800f278:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f27c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800f280:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f284:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f288:	2b00      	cmp	r3, #0
 800f28a:	f47f af57 	bne.w	800f13c <uxr_write_framed_msg+0x88>
 800f28e:	9301      	str	r3, [sp, #4]
 800f290:	4698      	mov	r8, r3
 800f292:	e779      	b.n	800f188 <uxr_write_framed_msg+0xd4>
 800f294:	2500      	movs	r5, #0
 800f296:	e001      	b.n	800f29c <uxr_write_framed_msg+0x1e8>
 800f298:	2800      	cmp	r0, #0
 800f29a:	d090      	beq.n	800f1be <uxr_write_framed_msg+0x10a>
 800f29c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f2a0:	1b52      	subs	r2, r2, r5
 800f2a2:	465b      	mov	r3, fp
 800f2a4:	4421      	add	r1, r4
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	47b0      	blx	r6
 800f2aa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f2ae:	4405      	add	r5, r0
 800f2b0:	4295      	cmp	r5, r2
 800f2b2:	d3f1      	bcc.n	800f298 <uxr_write_framed_msg+0x1e4>
 800f2b4:	d183      	bne.n	800f1be <uxr_write_framed_msg+0x10a>
 800f2b6:	f04f 0300 	mov.w	r3, #0
 800f2ba:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f2be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2c0:	4543      	cmp	r3, r8
 800f2c2:	d964      	bls.n	800f38e <uxr_write_framed_msg+0x2da>
 800f2c4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f2c8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f2cc:	2901      	cmp	r1, #1
 800f2ce:	f04f 0200 	mov.w	r2, #0
 800f2d2:	f63f af3d 	bhi.w	800f150 <uxr_write_framed_msg+0x9c>
 800f2d6:	1c51      	adds	r1, r2, #1
 800f2d8:	b2c9      	uxtb	r1, r1
 800f2da:	2929      	cmp	r1, #41	@ 0x29
 800f2dc:	d8da      	bhi.n	800f294 <uxr_write_framed_msg+0x1e0>
 800f2de:	18a0      	adds	r0, r4, r2
 800f2e0:	4421      	add	r1, r4
 800f2e2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800f2e6:	3202      	adds	r2, #2
 800f2e8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800f2ec:	b2d2      	uxtb	r2, r2
 800f2ee:	f083 0020 	eor.w	r0, r3, #32
 800f2f2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800f2f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f2fa:	e733      	b.n	800f164 <uxr_write_framed_msg+0xb0>
 800f2fc:	18a1      	adds	r1, r4, r2
 800f2fe:	3201      	adds	r2, #1
 800f300:	4648      	mov	r0, r9
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f308:	f04f 0901 	mov.w	r9, #1
 800f30c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f310:	2800      	cmp	r0, #0
 800f312:	f43f af7b 	beq.w	800f20c <uxr_write_framed_msg+0x158>
 800f316:	2500      	movs	r5, #0
 800f318:	e002      	b.n	800f320 <uxr_write_framed_msg+0x26c>
 800f31a:	2800      	cmp	r0, #0
 800f31c:	f43f af4f 	beq.w	800f1be <uxr_write_framed_msg+0x10a>
 800f320:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f324:	1b52      	subs	r2, r2, r5
 800f326:	465b      	mov	r3, fp
 800f328:	4421      	add	r1, r4
 800f32a:	4638      	mov	r0, r7
 800f32c:	47b0      	blx	r6
 800f32e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f332:	4405      	add	r5, r0
 800f334:	4295      	cmp	r5, r2
 800f336:	d3f0      	bcc.n	800f31a <uxr_write_framed_msg+0x266>
 800f338:	f47f af41 	bne.w	800f1be <uxr_write_framed_msg+0x10a>
 800f33c:	2300      	movs	r3, #0
 800f33e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f342:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f344:	b298      	uxth	r0, r3
 800f346:	b003      	add	sp, #12
 800f348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34c:	217d      	movs	r1, #125	@ 0x7d
 800f34e:	f082 0220 	eor.w	r2, r2, #32
 800f352:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800f356:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f35a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800f35e:	2901      	cmp	r1, #1
 800f360:	f04f 0203 	mov.w	r2, #3
 800f364:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f368:	d804      	bhi.n	800f374 <uxr_write_framed_msg+0x2c0>
 800f36a:	4611      	mov	r1, r2
 800f36c:	f04f 0c04 	mov.w	ip, #4
 800f370:	2205      	movs	r2, #5
 800f372:	e752      	b.n	800f21a <uxr_write_framed_msg+0x166>
 800f374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f376:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800f37a:	b2dd      	uxtb	r5, r3
 800f37c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f380:	2204      	movs	r2, #4
 800f382:	2901      	cmp	r1, #1
 800f384:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f388:	f63f aec0 	bhi.w	800f10c <uxr_write_framed_msg+0x58>
 800f38c:	e758      	b.n	800f240 <uxr_write_framed_msg+0x18c>
 800f38e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f392:	fa5f f889 	uxtb.w	r8, r9
 800f396:	9301      	str	r3, [sp, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	e6f5      	b.n	800f188 <uxr_write_framed_msg+0xd4>
 800f39c:	0801816c 	.word	0x0801816c

0800f3a0 <uxr_framing_read_transport>:
 800f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	461f      	mov	r7, r3
 800f3aa:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f3ae:	4689      	mov	r9, r1
 800f3b0:	4692      	mov	sl, r2
 800f3b2:	f000 fc89 	bl	800fcc8 <uxr_millis>
 800f3b6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f3ba:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f3be:	42b3      	cmp	r3, r6
 800f3c0:	4680      	mov	r8, r0
 800f3c2:	d061      	beq.n	800f488 <uxr_framing_read_transport+0xe8>
 800f3c4:	d81c      	bhi.n	800f400 <uxr_framing_read_transport+0x60>
 800f3c6:	1e75      	subs	r5, r6, #1
 800f3c8:	1aed      	subs	r5, r5, r3
 800f3ca:	b2ed      	uxtb	r5, r5
 800f3cc:	2600      	movs	r6, #0
 800f3ce:	455d      	cmp	r5, fp
 800f3d0:	d81f      	bhi.n	800f412 <uxr_framing_read_transport+0x72>
 800f3d2:	19ab      	adds	r3, r5, r6
 800f3d4:	455b      	cmp	r3, fp
 800f3d6:	bf84      	itt	hi
 800f3d8:	ebab 0605 	subhi.w	r6, fp, r5
 800f3dc:	b2f6      	uxtbhi	r6, r6
 800f3de:	b9ed      	cbnz	r5, 800f41c <uxr_framing_read_transport+0x7c>
 800f3e0:	f04f 0b00 	mov.w	fp, #0
 800f3e4:	f000 fc70 	bl	800fcc8 <uxr_millis>
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	eba0 0808 	sub.w	r8, r0, r8
 800f3ee:	eba3 0308 	sub.w	r3, r3, r8
 800f3f2:	4658      	mov	r0, fp
 800f3f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f3f8:	603b      	str	r3, [r7, #0]
 800f3fa:	b003      	add	sp, #12
 800f3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f400:	2e00      	cmp	r6, #0
 800f402:	d049      	beq.n	800f498 <uxr_framing_read_transport+0xf8>
 800f404:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800f408:	b2ed      	uxtb	r5, r5
 800f40a:	3e01      	subs	r6, #1
 800f40c:	455d      	cmp	r5, fp
 800f40e:	b2f6      	uxtb	r6, r6
 800f410:	d9df      	bls.n	800f3d2 <uxr_framing_read_transport+0x32>
 800f412:	fa5f f58b 	uxtb.w	r5, fp
 800f416:	2600      	movs	r6, #0
 800f418:	2d00      	cmp	r5, #0
 800f41a:	d0e1      	beq.n	800f3e0 <uxr_framing_read_transport+0x40>
 800f41c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f420:	3102      	adds	r1, #2
 800f422:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	4421      	add	r1, r4
 800f42a:	462a      	mov	r2, r5
 800f42c:	4650      	mov	r0, sl
 800f42e:	47c8      	blx	r9
 800f430:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f434:	4a1a      	ldr	r2, [pc, #104]	@ (800f4a0 <uxr_framing_read_transport+0x100>)
 800f436:	4403      	add	r3, r0
 800f438:	0859      	lsrs	r1, r3, #1
 800f43a:	fba2 2101 	umull	r2, r1, r2, r1
 800f43e:	0889      	lsrs	r1, r1, #2
 800f440:	222a      	movs	r2, #42	@ 0x2a
 800f442:	fb02 3111 	mls	r1, r2, r1, r3
 800f446:	4683      	mov	fp, r0
 800f448:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d0c7      	beq.n	800f3e0 <uxr_framing_read_transport+0x40>
 800f450:	42a8      	cmp	r0, r5
 800f452:	d1c7      	bne.n	800f3e4 <uxr_framing_read_transport+0x44>
 800f454:	2e00      	cmp	r6, #0
 800f456:	d0c5      	beq.n	800f3e4 <uxr_framing_read_transport+0x44>
 800f458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	3102      	adds	r1, #2
 800f45e:	4632      	mov	r2, r6
 800f460:	4421      	add	r1, r4
 800f462:	2300      	movs	r3, #0
 800f464:	4650      	mov	r0, sl
 800f466:	47c8      	blx	r9
 800f468:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f46c:	4a0c      	ldr	r2, [pc, #48]	@ (800f4a0 <uxr_framing_read_transport+0x100>)
 800f46e:	180b      	adds	r3, r1, r0
 800f470:	0859      	lsrs	r1, r3, #1
 800f472:	fba2 1201 	umull	r1, r2, r2, r1
 800f476:	0892      	lsrs	r2, r2, #2
 800f478:	212a      	movs	r1, #42	@ 0x2a
 800f47a:	fb01 3312 	mls	r3, r1, r2, r3
 800f47e:	eb00 0b05 	add.w	fp, r0, r5
 800f482:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f486:	e7ad      	b.n	800f3e4 <uxr_framing_read_transport+0x44>
 800f488:	2600      	movs	r6, #0
 800f48a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f48e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f490:	d9bf      	bls.n	800f412 <uxr_framing_read_transport+0x72>
 800f492:	2102      	movs	r1, #2
 800f494:	2529      	movs	r5, #41	@ 0x29
 800f496:	e7c4      	b.n	800f422 <uxr_framing_read_transport+0x82>
 800f498:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f49c:	b2ed      	uxtb	r5, r5
 800f49e:	e796      	b.n	800f3ce <uxr_framing_read_transport+0x2e>
 800f4a0:	30c30c31 	.word	0x30c30c31

0800f4a4 <uxr_read_framed_msg>:
 800f4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a8:	461e      	mov	r6, r3
 800f4aa:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800f4ae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f4b2:	429d      	cmp	r5, r3
 800f4b4:	b083      	sub	sp, #12
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	4688      	mov	r8, r1
 800f4ba:	4691      	mov	r9, r2
 800f4bc:	f000 8188 	beq.w	800f7d0 <uxr_read_framed_msg+0x32c>
 800f4c0:	7823      	ldrb	r3, [r4, #0]
 800f4c2:	4dc1      	ldr	r5, [pc, #772]	@ (800f7c8 <uxr_read_framed_msg+0x324>)
 800f4c4:	4fc1      	ldr	r7, [pc, #772]	@ (800f7cc <uxr_read_framed_msg+0x328>)
 800f4c6:	2b07      	cmp	r3, #7
 800f4c8:	d8fd      	bhi.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f4ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f4ce:	0115      	.short	0x0115
 800f4d0:	00d600f6 	.word	0x00d600f6
 800f4d4:	009000b9 	.word	0x009000b9
 800f4d8:	0030004d 	.word	0x0030004d
 800f4dc:	0008      	.short	0x0008
 800f4de:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f4e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f4e6:	4299      	cmp	r1, r3
 800f4e8:	f000 814a 	beq.w	800f780 <uxr_read_framed_msg+0x2dc>
 800f4ec:	18e2      	adds	r2, r4, r3
 800f4ee:	7892      	ldrb	r2, [r2, #2]
 800f4f0:	2a7d      	cmp	r2, #125	@ 0x7d
 800f4f2:	f000 8199 	beq.w	800f828 <uxr_read_framed_msg+0x384>
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	0858      	lsrs	r0, r3, #1
 800f4fa:	fba5 1000 	umull	r1, r0, r5, r0
 800f4fe:	0880      	lsrs	r0, r0, #2
 800f500:	212a      	movs	r1, #42	@ 0x2a
 800f502:	fb01 3310 	mls	r3, r1, r0, r3
 800f506:	2a7e      	cmp	r2, #126	@ 0x7e
 800f508:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f50c:	f000 8252 	beq.w	800f9b4 <uxr_read_framed_msg+0x510>
 800f510:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f512:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800f514:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f518:	b29b      	uxth	r3, r3
 800f51a:	2200      	movs	r2, #0
 800f51c:	4299      	cmp	r1, r3
 800f51e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f520:	7022      	strb	r2, [r4, #0]
 800f522:	f000 8179 	beq.w	800f818 <uxr_read_framed_msg+0x374>
 800f526:	2000      	movs	r0, #0
 800f528:	b003      	add	sp, #12
 800f52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f532:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f536:	4299      	cmp	r1, r3
 800f538:	f000 8131 	beq.w	800f79e <uxr_read_framed_msg+0x2fa>
 800f53c:	18e2      	adds	r2, r4, r3
 800f53e:	7890      	ldrb	r0, [r2, #2]
 800f540:	287d      	cmp	r0, #125	@ 0x7d
 800f542:	f000 8190 	beq.w	800f866 <uxr_read_framed_msg+0x3c2>
 800f546:	3301      	adds	r3, #1
 800f548:	085a      	lsrs	r2, r3, #1
 800f54a:	fba5 1202 	umull	r1, r2, r5, r2
 800f54e:	0892      	lsrs	r2, r2, #2
 800f550:	212a      	movs	r1, #42	@ 0x2a
 800f552:	fb01 3312 	mls	r3, r1, r2, r3
 800f556:	287e      	cmp	r0, #126	@ 0x7e
 800f558:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f55c:	f000 821a 	beq.w	800f994 <uxr_read_framed_msg+0x4f0>
 800f560:	2307      	movs	r3, #7
 800f562:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f564:	7023      	strb	r3, [r4, #0]
 800f566:	e7ae      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f568:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f56a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f56e:	459e      	cmp	lr, r3
 800f570:	d938      	bls.n	800f5e4 <uxr_read_framed_msg+0x140>
 800f572:	ee07 8a90 	vmov	s15, r8
 800f576:	212a      	movs	r1, #42	@ 0x2a
 800f578:	e020      	b.n	800f5bc <uxr_read_framed_msg+0x118>
 800f57a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f57e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f582:	f000 80d4 	beq.w	800f72e <uxr_read_framed_msg+0x28a>
 800f586:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f58a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f58e:	f000 8219 	beq.w	800f9c4 <uxr_read_framed_msg+0x520>
 800f592:	f806 c003 	strb.w	ip, [r6, r3]
 800f596:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800f59a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f59c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f5a0:	ea8a 000c 	eor.w	r0, sl, ip
 800f5a4:	b2c0      	uxtb	r0, r0
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f5b2:	4573      	cmp	r3, lr
 800f5b4:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f5b6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f5b8:	f080 8120 	bcs.w	800f7fc <uxr_read_framed_msg+0x358>
 800f5bc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f5c0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f5c4:	f100 0c01 	add.w	ip, r0, #1
 800f5c8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f5cc:	fba5 8202 	umull	r8, r2, r5, r2
 800f5d0:	0892      	lsrs	r2, r2, #2
 800f5d2:	4582      	cmp	sl, r0
 800f5d4:	eb04 0b00 	add.w	fp, r4, r0
 800f5d8:	fb01 c212 	mls	r2, r1, r2, ip
 800f5dc:	d1cd      	bne.n	800f57a <uxr_read_framed_msg+0xd6>
 800f5de:	ee17 8a90 	vmov	r8, s15
 800f5e2:	459e      	cmp	lr, r3
 800f5e4:	f040 8111 	bne.w	800f80a <uxr_read_framed_msg+0x366>
 800f5e8:	2306      	movs	r3, #6
 800f5ea:	7023      	strb	r3, [r4, #0]
 800f5ec:	e76b      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f5ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f5f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f5f6:	4298      	cmp	r0, r3
 800f5f8:	f000 80c2 	beq.w	800f780 <uxr_read_framed_msg+0x2dc>
 800f5fc:	18e2      	adds	r2, r4, r3
 800f5fe:	7891      	ldrb	r1, [r2, #2]
 800f600:	297d      	cmp	r1, #125	@ 0x7d
 800f602:	f000 814c 	beq.w	800f89e <uxr_read_framed_msg+0x3fa>
 800f606:	3301      	adds	r3, #1
 800f608:	085a      	lsrs	r2, r3, #1
 800f60a:	fba5 0202 	umull	r0, r2, r5, r2
 800f60e:	0892      	lsrs	r2, r2, #2
 800f610:	202a      	movs	r0, #42	@ 0x2a
 800f612:	fb00 3312 	mls	r3, r0, r2, r3
 800f616:	297e      	cmp	r1, #126	@ 0x7e
 800f618:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f61c:	f000 81ca 	beq.w	800f9b4 <uxr_read_framed_msg+0x510>
 800f620:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f622:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f626:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f628:	b29b      	uxth	r3, r3
 800f62a:	2000      	movs	r0, #0
 800f62c:	428b      	cmp	r3, r1
 800f62e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f630:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f632:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f634:	f240 80df 	bls.w	800f7f6 <uxr_read_framed_msg+0x352>
 800f638:	7020      	strb	r0, [r4, #0]
 800f63a:	b003      	add	sp, #12
 800f63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f640:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f644:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f648:	4299      	cmp	r1, r3
 800f64a:	f000 80a8 	beq.w	800f79e <uxr_read_framed_msg+0x2fa>
 800f64e:	18e2      	adds	r2, r4, r3
 800f650:	7890      	ldrb	r0, [r2, #2]
 800f652:	287d      	cmp	r0, #125	@ 0x7d
 800f654:	f000 8164 	beq.w	800f920 <uxr_read_framed_msg+0x47c>
 800f658:	3301      	adds	r3, #1
 800f65a:	085a      	lsrs	r2, r3, #1
 800f65c:	fba5 1202 	umull	r1, r2, r5, r2
 800f660:	0892      	lsrs	r2, r2, #2
 800f662:	212a      	movs	r1, #42	@ 0x2a
 800f664:	fb01 3312 	mls	r3, r1, r2, r3
 800f668:	287e      	cmp	r0, #126	@ 0x7e
 800f66a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f66e:	f000 8191 	beq.w	800f994 <uxr_read_framed_msg+0x4f0>
 800f672:	2304      	movs	r3, #4
 800f674:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f676:	7023      	strb	r3, [r4, #0]
 800f678:	e725      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f67a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f67e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f682:	4290      	cmp	r0, r2
 800f684:	f000 80b3 	beq.w	800f7ee <uxr_read_framed_msg+0x34a>
 800f688:	18a3      	adds	r3, r4, r2
 800f68a:	7899      	ldrb	r1, [r3, #2]
 800f68c:	297d      	cmp	r1, #125	@ 0x7d
 800f68e:	f000 8164 	beq.w	800f95a <uxr_read_framed_msg+0x4b6>
 800f692:	3201      	adds	r2, #1
 800f694:	0850      	lsrs	r0, r2, #1
 800f696:	fba5 3000 	umull	r3, r0, r5, r0
 800f69a:	0880      	lsrs	r0, r0, #2
 800f69c:	232a      	movs	r3, #42	@ 0x2a
 800f69e:	fb03 2210 	mls	r2, r3, r0, r2
 800f6a2:	297e      	cmp	r1, #126	@ 0x7e
 800f6a4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f6a8:	f000 8188 	beq.w	800f9bc <uxr_read_framed_msg+0x518>
 800f6ac:	7863      	ldrb	r3, [r4, #1]
 800f6ae:	428b      	cmp	r3, r1
 800f6b0:	bf0c      	ite	eq
 800f6b2:	2303      	moveq	r3, #3
 800f6b4:	2300      	movne	r3, #0
 800f6b6:	7023      	strb	r3, [r4, #0]
 800f6b8:	e705      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f6ba:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f6be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	4299      	cmp	r1, r3
 800f6c6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f6ca:	d06c      	beq.n	800f7a6 <uxr_read_framed_msg+0x302>
 800f6cc:	18e2      	adds	r2, r4, r3
 800f6ce:	7890      	ldrb	r0, [r2, #2]
 800f6d0:	287d      	cmp	r0, #125	@ 0x7d
 800f6d2:	f000 8101 	beq.w	800f8d8 <uxr_read_framed_msg+0x434>
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	085a      	lsrs	r2, r3, #1
 800f6da:	fba5 1202 	umull	r1, r2, r5, r2
 800f6de:	0892      	lsrs	r2, r2, #2
 800f6e0:	212a      	movs	r1, #42	@ 0x2a
 800f6e2:	fb01 3312 	mls	r3, r1, r2, r3
 800f6e6:	287e      	cmp	r0, #126	@ 0x7e
 800f6e8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f6ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f6f0:	d059      	beq.n	800f7a6 <uxr_read_framed_msg+0x302>
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	7023      	strb	r3, [r4, #0]
 800f6f6:	e6e6      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f6f8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f6fc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f700:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800f704:	1c51      	adds	r1, r2, #1
 800f706:	084b      	lsrs	r3, r1, #1
 800f708:	fba5 c303 	umull	ip, r3, r5, r3
 800f70c:	089b      	lsrs	r3, r3, #2
 800f70e:	fb0e 1313 	mls	r3, lr, r3, r1
 800f712:	4592      	cmp	sl, r2
 800f714:	eb04 0002 	add.w	r0, r4, r2
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	f43f af04 	beq.w	800f526 <uxr_read_framed_msg+0x82>
 800f71e:	7883      	ldrb	r3, [r0, #2]
 800f720:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f724:	2b7e      	cmp	r3, #126	@ 0x7e
 800f726:	d1ed      	bne.n	800f704 <uxr_read_framed_msg+0x260>
 800f728:	2301      	movs	r3, #1
 800f72a:	7023      	strb	r3, [r4, #0]
 800f72c:	e6cb      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f72e:	f100 0c01 	add.w	ip, r0, #1
 800f732:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f736:	fba5 8202 	umull	r8, r2, r5, r2
 800f73a:	0892      	lsrs	r2, r2, #2
 800f73c:	fb01 c212 	mls	r2, r1, r2, ip
 800f740:	eb04 0c02 	add.w	ip, r4, r2
 800f744:	b2d2      	uxtb	r2, r2
 800f746:	4592      	cmp	sl, r2
 800f748:	f100 0002 	add.w	r0, r0, #2
 800f74c:	f43f af47 	beq.w	800f5de <uxr_read_framed_msg+0x13a>
 800f750:	0842      	lsrs	r2, r0, #1
 800f752:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f756:	fba5 8202 	umull	r8, r2, r5, r2
 800f75a:	0892      	lsrs	r2, r2, #2
 800f75c:	fb01 0012 	mls	r0, r1, r2, r0
 800f760:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800f764:	f08a 0c20 	eor.w	ip, sl, #32
 800f768:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f76c:	f47f af11 	bne.w	800f592 <uxr_read_framed_msg+0xee>
 800f770:	459e      	cmp	lr, r3
 800f772:	ee17 8a90 	vmov	r8, s15
 800f776:	f43f af37 	beq.w	800f5e8 <uxr_read_framed_msg+0x144>
 800f77a:	2301      	movs	r3, #1
 800f77c:	7023      	strb	r3, [r4, #0]
 800f77e:	e6a2      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	2301      	movs	r3, #1
 800f786:	9301      	str	r3, [sp, #4]
 800f788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f78a:	464a      	mov	r2, r9
 800f78c:	4641      	mov	r1, r8
 800f78e:	4620      	mov	r0, r4
 800f790:	f7ff fe06 	bl	800f3a0 <uxr_framing_read_transport>
 800f794:	2800      	cmp	r0, #0
 800f796:	f43f aec6 	beq.w	800f526 <uxr_read_framed_msg+0x82>
 800f79a:	7823      	ldrb	r3, [r4, #0]
 800f79c:	e693      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f79e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	2302      	movs	r3, #2
 800f7a4:	e7ef      	b.n	800f786 <uxr_read_framed_msg+0x2e2>
 800f7a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	2304      	movs	r3, #4
 800f7ac:	9301      	str	r3, [sp, #4]
 800f7ae:	464a      	mov	r2, r9
 800f7b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7b2:	4641      	mov	r1, r8
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f7ff fdf3 	bl	800f3a0 <uxr_framing_read_transport>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d1ed      	bne.n	800f79a <uxr_read_framed_msg+0x2f6>
 800f7be:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f7c2:	2b7e      	cmp	r3, #126	@ 0x7e
 800f7c4:	d0e9      	beq.n	800f79a <uxr_read_framed_msg+0x2f6>
 800f7c6:	e6ae      	b.n	800f526 <uxr_read_framed_msg+0x82>
 800f7c8:	30c30c31 	.word	0x30c30c31
 800f7cc:	0801816c 	.word	0x0801816c
 800f7d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	2305      	movs	r3, #5
 800f7d6:	9301      	str	r3, [sp, #4]
 800f7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7da:	f7ff fde1 	bl	800f3a0 <uxr_framing_read_transport>
 800f7de:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f7e2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	f43f ae9d 	beq.w	800f526 <uxr_read_framed_msg+0x82>
 800f7ec:	e668      	b.n	800f4c0 <uxr_read_framed_msg+0x1c>
 800f7ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7f0:	9300      	str	r3, [sp, #0]
 800f7f2:	2303      	movs	r3, #3
 800f7f4:	e7c7      	b.n	800f786 <uxr_read_framed_msg+0x2e2>
 800f7f6:	2305      	movs	r3, #5
 800f7f8:	7023      	strb	r3, [r4, #0]
 800f7fa:	e664      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f7fc:	ee17 8a90 	vmov	r8, s15
 800f800:	f43f aef2 	beq.w	800f5e8 <uxr_read_framed_msg+0x144>
 800f804:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f808:	d08e      	beq.n	800f728 <uxr_read_framed_msg+0x284>
 800f80a:	ebae 0303 	sub.w	r3, lr, r3
 800f80e:	3302      	adds	r3, #2
 800f810:	9301      	str	r3, [sp, #4]
 800f812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	e7b7      	b.n	800f788 <uxr_read_framed_msg+0x2e4>
 800f818:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f81a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f81e:	7013      	strb	r3, [r2, #0]
 800f820:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f822:	b003      	add	sp, #12
 800f824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f828:	f103 0c01 	add.w	ip, r3, #1
 800f82c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f830:	fba5 0202 	umull	r0, r2, r5, r2
 800f834:	0892      	lsrs	r2, r2, #2
 800f836:	202a      	movs	r0, #42	@ 0x2a
 800f838:	fb00 c212 	mls	r2, r0, r2, ip
 800f83c:	fa5f fc82 	uxtb.w	ip, r2
 800f840:	4561      	cmp	r1, ip
 800f842:	d09d      	beq.n	800f780 <uxr_read_framed_msg+0x2dc>
 800f844:	3302      	adds	r3, #2
 800f846:	4422      	add	r2, r4
 800f848:	0859      	lsrs	r1, r3, #1
 800f84a:	7892      	ldrb	r2, [r2, #2]
 800f84c:	fba5 c101 	umull	ip, r1, r5, r1
 800f850:	0889      	lsrs	r1, r1, #2
 800f852:	fb00 3311 	mls	r3, r0, r1, r3
 800f856:	2a7e      	cmp	r2, #126	@ 0x7e
 800f858:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f85c:	f000 80aa 	beq.w	800f9b4 <uxr_read_framed_msg+0x510>
 800f860:	f082 0220 	eor.w	r2, r2, #32
 800f864:	e654      	b.n	800f510 <uxr_read_framed_msg+0x6c>
 800f866:	1c58      	adds	r0, r3, #1
 800f868:	0842      	lsrs	r2, r0, #1
 800f86a:	fba5 c202 	umull	ip, r2, r5, r2
 800f86e:	0892      	lsrs	r2, r2, #2
 800f870:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f874:	fb0c 0212 	mls	r2, ip, r2, r0
 800f878:	b2d0      	uxtb	r0, r2
 800f87a:	4281      	cmp	r1, r0
 800f87c:	d08f      	beq.n	800f79e <uxr_read_framed_msg+0x2fa>
 800f87e:	4422      	add	r2, r4
 800f880:	3302      	adds	r3, #2
 800f882:	7890      	ldrb	r0, [r2, #2]
 800f884:	085a      	lsrs	r2, r3, #1
 800f886:	fba5 1202 	umull	r1, r2, r5, r2
 800f88a:	0892      	lsrs	r2, r2, #2
 800f88c:	fb0c 3312 	mls	r3, ip, r2, r3
 800f890:	287e      	cmp	r0, #126	@ 0x7e
 800f892:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f896:	d07d      	beq.n	800f994 <uxr_read_framed_msg+0x4f0>
 800f898:	f080 0020 	eor.w	r0, r0, #32
 800f89c:	e660      	b.n	800f560 <uxr_read_framed_msg+0xbc>
 800f89e:	1c59      	adds	r1, r3, #1
 800f8a0:	084a      	lsrs	r2, r1, #1
 800f8a2:	fba5 c202 	umull	ip, r2, r5, r2
 800f8a6:	0892      	lsrs	r2, r2, #2
 800f8a8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f8ac:	fb0c 1212 	mls	r2, ip, r2, r1
 800f8b0:	b2d1      	uxtb	r1, r2
 800f8b2:	4288      	cmp	r0, r1
 800f8b4:	f43f af64 	beq.w	800f780 <uxr_read_framed_msg+0x2dc>
 800f8b8:	4422      	add	r2, r4
 800f8ba:	3302      	adds	r3, #2
 800f8bc:	7891      	ldrb	r1, [r2, #2]
 800f8be:	085a      	lsrs	r2, r3, #1
 800f8c0:	fba5 0202 	umull	r0, r2, r5, r2
 800f8c4:	0892      	lsrs	r2, r2, #2
 800f8c6:	fb0c 3312 	mls	r3, ip, r2, r3
 800f8ca:	297e      	cmp	r1, #126	@ 0x7e
 800f8cc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f8d0:	d070      	beq.n	800f9b4 <uxr_read_framed_msg+0x510>
 800f8d2:	f081 0120 	eor.w	r1, r1, #32
 800f8d6:	e6a3      	b.n	800f620 <uxr_read_framed_msg+0x17c>
 800f8d8:	f103 0c01 	add.w	ip, r3, #1
 800f8dc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f8e0:	fba5 0202 	umull	r0, r2, r5, r2
 800f8e4:	0892      	lsrs	r2, r2, #2
 800f8e6:	202a      	movs	r0, #42	@ 0x2a
 800f8e8:	fb00 c212 	mls	r2, r0, r2, ip
 800f8ec:	fa5f fc82 	uxtb.w	ip, r2
 800f8f0:	4561      	cmp	r1, ip
 800f8f2:	f43f af58 	beq.w	800f7a6 <uxr_read_framed_msg+0x302>
 800f8f6:	4422      	add	r2, r4
 800f8f8:	3302      	adds	r3, #2
 800f8fa:	7891      	ldrb	r1, [r2, #2]
 800f8fc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f900:	085a      	lsrs	r2, r3, #1
 800f902:	fba5 c202 	umull	ip, r2, r5, r2
 800f906:	0892      	lsrs	r2, r2, #2
 800f908:	fb00 3312 	mls	r3, r0, r2, r3
 800f90c:	297e      	cmp	r1, #126	@ 0x7e
 800f90e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f912:	f43f af48 	beq.w	800f7a6 <uxr_read_framed_msg+0x302>
 800f916:	f081 0120 	eor.w	r1, r1, #32
 800f91a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f91e:	e6e8      	b.n	800f6f2 <uxr_read_framed_msg+0x24e>
 800f920:	1c58      	adds	r0, r3, #1
 800f922:	0842      	lsrs	r2, r0, #1
 800f924:	fba5 c202 	umull	ip, r2, r5, r2
 800f928:	0892      	lsrs	r2, r2, #2
 800f92a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f92e:	fb0c 0212 	mls	r2, ip, r2, r0
 800f932:	b2d0      	uxtb	r0, r2
 800f934:	4281      	cmp	r1, r0
 800f936:	f43f af32 	beq.w	800f79e <uxr_read_framed_msg+0x2fa>
 800f93a:	4422      	add	r2, r4
 800f93c:	3302      	adds	r3, #2
 800f93e:	7890      	ldrb	r0, [r2, #2]
 800f940:	085a      	lsrs	r2, r3, #1
 800f942:	fba5 1202 	umull	r1, r2, r5, r2
 800f946:	0892      	lsrs	r2, r2, #2
 800f948:	fb0c 3312 	mls	r3, ip, r2, r3
 800f94c:	287e      	cmp	r0, #126	@ 0x7e
 800f94e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f952:	d01f      	beq.n	800f994 <uxr_read_framed_msg+0x4f0>
 800f954:	f080 0020 	eor.w	r0, r0, #32
 800f958:	e68b      	b.n	800f672 <uxr_read_framed_msg+0x1ce>
 800f95a:	1c51      	adds	r1, r2, #1
 800f95c:	084b      	lsrs	r3, r1, #1
 800f95e:	fba5 c303 	umull	ip, r3, r5, r3
 800f962:	089b      	lsrs	r3, r3, #2
 800f964:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f968:	fb0c 1313 	mls	r3, ip, r3, r1
 800f96c:	b2d9      	uxtb	r1, r3
 800f96e:	4288      	cmp	r0, r1
 800f970:	f43f af3d 	beq.w	800f7ee <uxr_read_framed_msg+0x34a>
 800f974:	3202      	adds	r2, #2
 800f976:	4423      	add	r3, r4
 800f978:	0850      	lsrs	r0, r2, #1
 800f97a:	789b      	ldrb	r3, [r3, #2]
 800f97c:	fba5 1000 	umull	r1, r0, r5, r0
 800f980:	0880      	lsrs	r0, r0, #2
 800f982:	fb0c 2210 	mls	r2, ip, r0, r2
 800f986:	2b7e      	cmp	r3, #126	@ 0x7e
 800f988:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f98c:	d016      	beq.n	800f9bc <uxr_read_framed_msg+0x518>
 800f98e:	f083 0120 	eor.w	r1, r3, #32
 800f992:	e68b      	b.n	800f6ac <uxr_read_framed_msg+0x208>
 800f994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	2302      	movs	r3, #2
 800f99a:	9301      	str	r3, [sp, #4]
 800f99c:	464a      	mov	r2, r9
 800f99e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9a0:	4641      	mov	r1, r8
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f7ff fcfc 	bl	800f3a0 <uxr_framing_read_transport>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	f47f aef6 	bne.w	800f79a <uxr_read_framed_msg+0x2f6>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	7023      	strb	r3, [r4, #0]
 800f9b2:	e588      	b.n	800f4c6 <uxr_read_framed_msg+0x22>
 800f9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e7ee      	b.n	800f99a <uxr_read_framed_msg+0x4f6>
 800f9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	e7ea      	b.n	800f99a <uxr_read_framed_msg+0x4f6>
 800f9c4:	ee17 8a90 	vmov	r8, s15
 800f9c8:	e6ae      	b.n	800f728 <uxr_read_framed_msg+0x284>
 800f9ca:	bf00      	nop

0800f9cc <uxr_stream_id>:
 800f9cc:	2901      	cmp	r1, #1
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	d01d      	beq.n	800fa0e <uxr_stream_id+0x42>
 800f9d2:	2902      	cmp	r1, #2
 800f9d4:	f04f 0c00 	mov.w	ip, #0
 800f9d8:	d01e      	beq.n	800fa18 <uxr_stream_id+0x4c>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f36c 0307 	bfi	r3, ip, #0, #8
 800f9e0:	f360 230f 	bfi	r3, r0, #8, #8
 800f9e4:	f361 4317 	bfi	r3, r1, #16, #8
 800f9e8:	f362 631f 	bfi	r3, r2, #24, #8
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f362 0007 	bfi	r0, r2, #0, #8
 800f9f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f9f8:	f362 200f 	bfi	r0, r2, #8, #8
 800f9fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa00:	f362 4017 	bfi	r0, r2, #16, #8
 800fa04:	0e1b      	lsrs	r3, r3, #24
 800fa06:	f363 601f 	bfi	r0, r3, #24, #8
 800fa0a:	b002      	add	sp, #8
 800fa0c:	4770      	bx	lr
 800fa0e:	f100 0c01 	add.w	ip, r0, #1
 800fa12:	fa5f fc8c 	uxtb.w	ip, ip
 800fa16:	e7e0      	b.n	800f9da <uxr_stream_id+0xe>
 800fa18:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800fa1c:	e7dd      	b.n	800f9da <uxr_stream_id+0xe>
 800fa1e:	bf00      	nop

0800fa20 <uxr_stream_id_from_raw>:
 800fa20:	b082      	sub	sp, #8
 800fa22:	b130      	cbz	r0, 800fa32 <uxr_stream_id_from_raw+0x12>
 800fa24:	0603      	lsls	r3, r0, #24
 800fa26:	d420      	bmi.n	800fa6a <uxr_stream_id_from_raw+0x4a>
 800fa28:	1e42      	subs	r2, r0, #1
 800fa2a:	b2d2      	uxtb	r2, r2
 800fa2c:	f04f 0c01 	mov.w	ip, #1
 800fa30:	e001      	b.n	800fa36 <uxr_stream_id_from_raw+0x16>
 800fa32:	4684      	mov	ip, r0
 800fa34:	4602      	mov	r2, r0
 800fa36:	2300      	movs	r3, #0
 800fa38:	f360 0307 	bfi	r3, r0, #0, #8
 800fa3c:	f362 230f 	bfi	r3, r2, #8, #8
 800fa40:	f36c 4317 	bfi	r3, ip, #16, #8
 800fa44:	f361 631f 	bfi	r3, r1, #24, #8
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	f362 0007 	bfi	r0, r2, #0, #8
 800fa50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fa54:	f362 200f 	bfi	r0, r2, #8, #8
 800fa58:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa5c:	f362 4017 	bfi	r0, r2, #16, #8
 800fa60:	0e1b      	lsrs	r3, r3, #24
 800fa62:	f363 601f 	bfi	r0, r3, #24, #8
 800fa66:	b002      	add	sp, #8
 800fa68:	4770      	bx	lr
 800fa6a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800fa6e:	f04f 0c02 	mov.w	ip, #2
 800fa72:	e7e0      	b.n	800fa36 <uxr_stream_id_from_raw+0x16>

0800fa74 <uxr_init_stream_storage>:
 800fa74:	2300      	movs	r3, #0
 800fa76:	7403      	strb	r3, [r0, #16]
 800fa78:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800fa7c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800fa80:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop

0800fa88 <uxr_reset_stream_storage>:
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	7c03      	ldrb	r3, [r0, #16]
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	b153      	cbz	r3, 800faa6 <uxr_reset_stream_storage+0x1e>
 800fa90:	4606      	mov	r6, r0
 800fa92:	2500      	movs	r5, #0
 800fa94:	4630      	mov	r0, r6
 800fa96:	f005 fe3f 	bl	8015718 <uxr_reset_output_best_effort_stream>
 800fa9a:	7c23      	ldrb	r3, [r4, #16]
 800fa9c:	3501      	adds	r5, #1
 800fa9e:	42ab      	cmp	r3, r5
 800faa0:	f106 0610 	add.w	r6, r6, #16
 800faa4:	d8f6      	bhi.n	800fa94 <uxr_reset_stream_storage+0xc>
 800faa6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800faaa:	b163      	cbz	r3, 800fac6 <uxr_reset_stream_storage+0x3e>
 800faac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fab0:	2500      	movs	r5, #0
 800fab2:	4630      	mov	r0, r6
 800fab4:	f005 fc32 	bl	801531c <uxr_reset_input_best_effort_stream>
 800fab8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fabc:	3501      	adds	r5, #1
 800fabe:	42ab      	cmp	r3, r5
 800fac0:	f106 0602 	add.w	r6, r6, #2
 800fac4:	d8f5      	bhi.n	800fab2 <uxr_reset_stream_storage+0x2a>
 800fac6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800faca:	b163      	cbz	r3, 800fae6 <uxr_reset_stream_storage+0x5e>
 800facc:	f104 0618 	add.w	r6, r4, #24
 800fad0:	2500      	movs	r5, #0
 800fad2:	4630      	mov	r0, r6
 800fad4:	f005 fecc 	bl	8015870 <uxr_reset_output_reliable_stream>
 800fad8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fadc:	3501      	adds	r5, #1
 800fade:	42ab      	cmp	r3, r5
 800fae0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800fae4:	d8f5      	bhi.n	800fad2 <uxr_reset_stream_storage+0x4a>
 800fae6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800faea:	b163      	cbz	r3, 800fb06 <uxr_reset_stream_storage+0x7e>
 800faec:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800faf0:	2500      	movs	r5, #0
 800faf2:	4630      	mov	r0, r6
 800faf4:	f005 fc86 	bl	8015404 <uxr_reset_input_reliable_stream>
 800faf8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fafc:	3501      	adds	r5, #1
 800fafe:	42ab      	cmp	r3, r5
 800fb00:	f106 0618 	add.w	r6, r6, #24
 800fb04:	d8f5      	bhi.n	800faf2 <uxr_reset_stream_storage+0x6a>
 800fb06:	bd70      	pop	{r4, r5, r6, pc}

0800fb08 <uxr_add_output_best_effort_buffer>:
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	7c04      	ldrb	r4, [r0, #16]
 800fb0c:	f104 0c01 	add.w	ip, r4, #1
 800fb10:	b082      	sub	sp, #8
 800fb12:	f880 c010 	strb.w	ip, [r0, #16]
 800fb16:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800fb1a:	f005 fdf3 	bl	8015704 <uxr_init_output_best_effort_stream>
 800fb1e:	2201      	movs	r2, #1
 800fb20:	4611      	mov	r1, r2
 800fb22:	4620      	mov	r0, r4
 800fb24:	b002      	add	sp, #8
 800fb26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb2a:	f7ff bf4f 	b.w	800f9cc <uxr_stream_id>
 800fb2e:	bf00      	nop

0800fb30 <uxr_add_output_reliable_buffer>:
 800fb30:	b510      	push	{r4, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	4684      	mov	ip, r0
 800fb36:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fb3a:	9000      	str	r0, [sp, #0]
 800fb3c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800fb40:	2028      	movs	r0, #40	@ 0x28
 800fb42:	fb00 c004 	mla	r0, r0, r4, ip
 800fb46:	f104 0e01 	add.w	lr, r4, #1
 800fb4a:	3018      	adds	r0, #24
 800fb4c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800fb50:	f005 fe56 	bl	8015800 <uxr_init_output_reliable_stream>
 800fb54:	2201      	movs	r2, #1
 800fb56:	2102      	movs	r1, #2
 800fb58:	4620      	mov	r0, r4
 800fb5a:	b004      	add	sp, #16
 800fb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb60:	f7ff bf34 	b.w	800f9cc <uxr_stream_id>

0800fb64 <uxr_add_input_best_effort_buffer>:
 800fb64:	b510      	push	{r4, lr}
 800fb66:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	1c62      	adds	r2, r4, #1
 800fb6e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800fb72:	b082      	sub	sp, #8
 800fb74:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800fb78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb7c:	f005 fbca 	bl	8015314 <uxr_init_input_best_effort_stream>
 800fb80:	2200      	movs	r2, #0
 800fb82:	2101      	movs	r1, #1
 800fb84:	4620      	mov	r0, r4
 800fb86:	b002      	add	sp, #8
 800fb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb8c:	f7ff bf1e 	b.w	800f9cc <uxr_stream_id>

0800fb90 <uxr_add_input_reliable_buffer>:
 800fb90:	b510      	push	{r4, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	4684      	mov	ip, r0
 800fb96:	9806      	ldr	r0, [sp, #24]
 800fb98:	9000      	str	r0, [sp, #0]
 800fb9a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800fb9e:	2018      	movs	r0, #24
 800fba0:	fb00 c004 	mla	r0, r0, r4, ip
 800fba4:	f104 0e01 	add.w	lr, r4, #1
 800fba8:	3048      	adds	r0, #72	@ 0x48
 800fbaa:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800fbae:	f005 fbfd 	bl	80153ac <uxr_init_input_reliable_stream>
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	2102      	movs	r1, #2
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	b004      	add	sp, #16
 800fbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbbe:	f7ff bf05 	b.w	800f9cc <uxr_stream_id>
 800fbc2:	bf00      	nop

0800fbc4 <uxr_get_output_best_effort_stream>:
 800fbc4:	7c03      	ldrb	r3, [r0, #16]
 800fbc6:	428b      	cmp	r3, r1
 800fbc8:	bf8c      	ite	hi
 800fbca:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fbce:	2000      	movls	r0, #0
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop

0800fbd4 <uxr_get_output_reliable_stream>:
 800fbd4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fbd8:	428b      	cmp	r3, r1
 800fbda:	bf83      	ittte	hi
 800fbdc:	2328      	movhi	r3, #40	@ 0x28
 800fbde:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fbe2:	3018      	addhi	r0, #24
 800fbe4:	2000      	movls	r0, #0
 800fbe6:	4770      	bx	lr

0800fbe8 <uxr_get_input_best_effort_stream>:
 800fbe8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fbec:	428b      	cmp	r3, r1
 800fbee:	bf86      	itte	hi
 800fbf0:	3121      	addhi	r1, #33	@ 0x21
 800fbf2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800fbf6:	2000      	movls	r0, #0
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop

0800fbfc <uxr_get_input_reliable_stream>:
 800fbfc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800fc00:	428b      	cmp	r3, r1
 800fc02:	bf83      	ittte	hi
 800fc04:	2318      	movhi	r3, #24
 800fc06:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fc0a:	3048      	addhi	r0, #72	@ 0x48
 800fc0c:	2000      	movls	r0, #0
 800fc0e:	4770      	bx	lr

0800fc10 <uxr_output_streams_confirmed>:
 800fc10:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fc14:	b183      	cbz	r3, 800fc38 <uxr_output_streams_confirmed+0x28>
 800fc16:	b570      	push	{r4, r5, r6, lr}
 800fc18:	4606      	mov	r6, r0
 800fc1a:	f100 0518 	add.w	r5, r0, #24
 800fc1e:	2400      	movs	r4, #0
 800fc20:	e001      	b.n	800fc26 <uxr_output_streams_confirmed+0x16>
 800fc22:	3528      	adds	r5, #40	@ 0x28
 800fc24:	b138      	cbz	r0, 800fc36 <uxr_output_streams_confirmed+0x26>
 800fc26:	4628      	mov	r0, r5
 800fc28:	f006 f892 	bl	8015d50 <uxr_is_output_up_to_date>
 800fc2c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800fc30:	3401      	adds	r4, #1
 800fc32:	42a3      	cmp	r3, r4
 800fc34:	d8f5      	bhi.n	800fc22 <uxr_output_streams_confirmed+0x12>
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
 800fc38:	2001      	movs	r0, #1
 800fc3a:	4770      	bx	lr

0800fc3c <uxr_buffer_submessage_header>:
 800fc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc3e:	4604      	mov	r4, r0
 800fc40:	460e      	mov	r6, r1
 800fc42:	2104      	movs	r1, #4
 800fc44:	4615      	mov	r5, r2
 800fc46:	461f      	mov	r7, r3
 800fc48:	f7fd fdae 	bl	800d7a8 <ucdr_align_to>
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	ea47 0203 	orr.w	r2, r7, r3
 800fc52:	4631      	mov	r1, r6
 800fc54:	7523      	strb	r3, [r4, #20]
 800fc56:	4620      	mov	r0, r4
 800fc58:	462b      	mov	r3, r5
 800fc5a:	f000 fa27 	bl	80100ac <uxr_serialize_submessage_header>
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f7fd fdb8 	bl	800d7d4 <ucdr_buffer_remaining>
 800fc64:	42a8      	cmp	r0, r5
 800fc66:	bf34      	ite	cc
 800fc68:	2000      	movcc	r0, #0
 800fc6a:	2001      	movcs	r0, #1
 800fc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc6e:	bf00      	nop

0800fc70 <uxr_read_submessage_header>:
 800fc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc74:	4604      	mov	r4, r0
 800fc76:	460d      	mov	r5, r1
 800fc78:	2104      	movs	r1, #4
 800fc7a:	4616      	mov	r6, r2
 800fc7c:	4698      	mov	r8, r3
 800fc7e:	f7fd fd93 	bl	800d7a8 <ucdr_align_to>
 800fc82:	4620      	mov	r0, r4
 800fc84:	f7fd fda6 	bl	800d7d4 <ucdr_buffer_remaining>
 800fc88:	2803      	cmp	r0, #3
 800fc8a:	bf8c      	ite	hi
 800fc8c:	2701      	movhi	r7, #1
 800fc8e:	2700      	movls	r7, #0
 800fc90:	d802      	bhi.n	800fc98 <uxr_read_submessage_header+0x28>
 800fc92:	4638      	mov	r0, r7
 800fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc98:	4633      	mov	r3, r6
 800fc9a:	4642      	mov	r2, r8
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f000 fa18 	bl	80100d4 <uxr_deserialize_submessage_header>
 800fca4:	f898 3000 	ldrb.w	r3, [r8]
 800fca8:	f003 0201 	and.w	r2, r3, #1
 800fcac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fcb0:	f888 3000 	strb.w	r3, [r8]
 800fcb4:	7522      	strb	r2, [r4, #20]
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fcbc <uxr_submessage_padding>:
 800fcbc:	f010 0003 	ands.w	r0, r0, #3
 800fcc0:	bf18      	it	ne
 800fcc2:	f1c0 0004 	rsbne	r0, r0, #4
 800fcc6:	4770      	bx	lr

0800fcc8 <uxr_millis>:
 800fcc8:	b510      	push	{r4, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	4669      	mov	r1, sp
 800fcce:	2001      	movs	r0, #1
 800fcd0:	f7f1 fd46 	bl	8001760 <clock_gettime>
 800fcd4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800fcd8:	4906      	ldr	r1, [pc, #24]	@ (800fcf4 <uxr_millis+0x2c>)
 800fcda:	fba0 0301 	umull	r0, r3, r0, r1
 800fcde:	1900      	adds	r0, r0, r4
 800fce0:	fb01 3102 	mla	r1, r1, r2, r3
 800fce4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800fce8:	4a03      	ldr	r2, [pc, #12]	@ (800fcf8 <uxr_millis+0x30>)
 800fcea:	2300      	movs	r3, #0
 800fcec:	f7f0 fb00 	bl	80002f0 <__aeabi_ldivmod>
 800fcf0:	b004      	add	sp, #16
 800fcf2:	bd10      	pop	{r4, pc}
 800fcf4:	3b9aca00 	.word	0x3b9aca00
 800fcf8:	000f4240 	.word	0x000f4240

0800fcfc <uxr_nanos>:
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	4669      	mov	r1, sp
 800fd02:	2001      	movs	r0, #1
 800fd04:	f7f1 fd2c 	bl	8001760 <clock_gettime>
 800fd08:	4a06      	ldr	r2, [pc, #24]	@ (800fd24 <uxr_nanos+0x28>)
 800fd0a:	9800      	ldr	r0, [sp, #0]
 800fd0c:	9902      	ldr	r1, [sp, #8]
 800fd0e:	9c01      	ldr	r4, [sp, #4]
 800fd10:	fba0 0302 	umull	r0, r3, r0, r2
 800fd14:	1840      	adds	r0, r0, r1
 800fd16:	fb02 3304 	mla	r3, r2, r4, r3
 800fd1a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800fd1e:	b004      	add	sp, #16
 800fd20:	bd10      	pop	{r4, pc}
 800fd22:	bf00      	nop
 800fd24:	3b9aca00 	.word	0x3b9aca00

0800fd28 <on_full_output_buffer_fragmented>:
 800fd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	b08a      	sub	sp, #40	@ 0x28
 800fd30:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800fd34:	4606      	mov	r6, r0
 800fd36:	f104 0008 	add.w	r0, r4, #8
 800fd3a:	f7ff ff4b 	bl	800fbd4 <uxr_get_output_reliable_stream>
 800fd3e:	4605      	mov	r5, r0
 800fd40:	f006 f810 	bl	8015d64 <get_available_free_slots>
 800fd44:	b968      	cbnz	r0, 800fd62 <on_full_output_buffer_fragmented+0x3a>
 800fd46:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	4798      	blx	r3
 800fd4e:	b918      	cbnz	r0, 800fd58 <on_full_output_buffer_fragmented+0x30>
 800fd50:	2001      	movs	r0, #1
 800fd52:	b00a      	add	sp, #40	@ 0x28
 800fd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd58:	4628      	mov	r0, r5
 800fd5a:	f006 f803 	bl	8015d64 <get_available_free_slots>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d0f6      	beq.n	800fd50 <on_full_output_buffer_fragmented+0x28>
 800fd62:	8929      	ldrh	r1, [r5, #8]
 800fd64:	89eb      	ldrh	r3, [r5, #14]
 800fd66:	7b28      	ldrb	r0, [r5, #12]
 800fd68:	686a      	ldr	r2, [r5, #4]
 800fd6a:	fbb2 f8f1 	udiv	r8, r2, r1
 800fd6e:	fbb3 f2f1 	udiv	r2, r3, r1
 800fd72:	fb01 3112 	mls	r1, r1, r2, r3
 800fd76:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800fd7a:	b289      	uxth	r1, r1
 800fd7c:	fb08 f101 	mul.w	r1, r8, r1
 800fd80:	30fc      	adds	r0, #252	@ 0xfc
 800fd82:	f1a8 0804 	sub.w	r8, r8, #4
 800fd86:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800fd8a:	4440      	add	r0, r8
 800fd8c:	b287      	uxth	r7, r0
 800fd8e:	1bdb      	subs	r3, r3, r7
 800fd90:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800fd94:	682b      	ldr	r3, [r5, #0]
 800fd96:	3104      	adds	r1, #4
 800fd98:	4419      	add	r1, r3
 800fd9a:	4642      	mov	r2, r8
 800fd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	a802      	add	r0, sp, #8
 800fda4:	2300      	movs	r3, #0
 800fda6:	f7fd fcd3 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800fdaa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800fdae:	f102 0308 	add.w	r3, r2, #8
 800fdb2:	4543      	cmp	r3, r8
 800fdb4:	d928      	bls.n	800fe08 <on_full_output_buffer_fragmented+0xe0>
 800fdb6:	463a      	mov	r2, r7
 800fdb8:	2300      	movs	r3, #0
 800fdba:	210d      	movs	r1, #13
 800fdbc:	a802      	add	r0, sp, #8
 800fdbe:	f7ff ff3d 	bl	800fc3c <uxr_buffer_submessage_header>
 800fdc2:	8929      	ldrh	r1, [r5, #8]
 800fdc4:	89eb      	ldrh	r3, [r5, #14]
 800fdc6:	fbb3 f2f1 	udiv	r2, r3, r1
 800fdca:	fb01 3312 	mls	r3, r1, r2, r3
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	686a      	ldr	r2, [r5, #4]
 800fdd2:	fbb2 f2f1 	udiv	r2, r2, r1
 800fdd6:	fb02 f303 	mul.w	r3, r2, r3
 800fdda:	682a      	ldr	r2, [r5, #0]
 800fddc:	f842 8003 	str.w	r8, [r2, r3]
 800fde0:	89e8      	ldrh	r0, [r5, #14]
 800fde2:	2101      	movs	r1, #1
 800fde4:	f005 ffde 	bl	8015da4 <uxr_seq_num_add>
 800fde8:	9904      	ldr	r1, [sp, #16]
 800fdea:	9a03      	ldr	r2, [sp, #12]
 800fdec:	81e8      	strh	r0, [r5, #14]
 800fdee:	1a52      	subs	r2, r2, r1
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	f7fd fcbf 	bl	800d774 <ucdr_init_buffer>
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	490f      	ldr	r1, [pc, #60]	@ (800fe38 <on_full_output_buffer_fragmented+0x110>)
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	f7fd fc8e 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 800fe00:	2000      	movs	r0, #0
 800fe02:	b00a      	add	sp, #40	@ 0x28
 800fe04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe08:	b292      	uxth	r2, r2
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	210d      	movs	r1, #13
 800fe0e:	a802      	add	r0, sp, #8
 800fe10:	f7ff ff14 	bl	800fc3c <uxr_buffer_submessage_header>
 800fe14:	8928      	ldrh	r0, [r5, #8]
 800fe16:	89eb      	ldrh	r3, [r5, #14]
 800fe18:	fbb3 f1f0 	udiv	r1, r3, r0
 800fe1c:	fb00 3311 	mls	r3, r0, r1, r3
 800fe20:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800fe24:	6869      	ldr	r1, [r5, #4]
 800fe26:	fbb1 f1f0 	udiv	r1, r1, r0
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	fb01 f303 	mul.w	r3, r1, r3
 800fe30:	6829      	ldr	r1, [r5, #0]
 800fe32:	3208      	adds	r2, #8
 800fe34:	50ca      	str	r2, [r1, r3]
 800fe36:	e7d3      	b.n	800fde0 <on_full_output_buffer_fragmented+0xb8>
 800fe38:	0800fd29 	.word	0x0800fd29

0800fe3c <uxr_prepare_output_stream>:
 800fe3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe3e:	b087      	sub	sp, #28
 800fe40:	2707      	movs	r7, #7
 800fe42:	9202      	str	r2, [sp, #8]
 800fe44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fe46:	9103      	str	r1, [sp, #12]
 800fe48:	2500      	movs	r5, #0
 800fe4a:	3204      	adds	r2, #4
 800fe4c:	e9cd 7500 	strd	r7, r5, [sp]
 800fe50:	461c      	mov	r4, r3
 800fe52:	4606      	mov	r6, r0
 800fe54:	f7fe ffc2 	bl	800eddc <uxr_prepare_stream_to_write_submessage>
 800fe58:	f080 0201 	eor.w	r2, r0, #1
 800fe5c:	b2d2      	uxtb	r2, r2
 800fe5e:	75a2      	strb	r2, [r4, #22]
 800fe60:	b112      	cbz	r2, 800fe68 <uxr_prepare_output_stream+0x2c>
 800fe62:	4628      	mov	r0, r5
 800fe64:	b007      	add	sp, #28
 800fe66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe68:	aa05      	add	r2, sp, #20
 800fe6a:	9902      	ldr	r1, [sp, #8]
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f7ff f8eb 	bl	800f048 <uxr_init_base_object_request>
 800fe72:	a905      	add	r1, sp, #20
 800fe74:	4605      	mov	r5, r0
 800fe76:	4620      	mov	r0, r4
 800fe78:	f000 ffa0 	bl	8010dbc <uxr_serialize_WRITE_DATA_Payload_Data>
 800fe7c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800fe80:	69a6      	ldr	r6, [r4, #24]
 800fe82:	69e7      	ldr	r7, [r4, #28]
 800fe84:	1a52      	subs	r2, r2, r1
 800fe86:	4620      	mov	r0, r4
 800fe88:	f7fd fc74 	bl	800d774 <ucdr_init_buffer>
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	463a      	mov	r2, r7
 800fe90:	4631      	mov	r1, r6
 800fe92:	f7fd fc43 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 800fe96:	4628      	mov	r0, r5
 800fe98:	b007      	add	sp, #28
 800fe9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe9c <uxr_prepare_output_stream_fragmented>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	b091      	sub	sp, #68	@ 0x44
 800fea2:	4605      	mov	r5, r0
 800fea4:	9105      	str	r1, [sp, #20]
 800fea6:	3008      	adds	r0, #8
 800fea8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800feac:	461e      	mov	r6, r3
 800feae:	9204      	str	r2, [sp, #16]
 800feb0:	f7ff fe90 	bl	800fbd4 <uxr_get_output_reliable_stream>
 800feb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	f000 8091 	beq.w	800ffe0 <uxr_prepare_output_stream_fragmented+0x144>
 800febe:	4604      	mov	r4, r0
 800fec0:	2800      	cmp	r0, #0
 800fec2:	f000 808d 	beq.w	800ffe0 <uxr_prepare_output_stream_fragmented+0x144>
 800fec6:	f005 ff4d 	bl	8015d64 <get_available_free_slots>
 800feca:	2800      	cmp	r0, #0
 800fecc:	f000 8083 	beq.w	800ffd6 <uxr_prepare_output_stream_fragmented+0x13a>
 800fed0:	8922      	ldrh	r2, [r4, #8]
 800fed2:	89e7      	ldrh	r7, [r4, #14]
 800fed4:	fbb7 f9f2 	udiv	r9, r7, r2
 800fed8:	fb02 7919 	mls	r9, r2, r9, r7
 800fedc:	fa1f f989 	uxth.w	r9, r9
 800fee0:	6863      	ldr	r3, [r4, #4]
 800fee2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	9203      	str	r2, [sp, #12]
 800feea:	fb02 f909 	mul.w	r9, r2, r9
 800feee:	f109 0904 	add.w	r9, r9, #4
 800fef2:	4499      	add	r9, r3
 800fef4:	7b23      	ldrb	r3, [r4, #12]
 800fef6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fefa:	4543      	cmp	r3, r8
 800fefc:	f1a2 0b04 	sub.w	fp, r2, #4
 800ff00:	d37a      	bcc.n	800fff8 <uxr_prepare_output_stream_fragmented+0x15c>
 800ff02:	f1ab 0a04 	sub.w	sl, fp, #4
 800ff06:	ebaa 0a03 	sub.w	sl, sl, r3
 800ff0a:	465a      	mov	r2, fp
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	4649      	mov	r1, r9
 800ff10:	a808      	add	r0, sp, #32
 800ff12:	f8cd 8000 	str.w	r8, [sp]
 800ff16:	f7fd fc1b 	bl	800d750 <ucdr_init_buffer_origin_offset>
 800ff1a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ff1c:	fa1f fa8a 	uxth.w	sl, sl
 800ff20:	4652      	mov	r2, sl
 800ff22:	f103 0a08 	add.w	sl, r3, #8
 800ff26:	45da      	cmp	sl, fp
 800ff28:	bf34      	ite	cc
 800ff2a:	2302      	movcc	r3, #2
 800ff2c:	2300      	movcs	r3, #0
 800ff2e:	210d      	movs	r1, #13
 800ff30:	a808      	add	r0, sp, #32
 800ff32:	f7ff fe83 	bl	800fc3c <uxr_buffer_submessage_header>
 800ff36:	8921      	ldrh	r1, [r4, #8]
 800ff38:	fbb7 f2f1 	udiv	r2, r7, r1
 800ff3c:	fb01 7212 	mls	r2, r1, r2, r7
 800ff40:	b292      	uxth	r2, r2
 800ff42:	6863      	ldr	r3, [r4, #4]
 800ff44:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff48:	fb02 f303 	mul.w	r3, r2, r3
 800ff4c:	6822      	ldr	r2, [r4, #0]
 800ff4e:	4638      	mov	r0, r7
 800ff50:	f842 b003 	str.w	fp, [r2, r3]
 800ff54:	2101      	movs	r1, #1
 800ff56:	f005 ff25 	bl	8015da4 <uxr_seq_num_add>
 800ff5a:	9b03      	ldr	r3, [sp, #12]
 800ff5c:	f108 0104 	add.w	r1, r8, #4
 800ff60:	f1a3 0208 	sub.w	r2, r3, #8
 800ff64:	eba2 0208 	sub.w	r2, r2, r8
 800ff68:	4449      	add	r1, r9
 800ff6a:	4607      	mov	r7, r0
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	f7fd fc01 	bl	800d774 <ucdr_init_buffer>
 800ff72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ff74:	81e7      	strh	r7, [r4, #14]
 800ff76:	1d1a      	adds	r2, r3, #4
 800ff78:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ff7c:	bf28      	it	cs
 800ff7e:	2200      	movcs	r2, #0
 800ff80:	2300      	movs	r3, #0
 800ff82:	b292      	uxth	r2, r2
 800ff84:	2107      	movs	r1, #7
 800ff86:	4630      	mov	r0, r6
 800ff88:	f7ff fe58 	bl	800fc3c <uxr_buffer_submessage_header>
 800ff8c:	9904      	ldr	r1, [sp, #16]
 800ff8e:	aa07      	add	r2, sp, #28
 800ff90:	4628      	mov	r0, r5
 800ff92:	f7ff f859 	bl	800f048 <uxr_init_base_object_request>
 800ff96:	4604      	mov	r4, r0
 800ff98:	b318      	cbz	r0, 800ffe2 <uxr_prepare_output_stream_fragmented+0x146>
 800ff9a:	a907      	add	r1, sp, #28
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f000 ff0d 	bl	8010dbc <uxr_serialize_WRITE_DATA_Payload_Data>
 800ffa2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	1a52      	subs	r2, r2, r1
 800ffaa:	f7fd fbe3 	bl	800d774 <ucdr_init_buffer>
 800ffae:	9b05      	ldr	r3, [sp, #20]
 800ffb0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800ffb4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ffb6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800ffba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ffbc:	491b      	ldr	r1, [pc, #108]	@ (801002c <uxr_prepare_output_stream_fragmented+0x190>)
 800ffbe:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800ffc8:	462a      	mov	r2, r5
 800ffca:	f7fd fba7 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 800ffce:	4620      	mov	r0, r4
 800ffd0:	b011      	add	sp, #68	@ 0x44
 800ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800ffd8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ffda:	4628      	mov	r0, r5
 800ffdc:	4798      	blx	r3
 800ffde:	b920      	cbnz	r0, 800ffea <uxr_prepare_output_stream_fragmented+0x14e>
 800ffe0:	2400      	movs	r4, #0
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	b011      	add	sp, #68	@ 0x44
 800ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffea:	4620      	mov	r0, r4
 800ffec:	f005 feba 	bl	8015d64 <get_available_free_slots>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	f47f af6d 	bne.w	800fed0 <uxr_prepare_output_stream_fragmented+0x34>
 800fff6:	e7f3      	b.n	800ffe0 <uxr_prepare_output_stream_fragmented+0x144>
 800fff8:	4638      	mov	r0, r7
 800fffa:	2101      	movs	r1, #1
 800fffc:	f005 fed2 	bl	8015da4 <uxr_seq_num_add>
 8010000:	8921      	ldrh	r1, [r4, #8]
 8010002:	fbb0 f2f1 	udiv	r2, r0, r1
 8010006:	fb01 0912 	mls	r9, r1, r2, r0
 801000a:	fa1f f289 	uxth.w	r2, r9
 801000e:	6863      	ldr	r3, [r4, #4]
 8010010:	fbb3 f9f1 	udiv	r9, r3, r1
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	fb02 f909 	mul.w	r9, r2, r9
 801001a:	f109 0904 	add.w	r9, r9, #4
 801001e:	4499      	add	r9, r3
 8010020:	4607      	mov	r7, r0
 8010022:	7b23      	ldrb	r3, [r4, #12]
 8010024:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010028:	e76b      	b.n	800ff02 <uxr_prepare_output_stream_fragmented+0x66>
 801002a:	bf00      	nop
 801002c:	0800fd29 	.word	0x0800fd29

08010030 <uxr_serialize_message_header>:
 8010030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010032:	b083      	sub	sp, #12
 8010034:	4616      	mov	r6, r2
 8010036:	4604      	mov	r4, r0
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	460d      	mov	r5, r1
 801003c:	9f08      	ldr	r7, [sp, #32]
 801003e:	f7fc fbed 	bl	800c81c <ucdr_serialize_uint8_t>
 8010042:	4631      	mov	r1, r6
 8010044:	4620      	mov	r0, r4
 8010046:	f7fc fbe9 	bl	800c81c <ucdr_serialize_uint8_t>
 801004a:	9a01      	ldr	r2, [sp, #4]
 801004c:	2101      	movs	r1, #1
 801004e:	4620      	mov	r0, r4
 8010050:	f7fc fc90 	bl	800c974 <ucdr_serialize_endian_uint16_t>
 8010054:	062b      	lsls	r3, r5, #24
 8010056:	d501      	bpl.n	801005c <uxr_serialize_message_header+0x2c>
 8010058:	b003      	add	sp, #12
 801005a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801005c:	2204      	movs	r2, #4
 801005e:	4639      	mov	r1, r7
 8010060:	4620      	mov	r0, r4
 8010062:	b003      	add	sp, #12
 8010064:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010068:	f005 b81c 	b.w	80150a4 <ucdr_serialize_array_uint8_t>

0801006c <uxr_deserialize_message_header>:
 801006c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006e:	b083      	sub	sp, #12
 8010070:	4616      	mov	r6, r2
 8010072:	4604      	mov	r4, r0
 8010074:	9301      	str	r3, [sp, #4]
 8010076:	460d      	mov	r5, r1
 8010078:	9f08      	ldr	r7, [sp, #32]
 801007a:	f7fc fbe5 	bl	800c848 <ucdr_deserialize_uint8_t>
 801007e:	4631      	mov	r1, r6
 8010080:	4620      	mov	r0, r4
 8010082:	f7fc fbe1 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010086:	9a01      	ldr	r2, [sp, #4]
 8010088:	2101      	movs	r1, #1
 801008a:	4620      	mov	r0, r4
 801008c:	f7fc fd66 	bl	800cb5c <ucdr_deserialize_endian_uint16_t>
 8010090:	f995 3000 	ldrsb.w	r3, [r5]
 8010094:	2b00      	cmp	r3, #0
 8010096:	da01      	bge.n	801009c <uxr_deserialize_message_header+0x30>
 8010098:	b003      	add	sp, #12
 801009a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801009c:	2204      	movs	r2, #4
 801009e:	4639      	mov	r1, r7
 80100a0:	4620      	mov	r0, r4
 80100a2:	b003      	add	sp, #12
 80100a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80100a8:	f005 b860 	b.w	801516c <ucdr_deserialize_array_uint8_t>

080100ac <uxr_serialize_submessage_header>:
 80100ac:	b530      	push	{r4, r5, lr}
 80100ae:	b083      	sub	sp, #12
 80100b0:	4615      	mov	r5, r2
 80100b2:	4604      	mov	r4, r0
 80100b4:	9301      	str	r3, [sp, #4]
 80100b6:	f7fc fbb1 	bl	800c81c <ucdr_serialize_uint8_t>
 80100ba:	4629      	mov	r1, r5
 80100bc:	4620      	mov	r0, r4
 80100be:	f7fc fbad 	bl	800c81c <ucdr_serialize_uint8_t>
 80100c2:	9a01      	ldr	r2, [sp, #4]
 80100c4:	2101      	movs	r1, #1
 80100c6:	4620      	mov	r0, r4
 80100c8:	b003      	add	sp, #12
 80100ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100ce:	f7fc bc51 	b.w	800c974 <ucdr_serialize_endian_uint16_t>
 80100d2:	bf00      	nop

080100d4 <uxr_deserialize_submessage_header>:
 80100d4:	b530      	push	{r4, r5, lr}
 80100d6:	b083      	sub	sp, #12
 80100d8:	4615      	mov	r5, r2
 80100da:	4604      	mov	r4, r0
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	f7fc fbb3 	bl	800c848 <ucdr_deserialize_uint8_t>
 80100e2:	4629      	mov	r1, r5
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7fc fbaf 	bl	800c848 <ucdr_deserialize_uint8_t>
 80100ea:	9a01      	ldr	r2, [sp, #4]
 80100ec:	2101      	movs	r1, #1
 80100ee:	4620      	mov	r0, r4
 80100f0:	b003      	add	sp, #12
 80100f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100f6:	f7fc bd31 	b.w	800cb5c <ucdr_deserialize_endian_uint16_t>
 80100fa:	bf00      	nop

080100fc <uxr_serialize_CLIENT_Representation>:
 80100fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010100:	2204      	movs	r2, #4
 8010102:	460e      	mov	r6, r1
 8010104:	4605      	mov	r5, r0
 8010106:	f004 ffcd 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 801010a:	2202      	movs	r2, #2
 801010c:	4607      	mov	r7, r0
 801010e:	1d31      	adds	r1, r6, #4
 8010110:	4628      	mov	r0, r5
 8010112:	f004 ffc7 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010116:	4038      	ands	r0, r7
 8010118:	2202      	movs	r2, #2
 801011a:	1db1      	adds	r1, r6, #6
 801011c:	b2c7      	uxtb	r7, r0
 801011e:	4628      	mov	r0, r5
 8010120:	f004 ffc0 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010124:	2204      	movs	r2, #4
 8010126:	4007      	ands	r7, r0
 8010128:	f106 0108 	add.w	r1, r6, #8
 801012c:	4628      	mov	r0, r5
 801012e:	f004 ffb9 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010132:	7b31      	ldrb	r1, [r6, #12]
 8010134:	4007      	ands	r7, r0
 8010136:	4628      	mov	r0, r5
 8010138:	f7fc fb70 	bl	800c81c <ucdr_serialize_uint8_t>
 801013c:	7b71      	ldrb	r1, [r6, #13]
 801013e:	4007      	ands	r7, r0
 8010140:	4628      	mov	r0, r5
 8010142:	f7fc fb3d 	bl	800c7c0 <ucdr_serialize_bool>
 8010146:	7b73      	ldrb	r3, [r6, #13]
 8010148:	ea07 0800 	and.w	r8, r7, r0
 801014c:	b93b      	cbnz	r3, 801015e <uxr_serialize_CLIENT_Representation+0x62>
 801014e:	8bb1      	ldrh	r1, [r6, #28]
 8010150:	4628      	mov	r0, r5
 8010152:	f7fc fb8f 	bl	800c874 <ucdr_serialize_uint16_t>
 8010156:	ea08 0000 	and.w	r0, r8, r0
 801015a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801015e:	6931      	ldr	r1, [r6, #16]
 8010160:	4628      	mov	r0, r5
 8010162:	f7fc fd71 	bl	800cc48 <ucdr_serialize_uint32_t>
 8010166:	6933      	ldr	r3, [r6, #16]
 8010168:	b1e3      	cbz	r3, 80101a4 <uxr_serialize_CLIENT_Representation+0xa8>
 801016a:	b1c0      	cbz	r0, 801019e <uxr_serialize_CLIENT_Representation+0xa2>
 801016c:	4637      	mov	r7, r6
 801016e:	f04f 0900 	mov.w	r9, #0
 8010172:	e001      	b.n	8010178 <uxr_serialize_CLIENT_Representation+0x7c>
 8010174:	3708      	adds	r7, #8
 8010176:	b194      	cbz	r4, 801019e <uxr_serialize_CLIENT_Representation+0xa2>
 8010178:	6979      	ldr	r1, [r7, #20]
 801017a:	4628      	mov	r0, r5
 801017c:	f005 f8b2 	bl	80152e4 <ucdr_serialize_string>
 8010180:	69b9      	ldr	r1, [r7, #24]
 8010182:	4604      	mov	r4, r0
 8010184:	4628      	mov	r0, r5
 8010186:	f005 f8ad 	bl	80152e4 <ucdr_serialize_string>
 801018a:	6933      	ldr	r3, [r6, #16]
 801018c:	f109 0901 	add.w	r9, r9, #1
 8010190:	4004      	ands	r4, r0
 8010192:	4599      	cmp	r9, r3
 8010194:	b2e4      	uxtb	r4, r4
 8010196:	d3ed      	bcc.n	8010174 <uxr_serialize_CLIENT_Representation+0x78>
 8010198:	ea08 0804 	and.w	r8, r8, r4
 801019c:	e7d7      	b.n	801014e <uxr_serialize_CLIENT_Representation+0x52>
 801019e:	f04f 0800 	mov.w	r8, #0
 80101a2:	e7d4      	b.n	801014e <uxr_serialize_CLIENT_Representation+0x52>
 80101a4:	ea08 0800 	and.w	r8, r8, r0
 80101a8:	e7d1      	b.n	801014e <uxr_serialize_CLIENT_Representation+0x52>
 80101aa:	bf00      	nop

080101ac <uxr_deserialize_CLIENT_Representation>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	2204      	movs	r2, #4
 80101b2:	460c      	mov	r4, r1
 80101b4:	4605      	mov	r5, r0
 80101b6:	f004 ffd9 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80101ba:	2202      	movs	r2, #2
 80101bc:	4607      	mov	r7, r0
 80101be:	1d21      	adds	r1, r4, #4
 80101c0:	4628      	mov	r0, r5
 80101c2:	f004 ffd3 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80101c6:	4038      	ands	r0, r7
 80101c8:	2202      	movs	r2, #2
 80101ca:	1da1      	adds	r1, r4, #6
 80101cc:	b2c6      	uxtb	r6, r0
 80101ce:	4628      	mov	r0, r5
 80101d0:	f004 ffcc 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80101d4:	2204      	movs	r2, #4
 80101d6:	4006      	ands	r6, r0
 80101d8:	f104 0108 	add.w	r1, r4, #8
 80101dc:	4628      	mov	r0, r5
 80101de:	f004 ffc5 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80101e2:	f104 010c 	add.w	r1, r4, #12
 80101e6:	4006      	ands	r6, r0
 80101e8:	4628      	mov	r0, r5
 80101ea:	f7fc fb2d 	bl	800c848 <ucdr_deserialize_uint8_t>
 80101ee:	f104 010d 	add.w	r1, r4, #13
 80101f2:	ea06 0700 	and.w	r7, r6, r0
 80101f6:	4628      	mov	r0, r5
 80101f8:	f7fc faf8 	bl	800c7ec <ucdr_deserialize_bool>
 80101fc:	7b63      	ldrb	r3, [r4, #13]
 80101fe:	4007      	ands	r7, r0
 8010200:	b93b      	cbnz	r3, 8010212 <uxr_deserialize_CLIENT_Representation+0x66>
 8010202:	f104 011c 	add.w	r1, r4, #28
 8010206:	4628      	mov	r0, r5
 8010208:	f7fc fc34 	bl	800ca74 <ucdr_deserialize_uint16_t>
 801020c:	4038      	ands	r0, r7
 801020e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010212:	f104 0110 	add.w	r1, r4, #16
 8010216:	4628      	mov	r0, r5
 8010218:	f7fc fe46 	bl	800cea8 <ucdr_deserialize_uint32_t>
 801021c:	6923      	ldr	r3, [r4, #16]
 801021e:	2b01      	cmp	r3, #1
 8010220:	d903      	bls.n	801022a <uxr_deserialize_CLIENT_Representation+0x7e>
 8010222:	2301      	movs	r3, #1
 8010224:	75ab      	strb	r3, [r5, #22]
 8010226:	2700      	movs	r7, #0
 8010228:	e7eb      	b.n	8010202 <uxr_deserialize_CLIENT_Representation+0x56>
 801022a:	b30b      	cbz	r3, 8010270 <uxr_deserialize_CLIENT_Representation+0xc4>
 801022c:	2800      	cmp	r0, #0
 801022e:	d0fa      	beq.n	8010226 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010230:	46a0      	mov	r8, r4
 8010232:	f04f 0900 	mov.w	r9, #0
 8010236:	e001      	b.n	801023c <uxr_deserialize_CLIENT_Representation+0x90>
 8010238:	2e00      	cmp	r6, #0
 801023a:	d0f4      	beq.n	8010226 <uxr_deserialize_CLIENT_Representation+0x7a>
 801023c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010244:	4628      	mov	r0, r5
 8010246:	f005 f85d 	bl	8015304 <ucdr_deserialize_string>
 801024a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801024e:	4606      	mov	r6, r0
 8010250:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010254:	4628      	mov	r0, r5
 8010256:	f005 f855 	bl	8015304 <ucdr_deserialize_string>
 801025a:	6923      	ldr	r3, [r4, #16]
 801025c:	f109 0901 	add.w	r9, r9, #1
 8010260:	4006      	ands	r6, r0
 8010262:	4599      	cmp	r9, r3
 8010264:	f108 0808 	add.w	r8, r8, #8
 8010268:	b2f6      	uxtb	r6, r6
 801026a:	d3e5      	bcc.n	8010238 <uxr_deserialize_CLIENT_Representation+0x8c>
 801026c:	4037      	ands	r7, r6
 801026e:	e7c8      	b.n	8010202 <uxr_deserialize_CLIENT_Representation+0x56>
 8010270:	4007      	ands	r7, r0
 8010272:	e7c6      	b.n	8010202 <uxr_deserialize_CLIENT_Representation+0x56>

08010274 <uxr_serialize_AGENT_Representation>:
 8010274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010278:	2204      	movs	r2, #4
 801027a:	460f      	mov	r7, r1
 801027c:	4605      	mov	r5, r0
 801027e:	f004 ff11 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010282:	2202      	movs	r2, #2
 8010284:	4604      	mov	r4, r0
 8010286:	1d39      	adds	r1, r7, #4
 8010288:	4628      	mov	r0, r5
 801028a:	f004 ff0b 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 801028e:	4020      	ands	r0, r4
 8010290:	2202      	movs	r2, #2
 8010292:	1db9      	adds	r1, r7, #6
 8010294:	b2c4      	uxtb	r4, r0
 8010296:	4628      	mov	r0, r5
 8010298:	f004 ff04 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 801029c:	7a39      	ldrb	r1, [r7, #8]
 801029e:	4004      	ands	r4, r0
 80102a0:	4628      	mov	r0, r5
 80102a2:	f7fc fa8d 	bl	800c7c0 <ucdr_serialize_bool>
 80102a6:	7a3b      	ldrb	r3, [r7, #8]
 80102a8:	ea00 0804 	and.w	r8, r0, r4
 80102ac:	b913      	cbnz	r3, 80102b4 <uxr_serialize_AGENT_Representation+0x40>
 80102ae:	4640      	mov	r0, r8
 80102b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b4:	68f9      	ldr	r1, [r7, #12]
 80102b6:	4628      	mov	r0, r5
 80102b8:	f7fc fcc6 	bl	800cc48 <ucdr_serialize_uint32_t>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	b303      	cbz	r3, 8010302 <uxr_serialize_AGENT_Representation+0x8e>
 80102c0:	b1d0      	cbz	r0, 80102f8 <uxr_serialize_AGENT_Representation+0x84>
 80102c2:	463e      	mov	r6, r7
 80102c4:	f04f 0900 	mov.w	r9, #0
 80102c8:	e001      	b.n	80102ce <uxr_serialize_AGENT_Representation+0x5a>
 80102ca:	3608      	adds	r6, #8
 80102cc:	b1a4      	cbz	r4, 80102f8 <uxr_serialize_AGENT_Representation+0x84>
 80102ce:	6931      	ldr	r1, [r6, #16]
 80102d0:	4628      	mov	r0, r5
 80102d2:	f005 f807 	bl	80152e4 <ucdr_serialize_string>
 80102d6:	6971      	ldr	r1, [r6, #20]
 80102d8:	4604      	mov	r4, r0
 80102da:	4628      	mov	r0, r5
 80102dc:	f005 f802 	bl	80152e4 <ucdr_serialize_string>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f109 0901 	add.w	r9, r9, #1
 80102e6:	4004      	ands	r4, r0
 80102e8:	4599      	cmp	r9, r3
 80102ea:	b2e4      	uxtb	r4, r4
 80102ec:	d3ed      	bcc.n	80102ca <uxr_serialize_AGENT_Representation+0x56>
 80102ee:	ea08 0804 	and.w	r8, r8, r4
 80102f2:	4640      	mov	r0, r8
 80102f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f8:	f04f 0800 	mov.w	r8, #0
 80102fc:	4640      	mov	r0, r8
 80102fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010302:	ea08 0800 	and.w	r8, r8, r0
 8010306:	e7d2      	b.n	80102ae <uxr_serialize_AGENT_Representation+0x3a>

08010308 <uxr_serialize_DATAWRITER_Representation>:
 8010308:	b570      	push	{r4, r5, r6, lr}
 801030a:	460d      	mov	r5, r1
 801030c:	7809      	ldrb	r1, [r1, #0]
 801030e:	4606      	mov	r6, r0
 8010310:	f7fc fa84 	bl	800c81c <ucdr_serialize_uint8_t>
 8010314:	4604      	mov	r4, r0
 8010316:	b130      	cbz	r0, 8010326 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010318:	782b      	ldrb	r3, [r5, #0]
 801031a:	2b02      	cmp	r3, #2
 801031c:	d00c      	beq.n	8010338 <uxr_serialize_DATAWRITER_Representation+0x30>
 801031e:	2b03      	cmp	r3, #3
 8010320:	d010      	beq.n	8010344 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010322:	2b01      	cmp	r3, #1
 8010324:	d008      	beq.n	8010338 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010326:	2202      	movs	r2, #2
 8010328:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801032c:	4630      	mov	r0, r6
 801032e:	f004 feb9 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010332:	4020      	ands	r0, r4
 8010334:	b2c0      	uxtb	r0, r0
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	6869      	ldr	r1, [r5, #4]
 801033a:	4630      	mov	r0, r6
 801033c:	f004 ffd2 	bl	80152e4 <ucdr_serialize_string>
 8010340:	4604      	mov	r4, r0
 8010342:	e7f0      	b.n	8010326 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010344:	4629      	mov	r1, r5
 8010346:	4630      	mov	r0, r6
 8010348:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801034c:	3104      	adds	r1, #4
 801034e:	f004 ff9d 	bl	801528c <ucdr_serialize_sequence_uint8_t>
 8010352:	4604      	mov	r4, r0
 8010354:	e7e7      	b.n	8010326 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010356:	bf00      	nop

08010358 <uxr_serialize_ObjectVariant.part.0>:
 8010358:	b570      	push	{r4, r5, r6, lr}
 801035a:	780b      	ldrb	r3, [r1, #0]
 801035c:	3b01      	subs	r3, #1
 801035e:	460c      	mov	r4, r1
 8010360:	4605      	mov	r5, r0
 8010362:	2b0d      	cmp	r3, #13
 8010364:	d854      	bhi.n	8010410 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010366:	e8df f003 	tbb	[pc, r3]
 801036a:	0730      	.short	0x0730
 801036c:	07071b1b 	.word	0x07071b1b
 8010370:	0c530707 	.word	0x0c530707
 8010374:	494e0c0c 	.word	0x494e0c0c
 8010378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801037c:	3104      	adds	r1, #4
 801037e:	f7ff bfc3 	b.w	8010308 <uxr_serialize_DATAWRITER_Representation>
 8010382:	7909      	ldrb	r1, [r1, #4]
 8010384:	f7fc fa4a 	bl	800c81c <ucdr_serialize_uint8_t>
 8010388:	b1e8      	cbz	r0, 80103c6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801038a:	7923      	ldrb	r3, [r4, #4]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d001      	beq.n	8010394 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010390:	2b02      	cmp	r3, #2
 8010392:	d13d      	bne.n	8010410 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010394:	68a1      	ldr	r1, [r4, #8]
 8010396:	4628      	mov	r0, r5
 8010398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801039c:	f004 bfa2 	b.w	80152e4 <ucdr_serialize_string>
 80103a0:	7909      	ldrb	r1, [r1, #4]
 80103a2:	f7fc fa3b 	bl	800c81c <ucdr_serialize_uint8_t>
 80103a6:	4606      	mov	r6, r0
 80103a8:	b120      	cbz	r0, 80103b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80103aa:	7923      	ldrb	r3, [r4, #4]
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d039      	beq.n	8010424 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80103b0:	2b03      	cmp	r3, #3
 80103b2:	d02f      	beq.n	8010414 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80103b4:	2202      	movs	r2, #2
 80103b6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80103ba:	4628      	mov	r0, r5
 80103bc:	f004 fe72 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 80103c0:	4030      	ands	r0, r6
 80103c2:	b2c0      	uxtb	r0, r0
 80103c4:	bd70      	pop	{r4, r5, r6, pc}
 80103c6:	2000      	movs	r0, #0
 80103c8:	bd70      	pop	{r4, r5, r6, pc}
 80103ca:	7909      	ldrb	r1, [r1, #4]
 80103cc:	f7fc fa26 	bl	800c81c <ucdr_serialize_uint8_t>
 80103d0:	4606      	mov	r6, r0
 80103d2:	b158      	cbz	r0, 80103ec <uxr_serialize_ObjectVariant.part.0+0x94>
 80103d4:	7923      	ldrb	r3, [r4, #4]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d003      	beq.n	80103e2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80103da:	2b03      	cmp	r3, #3
 80103dc:	d028      	beq.n	8010430 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d104      	bne.n	80103ec <uxr_serialize_ObjectVariant.part.0+0x94>
 80103e2:	68a1      	ldr	r1, [r4, #8]
 80103e4:	4628      	mov	r0, r5
 80103e6:	f004 ff7d 	bl	80152e4 <ucdr_serialize_string>
 80103ea:	4606      	mov	r6, r0
 80103ec:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80103f0:	4628      	mov	r0, r5
 80103f2:	f7fc ff4f 	bl	800d294 <ucdr_serialize_int16_t>
 80103f6:	4030      	ands	r0, r6
 80103f8:	b2c0      	uxtb	r0, r0
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010400:	3104      	adds	r1, #4
 8010402:	f7ff be7b 	b.w	80100fc <uxr_serialize_CLIENT_Representation>
 8010406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801040a:	3104      	adds	r1, #4
 801040c:	f7ff bf32 	b.w	8010274 <uxr_serialize_AGENT_Representation>
 8010410:	2001      	movs	r0, #1
 8010412:	bd70      	pop	{r4, r5, r6, pc}
 8010414:	68a2      	ldr	r2, [r4, #8]
 8010416:	f104 010c 	add.w	r1, r4, #12
 801041a:	4628      	mov	r0, r5
 801041c:	f004 ff36 	bl	801528c <ucdr_serialize_sequence_uint8_t>
 8010420:	4606      	mov	r6, r0
 8010422:	e7c7      	b.n	80103b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010424:	68a1      	ldr	r1, [r4, #8]
 8010426:	4628      	mov	r0, r5
 8010428:	f004 ff5c 	bl	80152e4 <ucdr_serialize_string>
 801042c:	4606      	mov	r6, r0
 801042e:	e7c1      	b.n	80103b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010430:	68a2      	ldr	r2, [r4, #8]
 8010432:	f104 010c 	add.w	r1, r4, #12
 8010436:	4628      	mov	r0, r5
 8010438:	f004 ff28 	bl	801528c <ucdr_serialize_sequence_uint8_t>
 801043c:	4606      	mov	r6, r0
 801043e:	e7d5      	b.n	80103ec <uxr_serialize_ObjectVariant.part.0+0x94>

08010440 <uxr_deserialize_DATAWRITER_Representation>:
 8010440:	b570      	push	{r4, r5, r6, lr}
 8010442:	4606      	mov	r6, r0
 8010444:	460d      	mov	r5, r1
 8010446:	f7fc f9ff 	bl	800c848 <ucdr_deserialize_uint8_t>
 801044a:	4604      	mov	r4, r0
 801044c:	b130      	cbz	r0, 801045c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801044e:	782b      	ldrb	r3, [r5, #0]
 8010450:	2b02      	cmp	r3, #2
 8010452:	d00c      	beq.n	801046e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010454:	2b03      	cmp	r3, #3
 8010456:	d012      	beq.n	801047e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010458:	2b01      	cmp	r3, #1
 801045a:	d008      	beq.n	801046e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801045c:	2202      	movs	r2, #2
 801045e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010462:	4630      	mov	r0, r6
 8010464:	f004 fe82 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010468:	4020      	ands	r0, r4
 801046a:	b2c0      	uxtb	r0, r0
 801046c:	bd70      	pop	{r4, r5, r6, pc}
 801046e:	6869      	ldr	r1, [r5, #4]
 8010470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010474:	4630      	mov	r0, r6
 8010476:	f004 ff45 	bl	8015304 <ucdr_deserialize_string>
 801047a:	4604      	mov	r4, r0
 801047c:	e7ee      	b.n	801045c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801047e:	1d2b      	adds	r3, r5, #4
 8010480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010484:	f105 0108 	add.w	r1, r5, #8
 8010488:	4630      	mov	r0, r6
 801048a:	f004 ff11 	bl	80152b0 <ucdr_deserialize_sequence_uint8_t>
 801048e:	4604      	mov	r4, r0
 8010490:	e7e4      	b.n	801045c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010492:	bf00      	nop

08010494 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010494:	b570      	push	{r4, r5, r6, lr}
 8010496:	460d      	mov	r5, r1
 8010498:	7809      	ldrb	r1, [r1, #0]
 801049a:	4606      	mov	r6, r0
 801049c:	f7fc f990 	bl	800c7c0 <ucdr_serialize_bool>
 80104a0:	782b      	ldrb	r3, [r5, #0]
 80104a2:	4604      	mov	r4, r0
 80104a4:	b94b      	cbnz	r3, 80104ba <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80104a6:	7a29      	ldrb	r1, [r5, #8]
 80104a8:	4630      	mov	r0, r6
 80104aa:	f7fc f989 	bl	800c7c0 <ucdr_serialize_bool>
 80104ae:	7a2b      	ldrb	r3, [r5, #8]
 80104b0:	4004      	ands	r4, r0
 80104b2:	b2e4      	uxtb	r4, r4
 80104b4:	b943      	cbnz	r3, 80104c8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80104b6:	4620      	mov	r0, r4
 80104b8:	bd70      	pop	{r4, r5, r6, pc}
 80104ba:	6869      	ldr	r1, [r5, #4]
 80104bc:	4630      	mov	r0, r6
 80104be:	f004 ff11 	bl	80152e4 <ucdr_serialize_string>
 80104c2:	4004      	ands	r4, r0
 80104c4:	b2e4      	uxtb	r4, r4
 80104c6:	e7ee      	b.n	80104a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80104c8:	68e9      	ldr	r1, [r5, #12]
 80104ca:	4630      	mov	r0, r6
 80104cc:	f004 ff0a 	bl	80152e4 <ucdr_serialize_string>
 80104d0:	4004      	ands	r4, r0
 80104d2:	4620      	mov	r0, r4
 80104d4:	bd70      	pop	{r4, r5, r6, pc}
 80104d6:	bf00      	nop

080104d8 <uxr_serialize_OBJK_Topic_Binary>:
 80104d8:	b570      	push	{r4, r5, r6, lr}
 80104da:	460d      	mov	r5, r1
 80104dc:	6809      	ldr	r1, [r1, #0]
 80104de:	4606      	mov	r6, r0
 80104e0:	f004 ff00 	bl	80152e4 <ucdr_serialize_string>
 80104e4:	7929      	ldrb	r1, [r5, #4]
 80104e6:	4604      	mov	r4, r0
 80104e8:	4630      	mov	r0, r6
 80104ea:	f7fc f969 	bl	800c7c0 <ucdr_serialize_bool>
 80104ee:	792b      	ldrb	r3, [r5, #4]
 80104f0:	4004      	ands	r4, r0
 80104f2:	b2e4      	uxtb	r4, r4
 80104f4:	b943      	cbnz	r3, 8010508 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80104f6:	7b29      	ldrb	r1, [r5, #12]
 80104f8:	4630      	mov	r0, r6
 80104fa:	f7fc f961 	bl	800c7c0 <ucdr_serialize_bool>
 80104fe:	7b2b      	ldrb	r3, [r5, #12]
 8010500:	4004      	ands	r4, r0
 8010502:	b93b      	cbnz	r3, 8010514 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010504:	4620      	mov	r0, r4
 8010506:	bd70      	pop	{r4, r5, r6, pc}
 8010508:	68a9      	ldr	r1, [r5, #8]
 801050a:	4630      	mov	r0, r6
 801050c:	f004 feea 	bl	80152e4 <ucdr_serialize_string>
 8010510:	4004      	ands	r4, r0
 8010512:	e7f0      	b.n	80104f6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010514:	6929      	ldr	r1, [r5, #16]
 8010516:	4630      	mov	r0, r6
 8010518:	f004 fee4 	bl	80152e4 <ucdr_serialize_string>
 801051c:	4004      	ands	r4, r0
 801051e:	b2e4      	uxtb	r4, r4
 8010520:	4620      	mov	r0, r4
 8010522:	bd70      	pop	{r4, r5, r6, pc}

08010524 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010528:	460c      	mov	r4, r1
 801052a:	7809      	ldrb	r1, [r1, #0]
 801052c:	4606      	mov	r6, r0
 801052e:	f7fc f947 	bl	800c7c0 <ucdr_serialize_bool>
 8010532:	7823      	ldrb	r3, [r4, #0]
 8010534:	4605      	mov	r5, r0
 8010536:	b96b      	cbnz	r3, 8010554 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010538:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801053c:	4630      	mov	r0, r6
 801053e:	f7fc f93f 	bl	800c7c0 <ucdr_serialize_bool>
 8010542:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010546:	4005      	ands	r5, r0
 8010548:	b2ed      	uxtb	r5, r5
 801054a:	2b00      	cmp	r3, #0
 801054c:	d169      	bne.n	8010622 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801054e:	4628      	mov	r0, r5
 8010550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010554:	6861      	ldr	r1, [r4, #4]
 8010556:	4630      	mov	r0, r6
 8010558:	f7fc fb76 	bl	800cc48 <ucdr_serialize_uint32_t>
 801055c:	6863      	ldr	r3, [r4, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d06b      	beq.n	801063a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010562:	2800      	cmp	r0, #0
 8010564:	d067      	beq.n	8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010566:	68a1      	ldr	r1, [r4, #8]
 8010568:	4630      	mov	r0, r6
 801056a:	f004 febb 	bl	80152e4 <ucdr_serialize_string>
 801056e:	6863      	ldr	r3, [r4, #4]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d953      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010574:	2800      	cmp	r0, #0
 8010576:	d05e      	beq.n	8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010578:	68e1      	ldr	r1, [r4, #12]
 801057a:	4630      	mov	r0, r6
 801057c:	f004 feb2 	bl	80152e4 <ucdr_serialize_string>
 8010580:	6863      	ldr	r3, [r4, #4]
 8010582:	2b02      	cmp	r3, #2
 8010584:	d94a      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010586:	2800      	cmp	r0, #0
 8010588:	d055      	beq.n	8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801058a:	6921      	ldr	r1, [r4, #16]
 801058c:	4630      	mov	r0, r6
 801058e:	f004 fea9 	bl	80152e4 <ucdr_serialize_string>
 8010592:	6863      	ldr	r3, [r4, #4]
 8010594:	2b03      	cmp	r3, #3
 8010596:	d941      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010598:	2800      	cmp	r0, #0
 801059a:	d04c      	beq.n	8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801059c:	6961      	ldr	r1, [r4, #20]
 801059e:	4630      	mov	r0, r6
 80105a0:	f004 fea0 	bl	80152e4 <ucdr_serialize_string>
 80105a4:	6863      	ldr	r3, [r4, #4]
 80105a6:	2b04      	cmp	r3, #4
 80105a8:	d938      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d043      	beq.n	8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80105ae:	69a1      	ldr	r1, [r4, #24]
 80105b0:	4630      	mov	r0, r6
 80105b2:	f004 fe97 	bl	80152e4 <ucdr_serialize_string>
 80105b6:	6863      	ldr	r3, [r4, #4]
 80105b8:	2b05      	cmp	r3, #5
 80105ba:	d92f      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d03a      	beq.n	8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80105c0:	69e1      	ldr	r1, [r4, #28]
 80105c2:	4630      	mov	r0, r6
 80105c4:	f004 fe8e 	bl	80152e4 <ucdr_serialize_string>
 80105c8:	6863      	ldr	r3, [r4, #4]
 80105ca:	2b06      	cmp	r3, #6
 80105cc:	d926      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80105ce:	b390      	cbz	r0, 8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80105d0:	6a21      	ldr	r1, [r4, #32]
 80105d2:	4630      	mov	r0, r6
 80105d4:	f004 fe86 	bl	80152e4 <ucdr_serialize_string>
 80105d8:	6863      	ldr	r3, [r4, #4]
 80105da:	2b07      	cmp	r3, #7
 80105dc:	d91e      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80105de:	b350      	cbz	r0, 8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80105e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80105e2:	4630      	mov	r0, r6
 80105e4:	f004 fe7e 	bl	80152e4 <ucdr_serialize_string>
 80105e8:	6863      	ldr	r3, [r4, #4]
 80105ea:	2b08      	cmp	r3, #8
 80105ec:	d916      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80105ee:	b310      	cbz	r0, 8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80105f0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80105f2:	4630      	mov	r0, r6
 80105f4:	f004 fe76 	bl	80152e4 <ucdr_serialize_string>
 80105f8:	6863      	ldr	r3, [r4, #4]
 80105fa:	2b09      	cmp	r3, #9
 80105fc:	d90e      	bls.n	801061c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80105fe:	b1d0      	cbz	r0, 8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010600:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010604:	2709      	movs	r7, #9
 8010606:	e000      	b.n	801060a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010608:	b1a8      	cbz	r0, 8010636 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801060a:	f858 1b04 	ldr.w	r1, [r8], #4
 801060e:	4630      	mov	r0, r6
 8010610:	f004 fe68 	bl	80152e4 <ucdr_serialize_string>
 8010614:	6862      	ldr	r2, [r4, #4]
 8010616:	3701      	adds	r7, #1
 8010618:	4297      	cmp	r7, r2
 801061a:	d3f5      	bcc.n	8010608 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801061c:	4005      	ands	r5, r0
 801061e:	b2ed      	uxtb	r5, r5
 8010620:	e78a      	b.n	8010538 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010622:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010624:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010628:	4630      	mov	r0, r6
 801062a:	f004 fe2f 	bl	801528c <ucdr_serialize_sequence_uint8_t>
 801062e:	4005      	ands	r5, r0
 8010630:	4628      	mov	r0, r5
 8010632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010636:	2500      	movs	r5, #0
 8010638:	e77e      	b.n	8010538 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801063a:	4028      	ands	r0, r5
 801063c:	b2c5      	uxtb	r5, r0
 801063e:	e77b      	b.n	8010538 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010640 <uxr_serialize_OBJK_Publisher_Binary>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	460d      	mov	r5, r1
 8010644:	7809      	ldrb	r1, [r1, #0]
 8010646:	4606      	mov	r6, r0
 8010648:	f7fc f8ba 	bl	800c7c0 <ucdr_serialize_bool>
 801064c:	782b      	ldrb	r3, [r5, #0]
 801064e:	4604      	mov	r4, r0
 8010650:	b94b      	cbnz	r3, 8010666 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010652:	7a29      	ldrb	r1, [r5, #8]
 8010654:	4630      	mov	r0, r6
 8010656:	f7fc f8b3 	bl	800c7c0 <ucdr_serialize_bool>
 801065a:	7a2b      	ldrb	r3, [r5, #8]
 801065c:	4004      	ands	r4, r0
 801065e:	b2e4      	uxtb	r4, r4
 8010660:	b943      	cbnz	r3, 8010674 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010662:	4620      	mov	r0, r4
 8010664:	bd70      	pop	{r4, r5, r6, pc}
 8010666:	6869      	ldr	r1, [r5, #4]
 8010668:	4630      	mov	r0, r6
 801066a:	f004 fe3b 	bl	80152e4 <ucdr_serialize_string>
 801066e:	4004      	ands	r4, r0
 8010670:	b2e4      	uxtb	r4, r4
 8010672:	e7ee      	b.n	8010652 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010674:	f105 010c 	add.w	r1, r5, #12
 8010678:	4630      	mov	r0, r6
 801067a:	f7ff ff53 	bl	8010524 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801067e:	4004      	ands	r4, r0
 8010680:	4620      	mov	r0, r4
 8010682:	bd70      	pop	{r4, r5, r6, pc}

08010684 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010684:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010688:	4688      	mov	r8, r1
 801068a:	8809      	ldrh	r1, [r1, #0]
 801068c:	4681      	mov	r9, r0
 801068e:	f7fc f8f1 	bl	800c874 <ucdr_serialize_uint16_t>
 8010692:	f898 1002 	ldrb.w	r1, [r8, #2]
 8010696:	4606      	mov	r6, r0
 8010698:	4648      	mov	r0, r9
 801069a:	f7fc f891 	bl	800c7c0 <ucdr_serialize_bool>
 801069e:	f898 3002 	ldrb.w	r3, [r8, #2]
 80106a2:	4006      	ands	r6, r0
 80106a4:	b2f5      	uxtb	r5, r6
 80106a6:	b9eb      	cbnz	r3, 80106e4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80106a8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80106ac:	4648      	mov	r0, r9
 80106ae:	f7fc f887 	bl	800c7c0 <ucdr_serialize_bool>
 80106b2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80106b6:	4005      	ands	r5, r0
 80106b8:	bb7b      	cbnz	r3, 801071a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80106ba:	f898 100c 	ldrb.w	r1, [r8, #12]
 80106be:	4648      	mov	r0, r9
 80106c0:	f7fc f87e 	bl	800c7c0 <ucdr_serialize_bool>
 80106c4:	f898 300c 	ldrb.w	r3, [r8, #12]
 80106c8:	4005      	ands	r5, r0
 80106ca:	b9f3      	cbnz	r3, 801070a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80106cc:	f898 1014 	ldrb.w	r1, [r8, #20]
 80106d0:	4648      	mov	r0, r9
 80106d2:	f7fc f875 	bl	800c7c0 <ucdr_serialize_bool>
 80106d6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80106da:	4005      	ands	r5, r0
 80106dc:	b94b      	cbnz	r3, 80106f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80106de:	4628      	mov	r0, r5
 80106e0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80106e4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80106e8:	4648      	mov	r0, r9
 80106ea:	f7fc f8c3 	bl	800c874 <ucdr_serialize_uint16_t>
 80106ee:	4005      	ands	r5, r0
 80106f0:	e7da      	b.n	80106a8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80106f2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80106f6:	f108 011c 	add.w	r1, r8, #28
 80106fa:	4648      	mov	r0, r9
 80106fc:	f004 fdc6 	bl	801528c <ucdr_serialize_sequence_uint8_t>
 8010700:	4028      	ands	r0, r5
 8010702:	b2c5      	uxtb	r5, r0
 8010704:	4628      	mov	r0, r5
 8010706:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801070a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801070e:	4648      	mov	r0, r9
 8010710:	f7fc fa9a 	bl	800cc48 <ucdr_serialize_uint32_t>
 8010714:	4028      	ands	r0, r5
 8010716:	b2c5      	uxtb	r5, r0
 8010718:	e7d8      	b.n	80106cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801071a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801071e:	4648      	mov	r0, r9
 8010720:	f7fc fa92 	bl	800cc48 <ucdr_serialize_uint32_t>
 8010724:	4028      	ands	r0, r5
 8010726:	b2c5      	uxtb	r5, r0
 8010728:	e7c7      	b.n	80106ba <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801072a:	bf00      	nop

0801072c <uxr_serialize_OBJK_DataWriter_Binary>:
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	2202      	movs	r2, #2
 8010730:	460d      	mov	r5, r1
 8010732:	4606      	mov	r6, r0
 8010734:	f004 fcb6 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010738:	78a9      	ldrb	r1, [r5, #2]
 801073a:	4604      	mov	r4, r0
 801073c:	4630      	mov	r0, r6
 801073e:	f7fc f83f 	bl	800c7c0 <ucdr_serialize_bool>
 8010742:	78ab      	ldrb	r3, [r5, #2]
 8010744:	4004      	ands	r4, r0
 8010746:	b2e4      	uxtb	r4, r4
 8010748:	b90b      	cbnz	r3, 801074e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801074a:	4620      	mov	r0, r4
 801074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801074e:	f105 0108 	add.w	r1, r5, #8
 8010752:	4630      	mov	r0, r6
 8010754:	f7ff ff96 	bl	8010684 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010758:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801075c:	4607      	mov	r7, r0
 801075e:	4630      	mov	r0, r6
 8010760:	f7fc f82e 	bl	800c7c0 <ucdr_serialize_bool>
 8010764:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010768:	4038      	ands	r0, r7
 801076a:	b2c7      	uxtb	r7, r0
 801076c:	b913      	cbnz	r3, 8010774 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801076e:	403c      	ands	r4, r7
 8010770:	4620      	mov	r0, r4
 8010772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010774:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8010778:	4630      	mov	r0, r6
 801077a:	f7fc fcbb 	bl	800d0f4 <ucdr_serialize_uint64_t>
 801077e:	4007      	ands	r7, r0
 8010780:	e7f5      	b.n	801076e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010782:	bf00      	nop

08010784 <uxr_deserialize_ObjectVariant>:
 8010784:	b570      	push	{r4, r5, r6, lr}
 8010786:	4605      	mov	r5, r0
 8010788:	460e      	mov	r6, r1
 801078a:	f7fc f85d 	bl	800c848 <ucdr_deserialize_uint8_t>
 801078e:	b168      	cbz	r0, 80107ac <uxr_deserialize_ObjectVariant+0x28>
 8010790:	7833      	ldrb	r3, [r6, #0]
 8010792:	3b01      	subs	r3, #1
 8010794:	4604      	mov	r4, r0
 8010796:	2b0d      	cmp	r3, #13
 8010798:	d809      	bhi.n	80107ae <uxr_deserialize_ObjectVariant+0x2a>
 801079a:	e8df f003 	tbb	[pc, r3]
 801079e:	0a41      	.short	0x0a41
 80107a0:	0a0a2323 	.word	0x0a0a2323
 80107a4:	10080a0a 	.word	0x10080a0a
 80107a8:	565c1010 	.word	0x565c1010
 80107ac:	2400      	movs	r4, #0
 80107ae:	4620      	mov	r0, r4
 80107b0:	bd70      	pop	{r4, r5, r6, pc}
 80107b2:	1d31      	adds	r1, r6, #4
 80107b4:	4628      	mov	r0, r5
 80107b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107ba:	f7ff be41 	b.w	8010440 <uxr_deserialize_DATAWRITER_Representation>
 80107be:	1d31      	adds	r1, r6, #4
 80107c0:	4628      	mov	r0, r5
 80107c2:	f7fc f841 	bl	800c848 <ucdr_deserialize_uint8_t>
 80107c6:	2800      	cmp	r0, #0
 80107c8:	d0f0      	beq.n	80107ac <uxr_deserialize_ObjectVariant+0x28>
 80107ca:	7933      	ldrb	r3, [r6, #4]
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d001      	beq.n	80107d4 <uxr_deserialize_ObjectVariant+0x50>
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	d1ec      	bne.n	80107ae <uxr_deserialize_ObjectVariant+0x2a>
 80107d4:	68b1      	ldr	r1, [r6, #8]
 80107d6:	4628      	mov	r0, r5
 80107d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107e0:	f004 bd90 	b.w	8015304 <ucdr_deserialize_string>
 80107e4:	1d31      	adds	r1, r6, #4
 80107e6:	4628      	mov	r0, r5
 80107e8:	f7fc f82e 	bl	800c848 <ucdr_deserialize_uint8_t>
 80107ec:	4604      	mov	r4, r0
 80107ee:	b170      	cbz	r0, 801080e <uxr_deserialize_ObjectVariant+0x8a>
 80107f0:	7933      	ldrb	r3, [r6, #4]
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d04c      	beq.n	8010890 <uxr_deserialize_ObjectVariant+0x10c>
 80107f6:	2b03      	cmp	r3, #3
 80107f8:	d109      	bne.n	801080e <uxr_deserialize_ObjectVariant+0x8a>
 80107fa:	f106 0308 	add.w	r3, r6, #8
 80107fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010802:	f106 010c 	add.w	r1, r6, #12
 8010806:	4628      	mov	r0, r5
 8010808:	f004 fd52 	bl	80152b0 <ucdr_deserialize_sequence_uint8_t>
 801080c:	4604      	mov	r4, r0
 801080e:	2202      	movs	r2, #2
 8010810:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010814:	4628      	mov	r0, r5
 8010816:	f004 fca9 	bl	801516c <ucdr_deserialize_array_uint8_t>
 801081a:	4020      	ands	r0, r4
 801081c:	b2c4      	uxtb	r4, r0
 801081e:	e7c6      	b.n	80107ae <uxr_deserialize_ObjectVariant+0x2a>
 8010820:	1d31      	adds	r1, r6, #4
 8010822:	4628      	mov	r0, r5
 8010824:	f7fc f810 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010828:	4604      	mov	r4, r0
 801082a:	b130      	cbz	r0, 801083a <uxr_deserialize_ObjectVariant+0xb6>
 801082c:	7933      	ldrb	r3, [r6, #4]
 801082e:	2b02      	cmp	r3, #2
 8010830:	d036      	beq.n	80108a0 <uxr_deserialize_ObjectVariant+0x11c>
 8010832:	2b03      	cmp	r3, #3
 8010834:	d03c      	beq.n	80108b0 <uxr_deserialize_ObjectVariant+0x12c>
 8010836:	2b01      	cmp	r3, #1
 8010838:	d032      	beq.n	80108a0 <uxr_deserialize_ObjectVariant+0x11c>
 801083a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801083e:	4628      	mov	r0, r5
 8010840:	f7fc fda8 	bl	800d394 <ucdr_deserialize_int16_t>
 8010844:	4020      	ands	r0, r4
 8010846:	b2c4      	uxtb	r4, r0
 8010848:	e7b1      	b.n	80107ae <uxr_deserialize_ObjectVariant+0x2a>
 801084a:	1d31      	adds	r1, r6, #4
 801084c:	4628      	mov	r0, r5
 801084e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010852:	f7ff bcab 	b.w	80101ac <uxr_deserialize_CLIENT_Representation>
 8010856:	2204      	movs	r2, #4
 8010858:	18b1      	adds	r1, r6, r2
 801085a:	4628      	mov	r0, r5
 801085c:	f004 fc86 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010860:	2202      	movs	r2, #2
 8010862:	f106 0108 	add.w	r1, r6, #8
 8010866:	4604      	mov	r4, r0
 8010868:	4628      	mov	r0, r5
 801086a:	f004 fc7f 	bl	801516c <ucdr_deserialize_array_uint8_t>
 801086e:	2202      	movs	r2, #2
 8010870:	4004      	ands	r4, r0
 8010872:	f106 010a 	add.w	r1, r6, #10
 8010876:	4628      	mov	r0, r5
 8010878:	f004 fc78 	bl	801516c <ucdr_deserialize_array_uint8_t>
 801087c:	b2e4      	uxtb	r4, r4
 801087e:	4603      	mov	r3, r0
 8010880:	f106 010c 	add.w	r1, r6, #12
 8010884:	4628      	mov	r0, r5
 8010886:	401c      	ands	r4, r3
 8010888:	f7fb ffb0 	bl	800c7ec <ucdr_deserialize_bool>
 801088c:	4004      	ands	r4, r0
 801088e:	e78e      	b.n	80107ae <uxr_deserialize_ObjectVariant+0x2a>
 8010890:	68b1      	ldr	r1, [r6, #8]
 8010892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010896:	4628      	mov	r0, r5
 8010898:	f004 fd34 	bl	8015304 <ucdr_deserialize_string>
 801089c:	4604      	mov	r4, r0
 801089e:	e7b6      	b.n	801080e <uxr_deserialize_ObjectVariant+0x8a>
 80108a0:	68b1      	ldr	r1, [r6, #8]
 80108a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108a6:	4628      	mov	r0, r5
 80108a8:	f004 fd2c 	bl	8015304 <ucdr_deserialize_string>
 80108ac:	4604      	mov	r4, r0
 80108ae:	e7c4      	b.n	801083a <uxr_deserialize_ObjectVariant+0xb6>
 80108b0:	f106 0308 	add.w	r3, r6, #8
 80108b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108b8:	f106 010c 	add.w	r1, r6, #12
 80108bc:	4628      	mov	r0, r5
 80108be:	f004 fcf7 	bl	80152b0 <ucdr_deserialize_sequence_uint8_t>
 80108c2:	4604      	mov	r4, r0
 80108c4:	e7b9      	b.n	801083a <uxr_deserialize_ObjectVariant+0xb6>
 80108c6:	bf00      	nop

080108c8 <uxr_deserialize_BaseObjectRequest>:
 80108c8:	b570      	push	{r4, r5, r6, lr}
 80108ca:	2202      	movs	r2, #2
 80108cc:	4605      	mov	r5, r0
 80108ce:	460e      	mov	r6, r1
 80108d0:	f004 fc4c 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80108d4:	2202      	movs	r2, #2
 80108d6:	4604      	mov	r4, r0
 80108d8:	18b1      	adds	r1, r6, r2
 80108da:	4628      	mov	r0, r5
 80108dc:	f004 fc46 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80108e0:	4020      	ands	r0, r4
 80108e2:	b2c0      	uxtb	r0, r0
 80108e4:	bd70      	pop	{r4, r5, r6, pc}
 80108e6:	bf00      	nop

080108e8 <uxr_serialize_ActivityInfoVariant>:
 80108e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ec:	460d      	mov	r5, r1
 80108ee:	7809      	ldrb	r1, [r1, #0]
 80108f0:	4607      	mov	r7, r0
 80108f2:	f7fb ff93 	bl	800c81c <ucdr_serialize_uint8_t>
 80108f6:	4681      	mov	r9, r0
 80108f8:	b138      	cbz	r0, 801090a <uxr_serialize_ActivityInfoVariant+0x22>
 80108fa:	782b      	ldrb	r3, [r5, #0]
 80108fc:	2b06      	cmp	r3, #6
 80108fe:	f000 8082 	beq.w	8010a06 <uxr_serialize_ActivityInfoVariant+0x11e>
 8010902:	2b0d      	cmp	r3, #13
 8010904:	d016      	beq.n	8010934 <uxr_serialize_ActivityInfoVariant+0x4c>
 8010906:	2b05      	cmp	r3, #5
 8010908:	d002      	beq.n	8010910 <uxr_serialize_ActivityInfoVariant+0x28>
 801090a:	4648      	mov	r0, r9
 801090c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010910:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010914:	4638      	mov	r0, r7
 8010916:	f7fc fcbd 	bl	800d294 <ucdr_serialize_int16_t>
 801091a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801091e:	4681      	mov	r9, r0
 8010920:	4638      	mov	r0, r7
 8010922:	f7fc fbe7 	bl	800d0f4 <ucdr_serialize_uint64_t>
 8010926:	ea09 0000 	and.w	r0, r9, r0
 801092a:	fa5f f980 	uxtb.w	r9, r0
 801092e:	4648      	mov	r0, r9
 8010930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010934:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010938:	4638      	mov	r0, r7
 801093a:	f7fc fcab 	bl	800d294 <ucdr_serialize_int16_t>
 801093e:	68e9      	ldr	r1, [r5, #12]
 8010940:	4681      	mov	r9, r0
 8010942:	4638      	mov	r0, r7
 8010944:	f7fc f980 	bl	800cc48 <ucdr_serialize_uint32_t>
 8010948:	68eb      	ldr	r3, [r5, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d0eb      	beq.n	8010926 <uxr_serialize_ActivityInfoVariant+0x3e>
 801094e:	b320      	cbz	r0, 801099a <uxr_serialize_ActivityInfoVariant+0xb2>
 8010950:	f105 080c 	add.w	r8, r5, #12
 8010954:	2600      	movs	r6, #0
 8010956:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801095a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801095e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8010962:	4638      	mov	r0, r7
 8010964:	f7fb ff5a 	bl	800c81c <ucdr_serialize_uint8_t>
 8010968:	2800      	cmp	r0, #0
 801096a:	d053      	beq.n	8010a14 <uxr_serialize_ActivityInfoVariant+0x12c>
 801096c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8010970:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8010974:	0074      	lsls	r4, r6, #1
 8010976:	00c9      	lsls	r1, r1, #3
 8010978:	2b03      	cmp	r3, #3
 801097a:	d854      	bhi.n	8010a26 <uxr_serialize_ActivityInfoVariant+0x13e>
 801097c:	e8df f003 	tbb	[pc, r3]
 8010980:	02102132 	.word	0x02102132
 8010984:	4441      	add	r1, r8
 8010986:	4638      	mov	r0, r7
 8010988:	6889      	ldr	r1, [r1, #8]
 801098a:	f004 fcab 	bl	80152e4 <ucdr_serialize_string>
 801098e:	68ea      	ldr	r2, [r5, #12]
 8010990:	3601      	adds	r6, #1
 8010992:	4296      	cmp	r6, r2
 8010994:	d242      	bcs.n	8010a1c <uxr_serialize_ActivityInfoVariant+0x134>
 8010996:	2800      	cmp	r0, #0
 8010998:	d1dd      	bne.n	8010956 <uxr_serialize_ActivityInfoVariant+0x6e>
 801099a:	f04f 0900 	mov.w	r9, #0
 801099e:	e7b4      	b.n	801090a <uxr_serialize_ActivityInfoVariant+0x22>
 80109a0:	3108      	adds	r1, #8
 80109a2:	4441      	add	r1, r8
 80109a4:	2210      	movs	r2, #16
 80109a6:	4638      	mov	r0, r7
 80109a8:	f004 fb7c 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 80109ac:	4434      	add	r4, r6
 80109ae:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80109b2:	4604      	mov	r4, r0
 80109b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80109b6:	4638      	mov	r0, r7
 80109b8:	f7fc f946 	bl	800cc48 <ucdr_serialize_uint32_t>
 80109bc:	4020      	ands	r0, r4
 80109be:	b2c0      	uxtb	r0, r0
 80109c0:	e7e5      	b.n	801098e <uxr_serialize_ActivityInfoVariant+0xa6>
 80109c2:	3108      	adds	r1, #8
 80109c4:	4441      	add	r1, r8
 80109c6:	2204      	movs	r2, #4
 80109c8:	4638      	mov	r0, r7
 80109ca:	f004 fb6b 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 80109ce:	4434      	add	r4, r6
 80109d0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80109d4:	4604      	mov	r4, r0
 80109d6:	8b19      	ldrh	r1, [r3, #24]
 80109d8:	4638      	mov	r0, r7
 80109da:	f7fb ff4b 	bl	800c874 <ucdr_serialize_uint16_t>
 80109de:	4020      	ands	r0, r4
 80109e0:	b2c0      	uxtb	r0, r0
 80109e2:	e7d4      	b.n	801098e <uxr_serialize_ActivityInfoVariant+0xa6>
 80109e4:	3108      	adds	r1, #8
 80109e6:	4441      	add	r1, r8
 80109e8:	2202      	movs	r2, #2
 80109ea:	4638      	mov	r0, r7
 80109ec:	f004 fb5a 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 80109f0:	4434      	add	r4, r6
 80109f2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80109f6:	4604      	mov	r4, r0
 80109f8:	7d99      	ldrb	r1, [r3, #22]
 80109fa:	4638      	mov	r0, r7
 80109fc:	f7fb ff0e 	bl	800c81c <ucdr_serialize_uint8_t>
 8010a00:	4020      	ands	r0, r4
 8010a02:	b2c0      	uxtb	r0, r0
 8010a04:	e7c3      	b.n	801098e <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a06:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010a0a:	4638      	mov	r0, r7
 8010a0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a10:	f7fc bc40 	b.w	800d294 <ucdr_serialize_int16_t>
 8010a14:	68ea      	ldr	r2, [r5, #12]
 8010a16:	3601      	adds	r6, #1
 8010a18:	42b2      	cmp	r2, r6
 8010a1a:	d8be      	bhi.n	801099a <uxr_serialize_ActivityInfoVariant+0xb2>
 8010a1c:	ea09 0900 	and.w	r9, r9, r0
 8010a20:	fa5f f989 	uxtb.w	r9, r9
 8010a24:	e771      	b.n	801090a <uxr_serialize_ActivityInfoVariant+0x22>
 8010a26:	68eb      	ldr	r3, [r5, #12]
 8010a28:	3601      	adds	r6, #1
 8010a2a:	429e      	cmp	r6, r3
 8010a2c:	f10a 0a18 	add.w	sl, sl, #24
 8010a30:	d395      	bcc.n	801095e <uxr_serialize_ActivityInfoVariant+0x76>
 8010a32:	e76a      	b.n	801090a <uxr_serialize_ActivityInfoVariant+0x22>

08010a34 <uxr_deserialize_BaseObjectReply>:
 8010a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a38:	2202      	movs	r2, #2
 8010a3a:	4606      	mov	r6, r0
 8010a3c:	460f      	mov	r7, r1
 8010a3e:	f004 fb95 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010a42:	2202      	movs	r2, #2
 8010a44:	18b9      	adds	r1, r7, r2
 8010a46:	4605      	mov	r5, r0
 8010a48:	4630      	mov	r0, r6
 8010a4a:	f004 fb8f 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010a4e:	1d39      	adds	r1, r7, #4
 8010a50:	4680      	mov	r8, r0
 8010a52:	4630      	mov	r0, r6
 8010a54:	f7fb fef8 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010a58:	1d79      	adds	r1, r7, #5
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	f7fb fef3 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010a62:	ea05 0508 	and.w	r5, r5, r8
 8010a66:	402c      	ands	r4, r5
 8010a68:	4020      	ands	r0, r4
 8010a6a:	b2c0      	uxtb	r0, r0
 8010a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a70 <uxr_serialize_ReadSpecification>:
 8010a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a74:	460e      	mov	r6, r1
 8010a76:	7809      	ldrb	r1, [r1, #0]
 8010a78:	4607      	mov	r7, r0
 8010a7a:	f7fb fecf 	bl	800c81c <ucdr_serialize_uint8_t>
 8010a7e:	7871      	ldrb	r1, [r6, #1]
 8010a80:	4604      	mov	r4, r0
 8010a82:	4638      	mov	r0, r7
 8010a84:	f7fb feca 	bl	800c81c <ucdr_serialize_uint8_t>
 8010a88:	78b1      	ldrb	r1, [r6, #2]
 8010a8a:	4004      	ands	r4, r0
 8010a8c:	4638      	mov	r0, r7
 8010a8e:	f7fb fe97 	bl	800c7c0 <ucdr_serialize_bool>
 8010a92:	78b3      	ldrb	r3, [r6, #2]
 8010a94:	b2e4      	uxtb	r4, r4
 8010a96:	4004      	ands	r4, r0
 8010a98:	b94b      	cbnz	r3, 8010aae <uxr_serialize_ReadSpecification+0x3e>
 8010a9a:	7a31      	ldrb	r1, [r6, #8]
 8010a9c:	4638      	mov	r0, r7
 8010a9e:	f7fb fe8f 	bl	800c7c0 <ucdr_serialize_bool>
 8010aa2:	7a33      	ldrb	r3, [r6, #8]
 8010aa4:	4004      	ands	r4, r0
 8010aa6:	b943      	cbnz	r3, 8010aba <uxr_serialize_ReadSpecification+0x4a>
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aae:	6871      	ldr	r1, [r6, #4]
 8010ab0:	4638      	mov	r0, r7
 8010ab2:	f004 fc17 	bl	80152e4 <ucdr_serialize_string>
 8010ab6:	4004      	ands	r4, r0
 8010ab8:	e7ef      	b.n	8010a9a <uxr_serialize_ReadSpecification+0x2a>
 8010aba:	8971      	ldrh	r1, [r6, #10]
 8010abc:	4638      	mov	r0, r7
 8010abe:	f7fb fed9 	bl	800c874 <ucdr_serialize_uint16_t>
 8010ac2:	89b1      	ldrh	r1, [r6, #12]
 8010ac4:	4605      	mov	r5, r0
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	f7fb fed4 	bl	800c874 <ucdr_serialize_uint16_t>
 8010acc:	89f1      	ldrh	r1, [r6, #14]
 8010ace:	4005      	ands	r5, r0
 8010ad0:	4638      	mov	r0, r7
 8010ad2:	f7fb fecf 	bl	800c874 <ucdr_serialize_uint16_t>
 8010ad6:	8a31      	ldrh	r1, [r6, #16]
 8010ad8:	4680      	mov	r8, r0
 8010ada:	4638      	mov	r0, r7
 8010adc:	f7fb feca 	bl	800c874 <ucdr_serialize_uint16_t>
 8010ae0:	b2ed      	uxtb	r5, r5
 8010ae2:	4025      	ands	r5, r4
 8010ae4:	ea08 0505 	and.w	r5, r8, r5
 8010ae8:	ea00 0405 	and.w	r4, r0, r5
 8010aec:	4620      	mov	r0, r4
 8010aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010af2:	bf00      	nop

08010af4 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010af4:	f7ff bb02 	b.w	80100fc <uxr_serialize_CLIENT_Representation>

08010af8 <uxr_serialize_CREATE_Payload>:
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	2202      	movs	r2, #2
 8010afc:	4607      	mov	r7, r0
 8010afe:	460e      	mov	r6, r1
 8010b00:	f004 fad0 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010b04:	2202      	movs	r2, #2
 8010b06:	18b1      	adds	r1, r6, r2
 8010b08:	4605      	mov	r5, r0
 8010b0a:	4638      	mov	r0, r7
 8010b0c:	f004 faca 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010b10:	7931      	ldrb	r1, [r6, #4]
 8010b12:	4604      	mov	r4, r0
 8010b14:	4638      	mov	r0, r7
 8010b16:	f7fb fe81 	bl	800c81c <ucdr_serialize_uint8_t>
 8010b1a:	b170      	cbz	r0, 8010b3a <uxr_serialize_CREATE_Payload+0x42>
 8010b1c:	7933      	ldrb	r3, [r6, #4]
 8010b1e:	402c      	ands	r4, r5
 8010b20:	3b01      	subs	r3, #1
 8010b22:	b2e4      	uxtb	r4, r4
 8010b24:	2b0d      	cmp	r3, #13
 8010b26:	d809      	bhi.n	8010b3c <uxr_serialize_CREATE_Payload+0x44>
 8010b28:	e8df f003 	tbb	[pc, r3]
 8010b2c:	23230a4c 	.word	0x23230a4c
 8010b30:	0a0a0a0a 	.word	0x0a0a0a0a
 8010b34:	12121208 	.word	0x12121208
 8010b38:	3e45      	.short	0x3e45
 8010b3a:	2400      	movs	r4, #0
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b40:	f106 0108 	add.w	r1, r6, #8
 8010b44:	4638      	mov	r0, r7
 8010b46:	f7ff fbdf 	bl	8010308 <uxr_serialize_DATAWRITER_Representation>
 8010b4a:	4004      	ands	r4, r0
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b50:	7a31      	ldrb	r1, [r6, #8]
 8010b52:	4638      	mov	r0, r7
 8010b54:	f7fb fe62 	bl	800c81c <ucdr_serialize_uint8_t>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	d0ee      	beq.n	8010b3a <uxr_serialize_CREATE_Payload+0x42>
 8010b5c:	7a33      	ldrb	r3, [r6, #8]
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d001      	beq.n	8010b66 <uxr_serialize_CREATE_Payload+0x6e>
 8010b62:	2b02      	cmp	r3, #2
 8010b64:	d1ea      	bne.n	8010b3c <uxr_serialize_CREATE_Payload+0x44>
 8010b66:	68f1      	ldr	r1, [r6, #12]
 8010b68:	4638      	mov	r0, r7
 8010b6a:	f004 fbbb 	bl	80152e4 <ucdr_serialize_string>
 8010b6e:	4004      	ands	r4, r0
 8010b70:	e7e4      	b.n	8010b3c <uxr_serialize_CREATE_Payload+0x44>
 8010b72:	7a31      	ldrb	r1, [r6, #8]
 8010b74:	4638      	mov	r0, r7
 8010b76:	f7fb fe51 	bl	800c81c <ucdr_serialize_uint8_t>
 8010b7a:	4605      	mov	r5, r0
 8010b7c:	b158      	cbz	r0, 8010b96 <uxr_serialize_CREATE_Payload+0x9e>
 8010b7e:	7a33      	ldrb	r3, [r6, #8]
 8010b80:	2b02      	cmp	r3, #2
 8010b82:	d034      	beq.n	8010bee <uxr_serialize_CREATE_Payload+0xf6>
 8010b84:	2b03      	cmp	r3, #3
 8010b86:	d106      	bne.n	8010b96 <uxr_serialize_CREATE_Payload+0x9e>
 8010b88:	68f2      	ldr	r2, [r6, #12]
 8010b8a:	f106 0110 	add.w	r1, r6, #16
 8010b8e:	4638      	mov	r0, r7
 8010b90:	f004 fb7c 	bl	801528c <ucdr_serialize_sequence_uint8_t>
 8010b94:	4605      	mov	r5, r0
 8010b96:	2202      	movs	r2, #2
 8010b98:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010b9c:	4638      	mov	r0, r7
 8010b9e:	f004 fa81 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010ba2:	4028      	ands	r0, r5
 8010ba4:	4004      	ands	r4, r0
 8010ba6:	e7c9      	b.n	8010b3c <uxr_serialize_CREATE_Payload+0x44>
 8010ba8:	f106 0108 	add.w	r1, r6, #8
 8010bac:	4638      	mov	r0, r7
 8010bae:	f7ff faa5 	bl	80100fc <uxr_serialize_CLIENT_Representation>
 8010bb2:	4004      	ands	r4, r0
 8010bb4:	e7c2      	b.n	8010b3c <uxr_serialize_CREATE_Payload+0x44>
 8010bb6:	f106 0108 	add.w	r1, r6, #8
 8010bba:	4638      	mov	r0, r7
 8010bbc:	f7ff fb5a 	bl	8010274 <uxr_serialize_AGENT_Representation>
 8010bc0:	4004      	ands	r4, r0
 8010bc2:	e7bb      	b.n	8010b3c <uxr_serialize_CREATE_Payload+0x44>
 8010bc4:	7a31      	ldrb	r1, [r6, #8]
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	f7fb fe28 	bl	800c81c <ucdr_serialize_uint8_t>
 8010bcc:	4605      	mov	r5, r0
 8010bce:	b130      	cbz	r0, 8010bde <uxr_serialize_CREATE_Payload+0xe6>
 8010bd0:	7a33      	ldrb	r3, [r6, #8]
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d011      	beq.n	8010bfa <uxr_serialize_CREATE_Payload+0x102>
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	d015      	beq.n	8010c06 <uxr_serialize_CREATE_Payload+0x10e>
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d00d      	beq.n	8010bfa <uxr_serialize_CREATE_Payload+0x102>
 8010bde:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8010be2:	4638      	mov	r0, r7
 8010be4:	f7fc fb56 	bl	800d294 <ucdr_serialize_int16_t>
 8010be8:	4028      	ands	r0, r5
 8010bea:	4004      	ands	r4, r0
 8010bec:	e7a6      	b.n	8010b3c <uxr_serialize_CREATE_Payload+0x44>
 8010bee:	68f1      	ldr	r1, [r6, #12]
 8010bf0:	4638      	mov	r0, r7
 8010bf2:	f004 fb77 	bl	80152e4 <ucdr_serialize_string>
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	e7cd      	b.n	8010b96 <uxr_serialize_CREATE_Payload+0x9e>
 8010bfa:	68f1      	ldr	r1, [r6, #12]
 8010bfc:	4638      	mov	r0, r7
 8010bfe:	f004 fb71 	bl	80152e4 <ucdr_serialize_string>
 8010c02:	4605      	mov	r5, r0
 8010c04:	e7eb      	b.n	8010bde <uxr_serialize_CREATE_Payload+0xe6>
 8010c06:	68f2      	ldr	r2, [r6, #12]
 8010c08:	f106 0110 	add.w	r1, r6, #16
 8010c0c:	4638      	mov	r0, r7
 8010c0e:	f004 fb3d 	bl	801528c <ucdr_serialize_sequence_uint8_t>
 8010c12:	4605      	mov	r5, r0
 8010c14:	e7e3      	b.n	8010bde <uxr_serialize_CREATE_Payload+0xe6>
 8010c16:	bf00      	nop

08010c18 <uxr_deserialize_GET_INFO_Payload>:
 8010c18:	b570      	push	{r4, r5, r6, lr}
 8010c1a:	2202      	movs	r2, #2
 8010c1c:	4605      	mov	r5, r0
 8010c1e:	460e      	mov	r6, r1
 8010c20:	f004 faa4 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010c24:	2202      	movs	r2, #2
 8010c26:	18b1      	adds	r1, r6, r2
 8010c28:	4604      	mov	r4, r0
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	f004 fa9e 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010c30:	1d31      	adds	r1, r6, #4
 8010c32:	4004      	ands	r4, r0
 8010c34:	4628      	mov	r0, r5
 8010c36:	f7fc f937 	bl	800cea8 <ucdr_deserialize_uint32_t>
 8010c3a:	b2e4      	uxtb	r4, r4
 8010c3c:	4020      	ands	r0, r4
 8010c3e:	bd70      	pop	{r4, r5, r6, pc}

08010c40 <uxr_serialize_DELETE_Payload>:
 8010c40:	b570      	push	{r4, r5, r6, lr}
 8010c42:	2202      	movs	r2, #2
 8010c44:	4605      	mov	r5, r0
 8010c46:	460e      	mov	r6, r1
 8010c48:	f004 fa2c 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010c4c:	2202      	movs	r2, #2
 8010c4e:	4604      	mov	r4, r0
 8010c50:	18b1      	adds	r1, r6, r2
 8010c52:	4628      	mov	r0, r5
 8010c54:	f004 fa26 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010c58:	4020      	ands	r0, r4
 8010c5a:	b2c0      	uxtb	r0, r0
 8010c5c:	bd70      	pop	{r4, r5, r6, pc}
 8010c5e:	bf00      	nop

08010c60 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c64:	4605      	mov	r5, r0
 8010c66:	460e      	mov	r6, r1
 8010c68:	f7fb fdee 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010c6c:	1c71      	adds	r1, r6, #1
 8010c6e:	4604      	mov	r4, r0
 8010c70:	4628      	mov	r0, r5
 8010c72:	f7fb fde9 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010c76:	2204      	movs	r2, #4
 8010c78:	18b1      	adds	r1, r6, r2
 8010c7a:	4680      	mov	r8, r0
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	f004 fa75 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010c82:	f106 0108 	add.w	r1, r6, #8
 8010c86:	4607      	mov	r7, r0
 8010c88:	2202      	movs	r2, #2
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	f004 fa6e 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010c90:	ea04 0308 	and.w	r3, r4, r8
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	ea03 0407 	and.w	r4, r3, r7
 8010c9a:	2202      	movs	r2, #2
 8010c9c:	4607      	mov	r7, r0
 8010c9e:	f106 010a 	add.w	r1, r6, #10
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	f004 fa62 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010ca8:	f106 010c 	add.w	r1, r6, #12
 8010cac:	4603      	mov	r3, r0
 8010cae:	4628      	mov	r0, r5
 8010cb0:	461d      	mov	r5, r3
 8010cb2:	f7fb fd9b 	bl	800c7ec <ucdr_deserialize_bool>
 8010cb6:	403c      	ands	r4, r7
 8010cb8:	4025      	ands	r5, r4
 8010cba:	4028      	ands	r0, r5
 8010cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010cc0 <uxr_deserialize_STATUS_Payload>:
 8010cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc4:	2202      	movs	r2, #2
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	460f      	mov	r7, r1
 8010cca:	f004 fa4f 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010cce:	2202      	movs	r2, #2
 8010cd0:	18b9      	adds	r1, r7, r2
 8010cd2:	4605      	mov	r5, r0
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	f004 fa49 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010cda:	1d39      	adds	r1, r7, #4
 8010cdc:	4680      	mov	r8, r0
 8010cde:	4630      	mov	r0, r6
 8010ce0:	f7fb fdb2 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010ce4:	1d79      	adds	r1, r7, #5
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	4630      	mov	r0, r6
 8010cea:	f7fb fdad 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010cee:	ea05 0508 	and.w	r5, r5, r8
 8010cf2:	402c      	ands	r4, r5
 8010cf4:	4020      	ands	r0, r4
 8010cf6:	b2c0      	uxtb	r0, r0
 8010cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010cfc <uxr_serialize_INFO_Payload>:
 8010cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d00:	2202      	movs	r2, #2
 8010d02:	460c      	mov	r4, r1
 8010d04:	4605      	mov	r5, r0
 8010d06:	f004 f9cd 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	18a1      	adds	r1, r4, r2
 8010d0e:	4680      	mov	r8, r0
 8010d10:	4628      	mov	r0, r5
 8010d12:	f004 f9c7 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010d16:	7921      	ldrb	r1, [r4, #4]
 8010d18:	4607      	mov	r7, r0
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	f7fb fd7e 	bl	800c81c <ucdr_serialize_uint8_t>
 8010d20:	7961      	ldrb	r1, [r4, #5]
 8010d22:	4606      	mov	r6, r0
 8010d24:	4628      	mov	r0, r5
 8010d26:	f7fb fd79 	bl	800c81c <ucdr_serialize_uint8_t>
 8010d2a:	ea08 0807 	and.w	r8, r8, r7
 8010d2e:	ea06 0608 	and.w	r6, r6, r8
 8010d32:	4006      	ands	r6, r0
 8010d34:	7a21      	ldrb	r1, [r4, #8]
 8010d36:	4628      	mov	r0, r5
 8010d38:	f7fb fd42 	bl	800c7c0 <ucdr_serialize_bool>
 8010d3c:	7a23      	ldrb	r3, [r4, #8]
 8010d3e:	b2f7      	uxtb	r7, r6
 8010d40:	4606      	mov	r6, r0
 8010d42:	b96b      	cbnz	r3, 8010d60 <uxr_serialize_INFO_Payload+0x64>
 8010d44:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010d48:	4628      	mov	r0, r5
 8010d4a:	f7fb fd39 	bl	800c7c0 <ucdr_serialize_bool>
 8010d4e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010d52:	4030      	ands	r0, r6
 8010d54:	b2c6      	uxtb	r6, r0
 8010d56:	b983      	cbnz	r3, 8010d7a <uxr_serialize_INFO_Payload+0x7e>
 8010d58:	ea06 0007 	and.w	r0, r6, r7
 8010d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d60:	7b21      	ldrb	r1, [r4, #12]
 8010d62:	4628      	mov	r0, r5
 8010d64:	f7fb fd5a 	bl	800c81c <ucdr_serialize_uint8_t>
 8010d68:	b188      	cbz	r0, 8010d8e <uxr_serialize_INFO_Payload+0x92>
 8010d6a:	f104 010c 	add.w	r1, r4, #12
 8010d6e:	4628      	mov	r0, r5
 8010d70:	f7ff faf2 	bl	8010358 <uxr_serialize_ObjectVariant.part.0>
 8010d74:	4030      	ands	r0, r6
 8010d76:	b2c6      	uxtb	r6, r0
 8010d78:	e7e4      	b.n	8010d44 <uxr_serialize_INFO_Payload+0x48>
 8010d7a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f7ff fdb2 	bl	80108e8 <uxr_serialize_ActivityInfoVariant>
 8010d84:	4006      	ands	r6, r0
 8010d86:	ea06 0007 	and.w	r0, r6, r7
 8010d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8e:	4606      	mov	r6, r0
 8010d90:	e7d8      	b.n	8010d44 <uxr_serialize_INFO_Payload+0x48>
 8010d92:	bf00      	nop

08010d94 <uxr_serialize_READ_DATA_Payload>:
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	2202      	movs	r2, #2
 8010d98:	4605      	mov	r5, r0
 8010d9a:	460e      	mov	r6, r1
 8010d9c:	f004 f982 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010da0:	2202      	movs	r2, #2
 8010da2:	18b1      	adds	r1, r6, r2
 8010da4:	4604      	mov	r4, r0
 8010da6:	4628      	mov	r0, r5
 8010da8:	f004 f97c 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010dac:	1d31      	adds	r1, r6, #4
 8010dae:	4004      	ands	r4, r0
 8010db0:	4628      	mov	r0, r5
 8010db2:	f7ff fe5d 	bl	8010a70 <uxr_serialize_ReadSpecification>
 8010db6:	b2e4      	uxtb	r4, r4
 8010db8:	4020      	ands	r0, r4
 8010dba:	bd70      	pop	{r4, r5, r6, pc}

08010dbc <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010dbc:	b570      	push	{r4, r5, r6, lr}
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	460e      	mov	r6, r1
 8010dc4:	f004 f96e 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010dc8:	2202      	movs	r2, #2
 8010dca:	4604      	mov	r4, r0
 8010dcc:	18b1      	adds	r1, r6, r2
 8010dce:	4628      	mov	r0, r5
 8010dd0:	f004 f968 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010dd4:	4020      	ands	r0, r4
 8010dd6:	b2c0      	uxtb	r0, r0
 8010dd8:	bd70      	pop	{r4, r5, r6, pc}
 8010dda:	bf00      	nop

08010ddc <uxr_serialize_ACKNACK_Payload>:
 8010ddc:	b570      	push	{r4, r5, r6, lr}
 8010dde:	460c      	mov	r4, r1
 8010de0:	460e      	mov	r6, r1
 8010de2:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010de6:	4605      	mov	r5, r0
 8010de8:	f7fb fd44 	bl	800c874 <ucdr_serialize_uint16_t>
 8010dec:	2202      	movs	r2, #2
 8010dee:	4621      	mov	r1, r4
 8010df0:	4604      	mov	r4, r0
 8010df2:	4628      	mov	r0, r5
 8010df4:	f004 f956 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010df8:	7931      	ldrb	r1, [r6, #4]
 8010dfa:	4004      	ands	r4, r0
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	f7fb fd0d 	bl	800c81c <ucdr_serialize_uint8_t>
 8010e02:	b2e4      	uxtb	r4, r4
 8010e04:	4020      	ands	r0, r4
 8010e06:	bd70      	pop	{r4, r5, r6, pc}

08010e08 <uxr_deserialize_ACKNACK_Payload>:
 8010e08:	b570      	push	{r4, r5, r6, lr}
 8010e0a:	4605      	mov	r5, r0
 8010e0c:	460e      	mov	r6, r1
 8010e0e:	f7fb fe31 	bl	800ca74 <ucdr_deserialize_uint16_t>
 8010e12:	2202      	movs	r2, #2
 8010e14:	18b1      	adds	r1, r6, r2
 8010e16:	4604      	mov	r4, r0
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f004 f9a7 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010e1e:	1d31      	adds	r1, r6, #4
 8010e20:	4004      	ands	r4, r0
 8010e22:	4628      	mov	r0, r5
 8010e24:	f7fb fd10 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010e28:	b2e4      	uxtb	r4, r4
 8010e2a:	4020      	ands	r0, r4
 8010e2c:	bd70      	pop	{r4, r5, r6, pc}
 8010e2e:	bf00      	nop

08010e30 <uxr_serialize_HEARTBEAT_Payload>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	460d      	mov	r5, r1
 8010e34:	8809      	ldrh	r1, [r1, #0]
 8010e36:	4606      	mov	r6, r0
 8010e38:	f7fb fd1c 	bl	800c874 <ucdr_serialize_uint16_t>
 8010e3c:	8869      	ldrh	r1, [r5, #2]
 8010e3e:	4604      	mov	r4, r0
 8010e40:	4630      	mov	r0, r6
 8010e42:	f7fb fd17 	bl	800c874 <ucdr_serialize_uint16_t>
 8010e46:	7929      	ldrb	r1, [r5, #4]
 8010e48:	4004      	ands	r4, r0
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f7fb fce6 	bl	800c81c <ucdr_serialize_uint8_t>
 8010e50:	b2e4      	uxtb	r4, r4
 8010e52:	4020      	ands	r0, r4
 8010e54:	bd70      	pop	{r4, r5, r6, pc}
 8010e56:	bf00      	nop

08010e58 <uxr_deserialize_HEARTBEAT_Payload>:
 8010e58:	b570      	push	{r4, r5, r6, lr}
 8010e5a:	4605      	mov	r5, r0
 8010e5c:	460e      	mov	r6, r1
 8010e5e:	f7fb fe09 	bl	800ca74 <ucdr_deserialize_uint16_t>
 8010e62:	1cb1      	adds	r1, r6, #2
 8010e64:	4604      	mov	r4, r0
 8010e66:	4628      	mov	r0, r5
 8010e68:	f7fb fe04 	bl	800ca74 <ucdr_deserialize_uint16_t>
 8010e6c:	1d31      	adds	r1, r6, #4
 8010e6e:	4004      	ands	r4, r0
 8010e70:	4628      	mov	r0, r5
 8010e72:	f7fb fce9 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010e76:	b2e4      	uxtb	r4, r4
 8010e78:	4020      	ands	r0, r4
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}

08010e7c <uxr_serialize_TIMESTAMP_Payload>:
 8010e7c:	b570      	push	{r4, r5, r6, lr}
 8010e7e:	460d      	mov	r5, r1
 8010e80:	6809      	ldr	r1, [r1, #0]
 8010e82:	4606      	mov	r6, r0
 8010e84:	f7fc fafa 	bl	800d47c <ucdr_serialize_int32_t>
 8010e88:	6869      	ldr	r1, [r5, #4]
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f7fb fedb 	bl	800cc48 <ucdr_serialize_uint32_t>
 8010e92:	4020      	ands	r0, r4
 8010e94:	b2c0      	uxtb	r0, r0
 8010e96:	bd70      	pop	{r4, r5, r6, pc}

08010e98 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9c:	4605      	mov	r5, r0
 8010e9e:	460e      	mov	r6, r1
 8010ea0:	f7fc fb84 	bl	800d5ac <ucdr_deserialize_int32_t>
 8010ea4:	1d31      	adds	r1, r6, #4
 8010ea6:	4607      	mov	r7, r0
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	f7fb fffd 	bl	800cea8 <ucdr_deserialize_uint32_t>
 8010eae:	f106 0108 	add.w	r1, r6, #8
 8010eb2:	4680      	mov	r8, r0
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	f7fc fb79 	bl	800d5ac <ucdr_deserialize_int32_t>
 8010eba:	f106 010c 	add.w	r1, r6, #12
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	f7fb fff1 	bl	800cea8 <ucdr_deserialize_uint32_t>
 8010ec6:	ea07 0708 	and.w	r7, r7, r8
 8010eca:	403c      	ands	r4, r7
 8010ecc:	f106 0110 	add.w	r1, r6, #16
 8010ed0:	4004      	ands	r4, r0
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f7fc fb6a 	bl	800d5ac <ucdr_deserialize_int32_t>
 8010ed8:	f106 0114 	add.w	r1, r6, #20
 8010edc:	4607      	mov	r7, r0
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f7fb ffe2 	bl	800cea8 <ucdr_deserialize_uint32_t>
 8010ee4:	b2e4      	uxtb	r4, r4
 8010ee6:	403c      	ands	r4, r7
 8010ee8:	4020      	ands	r0, r4
 8010eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eee:	bf00      	nop

08010ef0 <uxr_serialize_SampleIdentity>:
 8010ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef4:	220c      	movs	r2, #12
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	460d      	mov	r5, r1
 8010efa:	f004 f8d3 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010efe:	2203      	movs	r2, #3
 8010f00:	f105 010c 	add.w	r1, r5, #12
 8010f04:	4607      	mov	r7, r0
 8010f06:	4620      	mov	r0, r4
 8010f08:	f004 f8cc 	bl	80150a4 <ucdr_serialize_array_uint8_t>
 8010f0c:	7be9      	ldrb	r1, [r5, #15]
 8010f0e:	4680      	mov	r8, r0
 8010f10:	4620      	mov	r0, r4
 8010f12:	f7fb fc83 	bl	800c81c <ucdr_serialize_uint8_t>
 8010f16:	6929      	ldr	r1, [r5, #16]
 8010f18:	4606      	mov	r6, r0
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	f7fc faae 	bl	800d47c <ucdr_serialize_int32_t>
 8010f20:	6969      	ldr	r1, [r5, #20]
 8010f22:	4603      	mov	r3, r0
 8010f24:	4620      	mov	r0, r4
 8010f26:	ea07 0708 	and.w	r7, r7, r8
 8010f2a:	461c      	mov	r4, r3
 8010f2c:	f7fb fe8c 	bl	800cc48 <ucdr_serialize_uint32_t>
 8010f30:	403e      	ands	r6, r7
 8010f32:	4034      	ands	r4, r6
 8010f34:	4020      	ands	r0, r4
 8010f36:	b2c0      	uxtb	r0, r0
 8010f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f3c <uxr_deserialize_SampleIdentity>:
 8010f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f40:	220c      	movs	r2, #12
 8010f42:	4604      	mov	r4, r0
 8010f44:	460d      	mov	r5, r1
 8010f46:	f004 f911 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010f4a:	2203      	movs	r2, #3
 8010f4c:	f105 010c 	add.w	r1, r5, #12
 8010f50:	4607      	mov	r7, r0
 8010f52:	4620      	mov	r0, r4
 8010f54:	f004 f90a 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8010f58:	f105 010f 	add.w	r1, r5, #15
 8010f5c:	4680      	mov	r8, r0
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7fb fc72 	bl	800c848 <ucdr_deserialize_uint8_t>
 8010f64:	f105 0110 	add.w	r1, r5, #16
 8010f68:	4606      	mov	r6, r0
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f7fc fb1e 	bl	800d5ac <ucdr_deserialize_int32_t>
 8010f70:	f105 0114 	add.w	r1, r5, #20
 8010f74:	4603      	mov	r3, r0
 8010f76:	4620      	mov	r0, r4
 8010f78:	ea07 0708 	and.w	r7, r7, r8
 8010f7c:	461c      	mov	r4, r3
 8010f7e:	f7fb ff93 	bl	800cea8 <ucdr_deserialize_uint32_t>
 8010f82:	403e      	ands	r6, r7
 8010f84:	4034      	ands	r4, r6
 8010f86:	4020      	ands	r0, r4
 8010f88:	b2c0      	uxtb	r0, r0
 8010f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f8e:	bf00      	nop

08010f90 <rcl_client_get_rmw_handle>:
 8010f90:	b118      	cbz	r0, 8010f9a <rcl_client_get_rmw_handle+0xa>
 8010f92:	6800      	ldr	r0, [r0, #0]
 8010f94:	b108      	cbz	r0, 8010f9a <rcl_client_get_rmw_handle+0xa>
 8010f96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010f9a:	4770      	bx	lr

08010f9c <rcl_send_request>:
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	b1e8      	cbz	r0, 8010fde <rcl_send_request+0x42>
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	6800      	ldr	r0, [r0, #0]
 8010fa6:	b1d0      	cbz	r0, 8010fde <rcl_send_request+0x42>
 8010fa8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8010fac:	b1bb      	cbz	r3, 8010fde <rcl_send_request+0x42>
 8010fae:	460e      	mov	r6, r1
 8010fb0:	b1d1      	cbz	r1, 8010fe8 <rcl_send_request+0x4c>
 8010fb2:	4615      	mov	r5, r2
 8010fb4:	b1c2      	cbz	r2, 8010fe8 <rcl_send_request+0x4c>
 8010fb6:	2105      	movs	r1, #5
 8010fb8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010fbc:	f002 fda4 	bl	8013b08 <__atomic_load_8>
 8010fc0:	6823      	ldr	r3, [r4, #0]
 8010fc2:	e9c5 0100 	strd	r0, r1, [r5]
 8010fc6:	462a      	mov	r2, r5
 8010fc8:	4631      	mov	r1, r6
 8010fca:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010fce:	f003 fc8f 	bl	80148f0 <rmw_send_request>
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	b160      	cbz	r0, 8010ff0 <rcl_send_request+0x54>
 8010fd6:	2601      	movs	r6, #1
 8010fd8:	4630      	mov	r0, r6
 8010fda:	b002      	add	sp, #8
 8010fdc:	bd70      	pop	{r4, r5, r6, pc}
 8010fde:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	b002      	add	sp, #8
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	260b      	movs	r6, #11
 8010fea:	4630      	mov	r0, r6
 8010fec:	b002      	add	sp, #8
 8010fee:	bd70      	pop	{r4, r5, r6, pc}
 8010ff0:	6820      	ldr	r0, [r4, #0]
 8010ff2:	2105      	movs	r1, #5
 8010ff4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ff8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010ffc:	9100      	str	r1, [sp, #0]
 8010ffe:	f002 fdef 	bl	8013be0 <__atomic_exchange_8>
 8011002:	4630      	mov	r0, r6
 8011004:	b002      	add	sp, #8
 8011006:	bd70      	pop	{r4, r5, r6, pc}

08011008 <rcl_take_response>:
 8011008:	b570      	push	{r4, r5, r6, lr}
 801100a:	468e      	mov	lr, r1
 801100c:	460c      	mov	r4, r1
 801100e:	4616      	mov	r6, r2
 8011010:	4605      	mov	r5, r0
 8011012:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011016:	b08c      	sub	sp, #48	@ 0x30
 8011018:	f10d 0c18 	add.w	ip, sp, #24
 801101c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011020:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011024:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011028:	b35d      	cbz	r5, 8011082 <rcl_take_response+0x7a>
 801102a:	682b      	ldr	r3, [r5, #0]
 801102c:	b34b      	cbz	r3, 8011082 <rcl_take_response+0x7a>
 801102e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011032:	b330      	cbz	r0, 8011082 <rcl_take_response+0x7a>
 8011034:	b346      	cbz	r6, 8011088 <rcl_take_response+0x80>
 8011036:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011090 <rcl_take_response+0x88>
 801103a:	2300      	movs	r3, #0
 801103c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011040:	4632      	mov	r2, r6
 8011042:	f10d 0307 	add.w	r3, sp, #7
 8011046:	a902      	add	r1, sp, #8
 8011048:	ed8d 7b02 	vstr	d7, [sp, #8]
 801104c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011050:	f003 fd56 	bl	8014b00 <rmw_take_response>
 8011054:	4605      	mov	r5, r0
 8011056:	b9c8      	cbnz	r0, 801108c <rcl_take_response+0x84>
 8011058:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801105c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011060:	2a00      	cmp	r2, #0
 8011062:	bf08      	it	eq
 8011064:	461d      	moveq	r5, r3
 8011066:	f10d 0e18 	add.w	lr, sp, #24
 801106a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801106e:	46a4      	mov	ip, r4
 8011070:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011074:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011078:	e88c 0003 	stmia.w	ip, {r0, r1}
 801107c:	4628      	mov	r0, r5
 801107e:	b00c      	add	sp, #48	@ 0x30
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011086:	e7ee      	b.n	8011066 <rcl_take_response+0x5e>
 8011088:	250b      	movs	r5, #11
 801108a:	e7ec      	b.n	8011066 <rcl_take_response+0x5e>
 801108c:	2501      	movs	r5, #1
 801108e:	e7ea      	b.n	8011066 <rcl_take_response+0x5e>
	...

08011098 <rcl_client_is_valid>:
 8011098:	b130      	cbz	r0, 80110a8 <rcl_client_is_valid+0x10>
 801109a:	6800      	ldr	r0, [r0, #0]
 801109c:	b120      	cbz	r0, 80110a8 <rcl_client_is_valid+0x10>
 801109e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80110a2:	3800      	subs	r0, #0
 80110a4:	bf18      	it	ne
 80110a6:	2001      	movne	r0, #1
 80110a8:	4770      	bx	lr
 80110aa:	bf00      	nop

080110ac <rcl_convert_rmw_ret_to_rcl_ret>:
 80110ac:	280b      	cmp	r0, #11
 80110ae:	dc0d      	bgt.n	80110cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	db09      	blt.n	80110c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80110b4:	280b      	cmp	r0, #11
 80110b6:	d807      	bhi.n	80110c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80110b8:	e8df f000 	tbb	[pc, r0]
 80110bc:	07060607 	.word	0x07060607
 80110c0:	06060606 	.word	0x06060606
 80110c4:	07070606 	.word	0x07070606
 80110c8:	2001      	movs	r0, #1
 80110ca:	4770      	bx	lr
 80110cc:	28cb      	cmp	r0, #203	@ 0xcb
 80110ce:	bf18      	it	ne
 80110d0:	2001      	movne	r0, #1
 80110d2:	4770      	bx	lr

080110d4 <rcl_get_zero_initialized_context>:
 80110d4:	4a03      	ldr	r2, [pc, #12]	@ (80110e4 <rcl_get_zero_initialized_context+0x10>)
 80110d6:	4603      	mov	r3, r0
 80110d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80110e0:	4618      	mov	r0, r3
 80110e2:	4770      	bx	lr
 80110e4:	0801836c 	.word	0x0801836c

080110e8 <rcl_context_is_valid>:
 80110e8:	b118      	cbz	r0, 80110f2 <rcl_context_is_valid+0xa>
 80110ea:	6840      	ldr	r0, [r0, #4]
 80110ec:	3800      	subs	r0, #0
 80110ee:	bf18      	it	ne
 80110f0:	2001      	movne	r0, #1
 80110f2:	4770      	bx	lr

080110f4 <__cleanup_context>:
 80110f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110f8:	4606      	mov	r6, r0
 80110fa:	6800      	ldr	r0, [r0, #0]
 80110fc:	2300      	movs	r3, #0
 80110fe:	6073      	str	r3, [r6, #4]
 8011100:	2800      	cmp	r0, #0
 8011102:	d049      	beq.n	8011198 <__cleanup_context+0xa4>
 8011104:	6947      	ldr	r7, [r0, #20]
 8011106:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801110a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801110e:	b137      	cbz	r7, 801111e <__cleanup_context+0x2a>
 8011110:	3014      	adds	r0, #20
 8011112:	f7f8 ffa1 	bl	800a058 <rcl_init_options_fini>
 8011116:	4607      	mov	r7, r0
 8011118:	2800      	cmp	r0, #0
 801111a:	d144      	bne.n	80111a6 <__cleanup_context+0xb2>
 801111c:	6830      	ldr	r0, [r6, #0]
 801111e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011120:	b143      	cbz	r3, 8011134 <__cleanup_context+0x40>
 8011122:	3028      	adds	r0, #40	@ 0x28
 8011124:	f7fa fb64 	bl	800b7f0 <rmw_context_fini>
 8011128:	b118      	cbz	r0, 8011132 <__cleanup_context+0x3e>
 801112a:	2f00      	cmp	r7, #0
 801112c:	d03e      	beq.n	80111ac <__cleanup_context+0xb8>
 801112e:	f7fa f897 	bl	800b260 <rcutils_reset_error>
 8011132:	6830      	ldr	r0, [r6, #0]
 8011134:	6a03      	ldr	r3, [r0, #32]
 8011136:	b1db      	cbz	r3, 8011170 <__cleanup_context+0x7c>
 8011138:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801113c:	2a01      	cmp	r2, #1
 801113e:	f17c 0100 	sbcs.w	r1, ip, #0
 8011142:	db11      	blt.n	8011168 <__cleanup_context+0x74>
 8011144:	2400      	movs	r4, #0
 8011146:	4625      	mov	r5, r4
 8011148:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801114c:	4649      	mov	r1, r9
 801114e:	b1b8      	cbz	r0, 8011180 <__cleanup_context+0x8c>
 8011150:	47c0      	blx	r8
 8011152:	6833      	ldr	r3, [r6, #0]
 8011154:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011158:	3401      	adds	r4, #1
 801115a:	f145 0500 	adc.w	r5, r5, #0
 801115e:	4294      	cmp	r4, r2
 8011160:	eb75 010c 	sbcs.w	r1, r5, ip
 8011164:	6a1b      	ldr	r3, [r3, #32]
 8011166:	dbef      	blt.n	8011148 <__cleanup_context+0x54>
 8011168:	4618      	mov	r0, r3
 801116a:	4649      	mov	r1, r9
 801116c:	47c0      	blx	r8
 801116e:	6830      	ldr	r0, [r6, #0]
 8011170:	4649      	mov	r1, r9
 8011172:	47c0      	blx	r8
 8011174:	2300      	movs	r3, #0
 8011176:	e9c6 3300 	strd	r3, r3, [r6]
 801117a:	4638      	mov	r0, r7
 801117c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011180:	3401      	adds	r4, #1
 8011182:	f145 0500 	adc.w	r5, r5, #0
 8011186:	4294      	cmp	r4, r2
 8011188:	eb75 010c 	sbcs.w	r1, r5, ip
 801118c:	dbdc      	blt.n	8011148 <__cleanup_context+0x54>
 801118e:	4618      	mov	r0, r3
 8011190:	4649      	mov	r1, r9
 8011192:	47c0      	blx	r8
 8011194:	6830      	ldr	r0, [r6, #0]
 8011196:	e7eb      	b.n	8011170 <__cleanup_context+0x7c>
 8011198:	4607      	mov	r7, r0
 801119a:	2300      	movs	r3, #0
 801119c:	e9c6 3300 	strd	r3, r3, [r6]
 80111a0:	4638      	mov	r0, r7
 80111a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111a6:	f7fa f85b 	bl	800b260 <rcutils_reset_error>
 80111aa:	e7b7      	b.n	801111c <__cleanup_context+0x28>
 80111ac:	f7ff ff7e 	bl	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 80111b0:	4607      	mov	r7, r0
 80111b2:	e7bc      	b.n	801112e <__cleanup_context+0x3a>

080111b4 <rcl_init>:
 80111b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111b8:	1e05      	subs	r5, r0, #0
 80111ba:	b09e      	sub	sp, #120	@ 0x78
 80111bc:	460e      	mov	r6, r1
 80111be:	4690      	mov	r8, r2
 80111c0:	461f      	mov	r7, r3
 80111c2:	f340 809c 	ble.w	80112fe <rcl_init+0x14a>
 80111c6:	2900      	cmp	r1, #0
 80111c8:	f000 809c 	beq.w	8011304 <rcl_init+0x150>
 80111cc:	f1a1 0e04 	sub.w	lr, r1, #4
 80111d0:	f04f 0c00 	mov.w	ip, #0
 80111d4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80111d8:	f10c 0c01 	add.w	ip, ip, #1
 80111dc:	2c00      	cmp	r4, #0
 80111de:	f000 8091 	beq.w	8011304 <rcl_init+0x150>
 80111e2:	4565      	cmp	r5, ip
 80111e4:	d1f6      	bne.n	80111d4 <rcl_init+0x20>
 80111e6:	f1b8 0f00 	cmp.w	r8, #0
 80111ea:	f000 808b 	beq.w	8011304 <rcl_init+0x150>
 80111ee:	f8d8 4000 	ldr.w	r4, [r8]
 80111f2:	2c00      	cmp	r4, #0
 80111f4:	f000 8086 	beq.w	8011304 <rcl_init+0x150>
 80111f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111fa:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80111fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011202:	6823      	ldr	r3, [r4, #0]
 8011204:	f8cc 3000 	str.w	r3, [ip]
 8011208:	a819      	add	r0, sp, #100	@ 0x64
 801120a:	f7fa f803 	bl	800b214 <rcutils_allocator_is_valid>
 801120e:	2800      	cmp	r0, #0
 8011210:	d078      	beq.n	8011304 <rcl_init+0x150>
 8011212:	2f00      	cmp	r7, #0
 8011214:	d076      	beq.n	8011304 <rcl_init+0x150>
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d178      	bne.n	801130e <rcl_init+0x15a>
 801121c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011220:	2178      	movs	r1, #120	@ 0x78
 8011222:	2001      	movs	r0, #1
 8011224:	4798      	blx	r3
 8011226:	4604      	mov	r4, r0
 8011228:	6038      	str	r0, [r7, #0]
 801122a:	2800      	cmp	r0, #0
 801122c:	f000 80b6 	beq.w	801139c <rcl_init+0x1e8>
 8011230:	a802      	add	r0, sp, #8
 8011232:	f002 ffb9 	bl	80141a8 <rmw_get_zero_initialized_context>
 8011236:	a902      	add	r1, sp, #8
 8011238:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801123c:	2250      	movs	r2, #80	@ 0x50
 801123e:	ac19      	add	r4, sp, #100	@ 0x64
 8011240:	f005 fe33 	bl	8016eaa <memcpy>
 8011244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011246:	f8d7 e000 	ldr.w	lr, [r7]
 801124a:	46f4      	mov	ip, lr
 801124c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	f8cc 3000 	str.w	r3, [ip]
 8011256:	f10e 0114 	add.w	r1, lr, #20
 801125a:	4640      	mov	r0, r8
 801125c:	f7f8 ff26 	bl	800a0ac <rcl_init_options_copy>
 8011260:	4604      	mov	r4, r0
 8011262:	2800      	cmp	r0, #0
 8011264:	d144      	bne.n	80112f0 <rcl_init+0x13c>
 8011266:	f8d7 9000 	ldr.w	r9, [r7]
 801126a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801126e:	f8c9 0020 	str.w	r0, [r9, #32]
 8011272:	f8c9 5018 	str.w	r5, [r9, #24]
 8011276:	f8c9 801c 	str.w	r8, [r9, #28]
 801127a:	2d00      	cmp	r5, #0
 801127c:	d04e      	beq.n	801131c <rcl_init+0x168>
 801127e:	2e00      	cmp	r6, #0
 8011280:	d04c      	beq.n	801131c <rcl_init+0x168>
 8011282:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011286:	2104      	movs	r1, #4
 8011288:	4628      	mov	r0, r5
 801128a:	4798      	blx	r3
 801128c:	f8c9 0020 	str.w	r0, [r9, #32]
 8011290:	f8d7 9000 	ldr.w	r9, [r7]
 8011294:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011298:	46ca      	mov	sl, r9
 801129a:	b343      	cbz	r3, 80112ee <rcl_init+0x13a>
 801129c:	2d01      	cmp	r5, #1
 801129e:	f178 0300 	sbcs.w	r3, r8, #0
 80112a2:	db3b      	blt.n	801131c <rcl_init+0x168>
 80112a4:	2400      	movs	r4, #0
 80112a6:	3e04      	subs	r6, #4
 80112a8:	46a1      	mov	r9, r4
 80112aa:	e00b      	b.n	80112c4 <rcl_init+0x110>
 80112ac:	6831      	ldr	r1, [r6, #0]
 80112ae:	f005 fdfc 	bl	8016eaa <memcpy>
 80112b2:	3401      	adds	r4, #1
 80112b4:	f149 0900 	adc.w	r9, r9, #0
 80112b8:	45c8      	cmp	r8, r9
 80112ba:	bf08      	it	eq
 80112bc:	42a5      	cmpeq	r5, r4
 80112be:	d02b      	beq.n	8011318 <rcl_init+0x164>
 80112c0:	f8d7 a000 	ldr.w	sl, [r7]
 80112c4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80112c8:	f7ee ffb4 	bl	8000234 <strlen>
 80112cc:	1c42      	adds	r2, r0, #1
 80112ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112d0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80112d2:	f8da a020 	ldr.w	sl, [sl, #32]
 80112d6:	9201      	str	r2, [sp, #4]
 80112d8:	4610      	mov	r0, r2
 80112da:	4798      	blx	r3
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80112e2:	6a1b      	ldr	r3, [r3, #32]
 80112e4:	9a01      	ldr	r2, [sp, #4]
 80112e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d1de      	bne.n	80112ac <rcl_init+0xf8>
 80112ee:	240a      	movs	r4, #10
 80112f0:	4638      	mov	r0, r7
 80112f2:	f7ff feff 	bl	80110f4 <__cleanup_context>
 80112f6:	4620      	mov	r0, r4
 80112f8:	b01e      	add	sp, #120	@ 0x78
 80112fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112fe:	2900      	cmp	r1, #0
 8011300:	f43f af71 	beq.w	80111e6 <rcl_init+0x32>
 8011304:	240b      	movs	r4, #11
 8011306:	4620      	mov	r0, r4
 8011308:	b01e      	add	sp, #120	@ 0x78
 801130a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801130e:	2464      	movs	r4, #100	@ 0x64
 8011310:	4620      	mov	r0, r4
 8011312:	b01e      	add	sp, #120	@ 0x78
 8011314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011318:	f8d7 9000 	ldr.w	r9, [r7]
 801131c:	4926      	ldr	r1, [pc, #152]	@ (80113b8 <rcl_init+0x204>)
 801131e:	680b      	ldr	r3, [r1, #0]
 8011320:	3301      	adds	r3, #1
 8011322:	d036      	beq.n	8011392 <rcl_init+0x1de>
 8011324:	600b      	str	r3, [r1, #0]
 8011326:	461a      	mov	r2, r3
 8011328:	2400      	movs	r4, #0
 801132a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801132e:	607b      	str	r3, [r7, #4]
 8011330:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011332:	3301      	adds	r3, #1
 8011334:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011338:	d034      	beq.n	80113a4 <rcl_init+0x1f0>
 801133a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801133e:	b93b      	cbnz	r3, 8011350 <rcl_init+0x19c>
 8011340:	3030      	adds	r0, #48	@ 0x30
 8011342:	f000 f83b 	bl	80113bc <rcl_get_localhost_only>
 8011346:	4604      	mov	r4, r0
 8011348:	2800      	cmp	r0, #0
 801134a:	d1d1      	bne.n	80112f0 <rcl_init+0x13c>
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	6958      	ldr	r0, [r3, #20]
 8011350:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011352:	aa18      	add	r2, sp, #96	@ 0x60
 8011354:	a917      	add	r1, sp, #92	@ 0x5c
 8011356:	f001 f871 	bl	801243c <rcl_validate_enclave_name>
 801135a:	4604      	mov	r4, r0
 801135c:	2800      	cmp	r0, #0
 801135e:	d1c7      	bne.n	80112f0 <rcl_init+0x13c>
 8011360:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011362:	b9eb      	cbnz	r3, 80113a0 <rcl_init+0x1ec>
 8011364:	6839      	ldr	r1, [r7, #0]
 8011366:	694b      	ldr	r3, [r1, #20]
 8011368:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801136a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801136e:	f000 fb3f 	bl	80119f0 <rcl_get_security_options_from_environment>
 8011372:	4604      	mov	r4, r0
 8011374:	2800      	cmp	r0, #0
 8011376:	d1bb      	bne.n	80112f0 <rcl_init+0x13c>
 8011378:	6839      	ldr	r1, [r7, #0]
 801137a:	6948      	ldr	r0, [r1, #20]
 801137c:	3128      	adds	r1, #40	@ 0x28
 801137e:	3018      	adds	r0, #24
 8011380:	f7fa f900 	bl	800b584 <rmw_init>
 8011384:	4604      	mov	r4, r0
 8011386:	2800      	cmp	r0, #0
 8011388:	d0bd      	beq.n	8011306 <rcl_init+0x152>
 801138a:	f7ff fe8f 	bl	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 801138e:	4604      	mov	r4, r0
 8011390:	e7ae      	b.n	80112f0 <rcl_init+0x13c>
 8011392:	2201      	movs	r2, #1
 8011394:	461c      	mov	r4, r3
 8011396:	600a      	str	r2, [r1, #0]
 8011398:	4613      	mov	r3, r2
 801139a:	e7c6      	b.n	801132a <rcl_init+0x176>
 801139c:	240a      	movs	r4, #10
 801139e:	e7b2      	b.n	8011306 <rcl_init+0x152>
 80113a0:	2401      	movs	r4, #1
 80113a2:	e7a5      	b.n	80112f0 <rcl_init+0x13c>
 80113a4:	3024      	adds	r0, #36	@ 0x24
 80113a6:	f004 fd1d 	bl	8015de4 <rcl_get_default_domain_id>
 80113aa:	4604      	mov	r4, r0
 80113ac:	2800      	cmp	r0, #0
 80113ae:	d19f      	bne.n	80112f0 <rcl_init+0x13c>
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	6958      	ldr	r0, [r3, #20]
 80113b4:	e7c1      	b.n	801133a <rcl_init+0x186>
 80113b6:	bf00      	nop
 80113b8:	2000ca90 	.word	0x2000ca90

080113bc <rcl_get_localhost_only>:
 80113bc:	b510      	push	{r4, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	2300      	movs	r3, #0
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	b1b8      	cbz	r0, 80113f6 <rcl_get_localhost_only+0x3a>
 80113c6:	4604      	mov	r4, r0
 80113c8:	a901      	add	r1, sp, #4
 80113ca:	480c      	ldr	r0, [pc, #48]	@ (80113fc <rcl_get_localhost_only+0x40>)
 80113cc:	f002 fc40 	bl	8013c50 <rcutils_get_env>
 80113d0:	b110      	cbz	r0, 80113d8 <rcl_get_localhost_only+0x1c>
 80113d2:	2001      	movs	r0, #1
 80113d4:	b002      	add	sp, #8
 80113d6:	bd10      	pop	{r4, pc}
 80113d8:	9b01      	ldr	r3, [sp, #4]
 80113da:	b113      	cbz	r3, 80113e2 <rcl_get_localhost_only+0x26>
 80113dc:	781a      	ldrb	r2, [r3, #0]
 80113de:	2a31      	cmp	r2, #49	@ 0x31
 80113e0:	d004      	beq.n	80113ec <rcl_get_localhost_only+0x30>
 80113e2:	2302      	movs	r3, #2
 80113e4:	2000      	movs	r0, #0
 80113e6:	7023      	strb	r3, [r4, #0]
 80113e8:	b002      	add	sp, #8
 80113ea:	bd10      	pop	{r4, pc}
 80113ec:	785b      	ldrb	r3, [r3, #1]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1f7      	bne.n	80113e2 <rcl_get_localhost_only+0x26>
 80113f2:	2301      	movs	r3, #1
 80113f4:	e7f6      	b.n	80113e4 <rcl_get_localhost_only+0x28>
 80113f6:	200b      	movs	r0, #11
 80113f8:	b002      	add	sp, #8
 80113fa:	bd10      	pop	{r4, pc}
 80113fc:	08018374 	.word	0x08018374

08011400 <rcl_get_zero_initialized_node>:
 8011400:	4a03      	ldr	r2, [pc, #12]	@ (8011410 <rcl_get_zero_initialized_node+0x10>)
 8011402:	4603      	mov	r3, r0
 8011404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011408:	e883 0003 	stmia.w	r3, {r0, r1}
 801140c:	4618      	mov	r0, r3
 801140e:	4770      	bx	lr
 8011410:	08018390 	.word	0x08018390

08011414 <rcl_node_init>:
 8011414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011418:	b0a9      	sub	sp, #164	@ 0xa4
 801141a:	4604      	mov	r4, r0
 801141c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011420:	a823      	add	r0, sp, #140	@ 0x8c
 8011422:	460e      	mov	r6, r1
 8011424:	4615      	mov	r5, r2
 8011426:	461f      	mov	r7, r3
 8011428:	f004 ff50 	bl	80162cc <rcl_guard_condition_get_default_options>
 801142c:	f1b8 0f00 	cmp.w	r8, #0
 8011430:	f000 80e6 	beq.w	8011600 <rcl_node_init+0x1ec>
 8011434:	4640      	mov	r0, r8
 8011436:	f7f9 feed 	bl	800b214 <rcutils_allocator_is_valid>
 801143a:	2800      	cmp	r0, #0
 801143c:	f000 80e0 	beq.w	8011600 <rcl_node_init+0x1ec>
 8011440:	2e00      	cmp	r6, #0
 8011442:	f000 80dd 	beq.w	8011600 <rcl_node_init+0x1ec>
 8011446:	2d00      	cmp	r5, #0
 8011448:	f000 80da 	beq.w	8011600 <rcl_node_init+0x1ec>
 801144c:	2c00      	cmp	r4, #0
 801144e:	f000 80d7 	beq.w	8011600 <rcl_node_init+0x1ec>
 8011452:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011456:	f1b9 0f00 	cmp.w	r9, #0
 801145a:	f040 80fd 	bne.w	8011658 <rcl_node_init+0x244>
 801145e:	2f00      	cmp	r7, #0
 8011460:	f000 80ce 	beq.w	8011600 <rcl_node_init+0x1ec>
 8011464:	4638      	mov	r0, r7
 8011466:	f7ff fe3f 	bl	80110e8 <rcl_context_is_valid>
 801146a:	4682      	mov	sl, r0
 801146c:	2800      	cmp	r0, #0
 801146e:	f000 80cd 	beq.w	801160c <rcl_node_init+0x1f8>
 8011472:	464a      	mov	r2, r9
 8011474:	a922      	add	r1, sp, #136	@ 0x88
 8011476:	4630      	mov	r0, r6
 8011478:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 801147c:	f003 f812 	bl	80144a4 <rmw_validate_node_name>
 8011480:	4681      	mov	r9, r0
 8011482:	2800      	cmp	r0, #0
 8011484:	f040 80be 	bne.w	8011604 <rcl_node_init+0x1f0>
 8011488:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801148a:	2800      	cmp	r0, #0
 801148c:	f040 80f0 	bne.w	8011670 <rcl_node_init+0x25c>
 8011490:	4628      	mov	r0, r5
 8011492:	f7ee fecf 	bl	8000234 <strlen>
 8011496:	2800      	cmp	r0, #0
 8011498:	f040 80bb 	bne.w	8011612 <rcl_node_init+0x1fe>
 801149c:	4d7c      	ldr	r5, [pc, #496]	@ (8011690 <rcl_node_init+0x27c>)
 801149e:	a922      	add	r1, sp, #136	@ 0x88
 80114a0:	2200      	movs	r2, #0
 80114a2:	4628      	mov	r0, r5
 80114a4:	f002 ffe0 	bl	8014468 <rmw_validate_namespace>
 80114a8:	4681      	mov	r9, r0
 80114aa:	2800      	cmp	r0, #0
 80114ac:	f040 80aa 	bne.w	8011604 <rcl_node_init+0x1f0>
 80114b0:	4682      	mov	sl, r0
 80114b2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80114b4:	2800      	cmp	r0, #0
 80114b6:	f040 80e0 	bne.w	801167a <rcl_node_init+0x266>
 80114ba:	f8d8 3000 	ldr.w	r3, [r8]
 80114be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80114c2:	2078      	movs	r0, #120	@ 0x78
 80114c4:	4798      	blx	r3
 80114c6:	4681      	mov	r9, r0
 80114c8:	6060      	str	r0, [r4, #4]
 80114ca:	2800      	cmp	r0, #0
 80114cc:	f000 80ca 	beq.w	8011664 <rcl_node_init+0x250>
 80114d0:	2200      	movs	r2, #0
 80114d2:	2300      	movs	r3, #0
 80114d4:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80114d8:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80114dc:	a808      	add	r0, sp, #32
 80114de:	f000 f907 	bl	80116f0 <rcl_node_get_default_options>
 80114e2:	a908      	add	r1, sp, #32
 80114e4:	4648      	mov	r0, r9
 80114e6:	2268      	movs	r2, #104	@ 0x68
 80114e8:	f005 fcdf 	bl	8016eaa <memcpy>
 80114ec:	6861      	ldr	r1, [r4, #4]
 80114ee:	6027      	str	r7, [r4, #0]
 80114f0:	4640      	mov	r0, r8
 80114f2:	f000 f90b 	bl	801170c <rcl_node_options_copy>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d158      	bne.n	80115ac <rcl_node_init+0x198>
 80114fa:	4628      	mov	r0, r5
 80114fc:	f7ee fe9a 	bl	8000234 <strlen>
 8011500:	4428      	add	r0, r5
 8011502:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011506:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801150a:	2b2f      	cmp	r3, #47	@ 0x2f
 801150c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	bf0c      	ite	eq
 8011514:	4b5f      	ldreq	r3, [pc, #380]	@ (8011694 <rcl_node_init+0x280>)
 8011516:	4b60      	ldrne	r3, [pc, #384]	@ (8011698 <rcl_node_init+0x284>)
 8011518:	9302      	str	r3, [sp, #8]
 801151a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801151e:	9301      	str	r3, [sp, #4]
 8011520:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011524:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011528:	f002 fbba 	bl	8013ca0 <rcutils_format_string_limit>
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011532:	6818      	ldr	r0, [r3, #0]
 8011534:	4631      	mov	r1, r6
 8011536:	3028      	adds	r0, #40	@ 0x28
 8011538:	462a      	mov	r2, r5
 801153a:	6866      	ldr	r6, [r4, #4]
 801153c:	f7fa fa04 	bl	800b948 <rmw_create_node>
 8011540:	6863      	ldr	r3, [r4, #4]
 8011542:	66b0      	str	r0, [r6, #104]	@ 0x68
 8011544:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011546:	2800      	cmp	r0, #0
 8011548:	d032      	beq.n	80115b0 <rcl_node_init+0x19c>
 801154a:	f7fa fa91 	bl	800ba70 <rmw_node_get_graph_guard_condition>
 801154e:	4681      	mov	r9, r0
 8011550:	b360      	cbz	r0, 80115ac <rcl_node_init+0x198>
 8011552:	f8d8 3000 	ldr.w	r3, [r8]
 8011556:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801155a:	6866      	ldr	r6, [r4, #4]
 801155c:	2008      	movs	r0, #8
 801155e:	4798      	blx	r3
 8011560:	6863      	ldr	r3, [r4, #4]
 8011562:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8011564:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8011568:	f1bb 0f00 	cmp.w	fp, #0
 801156c:	d020      	beq.n	80115b0 <rcl_node_init+0x19c>
 801156e:	a806      	add	r0, sp, #24
 8011570:	f004 fdd0 	bl	8016114 <rcl_get_zero_initialized_guard_condition>
 8011574:	a806      	add	r0, sp, #24
 8011576:	c803      	ldmia	r0, {r0, r1}
 8011578:	6863      	ldr	r3, [r4, #4]
 801157a:	46c4      	mov	ip, r8
 801157c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011580:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011584:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011588:	ae23      	add	r6, sp, #140	@ 0x8c
 801158a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801158c:	f8dc 3000 	ldr.w	r3, [ip]
 8011590:	6033      	str	r3, [r6, #0]
 8011592:	ab28      	add	r3, sp, #160	@ 0xa0
 8011594:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011598:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801159c:	4649      	mov	r1, r9
 801159e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80115a0:	463a      	mov	r2, r7
 80115a2:	4670      	mov	r0, lr
 80115a4:	f004 fe0c 	bl	80161c0 <rcl_guard_condition_init_from_rmw>
 80115a8:	4681      	mov	r9, r0
 80115aa:	b328      	cbz	r0, 80115f8 <rcl_node_init+0x1e4>
 80115ac:	6863      	ldr	r3, [r4, #4]
 80115ae:	b1f3      	cbz	r3, 80115ee <rcl_node_init+0x1da>
 80115b0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80115b2:	b128      	cbz	r0, 80115c0 <rcl_node_init+0x1ac>
 80115b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115b8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80115bc:	4798      	blx	r3
 80115be:	6863      	ldr	r3, [r4, #4]
 80115c0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80115c2:	b110      	cbz	r0, 80115ca <rcl_node_init+0x1b6>
 80115c4:	f7fa f9d8 	bl	800b978 <rmw_destroy_node>
 80115c8:	6863      	ldr	r3, [r4, #4]
 80115ca:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80115cc:	b148      	cbz	r0, 80115e2 <rcl_node_init+0x1ce>
 80115ce:	f004 fe57 	bl	8016280 <rcl_guard_condition_fini>
 80115d2:	6863      	ldr	r3, [r4, #4]
 80115d4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80115d8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80115da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115de:	4798      	blx	r3
 80115e0:	6863      	ldr	r3, [r4, #4]
 80115e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115ec:	4798      	blx	r3
 80115ee:	2300      	movs	r3, #0
 80115f0:	e9c4 3300 	strd	r3, r3, [r4]
 80115f4:	f04f 0901 	mov.w	r9, #1
 80115f8:	f1ba 0f00 	cmp.w	sl, #0
 80115fc:	d125      	bne.n	801164a <rcl_node_init+0x236>
 80115fe:	e001      	b.n	8011604 <rcl_node_init+0x1f0>
 8011600:	f04f 090b 	mov.w	r9, #11
 8011604:	4648      	mov	r0, r9
 8011606:	b029      	add	sp, #164	@ 0xa4
 8011608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801160c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011610:	e7f8      	b.n	8011604 <rcl_node_init+0x1f0>
 8011612:	782b      	ldrb	r3, [r5, #0]
 8011614:	2b2f      	cmp	r3, #47	@ 0x2f
 8011616:	f43f af42 	beq.w	801149e <rcl_node_init+0x8a>
 801161a:	9503      	str	r5, [sp, #12]
 801161c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011620:	9300      	str	r3, [sp, #0]
 8011622:	4b1e      	ldr	r3, [pc, #120]	@ (801169c <rcl_node_init+0x288>)
 8011624:	9302      	str	r3, [sp, #8]
 8011626:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801162a:	9301      	str	r3, [sp, #4]
 801162c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011630:	f002 fb36 	bl	8013ca0 <rcutils_format_string_limit>
 8011634:	4605      	mov	r5, r0
 8011636:	b340      	cbz	r0, 801168a <rcl_node_init+0x276>
 8011638:	2200      	movs	r2, #0
 801163a:	a922      	add	r1, sp, #136	@ 0x88
 801163c:	9222      	str	r2, [sp, #136]	@ 0x88
 801163e:	f002 ff13 	bl	8014468 <rmw_validate_namespace>
 8011642:	4681      	mov	r9, r0
 8011644:	2800      	cmp	r0, #0
 8011646:	f43f af34 	beq.w	80114b2 <rcl_node_init+0x9e>
 801164a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801164e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011652:	4628      	mov	r0, r5
 8011654:	4798      	blx	r3
 8011656:	e7d5      	b.n	8011604 <rcl_node_init+0x1f0>
 8011658:	f04f 0964 	mov.w	r9, #100	@ 0x64
 801165c:	4648      	mov	r0, r9
 801165e:	b029      	add	sp, #164	@ 0xa4
 8011660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011664:	f04f 090a 	mov.w	r9, #10
 8011668:	f1ba 0f00 	cmp.w	sl, #0
 801166c:	d1ed      	bne.n	801164a <rcl_node_init+0x236>
 801166e:	e7c9      	b.n	8011604 <rcl_node_init+0x1f0>
 8011670:	f002 ff6a 	bl	8014548 <rmw_node_name_validation_result_string>
 8011674:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8011678:	e7c4      	b.n	8011604 <rcl_node_init+0x1f0>
 801167a:	f002 ff07 	bl	801448c <rmw_namespace_validation_result_string>
 801167e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8011682:	f1ba 0f00 	cmp.w	sl, #0
 8011686:	d1e0      	bne.n	801164a <rcl_node_init+0x236>
 8011688:	e7bc      	b.n	8011604 <rcl_node_init+0x1f0>
 801168a:	f04f 090a 	mov.w	r9, #10
 801168e:	e7b9      	b.n	8011604 <rcl_node_init+0x1f0>
 8011690:	08017ed0 	.word	0x08017ed0
 8011694:	08017f1c 	.word	0x08017f1c
 8011698:	08017ed4 	.word	0x08017ed4
 801169c:	0801838c 	.word	0x0801838c

080116a0 <rcl_node_is_valid>:
 80116a0:	b130      	cbz	r0, 80116b0 <rcl_node_is_valid+0x10>
 80116a2:	6843      	ldr	r3, [r0, #4]
 80116a4:	b123      	cbz	r3, 80116b0 <rcl_node_is_valid+0x10>
 80116a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116a8:	b113      	cbz	r3, 80116b0 <rcl_node_is_valid+0x10>
 80116aa:	6800      	ldr	r0, [r0, #0]
 80116ac:	f7ff bd1c 	b.w	80110e8 <rcl_context_is_valid>
 80116b0:	2000      	movs	r0, #0
 80116b2:	4770      	bx	lr

080116b4 <rcl_node_get_name>:
 80116b4:	b120      	cbz	r0, 80116c0 <rcl_node_get_name+0xc>
 80116b6:	6840      	ldr	r0, [r0, #4]
 80116b8:	b110      	cbz	r0, 80116c0 <rcl_node_get_name+0xc>
 80116ba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80116bc:	b100      	cbz	r0, 80116c0 <rcl_node_get_name+0xc>
 80116be:	6880      	ldr	r0, [r0, #8]
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop

080116c4 <rcl_node_get_namespace>:
 80116c4:	b120      	cbz	r0, 80116d0 <rcl_node_get_namespace+0xc>
 80116c6:	6840      	ldr	r0, [r0, #4]
 80116c8:	b110      	cbz	r0, 80116d0 <rcl_node_get_namespace+0xc>
 80116ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80116cc:	b100      	cbz	r0, 80116d0 <rcl_node_get_namespace+0xc>
 80116ce:	68c0      	ldr	r0, [r0, #12]
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop

080116d4 <rcl_node_get_options>:
 80116d4:	b128      	cbz	r0, 80116e2 <rcl_node_get_options+0xe>
 80116d6:	6840      	ldr	r0, [r0, #4]
 80116d8:	b118      	cbz	r0, 80116e2 <rcl_node_get_options+0xe>
 80116da:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80116dc:	2b00      	cmp	r3, #0
 80116de:	bf08      	it	eq
 80116e0:	2000      	moveq	r0, #0
 80116e2:	4770      	bx	lr

080116e4 <rcl_node_get_rmw_handle>:
 80116e4:	b110      	cbz	r0, 80116ec <rcl_node_get_rmw_handle+0x8>
 80116e6:	6840      	ldr	r0, [r0, #4]
 80116e8:	b100      	cbz	r0, 80116ec <rcl_node_get_rmw_handle+0x8>
 80116ea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop

080116f0 <rcl_node_get_default_options>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	2268      	movs	r2, #104	@ 0x68
 80116f4:	4604      	mov	r4, r0
 80116f6:	2100      	movs	r1, #0
 80116f8:	f005 fb0e 	bl	8016d18 <memset>
 80116fc:	4620      	mov	r0, r4
 80116fe:	f7f9 fd7b 	bl	800b1f8 <rcutils_get_default_allocator>
 8011702:	2301      	movs	r3, #1
 8011704:	7523      	strb	r3, [r4, #20]
 8011706:	4620      	mov	r0, r4
 8011708:	bd10      	pop	{r4, pc}
 801170a:	bf00      	nop

0801170c <rcl_node_options_copy>:
 801170c:	b1d0      	cbz	r0, 8011744 <rcl_node_options_copy+0x38>
 801170e:	b570      	push	{r4, r5, r6, lr}
 8011710:	460c      	mov	r4, r1
 8011712:	b1a9      	cbz	r1, 8011740 <rcl_node_options_copy+0x34>
 8011714:	4288      	cmp	r0, r1
 8011716:	4684      	mov	ip, r0
 8011718:	d012      	beq.n	8011740 <rcl_node_options_copy+0x34>
 801171a:	4605      	mov	r5, r0
 801171c:	8a86      	ldrh	r6, [r0, #20]
 801171e:	468e      	mov	lr, r1
 8011720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011722:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011726:	682b      	ldr	r3, [r5, #0]
 8011728:	f8ce 3000 	str.w	r3, [lr]
 801172c:	f10c 0118 	add.w	r1, ip, #24
 8011730:	2250      	movs	r2, #80	@ 0x50
 8011732:	82a6      	strh	r6, [r4, #20]
 8011734:	f104 0018 	add.w	r0, r4, #24
 8011738:	f005 fbb7 	bl	8016eaa <memcpy>
 801173c:	2000      	movs	r0, #0
 801173e:	bd70      	pop	{r4, r5, r6, pc}
 8011740:	200b      	movs	r0, #11
 8011742:	bd70      	pop	{r4, r5, r6, pc}
 8011744:	200b      	movs	r0, #11
 8011746:	4770      	bx	lr

08011748 <rcl_node_resolve_name>:
 8011748:	b082      	sub	sp, #8
 801174a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174e:	b091      	sub	sp, #68	@ 0x44
 8011750:	ac1a      	add	r4, sp, #104	@ 0x68
 8011752:	e884 000c 	stmia.w	r4, {r2, r3}
 8011756:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801175a:	2800      	cmp	r0, #0
 801175c:	d03b      	beq.n	80117d6 <rcl_node_resolve_name+0x8e>
 801175e:	460c      	mov	r4, r1
 8011760:	4605      	mov	r5, r0
 8011762:	f7ff ffb7 	bl	80116d4 <rcl_node_get_options>
 8011766:	2800      	cmp	r0, #0
 8011768:	d037      	beq.n	80117da <rcl_node_resolve_name+0x92>
 801176a:	4628      	mov	r0, r5
 801176c:	f7ff ffa2 	bl	80116b4 <rcl_node_get_name>
 8011770:	4606      	mov	r6, r0
 8011772:	4628      	mov	r0, r5
 8011774:	f7ff ffa6 	bl	80116c4 <rcl_node_get_namespace>
 8011778:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801177c:	4681      	mov	r9, r0
 801177e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011782:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011784:	46ac      	mov	ip, r5
 8011786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801178a:	f8de 3000 	ldr.w	r3, [lr]
 801178e:	f8cc 3000 	str.w	r3, [ip]
 8011792:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011794:	b1fb      	cbz	r3, 80117d6 <rcl_node_resolve_name+0x8e>
 8011796:	468a      	mov	sl, r1
 8011798:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801179c:	f002 fbd8 	bl	8013f50 <rcutils_get_zero_initialized_string_map>
 80117a0:	ab10      	add	r3, sp, #64	@ 0x40
 80117a2:	9008      	str	r0, [sp, #32]
 80117a4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80117a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80117ac:	2100      	movs	r1, #0
 80117ae:	e895 000c 	ldmia.w	r5, {r2, r3}
 80117b2:	a808      	add	r0, sp, #32
 80117b4:	f002 fc44 	bl	8014040 <rcutils_string_map_init>
 80117b8:	4607      	mov	r7, r0
 80117ba:	b180      	cbz	r0, 80117de <rcl_node_resolve_name+0x96>
 80117bc:	f7f9 fd38 	bl	800b230 <rcutils_get_error_string>
 80117c0:	f7f9 fd4e 	bl	800b260 <rcutils_reset_error>
 80117c4:	2f0a      	cmp	r7, #10
 80117c6:	bf18      	it	ne
 80117c8:	2701      	movne	r7, #1
 80117ca:	4638      	mov	r0, r7
 80117cc:	b011      	add	sp, #68	@ 0x44
 80117ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d2:	b002      	add	sp, #8
 80117d4:	4770      	bx	lr
 80117d6:	270b      	movs	r7, #11
 80117d8:	e7f7      	b.n	80117ca <rcl_node_resolve_name+0x82>
 80117da:	2701      	movs	r7, #1
 80117dc:	e7f5      	b.n	80117ca <rcl_node_resolve_name+0x82>
 80117de:	9009      	str	r0, [sp, #36]	@ 0x24
 80117e0:	9007      	str	r0, [sp, #28]
 80117e2:	a808      	add	r0, sp, #32
 80117e4:	f004 fc90 	bl	8016108 <rcl_get_default_topic_name_substitutions>
 80117e8:	4607      	mov	r7, r0
 80117ea:	b1a8      	cbz	r0, 8011818 <rcl_node_resolve_name+0xd0>
 80117ec:	280a      	cmp	r0, #10
 80117ee:	9c07      	ldr	r4, [sp, #28]
 80117f0:	d000      	beq.n	80117f4 <rcl_node_resolve_name+0xac>
 80117f2:	2701      	movs	r7, #1
 80117f4:	a808      	add	r0, sp, #32
 80117f6:	f002 fc63 	bl	80140c0 <rcutils_string_map_fini>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d13d      	bne.n	801187a <rcl_node_resolve_name+0x132>
 80117fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011800:	4659      	mov	r1, fp
 8011802:	47d0      	blx	sl
 8011804:	4659      	mov	r1, fp
 8011806:	4620      	mov	r0, r4
 8011808:	47d0      	blx	sl
 801180a:	f1b8 0f00 	cmp.w	r8, #0
 801180e:	d0dc      	beq.n	80117ca <rcl_node_resolve_name+0x82>
 8011810:	2f67      	cmp	r7, #103	@ 0x67
 8011812:	bf08      	it	eq
 8011814:	2768      	moveq	r7, #104	@ 0x68
 8011816:	e7d8      	b.n	80117ca <rcl_node_resolve_name+0x82>
 8011818:	ab09      	add	r3, sp, #36	@ 0x24
 801181a:	9305      	str	r3, [sp, #20]
 801181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801181e:	46ec      	mov	ip, sp
 8011820:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011824:	682b      	ldr	r3, [r5, #0]
 8011826:	f8cc 3000 	str.w	r3, [ip]
 801182a:	464a      	mov	r2, r9
 801182c:	4631      	mov	r1, r6
 801182e:	4620      	mov	r0, r4
 8011830:	ab08      	add	r3, sp, #32
 8011832:	f004 fb0b 	bl	8015e4c <rcl_expand_topic_name>
 8011836:	4607      	mov	r7, r0
 8011838:	b9b8      	cbnz	r0, 801186a <rcl_node_resolve_name+0x122>
 801183a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801183c:	9009      	str	r0, [sp, #36]	@ 0x24
 801183e:	4602      	mov	r2, r0
 8011840:	a90a      	add	r1, sp, #40	@ 0x28
 8011842:	4620      	mov	r0, r4
 8011844:	f002 fd4c 	bl	80142e0 <rmw_validate_full_topic_name>
 8011848:	b988      	cbnz	r0, 801186e <rcl_node_resolve_name+0x126>
 801184a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801184c:	b9d5      	cbnz	r5, 8011884 <rcl_node_resolve_name+0x13c>
 801184e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011850:	a808      	add	r0, sp, #32
 8011852:	601c      	str	r4, [r3, #0]
 8011854:	f002 fc34 	bl	80140c0 <rcutils_string_map_fini>
 8011858:	4607      	mov	r7, r0
 801185a:	b1a8      	cbz	r0, 8011888 <rcl_node_resolve_name+0x140>
 801185c:	f7f9 fce8 	bl	800b230 <rcutils_get_error_string>
 8011860:	462c      	mov	r4, r5
 8011862:	f7f9 fcfd 	bl	800b260 <rcutils_reset_error>
 8011866:	2701      	movs	r7, #1
 8011868:	e7c9      	b.n	80117fe <rcl_node_resolve_name+0xb6>
 801186a:	9c07      	ldr	r4, [sp, #28]
 801186c:	e7c2      	b.n	80117f4 <rcl_node_resolve_name+0xac>
 801186e:	f7f9 fcdf 	bl	800b230 <rcutils_get_error_string>
 8011872:	2701      	movs	r7, #1
 8011874:	f7f9 fcf4 	bl	800b260 <rcutils_reset_error>
 8011878:	e7bc      	b.n	80117f4 <rcl_node_resolve_name+0xac>
 801187a:	f7f9 fcd9 	bl	800b230 <rcutils_get_error_string>
 801187e:	f7f9 fcef 	bl	800b260 <rcutils_reset_error>
 8011882:	e7bc      	b.n	80117fe <rcl_node_resolve_name+0xb6>
 8011884:	2767      	movs	r7, #103	@ 0x67
 8011886:	e7b5      	b.n	80117f4 <rcl_node_resolve_name+0xac>
 8011888:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801188a:	4659      	mov	r1, fp
 801188c:	47d0      	blx	sl
 801188e:	4659      	mov	r1, fp
 8011890:	4638      	mov	r0, r7
 8011892:	47d0      	blx	sl
 8011894:	e799      	b.n	80117ca <rcl_node_resolve_name+0x82>
 8011896:	bf00      	nop

08011898 <exact_match_lookup>:
 8011898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801189a:	f102 0708 	add.w	r7, r2, #8
 801189e:	460b      	mov	r3, r1
 80118a0:	4614      	mov	r4, r2
 80118a2:	4606      	mov	r6, r0
 80118a4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80118a8:	b085      	sub	sp, #20
 80118aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80118ae:	4618      	mov	r0, r3
 80118b0:	4919      	ldr	r1, [pc, #100]	@ (8011918 <exact_match_lookup+0x80>)
 80118b2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80118b6:	f002 f9e5 	bl	8013c84 <rcutils_join_path>
 80118ba:	7833      	ldrb	r3, [r6, #0]
 80118bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80118be:	4605      	mov	r5, r0
 80118c0:	d023      	beq.n	801190a <exact_match_lookup+0x72>
 80118c2:	f104 030c 	add.w	r3, r4, #12
 80118c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80118ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 80118ce:	1c70      	adds	r0, r6, #1
 80118d0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80118d4:	f002 f9dc 	bl	8013c90 <rcutils_to_native_path>
 80118d8:	4606      	mov	r6, r0
 80118da:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80118de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80118e2:	4631      	mov	r1, r6
 80118e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80118e8:	4628      	mov	r0, r5
 80118ea:	f002 f9cb 	bl	8013c84 <rcutils_join_path>
 80118ee:	6862      	ldr	r2, [r4, #4]
 80118f0:	6921      	ldr	r1, [r4, #16]
 80118f2:	4603      	mov	r3, r0
 80118f4:	4630      	mov	r0, r6
 80118f6:	461e      	mov	r6, r3
 80118f8:	4790      	blx	r2
 80118fa:	4628      	mov	r0, r5
 80118fc:	6863      	ldr	r3, [r4, #4]
 80118fe:	6921      	ldr	r1, [r4, #16]
 8011900:	4798      	blx	r3
 8011902:	4635      	mov	r5, r6
 8011904:	4628      	mov	r0, r5
 8011906:	b005      	add	sp, #20
 8011908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801190a:	7873      	ldrb	r3, [r6, #1]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d1d8      	bne.n	80118c2 <exact_match_lookup+0x2a>
 8011910:	4628      	mov	r0, r5
 8011912:	b005      	add	sp, #20
 8011914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011916:	bf00      	nop
 8011918:	080183d4 	.word	0x080183d4

0801191c <rcl_get_secure_root>:
 801191c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011920:	b085      	sub	sp, #20
 8011922:	b168      	cbz	r0, 8011940 <rcl_get_secure_root+0x24>
 8011924:	4607      	mov	r7, r0
 8011926:	4608      	mov	r0, r1
 8011928:	460c      	mov	r4, r1
 801192a:	f7f9 fc73 	bl	800b214 <rcutils_allocator_is_valid>
 801192e:	b138      	cbz	r0, 8011940 <rcl_get_secure_root+0x24>
 8011930:	2300      	movs	r3, #0
 8011932:	482d      	ldr	r0, [pc, #180]	@ (80119e8 <rcl_get_secure_root+0xcc>)
 8011934:	9303      	str	r3, [sp, #12]
 8011936:	a903      	add	r1, sp, #12
 8011938:	f002 f98a 	bl	8013c50 <rcutils_get_env>
 801193c:	4605      	mov	r5, r0
 801193e:	b120      	cbz	r0, 801194a <rcl_get_secure_root+0x2e>
 8011940:	2500      	movs	r5, #0
 8011942:	4628      	mov	r0, r5
 8011944:	b005      	add	sp, #20
 8011946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801194a:	9b03      	ldr	r3, [sp, #12]
 801194c:	781a      	ldrb	r2, [r3, #0]
 801194e:	2a00      	cmp	r2, #0
 8011950:	d0f6      	beq.n	8011940 <rcl_get_secure_root+0x24>
 8011952:	f104 090c 	add.w	r9, r4, #12
 8011956:	e899 0003 	ldmia.w	r9, {r0, r1}
 801195a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801195e:	4618      	mov	r0, r3
 8011960:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011964:	f002 fab6 	bl	8013ed4 <rcutils_strdup>
 8011968:	4680      	mov	r8, r0
 801196a:	2800      	cmp	r0, #0
 801196c:	d0e8      	beq.n	8011940 <rcl_get_secure_root+0x24>
 801196e:	481f      	ldr	r0, [pc, #124]	@ (80119ec <rcl_get_secure_root+0xd0>)
 8011970:	9503      	str	r5, [sp, #12]
 8011972:	a903      	add	r1, sp, #12
 8011974:	f002 f96c 	bl	8013c50 <rcutils_get_env>
 8011978:	b160      	cbz	r0, 8011994 <rcl_get_secure_root+0x78>
 801197a:	2600      	movs	r6, #0
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	6921      	ldr	r1, [r4, #16]
 8011980:	4630      	mov	r0, r6
 8011982:	4798      	blx	r3
 8011984:	4640      	mov	r0, r8
 8011986:	6863      	ldr	r3, [r4, #4]
 8011988:	6921      	ldr	r1, [r4, #16]
 801198a:	4798      	blx	r3
 801198c:	4628      	mov	r0, r5
 801198e:	b005      	add	sp, #20
 8011990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011994:	9b03      	ldr	r3, [sp, #12]
 8011996:	781e      	ldrb	r6, [r3, #0]
 8011998:	b1f6      	cbz	r6, 80119d8 <rcl_get_secure_root+0xbc>
 801199a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801199e:	e88d 0003 	stmia.w	sp, {r0, r1}
 80119a2:	4618      	mov	r0, r3
 80119a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80119a8:	f002 fa94 	bl	8013ed4 <rcutils_strdup>
 80119ac:	4606      	mov	r6, r0
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d0e3      	beq.n	801197a <rcl_get_secure_root+0x5e>
 80119b2:	4622      	mov	r2, r4
 80119b4:	4641      	mov	r1, r8
 80119b6:	f7ff ff6f 	bl	8011898 <exact_match_lookup>
 80119ba:	4605      	mov	r5, r0
 80119bc:	2d00      	cmp	r5, #0
 80119be:	d0dd      	beq.n	801197c <rcl_get_secure_root+0x60>
 80119c0:	4628      	mov	r0, r5
 80119c2:	f002 f95d 	bl	8013c80 <rcutils_is_directory>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d1d7      	bne.n	801197c <rcl_get_secure_root+0x60>
 80119cc:	4628      	mov	r0, r5
 80119ce:	6921      	ldr	r1, [r4, #16]
 80119d0:	461d      	mov	r5, r3
 80119d2:	6863      	ldr	r3, [r4, #4]
 80119d4:	4798      	blx	r3
 80119d6:	e7d1      	b.n	801197c <rcl_get_secure_root+0x60>
 80119d8:	4622      	mov	r2, r4
 80119da:	4638      	mov	r0, r7
 80119dc:	4641      	mov	r1, r8
 80119de:	f7ff ff5b 	bl	8011898 <exact_match_lookup>
 80119e2:	4605      	mov	r5, r0
 80119e4:	e7ea      	b.n	80119bc <rcl_get_secure_root+0xa0>
 80119e6:	bf00      	nop
 80119e8:	080183e0 	.word	0x080183e0
 80119ec:	080183f8 	.word	0x080183f8

080119f0 <rcl_get_security_options_from_environment>:
 80119f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	2300      	movs	r3, #0
 80119f8:	4606      	mov	r6, r0
 80119fa:	460f      	mov	r7, r1
 80119fc:	4820      	ldr	r0, [pc, #128]	@ (8011a80 <rcl_get_security_options_from_environment+0x90>)
 80119fe:	9301      	str	r3, [sp, #4]
 8011a00:	a901      	add	r1, sp, #4
 8011a02:	4690      	mov	r8, r2
 8011a04:	f002 f924 	bl	8013c50 <rcutils_get_env>
 8011a08:	b120      	cbz	r0, 8011a14 <rcl_get_security_options_from_environment+0x24>
 8011a0a:	2501      	movs	r5, #1
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	b002      	add	sp, #8
 8011a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a14:	491b      	ldr	r1, [pc, #108]	@ (8011a84 <rcl_get_security_options_from_environment+0x94>)
 8011a16:	4604      	mov	r4, r0
 8011a18:	9801      	ldr	r0, [sp, #4]
 8011a1a:	f7ee fc01 	bl	8000220 <strcmp>
 8011a1e:	4605      	mov	r5, r0
 8011a20:	b9e8      	cbnz	r0, 8011a5e <rcl_get_security_options_from_environment+0x6e>
 8011a22:	9001      	str	r0, [sp, #4]
 8011a24:	f1b8 0f00 	cmp.w	r8, #0
 8011a28:	d020      	beq.n	8011a6c <rcl_get_security_options_from_environment+0x7c>
 8011a2a:	4817      	ldr	r0, [pc, #92]	@ (8011a88 <rcl_get_security_options_from_environment+0x98>)
 8011a2c:	a901      	add	r1, sp, #4
 8011a2e:	f002 f90f 	bl	8013c50 <rcutils_get_env>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d1e9      	bne.n	8011a0a <rcl_get_security_options_from_environment+0x1a>
 8011a36:	4915      	ldr	r1, [pc, #84]	@ (8011a8c <rcl_get_security_options_from_environment+0x9c>)
 8011a38:	9801      	ldr	r0, [sp, #4]
 8011a3a:	f7ee fbf1 	bl	8000220 <strcmp>
 8011a3e:	fab0 f080 	clz	r0, r0
 8011a42:	0940      	lsrs	r0, r0, #5
 8011a44:	f888 0000 	strb.w	r0, [r8]
 8011a48:	4639      	mov	r1, r7
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f7ff ff66 	bl	801191c <rcl_get_secure_root>
 8011a50:	b170      	cbz	r0, 8011a70 <rcl_get_security_options_from_environment+0x80>
 8011a52:	f8c8 0004 	str.w	r0, [r8, #4]
 8011a56:	4628      	mov	r0, r5
 8011a58:	b002      	add	sp, #8
 8011a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a5e:	4625      	mov	r5, r4
 8011a60:	4628      	mov	r0, r5
 8011a62:	f888 4000 	strb.w	r4, [r8]
 8011a66:	b002      	add	sp, #8
 8011a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a6c:	250b      	movs	r5, #11
 8011a6e:	e7cd      	b.n	8011a0c <rcl_get_security_options_from_environment+0x1c>
 8011a70:	f898 5000 	ldrb.w	r5, [r8]
 8011a74:	f1a5 0501 	sub.w	r5, r5, #1
 8011a78:	fab5 f585 	clz	r5, r5
 8011a7c:	096d      	lsrs	r5, r5, #5
 8011a7e:	e7c5      	b.n	8011a0c <rcl_get_security_options_from_environment+0x1c>
 8011a80:	08018398 	.word	0x08018398
 8011a84:	080183ac 	.word	0x080183ac
 8011a88:	080183b4 	.word	0x080183b4
 8011a8c:	080183cc 	.word	0x080183cc

08011a90 <rcl_service_get_rmw_handle>:
 8011a90:	b118      	cbz	r0, 8011a9a <rcl_service_get_rmw_handle+0xa>
 8011a92:	6800      	ldr	r0, [r0, #0]
 8011a94:	b108      	cbz	r0, 8011a9a <rcl_service_get_rmw_handle+0xa>
 8011a96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011a9a:	4770      	bx	lr

08011a9c <rcl_take_request>:
 8011a9c:	b570      	push	{r4, r5, r6, lr}
 8011a9e:	468e      	mov	lr, r1
 8011aa0:	460c      	mov	r4, r1
 8011aa2:	4616      	mov	r6, r2
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011aaa:	b08c      	sub	sp, #48	@ 0x30
 8011aac:	f10d 0c18 	add.w	ip, sp, #24
 8011ab0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ab4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011ab8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011abc:	b30d      	cbz	r5, 8011b02 <rcl_take_request+0x66>
 8011abe:	682b      	ldr	r3, [r5, #0]
 8011ac0:	b1fb      	cbz	r3, 8011b02 <rcl_take_request+0x66>
 8011ac2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011ac6:	b1e0      	cbz	r0, 8011b02 <rcl_take_request+0x66>
 8011ac8:	b336      	cbz	r6, 8011b18 <rcl_take_request+0x7c>
 8011aca:	2300      	movs	r3, #0
 8011acc:	f88d 3007 	strb.w	r3, [sp, #7]
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	f10d 0307 	add.w	r3, sp, #7
 8011ad6:	a902      	add	r1, sp, #8
 8011ad8:	f002 ff58 	bl	801498c <rmw_take_request>
 8011adc:	4605      	mov	r5, r0
 8011ade:	b198      	cbz	r0, 8011b08 <rcl_take_request+0x6c>
 8011ae0:	280a      	cmp	r0, #10
 8011ae2:	bf18      	it	ne
 8011ae4:	2501      	movne	r5, #1
 8011ae6:	f10d 0e18 	add.w	lr, sp, #24
 8011aea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011aee:	46a4      	mov	ip, r4
 8011af0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011af4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011af8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011afc:	4628      	mov	r0, r5
 8011afe:	b00c      	add	sp, #48	@ 0x30
 8011b00:	bd70      	pop	{r4, r5, r6, pc}
 8011b02:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8011b06:	e7ee      	b.n	8011ae6 <rcl_take_request+0x4a>
 8011b08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b0c:	f240 2359 	movw	r3, #601	@ 0x259
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	bf08      	it	eq
 8011b14:	461d      	moveq	r5, r3
 8011b16:	e7e6      	b.n	8011ae6 <rcl_take_request+0x4a>
 8011b18:	250b      	movs	r5, #11
 8011b1a:	e7e4      	b.n	8011ae6 <rcl_take_request+0x4a>

08011b1c <rcl_send_response>:
 8011b1c:	b170      	cbz	r0, 8011b3c <rcl_send_response+0x20>
 8011b1e:	6800      	ldr	r0, [r0, #0]
 8011b20:	b160      	cbz	r0, 8011b3c <rcl_send_response+0x20>
 8011b22:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011b26:	b148      	cbz	r0, 8011b3c <rcl_send_response+0x20>
 8011b28:	b159      	cbz	r1, 8011b42 <rcl_send_response+0x26>
 8011b2a:	b510      	push	{r4, lr}
 8011b2c:	b15a      	cbz	r2, 8011b46 <rcl_send_response+0x2a>
 8011b2e:	f002 ff8b 	bl	8014a48 <rmw_send_response>
 8011b32:	b110      	cbz	r0, 8011b3a <rcl_send_response+0x1e>
 8011b34:	2802      	cmp	r0, #2
 8011b36:	bf18      	it	ne
 8011b38:	2001      	movne	r0, #1
 8011b3a:	bd10      	pop	{r4, pc}
 8011b3c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011b40:	4770      	bx	lr
 8011b42:	200b      	movs	r0, #11
 8011b44:	4770      	bx	lr
 8011b46:	200b      	movs	r0, #11
 8011b48:	bd10      	pop	{r4, pc}
 8011b4a:	bf00      	nop

08011b4c <rcl_service_is_valid>:
 8011b4c:	b130      	cbz	r0, 8011b5c <rcl_service_is_valid+0x10>
 8011b4e:	6800      	ldr	r0, [r0, #0]
 8011b50:	b120      	cbz	r0, 8011b5c <rcl_service_is_valid+0x10>
 8011b52:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011b56:	3800      	subs	r0, #0
 8011b58:	bf18      	it	ne
 8011b5a:	2001      	movne	r0, #1
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop

08011b60 <rcl_take>:
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d04a      	beq.n	8011bfa <rcl_take+0x9a>
 8011b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b68:	4604      	mov	r4, r0
 8011b6a:	6800      	ldr	r0, [r0, #0]
 8011b6c:	b0a4      	sub	sp, #144	@ 0x90
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d03b      	beq.n	8011bea <rcl_take+0x8a>
 8011b72:	461f      	mov	r7, r3
 8011b74:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d036      	beq.n	8011bea <rcl_take+0x8a>
 8011b7c:	460e      	mov	r6, r1
 8011b7e:	2900      	cmp	r1, #0
 8011b80:	d039      	beq.n	8011bf6 <rcl_take+0x96>
 8011b82:	4615      	mov	r5, r2
 8011b84:	2a00      	cmp	r2, #0
 8011b86:	d03c      	beq.n	8011c02 <rcl_take+0xa2>
 8011b88:	a802      	add	r0, sp, #8
 8011b8a:	f002 fba1 	bl	80142d0 <rmw_get_zero_initialized_message_info>
 8011b8e:	f10d 0c08 	add.w	ip, sp, #8
 8011b92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b96:	46ae      	mov	lr, r5
 8011b98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011b9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ba0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ba4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ba8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011bac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011bb0:	f04f 0800 	mov.w	r8, #0
 8011bb4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011bb8:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8011bbc:	6822      	ldr	r2, [r4, #0]
 8011bbe:	462b      	mov	r3, r5
 8011bc0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8011bc4:	9700      	str	r7, [sp, #0]
 8011bc6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8011bca:	4631      	mov	r1, r6
 8011bcc:	f002 ffe2 	bl	8014b94 <rmw_take_with_info>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	b9c0      	cbnz	r0, 8011c06 <rcl_take+0xa6>
 8011bd4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8011bd8:	f240 1291 	movw	r2, #401	@ 0x191
 8011bdc:	2900      	cmp	r1, #0
 8011bde:	bf08      	it	eq
 8011be0:	4613      	moveq	r3, r2
 8011be2:	4618      	mov	r0, r3
 8011be4:	b024      	add	sp, #144	@ 0x90
 8011be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bea:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011bee:	4618      	mov	r0, r3
 8011bf0:	b024      	add	sp, #144	@ 0x90
 8011bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf6:	230b      	movs	r3, #11
 8011bf8:	e7f3      	b.n	8011be2 <rcl_take+0x82>
 8011bfa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011bfe:	4618      	mov	r0, r3
 8011c00:	4770      	bx	lr
 8011c02:	ad14      	add	r5, sp, #80	@ 0x50
 8011c04:	e7c0      	b.n	8011b88 <rcl_take+0x28>
 8011c06:	f7ff fa51 	bl	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	e7e9      	b.n	8011be2 <rcl_take+0x82>
 8011c0e:	bf00      	nop

08011c10 <rcl_subscription_get_rmw_handle>:
 8011c10:	b118      	cbz	r0, 8011c1a <rcl_subscription_get_rmw_handle+0xa>
 8011c12:	6800      	ldr	r0, [r0, #0]
 8011c14:	b108      	cbz	r0, 8011c1a <rcl_subscription_get_rmw_handle+0xa>
 8011c16:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011c1a:	4770      	bx	lr

08011c1c <rcl_subscription_is_valid>:
 8011c1c:	b130      	cbz	r0, 8011c2c <rcl_subscription_is_valid+0x10>
 8011c1e:	6800      	ldr	r0, [r0, #0]
 8011c20:	b120      	cbz	r0, 8011c2c <rcl_subscription_is_valid+0x10>
 8011c22:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011c26:	3800      	subs	r0, #0
 8011c28:	bf18      	it	ne
 8011c2a:	2001      	movne	r0, #1
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop

08011c30 <rcl_get_system_time>:
 8011c30:	4608      	mov	r0, r1
 8011c32:	f7f9 bb31 	b.w	800b298 <rcutils_system_time_now>
 8011c36:	bf00      	nop

08011c38 <rcl_get_steady_time>:
 8011c38:	4608      	mov	r0, r1
 8011c3a:	f7f9 bb55 	b.w	800b2e8 <rcutils_steady_time_now>
 8011c3e:	bf00      	nop

08011c40 <rcl_get_ros_time>:
 8011c40:	7a03      	ldrb	r3, [r0, #8]
 8011c42:	b510      	push	{r4, lr}
 8011c44:	460c      	mov	r4, r1
 8011c46:	b133      	cbz	r3, 8011c56 <rcl_get_ros_time+0x16>
 8011c48:	2105      	movs	r1, #5
 8011c4a:	f001 ff5d 	bl	8013b08 <__atomic_load_8>
 8011c4e:	e9c4 0100 	strd	r0, r1, [r4]
 8011c52:	2000      	movs	r0, #0
 8011c54:	bd10      	pop	{r4, pc}
 8011c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c5a:	4608      	mov	r0, r1
 8011c5c:	f7f9 bb1c 	b.w	800b298 <rcutils_system_time_now>

08011c60 <rcl_clock_init>:
 8011c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c62:	4605      	mov	r5, r0
 8011c64:	4610      	mov	r0, r2
 8011c66:	4614      	mov	r4, r2
 8011c68:	460e      	mov	r6, r1
 8011c6a:	f7f9 fad3 	bl	800b214 <rcutils_allocator_is_valid>
 8011c6e:	b128      	cbz	r0, 8011c7c <rcl_clock_init+0x1c>
 8011c70:	2d03      	cmp	r5, #3
 8011c72:	d803      	bhi.n	8011c7c <rcl_clock_init+0x1c>
 8011c74:	e8df f005 	tbb	[pc, r5]
 8011c78:	06532e1d 	.word	0x06532e1d
 8011c7c:	f04f 0c0b 	mov.w	ip, #11
 8011c80:	4660      	mov	r0, ip
 8011c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c84:	2e00      	cmp	r6, #0
 8011c86:	d0f9      	beq.n	8011c7c <rcl_clock_init+0x1c>
 8011c88:	2c00      	cmp	r4, #0
 8011c8a:	d0f7      	beq.n	8011c7c <rcl_clock_init+0x1c>
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011c92:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8011d48 <rcl_clock_init+0xe8>
 8011c96:	6133      	str	r3, [r6, #16]
 8011c98:	f106 0514 	add.w	r5, r6, #20
 8011c9c:	469c      	mov	ip, r3
 8011c9e:	2703      	movs	r7, #3
 8011ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	602b      	str	r3, [r5, #0]
 8011ca8:	7037      	strb	r7, [r6, #0]
 8011caa:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011cae:	4660      	mov	r0, ip
 8011cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cb2:	2e00      	cmp	r6, #0
 8011cb4:	d0e2      	beq.n	8011c7c <rcl_clock_init+0x1c>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	7033      	strb	r3, [r6, #0]
 8011cba:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011cbe:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011cc2:	469c      	mov	ip, r3
 8011cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cc6:	f106 0514 	add.w	r5, r6, #20
 8011cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	602b      	str	r3, [r5, #0]
 8011cd0:	4660      	mov	r0, ip
 8011cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cd4:	2e00      	cmp	r6, #0
 8011cd6:	d0d1      	beq.n	8011c7c <rcl_clock_init+0x1c>
 8011cd8:	2c00      	cmp	r4, #0
 8011cda:	d0cf      	beq.n	8011c7c <rcl_clock_init+0x1c>
 8011cdc:	2700      	movs	r7, #0
 8011cde:	7037      	strb	r7, [r6, #0]
 8011ce0:	46a4      	mov	ip, r4
 8011ce2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ce6:	f106 0514 	add.w	r5, r6, #20
 8011cea:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011cee:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011cf4:	f8dc 3000 	ldr.w	r3, [ip]
 8011cf8:	602b      	str	r3, [r5, #0]
 8011cfa:	6921      	ldr	r1, [r4, #16]
 8011cfc:	6823      	ldr	r3, [r4, #0]
 8011cfe:	2010      	movs	r0, #16
 8011d00:	4798      	blx	r3
 8011d02:	6130      	str	r0, [r6, #16]
 8011d04:	b1d0      	cbz	r0, 8011d3c <rcl_clock_init+0xdc>
 8011d06:	2200      	movs	r2, #0
 8011d08:	2300      	movs	r3, #0
 8011d0a:	e9c0 2300 	strd	r2, r3, [r0]
 8011d0e:	2301      	movs	r3, #1
 8011d10:	7207      	strb	r7, [r0, #8]
 8011d12:	4a0c      	ldr	r2, [pc, #48]	@ (8011d44 <rcl_clock_init+0xe4>)
 8011d14:	7033      	strb	r3, [r6, #0]
 8011d16:	46bc      	mov	ip, r7
 8011d18:	60f2      	str	r2, [r6, #12]
 8011d1a:	4660      	mov	r0, ip
 8011d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d1e:	2e00      	cmp	r6, #0
 8011d20:	d0ac      	beq.n	8011c7c <rcl_clock_init+0x1c>
 8011d22:	2c00      	cmp	r4, #0
 8011d24:	d0aa      	beq.n	8011c7c <rcl_clock_init+0x1c>
 8011d26:	2300      	movs	r3, #0
 8011d28:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011d2c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8011d4c <rcl_clock_init+0xec>
 8011d30:	6133      	str	r3, [r6, #16]
 8011d32:	f106 0514 	add.w	r5, r6, #20
 8011d36:	469c      	mov	ip, r3
 8011d38:	2702      	movs	r7, #2
 8011d3a:	e7b1      	b.n	8011ca0 <rcl_clock_init+0x40>
 8011d3c:	f04f 0c0a 	mov.w	ip, #10
 8011d40:	e79e      	b.n	8011c80 <rcl_clock_init+0x20>
 8011d42:	bf00      	nop
 8011d44:	08011c41 	.word	0x08011c41
 8011d48:	08011c39 	.word	0x08011c39
 8011d4c:	08011c31 	.word	0x08011c31

08011d50 <rcl_clock_get_now>:
 8011d50:	b140      	cbz	r0, 8011d64 <rcl_clock_get_now+0x14>
 8011d52:	b139      	cbz	r1, 8011d64 <rcl_clock_get_now+0x14>
 8011d54:	7803      	ldrb	r3, [r0, #0]
 8011d56:	b11b      	cbz	r3, 8011d60 <rcl_clock_get_now+0x10>
 8011d58:	68c3      	ldr	r3, [r0, #12]
 8011d5a:	b10b      	cbz	r3, 8011d60 <rcl_clock_get_now+0x10>
 8011d5c:	6900      	ldr	r0, [r0, #16]
 8011d5e:	4718      	bx	r3
 8011d60:	2001      	movs	r0, #1
 8011d62:	4770      	bx	lr
 8011d64:	200b      	movs	r0, #11
 8011d66:	4770      	bx	lr

08011d68 <rcl_clock_add_jump_callback>:
 8011d68:	b082      	sub	sp, #8
 8011d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6e:	a906      	add	r1, sp, #24
 8011d70:	e881 000c 	stmia.w	r1, {r2, r3}
 8011d74:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8011d78:	b320      	cbz	r0, 8011dc4 <rcl_clock_add_jump_callback+0x5c>
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	3014      	adds	r0, #20
 8011d7e:	f7f9 fa49 	bl	800b214 <rcutils_allocator_is_valid>
 8011d82:	b1f8      	cbz	r0, 8011dc4 <rcl_clock_add_jump_callback+0x5c>
 8011d84:	b1f6      	cbz	r6, 8011dc4 <rcl_clock_add_jump_callback+0x5c>
 8011d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	db1b      	blt.n	8011dc4 <rcl_clock_add_jump_callback+0x5c>
 8011d8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011d90:	2a01      	cmp	r2, #1
 8011d92:	f173 0300 	sbcs.w	r3, r3, #0
 8011d96:	da15      	bge.n	8011dc4 <rcl_clock_add_jump_callback+0x5c>
 8011d98:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8011d9c:	2f00      	cmp	r7, #0
 8011d9e:	d042      	beq.n	8011e26 <rcl_clock_add_jump_callback+0xbe>
 8011da0:	2300      	movs	r3, #0
 8011da2:	4602      	mov	r2, r0
 8011da4:	e003      	b.n	8011dae <rcl_clock_add_jump_callback+0x46>
 8011da6:	42bb      	cmp	r3, r7
 8011da8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8011dac:	d011      	beq.n	8011dd2 <rcl_clock_add_jump_callback+0x6a>
 8011dae:	6811      	ldr	r1, [r2, #0]
 8011db0:	42b1      	cmp	r1, r6
 8011db2:	f103 0301 	add.w	r3, r3, #1
 8011db6:	d1f6      	bne.n	8011da6 <rcl_clock_add_jump_callback+0x3e>
 8011db8:	6a11      	ldr	r1, [r2, #32]
 8011dba:	42a9      	cmp	r1, r5
 8011dbc:	d1f3      	bne.n	8011da6 <rcl_clock_add_jump_callback+0x3e>
 8011dbe:	f04f 0e01 	mov.w	lr, #1
 8011dc2:	e001      	b.n	8011dc8 <rcl_clock_add_jump_callback+0x60>
 8011dc4:	f04f 0e0b 	mov.w	lr, #11
 8011dc8:	4670      	mov	r0, lr
 8011dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dce:	b002      	add	sp, #8
 8011dd0:	4770      	bx	lr
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011dd8:	00d9      	lsls	r1, r3, #3
 8011dda:	69e3      	ldr	r3, [r4, #28]
 8011ddc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011dde:	4798      	blx	r3
 8011de0:	b1f0      	cbz	r0, 8011e20 <rcl_clock_add_jump_callback+0xb8>
 8011de2:	68a3      	ldr	r3, [r4, #8]
 8011de4:	6060      	str	r0, [r4, #4]
 8011de6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011dea:	f10d 0c18 	add.w	ip, sp, #24
 8011dee:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8011df2:	f103 0801 	add.w	r8, r3, #1
 8011df6:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8011dfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011dfe:	f106 0708 	add.w	r7, r6, #8
 8011e02:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011e04:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011e08:	f04f 0e00 	mov.w	lr, #0
 8011e0c:	e887 0003 	stmia.w	r7, {r0, r1}
 8011e10:	6235      	str	r5, [r6, #32]
 8011e12:	4670      	mov	r0, lr
 8011e14:	f8c4 8008 	str.w	r8, [r4, #8]
 8011e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e1c:	b002      	add	sp, #8
 8011e1e:	4770      	bx	lr
 8011e20:	f04f 0e0a 	mov.w	lr, #10
 8011e24:	e7d0      	b.n	8011dc8 <rcl_clock_add_jump_callback+0x60>
 8011e26:	2128      	movs	r1, #40	@ 0x28
 8011e28:	e7d7      	b.n	8011dda <rcl_clock_add_jump_callback+0x72>
 8011e2a:	bf00      	nop

08011e2c <rcl_clock_remove_jump_callback>:
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d057      	beq.n	8011ee0 <rcl_clock_remove_jump_callback+0xb4>
 8011e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e34:	4605      	mov	r5, r0
 8011e36:	3014      	adds	r0, #20
 8011e38:	4688      	mov	r8, r1
 8011e3a:	4692      	mov	sl, r2
 8011e3c:	f7f9 f9ea 	bl	800b214 <rcutils_allocator_is_valid>
 8011e40:	2800      	cmp	r0, #0
 8011e42:	d03b      	beq.n	8011ebc <rcl_clock_remove_jump_callback+0x90>
 8011e44:	f1b8 0f00 	cmp.w	r8, #0
 8011e48:	d038      	beq.n	8011ebc <rcl_clock_remove_jump_callback+0x90>
 8011e4a:	68ae      	ldr	r6, [r5, #8]
 8011e4c:	b166      	cbz	r6, 8011e68 <rcl_clock_remove_jump_callback+0x3c>
 8011e4e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011e52:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8011e56:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8011e5a:	464c      	mov	r4, r9
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	4543      	cmp	r3, r8
 8011e60:	d005      	beq.n	8011e6e <rcl_clock_remove_jump_callback+0x42>
 8011e62:	3428      	adds	r4, #40	@ 0x28
 8011e64:	42a7      	cmp	r7, r4
 8011e66:	d1f9      	bne.n	8011e5c <rcl_clock_remove_jump_callback+0x30>
 8011e68:	2001      	movs	r0, #1
 8011e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6e:	6a23      	ldr	r3, [r4, #32]
 8011e70:	3428      	adds	r4, #40	@ 0x28
 8011e72:	42bc      	cmp	r4, r7
 8011e74:	d02d      	beq.n	8011ed2 <rcl_clock_remove_jump_callback+0xa6>
 8011e76:	4553      	cmp	r3, sl
 8011e78:	d1f0      	bne.n	8011e5c <rcl_clock_remove_jump_callback+0x30>
 8011e7a:	46a6      	mov	lr, r4
 8011e7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e80:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8011e84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e90:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011e94:	3428      	adds	r4, #40	@ 0x28
 8011e96:	42a7      	cmp	r7, r4
 8011e98:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011e9c:	d1ed      	bne.n	8011e7a <rcl_clock_remove_jump_callback+0x4e>
 8011e9e:	3e01      	subs	r6, #1
 8011ea0:	60ae      	str	r6, [r5, #8]
 8011ea2:	b176      	cbz	r6, 8011ec2 <rcl_clock_remove_jump_callback+0x96>
 8011ea4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8011ea8:	69eb      	ldr	r3, [r5, #28]
 8011eaa:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011eac:	00f1      	lsls	r1, r6, #3
 8011eae:	4648      	mov	r0, r9
 8011eb0:	4798      	blx	r3
 8011eb2:	b1b8      	cbz	r0, 8011ee4 <rcl_clock_remove_jump_callback+0xb8>
 8011eb4:	6068      	str	r0, [r5, #4]
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ebc:	200b      	movs	r0, #11
 8011ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec2:	4648      	mov	r0, r9
 8011ec4:	69ab      	ldr	r3, [r5, #24]
 8011ec6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8011ec8:	4798      	blx	r3
 8011eca:	606e      	str	r6, [r5, #4]
 8011ecc:	4630      	mov	r0, r6
 8011ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed2:	4553      	cmp	r3, sl
 8011ed4:	d1c8      	bne.n	8011e68 <rcl_clock_remove_jump_callback+0x3c>
 8011ed6:	3e01      	subs	r6, #1
 8011ed8:	60ae      	str	r6, [r5, #8]
 8011eda:	2e00      	cmp	r6, #0
 8011edc:	d1e2      	bne.n	8011ea4 <rcl_clock_remove_jump_callback+0x78>
 8011ede:	e7f0      	b.n	8011ec2 <rcl_clock_remove_jump_callback+0x96>
 8011ee0:	200b      	movs	r0, #11
 8011ee2:	4770      	bx	lr
 8011ee4:	200a      	movs	r0, #10
 8011ee6:	e7ea      	b.n	8011ebe <rcl_clock_remove_jump_callback+0x92>

08011ee8 <_rcl_timer_time_jump>:
 8011ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eec:	4605      	mov	r5, r0
 8011eee:	b084      	sub	sp, #16
 8011ef0:	4614      	mov	r4, r2
 8011ef2:	b131      	cbz	r1, 8011f02 <_rcl_timer_time_jump+0x1a>
 8011ef4:	7803      	ldrb	r3, [r0, #0]
 8011ef6:	3b02      	subs	r3, #2
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d93f      	bls.n	8011f7c <_rcl_timer_time_jump+0x94>
 8011efc:	b004      	add	sp, #16
 8011efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f02:	6813      	ldr	r3, [r2, #0]
 8011f04:	a902      	add	r1, sp, #8
 8011f06:	6818      	ldr	r0, [r3, #0]
 8011f08:	f7ff ff22 	bl	8011d50 <rcl_clock_get_now>
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d1f5      	bne.n	8011efc <_rcl_timer_time_jump+0x14>
 8011f10:	6820      	ldr	r0, [r4, #0]
 8011f12:	2105      	movs	r1, #5
 8011f14:	3020      	adds	r0, #32
 8011f16:	f001 fdf7 	bl	8013b08 <__atomic_load_8>
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	4681      	mov	r9, r0
 8011f1e:	4688      	mov	r8, r1
 8011f20:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011f24:	2105      	movs	r1, #5
 8011f26:	f001 fdef 	bl	8013b08 <__atomic_load_8>
 8011f2a:	4607      	mov	r7, r0
 8011f2c:	6820      	ldr	r0, [r4, #0]
 8011f2e:	460e      	mov	r6, r1
 8011f30:	3018      	adds	r0, #24
 8011f32:	2105      	movs	r1, #5
 8011f34:	f001 fde8 	bl	8013b08 <__atomic_load_8>
 8011f38:	782b      	ldrb	r3, [r5, #0]
 8011f3a:	9a02      	ldr	r2, [sp, #8]
 8011f3c:	3b02      	subs	r3, #2
 8011f3e:	2b01      	cmp	r3, #1
 8011f40:	460d      	mov	r5, r1
 8011f42:	9b03      	ldr	r3, [sp, #12]
 8011f44:	4682      	mov	sl, r0
 8011f46:	d937      	bls.n	8011fb8 <_rcl_timer_time_jump+0xd0>
 8011f48:	42ba      	cmp	r2, r7
 8011f4a:	eb73 0106 	sbcs.w	r1, r3, r6
 8011f4e:	da5f      	bge.n	8012010 <_rcl_timer_time_jump+0x128>
 8011f50:	454a      	cmp	r2, r9
 8011f52:	eb73 0108 	sbcs.w	r1, r3, r8
 8011f56:	dad1      	bge.n	8011efc <_rcl_timer_time_jump+0x14>
 8011f58:	6820      	ldr	r0, [r4, #0]
 8011f5a:	eb1a 0202 	adds.w	r2, sl, r2
 8011f5e:	eb43 0305 	adc.w	r3, r3, r5
 8011f62:	2505      	movs	r5, #5
 8011f64:	3028      	adds	r0, #40	@ 0x28
 8011f66:	9500      	str	r5, [sp, #0]
 8011f68:	f001 fe04 	bl	8013b74 <__atomic_store_8>
 8011f6c:	6820      	ldr	r0, [r4, #0]
 8011f6e:	9500      	str	r5, [sp, #0]
 8011f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f74:	3020      	adds	r0, #32
 8011f76:	f001 fdfd 	bl	8013b74 <__atomic_store_8>
 8011f7a:	e7bf      	b.n	8011efc <_rcl_timer_time_jump+0x14>
 8011f7c:	6813      	ldr	r3, [r2, #0]
 8011f7e:	a902      	add	r1, sp, #8
 8011f80:	6818      	ldr	r0, [r3, #0]
 8011f82:	f7ff fee5 	bl	8011d50 <rcl_clock_get_now>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d1b8      	bne.n	8011efc <_rcl_timer_time_jump+0x14>
 8011f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	d0b4      	beq.n	8011efc <_rcl_timer_time_jump+0x14>
 8011f92:	6820      	ldr	r0, [r4, #0]
 8011f94:	2105      	movs	r1, #5
 8011f96:	3028      	adds	r0, #40	@ 0x28
 8011f98:	f001 fdb6 	bl	8013b08 <__atomic_load_8>
 8011f9c:	9d02      	ldr	r5, [sp, #8]
 8011f9e:	9b03      	ldr	r3, [sp, #12]
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	6820      	ldr	r0, [r4, #0]
 8011fa4:	1b52      	subs	r2, r2, r5
 8011fa6:	f04f 0405 	mov.w	r4, #5
 8011faa:	9400      	str	r4, [sp, #0]
 8011fac:	eb61 0303 	sbc.w	r3, r1, r3
 8011fb0:	3030      	adds	r0, #48	@ 0x30
 8011fb2:	f001 fddf 	bl	8013b74 <__atomic_store_8>
 8011fb6:	e7a1      	b.n	8011efc <_rcl_timer_time_jump+0x14>
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	d09f      	beq.n	8011efc <_rcl_timer_time_jump+0x14>
 8011fbc:	6820      	ldr	r0, [r4, #0]
 8011fbe:	f04f 0805 	mov.w	r8, #5
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f8cd 8000 	str.w	r8, [sp]
 8011fc8:	3030      	adds	r0, #48	@ 0x30
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f001 fe08 	bl	8013be0 <__atomic_exchange_8>
 8011fd0:	ea51 0300 	orrs.w	r3, r1, r0
 8011fd4:	4606      	mov	r6, r0
 8011fd6:	460f      	mov	r7, r1
 8011fd8:	d090      	beq.n	8011efc <_rcl_timer_time_jump+0x14>
 8011fda:	9a02      	ldr	r2, [sp, #8]
 8011fdc:	9b03      	ldr	r3, [sp, #12]
 8011fde:	f8cd 8000 	str.w	r8, [sp]
 8011fe2:	1a12      	subs	r2, r2, r0
 8011fe4:	6820      	ldr	r0, [r4, #0]
 8011fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8011fea:	eb12 020a 	adds.w	r2, r2, sl
 8011fee:	eb43 0305 	adc.w	r3, r3, r5
 8011ff2:	3028      	adds	r0, #40	@ 0x28
 8011ff4:	f001 fdbe 	bl	8013b74 <__atomic_store_8>
 8011ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ffc:	f8cd 8000 	str.w	r8, [sp]
 8012000:	6820      	ldr	r0, [r4, #0]
 8012002:	1b92      	subs	r2, r2, r6
 8012004:	eb63 0307 	sbc.w	r3, r3, r7
 8012008:	3020      	adds	r0, #32
 801200a:	f001 fdb3 	bl	8013b74 <__atomic_store_8>
 801200e:	e775      	b.n	8011efc <_rcl_timer_time_jump+0x14>
 8012010:	6820      	ldr	r0, [r4, #0]
 8012012:	3008      	adds	r0, #8
 8012014:	f004 f976 	bl	8016304 <rcl_trigger_guard_condition>
 8012018:	e770      	b.n	8011efc <_rcl_timer_time_jump+0x14>
 801201a:	bf00      	nop

0801201c <rcl_get_zero_initialized_timer>:
 801201c:	4b01      	ldr	r3, [pc, #4]	@ (8012024 <rcl_get_zero_initialized_timer+0x8>)
 801201e:	6818      	ldr	r0, [r3, #0]
 8012020:	4770      	bx	lr
 8012022:	bf00      	nop
 8012024:	08018418 	.word	0x08018418

08012028 <rcl_timer_init>:
 8012028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801202c:	b0aa      	sub	sp, #168	@ 0xa8
 801202e:	4604      	mov	r4, r0
 8012030:	a835      	add	r0, sp, #212	@ 0xd4
 8012032:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012036:	460d      	mov	r5, r1
 8012038:	4692      	mov	sl, r2
 801203a:	f7f9 f8eb 	bl	800b214 <rcutils_allocator_is_valid>
 801203e:	2800      	cmp	r0, #0
 8012040:	d064      	beq.n	801210c <rcl_timer_init+0xe4>
 8012042:	2c00      	cmp	r4, #0
 8012044:	d062      	beq.n	801210c <rcl_timer_init+0xe4>
 8012046:	2d00      	cmp	r5, #0
 8012048:	d060      	beq.n	801210c <rcl_timer_init+0xe4>
 801204a:	2f00      	cmp	r7, #0
 801204c:	db5e      	blt.n	801210c <rcl_timer_init+0xe4>
 801204e:	6823      	ldr	r3, [r4, #0]
 8012050:	b123      	cbz	r3, 801205c <rcl_timer_init+0x34>
 8012052:	2664      	movs	r6, #100	@ 0x64
 8012054:	4630      	mov	r0, r6
 8012056:	b02a      	add	sp, #168	@ 0xa8
 8012058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801205c:	a908      	add	r1, sp, #32
 801205e:	4628      	mov	r0, r5
 8012060:	f7ff fe76 	bl	8011d50 <rcl_clock_get_now>
 8012064:	4606      	mov	r6, r0
 8012066:	2800      	cmp	r0, #0
 8012068:	d1f4      	bne.n	8012054 <rcl_timer_init+0x2c>
 801206a:	ae06      	add	r6, sp, #24
 801206c:	4630      	mov	r0, r6
 801206e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012072:	f004 f84f 	bl	8016114 <rcl_get_zero_initialized_guard_condition>
 8012076:	e896 0003 	ldmia.w	r6, {r0, r1}
 801207a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801207e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012080:	e889 0003 	stmia.w	r9, {r0, r1}
 8012084:	4630      	mov	r0, r6
 8012086:	f004 f921 	bl	80162cc <rcl_guard_condition_get_default_options>
 801208a:	ab0d      	add	r3, sp, #52	@ 0x34
 801208c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012090:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012094:	4651      	mov	r1, sl
 8012096:	e896 000c 	ldmia.w	r6, {r2, r3}
 801209a:	4648      	mov	r0, r9
 801209c:	f004 f844 	bl	8016128 <rcl_guard_condition_init>
 80120a0:	4606      	mov	r6, r0
 80120a2:	2800      	cmp	r0, #0
 80120a4:	d1d6      	bne.n	8012054 <rcl_timer_init+0x2c>
 80120a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d033      	beq.n	8012116 <rcl_timer_init+0xee>
 80120ae:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80120b0:	911a      	str	r1, [sp, #104]	@ 0x68
 80120b2:	4642      	mov	r2, r8
 80120b4:	463b      	mov	r3, r7
 80120b6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80120ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80120be:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012170 <rcl_timer_init+0x148>
 80120c2:	eb12 0008 	adds.w	r0, r2, r8
 80120c6:	eb47 0103 	adc.w	r1, r7, r3
 80120ca:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 80120ce:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80120d2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80120d6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80120da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120de:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 80120e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120e6:	f8de 3000 	ldr.w	r3, [lr]
 80120ea:	f8cc 3000 	str.w	r3, [ip]
 80120ee:	f04f 0a00 	mov.w	sl, #0
 80120f2:	4619      	mov	r1, r3
 80120f4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80120f8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80120fa:	2050      	movs	r0, #80	@ 0x50
 80120fc:	4798      	blx	r3
 80120fe:	6020      	str	r0, [r4, #0]
 8012100:	b358      	cbz	r0, 801215a <rcl_timer_init+0x132>
 8012102:	2250      	movs	r2, #80	@ 0x50
 8012104:	a916      	add	r1, sp, #88	@ 0x58
 8012106:	f004 fed0 	bl	8016eaa <memcpy>
 801210a:	e7a3      	b.n	8012054 <rcl_timer_init+0x2c>
 801210c:	260b      	movs	r6, #11
 801210e:	4630      	mov	r0, r6
 8012110:	b02a      	add	sp, #168	@ 0xa8
 8012112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012116:	2001      	movs	r0, #1
 8012118:	2100      	movs	r1, #0
 801211a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801211e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012122:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012126:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801212a:	4a13      	ldr	r2, [pc, #76]	@ (8012178 <rcl_timer_init+0x150>)
 801212c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012130:	9405      	str	r4, [sp, #20]
 8012132:	9204      	str	r2, [sp, #16]
 8012134:	ab12      	add	r3, sp, #72	@ 0x48
 8012136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012138:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801213c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012140:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8012144:	4628      	mov	r0, r5
 8012146:	f7ff fe0f 	bl	8011d68 <rcl_clock_add_jump_callback>
 801214a:	4682      	mov	sl, r0
 801214c:	2800      	cmp	r0, #0
 801214e:	d0ae      	beq.n	80120ae <rcl_timer_init+0x86>
 8012150:	4648      	mov	r0, r9
 8012152:	f004 f895 	bl	8016280 <rcl_guard_condition_fini>
 8012156:	4656      	mov	r6, sl
 8012158:	e77c      	b.n	8012054 <rcl_timer_init+0x2c>
 801215a:	4648      	mov	r0, r9
 801215c:	f004 f890 	bl	8016280 <rcl_guard_condition_fini>
 8012160:	4905      	ldr	r1, [pc, #20]	@ (8012178 <rcl_timer_init+0x150>)
 8012162:	4622      	mov	r2, r4
 8012164:	4628      	mov	r0, r5
 8012166:	f7ff fe61 	bl	8011e2c <rcl_clock_remove_jump_callback>
 801216a:	260a      	movs	r6, #10
 801216c:	e772      	b.n	8012054 <rcl_timer_init+0x2c>
 801216e:	bf00      	nop
	...
 8012178:	08011ee9 	.word	0x08011ee9

0801217c <rcl_timer_call>:
 801217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012180:	b087      	sub	sp, #28
 8012182:	2800      	cmp	r0, #0
 8012184:	d06d      	beq.n	8012262 <rcl_timer_call+0xe6>
 8012186:	6803      	ldr	r3, [r0, #0]
 8012188:	4604      	mov	r4, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d063      	beq.n	8012256 <rcl_timer_call+0xda>
 801218e:	f3bf 8f5b 	dmb	ish
 8012192:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012196:	f3bf 8f5b 	dmb	ish
 801219a:	2b00      	cmp	r3, #0
 801219c:	d150      	bne.n	8012240 <rcl_timer_call+0xc4>
 801219e:	6803      	ldr	r3, [r0, #0]
 80121a0:	a904      	add	r1, sp, #16
 80121a2:	6818      	ldr	r0, [r3, #0]
 80121a4:	f7ff fdd4 	bl	8011d50 <rcl_clock_get_now>
 80121a8:	4605      	mov	r5, r0
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d14a      	bne.n	8012244 <rcl_timer_call+0xc8>
 80121ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	db4a      	blt.n	801224c <rcl_timer_call+0xd0>
 80121b6:	6820      	ldr	r0, [r4, #0]
 80121b8:	f04f 0a05 	mov.w	sl, #5
 80121bc:	f8cd a000 	str.w	sl, [sp]
 80121c0:	3020      	adds	r0, #32
 80121c2:	f001 fd0d 	bl	8013be0 <__atomic_exchange_8>
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	f3bf 8f5b 	dmb	ish
 80121cc:	4680      	mov	r8, r0
 80121ce:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80121d2:	f3bf 8f5b 	dmb	ish
 80121d6:	6820      	ldr	r0, [r4, #0]
 80121d8:	4689      	mov	r9, r1
 80121da:	3028      	adds	r0, #40	@ 0x28
 80121dc:	4651      	mov	r1, sl
 80121de:	f001 fc93 	bl	8013b08 <__atomic_load_8>
 80121e2:	4606      	mov	r6, r0
 80121e4:	6820      	ldr	r0, [r4, #0]
 80121e6:	460f      	mov	r7, r1
 80121e8:	3018      	adds	r0, #24
 80121ea:	4651      	mov	r1, sl
 80121ec:	f001 fc8c 	bl	8013b08 <__atomic_load_8>
 80121f0:	1836      	adds	r6, r6, r0
 80121f2:	4602      	mov	r2, r0
 80121f4:	4682      	mov	sl, r0
 80121f6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80121fa:	eb47 0701 	adc.w	r7, r7, r1
 80121fe:	4286      	cmp	r6, r0
 8012200:	460b      	mov	r3, r1
 8012202:	eb77 010c 	sbcs.w	r1, r7, ip
 8012206:	da04      	bge.n	8012212 <rcl_timer_call+0x96>
 8012208:	ea53 0102 	orrs.w	r1, r3, r2
 801220c:	d12e      	bne.n	801226c <rcl_timer_call+0xf0>
 801220e:	4606      	mov	r6, r0
 8012210:	4667      	mov	r7, ip
 8012212:	6820      	ldr	r0, [r4, #0]
 8012214:	2105      	movs	r1, #5
 8012216:	4632      	mov	r2, r6
 8012218:	463b      	mov	r3, r7
 801221a:	3028      	adds	r0, #40	@ 0x28
 801221c:	9100      	str	r1, [sp, #0]
 801221e:	f001 fca9 	bl	8013b74 <__atomic_store_8>
 8012222:	f1bb 0f00 	cmp.w	fp, #0
 8012226:	d00d      	beq.n	8012244 <rcl_timer_call+0xc8>
 8012228:	9a04      	ldr	r2, [sp, #16]
 801222a:	9b05      	ldr	r3, [sp, #20]
 801222c:	ebb2 0208 	subs.w	r2, r2, r8
 8012230:	4620      	mov	r0, r4
 8012232:	eb63 0309 	sbc.w	r3, r3, r9
 8012236:	47d8      	blx	fp
 8012238:	4628      	mov	r0, r5
 801223a:	b007      	add	sp, #28
 801223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012240:	f240 3521 	movw	r5, #801	@ 0x321
 8012244:	4628      	mov	r0, r5
 8012246:	b007      	add	sp, #28
 8012248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801224c:	2501      	movs	r5, #1
 801224e:	4628      	mov	r0, r5
 8012250:	b007      	add	sp, #28
 8012252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012256:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801225a:	4628      	mov	r0, r5
 801225c:	b007      	add	sp, #28
 801225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012262:	250b      	movs	r5, #11
 8012264:	4628      	mov	r0, r5
 8012266:	b007      	add	sp, #28
 8012268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226c:	1b80      	subs	r0, r0, r6
 801226e:	eb6c 0107 	sbc.w	r1, ip, r7
 8012272:	3801      	subs	r0, #1
 8012274:	f161 0100 	sbc.w	r1, r1, #0
 8012278:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801227c:	f7ee f838 	bl	80002f0 <__aeabi_ldivmod>
 8012280:	9b02      	ldr	r3, [sp, #8]
 8012282:	3001      	adds	r0, #1
 8012284:	f141 0100 	adc.w	r1, r1, #0
 8012288:	fb00 f303 	mul.w	r3, r0, r3
 801228c:	fb01 330a 	mla	r3, r1, sl, r3
 8012290:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012294:	1986      	adds	r6, r0, r6
 8012296:	4453      	add	r3, sl
 8012298:	eb43 0707 	adc.w	r7, r3, r7
 801229c:	e7b9      	b.n	8012212 <rcl_timer_call+0x96>
 801229e:	bf00      	nop

080122a0 <rcl_timer_is_ready>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	b378      	cbz	r0, 8012306 <rcl_timer_is_ready+0x66>
 80122a6:	6803      	ldr	r3, [r0, #0]
 80122a8:	4604      	mov	r4, r0
 80122aa:	b383      	cbz	r3, 801230e <rcl_timer_is_ready+0x6e>
 80122ac:	460d      	mov	r5, r1
 80122ae:	b351      	cbz	r1, 8012306 <rcl_timer_is_ready+0x66>
 80122b0:	f3bf 8f5b 	dmb	ish
 80122b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80122b8:	f3bf 8f5b 	dmb	ish
 80122bc:	b953      	cbnz	r3, 80122d4 <rcl_timer_is_ready+0x34>
 80122be:	6803      	ldr	r3, [r0, #0]
 80122c0:	4669      	mov	r1, sp
 80122c2:	6818      	ldr	r0, [r3, #0]
 80122c4:	f7ff fd44 	bl	8011d50 <rcl_clock_get_now>
 80122c8:	4606      	mov	r6, r0
 80122ca:	b140      	cbz	r0, 80122de <rcl_timer_is_ready+0x3e>
 80122cc:	f240 3321 	movw	r3, #801	@ 0x321
 80122d0:	4298      	cmp	r0, r3
 80122d2:	d101      	bne.n	80122d8 <rcl_timer_is_ready+0x38>
 80122d4:	2600      	movs	r6, #0
 80122d6:	702e      	strb	r6, [r5, #0]
 80122d8:	4630      	mov	r0, r6
 80122da:	b002      	add	sp, #8
 80122dc:	bd70      	pop	{r4, r5, r6, pc}
 80122de:	6820      	ldr	r0, [r4, #0]
 80122e0:	2105      	movs	r1, #5
 80122e2:	3028      	adds	r0, #40	@ 0x28
 80122e4:	f001 fc10 	bl	8013b08 <__atomic_load_8>
 80122e8:	9b00      	ldr	r3, [sp, #0]
 80122ea:	1ac0      	subs	r0, r0, r3
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	eb61 0103 	sbc.w	r1, r1, r3
 80122f2:	2801      	cmp	r0, #1
 80122f4:	f171 0300 	sbcs.w	r3, r1, #0
 80122f8:	bfb4      	ite	lt
 80122fa:	2301      	movlt	r3, #1
 80122fc:	2300      	movge	r3, #0
 80122fe:	4630      	mov	r0, r6
 8012300:	702b      	strb	r3, [r5, #0]
 8012302:	b002      	add	sp, #8
 8012304:	bd70      	pop	{r4, r5, r6, pc}
 8012306:	260b      	movs	r6, #11
 8012308:	4630      	mov	r0, r6
 801230a:	b002      	add	sp, #8
 801230c:	bd70      	pop	{r4, r5, r6, pc}
 801230e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012312:	e7e1      	b.n	80122d8 <rcl_timer_is_ready+0x38>

08012314 <rcl_timer_get_time_until_next_call>:
 8012314:	b570      	push	{r4, r5, r6, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	b330      	cbz	r0, 8012368 <rcl_timer_get_time_until_next_call+0x54>
 801231a:	6803      	ldr	r3, [r0, #0]
 801231c:	4604      	mov	r4, r0
 801231e:	b33b      	cbz	r3, 8012370 <rcl_timer_get_time_until_next_call+0x5c>
 8012320:	460d      	mov	r5, r1
 8012322:	b309      	cbz	r1, 8012368 <rcl_timer_get_time_until_next_call+0x54>
 8012324:	f3bf 8f5b 	dmb	ish
 8012328:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801232c:	f3bf 8f5b 	dmb	ish
 8012330:	b9ab      	cbnz	r3, 801235e <rcl_timer_get_time_until_next_call+0x4a>
 8012332:	6803      	ldr	r3, [r0, #0]
 8012334:	4669      	mov	r1, sp
 8012336:	6818      	ldr	r0, [r3, #0]
 8012338:	f7ff fd0a 	bl	8011d50 <rcl_clock_get_now>
 801233c:	4606      	mov	r6, r0
 801233e:	b958      	cbnz	r0, 8012358 <rcl_timer_get_time_until_next_call+0x44>
 8012340:	6820      	ldr	r0, [r4, #0]
 8012342:	2105      	movs	r1, #5
 8012344:	3028      	adds	r0, #40	@ 0x28
 8012346:	f001 fbdf 	bl	8013b08 <__atomic_load_8>
 801234a:	9b00      	ldr	r3, [sp, #0]
 801234c:	1ac0      	subs	r0, r0, r3
 801234e:	9b01      	ldr	r3, [sp, #4]
 8012350:	6028      	str	r0, [r5, #0]
 8012352:	eb61 0103 	sbc.w	r1, r1, r3
 8012356:	6069      	str	r1, [r5, #4]
 8012358:	4630      	mov	r0, r6
 801235a:	b002      	add	sp, #8
 801235c:	bd70      	pop	{r4, r5, r6, pc}
 801235e:	f240 3621 	movw	r6, #801	@ 0x321
 8012362:	4630      	mov	r0, r6
 8012364:	b002      	add	sp, #8
 8012366:	bd70      	pop	{r4, r5, r6, pc}
 8012368:	260b      	movs	r6, #11
 801236a:	4630      	mov	r0, r6
 801236c:	b002      	add	sp, #8
 801236e:	bd70      	pop	{r4, r5, r6, pc}
 8012370:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012374:	e7f0      	b.n	8012358 <rcl_timer_get_time_until_next_call+0x44>
 8012376:	bf00      	nop

08012378 <rcl_timer_get_guard_condition>:
 8012378:	b130      	cbz	r0, 8012388 <rcl_timer_get_guard_condition+0x10>
 801237a:	6800      	ldr	r0, [r0, #0]
 801237c:	b120      	cbz	r0, 8012388 <rcl_timer_get_guard_condition+0x10>
 801237e:	68c3      	ldr	r3, [r0, #12]
 8012380:	b10b      	cbz	r3, 8012386 <rcl_timer_get_guard_condition+0xe>
 8012382:	3008      	adds	r0, #8
 8012384:	4770      	bx	lr
 8012386:	4618      	mov	r0, r3
 8012388:	4770      	bx	lr
 801238a:	bf00      	nop

0801238c <rcl_validate_enclave_name_with_size>:
 801238c:	b378      	cbz	r0, 80123ee <rcl_validate_enclave_name_with_size+0x62>
 801238e:	b570      	push	{r4, r5, r6, lr}
 8012390:	4615      	mov	r5, r2
 8012392:	b0c2      	sub	sp, #264	@ 0x108
 8012394:	b302      	cbz	r2, 80123d8 <rcl_validate_enclave_name_with_size+0x4c>
 8012396:	461e      	mov	r6, r3
 8012398:	466a      	mov	r2, sp
 801239a:	ab01      	add	r3, sp, #4
 801239c:	460c      	mov	r4, r1
 801239e:	f002 f815 	bl	80143cc <rmw_validate_namespace_with_size>
 80123a2:	4684      	mov	ip, r0
 80123a4:	b9e8      	cbnz	r0, 80123e2 <rcl_validate_enclave_name_with_size+0x56>
 80123a6:	9b00      	ldr	r3, [sp, #0]
 80123a8:	b923      	cbnz	r3, 80123b4 <rcl_validate_enclave_name_with_size+0x28>
 80123aa:	2300      	movs	r3, #0
 80123ac:	602b      	str	r3, [r5, #0]
 80123ae:	4660      	mov	r0, ip
 80123b0:	b042      	add	sp, #264	@ 0x108
 80123b2:	bd70      	pop	{r4, r5, r6, pc}
 80123b4:	2b07      	cmp	r3, #7
 80123b6:	d007      	beq.n	80123c8 <rcl_validate_enclave_name_with_size+0x3c>
 80123b8:	1e5a      	subs	r2, r3, #1
 80123ba:	2a05      	cmp	r2, #5
 80123bc:	d833      	bhi.n	8012426 <rcl_validate_enclave_name_with_size+0x9a>
 80123be:	e8df f002 	tbb	[pc, r2]
 80123c2:	2c2f      	.short	0x2c2f
 80123c4:	1a232629 	.word	0x1a232629
 80123c8:	2cff      	cmp	r4, #255	@ 0xff
 80123ca:	d9ee      	bls.n	80123aa <rcl_validate_enclave_name_with_size+0x1e>
 80123cc:	602b      	str	r3, [r5, #0]
 80123ce:	2e00      	cmp	r6, #0
 80123d0:	d0ed      	beq.n	80123ae <rcl_validate_enclave_name_with_size+0x22>
 80123d2:	23fe      	movs	r3, #254	@ 0xfe
 80123d4:	6033      	str	r3, [r6, #0]
 80123d6:	e7ea      	b.n	80123ae <rcl_validate_enclave_name_with_size+0x22>
 80123d8:	f04f 0c0b 	mov.w	ip, #11
 80123dc:	4660      	mov	r0, ip
 80123de:	b042      	add	sp, #264	@ 0x108
 80123e0:	bd70      	pop	{r4, r5, r6, pc}
 80123e2:	f7fe fe63 	bl	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 80123e6:	4684      	mov	ip, r0
 80123e8:	4660      	mov	r0, ip
 80123ea:	b042      	add	sp, #264	@ 0x108
 80123ec:	bd70      	pop	{r4, r5, r6, pc}
 80123ee:	f04f 0c0b 	mov.w	ip, #11
 80123f2:	4660      	mov	r0, ip
 80123f4:	4770      	bx	lr
 80123f6:	2306      	movs	r3, #6
 80123f8:	602b      	str	r3, [r5, #0]
 80123fa:	2e00      	cmp	r6, #0
 80123fc:	d0d7      	beq.n	80123ae <rcl_validate_enclave_name_with_size+0x22>
 80123fe:	9b01      	ldr	r3, [sp, #4]
 8012400:	6033      	str	r3, [r6, #0]
 8012402:	4660      	mov	r0, ip
 8012404:	b042      	add	sp, #264	@ 0x108
 8012406:	bd70      	pop	{r4, r5, r6, pc}
 8012408:	2305      	movs	r3, #5
 801240a:	602b      	str	r3, [r5, #0]
 801240c:	e7f5      	b.n	80123fa <rcl_validate_enclave_name_with_size+0x6e>
 801240e:	2304      	movs	r3, #4
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	e7f2      	b.n	80123fa <rcl_validate_enclave_name_with_size+0x6e>
 8012414:	2303      	movs	r3, #3
 8012416:	602b      	str	r3, [r5, #0]
 8012418:	e7ef      	b.n	80123fa <rcl_validate_enclave_name_with_size+0x6e>
 801241a:	2302      	movs	r3, #2
 801241c:	602b      	str	r3, [r5, #0]
 801241e:	e7ec      	b.n	80123fa <rcl_validate_enclave_name_with_size+0x6e>
 8012420:	2301      	movs	r3, #1
 8012422:	602b      	str	r3, [r5, #0]
 8012424:	e7e9      	b.n	80123fa <rcl_validate_enclave_name_with_size+0x6e>
 8012426:	4a04      	ldr	r2, [pc, #16]	@ (8012438 <rcl_validate_enclave_name_with_size+0xac>)
 8012428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801242c:	a802      	add	r0, sp, #8
 801242e:	f001 fd25 	bl	8013e7c <rcutils_snprintf>
 8012432:	f04f 0c01 	mov.w	ip, #1
 8012436:	e7ba      	b.n	80123ae <rcl_validate_enclave_name_with_size+0x22>
 8012438:	0801841c 	.word	0x0801841c

0801243c <rcl_validate_enclave_name>:
 801243c:	b168      	cbz	r0, 801245a <rcl_validate_enclave_name+0x1e>
 801243e:	b570      	push	{r4, r5, r6, lr}
 8012440:	460d      	mov	r5, r1
 8012442:	4616      	mov	r6, r2
 8012444:	4604      	mov	r4, r0
 8012446:	f7ed fef5 	bl	8000234 <strlen>
 801244a:	4633      	mov	r3, r6
 801244c:	4601      	mov	r1, r0
 801244e:	462a      	mov	r2, r5
 8012450:	4620      	mov	r0, r4
 8012452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012456:	f7ff bf99 	b.w	801238c <rcl_validate_enclave_name_with_size>
 801245a:	200b      	movs	r0, #11
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop

08012460 <rcl_get_zero_initialized_wait_set>:
 8012460:	b510      	push	{r4, lr}
 8012462:	4c08      	ldr	r4, [pc, #32]	@ (8012484 <rcl_get_zero_initialized_wait_set+0x24>)
 8012464:	4686      	mov	lr, r0
 8012466:	4684      	mov	ip, r0
 8012468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801246a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801246e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012476:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801247a:	6823      	ldr	r3, [r4, #0]
 801247c:	f8cc 3000 	str.w	r3, [ip]
 8012480:	4670      	mov	r0, lr
 8012482:	bd10      	pop	{r4, pc}
 8012484:	0801847c 	.word	0x0801847c

08012488 <rcl_wait_set_is_valid>:
 8012488:	b118      	cbz	r0, 8012492 <rcl_wait_set_is_valid+0xa>
 801248a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801248c:	3800      	subs	r0, #0
 801248e:	bf18      	it	ne
 8012490:	2001      	movne	r0, #1
 8012492:	4770      	bx	lr

08012494 <rcl_wait_set_fini>:
 8012494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	2800      	cmp	r0, #0
 801249c:	f000 8095 	beq.w	80125ca <rcl_wait_set_fini+0x136>
 80124a0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80124a2:	4604      	mov	r4, r0
 80124a4:	2e00      	cmp	r6, #0
 80124a6:	f000 808c 	beq.w	80125c2 <rcl_wait_set_fini+0x12e>
 80124aa:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80124ac:	f002 fd48 	bl	8014f40 <rmw_destroy_wait_set>
 80124b0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124b2:	1e06      	subs	r6, r0, #0
 80124b4:	bf18      	it	ne
 80124b6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80124ba:	2d00      	cmp	r5, #0
 80124bc:	f000 8081 	beq.w	80125c2 <rcl_wait_set_fini+0x12e>
 80124c0:	6820      	ldr	r0, [r4, #0]
 80124c2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80124c6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80124c8:	2700      	movs	r7, #0
 80124ca:	6067      	str	r7, [r4, #4]
 80124cc:	602f      	str	r7, [r5, #0]
 80124ce:	b120      	cbz	r0, 80124da <rcl_wait_set_fini+0x46>
 80124d0:	9101      	str	r1, [sp, #4]
 80124d2:	47c0      	blx	r8
 80124d4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124d6:	9901      	ldr	r1, [sp, #4]
 80124d8:	6027      	str	r7, [r4, #0]
 80124da:	68a8      	ldr	r0, [r5, #8]
 80124dc:	b120      	cbz	r0, 80124e8 <rcl_wait_set_fini+0x54>
 80124de:	47c0      	blx	r8
 80124e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124e2:	2300      	movs	r3, #0
 80124e4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80124e8:	68a0      	ldr	r0, [r4, #8]
 80124ea:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80124ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80124ee:	f04f 0800 	mov.w	r8, #0
 80124f2:	f8c4 800c 	str.w	r8, [r4, #12]
 80124f6:	f8c5 800c 	str.w	r8, [r5, #12]
 80124fa:	b128      	cbz	r0, 8012508 <rcl_wait_set_fini+0x74>
 80124fc:	47b8      	blx	r7
 80124fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012500:	f8c4 8008 	str.w	r8, [r4, #8]
 8012504:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012506:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012508:	6968      	ldr	r0, [r5, #20]
 801250a:	f04f 0800 	mov.w	r8, #0
 801250e:	f8c5 8010 	str.w	r8, [r5, #16]
 8012512:	b128      	cbz	r0, 8012520 <rcl_wait_set_fini+0x8c>
 8012514:	47b8      	blx	r7
 8012516:	f8c5 8014 	str.w	r8, [r5, #20]
 801251a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801251c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801251e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012520:	6920      	ldr	r0, [r4, #16]
 8012522:	f04f 0800 	mov.w	r8, #0
 8012526:	f8c4 8014 	str.w	r8, [r4, #20]
 801252a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801252e:	b128      	cbz	r0, 801253c <rcl_wait_set_fini+0xa8>
 8012530:	47b8      	blx	r7
 8012532:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012534:	f8c4 8010 	str.w	r8, [r4, #16]
 8012538:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801253a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801253c:	69a0      	ldr	r0, [r4, #24]
 801253e:	f04f 0800 	mov.w	r8, #0
 8012542:	f8c4 801c 	str.w	r8, [r4, #28]
 8012546:	f8c5 8018 	str.w	r8, [r5, #24]
 801254a:	b128      	cbz	r0, 8012558 <rcl_wait_set_fini+0xc4>
 801254c:	9101      	str	r1, [sp, #4]
 801254e:	47b8      	blx	r7
 8012550:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012552:	9901      	ldr	r1, [sp, #4]
 8012554:	f8c4 8018 	str.w	r8, [r4, #24]
 8012558:	6a28      	ldr	r0, [r5, #32]
 801255a:	b120      	cbz	r0, 8012566 <rcl_wait_set_fini+0xd2>
 801255c:	47b8      	blx	r7
 801255e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012560:	2300      	movs	r3, #0
 8012562:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8012566:	6a20      	ldr	r0, [r4, #32]
 8012568:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801256c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801256e:	2700      	movs	r7, #0
 8012570:	6267      	str	r7, [r4, #36]	@ 0x24
 8012572:	626f      	str	r7, [r5, #36]	@ 0x24
 8012574:	b120      	cbz	r0, 8012580 <rcl_wait_set_fini+0xec>
 8012576:	9101      	str	r1, [sp, #4]
 8012578:	47c0      	blx	r8
 801257a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801257c:	9901      	ldr	r1, [sp, #4]
 801257e:	6227      	str	r7, [r4, #32]
 8012580:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8012582:	b120      	cbz	r0, 801258e <rcl_wait_set_fini+0xfa>
 8012584:	47c0      	blx	r8
 8012586:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012588:	2300      	movs	r3, #0
 801258a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801258e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012590:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012594:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012596:	2700      	movs	r7, #0
 8012598:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801259a:	632f      	str	r7, [r5, #48]	@ 0x30
 801259c:	b120      	cbz	r0, 80125a8 <rcl_wait_set_fini+0x114>
 801259e:	9101      	str	r1, [sp, #4]
 80125a0:	47c0      	blx	r8
 80125a2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125a4:	9901      	ldr	r1, [sp, #4]
 80125a6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80125a8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80125aa:	b120      	cbz	r0, 80125b6 <rcl_wait_set_fini+0x122>
 80125ac:	47c0      	blx	r8
 80125ae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125b0:	2300      	movs	r3, #0
 80125b2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80125b6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80125b8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80125ba:	4628      	mov	r0, r5
 80125bc:	4798      	blx	r3
 80125be:	2300      	movs	r3, #0
 80125c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80125c2:	4630      	mov	r0, r6
 80125c4:	b002      	add	sp, #8
 80125c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ca:	260b      	movs	r6, #11
 80125cc:	4630      	mov	r0, r6
 80125ce:	b002      	add	sp, #8
 80125d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080125d4 <rcl_wait_set_add_subscription>:
 80125d4:	b318      	cbz	r0, 801261e <rcl_wait_set_add_subscription+0x4a>
 80125d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	4604      	mov	r4, r0
 80125dc:	b30b      	cbz	r3, 8012622 <rcl_wait_set_add_subscription+0x4e>
 80125de:	b319      	cbz	r1, 8012628 <rcl_wait_set_add_subscription+0x54>
 80125e0:	681d      	ldr	r5, [r3, #0]
 80125e2:	6840      	ldr	r0, [r0, #4]
 80125e4:	4285      	cmp	r5, r0
 80125e6:	d217      	bcs.n	8012618 <rcl_wait_set_add_subscription+0x44>
 80125e8:	6820      	ldr	r0, [r4, #0]
 80125ea:	1c6e      	adds	r6, r5, #1
 80125ec:	601e      	str	r6, [r3, #0]
 80125ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80125f2:	b102      	cbz	r2, 80125f6 <rcl_wait_set_add_subscription+0x22>
 80125f4:	6015      	str	r5, [r2, #0]
 80125f6:	4608      	mov	r0, r1
 80125f8:	f7ff fb0a 	bl	8011c10 <rcl_subscription_get_rmw_handle>
 80125fc:	b150      	cbz	r0, 8012614 <rcl_wait_set_add_subscription+0x40>
 80125fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012600:	6842      	ldr	r2, [r0, #4]
 8012602:	689b      	ldr	r3, [r3, #8]
 8012604:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012608:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801260a:	6853      	ldr	r3, [r2, #4]
 801260c:	3301      	adds	r3, #1
 801260e:	2000      	movs	r0, #0
 8012610:	6053      	str	r3, [r2, #4]
 8012612:	bd70      	pop	{r4, r5, r6, pc}
 8012614:	2001      	movs	r0, #1
 8012616:	bd70      	pop	{r4, r5, r6, pc}
 8012618:	f240 3086 	movw	r0, #902	@ 0x386
 801261c:	bd70      	pop	{r4, r5, r6, pc}
 801261e:	200b      	movs	r0, #11
 8012620:	4770      	bx	lr
 8012622:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	200b      	movs	r0, #11
 801262a:	bd70      	pop	{r4, r5, r6, pc}

0801262c <rcl_wait_set_clear>:
 801262c:	2800      	cmp	r0, #0
 801262e:	d073      	beq.n	8012718 <rcl_wait_set_clear+0xec>
 8012630:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012632:	b510      	push	{r4, lr}
 8012634:	4604      	mov	r4, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d070      	beq.n	801271c <rcl_wait_set_clear+0xf0>
 801263a:	6800      	ldr	r0, [r0, #0]
 801263c:	b138      	cbz	r0, 801264e <rcl_wait_set_clear+0x22>
 801263e:	6862      	ldr	r2, [r4, #4]
 8012640:	2100      	movs	r1, #0
 8012642:	0092      	lsls	r2, r2, #2
 8012644:	f004 fb68 	bl	8016d18 <memset>
 8012648:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801264a:	2200      	movs	r2, #0
 801264c:	601a      	str	r2, [r3, #0]
 801264e:	68a0      	ldr	r0, [r4, #8]
 8012650:	b138      	cbz	r0, 8012662 <rcl_wait_set_clear+0x36>
 8012652:	68e2      	ldr	r2, [r4, #12]
 8012654:	2100      	movs	r1, #0
 8012656:	0092      	lsls	r2, r2, #2
 8012658:	f004 fb5e 	bl	8016d18 <memset>
 801265c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801265e:	2200      	movs	r2, #0
 8012660:	60da      	str	r2, [r3, #12]
 8012662:	69a0      	ldr	r0, [r4, #24]
 8012664:	b138      	cbz	r0, 8012676 <rcl_wait_set_clear+0x4a>
 8012666:	69e2      	ldr	r2, [r4, #28]
 8012668:	2100      	movs	r1, #0
 801266a:	0092      	lsls	r2, r2, #2
 801266c:	f004 fb54 	bl	8016d18 <memset>
 8012670:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012672:	2200      	movs	r2, #0
 8012674:	619a      	str	r2, [r3, #24]
 8012676:	6a20      	ldr	r0, [r4, #32]
 8012678:	b138      	cbz	r0, 801268a <rcl_wait_set_clear+0x5e>
 801267a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801267c:	2100      	movs	r1, #0
 801267e:	0092      	lsls	r2, r2, #2
 8012680:	f004 fb4a 	bl	8016d18 <memset>
 8012684:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012686:	2200      	movs	r2, #0
 8012688:	625a      	str	r2, [r3, #36]	@ 0x24
 801268a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801268c:	b138      	cbz	r0, 801269e <rcl_wait_set_clear+0x72>
 801268e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012690:	2100      	movs	r1, #0
 8012692:	0092      	lsls	r2, r2, #2
 8012694:	f004 fb40 	bl	8016d18 <memset>
 8012698:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801269a:	2200      	movs	r2, #0
 801269c:	631a      	str	r2, [r3, #48]	@ 0x30
 801269e:	6920      	ldr	r0, [r4, #16]
 80126a0:	b138      	cbz	r0, 80126b2 <rcl_wait_set_clear+0x86>
 80126a2:	6962      	ldr	r2, [r4, #20]
 80126a4:	2100      	movs	r1, #0
 80126a6:	0092      	lsls	r2, r2, #2
 80126a8:	f004 fb36 	bl	8016d18 <memset>
 80126ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126ae:	2200      	movs	r2, #0
 80126b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80126b2:	6898      	ldr	r0, [r3, #8]
 80126b4:	b138      	cbz	r0, 80126c6 <rcl_wait_set_clear+0x9a>
 80126b6:	685a      	ldr	r2, [r3, #4]
 80126b8:	2100      	movs	r1, #0
 80126ba:	0092      	lsls	r2, r2, #2
 80126bc:	f004 fb2c 	bl	8016d18 <memset>
 80126c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126c2:	2200      	movs	r2, #0
 80126c4:	605a      	str	r2, [r3, #4]
 80126c6:	6958      	ldr	r0, [r3, #20]
 80126c8:	b138      	cbz	r0, 80126da <rcl_wait_set_clear+0xae>
 80126ca:	691a      	ldr	r2, [r3, #16]
 80126cc:	2100      	movs	r1, #0
 80126ce:	0092      	lsls	r2, r2, #2
 80126d0:	f004 fb22 	bl	8016d18 <memset>
 80126d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126d6:	2200      	movs	r2, #0
 80126d8:	611a      	str	r2, [r3, #16]
 80126da:	6a18      	ldr	r0, [r3, #32]
 80126dc:	b138      	cbz	r0, 80126ee <rcl_wait_set_clear+0xc2>
 80126de:	69da      	ldr	r2, [r3, #28]
 80126e0:	2100      	movs	r1, #0
 80126e2:	0092      	lsls	r2, r2, #2
 80126e4:	f004 fb18 	bl	8016d18 <memset>
 80126e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126ea:	2200      	movs	r2, #0
 80126ec:	61da      	str	r2, [r3, #28]
 80126ee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80126f0:	b138      	cbz	r0, 8012702 <rcl_wait_set_clear+0xd6>
 80126f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80126f4:	2100      	movs	r1, #0
 80126f6:	0092      	lsls	r2, r2, #2
 80126f8:	f004 fb0e 	bl	8016d18 <memset>
 80126fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126fe:	2200      	movs	r2, #0
 8012700:	629a      	str	r2, [r3, #40]	@ 0x28
 8012702:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012704:	b138      	cbz	r0, 8012716 <rcl_wait_set_clear+0xea>
 8012706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012708:	2100      	movs	r1, #0
 801270a:	0092      	lsls	r2, r2, #2
 801270c:	f004 fb04 	bl	8016d18 <memset>
 8012710:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012712:	2000      	movs	r0, #0
 8012714:	6358      	str	r0, [r3, #52]	@ 0x34
 8012716:	bd10      	pop	{r4, pc}
 8012718:	200b      	movs	r0, #11
 801271a:	4770      	bx	lr
 801271c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012720:	bd10      	pop	{r4, pc}
 8012722:	bf00      	nop

08012724 <rcl_wait_set_resize>:
 8012724:	2800      	cmp	r0, #0
 8012726:	f000 8185 	beq.w	8012a34 <rcl_wait_set_resize+0x310>
 801272a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012730:	b083      	sub	sp, #12
 8012732:	4605      	mov	r5, r0
 8012734:	2c00      	cmp	r4, #0
 8012736:	f000 817f 	beq.w	8012a38 <rcl_wait_set_resize+0x314>
 801273a:	f04f 0900 	mov.w	r9, #0
 801273e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8012742:	461f      	mov	r7, r3
 8012744:	4688      	mov	r8, r1
 8012746:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801274a:	4616      	mov	r6, r2
 801274c:	f8c0 9004 	str.w	r9, [r0, #4]
 8012750:	f8c4 9000 	str.w	r9, [r4]
 8012754:	2900      	cmp	r1, #0
 8012756:	f000 80bd 	beq.w	80128d4 <rcl_wait_set_resize+0x1b0>
 801275a:	008c      	lsls	r4, r1, #2
 801275c:	6800      	ldr	r0, [r0, #0]
 801275e:	9301      	str	r3, [sp, #4]
 8012760:	4652      	mov	r2, sl
 8012762:	4621      	mov	r1, r4
 8012764:	4798      	blx	r3
 8012766:	9b01      	ldr	r3, [sp, #4]
 8012768:	6028      	str	r0, [r5, #0]
 801276a:	2800      	cmp	r0, #0
 801276c:	f000 80cb 	beq.w	8012906 <rcl_wait_set_resize+0x1e2>
 8012770:	4622      	mov	r2, r4
 8012772:	4649      	mov	r1, r9
 8012774:	9301      	str	r3, [sp, #4]
 8012776:	f004 facf 	bl	8016d18 <memset>
 801277a:	f8c5 8004 	str.w	r8, [r5, #4]
 801277e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8012782:	9b01      	ldr	r3, [sp, #4]
 8012784:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012788:	f8c8 9004 	str.w	r9, [r8, #4]
 801278c:	4652      	mov	r2, sl
 801278e:	4621      	mov	r1, r4
 8012790:	4798      	blx	r3
 8012792:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012794:	f8c8 0008 	str.w	r0, [r8, #8]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	2b00      	cmp	r3, #0
 801279c:	f000 80ac 	beq.w	80128f8 <rcl_wait_set_resize+0x1d4>
 80127a0:	4622      	mov	r2, r4
 80127a2:	4649      	mov	r1, r9
 80127a4:	4618      	mov	r0, r3
 80127a6:	f004 fab7 	bl	8016d18 <memset>
 80127aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80127ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80127b0:	f04f 0800 	mov.w	r8, #0
 80127b4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80127b8:	f8c5 800c 	str.w	r8, [r5, #12]
 80127bc:	f8c4 800c 	str.w	r8, [r4, #12]
 80127c0:	2e00      	cmp	r6, #0
 80127c2:	f040 80a4 	bne.w	801290e <rcl_wait_set_resize+0x1ea>
 80127c6:	68a8      	ldr	r0, [r5, #8]
 80127c8:	b128      	cbz	r0, 80127d6 <rcl_wait_set_resize+0xb2>
 80127ca:	4649      	mov	r1, r9
 80127cc:	4790      	blx	r2
 80127ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80127d0:	60ae      	str	r6, [r5, #8]
 80127d2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80127d6:	f04f 0800 	mov.w	r8, #0
 80127da:	19f6      	adds	r6, r6, r7
 80127dc:	f8c4 8010 	str.w	r8, [r4, #16]
 80127e0:	f040 80ac 	bne.w	801293c <rcl_wait_set_resize+0x218>
 80127e4:	6960      	ldr	r0, [r4, #20]
 80127e6:	b130      	cbz	r0, 80127f6 <rcl_wait_set_resize+0xd2>
 80127e8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80127ea:	4649      	mov	r1, r9
 80127ec:	4798      	blx	r3
 80127ee:	6166      	str	r6, [r4, #20]
 80127f0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80127f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80127f6:	2600      	movs	r6, #0
 80127f8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80127fc:	616e      	str	r6, [r5, #20]
 80127fe:	6426      	str	r6, [r4, #64]	@ 0x40
 8012800:	2f00      	cmp	r7, #0
 8012802:	f040 80ad 	bne.w	8012960 <rcl_wait_set_resize+0x23c>
 8012806:	6928      	ldr	r0, [r5, #16]
 8012808:	b138      	cbz	r0, 801281a <rcl_wait_set_resize+0xf6>
 801280a:	4649      	mov	r1, r9
 801280c:	47d0      	blx	sl
 801280e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012810:	612f      	str	r7, [r5, #16]
 8012812:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012816:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801281a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801281c:	2600      	movs	r6, #0
 801281e:	61ee      	str	r6, [r5, #28]
 8012820:	61a6      	str	r6, [r4, #24]
 8012822:	2b00      	cmp	r3, #0
 8012824:	f040 80af 	bne.w	8012986 <rcl_wait_set_resize+0x262>
 8012828:	69a8      	ldr	r0, [r5, #24]
 801282a:	b120      	cbz	r0, 8012836 <rcl_wait_set_resize+0x112>
 801282c:	4649      	mov	r1, r9
 801282e:	47d0      	blx	sl
 8012830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012832:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012834:	61ab      	str	r3, [r5, #24]
 8012836:	6a20      	ldr	r0, [r4, #32]
 8012838:	b128      	cbz	r0, 8012846 <rcl_wait_set_resize+0x122>
 801283a:	4649      	mov	r1, r9
 801283c:	47d0      	blx	sl
 801283e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012840:	2300      	movs	r3, #0
 8012842:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012848:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801284a:	2600      	movs	r6, #0
 801284c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012850:	626e      	str	r6, [r5, #36]	@ 0x24
 8012852:	6266      	str	r6, [r4, #36]	@ 0x24
 8012854:	2b00      	cmp	r3, #0
 8012856:	f000 80b6 	beq.w	80129c6 <rcl_wait_set_resize+0x2a2>
 801285a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801285e:	6a28      	ldr	r0, [r5, #32]
 8012860:	463a      	mov	r2, r7
 8012862:	4651      	mov	r1, sl
 8012864:	47c8      	blx	r9
 8012866:	6228      	str	r0, [r5, #32]
 8012868:	2800      	cmp	r0, #0
 801286a:	d04c      	beq.n	8012906 <rcl_wait_set_resize+0x1e2>
 801286c:	4652      	mov	r2, sl
 801286e:	4631      	mov	r1, r6
 8012870:	f004 fa52 	bl	8016d18 <memset>
 8012874:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012878:	626b      	str	r3, [r5, #36]	@ 0x24
 801287a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801287c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801287e:	463a      	mov	r2, r7
 8012880:	4651      	mov	r1, sl
 8012882:	47c8      	blx	r9
 8012884:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012886:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8012888:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801288a:	2c00      	cmp	r4, #0
 801288c:	f000 80f0 	beq.w	8012a70 <rcl_wait_set_resize+0x34c>
 8012890:	4620      	mov	r0, r4
 8012892:	4652      	mov	r2, sl
 8012894:	4631      	mov	r1, r6
 8012896:	f004 fa3f 	bl	8016d18 <memset>
 801289a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801289c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801289e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80128a0:	2600      	movs	r6, #0
 80128a2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80128a6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80128a8:	6326      	str	r6, [r4, #48]	@ 0x30
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f040 809d 	bne.w	80129ea <rcl_wait_set_resize+0x2c6>
 80128b0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80128b2:	b120      	cbz	r0, 80128be <rcl_wait_set_resize+0x19a>
 80128b4:	4639      	mov	r1, r7
 80128b6:	47c0      	blx	r8
 80128b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128bc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80128be:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80128c0:	b310      	cbz	r0, 8012908 <rcl_wait_set_resize+0x1e4>
 80128c2:	4639      	mov	r1, r7
 80128c4:	47c0      	blx	r8
 80128c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80128c8:	2000      	movs	r0, #0
 80128ca:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80128ce:	b003      	add	sp, #12
 80128d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d4:	6800      	ldr	r0, [r0, #0]
 80128d6:	b120      	cbz	r0, 80128e2 <rcl_wait_set_resize+0x1be>
 80128d8:	4651      	mov	r1, sl
 80128da:	47d8      	blx	fp
 80128dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128de:	f8c5 8000 	str.w	r8, [r5]
 80128e2:	68a0      	ldr	r0, [r4, #8]
 80128e4:	2800      	cmp	r0, #0
 80128e6:	f43f af61 	beq.w	80127ac <rcl_wait_set_resize+0x88>
 80128ea:	4651      	mov	r1, sl
 80128ec:	47d8      	blx	fp
 80128ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128f0:	2300      	movs	r3, #0
 80128f2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80128f6:	e759      	b.n	80127ac <rcl_wait_set_resize+0x88>
 80128f8:	6828      	ldr	r0, [r5, #0]
 80128fa:	9301      	str	r3, [sp, #4]
 80128fc:	4651      	mov	r1, sl
 80128fe:	47d8      	blx	fp
 8012900:	9b01      	ldr	r3, [sp, #4]
 8012902:	e9c5 3300 	strd	r3, r3, [r5]
 8012906:	200a      	movs	r0, #10
 8012908:	b003      	add	sp, #12
 801290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290e:	00b4      	lsls	r4, r6, #2
 8012910:	68a8      	ldr	r0, [r5, #8]
 8012912:	464a      	mov	r2, r9
 8012914:	4621      	mov	r1, r4
 8012916:	4798      	blx	r3
 8012918:	60a8      	str	r0, [r5, #8]
 801291a:	2800      	cmp	r0, #0
 801291c:	d0f3      	beq.n	8012906 <rcl_wait_set_resize+0x1e2>
 801291e:	4622      	mov	r2, r4
 8012920:	4641      	mov	r1, r8
 8012922:	f004 f9f9 	bl	8016d18 <memset>
 8012926:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012928:	60ee      	str	r6, [r5, #12]
 801292a:	f04f 0800 	mov.w	r8, #0
 801292e:	19f6      	adds	r6, r6, r7
 8012930:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012934:	f8c4 8010 	str.w	r8, [r4, #16]
 8012938:	f43f af54 	beq.w	80127e4 <rcl_wait_set_resize+0xc0>
 801293c:	00b6      	lsls	r6, r6, #2
 801293e:	464a      	mov	r2, r9
 8012940:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8012942:	6960      	ldr	r0, [r4, #20]
 8012944:	4631      	mov	r1, r6
 8012946:	4798      	blx	r3
 8012948:	4681      	mov	r9, r0
 801294a:	6160      	str	r0, [r4, #20]
 801294c:	2800      	cmp	r0, #0
 801294e:	d076      	beq.n	8012a3e <rcl_wait_set_resize+0x31a>
 8012950:	4632      	mov	r2, r6
 8012952:	4641      	mov	r1, r8
 8012954:	f004 f9e0 	bl	8016d18 <memset>
 8012958:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801295a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801295e:	e74a      	b.n	80127f6 <rcl_wait_set_resize+0xd2>
 8012960:	00bc      	lsls	r4, r7, #2
 8012962:	6928      	ldr	r0, [r5, #16]
 8012964:	464a      	mov	r2, r9
 8012966:	4621      	mov	r1, r4
 8012968:	47c0      	blx	r8
 801296a:	6128      	str	r0, [r5, #16]
 801296c:	2800      	cmp	r0, #0
 801296e:	d0ca      	beq.n	8012906 <rcl_wait_set_resize+0x1e2>
 8012970:	4622      	mov	r2, r4
 8012972:	4631      	mov	r1, r6
 8012974:	f004 f9d0 	bl	8016d18 <memset>
 8012978:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801297a:	616f      	str	r7, [r5, #20]
 801297c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012980:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012984:	e749      	b.n	801281a <rcl_wait_set_resize+0xf6>
 8012986:	009c      	lsls	r4, r3, #2
 8012988:	69a8      	ldr	r0, [r5, #24]
 801298a:	464a      	mov	r2, r9
 801298c:	4621      	mov	r1, r4
 801298e:	47c0      	blx	r8
 8012990:	61a8      	str	r0, [r5, #24]
 8012992:	2800      	cmp	r0, #0
 8012994:	d0b7      	beq.n	8012906 <rcl_wait_set_resize+0x1e2>
 8012996:	4622      	mov	r2, r4
 8012998:	4631      	mov	r1, r6
 801299a:	f004 f9bd 	bl	8016d18 <memset>
 801299e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80129a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129a2:	61eb      	str	r3, [r5, #28]
 80129a4:	6a38      	ldr	r0, [r7, #32]
 80129a6:	61fe      	str	r6, [r7, #28]
 80129a8:	464a      	mov	r2, r9
 80129aa:	4621      	mov	r1, r4
 80129ac:	47c0      	blx	r8
 80129ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80129b0:	6238      	str	r0, [r7, #32]
 80129b2:	6a1f      	ldr	r7, [r3, #32]
 80129b4:	2f00      	cmp	r7, #0
 80129b6:	d054      	beq.n	8012a62 <rcl_wait_set_resize+0x33e>
 80129b8:	4622      	mov	r2, r4
 80129ba:	4631      	mov	r1, r6
 80129bc:	4638      	mov	r0, r7
 80129be:	f004 f9ab 	bl	8016d18 <memset>
 80129c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129c4:	e73f      	b.n	8012846 <rcl_wait_set_resize+0x122>
 80129c6:	6a28      	ldr	r0, [r5, #32]
 80129c8:	b120      	cbz	r0, 80129d4 <rcl_wait_set_resize+0x2b0>
 80129ca:	4639      	mov	r1, r7
 80129cc:	47c0      	blx	r8
 80129ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80129d0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129d2:	622b      	str	r3, [r5, #32]
 80129d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80129d6:	2800      	cmp	r0, #0
 80129d8:	f43f af60 	beq.w	801289c <rcl_wait_set_resize+0x178>
 80129dc:	4639      	mov	r1, r7
 80129de:	47c0      	blx	r8
 80129e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129e2:	2300      	movs	r3, #0
 80129e4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80129e8:	e758      	b.n	801289c <rcl_wait_set_resize+0x178>
 80129ea:	009c      	lsls	r4, r3, #2
 80129ec:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80129ee:	463a      	mov	r2, r7
 80129f0:	4621      	mov	r1, r4
 80129f2:	47c8      	blx	r9
 80129f4:	62a8      	str	r0, [r5, #40]	@ 0x28
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d085      	beq.n	8012906 <rcl_wait_set_resize+0x1e2>
 80129fa:	4622      	mov	r2, r4
 80129fc:	4631      	mov	r1, r6
 80129fe:	f004 f98b 	bl	8016d18 <memset>
 8012a02:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8012a06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a08:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8012a0a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012a0e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8012a12:	463a      	mov	r2, r7
 8012a14:	4621      	mov	r1, r4
 8012a16:	47c8      	blx	r9
 8012a18:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a1a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a20:	b36b      	cbz	r3, 8012a7e <rcl_wait_set_resize+0x35a>
 8012a22:	4622      	mov	r2, r4
 8012a24:	4631      	mov	r1, r6
 8012a26:	4618      	mov	r0, r3
 8012a28:	f004 f976 	bl	8016d18 <memset>
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	b003      	add	sp, #12
 8012a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a34:	200b      	movs	r0, #11
 8012a36:	4770      	bx	lr
 8012a38:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012a3c:	e764      	b.n	8012908 <rcl_wait_set_resize+0x1e4>
 8012a3e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a40:	68a8      	ldr	r0, [r5, #8]
 8012a42:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a46:	4798      	blx	r3
 8012a48:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a4a:	6928      	ldr	r0, [r5, #16]
 8012a4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012a4e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012a50:	f8c5 900c 	str.w	r9, [r5, #12]
 8012a54:	f8c5 9008 	str.w	r9, [r5, #8]
 8012a58:	4790      	blx	r2
 8012a5a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8012a5e:	200a      	movs	r0, #10
 8012a60:	e752      	b.n	8012908 <rcl_wait_set_resize+0x1e4>
 8012a62:	69a8      	ldr	r0, [r5, #24]
 8012a64:	4649      	mov	r1, r9
 8012a66:	47d0      	blx	sl
 8012a68:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8012a6c:	200a      	movs	r0, #10
 8012a6e:	e74b      	b.n	8012908 <rcl_wait_set_resize+0x1e4>
 8012a70:	6a28      	ldr	r0, [r5, #32]
 8012a72:	4639      	mov	r1, r7
 8012a74:	47c0      	blx	r8
 8012a76:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8012a7a:	200a      	movs	r0, #10
 8012a7c:	e744      	b.n	8012908 <rcl_wait_set_resize+0x1e4>
 8012a7e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012a80:	9301      	str	r3, [sp, #4]
 8012a82:	4639      	mov	r1, r7
 8012a84:	47c0      	blx	r8
 8012a86:	9b01      	ldr	r3, [sp, #4]
 8012a88:	200a      	movs	r0, #10
 8012a8a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012a8e:	e73b      	b.n	8012908 <rcl_wait_set_resize+0x1e4>

08012a90 <rcl_wait_set_init>:
 8012a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a94:	b084      	sub	sp, #16
 8012a96:	4604      	mov	r4, r0
 8012a98:	a810      	add	r0, sp, #64	@ 0x40
 8012a9a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8012a9e:	460f      	mov	r7, r1
 8012aa0:	4690      	mov	r8, r2
 8012aa2:	4699      	mov	r9, r3
 8012aa4:	f7f8 fbb6 	bl	800b214 <rcutils_allocator_is_valid>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	d06b      	beq.n	8012b84 <rcl_wait_set_init+0xf4>
 8012aac:	2c00      	cmp	r4, #0
 8012aae:	d069      	beq.n	8012b84 <rcl_wait_set_init+0xf4>
 8012ab0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012ab2:	b125      	cbz	r5, 8012abe <rcl_wait_set_init+0x2e>
 8012ab4:	2564      	movs	r5, #100	@ 0x64
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	b004      	add	sp, #16
 8012aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012abe:	f1ba 0f00 	cmp.w	sl, #0
 8012ac2:	d05f      	beq.n	8012b84 <rcl_wait_set_init+0xf4>
 8012ac4:	4650      	mov	r0, sl
 8012ac6:	f7fe fb0f 	bl	80110e8 <rcl_context_is_valid>
 8012aca:	2800      	cmp	r0, #0
 8012acc:	d067      	beq.n	8012b9e <rcl_wait_set_init+0x10e>
 8012ace:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ad0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012ad2:	205c      	movs	r0, #92	@ 0x5c
 8012ad4:	4798      	blx	r3
 8012ad6:	6320      	str	r0, [r4, #48]	@ 0x30
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d062      	beq.n	8012ba2 <rcl_wait_set_init+0x112>
 8012adc:	4629      	mov	r1, r5
 8012ade:	225c      	movs	r2, #92	@ 0x5c
 8012ae0:	f004 f91a 	bl	8016d18 <memset>
 8012ae4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012ae8:	eb03 0e02 	add.w	lr, r3, r2
 8012aec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012aee:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012af0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012af4:	449e      	add	lr, r3
 8012af6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012afa:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012afe:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012b02:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8012b06:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8012b0a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8012b0e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8012b12:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8012b16:	f8da a000 	ldr.w	sl, [sl]
 8012b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b1c:	44c6      	add	lr, r8
 8012b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8012b22:	602b      	str	r3, [r5, #0]
 8012b24:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8012b28:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8012b2c:	f002 f9fe 	bl	8014f2c <rmw_create_wait_set>
 8012b30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b32:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8012b34:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012b36:	b350      	cbz	r0, 8012b8e <rcl_wait_set_init+0xfe>
 8012b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b3a:	9302      	str	r3, [sp, #8]
 8012b3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b3e:	9301      	str	r3, [sp, #4]
 8012b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b42:	9300      	str	r3, [sp, #0]
 8012b44:	4642      	mov	r2, r8
 8012b46:	464b      	mov	r3, r9
 8012b48:	4639      	mov	r1, r7
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f7ff fdea 	bl	8012724 <rcl_wait_set_resize>
 8012b50:	4605      	mov	r5, r0
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d0af      	beq.n	8012ab6 <rcl_wait_set_init+0x26>
 8012b56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b58:	bb2b      	cbnz	r3, 8012ba6 <rcl_wait_set_init+0x116>
 8012b5a:	2600      	movs	r6, #0
 8012b5c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012b60:	9600      	str	r6, [sp, #0]
 8012b62:	4633      	mov	r3, r6
 8012b64:	4632      	mov	r2, r6
 8012b66:	4631      	mov	r1, r6
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f7ff fddb 	bl	8012724 <rcl_wait_set_resize>
 8012b6e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012b70:	2800      	cmp	r0, #0
 8012b72:	d0a0      	beq.n	8012ab6 <rcl_wait_set_init+0x26>
 8012b74:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012b76:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012b78:	4798      	blx	r3
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	6326      	str	r6, [r4, #48]	@ 0x30
 8012b7e:	b004      	add	sp, #16
 8012b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b84:	250b      	movs	r5, #11
 8012b86:	4628      	mov	r0, r5
 8012b88:	b004      	add	sp, #16
 8012b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b8e:	2501      	movs	r5, #1
 8012b90:	f002 f9d6 	bl	8014f40 <rmw_destroy_wait_set>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	bf18      	it	ne
 8012b98:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8012b9c:	e7dd      	b.n	8012b5a <rcl_wait_set_init+0xca>
 8012b9e:	2565      	movs	r5, #101	@ 0x65
 8012ba0:	e789      	b.n	8012ab6 <rcl_wait_set_init+0x26>
 8012ba2:	250a      	movs	r5, #10
 8012ba4:	e787      	b.n	8012ab6 <rcl_wait_set_init+0x26>
 8012ba6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012ba8:	e7f2      	b.n	8012b90 <rcl_wait_set_init+0x100>
 8012baa:	bf00      	nop

08012bac <rcl_wait_set_add_guard_condition>:
 8012bac:	b318      	cbz	r0, 8012bf6 <rcl_wait_set_add_guard_condition+0x4a>
 8012bae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012bb0:	b570      	push	{r4, r5, r6, lr}
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	b30b      	cbz	r3, 8012bfa <rcl_wait_set_add_guard_condition+0x4e>
 8012bb6:	b319      	cbz	r1, 8012c00 <rcl_wait_set_add_guard_condition+0x54>
 8012bb8:	68dd      	ldr	r5, [r3, #12]
 8012bba:	68c0      	ldr	r0, [r0, #12]
 8012bbc:	4285      	cmp	r5, r0
 8012bbe:	d217      	bcs.n	8012bf0 <rcl_wait_set_add_guard_condition+0x44>
 8012bc0:	68a0      	ldr	r0, [r4, #8]
 8012bc2:	1c6e      	adds	r6, r5, #1
 8012bc4:	60de      	str	r6, [r3, #12]
 8012bc6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012bca:	b102      	cbz	r2, 8012bce <rcl_wait_set_add_guard_condition+0x22>
 8012bcc:	6015      	str	r5, [r2, #0]
 8012bce:	4608      	mov	r0, r1
 8012bd0:	f003 fba8 	bl	8016324 <rcl_guard_condition_get_rmw_handle>
 8012bd4:	b150      	cbz	r0, 8012bec <rcl_wait_set_add_guard_condition+0x40>
 8012bd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012bd8:	6842      	ldr	r2, [r0, #4]
 8012bda:	695b      	ldr	r3, [r3, #20]
 8012bdc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012be0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012be2:	6913      	ldr	r3, [r2, #16]
 8012be4:	3301      	adds	r3, #1
 8012be6:	2000      	movs	r0, #0
 8012be8:	6113      	str	r3, [r2, #16]
 8012bea:	bd70      	pop	{r4, r5, r6, pc}
 8012bec:	2001      	movs	r0, #1
 8012bee:	bd70      	pop	{r4, r5, r6, pc}
 8012bf0:	f240 3086 	movw	r0, #902	@ 0x386
 8012bf4:	bd70      	pop	{r4, r5, r6, pc}
 8012bf6:	200b      	movs	r0, #11
 8012bf8:	4770      	bx	lr
 8012bfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012bfe:	bd70      	pop	{r4, r5, r6, pc}
 8012c00:	200b      	movs	r0, #11
 8012c02:	bd70      	pop	{r4, r5, r6, pc}

08012c04 <rcl_wait_set_add_timer>:
 8012c04:	b328      	cbz	r0, 8012c52 <rcl_wait_set_add_timer+0x4e>
 8012c06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c08:	b570      	push	{r4, r5, r6, lr}
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	b31b      	cbz	r3, 8012c56 <rcl_wait_set_add_timer+0x52>
 8012c0e:	b329      	cbz	r1, 8012c5c <rcl_wait_set_add_timer+0x58>
 8012c10:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012c12:	6965      	ldr	r5, [r4, #20]
 8012c14:	42a8      	cmp	r0, r5
 8012c16:	d219      	bcs.n	8012c4c <rcl_wait_set_add_timer+0x48>
 8012c18:	6925      	ldr	r5, [r4, #16]
 8012c1a:	1c46      	adds	r6, r0, #1
 8012c1c:	641e      	str	r6, [r3, #64]	@ 0x40
 8012c1e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012c22:	b102      	cbz	r2, 8012c26 <rcl_wait_set_add_timer+0x22>
 8012c24:	6010      	str	r0, [r2, #0]
 8012c26:	4608      	mov	r0, r1
 8012c28:	f7ff fba6 	bl	8012378 <rcl_timer_get_guard_condition>
 8012c2c:	b168      	cbz	r0, 8012c4a <rcl_wait_set_add_timer+0x46>
 8012c2e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012c30:	68e3      	ldr	r3, [r4, #12]
 8012c32:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012c34:	3b01      	subs	r3, #1
 8012c36:	441d      	add	r5, r3
 8012c38:	f003 fb74 	bl	8016324 <rcl_guard_condition_get_rmw_handle>
 8012c3c:	b180      	cbz	r0, 8012c60 <rcl_wait_set_add_timer+0x5c>
 8012c3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c40:	6842      	ldr	r2, [r0, #4]
 8012c42:	695b      	ldr	r3, [r3, #20]
 8012c44:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c48:	2000      	movs	r0, #0
 8012c4a:	bd70      	pop	{r4, r5, r6, pc}
 8012c4c:	f240 3086 	movw	r0, #902	@ 0x386
 8012c50:	bd70      	pop	{r4, r5, r6, pc}
 8012c52:	200b      	movs	r0, #11
 8012c54:	4770      	bx	lr
 8012c56:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c5a:	bd70      	pop	{r4, r5, r6, pc}
 8012c5c:	200b      	movs	r0, #11
 8012c5e:	bd70      	pop	{r4, r5, r6, pc}
 8012c60:	2001      	movs	r0, #1
 8012c62:	bd70      	pop	{r4, r5, r6, pc}

08012c64 <rcl_wait_set_add_client>:
 8012c64:	b318      	cbz	r0, 8012cae <rcl_wait_set_add_client+0x4a>
 8012c66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c68:	b570      	push	{r4, r5, r6, lr}
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	b30b      	cbz	r3, 8012cb2 <rcl_wait_set_add_client+0x4e>
 8012c6e:	b319      	cbz	r1, 8012cb8 <rcl_wait_set_add_client+0x54>
 8012c70:	699d      	ldr	r5, [r3, #24]
 8012c72:	69c0      	ldr	r0, [r0, #28]
 8012c74:	4285      	cmp	r5, r0
 8012c76:	d217      	bcs.n	8012ca8 <rcl_wait_set_add_client+0x44>
 8012c78:	69a0      	ldr	r0, [r4, #24]
 8012c7a:	1c6e      	adds	r6, r5, #1
 8012c7c:	619e      	str	r6, [r3, #24]
 8012c7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012c82:	b102      	cbz	r2, 8012c86 <rcl_wait_set_add_client+0x22>
 8012c84:	6015      	str	r5, [r2, #0]
 8012c86:	4608      	mov	r0, r1
 8012c88:	f7fe f982 	bl	8010f90 <rcl_client_get_rmw_handle>
 8012c8c:	b150      	cbz	r0, 8012ca4 <rcl_wait_set_add_client+0x40>
 8012c8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c90:	6842      	ldr	r2, [r0, #4]
 8012c92:	6a1b      	ldr	r3, [r3, #32]
 8012c94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012c9a:	69d3      	ldr	r3, [r2, #28]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	61d3      	str	r3, [r2, #28]
 8012ca2:	bd70      	pop	{r4, r5, r6, pc}
 8012ca4:	2001      	movs	r0, #1
 8012ca6:	bd70      	pop	{r4, r5, r6, pc}
 8012ca8:	f240 3086 	movw	r0, #902	@ 0x386
 8012cac:	bd70      	pop	{r4, r5, r6, pc}
 8012cae:	200b      	movs	r0, #11
 8012cb0:	4770      	bx	lr
 8012cb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012cb6:	bd70      	pop	{r4, r5, r6, pc}
 8012cb8:	200b      	movs	r0, #11
 8012cba:	bd70      	pop	{r4, r5, r6, pc}

08012cbc <rcl_wait_set_add_service>:
 8012cbc:	b318      	cbz	r0, 8012d06 <rcl_wait_set_add_service+0x4a>
 8012cbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	b30b      	cbz	r3, 8012d0a <rcl_wait_set_add_service+0x4e>
 8012cc6:	b319      	cbz	r1, 8012d10 <rcl_wait_set_add_service+0x54>
 8012cc8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012cca:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012ccc:	4285      	cmp	r5, r0
 8012cce:	d217      	bcs.n	8012d00 <rcl_wait_set_add_service+0x44>
 8012cd0:	6a20      	ldr	r0, [r4, #32]
 8012cd2:	1c6e      	adds	r6, r5, #1
 8012cd4:	625e      	str	r6, [r3, #36]	@ 0x24
 8012cd6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012cda:	b102      	cbz	r2, 8012cde <rcl_wait_set_add_service+0x22>
 8012cdc:	6015      	str	r5, [r2, #0]
 8012cde:	4608      	mov	r0, r1
 8012ce0:	f7fe fed6 	bl	8011a90 <rcl_service_get_rmw_handle>
 8012ce4:	b150      	cbz	r0, 8012cfc <rcl_wait_set_add_service+0x40>
 8012ce6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ce8:	6842      	ldr	r2, [r0, #4]
 8012cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cf0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012cf2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	6293      	str	r3, [r2, #40]	@ 0x28
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
 8012cfc:	2001      	movs	r0, #1
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	f240 3086 	movw	r0, #902	@ 0x386
 8012d04:	bd70      	pop	{r4, r5, r6, pc}
 8012d06:	200b      	movs	r0, #11
 8012d08:	4770      	bx	lr
 8012d0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012d0e:	bd70      	pop	{r4, r5, r6, pc}
 8012d10:	200b      	movs	r0, #11
 8012d12:	bd70      	pop	{r4, r5, r6, pc}
 8012d14:	0000      	movs	r0, r0
	...

08012d18 <rcl_wait>:
 8012d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d1c:	ed2d 8b02 	vpush	{d8}
 8012d20:	b08d      	sub	sp, #52	@ 0x34
 8012d22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012d26:	2800      	cmp	r0, #0
 8012d28:	f000 8143 	beq.w	8012fb2 <rcl_wait+0x29a>
 8012d2c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012d2e:	4605      	mov	r5, r0
 8012d30:	2e00      	cmp	r6, #0
 8012d32:	f000 8112 	beq.w	8012f5a <rcl_wait+0x242>
 8012d36:	6843      	ldr	r3, [r0, #4]
 8012d38:	b983      	cbnz	r3, 8012d5c <rcl_wait+0x44>
 8012d3a:	68eb      	ldr	r3, [r5, #12]
 8012d3c:	b973      	cbnz	r3, 8012d5c <rcl_wait+0x44>
 8012d3e:	696b      	ldr	r3, [r5, #20]
 8012d40:	b963      	cbnz	r3, 8012d5c <rcl_wait+0x44>
 8012d42:	69eb      	ldr	r3, [r5, #28]
 8012d44:	b953      	cbnz	r3, 8012d5c <rcl_wait+0x44>
 8012d46:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012d48:	b943      	cbnz	r3, 8012d5c <rcl_wait+0x44>
 8012d4a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012d4c:	b933      	cbnz	r3, 8012d5c <rcl_wait+0x44>
 8012d4e:	f240 3085 	movw	r0, #901	@ 0x385
 8012d52:	b00d      	add	sp, #52	@ 0x34
 8012d54:	ecbd 8b02 	vpop	{d8}
 8012d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d5c:	9b04      	ldr	r3, [sp, #16]
 8012d5e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	9b05      	ldr	r3, [sp, #20]
 8012d64:	f173 0300 	sbcs.w	r3, r3, #0
 8012d68:	f2c0 80f0 	blt.w	8012f4c <rcl_wait+0x234>
 8012d6c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012d70:	4643      	mov	r3, r8
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	f000 8133 	beq.w	8012fde <rcl_wait+0x2c6>
 8012d78:	2400      	movs	r4, #0
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8012ff0 <rcl_wait+0x2d8>
 8012d80:	46a2      	mov	sl, r4
 8012d82:	46a3      	mov	fp, r4
 8012d84:	f240 3921 	movw	r9, #801	@ 0x321
 8012d88:	4632      	mov	r2, r6
 8012d8a:	e014      	b.n	8012db6 <rcl_wait+0x9e>
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	d1e0      	bne.n	8012d52 <rcl_wait+0x3a>
 8012d90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d94:	4542      	cmp	r2, r8
 8012d96:	eb73 0107 	sbcs.w	r1, r3, r7
 8012d9a:	da03      	bge.n	8012da4 <rcl_wait+0x8c>
 8012d9c:	4690      	mov	r8, r2
 8012d9e:	461f      	mov	r7, r3
 8012da0:	f04f 0b01 	mov.w	fp, #1
 8012da4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012da6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012da8:	3401      	adds	r4, #1
 8012daa:	f14a 0a00 	adc.w	sl, sl, #0
 8012dae:	429c      	cmp	r4, r3
 8012db0:	f17a 0100 	sbcs.w	r1, sl, #0
 8012db4:	d228      	bcs.n	8012e08 <rcl_wait+0xf0>
 8012db6:	6928      	ldr	r0, [r5, #16]
 8012db8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012dbc:	a908      	add	r1, sp, #32
 8012dbe:	00a6      	lsls	r6, r4, #2
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d0f1      	beq.n	8012da8 <rcl_wait+0x90>
 8012dc4:	68eb      	ldr	r3, [r5, #12]
 8012dc6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8012dca:	4423      	add	r3, r4
 8012dcc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012dd0:	f1be 0f00 	cmp.w	lr, #0
 8012dd4:	d006      	beq.n	8012de4 <rcl_wait+0xcc>
 8012dd6:	6913      	ldr	r3, [r2, #16]
 8012dd8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8012ddc:	3301      	adds	r3, #1
 8012dde:	6113      	str	r3, [r2, #16]
 8012de0:	692b      	ldr	r3, [r5, #16]
 8012de2:	5998      	ldr	r0, [r3, r6]
 8012de4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012de8:	f7ff fa94 	bl	8012314 <rcl_timer_get_time_until_next_call>
 8012dec:	4548      	cmp	r0, r9
 8012dee:	d1cd      	bne.n	8012d8c <rcl_wait+0x74>
 8012df0:	692b      	ldr	r3, [r5, #16]
 8012df2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012df4:	2100      	movs	r1, #0
 8012df6:	5199      	str	r1, [r3, r6]
 8012df8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012dfa:	3401      	adds	r4, #1
 8012dfc:	f14a 0a00 	adc.w	sl, sl, #0
 8012e00:	429c      	cmp	r4, r3
 8012e02:	f17a 0100 	sbcs.w	r1, sl, #0
 8012e06:	d3d6      	bcc.n	8012db6 <rcl_wait+0x9e>
 8012e08:	4616      	mov	r6, r2
 8012e0a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012e0e:	4313      	orrs	r3, r2
 8012e10:	46d9      	mov	r9, fp
 8012e12:	f040 80a9 	bne.w	8012f68 <rcl_wait+0x250>
 8012e16:	2300      	movs	r3, #0
 8012e18:	2200      	movs	r2, #0
 8012e1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012e22:	ab08      	add	r3, sp, #32
 8012e24:	9302      	str	r3, [sp, #8]
 8012e26:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012e28:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8012e2c:	e9cd 3200 	strd	r3, r2, [sp]
 8012e30:	f106 0110 	add.w	r1, r6, #16
 8012e34:	f106 031c 	add.w	r3, r6, #28
 8012e38:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8012e3c:	1d30      	adds	r0, r6, #4
 8012e3e:	f001 fefd 	bl	8014c3c <rmw_wait>
 8012e42:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012e44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012e46:	4680      	mov	r8, r0
 8012e48:	b1ca      	cbz	r2, 8012e7e <rcl_wait+0x166>
 8012e4a:	2400      	movs	r4, #0
 8012e4c:	4627      	mov	r7, r4
 8012e4e:	692a      	ldr	r2, [r5, #16]
 8012e50:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012e54:	f10d 011f 	add.w	r1, sp, #31
 8012e58:	00a6      	lsls	r6, r4, #2
 8012e5a:	b160      	cbz	r0, 8012e76 <rcl_wait+0x15e>
 8012e5c:	f88d 701f 	strb.w	r7, [sp, #31]
 8012e60:	f7ff fa1e 	bl	80122a0 <rcl_timer_is_ready>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	f47f af74 	bne.w	8012d52 <rcl_wait+0x3a>
 8012e6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012e6e:	b90b      	cbnz	r3, 8012e74 <rcl_wait+0x15c>
 8012e70:	692a      	ldr	r2, [r5, #16]
 8012e72:	5193      	str	r3, [r2, r6]
 8012e74:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012e76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012e78:	3401      	adds	r4, #1
 8012e7a:	42a2      	cmp	r2, r4
 8012e7c:	d8e7      	bhi.n	8012e4e <rcl_wait+0x136>
 8012e7e:	f038 0002 	bics.w	r0, r8, #2
 8012e82:	f040 8090 	bne.w	8012fa6 <rcl_wait+0x28e>
 8012e86:	686e      	ldr	r6, [r5, #4]
 8012e88:	4602      	mov	r2, r0
 8012e8a:	b91e      	cbnz	r6, 8012e94 <rcl_wait+0x17c>
 8012e8c:	e00d      	b.n	8012eaa <rcl_wait+0x192>
 8012e8e:	3201      	adds	r2, #1
 8012e90:	42b2      	cmp	r2, r6
 8012e92:	d00a      	beq.n	8012eaa <rcl_wait+0x192>
 8012e94:	6899      	ldr	r1, [r3, #8]
 8012e96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012e9a:	2900      	cmp	r1, #0
 8012e9c:	d1f7      	bne.n	8012e8e <rcl_wait+0x176>
 8012e9e:	682c      	ldr	r4, [r5, #0]
 8012ea0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012ea4:	3201      	adds	r2, #1
 8012ea6:	42b2      	cmp	r2, r6
 8012ea8:	d1f4      	bne.n	8012e94 <rcl_wait+0x17c>
 8012eaa:	68ee      	ldr	r6, [r5, #12]
 8012eac:	2200      	movs	r2, #0
 8012eae:	b91e      	cbnz	r6, 8012eb8 <rcl_wait+0x1a0>
 8012eb0:	e00d      	b.n	8012ece <rcl_wait+0x1b6>
 8012eb2:	3201      	adds	r2, #1
 8012eb4:	42b2      	cmp	r2, r6
 8012eb6:	d00a      	beq.n	8012ece <rcl_wait+0x1b6>
 8012eb8:	6959      	ldr	r1, [r3, #20]
 8012eba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ebe:	2900      	cmp	r1, #0
 8012ec0:	d1f7      	bne.n	8012eb2 <rcl_wait+0x19a>
 8012ec2:	68ac      	ldr	r4, [r5, #8]
 8012ec4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012ec8:	3201      	adds	r2, #1
 8012eca:	42b2      	cmp	r2, r6
 8012ecc:	d1f4      	bne.n	8012eb8 <rcl_wait+0x1a0>
 8012ece:	69ee      	ldr	r6, [r5, #28]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	b91e      	cbnz	r6, 8012edc <rcl_wait+0x1c4>
 8012ed4:	e00d      	b.n	8012ef2 <rcl_wait+0x1da>
 8012ed6:	3201      	adds	r2, #1
 8012ed8:	42b2      	cmp	r2, r6
 8012eda:	d00a      	beq.n	8012ef2 <rcl_wait+0x1da>
 8012edc:	6a19      	ldr	r1, [r3, #32]
 8012ede:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ee2:	2900      	cmp	r1, #0
 8012ee4:	d1f7      	bne.n	8012ed6 <rcl_wait+0x1be>
 8012ee6:	69ac      	ldr	r4, [r5, #24]
 8012ee8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012eec:	3201      	adds	r2, #1
 8012eee:	42b2      	cmp	r2, r6
 8012ef0:	d1f4      	bne.n	8012edc <rcl_wait+0x1c4>
 8012ef2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	b91e      	cbnz	r6, 8012f00 <rcl_wait+0x1e8>
 8012ef8:	e00d      	b.n	8012f16 <rcl_wait+0x1fe>
 8012efa:	3201      	adds	r2, #1
 8012efc:	4296      	cmp	r6, r2
 8012efe:	d00a      	beq.n	8012f16 <rcl_wait+0x1fe>
 8012f00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012f02:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f06:	2900      	cmp	r1, #0
 8012f08:	d1f7      	bne.n	8012efa <rcl_wait+0x1e2>
 8012f0a:	6a2c      	ldr	r4, [r5, #32]
 8012f0c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f10:	3201      	adds	r2, #1
 8012f12:	4296      	cmp	r6, r2
 8012f14:	d1f4      	bne.n	8012f00 <rcl_wait+0x1e8>
 8012f16:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012f18:	2200      	movs	r2, #0
 8012f1a:	b91e      	cbnz	r6, 8012f24 <rcl_wait+0x20c>
 8012f1c:	e00d      	b.n	8012f3a <rcl_wait+0x222>
 8012f1e:	3201      	adds	r2, #1
 8012f20:	42b2      	cmp	r2, r6
 8012f22:	d00a      	beq.n	8012f3a <rcl_wait+0x222>
 8012f24:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012f26:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f2a:	2900      	cmp	r1, #0
 8012f2c:	d1f7      	bne.n	8012f1e <rcl_wait+0x206>
 8012f2e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012f30:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f34:	3201      	adds	r2, #1
 8012f36:	42b2      	cmp	r2, r6
 8012f38:	d1f4      	bne.n	8012f24 <rcl_wait+0x20c>
 8012f3a:	f1b8 0f02 	cmp.w	r8, #2
 8012f3e:	f47f af08 	bne.w	8012d52 <rcl_wait+0x3a>
 8012f42:	464b      	mov	r3, r9
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	bf08      	it	eq
 8012f48:	2002      	moveq	r0, #2
 8012f4a:	e702      	b.n	8012d52 <rcl_wait+0x3a>
 8012f4c:	2a00      	cmp	r2, #0
 8012f4e:	d03a      	beq.n	8012fc6 <rcl_wait+0x2ae>
 8012f50:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012f54:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012f58:	e70e      	b.n	8012d78 <rcl_wait+0x60>
 8012f5a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012f5e:	b00d      	add	sp, #52	@ 0x34
 8012f60:	ecbd 8b02 	vpop	{d8}
 8012f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f68:	9b04      	ldr	r3, [sp, #16]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	9b05      	ldr	r3, [sp, #20]
 8012f6e:	f173 0300 	sbcs.w	r3, r3, #0
 8012f72:	db24      	blt.n	8012fbe <rcl_wait+0x2a6>
 8012f74:	2f00      	cmp	r7, #0
 8012f76:	bfbc      	itt	lt
 8012f78:	f04f 0800 	movlt.w	r8, #0
 8012f7c:	4647      	movlt	r7, r8
 8012f7e:	a31e      	add	r3, pc, #120	@ (adr r3, 8012ff8 <rcl_wait+0x2e0>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	4640      	mov	r0, r8
 8012f86:	4639      	mov	r1, r7
 8012f88:	f7ed f9b2 	bl	80002f0 <__aeabi_ldivmod>
 8012f8c:	a31a      	add	r3, pc, #104	@ (adr r3, 8012ff8 <rcl_wait+0x2e0>)
 8012f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f92:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012f96:	4640      	mov	r0, r8
 8012f98:	4639      	mov	r1, r7
 8012f9a:	f7ed f9a9 	bl	80002f0 <__aeabi_ldivmod>
 8012f9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012fa2:	ab08      	add	r3, sp, #32
 8012fa4:	e73e      	b.n	8012e24 <rcl_wait+0x10c>
 8012fa6:	2001      	movs	r0, #1
 8012fa8:	b00d      	add	sp, #52	@ 0x34
 8012faa:	ecbd 8b02 	vpop	{d8}
 8012fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fb2:	200b      	movs	r0, #11
 8012fb4:	b00d      	add	sp, #52	@ 0x34
 8012fb6:	ecbd 8b02 	vpop	{d8}
 8012fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fbe:	465b      	mov	r3, fp
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d1d7      	bne.n	8012f74 <rcl_wait+0x25c>
 8012fc4:	e72e      	b.n	8012e24 <rcl_wait+0x10c>
 8012fc6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012fca:	430b      	orrs	r3, r1
 8012fcc:	bf08      	it	eq
 8012fce:	4691      	moveq	r9, r2
 8012fd0:	f43f af21 	beq.w	8012e16 <rcl_wait+0xfe>
 8012fd4:	9b04      	ldr	r3, [sp, #16]
 8012fd6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012fda:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012fde:	2b01      	cmp	r3, #1
 8012fe0:	9b05      	ldr	r3, [sp, #20]
 8012fe2:	f173 0300 	sbcs.w	r3, r3, #0
 8012fe6:	f04f 0300 	mov.w	r3, #0
 8012fea:	4699      	mov	r9, r3
 8012fec:	dac2      	bge.n	8012f74 <rcl_wait+0x25c>
 8012fee:	e719      	b.n	8012e24 <rcl_wait+0x10c>
 8012ff0:	ffffffff 	.word	0xffffffff
 8012ff4:	7fffffff 	.word	0x7fffffff
 8012ff8:	3b9aca00 	.word	0x3b9aca00
 8012ffc:	00000000 	.word	0x00000000

08013000 <rcl_action_take_goal_response>:
 8013000:	2800      	cmp	r0, #0
 8013002:	d039      	beq.n	8013078 <rcl_action_take_goal_response+0x78>
 8013004:	b570      	push	{r4, r5, r6, lr}
 8013006:	4604      	mov	r4, r0
 8013008:	6800      	ldr	r0, [r0, #0]
 801300a:	b380      	cbz	r0, 801306e <rcl_action_take_goal_response+0x6e>
 801300c:	460d      	mov	r5, r1
 801300e:	4616      	mov	r6, r2
 8013010:	f7fe f842 	bl	8011098 <rcl_client_is_valid>
 8013014:	b330      	cbz	r0, 8013064 <rcl_action_take_goal_response+0x64>
 8013016:	6820      	ldr	r0, [r4, #0]
 8013018:	3004      	adds	r0, #4
 801301a:	f7fe f83d 	bl	8011098 <rcl_client_is_valid>
 801301e:	b308      	cbz	r0, 8013064 <rcl_action_take_goal_response+0x64>
 8013020:	6820      	ldr	r0, [r4, #0]
 8013022:	3008      	adds	r0, #8
 8013024:	f7fe f838 	bl	8011098 <rcl_client_is_valid>
 8013028:	b1e0      	cbz	r0, 8013064 <rcl_action_take_goal_response+0x64>
 801302a:	6820      	ldr	r0, [r4, #0]
 801302c:	300c      	adds	r0, #12
 801302e:	f7fe fdf5 	bl	8011c1c <rcl_subscription_is_valid>
 8013032:	b1b8      	cbz	r0, 8013064 <rcl_action_take_goal_response+0x64>
 8013034:	6820      	ldr	r0, [r4, #0]
 8013036:	3010      	adds	r0, #16
 8013038:	f7fe fdf0 	bl	8011c1c <rcl_subscription_is_valid>
 801303c:	b190      	cbz	r0, 8013064 <rcl_action_take_goal_response+0x64>
 801303e:	b1cd      	cbz	r5, 8013074 <rcl_action_take_goal_response+0x74>
 8013040:	b1c6      	cbz	r6, 8013074 <rcl_action_take_goal_response+0x74>
 8013042:	6820      	ldr	r0, [r4, #0]
 8013044:	4632      	mov	r2, r6
 8013046:	4629      	mov	r1, r5
 8013048:	f7fd ffde 	bl	8011008 <rcl_take_response>
 801304c:	b148      	cbz	r0, 8013062 <rcl_action_take_goal_response+0x62>
 801304e:	280a      	cmp	r0, #10
 8013050:	d007      	beq.n	8013062 <rcl_action_take_goal_response+0x62>
 8013052:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013056:	f640 0337 	movw	r3, #2103	@ 0x837
 801305a:	4290      	cmp	r0, r2
 801305c:	bf0c      	ite	eq
 801305e:	4618      	moveq	r0, r3
 8013060:	2001      	movne	r0, #1
 8013062:	bd70      	pop	{r4, r5, r6, pc}
 8013064:	f7f8 f8fc 	bl	800b260 <rcutils_reset_error>
 8013068:	f640 0036 	movw	r0, #2102	@ 0x836
 801306c:	bd70      	pop	{r4, r5, r6, pc}
 801306e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013072:	bd70      	pop	{r4, r5, r6, pc}
 8013074:	200b      	movs	r0, #11
 8013076:	bd70      	pop	{r4, r5, r6, pc}
 8013078:	f640 0036 	movw	r0, #2102	@ 0x836
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop

08013080 <rcl_action_send_result_request>:
 8013080:	b390      	cbz	r0, 80130e8 <rcl_action_send_result_request+0x68>
 8013082:	b570      	push	{r4, r5, r6, lr}
 8013084:	4604      	mov	r4, r0
 8013086:	6800      	ldr	r0, [r0, #0]
 8013088:	b348      	cbz	r0, 80130de <rcl_action_send_result_request+0x5e>
 801308a:	460d      	mov	r5, r1
 801308c:	4616      	mov	r6, r2
 801308e:	f7fe f803 	bl	8011098 <rcl_client_is_valid>
 8013092:	b1f8      	cbz	r0, 80130d4 <rcl_action_send_result_request+0x54>
 8013094:	6820      	ldr	r0, [r4, #0]
 8013096:	3004      	adds	r0, #4
 8013098:	f7fd fffe 	bl	8011098 <rcl_client_is_valid>
 801309c:	b1d0      	cbz	r0, 80130d4 <rcl_action_send_result_request+0x54>
 801309e:	6820      	ldr	r0, [r4, #0]
 80130a0:	3008      	adds	r0, #8
 80130a2:	f7fd fff9 	bl	8011098 <rcl_client_is_valid>
 80130a6:	b1a8      	cbz	r0, 80130d4 <rcl_action_send_result_request+0x54>
 80130a8:	6820      	ldr	r0, [r4, #0]
 80130aa:	300c      	adds	r0, #12
 80130ac:	f7fe fdb6 	bl	8011c1c <rcl_subscription_is_valid>
 80130b0:	b180      	cbz	r0, 80130d4 <rcl_action_send_result_request+0x54>
 80130b2:	6820      	ldr	r0, [r4, #0]
 80130b4:	3010      	adds	r0, #16
 80130b6:	f7fe fdb1 	bl	8011c1c <rcl_subscription_is_valid>
 80130ba:	b158      	cbz	r0, 80130d4 <rcl_action_send_result_request+0x54>
 80130bc:	b195      	cbz	r5, 80130e4 <rcl_action_send_result_request+0x64>
 80130be:	b18e      	cbz	r6, 80130e4 <rcl_action_send_result_request+0x64>
 80130c0:	6820      	ldr	r0, [r4, #0]
 80130c2:	4632      	mov	r2, r6
 80130c4:	4629      	mov	r1, r5
 80130c6:	3008      	adds	r0, #8
 80130c8:	f7fd ff68 	bl	8010f9c <rcl_send_request>
 80130cc:	3800      	subs	r0, #0
 80130ce:	bf18      	it	ne
 80130d0:	2001      	movne	r0, #1
 80130d2:	bd70      	pop	{r4, r5, r6, pc}
 80130d4:	f7f8 f8c4 	bl	800b260 <rcutils_reset_error>
 80130d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80130dc:	bd70      	pop	{r4, r5, r6, pc}
 80130de:	f640 0036 	movw	r0, #2102	@ 0x836
 80130e2:	bd70      	pop	{r4, r5, r6, pc}
 80130e4:	200b      	movs	r0, #11
 80130e6:	bd70      	pop	{r4, r5, r6, pc}
 80130e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80130ec:	4770      	bx	lr
 80130ee:	bf00      	nop

080130f0 <rcl_action_take_result_response>:
 80130f0:	2800      	cmp	r0, #0
 80130f2:	d03a      	beq.n	801316a <rcl_action_take_result_response+0x7a>
 80130f4:	b570      	push	{r4, r5, r6, lr}
 80130f6:	4604      	mov	r4, r0
 80130f8:	6800      	ldr	r0, [r0, #0]
 80130fa:	b388      	cbz	r0, 8013160 <rcl_action_take_result_response+0x70>
 80130fc:	460d      	mov	r5, r1
 80130fe:	4616      	mov	r6, r2
 8013100:	f7fd ffca 	bl	8011098 <rcl_client_is_valid>
 8013104:	b338      	cbz	r0, 8013156 <rcl_action_take_result_response+0x66>
 8013106:	6820      	ldr	r0, [r4, #0]
 8013108:	3004      	adds	r0, #4
 801310a:	f7fd ffc5 	bl	8011098 <rcl_client_is_valid>
 801310e:	b310      	cbz	r0, 8013156 <rcl_action_take_result_response+0x66>
 8013110:	6820      	ldr	r0, [r4, #0]
 8013112:	3008      	adds	r0, #8
 8013114:	f7fd ffc0 	bl	8011098 <rcl_client_is_valid>
 8013118:	b1e8      	cbz	r0, 8013156 <rcl_action_take_result_response+0x66>
 801311a:	6820      	ldr	r0, [r4, #0]
 801311c:	300c      	adds	r0, #12
 801311e:	f7fe fd7d 	bl	8011c1c <rcl_subscription_is_valid>
 8013122:	b1c0      	cbz	r0, 8013156 <rcl_action_take_result_response+0x66>
 8013124:	6820      	ldr	r0, [r4, #0]
 8013126:	3010      	adds	r0, #16
 8013128:	f7fe fd78 	bl	8011c1c <rcl_subscription_is_valid>
 801312c:	b198      	cbz	r0, 8013156 <rcl_action_take_result_response+0x66>
 801312e:	b1d5      	cbz	r5, 8013166 <rcl_action_take_result_response+0x76>
 8013130:	b1ce      	cbz	r6, 8013166 <rcl_action_take_result_response+0x76>
 8013132:	6820      	ldr	r0, [r4, #0]
 8013134:	4632      	mov	r2, r6
 8013136:	4629      	mov	r1, r5
 8013138:	3008      	adds	r0, #8
 801313a:	f7fd ff65 	bl	8011008 <rcl_take_response>
 801313e:	b148      	cbz	r0, 8013154 <rcl_action_take_result_response+0x64>
 8013140:	280a      	cmp	r0, #10
 8013142:	d007      	beq.n	8013154 <rcl_action_take_result_response+0x64>
 8013144:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013148:	f640 0337 	movw	r3, #2103	@ 0x837
 801314c:	4290      	cmp	r0, r2
 801314e:	bf0c      	ite	eq
 8013150:	4618      	moveq	r0, r3
 8013152:	2001      	movne	r0, #1
 8013154:	bd70      	pop	{r4, r5, r6, pc}
 8013156:	f7f8 f883 	bl	800b260 <rcutils_reset_error>
 801315a:	f640 0036 	movw	r0, #2102	@ 0x836
 801315e:	bd70      	pop	{r4, r5, r6, pc}
 8013160:	f640 0036 	movw	r0, #2102	@ 0x836
 8013164:	bd70      	pop	{r4, r5, r6, pc}
 8013166:	200b      	movs	r0, #11
 8013168:	bd70      	pop	{r4, r5, r6, pc}
 801316a:	f640 0036 	movw	r0, #2102	@ 0x836
 801316e:	4770      	bx	lr

08013170 <rcl_action_take_cancel_response>:
 8013170:	2800      	cmp	r0, #0
 8013172:	d03a      	beq.n	80131ea <rcl_action_take_cancel_response+0x7a>
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	6800      	ldr	r0, [r0, #0]
 801317a:	b388      	cbz	r0, 80131e0 <rcl_action_take_cancel_response+0x70>
 801317c:	460d      	mov	r5, r1
 801317e:	4616      	mov	r6, r2
 8013180:	f7fd ff8a 	bl	8011098 <rcl_client_is_valid>
 8013184:	b338      	cbz	r0, 80131d6 <rcl_action_take_cancel_response+0x66>
 8013186:	6820      	ldr	r0, [r4, #0]
 8013188:	3004      	adds	r0, #4
 801318a:	f7fd ff85 	bl	8011098 <rcl_client_is_valid>
 801318e:	b310      	cbz	r0, 80131d6 <rcl_action_take_cancel_response+0x66>
 8013190:	6820      	ldr	r0, [r4, #0]
 8013192:	3008      	adds	r0, #8
 8013194:	f7fd ff80 	bl	8011098 <rcl_client_is_valid>
 8013198:	b1e8      	cbz	r0, 80131d6 <rcl_action_take_cancel_response+0x66>
 801319a:	6820      	ldr	r0, [r4, #0]
 801319c:	300c      	adds	r0, #12
 801319e:	f7fe fd3d 	bl	8011c1c <rcl_subscription_is_valid>
 80131a2:	b1c0      	cbz	r0, 80131d6 <rcl_action_take_cancel_response+0x66>
 80131a4:	6820      	ldr	r0, [r4, #0]
 80131a6:	3010      	adds	r0, #16
 80131a8:	f7fe fd38 	bl	8011c1c <rcl_subscription_is_valid>
 80131ac:	b198      	cbz	r0, 80131d6 <rcl_action_take_cancel_response+0x66>
 80131ae:	b1d5      	cbz	r5, 80131e6 <rcl_action_take_cancel_response+0x76>
 80131b0:	b1ce      	cbz	r6, 80131e6 <rcl_action_take_cancel_response+0x76>
 80131b2:	6820      	ldr	r0, [r4, #0]
 80131b4:	4632      	mov	r2, r6
 80131b6:	4629      	mov	r1, r5
 80131b8:	3004      	adds	r0, #4
 80131ba:	f7fd ff25 	bl	8011008 <rcl_take_response>
 80131be:	b148      	cbz	r0, 80131d4 <rcl_action_take_cancel_response+0x64>
 80131c0:	280a      	cmp	r0, #10
 80131c2:	d007      	beq.n	80131d4 <rcl_action_take_cancel_response+0x64>
 80131c4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80131c8:	f640 0337 	movw	r3, #2103	@ 0x837
 80131cc:	4290      	cmp	r0, r2
 80131ce:	bf0c      	ite	eq
 80131d0:	4618      	moveq	r0, r3
 80131d2:	2001      	movne	r0, #1
 80131d4:	bd70      	pop	{r4, r5, r6, pc}
 80131d6:	f7f8 f843 	bl	800b260 <rcutils_reset_error>
 80131da:	f640 0036 	movw	r0, #2102	@ 0x836
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80131e4:	bd70      	pop	{r4, r5, r6, pc}
 80131e6:	200b      	movs	r0, #11
 80131e8:	bd70      	pop	{r4, r5, r6, pc}
 80131ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80131ee:	4770      	bx	lr

080131f0 <rcl_action_take_feedback>:
 80131f0:	2800      	cmp	r0, #0
 80131f2:	d038      	beq.n	8013266 <rcl_action_take_feedback+0x76>
 80131f4:	b530      	push	{r4, r5, lr}
 80131f6:	4604      	mov	r4, r0
 80131f8:	6800      	ldr	r0, [r0, #0]
 80131fa:	b091      	sub	sp, #68	@ 0x44
 80131fc:	b378      	cbz	r0, 801325e <rcl_action_take_feedback+0x6e>
 80131fe:	460d      	mov	r5, r1
 8013200:	f7fd ff4a 	bl	8011098 <rcl_client_is_valid>
 8013204:	b328      	cbz	r0, 8013252 <rcl_action_take_feedback+0x62>
 8013206:	6820      	ldr	r0, [r4, #0]
 8013208:	3004      	adds	r0, #4
 801320a:	f7fd ff45 	bl	8011098 <rcl_client_is_valid>
 801320e:	b300      	cbz	r0, 8013252 <rcl_action_take_feedback+0x62>
 8013210:	6820      	ldr	r0, [r4, #0]
 8013212:	3008      	adds	r0, #8
 8013214:	f7fd ff40 	bl	8011098 <rcl_client_is_valid>
 8013218:	b1d8      	cbz	r0, 8013252 <rcl_action_take_feedback+0x62>
 801321a:	6820      	ldr	r0, [r4, #0]
 801321c:	300c      	adds	r0, #12
 801321e:	f7fe fcfd 	bl	8011c1c <rcl_subscription_is_valid>
 8013222:	b1b0      	cbz	r0, 8013252 <rcl_action_take_feedback+0x62>
 8013224:	6820      	ldr	r0, [r4, #0]
 8013226:	3010      	adds	r0, #16
 8013228:	f7fe fcf8 	bl	8011c1c <rcl_subscription_is_valid>
 801322c:	b188      	cbz	r0, 8013252 <rcl_action_take_feedback+0x62>
 801322e:	b1ed      	cbz	r5, 801326c <rcl_action_take_feedback+0x7c>
 8013230:	6820      	ldr	r0, [r4, #0]
 8013232:	2300      	movs	r3, #0
 8013234:	466a      	mov	r2, sp
 8013236:	4629      	mov	r1, r5
 8013238:	300c      	adds	r0, #12
 801323a:	f7fe fc91 	bl	8011b60 <rcl_take>
 801323e:	b160      	cbz	r0, 801325a <rcl_action_take_feedback+0x6a>
 8013240:	f240 1391 	movw	r3, #401	@ 0x191
 8013244:	4298      	cmp	r0, r3
 8013246:	d014      	beq.n	8013272 <rcl_action_take_feedback+0x82>
 8013248:	280a      	cmp	r0, #10
 801324a:	bf18      	it	ne
 801324c:	2001      	movne	r0, #1
 801324e:	b011      	add	sp, #68	@ 0x44
 8013250:	bd30      	pop	{r4, r5, pc}
 8013252:	f7f8 f805 	bl	800b260 <rcutils_reset_error>
 8013256:	f640 0036 	movw	r0, #2102	@ 0x836
 801325a:	b011      	add	sp, #68	@ 0x44
 801325c:	bd30      	pop	{r4, r5, pc}
 801325e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013262:	b011      	add	sp, #68	@ 0x44
 8013264:	bd30      	pop	{r4, r5, pc}
 8013266:	f640 0036 	movw	r0, #2102	@ 0x836
 801326a:	4770      	bx	lr
 801326c:	200b      	movs	r0, #11
 801326e:	b011      	add	sp, #68	@ 0x44
 8013270:	bd30      	pop	{r4, r5, pc}
 8013272:	f640 0037 	movw	r0, #2103	@ 0x837
 8013276:	e7f0      	b.n	801325a <rcl_action_take_feedback+0x6a>

08013278 <rcl_action_wait_set_add_action_client>:
 8013278:	2800      	cmp	r0, #0
 801327a:	d048      	beq.n	801330e <rcl_action_wait_set_add_action_client+0x96>
 801327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801327e:	460c      	mov	r4, r1
 8013280:	2900      	cmp	r1, #0
 8013282:	d03c      	beq.n	80132fe <rcl_action_wait_set_add_action_client+0x86>
 8013284:	4605      	mov	r5, r0
 8013286:	6808      	ldr	r0, [r1, #0]
 8013288:	2800      	cmp	r0, #0
 801328a:	d038      	beq.n	80132fe <rcl_action_wait_set_add_action_client+0x86>
 801328c:	4617      	mov	r7, r2
 801328e:	461e      	mov	r6, r3
 8013290:	f7fd ff02 	bl	8011098 <rcl_client_is_valid>
 8013294:	b3b0      	cbz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x8c>
 8013296:	6820      	ldr	r0, [r4, #0]
 8013298:	3004      	adds	r0, #4
 801329a:	f7fd fefd 	bl	8011098 <rcl_client_is_valid>
 801329e:	b388      	cbz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x8c>
 80132a0:	6820      	ldr	r0, [r4, #0]
 80132a2:	3008      	adds	r0, #8
 80132a4:	f7fd fef8 	bl	8011098 <rcl_client_is_valid>
 80132a8:	b360      	cbz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x8c>
 80132aa:	6820      	ldr	r0, [r4, #0]
 80132ac:	300c      	adds	r0, #12
 80132ae:	f7fe fcb5 	bl	8011c1c <rcl_subscription_is_valid>
 80132b2:	b338      	cbz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x8c>
 80132b4:	6820      	ldr	r0, [r4, #0]
 80132b6:	3010      	adds	r0, #16
 80132b8:	f7fe fcb0 	bl	8011c1c <rcl_subscription_is_valid>
 80132bc:	b310      	cbz	r0, 8013304 <rcl_action_wait_set_add_action_client+0x8c>
 80132be:	6821      	ldr	r1, [r4, #0]
 80132c0:	4628      	mov	r0, r5
 80132c2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80132c6:	f7ff fccd 	bl	8012c64 <rcl_wait_set_add_client>
 80132ca:	b9b8      	cbnz	r0, 80132fc <rcl_action_wait_set_add_action_client+0x84>
 80132cc:	6821      	ldr	r1, [r4, #0]
 80132ce:	4628      	mov	r0, r5
 80132d0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80132d4:	3104      	adds	r1, #4
 80132d6:	f7ff fcc5 	bl	8012c64 <rcl_wait_set_add_client>
 80132da:	b978      	cbnz	r0, 80132fc <rcl_action_wait_set_add_action_client+0x84>
 80132dc:	6821      	ldr	r1, [r4, #0]
 80132de:	4628      	mov	r0, r5
 80132e0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80132e4:	3108      	adds	r1, #8
 80132e6:	f7ff fcbd 	bl	8012c64 <rcl_wait_set_add_client>
 80132ea:	b938      	cbnz	r0, 80132fc <rcl_action_wait_set_add_action_client+0x84>
 80132ec:	6821      	ldr	r1, [r4, #0]
 80132ee:	4628      	mov	r0, r5
 80132f0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80132f4:	310c      	adds	r1, #12
 80132f6:	f7ff f96d 	bl	80125d4 <rcl_wait_set_add_subscription>
 80132fa:	b158      	cbz	r0, 8013314 <rcl_action_wait_set_add_action_client+0x9c>
 80132fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8013302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013304:	f7f7 ffac 	bl	800b260 <rcutils_reset_error>
 8013308:	f640 0036 	movw	r0, #2102	@ 0x836
 801330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801330e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013312:	4770      	bx	lr
 8013314:	6821      	ldr	r1, [r4, #0]
 8013316:	4628      	mov	r0, r5
 8013318:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801331c:	3110      	adds	r1, #16
 801331e:	f7ff f959 	bl	80125d4 <rcl_wait_set_add_subscription>
 8013322:	2800      	cmp	r0, #0
 8013324:	d1ea      	bne.n	80132fc <rcl_action_wait_set_add_action_client+0x84>
 8013326:	b11f      	cbz	r7, 8013330 <rcl_action_wait_set_add_action_client+0xb8>
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801332e:	603b      	str	r3, [r7, #0]
 8013330:	2e00      	cmp	r6, #0
 8013332:	d0e3      	beq.n	80132fc <rcl_action_wait_set_add_action_client+0x84>
 8013334:	6823      	ldr	r3, [r4, #0]
 8013336:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801333a:	6033      	str	r3, [r6, #0]
 801333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801333e:	bf00      	nop

08013340 <rcl_action_client_wait_set_get_entities_ready>:
 8013340:	2800      	cmp	r0, #0
 8013342:	f000 808d 	beq.w	8013460 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8013346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334a:	460c      	mov	r4, r1
 801334c:	2900      	cmp	r1, #0
 801334e:	d077      	beq.n	8013440 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013350:	4605      	mov	r5, r0
 8013352:	6808      	ldr	r0, [r1, #0]
 8013354:	2800      	cmp	r0, #0
 8013356:	d073      	beq.n	8013440 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013358:	4616      	mov	r6, r2
 801335a:	461f      	mov	r7, r3
 801335c:	f7fd fe9c 	bl	8011098 <rcl_client_is_valid>
 8013360:	2800      	cmp	r0, #0
 8013362:	d071      	beq.n	8013448 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013364:	6820      	ldr	r0, [r4, #0]
 8013366:	3004      	adds	r0, #4
 8013368:	f7fd fe96 	bl	8011098 <rcl_client_is_valid>
 801336c:	2800      	cmp	r0, #0
 801336e:	d06b      	beq.n	8013448 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013370:	6820      	ldr	r0, [r4, #0]
 8013372:	3008      	adds	r0, #8
 8013374:	f7fd fe90 	bl	8011098 <rcl_client_is_valid>
 8013378:	2800      	cmp	r0, #0
 801337a:	d065      	beq.n	8013448 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801337c:	6820      	ldr	r0, [r4, #0]
 801337e:	300c      	adds	r0, #12
 8013380:	f7fe fc4c 	bl	8011c1c <rcl_subscription_is_valid>
 8013384:	2800      	cmp	r0, #0
 8013386:	d05f      	beq.n	8013448 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013388:	6820      	ldr	r0, [r4, #0]
 801338a:	3010      	adds	r0, #16
 801338c:	f7fe fc46 	bl	8011c1c <rcl_subscription_is_valid>
 8013390:	2800      	cmp	r0, #0
 8013392:	d059      	beq.n	8013448 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013394:	2e00      	cmp	r6, #0
 8013396:	d060      	beq.n	801345a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013398:	2f00      	cmp	r7, #0
 801339a:	d05e      	beq.n	801345a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801339c:	9b06      	ldr	r3, [sp, #24]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d05b      	beq.n	801345a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133a2:	9b07      	ldr	r3, [sp, #28]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d058      	beq.n	801345a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133a8:	9b08      	ldr	r3, [sp, #32]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d055      	beq.n	801345a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	686a      	ldr	r2, [r5, #4]
 80133b2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80133b6:	428a      	cmp	r2, r1
 80133b8:	d94c      	bls.n	8013454 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133ba:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80133be:	4282      	cmp	r2, r0
 80133c0:	d948      	bls.n	8013454 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133c2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80133c6:	69ea      	ldr	r2, [r5, #28]
 80133c8:	42a2      	cmp	r2, r4
 80133ca:	d943      	bls.n	8013454 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133cc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80133d0:	4562      	cmp	r2, ip
 80133d2:	d93f      	bls.n	8013454 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133d4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80133d8:	4572      	cmp	r2, lr
 80133da:	d93b      	bls.n	8013454 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80133dc:	69aa      	ldr	r2, [r5, #24]
 80133de:	682d      	ldr	r5, [r5, #0]
 80133e0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80133e4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80133e8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80133ec:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80133f0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80133f4:	f103 0c0c 	add.w	ip, r3, #12
 80133f8:	eba5 050c 	sub.w	r5, r5, ip
 80133fc:	fab5 f585 	clz	r5, r5
 8013400:	096d      	lsrs	r5, r5, #5
 8013402:	7035      	strb	r5, [r6, #0]
 8013404:	f103 0510 	add.w	r5, r3, #16
 8013408:	1b64      	subs	r4, r4, r5
 801340a:	fab4 f484 	clz	r4, r4
 801340e:	0964      	lsrs	r4, r4, #5
 8013410:	703c      	strb	r4, [r7, #0]
 8013412:	eba3 0008 	sub.w	r0, r3, r8
 8013416:	1d1c      	adds	r4, r3, #4
 8013418:	3308      	adds	r3, #8
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	fab0 f080 	clz	r0, r0
 8013420:	9a06      	ldr	r2, [sp, #24]
 8013422:	0940      	lsrs	r0, r0, #5
 8013424:	1b09      	subs	r1, r1, r4
 8013426:	7010      	strb	r0, [r2, #0]
 8013428:	fab1 f181 	clz	r1, r1
 801342c:	9a07      	ldr	r2, [sp, #28]
 801342e:	0949      	lsrs	r1, r1, #5
 8013430:	7011      	strb	r1, [r2, #0]
 8013432:	fab3 f383 	clz	r3, r3
 8013436:	9a08      	ldr	r2, [sp, #32]
 8013438:	095b      	lsrs	r3, r3, #5
 801343a:	2000      	movs	r0, #0
 801343c:	7013      	strb	r3, [r2, #0]
 801343e:	e001      	b.n	8013444 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013440:	f640 0036 	movw	r0, #2102	@ 0x836
 8013444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013448:	f7f7 ff0a 	bl	800b260 <rcutils_reset_error>
 801344c:	f640 0036 	movw	r0, #2102	@ 0x836
 8013450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013454:	2001      	movs	r0, #1
 8013456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801345a:	200b      	movs	r0, #11
 801345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013460:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013464:	4770      	bx	lr
 8013466:	bf00      	nop

08013468 <rcl_action_take_goal_request>:
 8013468:	2800      	cmp	r0, #0
 801346a:	d039      	beq.n	80134e0 <rcl_action_take_goal_request+0x78>
 801346c:	b570      	push	{r4, r5, r6, lr}
 801346e:	4604      	mov	r4, r0
 8013470:	6800      	ldr	r0, [r0, #0]
 8013472:	b380      	cbz	r0, 80134d6 <rcl_action_take_goal_request+0x6e>
 8013474:	460d      	mov	r5, r1
 8013476:	4616      	mov	r6, r2
 8013478:	f7fe fb68 	bl	8011b4c <rcl_service_is_valid>
 801347c:	b330      	cbz	r0, 80134cc <rcl_action_take_goal_request+0x64>
 801347e:	6820      	ldr	r0, [r4, #0]
 8013480:	3004      	adds	r0, #4
 8013482:	f7fe fb63 	bl	8011b4c <rcl_service_is_valid>
 8013486:	b308      	cbz	r0, 80134cc <rcl_action_take_goal_request+0x64>
 8013488:	6820      	ldr	r0, [r4, #0]
 801348a:	3008      	adds	r0, #8
 801348c:	f7fe fb5e 	bl	8011b4c <rcl_service_is_valid>
 8013490:	b1e0      	cbz	r0, 80134cc <rcl_action_take_goal_request+0x64>
 8013492:	6820      	ldr	r0, [r4, #0]
 8013494:	300c      	adds	r0, #12
 8013496:	f7f6 ff6b 	bl	800a370 <rcl_publisher_is_valid>
 801349a:	b1b8      	cbz	r0, 80134cc <rcl_action_take_goal_request+0x64>
 801349c:	6820      	ldr	r0, [r4, #0]
 801349e:	3010      	adds	r0, #16
 80134a0:	f7f6 ff66 	bl	800a370 <rcl_publisher_is_valid>
 80134a4:	b190      	cbz	r0, 80134cc <rcl_action_take_goal_request+0x64>
 80134a6:	b1cd      	cbz	r5, 80134dc <rcl_action_take_goal_request+0x74>
 80134a8:	b1c6      	cbz	r6, 80134dc <rcl_action_take_goal_request+0x74>
 80134aa:	6820      	ldr	r0, [r4, #0]
 80134ac:	4632      	mov	r2, r6
 80134ae:	4629      	mov	r1, r5
 80134b0:	f7fe faf4 	bl	8011a9c <rcl_take_request>
 80134b4:	b148      	cbz	r0, 80134ca <rcl_action_take_goal_request+0x62>
 80134b6:	280a      	cmp	r0, #10
 80134b8:	d007      	beq.n	80134ca <rcl_action_take_goal_request+0x62>
 80134ba:	f240 2259 	movw	r2, #601	@ 0x259
 80134be:	f640 0399 	movw	r3, #2201	@ 0x899
 80134c2:	4290      	cmp	r0, r2
 80134c4:	bf0c      	ite	eq
 80134c6:	4618      	moveq	r0, r3
 80134c8:	2001      	movne	r0, #1
 80134ca:	bd70      	pop	{r4, r5, r6, pc}
 80134cc:	f7f7 fec8 	bl	800b260 <rcutils_reset_error>
 80134d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80134d4:	bd70      	pop	{r4, r5, r6, pc}
 80134d6:	f640 0098 	movw	r0, #2200	@ 0x898
 80134da:	bd70      	pop	{r4, r5, r6, pc}
 80134dc:	200b      	movs	r0, #11
 80134de:	bd70      	pop	{r4, r5, r6, pc}
 80134e0:	f640 0098 	movw	r0, #2200	@ 0x898
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop

080134e8 <rcl_action_send_goal_response>:
 80134e8:	b390      	cbz	r0, 8013550 <rcl_action_send_goal_response+0x68>
 80134ea:	b570      	push	{r4, r5, r6, lr}
 80134ec:	4604      	mov	r4, r0
 80134ee:	6800      	ldr	r0, [r0, #0]
 80134f0:	b348      	cbz	r0, 8013546 <rcl_action_send_goal_response+0x5e>
 80134f2:	460d      	mov	r5, r1
 80134f4:	4616      	mov	r6, r2
 80134f6:	f7fe fb29 	bl	8011b4c <rcl_service_is_valid>
 80134fa:	b1f8      	cbz	r0, 801353c <rcl_action_send_goal_response+0x54>
 80134fc:	6820      	ldr	r0, [r4, #0]
 80134fe:	3004      	adds	r0, #4
 8013500:	f7fe fb24 	bl	8011b4c <rcl_service_is_valid>
 8013504:	b1d0      	cbz	r0, 801353c <rcl_action_send_goal_response+0x54>
 8013506:	6820      	ldr	r0, [r4, #0]
 8013508:	3008      	adds	r0, #8
 801350a:	f7fe fb1f 	bl	8011b4c <rcl_service_is_valid>
 801350e:	b1a8      	cbz	r0, 801353c <rcl_action_send_goal_response+0x54>
 8013510:	6820      	ldr	r0, [r4, #0]
 8013512:	300c      	adds	r0, #12
 8013514:	f7f6 ff2c 	bl	800a370 <rcl_publisher_is_valid>
 8013518:	b180      	cbz	r0, 801353c <rcl_action_send_goal_response+0x54>
 801351a:	6820      	ldr	r0, [r4, #0]
 801351c:	3010      	adds	r0, #16
 801351e:	f7f6 ff27 	bl	800a370 <rcl_publisher_is_valid>
 8013522:	b158      	cbz	r0, 801353c <rcl_action_send_goal_response+0x54>
 8013524:	b195      	cbz	r5, 801354c <rcl_action_send_goal_response+0x64>
 8013526:	b18e      	cbz	r6, 801354c <rcl_action_send_goal_response+0x64>
 8013528:	6820      	ldr	r0, [r4, #0]
 801352a:	4632      	mov	r2, r6
 801352c:	4629      	mov	r1, r5
 801352e:	f7fe faf5 	bl	8011b1c <rcl_send_response>
 8013532:	b110      	cbz	r0, 801353a <rcl_action_send_goal_response+0x52>
 8013534:	2802      	cmp	r0, #2
 8013536:	bf18      	it	ne
 8013538:	2001      	movne	r0, #1
 801353a:	bd70      	pop	{r4, r5, r6, pc}
 801353c:	f7f7 fe90 	bl	800b260 <rcutils_reset_error>
 8013540:	f640 0098 	movw	r0, #2200	@ 0x898
 8013544:	bd70      	pop	{r4, r5, r6, pc}
 8013546:	f640 0098 	movw	r0, #2200	@ 0x898
 801354a:	bd70      	pop	{r4, r5, r6, pc}
 801354c:	200b      	movs	r0, #11
 801354e:	bd70      	pop	{r4, r5, r6, pc}
 8013550:	f640 0098 	movw	r0, #2200	@ 0x898
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop

08013558 <rcl_action_take_result_request>:
 8013558:	2800      	cmp	r0, #0
 801355a:	d03a      	beq.n	80135d2 <rcl_action_take_result_request+0x7a>
 801355c:	b570      	push	{r4, r5, r6, lr}
 801355e:	4604      	mov	r4, r0
 8013560:	6800      	ldr	r0, [r0, #0]
 8013562:	b388      	cbz	r0, 80135c8 <rcl_action_take_result_request+0x70>
 8013564:	460d      	mov	r5, r1
 8013566:	4616      	mov	r6, r2
 8013568:	f7fe faf0 	bl	8011b4c <rcl_service_is_valid>
 801356c:	b338      	cbz	r0, 80135be <rcl_action_take_result_request+0x66>
 801356e:	6820      	ldr	r0, [r4, #0]
 8013570:	3004      	adds	r0, #4
 8013572:	f7fe faeb 	bl	8011b4c <rcl_service_is_valid>
 8013576:	b310      	cbz	r0, 80135be <rcl_action_take_result_request+0x66>
 8013578:	6820      	ldr	r0, [r4, #0]
 801357a:	3008      	adds	r0, #8
 801357c:	f7fe fae6 	bl	8011b4c <rcl_service_is_valid>
 8013580:	b1e8      	cbz	r0, 80135be <rcl_action_take_result_request+0x66>
 8013582:	6820      	ldr	r0, [r4, #0]
 8013584:	300c      	adds	r0, #12
 8013586:	f7f6 fef3 	bl	800a370 <rcl_publisher_is_valid>
 801358a:	b1c0      	cbz	r0, 80135be <rcl_action_take_result_request+0x66>
 801358c:	6820      	ldr	r0, [r4, #0]
 801358e:	3010      	adds	r0, #16
 8013590:	f7f6 feee 	bl	800a370 <rcl_publisher_is_valid>
 8013594:	b198      	cbz	r0, 80135be <rcl_action_take_result_request+0x66>
 8013596:	b1d5      	cbz	r5, 80135ce <rcl_action_take_result_request+0x76>
 8013598:	b1ce      	cbz	r6, 80135ce <rcl_action_take_result_request+0x76>
 801359a:	6820      	ldr	r0, [r4, #0]
 801359c:	4632      	mov	r2, r6
 801359e:	4629      	mov	r1, r5
 80135a0:	3008      	adds	r0, #8
 80135a2:	f7fe fa7b 	bl	8011a9c <rcl_take_request>
 80135a6:	b148      	cbz	r0, 80135bc <rcl_action_take_result_request+0x64>
 80135a8:	280a      	cmp	r0, #10
 80135aa:	d007      	beq.n	80135bc <rcl_action_take_result_request+0x64>
 80135ac:	f240 2259 	movw	r2, #601	@ 0x259
 80135b0:	f640 0399 	movw	r3, #2201	@ 0x899
 80135b4:	4290      	cmp	r0, r2
 80135b6:	bf0c      	ite	eq
 80135b8:	4618      	moveq	r0, r3
 80135ba:	2001      	movne	r0, #1
 80135bc:	bd70      	pop	{r4, r5, r6, pc}
 80135be:	f7f7 fe4f 	bl	800b260 <rcutils_reset_error>
 80135c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80135c6:	bd70      	pop	{r4, r5, r6, pc}
 80135c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80135cc:	bd70      	pop	{r4, r5, r6, pc}
 80135ce:	200b      	movs	r0, #11
 80135d0:	bd70      	pop	{r4, r5, r6, pc}
 80135d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80135d6:	4770      	bx	lr

080135d8 <rcl_action_take_cancel_request>:
 80135d8:	2800      	cmp	r0, #0
 80135da:	d03a      	beq.n	8013652 <rcl_action_take_cancel_request+0x7a>
 80135dc:	b570      	push	{r4, r5, r6, lr}
 80135de:	4604      	mov	r4, r0
 80135e0:	6800      	ldr	r0, [r0, #0]
 80135e2:	b388      	cbz	r0, 8013648 <rcl_action_take_cancel_request+0x70>
 80135e4:	460d      	mov	r5, r1
 80135e6:	4616      	mov	r6, r2
 80135e8:	f7fe fab0 	bl	8011b4c <rcl_service_is_valid>
 80135ec:	b338      	cbz	r0, 801363e <rcl_action_take_cancel_request+0x66>
 80135ee:	6820      	ldr	r0, [r4, #0]
 80135f0:	3004      	adds	r0, #4
 80135f2:	f7fe faab 	bl	8011b4c <rcl_service_is_valid>
 80135f6:	b310      	cbz	r0, 801363e <rcl_action_take_cancel_request+0x66>
 80135f8:	6820      	ldr	r0, [r4, #0]
 80135fa:	3008      	adds	r0, #8
 80135fc:	f7fe faa6 	bl	8011b4c <rcl_service_is_valid>
 8013600:	b1e8      	cbz	r0, 801363e <rcl_action_take_cancel_request+0x66>
 8013602:	6820      	ldr	r0, [r4, #0]
 8013604:	300c      	adds	r0, #12
 8013606:	f7f6 feb3 	bl	800a370 <rcl_publisher_is_valid>
 801360a:	b1c0      	cbz	r0, 801363e <rcl_action_take_cancel_request+0x66>
 801360c:	6820      	ldr	r0, [r4, #0]
 801360e:	3010      	adds	r0, #16
 8013610:	f7f6 feae 	bl	800a370 <rcl_publisher_is_valid>
 8013614:	b198      	cbz	r0, 801363e <rcl_action_take_cancel_request+0x66>
 8013616:	b1d5      	cbz	r5, 801364e <rcl_action_take_cancel_request+0x76>
 8013618:	b1ce      	cbz	r6, 801364e <rcl_action_take_cancel_request+0x76>
 801361a:	6820      	ldr	r0, [r4, #0]
 801361c:	4632      	mov	r2, r6
 801361e:	4629      	mov	r1, r5
 8013620:	3004      	adds	r0, #4
 8013622:	f7fe fa3b 	bl	8011a9c <rcl_take_request>
 8013626:	b148      	cbz	r0, 801363c <rcl_action_take_cancel_request+0x64>
 8013628:	280a      	cmp	r0, #10
 801362a:	d007      	beq.n	801363c <rcl_action_take_cancel_request+0x64>
 801362c:	f240 2259 	movw	r2, #601	@ 0x259
 8013630:	f640 0399 	movw	r3, #2201	@ 0x899
 8013634:	4290      	cmp	r0, r2
 8013636:	bf0c      	ite	eq
 8013638:	4618      	moveq	r0, r3
 801363a:	2001      	movne	r0, #1
 801363c:	bd70      	pop	{r4, r5, r6, pc}
 801363e:	f7f7 fe0f 	bl	800b260 <rcutils_reset_error>
 8013642:	f640 0098 	movw	r0, #2200	@ 0x898
 8013646:	bd70      	pop	{r4, r5, r6, pc}
 8013648:	f640 0098 	movw	r0, #2200	@ 0x898
 801364c:	bd70      	pop	{r4, r5, r6, pc}
 801364e:	200b      	movs	r0, #11
 8013650:	bd70      	pop	{r4, r5, r6, pc}
 8013652:	f640 0098 	movw	r0, #2200	@ 0x898
 8013656:	4770      	bx	lr

08013658 <rcl_action_send_cancel_response>:
 8013658:	b398      	cbz	r0, 80136c2 <rcl_action_send_cancel_response+0x6a>
 801365a:	b570      	push	{r4, r5, r6, lr}
 801365c:	4604      	mov	r4, r0
 801365e:	6800      	ldr	r0, [r0, #0]
 8013660:	b350      	cbz	r0, 80136b8 <rcl_action_send_cancel_response+0x60>
 8013662:	460d      	mov	r5, r1
 8013664:	4616      	mov	r6, r2
 8013666:	f7fe fa71 	bl	8011b4c <rcl_service_is_valid>
 801366a:	b300      	cbz	r0, 80136ae <rcl_action_send_cancel_response+0x56>
 801366c:	6820      	ldr	r0, [r4, #0]
 801366e:	3004      	adds	r0, #4
 8013670:	f7fe fa6c 	bl	8011b4c <rcl_service_is_valid>
 8013674:	b1d8      	cbz	r0, 80136ae <rcl_action_send_cancel_response+0x56>
 8013676:	6820      	ldr	r0, [r4, #0]
 8013678:	3008      	adds	r0, #8
 801367a:	f7fe fa67 	bl	8011b4c <rcl_service_is_valid>
 801367e:	b1b0      	cbz	r0, 80136ae <rcl_action_send_cancel_response+0x56>
 8013680:	6820      	ldr	r0, [r4, #0]
 8013682:	300c      	adds	r0, #12
 8013684:	f7f6 fe74 	bl	800a370 <rcl_publisher_is_valid>
 8013688:	b188      	cbz	r0, 80136ae <rcl_action_send_cancel_response+0x56>
 801368a:	6820      	ldr	r0, [r4, #0]
 801368c:	3010      	adds	r0, #16
 801368e:	f7f6 fe6f 	bl	800a370 <rcl_publisher_is_valid>
 8013692:	b160      	cbz	r0, 80136ae <rcl_action_send_cancel_response+0x56>
 8013694:	b19d      	cbz	r5, 80136be <rcl_action_send_cancel_response+0x66>
 8013696:	b196      	cbz	r6, 80136be <rcl_action_send_cancel_response+0x66>
 8013698:	6820      	ldr	r0, [r4, #0]
 801369a:	4632      	mov	r2, r6
 801369c:	4629      	mov	r1, r5
 801369e:	3004      	adds	r0, #4
 80136a0:	f7fe fa3c 	bl	8011b1c <rcl_send_response>
 80136a4:	b110      	cbz	r0, 80136ac <rcl_action_send_cancel_response+0x54>
 80136a6:	2802      	cmp	r0, #2
 80136a8:	bf18      	it	ne
 80136aa:	2001      	movne	r0, #1
 80136ac:	bd70      	pop	{r4, r5, r6, pc}
 80136ae:	f7f7 fdd7 	bl	800b260 <rcutils_reset_error>
 80136b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80136b6:	bd70      	pop	{r4, r5, r6, pc}
 80136b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80136bc:	bd70      	pop	{r4, r5, r6, pc}
 80136be:	200b      	movs	r0, #11
 80136c0:	bd70      	pop	{r4, r5, r6, pc}
 80136c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80136c6:	4770      	bx	lr

080136c8 <rcl_action_wait_set_add_action_server>:
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d04d      	beq.n	8013768 <rcl_action_wait_set_add_action_server+0xa0>
 80136cc:	b570      	push	{r4, r5, r6, lr}
 80136ce:	460c      	mov	r4, r1
 80136d0:	b159      	cbz	r1, 80136ea <rcl_action_wait_set_add_action_server+0x22>
 80136d2:	4605      	mov	r5, r0
 80136d4:	6808      	ldr	r0, [r1, #0]
 80136d6:	b140      	cbz	r0, 80136ea <rcl_action_wait_set_add_action_server+0x22>
 80136d8:	4616      	mov	r6, r2
 80136da:	f7fe fa37 	bl	8011b4c <rcl_service_is_valid>
 80136de:	b120      	cbz	r0, 80136ea <rcl_action_wait_set_add_action_server+0x22>
 80136e0:	6820      	ldr	r0, [r4, #0]
 80136e2:	3004      	adds	r0, #4
 80136e4:	f7fe fa32 	bl	8011b4c <rcl_service_is_valid>
 80136e8:	b910      	cbnz	r0, 80136f0 <rcl_action_wait_set_add_action_server+0x28>
 80136ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80136ee:	bd70      	pop	{r4, r5, r6, pc}
 80136f0:	6820      	ldr	r0, [r4, #0]
 80136f2:	3008      	adds	r0, #8
 80136f4:	f7fe fa2a 	bl	8011b4c <rcl_service_is_valid>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	d0f6      	beq.n	80136ea <rcl_action_wait_set_add_action_server+0x22>
 80136fc:	6820      	ldr	r0, [r4, #0]
 80136fe:	300c      	adds	r0, #12
 8013700:	f7f6 fe4e 	bl	800a3a0 <rcl_publisher_is_valid_except_context>
 8013704:	2800      	cmp	r0, #0
 8013706:	d0f0      	beq.n	80136ea <rcl_action_wait_set_add_action_server+0x22>
 8013708:	6820      	ldr	r0, [r4, #0]
 801370a:	3010      	adds	r0, #16
 801370c:	f7f6 fe48 	bl	800a3a0 <rcl_publisher_is_valid_except_context>
 8013710:	2800      	cmp	r0, #0
 8013712:	d0ea      	beq.n	80136ea <rcl_action_wait_set_add_action_server+0x22>
 8013714:	6821      	ldr	r1, [r4, #0]
 8013716:	4628      	mov	r0, r5
 8013718:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801371c:	f7ff face 	bl	8012cbc <rcl_wait_set_add_service>
 8013720:	2800      	cmp	r0, #0
 8013722:	d1e4      	bne.n	80136ee <rcl_action_wait_set_add_action_server+0x26>
 8013724:	6821      	ldr	r1, [r4, #0]
 8013726:	4628      	mov	r0, r5
 8013728:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801372c:	3104      	adds	r1, #4
 801372e:	f7ff fac5 	bl	8012cbc <rcl_wait_set_add_service>
 8013732:	2800      	cmp	r0, #0
 8013734:	d1db      	bne.n	80136ee <rcl_action_wait_set_add_action_server+0x26>
 8013736:	6821      	ldr	r1, [r4, #0]
 8013738:	4628      	mov	r0, r5
 801373a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801373e:	3108      	adds	r1, #8
 8013740:	f7ff fabc 	bl	8012cbc <rcl_wait_set_add_service>
 8013744:	2800      	cmp	r0, #0
 8013746:	d1d2      	bne.n	80136ee <rcl_action_wait_set_add_action_server+0x26>
 8013748:	6821      	ldr	r1, [r4, #0]
 801374a:	4628      	mov	r0, r5
 801374c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8013750:	3114      	adds	r1, #20
 8013752:	f7ff fa57 	bl	8012c04 <rcl_wait_set_add_timer>
 8013756:	2800      	cmp	r0, #0
 8013758:	d1c9      	bne.n	80136ee <rcl_action_wait_set_add_action_server+0x26>
 801375a:	2e00      	cmp	r6, #0
 801375c:	d0c7      	beq.n	80136ee <rcl_action_wait_set_add_action_server+0x26>
 801375e:	6823      	ldr	r3, [r4, #0]
 8013760:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8013764:	6033      	str	r3, [r6, #0]
 8013766:	bd70      	pop	{r4, r5, r6, pc}
 8013768:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801376c:	4770      	bx	lr
 801376e:	bf00      	nop

08013770 <rcl_action_server_wait_set_get_entities_ready>:
 8013770:	2800      	cmp	r0, #0
 8013772:	d05a      	beq.n	801382a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8013774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013776:	460c      	mov	r4, r1
 8013778:	b161      	cbz	r1, 8013794 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801377a:	4605      	mov	r5, r0
 801377c:	6808      	ldr	r0, [r1, #0]
 801377e:	b148      	cbz	r0, 8013794 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013780:	4616      	mov	r6, r2
 8013782:	461f      	mov	r7, r3
 8013784:	f7fe f9e2 	bl	8011b4c <rcl_service_is_valid>
 8013788:	b120      	cbz	r0, 8013794 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801378a:	6820      	ldr	r0, [r4, #0]
 801378c:	3004      	adds	r0, #4
 801378e:	f7fe f9dd 	bl	8011b4c <rcl_service_is_valid>
 8013792:	b910      	cbnz	r0, 801379a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013794:	f640 0098 	movw	r0, #2200	@ 0x898
 8013798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801379a:	6820      	ldr	r0, [r4, #0]
 801379c:	3008      	adds	r0, #8
 801379e:	f7fe f9d5 	bl	8011b4c <rcl_service_is_valid>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d0f6      	beq.n	8013794 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80137a6:	6820      	ldr	r0, [r4, #0]
 80137a8:	300c      	adds	r0, #12
 80137aa:	f7f6 fdf9 	bl	800a3a0 <rcl_publisher_is_valid_except_context>
 80137ae:	2800      	cmp	r0, #0
 80137b0:	d0f0      	beq.n	8013794 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80137b2:	6820      	ldr	r0, [r4, #0]
 80137b4:	3010      	adds	r0, #16
 80137b6:	f7f6 fdf3 	bl	800a3a0 <rcl_publisher_is_valid_except_context>
 80137ba:	2800      	cmp	r0, #0
 80137bc:	d0ea      	beq.n	8013794 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80137be:	b3be      	cbz	r6, 8013830 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137c0:	b3b7      	cbz	r7, 8013830 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137c2:	9b06      	ldr	r3, [sp, #24]
 80137c4:	b3a3      	cbz	r3, 8013830 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137c6:	9b07      	ldr	r3, [sp, #28]
 80137c8:	b393      	cbz	r3, 8013830 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80137ca:	6821      	ldr	r1, [r4, #0]
 80137cc:	692a      	ldr	r2, [r5, #16]
 80137ce:	6a2c      	ldr	r4, [r5, #32]
 80137d0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80137d4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80137d8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80137dc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80137e0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80137e4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80137e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80137ec:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80137f0:	1a64      	subs	r4, r4, r1
 80137f2:	fab4 f484 	clz	r4, r4
 80137f6:	0964      	lsrs	r4, r4, #5
 80137f8:	7034      	strb	r4, [r6, #0]
 80137fa:	1d0c      	adds	r4, r1, #4
 80137fc:	1b1b      	subs	r3, r3, r4
 80137fe:	fab3 f383 	clz	r3, r3
 8013802:	095b      	lsrs	r3, r3, #5
 8013804:	f101 0408 	add.w	r4, r1, #8
 8013808:	703b      	strb	r3, [r7, #0]
 801380a:	f101 0314 	add.w	r3, r1, #20
 801380e:	1b01      	subs	r1, r0, r4
 8013810:	1ad3      	subs	r3, r2, r3
 8013812:	fab1 f181 	clz	r1, r1
 8013816:	9a06      	ldr	r2, [sp, #24]
 8013818:	0949      	lsrs	r1, r1, #5
 801381a:	7011      	strb	r1, [r2, #0]
 801381c:	fab3 f383 	clz	r3, r3
 8013820:	9a07      	ldr	r2, [sp, #28]
 8013822:	095b      	lsrs	r3, r3, #5
 8013824:	2000      	movs	r0, #0
 8013826:	7013      	strb	r3, [r2, #0]
 8013828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801382a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801382e:	4770      	bx	lr
 8013830:	200b      	movs	r0, #11
 8013832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013834 <_execute_event_handler>:
 8013834:	2002      	movs	r0, #2
 8013836:	4770      	bx	lr

08013838 <_cancel_goal_event_handler>:
 8013838:	2003      	movs	r0, #3
 801383a:	4770      	bx	lr

0801383c <_succeed_event_handler>:
 801383c:	2004      	movs	r0, #4
 801383e:	4770      	bx	lr

08013840 <_abort_event_handler>:
 8013840:	2006      	movs	r0, #6
 8013842:	4770      	bx	lr

08013844 <_canceled_event_handler>:
 8013844:	2005      	movs	r0, #5
 8013846:	4770      	bx	lr

08013848 <rcl_action_transition_goal_state>:
 8013848:	b2c2      	uxtb	r2, r0
 801384a:	2a06      	cmp	r2, #6
 801384c:	d80c      	bhi.n	8013868 <rcl_action_transition_goal_state+0x20>
 801384e:	2904      	cmp	r1, #4
 8013850:	d80a      	bhi.n	8013868 <rcl_action_transition_goal_state+0x20>
 8013852:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8013856:	b410      	push	{r4}
 8013858:	1853      	adds	r3, r2, r1
 801385a:	4c06      	ldr	r4, [pc, #24]	@ (8013874 <rcl_action_transition_goal_state+0x2c>)
 801385c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013860:	b123      	cbz	r3, 801386c <rcl_action_transition_goal_state+0x24>
 8013862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013866:	4718      	bx	r3
 8013868:	2000      	movs	r0, #0
 801386a:	4770      	bx	lr
 801386c:	2000      	movs	r0, #0
 801386e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013872:	4770      	bx	lr
 8013874:	080184b0 	.word	0x080184b0

08013878 <rcl_action_get_zero_initialized_cancel_response>:
 8013878:	b510      	push	{r4, lr}
 801387a:	4c07      	ldr	r4, [pc, #28]	@ (8013898 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801387c:	4686      	mov	lr, r0
 801387e:	4684      	mov	ip, r0
 8013880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013888:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801388c:	6823      	ldr	r3, [r4, #0]
 801388e:	f8cc 3000 	str.w	r3, [ip]
 8013892:	4670      	mov	r0, lr
 8013894:	bd10      	pop	{r4, pc}
 8013896:	bf00      	nop
 8013898:	0801853c 	.word	0x0801853c

0801389c <rclc_action_send_result_request>:
 801389c:	b1d0      	cbz	r0, 80138d4 <rclc_action_send_result_request+0x38>
 801389e:	b500      	push	{lr}
 80138a0:	4684      	mov	ip, r0
 80138a2:	b087      	sub	sp, #28
 80138a4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80138a8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80138ac:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80138b0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80138b4:	f10d 0e08 	add.w	lr, sp, #8
 80138b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138bc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80138c0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80138c4:	a902      	add	r1, sp, #8
 80138c6:	3010      	adds	r0, #16
 80138c8:	f7ff fbda 	bl	8013080 <rcl_action_send_result_request>
 80138cc:	b920      	cbnz	r0, 80138d8 <rclc_action_send_result_request+0x3c>
 80138ce:	b007      	add	sp, #28
 80138d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80138d4:	200b      	movs	r0, #11
 80138d6:	4770      	bx	lr
 80138d8:	9001      	str	r0, [sp, #4]
 80138da:	f7f7 fcc1 	bl	800b260 <rcutils_reset_error>
 80138de:	9801      	ldr	r0, [sp, #4]
 80138e0:	b007      	add	sp, #28
 80138e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80138e6:	bf00      	nop

080138e8 <rclc_action_take_goal_handle>:
 80138e8:	b160      	cbz	r0, 8013904 <rclc_action_take_goal_handle+0x1c>
 80138ea:	6883      	ldr	r3, [r0, #8]
 80138ec:	b143      	cbz	r3, 8013900 <rclc_action_take_goal_handle+0x18>
 80138ee:	6819      	ldr	r1, [r3, #0]
 80138f0:	6081      	str	r1, [r0, #8]
 80138f2:	2200      	movs	r2, #0
 80138f4:	721a      	strb	r2, [r3, #8]
 80138f6:	68c1      	ldr	r1, [r0, #12]
 80138f8:	6019      	str	r1, [r3, #0]
 80138fa:	621a      	str	r2, [r3, #32]
 80138fc:	849a      	strh	r2, [r3, #36]	@ 0x24
 80138fe:	60c3      	str	r3, [r0, #12]
 8013900:	4618      	mov	r0, r3
 8013902:	4770      	bx	lr
 8013904:	4603      	mov	r3, r0
 8013906:	e7fb      	b.n	8013900 <rclc_action_take_goal_handle+0x18>

08013908 <rclc_action_remove_used_goal_handle>:
 8013908:	b180      	cbz	r0, 801392c <rclc_action_remove_used_goal_handle+0x24>
 801390a:	b179      	cbz	r1, 801392c <rclc_action_remove_used_goal_handle+0x24>
 801390c:	68c3      	ldr	r3, [r0, #12]
 801390e:	4299      	cmp	r1, r3
 8013910:	d00d      	beq.n	801392e <rclc_action_remove_used_goal_handle+0x26>
 8013912:	b12b      	cbz	r3, 8013920 <rclc_action_remove_used_goal_handle+0x18>
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	4291      	cmp	r1, r2
 8013918:	d003      	beq.n	8013922 <rclc_action_remove_used_goal_handle+0x1a>
 801391a:	4613      	mov	r3, r2
 801391c:	2b00      	cmp	r3, #0
 801391e:	d1f9      	bne.n	8013914 <rclc_action_remove_used_goal_handle+0xc>
 8013920:	4770      	bx	lr
 8013922:	680a      	ldr	r2, [r1, #0]
 8013924:	601a      	str	r2, [r3, #0]
 8013926:	6883      	ldr	r3, [r0, #8]
 8013928:	600b      	str	r3, [r1, #0]
 801392a:	6081      	str	r1, [r0, #8]
 801392c:	4770      	bx	lr
 801392e:	680b      	ldr	r3, [r1, #0]
 8013930:	60c3      	str	r3, [r0, #12]
 8013932:	e7f8      	b.n	8013926 <rclc_action_remove_used_goal_handle+0x1e>

08013934 <rclc_action_find_goal_handle_by_uuid>:
 8013934:	b538      	push	{r3, r4, r5, lr}
 8013936:	b180      	cbz	r0, 801395a <rclc_action_find_goal_handle_by_uuid+0x26>
 8013938:	460d      	mov	r5, r1
 801393a:	b181      	cbz	r1, 801395e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801393c:	68c4      	ldr	r4, [r0, #12]
 801393e:	b914      	cbnz	r4, 8013946 <rclc_action_find_goal_handle_by_uuid+0x12>
 8013940:	e009      	b.n	8013956 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013942:	6824      	ldr	r4, [r4, #0]
 8013944:	b13c      	cbz	r4, 8013956 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013946:	f104 0009 	add.w	r0, r4, #9
 801394a:	2210      	movs	r2, #16
 801394c:	4629      	mov	r1, r5
 801394e:	f003 f9b9 	bl	8016cc4 <memcmp>
 8013952:	2800      	cmp	r0, #0
 8013954:	d1f5      	bne.n	8013942 <rclc_action_find_goal_handle_by_uuid+0xe>
 8013956:	4620      	mov	r0, r4
 8013958:	bd38      	pop	{r3, r4, r5, pc}
 801395a:	4604      	mov	r4, r0
 801395c:	e7fb      	b.n	8013956 <rclc_action_find_goal_handle_by_uuid+0x22>
 801395e:	460c      	mov	r4, r1
 8013960:	e7f9      	b.n	8013956 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013962:	bf00      	nop

08013964 <rclc_action_find_first_handle_by_status>:
 8013964:	b140      	cbz	r0, 8013978 <rclc_action_find_first_handle_by_status+0x14>
 8013966:	68c0      	ldr	r0, [r0, #12]
 8013968:	b910      	cbnz	r0, 8013970 <rclc_action_find_first_handle_by_status+0xc>
 801396a:	e005      	b.n	8013978 <rclc_action_find_first_handle_by_status+0x14>
 801396c:	6800      	ldr	r0, [r0, #0]
 801396e:	b118      	cbz	r0, 8013978 <rclc_action_find_first_handle_by_status+0x14>
 8013970:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013974:	428b      	cmp	r3, r1
 8013976:	d1f9      	bne.n	801396c <rclc_action_find_first_handle_by_status+0x8>
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop

0801397c <rclc_action_find_first_terminated_handle>:
 801397c:	b140      	cbz	r0, 8013990 <rclc_action_find_first_terminated_handle+0x14>
 801397e:	68c0      	ldr	r0, [r0, #12]
 8013980:	b910      	cbnz	r0, 8013988 <rclc_action_find_first_terminated_handle+0xc>
 8013982:	e005      	b.n	8013990 <rclc_action_find_first_terminated_handle+0x14>
 8013984:	6800      	ldr	r0, [r0, #0]
 8013986:	b118      	cbz	r0, 8013990 <rclc_action_find_first_terminated_handle+0x14>
 8013988:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801398c:	2b03      	cmp	r3, #3
 801398e:	ddf9      	ble.n	8013984 <rclc_action_find_first_terminated_handle+0x8>
 8013990:	4770      	bx	lr
 8013992:	bf00      	nop

08013994 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013994:	b170      	cbz	r0, 80139b4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013996:	68c0      	ldr	r0, [r0, #12]
 8013998:	b160      	cbz	r0, 80139b4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801399a:	b410      	push	{r4}
 801399c:	e001      	b.n	80139a2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801399e:	6800      	ldr	r0, [r0, #0]
 80139a0:	b128      	cbz	r0, 80139ae <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80139a2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80139a6:	4299      	cmp	r1, r3
 80139a8:	bf08      	it	eq
 80139aa:	4294      	cmpeq	r4, r2
 80139ac:	d1f7      	bne.n	801399e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80139ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139b2:	4770      	bx	lr
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop

080139b8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80139b8:	b170      	cbz	r0, 80139d8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80139ba:	68c0      	ldr	r0, [r0, #12]
 80139bc:	b160      	cbz	r0, 80139d8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80139be:	b410      	push	{r4}
 80139c0:	e001      	b.n	80139c6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80139c2:	6800      	ldr	r0, [r0, #0]
 80139c4:	b128      	cbz	r0, 80139d2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80139c6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80139ca:	4299      	cmp	r1, r3
 80139cc:	bf08      	it	eq
 80139ce:	4294      	cmpeq	r4, r2
 80139d0:	d1f7      	bne.n	80139c2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80139d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139d6:	4770      	bx	lr
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop

080139dc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80139dc:	b170      	cbz	r0, 80139fc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80139de:	68c0      	ldr	r0, [r0, #12]
 80139e0:	b160      	cbz	r0, 80139fc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80139e2:	b410      	push	{r4}
 80139e4:	e001      	b.n	80139ea <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80139e6:	6800      	ldr	r0, [r0, #0]
 80139e8:	b128      	cbz	r0, 80139f6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80139ea:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80139ee:	4299      	cmp	r1, r3
 80139f0:	bf08      	it	eq
 80139f2:	4294      	cmpeq	r4, r2
 80139f4:	d1f7      	bne.n	80139e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80139f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139fa:	4770      	bx	lr
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop

08013a00 <rclc_action_find_first_handle_with_goal_response>:
 8013a00:	b140      	cbz	r0, 8013a14 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a02:	68c0      	ldr	r0, [r0, #12]
 8013a04:	b910      	cbnz	r0, 8013a0c <rclc_action_find_first_handle_with_goal_response+0xc>
 8013a06:	e005      	b.n	8013a14 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a08:	6800      	ldr	r0, [r0, #0]
 8013a0a:	b118      	cbz	r0, 8013a14 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a0c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d0f9      	beq.n	8013a08 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013a14:	4770      	bx	lr
 8013a16:	bf00      	nop

08013a18 <rclc_action_find_first_handle_with_result_response>:
 8013a18:	b140      	cbz	r0, 8013a2c <rclc_action_find_first_handle_with_result_response+0x14>
 8013a1a:	68c0      	ldr	r0, [r0, #12]
 8013a1c:	b910      	cbnz	r0, 8013a24 <rclc_action_find_first_handle_with_result_response+0xc>
 8013a1e:	e005      	b.n	8013a2c <rclc_action_find_first_handle_with_result_response+0x14>
 8013a20:	6800      	ldr	r0, [r0, #0]
 8013a22:	b118      	cbz	r0, 8013a2c <rclc_action_find_first_handle_with_result_response+0x14>
 8013a24:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d0f9      	beq.n	8013a20 <rclc_action_find_first_handle_with_result_response+0x8>
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop

08013a30 <rclc_action_server_response_goal_request>:
 8013a30:	b198      	cbz	r0, 8013a5a <rclc_action_server_response_goal_request+0x2a>
 8013a32:	b510      	push	{r4, lr}
 8013a34:	6844      	ldr	r4, [r0, #4]
 8013a36:	b086      	sub	sp, #24
 8013a38:	2200      	movs	r2, #0
 8013a3a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013a3e:	460b      	mov	r3, r1
 8013a40:	9205      	str	r2, [sp, #20]
 8013a42:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8013a46:	aa03      	add	r2, sp, #12
 8013a48:	f104 0010 	add.w	r0, r4, #16
 8013a4c:	f88d 300c 	strb.w	r3, [sp, #12]
 8013a50:	f7ff fd4a 	bl	80134e8 <rcl_action_send_goal_response>
 8013a54:	b918      	cbnz	r0, 8013a5e <rclc_action_server_response_goal_request+0x2e>
 8013a56:	b006      	add	sp, #24
 8013a58:	bd10      	pop	{r4, pc}
 8013a5a:	200b      	movs	r0, #11
 8013a5c:	4770      	bx	lr
 8013a5e:	9001      	str	r0, [sp, #4]
 8013a60:	f7f7 fbfe 	bl	800b260 <rcutils_reset_error>
 8013a64:	9801      	ldr	r0, [sp, #4]
 8013a66:	b006      	add	sp, #24
 8013a68:	bd10      	pop	{r4, pc}
 8013a6a:	bf00      	nop
 8013a6c:	0000      	movs	r0, r0
	...

08013a70 <rclc_action_server_goal_cancel_accept>:
 8013a70:	b310      	cbz	r0, 8013ab8 <rclc_action_server_goal_cancel_accept+0x48>
 8013a72:	b510      	push	{r4, lr}
 8013a74:	b090      	sub	sp, #64	@ 0x40
 8013a76:	4604      	mov	r4, r0
 8013a78:	a806      	add	r0, sp, #24
 8013a7a:	f7ff fefd 	bl	8013878 <rcl_action_get_zero_initialized_cancel_response>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013a84:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013a88:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013a8c:	f88d 3018 	strb.w	r3, [sp, #24]
 8013a90:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013a94:	f8cd d01c 	str.w	sp, [sp, #28]
 8013a98:	46ec      	mov	ip, sp
 8013a9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a9e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013ac0 <rclc_action_server_goal_cancel_accept+0x50>
 8013aa2:	6860      	ldr	r0, [r4, #4]
 8013aa4:	aa06      	add	r2, sp, #24
 8013aa6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8013aaa:	3010      	adds	r0, #16
 8013aac:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013ab0:	f7ff fdd2 	bl	8013658 <rcl_action_send_cancel_response>
 8013ab4:	b010      	add	sp, #64	@ 0x40
 8013ab6:	bd10      	pop	{r4, pc}
 8013ab8:	200b      	movs	r0, #11
 8013aba:	4770      	bx	lr
 8013abc:	f3af 8000 	nop.w
 8013ac0:	00000001 	.word	0x00000001
 8013ac4:	00000001 	.word	0x00000001

08013ac8 <rclc_action_server_goal_cancel_reject>:
 8013ac8:	b082      	sub	sp, #8
 8013aca:	b530      	push	{r4, r5, lr}
 8013acc:	b08b      	sub	sp, #44	@ 0x2c
 8013ace:	ac0e      	add	r4, sp, #56	@ 0x38
 8013ad0:	e884 000c 	stmia.w	r4, {r2, r3}
 8013ad4:	b188      	cbz	r0, 8013afa <rclc_action_server_goal_cancel_reject+0x32>
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	a801      	add	r0, sp, #4
 8013ada:	460d      	mov	r5, r1
 8013adc:	f7ff fecc 	bl	8013878 <rcl_action_get_zero_initialized_cancel_response>
 8013ae0:	aa01      	add	r2, sp, #4
 8013ae2:	a90e      	add	r1, sp, #56	@ 0x38
 8013ae4:	f104 0010 	add.w	r0, r4, #16
 8013ae8:	f88d 5004 	strb.w	r5, [sp, #4]
 8013aec:	f7ff fdb4 	bl	8013658 <rcl_action_send_cancel_response>
 8013af0:	b00b      	add	sp, #44	@ 0x2c
 8013af2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013af6:	b002      	add	sp, #8
 8013af8:	4770      	bx	lr
 8013afa:	200b      	movs	r0, #11
 8013afc:	b00b      	add	sp, #44	@ 0x2c
 8013afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b02:	b002      	add	sp, #8
 8013b04:	4770      	bx	lr
 8013b06:	bf00      	nop

08013b08 <__atomic_load_8>:
 8013b08:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013b0c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013b10:	4a15      	ldr	r2, [pc, #84]	@ (8013b68 <__atomic_load_8+0x60>)
 8013b12:	4b16      	ldr	r3, [pc, #88]	@ (8013b6c <__atomic_load_8+0x64>)
 8013b14:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013b18:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013b1c:	fb02 f101 	mul.w	r1, r2, r1
 8013b20:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013b24:	fba3 2301 	umull	r2, r3, r3, r1
 8013b28:	091b      	lsrs	r3, r3, #4
 8013b2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013b2e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013b32:	b4d0      	push	{r4, r6, r7}
 8013b34:	4c0e      	ldr	r4, [pc, #56]	@ (8013b70 <__atomic_load_8+0x68>)
 8013b36:	1ac9      	subs	r1, r1, r3
 8013b38:	1862      	adds	r2, r4, r1
 8013b3a:	f04f 0c01 	mov.w	ip, #1
 8013b3e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013b42:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013b46:	2e00      	cmp	r6, #0
 8013b48:	d1f9      	bne.n	8013b3e <__atomic_load_8+0x36>
 8013b4a:	f3bf 8f5b 	dmb	ish
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d1f4      	bne.n	8013b3e <__atomic_load_8+0x36>
 8013b54:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013b58:	f3bf 8f5b 	dmb	ish
 8013b5c:	5463      	strb	r3, [r4, r1]
 8013b5e:	4630      	mov	r0, r6
 8013b60:	4639      	mov	r1, r7
 8013b62:	bcd0      	pop	{r4, r6, r7}
 8013b64:	4770      	bx	lr
 8013b66:	bf00      	nop
 8013b68:	27d4eb2d 	.word	0x27d4eb2d
 8013b6c:	b21642c9 	.word	0xb21642c9
 8013b70:	2000ca94 	.word	0x2000ca94

08013b74 <__atomic_store_8>:
 8013b74:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013b78:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013b7c:	b570      	push	{r4, r5, r6, lr}
 8013b7e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013b82:	4c14      	ldr	r4, [pc, #80]	@ (8013bd4 <__atomic_store_8+0x60>)
 8013b84:	4d14      	ldr	r5, [pc, #80]	@ (8013bd8 <__atomic_store_8+0x64>)
 8013b86:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013b8a:	fb04 f101 	mul.w	r1, r4, r1
 8013b8e:	4c13      	ldr	r4, [pc, #76]	@ (8013bdc <__atomic_store_8+0x68>)
 8013b90:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013b94:	fba4 4e01 	umull	r4, lr, r4, r1
 8013b98:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8013b9c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013ba0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013ba4:	eba1 0e0e 	sub.w	lr, r1, lr
 8013ba8:	eb05 0c0e 	add.w	ip, r5, lr
 8013bac:	f04f 0401 	mov.w	r4, #1
 8013bb0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013bb4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013bb8:	2e00      	cmp	r6, #0
 8013bba:	d1f9      	bne.n	8013bb0 <__atomic_store_8+0x3c>
 8013bbc:	f3bf 8f5b 	dmb	ish
 8013bc0:	b2c9      	uxtb	r1, r1
 8013bc2:	2900      	cmp	r1, #0
 8013bc4:	d1f4      	bne.n	8013bb0 <__atomic_store_8+0x3c>
 8013bc6:	e9c0 2300 	strd	r2, r3, [r0]
 8013bca:	f3bf 8f5b 	dmb	ish
 8013bce:	f805 100e 	strb.w	r1, [r5, lr]
 8013bd2:	bd70      	pop	{r4, r5, r6, pc}
 8013bd4:	27d4eb2d 	.word	0x27d4eb2d
 8013bd8:	2000ca94 	.word	0x2000ca94
 8013bdc:	b21642c9 	.word	0xb21642c9

08013be0 <__atomic_exchange_8>:
 8013be0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8013be4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8013be8:	4916      	ldr	r1, [pc, #88]	@ (8013c44 <__atomic_exchange_8+0x64>)
 8013bea:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8013bee:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8013bf2:	fb01 fc0c 	mul.w	ip, r1, ip
 8013bf6:	4914      	ldr	r1, [pc, #80]	@ (8013c48 <__atomic_exchange_8+0x68>)
 8013bf8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8013bfc:	b570      	push	{r4, r5, r6, lr}
 8013bfe:	4605      	mov	r5, r0
 8013c00:	fba1 010c 	umull	r0, r1, r1, ip
 8013c04:	0909      	lsrs	r1, r1, #4
 8013c06:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013c0a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8013c4c <__atomic_exchange_8+0x6c>)
 8013c10:	ebac 0c01 	sub.w	ip, ip, r1
 8013c14:	eb06 010c 	add.w	r1, r6, ip
 8013c18:	f04f 0e01 	mov.w	lr, #1
 8013c1c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013c20:	e8c1 ef40 	strexb	r0, lr, [r1]
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d1f9      	bne.n	8013c1c <__atomic_exchange_8+0x3c>
 8013c28:	f3bf 8f5b 	dmb	ish
 8013c2c:	b2e4      	uxtb	r4, r4
 8013c2e:	2c00      	cmp	r4, #0
 8013c30:	d1f4      	bne.n	8013c1c <__atomic_exchange_8+0x3c>
 8013c32:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013c36:	e9c5 2300 	strd	r2, r3, [r5]
 8013c3a:	f3bf 8f5b 	dmb	ish
 8013c3e:	f806 400c 	strb.w	r4, [r6, ip]
 8013c42:	bd70      	pop	{r4, r5, r6, pc}
 8013c44:	27d4eb2d 	.word	0x27d4eb2d
 8013c48:	b21642c9 	.word	0xb21642c9
 8013c4c:	2000ca94 	.word	0x2000ca94

08013c50 <rcutils_get_env>:
 8013c50:	b168      	cbz	r0, 8013c6e <rcutils_get_env+0x1e>
 8013c52:	b510      	push	{r4, lr}
 8013c54:	460c      	mov	r4, r1
 8013c56:	b129      	cbz	r1, 8013c64 <rcutils_get_env+0x14>
 8013c58:	f002 fc90 	bl	801657c <getenv>
 8013c5c:	b120      	cbz	r0, 8013c68 <rcutils_get_env+0x18>
 8013c5e:	6020      	str	r0, [r4, #0]
 8013c60:	2000      	movs	r0, #0
 8013c62:	bd10      	pop	{r4, pc}
 8013c64:	4803      	ldr	r0, [pc, #12]	@ (8013c74 <rcutils_get_env+0x24>)
 8013c66:	bd10      	pop	{r4, pc}
 8013c68:	4b03      	ldr	r3, [pc, #12]	@ (8013c78 <rcutils_get_env+0x28>)
 8013c6a:	6023      	str	r3, [r4, #0]
 8013c6c:	bd10      	pop	{r4, pc}
 8013c6e:	4803      	ldr	r0, [pc, #12]	@ (8013c7c <rcutils_get_env+0x2c>)
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
 8013c74:	0801857c 	.word	0x0801857c
 8013c78:	080186a0 	.word	0x080186a0
 8013c7c:	08018560 	.word	0x08018560

08013c80 <rcutils_is_directory>:
 8013c80:	2000      	movs	r0, #0
 8013c82:	4770      	bx	lr

08013c84 <rcutils_join_path>:
 8013c84:	b082      	sub	sp, #8
 8013c86:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013c8a:	2000      	movs	r0, #0
 8013c8c:	b002      	add	sp, #8
 8013c8e:	4770      	bx	lr

08013c90 <rcutils_to_native_path>:
 8013c90:	b084      	sub	sp, #16
 8013c92:	a801      	add	r0, sp, #4
 8013c94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013c98:	b004      	add	sp, #16
 8013c9a:	2000      	movs	r0, #0
 8013c9c:	4770      	bx	lr
 8013c9e:	bf00      	nop

08013ca0 <rcutils_format_string_limit>:
 8013ca0:	b40f      	push	{r0, r1, r2, r3}
 8013ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ca4:	b083      	sub	sp, #12
 8013ca6:	ac08      	add	r4, sp, #32
 8013ca8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013cae:	b34e      	cbz	r6, 8013d04 <rcutils_format_string_limit+0x64>
 8013cb0:	a808      	add	r0, sp, #32
 8013cb2:	f7f7 faaf 	bl	800b214 <rcutils_allocator_is_valid>
 8013cb6:	b328      	cbz	r0, 8013d04 <rcutils_format_string_limit+0x64>
 8013cb8:	2100      	movs	r1, #0
 8013cba:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013cbc:	4632      	mov	r2, r6
 8013cbe:	4608      	mov	r0, r1
 8013cc0:	e9cd 3300 	strd	r3, r3, [sp]
 8013cc4:	f000 f8f4 	bl	8013eb0 <rcutils_vsnprintf>
 8013cc8:	1c43      	adds	r3, r0, #1
 8013cca:	4605      	mov	r5, r0
 8013ccc:	d01a      	beq.n	8013d04 <rcutils_format_string_limit+0x64>
 8013cce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cd0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013cd2:	1c47      	adds	r7, r0, #1
 8013cd4:	429f      	cmp	r7, r3
 8013cd6:	bf84      	itt	hi
 8013cd8:	461f      	movhi	r7, r3
 8013cda:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8013cde:	4638      	mov	r0, r7
 8013ce0:	9b08      	ldr	r3, [sp, #32]
 8013ce2:	4798      	blx	r3
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	b168      	cbz	r0, 8013d04 <rcutils_format_string_limit+0x64>
 8013ce8:	9b01      	ldr	r3, [sp, #4]
 8013cea:	4632      	mov	r2, r6
 8013cec:	4639      	mov	r1, r7
 8013cee:	f000 f8df 	bl	8013eb0 <rcutils_vsnprintf>
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	db02      	blt.n	8013cfc <rcutils_format_string_limit+0x5c>
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	5563      	strb	r3, [r4, r5]
 8013cfa:	e004      	b.n	8013d06 <rcutils_format_string_limit+0x66>
 8013cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cfe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d00:	4620      	mov	r0, r4
 8013d02:	4798      	blx	r3
 8013d04:	2400      	movs	r4, #0
 8013d06:	4620      	mov	r0, r4
 8013d08:	b003      	add	sp, #12
 8013d0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013d0e:	b004      	add	sp, #16
 8013d10:	4770      	bx	lr
 8013d12:	bf00      	nop

08013d14 <rcutils_repl_str>:
 8013d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d18:	ed2d 8b02 	vpush	{d8}
 8013d1c:	b087      	sub	sp, #28
 8013d1e:	4680      	mov	r8, r0
 8013d20:	4608      	mov	r0, r1
 8013d22:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d26:	ee08 2a10 	vmov	s16, r2
 8013d2a:	468a      	mov	sl, r1
 8013d2c:	4699      	mov	r9, r3
 8013d2e:	f7ec fa81 	bl	8000234 <strlen>
 8013d32:	2600      	movs	r6, #0
 8013d34:	4647      	mov	r7, r8
 8013d36:	9002      	str	r0, [sp, #8]
 8013d38:	46b3      	mov	fp, r6
 8013d3a:	2510      	movs	r5, #16
 8013d3c:	46b0      	mov	r8, r6
 8013d3e:	e01d      	b.n	8013d7c <rcutils_repl_str+0x68>
 8013d40:	f10b 0b01 	add.w	fp, fp, #1
 8013d44:	455e      	cmp	r6, fp
 8013d46:	d211      	bcs.n	8013d6c <rcutils_repl_str+0x58>
 8013d48:	442e      	add	r6, r5
 8013d4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013d4e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013d52:	00b1      	lsls	r1, r6, #2
 8013d54:	4798      	blx	r3
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f000 8088 	beq.w	8013e6c <rcutils_repl_str+0x158>
 8013d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d60:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8013d64:	4680      	mov	r8, r0
 8013d66:	bf28      	it	cs
 8013d68:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013d6c:	9a01      	ldr	r2, [sp, #4]
 8013d6e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8013d72:	1aa2      	subs	r2, r4, r2
 8013d74:	f843 2c04 	str.w	r2, [r3, #-4]
 8013d78:	9b02      	ldr	r3, [sp, #8]
 8013d7a:	18e7      	adds	r7, r4, r3
 8013d7c:	4651      	mov	r1, sl
 8013d7e:	4638      	mov	r0, r7
 8013d80:	f002 fff1 	bl	8016d66 <strstr>
 8013d84:	4604      	mov	r4, r0
 8013d86:	4640      	mov	r0, r8
 8013d88:	2c00      	cmp	r4, #0
 8013d8a:	d1d9      	bne.n	8013d40 <rcutils_repl_str+0x2c>
 8013d8c:	46b8      	mov	r8, r7
 8013d8e:	4607      	mov	r7, r0
 8013d90:	4640      	mov	r0, r8
 8013d92:	f7ec fa4f 	bl	8000234 <strlen>
 8013d96:	9b01      	ldr	r3, [sp, #4]
 8013d98:	eba8 0303 	sub.w	r3, r8, r3
 8013d9c:	181c      	adds	r4, r3, r0
 8013d9e:	9404      	str	r4, [sp, #16]
 8013da0:	f1bb 0f00 	cmp.w	fp, #0
 8013da4:	d04a      	beq.n	8013e3c <rcutils_repl_str+0x128>
 8013da6:	ee18 0a10 	vmov	r0, s16
 8013daa:	f7ec fa43 	bl	8000234 <strlen>
 8013dae:	9b02      	ldr	r3, [sp, #8]
 8013db0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013db4:	1ac3      	subs	r3, r0, r3
 8013db6:	fb0b 4303 	mla	r3, fp, r3, r4
 8013dba:	461a      	mov	r2, r3
 8013dbc:	9305      	str	r3, [sp, #20]
 8013dbe:	4606      	mov	r6, r0
 8013dc0:	f8d9 3000 	ldr.w	r3, [r9]
 8013dc4:	1c50      	adds	r0, r2, #1
 8013dc6:	4798      	blx	r3
 8013dc8:	9003      	str	r0, [sp, #12]
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d04f      	beq.n	8013e6e <rcutils_repl_str+0x15a>
 8013dce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013dd2:	683a      	ldr	r2, [r7, #0]
 8013dd4:	4641      	mov	r1, r8
 8013dd6:	f003 f868 	bl	8016eaa <memcpy>
 8013dda:	683d      	ldr	r5, [r7, #0]
 8013ddc:	9b03      	ldr	r3, [sp, #12]
 8013dde:	9701      	str	r7, [sp, #4]
 8013de0:	46ba      	mov	sl, r7
 8013de2:	441d      	add	r5, r3
 8013de4:	9f02      	ldr	r7, [sp, #8]
 8013de6:	f8cd 9008 	str.w	r9, [sp, #8]
 8013dea:	2401      	movs	r4, #1
 8013dec:	46d1      	mov	r9, sl
 8013dee:	ee18 aa10 	vmov	sl, s16
 8013df2:	e00a      	b.n	8013e0a <rcutils_repl_str+0xf6>
 8013df4:	f8d9 5000 	ldr.w	r5, [r9]
 8013df8:	1aaa      	subs	r2, r5, r2
 8013dfa:	1885      	adds	r5, r0, r2
 8013dfc:	f003 f855 	bl	8016eaa <memcpy>
 8013e00:	45a3      	cmp	fp, r4
 8013e02:	f104 0201 	add.w	r2, r4, #1
 8013e06:	d935      	bls.n	8013e74 <rcutils_repl_str+0x160>
 8013e08:	4614      	mov	r4, r2
 8013e0a:	4632      	mov	r2, r6
 8013e0c:	4651      	mov	r1, sl
 8013e0e:	4628      	mov	r0, r5
 8013e10:	f003 f84b 	bl	8016eaa <memcpy>
 8013e14:	f859 2b04 	ldr.w	r2, [r9], #4
 8013e18:	45a3      	cmp	fp, r4
 8013e1a:	443a      	add	r2, r7
 8013e1c:	eb05 0006 	add.w	r0, r5, r6
 8013e20:	eb08 0102 	add.w	r1, r8, r2
 8013e24:	d1e6      	bne.n	8013df4 <rcutils_repl_str+0xe0>
 8013e26:	9b04      	ldr	r3, [sp, #16]
 8013e28:	1a9a      	subs	r2, r3, r2
 8013e2a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013e2e:	f003 f83c 	bl	8016eaa <memcpy>
 8013e32:	9a03      	ldr	r2, [sp, #12]
 8013e34:	9905      	ldr	r1, [sp, #20]
 8013e36:	2300      	movs	r3, #0
 8013e38:	5453      	strb	r3, [r2, r1]
 8013e3a:	e00b      	b.n	8013e54 <rcutils_repl_str+0x140>
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	f8d9 3000 	ldr.w	r3, [r9]
 8013e42:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013e46:	3001      	adds	r0, #1
 8013e48:	4798      	blx	r3
 8013e4a:	9003      	str	r0, [sp, #12]
 8013e4c:	b110      	cbz	r0, 8013e54 <rcutils_repl_str+0x140>
 8013e4e:	9901      	ldr	r1, [sp, #4]
 8013e50:	f003 f823 	bl	8016e9a <strcpy>
 8013e54:	4638      	mov	r0, r7
 8013e56:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013e5a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013e5e:	4798      	blx	r3
 8013e60:	9803      	ldr	r0, [sp, #12]
 8013e62:	b007      	add	sp, #28
 8013e64:	ecbd 8b02 	vpop	{d8}
 8013e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6c:	4647      	mov	r7, r8
 8013e6e:	2300      	movs	r3, #0
 8013e70:	9303      	str	r3, [sp, #12]
 8013e72:	e7ef      	b.n	8013e54 <rcutils_repl_str+0x140>
 8013e74:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013e78:	e7db      	b.n	8013e32 <rcutils_repl_str+0x11e>
 8013e7a:	bf00      	nop

08013e7c <rcutils_snprintf>:
 8013e7c:	b40c      	push	{r2, r3}
 8013e7e:	b530      	push	{r4, r5, lr}
 8013e80:	b083      	sub	sp, #12
 8013e82:	ab06      	add	r3, sp, #24
 8013e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e88:	9301      	str	r3, [sp, #4]
 8013e8a:	b152      	cbz	r2, 8013ea2 <rcutils_snprintf+0x26>
 8013e8c:	b138      	cbz	r0, 8013e9e <rcutils_snprintf+0x22>
 8013e8e:	b141      	cbz	r1, 8013ea2 <rcutils_snprintf+0x26>
 8013e90:	f002 ff0a 	bl	8016ca8 <vsniprintf>
 8013e94:	b003      	add	sp, #12
 8013e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e9a:	b002      	add	sp, #8
 8013e9c:	4770      	bx	lr
 8013e9e:	2900      	cmp	r1, #0
 8013ea0:	d0f6      	beq.n	8013e90 <rcutils_snprintf+0x14>
 8013ea2:	f002 ffcd 	bl	8016e40 <__errno>
 8013ea6:	2316      	movs	r3, #22
 8013ea8:	6003      	str	r3, [r0, #0]
 8013eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013eae:	e7f1      	b.n	8013e94 <rcutils_snprintf+0x18>

08013eb0 <rcutils_vsnprintf>:
 8013eb0:	b570      	push	{r4, r5, r6, lr}
 8013eb2:	b13a      	cbz	r2, 8013ec4 <rcutils_vsnprintf+0x14>
 8013eb4:	b120      	cbz	r0, 8013ec0 <rcutils_vsnprintf+0x10>
 8013eb6:	b129      	cbz	r1, 8013ec4 <rcutils_vsnprintf+0x14>
 8013eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ebc:	f002 bef4 	b.w	8016ca8 <vsniprintf>
 8013ec0:	2900      	cmp	r1, #0
 8013ec2:	d0f9      	beq.n	8013eb8 <rcutils_vsnprintf+0x8>
 8013ec4:	f002 ffbc 	bl	8016e40 <__errno>
 8013ec8:	2316      	movs	r3, #22
 8013eca:	6003      	str	r3, [r0, #0]
 8013ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ed0:	bd70      	pop	{r4, r5, r6, pc}
 8013ed2:	bf00      	nop

08013ed4 <rcutils_strdup>:
 8013ed4:	b084      	sub	sp, #16
 8013ed6:	b570      	push	{r4, r5, r6, lr}
 8013ed8:	b082      	sub	sp, #8
 8013eda:	ac07      	add	r4, sp, #28
 8013edc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013ee0:	4605      	mov	r5, r0
 8013ee2:	b1b0      	cbz	r0, 8013f12 <rcutils_strdup+0x3e>
 8013ee4:	f7ec f9a6 	bl	8000234 <strlen>
 8013ee8:	1c42      	adds	r2, r0, #1
 8013eea:	9b07      	ldr	r3, [sp, #28]
 8013eec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013eee:	9201      	str	r2, [sp, #4]
 8013ef0:	4606      	mov	r6, r0
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	4798      	blx	r3
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	b128      	cbz	r0, 8013f06 <rcutils_strdup+0x32>
 8013efa:	9a01      	ldr	r2, [sp, #4]
 8013efc:	4629      	mov	r1, r5
 8013efe:	f002 ffd4 	bl	8016eaa <memcpy>
 8013f02:	2300      	movs	r3, #0
 8013f04:	55a3      	strb	r3, [r4, r6]
 8013f06:	4620      	mov	r0, r4
 8013f08:	b002      	add	sp, #8
 8013f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f0e:	b004      	add	sp, #16
 8013f10:	4770      	bx	lr
 8013f12:	4604      	mov	r4, r0
 8013f14:	e7f7      	b.n	8013f06 <rcutils_strdup+0x32>
 8013f16:	bf00      	nop

08013f18 <rcutils_strndup>:
 8013f18:	b082      	sub	sp, #8
 8013f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f1c:	ac06      	add	r4, sp, #24
 8013f1e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013f22:	4605      	mov	r5, r0
 8013f24:	b188      	cbz	r0, 8013f4a <rcutils_strndup+0x32>
 8013f26:	1c4f      	adds	r7, r1, #1
 8013f28:	460e      	mov	r6, r1
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013f2e:	4790      	blx	r2
 8013f30:	4604      	mov	r4, r0
 8013f32:	b128      	cbz	r0, 8013f40 <rcutils_strndup+0x28>
 8013f34:	463a      	mov	r2, r7
 8013f36:	4629      	mov	r1, r5
 8013f38:	f002 ffb7 	bl	8016eaa <memcpy>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	55a3      	strb	r3, [r4, r6]
 8013f40:	4620      	mov	r0, r4
 8013f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013f46:	b002      	add	sp, #8
 8013f48:	4770      	bx	lr
 8013f4a:	4604      	mov	r4, r0
 8013f4c:	e7f8      	b.n	8013f40 <rcutils_strndup+0x28>
 8013f4e:	bf00      	nop

08013f50 <rcutils_get_zero_initialized_string_map>:
 8013f50:	4b01      	ldr	r3, [pc, #4]	@ (8013f58 <rcutils_get_zero_initialized_string_map+0x8>)
 8013f52:	2000      	movs	r0, #0
 8013f54:	6018      	str	r0, [r3, #0]
 8013f56:	4770      	bx	lr
 8013f58:	2000caac 	.word	0x2000caac

08013f5c <rcutils_string_map_reserve>:
 8013f5c:	2800      	cmp	r0, #0
 8013f5e:	d05f      	beq.n	8014020 <rcutils_string_map_reserve+0xc4>
 8013f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f64:	460c      	mov	r4, r1
 8013f66:	6801      	ldr	r1, [r0, #0]
 8013f68:	b082      	sub	sp, #8
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	b129      	cbz	r1, 8013f7a <rcutils_string_map_reserve+0x1e>
 8013f6e:	68cb      	ldr	r3, [r1, #12]
 8013f70:	42a3      	cmp	r3, r4
 8013f72:	d906      	bls.n	8013f82 <rcutils_string_map_reserve+0x26>
 8013f74:	461c      	mov	r4, r3
 8013f76:	2900      	cmp	r1, #0
 8013f78:	d1f9      	bne.n	8013f6e <rcutils_string_map_reserve+0x12>
 8013f7a:	201f      	movs	r0, #31
 8013f7c:	b002      	add	sp, #8
 8013f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f82:	688b      	ldr	r3, [r1, #8]
 8013f84:	42a3      	cmp	r3, r4
 8013f86:	d047      	beq.n	8014018 <rcutils_string_map_reserve+0xbc>
 8013f88:	6a0e      	ldr	r6, [r1, #32]
 8013f8a:	2c00      	cmp	r4, #0
 8013f8c:	d034      	beq.n	8013ff8 <rcutils_string_map_reserve+0x9c>
 8013f8e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8013f92:	d243      	bcs.n	801401c <rcutils_string_map_reserve+0xc0>
 8013f94:	00a7      	lsls	r7, r4, #2
 8013f96:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013f9a:	6808      	ldr	r0, [r1, #0]
 8013f9c:	4632      	mov	r2, r6
 8013f9e:	4639      	mov	r1, r7
 8013fa0:	47c0      	blx	r8
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	d03a      	beq.n	801401c <rcutils_string_map_reserve+0xc0>
 8013fa6:	682b      	ldr	r3, [r5, #0]
 8013fa8:	4632      	mov	r2, r6
 8013faa:	6018      	str	r0, [r3, #0]
 8013fac:	4639      	mov	r1, r7
 8013fae:	6858      	ldr	r0, [r3, #4]
 8013fb0:	47c0      	blx	r8
 8013fb2:	2800      	cmp	r0, #0
 8013fb4:	d032      	beq.n	801401c <rcutils_string_map_reserve+0xc0>
 8013fb6:	682d      	ldr	r5, [r5, #0]
 8013fb8:	68ab      	ldr	r3, [r5, #8]
 8013fba:	6068      	str	r0, [r5, #4]
 8013fbc:	42a3      	cmp	r3, r4
 8013fbe:	d226      	bcs.n	801400e <rcutils_string_map_reserve+0xb2>
 8013fc0:	682a      	ldr	r2, [r5, #0]
 8013fc2:	eb00 0c07 	add.w	ip, r0, r7
 8013fc6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8013fca:	45e6      	cmp	lr, ip
 8013fcc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8013fd0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013fd4:	d203      	bcs.n	8013fde <rcutils_string_map_reserve+0x82>
 8013fd6:	eb02 0c07 	add.w	ip, r2, r7
 8013fda:	4566      	cmp	r6, ip
 8013fdc:	d322      	bcc.n	8014024 <rcutils_string_map_reserve+0xc8>
 8013fde:	1ae3      	subs	r3, r4, r3
 8013fe0:	009a      	lsls	r2, r3, #2
 8013fe2:	4670      	mov	r0, lr
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	9201      	str	r2, [sp, #4]
 8013fe8:	f002 fe96 	bl	8016d18 <memset>
 8013fec:	9a01      	ldr	r2, [sp, #4]
 8013fee:	2100      	movs	r1, #0
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f002 fe91 	bl	8016d18 <memset>
 8013ff6:	e00a      	b.n	801400e <rcutils_string_map_reserve+0xb2>
 8013ff8:	694f      	ldr	r7, [r1, #20]
 8013ffa:	6808      	ldr	r0, [r1, #0]
 8013ffc:	4631      	mov	r1, r6
 8013ffe:	47b8      	blx	r7
 8014000:	682b      	ldr	r3, [r5, #0]
 8014002:	4631      	mov	r1, r6
 8014004:	6858      	ldr	r0, [r3, #4]
 8014006:	601c      	str	r4, [r3, #0]
 8014008:	47b8      	blx	r7
 801400a:	682d      	ldr	r5, [r5, #0]
 801400c:	606c      	str	r4, [r5, #4]
 801400e:	2000      	movs	r0, #0
 8014010:	60ac      	str	r4, [r5, #8]
 8014012:	b002      	add	sp, #8
 8014014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014018:	2000      	movs	r0, #0
 801401a:	e7af      	b.n	8013f7c <rcutils_string_map_reserve+0x20>
 801401c:	200a      	movs	r0, #10
 801401e:	e7ad      	b.n	8013f7c <rcutils_string_map_reserve+0x20>
 8014020:	200b      	movs	r0, #11
 8014022:	4770      	bx	lr
 8014024:	1f0b      	subs	r3, r1, #4
 8014026:	4418      	add	r0, r3
 8014028:	4413      	add	r3, r2
 801402a:	3a04      	subs	r2, #4
 801402c:	4417      	add	r7, r2
 801402e:	2200      	movs	r2, #0
 8014030:	f843 2f04 	str.w	r2, [r3, #4]!
 8014034:	42bb      	cmp	r3, r7
 8014036:	f840 2f04 	str.w	r2, [r0, #4]!
 801403a:	d1f9      	bne.n	8014030 <rcutils_string_map_reserve+0xd4>
 801403c:	e7e7      	b.n	801400e <rcutils_string_map_reserve+0xb2>
 801403e:	bf00      	nop

08014040 <rcutils_string_map_init>:
 8014040:	b082      	sub	sp, #8
 8014042:	b570      	push	{r4, r5, r6, lr}
 8014044:	ac04      	add	r4, sp, #16
 8014046:	e884 000c 	stmia.w	r4, {r2, r3}
 801404a:	b380      	cbz	r0, 80140ae <rcutils_string_map_init+0x6e>
 801404c:	6806      	ldr	r6, [r0, #0]
 801404e:	4604      	mov	r4, r0
 8014050:	b12e      	cbz	r6, 801405e <rcutils_string_map_init+0x1e>
 8014052:	251e      	movs	r5, #30
 8014054:	4628      	mov	r0, r5
 8014056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801405a:	b002      	add	sp, #8
 801405c:	4770      	bx	lr
 801405e:	a804      	add	r0, sp, #16
 8014060:	460d      	mov	r5, r1
 8014062:	f7f7 f8d7 	bl	800b214 <rcutils_allocator_is_valid>
 8014066:	b310      	cbz	r0, 80140ae <rcutils_string_map_init+0x6e>
 8014068:	9b04      	ldr	r3, [sp, #16]
 801406a:	9908      	ldr	r1, [sp, #32]
 801406c:	2024      	movs	r0, #36	@ 0x24
 801406e:	4798      	blx	r3
 8014070:	6020      	str	r0, [r4, #0]
 8014072:	b310      	cbz	r0, 80140ba <rcutils_string_map_init+0x7a>
 8014074:	f10d 0e10 	add.w	lr, sp, #16
 8014078:	e9c0 6600 	strd	r6, r6, [r0]
 801407c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014080:	f100 0c10 	add.w	ip, r0, #16
 8014084:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014088:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801408c:	f8de 3000 	ldr.w	r3, [lr]
 8014090:	f8cc 3000 	str.w	r3, [ip]
 8014094:	4629      	mov	r1, r5
 8014096:	4620      	mov	r0, r4
 8014098:	f7ff ff60 	bl	8013f5c <rcutils_string_map_reserve>
 801409c:	4605      	mov	r5, r0
 801409e:	2800      	cmp	r0, #0
 80140a0:	d0d8      	beq.n	8014054 <rcutils_string_map_init+0x14>
 80140a2:	9b05      	ldr	r3, [sp, #20]
 80140a4:	9908      	ldr	r1, [sp, #32]
 80140a6:	6820      	ldr	r0, [r4, #0]
 80140a8:	4798      	blx	r3
 80140aa:	6026      	str	r6, [r4, #0]
 80140ac:	e7d2      	b.n	8014054 <rcutils_string_map_init+0x14>
 80140ae:	250b      	movs	r5, #11
 80140b0:	4628      	mov	r0, r5
 80140b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140b6:	b002      	add	sp, #8
 80140b8:	4770      	bx	lr
 80140ba:	250a      	movs	r5, #10
 80140bc:	e7ca      	b.n	8014054 <rcutils_string_map_init+0x14>
 80140be:	bf00      	nop

080140c0 <rcutils_string_map_fini>:
 80140c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c4:	b082      	sub	sp, #8
 80140c6:	2800      	cmp	r0, #0
 80140c8:	d03a      	beq.n	8014140 <rcutils_string_map_fini+0x80>
 80140ca:	6804      	ldr	r4, [r0, #0]
 80140cc:	4606      	mov	r6, r0
 80140ce:	2c00      	cmp	r4, #0
 80140d0:	d032      	beq.n	8014138 <rcutils_string_map_fini+0x78>
 80140d2:	68a3      	ldr	r3, [r4, #8]
 80140d4:	b32b      	cbz	r3, 8014122 <rcutils_string_map_fini+0x62>
 80140d6:	2500      	movs	r5, #0
 80140d8:	6822      	ldr	r2, [r4, #0]
 80140da:	462f      	mov	r7, r5
 80140dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80140e0:	b1e0      	cbz	r0, 801411c <rcutils_string_map_fini+0x5c>
 80140e2:	6a21      	ldr	r1, [r4, #32]
 80140e4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80140e8:	9101      	str	r1, [sp, #4]
 80140ea:	47c0      	blx	r8
 80140ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80140f0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80140f4:	9901      	ldr	r1, [sp, #4]
 80140f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80140fa:	47c0      	blx	r8
 80140fc:	68e3      	ldr	r3, [r4, #12]
 80140fe:	6862      	ldr	r2, [r4, #4]
 8014100:	3b01      	subs	r3, #1
 8014102:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014106:	60e3      	str	r3, [r4, #12]
 8014108:	6834      	ldr	r4, [r6, #0]
 801410a:	68a3      	ldr	r3, [r4, #8]
 801410c:	3501      	adds	r5, #1
 801410e:	429d      	cmp	r5, r3
 8014110:	d207      	bcs.n	8014122 <rcutils_string_map_fini+0x62>
 8014112:	6822      	ldr	r2, [r4, #0]
 8014114:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014118:	2800      	cmp	r0, #0
 801411a:	d1e2      	bne.n	80140e2 <rcutils_string_map_fini+0x22>
 801411c:	3501      	adds	r5, #1
 801411e:	429d      	cmp	r5, r3
 8014120:	d3dc      	bcc.n	80140dc <rcutils_string_map_fini+0x1c>
 8014122:	2100      	movs	r1, #0
 8014124:	4630      	mov	r0, r6
 8014126:	f7ff ff19 	bl	8013f5c <rcutils_string_map_reserve>
 801412a:	4604      	mov	r4, r0
 801412c:	b920      	cbnz	r0, 8014138 <rcutils_string_map_fini+0x78>
 801412e:	6830      	ldr	r0, [r6, #0]
 8014130:	6943      	ldr	r3, [r0, #20]
 8014132:	6a01      	ldr	r1, [r0, #32]
 8014134:	4798      	blx	r3
 8014136:	6034      	str	r4, [r6, #0]
 8014138:	4620      	mov	r0, r4
 801413a:	b002      	add	sp, #8
 801413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014140:	240b      	movs	r4, #11
 8014142:	4620      	mov	r0, r4
 8014144:	b002      	add	sp, #8
 8014146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801414a:	bf00      	nop

0801414c <rcutils_string_map_getn>:
 801414c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014150:	b300      	cbz	r0, 8014194 <rcutils_string_map_getn+0x48>
 8014152:	6807      	ldr	r7, [r0, #0]
 8014154:	b1ff      	cbz	r7, 8014196 <rcutils_string_map_getn+0x4a>
 8014156:	4688      	mov	r8, r1
 8014158:	b1e1      	cbz	r1, 8014194 <rcutils_string_map_getn+0x48>
 801415a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801415e:	683e      	ldr	r6, [r7, #0]
 8014160:	f1ba 0f00 	cmp.w	sl, #0
 8014164:	d016      	beq.n	8014194 <rcutils_string_map_getn+0x48>
 8014166:	4691      	mov	r9, r2
 8014168:	3e04      	subs	r6, #4
 801416a:	2400      	movs	r4, #0
 801416c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014170:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014174:	4628      	mov	r0, r5
 8014176:	3401      	adds	r4, #1
 8014178:	b155      	cbz	r5, 8014190 <rcutils_string_map_getn+0x44>
 801417a:	f7ec f85b 	bl	8000234 <strlen>
 801417e:	4548      	cmp	r0, r9
 8014180:	4602      	mov	r2, r0
 8014182:	4629      	mov	r1, r5
 8014184:	bf38      	it	cc
 8014186:	464a      	movcc	r2, r9
 8014188:	4640      	mov	r0, r8
 801418a:	f002 fdda 	bl	8016d42 <strncmp>
 801418e:	b128      	cbz	r0, 801419c <rcutils_string_map_getn+0x50>
 8014190:	45a2      	cmp	sl, r4
 8014192:	d1eb      	bne.n	801416c <rcutils_string_map_getn+0x20>
 8014194:	2700      	movs	r7, #0
 8014196:	4638      	mov	r0, r7
 8014198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f853 700b 	ldr.w	r7, [r3, fp]
 80141a2:	4638      	mov	r0, r7
 80141a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141a8 <rmw_get_zero_initialized_context>:
 80141a8:	b510      	push	{r4, lr}
 80141aa:	4604      	mov	r4, r0
 80141ac:	3010      	adds	r0, #16
 80141ae:	f7f7 f8c3 	bl	800b338 <rmw_get_zero_initialized_init_options>
 80141b2:	2300      	movs	r3, #0
 80141b4:	2000      	movs	r0, #0
 80141b6:	2100      	movs	r1, #0
 80141b8:	e9c4 0100 	strd	r0, r1, [r4]
 80141bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80141c0:	60a3      	str	r3, [r4, #8]
 80141c2:	4620      	mov	r0, r4
 80141c4:	bd10      	pop	{r4, pc}
 80141c6:	bf00      	nop

080141c8 <rmw_time_equal>:
 80141c8:	b4f0      	push	{r4, r5, r6, r7}
 80141ca:	b084      	sub	sp, #16
 80141cc:	ac04      	add	r4, sp, #16
 80141ce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80141d2:	4603      	mov	r3, r0
 80141d4:	4924      	ldr	r1, [pc, #144]	@ (8014268 <rmw_time_equal+0xa0>)
 80141d6:	9e03      	ldr	r6, [sp, #12]
 80141d8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80141dc:	2202      	movs	r2, #2
 80141de:	4299      	cmp	r1, r3
 80141e0:	41aa      	sbcs	r2, r5
 80141e2:	d330      	bcc.n	8014246 <rmw_time_equal+0x7e>
 80141e4:	4c21      	ldr	r4, [pc, #132]	@ (801426c <rmw_time_equal+0xa4>)
 80141e6:	fba3 3204 	umull	r3, r2, r3, r4
 80141ea:	fb04 2205 	mla	r2, r4, r5, r2
 80141ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80141f2:	43dd      	mvns	r5, r3
 80141f4:	1a8c      	subs	r4, r1, r2
 80141f6:	4285      	cmp	r5, r0
 80141f8:	41b4      	sbcs	r4, r6
 80141fa:	d332      	bcc.n	8014262 <rmw_time_equal+0x9a>
 80141fc:	eb10 0c03 	adds.w	ip, r0, r3
 8014200:	eb42 0106 	adc.w	r1, r2, r6
 8014204:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014208:	4817      	ldr	r0, [pc, #92]	@ (8014268 <rmw_time_equal+0xa0>)
 801420a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801420c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801420e:	2202      	movs	r2, #2
 8014210:	4298      	cmp	r0, r3
 8014212:	41b2      	sbcs	r2, r6
 8014214:	d31c      	bcc.n	8014250 <rmw_time_equal+0x88>
 8014216:	4c15      	ldr	r4, [pc, #84]	@ (801426c <rmw_time_equal+0xa4>)
 8014218:	fba3 3204 	umull	r3, r2, r3, r4
 801421c:	fb04 2206 	mla	r2, r4, r6, r2
 8014220:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014224:	43de      	mvns	r6, r3
 8014226:	1a84      	subs	r4, r0, r2
 8014228:	42ae      	cmp	r6, r5
 801422a:	41bc      	sbcs	r4, r7
 801422c:	d315      	bcc.n	801425a <rmw_time_equal+0x92>
 801422e:	195b      	adds	r3, r3, r5
 8014230:	eb42 0207 	adc.w	r2, r2, r7
 8014234:	428a      	cmp	r2, r1
 8014236:	bf08      	it	eq
 8014238:	4563      	cmpeq	r3, ip
 801423a:	bf0c      	ite	eq
 801423c:	2001      	moveq	r0, #1
 801423e:	2000      	movne	r0, #0
 8014240:	b004      	add	sp, #16
 8014242:	bcf0      	pop	{r4, r5, r6, r7}
 8014244:	4770      	bx	lr
 8014246:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801424a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801424e:	e7d9      	b.n	8014204 <rmw_time_equal+0x3c>
 8014250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014254:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014258:	e7ec      	b.n	8014234 <rmw_time_equal+0x6c>
 801425a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801425e:	4602      	mov	r2, r0
 8014260:	e7e8      	b.n	8014234 <rmw_time_equal+0x6c>
 8014262:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014266:	e7cd      	b.n	8014204 <rmw_time_equal+0x3c>
 8014268:	25c17d04 	.word	0x25c17d04
 801426c:	3b9aca00 	.word	0x3b9aca00

08014270 <rmw_time_total_nsec>:
 8014270:	b470      	push	{r4, r5, r6}
 8014272:	b085      	sub	sp, #20
 8014274:	ac04      	add	r4, sp, #16
 8014276:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801427a:	4603      	mov	r3, r0
 801427c:	4912      	ldr	r1, [pc, #72]	@ (80142c8 <rmw_time_total_nsec+0x58>)
 801427e:	9e03      	ldr	r6, [sp, #12]
 8014280:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014284:	2202      	movs	r2, #2
 8014286:	4299      	cmp	r1, r3
 8014288:	41aa      	sbcs	r2, r5
 801428a:	d311      	bcc.n	80142b0 <rmw_time_total_nsec+0x40>
 801428c:	4c0f      	ldr	r4, [pc, #60]	@ (80142cc <rmw_time_total_nsec+0x5c>)
 801428e:	fba3 3204 	umull	r3, r2, r3, r4
 8014292:	fb04 2205 	mla	r2, r4, r5, r2
 8014296:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801429a:	43dd      	mvns	r5, r3
 801429c:	1a8c      	subs	r4, r1, r2
 801429e:	4285      	cmp	r5, r0
 80142a0:	41b4      	sbcs	r4, r6
 80142a2:	d30c      	bcc.n	80142be <rmw_time_total_nsec+0x4e>
 80142a4:	1818      	adds	r0, r3, r0
 80142a6:	eb42 0106 	adc.w	r1, r2, r6
 80142aa:	b005      	add	sp, #20
 80142ac:	bc70      	pop	{r4, r5, r6}
 80142ae:	4770      	bx	lr
 80142b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80142b8:	b005      	add	sp, #20
 80142ba:	bc70      	pop	{r4, r5, r6}
 80142bc:	4770      	bx	lr
 80142be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142c2:	b005      	add	sp, #20
 80142c4:	bc70      	pop	{r4, r5, r6}
 80142c6:	4770      	bx	lr
 80142c8:	25c17d04 	.word	0x25c17d04
 80142cc:	3b9aca00 	.word	0x3b9aca00

080142d0 <rmw_get_zero_initialized_message_info>:
 80142d0:	b510      	push	{r4, lr}
 80142d2:	2240      	movs	r2, #64	@ 0x40
 80142d4:	4604      	mov	r4, r0
 80142d6:	2100      	movs	r1, #0
 80142d8:	f002 fd1e 	bl	8016d18 <memset>
 80142dc:	4620      	mov	r0, r4
 80142de:	bd10      	pop	{r4, pc}

080142e0 <rmw_validate_full_topic_name>:
 80142e0:	2800      	cmp	r0, #0
 80142e2:	d057      	beq.n	8014394 <rmw_validate_full_topic_name+0xb4>
 80142e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142e8:	460d      	mov	r5, r1
 80142ea:	2900      	cmp	r1, #0
 80142ec:	d054      	beq.n	8014398 <rmw_validate_full_topic_name+0xb8>
 80142ee:	4616      	mov	r6, r2
 80142f0:	4604      	mov	r4, r0
 80142f2:	f7eb ff9f 	bl	8000234 <strlen>
 80142f6:	b148      	cbz	r0, 801430c <rmw_validate_full_topic_name+0x2c>
 80142f8:	7823      	ldrb	r3, [r4, #0]
 80142fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80142fc:	d00d      	beq.n	801431a <rmw_validate_full_topic_name+0x3a>
 80142fe:	2302      	movs	r3, #2
 8014300:	602b      	str	r3, [r5, #0]
 8014302:	b13e      	cbz	r6, 8014314 <rmw_validate_full_topic_name+0x34>
 8014304:	2000      	movs	r0, #0
 8014306:	6030      	str	r0, [r6, #0]
 8014308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430c:	2301      	movs	r3, #1
 801430e:	602b      	str	r3, [r5, #0]
 8014310:	2e00      	cmp	r6, #0
 8014312:	d1f7      	bne.n	8014304 <rmw_validate_full_topic_name+0x24>
 8014314:	2000      	movs	r0, #0
 8014316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801431a:	1e43      	subs	r3, r0, #1
 801431c:	5ce2      	ldrb	r2, [r4, r3]
 801431e:	2a2f      	cmp	r2, #47	@ 0x2f
 8014320:	d03c      	beq.n	801439c <rmw_validate_full_topic_name+0xbc>
 8014322:	1e63      	subs	r3, r4, #1
 8014324:	eb03 0800 	add.w	r8, r3, r0
 8014328:	f1c4 0e01 	rsb	lr, r4, #1
 801432c:	eb0e 0703 	add.w	r7, lr, r3
 8014330:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014334:	f021 0220 	bic.w	r2, r1, #32
 8014338:	3a41      	subs	r2, #65	@ 0x41
 801433a:	2a19      	cmp	r2, #25
 801433c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8014340:	d90b      	bls.n	801435a <rmw_validate_full_topic_name+0x7a>
 8014342:	295f      	cmp	r1, #95	@ 0x5f
 8014344:	d009      	beq.n	801435a <rmw_validate_full_topic_name+0x7a>
 8014346:	f1bc 0f0a 	cmp.w	ip, #10
 801434a:	d906      	bls.n	801435a <rmw_validate_full_topic_name+0x7a>
 801434c:	2304      	movs	r3, #4
 801434e:	602b      	str	r3, [r5, #0]
 8014350:	2e00      	cmp	r6, #0
 8014352:	d0df      	beq.n	8014314 <rmw_validate_full_topic_name+0x34>
 8014354:	6037      	str	r7, [r6, #0]
 8014356:	2000      	movs	r0, #0
 8014358:	e7d6      	b.n	8014308 <rmw_validate_full_topic_name+0x28>
 801435a:	4543      	cmp	r3, r8
 801435c:	d1e6      	bne.n	801432c <rmw_validate_full_topic_name+0x4c>
 801435e:	4f1a      	ldr	r7, [pc, #104]	@ (80143c8 <rmw_validate_full_topic_name+0xe8>)
 8014360:	2301      	movs	r3, #1
 8014362:	e004      	b.n	801436e <rmw_validate_full_topic_name+0x8e>
 8014364:	4298      	cmp	r0, r3
 8014366:	f104 0401 	add.w	r4, r4, #1
 801436a:	d91c      	bls.n	80143a6 <rmw_validate_full_topic_name+0xc6>
 801436c:	4613      	mov	r3, r2
 801436e:	4298      	cmp	r0, r3
 8014370:	f103 0201 	add.w	r2, r3, #1
 8014374:	d0f6      	beq.n	8014364 <rmw_validate_full_topic_name+0x84>
 8014376:	7821      	ldrb	r1, [r4, #0]
 8014378:	292f      	cmp	r1, #47	@ 0x2f
 801437a:	d1f3      	bne.n	8014364 <rmw_validate_full_topic_name+0x84>
 801437c:	7861      	ldrb	r1, [r4, #1]
 801437e:	292f      	cmp	r1, #47	@ 0x2f
 8014380:	d01c      	beq.n	80143bc <rmw_validate_full_topic_name+0xdc>
 8014382:	5dc9      	ldrb	r1, [r1, r7]
 8014384:	0749      	lsls	r1, r1, #29
 8014386:	d5ed      	bpl.n	8014364 <rmw_validate_full_topic_name+0x84>
 8014388:	2206      	movs	r2, #6
 801438a:	602a      	str	r2, [r5, #0]
 801438c:	2e00      	cmp	r6, #0
 801438e:	d0c1      	beq.n	8014314 <rmw_validate_full_topic_name+0x34>
 8014390:	6033      	str	r3, [r6, #0]
 8014392:	e7bf      	b.n	8014314 <rmw_validate_full_topic_name+0x34>
 8014394:	200b      	movs	r0, #11
 8014396:	4770      	bx	lr
 8014398:	200b      	movs	r0, #11
 801439a:	e7b5      	b.n	8014308 <rmw_validate_full_topic_name+0x28>
 801439c:	2203      	movs	r2, #3
 801439e:	602a      	str	r2, [r5, #0]
 80143a0:	2e00      	cmp	r6, #0
 80143a2:	d1f5      	bne.n	8014390 <rmw_validate_full_topic_name+0xb0>
 80143a4:	e7b6      	b.n	8014314 <rmw_validate_full_topic_name+0x34>
 80143a6:	28f7      	cmp	r0, #247	@ 0xf7
 80143a8:	d802      	bhi.n	80143b0 <rmw_validate_full_topic_name+0xd0>
 80143aa:	2000      	movs	r0, #0
 80143ac:	6028      	str	r0, [r5, #0]
 80143ae:	e7ab      	b.n	8014308 <rmw_validate_full_topic_name+0x28>
 80143b0:	2307      	movs	r3, #7
 80143b2:	602b      	str	r3, [r5, #0]
 80143b4:	2e00      	cmp	r6, #0
 80143b6:	d0ad      	beq.n	8014314 <rmw_validate_full_topic_name+0x34>
 80143b8:	23f6      	movs	r3, #246	@ 0xf6
 80143ba:	e7e9      	b.n	8014390 <rmw_validate_full_topic_name+0xb0>
 80143bc:	2205      	movs	r2, #5
 80143be:	602a      	str	r2, [r5, #0]
 80143c0:	2e00      	cmp	r6, #0
 80143c2:	d1e5      	bne.n	8014390 <rmw_validate_full_topic_name+0xb0>
 80143c4:	e7a6      	b.n	8014314 <rmw_validate_full_topic_name+0x34>
 80143c6:	bf00      	nop
 80143c8:	08018990 	.word	0x08018990

080143cc <rmw_validate_namespace_with_size>:
 80143cc:	b340      	cbz	r0, 8014420 <rmw_validate_namespace_with_size+0x54>
 80143ce:	b570      	push	{r4, r5, r6, lr}
 80143d0:	4614      	mov	r4, r2
 80143d2:	b0c2      	sub	sp, #264	@ 0x108
 80143d4:	b332      	cbz	r2, 8014424 <rmw_validate_namespace_with_size+0x58>
 80143d6:	2901      	cmp	r1, #1
 80143d8:	460d      	mov	r5, r1
 80143da:	461e      	mov	r6, r3
 80143dc:	d102      	bne.n	80143e4 <rmw_validate_namespace_with_size+0x18>
 80143de:	7803      	ldrb	r3, [r0, #0]
 80143e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80143e2:	d012      	beq.n	801440a <rmw_validate_namespace_with_size+0x3e>
 80143e4:	aa01      	add	r2, sp, #4
 80143e6:	4669      	mov	r1, sp
 80143e8:	f7ff ff7a 	bl	80142e0 <rmw_validate_full_topic_name>
 80143ec:	b978      	cbnz	r0, 801440e <rmw_validate_namespace_with_size+0x42>
 80143ee:	9b00      	ldr	r3, [sp, #0]
 80143f0:	b14b      	cbz	r3, 8014406 <rmw_validate_namespace_with_size+0x3a>
 80143f2:	2b07      	cmp	r3, #7
 80143f4:	d007      	beq.n	8014406 <rmw_validate_namespace_with_size+0x3a>
 80143f6:	1e5a      	subs	r2, r3, #1
 80143f8:	2a05      	cmp	r2, #5
 80143fa:	d82b      	bhi.n	8014454 <rmw_validate_namespace_with_size+0x88>
 80143fc:	e8df f002 	tbb	[pc, r2]
 8014400:	1e212427 	.word	0x1e212427
 8014404:	141b      	.short	0x141b
 8014406:	2df5      	cmp	r5, #245	@ 0xf5
 8014408:	d803      	bhi.n	8014412 <rmw_validate_namespace_with_size+0x46>
 801440a:	2000      	movs	r0, #0
 801440c:	6020      	str	r0, [r4, #0]
 801440e:	b042      	add	sp, #264	@ 0x108
 8014410:	bd70      	pop	{r4, r5, r6, pc}
 8014412:	2307      	movs	r3, #7
 8014414:	6023      	str	r3, [r4, #0]
 8014416:	2e00      	cmp	r6, #0
 8014418:	d0f9      	beq.n	801440e <rmw_validate_namespace_with_size+0x42>
 801441a:	23f4      	movs	r3, #244	@ 0xf4
 801441c:	6033      	str	r3, [r6, #0]
 801441e:	e7f6      	b.n	801440e <rmw_validate_namespace_with_size+0x42>
 8014420:	200b      	movs	r0, #11
 8014422:	4770      	bx	lr
 8014424:	200b      	movs	r0, #11
 8014426:	e7f2      	b.n	801440e <rmw_validate_namespace_with_size+0x42>
 8014428:	2306      	movs	r3, #6
 801442a:	6023      	str	r3, [r4, #0]
 801442c:	2e00      	cmp	r6, #0
 801442e:	d0ee      	beq.n	801440e <rmw_validate_namespace_with_size+0x42>
 8014430:	9b01      	ldr	r3, [sp, #4]
 8014432:	6033      	str	r3, [r6, #0]
 8014434:	e7eb      	b.n	801440e <rmw_validate_namespace_with_size+0x42>
 8014436:	2305      	movs	r3, #5
 8014438:	6023      	str	r3, [r4, #0]
 801443a:	e7f7      	b.n	801442c <rmw_validate_namespace_with_size+0x60>
 801443c:	2304      	movs	r3, #4
 801443e:	6023      	str	r3, [r4, #0]
 8014440:	e7f4      	b.n	801442c <rmw_validate_namespace_with_size+0x60>
 8014442:	2303      	movs	r3, #3
 8014444:	6023      	str	r3, [r4, #0]
 8014446:	e7f1      	b.n	801442c <rmw_validate_namespace_with_size+0x60>
 8014448:	2302      	movs	r3, #2
 801444a:	6023      	str	r3, [r4, #0]
 801444c:	e7ee      	b.n	801442c <rmw_validate_namespace_with_size+0x60>
 801444e:	2301      	movs	r3, #1
 8014450:	6023      	str	r3, [r4, #0]
 8014452:	e7eb      	b.n	801442c <rmw_validate_namespace_with_size+0x60>
 8014454:	4a03      	ldr	r2, [pc, #12]	@ (8014464 <rmw_validate_namespace_with_size+0x98>)
 8014456:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801445a:	a802      	add	r0, sp, #8
 801445c:	f7ff fd0e 	bl	8013e7c <rcutils_snprintf>
 8014460:	2001      	movs	r0, #1
 8014462:	e7d4      	b.n	801440e <rmw_validate_namespace_with_size+0x42>
 8014464:	08018598 	.word	0x08018598

08014468 <rmw_validate_namespace>:
 8014468:	b168      	cbz	r0, 8014486 <rmw_validate_namespace+0x1e>
 801446a:	b570      	push	{r4, r5, r6, lr}
 801446c:	460d      	mov	r5, r1
 801446e:	4616      	mov	r6, r2
 8014470:	4604      	mov	r4, r0
 8014472:	f7eb fedf 	bl	8000234 <strlen>
 8014476:	4633      	mov	r3, r6
 8014478:	4601      	mov	r1, r0
 801447a:	462a      	mov	r2, r5
 801447c:	4620      	mov	r0, r4
 801447e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014482:	f7ff bfa3 	b.w	80143cc <rmw_validate_namespace_with_size>
 8014486:	200b      	movs	r0, #11
 8014488:	4770      	bx	lr
 801448a:	bf00      	nop

0801448c <rmw_namespace_validation_result_string>:
 801448c:	2807      	cmp	r0, #7
 801448e:	bf9a      	itte	ls
 8014490:	4b02      	ldrls	r3, [pc, #8]	@ (801449c <rmw_namespace_validation_result_string+0x10>)
 8014492:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014496:	4802      	ldrhi	r0, [pc, #8]	@ (80144a0 <rmw_namespace_validation_result_string+0x14>)
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop
 801449c:	08018790 	.word	0x08018790
 80144a0:	080185e8 	.word	0x080185e8

080144a4 <rmw_validate_node_name>:
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d03b      	beq.n	8014520 <rmw_validate_node_name+0x7c>
 80144a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ac:	460d      	mov	r5, r1
 80144ae:	2900      	cmp	r1, #0
 80144b0:	d038      	beq.n	8014524 <rmw_validate_node_name+0x80>
 80144b2:	4616      	mov	r6, r2
 80144b4:	4604      	mov	r4, r0
 80144b6:	f7eb febd 	bl	8000234 <strlen>
 80144ba:	b1e0      	cbz	r0, 80144f6 <rmw_validate_node_name+0x52>
 80144bc:	1e63      	subs	r3, r4, #1
 80144be:	eb03 0800 	add.w	r8, r3, r0
 80144c2:	f1c4 0101 	rsb	r1, r4, #1
 80144c6:	18cf      	adds	r7, r1, r3
 80144c8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80144cc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80144d0:	f02e 0c20 	bic.w	ip, lr, #32
 80144d4:	2a09      	cmp	r2, #9
 80144d6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80144da:	d914      	bls.n	8014506 <rmw_validate_node_name+0x62>
 80144dc:	f1bc 0f19 	cmp.w	ip, #25
 80144e0:	d911      	bls.n	8014506 <rmw_validate_node_name+0x62>
 80144e2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80144e6:	d00e      	beq.n	8014506 <rmw_validate_node_name+0x62>
 80144e8:	2302      	movs	r3, #2
 80144ea:	602b      	str	r3, [r5, #0]
 80144ec:	b106      	cbz	r6, 80144f0 <rmw_validate_node_name+0x4c>
 80144ee:	6037      	str	r7, [r6, #0]
 80144f0:	2000      	movs	r0, #0
 80144f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f6:	2301      	movs	r3, #1
 80144f8:	602b      	str	r3, [r5, #0]
 80144fa:	2e00      	cmp	r6, #0
 80144fc:	d0f8      	beq.n	80144f0 <rmw_validate_node_name+0x4c>
 80144fe:	2000      	movs	r0, #0
 8014500:	6030      	str	r0, [r6, #0]
 8014502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014506:	4543      	cmp	r3, r8
 8014508:	d1dd      	bne.n	80144c6 <rmw_validate_node_name+0x22>
 801450a:	7822      	ldrb	r2, [r4, #0]
 801450c:	4b0d      	ldr	r3, [pc, #52]	@ (8014544 <rmw_validate_node_name+0xa0>)
 801450e:	5cd3      	ldrb	r3, [r2, r3]
 8014510:	f013 0304 	ands.w	r3, r3, #4
 8014514:	d110      	bne.n	8014538 <rmw_validate_node_name+0x94>
 8014516:	28ff      	cmp	r0, #255	@ 0xff
 8014518:	d806      	bhi.n	8014528 <rmw_validate_node_name+0x84>
 801451a:	602b      	str	r3, [r5, #0]
 801451c:	4618      	mov	r0, r3
 801451e:	e7e8      	b.n	80144f2 <rmw_validate_node_name+0x4e>
 8014520:	200b      	movs	r0, #11
 8014522:	4770      	bx	lr
 8014524:	200b      	movs	r0, #11
 8014526:	e7e4      	b.n	80144f2 <rmw_validate_node_name+0x4e>
 8014528:	2204      	movs	r2, #4
 801452a:	602a      	str	r2, [r5, #0]
 801452c:	2e00      	cmp	r6, #0
 801452e:	d0df      	beq.n	80144f0 <rmw_validate_node_name+0x4c>
 8014530:	22fe      	movs	r2, #254	@ 0xfe
 8014532:	6032      	str	r2, [r6, #0]
 8014534:	4618      	mov	r0, r3
 8014536:	e7dc      	b.n	80144f2 <rmw_validate_node_name+0x4e>
 8014538:	2303      	movs	r3, #3
 801453a:	602b      	str	r3, [r5, #0]
 801453c:	2e00      	cmp	r6, #0
 801453e:	d1de      	bne.n	80144fe <rmw_validate_node_name+0x5a>
 8014540:	e7d6      	b.n	80144f0 <rmw_validate_node_name+0x4c>
 8014542:	bf00      	nop
 8014544:	08018990 	.word	0x08018990

08014548 <rmw_node_name_validation_result_string>:
 8014548:	2804      	cmp	r0, #4
 801454a:	bf9a      	itte	ls
 801454c:	4b02      	ldrls	r3, [pc, #8]	@ (8014558 <rmw_node_name_validation_result_string+0x10>)
 801454e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014552:	4802      	ldrhi	r0, [pc, #8]	@ (801455c <rmw_node_name_validation_result_string+0x14>)
 8014554:	4770      	bx	lr
 8014556:	bf00      	nop
 8014558:	0801889c 	.word	0x0801889c
 801455c:	080187b0 	.word	0x080187b0

08014560 <on_status>:
 8014560:	b082      	sub	sp, #8
 8014562:	b002      	add	sp, #8
 8014564:	4770      	bx	lr
 8014566:	bf00      	nop

08014568 <on_topic>:
 8014568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801456c:	4a22      	ldr	r2, [pc, #136]	@ (80145f8 <on_topic+0x90>)
 801456e:	b094      	sub	sp, #80	@ 0x50
 8014570:	6812      	ldr	r2, [r2, #0]
 8014572:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8014574:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014578:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801457c:	b3c2      	cbz	r2, 80145f0 <on_topic+0x88>
 801457e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8014582:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8014586:	e001      	b.n	801458c <on_topic+0x24>
 8014588:	6852      	ldr	r2, [r2, #4]
 801458a:	b38a      	cbz	r2, 80145f0 <on_topic+0x88>
 801458c:	6894      	ldr	r4, [r2, #8]
 801458e:	8aa3      	ldrh	r3, [r4, #20]
 8014590:	428b      	cmp	r3, r1
 8014592:	d1f9      	bne.n	8014588 <on_topic+0x20>
 8014594:	7da3      	ldrb	r3, [r4, #22]
 8014596:	4283      	cmp	r3, r0
 8014598:	d1f6      	bne.n	8014588 <on_topic+0x20>
 801459a:	2248      	movs	r2, #72	@ 0x48
 801459c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80145a0:	4668      	mov	r0, sp
 80145a2:	f002 fc82 	bl	8016eaa <memcpy>
 80145a6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80145aa:	cb0c      	ldmia	r3, {r2, r3}
 80145ac:	4620      	mov	r0, r4
 80145ae:	f7f7 fec7 	bl	800c340 <rmw_uxrce_get_static_input_buffer_for_entity>
 80145b2:	4607      	mov	r7, r0
 80145b4:	b1e0      	cbz	r0, 80145f0 <on_topic+0x88>
 80145b6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80145ba:	4632      	mov	r2, r6
 80145bc:	4628      	mov	r0, r5
 80145be:	f108 0110 	add.w	r1, r8, #16
 80145c2:	f000 fdd3 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80145c6:	b930      	cbnz	r0, 80145d6 <on_topic+0x6e>
 80145c8:	480c      	ldr	r0, [pc, #48]	@ (80145fc <on_topic+0x94>)
 80145ca:	4639      	mov	r1, r7
 80145cc:	b014      	add	sp, #80	@ 0x50
 80145ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145d2:	f000 b8bd 	b.w	8014750 <put_memory>
 80145d6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80145da:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80145de:	f7f7 fcad 	bl	800bf3c <rmw_uros_epoch_nanos>
 80145e2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80145e6:	2305      	movs	r3, #5
 80145e8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80145ec:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80145f0:	b014      	add	sp, #80	@ 0x50
 80145f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145f6:	bf00      	nop
 80145f8:	2000ca5c 	.word	0x2000ca5c
 80145fc:	2000ca4c 	.word	0x2000ca4c

08014600 <on_request>:
 8014600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014604:	4823      	ldr	r0, [pc, #140]	@ (8014694 <on_request+0x94>)
 8014606:	b094      	sub	sp, #80	@ 0x50
 8014608:	6800      	ldr	r0, [r0, #0]
 801460a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801460c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014610:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014612:	2800      	cmp	r0, #0
 8014614:	d03b      	beq.n	801468e <on_request+0x8e>
 8014616:	461d      	mov	r5, r3
 8014618:	e001      	b.n	801461e <on_request+0x1e>
 801461a:	6840      	ldr	r0, [r0, #4]
 801461c:	b3b8      	cbz	r0, 801468e <on_request+0x8e>
 801461e:	6884      	ldr	r4, [r0, #8]
 8014620:	8b21      	ldrh	r1, [r4, #24]
 8014622:	4291      	cmp	r1, r2
 8014624:	d1f9      	bne.n	801461a <on_request+0x1a>
 8014626:	2248      	movs	r2, #72	@ 0x48
 8014628:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801462c:	4668      	mov	r0, sp
 801462e:	f002 fc3c 	bl	8016eaa <memcpy>
 8014632:	f104 0320 	add.w	r3, r4, #32
 8014636:	cb0c      	ldmia	r3, {r2, r3}
 8014638:	4620      	mov	r0, r4
 801463a:	f7f7 fe81 	bl	800c340 <rmw_uxrce_get_static_input_buffer_for_entity>
 801463e:	4680      	mov	r8, r0
 8014640:	b328      	cbz	r0, 801468e <on_request+0x8e>
 8014642:	4638      	mov	r0, r7
 8014644:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014648:	4632      	mov	r2, r6
 801464a:	f107 0110 	add.w	r1, r7, #16
 801464e:	f000 fd8d 	bl	801516c <ucdr_deserialize_array_uint8_t>
 8014652:	b930      	cbnz	r0, 8014662 <on_request+0x62>
 8014654:	4810      	ldr	r0, [pc, #64]	@ (8014698 <on_request+0x98>)
 8014656:	4641      	mov	r1, r8
 8014658:	b014      	add	sp, #80	@ 0x50
 801465a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801465e:	f000 b877 	b.w	8014750 <put_memory>
 8014662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014664:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8014668:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801466c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014670:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014674:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014678:	e88c 0003 	stmia.w	ip, {r0, r1}
 801467c:	f7f7 fc5e 	bl	800bf3c <rmw_uros_epoch_nanos>
 8014680:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014684:	2303      	movs	r3, #3
 8014686:	e942 0102 	strd	r0, r1, [r2, #-8]
 801468a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801468e:	b014      	add	sp, #80	@ 0x50
 8014690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014694:	2000ca2c 	.word	0x2000ca2c
 8014698:	2000ca4c 	.word	0x2000ca4c

0801469c <on_reply>:
 801469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a0:	4821      	ldr	r0, [pc, #132]	@ (8014728 <on_reply+0x8c>)
 80146a2:	b094      	sub	sp, #80	@ 0x50
 80146a4:	6800      	ldr	r0, [r0, #0]
 80146a6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80146a8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80146ac:	9113      	str	r1, [sp, #76]	@ 0x4c
 80146ae:	b3b8      	cbz	r0, 8014720 <on_reply+0x84>
 80146b0:	461d      	mov	r5, r3
 80146b2:	e001      	b.n	80146b8 <on_reply+0x1c>
 80146b4:	6840      	ldr	r0, [r0, #4]
 80146b6:	b398      	cbz	r0, 8014720 <on_reply+0x84>
 80146b8:	6884      	ldr	r4, [r0, #8]
 80146ba:	8b21      	ldrh	r1, [r4, #24]
 80146bc:	4291      	cmp	r1, r2
 80146be:	d1f9      	bne.n	80146b4 <on_reply+0x18>
 80146c0:	2248      	movs	r2, #72	@ 0x48
 80146c2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80146c6:	4668      	mov	r0, sp
 80146c8:	f002 fbef 	bl	8016eaa <memcpy>
 80146cc:	f104 0320 	add.w	r3, r4, #32
 80146d0:	cb0c      	ldmia	r3, {r2, r3}
 80146d2:	4620      	mov	r0, r4
 80146d4:	f7f7 fe34 	bl	800c340 <rmw_uxrce_get_static_input_buffer_for_entity>
 80146d8:	4680      	mov	r8, r0
 80146da:	b308      	cbz	r0, 8014720 <on_reply+0x84>
 80146dc:	4638      	mov	r0, r7
 80146de:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80146e2:	4632      	mov	r2, r6
 80146e4:	f107 0110 	add.w	r1, r7, #16
 80146e8:	f000 fd40 	bl	801516c <ucdr_deserialize_array_uint8_t>
 80146ec:	b930      	cbnz	r0, 80146fc <on_reply+0x60>
 80146ee:	480f      	ldr	r0, [pc, #60]	@ (801472c <on_reply+0x90>)
 80146f0:	4641      	mov	r1, r8
 80146f2:	b014      	add	sp, #80	@ 0x50
 80146f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146f8:	f000 b82a 	b.w	8014750 <put_memory>
 80146fc:	2200      	movs	r2, #0
 80146fe:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8014702:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8014706:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801470a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801470e:	f7f7 fc15 	bl	800bf3c <rmw_uros_epoch_nanos>
 8014712:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014716:	2304      	movs	r3, #4
 8014718:	e942 0102 	strd	r0, r1, [r2, #-8]
 801471c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8014720:	b014      	add	sp, #80	@ 0x50
 8014722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014726:	bf00      	nop
 8014728:	2000813c 	.word	0x2000813c
 801472c:	2000ca4c 	.word	0x2000ca4c

08014730 <get_memory>:
 8014730:	4603      	mov	r3, r0
 8014732:	6840      	ldr	r0, [r0, #4]
 8014734:	b158      	cbz	r0, 801474e <get_memory+0x1e>
 8014736:	6842      	ldr	r2, [r0, #4]
 8014738:	605a      	str	r2, [r3, #4]
 801473a:	b10a      	cbz	r2, 8014740 <get_memory+0x10>
 801473c:	2100      	movs	r1, #0
 801473e:	6011      	str	r1, [r2, #0]
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	6042      	str	r2, [r0, #4]
 8014744:	b102      	cbz	r2, 8014748 <get_memory+0x18>
 8014746:	6010      	str	r0, [r2, #0]
 8014748:	2200      	movs	r2, #0
 801474a:	6002      	str	r2, [r0, #0]
 801474c:	6018      	str	r0, [r3, #0]
 801474e:	4770      	bx	lr

08014750 <put_memory>:
 8014750:	680b      	ldr	r3, [r1, #0]
 8014752:	b10b      	cbz	r3, 8014758 <put_memory+0x8>
 8014754:	684a      	ldr	r2, [r1, #4]
 8014756:	605a      	str	r2, [r3, #4]
 8014758:	684a      	ldr	r2, [r1, #4]
 801475a:	b102      	cbz	r2, 801475e <put_memory+0xe>
 801475c:	6013      	str	r3, [r2, #0]
 801475e:	6803      	ldr	r3, [r0, #0]
 8014760:	428b      	cmp	r3, r1
 8014762:	6843      	ldr	r3, [r0, #4]
 8014764:	bf08      	it	eq
 8014766:	6002      	streq	r2, [r0, #0]
 8014768:	604b      	str	r3, [r1, #4]
 801476a:	b103      	cbz	r3, 801476e <put_memory+0x1e>
 801476c:	6019      	str	r1, [r3, #0]
 801476e:	2300      	movs	r3, #0
 8014770:	600b      	str	r3, [r1, #0]
 8014772:	6041      	str	r1, [r0, #4]
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop

08014778 <rmw_destroy_client>:
 8014778:	b570      	push	{r4, r5, r6, lr}
 801477a:	b128      	cbz	r0, 8014788 <rmw_destroy_client+0x10>
 801477c:	4604      	mov	r4, r0
 801477e:	6800      	ldr	r0, [r0, #0]
 8014780:	460d      	mov	r5, r1
 8014782:	f7f7 ff53 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 8014786:	b910      	cbnz	r0, 801478e <rmw_destroy_client+0x16>
 8014788:	2401      	movs	r4, #1
 801478a:	4620      	mov	r0, r4
 801478c:	bd70      	pop	{r4, r5, r6, pc}
 801478e:	6863      	ldr	r3, [r4, #4]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d0f9      	beq.n	8014788 <rmw_destroy_client+0x10>
 8014794:	2d00      	cmp	r5, #0
 8014796:	d0f7      	beq.n	8014788 <rmw_destroy_client+0x10>
 8014798:	6828      	ldr	r0, [r5, #0]
 801479a:	f7f7 ff47 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 801479e:	2800      	cmp	r0, #0
 80147a0:	d0f2      	beq.n	8014788 <rmw_destroy_client+0x10>
 80147a2:	686e      	ldr	r6, [r5, #4]
 80147a4:	2e00      	cmp	r6, #0
 80147a6:	d0ef      	beq.n	8014788 <rmw_destroy_client+0x10>
 80147a8:	6864      	ldr	r4, [r4, #4]
 80147aa:	6932      	ldr	r2, [r6, #16]
 80147ac:	6920      	ldr	r0, [r4, #16]
 80147ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80147b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147b6:	6819      	ldr	r1, [r3, #0]
 80147b8:	f7f9 fa98 	bl	800dcec <uxr_buffer_cancel_data>
 80147bc:	4602      	mov	r2, r0
 80147be:	6920      	ldr	r0, [r4, #16]
 80147c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80147c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80147c8:	f7f7 feb0 	bl	800c52c <run_xrce_session>
 80147cc:	6920      	ldr	r0, [r4, #16]
 80147ce:	6932      	ldr	r2, [r6, #16]
 80147d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80147d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147d8:	6819      	ldr	r1, [r3, #0]
 80147da:	f7f9 f83b 	bl	800d854 <uxr_buffer_delete_entity>
 80147de:	4602      	mov	r2, r0
 80147e0:	6920      	ldr	r0, [r4, #16]
 80147e2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80147e6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80147ea:	f7f7 fe9f 	bl	800c52c <run_xrce_session>
 80147ee:	2800      	cmp	r0, #0
 80147f0:	4628      	mov	r0, r5
 80147f2:	bf14      	ite	ne
 80147f4:	2400      	movne	r4, #0
 80147f6:	2402      	moveq	r4, #2
 80147f8:	f7f7 fd80 	bl	800c2fc <rmw_uxrce_fini_client_memory>
 80147fc:	e7c5      	b.n	801478a <rmw_destroy_client+0x12>
 80147fe:	bf00      	nop

08014800 <rmw_get_implementation_identifier>:
 8014800:	4b01      	ldr	r3, [pc, #4]	@ (8014808 <rmw_get_implementation_identifier+0x8>)
 8014802:	6818      	ldr	r0, [r3, #0]
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop
 8014808:	080188c8 	.word	0x080188c8

0801480c <create_topic>:
 801480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014810:	4605      	mov	r5, r0
 8014812:	b084      	sub	sp, #16
 8014814:	4822      	ldr	r0, [pc, #136]	@ (80148a0 <create_topic+0x94>)
 8014816:	460f      	mov	r7, r1
 8014818:	4616      	mov	r6, r2
 801481a:	f7ff ff89 	bl	8014730 <get_memory>
 801481e:	4604      	mov	r4, r0
 8014820:	2800      	cmp	r0, #0
 8014822:	d039      	beq.n	8014898 <create_topic+0x8c>
 8014824:	692b      	ldr	r3, [r5, #16]
 8014826:	6884      	ldr	r4, [r0, #8]
 8014828:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80148a8 <create_topic+0x9c>
 801482c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014830:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014834:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014838:	1c42      	adds	r2, r0, #1
 801483a:	2102      	movs	r1, #2
 801483c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014840:	f7f9 fa24 	bl	800dc8c <uxr_object_id>
 8014844:	223c      	movs	r2, #60	@ 0x3c
 8014846:	6120      	str	r0, [r4, #16]
 8014848:	4641      	mov	r1, r8
 801484a:	4638      	mov	r0, r7
 801484c:	f7f7 fed4 	bl	800c5f8 <generate_topic_name>
 8014850:	b1f0      	cbz	r0, 8014890 <create_topic+0x84>
 8014852:	4f14      	ldr	r7, [pc, #80]	@ (80148a4 <create_topic+0x98>)
 8014854:	4630      	mov	r0, r6
 8014856:	2264      	movs	r2, #100	@ 0x64
 8014858:	4639      	mov	r1, r7
 801485a:	f7f7 fe9d 	bl	800c598 <generate_type_name>
 801485e:	b1b8      	cbz	r0, 8014890 <create_topic+0x84>
 8014860:	6928      	ldr	r0, [r5, #16]
 8014862:	2306      	movs	r3, #6
 8014864:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014868:	f8cd 8000 	str.w	r8, [sp]
 801486c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014870:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014874:	6811      	ldr	r1, [r2, #0]
 8014876:	696b      	ldr	r3, [r5, #20]
 8014878:	6922      	ldr	r2, [r4, #16]
 801487a:	f7f9 f869 	bl	800d950 <uxr_buffer_create_topic_bin>
 801487e:	4602      	mov	r2, r0
 8014880:	6928      	ldr	r0, [r5, #16]
 8014882:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014886:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801488a:	f7f7 fe4f 	bl	800c52c <run_xrce_session>
 801488e:	b918      	cbnz	r0, 8014898 <create_topic+0x8c>
 8014890:	4620      	mov	r0, r4
 8014892:	f7f7 fd49 	bl	800c328 <rmw_uxrce_fini_topic_memory>
 8014896:	2400      	movs	r4, #0
 8014898:	4620      	mov	r0, r4
 801489a:	b004      	add	sp, #16
 801489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148a0:	2000ca6c 	.word	0x2000ca6c
 80148a4:	2000caec 	.word	0x2000caec
 80148a8:	2000cab0 	.word	0x2000cab0

080148ac <destroy_topic>:
 80148ac:	b538      	push	{r3, r4, r5, lr}
 80148ae:	6985      	ldr	r5, [r0, #24]
 80148b0:	b1d5      	cbz	r5, 80148e8 <destroy_topic+0x3c>
 80148b2:	4604      	mov	r4, r0
 80148b4:	6928      	ldr	r0, [r5, #16]
 80148b6:	6922      	ldr	r2, [r4, #16]
 80148b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80148bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80148c0:	6819      	ldr	r1, [r3, #0]
 80148c2:	f7f8 ffc7 	bl	800d854 <uxr_buffer_delete_entity>
 80148c6:	4602      	mov	r2, r0
 80148c8:	6928      	ldr	r0, [r5, #16]
 80148ca:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80148ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80148d2:	f7f7 fe2b 	bl	800c52c <run_xrce_session>
 80148d6:	2800      	cmp	r0, #0
 80148d8:	4620      	mov	r0, r4
 80148da:	bf14      	ite	ne
 80148dc:	2400      	movne	r4, #0
 80148de:	2402      	moveq	r4, #2
 80148e0:	f7f7 fd22 	bl	800c328 <rmw_uxrce_fini_topic_memory>
 80148e4:	4620      	mov	r0, r4
 80148e6:	bd38      	pop	{r3, r4, r5, pc}
 80148e8:	2401      	movs	r4, #1
 80148ea:	4620      	mov	r0, r4
 80148ec:	bd38      	pop	{r3, r4, r5, pc}
 80148ee:	bf00      	nop

080148f0 <rmw_send_request>:
 80148f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148f4:	4604      	mov	r4, r0
 80148f6:	6800      	ldr	r0, [r0, #0]
 80148f8:	b08b      	sub	sp, #44	@ 0x2c
 80148fa:	460e      	mov	r6, r1
 80148fc:	4615      	mov	r5, r2
 80148fe:	b128      	cbz	r0, 801490c <rmw_send_request+0x1c>
 8014900:	4b21      	ldr	r3, [pc, #132]	@ (8014988 <rmw_send_request+0x98>)
 8014902:	6819      	ldr	r1, [r3, #0]
 8014904:	f7eb fc8c 	bl	8000220 <strcmp>
 8014908:	2800      	cmp	r0, #0
 801490a:	d139      	bne.n	8014980 <rmw_send_request+0x90>
 801490c:	6864      	ldr	r4, [r4, #4]
 801490e:	6963      	ldr	r3, [r4, #20]
 8014910:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	4798      	blx	r3
 8014918:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801491c:	4630      	mov	r0, r6
 801491e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014922:	4798      	blx	r3
 8014924:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014928:	9000      	str	r0, [sp, #0]
 801492a:	6922      	ldr	r2, [r4, #16]
 801492c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801492e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014932:	ab02      	add	r3, sp, #8
 8014934:	f7fb fa82 	bl	800fe3c <uxr_prepare_output_stream>
 8014938:	2700      	movs	r7, #0
 801493a:	6028      	str	r0, [r5, #0]
 801493c:	606f      	str	r7, [r5, #4]
 801493e:	b198      	cbz	r0, 8014968 <rmw_send_request+0x78>
 8014940:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014944:	a902      	add	r1, sp, #8
 8014946:	4630      	mov	r0, r6
 8014948:	4798      	blx	r3
 801494a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801494e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014952:	2b01      	cmp	r3, #1
 8014954:	d00c      	beq.n	8014970 <rmw_send_request+0x80>
 8014956:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014958:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801495c:	f7f9 ff9c 	bl	800e898 <uxr_run_session_until_confirm_delivery>
 8014960:	4638      	mov	r0, r7
 8014962:	b00b      	add	sp, #44	@ 0x2c
 8014964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014968:	2001      	movs	r0, #1
 801496a:	b00b      	add	sp, #44	@ 0x2c
 801496c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014970:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014974:	f7f9 fbd0 	bl	800e118 <uxr_flash_output_streams>
 8014978:	4638      	mov	r0, r7
 801497a:	b00b      	add	sp, #44	@ 0x2c
 801497c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014980:	200c      	movs	r0, #12
 8014982:	b00b      	add	sp, #44	@ 0x2c
 8014984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014988:	080188c8 	.word	0x080188c8

0801498c <rmw_take_request>:
 801498c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014990:	4605      	mov	r5, r0
 8014992:	6800      	ldr	r0, [r0, #0]
 8014994:	b089      	sub	sp, #36	@ 0x24
 8014996:	460c      	mov	r4, r1
 8014998:	4690      	mov	r8, r2
 801499a:	461e      	mov	r6, r3
 801499c:	b128      	cbz	r0, 80149aa <rmw_take_request+0x1e>
 801499e:	4b28      	ldr	r3, [pc, #160]	@ (8014a40 <rmw_take_request+0xb4>)
 80149a0:	6819      	ldr	r1, [r3, #0]
 80149a2:	f7eb fc3d 	bl	8000220 <strcmp>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	d146      	bne.n	8014a38 <rmw_take_request+0xac>
 80149aa:	b10e      	cbz	r6, 80149b0 <rmw_take_request+0x24>
 80149ac:	2300      	movs	r3, #0
 80149ae:	7033      	strb	r3, [r6, #0]
 80149b0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80149b4:	f7f7 fd3c 	bl	800c430 <rmw_uxrce_clean_expired_static_input_buffer>
 80149b8:	4648      	mov	r0, r9
 80149ba:	f7f7 fd11 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80149be:	4607      	mov	r7, r0
 80149c0:	b3b0      	cbz	r0, 8014a30 <rmw_take_request+0xa4>
 80149c2:	6885      	ldr	r5, [r0, #8]
 80149c4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80149c8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80149cc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80149d0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80149d4:	7423      	strb	r3, [r4, #16]
 80149d6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80149da:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80149de:	74e2      	strb	r2, [r4, #19]
 80149e0:	f8a4 3011 	strh.w	r3, [r4, #17]
 80149e4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80149e8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80149ec:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80149f0:	61e1      	str	r1, [r4, #28]
 80149f2:	6162      	str	r2, [r4, #20]
 80149f4:	61a3      	str	r3, [r4, #24]
 80149f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	4798      	blx	r3
 80149fe:	6844      	ldr	r4, [r0, #4]
 8014a00:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014a04:	f105 0110 	add.w	r1, r5, #16
 8014a08:	4668      	mov	r0, sp
 8014a0a:	f7f8 feb3 	bl	800d774 <ucdr_init_buffer>
 8014a0e:	68e3      	ldr	r3, [r4, #12]
 8014a10:	4641      	mov	r1, r8
 8014a12:	4668      	mov	r0, sp
 8014a14:	4798      	blx	r3
 8014a16:	4639      	mov	r1, r7
 8014a18:	4604      	mov	r4, r0
 8014a1a:	480a      	ldr	r0, [pc, #40]	@ (8014a44 <rmw_take_request+0xb8>)
 8014a1c:	f7ff fe98 	bl	8014750 <put_memory>
 8014a20:	b106      	cbz	r6, 8014a24 <rmw_take_request+0x98>
 8014a22:	7034      	strb	r4, [r6, #0]
 8014a24:	f084 0001 	eor.w	r0, r4, #1
 8014a28:	b2c0      	uxtb	r0, r0
 8014a2a:	b009      	add	sp, #36	@ 0x24
 8014a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a30:	2001      	movs	r0, #1
 8014a32:	b009      	add	sp, #36	@ 0x24
 8014a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a38:	200c      	movs	r0, #12
 8014a3a:	b009      	add	sp, #36	@ 0x24
 8014a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a40:	080188c8 	.word	0x080188c8
 8014a44:	2000ca4c 	.word	0x2000ca4c

08014a48 <rmw_send_response>:
 8014a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	6800      	ldr	r0, [r0, #0]
 8014a4e:	b091      	sub	sp, #68	@ 0x44
 8014a50:	460c      	mov	r4, r1
 8014a52:	4616      	mov	r6, r2
 8014a54:	b128      	cbz	r0, 8014a62 <rmw_send_response+0x1a>
 8014a56:	4b29      	ldr	r3, [pc, #164]	@ (8014afc <rmw_send_response+0xb4>)
 8014a58:	6819      	ldr	r1, [r3, #0]
 8014a5a:	f7eb fbe1 	bl	8000220 <strcmp>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d141      	bne.n	8014ae6 <rmw_send_response+0x9e>
 8014a62:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014a66:	9306      	str	r3, [sp, #24]
 8014a68:	4623      	mov	r3, r4
 8014a6a:	9207      	str	r2, [sp, #28]
 8014a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a70:	686d      	ldr	r5, [r5, #4]
 8014a72:	789b      	ldrb	r3, [r3, #2]
 8014a74:	68a1      	ldr	r1, [r4, #8]
 8014a76:	f88d 2017 	strb.w	r2, [sp, #23]
 8014a7a:	f88d 3016 	strb.w	r3, [sp, #22]
 8014a7e:	68e2      	ldr	r2, [r4, #12]
 8014a80:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014a84:	6860      	ldr	r0, [r4, #4]
 8014a86:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014a8a:	ab02      	add	r3, sp, #8
 8014a8c:	c307      	stmia	r3!, {r0, r1, r2}
 8014a8e:	696b      	ldr	r3, [r5, #20]
 8014a90:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	4798      	blx	r3
 8014a96:	6844      	ldr	r4, [r0, #4]
 8014a98:	4630      	mov	r0, r6
 8014a9a:	6923      	ldr	r3, [r4, #16]
 8014a9c:	4798      	blx	r3
 8014a9e:	f100 0318 	add.w	r3, r0, #24
 8014aa2:	6938      	ldr	r0, [r7, #16]
 8014aa4:	9300      	str	r3, [sp, #0]
 8014aa6:	692a      	ldr	r2, [r5, #16]
 8014aa8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014aaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014aae:	ab08      	add	r3, sp, #32
 8014ab0:	f7fb f9c4 	bl	800fe3c <uxr_prepare_output_stream>
 8014ab4:	b910      	cbnz	r0, 8014abc <rmw_send_response+0x74>
 8014ab6:	2001      	movs	r0, #1
 8014ab8:	b011      	add	sp, #68	@ 0x44
 8014aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014abc:	a902      	add	r1, sp, #8
 8014abe:	a808      	add	r0, sp, #32
 8014ac0:	f7fc fa16 	bl	8010ef0 <uxr_serialize_SampleIdentity>
 8014ac4:	68a3      	ldr	r3, [r4, #8]
 8014ac6:	a908      	add	r1, sp, #32
 8014ac8:	4630      	mov	r0, r6
 8014aca:	4798      	blx	r3
 8014acc:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014ad0:	6938      	ldr	r0, [r7, #16]
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d00a      	beq.n	8014aec <rmw_send_response+0xa4>
 8014ad6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014ad8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014adc:	f7f9 fedc 	bl	800e898 <uxr_run_session_until_confirm_delivery>
 8014ae0:	2000      	movs	r0, #0
 8014ae2:	b011      	add	sp, #68	@ 0x44
 8014ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae6:	200c      	movs	r0, #12
 8014ae8:	b011      	add	sp, #68	@ 0x44
 8014aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014af0:	f7f9 fb12 	bl	800e118 <uxr_flash_output_streams>
 8014af4:	2000      	movs	r0, #0
 8014af6:	b011      	add	sp, #68	@ 0x44
 8014af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014afa:	bf00      	nop
 8014afc:	080188c8 	.word	0x080188c8

08014b00 <rmw_take_response>:
 8014b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b04:	4604      	mov	r4, r0
 8014b06:	6800      	ldr	r0, [r0, #0]
 8014b08:	b088      	sub	sp, #32
 8014b0a:	4688      	mov	r8, r1
 8014b0c:	4617      	mov	r7, r2
 8014b0e:	461d      	mov	r5, r3
 8014b10:	b120      	cbz	r0, 8014b1c <rmw_take_response+0x1c>
 8014b12:	4b1e      	ldr	r3, [pc, #120]	@ (8014b8c <rmw_take_response+0x8c>)
 8014b14:	6819      	ldr	r1, [r3, #0]
 8014b16:	f7eb fb83 	bl	8000220 <strcmp>
 8014b1a:	bb78      	cbnz	r0, 8014b7c <rmw_take_response+0x7c>
 8014b1c:	b10d      	cbz	r5, 8014b22 <rmw_take_response+0x22>
 8014b1e:	2300      	movs	r3, #0
 8014b20:	702b      	strb	r3, [r5, #0]
 8014b22:	6864      	ldr	r4, [r4, #4]
 8014b24:	f7f7 fc84 	bl	800c430 <rmw_uxrce_clean_expired_static_input_buffer>
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f7f7 fc59 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014b2e:	4606      	mov	r6, r0
 8014b30:	b340      	cbz	r0, 8014b84 <rmw_take_response+0x84>
 8014b32:	6963      	ldr	r3, [r4, #20]
 8014b34:	6884      	ldr	r4, [r0, #8]
 8014b36:	68db      	ldr	r3, [r3, #12]
 8014b38:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014b3c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014b40:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014b44:	4798      	blx	r3
 8014b46:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014b4a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014b4e:	f104 0110 	add.w	r1, r4, #16
 8014b52:	4668      	mov	r0, sp
 8014b54:	f7f8 fe0e 	bl	800d774 <ucdr_init_buffer>
 8014b58:	4639      	mov	r1, r7
 8014b5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b5e:	4668      	mov	r0, sp
 8014b60:	4798      	blx	r3
 8014b62:	4631      	mov	r1, r6
 8014b64:	4604      	mov	r4, r0
 8014b66:	480a      	ldr	r0, [pc, #40]	@ (8014b90 <rmw_take_response+0x90>)
 8014b68:	f7ff fdf2 	bl	8014750 <put_memory>
 8014b6c:	b105      	cbz	r5, 8014b70 <rmw_take_response+0x70>
 8014b6e:	702c      	strb	r4, [r5, #0]
 8014b70:	f084 0001 	eor.w	r0, r4, #1
 8014b74:	b2c0      	uxtb	r0, r0
 8014b76:	b008      	add	sp, #32
 8014b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b7c:	200c      	movs	r0, #12
 8014b7e:	b008      	add	sp, #32
 8014b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b84:	2001      	movs	r0, #1
 8014b86:	b008      	add	sp, #32
 8014b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b8c:	080188c8 	.word	0x080188c8
 8014b90:	2000ca4c 	.word	0x2000ca4c

08014b94 <rmw_take_with_info>:
 8014b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b96:	4604      	mov	r4, r0
 8014b98:	6800      	ldr	r0, [r0, #0]
 8014b9a:	b089      	sub	sp, #36	@ 0x24
 8014b9c:	460f      	mov	r7, r1
 8014b9e:	4615      	mov	r5, r2
 8014ba0:	b128      	cbz	r0, 8014bae <rmw_take_with_info+0x1a>
 8014ba2:	4b24      	ldr	r3, [pc, #144]	@ (8014c34 <rmw_take_with_info+0xa0>)
 8014ba4:	6819      	ldr	r1, [r3, #0]
 8014ba6:	f7eb fb3b 	bl	8000220 <strcmp>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d13e      	bne.n	8014c2c <rmw_take_with_info+0x98>
 8014bae:	b305      	cbz	r5, 8014bf2 <rmw_take_with_info+0x5e>
 8014bb0:	6864      	ldr	r4, [r4, #4]
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	702b      	strb	r3, [r5, #0]
 8014bb6:	f7f7 fc3b 	bl	800c430 <rmw_uxrce_clean_expired_static_input_buffer>
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f7f7 fc10 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014bc0:	4606      	mov	r6, r0
 8014bc2:	b1f0      	cbz	r0, 8014c02 <rmw_take_with_info+0x6e>
 8014bc4:	6881      	ldr	r1, [r0, #8]
 8014bc6:	4668      	mov	r0, sp
 8014bc8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014bcc:	3110      	adds	r1, #16
 8014bce:	f7f8 fdd1 	bl	800d774 <ucdr_init_buffer>
 8014bd2:	69a3      	ldr	r3, [r4, #24]
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	4668      	mov	r0, sp
 8014bda:	4798      	blx	r3
 8014bdc:	4631      	mov	r1, r6
 8014bde:	4604      	mov	r4, r0
 8014be0:	4815      	ldr	r0, [pc, #84]	@ (8014c38 <rmw_take_with_info+0xa4>)
 8014be2:	f7ff fdb5 	bl	8014750 <put_memory>
 8014be6:	702c      	strb	r4, [r5, #0]
 8014be8:	f084 0001 	eor.w	r0, r4, #1
 8014bec:	b2c0      	uxtb	r0, r0
 8014bee:	b009      	add	sp, #36	@ 0x24
 8014bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bf2:	6864      	ldr	r4, [r4, #4]
 8014bf4:	f7f7 fc1c 	bl	800c430 <rmw_uxrce_clean_expired_static_input_buffer>
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f7f7 fbf1 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014bfe:	4605      	mov	r5, r0
 8014c00:	b910      	cbnz	r0, 8014c08 <rmw_take_with_info+0x74>
 8014c02:	2001      	movs	r0, #1
 8014c04:	b009      	add	sp, #36	@ 0x24
 8014c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c08:	68a9      	ldr	r1, [r5, #8]
 8014c0a:	4668      	mov	r0, sp
 8014c0c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014c10:	3110      	adds	r1, #16
 8014c12:	f7f8 fdaf 	bl	800d774 <ucdr_init_buffer>
 8014c16:	69a3      	ldr	r3, [r4, #24]
 8014c18:	4639      	mov	r1, r7
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	4668      	mov	r0, sp
 8014c1e:	4798      	blx	r3
 8014c20:	4629      	mov	r1, r5
 8014c22:	4604      	mov	r4, r0
 8014c24:	4804      	ldr	r0, [pc, #16]	@ (8014c38 <rmw_take_with_info+0xa4>)
 8014c26:	f7ff fd93 	bl	8014750 <put_memory>
 8014c2a:	e7dd      	b.n	8014be8 <rmw_take_with_info+0x54>
 8014c2c:	200c      	movs	r0, #12
 8014c2e:	b009      	add	sp, #36	@ 0x24
 8014c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c32:	bf00      	nop
 8014c34:	080188c8 	.word	0x080188c8
 8014c38:	2000ca4c 	.word	0x2000ca4c

08014c3c <rmw_wait>:
 8014c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c40:	b089      	sub	sp, #36	@ 0x24
 8014c42:	4605      	mov	r5, r0
 8014c44:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8014c46:	460e      	mov	r6, r1
 8014c48:	4698      	mov	r8, r3
 8014c4a:	4691      	mov	r9, r2
 8014c4c:	2a00      	cmp	r2, #0
 8014c4e:	f000 810a 	beq.w	8014e66 <rmw_wait+0x22a>
 8014c52:	b16c      	cbz	r4, 8014c70 <rmw_wait+0x34>
 8014c54:	4bae      	ldr	r3, [pc, #696]	@ (8014f10 <rmw_wait+0x2d4>)
 8014c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c58:	af04      	add	r7, sp, #16
 8014c5a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014c5e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c66:	f7ff faaf 	bl	80141c8 <rmw_time_equal>
 8014c6a:	2800      	cmp	r0, #0
 8014c6c:	f000 8127 	beq.w	8014ebe <rmw_wait+0x282>
 8014c70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014c74:	f7f7 fbdc 	bl	800c430 <rmw_uxrce_clean_expired_static_input_buffer>
 8014c78:	4ba6      	ldr	r3, [pc, #664]	@ (8014f14 <rmw_wait+0x2d8>)
 8014c7a:	681c      	ldr	r4, [r3, #0]
 8014c7c:	b14c      	cbz	r4, 8014c92 <rmw_wait+0x56>
 8014c7e:	4623      	mov	r3, r4
 8014c80:	2100      	movs	r1, #0
 8014c82:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014c86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014c8a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d1f7      	bne.n	8014c82 <rmw_wait+0x46>
 8014c92:	f1b9 0f00 	cmp.w	r9, #0
 8014c96:	d011      	beq.n	8014cbc <rmw_wait+0x80>
 8014c98:	f8d9 1000 	ldr.w	r1, [r9]
 8014c9c:	b171      	cbz	r1, 8014cbc <rmw_wait+0x80>
 8014c9e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	2001      	movs	r0, #1
 8014ca6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014caa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014cac:	6912      	ldr	r2, [r2, #16]
 8014cae:	3301      	adds	r3, #1
 8014cb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014cb4:	4299      	cmp	r1, r3
 8014cb6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014cba:	d1f4      	bne.n	8014ca6 <rmw_wait+0x6a>
 8014cbc:	f1b8 0f00 	cmp.w	r8, #0
 8014cc0:	d011      	beq.n	8014ce6 <rmw_wait+0xaa>
 8014cc2:	f8d8 1000 	ldr.w	r1, [r8]
 8014cc6:	b171      	cbz	r1, 8014ce6 <rmw_wait+0xaa>
 8014cc8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014ccc:	2300      	movs	r3, #0
 8014cce:	2001      	movs	r0, #1
 8014cd0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014cd4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014cd6:	6912      	ldr	r2, [r2, #16]
 8014cd8:	3301      	adds	r3, #1
 8014cda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014cde:	4299      	cmp	r1, r3
 8014ce0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014ce4:	d1f4      	bne.n	8014cd0 <rmw_wait+0x94>
 8014ce6:	b185      	cbz	r5, 8014d0a <rmw_wait+0xce>
 8014ce8:	6829      	ldr	r1, [r5, #0]
 8014cea:	b171      	cbz	r1, 8014d0a <rmw_wait+0xce>
 8014cec:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	2001      	movs	r0, #1
 8014cf4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014cf8:	6a12      	ldr	r2, [r2, #32]
 8014cfa:	6912      	ldr	r2, [r2, #16]
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014d02:	4299      	cmp	r1, r3
 8014d04:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014d08:	d1f4      	bne.n	8014cf4 <rmw_wait+0xb8>
 8014d0a:	b34c      	cbz	r4, 8014d60 <rmw_wait+0x124>
 8014d0c:	4622      	mov	r2, r4
 8014d0e:	2300      	movs	r3, #0
 8014d10:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014d14:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8014d18:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8014d1c:	440b      	add	r3, r1
 8014d1e:	b2db      	uxtb	r3, r3
 8014d20:	2a00      	cmp	r2, #0
 8014d22:	d1f5      	bne.n	8014d10 <rmw_wait+0xd4>
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 8084 	beq.w	8014e32 <rmw_wait+0x1f6>
 8014d2a:	1c7a      	adds	r2, r7, #1
 8014d2c:	d00d      	beq.n	8014d4a <rmw_wait+0x10e>
 8014d2e:	ee07 7a90 	vmov	s15, r7
 8014d32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014d36:	ee07 3a90 	vmov	s15, r3
 8014d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014d42:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014d46:	ee17 7a90 	vmov	r7, s15
 8014d4a:	68a0      	ldr	r0, [r4, #8]
 8014d4c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014d50:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f040 8090 	bne.w	8014e7a <rmw_wait+0x23e>
 8014d5a:	6864      	ldr	r4, [r4, #4]
 8014d5c:	2c00      	cmp	r4, #0
 8014d5e:	d1f4      	bne.n	8014d4a <rmw_wait+0x10e>
 8014d60:	f1b9 0f00 	cmp.w	r9, #0
 8014d64:	f000 80bc 	beq.w	8014ee0 <rmw_wait+0x2a4>
 8014d68:	f8d9 7000 	ldr.w	r7, [r9]
 8014d6c:	2f00      	cmp	r7, #0
 8014d6e:	f000 808e 	beq.w	8014e8e <rmw_wait+0x252>
 8014d72:	2400      	movs	r4, #0
 8014d74:	4627      	mov	r7, r4
 8014d76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014d7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014d7e:	f7f7 fb2f 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d05f      	beq.n	8014e46 <rmw_wait+0x20a>
 8014d86:	f8d9 3000 	ldr.w	r3, [r9]
 8014d8a:	3401      	adds	r4, #1
 8014d8c:	42a3      	cmp	r3, r4
 8014d8e:	f04f 0701 	mov.w	r7, #1
 8014d92:	d8f0      	bhi.n	8014d76 <rmw_wait+0x13a>
 8014d94:	f1b8 0f00 	cmp.w	r8, #0
 8014d98:	d012      	beq.n	8014dc0 <rmw_wait+0x184>
 8014d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8014d9e:	b17b      	cbz	r3, 8014dc0 <rmw_wait+0x184>
 8014da0:	2400      	movs	r4, #0
 8014da2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014da6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014daa:	f7f7 fb19 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d051      	beq.n	8014e56 <rmw_wait+0x21a>
 8014db2:	f8d8 3000 	ldr.w	r3, [r8]
 8014db6:	3401      	adds	r4, #1
 8014db8:	42a3      	cmp	r3, r4
 8014dba:	f04f 0701 	mov.w	r7, #1
 8014dbe:	d8f0      	bhi.n	8014da2 <rmw_wait+0x166>
 8014dc0:	b1dd      	cbz	r5, 8014dfa <rmw_wait+0x1be>
 8014dc2:	682b      	ldr	r3, [r5, #0]
 8014dc4:	b1cb      	cbz	r3, 8014dfa <rmw_wait+0x1be>
 8014dc6:	2400      	movs	r4, #0
 8014dc8:	686b      	ldr	r3, [r5, #4]
 8014dca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014dce:	f7f7 fb07 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014dd2:	b158      	cbz	r0, 8014dec <rmw_wait+0x1b0>
 8014dd4:	682b      	ldr	r3, [r5, #0]
 8014dd6:	3401      	adds	r4, #1
 8014dd8:	42a3      	cmp	r3, r4
 8014dda:	d969      	bls.n	8014eb0 <rmw_wait+0x274>
 8014ddc:	686b      	ldr	r3, [r5, #4]
 8014dde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014de2:	2701      	movs	r7, #1
 8014de4:	f7f7 fafc 	bl	800c3e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014de8:	2800      	cmp	r0, #0
 8014dea:	d1f3      	bne.n	8014dd4 <rmw_wait+0x198>
 8014dec:	e9d5 3200 	ldrd	r3, r2, [r5]
 8014df0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014df4:	3401      	adds	r4, #1
 8014df6:	42a3      	cmp	r3, r4
 8014df8:	d8e6      	bhi.n	8014dc8 <rmw_wait+0x18c>
 8014dfa:	b1a6      	cbz	r6, 8014e26 <rmw_wait+0x1ea>
 8014dfc:	6834      	ldr	r4, [r6, #0]
 8014dfe:	b194      	cbz	r4, 8014e26 <rmw_wait+0x1ea>
 8014e00:	2300      	movs	r3, #0
 8014e02:	461d      	mov	r5, r3
 8014e04:	e004      	b.n	8014e10 <rmw_wait+0x1d4>
 8014e06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	42a3      	cmp	r3, r4
 8014e0e:	d00a      	beq.n	8014e26 <rmw_wait+0x1ea>
 8014e10:	6870      	ldr	r0, [r6, #4]
 8014e12:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8014e16:	7c0a      	ldrb	r2, [r1, #16]
 8014e18:	2a00      	cmp	r2, #0
 8014e1a:	d0f4      	beq.n	8014e06 <rmw_wait+0x1ca>
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	42a3      	cmp	r3, r4
 8014e20:	740d      	strb	r5, [r1, #16]
 8014e22:	4617      	mov	r7, r2
 8014e24:	d1f4      	bne.n	8014e10 <rmw_wait+0x1d4>
 8014e26:	2f00      	cmp	r7, #0
 8014e28:	d03e      	beq.n	8014ea8 <rmw_wait+0x26c>
 8014e2a:	2000      	movs	r0, #0
 8014e2c:	b009      	add	sp, #36	@ 0x24
 8014e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e32:	68a0      	ldr	r0, [r4, #8]
 8014e34:	2100      	movs	r1, #0
 8014e36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014e3a:	f7f9 fcf3 	bl	800e824 <uxr_run_session_timeout>
 8014e3e:	6864      	ldr	r4, [r4, #4]
 8014e40:	2c00      	cmp	r4, #0
 8014e42:	d1f6      	bne.n	8014e32 <rmw_wait+0x1f6>
 8014e44:	e78c      	b.n	8014d60 <rmw_wait+0x124>
 8014e46:	e9d9 3200 	ldrd	r3, r2, [r9]
 8014e4a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014e4e:	3401      	adds	r4, #1
 8014e50:	42a3      	cmp	r3, r4
 8014e52:	d890      	bhi.n	8014d76 <rmw_wait+0x13a>
 8014e54:	e79e      	b.n	8014d94 <rmw_wait+0x158>
 8014e56:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014e5a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014e5e:	3401      	adds	r4, #1
 8014e60:	429c      	cmp	r4, r3
 8014e62:	d39e      	bcc.n	8014da2 <rmw_wait+0x166>
 8014e64:	e7ac      	b.n	8014dc0 <rmw_wait+0x184>
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f47f aef3 	bne.w	8014c52 <rmw_wait+0x16>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	f47f aef0 	bne.w	8014c52 <rmw_wait+0x16>
 8014e72:	2900      	cmp	r1, #0
 8014e74:	f47f aeed 	bne.w	8014c52 <rmw_wait+0x16>
 8014e78:	e7d7      	b.n	8014e2a <rmw_wait+0x1ee>
 8014e7a:	4639      	mov	r1, r7
 8014e7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014e80:	f7f9 fcea 	bl	800e858 <uxr_run_session_until_data>
 8014e84:	6864      	ldr	r4, [r4, #4]
 8014e86:	2c00      	cmp	r4, #0
 8014e88:	f47f af5f 	bne.w	8014d4a <rmw_wait+0x10e>
 8014e8c:	e768      	b.n	8014d60 <rmw_wait+0x124>
 8014e8e:	f1b8 0f00 	cmp.w	r8, #0
 8014e92:	d032      	beq.n	8014efa <rmw_wait+0x2be>
 8014e94:	f8d8 3000 	ldr.w	r3, [r8]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d181      	bne.n	8014da0 <rmw_wait+0x164>
 8014e9c:	461f      	mov	r7, r3
 8014e9e:	2d00      	cmp	r5, #0
 8014ea0:	d18f      	bne.n	8014dc2 <rmw_wait+0x186>
 8014ea2:	462f      	mov	r7, r5
 8014ea4:	2e00      	cmp	r6, #0
 8014ea6:	d1a9      	bne.n	8014dfc <rmw_wait+0x1c0>
 8014ea8:	2002      	movs	r0, #2
 8014eaa:	b009      	add	sp, #36	@ 0x24
 8014eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eb0:	2e00      	cmp	r6, #0
 8014eb2:	d0ba      	beq.n	8014e2a <rmw_wait+0x1ee>
 8014eb4:	6834      	ldr	r4, [r6, #0]
 8014eb6:	2701      	movs	r7, #1
 8014eb8:	2c00      	cmp	r4, #0
 8014eba:	d1a1      	bne.n	8014e00 <rmw_wait+0x1c4>
 8014ebc:	e7b5      	b.n	8014e2a <rmw_wait+0x1ee>
 8014ebe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014ec2:	f7ff f9d5 	bl	8014270 <rmw_time_total_nsec>
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	4a13      	ldr	r2, [pc, #76]	@ (8014f18 <rmw_wait+0x2dc>)
 8014eca:	f7eb fa61 	bl	8000390 <__aeabi_uldivmod>
 8014ece:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014ed2:	f171 0300 	sbcs.w	r3, r1, #0
 8014ed6:	4607      	mov	r7, r0
 8014ed8:	bfa8      	it	ge
 8014eda:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8014ede:	e6c9      	b.n	8014c74 <rmw_wait+0x38>
 8014ee0:	f1b8 0f00 	cmp.w	r8, #0
 8014ee4:	d009      	beq.n	8014efa <rmw_wait+0x2be>
 8014ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8014eea:	464f      	mov	r7, r9
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	f47f af57 	bne.w	8014da0 <rmw_wait+0x164>
 8014ef2:	2d00      	cmp	r5, #0
 8014ef4:	f47f af65 	bne.w	8014dc2 <rmw_wait+0x186>
 8014ef8:	e7d3      	b.n	8014ea2 <rmw_wait+0x266>
 8014efa:	b17d      	cbz	r5, 8014f1c <rmw_wait+0x2e0>
 8014efc:	682b      	ldr	r3, [r5, #0]
 8014efe:	4647      	mov	r7, r8
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	f47f af60 	bne.w	8014dc6 <rmw_wait+0x18a>
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	f47f af78 	bne.w	8014dfc <rmw_wait+0x1c0>
 8014f0c:	e7cc      	b.n	8014ea8 <rmw_wait+0x26c>
 8014f0e:	bf00      	nop
 8014f10:	08017d18 	.word	0x08017d18
 8014f14:	2000ca3c 	.word	0x2000ca3c
 8014f18:	000f4240 	.word	0x000f4240
 8014f1c:	2e00      	cmp	r6, #0
 8014f1e:	d0c3      	beq.n	8014ea8 <rmw_wait+0x26c>
 8014f20:	6834      	ldr	r4, [r6, #0]
 8014f22:	462f      	mov	r7, r5
 8014f24:	2c00      	cmp	r4, #0
 8014f26:	f47f af6b 	bne.w	8014e00 <rmw_wait+0x1c4>
 8014f2a:	e7bd      	b.n	8014ea8 <rmw_wait+0x26c>

08014f2c <rmw_create_wait_set>:
 8014f2c:	b508      	push	{r3, lr}
 8014f2e:	4803      	ldr	r0, [pc, #12]	@ (8014f3c <rmw_create_wait_set+0x10>)
 8014f30:	f7ff fbfe 	bl	8014730 <get_memory>
 8014f34:	b108      	cbz	r0, 8014f3a <rmw_create_wait_set+0xe>
 8014f36:	6880      	ldr	r0, [r0, #8]
 8014f38:	3010      	adds	r0, #16
 8014f3a:	bd08      	pop	{r3, pc}
 8014f3c:	2000ca7c 	.word	0x2000ca7c

08014f40 <rmw_destroy_wait_set>:
 8014f40:	b508      	push	{r3, lr}
 8014f42:	4b08      	ldr	r3, [pc, #32]	@ (8014f64 <rmw_destroy_wait_set+0x24>)
 8014f44:	6819      	ldr	r1, [r3, #0]
 8014f46:	b911      	cbnz	r1, 8014f4e <rmw_destroy_wait_set+0xe>
 8014f48:	e00a      	b.n	8014f60 <rmw_destroy_wait_set+0x20>
 8014f4a:	6849      	ldr	r1, [r1, #4]
 8014f4c:	b141      	cbz	r1, 8014f60 <rmw_destroy_wait_set+0x20>
 8014f4e:	688b      	ldr	r3, [r1, #8]
 8014f50:	3310      	adds	r3, #16
 8014f52:	4298      	cmp	r0, r3
 8014f54:	d1f9      	bne.n	8014f4a <rmw_destroy_wait_set+0xa>
 8014f56:	4803      	ldr	r0, [pc, #12]	@ (8014f64 <rmw_destroy_wait_set+0x24>)
 8014f58:	f7ff fbfa 	bl	8014750 <put_memory>
 8014f5c:	2000      	movs	r0, #0
 8014f5e:	bd08      	pop	{r3, pc}
 8014f60:	2001      	movs	r0, #1
 8014f62:	bd08      	pop	{r3, pc}
 8014f64:	2000ca7c 	.word	0x2000ca7c

08014f68 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f6c:	6805      	ldr	r5, [r0, #0]
 8014f6e:	4604      	mov	r4, r0
 8014f70:	4628      	mov	r0, r5
 8014f72:	460e      	mov	r6, r1
 8014f74:	f7eb f954 	bl	8000220 <strcmp>
 8014f78:	b1c8      	cbz	r0, 8014fae <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014f7a:	4b11      	ldr	r3, [pc, #68]	@ (8014fc0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	429d      	cmp	r5, r3
 8014f80:	d112      	bne.n	8014fa8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014f82:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014f86:	f8d8 4000 	ldr.w	r4, [r8]
 8014f8a:	b16c      	cbz	r4, 8014fa8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014f8c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014f90:	2700      	movs	r7, #0
 8014f92:	3d04      	subs	r5, #4
 8014f94:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014f98:	4631      	mov	r1, r6
 8014f9a:	f7eb f941 	bl	8000220 <strcmp>
 8014f9e:	00bb      	lsls	r3, r7, #2
 8014fa0:	b140      	cbz	r0, 8014fb4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8014fa2:	3701      	adds	r7, #1
 8014fa4:	42bc      	cmp	r4, r7
 8014fa6:	d1f5      	bne.n	8014f94 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014fa8:	2000      	movs	r0, #0
 8014faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fae:	4620      	mov	r0, r4
 8014fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fb4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fbc:	58d3      	ldr	r3, [r2, r3]
 8014fbe:	4718      	bx	r3
 8014fc0:	20000130 	.word	0x20000130

08014fc4 <std_msgs__msg__Bool__init>:
 8014fc4:	3800      	subs	r0, #0
 8014fc6:	bf18      	it	ne
 8014fc8:	2001      	movne	r0, #1
 8014fca:	4770      	bx	lr

08014fcc <std_msgs__msg__Bool__fini>:
 8014fcc:	4770      	bx	lr
 8014fce:	bf00      	nop

08014fd0 <std_msgs__msg__UInt16__init>:
 8014fd0:	3800      	subs	r0, #0
 8014fd2:	bf18      	it	ne
 8014fd4:	2001      	movne	r0, #1
 8014fd6:	4770      	bx	lr

08014fd8 <std_msgs__msg__UInt16__fini>:
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop

08014fdc <ucdr_serialize_endian_array_char>:
 8014fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	461f      	mov	r7, r3
 8014fe4:	4605      	mov	r5, r0
 8014fe6:	4690      	mov	r8, r2
 8014fe8:	f7f8 fb70 	bl	800d6cc <ucdr_check_buffer_available_for>
 8014fec:	b9e0      	cbnz	r0, 8015028 <ucdr_serialize_endian_array_char+0x4c>
 8014fee:	463e      	mov	r6, r7
 8014ff0:	e009      	b.n	8015006 <ucdr_serialize_endian_array_char+0x2a>
 8014ff2:	68a8      	ldr	r0, [r5, #8]
 8014ff4:	f001 ff59 	bl	8016eaa <memcpy>
 8014ff8:	68ab      	ldr	r3, [r5, #8]
 8014ffa:	6928      	ldr	r0, [r5, #16]
 8014ffc:	4423      	add	r3, r4
 8014ffe:	4420      	add	r0, r4
 8015000:	1b36      	subs	r6, r6, r4
 8015002:	60ab      	str	r3, [r5, #8]
 8015004:	6128      	str	r0, [r5, #16]
 8015006:	4631      	mov	r1, r6
 8015008:	2201      	movs	r2, #1
 801500a:	4628      	mov	r0, r5
 801500c:	f7f8 fbe6 	bl	800d7dc <ucdr_check_final_buffer_behavior_array>
 8015010:	1bb9      	subs	r1, r7, r6
 8015012:	4441      	add	r1, r8
 8015014:	4604      	mov	r4, r0
 8015016:	4602      	mov	r2, r0
 8015018:	2800      	cmp	r0, #0
 801501a:	d1ea      	bne.n	8014ff2 <ucdr_serialize_endian_array_char+0x16>
 801501c:	2301      	movs	r3, #1
 801501e:	7da8      	ldrb	r0, [r5, #22]
 8015020:	756b      	strb	r3, [r5, #21]
 8015022:	4058      	eors	r0, r3
 8015024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015028:	463a      	mov	r2, r7
 801502a:	68a8      	ldr	r0, [r5, #8]
 801502c:	4641      	mov	r1, r8
 801502e:	f001 ff3c 	bl	8016eaa <memcpy>
 8015032:	68aa      	ldr	r2, [r5, #8]
 8015034:	692b      	ldr	r3, [r5, #16]
 8015036:	443a      	add	r2, r7
 8015038:	443b      	add	r3, r7
 801503a:	60aa      	str	r2, [r5, #8]
 801503c:	612b      	str	r3, [r5, #16]
 801503e:	e7ed      	b.n	801501c <ucdr_serialize_endian_array_char+0x40>

08015040 <ucdr_deserialize_endian_array_char>:
 8015040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015044:	4619      	mov	r1, r3
 8015046:	461f      	mov	r7, r3
 8015048:	4605      	mov	r5, r0
 801504a:	4690      	mov	r8, r2
 801504c:	f7f8 fb3e 	bl	800d6cc <ucdr_check_buffer_available_for>
 8015050:	b9e0      	cbnz	r0, 801508c <ucdr_deserialize_endian_array_char+0x4c>
 8015052:	463e      	mov	r6, r7
 8015054:	e009      	b.n	801506a <ucdr_deserialize_endian_array_char+0x2a>
 8015056:	68a9      	ldr	r1, [r5, #8]
 8015058:	f001 ff27 	bl	8016eaa <memcpy>
 801505c:	68ab      	ldr	r3, [r5, #8]
 801505e:	6928      	ldr	r0, [r5, #16]
 8015060:	4423      	add	r3, r4
 8015062:	4420      	add	r0, r4
 8015064:	1b36      	subs	r6, r6, r4
 8015066:	60ab      	str	r3, [r5, #8]
 8015068:	6128      	str	r0, [r5, #16]
 801506a:	2201      	movs	r2, #1
 801506c:	4631      	mov	r1, r6
 801506e:	4628      	mov	r0, r5
 8015070:	f7f8 fbb4 	bl	800d7dc <ucdr_check_final_buffer_behavior_array>
 8015074:	4604      	mov	r4, r0
 8015076:	1bb8      	subs	r0, r7, r6
 8015078:	4440      	add	r0, r8
 801507a:	4622      	mov	r2, r4
 801507c:	2c00      	cmp	r4, #0
 801507e:	d1ea      	bne.n	8015056 <ucdr_deserialize_endian_array_char+0x16>
 8015080:	2301      	movs	r3, #1
 8015082:	7da8      	ldrb	r0, [r5, #22]
 8015084:	756b      	strb	r3, [r5, #21]
 8015086:	4058      	eors	r0, r3
 8015088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801508c:	463a      	mov	r2, r7
 801508e:	68a9      	ldr	r1, [r5, #8]
 8015090:	4640      	mov	r0, r8
 8015092:	f001 ff0a 	bl	8016eaa <memcpy>
 8015096:	68aa      	ldr	r2, [r5, #8]
 8015098:	692b      	ldr	r3, [r5, #16]
 801509a:	443a      	add	r2, r7
 801509c:	443b      	add	r3, r7
 801509e:	60aa      	str	r2, [r5, #8]
 80150a0:	612b      	str	r3, [r5, #16]
 80150a2:	e7ed      	b.n	8015080 <ucdr_deserialize_endian_array_char+0x40>

080150a4 <ucdr_serialize_array_uint8_t>:
 80150a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a8:	4688      	mov	r8, r1
 80150aa:	4611      	mov	r1, r2
 80150ac:	4617      	mov	r7, r2
 80150ae:	4605      	mov	r5, r0
 80150b0:	f7f8 fb0c 	bl	800d6cc <ucdr_check_buffer_available_for>
 80150b4:	b9e0      	cbnz	r0, 80150f0 <ucdr_serialize_array_uint8_t+0x4c>
 80150b6:	463e      	mov	r6, r7
 80150b8:	e009      	b.n	80150ce <ucdr_serialize_array_uint8_t+0x2a>
 80150ba:	68a8      	ldr	r0, [r5, #8]
 80150bc:	f001 fef5 	bl	8016eaa <memcpy>
 80150c0:	68aa      	ldr	r2, [r5, #8]
 80150c2:	692b      	ldr	r3, [r5, #16]
 80150c4:	4422      	add	r2, r4
 80150c6:	4423      	add	r3, r4
 80150c8:	1b36      	subs	r6, r6, r4
 80150ca:	60aa      	str	r2, [r5, #8]
 80150cc:	612b      	str	r3, [r5, #16]
 80150ce:	4631      	mov	r1, r6
 80150d0:	2201      	movs	r2, #1
 80150d2:	4628      	mov	r0, r5
 80150d4:	f7f8 fb82 	bl	800d7dc <ucdr_check_final_buffer_behavior_array>
 80150d8:	1bb9      	subs	r1, r7, r6
 80150da:	4441      	add	r1, r8
 80150dc:	4604      	mov	r4, r0
 80150de:	4602      	mov	r2, r0
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d1ea      	bne.n	80150ba <ucdr_serialize_array_uint8_t+0x16>
 80150e4:	2301      	movs	r3, #1
 80150e6:	7da8      	ldrb	r0, [r5, #22]
 80150e8:	756b      	strb	r3, [r5, #21]
 80150ea:	4058      	eors	r0, r3
 80150ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150f0:	463a      	mov	r2, r7
 80150f2:	68a8      	ldr	r0, [r5, #8]
 80150f4:	4641      	mov	r1, r8
 80150f6:	f001 fed8 	bl	8016eaa <memcpy>
 80150fa:	68aa      	ldr	r2, [r5, #8]
 80150fc:	692b      	ldr	r3, [r5, #16]
 80150fe:	443a      	add	r2, r7
 8015100:	443b      	add	r3, r7
 8015102:	60aa      	str	r2, [r5, #8]
 8015104:	612b      	str	r3, [r5, #16]
 8015106:	e7ed      	b.n	80150e4 <ucdr_serialize_array_uint8_t+0x40>

08015108 <ucdr_serialize_endian_array_uint8_t>:
 8015108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801510c:	4619      	mov	r1, r3
 801510e:	461f      	mov	r7, r3
 8015110:	4605      	mov	r5, r0
 8015112:	4690      	mov	r8, r2
 8015114:	f7f8 fada 	bl	800d6cc <ucdr_check_buffer_available_for>
 8015118:	b9e0      	cbnz	r0, 8015154 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801511a:	463e      	mov	r6, r7
 801511c:	e009      	b.n	8015132 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801511e:	68a8      	ldr	r0, [r5, #8]
 8015120:	f001 fec3 	bl	8016eaa <memcpy>
 8015124:	68ab      	ldr	r3, [r5, #8]
 8015126:	6928      	ldr	r0, [r5, #16]
 8015128:	4423      	add	r3, r4
 801512a:	4420      	add	r0, r4
 801512c:	1b36      	subs	r6, r6, r4
 801512e:	60ab      	str	r3, [r5, #8]
 8015130:	6128      	str	r0, [r5, #16]
 8015132:	4631      	mov	r1, r6
 8015134:	2201      	movs	r2, #1
 8015136:	4628      	mov	r0, r5
 8015138:	f7f8 fb50 	bl	800d7dc <ucdr_check_final_buffer_behavior_array>
 801513c:	1bb9      	subs	r1, r7, r6
 801513e:	4441      	add	r1, r8
 8015140:	4604      	mov	r4, r0
 8015142:	4602      	mov	r2, r0
 8015144:	2800      	cmp	r0, #0
 8015146:	d1ea      	bne.n	801511e <ucdr_serialize_endian_array_uint8_t+0x16>
 8015148:	2301      	movs	r3, #1
 801514a:	7da8      	ldrb	r0, [r5, #22]
 801514c:	756b      	strb	r3, [r5, #21]
 801514e:	4058      	eors	r0, r3
 8015150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015154:	463a      	mov	r2, r7
 8015156:	68a8      	ldr	r0, [r5, #8]
 8015158:	4641      	mov	r1, r8
 801515a:	f001 fea6 	bl	8016eaa <memcpy>
 801515e:	68aa      	ldr	r2, [r5, #8]
 8015160:	692b      	ldr	r3, [r5, #16]
 8015162:	443a      	add	r2, r7
 8015164:	443b      	add	r3, r7
 8015166:	60aa      	str	r2, [r5, #8]
 8015168:	612b      	str	r3, [r5, #16]
 801516a:	e7ed      	b.n	8015148 <ucdr_serialize_endian_array_uint8_t+0x40>

0801516c <ucdr_deserialize_array_uint8_t>:
 801516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015170:	4688      	mov	r8, r1
 8015172:	4611      	mov	r1, r2
 8015174:	4617      	mov	r7, r2
 8015176:	4605      	mov	r5, r0
 8015178:	f7f8 faa8 	bl	800d6cc <ucdr_check_buffer_available_for>
 801517c:	b9e0      	cbnz	r0, 80151b8 <ucdr_deserialize_array_uint8_t+0x4c>
 801517e:	463e      	mov	r6, r7
 8015180:	e009      	b.n	8015196 <ucdr_deserialize_array_uint8_t+0x2a>
 8015182:	68a9      	ldr	r1, [r5, #8]
 8015184:	f001 fe91 	bl	8016eaa <memcpy>
 8015188:	68aa      	ldr	r2, [r5, #8]
 801518a:	692b      	ldr	r3, [r5, #16]
 801518c:	4422      	add	r2, r4
 801518e:	4423      	add	r3, r4
 8015190:	1b36      	subs	r6, r6, r4
 8015192:	60aa      	str	r2, [r5, #8]
 8015194:	612b      	str	r3, [r5, #16]
 8015196:	2201      	movs	r2, #1
 8015198:	4631      	mov	r1, r6
 801519a:	4628      	mov	r0, r5
 801519c:	f7f8 fb1e 	bl	800d7dc <ucdr_check_final_buffer_behavior_array>
 80151a0:	4604      	mov	r4, r0
 80151a2:	1bb8      	subs	r0, r7, r6
 80151a4:	4440      	add	r0, r8
 80151a6:	4622      	mov	r2, r4
 80151a8:	2c00      	cmp	r4, #0
 80151aa:	d1ea      	bne.n	8015182 <ucdr_deserialize_array_uint8_t+0x16>
 80151ac:	2301      	movs	r3, #1
 80151ae:	7da8      	ldrb	r0, [r5, #22]
 80151b0:	756b      	strb	r3, [r5, #21]
 80151b2:	4058      	eors	r0, r3
 80151b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151b8:	463a      	mov	r2, r7
 80151ba:	68a9      	ldr	r1, [r5, #8]
 80151bc:	4640      	mov	r0, r8
 80151be:	f001 fe74 	bl	8016eaa <memcpy>
 80151c2:	68aa      	ldr	r2, [r5, #8]
 80151c4:	692b      	ldr	r3, [r5, #16]
 80151c6:	443a      	add	r2, r7
 80151c8:	443b      	add	r3, r7
 80151ca:	60aa      	str	r2, [r5, #8]
 80151cc:	612b      	str	r3, [r5, #16]
 80151ce:	e7ed      	b.n	80151ac <ucdr_deserialize_array_uint8_t+0x40>

080151d0 <ucdr_deserialize_endian_array_uint8_t>:
 80151d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151d4:	4619      	mov	r1, r3
 80151d6:	461f      	mov	r7, r3
 80151d8:	4605      	mov	r5, r0
 80151da:	4690      	mov	r8, r2
 80151dc:	f7f8 fa76 	bl	800d6cc <ucdr_check_buffer_available_for>
 80151e0:	b9e0      	cbnz	r0, 801521c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80151e2:	463e      	mov	r6, r7
 80151e4:	e009      	b.n	80151fa <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80151e6:	68a9      	ldr	r1, [r5, #8]
 80151e8:	f001 fe5f 	bl	8016eaa <memcpy>
 80151ec:	68ab      	ldr	r3, [r5, #8]
 80151ee:	6928      	ldr	r0, [r5, #16]
 80151f0:	4423      	add	r3, r4
 80151f2:	4420      	add	r0, r4
 80151f4:	1b36      	subs	r6, r6, r4
 80151f6:	60ab      	str	r3, [r5, #8]
 80151f8:	6128      	str	r0, [r5, #16]
 80151fa:	2201      	movs	r2, #1
 80151fc:	4631      	mov	r1, r6
 80151fe:	4628      	mov	r0, r5
 8015200:	f7f8 faec 	bl	800d7dc <ucdr_check_final_buffer_behavior_array>
 8015204:	4604      	mov	r4, r0
 8015206:	1bb8      	subs	r0, r7, r6
 8015208:	4440      	add	r0, r8
 801520a:	4622      	mov	r2, r4
 801520c:	2c00      	cmp	r4, #0
 801520e:	d1ea      	bne.n	80151e6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015210:	2301      	movs	r3, #1
 8015212:	7da8      	ldrb	r0, [r5, #22]
 8015214:	756b      	strb	r3, [r5, #21]
 8015216:	4058      	eors	r0, r3
 8015218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801521c:	463a      	mov	r2, r7
 801521e:	68a9      	ldr	r1, [r5, #8]
 8015220:	4640      	mov	r0, r8
 8015222:	f001 fe42 	bl	8016eaa <memcpy>
 8015226:	68aa      	ldr	r2, [r5, #8]
 8015228:	692b      	ldr	r3, [r5, #16]
 801522a:	443a      	add	r2, r7
 801522c:	443b      	add	r3, r7
 801522e:	60aa      	str	r2, [r5, #8]
 8015230:	612b      	str	r3, [r5, #16]
 8015232:	e7ed      	b.n	8015210 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015234 <ucdr_serialize_sequence_char>:
 8015234:	b570      	push	{r4, r5, r6, lr}
 8015236:	4615      	mov	r5, r2
 8015238:	460e      	mov	r6, r1
 801523a:	7d01      	ldrb	r1, [r0, #20]
 801523c:	4604      	mov	r4, r0
 801523e:	f7f7 fd9b 	bl	800cd78 <ucdr_serialize_endian_uint32_t>
 8015242:	b90d      	cbnz	r5, 8015248 <ucdr_serialize_sequence_char+0x14>
 8015244:	2001      	movs	r0, #1
 8015246:	bd70      	pop	{r4, r5, r6, pc}
 8015248:	7d21      	ldrb	r1, [r4, #20]
 801524a:	462b      	mov	r3, r5
 801524c:	4632      	mov	r2, r6
 801524e:	4620      	mov	r0, r4
 8015250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015254:	f7ff bec2 	b.w	8014fdc <ucdr_serialize_endian_array_char>

08015258 <ucdr_deserialize_sequence_char>:
 8015258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801525c:	461d      	mov	r5, r3
 801525e:	4616      	mov	r6, r2
 8015260:	460f      	mov	r7, r1
 8015262:	461a      	mov	r2, r3
 8015264:	7d01      	ldrb	r1, [r0, #20]
 8015266:	4604      	mov	r4, r0
 8015268:	f7f7 feae 	bl	800cfc8 <ucdr_deserialize_endian_uint32_t>
 801526c:	682b      	ldr	r3, [r5, #0]
 801526e:	429e      	cmp	r6, r3
 8015270:	bf3c      	itt	cc
 8015272:	2201      	movcc	r2, #1
 8015274:	75a2      	strbcc	r2, [r4, #22]
 8015276:	b913      	cbnz	r3, 801527e <ucdr_deserialize_sequence_char+0x26>
 8015278:	2001      	movs	r0, #1
 801527a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801527e:	7d21      	ldrb	r1, [r4, #20]
 8015280:	463a      	mov	r2, r7
 8015282:	4620      	mov	r0, r4
 8015284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015288:	f7ff beda 	b.w	8015040 <ucdr_deserialize_endian_array_char>

0801528c <ucdr_serialize_sequence_uint8_t>:
 801528c:	b570      	push	{r4, r5, r6, lr}
 801528e:	4615      	mov	r5, r2
 8015290:	460e      	mov	r6, r1
 8015292:	7d01      	ldrb	r1, [r0, #20]
 8015294:	4604      	mov	r4, r0
 8015296:	f7f7 fd6f 	bl	800cd78 <ucdr_serialize_endian_uint32_t>
 801529a:	b90d      	cbnz	r5, 80152a0 <ucdr_serialize_sequence_uint8_t+0x14>
 801529c:	2001      	movs	r0, #1
 801529e:	bd70      	pop	{r4, r5, r6, pc}
 80152a0:	7d21      	ldrb	r1, [r4, #20]
 80152a2:	462b      	mov	r3, r5
 80152a4:	4632      	mov	r2, r6
 80152a6:	4620      	mov	r0, r4
 80152a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152ac:	f7ff bf2c 	b.w	8015108 <ucdr_serialize_endian_array_uint8_t>

080152b0 <ucdr_deserialize_sequence_uint8_t>:
 80152b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b4:	461d      	mov	r5, r3
 80152b6:	4616      	mov	r6, r2
 80152b8:	460f      	mov	r7, r1
 80152ba:	461a      	mov	r2, r3
 80152bc:	7d01      	ldrb	r1, [r0, #20]
 80152be:	4604      	mov	r4, r0
 80152c0:	f7f7 fe82 	bl	800cfc8 <ucdr_deserialize_endian_uint32_t>
 80152c4:	682b      	ldr	r3, [r5, #0]
 80152c6:	429e      	cmp	r6, r3
 80152c8:	bf3c      	itt	cc
 80152ca:	2201      	movcc	r2, #1
 80152cc:	75a2      	strbcc	r2, [r4, #22]
 80152ce:	b913      	cbnz	r3, 80152d6 <ucdr_deserialize_sequence_uint8_t+0x26>
 80152d0:	2001      	movs	r0, #1
 80152d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d6:	7d21      	ldrb	r1, [r4, #20]
 80152d8:	463a      	mov	r2, r7
 80152da:	4620      	mov	r0, r4
 80152dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152e0:	f7ff bf76 	b.w	80151d0 <ucdr_deserialize_endian_array_uint8_t>

080152e4 <ucdr_serialize_string>:
 80152e4:	b510      	push	{r4, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	4604      	mov	r4, r0
 80152ea:	4608      	mov	r0, r1
 80152ec:	9101      	str	r1, [sp, #4]
 80152ee:	f7ea ffa1 	bl	8000234 <strlen>
 80152f2:	9901      	ldr	r1, [sp, #4]
 80152f4:	1c42      	adds	r2, r0, #1
 80152f6:	4620      	mov	r0, r4
 80152f8:	b002      	add	sp, #8
 80152fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152fe:	f7ff bf99 	b.w	8015234 <ucdr_serialize_sequence_char>
 8015302:	bf00      	nop

08015304 <ucdr_deserialize_string>:
 8015304:	b500      	push	{lr}
 8015306:	b083      	sub	sp, #12
 8015308:	ab01      	add	r3, sp, #4
 801530a:	f7ff ffa5 	bl	8015258 <ucdr_deserialize_sequence_char>
 801530e:	b003      	add	sp, #12
 8015310:	f85d fb04 	ldr.w	pc, [sp], #4

08015314 <uxr_init_input_best_effort_stream>:
 8015314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015318:	8003      	strh	r3, [r0, #0]
 801531a:	4770      	bx	lr

0801531c <uxr_reset_input_best_effort_stream>:
 801531c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015320:	8003      	strh	r3, [r0, #0]
 8015322:	4770      	bx	lr

08015324 <uxr_receive_best_effort_message>:
 8015324:	b538      	push	{r3, r4, r5, lr}
 8015326:	4604      	mov	r4, r0
 8015328:	8800      	ldrh	r0, [r0, #0]
 801532a:	460d      	mov	r5, r1
 801532c:	f000 fd42 	bl	8015db4 <uxr_seq_num_cmp>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015338:	bfb8      	it	lt
 801533a:	8025      	strhlt	r5, [r4, #0]
 801533c:	bd38      	pop	{r3, r4, r5, pc}
 801533e:	bf00      	nop

08015340 <on_full_input_buffer>:
 8015340:	b570      	push	{r4, r5, r6, lr}
 8015342:	4605      	mov	r5, r0
 8015344:	460c      	mov	r4, r1
 8015346:	682b      	ldr	r3, [r5, #0]
 8015348:	6809      	ldr	r1, [r1, #0]
 801534a:	8920      	ldrh	r0, [r4, #8]
 801534c:	6862      	ldr	r2, [r4, #4]
 801534e:	fbb2 f2f0 	udiv	r2, r2, r0
 8015352:	eba3 0c01 	sub.w	ip, r3, r1
 8015356:	fbbc fcf2 	udiv	ip, ip, r2
 801535a:	f10c 0c01 	add.w	ip, ip, #1
 801535e:	fa1f f38c 	uxth.w	r3, ip
 8015362:	fbb3 f6f0 	udiv	r6, r3, r0
 8015366:	fb00 3316 	mls	r3, r0, r6, r3
 801536a:	b29b      	uxth	r3, r3
 801536c:	fb02 f303 	mul.w	r3, r2, r3
 8015370:	1d18      	adds	r0, r3, #4
 8015372:	4408      	add	r0, r1
 8015374:	7d26      	ldrb	r6, [r4, #20]
 8015376:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801537a:	b116      	cbz	r6, 8015382 <on_full_input_buffer+0x42>
 801537c:	2600      	movs	r6, #0
 801537e:	f840 6c04 	str.w	r6, [r0, #-4]
 8015382:	2a03      	cmp	r2, #3
 8015384:	d801      	bhi.n	801538a <on_full_input_buffer+0x4a>
 8015386:	2001      	movs	r0, #1
 8015388:	bd70      	pop	{r4, r5, r6, pc}
 801538a:	3308      	adds	r3, #8
 801538c:	4419      	add	r1, r3
 801538e:	4628      	mov	r0, r5
 8015390:	692b      	ldr	r3, [r5, #16]
 8015392:	3a04      	subs	r2, #4
 8015394:	f7f8 f9e6 	bl	800d764 <ucdr_init_buffer_origin>
 8015398:	4628      	mov	r0, r5
 801539a:	4903      	ldr	r1, [pc, #12]	@ (80153a8 <on_full_input_buffer+0x68>)
 801539c:	4622      	mov	r2, r4
 801539e:	f7f8 f9bd 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 80153a2:	2000      	movs	r0, #0
 80153a4:	bd70      	pop	{r4, r5, r6, pc}
 80153a6:	bf00      	nop
 80153a8:	08015341 	.word	0x08015341

080153ac <uxr_init_input_reliable_stream>:
 80153ac:	b500      	push	{lr}
 80153ae:	e9c0 1200 	strd	r1, r2, [r0]
 80153b2:	f04f 0e00 	mov.w	lr, #0
 80153b6:	9a01      	ldr	r2, [sp, #4]
 80153b8:	8103      	strh	r3, [r0, #8]
 80153ba:	6102      	str	r2, [r0, #16]
 80153bc:	f880 e014 	strb.w	lr, [r0, #20]
 80153c0:	b1d3      	cbz	r3, 80153f8 <uxr_init_input_reliable_stream+0x4c>
 80153c2:	f8c1 e000 	str.w	lr, [r1]
 80153c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80153ca:	f1bc 0f01 	cmp.w	ip, #1
 80153ce:	d913      	bls.n	80153f8 <uxr_init_input_reliable_stream+0x4c>
 80153d0:	2301      	movs	r3, #1
 80153d2:	fbb3 f1fc 	udiv	r1, r3, ip
 80153d6:	fb0c 3111 	mls	r1, ip, r1, r3
 80153da:	b289      	uxth	r1, r1
 80153dc:	6842      	ldr	r2, [r0, #4]
 80153de:	fbb2 f2fc 	udiv	r2, r2, ip
 80153e2:	fb01 f202 	mul.w	r2, r1, r2
 80153e6:	6801      	ldr	r1, [r0, #0]
 80153e8:	f841 e002 	str.w	lr, [r1, r2]
 80153ec:	3301      	adds	r3, #1
 80153ee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	459c      	cmp	ip, r3
 80153f6:	d8ec      	bhi.n	80153d2 <uxr_init_input_reliable_stream+0x26>
 80153f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80153fc:	60c3      	str	r3, [r0, #12]
 80153fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8015402:	bf00      	nop

08015404 <uxr_reset_input_reliable_stream>:
 8015404:	8901      	ldrh	r1, [r0, #8]
 8015406:	b1e9      	cbz	r1, 8015444 <uxr_reset_input_reliable_stream+0x40>
 8015408:	f04f 0c00 	mov.w	ip, #0
 801540c:	b500      	push	{lr}
 801540e:	4663      	mov	r3, ip
 8015410:	46e6      	mov	lr, ip
 8015412:	fbb3 f2f1 	udiv	r2, r3, r1
 8015416:	fb01 3312 	mls	r3, r1, r2, r3
 801541a:	b29b      	uxth	r3, r3
 801541c:	6842      	ldr	r2, [r0, #4]
 801541e:	fbb2 f2f1 	udiv	r2, r2, r1
 8015422:	fb02 f303 	mul.w	r3, r2, r3
 8015426:	6802      	ldr	r2, [r0, #0]
 8015428:	f842 e003 	str.w	lr, [r2, r3]
 801542c:	f10c 0c01 	add.w	ip, ip, #1
 8015430:	8901      	ldrh	r1, [r0, #8]
 8015432:	fa1f f38c 	uxth.w	r3, ip
 8015436:	4299      	cmp	r1, r3
 8015438:	d8eb      	bhi.n	8015412 <uxr_reset_input_reliable_stream+0xe>
 801543a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801543e:	60c3      	str	r3, [r0, #12]
 8015440:	f85d fb04 	ldr.w	pc, [sp], #4
 8015444:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015448:	60c3      	str	r3, [r0, #12]
 801544a:	4770      	bx	lr

0801544c <uxr_receive_reliable_message>:
 801544c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015450:	4604      	mov	r4, r0
 8015452:	460d      	mov	r5, r1
 8015454:	8901      	ldrh	r1, [r0, #8]
 8015456:	8980      	ldrh	r0, [r0, #12]
 8015458:	4690      	mov	r8, r2
 801545a:	461f      	mov	r7, r3
 801545c:	f000 fca2 	bl	8015da4 <uxr_seq_num_add>
 8015460:	4629      	mov	r1, r5
 8015462:	4606      	mov	r6, r0
 8015464:	89a0      	ldrh	r0, [r4, #12]
 8015466:	f000 fca5 	bl	8015db4 <uxr_seq_num_cmp>
 801546a:	2800      	cmp	r0, #0
 801546c:	db0a      	blt.n	8015484 <uxr_receive_reliable_message+0x38>
 801546e:	2600      	movs	r6, #0
 8015470:	89e0      	ldrh	r0, [r4, #14]
 8015472:	4629      	mov	r1, r5
 8015474:	f000 fc9e 	bl	8015db4 <uxr_seq_num_cmp>
 8015478:	2800      	cmp	r0, #0
 801547a:	da00      	bge.n	801547e <uxr_receive_reliable_message+0x32>
 801547c:	81e5      	strh	r5, [r4, #14]
 801547e:	4630      	mov	r0, r6
 8015480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015484:	4630      	mov	r0, r6
 8015486:	4629      	mov	r1, r5
 8015488:	f000 fc94 	bl	8015db4 <uxr_seq_num_cmp>
 801548c:	2800      	cmp	r0, #0
 801548e:	dbee      	blt.n	801546e <uxr_receive_reliable_message+0x22>
 8015490:	6923      	ldr	r3, [r4, #16]
 8015492:	4640      	mov	r0, r8
 8015494:	4798      	blx	r3
 8015496:	2101      	movs	r1, #1
 8015498:	4681      	mov	r9, r0
 801549a:	89a0      	ldrh	r0, [r4, #12]
 801549c:	f000 fc82 	bl	8015da4 <uxr_seq_num_add>
 80154a0:	f1b9 0f00 	cmp.w	r9, #0
 80154a4:	d101      	bne.n	80154aa <uxr_receive_reliable_message+0x5e>
 80154a6:	4285      	cmp	r5, r0
 80154a8:	d047      	beq.n	801553a <uxr_receive_reliable_message+0xee>
 80154aa:	8922      	ldrh	r2, [r4, #8]
 80154ac:	fbb5 f0f2 	udiv	r0, r5, r2
 80154b0:	fb02 5010 	mls	r0, r2, r0, r5
 80154b4:	b280      	uxth	r0, r0
 80154b6:	6863      	ldr	r3, [r4, #4]
 80154b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80154bc:	fb00 f303 	mul.w	r3, r0, r3
 80154c0:	6820      	ldr	r0, [r4, #0]
 80154c2:	3304      	adds	r3, #4
 80154c4:	4418      	add	r0, r3
 80154c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d1cf      	bne.n	801546e <uxr_receive_reliable_message+0x22>
 80154ce:	4641      	mov	r1, r8
 80154d0:	463a      	mov	r2, r7
 80154d2:	f001 fcea 	bl	8016eaa <memcpy>
 80154d6:	8921      	ldrh	r1, [r4, #8]
 80154d8:	fbb5 f2f1 	udiv	r2, r5, r1
 80154dc:	fb01 5212 	mls	r2, r1, r2, r5
 80154e0:	b292      	uxth	r2, r2
 80154e2:	6863      	ldr	r3, [r4, #4]
 80154e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80154e8:	fb02 f303 	mul.w	r3, r2, r3
 80154ec:	6822      	ldr	r2, [r4, #0]
 80154ee:	50d7      	str	r7, [r2, r3]
 80154f0:	9a08      	ldr	r2, [sp, #32]
 80154f2:	2301      	movs	r3, #1
 80154f4:	7013      	strb	r3, [r2, #0]
 80154f6:	f1b9 0f00 	cmp.w	r9, #0
 80154fa:	d0b8      	beq.n	801546e <uxr_receive_reliable_message+0x22>
 80154fc:	89a6      	ldrh	r6, [r4, #12]
 80154fe:	4630      	mov	r0, r6
 8015500:	2101      	movs	r1, #1
 8015502:	f000 fc4f 	bl	8015da4 <uxr_seq_num_add>
 8015506:	8922      	ldrh	r2, [r4, #8]
 8015508:	6863      	ldr	r3, [r4, #4]
 801550a:	fbb3 f3f2 	udiv	r3, r3, r2
 801550e:	4606      	mov	r6, r0
 8015510:	fbb0 f0f2 	udiv	r0, r0, r2
 8015514:	fb02 6010 	mls	r0, r2, r0, r6
 8015518:	b280      	uxth	r0, r0
 801551a:	fb00 f303 	mul.w	r3, r0, r3
 801551e:	6820      	ldr	r0, [r4, #0]
 8015520:	3304      	adds	r3, #4
 8015522:	4418      	add	r0, r3
 8015524:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d0a0      	beq.n	801546e <uxr_receive_reliable_message+0x22>
 801552c:	6923      	ldr	r3, [r4, #16]
 801552e:	4798      	blx	r3
 8015530:	2802      	cmp	r0, #2
 8015532:	d008      	beq.n	8015546 <uxr_receive_reliable_message+0xfa>
 8015534:	2801      	cmp	r0, #1
 8015536:	d0e2      	beq.n	80154fe <uxr_receive_reliable_message+0xb2>
 8015538:	e799      	b.n	801546e <uxr_receive_reliable_message+0x22>
 801553a:	9b08      	ldr	r3, [sp, #32]
 801553c:	81a5      	strh	r5, [r4, #12]
 801553e:	2601      	movs	r6, #1
 8015540:	f883 9000 	strb.w	r9, [r3]
 8015544:	e794      	b.n	8015470 <uxr_receive_reliable_message+0x24>
 8015546:	2601      	movs	r6, #1
 8015548:	e792      	b.n	8015470 <uxr_receive_reliable_message+0x24>
 801554a:	bf00      	nop

0801554c <uxr_next_input_reliable_buffer_available>:
 801554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015550:	4604      	mov	r4, r0
 8015552:	460f      	mov	r7, r1
 8015554:	8980      	ldrh	r0, [r0, #12]
 8015556:	2101      	movs	r1, #1
 8015558:	4690      	mov	r8, r2
 801555a:	f000 fc23 	bl	8015da4 <uxr_seq_num_add>
 801555e:	8922      	ldrh	r2, [r4, #8]
 8015560:	fbb0 f6f2 	udiv	r6, r0, r2
 8015564:	fb02 0616 	mls	r6, r2, r6, r0
 8015568:	b2b6      	uxth	r6, r6
 801556a:	6863      	ldr	r3, [r4, #4]
 801556c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015570:	fb06 f303 	mul.w	r3, r6, r3
 8015574:	6826      	ldr	r6, [r4, #0]
 8015576:	3304      	adds	r3, #4
 8015578:	441e      	add	r6, r3
 801557a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801557e:	f1b9 0f00 	cmp.w	r9, #0
 8015582:	d023      	beq.n	80155cc <uxr_next_input_reliable_buffer_available+0x80>
 8015584:	6923      	ldr	r3, [r4, #16]
 8015586:	4605      	mov	r5, r0
 8015588:	4630      	mov	r0, r6
 801558a:	4798      	blx	r3
 801558c:	4682      	mov	sl, r0
 801558e:	b300      	cbz	r0, 80155d2 <uxr_next_input_reliable_buffer_available+0x86>
 8015590:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015594:	2101      	movs	r1, #1
 8015596:	4650      	mov	r0, sl
 8015598:	f000 fc04 	bl	8015da4 <uxr_seq_num_add>
 801559c:	8921      	ldrh	r1, [r4, #8]
 801559e:	fbb0 f2f1 	udiv	r2, r0, r1
 80155a2:	4682      	mov	sl, r0
 80155a4:	fb01 0212 	mls	r2, r1, r2, r0
 80155a8:	e9d4 0300 	ldrd	r0, r3, [r4]
 80155ac:	b292      	uxth	r2, r2
 80155ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80155b2:	fb02 f303 	mul.w	r3, r2, r3
 80155b6:	3304      	adds	r3, #4
 80155b8:	4418      	add	r0, r3
 80155ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80155be:	b12b      	cbz	r3, 80155cc <uxr_next_input_reliable_buffer_available+0x80>
 80155c0:	6923      	ldr	r3, [r4, #16]
 80155c2:	4798      	blx	r3
 80155c4:	2802      	cmp	r0, #2
 80155c6:	d01b      	beq.n	8015600 <uxr_next_input_reliable_buffer_available+0xb4>
 80155c8:	2801      	cmp	r0, #1
 80155ca:	d0e3      	beq.n	8015594 <uxr_next_input_reliable_buffer_available+0x48>
 80155cc:	2000      	movs	r0, #0
 80155ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155d2:	464a      	mov	r2, r9
 80155d4:	4631      	mov	r1, r6
 80155d6:	4638      	mov	r0, r7
 80155d8:	f7f8 f8cc 	bl	800d774 <ucdr_init_buffer>
 80155dc:	8921      	ldrh	r1, [r4, #8]
 80155de:	fbb5 f2f1 	udiv	r2, r5, r1
 80155e2:	fb01 5212 	mls	r2, r1, r2, r5
 80155e6:	b292      	uxth	r2, r2
 80155e8:	6863      	ldr	r3, [r4, #4]
 80155ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80155ee:	fb02 f303 	mul.w	r3, r2, r3
 80155f2:	6822      	ldr	r2, [r4, #0]
 80155f4:	f842 a003 	str.w	sl, [r2, r3]
 80155f8:	2001      	movs	r0, #1
 80155fa:	81a5      	strh	r5, [r4, #12]
 80155fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015600:	8920      	ldrh	r0, [r4, #8]
 8015602:	fbb5 f3f0 	udiv	r3, r5, r0
 8015606:	fb00 5513 	mls	r5, r0, r3, r5
 801560a:	b2ad      	uxth	r5, r5
 801560c:	6863      	ldr	r3, [r4, #4]
 801560e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015612:	fb03 f505 	mul.w	r5, r3, r5
 8015616:	6823      	ldr	r3, [r4, #0]
 8015618:	2000      	movs	r0, #0
 801561a:	5158      	str	r0, [r3, r5]
 801561c:	eb06 0108 	add.w	r1, r6, r8
 8015620:	eba9 0208 	sub.w	r2, r9, r8
 8015624:	4638      	mov	r0, r7
 8015626:	f7f8 f8a5 	bl	800d774 <ucdr_init_buffer>
 801562a:	4638      	mov	r0, r7
 801562c:	4903      	ldr	r1, [pc, #12]	@ (801563c <uxr_next_input_reliable_buffer_available+0xf0>)
 801562e:	4622      	mov	r2, r4
 8015630:	f7f8 f874 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 8015634:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015638:	2001      	movs	r0, #1
 801563a:	e7c8      	b.n	80155ce <uxr_next_input_reliable_buffer_available+0x82>
 801563c:	08015341 	.word	0x08015341

08015640 <uxr_process_heartbeat>:
 8015640:	b538      	push	{r3, r4, r5, lr}
 8015642:	4611      	mov	r1, r2
 8015644:	4604      	mov	r4, r0
 8015646:	89c0      	ldrh	r0, [r0, #14]
 8015648:	4615      	mov	r5, r2
 801564a:	f000 fbb3 	bl	8015db4 <uxr_seq_num_cmp>
 801564e:	2800      	cmp	r0, #0
 8015650:	bfb8      	it	lt
 8015652:	81e5      	strhlt	r5, [r4, #14]
 8015654:	bd38      	pop	{r3, r4, r5, pc}
 8015656:	bf00      	nop

08015658 <uxr_compute_acknack>:
 8015658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801565c:	8903      	ldrh	r3, [r0, #8]
 801565e:	8985      	ldrh	r5, [r0, #12]
 8015660:	4604      	mov	r4, r0
 8015662:	460e      	mov	r6, r1
 8015664:	b1d3      	cbz	r3, 801569c <uxr_compute_acknack+0x44>
 8015666:	4628      	mov	r0, r5
 8015668:	2701      	movs	r7, #1
 801566a:	e003      	b.n	8015674 <uxr_compute_acknack+0x1c>
 801566c:	4567      	cmp	r7, ip
 801566e:	d215      	bcs.n	801569c <uxr_compute_acknack+0x44>
 8015670:	89a0      	ldrh	r0, [r4, #12]
 8015672:	3701      	adds	r7, #1
 8015674:	b2b9      	uxth	r1, r7
 8015676:	f000 fb95 	bl	8015da4 <uxr_seq_num_add>
 801567a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801567e:	fbb0 f3fc 	udiv	r3, r0, ip
 8015682:	fb0c 0313 	mls	r3, ip, r3, r0
 8015686:	b29a      	uxth	r2, r3
 8015688:	e9d4 1300 	ldrd	r1, r3, [r4]
 801568c:	fbb3 f3fc 	udiv	r3, r3, ip
 8015690:	fb02 f303 	mul.w	r3, r2, r3
 8015694:	58cb      	ldr	r3, [r1, r3]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d1e8      	bne.n	801566c <uxr_compute_acknack+0x14>
 801569a:	4605      	mov	r5, r0
 801569c:	8035      	strh	r5, [r6, #0]
 801569e:	2101      	movs	r1, #1
 80156a0:	4628      	mov	r0, r5
 80156a2:	89e7      	ldrh	r7, [r4, #14]
 80156a4:	f000 fb82 	bl	8015dac <uxr_seq_num_sub>
 80156a8:	4601      	mov	r1, r0
 80156aa:	4638      	mov	r0, r7
 80156ac:	f000 fb7e 	bl	8015dac <uxr_seq_num_sub>
 80156b0:	4605      	mov	r5, r0
 80156b2:	b318      	cbz	r0, 80156fc <uxr_compute_acknack+0xa4>
 80156b4:	f04f 0900 	mov.w	r9, #0
 80156b8:	464f      	mov	r7, r9
 80156ba:	f04f 0801 	mov.w	r8, #1
 80156be:	fa1f f189 	uxth.w	r1, r9
 80156c2:	8830      	ldrh	r0, [r6, #0]
 80156c4:	f000 fb6e 	bl	8015da4 <uxr_seq_num_add>
 80156c8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80156cc:	fbb0 f3fc 	udiv	r3, r0, ip
 80156d0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80156d4:	fb03 001c 	mls	r0, r3, ip, r0
 80156d8:	b283      	uxth	r3, r0
 80156da:	fbb2 f2fc 	udiv	r2, r2, ip
 80156de:	fb02 f303 	mul.w	r3, r2, r3
 80156e2:	fa08 f209 	lsl.w	r2, r8, r9
 80156e6:	58cb      	ldr	r3, [r1, r3]
 80156e8:	f109 0901 	add.w	r9, r9, #1
 80156ec:	b90b      	cbnz	r3, 80156f2 <uxr_compute_acknack+0x9a>
 80156ee:	4317      	orrs	r7, r2
 80156f0:	b2bf      	uxth	r7, r7
 80156f2:	454d      	cmp	r5, r9
 80156f4:	d1e3      	bne.n	80156be <uxr_compute_acknack+0x66>
 80156f6:	4638      	mov	r0, r7
 80156f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156fc:	4607      	mov	r7, r0
 80156fe:	4638      	mov	r0, r7
 8015700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015704 <uxr_init_output_best_effort_stream>:
 8015704:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015708:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801570c:	6001      	str	r1, [r0, #0]
 801570e:	7303      	strb	r3, [r0, #12]
 8015710:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015714:	4770      	bx	lr
 8015716:	bf00      	nop

08015718 <uxr_reset_output_best_effort_stream>:
 8015718:	7b02      	ldrb	r2, [r0, #12]
 801571a:	6042      	str	r2, [r0, #4]
 801571c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015720:	81c3      	strh	r3, [r0, #14]
 8015722:	4770      	bx	lr

08015724 <uxr_prepare_best_effort_buffer_to_write>:
 8015724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015726:	4604      	mov	r4, r0
 8015728:	b083      	sub	sp, #12
 801572a:	6840      	ldr	r0, [r0, #4]
 801572c:	460d      	mov	r5, r1
 801572e:	4616      	mov	r6, r2
 8015730:	f7fa fac4 	bl	800fcbc <uxr_submessage_padding>
 8015734:	6863      	ldr	r3, [r4, #4]
 8015736:	4418      	add	r0, r3
 8015738:	68a3      	ldr	r3, [r4, #8]
 801573a:	1942      	adds	r2, r0, r5
 801573c:	4293      	cmp	r3, r2
 801573e:	bf2c      	ite	cs
 8015740:	2701      	movcs	r7, #1
 8015742:	2700      	movcc	r7, #0
 8015744:	d202      	bcs.n	801574c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015746:	4638      	mov	r0, r7
 8015748:	b003      	add	sp, #12
 801574a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801574c:	9000      	str	r0, [sp, #0]
 801574e:	6821      	ldr	r1, [r4, #0]
 8015750:	4630      	mov	r0, r6
 8015752:	2300      	movs	r3, #0
 8015754:	f7f7 fffc 	bl	800d750 <ucdr_init_buffer_origin_offset>
 8015758:	6861      	ldr	r1, [r4, #4]
 801575a:	4638      	mov	r0, r7
 801575c:	4429      	add	r1, r5
 801575e:	6061      	str	r1, [r4, #4]
 8015760:	b003      	add	sp, #12
 8015762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015764 <uxr_prepare_best_effort_buffer_to_send>:
 8015764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015768:	4604      	mov	r4, r0
 801576a:	461d      	mov	r5, r3
 801576c:	6840      	ldr	r0, [r0, #4]
 801576e:	7b23      	ldrb	r3, [r4, #12]
 8015770:	4298      	cmp	r0, r3
 8015772:	bf8c      	ite	hi
 8015774:	2601      	movhi	r6, #1
 8015776:	2600      	movls	r6, #0
 8015778:	d802      	bhi.n	8015780 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801577a:	4630      	mov	r0, r6
 801577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015780:	4688      	mov	r8, r1
 8015782:	89e0      	ldrh	r0, [r4, #14]
 8015784:	2101      	movs	r1, #1
 8015786:	4617      	mov	r7, r2
 8015788:	f000 fb0c 	bl	8015da4 <uxr_seq_num_add>
 801578c:	6823      	ldr	r3, [r4, #0]
 801578e:	81e0      	strh	r0, [r4, #14]
 8015790:	8028      	strh	r0, [r5, #0]
 8015792:	f8c8 3000 	str.w	r3, [r8]
 8015796:	6863      	ldr	r3, [r4, #4]
 8015798:	603b      	str	r3, [r7, #0]
 801579a:	7b23      	ldrb	r3, [r4, #12]
 801579c:	6063      	str	r3, [r4, #4]
 801579e:	4630      	mov	r0, r6
 80157a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157a4 <on_full_output_buffer>:
 80157a4:	b538      	push	{r3, r4, r5, lr}
 80157a6:	6802      	ldr	r2, [r0, #0]
 80157a8:	460c      	mov	r4, r1
 80157aa:	6809      	ldr	r1, [r1, #0]
 80157ac:	8923      	ldrh	r3, [r4, #8]
 80157ae:	eba2 0c01 	sub.w	ip, r2, r1
 80157b2:	6862      	ldr	r2, [r4, #4]
 80157b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80157b8:	fbbc fcf2 	udiv	ip, ip, r2
 80157bc:	f10c 0c01 	add.w	ip, ip, #1
 80157c0:	fa1f fc8c 	uxth.w	ip, ip
 80157c4:	fbbc fef3 	udiv	lr, ip, r3
 80157c8:	fb03 c31e 	mls	r3, r3, lr, ip
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	fb02 f303 	mul.w	r3, r2, r3
 80157d2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80157d6:	58ca      	ldr	r2, [r1, r3]
 80157d8:	4463      	add	r3, ip
 80157da:	eba2 020c 	sub.w	r2, r2, ip
 80157de:	3308      	adds	r3, #8
 80157e0:	4605      	mov	r5, r0
 80157e2:	4419      	add	r1, r3
 80157e4:	3a04      	subs	r2, #4
 80157e6:	6903      	ldr	r3, [r0, #16]
 80157e8:	f7f7 ffbc 	bl	800d764 <ucdr_init_buffer_origin>
 80157ec:	4628      	mov	r0, r5
 80157ee:	4903      	ldr	r1, [pc, #12]	@ (80157fc <on_full_output_buffer+0x58>)
 80157f0:	4622      	mov	r2, r4
 80157f2:	f7f7 ff93 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 80157f6:	2000      	movs	r0, #0
 80157f8:	bd38      	pop	{r3, r4, r5, pc}
 80157fa:	bf00      	nop
 80157fc:	080157a5 	.word	0x080157a5

08015800 <uxr_init_output_reliable_stream>:
 8015800:	b410      	push	{r4}
 8015802:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015806:	8103      	strh	r3, [r0, #8]
 8015808:	e9c0 1200 	strd	r1, r2, [r0]
 801580c:	f880 c00c 	strb.w	ip, [r0, #12]
 8015810:	b1d3      	cbz	r3, 8015848 <uxr_init_output_reliable_stream+0x48>
 8015812:	f8c1 c000 	str.w	ip, [r1]
 8015816:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801581a:	f1bc 0f01 	cmp.w	ip, #1
 801581e:	d913      	bls.n	8015848 <uxr_init_output_reliable_stream+0x48>
 8015820:	2301      	movs	r3, #1
 8015822:	fbb3 f1fc 	udiv	r1, r3, ip
 8015826:	fb0c 3111 	mls	r1, ip, r1, r3
 801582a:	b289      	uxth	r1, r1
 801582c:	6842      	ldr	r2, [r0, #4]
 801582e:	6804      	ldr	r4, [r0, #0]
 8015830:	fbb2 f2fc 	udiv	r2, r2, ip
 8015834:	fb01 f202 	mul.w	r2, r1, r2
 8015838:	7b01      	ldrb	r1, [r0, #12]
 801583a:	50a1      	str	r1, [r4, r2]
 801583c:	3301      	adds	r3, #1
 801583e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015842:	b29b      	uxth	r3, r3
 8015844:	459c      	cmp	ip, r3
 8015846:	d8ec      	bhi.n	8015822 <uxr_init_output_reliable_stream+0x22>
 8015848:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801584c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015850:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015854:	4905      	ldr	r1, [pc, #20]	@ (801586c <uxr_init_output_reliable_stream+0x6c>)
 8015856:	f85d 4b04 	ldr.w	r4, [sp], #4
 801585a:	f8c0 100e 	str.w	r1, [r0, #14]
 801585e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015862:	2300      	movs	r3, #0
 8015864:	8242      	strh	r2, [r0, #18]
 8015866:	8403      	strh	r3, [r0, #32]
 8015868:	4770      	bx	lr
 801586a:	bf00      	nop
 801586c:	ffff0000 	.word	0xffff0000

08015870 <uxr_reset_output_reliable_stream>:
 8015870:	8901      	ldrh	r1, [r0, #8]
 8015872:	b1b1      	cbz	r1, 80158a2 <uxr_reset_output_reliable_stream+0x32>
 8015874:	f04f 0c00 	mov.w	ip, #0
 8015878:	4663      	mov	r3, ip
 801587a:	fbb3 f2f1 	udiv	r2, r3, r1
 801587e:	fb01 3312 	mls	r3, r1, r2, r3
 8015882:	b29b      	uxth	r3, r3
 8015884:	6842      	ldr	r2, [r0, #4]
 8015886:	fbb2 f2f1 	udiv	r2, r2, r1
 801588a:	6801      	ldr	r1, [r0, #0]
 801588c:	fb02 f303 	mul.w	r3, r2, r3
 8015890:	7b02      	ldrb	r2, [r0, #12]
 8015892:	50ca      	str	r2, [r1, r3]
 8015894:	f10c 0c01 	add.w	ip, ip, #1
 8015898:	8901      	ldrh	r1, [r0, #8]
 801589a:	fa1f f38c 	uxth.w	r3, ip
 801589e:	4299      	cmp	r1, r3
 80158a0:	d8eb      	bhi.n	801587a <uxr_reset_output_reliable_stream+0xa>
 80158a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80158a6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158aa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80158ae:	4904      	ldr	r1, [pc, #16]	@ (80158c0 <uxr_reset_output_reliable_stream+0x50>)
 80158b0:	f8c0 100e 	str.w	r1, [r0, #14]
 80158b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158b8:	2300      	movs	r3, #0
 80158ba:	8242      	strh	r2, [r0, #18]
 80158bc:	8403      	strh	r3, [r0, #32]
 80158be:	4770      	bx	lr
 80158c0:	ffff0000 	.word	0xffff0000

080158c4 <uxr_prepare_reliable_buffer_to_write>:
 80158c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c8:	4604      	mov	r4, r0
 80158ca:	b091      	sub	sp, #68	@ 0x44
 80158cc:	8900      	ldrh	r0, [r0, #8]
 80158ce:	89e6      	ldrh	r6, [r4, #14]
 80158d0:	6823      	ldr	r3, [r4, #0]
 80158d2:	9204      	str	r2, [sp, #16]
 80158d4:	fbb6 f2f0 	udiv	r2, r6, r0
 80158d8:	fb00 6212 	mls	r2, r0, r2, r6
 80158dc:	b292      	uxth	r2, r2
 80158de:	6865      	ldr	r5, [r4, #4]
 80158e0:	fbb5 f5f0 	udiv	r5, r5, r0
 80158e4:	fb05 3202 	mla	r2, r5, r2, r3
 80158e8:	3204      	adds	r2, #4
 80158ea:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80158ee:	f894 900c 	ldrb.w	r9, [r4, #12]
 80158f2:	9203      	str	r2, [sp, #12]
 80158f4:	468b      	mov	fp, r1
 80158f6:	1f2f      	subs	r7, r5, #4
 80158f8:	2800      	cmp	r0, #0
 80158fa:	f000 814c 	beq.w	8015b96 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80158fe:	f04f 0c00 	mov.w	ip, #0
 8015902:	46e2      	mov	sl, ip
 8015904:	4661      	mov	r1, ip
 8015906:	fbb1 f2f0 	udiv	r2, r1, r0
 801590a:	fb00 1212 	mls	r2, r0, r2, r1
 801590e:	b292      	uxth	r2, r2
 8015910:	fb05 f202 	mul.w	r2, r5, r2
 8015914:	f10c 0c01 	add.w	ip, ip, #1
 8015918:	589a      	ldr	r2, [r3, r2]
 801591a:	454a      	cmp	r2, r9
 801591c:	bf08      	it	eq
 801591e:	f10a 0a01 	addeq.w	sl, sl, #1
 8015922:	fa1f f18c 	uxth.w	r1, ip
 8015926:	bf08      	it	eq
 8015928:	fa1f fa8a 	uxtheq.w	sl, sl
 801592c:	4281      	cmp	r1, r0
 801592e:	d3ea      	bcc.n	8015906 <uxr_prepare_reliable_buffer_to_write+0x42>
 8015930:	4640      	mov	r0, r8
 8015932:	2104      	movs	r1, #4
 8015934:	f8cd a014 	str.w	sl, [sp, #20]
 8015938:	f7f7 ff20 	bl	800d77c <ucdr_alignment>
 801593c:	4480      	add	r8, r0
 801593e:	eb08 020b 	add.w	r2, r8, fp
 8015942:	42ba      	cmp	r2, r7
 8015944:	f240 80cd 	bls.w	8015ae2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015948:	7b22      	ldrb	r2, [r4, #12]
 801594a:	445a      	add	r2, fp
 801594c:	42ba      	cmp	r2, r7
 801594e:	f240 80b5 	bls.w	8015abc <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8015952:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8015956:	33fc      	adds	r3, #252	@ 0xfc
 8015958:	b2ba      	uxth	r2, r7
 801595a:	4413      	add	r3, r2
 801595c:	b29b      	uxth	r3, r3
 801595e:	fb0a f903 	mul.w	r9, sl, r3
 8015962:	45d9      	cmp	r9, fp
 8015964:	9305      	str	r3, [sp, #20]
 8015966:	9306      	str	r3, [sp, #24]
 8015968:	f0c0 80b7 	bcc.w	8015ada <uxr_prepare_reliable_buffer_to_write+0x216>
 801596c:	f108 0304 	add.w	r3, r8, #4
 8015970:	42bb      	cmp	r3, r7
 8015972:	f080 80db 	bcs.w	8015b2c <uxr_prepare_reliable_buffer_to_write+0x268>
 8015976:	f1a2 0904 	sub.w	r9, r2, #4
 801597a:	eba9 0908 	sub.w	r9, r9, r8
 801597e:	9b05      	ldr	r3, [sp, #20]
 8015980:	fa1f f989 	uxth.w	r9, r9
 8015984:	ebab 0b09 	sub.w	fp, fp, r9
 8015988:	fbbb f2f3 	udiv	r2, fp, r3
 801598c:	fb03 b312 	mls	r3, r3, r2, fp
 8015990:	2b00      	cmp	r3, #0
 8015992:	f000 80c8 	beq.w	8015b26 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015996:	3201      	adds	r2, #1
 8015998:	b292      	uxth	r2, r2
 801599a:	9306      	str	r3, [sp, #24]
 801599c:	4552      	cmp	r2, sl
 801599e:	f200 809c 	bhi.w	8015ada <uxr_prepare_reliable_buffer_to_write+0x216>
 80159a2:	f10d 0b20 	add.w	fp, sp, #32
 80159a6:	2a00      	cmp	r2, #0
 80159a8:	d042      	beq.n	8015a30 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80159aa:	f8cd 801c 	str.w	r8, [sp, #28]
 80159ae:	f04f 0a00 	mov.w	sl, #0
 80159b2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80159b6:	9505      	str	r5, [sp, #20]
 80159b8:	f10d 0b20 	add.w	fp, sp, #32
 80159bc:	4615      	mov	r5, r2
 80159be:	e000      	b.n	80159c2 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80159c0:	46c1      	mov	r9, r8
 80159c2:	8920      	ldrh	r0, [r4, #8]
 80159c4:	fbb6 f2f0 	udiv	r2, r6, r0
 80159c8:	fb00 6112 	mls	r1, r0, r2, r6
 80159cc:	b28a      	uxth	r2, r1
 80159ce:	6863      	ldr	r3, [r4, #4]
 80159d0:	fbb3 f1f0 	udiv	r1, r3, r0
 80159d4:	6823      	ldr	r3, [r4, #0]
 80159d6:	fb02 f101 	mul.w	r1, r2, r1
 80159da:	3104      	adds	r1, #4
 80159dc:	4419      	add	r1, r3
 80159de:	4658      	mov	r0, fp
 80159e0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80159e4:	9200      	str	r2, [sp, #0]
 80159e6:	2300      	movs	r3, #0
 80159e8:	463a      	mov	r2, r7
 80159ea:	f7f7 feb1 	bl	800d750 <ucdr_init_buffer_origin_offset>
 80159ee:	464a      	mov	r2, r9
 80159f0:	2300      	movs	r3, #0
 80159f2:	210d      	movs	r1, #13
 80159f4:	4658      	mov	r0, fp
 80159f6:	f7fa f921 	bl	800fc3c <uxr_buffer_submessage_header>
 80159fa:	8921      	ldrh	r1, [r4, #8]
 80159fc:	fbb6 f2f1 	udiv	r2, r6, r1
 8015a00:	fb01 6212 	mls	r2, r1, r2, r6
 8015a04:	b292      	uxth	r2, r2
 8015a06:	6863      	ldr	r3, [r4, #4]
 8015a08:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a0c:	fb02 f303 	mul.w	r3, r2, r3
 8015a10:	6822      	ldr	r2, [r4, #0]
 8015a12:	4630      	mov	r0, r6
 8015a14:	50d7      	str	r7, [r2, r3]
 8015a16:	2101      	movs	r1, #1
 8015a18:	f000 f9c4 	bl	8015da4 <uxr_seq_num_add>
 8015a1c:	f10a 0a01 	add.w	sl, sl, #1
 8015a20:	fa1f f38a 	uxth.w	r3, sl
 8015a24:	429d      	cmp	r5, r3
 8015a26:	4606      	mov	r6, r0
 8015a28:	d8ca      	bhi.n	80159c0 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015a2a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015a2e:	9d05      	ldr	r5, [sp, #20]
 8015a30:	8920      	ldrh	r0, [r4, #8]
 8015a32:	fbb6 f3f0 	udiv	r3, r6, r0
 8015a36:	fb00 6313 	mls	r3, r0, r3, r6
 8015a3a:	b299      	uxth	r1, r3
 8015a3c:	6863      	ldr	r3, [r4, #4]
 8015a3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015a42:	fb01 f303 	mul.w	r3, r1, r3
 8015a46:	6821      	ldr	r1, [r4, #0]
 8015a48:	3304      	adds	r3, #4
 8015a4a:	4419      	add	r1, r3
 8015a4c:	463a      	mov	r2, r7
 8015a4e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015a52:	9000      	str	r0, [sp, #0]
 8015a54:	2300      	movs	r3, #0
 8015a56:	4658      	mov	r0, fp
 8015a58:	f7f7 fe7a 	bl	800d750 <ucdr_init_buffer_origin_offset>
 8015a5c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015a60:	4658      	mov	r0, fp
 8015a62:	fa1f f289 	uxth.w	r2, r9
 8015a66:	2302      	movs	r3, #2
 8015a68:	210d      	movs	r1, #13
 8015a6a:	f7fa f8e7 	bl	800fc3c <uxr_buffer_submessage_header>
 8015a6e:	9b03      	ldr	r3, [sp, #12]
 8015a70:	8927      	ldrh	r7, [r4, #8]
 8015a72:	7b20      	ldrb	r0, [r4, #12]
 8015a74:	f108 0104 	add.w	r1, r8, #4
 8015a78:	440b      	add	r3, r1
 8015a7a:	4619      	mov	r1, r3
 8015a7c:	fbb6 f3f7 	udiv	r3, r6, r7
 8015a80:	fb07 6313 	mls	r3, r7, r3, r6
 8015a84:	f1a5 0208 	sub.w	r2, r5, #8
 8015a88:	b29d      	uxth	r5, r3
 8015a8a:	3004      	adds	r0, #4
 8015a8c:	6863      	ldr	r3, [r4, #4]
 8015a8e:	fbb3 f3f7 	udiv	r3, r3, r7
 8015a92:	fb05 f303 	mul.w	r3, r5, r3
 8015a96:	6825      	ldr	r5, [r4, #0]
 8015a98:	4448      	add	r0, r9
 8015a9a:	50e8      	str	r0, [r5, r3]
 8015a9c:	9d04      	ldr	r5, [sp, #16]
 8015a9e:	eba2 0208 	sub.w	r2, r2, r8
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	f7f7 fe66 	bl	800d774 <ucdr_init_buffer>
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	493c      	ldr	r1, [pc, #240]	@ (8015b9c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015aac:	4622      	mov	r2, r4
 8015aae:	f7f7 fe35 	bl	800d71c <ucdr_set_on_full_buffer_callback>
 8015ab2:	2001      	movs	r0, #1
 8015ab4:	81e6      	strh	r6, [r4, #14]
 8015ab6:	b011      	add	sp, #68	@ 0x44
 8015ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015abc:	2101      	movs	r1, #1
 8015abe:	89e0      	ldrh	r0, [r4, #14]
 8015ac0:	f000 f970 	bl	8015da4 <uxr_seq_num_add>
 8015ac4:	8921      	ldrh	r1, [r4, #8]
 8015ac6:	4605      	mov	r5, r0
 8015ac8:	8a60      	ldrh	r0, [r4, #18]
 8015aca:	f000 f96b 	bl	8015da4 <uxr_seq_num_add>
 8015ace:	4601      	mov	r1, r0
 8015ad0:	4628      	mov	r0, r5
 8015ad2:	f000 f96f 	bl	8015db4 <uxr_seq_num_cmp>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	dd42      	ble.n	8015b60 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015ada:	2000      	movs	r0, #0
 8015adc:	b011      	add	sp, #68	@ 0x44
 8015ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae2:	8921      	ldrh	r1, [r4, #8]
 8015ae4:	8a60      	ldrh	r0, [r4, #18]
 8015ae6:	9205      	str	r2, [sp, #20]
 8015ae8:	f000 f95c 	bl	8015da4 <uxr_seq_num_add>
 8015aec:	4601      	mov	r1, r0
 8015aee:	4630      	mov	r0, r6
 8015af0:	f000 f960 	bl	8015db4 <uxr_seq_num_cmp>
 8015af4:	2800      	cmp	r0, #0
 8015af6:	9a05      	ldr	r2, [sp, #20]
 8015af8:	dcef      	bgt.n	8015ada <uxr_prepare_reliable_buffer_to_write+0x216>
 8015afa:	8927      	ldrh	r7, [r4, #8]
 8015afc:	fbb6 f3f7 	udiv	r3, r6, r7
 8015b00:	fb07 6313 	mls	r3, r7, r3, r6
 8015b04:	b29d      	uxth	r5, r3
 8015b06:	6863      	ldr	r3, [r4, #4]
 8015b08:	6824      	ldr	r4, [r4, #0]
 8015b0a:	fbb3 f3f7 	udiv	r3, r3, r7
 8015b0e:	fb05 f303 	mul.w	r3, r5, r3
 8015b12:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015b16:	50e2      	str	r2, [r4, r3]
 8015b18:	2300      	movs	r3, #0
 8015b1a:	f8cd 8000 	str.w	r8, [sp]
 8015b1e:	f7f7 fe17 	bl	800d750 <ucdr_init_buffer_origin_offset>
 8015b22:	2001      	movs	r0, #1
 8015b24:	e7da      	b.n	8015adc <uxr_prepare_reliable_buffer_to_write+0x218>
 8015b26:	b293      	uxth	r3, r2
 8015b28:	461a      	mov	r2, r3
 8015b2a:	e737      	b.n	801599c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015b2c:	4630      	mov	r0, r6
 8015b2e:	2101      	movs	r1, #1
 8015b30:	9207      	str	r2, [sp, #28]
 8015b32:	f000 f937 	bl	8015da4 <uxr_seq_num_add>
 8015b36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015b3a:	fbb0 f1fc 	udiv	r1, r0, ip
 8015b3e:	fb0c 0111 	mls	r1, ip, r1, r0
 8015b42:	4606      	mov	r6, r0
 8015b44:	b288      	uxth	r0, r1
 8015b46:	6863      	ldr	r3, [r4, #4]
 8015b48:	fbb3 f1fc 	udiv	r1, r3, ip
 8015b4c:	6823      	ldr	r3, [r4, #0]
 8015b4e:	9a07      	ldr	r2, [sp, #28]
 8015b50:	fb00 f101 	mul.w	r1, r0, r1
 8015b54:	3104      	adds	r1, #4
 8015b56:	440b      	add	r3, r1
 8015b58:	9303      	str	r3, [sp, #12]
 8015b5a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8015b5e:	e70a      	b.n	8015976 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015b60:	8921      	ldrh	r1, [r4, #8]
 8015b62:	fbb5 f3f1 	udiv	r3, r5, r1
 8015b66:	fb01 5313 	mls	r3, r1, r3, r5
 8015b6a:	b29a      	uxth	r2, r3
 8015b6c:	6863      	ldr	r3, [r4, #4]
 8015b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015b72:	6821      	ldr	r1, [r4, #0]
 8015b74:	9804      	ldr	r0, [sp, #16]
 8015b76:	fb02 f303 	mul.w	r3, r2, r3
 8015b7a:	3304      	adds	r3, #4
 8015b7c:	7b22      	ldrb	r2, [r4, #12]
 8015b7e:	4419      	add	r1, r3
 8015b80:	445a      	add	r2, fp
 8015b82:	f841 2c04 	str.w	r2, [r1, #-4]
 8015b86:	7b23      	ldrb	r3, [r4, #12]
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	f7f7 fde0 	bl	800d750 <ucdr_init_buffer_origin_offset>
 8015b90:	81e5      	strh	r5, [r4, #14]
 8015b92:	2001      	movs	r0, #1
 8015b94:	e7a2      	b.n	8015adc <uxr_prepare_reliable_buffer_to_write+0x218>
 8015b96:	4682      	mov	sl, r0
 8015b98:	e6ca      	b.n	8015930 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015b9a:	bf00      	nop
 8015b9c:	080157a5 	.word	0x080157a5

08015ba0 <uxr_prepare_next_reliable_buffer_to_send>:
 8015ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	460f      	mov	r7, r1
 8015ba6:	8a00      	ldrh	r0, [r0, #16]
 8015ba8:	2101      	movs	r1, #1
 8015baa:	4616      	mov	r6, r2
 8015bac:	461d      	mov	r5, r3
 8015bae:	f000 f8f9 	bl	8015da4 <uxr_seq_num_add>
 8015bb2:	8028      	strh	r0, [r5, #0]
 8015bb4:	8922      	ldrh	r2, [r4, #8]
 8015bb6:	fbb0 f3f2 	udiv	r3, r0, r2
 8015bba:	fb02 0c13 	mls	ip, r2, r3, r0
 8015bbe:	fa1f fc8c 	uxth.w	ip, ip
 8015bc2:	6863      	ldr	r3, [r4, #4]
 8015bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8015bc8:	fb0c fc03 	mul.w	ip, ip, r3
 8015bcc:	6823      	ldr	r3, [r4, #0]
 8015bce:	89e1      	ldrh	r1, [r4, #14]
 8015bd0:	f10c 0c04 	add.w	ip, ip, #4
 8015bd4:	4463      	add	r3, ip
 8015bd6:	603b      	str	r3, [r7, #0]
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	449c      	add	ip, r3
 8015bdc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015be0:	6033      	str	r3, [r6, #0]
 8015be2:	f000 f8e7 	bl	8015db4 <uxr_seq_num_cmp>
 8015be6:	2800      	cmp	r0, #0
 8015be8:	dd01      	ble.n	8015bee <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015bea:	2000      	movs	r0, #0
 8015bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bee:	7b23      	ldrb	r3, [r4, #12]
 8015bf0:	6832      	ldr	r2, [r6, #0]
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d9f9      	bls.n	8015bea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015bf6:	8a61      	ldrh	r1, [r4, #18]
 8015bf8:	8a20      	ldrh	r0, [r4, #16]
 8015bfa:	f000 f8d7 	bl	8015dac <uxr_seq_num_sub>
 8015bfe:	8923      	ldrh	r3, [r4, #8]
 8015c00:	4283      	cmp	r3, r0
 8015c02:	d0f2      	beq.n	8015bea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015c04:	8828      	ldrh	r0, [r5, #0]
 8015c06:	89e3      	ldrh	r3, [r4, #14]
 8015c08:	8220      	strh	r0, [r4, #16]
 8015c0a:	4298      	cmp	r0, r3
 8015c0c:	d001      	beq.n	8015c12 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015c0e:	2001      	movs	r0, #1
 8015c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c12:	2101      	movs	r1, #1
 8015c14:	f000 f8c6 	bl	8015da4 <uxr_seq_num_add>
 8015c18:	81e0      	strh	r0, [r4, #14]
 8015c1a:	2001      	movs	r0, #1
 8015c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c1e:	bf00      	nop

08015c20 <uxr_update_output_stream_heartbeat_timestamp>:
 8015c20:	b570      	push	{r4, r5, r6, lr}
 8015c22:	8a01      	ldrh	r1, [r0, #16]
 8015c24:	4604      	mov	r4, r0
 8015c26:	8a40      	ldrh	r0, [r0, #18]
 8015c28:	4615      	mov	r5, r2
 8015c2a:	461e      	mov	r6, r3
 8015c2c:	f000 f8c2 	bl	8015db4 <uxr_seq_num_cmp>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	db07      	blt.n	8015c44 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015c34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015c38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015c3c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015c40:	2000      	movs	r0, #0
 8015c42:	bd70      	pop	{r4, r5, r6, pc}
 8015c44:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015c48:	b940      	cbnz	r0, 8015c5c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	f884 3020 	strb.w	r3, [r4, #32]
 8015c50:	3564      	adds	r5, #100	@ 0x64
 8015c52:	f146 0600 	adc.w	r6, r6, #0
 8015c56:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015c5a:	bd70      	pop	{r4, r5, r6, pc}
 8015c5c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015c60:	4295      	cmp	r5, r2
 8015c62:	eb76 0303 	sbcs.w	r3, r6, r3
 8015c66:	bfa5      	ittet	ge
 8015c68:	3001      	addge	r0, #1
 8015c6a:	f884 0020 	strbge.w	r0, [r4, #32]
 8015c6e:	2000      	movlt	r0, #0
 8015c70:	2001      	movge	r0, #1
 8015c72:	e7ed      	b.n	8015c50 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015c74 <uxr_begin_output_nack_buffer_it>:
 8015c74:	8a40      	ldrh	r0, [r0, #18]
 8015c76:	4770      	bx	lr

08015c78 <uxr_next_reliable_nack_buffer_to_send>:
 8015c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015c80:	b082      	sub	sp, #8
 8015c82:	f1b8 0f00 	cmp.w	r8, #0
 8015c86:	d011      	beq.n	8015cac <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015c88:	4604      	mov	r4, r0
 8015c8a:	8818      	ldrh	r0, [r3, #0]
 8015c8c:	460e      	mov	r6, r1
 8015c8e:	4617      	mov	r7, r2
 8015c90:	461d      	mov	r5, r3
 8015c92:	2101      	movs	r1, #1
 8015c94:	f000 f886 	bl	8015da4 <uxr_seq_num_add>
 8015c98:	8028      	strh	r0, [r5, #0]
 8015c9a:	8a21      	ldrh	r1, [r4, #16]
 8015c9c:	f000 f88a 	bl	8015db4 <uxr_seq_num_cmp>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	dd07      	ble.n	8015cb4 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015ca4:	f04f 0800 	mov.w	r8, #0
 8015ca8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015cac:	4640      	mov	r0, r8
 8015cae:	b002      	add	sp, #8
 8015cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cb4:	8921      	ldrh	r1, [r4, #8]
 8015cb6:	8828      	ldrh	r0, [r5, #0]
 8015cb8:	6823      	ldr	r3, [r4, #0]
 8015cba:	fbb0 f2f1 	udiv	r2, r0, r1
 8015cbe:	fb01 0c12 	mls	ip, r1, r2, r0
 8015cc2:	fa1f f28c 	uxth.w	r2, ip
 8015cc6:	9301      	str	r3, [sp, #4]
 8015cc8:	6863      	ldr	r3, [r4, #4]
 8015cca:	fbb3 fcf1 	udiv	ip, r3, r1
 8015cce:	9b01      	ldr	r3, [sp, #4]
 8015cd0:	fb02 fc0c 	mul.w	ip, r2, ip
 8015cd4:	f10c 0c04 	add.w	ip, ip, #4
 8015cd8:	4463      	add	r3, ip
 8015cda:	6033      	str	r3, [r6, #0]
 8015cdc:	6823      	ldr	r3, [r4, #0]
 8015cde:	4463      	add	r3, ip
 8015ce0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015ce4:	603b      	str	r3, [r7, #0]
 8015ce6:	7b22      	ldrb	r2, [r4, #12]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d0d2      	beq.n	8015c92 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015cec:	4640      	mov	r0, r8
 8015cee:	b002      	add	sp, #8
 8015cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015cf4 <uxr_process_acknack>:
 8015cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cf6:	4604      	mov	r4, r0
 8015cf8:	460e      	mov	r6, r1
 8015cfa:	4610      	mov	r0, r2
 8015cfc:	2101      	movs	r1, #1
 8015cfe:	f000 f855 	bl	8015dac <uxr_seq_num_sub>
 8015d02:	8a61      	ldrh	r1, [r4, #18]
 8015d04:	f000 f852 	bl	8015dac <uxr_seq_num_sub>
 8015d08:	b1c0      	cbz	r0, 8015d3c <uxr_process_acknack+0x48>
 8015d0a:	4605      	mov	r5, r0
 8015d0c:	2700      	movs	r7, #0
 8015d0e:	2101      	movs	r1, #1
 8015d10:	8a60      	ldrh	r0, [r4, #18]
 8015d12:	f000 f847 	bl	8015da4 <uxr_seq_num_add>
 8015d16:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015d1a:	fbb0 f1fc 	udiv	r1, r0, ip
 8015d1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015d22:	fb0c 0111 	mls	r1, ip, r1, r0
 8015d26:	b289      	uxth	r1, r1
 8015d28:	3701      	adds	r7, #1
 8015d2a:	fbb3 f3fc 	udiv	r3, r3, ip
 8015d2e:	fb01 f303 	mul.w	r3, r1, r3
 8015d32:	42bd      	cmp	r5, r7
 8015d34:	7b21      	ldrb	r1, [r4, #12]
 8015d36:	8260      	strh	r0, [r4, #18]
 8015d38:	50d1      	str	r1, [r2, r3]
 8015d3a:	d1e8      	bne.n	8015d0e <uxr_process_acknack+0x1a>
 8015d3c:	3e00      	subs	r6, #0
 8015d3e:	f04f 0300 	mov.w	r3, #0
 8015d42:	bf18      	it	ne
 8015d44:	2601      	movne	r6, #1
 8015d46:	f884 3020 	strb.w	r3, [r4, #32]
 8015d4a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015d50 <uxr_is_output_up_to_date>:
 8015d50:	8a01      	ldrh	r1, [r0, #16]
 8015d52:	8a40      	ldrh	r0, [r0, #18]
 8015d54:	b508      	push	{r3, lr}
 8015d56:	f000 f82d 	bl	8015db4 <uxr_seq_num_cmp>
 8015d5a:	fab0 f080 	clz	r0, r0
 8015d5e:	0940      	lsrs	r0, r0, #5
 8015d60:	bd08      	pop	{r3, pc}
 8015d62:	bf00      	nop

08015d64 <get_available_free_slots>:
 8015d64:	8902      	ldrh	r2, [r0, #8]
 8015d66:	b1da      	cbz	r2, 8015da0 <get_available_free_slots+0x3c>
 8015d68:	b530      	push	{r4, r5, lr}
 8015d6a:	2100      	movs	r1, #0
 8015d6c:	6843      	ldr	r3, [r0, #4]
 8015d6e:	6805      	ldr	r5, [r0, #0]
 8015d70:	7b04      	ldrb	r4, [r0, #12]
 8015d72:	fbb3 fef2 	udiv	lr, r3, r2
 8015d76:	4608      	mov	r0, r1
 8015d78:	460b      	mov	r3, r1
 8015d7a:	fbb3 fcf2 	udiv	ip, r3, r2
 8015d7e:	fb02 331c 	mls	r3, r2, ip, r3
 8015d82:	b29b      	uxth	r3, r3
 8015d84:	fb0e f303 	mul.w	r3, lr, r3
 8015d88:	3101      	adds	r1, #1
 8015d8a:	f855 c003 	ldr.w	ip, [r5, r3]
 8015d8e:	4564      	cmp	r4, ip
 8015d90:	bf08      	it	eq
 8015d92:	3001      	addeq	r0, #1
 8015d94:	b28b      	uxth	r3, r1
 8015d96:	bf08      	it	eq
 8015d98:	b280      	uxtheq	r0, r0
 8015d9a:	4293      	cmp	r3, r2
 8015d9c:	d3ed      	bcc.n	8015d7a <get_available_free_slots+0x16>
 8015d9e:	bd30      	pop	{r4, r5, pc}
 8015da0:	4610      	mov	r0, r2
 8015da2:	4770      	bx	lr

08015da4 <uxr_seq_num_add>:
 8015da4:	4408      	add	r0, r1
 8015da6:	b280      	uxth	r0, r0
 8015da8:	4770      	bx	lr
 8015daa:	bf00      	nop

08015dac <uxr_seq_num_sub>:
 8015dac:	1a40      	subs	r0, r0, r1
 8015dae:	b280      	uxth	r0, r0
 8015db0:	4770      	bx	lr
 8015db2:	bf00      	nop

08015db4 <uxr_seq_num_cmp>:
 8015db4:	4288      	cmp	r0, r1
 8015db6:	d011      	beq.n	8015ddc <uxr_seq_num_cmp+0x28>
 8015db8:	d309      	bcc.n	8015dce <uxr_seq_num_cmp+0x1a>
 8015dba:	4288      	cmp	r0, r1
 8015dbc:	d910      	bls.n	8015de0 <uxr_seq_num_cmp+0x2c>
 8015dbe:	1a40      	subs	r0, r0, r1
 8015dc0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015dc4:	bfd4      	ite	le
 8015dc6:	2001      	movle	r0, #1
 8015dc8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015dcc:	4770      	bx	lr
 8015dce:	1a0b      	subs	r3, r1, r0
 8015dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015dd4:	daf1      	bge.n	8015dba <uxr_seq_num_cmp+0x6>
 8015dd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015dda:	4770      	bx	lr
 8015ddc:	2000      	movs	r0, #0
 8015dde:	4770      	bx	lr
 8015de0:	2001      	movs	r0, #1
 8015de2:	4770      	bx	lr

08015de4 <rcl_get_default_domain_id>:
 8015de4:	b530      	push	{r4, r5, lr}
 8015de6:	b083      	sub	sp, #12
 8015de8:	2300      	movs	r3, #0
 8015dea:	9300      	str	r3, [sp, #0]
 8015dec:	b1d0      	cbz	r0, 8015e24 <rcl_get_default_domain_id+0x40>
 8015dee:	4604      	mov	r4, r0
 8015df0:	4669      	mov	r1, sp
 8015df2:	4815      	ldr	r0, [pc, #84]	@ (8015e48 <rcl_get_default_domain_id+0x64>)
 8015df4:	f7fd ff2c 	bl	8013c50 <rcutils_get_env>
 8015df8:	4602      	mov	r2, r0
 8015dfa:	b110      	cbz	r0, 8015e02 <rcl_get_default_domain_id+0x1e>
 8015dfc:	2001      	movs	r0, #1
 8015dfe:	b003      	add	sp, #12
 8015e00:	bd30      	pop	{r4, r5, pc}
 8015e02:	9b00      	ldr	r3, [sp, #0]
 8015e04:	b18b      	cbz	r3, 8015e2a <rcl_get_default_domain_id+0x46>
 8015e06:	7818      	ldrb	r0, [r3, #0]
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	d0f8      	beq.n	8015dfe <rcl_get_default_domain_id+0x1a>
 8015e0c:	a901      	add	r1, sp, #4
 8015e0e:	4618      	mov	r0, r3
 8015e10:	9201      	str	r2, [sp, #4]
 8015e12:	f000 fdc9 	bl	80169a8 <strtoul>
 8015e16:	4605      	mov	r5, r0
 8015e18:	b150      	cbz	r0, 8015e30 <rcl_get_default_domain_id+0x4c>
 8015e1a:	1c43      	adds	r3, r0, #1
 8015e1c:	d00d      	beq.n	8015e3a <rcl_get_default_domain_id+0x56>
 8015e1e:	6025      	str	r5, [r4, #0]
 8015e20:	2000      	movs	r0, #0
 8015e22:	e7ec      	b.n	8015dfe <rcl_get_default_domain_id+0x1a>
 8015e24:	200b      	movs	r0, #11
 8015e26:	b003      	add	sp, #12
 8015e28:	bd30      	pop	{r4, r5, pc}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	b003      	add	sp, #12
 8015e2e:	bd30      	pop	{r4, r5, pc}
 8015e30:	9b01      	ldr	r3, [sp, #4]
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d0f2      	beq.n	8015e1e <rcl_get_default_domain_id+0x3a>
 8015e38:	e7e0      	b.n	8015dfc <rcl_get_default_domain_id+0x18>
 8015e3a:	f001 f801 	bl	8016e40 <__errno>
 8015e3e:	6803      	ldr	r3, [r0, #0]
 8015e40:	2b22      	cmp	r3, #34	@ 0x22
 8015e42:	d1ec      	bne.n	8015e1e <rcl_get_default_domain_id+0x3a>
 8015e44:	e7da      	b.n	8015dfc <rcl_get_default_domain_id+0x18>
 8015e46:	bf00      	nop
 8015e48:	080188e4 	.word	0x080188e4

08015e4c <rcl_expand_topic_name>:
 8015e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e50:	b08b      	sub	sp, #44	@ 0x2c
 8015e52:	9306      	str	r3, [sp, #24]
 8015e54:	2800      	cmp	r0, #0
 8015e56:	f000 80ad 	beq.w	8015fb4 <rcl_expand_topic_name+0x168>
 8015e5a:	460e      	mov	r6, r1
 8015e5c:	2900      	cmp	r1, #0
 8015e5e:	f000 80a9 	beq.w	8015fb4 <rcl_expand_topic_name+0x168>
 8015e62:	4617      	mov	r7, r2
 8015e64:	2a00      	cmp	r2, #0
 8015e66:	f000 80a5 	beq.w	8015fb4 <rcl_expand_topic_name+0x168>
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	f000 80a2 	beq.w	8015fb4 <rcl_expand_topic_name+0x168>
 8015e70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	f000 809e 	beq.w	8015fb4 <rcl_expand_topic_name+0x168>
 8015e78:	2200      	movs	r2, #0
 8015e7a:	a909      	add	r1, sp, #36	@ 0x24
 8015e7c:	4680      	mov	r8, r0
 8015e7e:	f000 fa57 	bl	8016330 <rcl_validate_topic_name>
 8015e82:	4604      	mov	r4, r0
 8015e84:	2800      	cmp	r0, #0
 8015e86:	f040 8096 	bne.w	8015fb6 <rcl_expand_topic_name+0x16a>
 8015e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	f040 809a 	bne.w	8015fc6 <rcl_expand_topic_name+0x17a>
 8015e92:	4602      	mov	r2, r0
 8015e94:	a909      	add	r1, sp, #36	@ 0x24
 8015e96:	4630      	mov	r0, r6
 8015e98:	f7fe fb04 	bl	80144a4 <rmw_validate_node_name>
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	f040 808e 	bne.w	8015fbe <rcl_expand_topic_name+0x172>
 8015ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ea4:	2a00      	cmp	r2, #0
 8015ea6:	f040 8093 	bne.w	8015fd0 <rcl_expand_topic_name+0x184>
 8015eaa:	a909      	add	r1, sp, #36	@ 0x24
 8015eac:	4638      	mov	r0, r7
 8015eae:	f7fe fadb 	bl	8014468 <rmw_validate_namespace>
 8015eb2:	2800      	cmp	r0, #0
 8015eb4:	f040 8083 	bne.w	8015fbe <rcl_expand_topic_name+0x172>
 8015eb8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015eba:	2c00      	cmp	r4, #0
 8015ebc:	f040 80ed 	bne.w	801609a <rcl_expand_topic_name+0x24e>
 8015ec0:	217b      	movs	r1, #123	@ 0x7b
 8015ec2:	4640      	mov	r0, r8
 8015ec4:	f000 ff30 	bl	8016d28 <strchr>
 8015ec8:	f898 3000 	ldrb.w	r3, [r8]
 8015ecc:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ece:	4605      	mov	r5, r0
 8015ed0:	f000 809e 	beq.w	8016010 <rcl_expand_topic_name+0x1c4>
 8015ed4:	2b7e      	cmp	r3, #126	@ 0x7e
 8015ed6:	f040 80a2 	bne.w	801601e <rcl_expand_topic_name+0x1d2>
 8015eda:	4638      	mov	r0, r7
 8015edc:	f7ea f9aa 	bl	8000234 <strlen>
 8015ee0:	4a82      	ldr	r2, [pc, #520]	@ (80160ec <rcl_expand_topic_name+0x2a0>)
 8015ee2:	4b83      	ldr	r3, [pc, #524]	@ (80160f0 <rcl_expand_topic_name+0x2a4>)
 8015ee4:	2801      	cmp	r0, #1
 8015ee6:	bf18      	it	ne
 8015ee8:	4613      	movne	r3, r2
 8015eea:	9302      	str	r3, [sp, #8]
 8015eec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015ef4:	f108 0301 	add.w	r3, r8, #1
 8015ef8:	9305      	str	r3, [sp, #20]
 8015efa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015efe:	9301      	str	r3, [sp, #4]
 8015f00:	ab14      	add	r3, sp, #80	@ 0x50
 8015f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f04:	f7fd fecc 	bl	8013ca0 <rcutils_format_string_limit>
 8015f08:	4682      	mov	sl, r0
 8015f0a:	2800      	cmp	r0, #0
 8015f0c:	f000 80c7 	beq.w	801609e <rcl_expand_topic_name+0x252>
 8015f10:	2d00      	cmp	r5, #0
 8015f12:	f000 80a2 	beq.w	801605a <rcl_expand_topic_name+0x20e>
 8015f16:	217b      	movs	r1, #123	@ 0x7b
 8015f18:	f000 ff06 	bl	8016d28 <strchr>
 8015f1c:	46d1      	mov	r9, sl
 8015f1e:	4605      	mov	r5, r0
 8015f20:	9407      	str	r4, [sp, #28]
 8015f22:	46d3      	mov	fp, sl
 8015f24:	464c      	mov	r4, r9
 8015f26:	2d00      	cmp	r5, #0
 8015f28:	f000 80be 	beq.w	80160a8 <rcl_expand_topic_name+0x25c>
 8015f2c:	217d      	movs	r1, #125	@ 0x7d
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f000 fefa 	bl	8016d28 <strchr>
 8015f34:	eba0 0905 	sub.w	r9, r0, r5
 8015f38:	f109 0a01 	add.w	sl, r9, #1
 8015f3c:	486d      	ldr	r0, [pc, #436]	@ (80160f4 <rcl_expand_topic_name+0x2a8>)
 8015f3e:	4652      	mov	r2, sl
 8015f40:	4629      	mov	r1, r5
 8015f42:	f000 fefe 	bl	8016d42 <strncmp>
 8015f46:	2800      	cmp	r0, #0
 8015f48:	d067      	beq.n	801601a <rcl_expand_topic_name+0x1ce>
 8015f4a:	486b      	ldr	r0, [pc, #428]	@ (80160f8 <rcl_expand_topic_name+0x2ac>)
 8015f4c:	4652      	mov	r2, sl
 8015f4e:	4629      	mov	r1, r5
 8015f50:	f000 fef7 	bl	8016d42 <strncmp>
 8015f54:	b130      	cbz	r0, 8015f64 <rcl_expand_topic_name+0x118>
 8015f56:	4869      	ldr	r0, [pc, #420]	@ (80160fc <rcl_expand_topic_name+0x2b0>)
 8015f58:	4652      	mov	r2, sl
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	f000 fef1 	bl	8016d42 <strncmp>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d137      	bne.n	8015fd4 <rcl_expand_topic_name+0x188>
 8015f64:	46b9      	mov	r9, r7
 8015f66:	ab16      	add	r3, sp, #88	@ 0x58
 8015f68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015f70:	ab14      	add	r3, sp, #80	@ 0x50
 8015f72:	4628      	mov	r0, r5
 8015f74:	cb0c      	ldmia	r3, {r2, r3}
 8015f76:	4651      	mov	r1, sl
 8015f78:	f7fd ffce 	bl	8013f18 <rcutils_strndup>
 8015f7c:	4605      	mov	r5, r0
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	f000 809c 	beq.w	80160bc <rcl_expand_topic_name+0x270>
 8015f84:	464a      	mov	r2, r9
 8015f86:	4620      	mov	r0, r4
 8015f88:	ab14      	add	r3, sp, #80	@ 0x50
 8015f8a:	4629      	mov	r1, r5
 8015f8c:	f7fd fec2 	bl	8013d14 <rcutils_repl_str>
 8015f90:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015f92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015f94:	4604      	mov	r4, r0
 8015f96:	4628      	mov	r0, r5
 8015f98:	4798      	blx	r3
 8015f9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015f9c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015f9e:	4658      	mov	r0, fp
 8015fa0:	4798      	blx	r3
 8015fa2:	2c00      	cmp	r4, #0
 8015fa4:	d07b      	beq.n	801609e <rcl_expand_topic_name+0x252>
 8015fa6:	217b      	movs	r1, #123	@ 0x7b
 8015fa8:	4620      	mov	r0, r4
 8015faa:	f000 febd 	bl	8016d28 <strchr>
 8015fae:	46a3      	mov	fp, r4
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	e7b8      	b.n	8015f26 <rcl_expand_topic_name+0xda>
 8015fb4:	240b      	movs	r4, #11
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	b00b      	add	sp, #44	@ 0x2c
 8015fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fbe:	f7fb f875 	bl	80110ac <rcl_convert_rmw_ret_to_rcl_ret>
 8015fc2:	4604      	mov	r4, r0
 8015fc4:	e7f7      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 8015fc6:	2467      	movs	r4, #103	@ 0x67
 8015fc8:	4620      	mov	r0, r4
 8015fca:	b00b      	add	sp, #44	@ 0x2c
 8015fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd0:	24c9      	movs	r4, #201	@ 0xc9
 8015fd2:	e7f0      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 8015fd4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8015fd8:	9806      	ldr	r0, [sp, #24]
 8015fda:	1c69      	adds	r1, r5, #1
 8015fdc:	f7fe f8b6 	bl	801414c <rcutils_string_map_getn>
 8015fe0:	4681      	mov	r9, r0
 8015fe2:	2800      	cmp	r0, #0
 8015fe4:	d1bf      	bne.n	8015f66 <rcl_expand_topic_name+0x11a>
 8015fe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015fe8:	aa16      	add	r2, sp, #88	@ 0x58
 8015fea:	6018      	str	r0, [r3, #0]
 8015fec:	ca07      	ldmia	r2, {r0, r1, r2}
 8015fee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015ff2:	ab14      	add	r3, sp, #80	@ 0x50
 8015ff4:	cb0c      	ldmia	r3, {r2, r3}
 8015ff6:	4651      	mov	r1, sl
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	f7fd ff8d 	bl	8013f18 <rcutils_strndup>
 8015ffe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016000:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016002:	4798      	blx	r3
 8016004:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016006:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016008:	4658      	mov	r0, fp
 801600a:	2469      	movs	r4, #105	@ 0x69
 801600c:	4798      	blx	r3
 801600e:	e7d2      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 8016010:	2800      	cmp	r0, #0
 8016012:	d05b      	beq.n	80160cc <rcl_expand_topic_name+0x280>
 8016014:	46c1      	mov	r9, r8
 8016016:	46a2      	mov	sl, r4
 8016018:	e782      	b.n	8015f20 <rcl_expand_topic_name+0xd4>
 801601a:	46b1      	mov	r9, r6
 801601c:	e7a3      	b.n	8015f66 <rcl_expand_topic_name+0x11a>
 801601e:	2800      	cmp	r0, #0
 8016020:	d1f8      	bne.n	8016014 <rcl_expand_topic_name+0x1c8>
 8016022:	4638      	mov	r0, r7
 8016024:	f7ea f906 	bl	8000234 <strlen>
 8016028:	4a35      	ldr	r2, [pc, #212]	@ (8016100 <rcl_expand_topic_name+0x2b4>)
 801602a:	4b36      	ldr	r3, [pc, #216]	@ (8016104 <rcl_expand_topic_name+0x2b8>)
 801602c:	f8cd 8010 	str.w	r8, [sp, #16]
 8016030:	2801      	cmp	r0, #1
 8016032:	bf18      	it	ne
 8016034:	4613      	movne	r3, r2
 8016036:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801603a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801603e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016040:	9703      	str	r7, [sp, #12]
 8016042:	9200      	str	r2, [sp, #0]
 8016044:	ab14      	add	r3, sp, #80	@ 0x50
 8016046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016048:	f7fd fe2a 	bl	8013ca0 <rcutils_format_string_limit>
 801604c:	4682      	mov	sl, r0
 801604e:	4653      	mov	r3, sl
 8016050:	b32b      	cbz	r3, 801609e <rcl_expand_topic_name+0x252>
 8016052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016054:	f8c3 a000 	str.w	sl, [r3]
 8016058:	e7ad      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 801605a:	f89a 3000 	ldrb.w	r3, [sl]
 801605e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016060:	d0f7      	beq.n	8016052 <rcl_expand_topic_name+0x206>
 8016062:	4638      	mov	r0, r7
 8016064:	f7ea f8e6 	bl	8000234 <strlen>
 8016068:	4a25      	ldr	r2, [pc, #148]	@ (8016100 <rcl_expand_topic_name+0x2b4>)
 801606a:	4b26      	ldr	r3, [pc, #152]	@ (8016104 <rcl_expand_topic_name+0x2b8>)
 801606c:	f8cd a010 	str.w	sl, [sp, #16]
 8016070:	2801      	cmp	r0, #1
 8016072:	bf18      	it	ne
 8016074:	4613      	movne	r3, r2
 8016076:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801607a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801607e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016080:	9703      	str	r7, [sp, #12]
 8016082:	9200      	str	r2, [sp, #0]
 8016084:	ab14      	add	r3, sp, #80	@ 0x50
 8016086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016088:	f7fd fe0a 	bl	8013ca0 <rcutils_format_string_limit>
 801608c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801608e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016090:	4605      	mov	r5, r0
 8016092:	4650      	mov	r0, sl
 8016094:	4798      	blx	r3
 8016096:	46aa      	mov	sl, r5
 8016098:	e7d9      	b.n	801604e <rcl_expand_topic_name+0x202>
 801609a:	24ca      	movs	r4, #202	@ 0xca
 801609c:	e78b      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 801609e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80160a0:	2300      	movs	r3, #0
 80160a2:	6013      	str	r3, [r2, #0]
 80160a4:	240a      	movs	r4, #10
 80160a6:	e786      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 80160a8:	465b      	mov	r3, fp
 80160aa:	9c07      	ldr	r4, [sp, #28]
 80160ac:	46da      	mov	sl, fp
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1d3      	bne.n	801605a <rcl_expand_topic_name+0x20e>
 80160b2:	f898 3000 	ldrb.w	r3, [r8]
 80160b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80160b8:	d0cb      	beq.n	8016052 <rcl_expand_topic_name+0x206>
 80160ba:	e7b2      	b.n	8016022 <rcl_expand_topic_name+0x1d6>
 80160bc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80160c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80160c2:	6015      	str	r5, [r2, #0]
 80160c4:	4658      	mov	r0, fp
 80160c6:	4798      	blx	r3
 80160c8:	240a      	movs	r4, #10
 80160ca:	e774      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 80160cc:	ab17      	add	r3, sp, #92	@ 0x5c
 80160ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80160d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80160d6:	ab14      	add	r3, sp, #80	@ 0x50
 80160d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80160da:	4640      	mov	r0, r8
 80160dc:	f7fd fefa 	bl	8013ed4 <rcutils_strdup>
 80160e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80160e2:	2800      	cmp	r0, #0
 80160e4:	6018      	str	r0, [r3, #0]
 80160e6:	bf08      	it	eq
 80160e8:	240a      	moveq	r4, #10
 80160ea:	e764      	b.n	8015fb6 <rcl_expand_topic_name+0x16a>
 80160ec:	080188f4 	.word	0x080188f4
 80160f0:	08017f0c 	.word	0x08017f0c
 80160f4:	080188fc 	.word	0x080188fc
 80160f8:	08018904 	.word	0x08018904
 80160fc:	0801890c 	.word	0x0801890c
 8016100:	08017ed4 	.word	0x08017ed4
 8016104:	08017f1c 	.word	0x08017f1c

08016108 <rcl_get_default_topic_name_substitutions>:
 8016108:	2800      	cmp	r0, #0
 801610a:	bf0c      	ite	eq
 801610c:	200b      	moveq	r0, #11
 801610e:	2000      	movne	r0, #0
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop

08016114 <rcl_get_zero_initialized_guard_condition>:
 8016114:	4a03      	ldr	r2, [pc, #12]	@ (8016124 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016116:	4603      	mov	r3, r0
 8016118:	e892 0003 	ldmia.w	r2, {r0, r1}
 801611c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016120:	4618      	mov	r0, r3
 8016122:	4770      	bx	lr
 8016124:	08018918 	.word	0x08018918

08016128 <rcl_guard_condition_init>:
 8016128:	b082      	sub	sp, #8
 801612a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801612c:	b087      	sub	sp, #28
 801612e:	ac0c      	add	r4, sp, #48	@ 0x30
 8016130:	e884 000c 	stmia.w	r4, {r2, r3}
 8016134:	46a6      	mov	lr, r4
 8016136:	460d      	mov	r5, r1
 8016138:	4604      	mov	r4, r0
 801613a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801613e:	f10d 0c04 	add.w	ip, sp, #4
 8016142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016146:	f8de 3000 	ldr.w	r3, [lr]
 801614a:	f8cc 3000 	str.w	r3, [ip]
 801614e:	a801      	add	r0, sp, #4
 8016150:	f7f5 f860 	bl	800b214 <rcutils_allocator_is_valid>
 8016154:	b338      	cbz	r0, 80161a6 <rcl_guard_condition_init+0x7e>
 8016156:	b334      	cbz	r4, 80161a6 <rcl_guard_condition_init+0x7e>
 8016158:	6866      	ldr	r6, [r4, #4]
 801615a:	b9ee      	cbnz	r6, 8016198 <rcl_guard_condition_init+0x70>
 801615c:	b31d      	cbz	r5, 80161a6 <rcl_guard_condition_init+0x7e>
 801615e:	4628      	mov	r0, r5
 8016160:	f7fa ffc2 	bl	80110e8 <rcl_context_is_valid>
 8016164:	b308      	cbz	r0, 80161aa <rcl_guard_condition_init+0x82>
 8016166:	9b01      	ldr	r3, [sp, #4]
 8016168:	9905      	ldr	r1, [sp, #20]
 801616a:	201c      	movs	r0, #28
 801616c:	4798      	blx	r3
 801616e:	4607      	mov	r7, r0
 8016170:	6060      	str	r0, [r4, #4]
 8016172:	b310      	cbz	r0, 80161ba <rcl_guard_condition_init+0x92>
 8016174:	6828      	ldr	r0, [r5, #0]
 8016176:	3028      	adds	r0, #40	@ 0x28
 8016178:	f000 f9ac 	bl	80164d4 <rmw_create_guard_condition>
 801617c:	6038      	str	r0, [r7, #0]
 801617e:	6860      	ldr	r0, [r4, #4]
 8016180:	6805      	ldr	r5, [r0, #0]
 8016182:	b1a5      	cbz	r5, 80161ae <rcl_guard_condition_init+0x86>
 8016184:	2301      	movs	r3, #1
 8016186:	ac01      	add	r4, sp, #4
 8016188:	7103      	strb	r3, [r0, #4]
 801618a:	f100 0708 	add.w	r7, r0, #8
 801618e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016190:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016192:	6823      	ldr	r3, [r4, #0]
 8016194:	603b      	str	r3, [r7, #0]
 8016196:	e000      	b.n	801619a <rcl_guard_condition_init+0x72>
 8016198:	2664      	movs	r6, #100	@ 0x64
 801619a:	4630      	mov	r0, r6
 801619c:	b007      	add	sp, #28
 801619e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80161a2:	b002      	add	sp, #8
 80161a4:	4770      	bx	lr
 80161a6:	260b      	movs	r6, #11
 80161a8:	e7f7      	b.n	801619a <rcl_guard_condition_init+0x72>
 80161aa:	2665      	movs	r6, #101	@ 0x65
 80161ac:	e7f5      	b.n	801619a <rcl_guard_condition_init+0x72>
 80161ae:	9b02      	ldr	r3, [sp, #8]
 80161b0:	9905      	ldr	r1, [sp, #20]
 80161b2:	4798      	blx	r3
 80161b4:	2601      	movs	r6, #1
 80161b6:	6065      	str	r5, [r4, #4]
 80161b8:	e7ef      	b.n	801619a <rcl_guard_condition_init+0x72>
 80161ba:	260a      	movs	r6, #10
 80161bc:	e7ed      	b.n	801619a <rcl_guard_condition_init+0x72>
 80161be:	bf00      	nop

080161c0 <rcl_guard_condition_init_from_rmw>:
 80161c0:	b082      	sub	sp, #8
 80161c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c6:	b086      	sub	sp, #24
 80161c8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80161cc:	4604      	mov	r4, r0
 80161ce:	f84c 3f04 	str.w	r3, [ip, #4]!
 80161d2:	460e      	mov	r6, r1
 80161d4:	4617      	mov	r7, r2
 80161d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80161da:	f10d 0e04 	add.w	lr, sp, #4
 80161de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80161e2:	f8dc 3000 	ldr.w	r3, [ip]
 80161e6:	f8ce 3000 	str.w	r3, [lr]
 80161ea:	a801      	add	r0, sp, #4
 80161ec:	f7f5 f812 	bl	800b214 <rcutils_allocator_is_valid>
 80161f0:	b350      	cbz	r0, 8016248 <rcl_guard_condition_init_from_rmw+0x88>
 80161f2:	b34c      	cbz	r4, 8016248 <rcl_guard_condition_init_from_rmw+0x88>
 80161f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80161f8:	f1b8 0f00 	cmp.w	r8, #0
 80161fc:	d11e      	bne.n	801623c <rcl_guard_condition_init_from_rmw+0x7c>
 80161fe:	b31f      	cbz	r7, 8016248 <rcl_guard_condition_init_from_rmw+0x88>
 8016200:	4638      	mov	r0, r7
 8016202:	f7fa ff71 	bl	80110e8 <rcl_context_is_valid>
 8016206:	b328      	cbz	r0, 8016254 <rcl_guard_condition_init_from_rmw+0x94>
 8016208:	9b01      	ldr	r3, [sp, #4]
 801620a:	9905      	ldr	r1, [sp, #20]
 801620c:	201c      	movs	r0, #28
 801620e:	4798      	blx	r3
 8016210:	4605      	mov	r5, r0
 8016212:	6060      	str	r0, [r4, #4]
 8016214:	b358      	cbz	r0, 801626e <rcl_guard_condition_init_from_rmw+0xae>
 8016216:	b1fe      	cbz	r6, 8016258 <rcl_guard_condition_init_from_rmw+0x98>
 8016218:	6006      	str	r6, [r0, #0]
 801621a:	f880 8004 	strb.w	r8, [r0, #4]
 801621e:	ac01      	add	r4, sp, #4
 8016220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016222:	f105 0c08 	add.w	ip, r5, #8
 8016226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801622a:	6823      	ldr	r3, [r4, #0]
 801622c:	f8cc 3000 	str.w	r3, [ip]
 8016230:	2000      	movs	r0, #0
 8016232:	b006      	add	sp, #24
 8016234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016238:	b002      	add	sp, #8
 801623a:	4770      	bx	lr
 801623c:	2064      	movs	r0, #100	@ 0x64
 801623e:	b006      	add	sp, #24
 8016240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016244:	b002      	add	sp, #8
 8016246:	4770      	bx	lr
 8016248:	200b      	movs	r0, #11
 801624a:	b006      	add	sp, #24
 801624c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016250:	b002      	add	sp, #8
 8016252:	4770      	bx	lr
 8016254:	2065      	movs	r0, #101	@ 0x65
 8016256:	e7f2      	b.n	801623e <rcl_guard_condition_init_from_rmw+0x7e>
 8016258:	6838      	ldr	r0, [r7, #0]
 801625a:	3028      	adds	r0, #40	@ 0x28
 801625c:	f000 f93a 	bl	80164d4 <rmw_create_guard_condition>
 8016260:	6028      	str	r0, [r5, #0]
 8016262:	6865      	ldr	r5, [r4, #4]
 8016264:	682e      	ldr	r6, [r5, #0]
 8016266:	b126      	cbz	r6, 8016272 <rcl_guard_condition_init_from_rmw+0xb2>
 8016268:	2301      	movs	r3, #1
 801626a:	712b      	strb	r3, [r5, #4]
 801626c:	e7d7      	b.n	801621e <rcl_guard_condition_init_from_rmw+0x5e>
 801626e:	200a      	movs	r0, #10
 8016270:	e7e5      	b.n	801623e <rcl_guard_condition_init_from_rmw+0x7e>
 8016272:	4628      	mov	r0, r5
 8016274:	9b02      	ldr	r3, [sp, #8]
 8016276:	9905      	ldr	r1, [sp, #20]
 8016278:	4798      	blx	r3
 801627a:	6066      	str	r6, [r4, #4]
 801627c:	2001      	movs	r0, #1
 801627e:	e7de      	b.n	801623e <rcl_guard_condition_init_from_rmw+0x7e>

08016280 <rcl_guard_condition_fini>:
 8016280:	b570      	push	{r4, r5, r6, lr}
 8016282:	b082      	sub	sp, #8
 8016284:	b1f0      	cbz	r0, 80162c4 <rcl_guard_condition_fini+0x44>
 8016286:	6843      	ldr	r3, [r0, #4]
 8016288:	4604      	mov	r4, r0
 801628a:	b163      	cbz	r3, 80162a6 <rcl_guard_condition_fini+0x26>
 801628c:	6818      	ldr	r0, [r3, #0]
 801628e:	68de      	ldr	r6, [r3, #12]
 8016290:	6999      	ldr	r1, [r3, #24]
 8016292:	b160      	cbz	r0, 80162ae <rcl_guard_condition_fini+0x2e>
 8016294:	791d      	ldrb	r5, [r3, #4]
 8016296:	b965      	cbnz	r5, 80162b2 <rcl_guard_condition_fini+0x32>
 8016298:	4618      	mov	r0, r3
 801629a:	47b0      	blx	r6
 801629c:	2300      	movs	r3, #0
 801629e:	4628      	mov	r0, r5
 80162a0:	6063      	str	r3, [r4, #4]
 80162a2:	b002      	add	sp, #8
 80162a4:	bd70      	pop	{r4, r5, r6, pc}
 80162a6:	461d      	mov	r5, r3
 80162a8:	4628      	mov	r0, r5
 80162aa:	b002      	add	sp, #8
 80162ac:	bd70      	pop	{r4, r5, r6, pc}
 80162ae:	4605      	mov	r5, r0
 80162b0:	e7f2      	b.n	8016298 <rcl_guard_condition_fini+0x18>
 80162b2:	9101      	str	r1, [sp, #4]
 80162b4:	f000 f922 	bl	80164fc <rmw_destroy_guard_condition>
 80162b8:	1e05      	subs	r5, r0, #0
 80162ba:	6863      	ldr	r3, [r4, #4]
 80162bc:	9901      	ldr	r1, [sp, #4]
 80162be:	bf18      	it	ne
 80162c0:	2501      	movne	r5, #1
 80162c2:	e7e9      	b.n	8016298 <rcl_guard_condition_fini+0x18>
 80162c4:	250b      	movs	r5, #11
 80162c6:	4628      	mov	r0, r5
 80162c8:	b002      	add	sp, #8
 80162ca:	bd70      	pop	{r4, r5, r6, pc}

080162cc <rcl_guard_condition_get_default_options>:
 80162cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162ce:	b087      	sub	sp, #28
 80162d0:	4606      	mov	r6, r0
 80162d2:	4668      	mov	r0, sp
 80162d4:	f7f4 ff90 	bl	800b1f8 <rcutils_get_default_allocator>
 80162d8:	4b09      	ldr	r3, [pc, #36]	@ (8016300 <rcl_guard_condition_get_default_options+0x34>)
 80162da:	46ee      	mov	lr, sp
 80162dc:	469c      	mov	ip, r3
 80162de:	461d      	mov	r5, r3
 80162e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80162e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80162ea:	4634      	mov	r4, r6
 80162ec:	f8de 7000 	ldr.w	r7, [lr]
 80162f0:	f8cc 7000 	str.w	r7, [ip]
 80162f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80162f6:	4630      	mov	r0, r6
 80162f8:	6027      	str	r7, [r4, #0]
 80162fa:	b007      	add	sp, #28
 80162fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162fe:	bf00      	nop
 8016300:	2000cb50 	.word	0x2000cb50

08016304 <rcl_trigger_guard_condition>:
 8016304:	b148      	cbz	r0, 801631a <rcl_trigger_guard_condition+0x16>
 8016306:	b508      	push	{r3, lr}
 8016308:	6843      	ldr	r3, [r0, #4]
 801630a:	b143      	cbz	r3, 801631e <rcl_trigger_guard_condition+0x1a>
 801630c:	6818      	ldr	r0, [r3, #0]
 801630e:	f000 f909 	bl	8016524 <rmw_trigger_guard_condition>
 8016312:	3800      	subs	r0, #0
 8016314:	bf18      	it	ne
 8016316:	2001      	movne	r0, #1
 8016318:	bd08      	pop	{r3, pc}
 801631a:	200b      	movs	r0, #11
 801631c:	4770      	bx	lr
 801631e:	200b      	movs	r0, #11
 8016320:	bd08      	pop	{r3, pc}
 8016322:	bf00      	nop

08016324 <rcl_guard_condition_get_rmw_handle>:
 8016324:	b110      	cbz	r0, 801632c <rcl_guard_condition_get_rmw_handle+0x8>
 8016326:	6840      	ldr	r0, [r0, #4]
 8016328:	b100      	cbz	r0, 801632c <rcl_guard_condition_get_rmw_handle+0x8>
 801632a:	6800      	ldr	r0, [r0, #0]
 801632c:	4770      	bx	lr
 801632e:	bf00      	nop

08016330 <rcl_validate_topic_name>:
 8016330:	2800      	cmp	r0, #0
 8016332:	d07a      	beq.n	801642a <rcl_validate_topic_name+0xfa>
 8016334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016338:	460e      	mov	r6, r1
 801633a:	2900      	cmp	r1, #0
 801633c:	d07c      	beq.n	8016438 <rcl_validate_topic_name+0x108>
 801633e:	4617      	mov	r7, r2
 8016340:	4605      	mov	r5, r0
 8016342:	f7e9 ff77 	bl	8000234 <strlen>
 8016346:	b1b0      	cbz	r0, 8016376 <rcl_validate_topic_name+0x46>
 8016348:	f895 9000 	ldrb.w	r9, [r5]
 801634c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80164d0 <rcl_validate_topic_name+0x1a0>
 8016350:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016354:	f013 0304 	ands.w	r3, r3, #4
 8016358:	d169      	bne.n	801642e <rcl_validate_topic_name+0xfe>
 801635a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801635e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016362:	2a2f      	cmp	r2, #47	@ 0x2f
 8016364:	d10e      	bne.n	8016384 <rcl_validate_topic_name+0x54>
 8016366:	2202      	movs	r2, #2
 8016368:	6032      	str	r2, [r6, #0]
 801636a:	b36f      	cbz	r7, 80163c8 <rcl_validate_topic_name+0x98>
 801636c:	f8c7 8000 	str.w	r8, [r7]
 8016370:	4618      	mov	r0, r3
 8016372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016376:	2301      	movs	r3, #1
 8016378:	6033      	str	r3, [r6, #0]
 801637a:	b32f      	cbz	r7, 80163c8 <rcl_validate_topic_name+0x98>
 801637c:	2000      	movs	r0, #0
 801637e:	6038      	str	r0, [r7, #0]
 8016380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016384:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016388:	461c      	mov	r4, r3
 801638a:	4619      	mov	r1, r3
 801638c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016390:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016394:	f1be 0f09 	cmp.w	lr, #9
 8016398:	d919      	bls.n	80163ce <rcl_validate_topic_name+0x9e>
 801639a:	f022 0e20 	bic.w	lr, r2, #32
 801639e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80163a2:	f1be 0f19 	cmp.w	lr, #25
 80163a6:	d912      	bls.n	80163ce <rcl_validate_topic_name+0x9e>
 80163a8:	2a5f      	cmp	r2, #95	@ 0x5f
 80163aa:	d019      	beq.n	80163e0 <rcl_validate_topic_name+0xb0>
 80163ac:	2a2f      	cmp	r2, #47	@ 0x2f
 80163ae:	d051      	beq.n	8016454 <rcl_validate_topic_name+0x124>
 80163b0:	2a7e      	cmp	r2, #126	@ 0x7e
 80163b2:	d048      	beq.n	8016446 <rcl_validate_topic_name+0x116>
 80163b4:	2a7b      	cmp	r2, #123	@ 0x7b
 80163b6:	d054      	beq.n	8016462 <rcl_validate_topic_name+0x132>
 80163b8:	2a7d      	cmp	r2, #125	@ 0x7d
 80163ba:	d161      	bne.n	8016480 <rcl_validate_topic_name+0x150>
 80163bc:	2c00      	cmp	r4, #0
 80163be:	d155      	bne.n	801646c <rcl_validate_topic_name+0x13c>
 80163c0:	2305      	movs	r3, #5
 80163c2:	6033      	str	r3, [r6, #0]
 80163c4:	b107      	cbz	r7, 80163c8 <rcl_validate_topic_name+0x98>
 80163c6:	6039      	str	r1, [r7, #0]
 80163c8:	2000      	movs	r0, #0
 80163ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163ce:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80163d2:	0752      	lsls	r2, r2, #29
 80163d4:	d504      	bpl.n	80163e0 <rcl_validate_topic_name+0xb0>
 80163d6:	b11c      	cbz	r4, 80163e0 <rcl_validate_topic_name+0xb0>
 80163d8:	b111      	cbz	r1, 80163e0 <rcl_validate_topic_name+0xb0>
 80163da:	1e4a      	subs	r2, r1, #1
 80163dc:	429a      	cmp	r2, r3
 80163de:	d02d      	beq.n	801643c <rcl_validate_topic_name+0x10c>
 80163e0:	3101      	adds	r1, #1
 80163e2:	4288      	cmp	r0, r1
 80163e4:	d1d2      	bne.n	801638c <rcl_validate_topic_name+0x5c>
 80163e6:	2c00      	cmp	r4, #0
 80163e8:	d145      	bne.n	8016476 <rcl_validate_topic_name+0x146>
 80163ea:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80163ee:	d04f      	beq.n	8016490 <rcl_validate_topic_name+0x160>
 80163f0:	4620      	mov	r0, r4
 80163f2:	2301      	movs	r3, #1
 80163f4:	e006      	b.n	8016404 <rcl_validate_topic_name+0xd4>
 80163f6:	428b      	cmp	r3, r1
 80163f8:	f105 0501 	add.w	r5, r5, #1
 80163fc:	f103 0201 	add.w	r2, r3, #1
 8016400:	d236      	bcs.n	8016470 <rcl_validate_topic_name+0x140>
 8016402:	4613      	mov	r3, r2
 8016404:	4580      	cmp	r8, r0
 8016406:	f100 0001 	add.w	r0, r0, #1
 801640a:	d0f4      	beq.n	80163f6 <rcl_validate_topic_name+0xc6>
 801640c:	782a      	ldrb	r2, [r5, #0]
 801640e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016410:	d1f1      	bne.n	80163f6 <rcl_validate_topic_name+0xc6>
 8016412:	786a      	ldrb	r2, [r5, #1]
 8016414:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016418:	0754      	lsls	r4, r2, #29
 801641a:	d5ec      	bpl.n	80163f6 <rcl_validate_topic_name+0xc6>
 801641c:	2204      	movs	r2, #4
 801641e:	6032      	str	r2, [r6, #0]
 8016420:	2f00      	cmp	r7, #0
 8016422:	d0d1      	beq.n	80163c8 <rcl_validate_topic_name+0x98>
 8016424:	603b      	str	r3, [r7, #0]
 8016426:	2000      	movs	r0, #0
 8016428:	e7aa      	b.n	8016380 <rcl_validate_topic_name+0x50>
 801642a:	200b      	movs	r0, #11
 801642c:	4770      	bx	lr
 801642e:	2304      	movs	r3, #4
 8016430:	6033      	str	r3, [r6, #0]
 8016432:	2f00      	cmp	r7, #0
 8016434:	d1a2      	bne.n	801637c <rcl_validate_topic_name+0x4c>
 8016436:	e7c7      	b.n	80163c8 <rcl_validate_topic_name+0x98>
 8016438:	200b      	movs	r0, #11
 801643a:	e7a1      	b.n	8016380 <rcl_validate_topic_name+0x50>
 801643c:	2309      	movs	r3, #9
 801643e:	6033      	str	r3, [r6, #0]
 8016440:	2f00      	cmp	r7, #0
 8016442:	d1c0      	bne.n	80163c6 <rcl_validate_topic_name+0x96>
 8016444:	e7c0      	b.n	80163c8 <rcl_validate_topic_name+0x98>
 8016446:	2900      	cmp	r1, #0
 8016448:	d0ca      	beq.n	80163e0 <rcl_validate_topic_name+0xb0>
 801644a:	2306      	movs	r3, #6
 801644c:	6033      	str	r3, [r6, #0]
 801644e:	2f00      	cmp	r7, #0
 8016450:	d1b9      	bne.n	80163c6 <rcl_validate_topic_name+0x96>
 8016452:	e7b9      	b.n	80163c8 <rcl_validate_topic_name+0x98>
 8016454:	2c00      	cmp	r4, #0
 8016456:	d0c3      	beq.n	80163e0 <rcl_validate_topic_name+0xb0>
 8016458:	2308      	movs	r3, #8
 801645a:	6033      	str	r3, [r6, #0]
 801645c:	2f00      	cmp	r7, #0
 801645e:	d1b2      	bne.n	80163c6 <rcl_validate_topic_name+0x96>
 8016460:	e7b2      	b.n	80163c8 <rcl_validate_topic_name+0x98>
 8016462:	2c00      	cmp	r4, #0
 8016464:	d1f8      	bne.n	8016458 <rcl_validate_topic_name+0x128>
 8016466:	460b      	mov	r3, r1
 8016468:	2401      	movs	r4, #1
 801646a:	e7b9      	b.n	80163e0 <rcl_validate_topic_name+0xb0>
 801646c:	2400      	movs	r4, #0
 801646e:	e7b7      	b.n	80163e0 <rcl_validate_topic_name+0xb0>
 8016470:	2000      	movs	r0, #0
 8016472:	6030      	str	r0, [r6, #0]
 8016474:	e784      	b.n	8016380 <rcl_validate_topic_name+0x50>
 8016476:	2205      	movs	r2, #5
 8016478:	6032      	str	r2, [r6, #0]
 801647a:	2f00      	cmp	r7, #0
 801647c:	d1d2      	bne.n	8016424 <rcl_validate_topic_name+0xf4>
 801647e:	e7a3      	b.n	80163c8 <rcl_validate_topic_name+0x98>
 8016480:	2c00      	cmp	r4, #0
 8016482:	bf14      	ite	ne
 8016484:	2308      	movne	r3, #8
 8016486:	2303      	moveq	r3, #3
 8016488:	6033      	str	r3, [r6, #0]
 801648a:	2f00      	cmp	r7, #0
 801648c:	d19b      	bne.n	80163c6 <rcl_validate_topic_name+0x96>
 801648e:	e79b      	b.n	80163c8 <rcl_validate_topic_name+0x98>
 8016490:	2301      	movs	r3, #1
 8016492:	e00a      	b.n	80164aa <rcl_validate_topic_name+0x17a>
 8016494:	2c01      	cmp	r4, #1
 8016496:	d013      	beq.n	80164c0 <rcl_validate_topic_name+0x190>
 8016498:	4299      	cmp	r1, r3
 801649a:	f104 0401 	add.w	r4, r4, #1
 801649e:	f105 0501 	add.w	r5, r5, #1
 80164a2:	f103 0201 	add.w	r2, r3, #1
 80164a6:	d9e3      	bls.n	8016470 <rcl_validate_topic_name+0x140>
 80164a8:	4613      	mov	r3, r2
 80164aa:	45a0      	cmp	r8, r4
 80164ac:	d0f4      	beq.n	8016498 <rcl_validate_topic_name+0x168>
 80164ae:	782a      	ldrb	r2, [r5, #0]
 80164b0:	2a2f      	cmp	r2, #47	@ 0x2f
 80164b2:	d1ef      	bne.n	8016494 <rcl_validate_topic_name+0x164>
 80164b4:	786a      	ldrb	r2, [r5, #1]
 80164b6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80164ba:	0752      	lsls	r2, r2, #29
 80164bc:	d5ec      	bpl.n	8016498 <rcl_validate_topic_name+0x168>
 80164be:	e7ad      	b.n	801641c <rcl_validate_topic_name+0xec>
 80164c0:	2307      	movs	r3, #7
 80164c2:	6033      	str	r3, [r6, #0]
 80164c4:	2f00      	cmp	r7, #0
 80164c6:	f43f af7f 	beq.w	80163c8 <rcl_validate_topic_name+0x98>
 80164ca:	603c      	str	r4, [r7, #0]
 80164cc:	2000      	movs	r0, #0
 80164ce:	e757      	b.n	8016380 <rcl_validate_topic_name+0x50>
 80164d0:	08018990 	.word	0x08018990

080164d4 <rmw_create_guard_condition>:
 80164d4:	b538      	push	{r3, r4, r5, lr}
 80164d6:	4605      	mov	r5, r0
 80164d8:	4807      	ldr	r0, [pc, #28]	@ (80164f8 <rmw_create_guard_condition+0x24>)
 80164da:	f7fe f929 	bl	8014730 <get_memory>
 80164de:	b148      	cbz	r0, 80164f4 <rmw_create_guard_condition+0x20>
 80164e0:	6884      	ldr	r4, [r0, #8]
 80164e2:	2300      	movs	r3, #0
 80164e4:	7423      	strb	r3, [r4, #16]
 80164e6:	61e5      	str	r5, [r4, #28]
 80164e8:	f7fe f98a 	bl	8014800 <rmw_get_implementation_identifier>
 80164ec:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80164f0:	f104 0014 	add.w	r0, r4, #20
 80164f4:	bd38      	pop	{r3, r4, r5, pc}
 80164f6:	bf00      	nop
 80164f8:	2000c9ec 	.word	0x2000c9ec

080164fc <rmw_destroy_guard_condition>:
 80164fc:	b508      	push	{r3, lr}
 80164fe:	4b08      	ldr	r3, [pc, #32]	@ (8016520 <rmw_destroy_guard_condition+0x24>)
 8016500:	6819      	ldr	r1, [r3, #0]
 8016502:	b911      	cbnz	r1, 801650a <rmw_destroy_guard_condition+0xe>
 8016504:	e00a      	b.n	801651c <rmw_destroy_guard_condition+0x20>
 8016506:	6849      	ldr	r1, [r1, #4]
 8016508:	b141      	cbz	r1, 801651c <rmw_destroy_guard_condition+0x20>
 801650a:	688b      	ldr	r3, [r1, #8]
 801650c:	3314      	adds	r3, #20
 801650e:	4298      	cmp	r0, r3
 8016510:	d1f9      	bne.n	8016506 <rmw_destroy_guard_condition+0xa>
 8016512:	4803      	ldr	r0, [pc, #12]	@ (8016520 <rmw_destroy_guard_condition+0x24>)
 8016514:	f7fe f91c 	bl	8014750 <put_memory>
 8016518:	2000      	movs	r0, #0
 801651a:	bd08      	pop	{r3, pc}
 801651c:	2001      	movs	r0, #1
 801651e:	bd08      	pop	{r3, pc}
 8016520:	2000c9ec 	.word	0x2000c9ec

08016524 <rmw_trigger_guard_condition>:
 8016524:	b160      	cbz	r0, 8016540 <rmw_trigger_guard_condition+0x1c>
 8016526:	b510      	push	{r4, lr}
 8016528:	4604      	mov	r4, r0
 801652a:	6800      	ldr	r0, [r0, #0]
 801652c:	f7f6 f87e 	bl	800c62c <is_uxrce_rmw_identifier_valid>
 8016530:	b908      	cbnz	r0, 8016536 <rmw_trigger_guard_condition+0x12>
 8016532:	2001      	movs	r0, #1
 8016534:	bd10      	pop	{r4, pc}
 8016536:	6863      	ldr	r3, [r4, #4]
 8016538:	2201      	movs	r2, #1
 801653a:	741a      	strb	r2, [r3, #16]
 801653c:	2000      	movs	r0, #0
 801653e:	bd10      	pop	{r4, pc}
 8016540:	2001      	movs	r0, #1
 8016542:	4770      	bx	lr

08016544 <calloc>:
 8016544:	4b02      	ldr	r3, [pc, #8]	@ (8016550 <calloc+0xc>)
 8016546:	460a      	mov	r2, r1
 8016548:	4601      	mov	r1, r0
 801654a:	6818      	ldr	r0, [r3, #0]
 801654c:	f000 b802 	b.w	8016554 <_calloc_r>
 8016550:	20000144 	.word	0x20000144

08016554 <_calloc_r>:
 8016554:	b570      	push	{r4, r5, r6, lr}
 8016556:	fba1 5402 	umull	r5, r4, r1, r2
 801655a:	b93c      	cbnz	r4, 801656c <_calloc_r+0x18>
 801655c:	4629      	mov	r1, r5
 801655e:	f000 f887 	bl	8016670 <_malloc_r>
 8016562:	4606      	mov	r6, r0
 8016564:	b928      	cbnz	r0, 8016572 <_calloc_r+0x1e>
 8016566:	2600      	movs	r6, #0
 8016568:	4630      	mov	r0, r6
 801656a:	bd70      	pop	{r4, r5, r6, pc}
 801656c:	220c      	movs	r2, #12
 801656e:	6002      	str	r2, [r0, #0]
 8016570:	e7f9      	b.n	8016566 <_calloc_r+0x12>
 8016572:	462a      	mov	r2, r5
 8016574:	4621      	mov	r1, r4
 8016576:	f000 fbcf 	bl	8016d18 <memset>
 801657a:	e7f5      	b.n	8016568 <_calloc_r+0x14>

0801657c <getenv>:
 801657c:	b507      	push	{r0, r1, r2, lr}
 801657e:	4b04      	ldr	r3, [pc, #16]	@ (8016590 <getenv+0x14>)
 8016580:	4601      	mov	r1, r0
 8016582:	aa01      	add	r2, sp, #4
 8016584:	6818      	ldr	r0, [r3, #0]
 8016586:	f000 f805 	bl	8016594 <_findenv_r>
 801658a:	b003      	add	sp, #12
 801658c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016590:	20000144 	.word	0x20000144

08016594 <_findenv_r>:
 8016594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016598:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016608 <_findenv_r+0x74>
 801659c:	4606      	mov	r6, r0
 801659e:	4689      	mov	r9, r1
 80165a0:	4617      	mov	r7, r2
 80165a2:	f000 fcaf 	bl	8016f04 <__env_lock>
 80165a6:	f8da 4000 	ldr.w	r4, [sl]
 80165aa:	b134      	cbz	r4, 80165ba <_findenv_r+0x26>
 80165ac:	464b      	mov	r3, r9
 80165ae:	4698      	mov	r8, r3
 80165b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165b4:	b13a      	cbz	r2, 80165c6 <_findenv_r+0x32>
 80165b6:	2a3d      	cmp	r2, #61	@ 0x3d
 80165b8:	d1f9      	bne.n	80165ae <_findenv_r+0x1a>
 80165ba:	4630      	mov	r0, r6
 80165bc:	f000 fca8 	bl	8016f10 <__env_unlock>
 80165c0:	2000      	movs	r0, #0
 80165c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c6:	eba8 0809 	sub.w	r8, r8, r9
 80165ca:	46a3      	mov	fp, r4
 80165cc:	f854 0b04 	ldr.w	r0, [r4], #4
 80165d0:	2800      	cmp	r0, #0
 80165d2:	d0f2      	beq.n	80165ba <_findenv_r+0x26>
 80165d4:	4642      	mov	r2, r8
 80165d6:	4649      	mov	r1, r9
 80165d8:	f000 fbb3 	bl	8016d42 <strncmp>
 80165dc:	2800      	cmp	r0, #0
 80165de:	d1f4      	bne.n	80165ca <_findenv_r+0x36>
 80165e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80165e4:	eb03 0508 	add.w	r5, r3, r8
 80165e8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80165ec:	2b3d      	cmp	r3, #61	@ 0x3d
 80165ee:	d1ec      	bne.n	80165ca <_findenv_r+0x36>
 80165f0:	f8da 3000 	ldr.w	r3, [sl]
 80165f4:	ebab 0303 	sub.w	r3, fp, r3
 80165f8:	109b      	asrs	r3, r3, #2
 80165fa:	4630      	mov	r0, r6
 80165fc:	603b      	str	r3, [r7, #0]
 80165fe:	f000 fc87 	bl	8016f10 <__env_unlock>
 8016602:	1c68      	adds	r0, r5, #1
 8016604:	e7dd      	b.n	80165c2 <_findenv_r+0x2e>
 8016606:	bf00      	nop
 8016608:	20000000 	.word	0x20000000

0801660c <malloc>:
 801660c:	4b02      	ldr	r3, [pc, #8]	@ (8016618 <malloc+0xc>)
 801660e:	4601      	mov	r1, r0
 8016610:	6818      	ldr	r0, [r3, #0]
 8016612:	f000 b82d 	b.w	8016670 <_malloc_r>
 8016616:	bf00      	nop
 8016618:	20000144 	.word	0x20000144

0801661c <free>:
 801661c:	4b02      	ldr	r3, [pc, #8]	@ (8016628 <free+0xc>)
 801661e:	4601      	mov	r1, r0
 8016620:	6818      	ldr	r0, [r3, #0]
 8016622:	f000 bc7b 	b.w	8016f1c <_free_r>
 8016626:	bf00      	nop
 8016628:	20000144 	.word	0x20000144

0801662c <sbrk_aligned>:
 801662c:	b570      	push	{r4, r5, r6, lr}
 801662e:	4e0f      	ldr	r6, [pc, #60]	@ (801666c <sbrk_aligned+0x40>)
 8016630:	460c      	mov	r4, r1
 8016632:	6831      	ldr	r1, [r6, #0]
 8016634:	4605      	mov	r5, r0
 8016636:	b911      	cbnz	r1, 801663e <sbrk_aligned+0x12>
 8016638:	f000 fbe0 	bl	8016dfc <_sbrk_r>
 801663c:	6030      	str	r0, [r6, #0]
 801663e:	4621      	mov	r1, r4
 8016640:	4628      	mov	r0, r5
 8016642:	f000 fbdb 	bl	8016dfc <_sbrk_r>
 8016646:	1c43      	adds	r3, r0, #1
 8016648:	d103      	bne.n	8016652 <sbrk_aligned+0x26>
 801664a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801664e:	4620      	mov	r0, r4
 8016650:	bd70      	pop	{r4, r5, r6, pc}
 8016652:	1cc4      	adds	r4, r0, #3
 8016654:	f024 0403 	bic.w	r4, r4, #3
 8016658:	42a0      	cmp	r0, r4
 801665a:	d0f8      	beq.n	801664e <sbrk_aligned+0x22>
 801665c:	1a21      	subs	r1, r4, r0
 801665e:	4628      	mov	r0, r5
 8016660:	f000 fbcc 	bl	8016dfc <_sbrk_r>
 8016664:	3001      	adds	r0, #1
 8016666:	d1f2      	bne.n	801664e <sbrk_aligned+0x22>
 8016668:	e7ef      	b.n	801664a <sbrk_aligned+0x1e>
 801666a:	bf00      	nop
 801666c:	2000cb64 	.word	0x2000cb64

08016670 <_malloc_r>:
 8016670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016674:	1ccd      	adds	r5, r1, #3
 8016676:	f025 0503 	bic.w	r5, r5, #3
 801667a:	3508      	adds	r5, #8
 801667c:	2d0c      	cmp	r5, #12
 801667e:	bf38      	it	cc
 8016680:	250c      	movcc	r5, #12
 8016682:	2d00      	cmp	r5, #0
 8016684:	4606      	mov	r6, r0
 8016686:	db01      	blt.n	801668c <_malloc_r+0x1c>
 8016688:	42a9      	cmp	r1, r5
 801668a:	d904      	bls.n	8016696 <_malloc_r+0x26>
 801668c:	230c      	movs	r3, #12
 801668e:	6033      	str	r3, [r6, #0]
 8016690:	2000      	movs	r0, #0
 8016692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801676c <_malloc_r+0xfc>
 801669a:	f000 f869 	bl	8016770 <__malloc_lock>
 801669e:	f8d8 3000 	ldr.w	r3, [r8]
 80166a2:	461c      	mov	r4, r3
 80166a4:	bb44      	cbnz	r4, 80166f8 <_malloc_r+0x88>
 80166a6:	4629      	mov	r1, r5
 80166a8:	4630      	mov	r0, r6
 80166aa:	f7ff ffbf 	bl	801662c <sbrk_aligned>
 80166ae:	1c43      	adds	r3, r0, #1
 80166b0:	4604      	mov	r4, r0
 80166b2:	d158      	bne.n	8016766 <_malloc_r+0xf6>
 80166b4:	f8d8 4000 	ldr.w	r4, [r8]
 80166b8:	4627      	mov	r7, r4
 80166ba:	2f00      	cmp	r7, #0
 80166bc:	d143      	bne.n	8016746 <_malloc_r+0xd6>
 80166be:	2c00      	cmp	r4, #0
 80166c0:	d04b      	beq.n	801675a <_malloc_r+0xea>
 80166c2:	6823      	ldr	r3, [r4, #0]
 80166c4:	4639      	mov	r1, r7
 80166c6:	4630      	mov	r0, r6
 80166c8:	eb04 0903 	add.w	r9, r4, r3
 80166cc:	f000 fb96 	bl	8016dfc <_sbrk_r>
 80166d0:	4581      	cmp	r9, r0
 80166d2:	d142      	bne.n	801675a <_malloc_r+0xea>
 80166d4:	6821      	ldr	r1, [r4, #0]
 80166d6:	1a6d      	subs	r5, r5, r1
 80166d8:	4629      	mov	r1, r5
 80166da:	4630      	mov	r0, r6
 80166dc:	f7ff ffa6 	bl	801662c <sbrk_aligned>
 80166e0:	3001      	adds	r0, #1
 80166e2:	d03a      	beq.n	801675a <_malloc_r+0xea>
 80166e4:	6823      	ldr	r3, [r4, #0]
 80166e6:	442b      	add	r3, r5
 80166e8:	6023      	str	r3, [r4, #0]
 80166ea:	f8d8 3000 	ldr.w	r3, [r8]
 80166ee:	685a      	ldr	r2, [r3, #4]
 80166f0:	bb62      	cbnz	r2, 801674c <_malloc_r+0xdc>
 80166f2:	f8c8 7000 	str.w	r7, [r8]
 80166f6:	e00f      	b.n	8016718 <_malloc_r+0xa8>
 80166f8:	6822      	ldr	r2, [r4, #0]
 80166fa:	1b52      	subs	r2, r2, r5
 80166fc:	d420      	bmi.n	8016740 <_malloc_r+0xd0>
 80166fe:	2a0b      	cmp	r2, #11
 8016700:	d917      	bls.n	8016732 <_malloc_r+0xc2>
 8016702:	1961      	adds	r1, r4, r5
 8016704:	42a3      	cmp	r3, r4
 8016706:	6025      	str	r5, [r4, #0]
 8016708:	bf18      	it	ne
 801670a:	6059      	strne	r1, [r3, #4]
 801670c:	6863      	ldr	r3, [r4, #4]
 801670e:	bf08      	it	eq
 8016710:	f8c8 1000 	streq.w	r1, [r8]
 8016714:	5162      	str	r2, [r4, r5]
 8016716:	604b      	str	r3, [r1, #4]
 8016718:	4630      	mov	r0, r6
 801671a:	f000 f82f 	bl	801677c <__malloc_unlock>
 801671e:	f104 000b 	add.w	r0, r4, #11
 8016722:	1d23      	adds	r3, r4, #4
 8016724:	f020 0007 	bic.w	r0, r0, #7
 8016728:	1ac2      	subs	r2, r0, r3
 801672a:	bf1c      	itt	ne
 801672c:	1a1b      	subne	r3, r3, r0
 801672e:	50a3      	strne	r3, [r4, r2]
 8016730:	e7af      	b.n	8016692 <_malloc_r+0x22>
 8016732:	6862      	ldr	r2, [r4, #4]
 8016734:	42a3      	cmp	r3, r4
 8016736:	bf0c      	ite	eq
 8016738:	f8c8 2000 	streq.w	r2, [r8]
 801673c:	605a      	strne	r2, [r3, #4]
 801673e:	e7eb      	b.n	8016718 <_malloc_r+0xa8>
 8016740:	4623      	mov	r3, r4
 8016742:	6864      	ldr	r4, [r4, #4]
 8016744:	e7ae      	b.n	80166a4 <_malloc_r+0x34>
 8016746:	463c      	mov	r4, r7
 8016748:	687f      	ldr	r7, [r7, #4]
 801674a:	e7b6      	b.n	80166ba <_malloc_r+0x4a>
 801674c:	461a      	mov	r2, r3
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	42a3      	cmp	r3, r4
 8016752:	d1fb      	bne.n	801674c <_malloc_r+0xdc>
 8016754:	2300      	movs	r3, #0
 8016756:	6053      	str	r3, [r2, #4]
 8016758:	e7de      	b.n	8016718 <_malloc_r+0xa8>
 801675a:	230c      	movs	r3, #12
 801675c:	6033      	str	r3, [r6, #0]
 801675e:	4630      	mov	r0, r6
 8016760:	f000 f80c 	bl	801677c <__malloc_unlock>
 8016764:	e794      	b.n	8016690 <_malloc_r+0x20>
 8016766:	6005      	str	r5, [r0, #0]
 8016768:	e7d6      	b.n	8016718 <_malloc_r+0xa8>
 801676a:	bf00      	nop
 801676c:	2000cb68 	.word	0x2000cb68

08016770 <__malloc_lock>:
 8016770:	4801      	ldr	r0, [pc, #4]	@ (8016778 <__malloc_lock+0x8>)
 8016772:	f000 bb90 	b.w	8016e96 <__retarget_lock_acquire_recursive>
 8016776:	bf00      	nop
 8016778:	2000ccad 	.word	0x2000ccad

0801677c <__malloc_unlock>:
 801677c:	4801      	ldr	r0, [pc, #4]	@ (8016784 <__malloc_unlock+0x8>)
 801677e:	f000 bb8b 	b.w	8016e98 <__retarget_lock_release_recursive>
 8016782:	bf00      	nop
 8016784:	2000ccad 	.word	0x2000ccad

08016788 <srand>:
 8016788:	b538      	push	{r3, r4, r5, lr}
 801678a:	4b10      	ldr	r3, [pc, #64]	@ (80167cc <srand+0x44>)
 801678c:	681d      	ldr	r5, [r3, #0]
 801678e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016790:	4604      	mov	r4, r0
 8016792:	b9b3      	cbnz	r3, 80167c2 <srand+0x3a>
 8016794:	2018      	movs	r0, #24
 8016796:	f7ff ff39 	bl	801660c <malloc>
 801679a:	4602      	mov	r2, r0
 801679c:	6328      	str	r0, [r5, #48]	@ 0x30
 801679e:	b920      	cbnz	r0, 80167aa <srand+0x22>
 80167a0:	4b0b      	ldr	r3, [pc, #44]	@ (80167d0 <srand+0x48>)
 80167a2:	480c      	ldr	r0, [pc, #48]	@ (80167d4 <srand+0x4c>)
 80167a4:	2146      	movs	r1, #70	@ 0x46
 80167a6:	f000 fb8f 	bl	8016ec8 <__assert_func>
 80167aa:	490b      	ldr	r1, [pc, #44]	@ (80167d8 <srand+0x50>)
 80167ac:	4b0b      	ldr	r3, [pc, #44]	@ (80167dc <srand+0x54>)
 80167ae:	e9c0 1300 	strd	r1, r3, [r0]
 80167b2:	4b0b      	ldr	r3, [pc, #44]	@ (80167e0 <srand+0x58>)
 80167b4:	6083      	str	r3, [r0, #8]
 80167b6:	230b      	movs	r3, #11
 80167b8:	8183      	strh	r3, [r0, #12]
 80167ba:	2100      	movs	r1, #0
 80167bc:	2001      	movs	r0, #1
 80167be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80167c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80167c4:	2200      	movs	r2, #0
 80167c6:	611c      	str	r4, [r3, #16]
 80167c8:	615a      	str	r2, [r3, #20]
 80167ca:	bd38      	pop	{r3, r4, r5, pc}
 80167cc:	20000144 	.word	0x20000144
 80167d0:	08018920 	.word	0x08018920
 80167d4:	08018937 	.word	0x08018937
 80167d8:	abcd330e 	.word	0xabcd330e
 80167dc:	e66d1234 	.word	0xe66d1234
 80167e0:	0005deec 	.word	0x0005deec

080167e4 <rand>:
 80167e4:	4b16      	ldr	r3, [pc, #88]	@ (8016840 <rand+0x5c>)
 80167e6:	b510      	push	{r4, lr}
 80167e8:	681c      	ldr	r4, [r3, #0]
 80167ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80167ec:	b9b3      	cbnz	r3, 801681c <rand+0x38>
 80167ee:	2018      	movs	r0, #24
 80167f0:	f7ff ff0c 	bl	801660c <malloc>
 80167f4:	4602      	mov	r2, r0
 80167f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80167f8:	b920      	cbnz	r0, 8016804 <rand+0x20>
 80167fa:	4b12      	ldr	r3, [pc, #72]	@ (8016844 <rand+0x60>)
 80167fc:	4812      	ldr	r0, [pc, #72]	@ (8016848 <rand+0x64>)
 80167fe:	2152      	movs	r1, #82	@ 0x52
 8016800:	f000 fb62 	bl	8016ec8 <__assert_func>
 8016804:	4911      	ldr	r1, [pc, #68]	@ (801684c <rand+0x68>)
 8016806:	4b12      	ldr	r3, [pc, #72]	@ (8016850 <rand+0x6c>)
 8016808:	e9c0 1300 	strd	r1, r3, [r0]
 801680c:	4b11      	ldr	r3, [pc, #68]	@ (8016854 <rand+0x70>)
 801680e:	6083      	str	r3, [r0, #8]
 8016810:	230b      	movs	r3, #11
 8016812:	8183      	strh	r3, [r0, #12]
 8016814:	2100      	movs	r1, #0
 8016816:	2001      	movs	r0, #1
 8016818:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801681c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801681e:	480e      	ldr	r0, [pc, #56]	@ (8016858 <rand+0x74>)
 8016820:	690b      	ldr	r3, [r1, #16]
 8016822:	694c      	ldr	r4, [r1, #20]
 8016824:	4a0d      	ldr	r2, [pc, #52]	@ (801685c <rand+0x78>)
 8016826:	4358      	muls	r0, r3
 8016828:	fb02 0004 	mla	r0, r2, r4, r0
 801682c:	fba3 3202 	umull	r3, r2, r3, r2
 8016830:	3301      	adds	r3, #1
 8016832:	eb40 0002 	adc.w	r0, r0, r2
 8016836:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801683a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801683e:	bd10      	pop	{r4, pc}
 8016840:	20000144 	.word	0x20000144
 8016844:	08018920 	.word	0x08018920
 8016848:	08018937 	.word	0x08018937
 801684c:	abcd330e 	.word	0xabcd330e
 8016850:	e66d1234 	.word	0xe66d1234
 8016854:	0005deec 	.word	0x0005deec
 8016858:	5851f42d 	.word	0x5851f42d
 801685c:	4c957f2d 	.word	0x4c957f2d

08016860 <realloc>:
 8016860:	4b02      	ldr	r3, [pc, #8]	@ (801686c <realloc+0xc>)
 8016862:	460a      	mov	r2, r1
 8016864:	4601      	mov	r1, r0
 8016866:	6818      	ldr	r0, [r3, #0]
 8016868:	f000 b802 	b.w	8016870 <_realloc_r>
 801686c:	20000144 	.word	0x20000144

08016870 <_realloc_r>:
 8016870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016874:	4680      	mov	r8, r0
 8016876:	4615      	mov	r5, r2
 8016878:	460c      	mov	r4, r1
 801687a:	b921      	cbnz	r1, 8016886 <_realloc_r+0x16>
 801687c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016880:	4611      	mov	r1, r2
 8016882:	f7ff bef5 	b.w	8016670 <_malloc_r>
 8016886:	b92a      	cbnz	r2, 8016894 <_realloc_r+0x24>
 8016888:	f000 fb48 	bl	8016f1c <_free_r>
 801688c:	2400      	movs	r4, #0
 801688e:	4620      	mov	r0, r4
 8016890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016894:	f000 fb8c 	bl	8016fb0 <_malloc_usable_size_r>
 8016898:	4285      	cmp	r5, r0
 801689a:	4606      	mov	r6, r0
 801689c:	d802      	bhi.n	80168a4 <_realloc_r+0x34>
 801689e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80168a2:	d8f4      	bhi.n	801688e <_realloc_r+0x1e>
 80168a4:	4629      	mov	r1, r5
 80168a6:	4640      	mov	r0, r8
 80168a8:	f7ff fee2 	bl	8016670 <_malloc_r>
 80168ac:	4607      	mov	r7, r0
 80168ae:	2800      	cmp	r0, #0
 80168b0:	d0ec      	beq.n	801688c <_realloc_r+0x1c>
 80168b2:	42b5      	cmp	r5, r6
 80168b4:	462a      	mov	r2, r5
 80168b6:	4621      	mov	r1, r4
 80168b8:	bf28      	it	cs
 80168ba:	4632      	movcs	r2, r6
 80168bc:	f000 faf5 	bl	8016eaa <memcpy>
 80168c0:	4621      	mov	r1, r4
 80168c2:	4640      	mov	r0, r8
 80168c4:	f000 fb2a 	bl	8016f1c <_free_r>
 80168c8:	463c      	mov	r4, r7
 80168ca:	e7e0      	b.n	801688e <_realloc_r+0x1e>

080168cc <_strtoul_l.constprop.0>:
 80168cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168d0:	4e34      	ldr	r6, [pc, #208]	@ (80169a4 <_strtoul_l.constprop.0+0xd8>)
 80168d2:	4686      	mov	lr, r0
 80168d4:	460d      	mov	r5, r1
 80168d6:	4628      	mov	r0, r5
 80168d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168dc:	5d37      	ldrb	r7, [r6, r4]
 80168de:	f017 0708 	ands.w	r7, r7, #8
 80168e2:	d1f8      	bne.n	80168d6 <_strtoul_l.constprop.0+0xa>
 80168e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80168e6:	d12f      	bne.n	8016948 <_strtoul_l.constprop.0+0x7c>
 80168e8:	782c      	ldrb	r4, [r5, #0]
 80168ea:	2701      	movs	r7, #1
 80168ec:	1c85      	adds	r5, r0, #2
 80168ee:	f033 0010 	bics.w	r0, r3, #16
 80168f2:	d109      	bne.n	8016908 <_strtoul_l.constprop.0+0x3c>
 80168f4:	2c30      	cmp	r4, #48	@ 0x30
 80168f6:	d12c      	bne.n	8016952 <_strtoul_l.constprop.0+0x86>
 80168f8:	7828      	ldrb	r0, [r5, #0]
 80168fa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80168fe:	2858      	cmp	r0, #88	@ 0x58
 8016900:	d127      	bne.n	8016952 <_strtoul_l.constprop.0+0x86>
 8016902:	786c      	ldrb	r4, [r5, #1]
 8016904:	2310      	movs	r3, #16
 8016906:	3502      	adds	r5, #2
 8016908:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801690c:	2600      	movs	r6, #0
 801690e:	fbb8 f8f3 	udiv	r8, r8, r3
 8016912:	fb03 f908 	mul.w	r9, r3, r8
 8016916:	ea6f 0909 	mvn.w	r9, r9
 801691a:	4630      	mov	r0, r6
 801691c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016920:	f1bc 0f09 	cmp.w	ip, #9
 8016924:	d81c      	bhi.n	8016960 <_strtoul_l.constprop.0+0x94>
 8016926:	4664      	mov	r4, ip
 8016928:	42a3      	cmp	r3, r4
 801692a:	dd2a      	ble.n	8016982 <_strtoul_l.constprop.0+0xb6>
 801692c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016930:	d007      	beq.n	8016942 <_strtoul_l.constprop.0+0x76>
 8016932:	4580      	cmp	r8, r0
 8016934:	d322      	bcc.n	801697c <_strtoul_l.constprop.0+0xb0>
 8016936:	d101      	bne.n	801693c <_strtoul_l.constprop.0+0x70>
 8016938:	45a1      	cmp	r9, r4
 801693a:	db1f      	blt.n	801697c <_strtoul_l.constprop.0+0xb0>
 801693c:	fb00 4003 	mla	r0, r0, r3, r4
 8016940:	2601      	movs	r6, #1
 8016942:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016946:	e7e9      	b.n	801691c <_strtoul_l.constprop.0+0x50>
 8016948:	2c2b      	cmp	r4, #43	@ 0x2b
 801694a:	bf04      	itt	eq
 801694c:	782c      	ldrbeq	r4, [r5, #0]
 801694e:	1c85      	addeq	r5, r0, #2
 8016950:	e7cd      	b.n	80168ee <_strtoul_l.constprop.0+0x22>
 8016952:	2b00      	cmp	r3, #0
 8016954:	d1d8      	bne.n	8016908 <_strtoul_l.constprop.0+0x3c>
 8016956:	2c30      	cmp	r4, #48	@ 0x30
 8016958:	bf0c      	ite	eq
 801695a:	2308      	moveq	r3, #8
 801695c:	230a      	movne	r3, #10
 801695e:	e7d3      	b.n	8016908 <_strtoul_l.constprop.0+0x3c>
 8016960:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016964:	f1bc 0f19 	cmp.w	ip, #25
 8016968:	d801      	bhi.n	801696e <_strtoul_l.constprop.0+0xa2>
 801696a:	3c37      	subs	r4, #55	@ 0x37
 801696c:	e7dc      	b.n	8016928 <_strtoul_l.constprop.0+0x5c>
 801696e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016972:	f1bc 0f19 	cmp.w	ip, #25
 8016976:	d804      	bhi.n	8016982 <_strtoul_l.constprop.0+0xb6>
 8016978:	3c57      	subs	r4, #87	@ 0x57
 801697a:	e7d5      	b.n	8016928 <_strtoul_l.constprop.0+0x5c>
 801697c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016980:	e7df      	b.n	8016942 <_strtoul_l.constprop.0+0x76>
 8016982:	1c73      	adds	r3, r6, #1
 8016984:	d106      	bne.n	8016994 <_strtoul_l.constprop.0+0xc8>
 8016986:	2322      	movs	r3, #34	@ 0x22
 8016988:	f8ce 3000 	str.w	r3, [lr]
 801698c:	4630      	mov	r0, r6
 801698e:	b932      	cbnz	r2, 801699e <_strtoul_l.constprop.0+0xd2>
 8016990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016994:	b107      	cbz	r7, 8016998 <_strtoul_l.constprop.0+0xcc>
 8016996:	4240      	negs	r0, r0
 8016998:	2a00      	cmp	r2, #0
 801699a:	d0f9      	beq.n	8016990 <_strtoul_l.constprop.0+0xc4>
 801699c:	b106      	cbz	r6, 80169a0 <_strtoul_l.constprop.0+0xd4>
 801699e:	1e69      	subs	r1, r5, #1
 80169a0:	6011      	str	r1, [r2, #0]
 80169a2:	e7f5      	b.n	8016990 <_strtoul_l.constprop.0+0xc4>
 80169a4:	08018990 	.word	0x08018990

080169a8 <strtoul>:
 80169a8:	4613      	mov	r3, r2
 80169aa:	460a      	mov	r2, r1
 80169ac:	4601      	mov	r1, r0
 80169ae:	4802      	ldr	r0, [pc, #8]	@ (80169b8 <strtoul+0x10>)
 80169b0:	6800      	ldr	r0, [r0, #0]
 80169b2:	f7ff bf8b 	b.w	80168cc <_strtoul_l.constprop.0>
 80169b6:	bf00      	nop
 80169b8:	20000144 	.word	0x20000144

080169bc <std>:
 80169bc:	2300      	movs	r3, #0
 80169be:	b510      	push	{r4, lr}
 80169c0:	4604      	mov	r4, r0
 80169c2:	e9c0 3300 	strd	r3, r3, [r0]
 80169c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80169ca:	6083      	str	r3, [r0, #8]
 80169cc:	8181      	strh	r1, [r0, #12]
 80169ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80169d0:	81c2      	strh	r2, [r0, #14]
 80169d2:	6183      	str	r3, [r0, #24]
 80169d4:	4619      	mov	r1, r3
 80169d6:	2208      	movs	r2, #8
 80169d8:	305c      	adds	r0, #92	@ 0x5c
 80169da:	f000 f99d 	bl	8016d18 <memset>
 80169de:	4b0d      	ldr	r3, [pc, #52]	@ (8016a14 <std+0x58>)
 80169e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80169e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016a18 <std+0x5c>)
 80169e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80169e6:	4b0d      	ldr	r3, [pc, #52]	@ (8016a1c <std+0x60>)
 80169e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80169ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016a20 <std+0x64>)
 80169ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80169ee:	4b0d      	ldr	r3, [pc, #52]	@ (8016a24 <std+0x68>)
 80169f0:	6224      	str	r4, [r4, #32]
 80169f2:	429c      	cmp	r4, r3
 80169f4:	d006      	beq.n	8016a04 <std+0x48>
 80169f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80169fa:	4294      	cmp	r4, r2
 80169fc:	d002      	beq.n	8016a04 <std+0x48>
 80169fe:	33d0      	adds	r3, #208	@ 0xd0
 8016a00:	429c      	cmp	r4, r3
 8016a02:	d105      	bne.n	8016a10 <std+0x54>
 8016a04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a0c:	f000 ba42 	b.w	8016e94 <__retarget_lock_init_recursive>
 8016a10:	bd10      	pop	{r4, pc}
 8016a12:	bf00      	nop
 8016a14:	08016bcd 	.word	0x08016bcd
 8016a18:	08016bef 	.word	0x08016bef
 8016a1c:	08016c27 	.word	0x08016c27
 8016a20:	08016c4b 	.word	0x08016c4b
 8016a24:	2000cb6c 	.word	0x2000cb6c

08016a28 <stdio_exit_handler>:
 8016a28:	4a02      	ldr	r2, [pc, #8]	@ (8016a34 <stdio_exit_handler+0xc>)
 8016a2a:	4903      	ldr	r1, [pc, #12]	@ (8016a38 <stdio_exit_handler+0x10>)
 8016a2c:	4803      	ldr	r0, [pc, #12]	@ (8016a3c <stdio_exit_handler+0x14>)
 8016a2e:	f000 b869 	b.w	8016b04 <_fwalk_sglue>
 8016a32:	bf00      	nop
 8016a34:	20000138 	.word	0x20000138
 8016a38:	08017919 	.word	0x08017919
 8016a3c:	20000148 	.word	0x20000148

08016a40 <cleanup_stdio>:
 8016a40:	6841      	ldr	r1, [r0, #4]
 8016a42:	4b0c      	ldr	r3, [pc, #48]	@ (8016a74 <cleanup_stdio+0x34>)
 8016a44:	4299      	cmp	r1, r3
 8016a46:	b510      	push	{r4, lr}
 8016a48:	4604      	mov	r4, r0
 8016a4a:	d001      	beq.n	8016a50 <cleanup_stdio+0x10>
 8016a4c:	f000 ff64 	bl	8017918 <_fflush_r>
 8016a50:	68a1      	ldr	r1, [r4, #8]
 8016a52:	4b09      	ldr	r3, [pc, #36]	@ (8016a78 <cleanup_stdio+0x38>)
 8016a54:	4299      	cmp	r1, r3
 8016a56:	d002      	beq.n	8016a5e <cleanup_stdio+0x1e>
 8016a58:	4620      	mov	r0, r4
 8016a5a:	f000 ff5d 	bl	8017918 <_fflush_r>
 8016a5e:	68e1      	ldr	r1, [r4, #12]
 8016a60:	4b06      	ldr	r3, [pc, #24]	@ (8016a7c <cleanup_stdio+0x3c>)
 8016a62:	4299      	cmp	r1, r3
 8016a64:	d004      	beq.n	8016a70 <cleanup_stdio+0x30>
 8016a66:	4620      	mov	r0, r4
 8016a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a6c:	f000 bf54 	b.w	8017918 <_fflush_r>
 8016a70:	bd10      	pop	{r4, pc}
 8016a72:	bf00      	nop
 8016a74:	2000cb6c 	.word	0x2000cb6c
 8016a78:	2000cbd4 	.word	0x2000cbd4
 8016a7c:	2000cc3c 	.word	0x2000cc3c

08016a80 <global_stdio_init.part.0>:
 8016a80:	b510      	push	{r4, lr}
 8016a82:	4b0b      	ldr	r3, [pc, #44]	@ (8016ab0 <global_stdio_init.part.0+0x30>)
 8016a84:	4c0b      	ldr	r4, [pc, #44]	@ (8016ab4 <global_stdio_init.part.0+0x34>)
 8016a86:	4a0c      	ldr	r2, [pc, #48]	@ (8016ab8 <global_stdio_init.part.0+0x38>)
 8016a88:	601a      	str	r2, [r3, #0]
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	2104      	movs	r1, #4
 8016a90:	f7ff ff94 	bl	80169bc <std>
 8016a94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016a98:	2201      	movs	r2, #1
 8016a9a:	2109      	movs	r1, #9
 8016a9c:	f7ff ff8e 	bl	80169bc <std>
 8016aa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016aa4:	2202      	movs	r2, #2
 8016aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aaa:	2112      	movs	r1, #18
 8016aac:	f7ff bf86 	b.w	80169bc <std>
 8016ab0:	2000cca4 	.word	0x2000cca4
 8016ab4:	2000cb6c 	.word	0x2000cb6c
 8016ab8:	08016a29 	.word	0x08016a29

08016abc <__sfp_lock_acquire>:
 8016abc:	4801      	ldr	r0, [pc, #4]	@ (8016ac4 <__sfp_lock_acquire+0x8>)
 8016abe:	f000 b9ea 	b.w	8016e96 <__retarget_lock_acquire_recursive>
 8016ac2:	bf00      	nop
 8016ac4:	2000ccae 	.word	0x2000ccae

08016ac8 <__sfp_lock_release>:
 8016ac8:	4801      	ldr	r0, [pc, #4]	@ (8016ad0 <__sfp_lock_release+0x8>)
 8016aca:	f000 b9e5 	b.w	8016e98 <__retarget_lock_release_recursive>
 8016ace:	bf00      	nop
 8016ad0:	2000ccae 	.word	0x2000ccae

08016ad4 <__sinit>:
 8016ad4:	b510      	push	{r4, lr}
 8016ad6:	4604      	mov	r4, r0
 8016ad8:	f7ff fff0 	bl	8016abc <__sfp_lock_acquire>
 8016adc:	6a23      	ldr	r3, [r4, #32]
 8016ade:	b11b      	cbz	r3, 8016ae8 <__sinit+0x14>
 8016ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ae4:	f7ff bff0 	b.w	8016ac8 <__sfp_lock_release>
 8016ae8:	4b04      	ldr	r3, [pc, #16]	@ (8016afc <__sinit+0x28>)
 8016aea:	6223      	str	r3, [r4, #32]
 8016aec:	4b04      	ldr	r3, [pc, #16]	@ (8016b00 <__sinit+0x2c>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d1f5      	bne.n	8016ae0 <__sinit+0xc>
 8016af4:	f7ff ffc4 	bl	8016a80 <global_stdio_init.part.0>
 8016af8:	e7f2      	b.n	8016ae0 <__sinit+0xc>
 8016afa:	bf00      	nop
 8016afc:	08016a41 	.word	0x08016a41
 8016b00:	2000cca4 	.word	0x2000cca4

08016b04 <_fwalk_sglue>:
 8016b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b08:	4607      	mov	r7, r0
 8016b0a:	4688      	mov	r8, r1
 8016b0c:	4614      	mov	r4, r2
 8016b0e:	2600      	movs	r6, #0
 8016b10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b14:	f1b9 0901 	subs.w	r9, r9, #1
 8016b18:	d505      	bpl.n	8016b26 <_fwalk_sglue+0x22>
 8016b1a:	6824      	ldr	r4, [r4, #0]
 8016b1c:	2c00      	cmp	r4, #0
 8016b1e:	d1f7      	bne.n	8016b10 <_fwalk_sglue+0xc>
 8016b20:	4630      	mov	r0, r6
 8016b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b26:	89ab      	ldrh	r3, [r5, #12]
 8016b28:	2b01      	cmp	r3, #1
 8016b2a:	d907      	bls.n	8016b3c <_fwalk_sglue+0x38>
 8016b2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b30:	3301      	adds	r3, #1
 8016b32:	d003      	beq.n	8016b3c <_fwalk_sglue+0x38>
 8016b34:	4629      	mov	r1, r5
 8016b36:	4638      	mov	r0, r7
 8016b38:	47c0      	blx	r8
 8016b3a:	4306      	orrs	r6, r0
 8016b3c:	3568      	adds	r5, #104	@ 0x68
 8016b3e:	e7e9      	b.n	8016b14 <_fwalk_sglue+0x10>

08016b40 <iprintf>:
 8016b40:	b40f      	push	{r0, r1, r2, r3}
 8016b42:	b507      	push	{r0, r1, r2, lr}
 8016b44:	4906      	ldr	r1, [pc, #24]	@ (8016b60 <iprintf+0x20>)
 8016b46:	ab04      	add	r3, sp, #16
 8016b48:	6808      	ldr	r0, [r1, #0]
 8016b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b4e:	6881      	ldr	r1, [r0, #8]
 8016b50:	9301      	str	r3, [sp, #4]
 8016b52:	f000 fbb7 	bl	80172c4 <_vfiprintf_r>
 8016b56:	b003      	add	sp, #12
 8016b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b5c:	b004      	add	sp, #16
 8016b5e:	4770      	bx	lr
 8016b60:	20000144 	.word	0x20000144

08016b64 <sniprintf>:
 8016b64:	b40c      	push	{r2, r3}
 8016b66:	b530      	push	{r4, r5, lr}
 8016b68:	4b17      	ldr	r3, [pc, #92]	@ (8016bc8 <sniprintf+0x64>)
 8016b6a:	1e0c      	subs	r4, r1, #0
 8016b6c:	681d      	ldr	r5, [r3, #0]
 8016b6e:	b09d      	sub	sp, #116	@ 0x74
 8016b70:	da08      	bge.n	8016b84 <sniprintf+0x20>
 8016b72:	238b      	movs	r3, #139	@ 0x8b
 8016b74:	602b      	str	r3, [r5, #0]
 8016b76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b7a:	b01d      	add	sp, #116	@ 0x74
 8016b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b80:	b002      	add	sp, #8
 8016b82:	4770      	bx	lr
 8016b84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016b88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b8c:	bf14      	ite	ne
 8016b8e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016b92:	4623      	moveq	r3, r4
 8016b94:	9304      	str	r3, [sp, #16]
 8016b96:	9307      	str	r3, [sp, #28]
 8016b98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016b9c:	9002      	str	r0, [sp, #8]
 8016b9e:	9006      	str	r0, [sp, #24]
 8016ba0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016ba4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016ba6:	ab21      	add	r3, sp, #132	@ 0x84
 8016ba8:	a902      	add	r1, sp, #8
 8016baa:	4628      	mov	r0, r5
 8016bac:	9301      	str	r3, [sp, #4]
 8016bae:	f000 fa63 	bl	8017078 <_svfiprintf_r>
 8016bb2:	1c43      	adds	r3, r0, #1
 8016bb4:	bfbc      	itt	lt
 8016bb6:	238b      	movlt	r3, #139	@ 0x8b
 8016bb8:	602b      	strlt	r3, [r5, #0]
 8016bba:	2c00      	cmp	r4, #0
 8016bbc:	d0dd      	beq.n	8016b7a <sniprintf+0x16>
 8016bbe:	9b02      	ldr	r3, [sp, #8]
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	701a      	strb	r2, [r3, #0]
 8016bc4:	e7d9      	b.n	8016b7a <sniprintf+0x16>
 8016bc6:	bf00      	nop
 8016bc8:	20000144 	.word	0x20000144

08016bcc <__sread>:
 8016bcc:	b510      	push	{r4, lr}
 8016bce:	460c      	mov	r4, r1
 8016bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd4:	f000 f900 	bl	8016dd8 <_read_r>
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	bfab      	itete	ge
 8016bdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016bde:	89a3      	ldrhlt	r3, [r4, #12]
 8016be0:	181b      	addge	r3, r3, r0
 8016be2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016be6:	bfac      	ite	ge
 8016be8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016bea:	81a3      	strhlt	r3, [r4, #12]
 8016bec:	bd10      	pop	{r4, pc}

08016bee <__swrite>:
 8016bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf2:	461f      	mov	r7, r3
 8016bf4:	898b      	ldrh	r3, [r1, #12]
 8016bf6:	05db      	lsls	r3, r3, #23
 8016bf8:	4605      	mov	r5, r0
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	4616      	mov	r6, r2
 8016bfe:	d505      	bpl.n	8016c0c <__swrite+0x1e>
 8016c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c04:	2302      	movs	r3, #2
 8016c06:	2200      	movs	r2, #0
 8016c08:	f000 f8d4 	bl	8016db4 <_lseek_r>
 8016c0c:	89a3      	ldrh	r3, [r4, #12]
 8016c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c16:	81a3      	strh	r3, [r4, #12]
 8016c18:	4632      	mov	r2, r6
 8016c1a:	463b      	mov	r3, r7
 8016c1c:	4628      	mov	r0, r5
 8016c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c22:	f000 b8fb 	b.w	8016e1c <_write_r>

08016c26 <__sseek>:
 8016c26:	b510      	push	{r4, lr}
 8016c28:	460c      	mov	r4, r1
 8016c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c2e:	f000 f8c1 	bl	8016db4 <_lseek_r>
 8016c32:	1c43      	adds	r3, r0, #1
 8016c34:	89a3      	ldrh	r3, [r4, #12]
 8016c36:	bf15      	itete	ne
 8016c38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016c3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016c3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016c42:	81a3      	strheq	r3, [r4, #12]
 8016c44:	bf18      	it	ne
 8016c46:	81a3      	strhne	r3, [r4, #12]
 8016c48:	bd10      	pop	{r4, pc}

08016c4a <__sclose>:
 8016c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c4e:	f000 b8a1 	b.w	8016d94 <_close_r>

08016c52 <_vsniprintf_r>:
 8016c52:	b530      	push	{r4, r5, lr}
 8016c54:	4614      	mov	r4, r2
 8016c56:	2c00      	cmp	r4, #0
 8016c58:	b09b      	sub	sp, #108	@ 0x6c
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	da05      	bge.n	8016c6c <_vsniprintf_r+0x1a>
 8016c60:	238b      	movs	r3, #139	@ 0x8b
 8016c62:	6003      	str	r3, [r0, #0]
 8016c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c68:	b01b      	add	sp, #108	@ 0x6c
 8016c6a:	bd30      	pop	{r4, r5, pc}
 8016c6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016c70:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016c74:	bf14      	ite	ne
 8016c76:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016c7a:	4623      	moveq	r3, r4
 8016c7c:	9302      	str	r3, [sp, #8]
 8016c7e:	9305      	str	r3, [sp, #20]
 8016c80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c84:	9100      	str	r1, [sp, #0]
 8016c86:	9104      	str	r1, [sp, #16]
 8016c88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016c8c:	4669      	mov	r1, sp
 8016c8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016c90:	f000 f9f2 	bl	8017078 <_svfiprintf_r>
 8016c94:	1c43      	adds	r3, r0, #1
 8016c96:	bfbc      	itt	lt
 8016c98:	238b      	movlt	r3, #139	@ 0x8b
 8016c9a:	602b      	strlt	r3, [r5, #0]
 8016c9c:	2c00      	cmp	r4, #0
 8016c9e:	d0e3      	beq.n	8016c68 <_vsniprintf_r+0x16>
 8016ca0:	9b00      	ldr	r3, [sp, #0]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	701a      	strb	r2, [r3, #0]
 8016ca6:	e7df      	b.n	8016c68 <_vsniprintf_r+0x16>

08016ca8 <vsniprintf>:
 8016ca8:	b507      	push	{r0, r1, r2, lr}
 8016caa:	9300      	str	r3, [sp, #0]
 8016cac:	4613      	mov	r3, r2
 8016cae:	460a      	mov	r2, r1
 8016cb0:	4601      	mov	r1, r0
 8016cb2:	4803      	ldr	r0, [pc, #12]	@ (8016cc0 <vsniprintf+0x18>)
 8016cb4:	6800      	ldr	r0, [r0, #0]
 8016cb6:	f7ff ffcc 	bl	8016c52 <_vsniprintf_r>
 8016cba:	b003      	add	sp, #12
 8016cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cc0:	20000144 	.word	0x20000144

08016cc4 <memcmp>:
 8016cc4:	b510      	push	{r4, lr}
 8016cc6:	3901      	subs	r1, #1
 8016cc8:	4402      	add	r2, r0
 8016cca:	4290      	cmp	r0, r2
 8016ccc:	d101      	bne.n	8016cd2 <memcmp+0xe>
 8016cce:	2000      	movs	r0, #0
 8016cd0:	e005      	b.n	8016cde <memcmp+0x1a>
 8016cd2:	7803      	ldrb	r3, [r0, #0]
 8016cd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016cd8:	42a3      	cmp	r3, r4
 8016cda:	d001      	beq.n	8016ce0 <memcmp+0x1c>
 8016cdc:	1b18      	subs	r0, r3, r4
 8016cde:	bd10      	pop	{r4, pc}
 8016ce0:	3001      	adds	r0, #1
 8016ce2:	e7f2      	b.n	8016cca <memcmp+0x6>

08016ce4 <memmove>:
 8016ce4:	4288      	cmp	r0, r1
 8016ce6:	b510      	push	{r4, lr}
 8016ce8:	eb01 0402 	add.w	r4, r1, r2
 8016cec:	d902      	bls.n	8016cf4 <memmove+0x10>
 8016cee:	4284      	cmp	r4, r0
 8016cf0:	4623      	mov	r3, r4
 8016cf2:	d807      	bhi.n	8016d04 <memmove+0x20>
 8016cf4:	1e43      	subs	r3, r0, #1
 8016cf6:	42a1      	cmp	r1, r4
 8016cf8:	d008      	beq.n	8016d0c <memmove+0x28>
 8016cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016cfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d02:	e7f8      	b.n	8016cf6 <memmove+0x12>
 8016d04:	4402      	add	r2, r0
 8016d06:	4601      	mov	r1, r0
 8016d08:	428a      	cmp	r2, r1
 8016d0a:	d100      	bne.n	8016d0e <memmove+0x2a>
 8016d0c:	bd10      	pop	{r4, pc}
 8016d0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d16:	e7f7      	b.n	8016d08 <memmove+0x24>

08016d18 <memset>:
 8016d18:	4402      	add	r2, r0
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d100      	bne.n	8016d22 <memset+0xa>
 8016d20:	4770      	bx	lr
 8016d22:	f803 1b01 	strb.w	r1, [r3], #1
 8016d26:	e7f9      	b.n	8016d1c <memset+0x4>

08016d28 <strchr>:
 8016d28:	b2c9      	uxtb	r1, r1
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d32:	b112      	cbz	r2, 8016d3a <strchr+0x12>
 8016d34:	428a      	cmp	r2, r1
 8016d36:	d1f9      	bne.n	8016d2c <strchr+0x4>
 8016d38:	4770      	bx	lr
 8016d3a:	2900      	cmp	r1, #0
 8016d3c:	bf18      	it	ne
 8016d3e:	2000      	movne	r0, #0
 8016d40:	4770      	bx	lr

08016d42 <strncmp>:
 8016d42:	b510      	push	{r4, lr}
 8016d44:	b16a      	cbz	r2, 8016d62 <strncmp+0x20>
 8016d46:	3901      	subs	r1, #1
 8016d48:	1884      	adds	r4, r0, r2
 8016d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d4e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d103      	bne.n	8016d5e <strncmp+0x1c>
 8016d56:	42a0      	cmp	r0, r4
 8016d58:	d001      	beq.n	8016d5e <strncmp+0x1c>
 8016d5a:	2a00      	cmp	r2, #0
 8016d5c:	d1f5      	bne.n	8016d4a <strncmp+0x8>
 8016d5e:	1ad0      	subs	r0, r2, r3
 8016d60:	bd10      	pop	{r4, pc}
 8016d62:	4610      	mov	r0, r2
 8016d64:	e7fc      	b.n	8016d60 <strncmp+0x1e>

08016d66 <strstr>:
 8016d66:	780a      	ldrb	r2, [r1, #0]
 8016d68:	b570      	push	{r4, r5, r6, lr}
 8016d6a:	b96a      	cbnz	r2, 8016d88 <strstr+0x22>
 8016d6c:	bd70      	pop	{r4, r5, r6, pc}
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d109      	bne.n	8016d86 <strstr+0x20>
 8016d72:	460c      	mov	r4, r1
 8016d74:	4605      	mov	r5, r0
 8016d76:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d0f6      	beq.n	8016d6c <strstr+0x6>
 8016d7e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016d82:	429e      	cmp	r6, r3
 8016d84:	d0f7      	beq.n	8016d76 <strstr+0x10>
 8016d86:	3001      	adds	r0, #1
 8016d88:	7803      	ldrb	r3, [r0, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d1ef      	bne.n	8016d6e <strstr+0x8>
 8016d8e:	4618      	mov	r0, r3
 8016d90:	e7ec      	b.n	8016d6c <strstr+0x6>
	...

08016d94 <_close_r>:
 8016d94:	b538      	push	{r3, r4, r5, lr}
 8016d96:	4d06      	ldr	r5, [pc, #24]	@ (8016db0 <_close_r+0x1c>)
 8016d98:	2300      	movs	r3, #0
 8016d9a:	4604      	mov	r4, r0
 8016d9c:	4608      	mov	r0, r1
 8016d9e:	602b      	str	r3, [r5, #0]
 8016da0:	f7ea fe3e 	bl	8001a20 <_close>
 8016da4:	1c43      	adds	r3, r0, #1
 8016da6:	d102      	bne.n	8016dae <_close_r+0x1a>
 8016da8:	682b      	ldr	r3, [r5, #0]
 8016daa:	b103      	cbz	r3, 8016dae <_close_r+0x1a>
 8016dac:	6023      	str	r3, [r4, #0]
 8016dae:	bd38      	pop	{r3, r4, r5, pc}
 8016db0:	2000cca8 	.word	0x2000cca8

08016db4 <_lseek_r>:
 8016db4:	b538      	push	{r3, r4, r5, lr}
 8016db6:	4d07      	ldr	r5, [pc, #28]	@ (8016dd4 <_lseek_r+0x20>)
 8016db8:	4604      	mov	r4, r0
 8016dba:	4608      	mov	r0, r1
 8016dbc:	4611      	mov	r1, r2
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	602a      	str	r2, [r5, #0]
 8016dc2:	461a      	mov	r2, r3
 8016dc4:	f7ea fe53 	bl	8001a6e <_lseek>
 8016dc8:	1c43      	adds	r3, r0, #1
 8016dca:	d102      	bne.n	8016dd2 <_lseek_r+0x1e>
 8016dcc:	682b      	ldr	r3, [r5, #0]
 8016dce:	b103      	cbz	r3, 8016dd2 <_lseek_r+0x1e>
 8016dd0:	6023      	str	r3, [r4, #0]
 8016dd2:	bd38      	pop	{r3, r4, r5, pc}
 8016dd4:	2000cca8 	.word	0x2000cca8

08016dd8 <_read_r>:
 8016dd8:	b538      	push	{r3, r4, r5, lr}
 8016dda:	4d07      	ldr	r5, [pc, #28]	@ (8016df8 <_read_r+0x20>)
 8016ddc:	4604      	mov	r4, r0
 8016dde:	4608      	mov	r0, r1
 8016de0:	4611      	mov	r1, r2
 8016de2:	2200      	movs	r2, #0
 8016de4:	602a      	str	r2, [r5, #0]
 8016de6:	461a      	mov	r2, r3
 8016de8:	f7ea fde1 	bl	80019ae <_read>
 8016dec:	1c43      	adds	r3, r0, #1
 8016dee:	d102      	bne.n	8016df6 <_read_r+0x1e>
 8016df0:	682b      	ldr	r3, [r5, #0]
 8016df2:	b103      	cbz	r3, 8016df6 <_read_r+0x1e>
 8016df4:	6023      	str	r3, [r4, #0]
 8016df6:	bd38      	pop	{r3, r4, r5, pc}
 8016df8:	2000cca8 	.word	0x2000cca8

08016dfc <_sbrk_r>:
 8016dfc:	b538      	push	{r3, r4, r5, lr}
 8016dfe:	4d06      	ldr	r5, [pc, #24]	@ (8016e18 <_sbrk_r+0x1c>)
 8016e00:	2300      	movs	r3, #0
 8016e02:	4604      	mov	r4, r0
 8016e04:	4608      	mov	r0, r1
 8016e06:	602b      	str	r3, [r5, #0]
 8016e08:	f7ea fe3e 	bl	8001a88 <_sbrk>
 8016e0c:	1c43      	adds	r3, r0, #1
 8016e0e:	d102      	bne.n	8016e16 <_sbrk_r+0x1a>
 8016e10:	682b      	ldr	r3, [r5, #0]
 8016e12:	b103      	cbz	r3, 8016e16 <_sbrk_r+0x1a>
 8016e14:	6023      	str	r3, [r4, #0]
 8016e16:	bd38      	pop	{r3, r4, r5, pc}
 8016e18:	2000cca8 	.word	0x2000cca8

08016e1c <_write_r>:
 8016e1c:	b538      	push	{r3, r4, r5, lr}
 8016e1e:	4d07      	ldr	r5, [pc, #28]	@ (8016e3c <_write_r+0x20>)
 8016e20:	4604      	mov	r4, r0
 8016e22:	4608      	mov	r0, r1
 8016e24:	4611      	mov	r1, r2
 8016e26:	2200      	movs	r2, #0
 8016e28:	602a      	str	r2, [r5, #0]
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	f7ea fddc 	bl	80019e8 <_write>
 8016e30:	1c43      	adds	r3, r0, #1
 8016e32:	d102      	bne.n	8016e3a <_write_r+0x1e>
 8016e34:	682b      	ldr	r3, [r5, #0]
 8016e36:	b103      	cbz	r3, 8016e3a <_write_r+0x1e>
 8016e38:	6023      	str	r3, [r4, #0]
 8016e3a:	bd38      	pop	{r3, r4, r5, pc}
 8016e3c:	2000cca8 	.word	0x2000cca8

08016e40 <__errno>:
 8016e40:	4b01      	ldr	r3, [pc, #4]	@ (8016e48 <__errno+0x8>)
 8016e42:	6818      	ldr	r0, [r3, #0]
 8016e44:	4770      	bx	lr
 8016e46:	bf00      	nop
 8016e48:	20000144 	.word	0x20000144

08016e4c <__libc_init_array>:
 8016e4c:	b570      	push	{r4, r5, r6, lr}
 8016e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8016e84 <__libc_init_array+0x38>)
 8016e50:	4c0d      	ldr	r4, [pc, #52]	@ (8016e88 <__libc_init_array+0x3c>)
 8016e52:	1b64      	subs	r4, r4, r5
 8016e54:	10a4      	asrs	r4, r4, #2
 8016e56:	2600      	movs	r6, #0
 8016e58:	42a6      	cmp	r6, r4
 8016e5a:	d109      	bne.n	8016e70 <__libc_init_array+0x24>
 8016e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8016e8c <__libc_init_array+0x40>)
 8016e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8016e90 <__libc_init_array+0x44>)
 8016e60:	f000 fef8 	bl	8017c54 <_init>
 8016e64:	1b64      	subs	r4, r4, r5
 8016e66:	10a4      	asrs	r4, r4, #2
 8016e68:	2600      	movs	r6, #0
 8016e6a:	42a6      	cmp	r6, r4
 8016e6c:	d105      	bne.n	8016e7a <__libc_init_array+0x2e>
 8016e6e:	bd70      	pop	{r4, r5, r6, pc}
 8016e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e74:	4798      	blx	r3
 8016e76:	3601      	adds	r6, #1
 8016e78:	e7ee      	b.n	8016e58 <__libc_init_array+0xc>
 8016e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e7e:	4798      	blx	r3
 8016e80:	3601      	adds	r6, #1
 8016e82:	e7f2      	b.n	8016e6a <__libc_init_array+0x1e>
 8016e84:	08018b08 	.word	0x08018b08
 8016e88:	08018b08 	.word	0x08018b08
 8016e8c:	08018b08 	.word	0x08018b08
 8016e90:	08018b14 	.word	0x08018b14

08016e94 <__retarget_lock_init_recursive>:
 8016e94:	4770      	bx	lr

08016e96 <__retarget_lock_acquire_recursive>:
 8016e96:	4770      	bx	lr

08016e98 <__retarget_lock_release_recursive>:
 8016e98:	4770      	bx	lr

08016e9a <strcpy>:
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ea0:	f803 2b01 	strb.w	r2, [r3], #1
 8016ea4:	2a00      	cmp	r2, #0
 8016ea6:	d1f9      	bne.n	8016e9c <strcpy+0x2>
 8016ea8:	4770      	bx	lr

08016eaa <memcpy>:
 8016eaa:	440a      	add	r2, r1
 8016eac:	4291      	cmp	r1, r2
 8016eae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016eb2:	d100      	bne.n	8016eb6 <memcpy+0xc>
 8016eb4:	4770      	bx	lr
 8016eb6:	b510      	push	{r4, lr}
 8016eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ec0:	4291      	cmp	r1, r2
 8016ec2:	d1f9      	bne.n	8016eb8 <memcpy+0xe>
 8016ec4:	bd10      	pop	{r4, pc}
	...

08016ec8 <__assert_func>:
 8016ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016eca:	4614      	mov	r4, r2
 8016ecc:	461a      	mov	r2, r3
 8016ece:	4b09      	ldr	r3, [pc, #36]	@ (8016ef4 <__assert_func+0x2c>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	4605      	mov	r5, r0
 8016ed4:	68d8      	ldr	r0, [r3, #12]
 8016ed6:	b954      	cbnz	r4, 8016eee <__assert_func+0x26>
 8016ed8:	4b07      	ldr	r3, [pc, #28]	@ (8016ef8 <__assert_func+0x30>)
 8016eda:	461c      	mov	r4, r3
 8016edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016ee0:	9100      	str	r1, [sp, #0]
 8016ee2:	462b      	mov	r3, r5
 8016ee4:	4905      	ldr	r1, [pc, #20]	@ (8016efc <__assert_func+0x34>)
 8016ee6:	f000 fd3f 	bl	8017968 <fiprintf>
 8016eea:	f000 fde3 	bl	8017ab4 <abort>
 8016eee:	4b04      	ldr	r3, [pc, #16]	@ (8016f00 <__assert_func+0x38>)
 8016ef0:	e7f4      	b.n	8016edc <__assert_func+0x14>
 8016ef2:	bf00      	nop
 8016ef4:	20000144 	.word	0x20000144
 8016ef8:	08018acb 	.word	0x08018acb
 8016efc:	08018a9d 	.word	0x08018a9d
 8016f00:	08018a90 	.word	0x08018a90

08016f04 <__env_lock>:
 8016f04:	4801      	ldr	r0, [pc, #4]	@ (8016f0c <__env_lock+0x8>)
 8016f06:	f7ff bfc6 	b.w	8016e96 <__retarget_lock_acquire_recursive>
 8016f0a:	bf00      	nop
 8016f0c:	2000ccac 	.word	0x2000ccac

08016f10 <__env_unlock>:
 8016f10:	4801      	ldr	r0, [pc, #4]	@ (8016f18 <__env_unlock+0x8>)
 8016f12:	f7ff bfc1 	b.w	8016e98 <__retarget_lock_release_recursive>
 8016f16:	bf00      	nop
 8016f18:	2000ccac 	.word	0x2000ccac

08016f1c <_free_r>:
 8016f1c:	b538      	push	{r3, r4, r5, lr}
 8016f1e:	4605      	mov	r5, r0
 8016f20:	2900      	cmp	r1, #0
 8016f22:	d041      	beq.n	8016fa8 <_free_r+0x8c>
 8016f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f28:	1f0c      	subs	r4, r1, #4
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	bfb8      	it	lt
 8016f2e:	18e4      	addlt	r4, r4, r3
 8016f30:	f7ff fc1e 	bl	8016770 <__malloc_lock>
 8016f34:	4a1d      	ldr	r2, [pc, #116]	@ (8016fac <_free_r+0x90>)
 8016f36:	6813      	ldr	r3, [r2, #0]
 8016f38:	b933      	cbnz	r3, 8016f48 <_free_r+0x2c>
 8016f3a:	6063      	str	r3, [r4, #4]
 8016f3c:	6014      	str	r4, [r2, #0]
 8016f3e:	4628      	mov	r0, r5
 8016f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f44:	f7ff bc1a 	b.w	801677c <__malloc_unlock>
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	d908      	bls.n	8016f5e <_free_r+0x42>
 8016f4c:	6820      	ldr	r0, [r4, #0]
 8016f4e:	1821      	adds	r1, r4, r0
 8016f50:	428b      	cmp	r3, r1
 8016f52:	bf01      	itttt	eq
 8016f54:	6819      	ldreq	r1, [r3, #0]
 8016f56:	685b      	ldreq	r3, [r3, #4]
 8016f58:	1809      	addeq	r1, r1, r0
 8016f5a:	6021      	streq	r1, [r4, #0]
 8016f5c:	e7ed      	b.n	8016f3a <_free_r+0x1e>
 8016f5e:	461a      	mov	r2, r3
 8016f60:	685b      	ldr	r3, [r3, #4]
 8016f62:	b10b      	cbz	r3, 8016f68 <_free_r+0x4c>
 8016f64:	42a3      	cmp	r3, r4
 8016f66:	d9fa      	bls.n	8016f5e <_free_r+0x42>
 8016f68:	6811      	ldr	r1, [r2, #0]
 8016f6a:	1850      	adds	r0, r2, r1
 8016f6c:	42a0      	cmp	r0, r4
 8016f6e:	d10b      	bne.n	8016f88 <_free_r+0x6c>
 8016f70:	6820      	ldr	r0, [r4, #0]
 8016f72:	4401      	add	r1, r0
 8016f74:	1850      	adds	r0, r2, r1
 8016f76:	4283      	cmp	r3, r0
 8016f78:	6011      	str	r1, [r2, #0]
 8016f7a:	d1e0      	bne.n	8016f3e <_free_r+0x22>
 8016f7c:	6818      	ldr	r0, [r3, #0]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	6053      	str	r3, [r2, #4]
 8016f82:	4408      	add	r0, r1
 8016f84:	6010      	str	r0, [r2, #0]
 8016f86:	e7da      	b.n	8016f3e <_free_r+0x22>
 8016f88:	d902      	bls.n	8016f90 <_free_r+0x74>
 8016f8a:	230c      	movs	r3, #12
 8016f8c:	602b      	str	r3, [r5, #0]
 8016f8e:	e7d6      	b.n	8016f3e <_free_r+0x22>
 8016f90:	6820      	ldr	r0, [r4, #0]
 8016f92:	1821      	adds	r1, r4, r0
 8016f94:	428b      	cmp	r3, r1
 8016f96:	bf04      	itt	eq
 8016f98:	6819      	ldreq	r1, [r3, #0]
 8016f9a:	685b      	ldreq	r3, [r3, #4]
 8016f9c:	6063      	str	r3, [r4, #4]
 8016f9e:	bf04      	itt	eq
 8016fa0:	1809      	addeq	r1, r1, r0
 8016fa2:	6021      	streq	r1, [r4, #0]
 8016fa4:	6054      	str	r4, [r2, #4]
 8016fa6:	e7ca      	b.n	8016f3e <_free_r+0x22>
 8016fa8:	bd38      	pop	{r3, r4, r5, pc}
 8016faa:	bf00      	nop
 8016fac:	2000cb68 	.word	0x2000cb68

08016fb0 <_malloc_usable_size_r>:
 8016fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fb4:	1f18      	subs	r0, r3, #4
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	bfbc      	itt	lt
 8016fba:	580b      	ldrlt	r3, [r1, r0]
 8016fbc:	18c0      	addlt	r0, r0, r3
 8016fbe:	4770      	bx	lr

08016fc0 <__ssputs_r>:
 8016fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fc4:	688e      	ldr	r6, [r1, #8]
 8016fc6:	461f      	mov	r7, r3
 8016fc8:	42be      	cmp	r6, r7
 8016fca:	680b      	ldr	r3, [r1, #0]
 8016fcc:	4682      	mov	sl, r0
 8016fce:	460c      	mov	r4, r1
 8016fd0:	4690      	mov	r8, r2
 8016fd2:	d82d      	bhi.n	8017030 <__ssputs_r+0x70>
 8016fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016fd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016fdc:	d026      	beq.n	801702c <__ssputs_r+0x6c>
 8016fde:	6965      	ldr	r5, [r4, #20]
 8016fe0:	6909      	ldr	r1, [r1, #16]
 8016fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fe6:	eba3 0901 	sub.w	r9, r3, r1
 8016fea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fee:	1c7b      	adds	r3, r7, #1
 8016ff0:	444b      	add	r3, r9
 8016ff2:	106d      	asrs	r5, r5, #1
 8016ff4:	429d      	cmp	r5, r3
 8016ff6:	bf38      	it	cc
 8016ff8:	461d      	movcc	r5, r3
 8016ffa:	0553      	lsls	r3, r2, #21
 8016ffc:	d527      	bpl.n	801704e <__ssputs_r+0x8e>
 8016ffe:	4629      	mov	r1, r5
 8017000:	f7ff fb36 	bl	8016670 <_malloc_r>
 8017004:	4606      	mov	r6, r0
 8017006:	b360      	cbz	r0, 8017062 <__ssputs_r+0xa2>
 8017008:	6921      	ldr	r1, [r4, #16]
 801700a:	464a      	mov	r2, r9
 801700c:	f7ff ff4d 	bl	8016eaa <memcpy>
 8017010:	89a3      	ldrh	r3, [r4, #12]
 8017012:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801701a:	81a3      	strh	r3, [r4, #12]
 801701c:	6126      	str	r6, [r4, #16]
 801701e:	6165      	str	r5, [r4, #20]
 8017020:	444e      	add	r6, r9
 8017022:	eba5 0509 	sub.w	r5, r5, r9
 8017026:	6026      	str	r6, [r4, #0]
 8017028:	60a5      	str	r5, [r4, #8]
 801702a:	463e      	mov	r6, r7
 801702c:	42be      	cmp	r6, r7
 801702e:	d900      	bls.n	8017032 <__ssputs_r+0x72>
 8017030:	463e      	mov	r6, r7
 8017032:	6820      	ldr	r0, [r4, #0]
 8017034:	4632      	mov	r2, r6
 8017036:	4641      	mov	r1, r8
 8017038:	f7ff fe54 	bl	8016ce4 <memmove>
 801703c:	68a3      	ldr	r3, [r4, #8]
 801703e:	1b9b      	subs	r3, r3, r6
 8017040:	60a3      	str	r3, [r4, #8]
 8017042:	6823      	ldr	r3, [r4, #0]
 8017044:	4433      	add	r3, r6
 8017046:	6023      	str	r3, [r4, #0]
 8017048:	2000      	movs	r0, #0
 801704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801704e:	462a      	mov	r2, r5
 8017050:	f7ff fc0e 	bl	8016870 <_realloc_r>
 8017054:	4606      	mov	r6, r0
 8017056:	2800      	cmp	r0, #0
 8017058:	d1e0      	bne.n	801701c <__ssputs_r+0x5c>
 801705a:	6921      	ldr	r1, [r4, #16]
 801705c:	4650      	mov	r0, sl
 801705e:	f7ff ff5d 	bl	8016f1c <_free_r>
 8017062:	230c      	movs	r3, #12
 8017064:	f8ca 3000 	str.w	r3, [sl]
 8017068:	89a3      	ldrh	r3, [r4, #12]
 801706a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801706e:	81a3      	strh	r3, [r4, #12]
 8017070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017074:	e7e9      	b.n	801704a <__ssputs_r+0x8a>
	...

08017078 <_svfiprintf_r>:
 8017078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801707c:	4698      	mov	r8, r3
 801707e:	898b      	ldrh	r3, [r1, #12]
 8017080:	061b      	lsls	r3, r3, #24
 8017082:	b09d      	sub	sp, #116	@ 0x74
 8017084:	4607      	mov	r7, r0
 8017086:	460d      	mov	r5, r1
 8017088:	4614      	mov	r4, r2
 801708a:	d510      	bpl.n	80170ae <_svfiprintf_r+0x36>
 801708c:	690b      	ldr	r3, [r1, #16]
 801708e:	b973      	cbnz	r3, 80170ae <_svfiprintf_r+0x36>
 8017090:	2140      	movs	r1, #64	@ 0x40
 8017092:	f7ff faed 	bl	8016670 <_malloc_r>
 8017096:	6028      	str	r0, [r5, #0]
 8017098:	6128      	str	r0, [r5, #16]
 801709a:	b930      	cbnz	r0, 80170aa <_svfiprintf_r+0x32>
 801709c:	230c      	movs	r3, #12
 801709e:	603b      	str	r3, [r7, #0]
 80170a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170a4:	b01d      	add	sp, #116	@ 0x74
 80170a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170aa:	2340      	movs	r3, #64	@ 0x40
 80170ac:	616b      	str	r3, [r5, #20]
 80170ae:	2300      	movs	r3, #0
 80170b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80170b2:	2320      	movs	r3, #32
 80170b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80170bc:	2330      	movs	r3, #48	@ 0x30
 80170be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801725c <_svfiprintf_r+0x1e4>
 80170c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170c6:	f04f 0901 	mov.w	r9, #1
 80170ca:	4623      	mov	r3, r4
 80170cc:	469a      	mov	sl, r3
 80170ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170d2:	b10a      	cbz	r2, 80170d8 <_svfiprintf_r+0x60>
 80170d4:	2a25      	cmp	r2, #37	@ 0x25
 80170d6:	d1f9      	bne.n	80170cc <_svfiprintf_r+0x54>
 80170d8:	ebba 0b04 	subs.w	fp, sl, r4
 80170dc:	d00b      	beq.n	80170f6 <_svfiprintf_r+0x7e>
 80170de:	465b      	mov	r3, fp
 80170e0:	4622      	mov	r2, r4
 80170e2:	4629      	mov	r1, r5
 80170e4:	4638      	mov	r0, r7
 80170e6:	f7ff ff6b 	bl	8016fc0 <__ssputs_r>
 80170ea:	3001      	adds	r0, #1
 80170ec:	f000 80a7 	beq.w	801723e <_svfiprintf_r+0x1c6>
 80170f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170f2:	445a      	add	r2, fp
 80170f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80170f6:	f89a 3000 	ldrb.w	r3, [sl]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	f000 809f 	beq.w	801723e <_svfiprintf_r+0x1c6>
 8017100:	2300      	movs	r3, #0
 8017102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801710a:	f10a 0a01 	add.w	sl, sl, #1
 801710e:	9304      	str	r3, [sp, #16]
 8017110:	9307      	str	r3, [sp, #28]
 8017112:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017116:	931a      	str	r3, [sp, #104]	@ 0x68
 8017118:	4654      	mov	r4, sl
 801711a:	2205      	movs	r2, #5
 801711c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017120:	484e      	ldr	r0, [pc, #312]	@ (801725c <_svfiprintf_r+0x1e4>)
 8017122:	f7e9 f895 	bl	8000250 <memchr>
 8017126:	9a04      	ldr	r2, [sp, #16]
 8017128:	b9d8      	cbnz	r0, 8017162 <_svfiprintf_r+0xea>
 801712a:	06d0      	lsls	r0, r2, #27
 801712c:	bf44      	itt	mi
 801712e:	2320      	movmi	r3, #32
 8017130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017134:	0711      	lsls	r1, r2, #28
 8017136:	bf44      	itt	mi
 8017138:	232b      	movmi	r3, #43	@ 0x2b
 801713a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801713e:	f89a 3000 	ldrb.w	r3, [sl]
 8017142:	2b2a      	cmp	r3, #42	@ 0x2a
 8017144:	d015      	beq.n	8017172 <_svfiprintf_r+0xfa>
 8017146:	9a07      	ldr	r2, [sp, #28]
 8017148:	4654      	mov	r4, sl
 801714a:	2000      	movs	r0, #0
 801714c:	f04f 0c0a 	mov.w	ip, #10
 8017150:	4621      	mov	r1, r4
 8017152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017156:	3b30      	subs	r3, #48	@ 0x30
 8017158:	2b09      	cmp	r3, #9
 801715a:	d94b      	bls.n	80171f4 <_svfiprintf_r+0x17c>
 801715c:	b1b0      	cbz	r0, 801718c <_svfiprintf_r+0x114>
 801715e:	9207      	str	r2, [sp, #28]
 8017160:	e014      	b.n	801718c <_svfiprintf_r+0x114>
 8017162:	eba0 0308 	sub.w	r3, r0, r8
 8017166:	fa09 f303 	lsl.w	r3, r9, r3
 801716a:	4313      	orrs	r3, r2
 801716c:	9304      	str	r3, [sp, #16]
 801716e:	46a2      	mov	sl, r4
 8017170:	e7d2      	b.n	8017118 <_svfiprintf_r+0xa0>
 8017172:	9b03      	ldr	r3, [sp, #12]
 8017174:	1d19      	adds	r1, r3, #4
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	9103      	str	r1, [sp, #12]
 801717a:	2b00      	cmp	r3, #0
 801717c:	bfbb      	ittet	lt
 801717e:	425b      	neglt	r3, r3
 8017180:	f042 0202 	orrlt.w	r2, r2, #2
 8017184:	9307      	strge	r3, [sp, #28]
 8017186:	9307      	strlt	r3, [sp, #28]
 8017188:	bfb8      	it	lt
 801718a:	9204      	strlt	r2, [sp, #16]
 801718c:	7823      	ldrb	r3, [r4, #0]
 801718e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017190:	d10a      	bne.n	80171a8 <_svfiprintf_r+0x130>
 8017192:	7863      	ldrb	r3, [r4, #1]
 8017194:	2b2a      	cmp	r3, #42	@ 0x2a
 8017196:	d132      	bne.n	80171fe <_svfiprintf_r+0x186>
 8017198:	9b03      	ldr	r3, [sp, #12]
 801719a:	1d1a      	adds	r2, r3, #4
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	9203      	str	r2, [sp, #12]
 80171a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171a4:	3402      	adds	r4, #2
 80171a6:	9305      	str	r3, [sp, #20]
 80171a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801726c <_svfiprintf_r+0x1f4>
 80171ac:	7821      	ldrb	r1, [r4, #0]
 80171ae:	2203      	movs	r2, #3
 80171b0:	4650      	mov	r0, sl
 80171b2:	f7e9 f84d 	bl	8000250 <memchr>
 80171b6:	b138      	cbz	r0, 80171c8 <_svfiprintf_r+0x150>
 80171b8:	9b04      	ldr	r3, [sp, #16]
 80171ba:	eba0 000a 	sub.w	r0, r0, sl
 80171be:	2240      	movs	r2, #64	@ 0x40
 80171c0:	4082      	lsls	r2, r0
 80171c2:	4313      	orrs	r3, r2
 80171c4:	3401      	adds	r4, #1
 80171c6:	9304      	str	r3, [sp, #16]
 80171c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171cc:	4824      	ldr	r0, [pc, #144]	@ (8017260 <_svfiprintf_r+0x1e8>)
 80171ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171d2:	2206      	movs	r2, #6
 80171d4:	f7e9 f83c 	bl	8000250 <memchr>
 80171d8:	2800      	cmp	r0, #0
 80171da:	d036      	beq.n	801724a <_svfiprintf_r+0x1d2>
 80171dc:	4b21      	ldr	r3, [pc, #132]	@ (8017264 <_svfiprintf_r+0x1ec>)
 80171de:	bb1b      	cbnz	r3, 8017228 <_svfiprintf_r+0x1b0>
 80171e0:	9b03      	ldr	r3, [sp, #12]
 80171e2:	3307      	adds	r3, #7
 80171e4:	f023 0307 	bic.w	r3, r3, #7
 80171e8:	3308      	adds	r3, #8
 80171ea:	9303      	str	r3, [sp, #12]
 80171ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171ee:	4433      	add	r3, r6
 80171f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80171f2:	e76a      	b.n	80170ca <_svfiprintf_r+0x52>
 80171f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80171f8:	460c      	mov	r4, r1
 80171fa:	2001      	movs	r0, #1
 80171fc:	e7a8      	b.n	8017150 <_svfiprintf_r+0xd8>
 80171fe:	2300      	movs	r3, #0
 8017200:	3401      	adds	r4, #1
 8017202:	9305      	str	r3, [sp, #20]
 8017204:	4619      	mov	r1, r3
 8017206:	f04f 0c0a 	mov.w	ip, #10
 801720a:	4620      	mov	r0, r4
 801720c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017210:	3a30      	subs	r2, #48	@ 0x30
 8017212:	2a09      	cmp	r2, #9
 8017214:	d903      	bls.n	801721e <_svfiprintf_r+0x1a6>
 8017216:	2b00      	cmp	r3, #0
 8017218:	d0c6      	beq.n	80171a8 <_svfiprintf_r+0x130>
 801721a:	9105      	str	r1, [sp, #20]
 801721c:	e7c4      	b.n	80171a8 <_svfiprintf_r+0x130>
 801721e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017222:	4604      	mov	r4, r0
 8017224:	2301      	movs	r3, #1
 8017226:	e7f0      	b.n	801720a <_svfiprintf_r+0x192>
 8017228:	ab03      	add	r3, sp, #12
 801722a:	9300      	str	r3, [sp, #0]
 801722c:	462a      	mov	r2, r5
 801722e:	4b0e      	ldr	r3, [pc, #56]	@ (8017268 <_svfiprintf_r+0x1f0>)
 8017230:	a904      	add	r1, sp, #16
 8017232:	4638      	mov	r0, r7
 8017234:	f3af 8000 	nop.w
 8017238:	1c42      	adds	r2, r0, #1
 801723a:	4606      	mov	r6, r0
 801723c:	d1d6      	bne.n	80171ec <_svfiprintf_r+0x174>
 801723e:	89ab      	ldrh	r3, [r5, #12]
 8017240:	065b      	lsls	r3, r3, #25
 8017242:	f53f af2d 	bmi.w	80170a0 <_svfiprintf_r+0x28>
 8017246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017248:	e72c      	b.n	80170a4 <_svfiprintf_r+0x2c>
 801724a:	ab03      	add	r3, sp, #12
 801724c:	9300      	str	r3, [sp, #0]
 801724e:	462a      	mov	r2, r5
 8017250:	4b05      	ldr	r3, [pc, #20]	@ (8017268 <_svfiprintf_r+0x1f0>)
 8017252:	a904      	add	r1, sp, #16
 8017254:	4638      	mov	r0, r7
 8017256:	f000 f9bb 	bl	80175d0 <_printf_i>
 801725a:	e7ed      	b.n	8017238 <_svfiprintf_r+0x1c0>
 801725c:	08018acc 	.word	0x08018acc
 8017260:	08018ad6 	.word	0x08018ad6
 8017264:	00000000 	.word	0x00000000
 8017268:	08016fc1 	.word	0x08016fc1
 801726c:	08018ad2 	.word	0x08018ad2

08017270 <__sfputc_r>:
 8017270:	6893      	ldr	r3, [r2, #8]
 8017272:	3b01      	subs	r3, #1
 8017274:	2b00      	cmp	r3, #0
 8017276:	b410      	push	{r4}
 8017278:	6093      	str	r3, [r2, #8]
 801727a:	da08      	bge.n	801728e <__sfputc_r+0x1e>
 801727c:	6994      	ldr	r4, [r2, #24]
 801727e:	42a3      	cmp	r3, r4
 8017280:	db01      	blt.n	8017286 <__sfputc_r+0x16>
 8017282:	290a      	cmp	r1, #10
 8017284:	d103      	bne.n	801728e <__sfputc_r+0x1e>
 8017286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801728a:	f000 bb7f 	b.w	801798c <__swbuf_r>
 801728e:	6813      	ldr	r3, [r2, #0]
 8017290:	1c58      	adds	r0, r3, #1
 8017292:	6010      	str	r0, [r2, #0]
 8017294:	7019      	strb	r1, [r3, #0]
 8017296:	4608      	mov	r0, r1
 8017298:	f85d 4b04 	ldr.w	r4, [sp], #4
 801729c:	4770      	bx	lr

0801729e <__sfputs_r>:
 801729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172a0:	4606      	mov	r6, r0
 80172a2:	460f      	mov	r7, r1
 80172a4:	4614      	mov	r4, r2
 80172a6:	18d5      	adds	r5, r2, r3
 80172a8:	42ac      	cmp	r4, r5
 80172aa:	d101      	bne.n	80172b0 <__sfputs_r+0x12>
 80172ac:	2000      	movs	r0, #0
 80172ae:	e007      	b.n	80172c0 <__sfputs_r+0x22>
 80172b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b4:	463a      	mov	r2, r7
 80172b6:	4630      	mov	r0, r6
 80172b8:	f7ff ffda 	bl	8017270 <__sfputc_r>
 80172bc:	1c43      	adds	r3, r0, #1
 80172be:	d1f3      	bne.n	80172a8 <__sfputs_r+0xa>
 80172c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172c4 <_vfiprintf_r>:
 80172c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c8:	460d      	mov	r5, r1
 80172ca:	b09d      	sub	sp, #116	@ 0x74
 80172cc:	4614      	mov	r4, r2
 80172ce:	4698      	mov	r8, r3
 80172d0:	4606      	mov	r6, r0
 80172d2:	b118      	cbz	r0, 80172dc <_vfiprintf_r+0x18>
 80172d4:	6a03      	ldr	r3, [r0, #32]
 80172d6:	b90b      	cbnz	r3, 80172dc <_vfiprintf_r+0x18>
 80172d8:	f7ff fbfc 	bl	8016ad4 <__sinit>
 80172dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172de:	07d9      	lsls	r1, r3, #31
 80172e0:	d405      	bmi.n	80172ee <_vfiprintf_r+0x2a>
 80172e2:	89ab      	ldrh	r3, [r5, #12]
 80172e4:	059a      	lsls	r2, r3, #22
 80172e6:	d402      	bmi.n	80172ee <_vfiprintf_r+0x2a>
 80172e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172ea:	f7ff fdd4 	bl	8016e96 <__retarget_lock_acquire_recursive>
 80172ee:	89ab      	ldrh	r3, [r5, #12]
 80172f0:	071b      	lsls	r3, r3, #28
 80172f2:	d501      	bpl.n	80172f8 <_vfiprintf_r+0x34>
 80172f4:	692b      	ldr	r3, [r5, #16]
 80172f6:	b99b      	cbnz	r3, 8017320 <_vfiprintf_r+0x5c>
 80172f8:	4629      	mov	r1, r5
 80172fa:	4630      	mov	r0, r6
 80172fc:	f000 fb84 	bl	8017a08 <__swsetup_r>
 8017300:	b170      	cbz	r0, 8017320 <_vfiprintf_r+0x5c>
 8017302:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017304:	07dc      	lsls	r4, r3, #31
 8017306:	d504      	bpl.n	8017312 <_vfiprintf_r+0x4e>
 8017308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801730c:	b01d      	add	sp, #116	@ 0x74
 801730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017312:	89ab      	ldrh	r3, [r5, #12]
 8017314:	0598      	lsls	r0, r3, #22
 8017316:	d4f7      	bmi.n	8017308 <_vfiprintf_r+0x44>
 8017318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801731a:	f7ff fdbd 	bl	8016e98 <__retarget_lock_release_recursive>
 801731e:	e7f3      	b.n	8017308 <_vfiprintf_r+0x44>
 8017320:	2300      	movs	r3, #0
 8017322:	9309      	str	r3, [sp, #36]	@ 0x24
 8017324:	2320      	movs	r3, #32
 8017326:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801732a:	f8cd 800c 	str.w	r8, [sp, #12]
 801732e:	2330      	movs	r3, #48	@ 0x30
 8017330:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80174e0 <_vfiprintf_r+0x21c>
 8017334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017338:	f04f 0901 	mov.w	r9, #1
 801733c:	4623      	mov	r3, r4
 801733e:	469a      	mov	sl, r3
 8017340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017344:	b10a      	cbz	r2, 801734a <_vfiprintf_r+0x86>
 8017346:	2a25      	cmp	r2, #37	@ 0x25
 8017348:	d1f9      	bne.n	801733e <_vfiprintf_r+0x7a>
 801734a:	ebba 0b04 	subs.w	fp, sl, r4
 801734e:	d00b      	beq.n	8017368 <_vfiprintf_r+0xa4>
 8017350:	465b      	mov	r3, fp
 8017352:	4622      	mov	r2, r4
 8017354:	4629      	mov	r1, r5
 8017356:	4630      	mov	r0, r6
 8017358:	f7ff ffa1 	bl	801729e <__sfputs_r>
 801735c:	3001      	adds	r0, #1
 801735e:	f000 80a7 	beq.w	80174b0 <_vfiprintf_r+0x1ec>
 8017362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017364:	445a      	add	r2, fp
 8017366:	9209      	str	r2, [sp, #36]	@ 0x24
 8017368:	f89a 3000 	ldrb.w	r3, [sl]
 801736c:	2b00      	cmp	r3, #0
 801736e:	f000 809f 	beq.w	80174b0 <_vfiprintf_r+0x1ec>
 8017372:	2300      	movs	r3, #0
 8017374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801737c:	f10a 0a01 	add.w	sl, sl, #1
 8017380:	9304      	str	r3, [sp, #16]
 8017382:	9307      	str	r3, [sp, #28]
 8017384:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017388:	931a      	str	r3, [sp, #104]	@ 0x68
 801738a:	4654      	mov	r4, sl
 801738c:	2205      	movs	r2, #5
 801738e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017392:	4853      	ldr	r0, [pc, #332]	@ (80174e0 <_vfiprintf_r+0x21c>)
 8017394:	f7e8 ff5c 	bl	8000250 <memchr>
 8017398:	9a04      	ldr	r2, [sp, #16]
 801739a:	b9d8      	cbnz	r0, 80173d4 <_vfiprintf_r+0x110>
 801739c:	06d1      	lsls	r1, r2, #27
 801739e:	bf44      	itt	mi
 80173a0:	2320      	movmi	r3, #32
 80173a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173a6:	0713      	lsls	r3, r2, #28
 80173a8:	bf44      	itt	mi
 80173aa:	232b      	movmi	r3, #43	@ 0x2b
 80173ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173b0:	f89a 3000 	ldrb.w	r3, [sl]
 80173b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80173b6:	d015      	beq.n	80173e4 <_vfiprintf_r+0x120>
 80173b8:	9a07      	ldr	r2, [sp, #28]
 80173ba:	4654      	mov	r4, sl
 80173bc:	2000      	movs	r0, #0
 80173be:	f04f 0c0a 	mov.w	ip, #10
 80173c2:	4621      	mov	r1, r4
 80173c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173c8:	3b30      	subs	r3, #48	@ 0x30
 80173ca:	2b09      	cmp	r3, #9
 80173cc:	d94b      	bls.n	8017466 <_vfiprintf_r+0x1a2>
 80173ce:	b1b0      	cbz	r0, 80173fe <_vfiprintf_r+0x13a>
 80173d0:	9207      	str	r2, [sp, #28]
 80173d2:	e014      	b.n	80173fe <_vfiprintf_r+0x13a>
 80173d4:	eba0 0308 	sub.w	r3, r0, r8
 80173d8:	fa09 f303 	lsl.w	r3, r9, r3
 80173dc:	4313      	orrs	r3, r2
 80173de:	9304      	str	r3, [sp, #16]
 80173e0:	46a2      	mov	sl, r4
 80173e2:	e7d2      	b.n	801738a <_vfiprintf_r+0xc6>
 80173e4:	9b03      	ldr	r3, [sp, #12]
 80173e6:	1d19      	adds	r1, r3, #4
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	9103      	str	r1, [sp, #12]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	bfbb      	ittet	lt
 80173f0:	425b      	neglt	r3, r3
 80173f2:	f042 0202 	orrlt.w	r2, r2, #2
 80173f6:	9307      	strge	r3, [sp, #28]
 80173f8:	9307      	strlt	r3, [sp, #28]
 80173fa:	bfb8      	it	lt
 80173fc:	9204      	strlt	r2, [sp, #16]
 80173fe:	7823      	ldrb	r3, [r4, #0]
 8017400:	2b2e      	cmp	r3, #46	@ 0x2e
 8017402:	d10a      	bne.n	801741a <_vfiprintf_r+0x156>
 8017404:	7863      	ldrb	r3, [r4, #1]
 8017406:	2b2a      	cmp	r3, #42	@ 0x2a
 8017408:	d132      	bne.n	8017470 <_vfiprintf_r+0x1ac>
 801740a:	9b03      	ldr	r3, [sp, #12]
 801740c:	1d1a      	adds	r2, r3, #4
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	9203      	str	r2, [sp, #12]
 8017412:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017416:	3402      	adds	r4, #2
 8017418:	9305      	str	r3, [sp, #20]
 801741a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174f0 <_vfiprintf_r+0x22c>
 801741e:	7821      	ldrb	r1, [r4, #0]
 8017420:	2203      	movs	r2, #3
 8017422:	4650      	mov	r0, sl
 8017424:	f7e8 ff14 	bl	8000250 <memchr>
 8017428:	b138      	cbz	r0, 801743a <_vfiprintf_r+0x176>
 801742a:	9b04      	ldr	r3, [sp, #16]
 801742c:	eba0 000a 	sub.w	r0, r0, sl
 8017430:	2240      	movs	r2, #64	@ 0x40
 8017432:	4082      	lsls	r2, r0
 8017434:	4313      	orrs	r3, r2
 8017436:	3401      	adds	r4, #1
 8017438:	9304      	str	r3, [sp, #16]
 801743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801743e:	4829      	ldr	r0, [pc, #164]	@ (80174e4 <_vfiprintf_r+0x220>)
 8017440:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017444:	2206      	movs	r2, #6
 8017446:	f7e8 ff03 	bl	8000250 <memchr>
 801744a:	2800      	cmp	r0, #0
 801744c:	d03f      	beq.n	80174ce <_vfiprintf_r+0x20a>
 801744e:	4b26      	ldr	r3, [pc, #152]	@ (80174e8 <_vfiprintf_r+0x224>)
 8017450:	bb1b      	cbnz	r3, 801749a <_vfiprintf_r+0x1d6>
 8017452:	9b03      	ldr	r3, [sp, #12]
 8017454:	3307      	adds	r3, #7
 8017456:	f023 0307 	bic.w	r3, r3, #7
 801745a:	3308      	adds	r3, #8
 801745c:	9303      	str	r3, [sp, #12]
 801745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017460:	443b      	add	r3, r7
 8017462:	9309      	str	r3, [sp, #36]	@ 0x24
 8017464:	e76a      	b.n	801733c <_vfiprintf_r+0x78>
 8017466:	fb0c 3202 	mla	r2, ip, r2, r3
 801746a:	460c      	mov	r4, r1
 801746c:	2001      	movs	r0, #1
 801746e:	e7a8      	b.n	80173c2 <_vfiprintf_r+0xfe>
 8017470:	2300      	movs	r3, #0
 8017472:	3401      	adds	r4, #1
 8017474:	9305      	str	r3, [sp, #20]
 8017476:	4619      	mov	r1, r3
 8017478:	f04f 0c0a 	mov.w	ip, #10
 801747c:	4620      	mov	r0, r4
 801747e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017482:	3a30      	subs	r2, #48	@ 0x30
 8017484:	2a09      	cmp	r2, #9
 8017486:	d903      	bls.n	8017490 <_vfiprintf_r+0x1cc>
 8017488:	2b00      	cmp	r3, #0
 801748a:	d0c6      	beq.n	801741a <_vfiprintf_r+0x156>
 801748c:	9105      	str	r1, [sp, #20]
 801748e:	e7c4      	b.n	801741a <_vfiprintf_r+0x156>
 8017490:	fb0c 2101 	mla	r1, ip, r1, r2
 8017494:	4604      	mov	r4, r0
 8017496:	2301      	movs	r3, #1
 8017498:	e7f0      	b.n	801747c <_vfiprintf_r+0x1b8>
 801749a:	ab03      	add	r3, sp, #12
 801749c:	9300      	str	r3, [sp, #0]
 801749e:	462a      	mov	r2, r5
 80174a0:	4b12      	ldr	r3, [pc, #72]	@ (80174ec <_vfiprintf_r+0x228>)
 80174a2:	a904      	add	r1, sp, #16
 80174a4:	4630      	mov	r0, r6
 80174a6:	f3af 8000 	nop.w
 80174aa:	4607      	mov	r7, r0
 80174ac:	1c78      	adds	r0, r7, #1
 80174ae:	d1d6      	bne.n	801745e <_vfiprintf_r+0x19a>
 80174b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80174b2:	07d9      	lsls	r1, r3, #31
 80174b4:	d405      	bmi.n	80174c2 <_vfiprintf_r+0x1fe>
 80174b6:	89ab      	ldrh	r3, [r5, #12]
 80174b8:	059a      	lsls	r2, r3, #22
 80174ba:	d402      	bmi.n	80174c2 <_vfiprintf_r+0x1fe>
 80174bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174be:	f7ff fceb 	bl	8016e98 <__retarget_lock_release_recursive>
 80174c2:	89ab      	ldrh	r3, [r5, #12]
 80174c4:	065b      	lsls	r3, r3, #25
 80174c6:	f53f af1f 	bmi.w	8017308 <_vfiprintf_r+0x44>
 80174ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174cc:	e71e      	b.n	801730c <_vfiprintf_r+0x48>
 80174ce:	ab03      	add	r3, sp, #12
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	462a      	mov	r2, r5
 80174d4:	4b05      	ldr	r3, [pc, #20]	@ (80174ec <_vfiprintf_r+0x228>)
 80174d6:	a904      	add	r1, sp, #16
 80174d8:	4630      	mov	r0, r6
 80174da:	f000 f879 	bl	80175d0 <_printf_i>
 80174de:	e7e4      	b.n	80174aa <_vfiprintf_r+0x1e6>
 80174e0:	08018acc 	.word	0x08018acc
 80174e4:	08018ad6 	.word	0x08018ad6
 80174e8:	00000000 	.word	0x00000000
 80174ec:	0801729f 	.word	0x0801729f
 80174f0:	08018ad2 	.word	0x08018ad2

080174f4 <_printf_common>:
 80174f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174f8:	4616      	mov	r6, r2
 80174fa:	4698      	mov	r8, r3
 80174fc:	688a      	ldr	r2, [r1, #8]
 80174fe:	690b      	ldr	r3, [r1, #16]
 8017500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017504:	4293      	cmp	r3, r2
 8017506:	bfb8      	it	lt
 8017508:	4613      	movlt	r3, r2
 801750a:	6033      	str	r3, [r6, #0]
 801750c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017510:	4607      	mov	r7, r0
 8017512:	460c      	mov	r4, r1
 8017514:	b10a      	cbz	r2, 801751a <_printf_common+0x26>
 8017516:	3301      	adds	r3, #1
 8017518:	6033      	str	r3, [r6, #0]
 801751a:	6823      	ldr	r3, [r4, #0]
 801751c:	0699      	lsls	r1, r3, #26
 801751e:	bf42      	ittt	mi
 8017520:	6833      	ldrmi	r3, [r6, #0]
 8017522:	3302      	addmi	r3, #2
 8017524:	6033      	strmi	r3, [r6, #0]
 8017526:	6825      	ldr	r5, [r4, #0]
 8017528:	f015 0506 	ands.w	r5, r5, #6
 801752c:	d106      	bne.n	801753c <_printf_common+0x48>
 801752e:	f104 0a19 	add.w	sl, r4, #25
 8017532:	68e3      	ldr	r3, [r4, #12]
 8017534:	6832      	ldr	r2, [r6, #0]
 8017536:	1a9b      	subs	r3, r3, r2
 8017538:	42ab      	cmp	r3, r5
 801753a:	dc26      	bgt.n	801758a <_printf_common+0x96>
 801753c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017540:	6822      	ldr	r2, [r4, #0]
 8017542:	3b00      	subs	r3, #0
 8017544:	bf18      	it	ne
 8017546:	2301      	movne	r3, #1
 8017548:	0692      	lsls	r2, r2, #26
 801754a:	d42b      	bmi.n	80175a4 <_printf_common+0xb0>
 801754c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017550:	4641      	mov	r1, r8
 8017552:	4638      	mov	r0, r7
 8017554:	47c8      	blx	r9
 8017556:	3001      	adds	r0, #1
 8017558:	d01e      	beq.n	8017598 <_printf_common+0xa4>
 801755a:	6823      	ldr	r3, [r4, #0]
 801755c:	6922      	ldr	r2, [r4, #16]
 801755e:	f003 0306 	and.w	r3, r3, #6
 8017562:	2b04      	cmp	r3, #4
 8017564:	bf02      	ittt	eq
 8017566:	68e5      	ldreq	r5, [r4, #12]
 8017568:	6833      	ldreq	r3, [r6, #0]
 801756a:	1aed      	subeq	r5, r5, r3
 801756c:	68a3      	ldr	r3, [r4, #8]
 801756e:	bf0c      	ite	eq
 8017570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017574:	2500      	movne	r5, #0
 8017576:	4293      	cmp	r3, r2
 8017578:	bfc4      	itt	gt
 801757a:	1a9b      	subgt	r3, r3, r2
 801757c:	18ed      	addgt	r5, r5, r3
 801757e:	2600      	movs	r6, #0
 8017580:	341a      	adds	r4, #26
 8017582:	42b5      	cmp	r5, r6
 8017584:	d11a      	bne.n	80175bc <_printf_common+0xc8>
 8017586:	2000      	movs	r0, #0
 8017588:	e008      	b.n	801759c <_printf_common+0xa8>
 801758a:	2301      	movs	r3, #1
 801758c:	4652      	mov	r2, sl
 801758e:	4641      	mov	r1, r8
 8017590:	4638      	mov	r0, r7
 8017592:	47c8      	blx	r9
 8017594:	3001      	adds	r0, #1
 8017596:	d103      	bne.n	80175a0 <_printf_common+0xac>
 8017598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801759c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175a0:	3501      	adds	r5, #1
 80175a2:	e7c6      	b.n	8017532 <_printf_common+0x3e>
 80175a4:	18e1      	adds	r1, r4, r3
 80175a6:	1c5a      	adds	r2, r3, #1
 80175a8:	2030      	movs	r0, #48	@ 0x30
 80175aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80175ae:	4422      	add	r2, r4
 80175b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80175b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80175b8:	3302      	adds	r3, #2
 80175ba:	e7c7      	b.n	801754c <_printf_common+0x58>
 80175bc:	2301      	movs	r3, #1
 80175be:	4622      	mov	r2, r4
 80175c0:	4641      	mov	r1, r8
 80175c2:	4638      	mov	r0, r7
 80175c4:	47c8      	blx	r9
 80175c6:	3001      	adds	r0, #1
 80175c8:	d0e6      	beq.n	8017598 <_printf_common+0xa4>
 80175ca:	3601      	adds	r6, #1
 80175cc:	e7d9      	b.n	8017582 <_printf_common+0x8e>
	...

080175d0 <_printf_i>:
 80175d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175d4:	7e0f      	ldrb	r7, [r1, #24]
 80175d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80175d8:	2f78      	cmp	r7, #120	@ 0x78
 80175da:	4691      	mov	r9, r2
 80175dc:	4680      	mov	r8, r0
 80175de:	460c      	mov	r4, r1
 80175e0:	469a      	mov	sl, r3
 80175e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80175e6:	d807      	bhi.n	80175f8 <_printf_i+0x28>
 80175e8:	2f62      	cmp	r7, #98	@ 0x62
 80175ea:	d80a      	bhi.n	8017602 <_printf_i+0x32>
 80175ec:	2f00      	cmp	r7, #0
 80175ee:	f000 80d2 	beq.w	8017796 <_printf_i+0x1c6>
 80175f2:	2f58      	cmp	r7, #88	@ 0x58
 80175f4:	f000 80b9 	beq.w	801776a <_printf_i+0x19a>
 80175f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80175fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017600:	e03a      	b.n	8017678 <_printf_i+0xa8>
 8017602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017606:	2b15      	cmp	r3, #21
 8017608:	d8f6      	bhi.n	80175f8 <_printf_i+0x28>
 801760a:	a101      	add	r1, pc, #4	@ (adr r1, 8017610 <_printf_i+0x40>)
 801760c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017610:	08017669 	.word	0x08017669
 8017614:	0801767d 	.word	0x0801767d
 8017618:	080175f9 	.word	0x080175f9
 801761c:	080175f9 	.word	0x080175f9
 8017620:	080175f9 	.word	0x080175f9
 8017624:	080175f9 	.word	0x080175f9
 8017628:	0801767d 	.word	0x0801767d
 801762c:	080175f9 	.word	0x080175f9
 8017630:	080175f9 	.word	0x080175f9
 8017634:	080175f9 	.word	0x080175f9
 8017638:	080175f9 	.word	0x080175f9
 801763c:	0801777d 	.word	0x0801777d
 8017640:	080176a7 	.word	0x080176a7
 8017644:	08017737 	.word	0x08017737
 8017648:	080175f9 	.word	0x080175f9
 801764c:	080175f9 	.word	0x080175f9
 8017650:	0801779f 	.word	0x0801779f
 8017654:	080175f9 	.word	0x080175f9
 8017658:	080176a7 	.word	0x080176a7
 801765c:	080175f9 	.word	0x080175f9
 8017660:	080175f9 	.word	0x080175f9
 8017664:	0801773f 	.word	0x0801773f
 8017668:	6833      	ldr	r3, [r6, #0]
 801766a:	1d1a      	adds	r2, r3, #4
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	6032      	str	r2, [r6, #0]
 8017670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017678:	2301      	movs	r3, #1
 801767a:	e09d      	b.n	80177b8 <_printf_i+0x1e8>
 801767c:	6833      	ldr	r3, [r6, #0]
 801767e:	6820      	ldr	r0, [r4, #0]
 8017680:	1d19      	adds	r1, r3, #4
 8017682:	6031      	str	r1, [r6, #0]
 8017684:	0606      	lsls	r6, r0, #24
 8017686:	d501      	bpl.n	801768c <_printf_i+0xbc>
 8017688:	681d      	ldr	r5, [r3, #0]
 801768a:	e003      	b.n	8017694 <_printf_i+0xc4>
 801768c:	0645      	lsls	r5, r0, #25
 801768e:	d5fb      	bpl.n	8017688 <_printf_i+0xb8>
 8017690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017694:	2d00      	cmp	r5, #0
 8017696:	da03      	bge.n	80176a0 <_printf_i+0xd0>
 8017698:	232d      	movs	r3, #45	@ 0x2d
 801769a:	426d      	negs	r5, r5
 801769c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176a0:	4859      	ldr	r0, [pc, #356]	@ (8017808 <_printf_i+0x238>)
 80176a2:	230a      	movs	r3, #10
 80176a4:	e011      	b.n	80176ca <_printf_i+0xfa>
 80176a6:	6821      	ldr	r1, [r4, #0]
 80176a8:	6833      	ldr	r3, [r6, #0]
 80176aa:	0608      	lsls	r0, r1, #24
 80176ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80176b0:	d402      	bmi.n	80176b8 <_printf_i+0xe8>
 80176b2:	0649      	lsls	r1, r1, #25
 80176b4:	bf48      	it	mi
 80176b6:	b2ad      	uxthmi	r5, r5
 80176b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80176ba:	4853      	ldr	r0, [pc, #332]	@ (8017808 <_printf_i+0x238>)
 80176bc:	6033      	str	r3, [r6, #0]
 80176be:	bf14      	ite	ne
 80176c0:	230a      	movne	r3, #10
 80176c2:	2308      	moveq	r3, #8
 80176c4:	2100      	movs	r1, #0
 80176c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80176ca:	6866      	ldr	r6, [r4, #4]
 80176cc:	60a6      	str	r6, [r4, #8]
 80176ce:	2e00      	cmp	r6, #0
 80176d0:	bfa2      	ittt	ge
 80176d2:	6821      	ldrge	r1, [r4, #0]
 80176d4:	f021 0104 	bicge.w	r1, r1, #4
 80176d8:	6021      	strge	r1, [r4, #0]
 80176da:	b90d      	cbnz	r5, 80176e0 <_printf_i+0x110>
 80176dc:	2e00      	cmp	r6, #0
 80176de:	d04b      	beq.n	8017778 <_printf_i+0x1a8>
 80176e0:	4616      	mov	r6, r2
 80176e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80176e6:	fb03 5711 	mls	r7, r3, r1, r5
 80176ea:	5dc7      	ldrb	r7, [r0, r7]
 80176ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80176f0:	462f      	mov	r7, r5
 80176f2:	42bb      	cmp	r3, r7
 80176f4:	460d      	mov	r5, r1
 80176f6:	d9f4      	bls.n	80176e2 <_printf_i+0x112>
 80176f8:	2b08      	cmp	r3, #8
 80176fa:	d10b      	bne.n	8017714 <_printf_i+0x144>
 80176fc:	6823      	ldr	r3, [r4, #0]
 80176fe:	07df      	lsls	r7, r3, #31
 8017700:	d508      	bpl.n	8017714 <_printf_i+0x144>
 8017702:	6923      	ldr	r3, [r4, #16]
 8017704:	6861      	ldr	r1, [r4, #4]
 8017706:	4299      	cmp	r1, r3
 8017708:	bfde      	ittt	le
 801770a:	2330      	movle	r3, #48	@ 0x30
 801770c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017710:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017714:	1b92      	subs	r2, r2, r6
 8017716:	6122      	str	r2, [r4, #16]
 8017718:	f8cd a000 	str.w	sl, [sp]
 801771c:	464b      	mov	r3, r9
 801771e:	aa03      	add	r2, sp, #12
 8017720:	4621      	mov	r1, r4
 8017722:	4640      	mov	r0, r8
 8017724:	f7ff fee6 	bl	80174f4 <_printf_common>
 8017728:	3001      	adds	r0, #1
 801772a:	d14a      	bne.n	80177c2 <_printf_i+0x1f2>
 801772c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017730:	b004      	add	sp, #16
 8017732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	f043 0320 	orr.w	r3, r3, #32
 801773c:	6023      	str	r3, [r4, #0]
 801773e:	4833      	ldr	r0, [pc, #204]	@ (801780c <_printf_i+0x23c>)
 8017740:	2778      	movs	r7, #120	@ 0x78
 8017742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	6831      	ldr	r1, [r6, #0]
 801774a:	061f      	lsls	r7, r3, #24
 801774c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017750:	d402      	bmi.n	8017758 <_printf_i+0x188>
 8017752:	065f      	lsls	r7, r3, #25
 8017754:	bf48      	it	mi
 8017756:	b2ad      	uxthmi	r5, r5
 8017758:	6031      	str	r1, [r6, #0]
 801775a:	07d9      	lsls	r1, r3, #31
 801775c:	bf44      	itt	mi
 801775e:	f043 0320 	orrmi.w	r3, r3, #32
 8017762:	6023      	strmi	r3, [r4, #0]
 8017764:	b11d      	cbz	r5, 801776e <_printf_i+0x19e>
 8017766:	2310      	movs	r3, #16
 8017768:	e7ac      	b.n	80176c4 <_printf_i+0xf4>
 801776a:	4827      	ldr	r0, [pc, #156]	@ (8017808 <_printf_i+0x238>)
 801776c:	e7e9      	b.n	8017742 <_printf_i+0x172>
 801776e:	6823      	ldr	r3, [r4, #0]
 8017770:	f023 0320 	bic.w	r3, r3, #32
 8017774:	6023      	str	r3, [r4, #0]
 8017776:	e7f6      	b.n	8017766 <_printf_i+0x196>
 8017778:	4616      	mov	r6, r2
 801777a:	e7bd      	b.n	80176f8 <_printf_i+0x128>
 801777c:	6833      	ldr	r3, [r6, #0]
 801777e:	6825      	ldr	r5, [r4, #0]
 8017780:	6961      	ldr	r1, [r4, #20]
 8017782:	1d18      	adds	r0, r3, #4
 8017784:	6030      	str	r0, [r6, #0]
 8017786:	062e      	lsls	r6, r5, #24
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	d501      	bpl.n	8017790 <_printf_i+0x1c0>
 801778c:	6019      	str	r1, [r3, #0]
 801778e:	e002      	b.n	8017796 <_printf_i+0x1c6>
 8017790:	0668      	lsls	r0, r5, #25
 8017792:	d5fb      	bpl.n	801778c <_printf_i+0x1bc>
 8017794:	8019      	strh	r1, [r3, #0]
 8017796:	2300      	movs	r3, #0
 8017798:	6123      	str	r3, [r4, #16]
 801779a:	4616      	mov	r6, r2
 801779c:	e7bc      	b.n	8017718 <_printf_i+0x148>
 801779e:	6833      	ldr	r3, [r6, #0]
 80177a0:	1d1a      	adds	r2, r3, #4
 80177a2:	6032      	str	r2, [r6, #0]
 80177a4:	681e      	ldr	r6, [r3, #0]
 80177a6:	6862      	ldr	r2, [r4, #4]
 80177a8:	2100      	movs	r1, #0
 80177aa:	4630      	mov	r0, r6
 80177ac:	f7e8 fd50 	bl	8000250 <memchr>
 80177b0:	b108      	cbz	r0, 80177b6 <_printf_i+0x1e6>
 80177b2:	1b80      	subs	r0, r0, r6
 80177b4:	6060      	str	r0, [r4, #4]
 80177b6:	6863      	ldr	r3, [r4, #4]
 80177b8:	6123      	str	r3, [r4, #16]
 80177ba:	2300      	movs	r3, #0
 80177bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177c0:	e7aa      	b.n	8017718 <_printf_i+0x148>
 80177c2:	6923      	ldr	r3, [r4, #16]
 80177c4:	4632      	mov	r2, r6
 80177c6:	4649      	mov	r1, r9
 80177c8:	4640      	mov	r0, r8
 80177ca:	47d0      	blx	sl
 80177cc:	3001      	adds	r0, #1
 80177ce:	d0ad      	beq.n	801772c <_printf_i+0x15c>
 80177d0:	6823      	ldr	r3, [r4, #0]
 80177d2:	079b      	lsls	r3, r3, #30
 80177d4:	d413      	bmi.n	80177fe <_printf_i+0x22e>
 80177d6:	68e0      	ldr	r0, [r4, #12]
 80177d8:	9b03      	ldr	r3, [sp, #12]
 80177da:	4298      	cmp	r0, r3
 80177dc:	bfb8      	it	lt
 80177de:	4618      	movlt	r0, r3
 80177e0:	e7a6      	b.n	8017730 <_printf_i+0x160>
 80177e2:	2301      	movs	r3, #1
 80177e4:	4632      	mov	r2, r6
 80177e6:	4649      	mov	r1, r9
 80177e8:	4640      	mov	r0, r8
 80177ea:	47d0      	blx	sl
 80177ec:	3001      	adds	r0, #1
 80177ee:	d09d      	beq.n	801772c <_printf_i+0x15c>
 80177f0:	3501      	adds	r5, #1
 80177f2:	68e3      	ldr	r3, [r4, #12]
 80177f4:	9903      	ldr	r1, [sp, #12]
 80177f6:	1a5b      	subs	r3, r3, r1
 80177f8:	42ab      	cmp	r3, r5
 80177fa:	dcf2      	bgt.n	80177e2 <_printf_i+0x212>
 80177fc:	e7eb      	b.n	80177d6 <_printf_i+0x206>
 80177fe:	2500      	movs	r5, #0
 8017800:	f104 0619 	add.w	r6, r4, #25
 8017804:	e7f5      	b.n	80177f2 <_printf_i+0x222>
 8017806:	bf00      	nop
 8017808:	08018add 	.word	0x08018add
 801780c:	08018aee 	.word	0x08018aee

08017810 <__sflush_r>:
 8017810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017818:	0716      	lsls	r6, r2, #28
 801781a:	4605      	mov	r5, r0
 801781c:	460c      	mov	r4, r1
 801781e:	d454      	bmi.n	80178ca <__sflush_r+0xba>
 8017820:	684b      	ldr	r3, [r1, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	dc02      	bgt.n	801782c <__sflush_r+0x1c>
 8017826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017828:	2b00      	cmp	r3, #0
 801782a:	dd48      	ble.n	80178be <__sflush_r+0xae>
 801782c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801782e:	2e00      	cmp	r6, #0
 8017830:	d045      	beq.n	80178be <__sflush_r+0xae>
 8017832:	2300      	movs	r3, #0
 8017834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017838:	682f      	ldr	r7, [r5, #0]
 801783a:	6a21      	ldr	r1, [r4, #32]
 801783c:	602b      	str	r3, [r5, #0]
 801783e:	d030      	beq.n	80178a2 <__sflush_r+0x92>
 8017840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017842:	89a3      	ldrh	r3, [r4, #12]
 8017844:	0759      	lsls	r1, r3, #29
 8017846:	d505      	bpl.n	8017854 <__sflush_r+0x44>
 8017848:	6863      	ldr	r3, [r4, #4]
 801784a:	1ad2      	subs	r2, r2, r3
 801784c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801784e:	b10b      	cbz	r3, 8017854 <__sflush_r+0x44>
 8017850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017852:	1ad2      	subs	r2, r2, r3
 8017854:	2300      	movs	r3, #0
 8017856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017858:	6a21      	ldr	r1, [r4, #32]
 801785a:	4628      	mov	r0, r5
 801785c:	47b0      	blx	r6
 801785e:	1c43      	adds	r3, r0, #1
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	d106      	bne.n	8017872 <__sflush_r+0x62>
 8017864:	6829      	ldr	r1, [r5, #0]
 8017866:	291d      	cmp	r1, #29
 8017868:	d82b      	bhi.n	80178c2 <__sflush_r+0xb2>
 801786a:	4a2a      	ldr	r2, [pc, #168]	@ (8017914 <__sflush_r+0x104>)
 801786c:	410a      	asrs	r2, r1
 801786e:	07d6      	lsls	r6, r2, #31
 8017870:	d427      	bmi.n	80178c2 <__sflush_r+0xb2>
 8017872:	2200      	movs	r2, #0
 8017874:	6062      	str	r2, [r4, #4]
 8017876:	04d9      	lsls	r1, r3, #19
 8017878:	6922      	ldr	r2, [r4, #16]
 801787a:	6022      	str	r2, [r4, #0]
 801787c:	d504      	bpl.n	8017888 <__sflush_r+0x78>
 801787e:	1c42      	adds	r2, r0, #1
 8017880:	d101      	bne.n	8017886 <__sflush_r+0x76>
 8017882:	682b      	ldr	r3, [r5, #0]
 8017884:	b903      	cbnz	r3, 8017888 <__sflush_r+0x78>
 8017886:	6560      	str	r0, [r4, #84]	@ 0x54
 8017888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801788a:	602f      	str	r7, [r5, #0]
 801788c:	b1b9      	cbz	r1, 80178be <__sflush_r+0xae>
 801788e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017892:	4299      	cmp	r1, r3
 8017894:	d002      	beq.n	801789c <__sflush_r+0x8c>
 8017896:	4628      	mov	r0, r5
 8017898:	f7ff fb40 	bl	8016f1c <_free_r>
 801789c:	2300      	movs	r3, #0
 801789e:	6363      	str	r3, [r4, #52]	@ 0x34
 80178a0:	e00d      	b.n	80178be <__sflush_r+0xae>
 80178a2:	2301      	movs	r3, #1
 80178a4:	4628      	mov	r0, r5
 80178a6:	47b0      	blx	r6
 80178a8:	4602      	mov	r2, r0
 80178aa:	1c50      	adds	r0, r2, #1
 80178ac:	d1c9      	bne.n	8017842 <__sflush_r+0x32>
 80178ae:	682b      	ldr	r3, [r5, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d0c6      	beq.n	8017842 <__sflush_r+0x32>
 80178b4:	2b1d      	cmp	r3, #29
 80178b6:	d001      	beq.n	80178bc <__sflush_r+0xac>
 80178b8:	2b16      	cmp	r3, #22
 80178ba:	d11e      	bne.n	80178fa <__sflush_r+0xea>
 80178bc:	602f      	str	r7, [r5, #0]
 80178be:	2000      	movs	r0, #0
 80178c0:	e022      	b.n	8017908 <__sflush_r+0xf8>
 80178c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178c6:	b21b      	sxth	r3, r3
 80178c8:	e01b      	b.n	8017902 <__sflush_r+0xf2>
 80178ca:	690f      	ldr	r7, [r1, #16]
 80178cc:	2f00      	cmp	r7, #0
 80178ce:	d0f6      	beq.n	80178be <__sflush_r+0xae>
 80178d0:	0793      	lsls	r3, r2, #30
 80178d2:	680e      	ldr	r6, [r1, #0]
 80178d4:	bf08      	it	eq
 80178d6:	694b      	ldreq	r3, [r1, #20]
 80178d8:	600f      	str	r7, [r1, #0]
 80178da:	bf18      	it	ne
 80178dc:	2300      	movne	r3, #0
 80178de:	eba6 0807 	sub.w	r8, r6, r7
 80178e2:	608b      	str	r3, [r1, #8]
 80178e4:	f1b8 0f00 	cmp.w	r8, #0
 80178e8:	dde9      	ble.n	80178be <__sflush_r+0xae>
 80178ea:	6a21      	ldr	r1, [r4, #32]
 80178ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80178ee:	4643      	mov	r3, r8
 80178f0:	463a      	mov	r2, r7
 80178f2:	4628      	mov	r0, r5
 80178f4:	47b0      	blx	r6
 80178f6:	2800      	cmp	r0, #0
 80178f8:	dc08      	bgt.n	801790c <__sflush_r+0xfc>
 80178fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017902:	81a3      	strh	r3, [r4, #12]
 8017904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801790c:	4407      	add	r7, r0
 801790e:	eba8 0800 	sub.w	r8, r8, r0
 8017912:	e7e7      	b.n	80178e4 <__sflush_r+0xd4>
 8017914:	dfbffffe 	.word	0xdfbffffe

08017918 <_fflush_r>:
 8017918:	b538      	push	{r3, r4, r5, lr}
 801791a:	690b      	ldr	r3, [r1, #16]
 801791c:	4605      	mov	r5, r0
 801791e:	460c      	mov	r4, r1
 8017920:	b913      	cbnz	r3, 8017928 <_fflush_r+0x10>
 8017922:	2500      	movs	r5, #0
 8017924:	4628      	mov	r0, r5
 8017926:	bd38      	pop	{r3, r4, r5, pc}
 8017928:	b118      	cbz	r0, 8017932 <_fflush_r+0x1a>
 801792a:	6a03      	ldr	r3, [r0, #32]
 801792c:	b90b      	cbnz	r3, 8017932 <_fflush_r+0x1a>
 801792e:	f7ff f8d1 	bl	8016ad4 <__sinit>
 8017932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d0f3      	beq.n	8017922 <_fflush_r+0xa>
 801793a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801793c:	07d0      	lsls	r0, r2, #31
 801793e:	d404      	bmi.n	801794a <_fflush_r+0x32>
 8017940:	0599      	lsls	r1, r3, #22
 8017942:	d402      	bmi.n	801794a <_fflush_r+0x32>
 8017944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017946:	f7ff faa6 	bl	8016e96 <__retarget_lock_acquire_recursive>
 801794a:	4628      	mov	r0, r5
 801794c:	4621      	mov	r1, r4
 801794e:	f7ff ff5f 	bl	8017810 <__sflush_r>
 8017952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017954:	07da      	lsls	r2, r3, #31
 8017956:	4605      	mov	r5, r0
 8017958:	d4e4      	bmi.n	8017924 <_fflush_r+0xc>
 801795a:	89a3      	ldrh	r3, [r4, #12]
 801795c:	059b      	lsls	r3, r3, #22
 801795e:	d4e1      	bmi.n	8017924 <_fflush_r+0xc>
 8017960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017962:	f7ff fa99 	bl	8016e98 <__retarget_lock_release_recursive>
 8017966:	e7dd      	b.n	8017924 <_fflush_r+0xc>

08017968 <fiprintf>:
 8017968:	b40e      	push	{r1, r2, r3}
 801796a:	b503      	push	{r0, r1, lr}
 801796c:	4601      	mov	r1, r0
 801796e:	ab03      	add	r3, sp, #12
 8017970:	4805      	ldr	r0, [pc, #20]	@ (8017988 <fiprintf+0x20>)
 8017972:	f853 2b04 	ldr.w	r2, [r3], #4
 8017976:	6800      	ldr	r0, [r0, #0]
 8017978:	9301      	str	r3, [sp, #4]
 801797a:	f7ff fca3 	bl	80172c4 <_vfiprintf_r>
 801797e:	b002      	add	sp, #8
 8017980:	f85d eb04 	ldr.w	lr, [sp], #4
 8017984:	b003      	add	sp, #12
 8017986:	4770      	bx	lr
 8017988:	20000144 	.word	0x20000144

0801798c <__swbuf_r>:
 801798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801798e:	460e      	mov	r6, r1
 8017990:	4614      	mov	r4, r2
 8017992:	4605      	mov	r5, r0
 8017994:	b118      	cbz	r0, 801799e <__swbuf_r+0x12>
 8017996:	6a03      	ldr	r3, [r0, #32]
 8017998:	b90b      	cbnz	r3, 801799e <__swbuf_r+0x12>
 801799a:	f7ff f89b 	bl	8016ad4 <__sinit>
 801799e:	69a3      	ldr	r3, [r4, #24]
 80179a0:	60a3      	str	r3, [r4, #8]
 80179a2:	89a3      	ldrh	r3, [r4, #12]
 80179a4:	071a      	lsls	r2, r3, #28
 80179a6:	d501      	bpl.n	80179ac <__swbuf_r+0x20>
 80179a8:	6923      	ldr	r3, [r4, #16]
 80179aa:	b943      	cbnz	r3, 80179be <__swbuf_r+0x32>
 80179ac:	4621      	mov	r1, r4
 80179ae:	4628      	mov	r0, r5
 80179b0:	f000 f82a 	bl	8017a08 <__swsetup_r>
 80179b4:	b118      	cbz	r0, 80179be <__swbuf_r+0x32>
 80179b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80179ba:	4638      	mov	r0, r7
 80179bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179be:	6823      	ldr	r3, [r4, #0]
 80179c0:	6922      	ldr	r2, [r4, #16]
 80179c2:	1a98      	subs	r0, r3, r2
 80179c4:	6963      	ldr	r3, [r4, #20]
 80179c6:	b2f6      	uxtb	r6, r6
 80179c8:	4283      	cmp	r3, r0
 80179ca:	4637      	mov	r7, r6
 80179cc:	dc05      	bgt.n	80179da <__swbuf_r+0x4e>
 80179ce:	4621      	mov	r1, r4
 80179d0:	4628      	mov	r0, r5
 80179d2:	f7ff ffa1 	bl	8017918 <_fflush_r>
 80179d6:	2800      	cmp	r0, #0
 80179d8:	d1ed      	bne.n	80179b6 <__swbuf_r+0x2a>
 80179da:	68a3      	ldr	r3, [r4, #8]
 80179dc:	3b01      	subs	r3, #1
 80179de:	60a3      	str	r3, [r4, #8]
 80179e0:	6823      	ldr	r3, [r4, #0]
 80179e2:	1c5a      	adds	r2, r3, #1
 80179e4:	6022      	str	r2, [r4, #0]
 80179e6:	701e      	strb	r6, [r3, #0]
 80179e8:	6962      	ldr	r2, [r4, #20]
 80179ea:	1c43      	adds	r3, r0, #1
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d004      	beq.n	80179fa <__swbuf_r+0x6e>
 80179f0:	89a3      	ldrh	r3, [r4, #12]
 80179f2:	07db      	lsls	r3, r3, #31
 80179f4:	d5e1      	bpl.n	80179ba <__swbuf_r+0x2e>
 80179f6:	2e0a      	cmp	r6, #10
 80179f8:	d1df      	bne.n	80179ba <__swbuf_r+0x2e>
 80179fa:	4621      	mov	r1, r4
 80179fc:	4628      	mov	r0, r5
 80179fe:	f7ff ff8b 	bl	8017918 <_fflush_r>
 8017a02:	2800      	cmp	r0, #0
 8017a04:	d0d9      	beq.n	80179ba <__swbuf_r+0x2e>
 8017a06:	e7d6      	b.n	80179b6 <__swbuf_r+0x2a>

08017a08 <__swsetup_r>:
 8017a08:	b538      	push	{r3, r4, r5, lr}
 8017a0a:	4b29      	ldr	r3, [pc, #164]	@ (8017ab0 <__swsetup_r+0xa8>)
 8017a0c:	4605      	mov	r5, r0
 8017a0e:	6818      	ldr	r0, [r3, #0]
 8017a10:	460c      	mov	r4, r1
 8017a12:	b118      	cbz	r0, 8017a1c <__swsetup_r+0x14>
 8017a14:	6a03      	ldr	r3, [r0, #32]
 8017a16:	b90b      	cbnz	r3, 8017a1c <__swsetup_r+0x14>
 8017a18:	f7ff f85c 	bl	8016ad4 <__sinit>
 8017a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a20:	0719      	lsls	r1, r3, #28
 8017a22:	d422      	bmi.n	8017a6a <__swsetup_r+0x62>
 8017a24:	06da      	lsls	r2, r3, #27
 8017a26:	d407      	bmi.n	8017a38 <__swsetup_r+0x30>
 8017a28:	2209      	movs	r2, #9
 8017a2a:	602a      	str	r2, [r5, #0]
 8017a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a30:	81a3      	strh	r3, [r4, #12]
 8017a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a36:	e033      	b.n	8017aa0 <__swsetup_r+0x98>
 8017a38:	0758      	lsls	r0, r3, #29
 8017a3a:	d512      	bpl.n	8017a62 <__swsetup_r+0x5a>
 8017a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a3e:	b141      	cbz	r1, 8017a52 <__swsetup_r+0x4a>
 8017a40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a44:	4299      	cmp	r1, r3
 8017a46:	d002      	beq.n	8017a4e <__swsetup_r+0x46>
 8017a48:	4628      	mov	r0, r5
 8017a4a:	f7ff fa67 	bl	8016f1c <_free_r>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a52:	89a3      	ldrh	r3, [r4, #12]
 8017a54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017a58:	81a3      	strh	r3, [r4, #12]
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	6063      	str	r3, [r4, #4]
 8017a5e:	6923      	ldr	r3, [r4, #16]
 8017a60:	6023      	str	r3, [r4, #0]
 8017a62:	89a3      	ldrh	r3, [r4, #12]
 8017a64:	f043 0308 	orr.w	r3, r3, #8
 8017a68:	81a3      	strh	r3, [r4, #12]
 8017a6a:	6923      	ldr	r3, [r4, #16]
 8017a6c:	b94b      	cbnz	r3, 8017a82 <__swsetup_r+0x7a>
 8017a6e:	89a3      	ldrh	r3, [r4, #12]
 8017a70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017a78:	d003      	beq.n	8017a82 <__swsetup_r+0x7a>
 8017a7a:	4621      	mov	r1, r4
 8017a7c:	4628      	mov	r0, r5
 8017a7e:	f000 f846 	bl	8017b0e <__smakebuf_r>
 8017a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a86:	f013 0201 	ands.w	r2, r3, #1
 8017a8a:	d00a      	beq.n	8017aa2 <__swsetup_r+0x9a>
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	60a2      	str	r2, [r4, #8]
 8017a90:	6962      	ldr	r2, [r4, #20]
 8017a92:	4252      	negs	r2, r2
 8017a94:	61a2      	str	r2, [r4, #24]
 8017a96:	6922      	ldr	r2, [r4, #16]
 8017a98:	b942      	cbnz	r2, 8017aac <__swsetup_r+0xa4>
 8017a9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017a9e:	d1c5      	bne.n	8017a2c <__swsetup_r+0x24>
 8017aa0:	bd38      	pop	{r3, r4, r5, pc}
 8017aa2:	0799      	lsls	r1, r3, #30
 8017aa4:	bf58      	it	pl
 8017aa6:	6962      	ldrpl	r2, [r4, #20]
 8017aa8:	60a2      	str	r2, [r4, #8]
 8017aaa:	e7f4      	b.n	8017a96 <__swsetup_r+0x8e>
 8017aac:	2000      	movs	r0, #0
 8017aae:	e7f7      	b.n	8017aa0 <__swsetup_r+0x98>
 8017ab0:	20000144 	.word	0x20000144

08017ab4 <abort>:
 8017ab4:	b508      	push	{r3, lr}
 8017ab6:	2006      	movs	r0, #6
 8017ab8:	f000 f88e 	bl	8017bd8 <raise>
 8017abc:	2001      	movs	r0, #1
 8017abe:	f7e9 ff6b 	bl	8001998 <_exit>

08017ac2 <__swhatbuf_r>:
 8017ac2:	b570      	push	{r4, r5, r6, lr}
 8017ac4:	460c      	mov	r4, r1
 8017ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aca:	2900      	cmp	r1, #0
 8017acc:	b096      	sub	sp, #88	@ 0x58
 8017ace:	4615      	mov	r5, r2
 8017ad0:	461e      	mov	r6, r3
 8017ad2:	da0d      	bge.n	8017af0 <__swhatbuf_r+0x2e>
 8017ad4:	89a3      	ldrh	r3, [r4, #12]
 8017ad6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017ada:	f04f 0100 	mov.w	r1, #0
 8017ade:	bf14      	ite	ne
 8017ae0:	2340      	movne	r3, #64	@ 0x40
 8017ae2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	6031      	str	r1, [r6, #0]
 8017aea:	602b      	str	r3, [r5, #0]
 8017aec:	b016      	add	sp, #88	@ 0x58
 8017aee:	bd70      	pop	{r4, r5, r6, pc}
 8017af0:	466a      	mov	r2, sp
 8017af2:	f000 f879 	bl	8017be8 <_fstat_r>
 8017af6:	2800      	cmp	r0, #0
 8017af8:	dbec      	blt.n	8017ad4 <__swhatbuf_r+0x12>
 8017afa:	9901      	ldr	r1, [sp, #4]
 8017afc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017b00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017b04:	4259      	negs	r1, r3
 8017b06:	4159      	adcs	r1, r3
 8017b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017b0c:	e7eb      	b.n	8017ae6 <__swhatbuf_r+0x24>

08017b0e <__smakebuf_r>:
 8017b0e:	898b      	ldrh	r3, [r1, #12]
 8017b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b12:	079d      	lsls	r5, r3, #30
 8017b14:	4606      	mov	r6, r0
 8017b16:	460c      	mov	r4, r1
 8017b18:	d507      	bpl.n	8017b2a <__smakebuf_r+0x1c>
 8017b1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017b1e:	6023      	str	r3, [r4, #0]
 8017b20:	6123      	str	r3, [r4, #16]
 8017b22:	2301      	movs	r3, #1
 8017b24:	6163      	str	r3, [r4, #20]
 8017b26:	b003      	add	sp, #12
 8017b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b2a:	ab01      	add	r3, sp, #4
 8017b2c:	466a      	mov	r2, sp
 8017b2e:	f7ff ffc8 	bl	8017ac2 <__swhatbuf_r>
 8017b32:	9f00      	ldr	r7, [sp, #0]
 8017b34:	4605      	mov	r5, r0
 8017b36:	4639      	mov	r1, r7
 8017b38:	4630      	mov	r0, r6
 8017b3a:	f7fe fd99 	bl	8016670 <_malloc_r>
 8017b3e:	b948      	cbnz	r0, 8017b54 <__smakebuf_r+0x46>
 8017b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b44:	059a      	lsls	r2, r3, #22
 8017b46:	d4ee      	bmi.n	8017b26 <__smakebuf_r+0x18>
 8017b48:	f023 0303 	bic.w	r3, r3, #3
 8017b4c:	f043 0302 	orr.w	r3, r3, #2
 8017b50:	81a3      	strh	r3, [r4, #12]
 8017b52:	e7e2      	b.n	8017b1a <__smakebuf_r+0xc>
 8017b54:	89a3      	ldrh	r3, [r4, #12]
 8017b56:	6020      	str	r0, [r4, #0]
 8017b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b5c:	81a3      	strh	r3, [r4, #12]
 8017b5e:	9b01      	ldr	r3, [sp, #4]
 8017b60:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017b64:	b15b      	cbz	r3, 8017b7e <__smakebuf_r+0x70>
 8017b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	f000 f84e 	bl	8017c0c <_isatty_r>
 8017b70:	b128      	cbz	r0, 8017b7e <__smakebuf_r+0x70>
 8017b72:	89a3      	ldrh	r3, [r4, #12]
 8017b74:	f023 0303 	bic.w	r3, r3, #3
 8017b78:	f043 0301 	orr.w	r3, r3, #1
 8017b7c:	81a3      	strh	r3, [r4, #12]
 8017b7e:	89a3      	ldrh	r3, [r4, #12]
 8017b80:	431d      	orrs	r5, r3
 8017b82:	81a5      	strh	r5, [r4, #12]
 8017b84:	e7cf      	b.n	8017b26 <__smakebuf_r+0x18>

08017b86 <_raise_r>:
 8017b86:	291f      	cmp	r1, #31
 8017b88:	b538      	push	{r3, r4, r5, lr}
 8017b8a:	4605      	mov	r5, r0
 8017b8c:	460c      	mov	r4, r1
 8017b8e:	d904      	bls.n	8017b9a <_raise_r+0x14>
 8017b90:	2316      	movs	r3, #22
 8017b92:	6003      	str	r3, [r0, #0]
 8017b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b98:	bd38      	pop	{r3, r4, r5, pc}
 8017b9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017b9c:	b112      	cbz	r2, 8017ba4 <_raise_r+0x1e>
 8017b9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ba2:	b94b      	cbnz	r3, 8017bb8 <_raise_r+0x32>
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	f000 f853 	bl	8017c50 <_getpid_r>
 8017baa:	4622      	mov	r2, r4
 8017bac:	4601      	mov	r1, r0
 8017bae:	4628      	mov	r0, r5
 8017bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bb4:	f000 b83a 	b.w	8017c2c <_kill_r>
 8017bb8:	2b01      	cmp	r3, #1
 8017bba:	d00a      	beq.n	8017bd2 <_raise_r+0x4c>
 8017bbc:	1c59      	adds	r1, r3, #1
 8017bbe:	d103      	bne.n	8017bc8 <_raise_r+0x42>
 8017bc0:	2316      	movs	r3, #22
 8017bc2:	6003      	str	r3, [r0, #0]
 8017bc4:	2001      	movs	r0, #1
 8017bc6:	e7e7      	b.n	8017b98 <_raise_r+0x12>
 8017bc8:	2100      	movs	r1, #0
 8017bca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017bce:	4620      	mov	r0, r4
 8017bd0:	4798      	blx	r3
 8017bd2:	2000      	movs	r0, #0
 8017bd4:	e7e0      	b.n	8017b98 <_raise_r+0x12>
	...

08017bd8 <raise>:
 8017bd8:	4b02      	ldr	r3, [pc, #8]	@ (8017be4 <raise+0xc>)
 8017bda:	4601      	mov	r1, r0
 8017bdc:	6818      	ldr	r0, [r3, #0]
 8017bde:	f7ff bfd2 	b.w	8017b86 <_raise_r>
 8017be2:	bf00      	nop
 8017be4:	20000144 	.word	0x20000144

08017be8 <_fstat_r>:
 8017be8:	b538      	push	{r3, r4, r5, lr}
 8017bea:	4d07      	ldr	r5, [pc, #28]	@ (8017c08 <_fstat_r+0x20>)
 8017bec:	2300      	movs	r3, #0
 8017bee:	4604      	mov	r4, r0
 8017bf0:	4608      	mov	r0, r1
 8017bf2:	4611      	mov	r1, r2
 8017bf4:	602b      	str	r3, [r5, #0]
 8017bf6:	f7e9 ff1f 	bl	8001a38 <_fstat>
 8017bfa:	1c43      	adds	r3, r0, #1
 8017bfc:	d102      	bne.n	8017c04 <_fstat_r+0x1c>
 8017bfe:	682b      	ldr	r3, [r5, #0]
 8017c00:	b103      	cbz	r3, 8017c04 <_fstat_r+0x1c>
 8017c02:	6023      	str	r3, [r4, #0]
 8017c04:	bd38      	pop	{r3, r4, r5, pc}
 8017c06:	bf00      	nop
 8017c08:	2000cca8 	.word	0x2000cca8

08017c0c <_isatty_r>:
 8017c0c:	b538      	push	{r3, r4, r5, lr}
 8017c0e:	4d06      	ldr	r5, [pc, #24]	@ (8017c28 <_isatty_r+0x1c>)
 8017c10:	2300      	movs	r3, #0
 8017c12:	4604      	mov	r4, r0
 8017c14:	4608      	mov	r0, r1
 8017c16:	602b      	str	r3, [r5, #0]
 8017c18:	f7e9 ff1e 	bl	8001a58 <_isatty>
 8017c1c:	1c43      	adds	r3, r0, #1
 8017c1e:	d102      	bne.n	8017c26 <_isatty_r+0x1a>
 8017c20:	682b      	ldr	r3, [r5, #0]
 8017c22:	b103      	cbz	r3, 8017c26 <_isatty_r+0x1a>
 8017c24:	6023      	str	r3, [r4, #0]
 8017c26:	bd38      	pop	{r3, r4, r5, pc}
 8017c28:	2000cca8 	.word	0x2000cca8

08017c2c <_kill_r>:
 8017c2c:	b538      	push	{r3, r4, r5, lr}
 8017c2e:	4d07      	ldr	r5, [pc, #28]	@ (8017c4c <_kill_r+0x20>)
 8017c30:	2300      	movs	r3, #0
 8017c32:	4604      	mov	r4, r0
 8017c34:	4608      	mov	r0, r1
 8017c36:	4611      	mov	r1, r2
 8017c38:	602b      	str	r3, [r5, #0]
 8017c3a:	f7e9 fe9d 	bl	8001978 <_kill>
 8017c3e:	1c43      	adds	r3, r0, #1
 8017c40:	d102      	bne.n	8017c48 <_kill_r+0x1c>
 8017c42:	682b      	ldr	r3, [r5, #0]
 8017c44:	b103      	cbz	r3, 8017c48 <_kill_r+0x1c>
 8017c46:	6023      	str	r3, [r4, #0]
 8017c48:	bd38      	pop	{r3, r4, r5, pc}
 8017c4a:	bf00      	nop
 8017c4c:	2000cca8 	.word	0x2000cca8

08017c50 <_getpid_r>:
 8017c50:	f7e9 be8a 	b.w	8001968 <_getpid>

08017c54 <_init>:
 8017c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c56:	bf00      	nop
 8017c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c5a:	bc08      	pop	{r3}
 8017c5c:	469e      	mov	lr, r3
 8017c5e:	4770      	bx	lr

08017c60 <_fini>:
 8017c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c62:	bf00      	nop
 8017c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c66:	bc08      	pop	{r3}
 8017c68:	469e      	mov	lr, r3
 8017c6a:	4770      	bx	lr
