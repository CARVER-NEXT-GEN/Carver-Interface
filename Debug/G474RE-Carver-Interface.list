
G474RE-Carver-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  08017cf0  08017cf0  00018cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b80  08018b80  0001a198  2**0
                  CONTENTS
  4 .ARM          00000008  08018b80  08018b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b88  08018b88  0001a198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018b88  08018b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018b94  08018b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  08018b98  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb10  20000198  08018d30  0001a198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000cca8  08018d30  0001aca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a198  2**0
                  CONTENTS, READONLY
 12 .debug_info   000218f5  00000000  00000000  0001a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c91  00000000  00000000  0003babd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00040750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fa  00000000  00000000  00042050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7d5  00000000  00000000  0004334a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201a3  00000000  00000000  00070b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001173da  00000000  00000000  00090cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a809c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007454  00000000  00000000  001a8114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001af568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000198 	.word	0x20000198
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017cd4 	.word	0x08017cd4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000019c 	.word	0x2000019c
 800021c:	08017cd4 	.word	0x08017cd4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	@ 0x30
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2220      	movs	r2, #32
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f016 fb7d 	bl	8016d98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800069e:	4b32      	ldr	r3, [pc, #200]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c0:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006cc:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d2:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006da:	2201      	movs	r2, #1
 80006dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	4817      	ldr	r0, [pc, #92]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800070a:	f001 fe27 	bl	800235c <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000714:	f000 ff6f 	bl	80015f6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000724:	f003 f8f4 	bl	8003910 <HAL_ADCEx_MultiModeConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800072e:	f000 ff62 	bl	80015f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_ADC1_Init+0xec>)
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000736:	2306      	movs	r3, #6
 8000738:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073e:	237f      	movs	r3, #127	@ 0x7f
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000742:	2304      	movs	r3, #4
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f002 fb1c 	bl	8002d8c <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 ff4c 	bl	80015f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	@ 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001b4 	.word	0x200001b4
 800076c:	04300002 	.word	0x04300002

08000770 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b09e      	sub	sp, #120	@ 0x78
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2254      	movs	r2, #84	@ 0x54
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f016 fb01 	bl	8016d98 <memset>
  if(adcHandle->Instance==ADC1)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800079e:	d167      	bne.n	8000870 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f004 fe19 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007bc:	f000 ff1b 	bl	80015f6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007dc:	4a26      	ldr	r2, [pc, #152]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e4:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <HAL_ADC_MspInit+0x108>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Vout_Poten_Pin;
 80007f0:	2301      	movs	r3, #1
 80007f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Vout_Poten_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000800:	4619      	mov	r1, r3
 8000802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000806:	f003 fdd9 	bl	80043bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800080c:	4a1c      	ldr	r2, [pc, #112]	@ (8000880 <HAL_ADC_MspInit+0x110>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000812:	2205      	movs	r2, #5
 8000814:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800082a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800082e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000836:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800083a:	2220      	movs	r2, #32
 800083c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000846:	f003 fa7b 	bl	8003d40 <HAL_DMA_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000850:	f000 fed1 	bl	80015f6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a09      	ldr	r2, [pc, #36]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 8000858:	655a      	str	r2, [r3, #84]	@ 0x54
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_ADC_MspInit+0x10c>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2105      	movs	r1, #5
 8000864:	2012      	movs	r0, #18
 8000866:	f003 fa36 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800086a:	2012      	movs	r0, #18
 800086c:	f003 fa4d 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000870:	bf00      	nop
 8000872:	3778      	adds	r7, #120	@ 0x78
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	20000220 	.word	0x20000220
 8000880:	40020030 	.word	0x40020030

08000884 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
 8000888:	2228      	movs	r2, #40	@ 0x28
 800088a:	4907      	ldr	r1, [pc, #28]	@ (80008a8 <MX_FREERTOS_Init+0x24>)
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <MX_FREERTOS_Init+0x28>)
 800088e:	f001 ff21 	bl	80026d4 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000892:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <MX_FREERTOS_Init+0x2c>)
 8000894:	2100      	movs	r1, #0
 8000896:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <MX_FREERTOS_Init+0x30>)
 8000898:	f006 fe56 	bl	8007548 <osThreadNew>
 800089c:	4603      	mov	r3, r0
 800089e:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <MX_FREERTOS_Init+0x34>)
 80008a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000298 	.word	0x20000298
 80008ac:	200001b4 	.word	0x200001b4
 80008b0:	08017da8 	.word	0x08017da8
 80008b4:	080008bd 	.word	0x080008bd
 80008b8:	200002e8 	.word	0x200002e8

080008bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008c0:	b0ec      	sub	sp, #432	@ 0x1b0
 80008c2:	af02      	add	r7, sp, #8
 80008c4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80008c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008cc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 80008ce:	4b64      	ldr	r3, [pc, #400]	@ (8000a60 <StartDefaultTask+0x1a4>)
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	4b64      	ldr	r3, [pc, #400]	@ (8000a64 <StartDefaultTask+0x1a8>)
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	4b64      	ldr	r3, [pc, #400]	@ (8000a68 <StartDefaultTask+0x1ac>)
 80008d8:	4a64      	ldr	r2, [pc, #400]	@ (8000a6c <StartDefaultTask+0x1b0>)
 80008da:	4965      	ldr	r1, [pc, #404]	@ (8000a70 <StartDefaultTask+0x1b4>)
 80008dc:	2001      	movs	r0, #1
 80008de:	f00a fd83 	bl	800b3e8 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80008e2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00a fc9a 	bl	800b220 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80008ec:	4b61      	ldr	r3, [pc, #388]	@ (8000a74 <StartDefaultTask+0x1b8>)
 80008ee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	freeRTOS_allocator.deallocate = microros_deallocate;
 80008f2:	4b61      	ldr	r3, [pc, #388]	@ (8000a78 <StartDefaultTask+0x1bc>)
 80008f4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.reallocate = microros_reallocate;
 80008f8:	4b60      	ldr	r3, [pc, #384]	@ (8000a7c <StartDefaultTask+0x1c0>)
 80008fa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80008fe:	4b60      	ldr	r3, [pc, #384]	@ (8000a80 <StartDefaultTask+0x1c4>)
 8000900:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000904:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000908:	4618      	mov	r0, r3
 800090a:	f00a fc97 	bl	800b23c <rcutils_set_default_allocator>
 800090e:	4603      	mov	r3, r0
 8000910:	f083 0301 	eor.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800091a:	21bc      	movs	r1, #188	@ 0xbc
 800091c:	4859      	ldr	r0, [pc, #356]	@ (8000a84 <StartDefaultTask+0x1c8>)
 800091e:	f016 f94f 	bl	8016bc0 <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(8);
 8000922:	4b59      	ldr	r3, [pc, #356]	@ (8000a88 <StartDefaultTask+0x1cc>)
 8000924:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 8000928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * uint16_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16);
 8000936:	f00b feeb 	bl	800c710 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>
 800093a:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	const rosidl_message_type_support_t * bool_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool);
 800093e:	f00b fecf 	bl	800c6e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>
 8000942:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194


	allocator = rcl_get_default_allocator();
 8000946:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800094a:	4618      	mov	r0, r3
 800094c:	f00a fc94 	bl	800b278 <rcutils_get_default_allocator>
 8000950:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000954:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000958:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 800095c:	461d      	mov	r5, r3
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	682b      	ldr	r3, [r5, #0]
 8000964:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8000966:	463b      	mov	r3, r7
 8000968:	4618      	mov	r0, r3
 800096a:	f00a f8ab 	bl	800aac4 <rclc_executor_get_zero_initialized_executor>
 800096e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000972:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8000976:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800097a:	4611      	mov	r1, r2
 800097c:	2288      	movs	r2, #136	@ 0x88
 800097e:	4618      	mov	r0, r3
 8000980:	f016 fad3 	bl	8016f2a <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8000984:	f009 fb40 	bl	800a008 <rcl_get_zero_initialized_init_options>
 8000988:	4602      	mov	r2, r0
 800098a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800098e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000992:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000994:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8000998:	466a      	mov	r2, sp
 800099a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800099e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80009a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ac:	4620      	mov	r0, r4
 80009ae:	f009 fb2d 	bl	800a00c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 80009b2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80009b6:	21c6      	movs	r1, #198	@ 0xc6
 80009b8:	4618      	mov	r0, r3
 80009ba:	f009 fc23 	bl	800a204 <rcl_init_options_set_domain_id>

	// create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80009be:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80009c2:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80009c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	f00a fb49 	bl	800b068 <rclc_support_init_with_options>

	// create timer
	rclc_timer_init_default(&XLR8_timer, &support, timer_period, timer_callback);
 80009d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80009da:	2200      	movs	r2, #0
 80009dc:	4698      	mov	r8, r3
 80009de:	4691      	mov	r9, r2
 80009e0:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80009e4:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <StartDefaultTask+0x1d0>)
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4642      	mov	r2, r8
 80009ee:	464b      	mov	r3, r9
 80009f0:	f00a fbde 	bl	800b1b0 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "uros_H7_Node", "", &support);
 80009f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009f8:	4a25      	ldr	r2, [pc, #148]	@ (8000a90 <StartDefaultTask+0x1d4>)
 80009fa:	4926      	ldr	r1, [pc, #152]	@ (8000a94 <StartDefaultTask+0x1d8>)
 80009fc:	4826      	ldr	r0, [pc, #152]	@ (8000a98 <StartDefaultTask+0x1dc>)
 80009fe:	f00a fb67 	bl	800b0d0 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&xrl8_publisher, &node, uint16_type_support, "accl_publisher");
 8000a02:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <StartDefaultTask+0x1e0>)
 8000a04:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000a08:	4923      	ldr	r1, [pc, #140]	@ (8000a98 <StartDefaultTask+0x1dc>)
 8000a0a:	4825      	ldr	r0, [pc, #148]	@ (8000aa0 <StartDefaultTask+0x1e4>)
 8000a0c:	f00a fb9c 	bl	800b148 <rclc_publisher_init_best_effort>
	rclc_publisher_init_best_effort(&emer_publisher, &node, bool_type_support, "H7_Emergency");
 8000a10:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <StartDefaultTask+0x1e8>)
 8000a12:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000a16:	4920      	ldr	r1, [pc, #128]	@ (8000a98 <StartDefaultTask+0x1dc>)
 8000a18:	4823      	ldr	r0, [pc, #140]	@ (8000aa8 <StartDefaultTask+0x1ec>)
 8000a1a:	f00a fb95 	bl	800b148 <rclc_publisher_init_best_effort>
	// create service server

	// create service client

	// create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8000a1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000a22:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a26:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000a2a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8000a2e:	f00a f853 	bl	800aad8 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &XLR8_timer);
 8000a32:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 8000a36:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f00a f8bb 	bl	800abb8 <rclc_executor_add_timer>

	rclc_executor_spin(&executor);
 8000a42:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00a facc 	bl	800afe4 <rclc_executor_spin>
	rmw_uros_sync_session(timeout_ms);
 8000a4c:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8000a50:	f00b fac2 	bl	800bfd8 <rmw_uros_sync_session>
//	for(;;)
//	{
//	//	osDelay(10);
//	}
  /* USER CODE END StartDefaultTask */
}
 8000a54:	bf00      	nop
 8000a56:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a60:	08001281 	.word	0x08001281
 8000a64:	0800121d 	.word	0x0800121d
 8000a68:	080011fd 	.word	0x080011fd
 8000a6c:	080011d1 	.word	0x080011d1
 8000a70:	200065a8 	.word	0x200065a8
 8000a74:	08001605 	.word	0x08001605
 8000a78:	08001649 	.word	0x08001649
 8000a7c:	08001681 	.word	0x08001681
 8000a80:	080016ed 	.word	0x080016ed
 8000a84:	08017cfc 	.word	0x08017cfc
 8000a88:	007a1200 	.word	0x007a1200
 8000a8c:	08000aad 	.word	0x08000aad
 8000a90:	08017d24 	.word	0x08017d24
 8000a94:	08017d28 	.word	0x08017d28
 8000a98:	20000280 	.word	0x20000280
 8000a9c:	08017d38 	.word	0x08017d38
 8000aa0:	20000288 	.word	0x20000288
 8000aa4:	08017d48 	.word	0x08017d48
 8000aa8:	20000290 	.word	0x20000290

08000aac <timer_callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d07b      	beq.n	8000bb6 <timer_callback+0x10a>


		if (uwTick >= l) {  // Sync session at lower frequency
 8000abe:	4b40      	ldr	r3, [pc, #256]	@ (8000bc0 <timer_callback+0x114>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a40      	ldr	r2, [pc, #256]	@ (8000bc4 <timer_callback+0x118>)
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d309      	bcc.n	8000ade <timer_callback+0x32>
			rmw_uros_sync_session(1000);
 8000aca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ace:	f00b fa83 	bl	800bfd8 <rmw_uros_sync_session>
			l += 1000;
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc4 <timer_callback+0x118>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000ada:	4a3a      	ldr	r2, [pc, #232]	@ (8000bc4 <timer_callback+0x118>)
 8000adc:	6013      	str	r3, [r2, #0]
		}

		xlr8_publish(calculate_average(adc_buffer, BUFFER_SIZE));
 8000ade:	2128      	movs	r1, #40	@ 0x28
 8000ae0:	4839      	ldr	r0, [pc, #228]	@ (8000bc8 <timer_callback+0x11c>)
 8000ae2:	f000 f8c5 	bl	8000c70 <calculate_average>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f87b 	bl	8000be4 <xlr8_publish>
		emergency_publish(HAL_GPIO_ReadPin(Emergency_GPIO_Port, Emergency_Pin));
 8000aee:	2120      	movs	r1, #32
 8000af0:	4836      	ldr	r0, [pc, #216]	@ (8000bcc <timer_callback+0x120>)
 8000af2:	f003 fde5 	bl	80046c0 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f893 	bl	8000c24 <emergency_publish>

		pinState = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);
 8000afe:	2104      	movs	r1, #4
 8000b00:	4833      	ldr	r0, [pc, #204]	@ (8000bd0 <timer_callback+0x124>)
 8000b02:	f003 fddd 	bl	80046c0 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <timer_callback+0x128>)
 8000b0c:	801a      	strh	r2, [r3, #0]
		if (pinState == 1){
 8000b0e:	4b31      	ldr	r3, [pc, #196]	@ (8000bd4 <timer_callback+0x128>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d12e      	bne.n	8000b74 <timer_callback+0xc8>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2140      	movs	r1, #64	@ 0x40
 8000b1a:	482f      	ldr	r0, [pc, #188]	@ (8000bd8 <timer_callback+0x12c>)
 8000b1c:	f003 fde8 	bl	80046f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b26:	482c      	ldr	r0, [pc, #176]	@ (8000bd8 <timer_callback+0x12c>)
 8000b28:	f003 fde2 	bl	80046f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b32:	4829      	ldr	r0, [pc, #164]	@ (8000bd8 <timer_callback+0x12c>)
 8000b34:	f003 fddc 	bl	80046f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b3e:	4826      	ldr	r0, [pc, #152]	@ (8000bd8 <timer_callback+0x12c>)
 8000b40:	f003 fdd6 	bl	80046f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4e:	f003 fdcf 	bl	80046f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Lamp_Mode2_GPIO_Port, Lamp_Mode2_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2108      	movs	r1, #8
 8000b56:	4821      	ldr	r0, [pc, #132]	@ (8000bdc <timer_callback+0x130>)
 8000b58:	f003 fdca 	bl	80046f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Lamp_Mode3_GPIO_Port, Lamp_Mode3_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2120      	movs	r1, #32
 8000b60:	481e      	ldr	r0, [pc, #120]	@ (8000bdc <timer_callback+0x130>)
 8000b62:	f003 fdc5 	bl	80046f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Lamp_Mode4_GPIO_Port, Lamp_Mode4_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b6c:	4817      	ldr	r0, [pc, #92]	@ (8000bcc <timer_callback+0x120>)
 8000b6e:	f003 fdbf 	bl	80046f0 <HAL_GPIO_WritePin>
 8000b72:	e01d      	b.n	8000bb0 <timer_callback+0x104>
		}
		else{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2140      	movs	r1, #64	@ 0x40
 8000b78:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <timer_callback+0x12c>)
 8000b7a:	f003 fdb9 	bl	80046f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b84:	4814      	ldr	r0, [pc, #80]	@ (8000bd8 <timer_callback+0x12c>)
 8000b86:	f003 fdb3 	bl	80046f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b90:	4811      	ldr	r0, [pc, #68]	@ (8000bd8 <timer_callback+0x12c>)
 8000b92:	f003 fdad 	bl	80046f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b9c:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <timer_callback+0x12c>)
 8000b9e:	f003 fda7 	bl	80046f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f003 fda0 	bl	80046f0 <HAL_GPIO_WritePin>
		}
		HAL_IWDG_Refresh(&hiwdg);
 8000bb0:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <timer_callback+0x134>)
 8000bb2:	f003 fe27 	bl	8004804 <HAL_IWDG_Refresh>
	}

}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200066fc 	.word	0x200066fc
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000298 	.word	0x20000298
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	20000296 	.word	0x20000296
 8000bd8:	48001000 	.word	0x48001000
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	20006588 	.word	0x20006588

08000be4 <xlr8_publish>:

void xlr8_publish(uint16_t xlr8)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
	XRL8_msg.data = xlr8;
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <xlr8_publish+0x34>)
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	8013      	strh	r3, [r2, #0]
	rcl_ret_t ret = rcl_publish(&xrl8_publisher, &XRL8_msg, NULL);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4908      	ldr	r1, [pc, #32]	@ (8000c18 <xlr8_publish+0x34>)
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <xlr8_publish+0x38>)
 8000bfa:	f009 fbd5 	bl	800a3a8 <rcl_publish>
 8000bfe:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d004      	beq.n	8000c10 <xlr8_publish+0x2c>
 8000c06:	f240 1125 	movw	r1, #293	@ 0x125
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <xlr8_publish+0x3c>)
 8000c0c:	f015 ffd8 	bl	8016bc0 <iprintf>
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000028c 	.word	0x2000028c
 8000c1c:	20000288 	.word	0x20000288
 8000c20:	08017d58 	.word	0x08017d58

08000c24 <emergency_publish>:

void emergency_publish(GPIO_PinState emer_state)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	emer_msg.data = !emer_state;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <emergency_publish+0x40>)
 8000c3c:	701a      	strb	r2, [r3, #0]
	rcl_ret_t ret = rcl_publish(&emer_publisher, &emer_msg, NULL);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <emergency_publish+0x40>)
 8000c42:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <emergency_publish+0x44>)
 8000c44:	f009 fbb0 	bl	800a3a8 <rcl_publish>
 8000c48:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <emergency_publish+0x36>
 8000c50:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <emergency_publish+0x48>)
 8000c56:	f015 ffb3 	bl	8016bc0 <iprintf>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000294 	.word	0x20000294
 8000c68:	20000290 	.word	0x20000290
 8000c6c:	08017d58 	.word	0x08017d58

08000c70 <calculate_average>:

uint16_t calculate_average(uint16_t *buffer, uint16_t length) {
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
    uint32_t sum = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	817b      	strh	r3, [r7, #10]
 8000c84:	e00b      	b.n	8000c9e <calculate_average+0x2e>
        sum += buffer[i];
 8000c86:	897b      	ldrh	r3, [r7, #10]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8000c98:	897b      	ldrh	r3, [r7, #10]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	817b      	strh	r3, [r7, #10]
 8000c9e:	897a      	ldrh	r2, [r7, #10]
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3ef      	bcc.n	8000c86 <calculate_average+0x16>
    }
    return (uint16_t)(sum / length);
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	b29b      	uxth	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cc8:	f007 fd12 	bl	80086f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e38 <pvPortMallocMicroROS+0x17c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000cd4:	f000 f986 	bl	8000fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cd8:	4b58      	ldr	r3, [pc, #352]	@ (8000e3c <pvPortMallocMicroROS+0x180>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 8090 	bne.w	8000e06 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d01e      	beq.n	8000d2a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000cec:	2208      	movs	r2, #8
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d015      	beq.n	8000d2a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f023 0307 	bic.w	r3, r3, #7
 8000d04:	3308      	adds	r3, #8
 8000d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00b      	beq.n	8000d2a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d16:	f383 8811 	msr	BASEPRI, r3
 8000d1a:	f3bf 8f6f 	isb	sy
 8000d1e:	f3bf 8f4f 	dsb	sy
 8000d22:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	e7fd      	b.n	8000d26 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d06a      	beq.n	8000e06 <pvPortMallocMicroROS+0x14a>
 8000d30:	4b43      	ldr	r3, [pc, #268]	@ (8000e40 <pvPortMallocMicroROS+0x184>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d865      	bhi.n	8000e06 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d3a:	4b42      	ldr	r3, [pc, #264]	@ (8000e44 <pvPortMallocMicroROS+0x188>)
 8000d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d3e:	4b41      	ldr	r3, [pc, #260]	@ (8000e44 <pvPortMallocMicroROS+0x188>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d44:	e004      	b.n	8000d50 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d903      	bls.n	8000d62 <pvPortMallocMicroROS+0xa6>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f1      	bne.n	8000d46 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d62:	4b35      	ldr	r3, [pc, #212]	@ (8000e38 <pvPortMallocMicroROS+0x17c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d04c      	beq.n	8000e06 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2208      	movs	r2, #8
 8000d72:	4413      	add	r3, r2
 8000d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	1ad2      	subs	r2, r2, r3
 8000d86:	2308      	movs	r3, #8
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d920      	bls.n	8000dd0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000da4:	f383 8811 	msr	BASEPRI, r3
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	f3bf 8f4f 	dsb	sy
 8000db0:	613b      	str	r3, [r7, #16]
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1ad2      	subs	r2, r2, r3
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dca:	69b8      	ldr	r0, [r7, #24]
 8000dcc:	f000 f96c 	bl	80010a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <pvPortMallocMicroROS+0x184>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4a19      	ldr	r2, [pc, #100]	@ (8000e40 <pvPortMallocMicroROS+0x184>)
 8000ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <pvPortMallocMicroROS+0x184>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <pvPortMallocMicroROS+0x18c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d203      	bcs.n	8000df2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <pvPortMallocMicroROS+0x184>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a16      	ldr	r2, [pc, #88]	@ (8000e48 <pvPortMallocMicroROS+0x18c>)
 8000df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <pvPortMallocMicroROS+0x180>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e06:	f007 fc81 	bl	800870c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00b      	beq.n	8000e2c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	60fb      	str	r3, [r7, #12]
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e2c:	69fb      	ldr	r3, [r7, #28]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3728      	adds	r7, #40	@ 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20005d70 	.word	0x20005d70
 8000e3c:	20005d7c 	.word	0x20005d7c
 8000e40:	20005d74 	.word	0x20005d74
 8000e44:	20005d68 	.word	0x20005d68
 8000e48:	20005d78 	.word	0x20005d78

08000e4c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d04a      	beq.n	8000ef4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	425b      	negs	r3, r3
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4413      	add	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <vPortFreeMicroROS+0xb0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10b      	bne.n	8000e92 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e7e:	f383 8811 	msr	BASEPRI, r3
 8000e82:	f3bf 8f6f 	isb	sy
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	60fb      	str	r3, [r7, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	e7fd      	b.n	8000e8e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e9e:	f383 8811 	msr	BASEPRI, r3
 8000ea2:	f3bf 8f6f 	isb	sy
 8000ea6:	f3bf 8f4f 	dsb	sy
 8000eaa:	60bb      	str	r3, [r7, #8]
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	e7fd      	b.n	8000eae <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <vPortFreeMicroROS+0xb0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d019      	beq.n	8000ef4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d115      	bne.n	8000ef4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <vPortFreeMicroROS+0xb0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ed8:	f007 fc0a 	bl	80086f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <vPortFreeMicroROS+0xb4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <vPortFreeMicroROS+0xb4>)
 8000ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000eea:	6938      	ldr	r0, [r7, #16]
 8000eec:	f000 f8dc 	bl	80010a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000ef0:	f007 fc0c 	bl	800870c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20005d7c 	.word	0x20005d7c
 8000f00:	20005d74 	.word	0x20005d74

08000f04 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f10:	2308      	movs	r3, #8
 8000f12:	425b      	negs	r3, r3
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	4413      	add	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <getBlockSize+0x38>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

	return count;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20005d7c 	.word	0x20005d7c

08000f40 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f4a:	f007 fbd1 	bl	80086f0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	f7ff feb4 	bl	8000cbc <pvPortMallocMicroROS>
 8000f54:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d017      	beq.n	8000f8c <pvPortReallocMicroROS+0x4c>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d014      	beq.n	8000f8c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffce 	bl	8000f04 <getBlockSize>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d201      	bcs.n	8000f7c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f015 ffd2 	bl	8016f2a <memcpy>

		vPortFreeMicroROS(pv);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff60 	bl	8000e4c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f8c:	f007 fbbe 	bl	800870c <xTaskResumeAll>

	return newmem;
 8000f90:	68bb      	ldr	r3, [r7, #8]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fa4:	f007 fba4 	bl	80086f0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff fe82 	bl	8000cbc <pvPortMallocMicroROS>
 8000fb8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fbe:	e004      	b.n	8000fca <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	613a      	str	r2, [r7, #16]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	617a      	str	r2, [r7, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f5      	bne.n	8000fc0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000fd4:	f007 fb9a 	bl	800870c <xTaskResumeAll>
  	return mem;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000fea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <prvHeapInit+0xac>)
 8000ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3307      	adds	r3, #7
 8001002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a1f      	ldr	r2, [pc, #124]	@ (8001090 <prvHeapInit+0xac>)
 8001014:	4413      	add	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800101c:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <prvHeapInit+0xb0>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <prvHeapInit+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001030:	2208      	movs	r2, #8
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f023 0307 	bic.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4a15      	ldr	r2, [pc, #84]	@ (8001098 <prvHeapInit+0xb4>)
 8001044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <prvHeapInit+0xb4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <prvHeapInit+0xb4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <prvHeapInit+0xb4>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <prvHeapInit+0xb8>)
 8001072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4a09      	ldr	r2, [pc, #36]	@ (80010a0 <prvHeapInit+0xbc>)
 800107a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <prvHeapInit+0xc0>)
 800107e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20005168 	.word	0x20005168
 8001094:	20005d68 	.word	0x20005d68
 8001098:	20005d70 	.word	0x20005d70
 800109c:	20005d78 	.word	0x20005d78
 80010a0:	20005d74 	.word	0x20005d74
 80010a4:	20005d7c 	.word	0x20005d7c

080010a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <prvInsertBlockIntoFreeList+0xac>)
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e002      	b.n	80010bc <prvInsertBlockIntoFreeList+0x14>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d8f7      	bhi.n	80010b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d108      	bne.n	80010ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	441a      	add	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	441a      	add	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d118      	bne.n	8001130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <prvInsertBlockIntoFreeList+0xb0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d00d      	beq.n	8001126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	441a      	add	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e008      	b.n	8001138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <prvInsertBlockIntoFreeList+0xb0>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e003      	b.n	8001138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	d002      	beq.n	8001146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20005d68 	.word	0x20005d68
 8001158:	20005d70 	.word	0x20005d70

0800115c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_DMA_Init+0x70>)
 8001164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <MX_DMA_Init+0x70>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6493      	str	r3, [r2, #72]	@ 0x48
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_DMA_Init+0x70>)
 8001170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_DMA_Init+0x70>)
 800117c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117e:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <MX_DMA_Init+0x70>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6493      	str	r3, [r2, #72]	@ 0x48
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_DMA_Init+0x70>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2105      	movs	r1, #5
 8001196:	200b      	movs	r0, #11
 8001198:	f002 fd9d 	bl	8003cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800119c:	200b      	movs	r0, #11
 800119e:	f002 fdb4 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2105      	movs	r1, #5
 80011a6:	200c      	movs	r0, #12
 80011a8:	f002 fd95 	bl	8003cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011ac:	200c      	movs	r0, #12
 80011ae:	f002 fdac 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2105      	movs	r1, #5
 80011b6:	200d      	movs	r0, #13
 80011b8:	f002 fd8d 	bl	8003cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011bc:	200d      	movs	r0, #13
 80011be:	f002 fda4 	bl	8003d0a <HAL_NVIC_EnableIRQ>

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011de:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80011e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011e4:	4904      	ldr	r1, [pc, #16]	@ (80011f8 <cubemx_transport_open+0x28>)
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f004 fc1c 	bl	8005a24 <HAL_UART_Receive_DMA>
    return true;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20005d80 	.word	0x20005d80

080011fc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800120a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f004 fc55 	bl	8005abc <HAL_UART_DMAStop>
    return true;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001230:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001238:	2b20      	cmp	r3, #32
 800123a:	d11b      	bne.n	8001274 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f004 fb6d 	bl	8005924 <HAL_UART_Transmit_DMA>
 800124a:	4603      	mov	r3, r0
 800124c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800124e:	e002      	b.n	8001256 <cubemx_transport_write+0x3a>
            osDelay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f006 fa0b 	bl	800766c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d104      	bne.n	8001266 <cubemx_transport_write+0x4a>
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001262:	2b20      	cmp	r3, #32
 8001264:	d1f4      	bne.n	8001250 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001266:	7cfb      	ldrb	r3, [r7, #19]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <cubemx_transport_write+0x54>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	e002      	b.n	8001276 <cubemx_transport_write+0x5a>
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001274:	2300      	movs	r3, #0
    }
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001294:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129a:	b672      	cpsid	i
}
 800129c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <cubemx_transport_read+0x9c>)
 80012ae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012b0:	b662      	cpsie	i
}
 80012b2:	bf00      	nop
        __enable_irq();
        ms_used++;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f006 f9d6 	bl	800766c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <cubemx_transport_read+0xa0>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <cubemx_transport_read+0x9c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d103      	bne.n	80012d4 <cubemx_transport_read+0x54>
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbe2      	blt.n	800129a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012d8:	e011      	b.n	80012fe <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <cubemx_transport_read+0xa0>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	440b      	add	r3, r1
 80012e4:	490f      	ldr	r1, [pc, #60]	@ (8001324 <cubemx_transport_read+0xa4>)
 80012e6:	5c8a      	ldrb	r2, [r1, r2]
 80012e8:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <cubemx_transport_read+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <cubemx_transport_read+0xa0>)
 80012f6:	6013      	str	r3, [r2, #0]
        wrote++;
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3301      	adds	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <cubemx_transport_read+0xa0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <cubemx_transport_read+0x9c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d003      	beq.n	8001312 <cubemx_transport_read+0x92>
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d3e3      	bcc.n	80012da <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001312:	69bb      	ldr	r3, [r7, #24]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20006584 	.word	0x20006584
 8001320:	20006580 	.word	0x20006580
 8001324:	20005d80 	.word	0x20005d80

08001328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4b69      	ldr	r3, [pc, #420]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a68      	ldr	r2, [pc, #416]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	4b63      	ldr	r3, [pc, #396]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a62      	ldr	r2, [pc, #392]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b60      	ldr	r3, [pc, #384]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b5d      	ldr	r3, [pc, #372]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a5c      	ldr	r2, [pc, #368]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b5a      	ldr	r3, [pc, #360]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b57      	ldr	r3, [pc, #348]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a56      	ldr	r2, [pc, #344]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b54      	ldr	r3, [pc, #336]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2120      	movs	r1, #32
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a6:	f003 f9a3 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Mode1_GPIO_Port, Lamp_Mode1_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b4:	f003 f99c 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lamp_Mode4_GPIO_Port, Lamp_Mode4_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013be:	484a      	ldr	r0, [pc, #296]	@ (80014e8 <MX_GPIO_Init+0x1c0>)
 80013c0:	f003 f996 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lamp_Mode2_Pin|Lamp_Mode3_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2128      	movs	r1, #40	@ 0x28
 80013c8:	4848      	ldr	r0, [pc, #288]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80013ca:	f003 f991 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4840      	ldr	r0, [pc, #256]	@ (80014e8 <MX_GPIO_Init+0x1c0>)
 80013e6:	f002 ffe9 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ea:	2320      	movs	r3, #32
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001404:	f002 ffda 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Mode4_Pin|Mode1_Pin;
 8001408:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001420:	f002 ffcc 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Emergency_Pin|Mode2_Pin;
 8001424:	23a0      	movs	r3, #160	@ 0xa0
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	482c      	ldr	r0, [pc, #176]	@ (80014e8 <MX_GPIO_Init+0x1c0>)
 8001438:	f002 ffc0 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lamp_Mode1_Pin;
 800143c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Lamp_Mode1_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f002 ffb0 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lamp_Mode4_Pin;
 800145c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Lamp_Mode4_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	@ (80014e8 <MX_GPIO_Init+0x1c0>)
 8001476:	f002 ffa1 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lamp_Mode2_Pin;
 800147a:	2308      	movs	r3, #8
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Lamp_Mode2_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4816      	ldr	r0, [pc, #88]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 8001492:	f002 ff93 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lamp_Mode3_Pin;
 8001496:	2320      	movs	r3, #32
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800149e:	2302      	movs	r3, #2
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Lamp_Mode3_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	480f      	ldr	r0, [pc, #60]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014ae:	f002 ff85 	bl	80043bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mode3_Pin;
 80014b2:	2340      	movs	r3, #64	@ 0x40
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode3_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014c6:	f002 ff79 	bl	80043bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2105      	movs	r1, #5
 80014ce:	2028      	movs	r0, #40	@ 0x28
 80014d0:	f002 fc01 	bl	8003cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d4:	2028      	movs	r0, #40	@ 0x28
 80014d6:	f002 fc18 	bl	8003d0a <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	@ 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000400 	.word	0x48000400

080014f0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <MX_IWDG_Init+0x34>)
 80014f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <MX_IWDG_Init+0x38>)
 80014f8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <MX_IWDG_Init+0x34>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <MX_IWDG_Init+0x34>)
 8001502:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001506:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_IWDG_Init+0x34>)
 800150a:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800150e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_IWDG_Init+0x34>)
 8001512:	f003 f928 	bl	8004766 <HAL_IWDG_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800151c:	f000 f86b 	bl	80015f6 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20006588 	.word	0x20006588
 8001528:	40003000 	.word	0x40003000

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001530:	f000 fc63 	bl	8001dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001534:	f000 f812 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001538:	f7ff fef6 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 800153c:	f7ff fe0e 	bl	800115c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001540:	f000 fb2a 	bl	8001b98 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001544:	f7ff f89c 	bl	8000680 <MX_ADC1_Init>
  MX_IWDG_Init();
 8001548:	f7ff ffd2 	bl	80014f0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800154c:	f005 ffb2 	bl	80074b4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001550:	f7ff f998 	bl	8000884 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001554:	f005 ffd2 	bl	80074fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <main+0x2c>

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	@ 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	2238      	movs	r2, #56	@ 0x38
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f015 fc14 	bl	8016d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800157e:	2000      	movs	r0, #0
 8001580:	f003 f950 	bl	8004824 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001584:	230a      	movs	r3, #10
 8001586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158e:	2340      	movs	r3, #64	@ 0x40
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001596:	2302      	movs	r3, #2
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159a:	2302      	movs	r3, #2
 800159c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800159e:	2304      	movs	r3, #4
 80015a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015a2:	2355      	movs	r3, #85	@ 0x55
 80015a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f9e8 	bl	800498c <HAL_RCC_OscConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015c2:	f000 f818 	bl	80015f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c6:	230f      	movs	r3, #15
 80015c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ca:	2303      	movs	r3, #3
 80015cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2104      	movs	r1, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fce6 	bl	8004fb0 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015ea:	f000 f804 	bl	80015f6 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	@ 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015fa:	b672      	cpsid	i
}
 80015fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fe:	bf00      	nop
 8001600:	e7fd      	b.n	80015fe <Error_Handler+0x8>
	...

08001604 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <microros_allocate+0x3c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <microros_allocate+0x3c>)
 800161c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <microros_allocate+0x40>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <microros_allocate+0x40>)
 800162c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fb44 	bl	8000cbc <pvPortMallocMicroROS>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20006598 	.word	0x20006598
 8001644:	2000659c 	.word	0x2000659c

08001648 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00c      	beq.n	8001672 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fc53 	bl	8000f04 <getBlockSize>
 800165e:	4603      	mov	r3, r0
 8001660:	4a06      	ldr	r2, [pc, #24]	@ (800167c <microros_deallocate+0x34>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	461a      	mov	r2, r3
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <microros_deallocate+0x34>)
 800166a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fbed 	bl	8000e4c <vPortFreeMicroROS>
  }
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000659c 	.word	0x2000659c

08001680 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800168c:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <microros_reallocate+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4413      	add	r3, r2
 8001696:	461a      	mov	r2, r3
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <microros_reallocate+0x64>)
 800169a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <microros_reallocate+0x68>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4413      	add	r3, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <microros_reallocate+0x68>)
 80016aa:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80016b2:	68b8      	ldr	r0, [r7, #8]
 80016b4:	f7ff fb02 	bl	8000cbc <pvPortMallocMicroROS>
 80016b8:	4603      	mov	r3, r0
 80016ba:	e00e      	b.n	80016da <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fc21 	bl	8000f04 <getBlockSize>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <microros_reallocate+0x68>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <microros_reallocate+0x68>)
 80016ce:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff fc34 	bl	8000f40 <pvPortReallocMicroROS>
 80016d8:	4603      	mov	r3, r0
  }
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20006598 	.word	0x20006598
 80016e8:	2000659c 	.word	0x2000659c

080016ec <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	4a0c      	ldr	r2, [pc, #48]	@ (8001734 <microros_zero_allocate+0x48>)
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4413      	add	r3, r2
 8001706:	461a      	mov	r2, r3
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <microros_zero_allocate+0x48>)
 800170a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <microros_zero_allocate+0x4c>)
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	4413      	add	r3, r2
 800171a:	461a      	mov	r2, r3
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <microros_zero_allocate+0x4c>)
 800171e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7ff fc39 	bl	8000f9a <pvPortCallocMicroROS>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20006598 	.word	0x20006598
 8001738:	2000659c 	.word	0x2000659c
 800173c:	00000000 	.word	0x00000000

08001740 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001752:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001756:	a320      	add	r3, pc, #128	@ (adr r3, 80017d8 <UTILS_NanosecondsToTimespec+0x98>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe fdc8 	bl	80002f0 <__aeabi_ldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800176a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176e:	a31a      	add	r3, pc, #104	@ (adr r3, 80017d8 <UTILS_NanosecondsToTimespec+0x98>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe fdbc 	bl	80002f0 <__aeabi_ldivmod>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da20      	bge.n	80017c6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <UTILS_NanosecondsToTimespec+0x90>)
 800178a:	fb82 1203 	smull	r1, r2, r2, r3
 800178e:	1712      	asrs	r2, r2, #28
 8001790:	17db      	asrs	r3, r3, #31
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	6979      	ldr	r1, [r7, #20]
 80017a0:	17c8      	asrs	r0, r1, #31
 80017a2:	460c      	mov	r4, r1
 80017a4:	4605      	mov	r5, r0
 80017a6:	ebb2 0804 	subs.w	r8, r2, r4
 80017aa:	eb63 0905 	sbc.w	r9, r3, r5
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	4906      	ldr	r1, [pc, #24]	@ (80017d4 <UTILS_NanosecondsToTimespec+0x94>)
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	441a      	add	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
    }
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017d0:	44b82fa1 	.word	0x44b82fa1
 80017d4:	3b9aca00 	.word	0x3b9aca00
 80017d8:	3b9aca00 	.word	0x3b9aca00
 80017dc:	00000000 	.word	0x00000000

080017e0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b08e      	sub	sp, #56	@ 0x38
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80017ea:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80017ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80017f0:	2300      	movs	r3, #0
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001806:	4618      	mov	r0, r3
 8001808:	f007 f9fc 	bl	8008c04 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800180c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180e:	17da      	asrs	r2, r3, #31
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	61fa      	str	r2, [r7, #28]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	69b9      	ldr	r1, [r7, #24]
 800181e:	000b      	movs	r3, r1
 8001820:	2200      	movs	r2, #0
 8001822:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001828:	2200      	movs	r2, #0
 800182a:	461c      	mov	r4, r3
 800182c:	4615      	mov	r5, r2
 800182e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001832:	1911      	adds	r1, r2, r4
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	416b      	adcs	r3, r5
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800183e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001842:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	f04f 0500 	mov.w	r5, #0
 8001852:	015d      	lsls	r5, r3, #5
 8001854:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001858:	0154      	lsls	r4, r2, #5
 800185a:	4622      	mov	r2, r4
 800185c:	462b      	mov	r3, r5
 800185e:	ebb2 0800 	subs.w	r8, r2, r0
 8001862:	eb63 0901 	sbc.w	r9, r3, r1
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001872:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001876:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800187a:	4690      	mov	r8, r2
 800187c:	4699      	mov	r9, r3
 800187e:	eb18 0a00 	adds.w	sl, r8, r0
 8001882:	eb49 0b01 	adc.w	fp, r9, r1
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001892:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001896:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800189a:	ebb2 040a 	subs.w	r4, r2, sl
 800189e:	603c      	str	r4, [r7, #0]
 80018a0:	eb63 030b 	sbc.w	r3, r3, fp
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018aa:	4623      	mov	r3, r4
 80018ac:	181b      	adds	r3, r3, r0
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	462b      	mov	r3, r5
 80018b2:	eb41 0303 	adc.w	r3, r1, r3
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018be:	f7ff ff3f 	bl	8001740 <UTILS_NanosecondsToTimespec>

    return 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	3738      	adds	r7, #56	@ 0x38
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_MspInit+0x50>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018da:	4a11      	ldr	r2, [pc, #68]	@ (8001920 <HAL_MspInit+0x50>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <HAL_MspInit+0x50>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <HAL_MspInit+0x50>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001920 <HAL_MspInit+0x50>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_MspInit+0x50>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	210f      	movs	r1, #15
 800190a:	f06f 0001 	mvn.w	r0, #1
 800190e:	f002 f9e2 	bl	8003cd6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001912:	f003 f82b 	bl	800496c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195e:	f000 fa9f 	bl	8001ea0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001962:	f007 fad3 	bl	8008f0c <xTaskGetSchedulerState>
 8001966:	4603      	mov	r3, r0
 8001968:	2b01      	cmp	r3, #1
 800196a:	d001      	beq.n	8001970 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800196c:	f008 f8cc 	bl	8009b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA1_Channel1_IRQHandler+0x10>)
 800197a:	f002 fbc4 	bl	8004106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000663c 	.word	0x2000663c

08001988 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <DMA1_Channel2_IRQHandler+0x10>)
 800198e:	f002 fbba 	bl	8004106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000669c 	.word	0x2000669c

0800199c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <DMA1_Channel3_IRQHandler+0x10>)
 80019a2:	f002 fbb0 	bl	8004106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000220 	.word	0x20000220

080019b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <ADC1_2_IRQHandler+0x10>)
 80019b6:	f000 ff61 	bl	800287c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200001b4 	.word	0x200001b4

080019c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019cc:	f002 fea8 	bl	8004720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <LPUART1_IRQHandler+0x10>)
 80019da:	f004 f905 	bl	8005be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200065a8 	.word	0x200065a8

080019e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_kill>:

int _kill(int pid, int sig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a02:	f015 fa5d 	bl	8016ec0 <__errno>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2216      	movs	r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe7 	bl	80019f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2a:	bf00      	nop
 8001a2c:	e7fd      	b.n	8001a2a <_exit+0x12>

08001a2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e00a      	b.n	8001a56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a40:	f3af 8000 	nop.w
 8001a44:	4601      	mov	r1, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	b2ca      	uxtb	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbf0      	blt.n	8001a40 <_read+0x12>
  }

  return len;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e009      	b.n	8001a8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dbf1      	blt.n	8001a7a <_write+0x12>
  }
  return len;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_close>:

int _close(int file)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_isatty>:

int _isatty(int file)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae0:	2301      	movs	r3, #1
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f015 f9c2 	bl	8016ec0 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20020000 	.word	0x20020000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	200065a4 	.word	0x200065a4
 8001b70:	2000cca8 	.word	0x2000cca8

08001b74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b9c:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001b9e:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <MX_LPUART1_UART_Init+0x90>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bda:	4812      	ldr	r0, [pc, #72]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bdc:	f003 fe52 	bl	8005884 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001be6:	f7ff fd06 	bl	80015f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bea:	2100      	movs	r1, #0
 8001bec:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001bee:	f005 fb62 	bl	80072b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001bf8:	f7ff fcfd 	bl	80015f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4809      	ldr	r0, [pc, #36]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001c00:	f005 fb97 	bl	8007332 <HAL_UARTEx_SetRxFifoThreshold>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001c0a:	f7ff fcf4 	bl	80015f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_LPUART1_UART_Init+0x8c>)
 8001c10:	f005 fb18 	bl	8007244 <HAL_UARTEx_DisableFifoMode>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001c1a:	f7ff fcec 	bl	80015f6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200065a8 	.word	0x200065a8
 8001c28:	40008000 	.word	0x40008000

08001c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b09e      	sub	sp, #120	@ 0x78
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2254      	movs	r2, #84	@ 0x54
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f015 f8a3 	bl	8016d98 <memset>
  if(uartHandle->Instance==LPUART1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <HAL_UART_MspInit+0x164>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	f040 8094 	bne.w	8001d86 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fbbc 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c76:	f7ff fcbe 	bl	80015f6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c7a:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <HAL_UART_MspInit+0x168>)
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7e:	4a45      	ldr	r2, [pc, #276]	@ (8001d94 <HAL_UART_MspInit+0x168>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c86:	4b43      	ldr	r3, [pc, #268]	@ (8001d94 <HAL_UART_MspInit+0x168>)
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <HAL_UART_MspInit+0x168>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	4a3f      	ldr	r2, [pc, #252]	@ (8001d94 <HAL_UART_MspInit+0x168>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d94 <HAL_UART_MspInit+0x168>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001caa:	230c      	movs	r3, #12
 8001cac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc8:	f002 fb78 	bl	80043bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001ccc:	4b32      	ldr	r3, [pc, #200]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001cce:	4a33      	ldr	r2, [pc, #204]	@ (8001d9c <HAL_UART_MspInit+0x170>)
 8001cd0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001cd2:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001cd4:	2223      	movs	r2, #35	@ 0x23
 8001cd6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001cda:	2210      	movs	r2, #16
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cde:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001ce6:	2280      	movs	r2, #128	@ 0x80
 8001ce8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cea:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001cfe:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001d02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001d04:	4824      	ldr	r0, [pc, #144]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001d06:	f002 f81b 	bl	8003d40 <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001d10:	f7ff fc71 	bl	80015f6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a20      	ldr	r2, [pc, #128]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001d18:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d98 <HAL_UART_MspInit+0x16c>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d22:	4a20      	ldr	r2, [pc, #128]	@ (8001da4 <HAL_UART_MspInit+0x178>)
 8001d24:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d28:	2222      	movs	r2, #34	@ 0x22
 8001d2a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d3a:	2280      	movs	r2, #128	@ 0x80
 8001d3c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d50:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d52:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001d56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001d58:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d5a:	f001 fff1 	bl	8003d40 <HAL_DMA_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001d64:	f7ff fc47 	bl	80015f6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d70:	4a0b      	ldr	r2, [pc, #44]	@ (8001da0 <HAL_UART_MspInit+0x174>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	205b      	movs	r0, #91	@ 0x5b
 8001d7c:	f001 ffab 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001d80:	205b      	movs	r0, #91	@ 0x5b
 8001d82:	f001 ffc2 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001d86:	bf00      	nop
 8001d88:	3778      	adds	r7, #120	@ 0x78
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40008000 	.word	0x40008000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	2000663c 	.word	0x2000663c
 8001d9c:	40020008 	.word	0x40020008
 8001da0:	2000669c 	.word	0x2000669c
 8001da4:	4002001c 	.word	0x4002001c

08001da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001da8:	480d      	ldr	r0, [pc, #52]	@ (8001de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001daa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dac:	f7ff fee2 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480c      	ldr	r0, [pc, #48]	@ (8001de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001db2:	490d      	ldr	r1, [pc, #52]	@ (8001de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dec <LoopForever+0xe>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001df4 <LoopForever+0x16>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f015 f879 	bl	8016ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dda:	f7ff fba7 	bl	800152c <main>

08001dde <LoopForever>:

LoopForever:
    b LoopForever
 8001dde:	e7fe      	b.n	8001dde <LoopForever>
  ldr   r0, =_estack
 8001de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001dec:	08018b98 	.word	0x08018b98
  ldr r2, =_sbss
 8001df0:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001df4:	2000cca8 	.word	0x2000cca8

08001df8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC3_IRQHandler>

08001dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f001 ff5b 	bl	8003cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f000 f80e 	bl	8001e2c <HAL_InitTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	e001      	b.n	8001e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e1c:	f7ff fd58 	bl	80018d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e20:	79fb      	ldrb	r3, [r7, #7]

}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_InitTick+0x68>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d022      	beq.n	8001e86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_InitTick+0x6c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_InitTick+0x68>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f001 ff66 	bl	8003d26 <HAL_SYSTICK_Config>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10f      	bne.n	8001e80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d809      	bhi.n	8001e7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e66:	2200      	movs	r2, #0
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e6e:	f001 ff32 	bl	8003cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_InitTick+0x70>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e007      	b.n	8001e8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	e004      	b.n	8001e8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000010 	.word	0x20000010
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_IncTick+0x1c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_IncTick+0x20>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <HAL_IncTick+0x1c>)
 8001eb0:	6013      	str	r3, [r2, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	200066fc 	.word	0x200066fc
 8001ec0:	20000010 	.word	0x20000010

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200066fc 	.word	0x200066fc

08001edc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3360      	adds	r3, #96	@ 0x60
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <LL_ADC_SetOffset+0x44>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	03fff000 	.word	0x03fff000

08001f8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3360      	adds	r3, #96	@ 0x60
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	@ 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3360      	adds	r3, #96	@ 0x60
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	431a      	orrs	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3360      	adds	r3, #96	@ 0x60
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	615a      	str	r2, [r3, #20]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b087      	sub	sp, #28
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3330      	adds	r3, #48	@ 0x30
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	4413      	add	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	211f      	movs	r1, #31
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 011f 	and.w	r1, r3, #31
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3314      	adds	r3, #20
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0e5b      	lsrs	r3, r3, #25
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	0d1b      	lsrs	r3, r3, #20
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2107      	movs	r1, #7
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	401a      	ands	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	0d1b      	lsrs	r3, r3, #20
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	431a      	orrs	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0318 	and.w	r3, r3, #24
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021a0:	40d9      	lsrs	r1, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	400b      	ands	r3, r1
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	431a      	orrs	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	0007ffff 	.word	0x0007ffff

080021c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 031f 	and.w	r3, r3, #31
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800220c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6093      	str	r3, [r2, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002234:	d101      	bne.n	800223a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002258:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800225c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002280:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002284:	d101      	bne.n	800228a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <LL_ADC_IsEnabled+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_ADC_IsEnabled+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022fa:	f043 0204 	orr.w	r2, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d101      	bne.n	8002326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b08      	cmp	r3, #8
 8002346:	d101      	bne.n	800234c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1a9      	b.n	80026ca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7fe f9f3 	bl	8000770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff3f 	bl	8002220 <LL_ADC_IsDeepPowerDownEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff25 	bl	80021fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff5a 	bl	8002270 <LL_ADC_IsInternalRegulatorEnabled>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d115      	bne.n	80023ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff3e 	bl	8002248 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002640 <HAL_ADC_Init+0x2e4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002644 <HAL_ADC_Init+0x2e8>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff3c 	bl	8002270 <LL_ADC_IsInternalRegulatorEnabled>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff75 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002424:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8142 	bne.w	80026b8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 813e 	bne.w	80026b8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002440:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002444:	f043 0202 	orr.w	r2, r3, #2
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff35 	bl	80022c0 <LL_ADC_IsEnabled>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d141      	bne.n	80024e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002464:	d004      	beq.n	8002470 <HAL_ADC_Init+0x114>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a77      	ldr	r2, [pc, #476]	@ (8002648 <HAL_ADC_Init+0x2ec>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d10f      	bne.n	8002490 <HAL_ADC_Init+0x134>
 8002470:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002474:	f7ff ff24 	bl	80022c0 <LL_ADC_IsEnabled>
 8002478:	4604      	mov	r4, r0
 800247a:	4873      	ldr	r0, [pc, #460]	@ (8002648 <HAL_ADC_Init+0x2ec>)
 800247c:	f7ff ff20 	bl	80022c0 <LL_ADC_IsEnabled>
 8002480:	4603      	mov	r3, r0
 8002482:	4323      	orrs	r3, r4
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e012      	b.n	80024b6 <HAL_ADC_Init+0x15a>
 8002490:	486e      	ldr	r0, [pc, #440]	@ (800264c <HAL_ADC_Init+0x2f0>)
 8002492:	f7ff ff15 	bl	80022c0 <LL_ADC_IsEnabled>
 8002496:	4604      	mov	r4, r0
 8002498:	486d      	ldr	r0, [pc, #436]	@ (8002650 <HAL_ADC_Init+0x2f4>)
 800249a:	f7ff ff11 	bl	80022c0 <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	431c      	orrs	r4, r3
 80024a2:	486c      	ldr	r0, [pc, #432]	@ (8002654 <HAL_ADC_Init+0x2f8>)
 80024a4:	f7ff ff0c 	bl	80022c0 <LL_ADC_IsEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4323      	orrs	r3, r4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Init+0x172>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a5f      	ldr	r2, [pc, #380]	@ (8002648 <HAL_ADC_Init+0x2ec>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Init+0x176>
 80024ce:	4a62      	ldr	r2, [pc, #392]	@ (8002658 <HAL_ADC_Init+0x2fc>)
 80024d0:	e000      	b.n	80024d4 <HAL_ADC_Init+0x178>
 80024d2:	4a62      	ldr	r2, [pc, #392]	@ (800265c <HAL_ADC_Init+0x300>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f7ff fcfe 	bl	8001edc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7f5b      	ldrb	r3, [r3, #29]
 80024e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800250a:	2b01      	cmp	r3, #1
 800250c:	d106      	bne.n	800251c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	045b      	lsls	r3, r3, #17
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	4b48      	ldr	r3, [pc, #288]	@ (8002660 <HAL_ADC_Init+0x304>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	430b      	orrs	r3, r1
 800254a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fee4 	bl	8002334 <LL_ADC_INJ_IsConversionOngoing>
 800256c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d17f      	bne.n	8002674 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d17c      	bne.n	8002674 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800257e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002586:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002596:	f023 0302 	bic.w	r3, r3, #2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d017      	beq.n	80025dc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6911      	ldr	r1, [r2, #16]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025da:	e013      	b.n	8002604 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002600:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800260a:	2b01      	cmp	r3, #1
 800260c:	d12a      	bne.n	8002664 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002624:	4311      	orrs	r1, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002630:	430a      	orrs	r2, r1
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	e019      	b.n	8002674 <HAL_ADC_Init+0x318>
 8002640:	20000008 	.word	0x20000008
 8002644:	053e2d63 	.word	0x053e2d63
 8002648:	50000100 	.word	0x50000100
 800264c:	50000400 	.word	0x50000400
 8002650:	50000500 	.word	0x50000500
 8002654:	50000600 	.word	0x50000600
 8002658:	50000300 	.word	0x50000300
 800265c:	50000700 	.word	0x50000700
 8002660:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10c      	bne.n	8002696 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f023 010f 	bic.w	r1, r3, #15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
 8002694:	e007      	b.n	80026a6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 020f 	bic.w	r2, r2, #15
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop

080026d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e8:	d004      	beq.n	80026f4 <HAL_ADC_Start_DMA+0x20>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002858 <HAL_ADC_Start_DMA+0x184>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_Start_DMA+0x24>
 80026f4:	4b59      	ldr	r3, [pc, #356]	@ (800285c <HAL_ADC_Start_DMA+0x188>)
 80026f6:	e000      	b.n	80026fa <HAL_ADC_Start_DMA+0x26>
 80026f8:	4b59      	ldr	r3, [pc, #356]	@ (8002860 <HAL_ADC_Start_DMA+0x18c>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fd62 	bl	80021c4 <LL_ADC_GetMultimode>
 8002700:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fe01 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 809b 	bne.w	800284a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Start_DMA+0x4e>
 800271e:	2302      	movs	r3, #2
 8002720:	e096      	b.n	8002850 <HAL_ADC_Start_DMA+0x17c>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a4d      	ldr	r2, [pc, #308]	@ (8002864 <HAL_ADC_Start_DMA+0x190>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d008      	beq.n	8002746 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d002      	beq.n	8002746 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b09      	cmp	r3, #9
 8002744:	d17a      	bne.n	800283c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 ff60 	bl	800360c <ADC_Enable>
 800274c:	4603      	mov	r3, r0
 800274e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d16d      	bne.n	8002832 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3a      	ldr	r2, [pc, #232]	@ (8002858 <HAL_ADC_Start_DMA+0x184>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d009      	beq.n	8002788 <HAL_ADC_Start_DMA+0xb4>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3b      	ldr	r2, [pc, #236]	@ (8002868 <HAL_ADC_Start_DMA+0x194>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d002      	beq.n	8002784 <HAL_ADC_Start_DMA+0xb0>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e003      	b.n	800278c <HAL_ADC_Start_DMA+0xb8>
 8002784:	4b39      	ldr	r3, [pc, #228]	@ (800286c <HAL_ADC_Start_DMA+0x198>)
 8002786:	e001      	b.n	800278c <HAL_ADC_Start_DMA+0xb8>
 8002788:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4293      	cmp	r3, r2
 8002792:	d002      	beq.n	800279a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b6:	f023 0206 	bic.w	r2, r3, #6
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80027be:	e002      	b.n	80027c6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	4a29      	ldr	r2, [pc, #164]	@ (8002870 <HAL_ADC_Start_DMA+0x19c>)
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <HAL_ADC_Start_DMA+0x1a0>)
 80027d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027da:	4a27      	ldr	r2, [pc, #156]	@ (8002878 <HAL_ADC_Start_DMA+0x1a4>)
 80027dc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	221c      	movs	r2, #28
 80027e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0210 	orr.w	r2, r2, #16
 80027fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3340      	adds	r3, #64	@ 0x40
 8002818:	4619      	mov	r1, r3
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f001 fb37 	bl	8003e90 <HAL_DMA_Start_IT>
 8002822:	4603      	mov	r3, r0
 8002824:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fd5b 	bl	80022e6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002830:	e00d      	b.n	800284e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800283a:	e008      	b.n	800284e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002848:	e001      	b.n	800284e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	50000100 	.word	0x50000100
 800285c:	50000300 	.word	0x50000300
 8002860:	50000700 	.word	0x50000700
 8002864:	50000600 	.word	0x50000600
 8002868:	50000500 	.word	0x50000500
 800286c:	50000400 	.word	0x50000400
 8002870:	08003739 	.word	0x08003739
 8002874:	08003811 	.word	0x08003811
 8002878:	0800382d 	.word	0x0800382d

0800287c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028a0:	d004      	beq.n	80028ac <HAL_ADC_IRQHandler+0x30>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a8e      	ldr	r2, [pc, #568]	@ (8002ae0 <HAL_ADC_IRQHandler+0x264>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_IRQHandler+0x34>
 80028ac:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae4 <HAL_ADC_IRQHandler+0x268>)
 80028ae:	e000      	b.n	80028b2 <HAL_ADC_IRQHandler+0x36>
 80028b0:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae8 <HAL_ADC_IRQHandler+0x26c>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fc86 	bl	80021c4 <LL_ADC_GetMultimode>
 80028b8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x78>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d012      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f001 f808 	bl	80038fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_IRQHandler+0x8c>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8094 	beq.w	8002a3c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 808e 	beq.w	8002a3c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb9f 	bl	8002080 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d072      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a64      	ldr	r2, [pc, #400]	@ (8002ae0 <HAL_ADC_IRQHandler+0x264>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_ADC_IRQHandler+0xea>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a65      	ldr	r2, [pc, #404]	@ (8002aec <HAL_ADC_IRQHandler+0x270>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d002      	beq.n	8002962 <HAL_ADC_IRQHandler+0xe6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	e003      	b.n	800296a <HAL_ADC_IRQHandler+0xee>
 8002962:	4b63      	ldr	r3, [pc, #396]	@ (8002af0 <HAL_ADC_IRQHandler+0x274>)
 8002964:	e001      	b.n	800296a <HAL_ADC_IRQHandler+0xee>
 8002966:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	4293      	cmp	r3, r2
 8002970:	d008      	beq.n	8002984 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d002      	beq.n	8002984 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b09      	cmp	r3, #9
 8002982:	d104      	bne.n	800298e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	e014      	b.n	80029b8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a53      	ldr	r2, [pc, #332]	@ (8002ae0 <HAL_ADC_IRQHandler+0x264>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_ADC_IRQHandler+0x130>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a53      	ldr	r2, [pc, #332]	@ (8002aec <HAL_ADC_IRQHandler+0x270>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d002      	beq.n	80029a8 <HAL_ADC_IRQHandler+0x12c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e003      	b.n	80029b0 <HAL_ADC_IRQHandler+0x134>
 80029a8:	4b51      	ldr	r3, [pc, #324]	@ (8002af0 <HAL_ADC_IRQHandler+0x274>)
 80029aa:	e001      	b.n	80029b0 <HAL_ADC_IRQHandler+0x134>
 80029ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029b0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d135      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d12e      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fc9a 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d11a      	bne.n	8002a16 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 020c 	bic.w	r2, r2, #12
 80029ee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d112      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a14:	e00b      	b.n	8002a2e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f984 	bl	8002d3c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	220c      	movs	r2, #12
 8002a3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x1d4>
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80b3 	beq.w	8002bc2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80ad 	beq.w	8002bc2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fb3a 	bl	80020fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a8a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff faf5 	bl	8002080 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a96:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a10      	ldr	r2, [pc, #64]	@ (8002ae0 <HAL_ADC_IRQHandler+0x264>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x23a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_ADC_IRQHandler+0x270>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ADC_IRQHandler+0x236>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e003      	b.n	8002aba <HAL_ADC_IRQHandler+0x23e>
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_ADC_IRQHandler+0x274>)
 8002ab4:	e001      	b.n	8002aba <HAL_ADC_IRQHandler+0x23e>
 8002ab6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d008      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d002      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b07      	cmp	r3, #7
 8002ad2:	d10f      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	e01f      	b.n	8002b1e <HAL_ADC_IRQHandler+0x2a2>
 8002ade:	bf00      	nop
 8002ae0:	50000100 	.word	0x50000100
 8002ae4:	50000300 	.word	0x50000300
 8002ae8:	50000700 	.word	0x50000700
 8002aec:	50000500 	.word	0x50000500
 8002af0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a8b      	ldr	r2, [pc, #556]	@ (8002d28 <HAL_ADC_IRQHandler+0x4ac>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x296>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a8a      	ldr	r2, [pc, #552]	@ (8002d2c <HAL_ADC_IRQHandler+0x4b0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d002      	beq.n	8002b0e <HAL_ADC_IRQHandler+0x292>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	e003      	b.n	8002b16 <HAL_ADC_IRQHandler+0x29a>
 8002b0e:	4b88      	ldr	r3, [pc, #544]	@ (8002d30 <HAL_ADC_IRQHandler+0x4b4>)
 8002b10:	e001      	b.n	8002b16 <HAL_ADC_IRQHandler+0x29a>
 8002b12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b16:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d047      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_ADC_IRQHandler+0x2c2>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d03f      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d13a      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b40      	cmp	r3, #64	@ 0x40
 8002b4a:	d133      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d12e      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fbea 	bl	8002334 <LL_ADC_INJ_IsConversionOngoing>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11a      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b74:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d112      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b9a:	e00b      	b.n	8002bb4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	f043 0210 	orr.w	r2, r3, #16
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fe79 	bl	80038ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2260      	movs	r2, #96	@ 0x60
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d011      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x374>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8be 	bl	8002d64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2280      	movs	r2, #128	@ 0x80
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x3a4>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00d      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fe5f 	bl	80038d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x3d4>
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fe51 	bl	80038e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d043      	beq.n	8002ce2 <HAL_ADC_IRQHandler+0x466>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03e      	beq.n	8002ce2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c70:	e021      	b.n	8002cb6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c80:	d004      	beq.n	8002c8c <HAL_ADC_IRQHandler+0x410>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a28      	ldr	r2, [pc, #160]	@ (8002d28 <HAL_ADC_IRQHandler+0x4ac>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x414>
 8002c8c:	4b29      	ldr	r3, [pc, #164]	@ (8002d34 <HAL_ADC_IRQHandler+0x4b8>)
 8002c8e:	e000      	b.n	8002c92 <HAL_ADC_IRQHandler+0x416>
 8002c90:	4b29      	ldr	r3, [pc, #164]	@ (8002d38 <HAL_ADC_IRQHandler+0x4bc>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff faa4 	bl	80021e0 <LL_ADC_GetMultiDMATransfer>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca2:	e008      	b.n	8002cb6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10e      	bne.n	8002cda <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ccc:	f043 0202 	orr.w	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f84f 	bl	8002d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d018      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x4a2>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d013      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d06:	f043 0208 	orr.w	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d16:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fdd1 	bl	80038c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d1e:	bf00      	nop
 8002d20:	3728      	adds	r7, #40	@ 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	50000100 	.word	0x50000100
 8002d2c:	50000500 	.word	0x50000500
 8002d30:	50000400 	.word	0x50000400
 8002d34:	50000300 	.word	0x50000300
 8002d38:	50000700 	.word	0x50000700

08002d3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b0b6      	sub	sp, #216	@ 0xd8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x24>
 8002daa:	2302      	movs	r3, #2
 8002dac:	f000 bc13 	b.w	80035d6 <HAL_ADC_ConfigChannel+0x84a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff faa6 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 83f3 	bne.w	80035b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7ff f965 	bl	80020a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fa94 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002de6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff faa0 	bl	8002334 <LL_ADC_INJ_IsConversionOngoing>
 8002df4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 81d9 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 81d4 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e14:	d10f      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7ff f97f 	bl	8002124 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f913 	bl	800205a <LL_ADC_SetSamplingTimeCommonConfig>
 8002e34:	e00e      	b.n	8002e54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f7ff f96e 	bl	8002124 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f903 	bl	800205a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	08db      	lsrs	r3, r3, #3
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d022      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e86:	f7ff f85d 	bl	8001f44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6919      	ldr	r1, [r3, #16]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f7ff f8a9 	bl	8001fee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x126>
 8002eac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb0:	e000      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x128>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f7ff f8b5 	bl	8002024 <LL_ADC_SetOffsetSaturation>
 8002eba:	e17b      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f862 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x15c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f857 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	f003 021f 	and.w	r2, r3, #31
 8002ee6:	e01e      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x19a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f84c 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	e004      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x1b2>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0e9b      	lsrs	r3, r3, #26
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	e018      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1e4>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e004      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d106      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f81b 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe ffff 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x222>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fff4 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	0e9b      	lsrs	r3, r3, #26
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	e01e      	b.n	8002fec <HAL_ADC_ConfigChannel+0x260>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe ffe9 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e004      	b.n	8002fea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x278>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	e018      	b.n	8003036 <HAL_ADC_ConfigChannel+0x2aa>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003018:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800301c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e004      	b.n	8003036 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800302c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003036:	429a      	cmp	r2, r3
 8003038:	d106      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe ffb8 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe ff9c 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x2e8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2102      	movs	r1, #2
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe ff91 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	e01e      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x326>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2102      	movs	r1, #2
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ff86 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003092:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800309a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e004      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80030a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x33e>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	e016      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x36c>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e004      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80030ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d106      	bne.n	800310a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2200      	movs	r2, #0
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe ff57 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2103      	movs	r1, #3
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe ff3b 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8003116:	4603      	mov	r3, r0
 8003118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x3aa>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2103      	movs	r1, #3
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe ff30 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 800312c:	4603      	mov	r3, r0
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	e017      	b.n	8003166 <HAL_ADC_ConfigChannel+0x3da>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2103      	movs	r1, #3
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe ff25 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800314e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003150:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800315c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_ADC_ConfigChannel+0x3f2>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	e011      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x416>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800318c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800318e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e003      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800319a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d106      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	2103      	movs	r1, #3
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe ff02 	bl	8001fb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f881 	bl	80022c0 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 813d 	bne.w	8003440 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fe ffd2 	bl	800217c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4aa2      	ldr	r2, [pc, #648]	@ (8003468 <HAL_ADC_ConfigChannel+0x6dc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	f040 812e 	bne.w	8003440 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_ADC_ConfigChannel+0x480>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	3301      	adds	r3, #1
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2b09      	cmp	r3, #9
 8003202:	bf94      	ite	ls
 8003204:	2301      	movls	r3, #1
 8003206:	2300      	movhi	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e019      	b.n	8003240 <HAL_ADC_ConfigChannel+0x4b4>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800321a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800321c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800321e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e003      	b.n	8003230 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2b09      	cmp	r3, #9
 8003238:	bf94      	ite	ls
 800323a:	2301      	movls	r3, #1
 800323c:	2300      	movhi	r3, #0
 800323e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003240:	2b00      	cmp	r3, #0
 8003242:	d079      	beq.n	8003338 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x4d4>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0e9b      	lsrs	r3, r3, #26
 8003256:	3301      	adds	r3, #1
 8003258:	069b      	lsls	r3, r3, #26
 800325a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800325e:	e015      	b.n	800328c <HAL_ADC_ConfigChannel+0x500>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800326e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003270:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800327c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3301      	adds	r3, #1
 8003286:	069b      	lsls	r3, r3, #26
 8003288:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x520>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0e9b      	lsrs	r3, r3, #26
 800329e:	3301      	adds	r3, #1
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	e017      	b.n	80032dc <HAL_ADC_ConfigChannel+0x550>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80032c4:	2320      	movs	r3, #32
 80032c6:	e003      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80032c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	3301      	adds	r3, #1
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	ea42 0103 	orr.w	r1, r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x576>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0e9b      	lsrs	r3, r3, #26
 80032f2:	3301      	adds	r3, #1
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	051b      	lsls	r3, r3, #20
 8003300:	e018      	b.n	8003334 <HAL_ADC_ConfigChannel+0x5a8>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e003      	b.n	8003326 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800331e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003334:	430b      	orrs	r3, r1
 8003336:	e07e      	b.n	8003436 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x5c8>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0e9b      	lsrs	r3, r3, #26
 800334a:	3301      	adds	r3, #1
 800334c:	069b      	lsls	r3, r3, #26
 800334e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003352:	e015      	b.n	8003380 <HAL_ADC_ConfigChannel+0x5f4>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	069b      	lsls	r3, r3, #26
 800337c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x614>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	3301      	adds	r3, #1
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	e017      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x644>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	61fb      	str	r3, [r7, #28]
  return result;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e003      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	ea42 0103 	orr.w	r1, r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x670>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	3301      	adds	r3, #1
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	3b1e      	subs	r3, #30
 80033f4:	051b      	lsls	r3, r3, #20
 80033f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033fa:	e01b      	b.n	8003434 <HAL_ADC_ConfigChannel+0x6a8>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	613b      	str	r3, [r7, #16]
  return result;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003414:	2320      	movs	r3, #32
 8003416:	e003      	b.n	8003420 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3301      	adds	r3, #1
 8003422:	f003 021f 	and.w	r2, r3, #31
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	3b1e      	subs	r3, #30
 800342e:	051b      	lsls	r3, r3, #20
 8003430:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003434:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343a:	4619      	mov	r1, r3
 800343c:	f7fe fe72 	bl	8002124 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b09      	ldr	r3, [pc, #36]	@ (800346c <HAL_ADC_ConfigChannel+0x6e0>)
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80be 	beq.w	80035ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003456:	d004      	beq.n	8003462 <HAL_ADC_ConfigChannel+0x6d6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a04      	ldr	r2, [pc, #16]	@ (8003470 <HAL_ADC_ConfigChannel+0x6e4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10a      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x6ec>
 8003462:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <HAL_ADC_ConfigChannel+0x6e8>)
 8003464:	e009      	b.n	800347a <HAL_ADC_ConfigChannel+0x6ee>
 8003466:	bf00      	nop
 8003468:	407f0000 	.word	0x407f0000
 800346c:	80080000 	.word	0x80080000
 8003470:	50000100 	.word	0x50000100
 8003474:	50000300 	.word	0x50000300
 8003478:	4b59      	ldr	r3, [pc, #356]	@ (80035e0 <HAL_ADC_ConfigChannel+0x854>)
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fd54 	bl	8001f28 <LL_ADC_GetCommonPathInternalCh>
 8003480:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a56      	ldr	r2, [pc, #344]	@ (80035e4 <HAL_ADC_ConfigChannel+0x858>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_ADC_ConfigChannel+0x70c>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a55      	ldr	r2, [pc, #340]	@ (80035e8 <HAL_ADC_ConfigChannel+0x85c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d13a      	bne.n	800350e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d134      	bne.n	800350e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ac:	d005      	beq.n	80034ba <HAL_ADC_ConfigChannel+0x72e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a4e      	ldr	r2, [pc, #312]	@ (80035ec <HAL_ADC_ConfigChannel+0x860>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	f040 8085 	bne.w	80035c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x742>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a49      	ldr	r2, [pc, #292]	@ (80035f0 <HAL_ADC_ConfigChannel+0x864>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x746>
 80034ce:	4a49      	ldr	r2, [pc, #292]	@ (80035f4 <HAL_ADC_ConfigChannel+0x868>)
 80034d0:	e000      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x748>
 80034d2:	4a43      	ldr	r2, [pc, #268]	@ (80035e0 <HAL_ADC_ConfigChannel+0x854>)
 80034d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f7fe fd0f 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034e4:	4b44      	ldr	r3, [pc, #272]	@ (80035f8 <HAL_ADC_ConfigChannel+0x86c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	4a44      	ldr	r2, [pc, #272]	@ (80035fc <HAL_ADC_ConfigChannel+0x870>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034fe:	e002      	b.n	8003506 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f9      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800350c:	e05a      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a3b      	ldr	r2, [pc, #236]	@ (8003600 <HAL_ADC_ConfigChannel+0x874>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d125      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800351c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11f      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_ADC_ConfigChannel+0x864>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d104      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x7ac>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a34      	ldr	r2, [pc, #208]	@ (8003604 <HAL_ADC_ConfigChannel+0x878>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d047      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003540:	d004      	beq.n	800354c <HAL_ADC_ConfigChannel+0x7c0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <HAL_ADC_ConfigChannel+0x864>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x7c4>
 800354c:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <HAL_ADC_ConfigChannel+0x868>)
 800354e:	e000      	b.n	8003552 <HAL_ADC_ConfigChannel+0x7c6>
 8003550:	4a23      	ldr	r2, [pc, #140]	@ (80035e0 <HAL_ADC_ConfigChannel+0x854>)
 8003552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fe fcd0 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003562:	e031      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a27      	ldr	r2, [pc, #156]	@ (8003608 <HAL_ADC_ConfigChannel+0x87c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12d      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800356e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d127      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <HAL_ADC_ConfigChannel+0x864>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800358c:	d004      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x80c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a17      	ldr	r2, [pc, #92]	@ (80035f0 <HAL_ADC_ConfigChannel+0x864>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x810>
 8003598:	4a16      	ldr	r2, [pc, #88]	@ (80035f4 <HAL_ADC_ConfigChannel+0x868>)
 800359a:	e000      	b.n	800359e <HAL_ADC_ConfigChannel+0x812>
 800359c:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <HAL_ADC_ConfigChannel+0x854>)
 800359e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f7fe fcaa 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
 80035ae:	e00c      	b.n	80035ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80035c2:	e002      	b.n	80035ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	37d8      	adds	r7, #216	@ 0xd8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	50000700 	.word	0x50000700
 80035e4:	c3210000 	.word	0xc3210000
 80035e8:	90c00010 	.word	0x90c00010
 80035ec:	50000600 	.word	0x50000600
 80035f0:	50000100 	.word	0x50000100
 80035f4:	50000300 	.word	0x50000300
 80035f8:	20000008 	.word	0x20000008
 80035fc:	053e2d63 	.word	0x053e2d63
 8003600:	c7520000 	.word	0xc7520000
 8003604:	50000500 	.word	0x50000500
 8003608:	cb840000 	.word	0xcb840000

0800360c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fe4f 	bl	80022c0 <LL_ADC_IsEnabled>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d176      	bne.n	8003716 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	4b3c      	ldr	r3, [pc, #240]	@ (8003720 <ADC_Enable+0x114>)
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	f043 0210 	orr.w	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e062      	b.n	8003718 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fe1e 	bl	8002298 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003664:	d004      	beq.n	8003670 <ADC_Enable+0x64>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2e      	ldr	r2, [pc, #184]	@ (8003724 <ADC_Enable+0x118>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <ADC_Enable+0x68>
 8003670:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <ADC_Enable+0x11c>)
 8003672:	e000      	b.n	8003676 <ADC_Enable+0x6a>
 8003674:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <ADC_Enable+0x120>)
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fc56 	bl	8001f28 <LL_ADC_GetCommonPathInternalCh>
 800367c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800367e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003682:	2b00      	cmp	r3, #0
 8003684:	d013      	beq.n	80036ae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003686:	4b2a      	ldr	r3, [pc, #168]	@ (8003730 <ADC_Enable+0x124>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	4a29      	ldr	r2, [pc, #164]	@ (8003734 <ADC_Enable+0x128>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036a0:	e002      	b.n	80036a8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f9      	bne.n	80036a2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036ae:	f7fe fc09 	bl	8001ec4 <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036b4:	e028      	b.n	8003708 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fe00 	bl	80022c0 <LL_ADC_IsEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fde4 	bl	8002298 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036d0:	f7fe fbf8 	bl	8001ec4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d914      	bls.n	8003708 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d00d      	beq.n	8003708 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f0:	f043 0210 	orr.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d1cf      	bne.n	80036b6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	8000003f 	.word	0x8000003f
 8003724:	50000100 	.word	0x50000100
 8003728:	50000300 	.word	0x50000300
 800372c:	50000700 	.word	0x50000700
 8003730:	20000008 	.word	0x20000008
 8003734:	053e2d63 	.word	0x053e2d63

08003738 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	d14b      	bne.n	80037ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d021      	beq.n	80037b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fc85 	bl	8002080 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d032      	beq.n	80037e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d12b      	bne.n	80037e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d11f      	bne.n	80037e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037ae:	e018      	b.n	80037e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d111      	bne.n	80037e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff faaa 	bl	8002d3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037e8:	e00e      	b.n	8003808 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff fabe 	bl	8002d78 <HAL_ADC_ErrorCallback>
}
 80037fc:	e004      	b.n	8003808 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff fa96 	bl	8002d50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003838:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	f043 0204 	orr.w	r2, r3, #4
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff fa90 	bl	8002d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <LL_ADC_IsEnabled>:
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <LL_ADC_IsEnabled+0x18>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <LL_ADC_IsEnabled+0x1a>
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_ADC_REG_IsConversionOngoing>:
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d101      	bne.n	800389e <LL_ADC_REG_IsConversionOngoing+0x18>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b0a1      	sub	sp, #132	@ 0x84
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800392a:	2302      	movs	r3, #2
 800392c:	e0e7      	b.n	8003afe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003936:	2300      	movs	r3, #0
 8003938:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800393a:	2300      	movs	r3, #0
 800393c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003946:	d102      	bne.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003948:	4b6f      	ldr	r3, [pc, #444]	@ (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	e009      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6e      	ldr	r2, [pc, #440]	@ (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d102      	bne.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003958:	4b6d      	ldr	r3, [pc, #436]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	e001      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0be      	b.n	8003afe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff ff7f 	bl	8003886 <LL_ADC_REG_IsConversionOngoing>
 8003988:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff79 	bl	8003886 <LL_ADC_REG_IsConversionOngoing>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80a0 	bne.w	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800399c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 809c 	bne.w	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ac:	d004      	beq.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a55      	ldr	r2, [pc, #340]	@ (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80039b8:	4b56      	ldr	r3, [pc, #344]	@ (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80039ba:	e000      	b.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80039bc:	4b56      	ldr	r3, [pc, #344]	@ (8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80039be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d04b      	beq.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80039c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039da:	035b      	lsls	r3, r3, #13
 80039dc:	430b      	orrs	r3, r1
 80039de:	431a      	orrs	r2, r3
 80039e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ec:	d004      	beq.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a45      	ldr	r2, [pc, #276]	@ (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10f      	bne.n	8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80039f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039fc:	f7ff ff30 	bl	8003860 <LL_ADC_IsEnabled>
 8003a00:	4604      	mov	r4, r0
 8003a02:	4841      	ldr	r0, [pc, #260]	@ (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a04:	f7ff ff2c 	bl	8003860 <LL_ADC_IsEnabled>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4323      	orrs	r3, r4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e012      	b.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a18:	483c      	ldr	r0, [pc, #240]	@ (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a1a:	f7ff ff21 	bl	8003860 <LL_ADC_IsEnabled>
 8003a1e:	4604      	mov	r4, r0
 8003a20:	483b      	ldr	r0, [pc, #236]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a22:	f7ff ff1d 	bl	8003860 <LL_ADC_IsEnabled>
 8003a26:	4603      	mov	r3, r0
 8003a28:	431c      	orrs	r4, r3
 8003a2a:	483c      	ldr	r0, [pc, #240]	@ (8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a2c:	f7ff ff18 	bl	8003860 <LL_ADC_IsEnabled>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4323      	orrs	r3, r4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d056      	beq.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a4a:	f023 030f 	bic.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	6811      	ldr	r1, [r2, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	6892      	ldr	r2, [r2, #8]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a5c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5e:	e047      	b.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a74:	d004      	beq.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a23      	ldr	r2, [pc, #140]	@ (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a84:	f7ff feec 	bl	8003860 <LL_ADC_IsEnabled>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	481f      	ldr	r0, [pc, #124]	@ (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a8c:	f7ff fee8 	bl	8003860 <LL_ADC_IsEnabled>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4323      	orrs	r3, r4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e012      	b.n	8003ac6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003aa0:	481a      	ldr	r0, [pc, #104]	@ (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003aa2:	f7ff fedd 	bl	8003860 <LL_ADC_IsEnabled>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4819      	ldr	r0, [pc, #100]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003aaa:	f7ff fed9 	bl	8003860 <LL_ADC_IsEnabled>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	431c      	orrs	r4, r3
 8003ab2:	481a      	ldr	r0, [pc, #104]	@ (8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ab4:	f7ff fed4 	bl	8003860 <LL_ADC_IsEnabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4323      	orrs	r3, r4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d012      	beq.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ad2:	f023 030f 	bic.w	r3, r3, #15
 8003ad6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003ad8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ada:	e009      	b.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003aee:	e000      	b.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003af0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003afa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3784      	adds	r7, #132	@ 0x84
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd90      	pop	{r4, r7, pc}
 8003b06:	bf00      	nop
 8003b08:	50000100 	.word	0x50000100
 8003b0c:	50000400 	.word	0x50000400
 8003b10:	50000500 	.word	0x50000500
 8003b14:	50000300 	.word	0x50000300
 8003b18:	50000700 	.word	0x50000700
 8003b1c:	50000600 	.word	0x50000600

08003b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b52:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	60d3      	str	r3, [r2, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4907      	ldr	r1, [pc, #28]	@ (8003bbc <__NVIC_EnableIRQ+0x38>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	@ (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
         );
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c8c:	d301      	bcc.n	8003c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00f      	b.n	8003cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c92:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <SysTick_Config+0x40>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9a:	210f      	movs	r1, #15
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ca0:	f7ff ff8e 	bl	8003bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca4:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <SysTick_Config+0x40>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003caa:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <SysTick_Config+0x40>)
 8003cac:	2207      	movs	r2, #7
 8003cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff29 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce4:	f7ff ff40 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ff90 	bl	8003c14 <NVIC_EncodePriority>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff5f 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	4603      	mov	r3, r0
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff33 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ffa4 	bl	8003c7c <SysTick_Config>
 8003d34:	4603      	mov	r3, r0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e08d      	b.n	8003e6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b47      	ldr	r3, [pc, #284]	@ (8003e78 <HAL_DMA_Init+0x138>)
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d80f      	bhi.n	8003d7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b45      	ldr	r3, [pc, #276]	@ (8003e7c <HAL_DMA_Init+0x13c>)
 8003d66:	4413      	add	r3, r2
 8003d68:	4a45      	ldr	r2, [pc, #276]	@ (8003e80 <HAL_DMA_Init+0x140>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	009a      	lsls	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a42      	ldr	r2, [pc, #264]	@ (8003e84 <HAL_DMA_Init+0x144>)
 8003d7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d7c:	e00e      	b.n	8003d9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b40      	ldr	r3, [pc, #256]	@ (8003e88 <HAL_DMA_Init+0x148>)
 8003d86:	4413      	add	r3, r2
 8003d88:	4a3d      	ldr	r2, [pc, #244]	@ (8003e80 <HAL_DMA_Init+0x140>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	009a      	lsls	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a3c      	ldr	r2, [pc, #240]	@ (8003e8c <HAL_DMA_Init+0x14c>)
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa82 	bl	80042f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dfc:	d102      	bne.n	8003e04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d010      	beq.n	8003e44 <HAL_DMA_Init+0x104>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d80c      	bhi.n	8003e44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 faa2 	bl	8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e008      	b.n	8003e56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40020407 	.word	0x40020407
 8003e7c:	bffdfff8 	.word	0xbffdfff8
 8003e80:	cccccccd 	.word	0xcccccccd
 8003e84:	40020000 	.word	0x40020000
 8003e88:	bffdfbf8 	.word	0xbffdfbf8
 8003e8c:	40020400 	.word	0x40020400

08003e90 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_DMA_Start_IT+0x20>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e066      	b.n	8003f7e <HAL_DMA_Start_IT+0xee>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d155      	bne.n	8003f70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f9c7 	bl	800427c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 020e 	orr.w	r2, r2, #14
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e00f      	b.n	8003f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 020a 	orr.w	r2, r2, #10
 8003f26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0201 	orr.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e005      	b.n	8003f7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d005      	beq.n	8003faa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	e037      	b.n	800401a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 020e 	bic.w	r2, r2, #14
 8003fb8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fc8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f003 021f 	and.w	r2, r3, #31
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ff6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800400e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004018:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d00d      	beq.n	800406c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2204      	movs	r2, #4
 8004054:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e047      	b.n	80040fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 020e 	bic.w	r2, r2, #14
 800407a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800409a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a0:	f003 021f 	and.w	r2, r3, #31
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f202 	lsl.w	r2, r1, r2
 80040ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00c      	beq.n	80040dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
    }
  }
  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2204      	movs	r2, #4
 8004128:	409a      	lsls	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d026      	beq.n	8004180 <HAL_DMA_IRQHandler+0x7a>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d021      	beq.n	8004180 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d107      	bne.n	800415a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0204 	bic.w	r2, r2, #4
 8004158:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	f003 021f 	and.w	r2, r3, #31
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	2104      	movs	r1, #4
 8004168:	fa01 f202 	lsl.w	r2, r1, r2
 800416c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	2b00      	cmp	r3, #0
 8004174:	d071      	beq.n	800425a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800417e:	e06c      	b.n	800425a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2202      	movs	r2, #2
 800418a:	409a      	lsls	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02e      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d029      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020a 	bic.w	r2, r2, #10
 80041ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c8:	f003 021f 	and.w	r2, r3, #31
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	2102      	movs	r1, #2
 80041d2:	fa01 f202 	lsl.w	r2, r1, r2
 80041d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d038      	beq.n	800425a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041f0:	e033      	b.n	800425a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2208      	movs	r2, #8
 80041fc:	409a      	lsls	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d02a      	beq.n	800425c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d025      	beq.n	800425c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f202 	lsl.w	r2, r1, r2
 8004232:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800425a:	bf00      	nop
 800425c:	bf00      	nop
}
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004292:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f003 021f 	and.w	r2, r3, #31
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
 80042b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d108      	bne.n	80042dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042da:	e007      	b.n	80042ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	4b16      	ldr	r3, [pc, #88]	@ (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d802      	bhi.n	8004312 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800430c:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e001      	b.n	8004316 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004314:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3b08      	subs	r3, #8
 8004322:	4a12      	ldr	r2, [pc, #72]	@ (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	009a      	lsls	r2, r3, #2
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	461a      	mov	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a0b      	ldr	r2, [pc, #44]	@ (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004342:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2201      	movs	r2, #1
 800434c:	409a      	lsls	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40020407 	.word	0x40020407
 8004364:	40020800 	.word	0x40020800
 8004368:	40020820 	.word	0x40020820
 800436c:	cccccccd 	.word	0xcccccccd
 8004370:	40020880 	.word	0x40020880

08004374 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	461a      	mov	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a08      	ldr	r2, [pc, #32]	@ (80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004396:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3b01      	subs	r3, #1
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2201      	movs	r2, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	1000823f 	.word	0x1000823f
 80043b8:	40020940 	.word	0x40020940

080043bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043ca:	e15a      	b.n	8004682 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2101      	movs	r1, #1
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 814c 	beq.w	800467c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d005      	beq.n	80043fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d130      	bne.n	800445e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004432:	2201      	movs	r2, #1
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	f003 0201 	and.w	r2, r3, #1
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d017      	beq.n	800449a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	2203      	movs	r2, #3
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4013      	ands	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d123      	bne.n	80044ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	08da      	lsrs	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3208      	adds	r2, #8
 80044ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	220f      	movs	r2, #15
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	08da      	lsrs	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3208      	adds	r2, #8
 80044e8:	6939      	ldr	r1, [r7, #16]
 80044ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0203 	and.w	r2, r3, #3
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a6 	beq.w	800467c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004530:	4b5b      	ldr	r3, [pc, #364]	@ (80046a0 <HAL_GPIO_Init+0x2e4>)
 8004532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004534:	4a5a      	ldr	r2, [pc, #360]	@ (80046a0 <HAL_GPIO_Init+0x2e4>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6613      	str	r3, [r2, #96]	@ 0x60
 800453c:	4b58      	ldr	r3, [pc, #352]	@ (80046a0 <HAL_GPIO_Init+0x2e4>)
 800453e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004548:	4a56      	ldr	r2, [pc, #344]	@ (80046a4 <HAL_GPIO_Init+0x2e8>)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	3302      	adds	r3, #2
 8004550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	220f      	movs	r2, #15
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004572:	d01f      	beq.n	80045b4 <HAL_GPIO_Init+0x1f8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a4c      	ldr	r2, [pc, #304]	@ (80046a8 <HAL_GPIO_Init+0x2ec>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d019      	beq.n	80045b0 <HAL_GPIO_Init+0x1f4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a4b      	ldr	r2, [pc, #300]	@ (80046ac <HAL_GPIO_Init+0x2f0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_GPIO_Init+0x1f0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a4a      	ldr	r2, [pc, #296]	@ (80046b0 <HAL_GPIO_Init+0x2f4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00d      	beq.n	80045a8 <HAL_GPIO_Init+0x1ec>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a49      	ldr	r2, [pc, #292]	@ (80046b4 <HAL_GPIO_Init+0x2f8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d007      	beq.n	80045a4 <HAL_GPIO_Init+0x1e8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a48      	ldr	r2, [pc, #288]	@ (80046b8 <HAL_GPIO_Init+0x2fc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_GPIO_Init+0x1e4>
 800459c:	2305      	movs	r3, #5
 800459e:	e00a      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045a0:	2306      	movs	r3, #6
 80045a2:	e008      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045a4:	2304      	movs	r3, #4
 80045a6:	e006      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045a8:	2303      	movs	r3, #3
 80045aa:	e004      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e002      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_GPIO_Init+0x1fa>
 80045b4:	2300      	movs	r3, #0
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	f002 0203 	and.w	r2, r2, #3
 80045bc:	0092      	lsls	r2, r2, #2
 80045be:	4093      	lsls	r3, r2
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045c6:	4937      	ldr	r1, [pc, #220]	@ (80046a4 <HAL_GPIO_Init+0x2e8>)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	3302      	adds	r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045d4:	4b39      	ldr	r3, [pc, #228]	@ (80046bc <HAL_GPIO_Init+0x300>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	43db      	mvns	r3, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045f8:	4a30      	ldr	r2, [pc, #192]	@ (80046bc <HAL_GPIO_Init+0x300>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045fe:	4b2f      	ldr	r3, [pc, #188]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004622:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004628:	4b24      	ldr	r3, [pc, #144]	@ (80046bc <HAL_GPIO_Init+0x300>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <HAL_GPIO_Init+0x300>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004652:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004676:	4a11      	ldr	r2, [pc, #68]	@ (80046bc <HAL_GPIO_Init+0x300>)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f ae9d 	bne.w	80043cc <HAL_GPIO_Init+0x10>
  }
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40010000 	.word	0x40010000
 80046a8:	48000400 	.word	0x48000400
 80046ac:	48000800 	.word	0x48000800
 80046b0:	48000c00 	.word	0x48000c00
 80046b4:	48001000 	.word	0x48001000
 80046b8:	48001400 	.word	0x48001400
 80046bc:	40010400 	.word	0x40010400

080046c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	887b      	ldrh	r3, [r7, #2]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e001      	b.n	80046e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
 80046fc:	4613      	mov	r3, r2
 80046fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004700:	787b      	ldrb	r3, [r7, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800470c:	e002      	b.n	8004714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800472a:	4b08      	ldr	r3, [pc, #32]	@ (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004736:	4a05      	ldr	r2, [pc, #20]	@ (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f806 	bl	8004750 <HAL_GPIO_EXTI_Callback>
  }
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40010400 	.word	0x40010400

08004750 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e041      	b.n	80047fc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004780:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f245 5255 	movw	r2, #21845	@ 0x5555
 800478a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6852      	ldr	r2, [r2, #4]
 8004794:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6892      	ldr	r2, [r2, #8]
 800479e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80047a0:	f7fd fb90 	bl	8001ec4 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047a6:	e00f      	b.n	80047c8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80047a8:	f7fd fb8c 	bl	8001ec4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b31      	cmp	r3, #49	@ 0x31
 80047b4:	d908      	bls.n	80047c8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e019      	b.n	80047fc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e8      	bne.n	80047a8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d005      	beq.n	80047f0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	68d2      	ldr	r2, [r2, #12]
 80047ec:	611a      	str	r2, [r3, #16]
 80047ee:	e004      	b.n	80047fa <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004814:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d141      	bne.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004832:	4b4b      	ldr	r3, [pc, #300]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d131      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004840:	4b47      	ldr	r3, [pc, #284]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004846:	4a46      	ldr	r2, [pc, #280]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800484c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004850:	4b43      	ldr	r3, [pc, #268]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004858:	4a41      	ldr	r2, [pc, #260]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800485e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004860:	4b40      	ldr	r3, [pc, #256]	@ (8004964 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2232      	movs	r2, #50	@ 0x32
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	4a3f      	ldr	r2, [pc, #252]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	0c9b      	lsrs	r3, r3, #18
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004876:	e002      	b.n	800487e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3b01      	subs	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800487e:	4b38      	ldr	r3, [pc, #224]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800488a:	d102      	bne.n	8004892 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f2      	bne.n	8004878 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004892:	4b33      	ldr	r3, [pc, #204]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489e:	d158      	bne.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e057      	b.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048b4:	e04d      	b.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048bc:	d141      	bne.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048be:	4b28      	ldr	r3, [pc, #160]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ca:	d131      	bne.n	8004930 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048cc:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d2:	4a23      	ldr	r2, [pc, #140]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048dc:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004964 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2232      	movs	r2, #50	@ 0x32
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	0c9b      	lsrs	r3, r3, #18
 80048fe:	3301      	adds	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004902:	e002      	b.n	800490a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b01      	subs	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800490a:	4b15      	ldr	r3, [pc, #84]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004916:	d102      	bne.n	800491e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f2      	bne.n	8004904 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800491e:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492a:	d112      	bne.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e011      	b.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004936:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004940:	e007      	b.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004942:	4b07      	ldr	r3, [pc, #28]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800494a:	4a05      	ldr	r2, [pc, #20]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004950:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40007000 	.word	0x40007000
 8004964:	20000008 	.word	0x20000008
 8004968:	431bde83 	.word	0x431bde83

0800496c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800497a:	6093      	str	r3, [r2, #8]
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40007000 	.word	0x40007000

0800498c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e2fe      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d075      	beq.n	8004a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	4b97      	ldr	r3, [pc, #604]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b4:	4b94      	ldr	r3, [pc, #592]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d102      	bne.n	80049ca <HAL_RCC_OscConfig+0x3e>
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_OscConfig+0x44>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d10b      	bne.n	80049e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d05b      	beq.n	8004a94 <HAL_RCC_OscConfig+0x108>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d157      	bne.n	8004a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e2d9      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f0:	d106      	bne.n	8004a00 <HAL_RCC_OscConfig+0x74>
 80049f2:	4b85      	ldr	r3, [pc, #532]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a84      	ldr	r2, [pc, #528]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e01d      	b.n	8004a3c <HAL_RCC_OscConfig+0xb0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x98>
 8004a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	4b7c      	ldr	r3, [pc, #496]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7b      	ldr	r2, [pc, #492]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e00b      	b.n	8004a3c <HAL_RCC_OscConfig+0xb0>
 8004a24:	4b78      	ldr	r3, [pc, #480]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a77      	ldr	r2, [pc, #476]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4b75      	ldr	r3, [pc, #468]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a74      	ldr	r2, [pc, #464]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d013      	beq.n	8004a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd fa3e 	bl	8001ec4 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fa3a 	bl	8001ec4 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	@ 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e29e      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0xc0>
 8004a6a:	e014      	b.n	8004a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fa2a 	bl	8001ec4 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd fa26 	bl	8001ec4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	@ 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e28a      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a86:	4b60      	ldr	r3, [pc, #384]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0xe8>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d075      	beq.n	8004b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa2:	4b59      	ldr	r3, [pc, #356]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aac:	4b56      	ldr	r3, [pc, #344]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	d102      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x136>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d002      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x13c>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d11f      	bne.n	8004b08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x154>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e25d      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae0:	4b49      	ldr	r3, [pc, #292]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	4946      	ldr	r1, [pc, #280]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004af4:	4b45      	ldr	r3, [pc, #276]	@ (8004c0c <HAL_RCC_OscConfig+0x280>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fd f997 	bl	8001e2c <HAL_InitTick>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d043      	beq.n	8004b8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e249      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d023      	beq.n	8004b58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b10:	4b3d      	ldr	r3, [pc, #244]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3c      	ldr	r2, [pc, #240]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd f9d2 	bl	8001ec4 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b24:	f7fd f9ce 	bl	8001ec4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e232      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b36:	4b34      	ldr	r3, [pc, #208]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b42:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	492d      	ldr	r1, [pc, #180]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
 8004b56:	e01a      	b.n	8004b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b58:	4b2b      	ldr	r3, [pc, #172]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd f9ae 	bl	8001ec4 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fd f9aa 	bl	8001ec4 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e20e      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b7e:	4b22      	ldr	r3, [pc, #136]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x1e0>
 8004b8a:	e000      	b.n	8004b8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d041      	beq.n	8004c1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01c      	beq.n	8004bdc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba2:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba8:	4a17      	ldr	r2, [pc, #92]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb2:	f7fd f987 	bl	8001ec4 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bba:	f7fd f983 	bl	8001ec4 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e1e7      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0ef      	beq.n	8004bba <HAL_RCC_OscConfig+0x22e>
 8004bda:	e020      	b.n	8004c1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be2:	4a09      	ldr	r2, [pc, #36]	@ (8004c08 <HAL_RCC_OscConfig+0x27c>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd f96a 	bl	8001ec4 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf2:	e00d      	b.n	8004c10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf4:	f7fd f966 	bl	8001ec4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d906      	bls.n	8004c10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1ca      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
 8004c06:	bf00      	nop
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c10:	4b8c      	ldr	r3, [pc, #560]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ea      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80a6 	beq.w	8004d78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c30:	4b84      	ldr	r3, [pc, #528]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_OscConfig+0x2b4>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x2b6>
 8004c40:	2300      	movs	r3, #0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	4b7f      	ldr	r3, [pc, #508]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c52:	4b7c      	ldr	r3, [pc, #496]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c62:	4b79      	ldr	r3, [pc, #484]	@ (8004e48 <HAL_RCC_OscConfig+0x4bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d118      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6e:	4b76      	ldr	r3, [pc, #472]	@ (8004e48 <HAL_RCC_OscConfig+0x4bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a75      	ldr	r2, [pc, #468]	@ (8004e48 <HAL_RCC_OscConfig+0x4bc>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7a:	f7fd f923 	bl	8001ec4 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c82:	f7fd f91f 	bl	8001ec4 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e183      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c94:	4b6c      	ldr	r3, [pc, #432]	@ (8004e48 <HAL_RCC_OscConfig+0x4bc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d108      	bne.n	8004cba <HAL_RCC_OscConfig+0x32e>
 8004ca8:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cae:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cb8:	e024      	b.n	8004d04 <HAL_RCC_OscConfig+0x378>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d110      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x358>
 8004cc2:	4b60      	ldr	r3, [pc, #384]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cca:	f043 0304 	orr.w	r3, r3, #4
 8004cce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce2:	e00f      	b.n	8004d04 <HAL_RCC_OscConfig+0x378>
 8004ce4:	4b57      	ldr	r3, [pc, #348]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cea:	4a56      	ldr	r2, [pc, #344]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cf4:	4b53      	ldr	r3, [pc, #332]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	4a52      	ldr	r2, [pc, #328]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d016      	beq.n	8004d3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd f8da 	bl	8001ec4 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d14:	f7fd f8d6 	bl	8001ec4 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e138      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2a:	4b46      	ldr	r3, [pc, #280]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0ed      	beq.n	8004d14 <HAL_RCC_OscConfig+0x388>
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3a:	f7fd f8c3 	bl	8001ec4 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d40:	e00a      	b.n	8004d58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d42:	f7fd f8bf 	bl	8001ec4 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e121      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d58:	4b3a      	ldr	r3, [pc, #232]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ed      	bne.n	8004d42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d66:	7ffb      	ldrb	r3, [r7, #31]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6c:	4b35      	ldr	r3, [pc, #212]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d70:	4a34      	ldr	r2, [pc, #208]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d03c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d92:	4a2c      	ldr	r2, [pc, #176]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fd f892 	bl	8001ec4 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da4:	f7fd f88e 	bl	8001ec4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e0f2      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004db6:	4b23      	ldr	r3, [pc, #140]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ef      	beq.n	8004da4 <HAL_RCC_OscConfig+0x418>
 8004dc4:	e01b      	b.n	8004dfe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fd f875 	bl	8001ec4 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dde:	f7fd f871 	bl	8001ec4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0d5      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004df0:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ef      	bne.n	8004dde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80c9 	beq.w	8004f9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e08:	4b0e      	ldr	r3, [pc, #56]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	f000 8083 	beq.w	8004f1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d15e      	bne.n	8004edc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	4b09      	ldr	r3, [pc, #36]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a08      	ldr	r2, [pc, #32]	@ (8004e44 <HAL_RCC_OscConfig+0x4b8>)
 8004e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fd f84b 	bl	8001ec4 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e30:	e00c      	b.n	8004e4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd f847 	bl	8001ec4 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d905      	bls.n	8004e4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0ab      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4c:	4b55      	ldr	r3, [pc, #340]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ec      	bne.n	8004e32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e58:	4b52      	ldr	r3, [pc, #328]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	4b52      	ldr	r3, [pc, #328]	@ (8004fa8 <HAL_RCC_OscConfig+0x61c>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6a11      	ldr	r1, [r2, #32]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e68:	3a01      	subs	r2, #1
 8004e6a:	0112      	lsls	r2, r2, #4
 8004e6c:	4311      	orrs	r1, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e72:	0212      	lsls	r2, r2, #8
 8004e74:	4311      	orrs	r1, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e7a:	0852      	lsrs	r2, r2, #1
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	0552      	lsls	r2, r2, #21
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e86:	0852      	lsrs	r2, r2, #1
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	0652      	lsls	r2, r2, #25
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e92:	06d2      	lsls	r2, r2, #27
 8004e94:	430a      	orrs	r2, r1
 8004e96:	4943      	ldr	r1, [pc, #268]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e9c:	4b41      	ldr	r3, [pc, #260]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a40      	ldr	r2, [pc, #256]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ea6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd f806 	bl	8001ec4 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fd f802 	bl	8001ec4 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e066      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	4b35      	ldr	r3, [pc, #212]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x530>
 8004eda:	e05e      	b.n	8004f9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004edc:	4b31      	ldr	r3, [pc, #196]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a30      	ldr	r2, [pc, #192]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fc ffec 	bl	8001ec4 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fc ffe8 	bl	8001ec4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e04c      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f02:	4b28      	ldr	r3, [pc, #160]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f0e:	4b25      	ldr	r3, [pc, #148]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	4924      	ldr	r1, [pc, #144]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004f14:	4b25      	ldr	r3, [pc, #148]	@ (8004fac <HAL_RCC_OscConfig+0x620>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	60cb      	str	r3, [r1, #12]
 8004f1a:	e03e      	b.n	8004f9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e039      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f28:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa4 <HAL_RCC_OscConfig+0x618>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d12c      	bne.n	8004f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	3b01      	subs	r3, #1
 8004f48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d123      	bne.n	8004f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d11b      	bne.n	8004f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d113      	bne.n	8004f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d109      	bne.n	8004f96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	019f800c 	.word	0x019f800c
 8004fac:	feeefffc 	.word	0xfeeefffc

08004fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e11e      	b.n	8005206 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b91      	ldr	r3, [pc, #580]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d910      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b8e      	ldr	r3, [pc, #568]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 020f 	bic.w	r2, r3, #15
 8004fde:	498c      	ldr	r1, [pc, #560]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e106      	b.n	8005206 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d073      	beq.n	80050ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d129      	bne.n	8005060 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800500c:	4b81      	ldr	r3, [pc, #516]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0f4      	b.n	8005206 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800501c:	f000 f99e 	bl	800535c <RCC_GetSysClockFreqFromPLLSource>
 8005020:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4a7c      	ldr	r2, [pc, #496]	@ (8005218 <HAL_RCC_ClockConfig+0x268>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d93f      	bls.n	80050aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800502a:	4b7a      	ldr	r3, [pc, #488]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800503e:	2b00      	cmp	r3, #0
 8005040:	d033      	beq.n	80050aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005046:	2b00      	cmp	r3, #0
 8005048:	d12f      	bne.n	80050aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800504a:	4b72      	ldr	r3, [pc, #456]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005052:	4a70      	ldr	r2, [pc, #448]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 8005054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005058:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e024      	b.n	80050aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d107      	bne.n	8005078 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005068:	4b6a      	ldr	r3, [pc, #424]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0c6      	b.n	8005206 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005078:	4b66      	ldr	r3, [pc, #408]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0be      	b.n	8005206 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005088:	f000 f8ce 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 800508c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4a61      	ldr	r2, [pc, #388]	@ (8005218 <HAL_RCC_ClockConfig+0x268>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d909      	bls.n	80050aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005096:	4b5f      	ldr	r3, [pc, #380]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800509e:	4a5d      	ldr	r2, [pc, #372]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80050a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050a6:	2380      	movs	r3, #128	@ 0x80
 80050a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4957      	ldr	r1, [pc, #348]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fc ff02 	bl	8001ec4 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fc fefe 	bl	8001ec4 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e095      	b.n	8005206 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b4e      	ldr	r3, [pc, #312]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d023      	beq.n	8005140 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005104:	4b43      	ldr	r3, [pc, #268]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	4a42      	ldr	r2, [pc, #264]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800510a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800510e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800511c:	4b3d      	ldr	r3, [pc, #244]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005124:	4a3b      	ldr	r2, [pc, #236]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 8005126:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800512a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512c:	4b39      	ldr	r3, [pc, #228]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4936      	ldr	r1, [pc, #216]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
 800513e:	e008      	b.n	8005152 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b80      	cmp	r3, #128	@ 0x80
 8005144:	d105      	bne.n	8005152 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005146:	4b33      	ldr	r3, [pc, #204]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4a32      	ldr	r2, [pc, #200]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 800514c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005150:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005152:	4b2f      	ldr	r3, [pc, #188]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d21d      	bcs.n	800519c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005160:	4b2b      	ldr	r3, [pc, #172]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f023 020f 	bic.w	r2, r3, #15
 8005168:	4929      	ldr	r1, [pc, #164]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	4313      	orrs	r3, r2
 800516e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005170:	f7fc fea8 	bl	8001ec4 <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	e00a      	b.n	800518e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fc fea4 	bl	8001ec4 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e03b      	b.n	8005206 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d1ed      	bne.n	8005178 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4917      	ldr	r1, [pc, #92]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c6:	4b13      	ldr	r3, [pc, #76]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	490f      	ldr	r1, [pc, #60]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051da:	f000 f825 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <HAL_RCC_ClockConfig+0x264>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	490c      	ldr	r1, [pc, #48]	@ (800521c <HAL_RCC_ClockConfig+0x26c>)
 80051ec:	5ccb      	ldrb	r3, [r1, r3]
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	fa22 f303 	lsr.w	r3, r2, r3
 80051f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <HAL_RCC_ClockConfig+0x270>)
 80051f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005224 <HAL_RCC_ClockConfig+0x274>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fc fe14 	bl	8001e2c <HAL_InitTick>
 8005204:	4603      	mov	r3, r0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40022000 	.word	0x40022000
 8005214:	40021000 	.word	0x40021000
 8005218:	04c4b400 	.word	0x04c4b400
 800521c:	08017dcc 	.word	0x08017dcc
 8005220:	20000008 	.word	0x20000008
 8005224:	2000000c 	.word	0x2000000c

08005228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800522e:	4b2c      	ldr	r3, [pc, #176]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b04      	cmp	r3, #4
 8005238:	d102      	bne.n	8005240 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800523a:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	e047      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005240:	4b27      	ldr	r3, [pc, #156]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b08      	cmp	r3, #8
 800524a:	d102      	bne.n	8005252 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800524c:	4b26      	ldr	r3, [pc, #152]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	e03e      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005252:	4b23      	ldr	r3, [pc, #140]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
 800525a:	2b0c      	cmp	r3, #12
 800525c:	d136      	bne.n	80052cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800525e:	4b20      	ldr	r3, [pc, #128]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005268:	4b1d      	ldr	r3, [pc, #116]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	3301      	adds	r3, #1
 8005274:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d10c      	bne.n	8005296 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800527c:	4a1a      	ldr	r2, [pc, #104]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	4a16      	ldr	r2, [pc, #88]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005286:	68d2      	ldr	r2, [r2, #12]
 8005288:	0a12      	lsrs	r2, r2, #8
 800528a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	617b      	str	r3, [r7, #20]
      break;
 8005294:	e00c      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005296:	4a13      	ldr	r2, [pc, #76]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a0:	68d2      	ldr	r2, [r2, #12]
 80052a2:	0a12      	lsrs	r2, r2, #8
 80052a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	617b      	str	r3, [r7, #20]
      break;
 80052ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052b0:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	0e5b      	lsrs	r3, r3, #25
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	3301      	adds	r3, #1
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e001      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052d0:	693b      	ldr	r3, [r7, #16]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	016e3600 	.word	0x016e3600

080052ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052f0:	4b03      	ldr	r3, [pc, #12]	@ (8005300 <HAL_RCC_GetHCLKFreq+0x14>)
 80052f2:	681b      	ldr	r3, [r3, #0]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000008 	.word	0x20000008

08005304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005308:	f7ff fff0 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 800530c:	4602      	mov	r2, r0
 800530e:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	4904      	ldr	r1, [pc, #16]	@ (800532c <HAL_RCC_GetPCLK1Freq+0x28>)
 800531a:	5ccb      	ldrb	r3, [r1, r3]
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40021000 	.word	0x40021000
 800532c:	08017ddc 	.word	0x08017ddc

08005330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005334:	f7ff ffda 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0adb      	lsrs	r3, r3, #11
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4904      	ldr	r1, [pc, #16]	@ (8005358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000
 8005358:	08017ddc 	.word	0x08017ddc

0800535c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005362:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	3301      	adds	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d10c      	bne.n	800539a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005380:	4a17      	ldr	r2, [pc, #92]	@ (80053e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	4a14      	ldr	r2, [pc, #80]	@ (80053dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800538a:	68d2      	ldr	r2, [r2, #12]
 800538c:	0a12      	lsrs	r2, r2, #8
 800538e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	617b      	str	r3, [r7, #20]
    break;
 8005398:	e00c      	b.n	80053b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800539a:	4a12      	ldr	r2, [pc, #72]	@ (80053e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	4a0e      	ldr	r2, [pc, #56]	@ (80053dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a4:	68d2      	ldr	r2, [r2, #12]
 80053a6:	0a12      	lsrs	r2, r2, #8
 80053a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
    break;
 80053b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	0e5b      	lsrs	r3, r3, #25
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	3301      	adds	r3, #1
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053ce:	687b      	ldr	r3, [r7, #4]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40021000 	.word	0x40021000
 80053e0:	016e3600 	.word	0x016e3600
 80053e4:	00f42400 	.word	0x00f42400

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f4:	2300      	movs	r3, #0
 80053f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8098 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005406:	2300      	movs	r3, #0
 8005408:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540a:	4b43      	ldr	r3, [pc, #268]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10d      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005416:	4b40      	ldr	r3, [pc, #256]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	4a3f      	ldr	r2, [pc, #252]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005420:	6593      	str	r3, [r2, #88]	@ 0x58
 8005422:	4b3d      	ldr	r3, [pc, #244]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800542e:	2301      	movs	r3, #1
 8005430:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005432:	4b3a      	ldr	r3, [pc, #232]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a39      	ldr	r2, [pc, #228]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800543c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800543e:	f7fc fd41 	bl	8001ec4 <HAL_GetTick>
 8005442:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005444:	e009      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fc fd3d 	bl	8001ec4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d902      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	74fb      	strb	r3, [r7, #19]
        break;
 8005458:	e005      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800545a:	4b30      	ldr	r3, [pc, #192]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0ef      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005466:	7cfb      	ldrb	r3, [r7, #19]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d159      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800546c:	4b2a      	ldr	r3, [pc, #168]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005476:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01e      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	d019      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005488:	4b23      	ldr	r3, [pc, #140]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005492:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005494:	4b20      	ldr	r3, [pc, #128]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	4a1f      	ldr	r2, [pc, #124]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054b4:	4a18      	ldr	r2, [pc, #96]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d016      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc fcfd 	bl	8001ec4 <HAL_GetTick>
 80054ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054cc:	e00b      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ce:	f7fc fcf9 	bl	8001ec4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d902      	bls.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	74fb      	strb	r3, [r7, #19]
            break;
 80054e4:	e006      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ec      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054f4:	7cfb      	ldrb	r3, [r7, #19]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10b      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054fa:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005510:	e008      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	74bb      	strb	r3, [r7, #18]
 8005516:	e005      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005518:	40021000 	.word	0x40021000
 800551c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005524:	7c7b      	ldrb	r3, [r7, #17]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d105      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800552a:	4ba7      	ldr	r3, [pc, #668]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552e:	4aa6      	ldr	r2, [pc, #664]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005534:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005542:	4ba1      	ldr	r3, [pc, #644]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	f023 0203 	bic.w	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	499d      	ldr	r1, [pc, #628]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005564:	4b98      	ldr	r3, [pc, #608]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f023 020c 	bic.w	r2, r3, #12
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4995      	ldr	r1, [pc, #596]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005586:	4b90      	ldr	r3, [pc, #576]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	498c      	ldr	r1, [pc, #560]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a8:	4b87      	ldr	r3, [pc, #540]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4984      	ldr	r1, [pc, #528]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055ca:	4b7f      	ldr	r3, [pc, #508]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	497b      	ldr	r1, [pc, #492]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ec:	4b76      	ldr	r3, [pc, #472]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	4973      	ldr	r1, [pc, #460]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800560e:	4b6e      	ldr	r3, [pc, #440]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	496a      	ldr	r1, [pc, #424]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005630:	4b65      	ldr	r3, [pc, #404]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005636:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	4962      	ldr	r1, [pc, #392]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005652:	4b5d      	ldr	r3, [pc, #372]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	4959      	ldr	r1, [pc, #356]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005674:	4b54      	ldr	r3, [pc, #336]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800567a:	f023 0203 	bic.w	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005682:	4951      	ldr	r1, [pc, #324]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005696:	4b4c      	ldr	r3, [pc, #304]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	4948      	ldr	r1, [pc, #288]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056b8:	4b43      	ldr	r3, [pc, #268]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c6:	4940      	ldr	r1, [pc, #256]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d8:	4b3b      	ldr	r3, [pc, #236]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a3a      	ldr	r2, [pc, #232]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d015      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056f0:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fe:	4932      	ldr	r1, [pc, #200]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800570a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800570e:	d105      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005710:	4b2d      	ldr	r3, [pc, #180]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a2c      	ldr	r2, [pc, #176]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800571a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005728:	4b27      	ldr	r3, [pc, #156]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	4924      	ldr	r1, [pc, #144]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005746:	d105      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005748:	4b1f      	ldr	r3, [pc, #124]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a1e      	ldr	r2, [pc, #120]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005752:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005760:	4b19      	ldr	r3, [pc, #100]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576e:	4916      	ldr	r1, [pc, #88]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577e:	d105      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005780:	4b11      	ldr	r3, [pc, #68]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a10      	ldr	r2, [pc, #64]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800578a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d019      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005798:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a6:	4908      	ldr	r1, [pc, #32]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b6:	d109      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b8:	4b03      	ldr	r3, [pc, #12]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4a02      	ldr	r2, [pc, #8]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057c2:	60d3      	str	r3, [r2, #12]
 80057c4:	e002      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d015      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057d8:	4b29      	ldr	r3, [pc, #164]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	4926      	ldr	r1, [pc, #152]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f6:	d105      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057f8:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	4a20      	ldr	r2, [pc, #128]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005802:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800581e:	4918      	ldr	r1, [pc, #96]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582e:	d105      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005830:	4b13      	ldr	r3, [pc, #76]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4a12      	ldr	r2, [pc, #72]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800583a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d015      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005848:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800584a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800584e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005856:	490a      	ldr	r1, [pc, #40]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005862:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005866:	d105      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a04      	ldr	r2, [pc, #16]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800586e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005872:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005874:	7cbb      	ldrb	r3, [r7, #18]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000

08005884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e042      	b.n	800591c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fc f9bf 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2224      	movs	r2, #36	@ 0x24
 80058b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 f806 	bl	80068e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fd07 	bl	80062e8 <UART_SetConfig>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e01b      	b.n	800591c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 f885 	bl	8006a24 <UART_CheckIdleState>
 800591a:	4603      	mov	r3, r0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	@ 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005938:	2b20      	cmp	r3, #32
 800593a:	d167      	bne.n	8005a0c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <HAL_UART_Transmit_DMA+0x24>
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e060      	b.n	8005a0e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2221      	movs	r2, #33	@ 0x21
 800596e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d028      	beq.n	80059cc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597e:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <HAL_UART_Transmit_DMA+0xf4>)
 8005980:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005986:	4a25      	ldr	r2, [pc, #148]	@ (8005a1c <HAL_UART_Transmit_DMA+0xf8>)
 8005988:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800598e:	4a24      	ldr	r2, [pc, #144]	@ (8005a20 <HAL_UART_Transmit_DMA+0xfc>)
 8005990:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005996:	2200      	movs	r2, #0
 8005998:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	4619      	mov	r1, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3328      	adds	r3, #40	@ 0x28
 80059aa:	461a      	mov	r2, r3
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	f7fe fa6f 	bl	8003e90 <HAL_DMA_Start_IT>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2210      	movs	r2, #16
 80059bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e020      	b.n	8005a0e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2240      	movs	r2, #64	@ 0x40
 80059d2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	613b      	str	r3, [r7, #16]
   return(result);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f4:	623a      	str	r2, [r7, #32]
 80059f6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	69f9      	ldr	r1, [r7, #28]
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e5      	bne.n	80059d4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3728      	adds	r7, #40	@ 0x28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	08006eef 	.word	0x08006eef
 8005a1c:	08006f89 	.word	0x08006f89
 8005a20:	0800710f 	.word	0x0800710f

08005a24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	@ 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d137      	bne.n	8005aac <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Receive_DMA+0x24>
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e030      	b.n	8005aae <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a18      	ldr	r2, [pc, #96]	@ (8005ab8 <HAL_UART_Receive_DMA+0x94>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d01f      	beq.n	8005a9c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d018      	beq.n	8005a9c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f001 f8d6 	bl	8006c54 <UART_Start_Receive_DMA>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	e000      	b.n	8005aae <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005aac:	2302      	movs	r3, #2
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3728      	adds	r7, #40	@ 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40008000 	.word	0x40008000

08005abc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b090      	sub	sp, #64	@ 0x40
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ade:	2b80      	cmp	r3, #128	@ 0x80
 8005ae0:	d139      	bne.n	8005b56 <HAL_UART_DMAStop+0x9a>
 8005ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae4:	2b21      	cmp	r3, #33	@ 0x21
 8005ae6:	d136      	bne.n	8005b56 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3308      	adds	r3, #8
 8005aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3308      	adds	r3, #8
 8005b06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d015      	beq.n	8005b50 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe fa2c 	bl	8003f86 <HAL_DMA_Abort>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fb93 	bl	8004264 <HAL_DMA_GetError>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d105      	bne.n	8005b50 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2210      	movs	r2, #16
 8005b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e047      	b.n	8005be0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f925 	bl	8006da0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b60:	2b40      	cmp	r3, #64	@ 0x40
 8005b62:	d13c      	bne.n	8005bde <HAL_UART_DMAStop+0x122>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	2b22      	cmp	r3, #34	@ 0x22
 8005b68:	d139      	bne.n	8005bde <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8a:	61ba      	str	r2, [r7, #24]
 8005b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	613b      	str	r3, [r7, #16]
   return(result);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e5      	bne.n	8005b6a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d017      	beq.n	8005bd8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe f9e9 	bl	8003f86 <HAL_DMA_Abort>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00e      	beq.n	8005bd8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe fb4f 	bl	8004264 <HAL_DMA_GetError>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d105      	bne.n	8005bd8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2210      	movs	r2, #16
 8005bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e003      	b.n	8005be0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 f922 	bl	8006e22 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3740      	adds	r7, #64	@ 0x40
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b0ba      	sub	sp, #232	@ 0xe8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005c12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005c16:	4013      	ands	r3, r2
 8005c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11b      	bne.n	8005c5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d015      	beq.n	8005c5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8300 	beq.w	8006252 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      }
      return;
 8005c5a:	e2fa      	b.n	8006252 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8123 	beq.w	8005eac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c6a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea0 <HAL_UART_IRQHandler+0x2b8>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c76:	4b8b      	ldr	r3, [pc, #556]	@ (8005ea4 <HAL_UART_IRQHandler+0x2bc>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8116 	beq.w	8005eac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xc8>
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d011      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xf8>
 8005cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d011      	beq.n	8005d10 <HAL_UART_IRQHandler+0x128>
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea0 <HAL_UART_IRQHandler+0x2b8>)
 8005d2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d42:	f043 0208 	orr.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <HAL_UART_IRQHandler+0x196>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d74:	f043 0220 	orr.w	r2, r3, #32
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8266 	beq.w	8006256 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d013      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	d005      	beq.n	8005de2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d054      	beq.n	8005e8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 f81d 	bl	8006e22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df2:	2b40      	cmp	r3, #64	@ 0x40
 8005df4:	d146      	bne.n	8005e84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1d9      	bne.n	8005df6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d017      	beq.n	8005e7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e52:	4a15      	ldr	r2, [pc, #84]	@ (8005ea8 <HAL_UART_IRQHandler+0x2c0>)
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe f8eb 	bl	8004038 <HAL_DMA_Abort_IT>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d019      	beq.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005e76:	4610      	mov	r0, r2
 8005e78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7a:	e00f      	b.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fa1d 	bl	80062bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e82:	e00b      	b.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fa19 	bl	80062bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8a:	e007      	b.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa15 	bl	80062bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005e9a:	e1dc      	b.n	8006256 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9c:	bf00      	nop
    return;
 8005e9e:	e1da      	b.n	8006256 <HAL_UART_IRQHandler+0x66e>
 8005ea0:	10000001 	.word	0x10000001
 8005ea4:	04000120 	.word	0x04000120
 8005ea8:	0800718f 	.word	0x0800718f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f040 8170 	bne.w	8006196 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8169 	beq.w	8006196 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8162 	beq.w	8006196 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	f040 80d8 	bne.w	800609a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80af 	beq.w	8006060 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	f080 80a7 	bcs.w	8006060 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 8087 	bne.w	800603e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1da      	bne.n	8005f30 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e1      	bne.n	8005f7a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fe0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e3      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800600a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800600c:	f023 0310 	bic.w	r3, r3, #16
 8006010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800601e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006020:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800602c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e4      	bne.n	8005ffc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006038:	4618      	mov	r0, r3
 800603a:	f7fd ffa4 	bl	8003f86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006050:	b29b      	uxth	r3, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	b29b      	uxth	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f939 	bl	80062d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800605e:	e0fc      	b.n	800625a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800606a:	429a      	cmp	r2, r3
 800606c:	f040 80f5 	bne.w	800625a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	f040 80eb 	bne.w	800625a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f91c 	bl	80062d0 <HAL_UARTEx_RxEventCallback>
      return;
 8006098:	e0df      	b.n	800625a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 80d1 	beq.w	800625e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80060bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80cc 	beq.w	800625e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e4      	bne.n	80060c6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	623b      	str	r3, [r7, #32]
   return(result);
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006124:	633a      	str	r2, [r7, #48]	@ 0x30
 8006126:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800612a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e1      	bne.n	80060fc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60fb      	str	r3, [r7, #12]
   return(result);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	69b9      	ldr	r1, [r7, #24]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	617b      	str	r3, [r7, #20]
   return(result);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e4      	bne.n	800614c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f89e 	bl	80062d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006194:	e063      	b.n	800625e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <HAL_UART_IRQHandler+0x5d8>
 80061a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80061b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 f825 	bl	8007208 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061be:	e051      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d014      	beq.n	80061f6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d03a      	beq.n	8006262 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
    }
    return;
 80061f4:	e035      	b.n	8006262 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <HAL_UART_IRQHandler+0x62e>
 8006202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 ffcf 	bl	80071b2 <UART_EndTransmit_IT>
    return;
 8006214:	e026      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_UART_IRQHandler+0x64e>
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006226:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fffe 	bl	8007230 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006234:	e016      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d010      	beq.n	8006264 <HAL_UART_IRQHandler+0x67c>
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006246:	2b00      	cmp	r3, #0
 8006248:	da0c      	bge.n	8006264 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 ffe6 	bl	800721c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006250:	e008      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
      return;
 8006252:	bf00      	nop
 8006254:	e006      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
    return;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
      return;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
      return;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
    return;
 8006262:	bf00      	nop
  }
}
 8006264:	37e8      	adds	r7, #232	@ 0xe8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062ec:	b08c      	sub	sp, #48	@ 0x30
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	431a      	orrs	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	431a      	orrs	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	4313      	orrs	r3, r2
 800630e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4baa      	ldr	r3, [pc, #680]	@ (80065c0 <UART_SetConfig+0x2d8>)
 8006318:	4013      	ands	r3, r2
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006320:	430b      	orrs	r3, r1
 8006322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a9f      	ldr	r2, [pc, #636]	@ (80065c4 <UART_SetConfig+0x2dc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006350:	4313      	orrs	r3, r2
 8006352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800635e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006368:	430b      	orrs	r3, r1
 800636a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	f023 010f 	bic.w	r1, r3, #15
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a90      	ldr	r2, [pc, #576]	@ (80065c8 <UART_SetConfig+0x2e0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d125      	bne.n	80063d8 <UART_SetConfig+0xf0>
 800638c:	4b8f      	ldr	r3, [pc, #572]	@ (80065cc <UART_SetConfig+0x2e4>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b03      	cmp	r3, #3
 8006398:	d81a      	bhi.n	80063d0 <UART_SetConfig+0xe8>
 800639a:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <UART_SetConfig+0xb8>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063c1 	.word	0x080063c1
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063c9 	.word	0x080063c9
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b6:	e116      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80063b8:	2302      	movs	r3, #2
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063be:	e112      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80063c0:	2304      	movs	r3, #4
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c6:	e10e      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80063c8:	2308      	movs	r3, #8
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ce:	e10a      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d6:	e106      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a7c      	ldr	r2, [pc, #496]	@ (80065d0 <UART_SetConfig+0x2e8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d138      	bne.n	8006454 <UART_SetConfig+0x16c>
 80063e2:	4b7a      	ldr	r3, [pc, #488]	@ (80065cc <UART_SetConfig+0x2e4>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e8:	f003 030c 	and.w	r3, r3, #12
 80063ec:	2b0c      	cmp	r3, #12
 80063ee:	d82d      	bhi.n	800644c <UART_SetConfig+0x164>
 80063f0:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <UART_SetConfig+0x110>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	0800644d 	.word	0x0800644d
 8006400:	0800644d 	.word	0x0800644d
 8006404:	0800644d 	.word	0x0800644d
 8006408:	0800643d 	.word	0x0800643d
 800640c:	0800644d 	.word	0x0800644d
 8006410:	0800644d 	.word	0x0800644d
 8006414:	0800644d 	.word	0x0800644d
 8006418:	08006435 	.word	0x08006435
 800641c:	0800644d 	.word	0x0800644d
 8006420:	0800644d 	.word	0x0800644d
 8006424:	0800644d 	.word	0x0800644d
 8006428:	08006445 	.word	0x08006445
 800642c:	2300      	movs	r3, #0
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006432:	e0d8      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006434:	2302      	movs	r3, #2
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643a:	e0d4      	b.n	80065e6 <UART_SetConfig+0x2fe>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006442:	e0d0      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800644a:	e0cc      	b.n	80065e6 <UART_SetConfig+0x2fe>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006452:	e0c8      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a5e      	ldr	r2, [pc, #376]	@ (80065d4 <UART_SetConfig+0x2ec>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d125      	bne.n	80064aa <UART_SetConfig+0x1c2>
 800645e:	4b5b      	ldr	r3, [pc, #364]	@ (80065cc <UART_SetConfig+0x2e4>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006464:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006468:	2b30      	cmp	r3, #48	@ 0x30
 800646a:	d016      	beq.n	800649a <UART_SetConfig+0x1b2>
 800646c:	2b30      	cmp	r3, #48	@ 0x30
 800646e:	d818      	bhi.n	80064a2 <UART_SetConfig+0x1ba>
 8006470:	2b20      	cmp	r3, #32
 8006472:	d00a      	beq.n	800648a <UART_SetConfig+0x1a2>
 8006474:	2b20      	cmp	r3, #32
 8006476:	d814      	bhi.n	80064a2 <UART_SetConfig+0x1ba>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <UART_SetConfig+0x19a>
 800647c:	2b10      	cmp	r3, #16
 800647e:	d008      	beq.n	8006492 <UART_SetConfig+0x1aa>
 8006480:	e00f      	b.n	80064a2 <UART_SetConfig+0x1ba>
 8006482:	2300      	movs	r3, #0
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006488:	e0ad      	b.n	80065e6 <UART_SetConfig+0x2fe>
 800648a:	2302      	movs	r3, #2
 800648c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006490:	e0a9      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006492:	2304      	movs	r3, #4
 8006494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006498:	e0a5      	b.n	80065e6 <UART_SetConfig+0x2fe>
 800649a:	2308      	movs	r3, #8
 800649c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064a0:	e0a1      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80064a2:	2310      	movs	r3, #16
 80064a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064a8:	e09d      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a4a      	ldr	r2, [pc, #296]	@ (80065d8 <UART_SetConfig+0x2f0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d125      	bne.n	8006500 <UART_SetConfig+0x218>
 80064b4:	4b45      	ldr	r3, [pc, #276]	@ (80065cc <UART_SetConfig+0x2e4>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064be:	2bc0      	cmp	r3, #192	@ 0xc0
 80064c0:	d016      	beq.n	80064f0 <UART_SetConfig+0x208>
 80064c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80064c4:	d818      	bhi.n	80064f8 <UART_SetConfig+0x210>
 80064c6:	2b80      	cmp	r3, #128	@ 0x80
 80064c8:	d00a      	beq.n	80064e0 <UART_SetConfig+0x1f8>
 80064ca:	2b80      	cmp	r3, #128	@ 0x80
 80064cc:	d814      	bhi.n	80064f8 <UART_SetConfig+0x210>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <UART_SetConfig+0x1f0>
 80064d2:	2b40      	cmp	r3, #64	@ 0x40
 80064d4:	d008      	beq.n	80064e8 <UART_SetConfig+0x200>
 80064d6:	e00f      	b.n	80064f8 <UART_SetConfig+0x210>
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e082      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80064e0:	2302      	movs	r3, #2
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064e6:	e07e      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ee:	e07a      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064f6:	e076      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fe:	e072      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a35      	ldr	r2, [pc, #212]	@ (80065dc <UART_SetConfig+0x2f4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d12a      	bne.n	8006560 <UART_SetConfig+0x278>
 800650a:	4b30      	ldr	r3, [pc, #192]	@ (80065cc <UART_SetConfig+0x2e4>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006518:	d01a      	beq.n	8006550 <UART_SetConfig+0x268>
 800651a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800651e:	d81b      	bhi.n	8006558 <UART_SetConfig+0x270>
 8006520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006524:	d00c      	beq.n	8006540 <UART_SetConfig+0x258>
 8006526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652a:	d815      	bhi.n	8006558 <UART_SetConfig+0x270>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <UART_SetConfig+0x250>
 8006530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006534:	d008      	beq.n	8006548 <UART_SetConfig+0x260>
 8006536:	e00f      	b.n	8006558 <UART_SetConfig+0x270>
 8006538:	2300      	movs	r3, #0
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800653e:	e052      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006540:	2302      	movs	r3, #2
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006546:	e04e      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006548:	2304      	movs	r3, #4
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800654e:	e04a      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006550:	2308      	movs	r3, #8
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006556:	e046      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006558:	2310      	movs	r3, #16
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655e:	e042      	b.n	80065e6 <UART_SetConfig+0x2fe>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a17      	ldr	r2, [pc, #92]	@ (80065c4 <UART_SetConfig+0x2dc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d13a      	bne.n	80065e0 <UART_SetConfig+0x2f8>
 800656a:	4b18      	ldr	r3, [pc, #96]	@ (80065cc <UART_SetConfig+0x2e4>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006578:	d01a      	beq.n	80065b0 <UART_SetConfig+0x2c8>
 800657a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800657e:	d81b      	bhi.n	80065b8 <UART_SetConfig+0x2d0>
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006584:	d00c      	beq.n	80065a0 <UART_SetConfig+0x2b8>
 8006586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800658a:	d815      	bhi.n	80065b8 <UART_SetConfig+0x2d0>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <UART_SetConfig+0x2b0>
 8006590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006594:	d008      	beq.n	80065a8 <UART_SetConfig+0x2c0>
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0x2d0>
 8006598:	2300      	movs	r3, #0
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800659e:	e022      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80065a0:	2302      	movs	r3, #2
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065a6:	e01e      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80065a8:	2304      	movs	r3, #4
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ae:	e01a      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80065b0:	2308      	movs	r3, #8
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b6:	e016      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80065b8:	2310      	movs	r3, #16
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065be:	e012      	b.n	80065e6 <UART_SetConfig+0x2fe>
 80065c0:	cfff69f3 	.word	0xcfff69f3
 80065c4:	40008000 	.word	0x40008000
 80065c8:	40013800 	.word	0x40013800
 80065cc:	40021000 	.word	0x40021000
 80065d0:	40004400 	.word	0x40004400
 80065d4:	40004800 	.word	0x40004800
 80065d8:	40004c00 	.word	0x40004c00
 80065dc:	40005000 	.word	0x40005000
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4aae      	ldr	r2, [pc, #696]	@ (80068a4 <UART_SetConfig+0x5bc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	f040 8097 	bne.w	8006720 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d823      	bhi.n	8006642 <UART_SetConfig+0x35a>
 80065fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <UART_SetConfig+0x318>)
 80065fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006600:	08006625 	.word	0x08006625
 8006604:	08006643 	.word	0x08006643
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006643 	.word	0x08006643
 8006610:	08006633 	.word	0x08006633
 8006614:	08006643 	.word	0x08006643
 8006618:	08006643 	.word	0x08006643
 800661c:	08006643 	.word	0x08006643
 8006620:	0800663b 	.word	0x0800663b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006624:	f7fe fe6e 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 8006628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800662a:	e010      	b.n	800664e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800662c:	4b9e      	ldr	r3, [pc, #632]	@ (80068a8 <UART_SetConfig+0x5c0>)
 800662e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006630:	e00d      	b.n	800664e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006632:	f7fe fdf9 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8006636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006638:	e009      	b.n	800664e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006640:	e005      	b.n	800664e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800664c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8130 	beq.w	80068b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	4a94      	ldr	r2, [pc, #592]	@ (80068ac <UART_SetConfig+0x5c4>)
 800665c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006660:	461a      	mov	r2, r3
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	fbb3 f3f2 	udiv	r3, r3, r2
 8006668:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	4413      	add	r3, r2
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	429a      	cmp	r2, r3
 8006678:	d305      	bcc.n	8006686 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	429a      	cmp	r2, r3
 8006684:	d903      	bls.n	800668e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800668c:	e113      	b.n	80068b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	2200      	movs	r2, #0
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	60fa      	str	r2, [r7, #12]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669a:	4a84      	ldr	r2, [pc, #528]	@ (80068ac <UART_SetConfig+0x5c4>)
 800669c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2200      	movs	r2, #0
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066b0:	f7f9 fe6e 	bl	8000390 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4610      	mov	r0, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	020b      	lsls	r3, r1, #8
 80066c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066ca:	0202      	lsls	r2, r0, #8
 80066cc:	6979      	ldr	r1, [r7, #20]
 80066ce:	6849      	ldr	r1, [r1, #4]
 80066d0:	0849      	lsrs	r1, r1, #1
 80066d2:	2000      	movs	r0, #0
 80066d4:	460c      	mov	r4, r1
 80066d6:	4605      	mov	r5, r0
 80066d8:	eb12 0804 	adds.w	r8, r2, r4
 80066dc:	eb43 0905 	adc.w	r9, r3, r5
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	469a      	mov	sl, r3
 80066e8:	4693      	mov	fp, r2
 80066ea:	4652      	mov	r2, sl
 80066ec:	465b      	mov	r3, fp
 80066ee:	4640      	mov	r0, r8
 80066f0:	4649      	mov	r1, r9
 80066f2:	f7f9 fe4d 	bl	8000390 <__aeabi_uldivmod>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4613      	mov	r3, r2
 80066fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006704:	d308      	bcc.n	8006718 <UART_SetConfig+0x430>
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800670c:	d204      	bcs.n	8006718 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	60da      	str	r2, [r3, #12]
 8006716:	e0ce      	b.n	80068b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800671e:	e0ca      	b.n	80068b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006728:	d166      	bne.n	80067f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800672a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800672e:	2b08      	cmp	r3, #8
 8006730:	d827      	bhi.n	8006782 <UART_SetConfig+0x49a>
 8006732:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <UART_SetConfig+0x450>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006765 	.word	0x08006765
 8006740:	0800676d 	.word	0x0800676d
 8006744:	08006783 	.word	0x08006783
 8006748:	08006773 	.word	0x08006773
 800674c:	08006783 	.word	0x08006783
 8006750:	08006783 	.word	0x08006783
 8006754:	08006783 	.word	0x08006783
 8006758:	0800677b 	.word	0x0800677b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800675c:	f7fe fdd2 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 8006760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006762:	e014      	b.n	800678e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006764:	f7fe fde4 	bl	8005330 <HAL_RCC_GetPCLK2Freq>
 8006768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800676a:	e010      	b.n	800678e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800676c:	4b4e      	ldr	r3, [pc, #312]	@ (80068a8 <UART_SetConfig+0x5c0>)
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006770:	e00d      	b.n	800678e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006772:	f7fe fd59 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8006776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006778:	e009      	b.n	800678e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006780:	e005      	b.n	800678e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800678c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8090 	beq.w	80068b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	4a44      	ldr	r2, [pc, #272]	@ (80068ac <UART_SetConfig+0x5c4>)
 800679c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a8:	005a      	lsls	r2, r3, #1
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	441a      	add	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	2b0f      	cmp	r3, #15
 80067c0:	d916      	bls.n	80067f0 <UART_SetConfig+0x508>
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c8:	d212      	bcs.n	80067f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f023 030f 	bic.w	r3, r3, #15
 80067d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	b29a      	uxth	r2, r3
 80067e0:	8bfb      	ldrh	r3, [r7, #30]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	8bfa      	ldrh	r2, [r7, #30]
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	e062      	b.n	80068b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067f6:	e05e      	b.n	80068b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d828      	bhi.n	8006852 <UART_SetConfig+0x56a>
 8006800:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <UART_SetConfig+0x520>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	0800682d 	.word	0x0800682d
 800680c:	08006835 	.word	0x08006835
 8006810:	0800683d 	.word	0x0800683d
 8006814:	08006853 	.word	0x08006853
 8006818:	08006843 	.word	0x08006843
 800681c:	08006853 	.word	0x08006853
 8006820:	08006853 	.word	0x08006853
 8006824:	08006853 	.word	0x08006853
 8006828:	0800684b 	.word	0x0800684b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682c:	f7fe fd6a 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006832:	e014      	b.n	800685e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006834:	f7fe fd7c 	bl	8005330 <HAL_RCC_GetPCLK2Freq>
 8006838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800683a:	e010      	b.n	800685e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683c:	4b1a      	ldr	r3, [pc, #104]	@ (80068a8 <UART_SetConfig+0x5c0>)
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006840:	e00d      	b.n	800685e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe fcf1 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8006846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006848:	e009      	b.n	800685e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006850:	e005      	b.n	800685e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800685c:	bf00      	nop
    }

    if (pclk != 0U)
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d028      	beq.n	80068b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	4a10      	ldr	r2, [pc, #64]	@ (80068ac <UART_SetConfig+0x5c4>)
 800686a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800686e:	461a      	mov	r2, r3
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	fbb3 f2f2 	udiv	r2, r3, r2
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	441a      	add	r2, r3
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d910      	bls.n	80068b0 <UART_SetConfig+0x5c8>
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006894:	d20c      	bcs.n	80068b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	b29a      	uxth	r2, r3
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
 80068a0:	e009      	b.n	80068b6 <UART_SetConfig+0x5ce>
 80068a2:	bf00      	nop
 80068a4:	40008000 	.word	0x40008000
 80068a8:	00f42400 	.word	0x00f42400
 80068ac:	08017de4 	.word	0x08017de4
      }
      else
      {
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2200      	movs	r2, #0
 80068ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80068d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3730      	adds	r7, #48	@ 0x30
 80068da:	46bd      	mov	sp, r7
 80068dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01a      	beq.n	80069f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069de:	d10a      	bne.n	80069f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b098      	sub	sp, #96	@ 0x60
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a34:	f7fb fa46 	bl	8001ec4 <HAL_GetTick>
 8006a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d12f      	bne.n	8006aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f88e 	bl	8006b78 <UART_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d022      	beq.n	8006aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e6      	bne.n	8006a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e063      	b.n	8006b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d149      	bne.n	8006b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f857 	bl	8006b78 <UART_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d03c      	beq.n	8006b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e6      	bne.n	8006ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b22:	61fa      	str	r2, [r7, #28]
 8006b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	69b9      	ldr	r1, [r7, #24]
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e012      	b.n	8006b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3758      	adds	r7, #88	@ 0x58
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	4613      	mov	r3, r2
 8006b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b88:	e04f      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b90:	d04b      	beq.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b92:	f7fb f997 	bl	8001ec4 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e04e      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d037      	beq.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b80      	cmp	r3, #128	@ 0x80
 8006bbe:	d034      	beq.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b40      	cmp	r3, #64	@ 0x40
 8006bc4:	d031      	beq.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d110      	bne.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2208      	movs	r2, #8
 8006bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f920 	bl	8006e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2208      	movs	r2, #8
 8006be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e029      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c04:	d111      	bne.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 f906 	bl	8006e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e00f      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4013      	ands	r3, r2
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	bf0c      	ite	eq
 8006c3a:	2301      	moveq	r3, #1
 8006c3c:	2300      	movne	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d0a0      	beq.n	8006b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b096      	sub	sp, #88	@ 0x58
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2222      	movs	r2, #34	@ 0x22
 8006c7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02d      	beq.n	8006ce6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c90:	4a40      	ldr	r2, [pc, #256]	@ (8006d94 <UART_Start_Receive_DMA+0x140>)
 8006c92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8006d98 <UART_Start_Receive_DMA+0x144>)
 8006c9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ca4:	4a3d      	ldr	r2, [pc, #244]	@ (8006d9c <UART_Start_Receive_DMA+0x148>)
 8006ca6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cae:	2200      	movs	r2, #0
 8006cb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3324      	adds	r3, #36	@ 0x24
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	f7fd f8e2 	bl	8003e90 <HAL_DMA_Start_IT>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2210      	movs	r2, #16
 8006cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e051      	b.n	8006d8a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3308      	adds	r3, #8
 8006d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d40:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e5      	bne.n	8006d20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	613b      	str	r3, [r7, #16]
   return(result);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d74:	623a      	str	r2, [r7, #32]
 8006d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	69f9      	ldr	r1, [r7, #28]
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e5      	bne.n	8006d54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3758      	adds	r7, #88	@ 0x58
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	08006fa5 	.word	0x08006fa5
 8006d98:	080070d1 	.word	0x080070d1
 8006d9c:	0800710f 	.word	0x0800710f

08006da0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b08f      	sub	sp, #60	@ 0x3c
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dc8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e6      	bne.n	8006da8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dfa:	61ba      	str	r2, [r7, #24]
 8006dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6979      	ldr	r1, [r7, #20]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	613b      	str	r3, [r7, #16]
   return(result);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006e16:	bf00      	nop
 8006e18:	373c      	adds	r7, #60	@ 0x3c
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b095      	sub	sp, #84	@ 0x54
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e3      	bne.n	8006e5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d118      	bne.n	8006ece <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f023 0310 	bic.w	r3, r3, #16
 8006eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e6      	bne.n	8006e9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ee2:	bf00      	nop
 8006ee4:	3754      	adds	r7, #84	@ 0x54
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b090      	sub	sp, #64	@ 0x40
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d137      	bne.n	8006f7a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	623b      	str	r3, [r7, #32]
   return(result);
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f32:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e5      	bne.n	8006f12 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	69b9      	ldr	r1, [r7, #24]
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	617b      	str	r3, [r7, #20]
   return(result);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f78:	e002      	b.n	8006f80 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f7a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006f7c:	f7ff f976 	bl	800626c <HAL_UART_TxCpltCallback>
}
 8006f80:	bf00      	nop
 8006f82:	3740      	adds	r7, #64	@ 0x40
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff f972 	bl	8006280 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b09c      	sub	sp, #112	@ 0x70
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d171      	bne.n	80070a4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fe6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fe8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e6      	bne.n	8006fc8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800700a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700c:	f023 0301 	bic.w	r3, r3, #1
 8007010:	667b      	str	r3, [r7, #100]	@ 0x64
 8007012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800701a:	647a      	str	r2, [r7, #68]	@ 0x44
 800701c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007020:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e5      	bne.n	8006ffa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	623b      	str	r3, [r7, #32]
   return(result);
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007044:	663b      	str	r3, [r7, #96]	@ 0x60
 8007046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800704e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007050:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007064:	2220      	movs	r2, #32
 8007066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800706e:	2b01      	cmp	r3, #1
 8007070:	d118      	bne.n	80070a4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	69b9      	ldr	r1, [r7, #24]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	617b      	str	r3, [r7, #20]
   return(result);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e6      	bne.n	8007072 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070a6:	2200      	movs	r2, #0
 80070a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d107      	bne.n	80070c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070b8:	4619      	mov	r1, r3
 80070ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070bc:	f7ff f908 	bl	80062d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070c0:	e002      	b.n	80070c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070c4:	f7ff f8e6 	bl	8006294 <HAL_UART_RxCpltCallback>
}
 80070c8:	bf00      	nop
 80070ca:	3770      	adds	r7, #112	@ 0x70
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d109      	bne.n	8007100 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff f8e9 	bl	80062d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070fe:	e002      	b.n	8007106 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff f8d1 	bl	80062a8 <HAL_UART_RxHalfCpltCallback>
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b086      	sub	sp, #24
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007122:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800712a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007136:	2b80      	cmp	r3, #128	@ 0x80
 8007138:	d109      	bne.n	800714e <UART_DMAError+0x40>
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b21      	cmp	r3, #33	@ 0x21
 800713e:	d106      	bne.n	800714e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2200      	movs	r2, #0
 8007144:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007148:	6978      	ldr	r0, [r7, #20]
 800714a:	f7ff fe29 	bl	8006da0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007158:	2b40      	cmp	r3, #64	@ 0x40
 800715a:	d109      	bne.n	8007170 <UART_DMAError+0x62>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b22      	cmp	r3, #34	@ 0x22
 8007160:	d106      	bne.n	8007170 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2200      	movs	r2, #0
 8007166:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800716a:	6978      	ldr	r0, [r7, #20]
 800716c:	f7ff fe59 	bl	8006e22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007176:	f043 0210 	orr.w	r2, r3, #16
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007180:	6978      	ldr	r0, [r7, #20]
 8007182:	f7ff f89b 	bl	80062bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007186:	bf00      	nop
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff f889 	bl	80062bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b088      	sub	sp, #32
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6979      	ldr	r1, [r7, #20]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	613b      	str	r3, [r7, #16]
   return(result);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e6      	bne.n	80071ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff f836 	bl	800626c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007200:	bf00      	nop
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_UARTEx_DisableFifoMode+0x16>
 8007256:	2302      	movs	r3, #2
 8007258:	e027      	b.n	80072aa <HAL_UARTEx_DisableFifoMode+0x66>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2224      	movs	r2, #36	@ 0x24
 8007266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0201 	bic.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007288:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e02d      	b.n	800732a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2224      	movs	r2, #36	@ 0x24
 80072da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0201 	bic.w	r2, r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f850 	bl	80073b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007346:	2302      	movs	r3, #2
 8007348:	e02d      	b.n	80073a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2224      	movs	r2, #36	@ 0x24
 8007356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f812 	bl	80073b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073d0:	e031      	b.n	8007436 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073d2:	2308      	movs	r3, #8
 80073d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073d6:	2308      	movs	r3, #8
 80073d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	0e5b      	lsrs	r3, r3, #25
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	0f5b      	lsrs	r3, r3, #29
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	7b3a      	ldrb	r2, [r7, #12]
 80073fe:	4911      	ldr	r1, [pc, #68]	@ (8007444 <UARTEx_SetNbDataToProcess+0x94>)
 8007400:	5c8a      	ldrb	r2, [r1, r2]
 8007402:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007406:	7b3a      	ldrb	r2, [r7, #12]
 8007408:	490f      	ldr	r1, [pc, #60]	@ (8007448 <UARTEx_SetNbDataToProcess+0x98>)
 800740a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800740c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	7b7a      	ldrb	r2, [r7, #13]
 800741c:	4909      	ldr	r1, [pc, #36]	@ (8007444 <UARTEx_SetNbDataToProcess+0x94>)
 800741e:	5c8a      	ldrb	r2, [r1, r2]
 8007420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007424:	7b7a      	ldrb	r2, [r7, #13]
 8007426:	4908      	ldr	r1, [pc, #32]	@ (8007448 <UARTEx_SetNbDataToProcess+0x98>)
 8007428:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800742a:	fb93 f3f2 	sdiv	r3, r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007436:	bf00      	nop
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	08017dfc 	.word	0x08017dfc
 8007448:	08017e04 	.word	0x08017e04

0800744c <__NVIC_SetPriority>:
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745c:	2b00      	cmp	r3, #0
 800745e:	db0a      	blt.n	8007476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	490c      	ldr	r1, [pc, #48]	@ (8007498 <__NVIC_SetPriority+0x4c>)
 8007466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746a:	0112      	lsls	r2, r2, #4
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	440b      	add	r3, r1
 8007470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007474:	e00a      	b.n	800748c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	4908      	ldr	r1, [pc, #32]	@ (800749c <__NVIC_SetPriority+0x50>)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	3b04      	subs	r3, #4
 8007484:	0112      	lsls	r2, r2, #4
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	440b      	add	r3, r1
 800748a:	761a      	strb	r2, [r3, #24]
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	e000e100 	.word	0xe000e100
 800749c:	e000ed00 	.word	0xe000ed00

080074a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074a4:	2100      	movs	r1, #0
 80074a6:	f06f 0004 	mvn.w	r0, #4
 80074aa:	f7ff ffcf 	bl	800744c <__NVIC_SetPriority>
#endif
}
 80074ae:	bf00      	nop
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ba:	f3ef 8305 	mrs	r3, IPSR
 80074be:	603b      	str	r3, [r7, #0]
  return(result);
 80074c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80074c6:	f06f 0305 	mvn.w	r3, #5
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	e00c      	b.n	80074e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074ce:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <osKernelInitialize+0x44>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d105      	bne.n	80074e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074d6:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <osKernelInitialize+0x44>)
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074dc:	2300      	movs	r3, #0
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	e002      	b.n	80074e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074e8:	687b      	ldr	r3, [r7, #4]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	20006700 	.word	0x20006700

080074fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007502:	f3ef 8305 	mrs	r3, IPSR
 8007506:	603b      	str	r3, [r7, #0]
  return(result);
 8007508:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <osKernelStart+0x1a>
    stat = osErrorISR;
 800750e:	f06f 0305 	mvn.w	r3, #5
 8007512:	607b      	str	r3, [r7, #4]
 8007514:	e010      	b.n	8007538 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007516:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <osKernelStart+0x48>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d109      	bne.n	8007532 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800751e:	f7ff ffbf 	bl	80074a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007522:	4b08      	ldr	r3, [pc, #32]	@ (8007544 <osKernelStart+0x48>)
 8007524:	2202      	movs	r2, #2
 8007526:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007528:	f001 f87a 	bl	8008620 <vTaskStartScheduler>
      stat = osOK;
 800752c:	2300      	movs	r3, #0
 800752e:	607b      	str	r3, [r7, #4]
 8007530:	e002      	b.n	8007538 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007536:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007538:	687b      	ldr	r3, [r7, #4]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20006700 	.word	0x20006700

08007548 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b08e      	sub	sp, #56	@ 0x38
 800754c:	af04      	add	r7, sp, #16
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007558:	f3ef 8305 	mrs	r3, IPSR
 800755c:	617b      	str	r3, [r7, #20]
  return(result);
 800755e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007560:	2b00      	cmp	r3, #0
 8007562:	d17e      	bne.n	8007662 <osThreadNew+0x11a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d07b      	beq.n	8007662 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800756a:	2380      	movs	r3, #128	@ 0x80
 800756c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800756e:	2318      	movs	r3, #24
 8007570:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800757a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d045      	beq.n	800760e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <osThreadNew+0x48>
        name = attr->name;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <osThreadNew+0x6e>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b38      	cmp	r3, #56	@ 0x38
 80075a8:	d805      	bhi.n	80075b6 <osThreadNew+0x6e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <osThreadNew+0x72>
        return (NULL);
 80075b6:	2300      	movs	r3, #0
 80075b8:	e054      	b.n	8007664 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	089b      	lsrs	r3, r3, #2
 80075c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00e      	beq.n	80075f0 <osThreadNew+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80075d8:	d90a      	bls.n	80075f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d006      	beq.n	80075f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <osThreadNew+0xa8>
        mem = 1;
 80075ea:	2301      	movs	r3, #1
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	e010      	b.n	8007612 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10c      	bne.n	8007612 <osThreadNew+0xca>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d108      	bne.n	8007612 <osThreadNew+0xca>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <osThreadNew+0xca>
          mem = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]
 800760c:	e001      	b.n	8007612 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d110      	bne.n	800763a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007620:	9202      	str	r2, [sp, #8]
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6a3a      	ldr	r2, [r7, #32]
 800762c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fe1a 	bl	8008268 <xTaskCreateStatic>
 8007634:	4603      	mov	r3, r0
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	e013      	b.n	8007662 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d110      	bne.n	8007662 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	b29a      	uxth	r2, r3
 8007644:	f107 0310 	add.w	r3, r7, #16
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fe68 	bl	8008328 <xTaskCreate>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d001      	beq.n	8007662 <osThreadNew+0x11a>
            hTask = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007662:	693b      	ldr	r3, [r7, #16]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3728      	adds	r7, #40	@ 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007674:	f3ef 8305 	mrs	r3, IPSR
 8007678:	60bb      	str	r3, [r7, #8]
  return(result);
 800767a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <osDelay+0x1c>
    stat = osErrorISR;
 8007680:	f06f 0305 	mvn.w	r3, #5
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e007      	b.n	8007698 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 ff8e 	bl	80085b4 <vTaskDelay>
    }
  }

  return (stat);
 8007698:	68fb      	ldr	r3, [r7, #12]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a07      	ldr	r2, [pc, #28]	@ (80076d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80076b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4a06      	ldr	r2, [pc, #24]	@ (80076d4 <vApplicationGetIdleTaskMemory+0x30>)
 80076ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2280      	movs	r2, #128	@ 0x80
 80076c0:	601a      	str	r2, [r3, #0]
}
 80076c2:	bf00      	nop
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20006704 	.word	0x20006704
 80076d4:	20006760 	.word	0x20006760

080076d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a07      	ldr	r2, [pc, #28]	@ (8007704 <vApplicationGetTimerTaskMemory+0x2c>)
 80076e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4a06      	ldr	r2, [pc, #24]	@ (8007708 <vApplicationGetTimerTaskMemory+0x30>)
 80076ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076f6:	601a      	str	r2, [r3, #0]
}
 80076f8:	bf00      	nop
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20006960 	.word	0x20006960
 8007708:	200069bc 	.word	0x200069bc

0800770c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f103 0208 	add.w	r2, r3, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f103 0208 	add.w	r2, r3, #8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f103 0208 	add.w	r2, r3, #8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077ae:	b480      	push	{r7}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077c4:	d103      	bne.n	80077ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e00c      	b.n	80077e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3308      	adds	r3, #8
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e002      	b.n	80077dc <vListInsert+0x2e>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d2f6      	bcs.n	80077d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6892      	ldr	r2, [r2, #8]
 8007836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6852      	ldr	r2, [r2, #4]
 8007840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d103      	bne.n	8007854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10b      	bne.n	80078a0 <xQueueGenericReset+0x2c>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60bb      	str	r3, [r7, #8]
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	e7fd      	b.n	800789c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078a0:	f002 f8a2 	bl	80099e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ac:	68f9      	ldr	r1, [r7, #12]
 80078ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d0:	3b01      	subs	r3, #1
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	441a      	add	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	22ff      	movs	r2, #255	@ 0xff
 80078e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	22ff      	movs	r2, #255	@ 0xff
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d114      	bne.n	8007920 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01a      	beq.n	8007934 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3310      	adds	r3, #16
 8007902:	4618      	mov	r0, r3
 8007904:	f001 f91a 	bl	8008b3c <xTaskRemoveFromEventList>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d012      	beq.n	8007934 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800790e:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <xQueueGenericReset+0xd0>)
 8007910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	e009      	b.n	8007934 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3310      	adds	r3, #16
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fef1 	bl	800770c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3324      	adds	r3, #36	@ 0x24
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff feec 	bl	800770c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007934:	f002 f88a 	bl	8009a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007938:	2301      	movs	r3, #1
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08e      	sub	sp, #56	@ 0x38
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10b      	bne.n	8007974 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800796e:	bf00      	nop
 8007970:	bf00      	nop
 8007972:	e7fd      	b.n	8007970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10b      	bne.n	8007992 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <xQueueGenericCreateStatic+0x56>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <xQueueGenericCreateStatic+0x5a>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericCreateStatic+0x5c>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	e7fd      	b.n	80079bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <xQueueGenericCreateStatic+0x84>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <xQueueGenericCreateStatic+0x88>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <xQueueGenericCreateStatic+0x8a>
 80079d0:	2300      	movs	r3, #0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10b      	bne.n	80079ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	61fb      	str	r3, [r7, #28]
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	e7fd      	b.n	80079ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079ee:	2350      	movs	r3, #80	@ 0x50
 80079f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b50      	cmp	r3, #80	@ 0x50
 80079f6:	d00b      	beq.n	8007a10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	61bb      	str	r3, [r7, #24]
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00d      	beq.n	8007a38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 f805 	bl	8007a42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3730      	adds	r7, #48	@ 0x30
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d103      	bne.n	8007a5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e002      	b.n	8007a64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a70:	2101      	movs	r1, #1
 8007a72:	69b8      	ldr	r0, [r7, #24]
 8007a74:	f7ff fefe 	bl	8007874 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	78fa      	ldrb	r2, [r7, #3]
 8007a7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08e      	sub	sp, #56	@ 0x38
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a96:	2300      	movs	r3, #0
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10b      	bne.n	8007abc <xQueueGenericSend+0x34>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	e7fd      	b.n	8007ab8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <xQueueGenericSend+0x42>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <xQueueGenericSend+0x46>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <xQueueGenericSend+0x48>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <xQueueGenericSend+0x64>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	e7fd      	b.n	8007ae8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d103      	bne.n	8007afa <xQueueGenericSend+0x72>
 8007af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <xQueueGenericSend+0x76>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <xQueueGenericSend+0x78>
 8007afe:	2300      	movs	r3, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10b      	bne.n	8007b1c <xQueueGenericSend+0x94>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	623b      	str	r3, [r7, #32]
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	e7fd      	b.n	8007b18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b1c:	f001 f9f6 	bl	8008f0c <xTaskGetSchedulerState>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <xQueueGenericSend+0xa4>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <xQueueGenericSend+0xa8>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e000      	b.n	8007b32 <xQueueGenericSend+0xaa>
 8007b30:	2300      	movs	r3, #0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <xQueueGenericSend+0xc6>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	61fb      	str	r3, [r7, #28]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b4e:	f001 ff4b 	bl	80099e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d302      	bcc.n	8007b64 <xQueueGenericSend+0xdc>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d129      	bne.n	8007bb8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b6a:	f000 fa0f 	bl	8007f8c <prvCopyDataToQueue>
 8007b6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d010      	beq.n	8007b9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	3324      	adds	r3, #36	@ 0x24
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 ffdd 	bl	8008b3c <xTaskRemoveFromEventList>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d013      	beq.n	8007bb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b88:	4b3f      	ldr	r3, [pc, #252]	@ (8007c88 <xQueueGenericSend+0x200>)
 8007b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	e00a      	b.n	8007bb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d007      	beq.n	8007bb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ba0:	4b39      	ldr	r3, [pc, #228]	@ (8007c88 <xQueueGenericSend+0x200>)
 8007ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bb0:	f001 ff4c 	bl	8009a4c <vPortExitCritical>
				return pdPASS;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e063      	b.n	8007c80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d103      	bne.n	8007bc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bbe:	f001 ff45 	bl	8009a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e05c      	b.n	8007c80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 f83f 	bl	8008c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bda:	f001 ff37 	bl	8009a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bde:	f000 fd87 	bl	80086f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007be2:	f001 ff01 	bl	80099e8 <vPortEnterCritical>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bf2:	d103      	bne.n	8007bfc <xQueueGenericSend+0x174>
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c08:	d103      	bne.n	8007c12 <xQueueGenericSend+0x18a>
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c12:	f001 ff1b 	bl	8009a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c16:	1d3a      	adds	r2, r7, #4
 8007c18:	f107 0314 	add.w	r3, r7, #20
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 f82e 	bl	8008c80 <xTaskCheckForTimeOut>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d124      	bne.n	8007c74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c2c:	f000 faa6 	bl	800817c <prvIsQueueFull>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d018      	beq.n	8007c68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	3310      	adds	r3, #16
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 ff2a 	bl	8008a98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c46:	f000 fa31 	bl	80080ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c4a:	f000 fd5f 	bl	800870c <xTaskResumeAll>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f47f af7c 	bne.w	8007b4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c56:	4b0c      	ldr	r3, [pc, #48]	@ (8007c88 <xQueueGenericSend+0x200>)
 8007c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	e772      	b.n	8007b4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c6a:	f000 fa1f 	bl	80080ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c6e:	f000 fd4d 	bl	800870c <xTaskResumeAll>
 8007c72:	e76c      	b.n	8007b4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c76:	f000 fa19 	bl	80080ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c7a:	f000 fd47 	bl	800870c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3738      	adds	r7, #56	@ 0x38
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b090      	sub	sp, #64	@ 0x40
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10b      	bne.n	8007cbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	e7fd      	b.n	8007cb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d103      	bne.n	8007cca <xQueueGenericSendFromISR+0x3e>
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <xQueueGenericSendFromISR+0x42>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <xQueueGenericSendFromISR+0x44>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10b      	bne.n	8007cec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ce6:	bf00      	nop
 8007ce8:	bf00      	nop
 8007cea:	e7fd      	b.n	8007ce8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d103      	bne.n	8007cfa <xQueueGenericSendFromISR+0x6e>
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d101      	bne.n	8007cfe <xQueueGenericSendFromISR+0x72>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e000      	b.n	8007d00 <xQueueGenericSendFromISR+0x74>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	623b      	str	r3, [r7, #32]
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d1c:	f001 ff44 	bl	8009ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d20:	f3ef 8211 	mrs	r2, BASEPRI
 8007d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	61fa      	str	r2, [r7, #28]
 8007d36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d302      	bcc.n	8007d4e <xQueueGenericSendFromISR+0xc2>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d12f      	bne.n	8007dae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d64:	f000 f912 	bl	8007f8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d70:	d112      	bne.n	8007d98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d016      	beq.n	8007da8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7c:	3324      	adds	r3, #36	@ 0x24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fedc 	bl	8008b3c <xTaskRemoveFromEventList>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00e      	beq.n	8007da8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e007      	b.n	8007da8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	b25a      	sxtb	r2, r3
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007da8:	2301      	movs	r3, #1
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007dac:	e001      	b.n	8007db2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3740      	adds	r7, #64	@ 0x40
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08c      	sub	sp, #48	@ 0x30
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10b      	bne.n	8007dfa <xQueueReceive+0x32>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	623b      	str	r3, [r7, #32]
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	e7fd      	b.n	8007df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d103      	bne.n	8007e08 <xQueueReceive+0x40>
 8007e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <xQueueReceive+0x44>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <xQueueReceive+0x46>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <xQueueReceive+0x62>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	61fb      	str	r3, [r7, #28]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e2a:	f001 f86f 	bl	8008f0c <xTaskGetSchedulerState>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <xQueueReceive+0x72>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <xQueueReceive+0x76>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <xQueueReceive+0x78>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <xQueueReceive+0x94>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	61bb      	str	r3, [r7, #24]
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	e7fd      	b.n	8007e58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e5c:	f001 fdc4 	bl	80099e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01f      	beq.n	8007eac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e70:	f000 f8f6 	bl	8008060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	1e5a      	subs	r2, r3, #1
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00f      	beq.n	8007ea4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	3310      	adds	r3, #16
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fe57 	bl	8008b3c <xTaskRemoveFromEventList>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e94:	4b3c      	ldr	r3, [pc, #240]	@ (8007f88 <xQueueReceive+0x1c0>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ea4:	f001 fdd2 	bl	8009a4c <vPortExitCritical>
				return pdPASS;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e069      	b.n	8007f80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eb2:	f001 fdcb 	bl	8009a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e062      	b.n	8007f80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ec0:	f107 0310 	add.w	r3, r7, #16
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fec5 	bl	8008c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ece:	f001 fdbd 	bl	8009a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ed2:	f000 fc0d 	bl	80086f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ed6:	f001 fd87 	bl	80099e8 <vPortEnterCritical>
 8007eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ee0:	b25b      	sxtb	r3, r3
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ee6:	d103      	bne.n	8007ef0 <xQueueReceive+0x128>
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef6:	b25b      	sxtb	r3, r3
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007efc:	d103      	bne.n	8007f06 <xQueueReceive+0x13e>
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f06:	f001 fda1 	bl	8009a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f0a:	1d3a      	adds	r2, r7, #4
 8007f0c:	f107 0310 	add.w	r3, r7, #16
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 feb4 	bl	8008c80 <xTaskCheckForTimeOut>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d123      	bne.n	8007f66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f20:	f000 f916 	bl	8008150 <prvIsQueueEmpty>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d017      	beq.n	8007f5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2c:	3324      	adds	r3, #36	@ 0x24
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	4611      	mov	r1, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fdb0 	bl	8008a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f3a:	f000 f8b7 	bl	80080ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f3e:	f000 fbe5 	bl	800870c <xTaskResumeAll>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d189      	bne.n	8007e5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f48:	4b0f      	ldr	r3, [pc, #60]	@ (8007f88 <xQueueReceive+0x1c0>)
 8007f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	e780      	b.n	8007e5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f5c:	f000 f8a6 	bl	80080ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f60:	f000 fbd4 	bl	800870c <xTaskResumeAll>
 8007f64:	e77a      	b.n	8007e5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f68:	f000 f8a0 	bl	80080ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f6c:	f000 fbce 	bl	800870c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f72:	f000 f8ed 	bl	8008150 <prvIsQueueEmpty>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f43f af6f 	beq.w	8007e5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3730      	adds	r7, #48	@ 0x30
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10d      	bne.n	8007fc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d14d      	bne.n	800804e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 ffc6 	bl	8008f48 <xTaskPriorityDisinherit>
 8007fbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	609a      	str	r2, [r3, #8]
 8007fc4:	e043      	b.n	800804e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d119      	bne.n	8008000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6858      	ldr	r0, [r3, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	f00e ffa7 	bl	8016f2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d32b      	bcc.n	800804e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	e026      	b.n	800804e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	68d8      	ldr	r0, [r3, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008008:	461a      	mov	r2, r3
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	f00e ff8d 	bl	8016f2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008018:	425b      	negs	r3, r3
 800801a:	441a      	add	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d207      	bcs.n	800803c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	425b      	negs	r3, r3
 8008036:	441a      	add	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d105      	bne.n	800804e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3b01      	subs	r3, #1
 800804c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008056:	697b      	ldr	r3, [r7, #20]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d018      	beq.n	80080a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807a:	441a      	add	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	429a      	cmp	r2, r3
 800808a:	d303      	bcc.n	8008094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68d9      	ldr	r1, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	461a      	mov	r2, r3
 800809e:	6838      	ldr	r0, [r7, #0]
 80080a0:	f00e ff43 	bl	8016f2a <memcpy>
	}
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080b4:	f001 fc98 	bl	80099e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080c0:	e011      	b.n	80080e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d012      	beq.n	80080f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3324      	adds	r3, #36	@ 0x24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fd34 	bl	8008b3c <xTaskRemoveFromEventList>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080da:	f000 fe35 	bl	8008d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dce9      	bgt.n	80080c2 <prvUnlockQueue+0x16>
 80080ee:	e000      	b.n	80080f2 <prvUnlockQueue+0x46>
					break;
 80080f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	22ff      	movs	r2, #255	@ 0xff
 80080f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080fa:	f001 fca7 	bl	8009a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080fe:	f001 fc73 	bl	80099e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800810a:	e011      	b.n	8008130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d012      	beq.n	800813a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3310      	adds	r3, #16
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fd0f 	bl	8008b3c <xTaskRemoveFromEventList>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008124:	f000 fe10 	bl	8008d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	3b01      	subs	r3, #1
 800812c:	b2db      	uxtb	r3, r3
 800812e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	dce9      	bgt.n	800810c <prvUnlockQueue+0x60>
 8008138:	e000      	b.n	800813c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800813a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	22ff      	movs	r2, #255	@ 0xff
 8008140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008144:	f001 fc82 	bl	8009a4c <vPortExitCritical>
}
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008158:	f001 fc46 	bl	80099e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e001      	b.n	800816e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800816e:	f001 fc6d 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 8008172:	68fb      	ldr	r3, [r7, #12]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008184:	f001 fc30 	bl	80099e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008190:	429a      	cmp	r2, r3
 8008192:	d102      	bne.n	800819a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e001      	b.n	800819e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800819e:	f001 fc55 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 80081a2:	68fb      	ldr	r3, [r7, #12]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	e014      	b.n	80081e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081bc:	4a0f      	ldr	r2, [pc, #60]	@ (80081fc <vQueueAddToRegistry+0x50>)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081c8:	490c      	ldr	r1, [pc, #48]	@ (80081fc <vQueueAddToRegistry+0x50>)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081d2:	4a0a      	ldr	r2, [pc, #40]	@ (80081fc <vQueueAddToRegistry+0x50>)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4413      	add	r3, r2
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081de:	e006      	b.n	80081ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b07      	cmp	r3, #7
 80081ea:	d9e7      	bls.n	80081bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20006dbc 	.word	0x20006dbc

08008200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008210:	f001 fbea 	bl	80099e8 <vPortEnterCritical>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800821a:	b25b      	sxtb	r3, r3
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008220:	d103      	bne.n	800822a <vQueueWaitForMessageRestricted+0x2a>
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008230:	b25b      	sxtb	r3, r3
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008236:	d103      	bne.n	8008240 <vQueueWaitForMessageRestricted+0x40>
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008240:	f001 fc04 	bl	8009a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3324      	adds	r3, #36	@ 0x24
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fc45 	bl	8008ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800825a:	6978      	ldr	r0, [r7, #20]
 800825c:	f7ff ff26 	bl	80080ac <prvUnlockQueue>
	}
 8008260:	bf00      	nop
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08e      	sub	sp, #56	@ 0x38
 800826c:	af04      	add	r7, sp, #16
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10b      	bne.n	8008294 <xTaskCreateStatic+0x2c>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	623b      	str	r3, [r7, #32]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	61fb      	str	r3, [r7, #28]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082b2:	235c      	movs	r3, #92	@ 0x5c
 80082b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80082ba:	d00b      	beq.n	80082d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	61bb      	str	r3, [r7, #24]
}
 80082ce:	bf00      	nop
 80082d0:	bf00      	nop
 80082d2:	e7fd      	b.n	80082d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01e      	beq.n	800831a <xTaskCreateStatic+0xb2>
 80082dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d01b      	beq.n	800831a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082f4:	2300      	movs	r3, #0
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	9302      	str	r3, [sp, #8]
 80082fc:	f107 0314 	add.w	r3, r7, #20
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f850 	bl	80083b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008314:	f000 f8de 	bl	80084d4 <prvAddNewTaskToReadyList>
 8008318:	e001      	b.n	800831e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800831e:	697b      	ldr	r3, [r7, #20]
	}
 8008320:	4618      	mov	r0, r3
 8008322:	3728      	adds	r7, #40	@ 0x28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08c      	sub	sp, #48	@ 0x30
 800832c:	af04      	add	r7, sp, #16
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fc75 	bl	8009c2c <pvPortMalloc>
 8008342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00e      	beq.n	8008368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800834a:	205c      	movs	r0, #92	@ 0x5c
 800834c:	f001 fc6e 	bl	8009c2c <pvPortMalloc>
 8008350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	631a      	str	r2, [r3, #48]	@ 0x30
 800835e:	e005      	b.n	800836c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008360:	6978      	ldr	r0, [r7, #20]
 8008362:	f001 fd31 	bl	8009dc8 <vPortFree>
 8008366:	e001      	b.n	800836c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d017      	beq.n	80083a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	2300      	movs	r3, #0
 800837e:	9303      	str	r3, [sp, #12]
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	9302      	str	r3, [sp, #8]
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f80e 	bl	80083b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008396:	69f8      	ldr	r0, [r7, #28]
 8008398:	f000 f89c 	bl	80084d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800839c:	2301      	movs	r3, #1
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	e002      	b.n	80083a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083a8:	69bb      	ldr	r3, [r7, #24]
	}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3720      	adds	r7, #32
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b088      	sub	sp, #32
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	607a      	str	r2, [r7, #4]
 80083be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	461a      	mov	r2, r3
 80083ca:	21a5      	movs	r1, #165	@ 0xa5
 80083cc:	f00e fce4 	bl	8016d98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083da:	3b01      	subs	r3, #1
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	f023 0307 	bic.w	r3, r3, #7
 80083e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00b      	beq.n	800840c <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	617b      	str	r3, [r7, #20]
}
 8008406:	bf00      	nop
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01f      	beq.n	8008452 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	e012      	b.n	800843e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	7819      	ldrb	r1, [r3, #0]
 8008420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	3334      	adds	r3, #52	@ 0x34
 8008428:	460a      	mov	r2, r1
 800842a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d006      	beq.n	8008446 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	3301      	adds	r3, #1
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2b0f      	cmp	r3, #15
 8008442:	d9e9      	bls.n	8008418 <prvInitialiseNewTask+0x66>
 8008444:	e000      	b.n	8008448 <prvInitialiseNewTask+0x96>
			{
				break;
 8008446:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008450:	e003      	b.n	800845a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800845a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845c:	2b37      	cmp	r3, #55	@ 0x37
 800845e:	d901      	bls.n	8008464 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008460:	2337      	movs	r3, #55	@ 0x37
 8008462:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008468:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800846e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008472:	2200      	movs	r2, #0
 8008474:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	3304      	adds	r3, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff f966 	bl	800774c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	3318      	adds	r3, #24
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff f961 	bl	800774c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800848e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008492:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	2200      	movs	r2, #0
 80084a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	68f9      	ldr	r1, [r7, #12]
 80084b2:	69b8      	ldr	r0, [r7, #24]
 80084b4:	f001 f966 	bl	8009784 <pxPortInitialiseStack>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ca:	bf00      	nop
 80084cc:	3720      	adds	r7, #32
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084dc:	f001 fa84 	bl	80099e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008598 <prvAddNewTaskToReadyList+0xc4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008598 <prvAddNewTaskToReadyList+0xc4>)
 80084e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084ea:	4b2c      	ldr	r3, [pc, #176]	@ (800859c <prvAddNewTaskToReadyList+0xc8>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084f2:	4a2a      	ldr	r2, [pc, #168]	@ (800859c <prvAddNewTaskToReadyList+0xc8>)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084f8:	4b27      	ldr	r3, [pc, #156]	@ (8008598 <prvAddNewTaskToReadyList+0xc4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d110      	bne.n	8008522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008500:	f000 fc46 	bl	8008d90 <prvInitialiseTaskLists>
 8008504:	e00d      	b.n	8008522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008506:	4b26      	ldr	r3, [pc, #152]	@ (80085a0 <prvAddNewTaskToReadyList+0xcc>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800850e:	4b23      	ldr	r3, [pc, #140]	@ (800859c <prvAddNewTaskToReadyList+0xc8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008518:	429a      	cmp	r2, r3
 800851a:	d802      	bhi.n	8008522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800851c:	4a1f      	ldr	r2, [pc, #124]	@ (800859c <prvAddNewTaskToReadyList+0xc8>)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008522:	4b20      	ldr	r3, [pc, #128]	@ (80085a4 <prvAddNewTaskToReadyList+0xd0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	4a1e      	ldr	r2, [pc, #120]	@ (80085a4 <prvAddNewTaskToReadyList+0xd0>)
 800852a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800852c:	4b1d      	ldr	r3, [pc, #116]	@ (80085a4 <prvAddNewTaskToReadyList+0xd0>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008538:	4b1b      	ldr	r3, [pc, #108]	@ (80085a8 <prvAddNewTaskToReadyList+0xd4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d903      	bls.n	8008548 <prvAddNewTaskToReadyList+0x74>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	4a18      	ldr	r2, [pc, #96]	@ (80085a8 <prvAddNewTaskToReadyList+0xd4>)
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4a15      	ldr	r2, [pc, #84]	@ (80085ac <prvAddNewTaskToReadyList+0xd8>)
 8008556:	441a      	add	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7ff f901 	bl	8007766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008564:	f001 fa72 	bl	8009a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008568:	4b0d      	ldr	r3, [pc, #52]	@ (80085a0 <prvAddNewTaskToReadyList+0xcc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00e      	beq.n	800858e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008570:	4b0a      	ldr	r3, [pc, #40]	@ (800859c <prvAddNewTaskToReadyList+0xc8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857a:	429a      	cmp	r2, r3
 800857c:	d207      	bcs.n	800858e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800857e:	4b0c      	ldr	r3, [pc, #48]	@ (80085b0 <prvAddNewTaskToReadyList+0xdc>)
 8008580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200072d0 	.word	0x200072d0
 800859c:	20006dfc 	.word	0x20006dfc
 80085a0:	200072dc 	.word	0x200072dc
 80085a4:	200072ec 	.word	0x200072ec
 80085a8:	200072d8 	.word	0x200072d8
 80085ac:	20006e00 	.word	0x20006e00
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d018      	beq.n	80085f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085c6:	4b14      	ldr	r3, [pc, #80]	@ (8008618 <vTaskDelay+0x64>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00b      	beq.n	80085e6 <vTaskDelay+0x32>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	60bb      	str	r3, [r7, #8]
}
 80085e0:	bf00      	nop
 80085e2:	bf00      	nop
 80085e4:	e7fd      	b.n	80085e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085e6:	f000 f883 	bl	80086f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085ea:	2100      	movs	r1, #0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fd1b 	bl	8009028 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085f2:	f000 f88b 	bl	800870c <xTaskResumeAll>
 80085f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d107      	bne.n	800860e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80085fe:	4b07      	ldr	r3, [pc, #28]	@ (800861c <vTaskDelay+0x68>)
 8008600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	200072f8 	.word	0x200072f8
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	@ 0x28
 8008624:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800862e:	463a      	mov	r2, r7
 8008630:	1d39      	adds	r1, r7, #4
 8008632:	f107 0308 	add.w	r3, r7, #8
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff f834 	bl	80076a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	9202      	str	r2, [sp, #8]
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	2300      	movs	r3, #0
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	2300      	movs	r3, #0
 800864c:	460a      	mov	r2, r1
 800864e:	4922      	ldr	r1, [pc, #136]	@ (80086d8 <vTaskStartScheduler+0xb8>)
 8008650:	4822      	ldr	r0, [pc, #136]	@ (80086dc <vTaskStartScheduler+0xbc>)
 8008652:	f7ff fe09 	bl	8008268 <xTaskCreateStatic>
 8008656:	4603      	mov	r3, r0
 8008658:	4a21      	ldr	r2, [pc, #132]	@ (80086e0 <vTaskStartScheduler+0xc0>)
 800865a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800865c:	4b20      	ldr	r3, [pc, #128]	@ (80086e0 <vTaskStartScheduler+0xc0>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008664:	2301      	movs	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e001      	b.n	800866e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800866a:	2300      	movs	r3, #0
 800866c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d102      	bne.n	800867a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008674:	f000 fd2c 	bl	80090d0 <xTimerCreateTimerTask>
 8008678:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d116      	bne.n	80086ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008694:	4b13      	ldr	r3, [pc, #76]	@ (80086e4 <vTaskStartScheduler+0xc4>)
 8008696:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800869a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800869c:	4b12      	ldr	r3, [pc, #72]	@ (80086e8 <vTaskStartScheduler+0xc8>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086a2:	4b12      	ldr	r3, [pc, #72]	@ (80086ec <vTaskStartScheduler+0xcc>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086a8:	f001 f8fa 	bl	80098a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086ac:	e00f      	b.n	80086ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086b4:	d10b      	bne.n	80086ce <vTaskStartScheduler+0xae>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	60fb      	str	r3, [r7, #12]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <vTaskStartScheduler+0xaa>
}
 80086ce:	bf00      	nop
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	08017d74 	.word	0x08017d74
 80086dc:	08008d61 	.word	0x08008d61
 80086e0:	200072f4 	.word	0x200072f4
 80086e4:	200072f0 	.word	0x200072f0
 80086e8:	200072dc 	.word	0x200072dc
 80086ec:	200072d4 	.word	0x200072d4

080086f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086f4:	4b04      	ldr	r3, [pc, #16]	@ (8008708 <vTaskSuspendAll+0x18>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	4a03      	ldr	r2, [pc, #12]	@ (8008708 <vTaskSuspendAll+0x18>)
 80086fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086fe:	bf00      	nop
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	200072f8 	.word	0x200072f8

0800870c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800871a:	4b42      	ldr	r3, [pc, #264]	@ (8008824 <xTaskResumeAll+0x118>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10b      	bne.n	800873a <xTaskResumeAll+0x2e>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	603b      	str	r3, [r7, #0]
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	e7fd      	b.n	8008736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800873a:	f001 f955 	bl	80099e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800873e:	4b39      	ldr	r3, [pc, #228]	@ (8008824 <xTaskResumeAll+0x118>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	4a37      	ldr	r2, [pc, #220]	@ (8008824 <xTaskResumeAll+0x118>)
 8008746:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008748:	4b36      	ldr	r3, [pc, #216]	@ (8008824 <xTaskResumeAll+0x118>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d162      	bne.n	8008816 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008750:	4b35      	ldr	r3, [pc, #212]	@ (8008828 <xTaskResumeAll+0x11c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d05e      	beq.n	8008816 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008758:	e02f      	b.n	80087ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875a:	4b34      	ldr	r3, [pc, #208]	@ (800882c <xTaskResumeAll+0x120>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3318      	adds	r3, #24
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff f85a 	bl	8007820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3304      	adds	r3, #4
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff f855 	bl	8007820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877a:	4b2d      	ldr	r3, [pc, #180]	@ (8008830 <xTaskResumeAll+0x124>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d903      	bls.n	800878a <xTaskResumeAll+0x7e>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	4a2a      	ldr	r2, [pc, #168]	@ (8008830 <xTaskResumeAll+0x124>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4a27      	ldr	r2, [pc, #156]	@ (8008834 <xTaskResumeAll+0x128>)
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3304      	adds	r3, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7fe ffe0 	bl	8007766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087aa:	4b23      	ldr	r3, [pc, #140]	@ (8008838 <xTaskResumeAll+0x12c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d302      	bcc.n	80087ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80087b4:	4b21      	ldr	r3, [pc, #132]	@ (800883c <xTaskResumeAll+0x130>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ba:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <xTaskResumeAll+0x120>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1cb      	bne.n	800875a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087c8:	f000 fb80 	bl	8008ecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008840 <xTaskResumeAll+0x134>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d010      	beq.n	80087fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087d8:	f000 f846 	bl	8008868 <xTaskIncrementTick>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80087e2:	4b16      	ldr	r3, [pc, #88]	@ (800883c <xTaskResumeAll+0x130>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f1      	bne.n	80087d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80087f4:	4b12      	ldr	r3, [pc, #72]	@ (8008840 <xTaskResumeAll+0x134>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087fa:	4b10      	ldr	r3, [pc, #64]	@ (800883c <xTaskResumeAll+0x130>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008802:	2301      	movs	r3, #1
 8008804:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008806:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <xTaskResumeAll+0x138>)
 8008808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008816:	f001 f919 	bl	8009a4c <vPortExitCritical>

	return xAlreadyYielded;
 800881a:	68bb      	ldr	r3, [r7, #8]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	200072f8 	.word	0x200072f8
 8008828:	200072d0 	.word	0x200072d0
 800882c:	20007290 	.word	0x20007290
 8008830:	200072d8 	.word	0x200072d8
 8008834:	20006e00 	.word	0x20006e00
 8008838:	20006dfc 	.word	0x20006dfc
 800883c:	200072e4 	.word	0x200072e4
 8008840:	200072e0 	.word	0x200072e0
 8008844:	e000ed04 	.word	0xe000ed04

08008848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800884e:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <xTaskGetTickCount+0x1c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008854:	687b      	ldr	r3, [r7, #4]
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	200072d4 	.word	0x200072d4

08008868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800886e:	2300      	movs	r3, #0
 8008870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008872:	4b4f      	ldr	r3, [pc, #316]	@ (80089b0 <xTaskIncrementTick+0x148>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f040 8090 	bne.w	800899c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800887c:	4b4d      	ldr	r3, [pc, #308]	@ (80089b4 <xTaskIncrementTick+0x14c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008884:	4a4b      	ldr	r2, [pc, #300]	@ (80089b4 <xTaskIncrementTick+0x14c>)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d121      	bne.n	80088d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008890:	4b49      	ldr	r3, [pc, #292]	@ (80089b8 <xTaskIncrementTick+0x150>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	603b      	str	r3, [r7, #0]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <xTaskIncrementTick+0x46>
 80088b2:	4b41      	ldr	r3, [pc, #260]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	4b40      	ldr	r3, [pc, #256]	@ (80089bc <xTaskIncrementTick+0x154>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a3e      	ldr	r2, [pc, #248]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	4a3e      	ldr	r2, [pc, #248]	@ (80089bc <xTaskIncrementTick+0x154>)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	4b3e      	ldr	r3, [pc, #248]	@ (80089c0 <xTaskIncrementTick+0x158>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	4a3c      	ldr	r2, [pc, #240]	@ (80089c0 <xTaskIncrementTick+0x158>)
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	f000 fafc 	bl	8008ecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088d4:	4b3b      	ldr	r3, [pc, #236]	@ (80089c4 <xTaskIncrementTick+0x15c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d349      	bcc.n	8008972 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088de:	4b36      	ldr	r3, [pc, #216]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d104      	bne.n	80088f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e8:	4b36      	ldr	r3, [pc, #216]	@ (80089c4 <xTaskIncrementTick+0x15c>)
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088ee:	601a      	str	r2, [r3, #0]
					break;
 80088f0:	e03f      	b.n	8008972 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f2:	4b31      	ldr	r3, [pc, #196]	@ (80089b8 <xTaskIncrementTick+0x150>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d203      	bcs.n	8008912 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800890a:	4a2e      	ldr	r2, [pc, #184]	@ (80089c4 <xTaskIncrementTick+0x15c>)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008910:	e02f      	b.n	8008972 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	3304      	adds	r3, #4
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe ff82 	bl	8007820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3318      	adds	r3, #24
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe ff79 	bl	8007820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008932:	4b25      	ldr	r3, [pc, #148]	@ (80089c8 <xTaskIncrementTick+0x160>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d903      	bls.n	8008942 <xTaskIncrementTick+0xda>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	4a22      	ldr	r2, [pc, #136]	@ (80089c8 <xTaskIncrementTick+0x160>)
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4a1f      	ldr	r2, [pc, #124]	@ (80089cc <xTaskIncrementTick+0x164>)
 8008950:	441a      	add	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3304      	adds	r3, #4
 8008956:	4619      	mov	r1, r3
 8008958:	4610      	mov	r0, r2
 800895a:	f7fe ff04 	bl	8007766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008962:	4b1b      	ldr	r3, [pc, #108]	@ (80089d0 <xTaskIncrementTick+0x168>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008968:	429a      	cmp	r2, r3
 800896a:	d3b8      	bcc.n	80088de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008970:	e7b5      	b.n	80088de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008972:	4b17      	ldr	r3, [pc, #92]	@ (80089d0 <xTaskIncrementTick+0x168>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008978:	4914      	ldr	r1, [pc, #80]	@ (80089cc <xTaskIncrementTick+0x164>)
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	440b      	add	r3, r1
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d901      	bls.n	800898e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800898a:	2301      	movs	r3, #1
 800898c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800898e:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <xTaskIncrementTick+0x16c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008996:	2301      	movs	r3, #1
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e004      	b.n	80089a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800899c:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <xTaskIncrementTick+0x170>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3301      	adds	r3, #1
 80089a2:	4a0d      	ldr	r2, [pc, #52]	@ (80089d8 <xTaskIncrementTick+0x170>)
 80089a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089a6:	697b      	ldr	r3, [r7, #20]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	200072f8 	.word	0x200072f8
 80089b4:	200072d4 	.word	0x200072d4
 80089b8:	20007288 	.word	0x20007288
 80089bc:	2000728c 	.word	0x2000728c
 80089c0:	200072e8 	.word	0x200072e8
 80089c4:	200072f0 	.word	0x200072f0
 80089c8:	200072d8 	.word	0x200072d8
 80089cc:	20006e00 	.word	0x20006e00
 80089d0:	20006dfc 	.word	0x20006dfc
 80089d4:	200072e4 	.word	0x200072e4
 80089d8:	200072e0 	.word	0x200072e0

080089dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089e2:	4b28      	ldr	r3, [pc, #160]	@ (8008a84 <vTaskSwitchContext+0xa8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089ea:	4b27      	ldr	r3, [pc, #156]	@ (8008a88 <vTaskSwitchContext+0xac>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089f0:	e042      	b.n	8008a78 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80089f2:	4b25      	ldr	r3, [pc, #148]	@ (8008a88 <vTaskSwitchContext+0xac>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f8:	4b24      	ldr	r3, [pc, #144]	@ (8008a8c <vTaskSwitchContext+0xb0>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e011      	b.n	8008a24 <vTaskSwitchContext+0x48>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <vTaskSwitchContext+0x42>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	607b      	str	r3, [r7, #4]
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	e7fd      	b.n	8008a1a <vTaskSwitchContext+0x3e>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	491a      	ldr	r1, [pc, #104]	@ (8008a90 <vTaskSwitchContext+0xb4>)
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0e3      	beq.n	8008a00 <vTaskSwitchContext+0x24>
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4a13      	ldr	r2, [pc, #76]	@ (8008a90 <vTaskSwitchContext+0xb4>)
 8008a44:	4413      	add	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3308      	adds	r3, #8
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d104      	bne.n	8008a68 <vTaskSwitchContext+0x8c>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	605a      	str	r2, [r3, #4]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	4a09      	ldr	r2, [pc, #36]	@ (8008a94 <vTaskSwitchContext+0xb8>)
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	4a06      	ldr	r2, [pc, #24]	@ (8008a8c <vTaskSwitchContext+0xb0>)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6013      	str	r3, [r2, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	200072f8 	.word	0x200072f8
 8008a88:	200072e4 	.word	0x200072e4
 8008a8c:	200072d8 	.word	0x200072d8
 8008a90:	20006e00 	.word	0x20006e00
 8008a94:	20006dfc 	.word	0x20006dfc

08008a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10b      	bne.n	8008ac0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60fb      	str	r3, [r7, #12]
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ac0:	4b07      	ldr	r3, [pc, #28]	@ (8008ae0 <vTaskPlaceOnEventList+0x48>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3318      	adds	r3, #24
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7fe fe70 	bl	80077ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ace:	2101      	movs	r1, #1
 8008ad0:	6838      	ldr	r0, [r7, #0]
 8008ad2:	f000 faa9 	bl	8009028 <prvAddCurrentTaskToDelayedList>
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20006dfc 	.word	0x20006dfc

08008ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10b      	bne.n	8008b0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	617b      	str	r3, [r7, #20]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3318      	adds	r3, #24
 8008b14:	4619      	mov	r1, r3
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7fe fe25 	bl	8007766 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	68b8      	ldr	r0, [r7, #8]
 8008b2c:	f000 fa7c 	bl	8009028 <prvAddCurrentTaskToDelayedList>
	}
 8008b30:	bf00      	nop
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20006dfc 	.word	0x20006dfc

08008b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10b      	bne.n	8008b6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	60fb      	str	r3, [r7, #12]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	3318      	adds	r3, #24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fe56 	bl	8007820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b74:	4b1d      	ldr	r3, [pc, #116]	@ (8008bec <xTaskRemoveFromEventList+0xb0>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d11d      	bne.n	8008bb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe fe4d 	bl	8007820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8a:	4b19      	ldr	r3, [pc, #100]	@ (8008bf0 <xTaskRemoveFromEventList+0xb4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d903      	bls.n	8008b9a <xTaskRemoveFromEventList+0x5e>
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b96:	4a16      	ldr	r2, [pc, #88]	@ (8008bf0 <xTaskRemoveFromEventList+0xb4>)
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4a13      	ldr	r2, [pc, #76]	@ (8008bf4 <xTaskRemoveFromEventList+0xb8>)
 8008ba8:	441a      	add	r2, r3
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7fe fdd8 	bl	8007766 <vListInsertEnd>
 8008bb6:	e005      	b.n	8008bc4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	480e      	ldr	r0, [pc, #56]	@ (8008bf8 <xTaskRemoveFromEventList+0xbc>)
 8008bc0:	f7fe fdd1 	bl	8007766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008bfc <xTaskRemoveFromEventList+0xc0>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d905      	bls.n	8008bde <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c00 <xTaskRemoveFromEventList+0xc4>)
 8008bd8:	2201      	movs	r2, #1
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e001      	b.n	8008be2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008be2:	697b      	ldr	r3, [r7, #20]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	200072f8 	.word	0x200072f8
 8008bf0:	200072d8 	.word	0x200072d8
 8008bf4:	20006e00 	.word	0x20006e00
 8008bf8:	20007290 	.word	0x20007290
 8008bfc:	20006dfc 	.word	0x20006dfc
 8008c00:	200072e4 	.word	0x200072e4

08008c04 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10b      	bne.n	8008c2a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60fb      	str	r3, [r7, #12]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008c2a:	f000 fedd 	bl	80099e8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c2e:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <vTaskSetTimeOutState+0x48>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008c36:	4b06      	ldr	r3, [pc, #24]	@ (8008c50 <vTaskSetTimeOutState+0x4c>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008c3e:	f000 ff05 	bl	8009a4c <vPortExitCritical>
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	200072e8 	.word	0x200072e8
 8008c50:	200072d4 	.word	0x200072d4

08008c54 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c5c:	4b06      	ldr	r3, [pc, #24]	@ (8008c78 <vTaskInternalSetTimeOutState+0x24>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c64:	4b05      	ldr	r3, [pc, #20]	@ (8008c7c <vTaskInternalSetTimeOutState+0x28>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	605a      	str	r2, [r3, #4]
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	200072e8 	.word	0x200072e8
 8008c7c:	200072d4 	.word	0x200072d4

08008c80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60fb      	str	r3, [r7, #12]
}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	e7fd      	b.n	8008cc2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008cc6:	f000 fe8f 	bl	80099e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cca:	4b1d      	ldr	r3, [pc, #116]	@ (8008d40 <xTaskCheckForTimeOut+0xc0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ce2:	d102      	bne.n	8008cea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	e023      	b.n	8008d32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4b15      	ldr	r3, [pc, #84]	@ (8008d44 <xTaskCheckForTimeOut+0xc4>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d007      	beq.n	8008d06 <xTaskCheckForTimeOut+0x86>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d302      	bcc.n	8008d06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d00:	2301      	movs	r3, #1
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	e015      	b.n	8008d32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d20b      	bcs.n	8008d28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	1ad2      	subs	r2, r2, r3
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff ff99 	bl	8008c54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	e004      	b.n	8008d32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d32:	f000 fe8b 	bl	8009a4c <vPortExitCritical>

	return xReturn;
 8008d36:	69fb      	ldr	r3, [r7, #28]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200072d4 	.word	0x200072d4
 8008d44:	200072e8 	.word	0x200072e8

08008d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d4c:	4b03      	ldr	r3, [pc, #12]	@ (8008d5c <vTaskMissedYield+0x14>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	601a      	str	r2, [r3, #0]
}
 8008d52:	bf00      	nop
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	200072e4 	.word	0x200072e4

08008d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d68:	f000 f852 	bl	8008e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d6c:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <prvIdleTask+0x28>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d9f9      	bls.n	8008d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d74:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <prvIdleTask+0x2c>)
 8008d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d84:	e7f0      	b.n	8008d68 <prvIdleTask+0x8>
 8008d86:	bf00      	nop
 8008d88:	20006e00 	.word	0x20006e00
 8008d8c:	e000ed04 	.word	0xe000ed04

08008d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d96:	2300      	movs	r3, #0
 8008d98:	607b      	str	r3, [r7, #4]
 8008d9a:	e00c      	b.n	8008db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4a12      	ldr	r2, [pc, #72]	@ (8008df0 <prvInitialiseTaskLists+0x60>)
 8008da8:	4413      	add	r3, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fcae 	bl	800770c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3301      	adds	r3, #1
 8008db4:	607b      	str	r3, [r7, #4]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b37      	cmp	r3, #55	@ 0x37
 8008dba:	d9ef      	bls.n	8008d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008dbc:	480d      	ldr	r0, [pc, #52]	@ (8008df4 <prvInitialiseTaskLists+0x64>)
 8008dbe:	f7fe fca5 	bl	800770c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dc2:	480d      	ldr	r0, [pc, #52]	@ (8008df8 <prvInitialiseTaskLists+0x68>)
 8008dc4:	f7fe fca2 	bl	800770c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dc8:	480c      	ldr	r0, [pc, #48]	@ (8008dfc <prvInitialiseTaskLists+0x6c>)
 8008dca:	f7fe fc9f 	bl	800770c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dce:	480c      	ldr	r0, [pc, #48]	@ (8008e00 <prvInitialiseTaskLists+0x70>)
 8008dd0:	f7fe fc9c 	bl	800770c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dd4:	480b      	ldr	r0, [pc, #44]	@ (8008e04 <prvInitialiseTaskLists+0x74>)
 8008dd6:	f7fe fc99 	bl	800770c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dda:	4b0b      	ldr	r3, [pc, #44]	@ (8008e08 <prvInitialiseTaskLists+0x78>)
 8008ddc:	4a05      	ldr	r2, [pc, #20]	@ (8008df4 <prvInitialiseTaskLists+0x64>)
 8008dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008de0:	4b0a      	ldr	r3, [pc, #40]	@ (8008e0c <prvInitialiseTaskLists+0x7c>)
 8008de2:	4a05      	ldr	r2, [pc, #20]	@ (8008df8 <prvInitialiseTaskLists+0x68>)
 8008de4:	601a      	str	r2, [r3, #0]
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20006e00 	.word	0x20006e00
 8008df4:	20007260 	.word	0x20007260
 8008df8:	20007274 	.word	0x20007274
 8008dfc:	20007290 	.word	0x20007290
 8008e00:	200072a4 	.word	0x200072a4
 8008e04:	200072bc 	.word	0x200072bc
 8008e08:	20007288 	.word	0x20007288
 8008e0c:	2000728c 	.word	0x2000728c

08008e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e16:	e019      	b.n	8008e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e18:	f000 fde6 	bl	80099e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e1c:	4b10      	ldr	r3, [pc, #64]	@ (8008e60 <prvCheckTasksWaitingTermination+0x50>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3304      	adds	r3, #4
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fcf9 	bl	8007820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <prvCheckTasksWaitingTermination+0x54>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	4a0b      	ldr	r2, [pc, #44]	@ (8008e64 <prvCheckTasksWaitingTermination+0x54>)
 8008e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e38:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <prvCheckTasksWaitingTermination+0x58>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e68 <prvCheckTasksWaitingTermination+0x58>)
 8008e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e42:	f000 fe03 	bl	8009a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f810 	bl	8008e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e4c:	4b06      	ldr	r3, [pc, #24]	@ (8008e68 <prvCheckTasksWaitingTermination+0x58>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e1      	bne.n	8008e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	200072a4 	.word	0x200072a4
 8008e64:	200072d0 	.word	0x200072d0
 8008e68:	200072b8 	.word	0x200072b8

08008e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d108      	bne.n	8008e90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ffa0 	bl	8009dc8 <vPortFree>
				vPortFree( pxTCB );
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 ff9d 	bl	8009dc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e8e:	e019      	b.n	8008ec4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d103      	bne.n	8008ea2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 ff94 	bl	8009dc8 <vPortFree>
	}
 8008ea0:	e010      	b.n	8008ec4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d00b      	beq.n	8008ec4 <prvDeleteTCB+0x58>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	60fb      	str	r3, [r7, #12]
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	e7fd      	b.n	8008ec0 <prvDeleteTCB+0x54>
	}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f04 <prvResetNextTaskUnblockTime+0x38>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d104      	bne.n	8008ee6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <prvResetNextTaskUnblockTime+0x3c>)
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ee2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ee4:	e008      	b.n	8008ef8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee6:	4b07      	ldr	r3, [pc, #28]	@ (8008f04 <prvResetNextTaskUnblockTime+0x38>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	4a04      	ldr	r2, [pc, #16]	@ (8008f08 <prvResetNextTaskUnblockTime+0x3c>)
 8008ef6:	6013      	str	r3, [r2, #0]
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	20007288 	.word	0x20007288
 8008f08:	200072f0 	.word	0x200072f0

08008f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f12:	4b0b      	ldr	r3, [pc, #44]	@ (8008f40 <xTaskGetSchedulerState+0x34>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d102      	bne.n	8008f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	607b      	str	r3, [r7, #4]
 8008f1e:	e008      	b.n	8008f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f20:	4b08      	ldr	r3, [pc, #32]	@ (8008f44 <xTaskGetSchedulerState+0x38>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	607b      	str	r3, [r7, #4]
 8008f2c:	e001      	b.n	8008f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f32:	687b      	ldr	r3, [r7, #4]
	}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	200072dc 	.word	0x200072dc
 8008f44:	200072f8 	.word	0x200072f8

08008f48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d058      	beq.n	8009010 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800901c <xTaskPriorityDisinherit+0xd4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d00b      	beq.n	8008f80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60fb      	str	r3, [r7, #12]
}
 8008f7a:	bf00      	nop
 8008f7c:	bf00      	nop
 8008f7e:	e7fd      	b.n	8008f7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	60bb      	str	r3, [r7, #8]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa4:	1e5a      	subs	r2, r3, #1
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d02c      	beq.n	8009010 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d128      	bne.n	8009010 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe fc2c 	bl	8007820 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8009020 <xTaskPriorityDisinherit+0xd8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d903      	bls.n	8008ff0 <xTaskPriorityDisinherit+0xa8>
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fec:	4a0c      	ldr	r2, [pc, #48]	@ (8009020 <xTaskPriorityDisinherit+0xd8>)
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a09      	ldr	r2, [pc, #36]	@ (8009024 <xTaskPriorityDisinherit+0xdc>)
 8008ffe:	441a      	add	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7fe fbad 	bl	8007766 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800900c:	2301      	movs	r3, #1
 800900e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009010:	697b      	ldr	r3, [r7, #20]
	}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20006dfc 	.word	0x20006dfc
 8009020:	200072d8 	.word	0x200072d8
 8009024:	20006e00 	.word	0x20006e00

08009028 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009032:	4b21      	ldr	r3, [pc, #132]	@ (80090b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009038:	4b20      	ldr	r3, [pc, #128]	@ (80090bc <prvAddCurrentTaskToDelayedList+0x94>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3304      	adds	r3, #4
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fbee 	bl	8007820 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800904a:	d10a      	bne.n	8009062 <prvAddCurrentTaskToDelayedList+0x3a>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009052:	4b1a      	ldr	r3, [pc, #104]	@ (80090bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3304      	adds	r3, #4
 8009058:	4619      	mov	r1, r3
 800905a:	4819      	ldr	r0, [pc, #100]	@ (80090c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800905c:	f7fe fb83 	bl	8007766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009060:	e026      	b.n	80090b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4413      	add	r3, r2
 8009068:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800906a:	4b14      	ldr	r3, [pc, #80]	@ (80090bc <prvAddCurrentTaskToDelayedList+0x94>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	429a      	cmp	r2, r3
 8009078:	d209      	bcs.n	800908e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800907a:	4b12      	ldr	r3, [pc, #72]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4b0f      	ldr	r3, [pc, #60]	@ (80090bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3304      	adds	r3, #4
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fe fb91 	bl	80077ae <vListInsert>
}
 800908c:	e010      	b.n	80090b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800908e:	4b0e      	ldr	r3, [pc, #56]	@ (80090c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fb87 	bl	80077ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d202      	bcs.n	80090b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090aa:	4a08      	ldr	r2, [pc, #32]	@ (80090cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	6013      	str	r3, [r2, #0]
}
 80090b0:	bf00      	nop
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	200072d4 	.word	0x200072d4
 80090bc:	20006dfc 	.word	0x20006dfc
 80090c0:	200072bc 	.word	0x200072bc
 80090c4:	2000728c 	.word	0x2000728c
 80090c8:	20007288 	.word	0x20007288
 80090cc:	200072f0 	.word	0x200072f0

080090d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08a      	sub	sp, #40	@ 0x28
 80090d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090da:	f000 fb13 	bl	8009704 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090de:	4b1d      	ldr	r3, [pc, #116]	@ (8009154 <xTimerCreateTimerTask+0x84>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d021      	beq.n	800912a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090ee:	1d3a      	adds	r2, r7, #4
 80090f0:	f107 0108 	add.w	r1, r7, #8
 80090f4:	f107 030c 	add.w	r3, r7, #12
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe faed 	bl	80076d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	9202      	str	r2, [sp, #8]
 8009106:	9301      	str	r3, [sp, #4]
 8009108:	2302      	movs	r3, #2
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	2300      	movs	r3, #0
 800910e:	460a      	mov	r2, r1
 8009110:	4911      	ldr	r1, [pc, #68]	@ (8009158 <xTimerCreateTimerTask+0x88>)
 8009112:	4812      	ldr	r0, [pc, #72]	@ (800915c <xTimerCreateTimerTask+0x8c>)
 8009114:	f7ff f8a8 	bl	8008268 <xTaskCreateStatic>
 8009118:	4603      	mov	r3, r0
 800911a:	4a11      	ldr	r2, [pc, #68]	@ (8009160 <xTimerCreateTimerTask+0x90>)
 800911c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800911e:	4b10      	ldr	r3, [pc, #64]	@ (8009160 <xTimerCreateTimerTask+0x90>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009126:	2301      	movs	r3, #1
 8009128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10b      	bne.n	8009148 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	613b      	str	r3, [r7, #16]
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009148:	697b      	ldr	r3, [r7, #20]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	2000732c 	.word	0x2000732c
 8009158:	08017d7c 	.word	0x08017d7c
 800915c:	0800929d 	.word	0x0800929d
 8009160:	20007330 	.word	0x20007330

08009164 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	@ 0x28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009172:	2300      	movs	r3, #0
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <xTimerGenericCommand+0x30>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	623b      	str	r3, [r7, #32]
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009194:	4b19      	ldr	r3, [pc, #100]	@ (80091fc <xTimerGenericCommand+0x98>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d02a      	beq.n	80091f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b05      	cmp	r3, #5
 80091ac:	dc18      	bgt.n	80091e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091ae:	f7ff fead 	bl	8008f0c <xTaskGetSchedulerState>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d109      	bne.n	80091cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091b8:	4b10      	ldr	r3, [pc, #64]	@ (80091fc <xTimerGenericCommand+0x98>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	f107 0110 	add.w	r1, r7, #16
 80091c0:	2300      	movs	r3, #0
 80091c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c4:	f7fe fc60 	bl	8007a88 <xQueueGenericSend>
 80091c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80091ca:	e012      	b.n	80091f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091cc:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <xTimerGenericCommand+0x98>)
 80091ce:	6818      	ldr	r0, [r3, #0]
 80091d0:	f107 0110 	add.w	r1, r7, #16
 80091d4:	2300      	movs	r3, #0
 80091d6:	2200      	movs	r2, #0
 80091d8:	f7fe fc56 	bl	8007a88 <xQueueGenericSend>
 80091dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80091de:	e008      	b.n	80091f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091e0:	4b06      	ldr	r3, [pc, #24]	@ (80091fc <xTimerGenericCommand+0x98>)
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	f107 0110 	add.w	r1, r7, #16
 80091e8:	2300      	movs	r3, #0
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	f7fe fd4e 	bl	8007c8c <xQueueGenericSendFromISR>
 80091f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3728      	adds	r7, #40	@ 0x28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	2000732c 	.word	0x2000732c

08009200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af02      	add	r7, sp, #8
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920a:	4b23      	ldr	r3, [pc, #140]	@ (8009298 <prvProcessExpiredTimer+0x98>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	3304      	adds	r3, #4
 8009218:	4618      	mov	r0, r3
 800921a:	f7fe fb01 	bl	8007820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d023      	beq.n	8009274 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	699a      	ldr	r2, [r3, #24]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	18d1      	adds	r1, r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	6978      	ldr	r0, [r7, #20]
 800923a:	f000 f8d5 	bl	80093e8 <prvInsertTimerInActiveList>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d020      	beq.n	8009286 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009244:	2300      	movs	r3, #0
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	2300      	movs	r3, #0
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	2100      	movs	r1, #0
 800924e:	6978      	ldr	r0, [r7, #20]
 8009250:	f7ff ff88 	bl	8009164 <xTimerGenericCommand>
 8009254:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d114      	bne.n	8009286 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60fb      	str	r3, [r7, #12]
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800927a:	f023 0301 	bic.w	r3, r3, #1
 800927e:	b2da      	uxtb	r2, r3
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	6978      	ldr	r0, [r7, #20]
 800928c:	4798      	blx	r3
}
 800928e:	bf00      	nop
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20007324 	.word	0x20007324

0800929c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f859 	bl	8009360 <prvGetNextExpireTime>
 80092ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4619      	mov	r1, r3
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f805 	bl	80092c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092ba:	f000 f8d7 	bl	800946c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092be:	bf00      	nop
 80092c0:	e7f0      	b.n	80092a4 <prvTimerTask+0x8>
	...

080092c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092ce:	f7ff fa0f 	bl	80086f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092d2:	f107 0308 	add.w	r3, r7, #8
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 f866 	bl	80093a8 <prvSampleTimeNow>
 80092dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d130      	bne.n	8009346 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <prvProcessTimerOrBlockTask+0x3c>
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d806      	bhi.n	8009300 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092f2:	f7ff fa0b 	bl	800870c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092f6:	68f9      	ldr	r1, [r7, #12]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff ff81 	bl	8009200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092fe:	e024      	b.n	800934a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d008      	beq.n	8009318 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <prvProcessTimerOrBlockTask+0x90>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <prvProcessTimerOrBlockTask+0x50>
 8009310:	2301      	movs	r3, #1
 8009312:	e000      	b.n	8009316 <prvProcessTimerOrBlockTask+0x52>
 8009314:	2300      	movs	r3, #0
 8009316:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009318:	4b0f      	ldr	r3, [pc, #60]	@ (8009358 <prvProcessTimerOrBlockTask+0x94>)
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	4619      	mov	r1, r3
 8009326:	f7fe ff6b 	bl	8008200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800932a:	f7ff f9ef 	bl	800870c <xTaskResumeAll>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10a      	bne.n	800934a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009334:	4b09      	ldr	r3, [pc, #36]	@ (800935c <prvProcessTimerOrBlockTask+0x98>)
 8009336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	f3bf 8f6f 	isb	sy
}
 8009344:	e001      	b.n	800934a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009346:	f7ff f9e1 	bl	800870c <xTaskResumeAll>
}
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20007328 	.word	0x20007328
 8009358:	2000732c 	.word	0x2000732c
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009368:	4b0e      	ldr	r3, [pc, #56]	@ (80093a4 <prvGetNextExpireTime+0x44>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <prvGetNextExpireTime+0x16>
 8009372:	2201      	movs	r2, #1
 8009374:	e000      	b.n	8009378 <prvGetNextExpireTime+0x18>
 8009376:	2200      	movs	r2, #0
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d105      	bne.n	8009390 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009384:	4b07      	ldr	r3, [pc, #28]	@ (80093a4 <prvGetNextExpireTime+0x44>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	e001      	b.n	8009394 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009394:	68fb      	ldr	r3, [r7, #12]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20007324 	.word	0x20007324

080093a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093b0:	f7ff fa4a 	bl	8008848 <xTaskGetTickCount>
 80093b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093b6:	4b0b      	ldr	r3, [pc, #44]	@ (80093e4 <prvSampleTimeNow+0x3c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d205      	bcs.n	80093cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093c0:	f000 f93a 	bl	8009638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	e002      	b.n	80093d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093d2:	4a04      	ldr	r2, [pc, #16]	@ (80093e4 <prvSampleTimeNow+0x3c>)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093d8:	68fb      	ldr	r3, [r7, #12]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20007334 	.word	0x20007334

080093e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	429a      	cmp	r2, r3
 800940c:	d812      	bhi.n	8009434 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	1ad2      	subs	r2, r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	429a      	cmp	r2, r3
 800941a:	d302      	bcc.n	8009422 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800941c:	2301      	movs	r3, #1
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	e01b      	b.n	800945a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009422:	4b10      	ldr	r3, [pc, #64]	@ (8009464 <prvInsertTimerInActiveList+0x7c>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3304      	adds	r3, #4
 800942a:	4619      	mov	r1, r3
 800942c:	4610      	mov	r0, r2
 800942e:	f7fe f9be 	bl	80077ae <vListInsert>
 8009432:	e012      	b.n	800945a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d206      	bcs.n	800944a <prvInsertTimerInActiveList+0x62>
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	429a      	cmp	r2, r3
 8009442:	d302      	bcc.n	800944a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009444:	2301      	movs	r3, #1
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	e007      	b.n	800945a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800944a:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <prvInsertTimerInActiveList+0x80>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3304      	adds	r3, #4
 8009452:	4619      	mov	r1, r3
 8009454:	4610      	mov	r0, r2
 8009456:	f7fe f9aa 	bl	80077ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800945a:	697b      	ldr	r3, [r7, #20]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20007328 	.word	0x20007328
 8009468:	20007324 	.word	0x20007324

0800946c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08e      	sub	sp, #56	@ 0x38
 8009470:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009472:	e0ce      	b.n	8009612 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	da19      	bge.n	80094ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800947a:	1d3b      	adds	r3, r7, #4
 800947c:	3304      	adds	r3, #4
 800947e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10b      	bne.n	800949e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	61fb      	str	r3, [r7, #28]
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	e7fd      	b.n	800949a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094a4:	6850      	ldr	r0, [r2, #4]
 80094a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094a8:	6892      	ldr	r2, [r2, #8]
 80094aa:	4611      	mov	r1, r2
 80094ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f2c0 80ae 	blt.w	8009612 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	3304      	adds	r3, #4
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe f9aa 	bl	8007820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094cc:	463b      	mov	r3, r7
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff ff6a 	bl	80093a8 <prvSampleTimeNow>
 80094d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b09      	cmp	r3, #9
 80094da:	f200 8097 	bhi.w	800960c <prvProcessReceivedCommands+0x1a0>
 80094de:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <prvProcessReceivedCommands+0x78>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	0800950d 	.word	0x0800950d
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	0800950d 	.word	0x0800950d
 80094f0:	08009583 	.word	0x08009583
 80094f4:	08009597 	.word	0x08009597
 80094f8:	080095e3 	.word	0x080095e3
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	0800950d 	.word	0x0800950d
 8009504:	08009583 	.word	0x08009583
 8009508:	08009597 	.word	0x08009597
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009512:	f043 0301 	orr.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	18d1      	adds	r1, r2, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800952a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800952c:	f7ff ff5c 	bl	80093e8 <prvInsertTimerInActiveList>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d06c      	beq.n	8009610 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800953c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d061      	beq.n	8009610 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	441a      	add	r2, r3
 8009554:	2300      	movs	r3, #0
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	2100      	movs	r1, #0
 800955c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800955e:	f7ff fe01 	bl	8009164 <xTimerGenericCommand>
 8009562:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d152      	bne.n	8009610 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	61bb      	str	r3, [r7, #24]
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	e7fd      	b.n	800957e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	b2da      	uxtb	r2, r3
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009594:	e03d      	b.n	8009612 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800959c:	f043 0301 	orr.w	r3, r3, #1
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	617b      	str	r3, [r7, #20]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	699a      	ldr	r2, [r3, #24]
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	18d1      	adds	r1, r2, r3
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095dc:	f7ff ff04 	bl	80093e8 <prvInsertTimerInActiveList>
					break;
 80095e0:	e017      	b.n	8009612 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80095f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095f2:	f000 fbe9 	bl	8009dc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095f6:	e00c      	b.n	8009612 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800960a:	e002      	b.n	8009612 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800960c:	bf00      	nop
 800960e:	e000      	b.n	8009612 <prvProcessReceivedCommands+0x1a6>
					break;
 8009610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009612:	4b08      	ldr	r3, [pc, #32]	@ (8009634 <prvProcessReceivedCommands+0x1c8>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	1d39      	adds	r1, r7, #4
 8009618:	2200      	movs	r2, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fbd4 	bl	8007dc8 <xQueueReceive>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	f47f af26 	bne.w	8009474 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009628:	bf00      	nop
 800962a:	bf00      	nop
 800962c:	3730      	adds	r7, #48	@ 0x30
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	2000732c 	.word	0x2000732c

08009638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800963e:	e049      	b.n	80096d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009640:	4b2e      	ldr	r3, [pc, #184]	@ (80096fc <prvSwitchTimerLists+0xc4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964a:	4b2c      	ldr	r3, [pc, #176]	@ (80096fc <prvSwitchTimerLists+0xc4>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3304      	adds	r3, #4
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe f8e1 	bl	8007820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d02f      	beq.n	80096d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4413      	add	r3, r2
 800967c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	429a      	cmp	r2, r3
 8009684:	d90e      	bls.n	80096a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009692:	4b1a      	ldr	r3, [pc, #104]	@ (80096fc <prvSwitchTimerLists+0xc4>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3304      	adds	r3, #4
 800969a:	4619      	mov	r1, r3
 800969c:	4610      	mov	r0, r2
 800969e:	f7fe f886 	bl	80077ae <vListInsert>
 80096a2:	e017      	b.n	80096d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096a4:	2300      	movs	r3, #0
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	2300      	movs	r3, #0
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	2100      	movs	r1, #0
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff fd58 	bl	8009164 <xTimerGenericCommand>
 80096b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	603b      	str	r3, [r7, #0]
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096d4:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <prvSwitchTimerLists+0xc4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1b0      	bne.n	8009640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096de:	4b07      	ldr	r3, [pc, #28]	@ (80096fc <prvSwitchTimerLists+0xc4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096e4:	4b06      	ldr	r3, [pc, #24]	@ (8009700 <prvSwitchTimerLists+0xc8>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a04      	ldr	r2, [pc, #16]	@ (80096fc <prvSwitchTimerLists+0xc4>)
 80096ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096ec:	4a04      	ldr	r2, [pc, #16]	@ (8009700 <prvSwitchTimerLists+0xc8>)
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6013      	str	r3, [r2, #0]
}
 80096f2:	bf00      	nop
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20007324 	.word	0x20007324
 8009700:	20007328 	.word	0x20007328

08009704 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800970a:	f000 f96d 	bl	80099e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800970e:	4b15      	ldr	r3, [pc, #84]	@ (8009764 <prvCheckForValidListAndQueue+0x60>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d120      	bne.n	8009758 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009716:	4814      	ldr	r0, [pc, #80]	@ (8009768 <prvCheckForValidListAndQueue+0x64>)
 8009718:	f7fd fff8 	bl	800770c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800971c:	4813      	ldr	r0, [pc, #76]	@ (800976c <prvCheckForValidListAndQueue+0x68>)
 800971e:	f7fd fff5 	bl	800770c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009722:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <prvCheckForValidListAndQueue+0x6c>)
 8009724:	4a10      	ldr	r2, [pc, #64]	@ (8009768 <prvCheckForValidListAndQueue+0x64>)
 8009726:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009728:	4b12      	ldr	r3, [pc, #72]	@ (8009774 <prvCheckForValidListAndQueue+0x70>)
 800972a:	4a10      	ldr	r2, [pc, #64]	@ (800976c <prvCheckForValidListAndQueue+0x68>)
 800972c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800972e:	2300      	movs	r3, #0
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	4b11      	ldr	r3, [pc, #68]	@ (8009778 <prvCheckForValidListAndQueue+0x74>)
 8009734:	4a11      	ldr	r2, [pc, #68]	@ (800977c <prvCheckForValidListAndQueue+0x78>)
 8009736:	2110      	movs	r1, #16
 8009738:	200a      	movs	r0, #10
 800973a:	f7fe f905 	bl	8007948 <xQueueGenericCreateStatic>
 800973e:	4603      	mov	r3, r0
 8009740:	4a08      	ldr	r2, [pc, #32]	@ (8009764 <prvCheckForValidListAndQueue+0x60>)
 8009742:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009744:	4b07      	ldr	r3, [pc, #28]	@ (8009764 <prvCheckForValidListAndQueue+0x60>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800974c:	4b05      	ldr	r3, [pc, #20]	@ (8009764 <prvCheckForValidListAndQueue+0x60>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	490b      	ldr	r1, [pc, #44]	@ (8009780 <prvCheckForValidListAndQueue+0x7c>)
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fd2a 	bl	80081ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009758:	f000 f978 	bl	8009a4c <vPortExitCritical>
}
 800975c:	bf00      	nop
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	2000732c 	.word	0x2000732c
 8009768:	200072fc 	.word	0x200072fc
 800976c:	20007310 	.word	0x20007310
 8009770:	20007324 	.word	0x20007324
 8009774:	20007328 	.word	0x20007328
 8009778:	200073d8 	.word	0x200073d8
 800977c:	20007338 	.word	0x20007338
 8009780:	08017d84 	.word	0x08017d84

08009784 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3b04      	subs	r3, #4
 8009794:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800979c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3b04      	subs	r3, #4
 80097a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f023 0201 	bic.w	r2, r3, #1
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3b04      	subs	r3, #4
 80097b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097b4:	4a0c      	ldr	r2, [pc, #48]	@ (80097e8 <pxPortInitialiseStack+0x64>)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3b14      	subs	r3, #20
 80097be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3b04      	subs	r3, #4
 80097ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f06f 0202 	mvn.w	r2, #2
 80097d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3b20      	subs	r3, #32
 80097d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097da:	68fb      	ldr	r3, [r7, #12]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	080097ed 	.word	0x080097ed

080097ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097f6:	4b13      	ldr	r3, [pc, #76]	@ (8009844 <prvTaskExitError+0x58>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097fe:	d00b      	beq.n	8009818 <prvTaskExitError+0x2c>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	e7fd      	b.n	8009814 <prvTaskExitError+0x28>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60bb      	str	r3, [r7, #8]
}
 800982a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800982c:	bf00      	nop
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0fc      	beq.n	800982e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20000014 	.word	0x20000014
	...

08009850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009850:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <pxCurrentTCBConst2>)
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	6808      	ldr	r0, [r1, #0]
 8009856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	f380 8809 	msr	PSP, r0
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f380 8811 	msr	BASEPRI, r0
 800986a:	4770      	bx	lr
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst2>:
 8009870:	20006dfc 	.word	0x20006dfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009878:	4808      	ldr	r0, [pc, #32]	@ (800989c <prvPortStartFirstTask+0x24>)
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	6800      	ldr	r0, [r0, #0]
 800987e:	f380 8808 	msr	MSP, r0
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8814 	msr	CONTROL, r0
 800988a:	b662      	cpsie	i
 800988c:	b661      	cpsie	f
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	df00      	svc	0
 8009898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800989a:	bf00      	nop
 800989c:	e000ed08 	.word	0xe000ed08

080098a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098a6:	4b47      	ldr	r3, [pc, #284]	@ (80099c4 <xPortStartScheduler+0x124>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a47      	ldr	r2, [pc, #284]	@ (80099c8 <xPortStartScheduler+0x128>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10b      	bne.n	80098c8 <xPortStartScheduler+0x28>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	613b      	str	r3, [r7, #16]
}
 80098c2:	bf00      	nop
 80098c4:	bf00      	nop
 80098c6:	e7fd      	b.n	80098c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098c8:	4b3e      	ldr	r3, [pc, #248]	@ (80099c4 <xPortStartScheduler+0x124>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a3f      	ldr	r2, [pc, #252]	@ (80099cc <xPortStartScheduler+0x12c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d10b      	bne.n	80098ea <xPortStartScheduler+0x4a>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60fb      	str	r3, [r7, #12]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098ea:	4b39      	ldr	r3, [pc, #228]	@ (80099d0 <xPortStartScheduler+0x130>)
 80098ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	22ff      	movs	r2, #255	@ 0xff
 80098fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800990c:	b2da      	uxtb	r2, r3
 800990e:	4b31      	ldr	r3, [pc, #196]	@ (80099d4 <xPortStartScheduler+0x134>)
 8009910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009912:	4b31      	ldr	r3, [pc, #196]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009914:	2207      	movs	r2, #7
 8009916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009918:	e009      	b.n	800992e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800991a:	4b2f      	ldr	r3, [pc, #188]	@ (80099d8 <xPortStartScheduler+0x138>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3b01      	subs	r3, #1
 8009920:	4a2d      	ldr	r2, [pc, #180]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	b2db      	uxtb	r3, r3
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	b2db      	uxtb	r3, r3
 800992c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009936:	2b80      	cmp	r3, #128	@ 0x80
 8009938:	d0ef      	beq.n	800991a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800993a:	4b27      	ldr	r3, [pc, #156]	@ (80099d8 <xPortStartScheduler+0x138>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1c3 0307 	rsb	r3, r3, #7
 8009942:	2b04      	cmp	r3, #4
 8009944:	d00b      	beq.n	800995e <xPortStartScheduler+0xbe>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800995e:	4b1e      	ldr	r3, [pc, #120]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009968:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <xPortStartScheduler+0x138>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009970:	4a19      	ldr	r2, [pc, #100]	@ (80099d8 <xPortStartScheduler+0x138>)
 8009972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	b2da      	uxtb	r2, r3
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800997c:	4b17      	ldr	r3, [pc, #92]	@ (80099dc <xPortStartScheduler+0x13c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a16      	ldr	r2, [pc, #88]	@ (80099dc <xPortStartScheduler+0x13c>)
 8009982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009988:	4b14      	ldr	r3, [pc, #80]	@ (80099dc <xPortStartScheduler+0x13c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a13      	ldr	r2, [pc, #76]	@ (80099dc <xPortStartScheduler+0x13c>)
 800998e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009994:	f000 f8da 	bl	8009b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009998:	4b11      	ldr	r3, [pc, #68]	@ (80099e0 <xPortStartScheduler+0x140>)
 800999a:	2200      	movs	r2, #0
 800999c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800999e:	f000 f8f9 	bl	8009b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099a2:	4b10      	ldr	r3, [pc, #64]	@ (80099e4 <xPortStartScheduler+0x144>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a0f      	ldr	r2, [pc, #60]	@ (80099e4 <xPortStartScheduler+0x144>)
 80099a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80099ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099ae:	f7ff ff63 	bl	8009878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099b2:	f7ff f813 	bl	80089dc <vTaskSwitchContext>
	prvTaskExitError();
 80099b6:	f7ff ff19 	bl	80097ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed00 	.word	0xe000ed00
 80099c8:	410fc271 	.word	0x410fc271
 80099cc:	410fc270 	.word	0x410fc270
 80099d0:	e000e400 	.word	0xe000e400
 80099d4:	20007428 	.word	0x20007428
 80099d8:	2000742c 	.word	0x2000742c
 80099dc:	e000ed20 	.word	0xe000ed20
 80099e0:	20000014 	.word	0x20000014
 80099e4:	e000ef34 	.word	0xe000ef34

080099e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	607b      	str	r3, [r7, #4]
}
 8009a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a02:	4b10      	ldr	r3, [pc, #64]	@ (8009a44 <vPortEnterCritical+0x5c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3301      	adds	r3, #1
 8009a08:	4a0e      	ldr	r2, [pc, #56]	@ (8009a44 <vPortEnterCritical+0x5c>)
 8009a0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <vPortEnterCritical+0x5c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d110      	bne.n	8009a36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a14:	4b0c      	ldr	r3, [pc, #48]	@ (8009a48 <vPortEnterCritical+0x60>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <vPortEnterCritical+0x4e>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	603b      	str	r3, [r7, #0]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <vPortEnterCritical+0x4a>
	}
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20000014 	.word	0x20000014
 8009a48:	e000ed04 	.word	0xe000ed04

08009a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a52:	4b12      	ldr	r3, [pc, #72]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10b      	bne.n	8009a72 <vPortExitCritical+0x26>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	607b      	str	r3, [r7, #4]
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	e7fd      	b.n	8009a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	4a08      	ldr	r2, [pc, #32]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a7c:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <vPortExitCritical+0x50>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d105      	bne.n	8009a90 <vPortExitCritical+0x44>
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f383 8811 	msr	BASEPRI, r3
}
 8009a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20000014 	.word	0x20000014

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b15      	ldr	r3, [pc, #84]	@ (8009b00 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f01e 0f10 	tst.w	lr, #16
 8009ab0:	bf08      	it	eq
 8009ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ac4:	f380 8811 	msr	BASEPRI, r0
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f7fe ff84 	bl	80089dc <vTaskSwitchContext>
 8009ad4:	f04f 0000 	mov.w	r0, #0
 8009ad8:	f380 8811 	msr	BASEPRI, r0
 8009adc:	bc09      	pop	{r0, r3}
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	6808      	ldr	r0, [r1, #0]
 8009ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae6:	f01e 0f10 	tst.w	lr, #16
 8009aea:	bf08      	it	eq
 8009aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009af0:	f380 8809 	msr	PSP, r0
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst>:
 8009b00:	20006dfc 	.word	0x20006dfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b22:	f7fe fea1 	bl	8008868 <xTaskIncrementTick>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	@ (8009b48 <xPortSysTickHandler+0x40>)
 8009b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f383 8811 	msr	BASEPRI, r3
}
 8009b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b50:	4b0b      	ldr	r3, [pc, #44]	@ (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b56:	4b0b      	ldr	r3, [pc, #44]	@ (8009b84 <vPortSetupTimerInterrupt+0x38>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b88 <vPortSetupTimerInterrupt+0x3c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a0a      	ldr	r2, [pc, #40]	@ (8009b8c <vPortSetupTimerInterrupt+0x40>)
 8009b62:	fba2 2303 	umull	r2, r3, r2, r3
 8009b66:	099b      	lsrs	r3, r3, #6
 8009b68:	4a09      	ldr	r2, [pc, #36]	@ (8009b90 <vPortSetupTimerInterrupt+0x44>)
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6e:	4b04      	ldr	r3, [pc, #16]	@ (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b70:	2207      	movs	r2, #7
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	e000e010 	.word	0xe000e010
 8009b84:	e000e018 	.word	0xe000e018
 8009b88:	20000008 	.word	0x20000008
 8009b8c:	10624dd3 	.word	0x10624dd3
 8009b90:	e000e014 	.word	0xe000e014

08009b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ba4 <vPortEnableVFP+0x10>
 8009b98:	6801      	ldr	r1, [r0, #0]
 8009b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b9e:	6001      	str	r1, [r0, #0]
 8009ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ba2:	bf00      	nop
 8009ba4:	e000ed88 	.word	0xe000ed88

08009ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bae:	f3ef 8305 	mrs	r3, IPSR
 8009bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d915      	bls.n	8009be6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bba:	4a18      	ldr	r2, [pc, #96]	@ (8009c1c <vPortValidateInterruptPriority+0x74>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bc4:	4b16      	ldr	r3, [pc, #88]	@ (8009c20 <vPortValidateInterruptPriority+0x78>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	7afa      	ldrb	r2, [r7, #11]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d20b      	bcs.n	8009be6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	607b      	str	r3, [r7, #4]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009be6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c24 <vPortValidateInterruptPriority+0x7c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bee:	4b0e      	ldr	r3, [pc, #56]	@ (8009c28 <vPortValidateInterruptPriority+0x80>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d90b      	bls.n	8009c0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	603b      	str	r3, [r7, #0]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <vPortValidateInterruptPriority+0x62>
	}
 8009c0e:	bf00      	nop
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	e000e3f0 	.word	0xe000e3f0
 8009c20:	20007428 	.word	0x20007428
 8009c24:	e000ed0c 	.word	0xe000ed0c
 8009c28:	2000742c 	.word	0x2000742c

08009c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	@ 0x28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c38:	f7fe fd5a 	bl	80086f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009db0 <pvPortMalloc+0x184>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c44:	f000 f924 	bl	8009e90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c48:	4b5a      	ldr	r3, [pc, #360]	@ (8009db4 <pvPortMalloc+0x188>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4013      	ands	r3, r2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f040 8095 	bne.w	8009d80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01e      	beq.n	8009c9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c5c:	2208      	movs	r2, #8
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4413      	add	r3, r2
 8009c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d015      	beq.n	8009c9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f023 0307 	bic.w	r3, r3, #7
 8009c74:	3308      	adds	r3, #8
 8009c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00b      	beq.n	8009c9a <pvPortMalloc+0x6e>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	617b      	str	r3, [r7, #20]
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	e7fd      	b.n	8009c96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d06f      	beq.n	8009d80 <pvPortMalloc+0x154>
 8009ca0:	4b45      	ldr	r3, [pc, #276]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d86a      	bhi.n	8009d80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009caa:	4b44      	ldr	r3, [pc, #272]	@ (8009dbc <pvPortMalloc+0x190>)
 8009cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cae:	4b43      	ldr	r3, [pc, #268]	@ (8009dbc <pvPortMalloc+0x190>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cb4:	e004      	b.n	8009cc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d903      	bls.n	8009cd2 <pvPortMalloc+0xa6>
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1f1      	bne.n	8009cb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cd2:	4b37      	ldr	r3, [pc, #220]	@ (8009db0 <pvPortMalloc+0x184>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d051      	beq.n	8009d80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	4413      	add	r3, r2
 8009ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	1ad2      	subs	r2, r2, r3
 8009cf6:	2308      	movs	r3, #8
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d920      	bls.n	8009d40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4413      	add	r3, r2
 8009d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <pvPortMalloc+0xfc>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	613b      	str	r3, [r7, #16]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d3a:	69b8      	ldr	r0, [r7, #24]
 8009d3c:	f000 f90a 	bl	8009f54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d40:	4b1d      	ldr	r3, [pc, #116]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	4b1b      	ldr	r3, [pc, #108]	@ (8009dc0 <pvPortMalloc+0x194>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d203      	bcs.n	8009d62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d5a:	4b17      	ldr	r3, [pc, #92]	@ (8009db8 <pvPortMalloc+0x18c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a18      	ldr	r2, [pc, #96]	@ (8009dc0 <pvPortMalloc+0x194>)
 8009d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	4b13      	ldr	r3, [pc, #76]	@ (8009db4 <pvPortMalloc+0x188>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d76:	4b13      	ldr	r3, [pc, #76]	@ (8009dc4 <pvPortMalloc+0x198>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	4a11      	ldr	r2, [pc, #68]	@ (8009dc4 <pvPortMalloc+0x198>)
 8009d7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d80:	f7fe fcc4 	bl	800870c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <pvPortMalloc+0x17a>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	60fb      	str	r3, [r7, #12]
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	e7fd      	b.n	8009da2 <pvPortMalloc+0x176>
	return pvReturn;
 8009da6:	69fb      	ldr	r3, [r7, #28]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3728      	adds	r7, #40	@ 0x28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	20008038 	.word	0x20008038
 8009db4:	2000804c 	.word	0x2000804c
 8009db8:	2000803c 	.word	0x2000803c
 8009dbc:	20008030 	.word	0x20008030
 8009dc0:	20008040 	.word	0x20008040
 8009dc4:	20008044 	.word	0x20008044

08009dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d04f      	beq.n	8009e7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dda:	2308      	movs	r3, #8
 8009ddc:	425b      	negs	r3, r3
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4413      	add	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	4b25      	ldr	r3, [pc, #148]	@ (8009e84 <vPortFree+0xbc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4013      	ands	r3, r2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10b      	bne.n	8009e0e <vPortFree+0x46>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	60fb      	str	r3, [r7, #12]
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	e7fd      	b.n	8009e0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <vPortFree+0x66>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	60bb      	str	r3, [r7, #8]
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	4b14      	ldr	r3, [pc, #80]	@ (8009e84 <vPortFree+0xbc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4013      	ands	r3, r2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01e      	beq.n	8009e7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d11a      	bne.n	8009e7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	4b0e      	ldr	r3, [pc, #56]	@ (8009e84 <vPortFree+0xbc>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	43db      	mvns	r3, r3
 8009e4e:	401a      	ands	r2, r3
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e54:	f7fe fc4c 	bl	80086f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e88 <vPortFree+0xc0>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4413      	add	r3, r2
 8009e62:	4a09      	ldr	r2, [pc, #36]	@ (8009e88 <vPortFree+0xc0>)
 8009e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e66:	6938      	ldr	r0, [r7, #16]
 8009e68:	f000 f874 	bl	8009f54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e6c:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <vPortFree+0xc4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a06      	ldr	r2, [pc, #24]	@ (8009e8c <vPortFree+0xc4>)
 8009e74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e76:	f7fe fc49 	bl	800870c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e7a:	bf00      	nop
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	2000804c 	.word	0x2000804c
 8009e88:	2000803c 	.word	0x2000803c
 8009e8c:	20008048 	.word	0x20008048

08009e90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009e9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e9c:	4b27      	ldr	r3, [pc, #156]	@ (8009f3c <prvHeapInit+0xac>)
 8009e9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00c      	beq.n	8009ec4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3307      	adds	r3, #7
 8009eae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f023 0307 	bic.w	r3, r3, #7
 8009eb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8009f3c <prvHeapInit+0xac>)
 8009ec0:	4413      	add	r3, r2
 8009ec2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f40 <prvHeapInit+0xb0>)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ece:	4b1c      	ldr	r3, [pc, #112]	@ (8009f40 <prvHeapInit+0xb0>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	4413      	add	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009edc:	2208      	movs	r2, #8
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4a15      	ldr	r2, [pc, #84]	@ (8009f44 <prvHeapInit+0xb4>)
 8009ef0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ef2:	4b14      	ldr	r3, [pc, #80]	@ (8009f44 <prvHeapInit+0xb4>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009efa:	4b12      	ldr	r3, [pc, #72]	@ (8009f44 <prvHeapInit+0xb4>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	1ad2      	subs	r2, r2, r3
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f10:	4b0c      	ldr	r3, [pc, #48]	@ (8009f44 <prvHeapInit+0xb4>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009f48 <prvHeapInit+0xb8>)
 8009f1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4a09      	ldr	r2, [pc, #36]	@ (8009f4c <prvHeapInit+0xbc>)
 8009f26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f28:	4b09      	ldr	r3, [pc, #36]	@ (8009f50 <prvHeapInit+0xc0>)
 8009f2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f2e:	601a      	str	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	20007430 	.word	0x20007430
 8009f40:	20008030 	.word	0x20008030
 8009f44:	20008038 	.word	0x20008038
 8009f48:	20008040 	.word	0x20008040
 8009f4c:	2000803c 	.word	0x2000803c
 8009f50:	2000804c 	.word	0x2000804c

08009f54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f5c:	4b28      	ldr	r3, [pc, #160]	@ (800a000 <prvInsertBlockIntoFreeList+0xac>)
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	e002      	b.n	8009f68 <prvInsertBlockIntoFreeList+0x14>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d8f7      	bhi.n	8009f62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d108      	bne.n	8009f96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	441a      	add	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d118      	bne.n	8009fdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	4b15      	ldr	r3, [pc, #84]	@ (800a004 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d00d      	beq.n	8009fd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	441a      	add	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	e008      	b.n	8009fe4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fd2:	4b0c      	ldr	r3, [pc, #48]	@ (800a004 <prvInsertBlockIntoFreeList+0xb0>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	e003      	b.n	8009fe4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d002      	beq.n	8009ff2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff2:	bf00      	nop
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	20008030 	.word	0x20008030
 800a004:	20008038 	.word	0x20008038

0800a008 <rcl_get_zero_initialized_init_options>:
 800a008:	2000      	movs	r0, #0
 800a00a:	4770      	bx	lr

0800a00c <rcl_init_options_init>:
 800a00c:	b084      	sub	sp, #16
 800a00e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a010:	b097      	sub	sp, #92	@ 0x5c
 800a012:	ae1d      	add	r6, sp, #116	@ 0x74
 800a014:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800a018:	2800      	cmp	r0, #0
 800a01a:	d058      	beq.n	800a0ce <rcl_init_options_init+0xc2>
 800a01c:	6803      	ldr	r3, [r0, #0]
 800a01e:	4605      	mov	r5, r0
 800a020:	b133      	cbz	r3, 800a030 <rcl_init_options_init+0x24>
 800a022:	2464      	movs	r4, #100	@ 0x64
 800a024:	4620      	mov	r0, r4
 800a026:	b017      	add	sp, #92	@ 0x5c
 800a028:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a02c:	b004      	add	sp, #16
 800a02e:	4770      	bx	lr
 800a030:	4630      	mov	r0, r6
 800a032:	f001 f92f 	bl	800b294 <rcutils_allocator_is_valid>
 800a036:	2800      	cmp	r0, #0
 800a038:	d049      	beq.n	800a0ce <rcl_init_options_init+0xc2>
 800a03a:	46b4      	mov	ip, r6
 800a03c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a040:	ac11      	add	r4, sp, #68	@ 0x44
 800a042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a044:	f8dc 3000 	ldr.w	r3, [ip]
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a04c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a04e:	2050      	movs	r0, #80	@ 0x50
 800a050:	4798      	blx	r3
 800a052:	4604      	mov	r4, r0
 800a054:	6028      	str	r0, [r5, #0]
 800a056:	2800      	cmp	r0, #0
 800a058:	d03b      	beq.n	800a0d2 <rcl_init_options_init+0xc6>
 800a05a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a05e:	4686      	mov	lr, r0
 800a060:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a064:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a068:	f8dc 3000 	ldr.w	r3, [ip]
 800a06c:	f8ce 3000 	str.w	r3, [lr]
 800a070:	a802      	add	r0, sp, #8
 800a072:	f001 f9a1 	bl	800b3b8 <rmw_get_zero_initialized_init_options>
 800a076:	f10d 0e08 	add.w	lr, sp, #8
 800a07a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a07e:	f104 0c18 	add.w	ip, r4, #24
 800a082:	682f      	ldr	r7, [r5, #0]
 800a084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a088:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a08c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a090:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a098:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a09c:	ac20      	add	r4, sp, #128	@ 0x80
 800a09e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a0a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a0aa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a0ae:	f107 0018 	add.w	r0, r7, #24
 800a0b2:	f001 f9af 	bl	800b414 <rmw_init_options_init>
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d0b3      	beq.n	800a024 <rcl_init_options_init+0x18>
 800a0bc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a0be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a0c0:	6828      	ldr	r0, [r5, #0]
 800a0c2:	4798      	blx	r3
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f007 f831 	bl	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	e7aa      	b.n	800a024 <rcl_init_options_init+0x18>
 800a0ce:	240b      	movs	r4, #11
 800a0d0:	e7a8      	b.n	800a024 <rcl_init_options_init+0x18>
 800a0d2:	240a      	movs	r4, #10
 800a0d4:	e7a6      	b.n	800a024 <rcl_init_options_init+0x18>
 800a0d6:	bf00      	nop

0800a0d8 <rcl_init_options_fini>:
 800a0d8:	b530      	push	{r4, r5, lr}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	b1f0      	cbz	r0, 800a11c <rcl_init_options_fini+0x44>
 800a0de:	6803      	ldr	r3, [r0, #0]
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	b1db      	cbz	r3, 800a11c <rcl_init_options_fini+0x44>
 800a0e4:	469c      	mov	ip, r3
 800a0e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0ea:	f10d 0e04 	add.w	lr, sp, #4
 800a0ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a0f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a0f6:	f8ce 3000 	str.w	r3, [lr]
 800a0fa:	a801      	add	r0, sp, #4
 800a0fc:	f001 f8ca 	bl	800b294 <rcutils_allocator_is_valid>
 800a100:	b160      	cbz	r0, 800a11c <rcl_init_options_fini+0x44>
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	3018      	adds	r0, #24
 800a106:	f001 fa35 	bl	800b574 <rmw_init_options_fini>
 800a10a:	4605      	mov	r5, r0
 800a10c:	b950      	cbnz	r0, 800a124 <rcl_init_options_fini+0x4c>
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	9905      	ldr	r1, [sp, #20]
 800a114:	4798      	blx	r3
 800a116:	4628      	mov	r0, r5
 800a118:	b007      	add	sp, #28
 800a11a:	bd30      	pop	{r4, r5, pc}
 800a11c:	250b      	movs	r5, #11
 800a11e:	4628      	mov	r0, r5
 800a120:	b007      	add	sp, #28
 800a122:	bd30      	pop	{r4, r5, pc}
 800a124:	f007 f802 	bl	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 800a128:	4605      	mov	r5, r0
 800a12a:	e7f8      	b.n	800a11e <rcl_init_options_fini+0x46>

0800a12c <rcl_init_options_copy>:
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	b094      	sub	sp, #80	@ 0x50
 800a132:	2800      	cmp	r0, #0
 800a134:	d058      	beq.n	800a1e8 <rcl_init_options_copy+0xbc>
 800a136:	4604      	mov	r4, r0
 800a138:	6800      	ldr	r0, [r0, #0]
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d054      	beq.n	800a1e8 <rcl_init_options_copy+0xbc>
 800a13e:	460e      	mov	r6, r1
 800a140:	f001 f8a8 	bl	800b294 <rcutils_allocator_is_valid>
 800a144:	2800      	cmp	r0, #0
 800a146:	d04f      	beq.n	800a1e8 <rcl_init_options_copy+0xbc>
 800a148:	2e00      	cmp	r6, #0
 800a14a:	d04d      	beq.n	800a1e8 <rcl_init_options_copy+0xbc>
 800a14c:	6833      	ldr	r3, [r6, #0]
 800a14e:	b123      	cbz	r3, 800a15a <rcl_init_options_copy+0x2e>
 800a150:	2464      	movs	r4, #100	@ 0x64
 800a152:	4620      	mov	r0, r4
 800a154:	b014      	add	sp, #80	@ 0x50
 800a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15a:	6827      	ldr	r7, [r4, #0]
 800a15c:	46bc      	mov	ip, r7
 800a15e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a162:	ad0f      	add	r5, sp, #60	@ 0x3c
 800a164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a166:	f8dc 3000 	ldr.w	r3, [ip]
 800a16a:	f8d7 8000 	ldr.w	r8, [r7]
 800a16e:	602b      	str	r3, [r5, #0]
 800a170:	4619      	mov	r1, r3
 800a172:	2050      	movs	r0, #80	@ 0x50
 800a174:	47c0      	blx	r8
 800a176:	4605      	mov	r5, r0
 800a178:	6030      	str	r0, [r6, #0]
 800a17a:	b3d0      	cbz	r0, 800a1f2 <rcl_init_options_copy+0xc6>
 800a17c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800a180:	4686      	mov	lr, r0
 800a182:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a186:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a18a:	f8dc 3000 	ldr.w	r3, [ip]
 800a18e:	f8ce 3000 	str.w	r3, [lr]
 800a192:	4668      	mov	r0, sp
 800a194:	f001 f910 	bl	800b3b8 <rmw_get_zero_initialized_init_options>
 800a198:	46ee      	mov	lr, sp
 800a19a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a19e:	f105 0c18 	add.w	ip, r5, #24
 800a1a2:	6824      	ldr	r4, [r4, #0]
 800a1a4:	6835      	ldr	r5, [r6, #0]
 800a1a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a1ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a1b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1ba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a1be:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a1c2:	f104 0018 	add.w	r0, r4, #24
 800a1c6:	f105 0118 	add.w	r1, r5, #24
 800a1ca:	f001 f98b 	bl	800b4e4 <rmw_init_options_copy>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0be      	beq.n	800a152 <rcl_init_options_copy+0x26>
 800a1d4:	f001 f86c 	bl	800b2b0 <rcutils_get_error_string>
 800a1d8:	f001 f882 	bl	800b2e0 <rcutils_reset_error>
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff ff7b 	bl	800a0d8 <rcl_init_options_fini>
 800a1e2:	b140      	cbz	r0, 800a1f6 <rcl_init_options_copy+0xca>
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	e7b4      	b.n	800a152 <rcl_init_options_copy+0x26>
 800a1e8:	240b      	movs	r4, #11
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b014      	add	sp, #80	@ 0x50
 800a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f2:	240a      	movs	r4, #10
 800a1f4:	e7ad      	b.n	800a152 <rcl_init_options_copy+0x26>
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	b014      	add	sp, #80	@ 0x50
 800a1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fe:	f006 bf95 	b.w	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 800a202:	bf00      	nop

0800a204 <rcl_init_options_set_domain_id>:
 800a204:	b120      	cbz	r0, 800a210 <rcl_init_options_set_domain_id+0xc>
 800a206:	6803      	ldr	r3, [r0, #0]
 800a208:	b113      	cbz	r3, 800a210 <rcl_init_options_set_domain_id+0xc>
 800a20a:	6259      	str	r1, [r3, #36]	@ 0x24
 800a20c:	2000      	movs	r0, #0
 800a20e:	4770      	bx	lr
 800a210:	200b      	movs	r0, #11
 800a212:	4770      	bx	lr

0800a214 <rcl_get_zero_initialized_publisher>:
 800a214:	4b01      	ldr	r3, [pc, #4]	@ (800a21c <rcl_get_zero_initialized_publisher+0x8>)
 800a216:	6818      	ldr	r0, [r3, #0]
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	08017e0c 	.word	0x08017e0c

0800a220 <rcl_publisher_init>:
 800a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	b088      	sub	sp, #32
 800a226:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d069      	beq.n	800a300 <rcl_publisher_init+0xe0>
 800a22c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a230:	4604      	mov	r4, r0
 800a232:	4648      	mov	r0, r9
 800a234:	460e      	mov	r6, r1
 800a236:	4690      	mov	r8, r2
 800a238:	461f      	mov	r7, r3
 800a23a:	f001 f82b 	bl	800b294 <rcutils_allocator_is_valid>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d05e      	beq.n	800a300 <rcl_publisher_init+0xe0>
 800a242:	2c00      	cmp	r4, #0
 800a244:	d05c      	beq.n	800a300 <rcl_publisher_init+0xe0>
 800a246:	f8d4 a000 	ldr.w	sl, [r4]
 800a24a:	f1ba 0f00 	cmp.w	sl, #0
 800a24e:	d004      	beq.n	800a25a <rcl_publisher_init+0x3a>
 800a250:	2764      	movs	r7, #100	@ 0x64
 800a252:	4638      	mov	r0, r7
 800a254:	b008      	add	sp, #32
 800a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25a:	4630      	mov	r0, r6
 800a25c:	f007 fa60 	bl	8011720 <rcl_node_is_valid>
 800a260:	2800      	cmp	r0, #0
 800a262:	d052      	beq.n	800a30a <rcl_publisher_init+0xea>
 800a264:	f1b8 0f00 	cmp.w	r8, #0
 800a268:	d04a      	beq.n	800a300 <rcl_publisher_init+0xe0>
 800a26a:	2f00      	cmp	r7, #0
 800a26c:	d048      	beq.n	800a300 <rcl_publisher_init+0xe0>
 800a26e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a272:	aa07      	add	r2, sp, #28
 800a274:	9205      	str	r2, [sp, #20]
 800a276:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a27a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a27e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a282:	f8cd a01c 	str.w	sl, [sp, #28]
 800a286:	4639      	mov	r1, r7
 800a288:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a28c:	4630      	mov	r0, r6
 800a28e:	f007 fa9b 	bl	80117c8 <rcl_node_resolve_name>
 800a292:	4607      	mov	r7, r0
 800a294:	2800      	cmp	r0, #0
 800a296:	d14f      	bne.n	800a338 <rcl_publisher_init+0x118>
 800a298:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a29a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a29c:	20c8      	movs	r0, #200	@ 0xc8
 800a29e:	4798      	blx	r3
 800a2a0:	6020      	str	r0, [r4, #0]
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d04e      	beq.n	800a344 <rcl_publisher_init+0x124>
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f007 fa5c 	bl	8011764 <rcl_node_get_rmw_handle>
 800a2ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	9a07      	ldr	r2, [sp, #28]
 800a2b4:	6827      	ldr	r7, [r4, #0]
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	4641      	mov	r1, r8
 800a2ba:	f001 fc83 	bl	800bbc4 <rmw_create_publisher>
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a2c4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a2c8:	b370      	cbz	r0, 800a328 <rcl_publisher_init+0x108>
 800a2ca:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a2ce:	f001 fd57 	bl	800bd80 <rmw_publisher_get_actual_qos>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	b9d0      	cbnz	r0, 800a30e <rcl_publisher_init+0xee>
 800a2d8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a2dc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	2270      	movs	r2, #112	@ 0x70
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f00c fe20 	bl	8016f2a <memcpy>
 800a2ea:	6832      	ldr	r2, [r6, #0]
 800a2ec:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a2f0:	9807      	ldr	r0, [sp, #28]
 800a2f2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a2f4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a2f6:	4798      	blx	r3
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	b008      	add	sp, #32
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a300:	270b      	movs	r7, #11
 800a302:	4638      	mov	r0, r7
 800a304:	b008      	add	sp, #32
 800a306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30a:	27c8      	movs	r7, #200	@ 0xc8
 800a30c:	e7a1      	b.n	800a252 <rcl_publisher_init+0x32>
 800a30e:	b18b      	cbz	r3, 800a334 <rcl_publisher_init+0x114>
 800a310:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a314:	b142      	cbz	r2, 800a328 <rcl_publisher_init+0x108>
 800a316:	4630      	mov	r0, r6
 800a318:	f007 fa24 	bl	8011764 <rcl_node_get_rmw_handle>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a322:	f001 fd3d 	bl	800bda0 <rmw_destroy_publisher>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a32a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a32c:	4618      	mov	r0, r3
 800a32e:	4790      	blx	r2
 800a330:	2300      	movs	r3, #0
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	2701      	movs	r7, #1
 800a336:	e7db      	b.n	800a2f0 <rcl_publisher_init+0xd0>
 800a338:	2867      	cmp	r0, #103	@ 0x67
 800a33a:	d0d9      	beq.n	800a2f0 <rcl_publisher_init+0xd0>
 800a33c:	2869      	cmp	r0, #105	@ 0x69
 800a33e:	d003      	beq.n	800a348 <rcl_publisher_init+0x128>
 800a340:	280a      	cmp	r0, #10
 800a342:	d1f7      	bne.n	800a334 <rcl_publisher_init+0x114>
 800a344:	270a      	movs	r7, #10
 800a346:	e7d3      	b.n	800a2f0 <rcl_publisher_init+0xd0>
 800a348:	2767      	movs	r7, #103	@ 0x67
 800a34a:	e7d1      	b.n	800a2f0 <rcl_publisher_init+0xd0>

0800a34c <rcl_publisher_get_default_options>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	4d14      	ldr	r5, [pc, #80]	@ (800a3a0 <rcl_publisher_get_default_options+0x54>)
 800a350:	4914      	ldr	r1, [pc, #80]	@ (800a3a4 <rcl_publisher_get_default_options+0x58>)
 800a352:	b088      	sub	sp, #32
 800a354:	4604      	mov	r4, r0
 800a356:	2250      	movs	r2, #80	@ 0x50
 800a358:	4628      	mov	r0, r5
 800a35a:	f00c fde6 	bl	8016f2a <memcpy>
 800a35e:	a802      	add	r0, sp, #8
 800a360:	f000 ff8a 	bl	800b278 <rcutils_get_default_allocator>
 800a364:	f10d 0c08 	add.w	ip, sp, #8
 800a368:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a36c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a370:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a374:	466e      	mov	r6, sp
 800a376:	f8dc 3000 	ldr.w	r3, [ip]
 800a37a:	f8ce 3000 	str.w	r3, [lr]
 800a37e:	4630      	mov	r0, r6
 800a380:	f001 f82a 	bl	800b3d8 <rmw_get_default_publisher_options>
 800a384:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a388:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a38c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a390:	2270      	movs	r2, #112	@ 0x70
 800a392:	4629      	mov	r1, r5
 800a394:	4620      	mov	r0, r4
 800a396:	f00c fdc8 	bl	8016f2a <memcpy>
 800a39a:	4620      	mov	r0, r4
 800a39c:	b008      	add	sp, #32
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	20008050 	.word	0x20008050
 800a3a4:	08017e10 	.word	0x08017e10

0800a3a8 <rcl_publish>:
 800a3a8:	b1f8      	cbz	r0, 800a3ea <rcl_publish+0x42>
 800a3aa:	6803      	ldr	r3, [r0, #0]
 800a3ac:	b570      	push	{r4, r5, r6, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	b1b3      	cbz	r3, 800a3e0 <rcl_publish+0x38>
 800a3b2:	4616      	mov	r6, r2
 800a3b4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a3b8:	b192      	cbz	r2, 800a3e0 <rcl_publish+0x38>
 800a3ba:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	f006 fed2 	bl	8011168 <rcl_context_is_valid>
 800a3c4:	b160      	cbz	r0, 800a3e0 <rcl_publish+0x38>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a3cc:	b140      	cbz	r0, 800a3e0 <rcl_publish+0x38>
 800a3ce:	b155      	cbz	r5, 800a3e6 <rcl_publish+0x3e>
 800a3d0:	4632      	mov	r2, r6
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	f001 fb96 	bl	800bb04 <rmw_publish>
 800a3d8:	3800      	subs	r0, #0
 800a3da:	bf18      	it	ne
 800a3dc:	2001      	movne	r0, #1
 800a3de:	bd70      	pop	{r4, r5, r6, pc}
 800a3e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a3e4:	bd70      	pop	{r4, r5, r6, pc}
 800a3e6:	200b      	movs	r0, #11
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a3ee:	4770      	bx	lr

0800a3f0 <rcl_publisher_is_valid>:
 800a3f0:	b1a0      	cbz	r0, 800a41c <rcl_publisher_is_valid+0x2c>
 800a3f2:	6803      	ldr	r3, [r0, #0]
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	b173      	cbz	r3, 800a418 <rcl_publisher_is_valid+0x28>
 800a3fa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a3fe:	b15a      	cbz	r2, 800a418 <rcl_publisher_is_valid+0x28>
 800a400:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a404:	f006 feb0 	bl	8011168 <rcl_context_is_valid>
 800a408:	b130      	cbz	r0, 800a418 <rcl_publisher_is_valid+0x28>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a410:	3800      	subs	r0, #0
 800a412:	bf18      	it	ne
 800a414:	2001      	movne	r0, #1
 800a416:	bd10      	pop	{r4, pc}
 800a418:	2000      	movs	r0, #0
 800a41a:	bd10      	pop	{r4, pc}
 800a41c:	2000      	movs	r0, #0
 800a41e:	4770      	bx	lr

0800a420 <rcl_publisher_is_valid_except_context>:
 800a420:	b130      	cbz	r0, 800a430 <rcl_publisher_is_valid_except_context+0x10>
 800a422:	6800      	ldr	r0, [r0, #0]
 800a424:	b120      	cbz	r0, 800a430 <rcl_publisher_is_valid_except_context+0x10>
 800a426:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a42a:	3800      	subs	r0, #0
 800a42c:	bf18      	it	ne
 800a42e:	2001      	movne	r0, #1
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop

0800a434 <_rclc_check_for_new_data>:
 800a434:	2800      	cmp	r0, #0
 800a436:	d046      	beq.n	800a4c6 <_rclc_check_for_new_data+0x92>
 800a438:	b510      	push	{r4, lr}
 800a43a:	7802      	ldrb	r2, [r0, #0]
 800a43c:	b084      	sub	sp, #16
 800a43e:	4603      	mov	r3, r0
 800a440:	2a0a      	cmp	r2, #10
 800a442:	d842      	bhi.n	800a4ca <_rclc_check_for_new_data+0x96>
 800a444:	e8df f002 	tbb	[pc, r2]
 800a448:	14181212 	.word	0x14181212
 800a44c:	06060614 	.word	0x06060614
 800a450:	2e1a      	.short	0x2e1a
 800a452:	16          	.byte	0x16
 800a453:	00          	.byte	0x00
 800a454:	6a0a      	ldr	r2, [r1, #32]
 800a456:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a458:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a45c:	2000      	movs	r0, #0
 800a45e:	1a12      	subs	r2, r2, r0
 800a460:	bf18      	it	ne
 800a462:	2201      	movne	r2, #1
 800a464:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a468:	b004      	add	sp, #16
 800a46a:	bd10      	pop	{r4, pc}
 800a46c:	680a      	ldr	r2, [r1, #0]
 800a46e:	e7f2      	b.n	800a456 <_rclc_check_for_new_data+0x22>
 800a470:	698a      	ldr	r2, [r1, #24]
 800a472:	e7f0      	b.n	800a456 <_rclc_check_for_new_data+0x22>
 800a474:	688a      	ldr	r2, [r1, #8]
 800a476:	e7ee      	b.n	800a456 <_rclc_check_for_new_data+0x22>
 800a478:	690a      	ldr	r2, [r1, #16]
 800a47a:	e7ec      	b.n	800a456 <_rclc_check_for_new_data+0x22>
 800a47c:	685c      	ldr	r4, [r3, #4]
 800a47e:	4608      	mov	r0, r1
 800a480:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a484:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a488:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a48c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a496:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a49a:	f104 0110 	add.w	r1, r4, #16
 800a49e:	f008 ff8f 	bl	80133c0 <rcl_action_client_wait_set_get_entities_ready>
 800a4a2:	e7e1      	b.n	800a468 <_rclc_check_for_new_data+0x34>
 800a4a4:	685c      	ldr	r4, [r3, #4]
 800a4a6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a4aa:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a4ae:	e9cd 3200 	strd	r3, r2, [sp]
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a4b8:	f104 0220 	add.w	r2, r4, #32
 800a4bc:	f104 0110 	add.w	r1, r4, #16
 800a4c0:	f009 f996 	bl	80137f0 <rcl_action_server_wait_set_get_entities_ready>
 800a4c4:	e7d0      	b.n	800a468 <_rclc_check_for_new_data+0x34>
 800a4c6:	200b      	movs	r0, #11
 800a4c8:	4770      	bx	lr
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	e7cc      	b.n	800a468 <_rclc_check_for_new_data+0x34>
 800a4ce:	bf00      	nop

0800a4d0 <_rclc_take_new_data>:
 800a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d2:	b09b      	sub	sp, #108	@ 0x6c
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f000 8088 	beq.w	800a5ea <_rclc_take_new_data+0x11a>
 800a4da:	7803      	ldrb	r3, [r0, #0]
 800a4dc:	4604      	mov	r4, r0
 800a4de:	2b0a      	cmp	r3, #10
 800a4e0:	f200 8167 	bhi.w	800a7b2 <_rclc_take_new_data+0x2e2>
 800a4e4:	e8df f003 	tbb	[pc, r3]
 800a4e8:	44152d2d 	.word	0x44152d2d
 800a4ec:	19191944 	.word	0x19191944
 800a4f0:	065a      	.short	0x065a
 800a4f2:	15          	.byte	0x15
 800a4f3:	00          	.byte	0x00
 800a4f4:	6840      	ldr	r0, [r0, #4]
 800a4f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f040 80b2 	bne.w	800a664 <_rclc_take_new_data+0x194>
 800a500:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a504:	2b00      	cmp	r3, #0
 800a506:	f040 80e4 	bne.w	800a6d2 <_rclc_take_new_data+0x202>
 800a50a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d16f      	bne.n	800a5f2 <_rclc_take_new_data+0x122>
 800a512:	2500      	movs	r5, #0
 800a514:	4628      	mov	r0, r5
 800a516:	b01b      	add	sp, #108	@ 0x6c
 800a518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a51a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a51c:	6a0b      	ldr	r3, [r1, #32]
 800a51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f5      	beq.n	800a512 <_rclc_take_new_data+0x42>
 800a526:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a52a:	f104 0110 	add.w	r1, r4, #16
 800a52e:	f007 faf5 	bl	8011b1c <rcl_take_request>
 800a532:	4605      	mov	r5, r0
 800a534:	2800      	cmp	r0, #0
 800a536:	d0ec      	beq.n	800a512 <_rclc_take_new_data+0x42>
 800a538:	f240 2359 	movw	r3, #601	@ 0x259
 800a53c:	4298      	cmp	r0, r3
 800a53e:	d013      	beq.n	800a568 <_rclc_take_new_data+0x98>
 800a540:	e029      	b.n	800a596 <_rclc_take_new_data+0xc6>
 800a542:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a544:	680b      	ldr	r3, [r1, #0]
 800a546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0e1      	beq.n	800a512 <_rclc_take_new_data+0x42>
 800a54e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a552:	2300      	movs	r3, #0
 800a554:	aa0a      	add	r2, sp, #40	@ 0x28
 800a556:	f007 fb43 	bl	8011be0 <rcl_take>
 800a55a:	4605      	mov	r5, r0
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d0d9      	beq.n	800a514 <_rclc_take_new_data+0x44>
 800a560:	f240 1391 	movw	r3, #401	@ 0x191
 800a564:	4298      	cmp	r0, r3
 800a566:	d116      	bne.n	800a596 <_rclc_take_new_data+0xc6>
 800a568:	2300      	movs	r3, #0
 800a56a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a56e:	e7d1      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a570:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a572:	698b      	ldr	r3, [r1, #24]
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d0ca      	beq.n	800a512 <_rclc_take_new_data+0x42>
 800a57c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a580:	f104 0110 	add.w	r1, r4, #16
 800a584:	f006 fd80 	bl	8011088 <rcl_take_response>
 800a588:	4605      	mov	r5, r0
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d0c1      	beq.n	800a512 <_rclc_take_new_data+0x42>
 800a58e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a592:	4298      	cmp	r0, r3
 800a594:	d0be      	beq.n	800a514 <_rclc_take_new_data+0x44>
 800a596:	f000 fea3 	bl	800b2e0 <rcutils_reset_error>
 800a59a:	e7bb      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a59c:	6840      	ldr	r0, [r0, #4]
 800a59e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d17d      	bne.n	800a6a2 <_rclc_take_new_data+0x1d2>
 800a5a6:	69c3      	ldr	r3, [r0, #28]
 800a5a8:	b11b      	cbz	r3, 800a5b2 <_rclc_take_new_data+0xe2>
 800a5aa:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d144      	bne.n	800a63c <_rclc_take_new_data+0x16c>
 800a5b2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f040 80ac 	bne.w	800a714 <_rclc_take_new_data+0x244>
 800a5bc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d0a6      	beq.n	800a512 <_rclc_take_new_data+0x42>
 800a5c4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a5c6:	a90a      	add	r1, sp, #40	@ 0x28
 800a5c8:	3010      	adds	r0, #16
 800a5ca:	f008 fdd1 	bl	8013170 <rcl_action_take_result_response>
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d1e0      	bne.n	800a596 <_rclc_take_new_data+0xc6>
 800a5d4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a5d8:	6860      	ldr	r0, [r4, #4]
 800a5da:	f009 fa2d 	bl	8013a38 <rclc_action_find_handle_by_result_request_sequence_number>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d098      	beq.n	800a514 <_rclc_take_new_data+0x44>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a5e8:	e794      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a5ea:	250b      	movs	r5, #11
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	b01b      	add	sp, #108	@ 0x6c
 800a5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5f2:	ae04      	add	r6, sp, #16
 800a5f4:	aa0a      	add	r2, sp, #40	@ 0x28
 800a5f6:	3010      	adds	r0, #16
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	f009 f82d 	bl	8013658 <rcl_action_take_cancel_request>
 800a5fe:	4605      	mov	r5, r0
 800a600:	2800      	cmp	r0, #0
 800a602:	d1c8      	bne.n	800a596 <_rclc_take_new_data+0xc6>
 800a604:	6860      	ldr	r0, [r4, #4]
 800a606:	a90a      	add	r1, sp, #40	@ 0x28
 800a608:	f009 f9d4 	bl	80139b4 <rclc_action_find_goal_handle_by_uuid>
 800a60c:	4607      	mov	r7, r0
 800a60e:	2800      	cmp	r0, #0
 800a610:	f000 80bb 	beq.w	800a78a <_rclc_take_new_data+0x2ba>
 800a614:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a618:	2101      	movs	r1, #1
 800a61a:	f009 f955 	bl	80138c8 <rcl_action_transition_goal_state>
 800a61e:	2803      	cmp	r0, #3
 800a620:	4684      	mov	ip, r0
 800a622:	f040 80a7 	bne.w	800a774 <_rclc_take_new_data+0x2a4>
 800a626:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a628:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a62c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a62e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a632:	e884 0003 	stmia.w	r4, {r0, r1}
 800a636:	f887 c008 	strb.w	ip, [r7, #8]
 800a63a:	e76b      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a63c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a63e:	3010      	adds	r0, #16
 800a640:	f008 fe16 	bl	8013270 <rcl_action_take_feedback>
 800a644:	4605      	mov	r5, r0
 800a646:	2800      	cmp	r0, #0
 800a648:	d1a5      	bne.n	800a596 <_rclc_take_new_data+0xc6>
 800a64a:	6860      	ldr	r0, [r4, #4]
 800a64c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a64e:	f009 f9b1 	bl	80139b4 <rclc_action_find_goal_handle_by_uuid>
 800a652:	4603      	mov	r3, r0
 800a654:	2800      	cmp	r0, #0
 800a656:	f000 80a3 	beq.w	800a7a0 <_rclc_take_new_data+0x2d0>
 800a65a:	2201      	movs	r2, #1
 800a65c:	6860      	ldr	r0, [r4, #4]
 800a65e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a662:	e7a6      	b.n	800a5b2 <_rclc_take_new_data+0xe2>
 800a664:	f009 f980 	bl	8013968 <rclc_action_take_goal_handle>
 800a668:	4606      	mov	r6, r0
 800a66a:	6860      	ldr	r0, [r4, #4]
 800a66c:	2e00      	cmp	r6, #0
 800a66e:	f43f af47 	beq.w	800a500 <_rclc_take_new_data+0x30>
 800a672:	6070      	str	r0, [r6, #4]
 800a674:	69f2      	ldr	r2, [r6, #28]
 800a676:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a67a:	3010      	adds	r0, #16
 800a67c:	f008 ff34 	bl	80134e8 <rcl_action_take_goal_request>
 800a680:	4605      	mov	r5, r0
 800a682:	2800      	cmp	r0, #0
 800a684:	f040 808e 	bne.w	800a7a4 <_rclc_take_new_data+0x2d4>
 800a688:	69f7      	ldr	r7, [r6, #28]
 800a68a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a68c:	7235      	strb	r5, [r6, #8]
 800a68e:	f8c6 0009 	str.w	r0, [r6, #9]
 800a692:	f8c6 100d 	str.w	r1, [r6, #13]
 800a696:	6860      	ldr	r0, [r4, #4]
 800a698:	f8c6 2011 	str.w	r2, [r6, #17]
 800a69c:	f8c6 3015 	str.w	r3, [r6, #21]
 800a6a0:	e72e      	b.n	800a500 <_rclc_take_new_data+0x30>
 800a6a2:	aa04      	add	r2, sp, #16
 800a6a4:	a90a      	add	r1, sp, #40	@ 0x28
 800a6a6:	3010      	adds	r0, #16
 800a6a8:	f008 fcea 	bl	8013080 <rcl_action_take_goal_response>
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f47f af71 	bne.w	800a596 <_rclc_take_new_data+0xc6>
 800a6b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a6b8:	6860      	ldr	r0, [r4, #4]
 800a6ba:	f009 f9ab 	bl	8013a14 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a6be:	b130      	cbz	r0, 800a6ce <_rclc_take_new_data+0x1fe>
 800a6c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a6c4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f880 2020 	strb.w	r2, [r0, #32]
 800a6ce:	6860      	ldr	r0, [r4, #4]
 800a6d0:	e769      	b.n	800a5a6 <_rclc_take_new_data+0xd6>
 800a6d2:	aa04      	add	r2, sp, #16
 800a6d4:	3010      	adds	r0, #16
 800a6d6:	a90a      	add	r1, sp, #40	@ 0x28
 800a6d8:	f008 ff7e 	bl	80135d8 <rcl_action_take_result_request>
 800a6dc:	4605      	mov	r5, r0
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f47f af59 	bne.w	800a596 <_rclc_take_new_data+0xc6>
 800a6e4:	6860      	ldr	r0, [r4, #4]
 800a6e6:	a904      	add	r1, sp, #16
 800a6e8:	f009 f964 	bl	80139b4 <rclc_action_find_goal_handle_by_uuid>
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	b160      	cbz	r0, 800a70a <_rclc_take_new_data+0x23a>
 800a6f0:	ad0a      	add	r5, sp, #40	@ 0x28
 800a6f2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a6f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a6fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a6fe:	f04f 0c02 	mov.w	ip, #2
 800a702:	e886 0003 	stmia.w	r6, {r0, r1}
 800a706:	f887 c008 	strb.w	ip, [r7, #8]
 800a70a:	6860      	ldr	r0, [r4, #4]
 800a70c:	2300      	movs	r3, #0
 800a70e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a712:	e6fa      	b.n	800a50a <_rclc_take_new_data+0x3a>
 800a714:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a718:	a90a      	add	r1, sp, #40	@ 0x28
 800a71a:	3010      	adds	r0, #16
 800a71c:	f008 fd68 	bl	80131f0 <rcl_action_take_cancel_response>
 800a720:	4605      	mov	r5, r0
 800a722:	2800      	cmp	r0, #0
 800a724:	f47f af37 	bne.w	800a596 <_rclc_take_new_data+0xc6>
 800a728:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a72c:	6860      	ldr	r0, [r4, #4]
 800a72e:	f009 f995 	bl	8013a5c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a732:	4606      	mov	r6, r0
 800a734:	6860      	ldr	r0, [r4, #4]
 800a736:	2e00      	cmp	r6, #0
 800a738:	f43f af40 	beq.w	800a5bc <_rclc_take_new_data+0xec>
 800a73c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a73e:	2701      	movs	r7, #1
 800a740:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a742:	2b00      	cmp	r3, #0
 800a744:	f43f af3a 	beq.w	800a5bc <_rclc_take_new_data+0xec>
 800a748:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a74a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a74e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a752:	f009 f92f 	bl	80139b4 <rclc_action_find_goal_handle_by_uuid>
 800a756:	b138      	cbz	r0, 800a768 <_rclc_take_new_data+0x298>
 800a758:	6860      	ldr	r0, [r4, #4]
 800a75a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a75c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a760:	3501      	adds	r5, #1
 800a762:	42ab      	cmp	r3, r5
 800a764:	d8f0      	bhi.n	800a748 <_rclc_take_new_data+0x278>
 800a766:	e729      	b.n	800a5bc <_rclc_take_new_data+0xec>
 800a768:	6860      	ldr	r0, [r4, #4]
 800a76a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a76c:	3501      	adds	r5, #1
 800a76e:	42ab      	cmp	r3, r5
 800a770:	d8ea      	bhi.n	800a748 <_rclc_take_new_data+0x278>
 800a772:	e723      	b.n	800a5bc <_rclc_take_new_data+0xec>
 800a774:	ab06      	add	r3, sp, #24
 800a776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a778:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a77c:	2103      	movs	r1, #3
 800a77e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a782:	6860      	ldr	r0, [r4, #4]
 800a784:	f009 f9e0 	bl	8013b48 <rclc_action_server_goal_cancel_reject>
 800a788:	e6c4      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a78a:	ab06      	add	r3, sp, #24
 800a78c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a78e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a792:	2102      	movs	r1, #2
 800a794:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a798:	6860      	ldr	r0, [r4, #4]
 800a79a:	f009 f9d5 	bl	8013b48 <rclc_action_server_goal_cancel_reject>
 800a79e:	e6b9      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a7a0:	6860      	ldr	r0, [r4, #4]
 800a7a2:	e706      	b.n	800a5b2 <_rclc_take_new_data+0xe2>
 800a7a4:	6860      	ldr	r0, [r4, #4]
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	f009 f8ee 	bl	8013988 <rclc_action_remove_used_goal_handle>
 800a7ac:	f000 fd98 	bl	800b2e0 <rcutils_reset_error>
 800a7b0:	e6b0      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a7b2:	2501      	movs	r5, #1
 800a7b4:	e6ae      	b.n	800a514 <_rclc_take_new_data+0x44>
 800a7b6:	bf00      	nop

0800a7b8 <_rclc_execute.part.0>:
 800a7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ba:	7803      	ldrb	r3, [r0, #0]
 800a7bc:	b087      	sub	sp, #28
 800a7be:	4604      	mov	r4, r0
 800a7c0:	2b0a      	cmp	r3, #10
 800a7c2:	f200 8136 	bhi.w	800aa32 <_rclc_execute.part.0+0x27a>
 800a7c6:	e8df f003 	tbb	[pc, r3]
 800a7ca:	435e      	.short	0x435e
 800a7cc:	06a1664f 	.word	0x06a1664f
 800a7d0:	6c1e0606 	.word	0x6c1e0606
 800a7d4:	59          	.byte	0x59
 800a7d5:	00          	.byte	0x00
 800a7d6:	2b06      	cmp	r3, #6
 800a7d8:	f000 8122 	beq.w	800aa20 <_rclc_execute.part.0+0x268>
 800a7dc:	2b07      	cmp	r3, #7
 800a7de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a7e0:	f040 8118 	bne.w	800aa14 <_rclc_execute.part.0+0x25c>
 800a7e4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800a7e8:	6880      	ldr	r0, [r0, #8]
 800a7ea:	4798      	blx	r3
 800a7ec:	f104 0110 	add.w	r1, r4, #16
 800a7f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a7f2:	6860      	ldr	r0, [r4, #4]
 800a7f4:	f007 f9d2 	bl	8011b9c <rcl_send_response>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d033      	beq.n	800a864 <_rclc_execute.part.0+0xac>
 800a7fc:	9005      	str	r0, [sp, #20]
 800a7fe:	f000 fd6f 	bl	800b2e0 <rcutils_reset_error>
 800a802:	9805      	ldr	r0, [sp, #20]
 800a804:	e02e      	b.n	800a864 <_rclc_execute.part.0+0xac>
 800a806:	6840      	ldr	r0, [r0, #4]
 800a808:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 8086 	beq.w	800a91e <_rclc_execute.part.0+0x166>
 800a812:	2600      	movs	r6, #0
 800a814:	2701      	movs	r7, #1
 800a816:	e004      	b.n	800a822 <_rclc_execute.part.0+0x6a>
 800a818:	f009 f880 	bl	801391c <rclc_action_send_result_request>
 800a81c:	b998      	cbnz	r0, 800a846 <_rclc_execute.part.0+0x8e>
 800a81e:	722f      	strb	r7, [r5, #8]
 800a820:	6860      	ldr	r0, [r4, #4]
 800a822:	f009 f92d 	bl	8013a80 <rclc_action_find_first_handle_with_goal_response>
 800a826:	4605      	mov	r5, r0
 800a828:	2800      	cmp	r0, #0
 800a82a:	d077      	beq.n	800a91c <_rclc_execute.part.0+0x164>
 800a82c:	6863      	ldr	r3, [r4, #4]
 800a82e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800a836:	f885 6020 	strb.w	r6, [r5, #32]
 800a83a:	4798      	blx	r3
 800a83c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800a840:	4628      	mov	r0, r5
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e8      	bne.n	800a818 <_rclc_execute.part.0+0x60>
 800a846:	6860      	ldr	r0, [r4, #4]
 800a848:	4629      	mov	r1, r5
 800a84a:	f009 f89d 	bl	8013988 <rclc_action_remove_used_goal_handle>
 800a84e:	e7e7      	b.n	800a820 <_rclc_execute.part.0+0x68>
 800a850:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a854:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800a858:	2d00      	cmp	r5, #0
 800a85a:	f000 80c9 	beq.w	800a9f0 <_rclc_execute.part.0+0x238>
 800a85e:	6880      	ldr	r0, [r0, #8]
 800a860:	4798      	blx	r3
 800a862:	2000      	movs	r0, #0
 800a864:	b007      	add	sp, #28
 800a866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a868:	6840      	ldr	r0, [r0, #4]
 800a86a:	f007 fcc7 	bl	80121fc <rcl_timer_call>
 800a86e:	f240 3321 	movw	r3, #801	@ 0x321
 800a872:	4298      	cmp	r0, r3
 800a874:	d004      	beq.n	800a880 <_rclc_execute.part.0+0xc8>
 800a876:	2800      	cmp	r0, #0
 800a878:	d0f4      	beq.n	800a864 <_rclc_execute.part.0+0xac>
 800a87a:	e7bf      	b.n	800a7fc <_rclc_execute.part.0+0x44>
 800a87c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a87e:	4798      	blx	r3
 800a880:	2000      	movs	r0, #0
 800a882:	b007      	add	sp, #28
 800a884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a886:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a88a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a88c:	b925      	cbnz	r5, 800a898 <_rclc_execute.part.0+0xe0>
 800a88e:	4628      	mov	r0, r5
 800a890:	4798      	blx	r3
 800a892:	4628      	mov	r0, r5
 800a894:	e7e6      	b.n	800a864 <_rclc_execute.part.0+0xac>
 800a896:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a898:	68a0      	ldr	r0, [r4, #8]
 800a89a:	4798      	blx	r3
 800a89c:	2000      	movs	r0, #0
 800a89e:	b007      	add	sp, #28
 800a8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a2:	6840      	ldr	r0, [r0, #4]
 800a8a4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a8a8:	bb3b      	cbnz	r3, 800a8fa <_rclc_execute.part.0+0x142>
 800a8aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d07b      	beq.n	800a9aa <_rclc_execute.part.0+0x1f2>
 800a8b2:	f640 0634 	movw	r6, #2100	@ 0x834
 800a8b6:	2701      	movs	r7, #1
 800a8b8:	e007      	b.n	800a8ca <_rclc_execute.part.0+0x112>
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f009 f8f8 	bl	8013ab0 <rclc_action_server_response_goal_request>
 800a8c0:	6860      	ldr	r0, [r4, #4]
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f009 f860 	bl	8013988 <rclc_action_remove_used_goal_handle>
 800a8c8:	6860      	ldr	r0, [r4, #4]
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	f009 f88a 	bl	80139e4 <rclc_action_find_first_handle_by_status>
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d066      	beq.n	800a9a4 <_rclc_execute.part.0+0x1ec>
 800a8d6:	6863      	ldr	r3, [r4, #4]
 800a8d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	4798      	blx	r3
 800a8de:	42b0      	cmp	r0, r6
 800a8e0:	f04f 0100 	mov.w	r1, #0
 800a8e4:	d1e9      	bne.n	800a8ba <_rclc_execute.part.0+0x102>
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f009 f8e1 	bl	8013ab0 <rclc_action_server_response_goal_request>
 800a8ee:	722f      	strb	r7, [r5, #8]
 800a8f0:	e7ea      	b.n	800a8c8 <_rclc_execute.part.0+0x110>
 800a8f2:	6848      	ldr	r0, [r1, #4]
 800a8f4:	f009 f848 	bl	8013988 <rclc_action_remove_used_goal_handle>
 800a8f8:	6860      	ldr	r0, [r4, #4]
 800a8fa:	f009 f87f 	bl	80139fc <rclc_action_find_first_terminated_handle>
 800a8fe:	4601      	mov	r1, r0
 800a900:	2800      	cmp	r0, #0
 800a902:	d1f6      	bne.n	800a8f2 <_rclc_execute.part.0+0x13a>
 800a904:	6860      	ldr	r0, [r4, #4]
 800a906:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800a90a:	e7ce      	b.n	800a8aa <_rclc_execute.part.0+0xf2>
 800a90c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a90e:	6880      	ldr	r0, [r0, #8]
 800a910:	f104 0110 	add.w	r1, r4, #16
 800a914:	4798      	blx	r3
 800a916:	2000      	movs	r0, #0
 800a918:	b007      	add	sp, #28
 800a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91c:	6860      	ldr	r0, [r4, #4]
 800a91e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a922:	b18b      	cbz	r3, 800a948 <_rclc_execute.part.0+0x190>
 800a924:	68c5      	ldr	r5, [r0, #12]
 800a926:	b32d      	cbz	r5, 800a974 <_rclc_execute.part.0+0x1bc>
 800a928:	2600      	movs	r6, #0
 800a92a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800a92e:	b143      	cbz	r3, 800a942 <_rclc_execute.part.0+0x18a>
 800a930:	69c3      	ldr	r3, [r0, #28]
 800a932:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800a936:	b123      	cbz	r3, 800a942 <_rclc_execute.part.0+0x18a>
 800a938:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a93a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a93c:	4628      	mov	r0, r5
 800a93e:	4798      	blx	r3
 800a940:	6860      	ldr	r0, [r4, #4]
 800a942:	682d      	ldr	r5, [r5, #0]
 800a944:	2d00      	cmp	r5, #0
 800a946:	d1f0      	bne.n	800a92a <_rclc_execute.part.0+0x172>
 800a948:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a94c:	b193      	cbz	r3, 800a974 <_rclc_execute.part.0+0x1bc>
 800a94e:	68c5      	ldr	r5, [r0, #12]
 800a950:	b185      	cbz	r5, 800a974 <_rclc_execute.part.0+0x1bc>
 800a952:	2600      	movs	r6, #0
 800a954:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800a958:	b14b      	cbz	r3, 800a96e <_rclc_execute.part.0+0x1b6>
 800a95a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a95c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800a960:	b12b      	cbz	r3, 800a96e <_rclc_execute.part.0+0x1b6>
 800a962:	4628      	mov	r0, r5
 800a964:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800a968:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a96a:	4798      	blx	r3
 800a96c:	6860      	ldr	r0, [r4, #4]
 800a96e:	682d      	ldr	r5, [r5, #0]
 800a970:	2d00      	cmp	r5, #0
 800a972:	d1ef      	bne.n	800a954 <_rclc_execute.part.0+0x19c>
 800a974:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d081      	beq.n	800a880 <_rclc_execute.part.0+0xc8>
 800a97c:	2700      	movs	r7, #0
 800a97e:	e00b      	b.n	800a998 <_rclc_execute.part.0+0x1e0>
 800a980:	6863      	ldr	r3, [r4, #4]
 800a982:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a984:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a986:	6a1e      	ldr	r6, [r3, #32]
 800a988:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a98c:	47b0      	blx	r6
 800a98e:	6860      	ldr	r0, [r4, #4]
 800a990:	4629      	mov	r1, r5
 800a992:	f008 fff9 	bl	8013988 <rclc_action_remove_used_goal_handle>
 800a996:	6860      	ldr	r0, [r4, #4]
 800a998:	f009 f87e 	bl	8013a98 <rclc_action_find_first_handle_with_result_response>
 800a99c:	4605      	mov	r5, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d1ee      	bne.n	800a980 <_rclc_execute.part.0+0x1c8>
 800a9a2:	e76d      	b.n	800a880 <_rclc_execute.part.0+0xc8>
 800a9a4:	6860      	ldr	r0, [r4, #4]
 800a9a6:	f880 5020 	strb.w	r5, [r0, #32]
 800a9aa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f43f af66 	beq.w	800a880 <_rclc_execute.part.0+0xc8>
 800a9b4:	68c5      	ldr	r5, [r0, #12]
 800a9b6:	b1b5      	cbz	r5, 800a9e6 <_rclc_execute.part.0+0x22e>
 800a9b8:	2602      	movs	r6, #2
 800a9ba:	e001      	b.n	800a9c0 <_rclc_execute.part.0+0x208>
 800a9bc:	682d      	ldr	r5, [r5, #0]
 800a9be:	b195      	cbz	r5, 800a9e6 <_rclc_execute.part.0+0x22e>
 800a9c0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d1f9      	bne.n	800a9bc <_rclc_execute.part.0+0x204>
 800a9c8:	69c3      	ldr	r3, [r0, #28]
 800a9ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	4798      	blx	r3
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a9dc:	b163      	cbz	r3, 800a9f8 <_rclc_execute.part.0+0x240>
 800a9de:	f009 f887 	bl	8013af0 <rclc_action_server_goal_cancel_accept>
 800a9e2:	6860      	ldr	r0, [r4, #4]
 800a9e4:	e7ea      	b.n	800a9bc <_rclc_execute.part.0+0x204>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	e739      	b.n	800a864 <_rclc_execute.part.0+0xac>
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	4798      	blx	r3
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	e735      	b.n	800a864 <_rclc_execute.part.0+0xac>
 800a9f8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a9fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a9fe:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800aa02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa06:	6860      	ldr	r0, [r4, #4]
 800aa08:	2101      	movs	r1, #1
 800aa0a:	f009 f89d 	bl	8013b48 <rclc_action_server_goal_cancel_reject>
 800aa0e:	722e      	strb	r6, [r5, #8]
 800aa10:	6860      	ldr	r0, [r4, #4]
 800aa12:	e7d3      	b.n	800a9bc <_rclc_execute.part.0+0x204>
 800aa14:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aa16:	6880      	ldr	r0, [r0, #8]
 800aa18:	4798      	blx	r3
 800aa1a:	f104 0110 	add.w	r1, r4, #16
 800aa1e:	e6e7      	b.n	800a7f0 <_rclc_execute.part.0+0x38>
 800aa20:	f100 0110 	add.w	r1, r0, #16
 800aa24:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa26:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800aa28:	6880      	ldr	r0, [r0, #8]
 800aa2a:	9105      	str	r1, [sp, #20]
 800aa2c:	4798      	blx	r3
 800aa2e:	9905      	ldr	r1, [sp, #20]
 800aa30:	e6de      	b.n	800a7f0 <_rclc_execute.part.0+0x38>
 800aa32:	2001      	movs	r0, #1
 800aa34:	e716      	b.n	800a864 <_rclc_execute.part.0+0xac>
 800aa36:	bf00      	nop

0800aa38 <rclc_executor_trigger_any>:
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d03f      	beq.n	800aabc <rclc_executor_trigger_any+0x84>
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	d03e      	beq.n	800aabe <rclc_executor_trigger_any+0x86>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800aa46:	2200      	movs	r2, #0
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d037      	beq.n	800aabc <rclc_executor_trigger_any+0x84>
 800aa4c:	b430      	push	{r4, r5}
 800aa4e:	f893 c000 	ldrb.w	ip, [r3]
 800aa52:	f1bc 0f08 	cmp.w	ip, #8
 800aa56:	d11e      	bne.n	800aa96 <rclc_executor_trigger_any+0x5e>
 800aa58:	685c      	ldr	r4, [r3, #4]
 800aa5a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800aa5c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800aa60:	d105      	bne.n	800aa6e <rclc_executor_trigger_any+0x36>
 800aa62:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800aa66:	b910      	cbnz	r0, 800aa6e <rclc_executor_trigger_any+0x36>
 800aa68:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800aa6c:	b128      	cbz	r0, 800aa7a <rclc_executor_trigger_any+0x42>
 800aa6e:	bc30      	pop	{r4, r5}
 800aa70:	4770      	bx	lr
 800aa72:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d1f9      	bne.n	800aa6e <rclc_executor_trigger_any+0x36>
 800aa7a:	3201      	adds	r2, #1
 800aa7c:	4291      	cmp	r1, r2
 800aa7e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aa82:	d018      	beq.n	800aab6 <rclc_executor_trigger_any+0x7e>
 800aa84:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d0f0      	beq.n	800aa6e <rclc_executor_trigger_any+0x36>
 800aa8c:	f893 c000 	ldrb.w	ip, [r3]
 800aa90:	f1bc 0f08 	cmp.w	ip, #8
 800aa94:	d0e0      	beq.n	800aa58 <rclc_executor_trigger_any+0x20>
 800aa96:	f1bc 0f09 	cmp.w	ip, #9
 800aa9a:	d1ea      	bne.n	800aa72 <rclc_executor_trigger_any+0x3a>
 800aa9c:	685c      	ldr	r4, [r3, #4]
 800aa9e:	6a25      	ldr	r5, [r4, #32]
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	d1e4      	bne.n	800aa6e <rclc_executor_trigger_any+0x36>
 800aaa4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d1e0      	bne.n	800aa6e <rclc_executor_trigger_any+0x36>
 800aaac:	3201      	adds	r2, #1
 800aaae:	4291      	cmp	r1, r2
 800aab0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aab4:	d1e6      	bne.n	800aa84 <rclc_executor_trigger_any+0x4c>
 800aab6:	2000      	movs	r0, #0
 800aab8:	bc30      	pop	{r4, r5}
 800aaba:	4770      	bx	lr
 800aabc:	4770      	bx	lr
 800aabe:	4608      	mov	r0, r1
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop

0800aac4 <rclc_executor_get_zero_initialized_executor>:
 800aac4:	b510      	push	{r4, lr}
 800aac6:	4903      	ldr	r1, [pc, #12]	@ (800aad4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800aac8:	4604      	mov	r4, r0
 800aaca:	2288      	movs	r2, #136	@ 0x88
 800aacc:	f00c fa2d 	bl	8016f2a <memcpy>
 800aad0:	4620      	mov	r0, r4
 800aad2:	bd10      	pop	{r4, pc}
 800aad4:	08017e60 	.word	0x08017e60

0800aad8 <rclc_executor_init>:
 800aad8:	2800      	cmp	r0, #0
 800aada:	d05f      	beq.n	800ab9c <rclc_executor_init+0xc4>
 800aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae0:	460c      	mov	r4, r1
 800aae2:	b0b0      	sub	sp, #192	@ 0xc0
 800aae4:	2900      	cmp	r1, #0
 800aae6:	d051      	beq.n	800ab8c <rclc_executor_init+0xb4>
 800aae8:	4605      	mov	r5, r0
 800aaea:	4618      	mov	r0, r3
 800aaec:	4616      	mov	r6, r2
 800aaee:	461f      	mov	r7, r3
 800aaf0:	f000 fbd0 	bl	800b294 <rcutils_allocator_is_valid>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d049      	beq.n	800ab8c <rclc_executor_init+0xb4>
 800aaf8:	2e00      	cmp	r6, #0
 800aafa:	d047      	beq.n	800ab8c <rclc_executor_init+0xb4>
 800aafc:	492c      	ldr	r1, [pc, #176]	@ (800abb0 <rclc_executor_init+0xd8>)
 800aafe:	2288      	movs	r2, #136	@ 0x88
 800ab00:	a80e      	add	r0, sp, #56	@ 0x38
 800ab02:	f00c fa12 	bl	8016f2a <memcpy>
 800ab06:	a90e      	add	r1, sp, #56	@ 0x38
 800ab08:	2288      	movs	r2, #136	@ 0x88
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f00c fa0d 	bl	8016f2a <memcpy>
 800ab10:	602c      	str	r4, [r5, #0]
 800ab12:	4668      	mov	r0, sp
 800ab14:	60ae      	str	r6, [r5, #8]
 800ab16:	466c      	mov	r4, sp
 800ab18:	f007 fce2 	bl	80124e0 <rcl_get_zero_initialized_wait_set>
 800ab1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab1e:	f105 0c14 	add.w	ip, r5, #20
 800ab22:	f8d7 8000 	ldr.w	r8, [r7]
 800ab26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab36:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800aba8 <rclc_executor_init+0xd0>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	f8cc 3000 	str.w	r3, [ip]
 800ab40:	6939      	ldr	r1, [r7, #16]
 800ab42:	612f      	str	r7, [r5, #16]
 800ab44:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ab48:	01b0      	lsls	r0, r6, #6
 800ab4a:	47c0      	blx	r8
 800ab4c:	6068      	str	r0, [r5, #4]
 800ab4e:	b338      	cbz	r0, 800aba0 <rclc_executor_init+0xc8>
 800ab50:	2400      	movs	r4, #0
 800ab52:	e000      	b.n	800ab56 <rclc_executor_init+0x7e>
 800ab54:	6868      	ldr	r0, [r5, #4]
 800ab56:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	3401      	adds	r4, #1
 800ab5e:	f000 fa6b 	bl	800b038 <rclc_executor_handle_init>
 800ab62:	42a6      	cmp	r6, r4
 800ab64:	d1f6      	bne.n	800ab54 <rclc_executor_init+0x7c>
 800ab66:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800ab6a:	f000 fa59 	bl	800b020 <rclc_executor_handle_counters_zero_init>
 800ab6e:	4a11      	ldr	r2, [pc, #68]	@ (800abb4 <rclc_executor_init+0xdc>)
 800ab70:	686b      	ldr	r3, [r5, #4]
 800ab72:	2000      	movs	r0, #0
 800ab74:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800ab78:	b163      	cbz	r3, 800ab94 <rclc_executor_init+0xbc>
 800ab7a:	692b      	ldr	r3, [r5, #16]
 800ab7c:	b153      	cbz	r3, 800ab94 <rclc_executor_init+0xbc>
 800ab7e:	68ab      	ldr	r3, [r5, #8]
 800ab80:	b143      	cbz	r3, 800ab94 <rclc_executor_init+0xbc>
 800ab82:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800ab86:	b030      	add	sp, #192	@ 0xc0
 800ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8c:	200b      	movs	r0, #11
 800ab8e:	b030      	add	sp, #192	@ 0xc0
 800ab90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab94:	4618      	mov	r0, r3
 800ab96:	b030      	add	sp, #192	@ 0xc0
 800ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9c:	200b      	movs	r0, #11
 800ab9e:	4770      	bx	lr
 800aba0:	200a      	movs	r0, #10
 800aba2:	e7f4      	b.n	800ab8e <rclc_executor_init+0xb6>
 800aba4:	f3af 8000 	nop.w
 800aba8:	3b9aca00 	.word	0x3b9aca00
 800abac:	00000000 	.word	0x00000000
 800abb0:	08017e60 	.word	0x08017e60
 800abb4:	0800aa39 	.word	0x0800aa39

0800abb8 <rclc_executor_add_timer>:
 800abb8:	b300      	cbz	r0, 800abfc <rclc_executor_add_timer+0x44>
 800abba:	b1f9      	cbz	r1, 800abfc <rclc_executor_add_timer+0x44>
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800abc2:	4293      	cmp	r3, r2
 800abc4:	4604      	mov	r4, r0
 800abc6:	d301      	bcc.n	800abcc <rclc_executor_add_timer+0x14>
 800abc8:	2001      	movs	r0, #1
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	6840      	ldr	r0, [r0, #4]
 800abce:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800abd2:	019d      	lsls	r5, r3, #6
 800abd4:	6051      	str	r1, [r2, #4]
 800abd6:	2102      	movs	r1, #2
 800abd8:	5341      	strh	r1, [r0, r5]
 800abda:	3301      	adds	r3, #1
 800abdc:	2000      	movs	r0, #0
 800abde:	2101      	movs	r1, #1
 800abe0:	f104 0514 	add.w	r5, r4, #20
 800abe4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800abe6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800abe8:	4628      	mov	r0, r5
 800abea:	60e3      	str	r3, [r4, #12]
 800abec:	f007 fc8c 	bl	8012508 <rcl_wait_set_is_valid>
 800abf0:	b930      	cbnz	r0, 800ac00 <rclc_executor_add_timer+0x48>
 800abf2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800abf4:	3301      	adds	r3, #1
 800abf6:	2000      	movs	r0, #0
 800abf8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	200b      	movs	r0, #11
 800abfe:	4770      	bx	lr
 800ac00:	4628      	mov	r0, r5
 800ac02:	f007 fc87 	bl	8012514 <rcl_wait_set_fini>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d0f3      	beq.n	800abf2 <rclc_executor_add_timer+0x3a>
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}

0800ac0c <rclc_executor_prepare>:
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d044      	beq.n	800ac9a <rclc_executor_prepare+0x8e>
 800ac10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac12:	f100 0514 	add.w	r5, r0, #20
 800ac16:	b09b      	sub	sp, #108	@ 0x6c
 800ac18:	4604      	mov	r4, r0
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f007 fc74 	bl	8012508 <rcl_wait_set_is_valid>
 800ac20:	b110      	cbz	r0, 800ac28 <rclc_executor_prepare+0x1c>
 800ac22:	2000      	movs	r0, #0
 800ac24:	b01b      	add	sp, #108	@ 0x6c
 800ac26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f007 fc73 	bl	8012514 <rcl_wait_set_fini>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d130      	bne.n	800ac94 <rclc_executor_prepare+0x88>
 800ac32:	a80c      	add	r0, sp, #48	@ 0x30
 800ac34:	f007 fc54 	bl	80124e0 <rcl_get_zero_initialized_wait_set>
 800ac38:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ac3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac40:	46ae      	mov	lr, r5
 800ac42:	6927      	ldr	r7, [r4, #16]
 800ac44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ac48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ac50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ac58:	f8dc 3000 	ldr.w	r3, [ip]
 800ac5c:	f8ce 3000 	str.w	r3, [lr]
 800ac60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ac62:	ae04      	add	r6, sp, #16
 800ac64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6822      	ldr	r2, [r4, #0]
 800ac6a:	6033      	str	r3, [r6, #0]
 800ac6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac6e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ac70:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ac74:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ac78:	e9cd 2100 	strd	r2, r1, [sp]
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ac80:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac82:	f007 ff45 	bl	8012b10 <rcl_wait_set_init>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d0cc      	beq.n	800ac24 <rclc_executor_prepare+0x18>
 800ac8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ac8c:	f000 fb28 	bl	800b2e0 <rcutils_reset_error>
 800ac90:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ac92:	e7c7      	b.n	800ac24 <rclc_executor_prepare+0x18>
 800ac94:	f000 fb24 	bl	800b2e0 <rcutils_reset_error>
 800ac98:	e7cb      	b.n	800ac32 <rclc_executor_prepare+0x26>
 800ac9a:	200b      	movs	r0, #11
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop

0800aca0 <rclc_executor_spin_some.part.0>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	f100 0614 	add.w	r6, r0, #20
 800aca8:	b083      	sub	sp, #12
 800acaa:	4691      	mov	r9, r2
 800acac:	4698      	mov	r8, r3
 800acae:	4605      	mov	r5, r0
 800acb0:	f7ff ffac 	bl	800ac0c <rclc_executor_prepare>
 800acb4:	4630      	mov	r0, r6
 800acb6:	f007 fcf9 	bl	80126ac <rcl_wait_set_clear>
 800acba:	4607      	mov	r7, r0
 800acbc:	2800      	cmp	r0, #0
 800acbe:	f040 80ed 	bne.w	800ae9c <rclc_executor_spin_some.part.0+0x1fc>
 800acc2:	68ab      	ldr	r3, [r5, #8]
 800acc4:	4604      	mov	r4, r0
 800acc6:	b303      	cbz	r3, 800ad0a <rclc_executor_spin_some.part.0+0x6a>
 800acc8:	6869      	ldr	r1, [r5, #4]
 800acca:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800acce:	01a2      	lsls	r2, r4, #6
 800acd0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800acd4:	b1cb      	cbz	r3, 800ad0a <rclc_executor_spin_some.part.0+0x6a>
 800acd6:	5c8b      	ldrb	r3, [r1, r2]
 800acd8:	2b0a      	cmp	r3, #10
 800acda:	f200 80d8 	bhi.w	800ae8e <rclc_executor_spin_some.part.0+0x1ee>
 800acde:	e8df f003 	tbb	[pc, r3]
 800ace2:	9c9c      	.short	0x9c9c
 800ace4:	068c8ca7 	.word	0x068c8ca7
 800ace8:	bdc90606 	.word	0xbdc90606
 800acec:	b2          	.byte	0xb2
 800aced:	00          	.byte	0x00
 800acee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800acf2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800acf6:	4630      	mov	r0, r6
 800acf8:	f008 f820 	bl	8012d3c <rcl_wait_set_add_service>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f040 8086 	bne.w	800ae0e <rclc_executor_spin_some.part.0+0x16e>
 800ad02:	68ab      	ldr	r3, [r5, #8]
 800ad04:	3401      	adds	r4, #1
 800ad06:	429c      	cmp	r4, r3
 800ad08:	d3de      	bcc.n	800acc8 <rclc_executor_spin_some.part.0+0x28>
 800ad0a:	4643      	mov	r3, r8
 800ad0c:	464a      	mov	r2, r9
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f008 f842 	bl	8012d98 <rcl_wait>
 800ad14:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 80c7 	beq.w	800aeac <rclc_executor_spin_some.part.0+0x20c>
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	f040 80b5 	bne.w	800ae8e <rclc_executor_spin_some.part.0+0x1ee>
 800ad24:	68ab      	ldr	r3, [r5, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 8159 	beq.w	800afde <rclc_executor_spin_some.part.0+0x33e>
 800ad2c:	2400      	movs	r4, #0
 800ad2e:	46a0      	mov	r8, r4
 800ad30:	f240 1991 	movw	r9, #401	@ 0x191
 800ad34:	e00a      	b.n	800ad4c <rclc_executor_spin_some.part.0+0xac>
 800ad36:	f7ff fb7d 	bl	800a434 <_rclc_check_for_new_data>
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	b110      	cbz	r0, 800ad44 <rclc_executor_spin_some.part.0+0xa4>
 800ad3e:	4548      	cmp	r0, r9
 800ad40:	f040 80b2 	bne.w	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800ad44:	68ab      	ldr	r3, [r5, #8]
 800ad46:	4598      	cmp	r8, r3
 800ad48:	f080 8126 	bcs.w	800af98 <rclc_executor_spin_some.part.0+0x2f8>
 800ad4c:	686a      	ldr	r2, [r5, #4]
 800ad4e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ad52:	4631      	mov	r1, r6
 800ad54:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ad58:	f108 0801 	add.w	r8, r8, #1
 800ad5c:	f1bc 0f00 	cmp.w	ip, #0
 800ad60:	d1e9      	bne.n	800ad36 <rclc_executor_spin_some.part.0+0x96>
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ad6a:	4798      	blx	r3
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	f000 809b 	beq.w	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800ad72:	68ab      	ldr	r3, [r5, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8097 	beq.w	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800ad7a:	f04f 0800 	mov.w	r8, #0
 800ad7e:	f240 1991 	movw	r9, #401	@ 0x191
 800ad82:	e009      	b.n	800ad98 <rclc_executor_spin_some.part.0+0xf8>
 800ad84:	f7ff fba4 	bl	800a4d0 <_rclc_take_new_data>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	b110      	cbz	r0, 800ad92 <rclc_executor_spin_some.part.0+0xf2>
 800ad8c:	4548      	cmp	r0, r9
 800ad8e:	f040 808b 	bne.w	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800ad92:	68ab      	ldr	r3, [r5, #8]
 800ad94:	4598      	cmp	r8, r3
 800ad96:	d209      	bcs.n	800adac <rclc_executor_spin_some.part.0+0x10c>
 800ad98:	6868      	ldr	r0, [r5, #4]
 800ad9a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ad9e:	4631      	mov	r1, r6
 800ada0:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ada4:	f108 0801 	add.w	r8, r8, #1
 800ada8:	2a00      	cmp	r2, #0
 800adaa:	d1eb      	bne.n	800ad84 <rclc_executor_spin_some.part.0+0xe4>
 800adac:	2600      	movs	r6, #0
 800adae:	b97b      	cbnz	r3, 800add0 <rclc_executor_spin_some.part.0+0x130>
 800adb0:	e07a      	b.n	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800adb2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800adb6:	2a08      	cmp	r2, #8
 800adb8:	f000 80fd 	beq.w	800afb6 <rclc_executor_spin_some.part.0+0x316>
 800adbc:	2a09      	cmp	r2, #9
 800adbe:	f000 80ef 	beq.w	800afa0 <rclc_executor_spin_some.part.0+0x300>
 800adc2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800adc6:	b98a      	cbnz	r2, 800adec <rclc_executor_spin_some.part.0+0x14c>
 800adc8:	3601      	adds	r6, #1
 800adca:	429e      	cmp	r6, r3
 800adcc:	d262      	bcs.n	800ae94 <rclc_executor_spin_some.part.0+0x1f4>
 800adce:	2400      	movs	r4, #0
 800add0:	686a      	ldr	r2, [r5, #4]
 800add2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800add6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800adda:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800adde:	2900      	cmp	r1, #0
 800ade0:	d062      	beq.n	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800ade2:	7841      	ldrb	r1, [r0, #1]
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d0e4      	beq.n	800adb2 <rclc_executor_spin_some.part.0+0x112>
 800ade8:	2901      	cmp	r1, #1
 800adea:	d1ed      	bne.n	800adc8 <rclc_executor_spin_some.part.0+0x128>
 800adec:	f7ff fce4 	bl	800a7b8 <_rclc_execute.part.0>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f040 80b6 	bne.w	800af62 <rclc_executor_spin_some.part.0+0x2c2>
 800adf6:	68ab      	ldr	r3, [r5, #8]
 800adf8:	e7e6      	b.n	800adc8 <rclc_executor_spin_some.part.0+0x128>
 800adfa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800adfe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ae02:	4630      	mov	r0, r6
 800ae04:	f007 ff6e 	bl	8012ce4 <rcl_wait_set_add_client>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f43f af7a 	beq.w	800ad02 <rclc_executor_spin_some.part.0+0x62>
 800ae0e:	9001      	str	r0, [sp, #4]
 800ae10:	f000 fa66 	bl	800b2e0 <rcutils_reset_error>
 800ae14:	9801      	ldr	r0, [sp, #4]
 800ae16:	4607      	mov	r7, r0
 800ae18:	e03c      	b.n	800ae94 <rclc_executor_spin_some.part.0+0x1f4>
 800ae1a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae1e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ae22:	4630      	mov	r0, r6
 800ae24:	f007 fc16 	bl	8012654 <rcl_wait_set_add_subscription>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f43f af6a 	beq.w	800ad02 <rclc_executor_spin_some.part.0+0x62>
 800ae2e:	e7ee      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x16e>
 800ae30:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae34:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f007 ff23 	bl	8012c84 <rcl_wait_set_add_timer>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	f43f af5f 	beq.w	800ad02 <rclc_executor_spin_some.part.0+0x62>
 800ae44:	e7e3      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x16e>
 800ae46:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae4a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f007 feec 	bl	8012c2c <rcl_wait_set_add_guard_condition>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f43f af54 	beq.w	800ad02 <rclc_executor_spin_some.part.0+0x62>
 800ae5a:	e7d8      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x16e>
 800ae5c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae60:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ae64:	3110      	adds	r1, #16
 800ae66:	4630      	mov	r0, r6
 800ae68:	f008 fc6e 	bl	8013748 <rcl_action_wait_set_add_action_server>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	f43f af48 	beq.w	800ad02 <rclc_executor_spin_some.part.0+0x62>
 800ae72:	e7cc      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x16e>
 800ae74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae78:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ae7c:	3110      	adds	r1, #16
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4630      	mov	r0, r6
 800ae82:	f008 fa39 	bl	80132f8 <rcl_action_wait_set_add_action_client>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f43f af3b 	beq.w	800ad02 <rclc_executor_spin_some.part.0+0x62>
 800ae8c:	e7bf      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x16e>
 800ae8e:	f000 fa27 	bl	800b2e0 <rcutils_reset_error>
 800ae92:	2701      	movs	r7, #1
 800ae94:	4638      	mov	r0, r7
 800ae96:	b003      	add	sp, #12
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	f000 fa20 	bl	800b2e0 <rcutils_reset_error>
 800aea0:	4638      	mov	r0, r7
 800aea2:	b003      	add	sp, #12
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	4627      	mov	r7, r4
 800aeaa:	e7f3      	b.n	800ae94 <rclc_executor_spin_some.part.0+0x1f4>
 800aeac:	68ab      	ldr	r3, [r5, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8092 	beq.w	800afd8 <rclc_executor_spin_some.part.0+0x338>
 800aeb4:	2400      	movs	r4, #0
 800aeb6:	46a0      	mov	r8, r4
 800aeb8:	f240 1991 	movw	r9, #401	@ 0x191
 800aebc:	e008      	b.n	800aed0 <rclc_executor_spin_some.part.0+0x230>
 800aebe:	f7ff fab9 	bl	800a434 <_rclc_check_for_new_data>
 800aec2:	4604      	mov	r4, r0
 800aec4:	b108      	cbz	r0, 800aeca <rclc_executor_spin_some.part.0+0x22a>
 800aec6:	4548      	cmp	r0, r9
 800aec8:	d1ee      	bne.n	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800aeca:	68ab      	ldr	r3, [r5, #8]
 800aecc:	4598      	cmp	r8, r3
 800aece:	d265      	bcs.n	800af9c <rclc_executor_spin_some.part.0+0x2fc>
 800aed0:	686a      	ldr	r2, [r5, #4]
 800aed2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800aed6:	4631      	mov	r1, r6
 800aed8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800aedc:	f108 0801 	add.w	r8, r8, #1
 800aee0:	f1bc 0f00 	cmp.w	ip, #0
 800aee4:	d1eb      	bne.n	800aebe <rclc_executor_spin_some.part.0+0x21e>
 800aee6:	4619      	mov	r1, r3
 800aee8:	4610      	mov	r0, r2
 800aeea:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800aeee:	4798      	blx	r3
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d0d9      	beq.n	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800aef4:	68ab      	ldr	r3, [r5, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0d6      	beq.n	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800aefa:	f04f 0800 	mov.w	r8, #0
 800aefe:	f240 1991 	movw	r9, #401	@ 0x191
 800af02:	f240 2a59 	movw	sl, #601	@ 0x259
 800af06:	e00e      	b.n	800af26 <rclc_executor_spin_some.part.0+0x286>
 800af08:	f813 300b 	ldrb.w	r3, [r3, fp]
 800af0c:	2b08      	cmp	r3, #8
 800af0e:	d033      	beq.n	800af78 <rclc_executor_spin_some.part.0+0x2d8>
 800af10:	2b09      	cmp	r3, #9
 800af12:	d028      	beq.n	800af66 <rclc_executor_spin_some.part.0+0x2c6>
 800af14:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800af18:	b9fb      	cbnz	r3, 800af5a <rclc_executor_spin_some.part.0+0x2ba>
 800af1a:	68ab      	ldr	r3, [r5, #8]
 800af1c:	f108 0801 	add.w	r8, r8, #1
 800af20:	4598      	cmp	r8, r3
 800af22:	d2b7      	bcs.n	800ae94 <rclc_executor_spin_some.part.0+0x1f4>
 800af24:	2400      	movs	r4, #0
 800af26:	6868      	ldr	r0, [r5, #4]
 800af28:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800af2c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800af30:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0b7      	beq.n	800aea8 <rclc_executor_spin_some.part.0+0x208>
 800af38:	4631      	mov	r1, r6
 800af3a:	f7ff fac9 	bl	800a4d0 <_rclc_take_new_data>
 800af3e:	b118      	cbz	r0, 800af48 <rclc_executor_spin_some.part.0+0x2a8>
 800af40:	4548      	cmp	r0, r9
 800af42:	d001      	beq.n	800af48 <rclc_executor_spin_some.part.0+0x2a8>
 800af44:	4550      	cmp	r0, sl
 800af46:	d10c      	bne.n	800af62 <rclc_executor_spin_some.part.0+0x2c2>
 800af48:	686b      	ldr	r3, [r5, #4]
 800af4a:	eb13 000b 	adds.w	r0, r3, fp
 800af4e:	d021      	beq.n	800af94 <rclc_executor_spin_some.part.0+0x2f4>
 800af50:	7842      	ldrb	r2, [r0, #1]
 800af52:	2a00      	cmp	r2, #0
 800af54:	d0d8      	beq.n	800af08 <rclc_executor_spin_some.part.0+0x268>
 800af56:	2a01      	cmp	r2, #1
 800af58:	d1df      	bne.n	800af1a <rclc_executor_spin_some.part.0+0x27a>
 800af5a:	f7ff fc2d 	bl	800a7b8 <_rclc_execute.part.0>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d0db      	beq.n	800af1a <rclc_executor_spin_some.part.0+0x27a>
 800af62:	4607      	mov	r7, r0
 800af64:	e796      	b.n	800ae94 <rclc_executor_spin_some.part.0+0x1f4>
 800af66:	6843      	ldr	r3, [r0, #4]
 800af68:	6a1a      	ldr	r2, [r3, #32]
 800af6a:	2a00      	cmp	r2, #0
 800af6c:	d1f5      	bne.n	800af5a <rclc_executor_spin_some.part.0+0x2ba>
 800af6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0d1      	beq.n	800af1a <rclc_executor_spin_some.part.0+0x27a>
 800af76:	e7f0      	b.n	800af5a <rclc_executor_spin_some.part.0+0x2ba>
 800af78:	6843      	ldr	r3, [r0, #4]
 800af7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af7c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800af80:	d1eb      	bne.n	800af5a <rclc_executor_spin_some.part.0+0x2ba>
 800af82:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800af86:	2a00      	cmp	r2, #0
 800af88:	d1e7      	bne.n	800af5a <rclc_executor_spin_some.part.0+0x2ba>
 800af8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0c3      	beq.n	800af1a <rclc_executor_spin_some.part.0+0x27a>
 800af92:	e7e2      	b.n	800af5a <rclc_executor_spin_some.part.0+0x2ba>
 800af94:	270b      	movs	r7, #11
 800af96:	e77d      	b.n	800ae94 <rclc_executor_spin_some.part.0+0x1f4>
 800af98:	686a      	ldr	r2, [r5, #4]
 800af9a:	e6e2      	b.n	800ad62 <rclc_executor_spin_some.part.0+0xc2>
 800af9c:	686a      	ldr	r2, [r5, #4]
 800af9e:	e7a2      	b.n	800aee6 <rclc_executor_spin_some.part.0+0x246>
 800afa0:	6842      	ldr	r2, [r0, #4]
 800afa2:	6a11      	ldr	r1, [r2, #32]
 800afa4:	2900      	cmp	r1, #0
 800afa6:	f47f af21 	bne.w	800adec <rclc_executor_spin_some.part.0+0x14c>
 800afaa:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800afae:	2a00      	cmp	r2, #0
 800afb0:	f43f af0a 	beq.w	800adc8 <rclc_executor_spin_some.part.0+0x128>
 800afb4:	e71a      	b.n	800adec <rclc_executor_spin_some.part.0+0x14c>
 800afb6:	6842      	ldr	r2, [r0, #4]
 800afb8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800afba:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800afbe:	f47f af15 	bne.w	800adec <rclc_executor_spin_some.part.0+0x14c>
 800afc2:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800afc6:	2900      	cmp	r1, #0
 800afc8:	f47f af10 	bne.w	800adec <rclc_executor_spin_some.part.0+0x14c>
 800afcc:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	f43f aef9 	beq.w	800adc8 <rclc_executor_spin_some.part.0+0x128>
 800afd6:	e709      	b.n	800adec <rclc_executor_spin_some.part.0+0x14c>
 800afd8:	686a      	ldr	r2, [r5, #4]
 800afda:	461c      	mov	r4, r3
 800afdc:	e783      	b.n	800aee6 <rclc_executor_spin_some.part.0+0x246>
 800afde:	686a      	ldr	r2, [r5, #4]
 800afe0:	461c      	mov	r4, r3
 800afe2:	e6be      	b.n	800ad62 <rclc_executor_spin_some.part.0+0xc2>

0800afe4 <rclc_executor_spin>:
 800afe4:	b1d0      	cbz	r0, 800b01c <rclc_executor_spin+0x38>
 800afe6:	b510      	push	{r4, lr}
 800afe8:	4604      	mov	r4, r0
 800afea:	b082      	sub	sp, #8
 800afec:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800aff0:	6820      	ldr	r0, [r4, #0]
 800aff2:	e9cd 2300 	strd	r2, r3, [sp]
 800aff6:	f006 f8b7 	bl	8011168 <rcl_context_is_valid>
 800affa:	4601      	mov	r1, r0
 800affc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b000:	4620      	mov	r0, r4
 800b002:	b131      	cbz	r1, 800b012 <rclc_executor_spin+0x2e>
 800b004:	f7ff fe4c 	bl	800aca0 <rclc_executor_spin_some.part.0>
 800b008:	f030 0302 	bics.w	r3, r0, #2
 800b00c:	d0ee      	beq.n	800afec <rclc_executor_spin+0x8>
 800b00e:	b002      	add	sp, #8
 800b010:	bd10      	pop	{r4, pc}
 800b012:	f000 f965 	bl	800b2e0 <rcutils_reset_error>
 800b016:	2001      	movs	r0, #1
 800b018:	b002      	add	sp, #8
 800b01a:	bd10      	pop	{r4, pc}
 800b01c:	200b      	movs	r0, #11
 800b01e:	4770      	bx	lr

0800b020 <rclc_executor_handle_counters_zero_init>:
 800b020:	b130      	cbz	r0, 800b030 <rclc_executor_handle_counters_zero_init+0x10>
 800b022:	b508      	push	{r3, lr}
 800b024:	2220      	movs	r2, #32
 800b026:	2100      	movs	r1, #0
 800b028:	f00b feb6 	bl	8016d98 <memset>
 800b02c:	2000      	movs	r0, #0
 800b02e:	bd08      	pop	{r3, pc}
 800b030:	200b      	movs	r0, #11
 800b032:	4770      	bx	lr
 800b034:	0000      	movs	r0, r0
	...

0800b038 <rclc_executor_handle_init>:
 800b038:	b168      	cbz	r0, 800b056 <rclc_executor_handle_init+0x1e>
 800b03a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b060 <rclc_executor_handle_init+0x28>
 800b03e:	2300      	movs	r3, #0
 800b040:	220b      	movs	r2, #11
 800b042:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b046:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b04a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b04e:	8002      	strh	r2, [r0, #0]
 800b050:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b052:	4618      	mov	r0, r3
 800b054:	4770      	bx	lr
 800b056:	200b      	movs	r0, #11
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	f3af 8000 	nop.w
	...

0800b068 <rclc_support_init_with_options>:
 800b068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b06c:	b083      	sub	sp, #12
 800b06e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b070:	b340      	cbz	r0, 800b0c4 <rclc_support_init_with_options+0x5c>
 800b072:	461d      	mov	r5, r3
 800b074:	b333      	cbz	r3, 800b0c4 <rclc_support_init_with_options+0x5c>
 800b076:	b32e      	cbz	r6, 800b0c4 <rclc_support_init_with_options+0x5c>
 800b078:	46e9      	mov	r9, sp
 800b07a:	4604      	mov	r4, r0
 800b07c:	4648      	mov	r0, r9
 800b07e:	460f      	mov	r7, r1
 800b080:	4690      	mov	r8, r2
 800b082:	f006 f867 	bl	8011154 <rcl_get_zero_initialized_context>
 800b086:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b08a:	462a      	mov	r2, r5
 800b08c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b090:	4623      	mov	r3, r4
 800b092:	4641      	mov	r1, r8
 800b094:	4638      	mov	r0, r7
 800b096:	f006 f8cd 	bl	8011234 <rcl_init>
 800b09a:	4605      	mov	r5, r0
 800b09c:	b960      	cbnz	r0, 800b0b8 <rclc_support_init_with_options+0x50>
 800b09e:	60a6      	str	r6, [r4, #8]
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	f104 010c 	add.w	r1, r4, #12
 800b0a6:	2003      	movs	r0, #3
 800b0a8:	f006 fe1a 	bl	8011ce0 <rcl_clock_init>
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	b918      	cbnz	r0, 800b0b8 <rclc_support_init_with_options+0x50>
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	b003      	add	sp, #12
 800b0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0b8:	f000 f912 	bl	800b2e0 <rcutils_reset_error>
 800b0bc:	4628      	mov	r0, r5
 800b0be:	b003      	add	sp, #12
 800b0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0c4:	250b      	movs	r5, #11
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	b003      	add	sp, #12
 800b0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0ce:	bf00      	nop

0800b0d0 <rclc_node_init_default>:
 800b0d0:	b3b8      	cbz	r0, 800b142 <rclc_node_init_default+0x72>
 800b0d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	b0a1      	sub	sp, #132	@ 0x84
 800b0da:	b329      	cbz	r1, 800b128 <rclc_node_init_default+0x58>
 800b0dc:	4616      	mov	r6, r2
 800b0de:	b31a      	cbz	r2, 800b128 <rclc_node_init_default+0x58>
 800b0e0:	461f      	mov	r7, r3
 800b0e2:	b30b      	cbz	r3, 800b128 <rclc_node_init_default+0x58>
 800b0e4:	f10d 0810 	add.w	r8, sp, #16
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f006 f9c8 	bl	8011480 <rcl_get_zero_initialized_node>
 800b0f0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b0f4:	f10d 0918 	add.w	r9, sp, #24
 800b0f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	f006 fb37 	bl	8011770 <rcl_node_get_default_options>
 800b102:	4640      	mov	r0, r8
 800b104:	f006 f9bc 	bl	8011480 <rcl_get_zero_initialized_node>
 800b108:	f8cd 9000 	str.w	r9, [sp]
 800b10c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b110:	463b      	mov	r3, r7
 800b112:	e884 0003 	stmia.w	r4, {r0, r1}
 800b116:	4632      	mov	r2, r6
 800b118:	4629      	mov	r1, r5
 800b11a:	4620      	mov	r0, r4
 800b11c:	f006 f9ba 	bl	8011494 <rcl_node_init>
 800b120:	b930      	cbnz	r0, 800b130 <rclc_node_init_default+0x60>
 800b122:	b021      	add	sp, #132	@ 0x84
 800b124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b128:	200b      	movs	r0, #11
 800b12a:	b021      	add	sp, #132	@ 0x84
 800b12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b130:	9003      	str	r0, [sp, #12]
 800b132:	f000 f8d5 	bl	800b2e0 <rcutils_reset_error>
 800b136:	f000 f8d3 	bl	800b2e0 <rcutils_reset_error>
 800b13a:	9803      	ldr	r0, [sp, #12]
 800b13c:	b021      	add	sp, #132	@ 0x84
 800b13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b142:	200b      	movs	r0, #11
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop

0800b148 <rclc_publisher_init_best_effort>:
 800b148:	b368      	cbz	r0, 800b1a6 <rclc_publisher_init_best_effort+0x5e>
 800b14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14e:	460d      	mov	r5, r1
 800b150:	b0a0      	sub	sp, #128	@ 0x80
 800b152:	b321      	cbz	r1, 800b19e <rclc_publisher_init_best_effort+0x56>
 800b154:	4616      	mov	r6, r2
 800b156:	b312      	cbz	r2, 800b19e <rclc_publisher_init_best_effort+0x56>
 800b158:	461f      	mov	r7, r3
 800b15a:	b303      	cbz	r3, 800b19e <rclc_publisher_init_best_effort+0x56>
 800b15c:	4604      	mov	r4, r0
 800b15e:	f7ff f859 	bl	800a214 <rcl_get_zero_initialized_publisher>
 800b162:	f10d 0810 	add.w	r8, sp, #16
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	4640      	mov	r0, r8
 800b16a:	f7ff f8ef 	bl	800a34c <rcl_publisher_get_default_options>
 800b16e:	490f      	ldr	r1, [pc, #60]	@ (800b1ac <rclc_publisher_init_best_effort+0x64>)
 800b170:	2250      	movs	r2, #80	@ 0x50
 800b172:	4640      	mov	r0, r8
 800b174:	f00b fed9 	bl	8016f2a <memcpy>
 800b178:	f8cd 8000 	str.w	r8, [sp]
 800b17c:	463b      	mov	r3, r7
 800b17e:	4632      	mov	r2, r6
 800b180:	4629      	mov	r1, r5
 800b182:	4620      	mov	r0, r4
 800b184:	f7ff f84c 	bl	800a220 <rcl_publisher_init>
 800b188:	b910      	cbnz	r0, 800b190 <rclc_publisher_init_best_effort+0x48>
 800b18a:	b020      	add	sp, #128	@ 0x80
 800b18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b190:	9003      	str	r0, [sp, #12]
 800b192:	f000 f8a5 	bl	800b2e0 <rcutils_reset_error>
 800b196:	9803      	ldr	r0, [sp, #12]
 800b198:	b020      	add	sp, #128	@ 0x80
 800b19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b19e:	200b      	movs	r0, #11
 800b1a0:	b020      	add	sp, #128	@ 0x80
 800b1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a6:	200b      	movs	r0, #11
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	08017ee8 	.word	0x08017ee8

0800b1b0 <rclc_timer_init_default>:
 800b1b0:	b360      	cbz	r0, 800b20c <rclc_timer_init_default+0x5c>
 800b1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b6:	460e      	mov	r6, r1
 800b1b8:	b08a      	sub	sp, #40	@ 0x28
 800b1ba:	b319      	cbz	r1, 800b204 <rclc_timer_init_default+0x54>
 800b1bc:	4690      	mov	r8, r2
 800b1be:	461f      	mov	r7, r3
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	f006 ff6b 	bl	801209c <rcl_get_zero_initialized_timer>
 800b1c6:	68b4      	ldr	r4, [r6, #8]
 800b1c8:	6028      	str	r0, [r5, #0]
 800b1ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b1cc:	f10d 0c0c 	add.w	ip, sp, #12
 800b1d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	f8cc 3000 	str.w	r3, [ip]
 800b1da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1dc:	9302      	str	r3, [sp, #8]
 800b1de:	e9cd 8700 	strd	r8, r7, [sp]
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	f106 010c 	add.w	r1, r6, #12
 800b1ea:	f006 ff5d 	bl	80120a8 <rcl_timer_init>
 800b1ee:	b910      	cbnz	r0, 800b1f6 <rclc_timer_init_default+0x46>
 800b1f0:	b00a      	add	sp, #40	@ 0x28
 800b1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f6:	9009      	str	r0, [sp, #36]	@ 0x24
 800b1f8:	f000 f872 	bl	800b2e0 <rcutils_reset_error>
 800b1fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1fe:	b00a      	add	sp, #40	@ 0x28
 800b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b204:	200b      	movs	r0, #11
 800b206:	b00a      	add	sp, #40	@ 0x28
 800b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20c:	200b      	movs	r0, #11
 800b20e:	4770      	bx	lr

0800b210 <__default_zero_allocate>:
 800b210:	f00b b9d8 	b.w	80165c4 <calloc>

0800b214 <__default_reallocate>:
 800b214:	f00b bb64 	b.w	80168e0 <realloc>

0800b218 <__default_deallocate>:
 800b218:	f00b ba40 	b.w	801669c <free>

0800b21c <__default_allocate>:
 800b21c:	f00b ba36 	b.w	801668c <malloc>

0800b220 <rcutils_get_zero_initialized_allocator>:
 800b220:	b510      	push	{r4, lr}
 800b222:	4c05      	ldr	r4, [pc, #20]	@ (800b238 <rcutils_get_zero_initialized_allocator+0x18>)
 800b224:	4686      	mov	lr, r0
 800b226:	4684      	mov	ip, r0
 800b228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b22a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	f8cc 3000 	str.w	r3, [ip]
 800b234:	4670      	mov	r0, lr
 800b236:	bd10      	pop	{r4, pc}
 800b238:	08017f38 	.word	0x08017f38

0800b23c <rcutils_set_default_allocator>:
 800b23c:	b1a8      	cbz	r0, 800b26a <rcutils_set_default_allocator+0x2e>
 800b23e:	6802      	ldr	r2, [r0, #0]
 800b240:	b1a2      	cbz	r2, 800b26c <rcutils_set_default_allocator+0x30>
 800b242:	6841      	ldr	r1, [r0, #4]
 800b244:	b1a1      	cbz	r1, 800b270 <rcutils_set_default_allocator+0x34>
 800b246:	b410      	push	{r4}
 800b248:	68c4      	ldr	r4, [r0, #12]
 800b24a:	b164      	cbz	r4, 800b266 <rcutils_set_default_allocator+0x2a>
 800b24c:	6880      	ldr	r0, [r0, #8]
 800b24e:	b138      	cbz	r0, 800b260 <rcutils_set_default_allocator+0x24>
 800b250:	4b08      	ldr	r3, [pc, #32]	@ (800b274 <rcutils_set_default_allocator+0x38>)
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	2200      	movs	r2, #0
 800b256:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b25a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b25e:	2001      	movs	r0, #1
 800b260:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	4620      	mov	r0, r4
 800b268:	e7fa      	b.n	800b260 <rcutils_set_default_allocator+0x24>
 800b26a:	4770      	bx	lr
 800b26c:	4610      	mov	r0, r2
 800b26e:	4770      	bx	lr
 800b270:	4608      	mov	r0, r1
 800b272:	4770      	bx	lr
 800b274:	20000018 	.word	0x20000018

0800b278 <rcutils_get_default_allocator>:
 800b278:	b510      	push	{r4, lr}
 800b27a:	4c05      	ldr	r4, [pc, #20]	@ (800b290 <rcutils_get_default_allocator+0x18>)
 800b27c:	4686      	mov	lr, r0
 800b27e:	4684      	mov	ip, r0
 800b280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	f8cc 3000 	str.w	r3, [ip]
 800b28c:	4670      	mov	r0, lr
 800b28e:	bd10      	pop	{r4, pc}
 800b290:	20000018 	.word	0x20000018

0800b294 <rcutils_allocator_is_valid>:
 800b294:	b158      	cbz	r0, 800b2ae <rcutils_allocator_is_valid+0x1a>
 800b296:	6803      	ldr	r3, [r0, #0]
 800b298:	b143      	cbz	r3, 800b2ac <rcutils_allocator_is_valid+0x18>
 800b29a:	6843      	ldr	r3, [r0, #4]
 800b29c:	b133      	cbz	r3, 800b2ac <rcutils_allocator_is_valid+0x18>
 800b29e:	68c3      	ldr	r3, [r0, #12]
 800b2a0:	b123      	cbz	r3, 800b2ac <rcutils_allocator_is_valid+0x18>
 800b2a2:	6880      	ldr	r0, [r0, #8]
 800b2a4:	3800      	subs	r0, #0
 800b2a6:	bf18      	it	ne
 800b2a8:	2001      	movne	r0, #1
 800b2aa:	4770      	bx	lr
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	4770      	bx	lr

0800b2b0 <rcutils_get_error_string>:
 800b2b0:	4b06      	ldr	r3, [pc, #24]	@ (800b2cc <rcutils_get_error_string+0x1c>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	b13b      	cbz	r3, 800b2c6 <rcutils_get_error_string+0x16>
 800b2b6:	4b06      	ldr	r3, [pc, #24]	@ (800b2d0 <rcutils_get_error_string+0x20>)
 800b2b8:	781a      	ldrb	r2, [r3, #0]
 800b2ba:	b90a      	cbnz	r2, 800b2c0 <rcutils_get_error_string+0x10>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	4b04      	ldr	r3, [pc, #16]	@ (800b2d4 <rcutils_get_error_string+0x24>)
 800b2c2:	7818      	ldrb	r0, [r3, #0]
 800b2c4:	4770      	bx	lr
 800b2c6:	4b04      	ldr	r3, [pc, #16]	@ (800b2d8 <rcutils_get_error_string+0x28>)
 800b2c8:	7818      	ldrb	r0, [r3, #0]
 800b2ca:	4770      	bx	lr
 800b2cc:	200080c0 	.word	0x200080c0
 800b2d0:	200080d9 	.word	0x200080d9
 800b2d4:	200080d8 	.word	0x200080d8
 800b2d8:	08017f4c 	.word	0x08017f4c
 800b2dc:	00000000 	.word	0x00000000

0800b2e0 <rcutils_reset_error>:
 800b2e0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b300 <rcutils_reset_error+0x20>
 800b2e4:	4a08      	ldr	r2, [pc, #32]	@ (800b308 <rcutils_reset_error+0x28>)
 800b2e6:	4809      	ldr	r0, [pc, #36]	@ (800b30c <rcutils_reset_error+0x2c>)
 800b2e8:	4909      	ldr	r1, [pc, #36]	@ (800b310 <rcutils_reset_error+0x30>)
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	8013      	strh	r3, [r2, #0]
 800b2ee:	ed82 7b02 	vstr	d7, [r2, #8]
 800b2f2:	4a08      	ldr	r2, [pc, #32]	@ (800b314 <rcutils_reset_error+0x34>)
 800b2f4:	7003      	strb	r3, [r0, #0]
 800b2f6:	700b      	strb	r3, [r1, #0]
 800b2f8:	7013      	strb	r3, [r2, #0]
 800b2fa:	4770      	bx	lr
 800b2fc:	f3af 8000 	nop.w
	...
 800b308:	200080c8 	.word	0x200080c8
 800b30c:	200080d9 	.word	0x200080d9
 800b310:	200080d8 	.word	0x200080d8
 800b314:	200080c0 	.word	0x200080c0

0800b318 <rcutils_system_time_now>:
 800b318:	b308      	cbz	r0, 800b35e <rcutils_system_time_now+0x46>
 800b31a:	b570      	push	{r4, r5, r6, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	4604      	mov	r4, r0
 800b320:	4669      	mov	r1, sp
 800b322:	2001      	movs	r0, #1
 800b324:	f7f6 fa5c 	bl	80017e0 <clock_gettime>
 800b328:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b32c:	2d00      	cmp	r5, #0
 800b32e:	db13      	blt.n	800b358 <rcutils_system_time_now+0x40>
 800b330:	9902      	ldr	r1, [sp, #8]
 800b332:	2900      	cmp	r1, #0
 800b334:	db0d      	blt.n	800b352 <rcutils_system_time_now+0x3a>
 800b336:	4e0b      	ldr	r6, [pc, #44]	@ (800b364 <rcutils_system_time_now+0x4c>)
 800b338:	fba3 3206 	umull	r3, r2, r3, r6
 800b33c:	185b      	adds	r3, r3, r1
 800b33e:	fb06 2205 	mla	r2, r6, r5, r2
 800b342:	f04f 0000 	mov.w	r0, #0
 800b346:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b34a:	e9c4 3200 	strd	r3, r2, [r4]
 800b34e:	b004      	add	sp, #16
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	ea53 0205 	orrs.w	r2, r3, r5
 800b356:	d1ee      	bne.n	800b336 <rcutils_system_time_now+0x1e>
 800b358:	2002      	movs	r0, #2
 800b35a:	b004      	add	sp, #16
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
 800b35e:	200b      	movs	r0, #11
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	3b9aca00 	.word	0x3b9aca00

0800b368 <rcutils_steady_time_now>:
 800b368:	b308      	cbz	r0, 800b3ae <rcutils_steady_time_now+0x46>
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	4604      	mov	r4, r0
 800b370:	4669      	mov	r1, sp
 800b372:	2000      	movs	r0, #0
 800b374:	f7f6 fa34 	bl	80017e0 <clock_gettime>
 800b378:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b37c:	2d00      	cmp	r5, #0
 800b37e:	db13      	blt.n	800b3a8 <rcutils_steady_time_now+0x40>
 800b380:	9902      	ldr	r1, [sp, #8]
 800b382:	2900      	cmp	r1, #0
 800b384:	db0d      	blt.n	800b3a2 <rcutils_steady_time_now+0x3a>
 800b386:	4e0b      	ldr	r6, [pc, #44]	@ (800b3b4 <rcutils_steady_time_now+0x4c>)
 800b388:	fba3 3206 	umull	r3, r2, r3, r6
 800b38c:	185b      	adds	r3, r3, r1
 800b38e:	fb06 2205 	mla	r2, r6, r5, r2
 800b392:	f04f 0000 	mov.w	r0, #0
 800b396:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b39a:	e9c4 3200 	strd	r3, r2, [r4]
 800b39e:	b004      	add	sp, #16
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
 800b3a2:	ea53 0205 	orrs.w	r2, r3, r5
 800b3a6:	d1ee      	bne.n	800b386 <rcutils_steady_time_now+0x1e>
 800b3a8:	2002      	movs	r0, #2
 800b3aa:	b004      	add	sp, #16
 800b3ac:	bd70      	pop	{r4, r5, r6, pc}
 800b3ae:	200b      	movs	r0, #11
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	3b9aca00 	.word	0x3b9aca00

0800b3b8 <rmw_get_zero_initialized_init_options>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	2238      	movs	r2, #56	@ 0x38
 800b3bc:	4604      	mov	r4, r0
 800b3be:	2100      	movs	r1, #0
 800b3c0:	f00b fcea 	bl	8016d98 <memset>
 800b3c4:	f104 0010 	add.w	r0, r4, #16
 800b3c8:	f000 f80a 	bl	800b3e0 <rmw_get_default_security_options>
 800b3cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3d0:	60e3      	str	r3, [r4, #12]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	bd10      	pop	{r4, pc}
 800b3d6:	bf00      	nop

0800b3d8 <rmw_get_default_publisher_options>:
 800b3d8:	2200      	movs	r2, #0
 800b3da:	6002      	str	r2, [r0, #0]
 800b3dc:	7102      	strb	r2, [r0, #4]
 800b3de:	4770      	bx	lr

0800b3e0 <rmw_get_default_security_options>:
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	7002      	strb	r2, [r0, #0]
 800b3e4:	6042      	str	r2, [r0, #4]
 800b3e6:	4770      	bx	lr

0800b3e8 <rmw_uros_set_custom_transport>:
 800b3e8:	b470      	push	{r4, r5, r6}
 800b3ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b3ee:	b162      	cbz	r2, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f0:	b15b      	cbz	r3, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f2:	b155      	cbz	r5, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f4:	b14e      	cbz	r6, 800b40a <rmw_uros_set_custom_transport+0x22>
 800b3f6:	4c06      	ldr	r4, [pc, #24]	@ (800b410 <rmw_uros_set_custom_transport+0x28>)
 800b3f8:	7020      	strb	r0, [r4, #0]
 800b3fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b3fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b402:	6166      	str	r6, [r4, #20]
 800b404:	2000      	movs	r0, #0
 800b406:	bc70      	pop	{r4, r5, r6}
 800b408:	4770      	bx	lr
 800b40a:	200b      	movs	r0, #11
 800b40c:	bc70      	pop	{r4, r5, r6}
 800b40e:	4770      	bx	lr
 800b410:	200080dc 	.word	0x200080dc

0800b414 <rmw_init_options_init>:
 800b414:	b084      	sub	sp, #16
 800b416:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b418:	b083      	sub	sp, #12
 800b41a:	ad09      	add	r5, sp, #36	@ 0x24
 800b41c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b420:	b130      	cbz	r0, 800b430 <rmw_init_options_init+0x1c>
 800b422:	4604      	mov	r4, r0
 800b424:	4628      	mov	r0, r5
 800b426:	f7ff ff35 	bl	800b294 <rcutils_allocator_is_valid>
 800b42a:	b108      	cbz	r0, 800b430 <rmw_init_options_init+0x1c>
 800b42c:	68a6      	ldr	r6, [r4, #8]
 800b42e:	b12e      	cbz	r6, 800b43c <rmw_init_options_init+0x28>
 800b430:	200b      	movs	r0, #11
 800b432:	b003      	add	sp, #12
 800b434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b438:	b004      	add	sp, #16
 800b43a:	4770      	bx	lr
 800b43c:	2200      	movs	r2, #0
 800b43e:	2300      	movs	r3, #0
 800b440:	e9c4 2300 	strd	r2, r3, [r4]
 800b444:	4b22      	ldr	r3, [pc, #136]	@ (800b4d0 <rmw_init_options_init+0xbc>)
 800b446:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800b4e0 <rmw_init_options_init+0xcc>
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60a3      	str	r3, [r4, #8]
 800b44e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b450:	f104 0c20 	add.w	ip, r4, #32
 800b454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b458:	466f      	mov	r7, sp
 800b45a:	682b      	ldr	r3, [r5, #0]
 800b45c:	f8cc 3000 	str.w	r3, [ip]
 800b460:	4638      	mov	r0, r7
 800b462:	f8c4 e01c 	str.w	lr, [r4, #28]
 800b466:	60e6      	str	r6, [r4, #12]
 800b468:	f7ff ffba 	bl	800b3e0 <rmw_get_default_security_options>
 800b46c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b470:	f104 0310 	add.w	r3, r4, #16
 800b474:	e883 0003 	stmia.w	r3, {r0, r1}
 800b478:	2203      	movs	r2, #3
 800b47a:	4816      	ldr	r0, [pc, #88]	@ (800b4d4 <rmw_init_options_init+0xc0>)
 800b47c:	4916      	ldr	r1, [pc, #88]	@ (800b4d8 <rmw_init_options_init+0xc4>)
 800b47e:	7626      	strb	r6, [r4, #24]
 800b480:	f000 febc 	bl	800c1fc <rmw_uxrce_init_init_options_impl_memory>
 800b484:	4813      	ldr	r0, [pc, #76]	@ (800b4d4 <rmw_init_options_init+0xc0>)
 800b486:	f009 f993 	bl	80147b0 <get_memory>
 800b48a:	b1f0      	cbz	r0, 800b4ca <rmw_init_options_init+0xb6>
 800b48c:	4a13      	ldr	r2, [pc, #76]	@ (800b4dc <rmw_init_options_init+0xc8>)
 800b48e:	6883      	ldr	r3, [r0, #8]
 800b490:	6851      	ldr	r1, [r2, #4]
 800b492:	7810      	ldrb	r0, [r2, #0]
 800b494:	6363      	str	r3, [r4, #52]	@ 0x34
 800b496:	7418      	strb	r0, [r3, #16]
 800b498:	6159      	str	r1, [r3, #20]
 800b49a:	68d1      	ldr	r1, [r2, #12]
 800b49c:	61d9      	str	r1, [r3, #28]
 800b49e:	6911      	ldr	r1, [r2, #16]
 800b4a0:	6219      	str	r1, [r3, #32]
 800b4a2:	6951      	ldr	r1, [r2, #20]
 800b4a4:	6892      	ldr	r2, [r2, #8]
 800b4a6:	619a      	str	r2, [r3, #24]
 800b4a8:	6259      	str	r1, [r3, #36]	@ 0x24
 800b4aa:	f004 fc67 	bl	800fd7c <uxr_nanos>
 800b4ae:	f00b f9ab 	bl	8016808 <srand>
 800b4b2:	f00b f9d7 	bl	8016864 <rand>
 800b4b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b4b8:	6298      	str	r0, [r3, #40]	@ 0x28
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d0f9      	beq.n	800b4b2 <rmw_init_options_init+0x9e>
 800b4be:	2000      	movs	r0, #0
 800b4c0:	b003      	add	sp, #12
 800b4c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b4c6:	b004      	add	sp, #16
 800b4c8:	4770      	bx	lr
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	e7b1      	b.n	800b432 <rmw_init_options_init+0x1e>
 800b4ce:	bf00      	nop
 800b4d0:	08018948 	.word	0x08018948
 800b4d4:	2000c9f4 	.word	0x2000c9f4
 800b4d8:	20008290 	.word	0x20008290
 800b4dc:	200080dc 	.word	0x200080dc
 800b4e0:	08017f50 	.word	0x08017f50

0800b4e4 <rmw_init_options_copy>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	b158      	cbz	r0, 800b500 <rmw_init_options_copy+0x1c>
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	b149      	cbz	r1, 800b500 <rmw_init_options_copy+0x1c>
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	6880      	ldr	r0, [r0, #8]
 800b4f0:	b120      	cbz	r0, 800b4fc <rmw_init_options_copy+0x18>
 800b4f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b56c <rmw_init_options_copy+0x88>)
 800b4f4:	6819      	ldr	r1, [r3, #0]
 800b4f6:	f7f4 fe93 	bl	8000220 <strcmp>
 800b4fa:	bb90      	cbnz	r0, 800b562 <rmw_init_options_copy+0x7e>
 800b4fc:	68ab      	ldr	r3, [r5, #8]
 800b4fe:	b113      	cbz	r3, 800b506 <rmw_init_options_copy+0x22>
 800b500:	250b      	movs	r5, #11
 800b502:	4628      	mov	r0, r5
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	4623      	mov	r3, r4
 800b508:	462a      	mov	r2, r5
 800b50a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800b50e:	f8d3 c000 	ldr.w	ip, [r3]
 800b512:	6858      	ldr	r0, [r3, #4]
 800b514:	6899      	ldr	r1, [r3, #8]
 800b516:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b51a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b51e:	3310      	adds	r3, #16
 800b520:	42b3      	cmp	r3, r6
 800b522:	f8c2 c000 	str.w	ip, [r2]
 800b526:	6050      	str	r0, [r2, #4]
 800b528:	6091      	str	r1, [r2, #8]
 800b52a:	f102 0210 	add.w	r2, r2, #16
 800b52e:	d1ee      	bne.n	800b50e <rmw_init_options_copy+0x2a>
 800b530:	6819      	ldr	r1, [r3, #0]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	480e      	ldr	r0, [pc, #56]	@ (800b570 <rmw_init_options_copy+0x8c>)
 800b536:	6053      	str	r3, [r2, #4]
 800b538:	6011      	str	r1, [r2, #0]
 800b53a:	f009 f939 	bl	80147b0 <get_memory>
 800b53e:	b198      	cbz	r0, 800b568 <rmw_init_options_copy+0x84>
 800b540:	6883      	ldr	r3, [r0, #8]
 800b542:	636b      	str	r3, [r5, #52]	@ 0x34
 800b544:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b546:	f102 0c10 	add.w	ip, r2, #16
 800b54a:	f103 0410 	add.w	r4, r3, #16
 800b54e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b554:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b558:	2500      	movs	r5, #0
 800b55a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b55e:	4628      	mov	r0, r5
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	250c      	movs	r5, #12
 800b564:	4628      	mov	r0, r5
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	2501      	movs	r5, #1
 800b56a:	e7ca      	b.n	800b502 <rmw_init_options_copy+0x1e>
 800b56c:	08018948 	.word	0x08018948
 800b570:	2000c9f4 	.word	0x2000c9f4

0800b574 <rmw_init_options_fini>:
 800b574:	2800      	cmp	r0, #0
 800b576:	d03d      	beq.n	800b5f4 <rmw_init_options_fini+0x80>
 800b578:	b510      	push	{r4, lr}
 800b57a:	4604      	mov	r4, r0
 800b57c:	b08e      	sub	sp, #56	@ 0x38
 800b57e:	3020      	adds	r0, #32
 800b580:	f7ff fe88 	bl	800b294 <rcutils_allocator_is_valid>
 800b584:	b360      	cbz	r0, 800b5e0 <rmw_init_options_fini+0x6c>
 800b586:	68a0      	ldr	r0, [r4, #8]
 800b588:	b120      	cbz	r0, 800b594 <rmw_init_options_fini+0x20>
 800b58a:	4b1c      	ldr	r3, [pc, #112]	@ (800b5fc <rmw_init_options_fini+0x88>)
 800b58c:	6819      	ldr	r1, [r3, #0]
 800b58e:	f7f4 fe47 	bl	8000220 <strcmp>
 800b592:	bb68      	cbnz	r0, 800b5f0 <rmw_init_options_fini+0x7c>
 800b594:	4b1a      	ldr	r3, [pc, #104]	@ (800b600 <rmw_init_options_fini+0x8c>)
 800b596:	6819      	ldr	r1, [r3, #0]
 800b598:	b331      	cbz	r1, 800b5e8 <rmw_init_options_fini+0x74>
 800b59a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b59c:	e001      	b.n	800b5a2 <rmw_init_options_fini+0x2e>
 800b59e:	6849      	ldr	r1, [r1, #4]
 800b5a0:	b311      	cbz	r1, 800b5e8 <rmw_init_options_fini+0x74>
 800b5a2:	688b      	ldr	r3, [r1, #8]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d1fa      	bne.n	800b59e <rmw_init_options_fini+0x2a>
 800b5a8:	4815      	ldr	r0, [pc, #84]	@ (800b600 <rmw_init_options_fini+0x8c>)
 800b5aa:	f009 f911 	bl	80147d0 <put_memory>
 800b5ae:	4668      	mov	r0, sp
 800b5b0:	f7ff ff02 	bl	800b3b8 <rmw_get_zero_initialized_init_options>
 800b5b4:	46ee      	mov	lr, sp
 800b5b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b5ba:	46a4      	mov	ip, r4
 800b5bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b5c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b5c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b5c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b5cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b5d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b5d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	b00e      	add	sp, #56	@ 0x38
 800b5de:	bd10      	pop	{r4, pc}
 800b5e0:	230b      	movs	r3, #11
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	b00e      	add	sp, #56	@ 0x38
 800b5e6:	bd10      	pop	{r4, pc}
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	b00e      	add	sp, #56	@ 0x38
 800b5ee:	bd10      	pop	{r4, pc}
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	e7f2      	b.n	800b5da <rmw_init_options_fini+0x66>
 800b5f4:	230b      	movs	r3, #11
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	08018948 	.word	0x08018948
 800b600:	2000c9f4 	.word	0x2000c9f4

0800b604 <rmw_init>:
 800b604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b608:	b083      	sub	sp, #12
 800b60a:	2800      	cmp	r0, #0
 800b60c:	f000 80d3 	beq.w	800b7b6 <rmw_init+0x1b2>
 800b610:	460e      	mov	r6, r1
 800b612:	2900      	cmp	r1, #0
 800b614:	f000 80cf 	beq.w	800b7b6 <rmw_init+0x1b2>
 800b618:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b61a:	4605      	mov	r5, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 80ca 	beq.w	800b7b6 <rmw_init+0x1b2>
 800b622:	4b78      	ldr	r3, [pc, #480]	@ (800b804 <rmw_init+0x200>)
 800b624:	6880      	ldr	r0, [r0, #8]
 800b626:	681f      	ldr	r7, [r3, #0]
 800b628:	b128      	cbz	r0, 800b636 <rmw_init+0x32>
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 fdf8 	bl	8000220 <strcmp>
 800b630:	2800      	cmp	r0, #0
 800b632:	f040 80ca 	bne.w	800b7ca <rmw_init+0x1c6>
 800b636:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b63a:	4c73      	ldr	r4, [pc, #460]	@ (800b808 <rmw_init+0x204>)
 800b63c:	4973      	ldr	r1, [pc, #460]	@ (800b80c <rmw_init+0x208>)
 800b63e:	4874      	ldr	r0, [pc, #464]	@ (800b810 <rmw_init+0x20c>)
 800b640:	60b7      	str	r7, [r6, #8]
 800b642:	e9c6 2300 	strd	r2, r3, [r6]
 800b646:	68eb      	ldr	r3, [r5, #12]
 800b648:	64b3      	str	r3, [r6, #72]	@ 0x48
 800b64a:	2201      	movs	r2, #1
 800b64c:	f000 fd76 	bl	800c13c <rmw_uxrce_init_session_memory>
 800b650:	4620      	mov	r0, r4
 800b652:	4970      	ldr	r1, [pc, #448]	@ (800b814 <rmw_init+0x210>)
 800b654:	2204      	movs	r2, #4
 800b656:	f000 fdb1 	bl	800c1bc <rmw_uxrce_init_static_input_buffer_memory>
 800b65a:	f04f 0800 	mov.w	r8, #0
 800b65e:	486c      	ldr	r0, [pc, #432]	@ (800b810 <rmw_init+0x20c>)
 800b660:	f884 800d 	strb.w	r8, [r4, #13]
 800b664:	f009 f8a4 	bl	80147b0 <get_memory>
 800b668:	2800      	cmp	r0, #0
 800b66a:	f000 80a9 	beq.w	800b7c0 <rmw_init+0x1bc>
 800b66e:	6884      	ldr	r4, [r0, #8]
 800b670:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800b672:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b674:	f890 c010 	ldrb.w	ip, [r0, #16]
 800b678:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b67c:	9101      	str	r1, [sp, #4]
 800b67e:	6a00      	ldr	r0, [r0, #32]
 800b680:	9000      	str	r0, [sp, #0]
 800b682:	f104 0910 	add.w	r9, r4, #16
 800b686:	4661      	mov	r1, ip
 800b688:	4648      	mov	r0, r9
 800b68a:	f002 faf9 	bl	800dc80 <uxr_set_custom_transport_callbacks>
 800b68e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b692:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b696:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800b69a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800b69e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800b6a2:	495d      	ldr	r1, [pc, #372]	@ (800b818 <rmw_init+0x214>)
 800b6a4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800b6a8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800b6ac:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800b6b0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800b6b4:	4859      	ldr	r0, [pc, #356]	@ (800b81c <rmw_init+0x218>)
 800b6b6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800b6be:	f000 fd1d 	bl	800c0fc <rmw_uxrce_init_node_memory>
 800b6c2:	4957      	ldr	r1, [pc, #348]	@ (800b820 <rmw_init+0x21c>)
 800b6c4:	4857      	ldr	r0, [pc, #348]	@ (800b824 <rmw_init+0x220>)
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	f000 fcf8 	bl	800c0bc <rmw_uxrce_init_subscription_memory>
 800b6cc:	4956      	ldr	r1, [pc, #344]	@ (800b828 <rmw_init+0x224>)
 800b6ce:	4857      	ldr	r0, [pc, #348]	@ (800b82c <rmw_init+0x228>)
 800b6d0:	220a      	movs	r2, #10
 800b6d2:	f000 fcd3 	bl	800c07c <rmw_uxrce_init_publisher_memory>
 800b6d6:	4956      	ldr	r1, [pc, #344]	@ (800b830 <rmw_init+0x22c>)
 800b6d8:	4856      	ldr	r0, [pc, #344]	@ (800b834 <rmw_init+0x230>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f000 fc8e 	bl	800bffc <rmw_uxrce_init_service_memory>
 800b6e0:	4955      	ldr	r1, [pc, #340]	@ (800b838 <rmw_init+0x234>)
 800b6e2:	4856      	ldr	r0, [pc, #344]	@ (800b83c <rmw_init+0x238>)
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f000 fca9 	bl	800c03c <rmw_uxrce_init_client_memory>
 800b6ea:	4955      	ldr	r1, [pc, #340]	@ (800b840 <rmw_init+0x23c>)
 800b6ec:	4855      	ldr	r0, [pc, #340]	@ (800b844 <rmw_init+0x240>)
 800b6ee:	220f      	movs	r2, #15
 800b6f0:	f000 fd44 	bl	800c17c <rmw_uxrce_init_topic_memory>
 800b6f4:	4954      	ldr	r1, [pc, #336]	@ (800b848 <rmw_init+0x244>)
 800b6f6:	4855      	ldr	r0, [pc, #340]	@ (800b84c <rmw_init+0x248>)
 800b6f8:	2203      	movs	r2, #3
 800b6fa:	f000 fd7f 	bl	800c1fc <rmw_uxrce_init_init_options_impl_memory>
 800b6fe:	4954      	ldr	r1, [pc, #336]	@ (800b850 <rmw_init+0x24c>)
 800b700:	4854      	ldr	r0, [pc, #336]	@ (800b854 <rmw_init+0x250>)
 800b702:	2204      	movs	r2, #4
 800b704:	f000 fd9a 	bl	800c23c <rmw_uxrce_init_wait_set_memory>
 800b708:	4953      	ldr	r1, [pc, #332]	@ (800b858 <rmw_init+0x254>)
 800b70a:	4854      	ldr	r0, [pc, #336]	@ (800b85c <rmw_init+0x258>)
 800b70c:	2204      	movs	r2, #4
 800b70e:	f000 fdb5 	bl	800c27c <rmw_uxrce_init_guard_condition_memory>
 800b712:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800b714:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800b716:	4642      	mov	r2, r8
 800b718:	f000 fc38 	bl	800bf8c <rmw_uxrce_transport_init>
 800b71c:	4607      	mov	r7, r0
 800b71e:	2800      	cmp	r0, #0
 800b720:	d158      	bne.n	800b7d4 <rmw_init+0x1d0>
 800b722:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b724:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800b728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b72a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800b72e:	4628      	mov	r0, r5
 800b730:	f002 fca2 	bl	800e078 <uxr_init_session>
 800b734:	494a      	ldr	r1, [pc, #296]	@ (800b860 <rmw_init+0x25c>)
 800b736:	4622      	mov	r2, r4
 800b738:	4628      	mov	r0, r5
 800b73a:	f002 fcc1 	bl	800e0c0 <uxr_set_topic_callback>
 800b73e:	4949      	ldr	r1, [pc, #292]	@ (800b864 <rmw_init+0x260>)
 800b740:	463a      	mov	r2, r7
 800b742:	4628      	mov	r0, r5
 800b744:	f002 fcb8 	bl	800e0b8 <uxr_set_status_callback>
 800b748:	4947      	ldr	r1, [pc, #284]	@ (800b868 <rmw_init+0x264>)
 800b74a:	463a      	mov	r2, r7
 800b74c:	4628      	mov	r0, r5
 800b74e:	f002 fcbb 	bl	800e0c8 <uxr_set_request_callback>
 800b752:	4946      	ldr	r1, [pc, #280]	@ (800b86c <rmw_init+0x268>)
 800b754:	463a      	mov	r2, r7
 800b756:	4628      	mov	r0, r5
 800b758:	f002 fcba 	bl	800e0d0 <uxr_set_reply_callback>
 800b75c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b760:	2304      	movs	r3, #4
 800b762:	0092      	lsls	r2, r2, #2
 800b764:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800b768:	4628      	mov	r0, r5
 800b76a:	f002 fcef 	bl	800e14c <uxr_create_input_reliable_stream>
 800b76e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b772:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800b776:	0092      	lsls	r2, r2, #2
 800b778:	2304      	movs	r3, #4
 800b77a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800b77e:	4628      	mov	r0, r5
 800b780:	f002 fcbc 	bl	800e0fc <uxr_create_output_reliable_stream>
 800b784:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800b788:	4628      	mov	r0, r5
 800b78a:	f002 fcd9 	bl	800e140 <uxr_create_input_best_effort_stream>
 800b78e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800b792:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800b796:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b79a:	3114      	adds	r1, #20
 800b79c:	4628      	mov	r0, r5
 800b79e:	f002 fc9b 	bl	800e0d8 <uxr_create_output_best_effort_stream>
 800b7a2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f003 fa7a 	bl	800eca0 <uxr_create_session>
 800b7ac:	b1f8      	cbz	r0, 800b7ee <rmw_init+0x1ea>
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	b003      	add	sp, #12
 800b7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7b6:	270b      	movs	r7, #11
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	b003      	add	sp, #12
 800b7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7c0:	2701      	movs	r7, #1
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	b003      	add	sp, #12
 800b7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7ca:	270c      	movs	r7, #12
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	b003      	add	sp, #12
 800b7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d4:	4648      	mov	r0, r9
 800b7d6:	f002 fa95 	bl	800dd04 <uxr_close_custom_transport>
 800b7da:	480d      	ldr	r0, [pc, #52]	@ (800b810 <rmw_init+0x20c>)
 800b7dc:	4621      	mov	r1, r4
 800b7de:	f008 fff7 	bl	80147d0 <put_memory>
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800b7e8:	b003      	add	sp, #12
 800b7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7ee:	4648      	mov	r0, r9
 800b7f0:	f002 fa88 	bl	800dd04 <uxr_close_custom_transport>
 800b7f4:	4806      	ldr	r0, [pc, #24]	@ (800b810 <rmw_init+0x20c>)
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	f008 ffea 	bl	80147d0 <put_memory>
 800b7fc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800b7fe:	2701      	movs	r7, #1
 800b800:	e7d5      	b.n	800b7ae <rmw_init+0x1aa>
 800b802:	bf00      	nop
 800b804:	08018948 	.word	0x08018948
 800b808:	2000ca44 	.word	0x2000ca44
 800b80c:	20008cf0 	.word	0x20008cf0
 800b810:	2000ca34 	.word	0x2000ca34
 800b814:	2000a298 	.word	0x2000a298
 800b818:	20008314 	.word	0x20008314
 800b81c:	2000ca04 	.word	0x2000ca04
 800b820:	2000c398 	.word	0x2000c398
 800b824:	2000ca54 	.word	0x2000ca54
 800b828:	200083b8 	.word	0x200083b8
 800b82c:	2000ca14 	.word	0x2000ca14
 800b830:	20008c28 	.word	0x20008c28
 800b834:	2000ca24 	.word	0x2000ca24
 800b838:	20008148 	.word	0x20008148
 800b83c:	20008134 	.word	0x20008134
 800b840:	2000c7d0 	.word	0x2000c7d0
 800b844:	2000ca64 	.word	0x2000ca64
 800b848:	20008290 	.word	0x20008290
 800b84c:	2000c9f4 	.word	0x2000c9f4
 800b850:	2000c974 	.word	0x2000c974
 800b854:	2000ca74 	.word	0x2000ca74
 800b858:	20008210 	.word	0x20008210
 800b85c:	2000c9e4 	.word	0x2000c9e4
 800b860:	080145e9 	.word	0x080145e9
 800b864:	080145e1 	.word	0x080145e1
 800b868:	08014681 	.word	0x08014681
 800b86c:	0801471d 	.word	0x0801471d

0800b870 <rmw_context_fini>:
 800b870:	4b17      	ldr	r3, [pc, #92]	@ (800b8d0 <rmw_context_fini+0x60>)
 800b872:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	681c      	ldr	r4, [r3, #0]
 800b878:	4605      	mov	r5, r0
 800b87a:	b334      	cbz	r4, 800b8ca <rmw_context_fini+0x5a>
 800b87c:	2600      	movs	r6, #0
 800b87e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800b882:	6902      	ldr	r2, [r0, #16]
 800b884:	428a      	cmp	r2, r1
 800b886:	d018      	beq.n	800b8ba <rmw_context_fini+0x4a>
 800b888:	2c00      	cmp	r4, #0
 800b88a:	d1f8      	bne.n	800b87e <rmw_context_fini+0xe>
 800b88c:	b189      	cbz	r1, 800b8b2 <rmw_context_fini+0x42>
 800b88e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800b892:	789b      	ldrb	r3, [r3, #2]
 800b894:	2b01      	cmp	r3, #1
 800b896:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800b89a:	bf14      	ite	ne
 800b89c:	210a      	movne	r1, #10
 800b89e:	2100      	moveq	r1, #0
 800b8a0:	f003 f9d6 	bl	800ec50 <uxr_delete_session_retries>
 800b8a4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b8a6:	f000 fd09 	bl	800c2bc <rmw_uxrce_fini_session_memory>
 800b8aa:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b8ac:	3010      	adds	r0, #16
 800b8ae:	f002 fa29 	bl	800dd04 <uxr_close_custom_transport>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ba:	3018      	adds	r0, #24
 800b8bc:	f000 f89c 	bl	800b9f8 <rmw_destroy_node>
 800b8c0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	2c00      	cmp	r4, #0
 800b8c6:	d1da      	bne.n	800b87e <rmw_context_fini+0xe>
 800b8c8:	e7e0      	b.n	800b88c <rmw_context_fini+0x1c>
 800b8ca:	4626      	mov	r6, r4
 800b8cc:	e7de      	b.n	800b88c <rmw_context_fini+0x1c>
 800b8ce:	bf00      	nop
 800b8d0:	2000ca04 	.word	0x2000ca04

0800b8d4 <create_node>:
 800b8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d05f      	beq.n	800b99e <create_node+0xca>
 800b8de:	4606      	mov	r6, r0
 800b8e0:	4835      	ldr	r0, [pc, #212]	@ (800b9b8 <create_node+0xe4>)
 800b8e2:	460f      	mov	r7, r1
 800b8e4:	4690      	mov	r8, r2
 800b8e6:	461d      	mov	r5, r3
 800b8e8:	f008 ff62 	bl	80147b0 <get_memory>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d056      	beq.n	800b99e <create_node+0xca>
 800b8f0:	6884      	ldr	r4, [r0, #8]
 800b8f2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b8f4:	6123      	str	r3, [r4, #16]
 800b8f6:	f008 ffc3 	bl	8014880 <rmw_get_implementation_identifier>
 800b8fa:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800b8fe:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b902:	f8c4 9020 	str.w	r9, [r4, #32]
 800b906:	4630      	mov	r0, r6
 800b908:	f7f4 fc94 	bl	8000234 <strlen>
 800b90c:	1c42      	adds	r2, r0, #1
 800b90e:	2a3c      	cmp	r2, #60	@ 0x3c
 800b910:	f104 0518 	add.w	r5, r4, #24
 800b914:	d840      	bhi.n	800b998 <create_node+0xc4>
 800b916:	4648      	mov	r0, r9
 800b918:	4631      	mov	r1, r6
 800b91a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800b91e:	f00b fb04 	bl	8016f2a <memcpy>
 800b922:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800b926:	4638      	mov	r0, r7
 800b928:	f7f4 fc84 	bl	8000234 <strlen>
 800b92c:	1c42      	adds	r2, r0, #1
 800b92e:	2a3c      	cmp	r2, #60	@ 0x3c
 800b930:	d832      	bhi.n	800b998 <create_node+0xc4>
 800b932:	4639      	mov	r1, r7
 800b934:	4648      	mov	r0, r9
 800b936:	f00b faf8 	bl	8016f2a <memcpy>
 800b93a:	6923      	ldr	r3, [r4, #16]
 800b93c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b940:	2101      	movs	r1, #1
 800b942:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800b946:	1842      	adds	r2, r0, r1
 800b948:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800b94c:	f002 f9de 	bl	800dd0c <uxr_object_id>
 800b950:	6160      	str	r0, [r4, #20]
 800b952:	783b      	ldrb	r3, [r7, #0]
 800b954:	2b2f      	cmp	r3, #47	@ 0x2f
 800b956:	d127      	bne.n	800b9a8 <create_node+0xd4>
 800b958:	787b      	ldrb	r3, [r7, #1]
 800b95a:	bb2b      	cbnz	r3, 800b9a8 <create_node+0xd4>
 800b95c:	4a17      	ldr	r2, [pc, #92]	@ (800b9bc <create_node+0xe8>)
 800b95e:	4818      	ldr	r0, [pc, #96]	@ (800b9c0 <create_node+0xec>)
 800b960:	4633      	mov	r3, r6
 800b962:	213c      	movs	r1, #60	@ 0x3c
 800b964:	f00b f93e 	bl	8016be4 <sniprintf>
 800b968:	6920      	ldr	r0, [r4, #16]
 800b96a:	4915      	ldr	r1, [pc, #84]	@ (800b9c0 <create_node+0xec>)
 800b96c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800b970:	9100      	str	r1, [sp, #0]
 800b972:	2106      	movs	r1, #6
 800b974:	9101      	str	r1, [sp, #4]
 800b976:	6811      	ldr	r1, [r2, #0]
 800b978:	6962      	ldr	r2, [r4, #20]
 800b97a:	fa1f f388 	uxth.w	r3, r8
 800b97e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b982:	f001 fff3 	bl	800d96c <uxr_buffer_create_participant_bin>
 800b986:	4602      	mov	r2, r0
 800b988:	6920      	ldr	r0, [r4, #16]
 800b98a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b98e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b992:	f000 fe0b 	bl	800c5ac <run_xrce_session>
 800b996:	b918      	cbnz	r0, 800b9a0 <create_node+0xcc>
 800b998:	4628      	mov	r0, r5
 800b99a:	f000 fc95 	bl	800c2c8 <rmw_uxrce_fini_node_memory>
 800b99e:	2500      	movs	r5, #0
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	b003      	add	sp, #12
 800b9a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9a8:	4a06      	ldr	r2, [pc, #24]	@ (800b9c4 <create_node+0xf0>)
 800b9aa:	9600      	str	r6, [sp, #0]
 800b9ac:	463b      	mov	r3, r7
 800b9ae:	213c      	movs	r1, #60	@ 0x3c
 800b9b0:	4803      	ldr	r0, [pc, #12]	@ (800b9c0 <create_node+0xec>)
 800b9b2:	f00b f917 	bl	8016be4 <sniprintf>
 800b9b6:	e7d7      	b.n	800b968 <create_node+0x94>
 800b9b8:	2000ca04 	.word	0x2000ca04
 800b9bc:	08017f90 	.word	0x08017f90
 800b9c0:	200080f8 	.word	0x200080f8
 800b9c4:	08017f54 	.word	0x08017f54

0800b9c8 <rmw_create_node>:
 800b9c8:	b199      	cbz	r1, 800b9f2 <rmw_create_node+0x2a>
 800b9ca:	780b      	ldrb	r3, [r1, #0]
 800b9cc:	468c      	mov	ip, r1
 800b9ce:	b183      	cbz	r3, 800b9f2 <rmw_create_node+0x2a>
 800b9d0:	b410      	push	{r4}
 800b9d2:	4614      	mov	r4, r2
 800b9d4:	b14a      	cbz	r2, 800b9ea <rmw_create_node+0x22>
 800b9d6:	7813      	ldrb	r3, [r2, #0]
 800b9d8:	b13b      	cbz	r3, 800b9ea <rmw_create_node+0x22>
 800b9da:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800b9dc:	4603      	mov	r3, r0
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4660      	mov	r0, ip
 800b9e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e6:	f7ff bf75 	b.w	800b8d4 <create_node>
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop

0800b9f8 <rmw_destroy_node>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	b328      	cbz	r0, 800ba48 <rmw_destroy_node+0x50>
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	6800      	ldr	r0, [r0, #0]
 800ba00:	b120      	cbz	r0, 800ba0c <rmw_destroy_node+0x14>
 800ba02:	4b36      	ldr	r3, [pc, #216]	@ (800badc <rmw_destroy_node+0xe4>)
 800ba04:	6819      	ldr	r1, [r3, #0]
 800ba06:	f7f4 fc0b 	bl	8000220 <strcmp>
 800ba0a:	b9e8      	cbnz	r0, 800ba48 <rmw_destroy_node+0x50>
 800ba0c:	687d      	ldr	r5, [r7, #4]
 800ba0e:	b1dd      	cbz	r5, 800ba48 <rmw_destroy_node+0x50>
 800ba10:	4b33      	ldr	r3, [pc, #204]	@ (800bae0 <rmw_destroy_node+0xe8>)
 800ba12:	681c      	ldr	r4, [r3, #0]
 800ba14:	2c00      	cmp	r4, #0
 800ba16:	d05f      	beq.n	800bad8 <rmw_destroy_node+0xe0>
 800ba18:	2600      	movs	r6, #0
 800ba1a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ba1e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800ba22:	429d      	cmp	r5, r3
 800ba24:	d013      	beq.n	800ba4e <rmw_destroy_node+0x56>
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	d1f7      	bne.n	800ba1a <rmw_destroy_node+0x22>
 800ba2a:	4b2e      	ldr	r3, [pc, #184]	@ (800bae4 <rmw_destroy_node+0xec>)
 800ba2c:	681c      	ldr	r4, [r3, #0]
 800ba2e:	b1c4      	cbz	r4, 800ba62 <rmw_destroy_node+0x6a>
 800ba30:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ba34:	6a0b      	ldr	r3, [r1, #32]
 800ba36:	429d      	cmp	r5, r3
 800ba38:	d1f9      	bne.n	800ba2e <rmw_destroy_node+0x36>
 800ba3a:	317c      	adds	r1, #124	@ 0x7c
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f000 fa45 	bl	800becc <rmw_destroy_subscription>
 800ba42:	2801      	cmp	r0, #1
 800ba44:	4606      	mov	r6, r0
 800ba46:	d1f2      	bne.n	800ba2e <rmw_destroy_node+0x36>
 800ba48:	2601      	movs	r6, #1
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba4e:	3184      	adds	r1, #132	@ 0x84
 800ba50:	4638      	mov	r0, r7
 800ba52:	f000 f9a5 	bl	800bda0 <rmw_destroy_publisher>
 800ba56:	2801      	cmp	r0, #1
 800ba58:	4606      	mov	r6, r0
 800ba5a:	d0f5      	beq.n	800ba48 <rmw_destroy_node+0x50>
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	d1dc      	bne.n	800ba1a <rmw_destroy_node+0x22>
 800ba60:	e7e3      	b.n	800ba2a <rmw_destroy_node+0x32>
 800ba62:	4b21      	ldr	r3, [pc, #132]	@ (800bae8 <rmw_destroy_node+0xf0>)
 800ba64:	681c      	ldr	r4, [r3, #0]
 800ba66:	b16c      	cbz	r4, 800ba84 <rmw_destroy_node+0x8c>
 800ba68:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ba6c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ba6e:	429d      	cmp	r5, r3
 800ba70:	d1f9      	bne.n	800ba66 <rmw_destroy_node+0x6e>
 800ba72:	317c      	adds	r1, #124	@ 0x7c
 800ba74:	4638      	mov	r0, r7
 800ba76:	f000 f9e5 	bl	800be44 <rmw_destroy_service>
 800ba7a:	2801      	cmp	r0, #1
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	d0e3      	beq.n	800ba48 <rmw_destroy_node+0x50>
 800ba80:	2c00      	cmp	r4, #0
 800ba82:	d1f1      	bne.n	800ba68 <rmw_destroy_node+0x70>
 800ba84:	4b19      	ldr	r3, [pc, #100]	@ (800baec <rmw_destroy_node+0xf4>)
 800ba86:	681c      	ldr	r4, [r3, #0]
 800ba88:	b16c      	cbz	r4, 800baa6 <rmw_destroy_node+0xae>
 800ba8a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ba8e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ba90:	429d      	cmp	r5, r3
 800ba92:	d1f9      	bne.n	800ba88 <rmw_destroy_node+0x90>
 800ba94:	317c      	adds	r1, #124	@ 0x7c
 800ba96:	4638      	mov	r0, r7
 800ba98:	f008 feae 	bl	80147f8 <rmw_destroy_client>
 800ba9c:	2801      	cmp	r0, #1
 800ba9e:	4606      	mov	r6, r0
 800baa0:	d0d2      	beq.n	800ba48 <rmw_destroy_node+0x50>
 800baa2:	2c00      	cmp	r4, #0
 800baa4:	d1f1      	bne.n	800ba8a <rmw_destroy_node+0x92>
 800baa6:	6928      	ldr	r0, [r5, #16]
 800baa8:	696a      	ldr	r2, [r5, #20]
 800baaa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800baae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bab2:	6819      	ldr	r1, [r3, #0]
 800bab4:	f001 ff0e 	bl	800d8d4 <uxr_buffer_delete_entity>
 800bab8:	4602      	mov	r2, r0
 800baba:	6928      	ldr	r0, [r5, #16]
 800babc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bac0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bac4:	f000 fd72 	bl	800c5ac <run_xrce_session>
 800bac8:	2800      	cmp	r0, #0
 800baca:	bf08      	it	eq
 800bacc:	2602      	moveq	r6, #2
 800bace:	4638      	mov	r0, r7
 800bad0:	f000 fbfa 	bl	800c2c8 <rmw_uxrce_fini_node_memory>
 800bad4:	4630      	mov	r0, r6
 800bad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad8:	4626      	mov	r6, r4
 800bada:	e7a6      	b.n	800ba2a <rmw_destroy_node+0x32>
 800badc:	08018948 	.word	0x08018948
 800bae0:	2000ca14 	.word	0x2000ca14
 800bae4:	2000ca54 	.word	0x2000ca54
 800bae8:	2000ca24 	.word	0x2000ca24
 800baec:	20008134 	.word	0x20008134

0800baf0 <rmw_node_get_graph_guard_condition>:
 800baf0:	6843      	ldr	r3, [r0, #4]
 800baf2:	6918      	ldr	r0, [r3, #16]
 800baf4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop

0800bafc <flush_session>:
 800bafc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800bafe:	f002 bf0b 	b.w	800e918 <uxr_run_session_until_confirm_delivery>
 800bb02:	bf00      	nop

0800bb04 <rmw_publish>:
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d053      	beq.n	800bbb0 <rmw_publish+0xac>
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	b08e      	sub	sp, #56	@ 0x38
 800bb0e:	2900      	cmp	r1, #0
 800bb10:	d04b      	beq.n	800bbaa <rmw_publish+0xa6>
 800bb12:	4604      	mov	r4, r0
 800bb14:	6800      	ldr	r0, [r0, #0]
 800bb16:	f000 fdc9 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d045      	beq.n	800bbaa <rmw_publish+0xa6>
 800bb1e:	6866      	ldr	r6, [r4, #4]
 800bb20:	2e00      	cmp	r6, #0
 800bb22:	d042      	beq.n	800bbaa <rmw_publish+0xa6>
 800bb24:	69b4      	ldr	r4, [r6, #24]
 800bb26:	4628      	mov	r0, r5
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	4798      	blx	r3
 800bb2c:	69f3      	ldr	r3, [r6, #28]
 800bb2e:	9005      	str	r0, [sp, #20]
 800bb30:	b113      	cbz	r3, 800bb38 <rmw_publish+0x34>
 800bb32:	a805      	add	r0, sp, #20
 800bb34:	4798      	blx	r3
 800bb36:	9805      	ldr	r0, [sp, #20]
 800bb38:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	9000      	str	r0, [sp, #0]
 800bb40:	6972      	ldr	r2, [r6, #20]
 800bb42:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bb44:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bb48:	ab06      	add	r3, sp, #24
 800bb4a:	f004 f9b7 	bl	800febc <uxr_prepare_output_stream>
 800bb4e:	b1d8      	cbz	r0, 800bb88 <rmw_publish+0x84>
 800bb50:	68a3      	ldr	r3, [r4, #8]
 800bb52:	a906      	add	r1, sp, #24
 800bb54:	4628      	mov	r0, r5
 800bb56:	4798      	blx	r3
 800bb58:	6a33      	ldr	r3, [r6, #32]
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	b10b      	cbz	r3, 800bb62 <rmw_publish+0x5e>
 800bb5e:	a806      	add	r0, sp, #24
 800bb60:	4798      	blx	r3
 800bb62:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bb6c:	d022      	beq.n	800bbb4 <rmw_publish+0xb0>
 800bb6e:	6918      	ldr	r0, [r3, #16]
 800bb70:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800bb72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb76:	f002 fecf 	bl	800e918 <uxr_run_session_until_confirm_delivery>
 800bb7a:	4020      	ands	r0, r4
 800bb7c:	b2c4      	uxtb	r4, r0
 800bb7e:	f084 0001 	eor.w	r0, r4, #1
 800bb82:	b2c0      	uxtb	r0, r0
 800bb84:	b00e      	add	sp, #56	@ 0x38
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bb8c:	6918      	ldr	r0, [r3, #16]
 800bb8e:	9b05      	ldr	r3, [sp, #20]
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc0 <rmw_publish+0xbc>)
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	9602      	str	r6, [sp, #8]
 800bb98:	6972      	ldr	r2, [r6, #20]
 800bb9a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bb9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bba0:	ab06      	add	r3, sp, #24
 800bba2:	f004 f9bb 	bl	800ff1c <uxr_prepare_output_stream_fragmented>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d1d2      	bne.n	800bb50 <rmw_publish+0x4c>
 800bbaa:	2001      	movs	r0, #1
 800bbac:	b00e      	add	sp, #56	@ 0x38
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	4770      	bx	lr
 800bbb4:	6918      	ldr	r0, [r3, #16]
 800bbb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bbba:	f002 faed 	bl	800e198 <uxr_flash_output_streams>
 800bbbe:	e7de      	b.n	800bb7e <rmw_publish+0x7a>
 800bbc0:	0800bafd 	.word	0x0800bafd

0800bbc4 <rmw_create_publisher>:
 800bbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	b087      	sub	sp, #28
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	f000 80cc 	beq.w	800bd68 <rmw_create_publisher+0x1a4>
 800bbd0:	460e      	mov	r6, r1
 800bbd2:	2900      	cmp	r1, #0
 800bbd4:	f000 80c8 	beq.w	800bd68 <rmw_create_publisher+0x1a4>
 800bbd8:	4604      	mov	r4, r0
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	4615      	mov	r5, r2
 800bbde:	4698      	mov	r8, r3
 800bbe0:	f000 fd64 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	f000 80bf 	beq.w	800bd68 <rmw_create_publisher+0x1a4>
 800bbea:	2d00      	cmp	r5, #0
 800bbec:	f000 80bc 	beq.w	800bd68 <rmw_create_publisher+0x1a4>
 800bbf0:	782b      	ldrb	r3, [r5, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f000 80b8 	beq.w	800bd68 <rmw_create_publisher+0x1a4>
 800bbf8:	f1b8 0f00 	cmp.w	r8, #0
 800bbfc:	f000 80b4 	beq.w	800bd68 <rmw_create_publisher+0x1a4>
 800bc00:	485c      	ldr	r0, [pc, #368]	@ (800bd74 <rmw_create_publisher+0x1b0>)
 800bc02:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bc06:	f008 fdd3 	bl	80147b0 <get_memory>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	f000 80ac 	beq.w	800bd68 <rmw_create_publisher+0x1a4>
 800bc10:	6884      	ldr	r4, [r0, #8]
 800bc12:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800bc16:	f008 fe33 	bl	8014880 <rmw_get_implementation_identifier>
 800bc1a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800bc1e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bc22:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800bc26:	4628      	mov	r0, r5
 800bc28:	f7f4 fb04 	bl	8000234 <strlen>
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	283c      	cmp	r0, #60	@ 0x3c
 800bc30:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800bc34:	f200 8091 	bhi.w	800bd5a <rmw_create_publisher+0x196>
 800bc38:	4a4f      	ldr	r2, [pc, #316]	@ (800bd78 <rmw_create_publisher+0x1b4>)
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	213c      	movs	r1, #60	@ 0x3c
 800bc3e:	4650      	mov	r0, sl
 800bc40:	f00a ffd0 	bl	8016be4 <sniprintf>
 800bc44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bc48:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800bc4a:	4641      	mov	r1, r8
 800bc4c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800bc50:	2250      	movs	r2, #80	@ 0x50
 800bc52:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bc56:	f00b f968 	bl	8016f2a <memcpy>
 800bc5a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bc5e:	4947      	ldr	r1, [pc, #284]	@ (800bd7c <rmw_create_publisher+0x1b8>)
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc66:	bf0c      	ite	eq
 800bc68:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800bc6c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800bc70:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bc72:	2300      	movs	r3, #0
 800bc74:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f000 fd25 	bl	800c6c8 <get_message_typesupport_handle>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d06b      	beq.n	800bd5a <rmw_create_publisher+0x196>
 800bc82:	6842      	ldr	r2, [r0, #4]
 800bc84:	61a2      	str	r2, [r4, #24]
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	d067      	beq.n	800bd5a <rmw_create_publisher+0x196>
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	4643      	mov	r3, r8
 800bc8e:	4648      	mov	r0, r9
 800bc90:	f008 fdfc 	bl	801488c <create_topic>
 800bc94:	6260      	str	r0, [r4, #36]	@ 0x24
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d063      	beq.n	800bd62 <rmw_create_publisher+0x19e>
 800bc9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bca2:	2103      	movs	r1, #3
 800bca4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800bca8:	1c42      	adds	r2, r0, #1
 800bcaa:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800bcae:	f002 f82d 	bl	800dd0c <uxr_object_id>
 800bcb2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800bcb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcba:	6120      	str	r0, [r4, #16]
 800bcbc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800bcc0:	6910      	ldr	r0, [r2, #16]
 800bcc2:	2506      	movs	r5, #6
 800bcc4:	9500      	str	r5, [sp, #0]
 800bcc6:	6819      	ldr	r1, [r3, #0]
 800bcc8:	6922      	ldr	r2, [r4, #16]
 800bcca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bcce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bcd2:	f001 feb3 	bl	800da3c <uxr_buffer_create_publisher_bin>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bcdc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bce0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bce4:	f000 fc62 	bl	800c5ac <run_xrce_session>
 800bce8:	b3b8      	cbz	r0, 800bd5a <rmw_create_publisher+0x196>
 800bcea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcf2:	2105      	movs	r1, #5
 800bcf4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800bcf8:	1c42      	adds	r2, r0, #1
 800bcfa:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800bcfe:	f002 f805 	bl	800dd0c <uxr_object_id>
 800bd02:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bd06:	6160      	str	r0, [r4, #20]
 800bd08:	691e      	ldr	r6, [r3, #16]
 800bd0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd0e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800bd12:	f10d 0a10 	add.w	sl, sp, #16
 800bd16:	4641      	mov	r1, r8
 800bd18:	4650      	mov	r0, sl
 800bd1a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800bd1e:	f000 fc61 	bl	800c5e4 <convert_qos_profile>
 800bd22:	9503      	str	r5, [sp, #12]
 800bd24:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bd28:	9001      	str	r0, [sp, #4]
 800bd2a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bd2e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800bd38:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bd3c:	f8d8 1000 	ldr.w	r1, [r8]
 800bd40:	4630      	mov	r0, r6
 800bd42:	f001 feab 	bl	800da9c <uxr_buffer_create_datawriter_bin>
 800bd46:	4602      	mov	r2, r0
 800bd48:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bd4c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bd50:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bd54:	f000 fc2a 	bl	800c5ac <run_xrce_session>
 800bd58:	b938      	cbnz	r0, 800bd6a <rmw_create_publisher+0x1a6>
 800bd5a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bd5c:	b108      	cbz	r0, 800bd62 <rmw_create_publisher+0x19e>
 800bd5e:	f000 fb23 	bl	800c3a8 <rmw_uxrce_fini_topic_memory>
 800bd62:	4638      	mov	r0, r7
 800bd64:	f000 fac8 	bl	800c2f8 <rmw_uxrce_fini_publisher_memory>
 800bd68:	2700      	movs	r7, #0
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	b007      	add	sp, #28
 800bd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd72:	bf00      	nop
 800bd74:	2000ca14 	.word	0x2000ca14
 800bd78:	08017f90 	.word	0x08017f90
 800bd7c:	08017f5c 	.word	0x08017f5c

0800bd80 <rmw_publisher_get_actual_qos>:
 800bd80:	b150      	cbz	r0, 800bd98 <rmw_publisher_get_actual_qos+0x18>
 800bd82:	b508      	push	{r3, lr}
 800bd84:	460b      	mov	r3, r1
 800bd86:	b149      	cbz	r1, 800bd9c <rmw_publisher_get_actual_qos+0x1c>
 800bd88:	6841      	ldr	r1, [r0, #4]
 800bd8a:	2250      	movs	r2, #80	@ 0x50
 800bd8c:	3128      	adds	r1, #40	@ 0x28
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f00b f8cb 	bl	8016f2a <memcpy>
 800bd94:	2000      	movs	r0, #0
 800bd96:	bd08      	pop	{r3, pc}
 800bd98:	200b      	movs	r0, #11
 800bd9a:	4770      	bx	lr
 800bd9c:	200b      	movs	r0, #11
 800bd9e:	bd08      	pop	{r3, pc}

0800bda0 <rmw_destroy_publisher>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	b128      	cbz	r0, 800bdb0 <rmw_destroy_publisher+0x10>
 800bda4:	4604      	mov	r4, r0
 800bda6:	6800      	ldr	r0, [r0, #0]
 800bda8:	460d      	mov	r5, r1
 800bdaa:	f000 fc7f 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800bdae:	b910      	cbnz	r0, 800bdb6 <rmw_destroy_publisher+0x16>
 800bdb0:	2401      	movs	r4, #1
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb6:	6863      	ldr	r3, [r4, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0f9      	beq.n	800bdb0 <rmw_destroy_publisher+0x10>
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	d0f7      	beq.n	800bdb0 <rmw_destroy_publisher+0x10>
 800bdc0:	6828      	ldr	r0, [r5, #0]
 800bdc2:	f000 fc73 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d0f2      	beq.n	800bdb0 <rmw_destroy_publisher+0x10>
 800bdca:	686c      	ldr	r4, [r5, #4]
 800bdcc:	2c00      	cmp	r4, #0
 800bdce:	d0ef      	beq.n	800bdb0 <rmw_destroy_publisher+0x10>
 800bdd0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bdd2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800bdd6:	f008 fda9 	bl	801492c <destroy_topic>
 800bdda:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bdde:	6962      	ldr	r2, [r4, #20]
 800bde0:	6918      	ldr	r0, [r3, #16]
 800bde2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bde6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bdea:	6819      	ldr	r1, [r3, #0]
 800bdec:	f001 fd72 	bl	800d8d4 <uxr_buffer_delete_entity>
 800bdf0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bdf4:	6922      	ldr	r2, [r4, #16]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	6809      	ldr	r1, [r1, #0]
 800be00:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800be04:	f001 fd66 	bl	800d8d4 <uxr_buffer_delete_entity>
 800be08:	693e      	ldr	r6, [r7, #16]
 800be0a:	4622      	mov	r2, r4
 800be0c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800be10:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800be14:	4604      	mov	r4, r0
 800be16:	4630      	mov	r0, r6
 800be18:	f000 fbc8 	bl	800c5ac <run_xrce_session>
 800be1c:	693e      	ldr	r6, [r7, #16]
 800be1e:	4622      	mov	r2, r4
 800be20:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800be24:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800be28:	4604      	mov	r4, r0
 800be2a:	4630      	mov	r0, r6
 800be2c:	f000 fbbe 	bl	800c5ac <run_xrce_session>
 800be30:	b12c      	cbz	r4, 800be3e <rmw_destroy_publisher+0x9e>
 800be32:	b120      	cbz	r0, 800be3e <rmw_destroy_publisher+0x9e>
 800be34:	2400      	movs	r4, #0
 800be36:	4628      	mov	r0, r5
 800be38:	f000 fa5e 	bl	800c2f8 <rmw_uxrce_fini_publisher_memory>
 800be3c:	e7b9      	b.n	800bdb2 <rmw_destroy_publisher+0x12>
 800be3e:	2402      	movs	r4, #2
 800be40:	e7f9      	b.n	800be36 <rmw_destroy_publisher+0x96>
 800be42:	bf00      	nop

0800be44 <rmw_destroy_service>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	b128      	cbz	r0, 800be54 <rmw_destroy_service+0x10>
 800be48:	4604      	mov	r4, r0
 800be4a:	6800      	ldr	r0, [r0, #0]
 800be4c:	460d      	mov	r5, r1
 800be4e:	f000 fc2d 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800be52:	b910      	cbnz	r0, 800be5a <rmw_destroy_service+0x16>
 800be54:	2401      	movs	r4, #1
 800be56:	4620      	mov	r0, r4
 800be58:	bd70      	pop	{r4, r5, r6, pc}
 800be5a:	6863      	ldr	r3, [r4, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0f9      	beq.n	800be54 <rmw_destroy_service+0x10>
 800be60:	2d00      	cmp	r5, #0
 800be62:	d0f7      	beq.n	800be54 <rmw_destroy_service+0x10>
 800be64:	6828      	ldr	r0, [r5, #0]
 800be66:	f000 fc21 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d0f2      	beq.n	800be54 <rmw_destroy_service+0x10>
 800be6e:	686e      	ldr	r6, [r5, #4]
 800be70:	2e00      	cmp	r6, #0
 800be72:	d0ef      	beq.n	800be54 <rmw_destroy_service+0x10>
 800be74:	6864      	ldr	r4, [r4, #4]
 800be76:	6932      	ldr	r2, [r6, #16]
 800be78:	6920      	ldr	r0, [r4, #16]
 800be7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800be7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be82:	6819      	ldr	r1, [r3, #0]
 800be84:	f001 ff72 	bl	800dd6c <uxr_buffer_cancel_data>
 800be88:	4602      	mov	r2, r0
 800be8a:	6920      	ldr	r0, [r4, #16]
 800be8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be94:	f000 fb8a 	bl	800c5ac <run_xrce_session>
 800be98:	6920      	ldr	r0, [r4, #16]
 800be9a:	6932      	ldr	r2, [r6, #16]
 800be9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bea0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bea4:	6819      	ldr	r1, [r3, #0]
 800bea6:	f001 fd15 	bl	800d8d4 <uxr_buffer_delete_entity>
 800beaa:	4602      	mov	r2, r0
 800beac:	6920      	ldr	r0, [r4, #16]
 800beae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800beb2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800beb6:	f000 fb79 	bl	800c5ac <run_xrce_session>
 800beba:	2800      	cmp	r0, #0
 800bebc:	4628      	mov	r0, r5
 800bebe:	bf14      	ite	ne
 800bec0:	2400      	movne	r4, #0
 800bec2:	2402      	moveq	r4, #2
 800bec4:	f000 fa44 	bl	800c350 <rmw_uxrce_fini_service_memory>
 800bec8:	e7c5      	b.n	800be56 <rmw_destroy_service+0x12>
 800beca:	bf00      	nop

0800becc <rmw_destroy_subscription>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	b128      	cbz	r0, 800bedc <rmw_destroy_subscription+0x10>
 800bed0:	4604      	mov	r4, r0
 800bed2:	6800      	ldr	r0, [r0, #0]
 800bed4:	460d      	mov	r5, r1
 800bed6:	f000 fbe9 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800beda:	b910      	cbnz	r0, 800bee2 <rmw_destroy_subscription+0x16>
 800bedc:	2401      	movs	r4, #1
 800bede:	4620      	mov	r0, r4
 800bee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee2:	6863      	ldr	r3, [r4, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0f9      	beq.n	800bedc <rmw_destroy_subscription+0x10>
 800bee8:	2d00      	cmp	r5, #0
 800beea:	d0f7      	beq.n	800bedc <rmw_destroy_subscription+0x10>
 800beec:	6828      	ldr	r0, [r5, #0]
 800beee:	f000 fbdd 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d0f2      	beq.n	800bedc <rmw_destroy_subscription+0x10>
 800bef6:	686c      	ldr	r4, [r5, #4]
 800bef8:	2c00      	cmp	r4, #0
 800befa:	d0ef      	beq.n	800bedc <rmw_destroy_subscription+0x10>
 800befc:	6a26      	ldr	r6, [r4, #32]
 800befe:	6962      	ldr	r2, [r4, #20]
 800bf00:	6930      	ldr	r0, [r6, #16]
 800bf02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bf06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf0a:	6819      	ldr	r1, [r3, #0]
 800bf0c:	f001 ff2e 	bl	800dd6c <uxr_buffer_cancel_data>
 800bf10:	4602      	mov	r2, r0
 800bf12:	6930      	ldr	r0, [r6, #16]
 800bf14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bf18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bf1c:	f000 fb46 	bl	800c5ac <run_xrce_session>
 800bf20:	69e0      	ldr	r0, [r4, #28]
 800bf22:	f008 fd03 	bl	801492c <destroy_topic>
 800bf26:	6a23      	ldr	r3, [r4, #32]
 800bf28:	6962      	ldr	r2, [r4, #20]
 800bf2a:	6918      	ldr	r0, [r3, #16]
 800bf2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bf30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf34:	6819      	ldr	r1, [r3, #0]
 800bf36:	f001 fccd 	bl	800d8d4 <uxr_buffer_delete_entity>
 800bf3a:	6a23      	ldr	r3, [r4, #32]
 800bf3c:	6922      	ldr	r2, [r4, #16]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bf44:	4604      	mov	r4, r0
 800bf46:	6809      	ldr	r1, [r1, #0]
 800bf48:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bf4c:	f001 fcc2 	bl	800d8d4 <uxr_buffer_delete_entity>
 800bf50:	6937      	ldr	r7, [r6, #16]
 800bf52:	4622      	mov	r2, r4
 800bf54:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800bf58:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	4638      	mov	r0, r7
 800bf60:	f000 fb24 	bl	800c5ac <run_xrce_session>
 800bf64:	6936      	ldr	r6, [r6, #16]
 800bf66:	4622      	mov	r2, r4
 800bf68:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bf6c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bf70:	4604      	mov	r4, r0
 800bf72:	4630      	mov	r0, r6
 800bf74:	f000 fb1a 	bl	800c5ac <run_xrce_session>
 800bf78:	b12c      	cbz	r4, 800bf86 <rmw_destroy_subscription+0xba>
 800bf7a:	b120      	cbz	r0, 800bf86 <rmw_destroy_subscription+0xba>
 800bf7c:	2400      	movs	r4, #0
 800bf7e:	4628      	mov	r0, r5
 800bf80:	f000 f9d0 	bl	800c324 <rmw_uxrce_fini_subscription_memory>
 800bf84:	e7ab      	b.n	800bede <rmw_destroy_subscription+0x12>
 800bf86:	2402      	movs	r4, #2
 800bf88:	e7f9      	b.n	800bf7e <rmw_destroy_subscription+0xb2>
 800bf8a:	bf00      	nop

0800bf8c <rmw_uxrce_transport_init>:
 800bf8c:	b508      	push	{r3, lr}
 800bf8e:	b108      	cbz	r0, 800bf94 <rmw_uxrce_transport_init+0x8>
 800bf90:	f100 0210 	add.w	r2, r0, #16
 800bf94:	b139      	cbz	r1, 800bfa6 <rmw_uxrce_transport_init+0x1a>
 800bf96:	6949      	ldr	r1, [r1, #20]
 800bf98:	4610      	mov	r0, r2
 800bf9a:	f001 fe7f 	bl	800dc9c <uxr_init_custom_transport>
 800bf9e:	f080 0001 	eor.w	r0, r0, #1
 800bfa2:	b2c0      	uxtb	r0, r0
 800bfa4:	bd08      	pop	{r3, pc}
 800bfa6:	4b04      	ldr	r3, [pc, #16]	@ (800bfb8 <rmw_uxrce_transport_init+0x2c>)
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	6859      	ldr	r1, [r3, #4]
 800bfac:	f001 fe76 	bl	800dc9c <uxr_init_custom_transport>
 800bfb0:	f080 0001 	eor.w	r0, r0, #1
 800bfb4:	b2c0      	uxtb	r0, r0
 800bfb6:	bd08      	pop	{r3, pc}
 800bfb8:	200080dc 	.word	0x200080dc

0800bfbc <rmw_uros_epoch_nanos>:
 800bfbc:	4b05      	ldr	r3, [pc, #20]	@ (800bfd4 <rmw_uros_epoch_nanos+0x18>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	b123      	cbz	r3, 800bfcc <rmw_uros_epoch_nanos+0x10>
 800bfc2:	6898      	ldr	r0, [r3, #8]
 800bfc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfc8:	f002 b8dc 	b.w	800e184 <uxr_epoch_nanos>
 800bfcc:	2000      	movs	r0, #0
 800bfce:	2100      	movs	r1, #0
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	2000ca34 	.word	0x2000ca34

0800bfd8 <rmw_uros_sync_session>:
 800bfd8:	b508      	push	{r3, lr}
 800bfda:	4b07      	ldr	r3, [pc, #28]	@ (800bff8 <rmw_uros_sync_session+0x20>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	b14b      	cbz	r3, 800bff4 <rmw_uros_sync_session+0x1c>
 800bfe0:	4601      	mov	r1, r0
 800bfe2:	6898      	ldr	r0, [r3, #8]
 800bfe4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfe8:	f002 fd0e 	bl	800ea08 <uxr_sync_session>
 800bfec:	f080 0001 	eor.w	r0, r0, #1
 800bff0:	b2c0      	uxtb	r0, r0
 800bff2:	bd08      	pop	{r3, pc}
 800bff4:	2001      	movs	r0, #1
 800bff6:	bd08      	pop	{r3, pc}
 800bff8:	2000ca34 	.word	0x2000ca34

0800bffc <rmw_uxrce_init_service_memory>:
 800bffc:	b1e2      	cbz	r2, 800c038 <rmw_uxrce_init_service_memory+0x3c>
 800bffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c002:	7b05      	ldrb	r5, [r0, #12]
 800c004:	4606      	mov	r6, r0
 800c006:	b9ad      	cbnz	r5, 800c034 <rmw_uxrce_init_service_memory+0x38>
 800c008:	23c8      	movs	r3, #200	@ 0xc8
 800c00a:	e9c0 5500 	strd	r5, r5, [r0]
 800c00e:	6083      	str	r3, [r0, #8]
 800c010:	f240 1301 	movw	r3, #257	@ 0x101
 800c014:	4617      	mov	r7, r2
 800c016:	8183      	strh	r3, [r0, #12]
 800c018:	460c      	mov	r4, r1
 800c01a:	46a8      	mov	r8, r5
 800c01c:	4621      	mov	r1, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	3501      	adds	r5, #1
 800c022:	f008 fbd5 	bl	80147d0 <put_memory>
 800c026:	42af      	cmp	r7, r5
 800c028:	60a4      	str	r4, [r4, #8]
 800c02a:	f884 800c 	strb.w	r8, [r4, #12]
 800c02e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c032:	d1f3      	bne.n	800c01c <rmw_uxrce_init_service_memory+0x20>
 800c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop

0800c03c <rmw_uxrce_init_client_memory>:
 800c03c:	b1e2      	cbz	r2, 800c078 <rmw_uxrce_init_client_memory+0x3c>
 800c03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c042:	7b05      	ldrb	r5, [r0, #12]
 800c044:	4606      	mov	r6, r0
 800c046:	b9ad      	cbnz	r5, 800c074 <rmw_uxrce_init_client_memory+0x38>
 800c048:	23c8      	movs	r3, #200	@ 0xc8
 800c04a:	e9c0 5500 	strd	r5, r5, [r0]
 800c04e:	6083      	str	r3, [r0, #8]
 800c050:	f240 1301 	movw	r3, #257	@ 0x101
 800c054:	4617      	mov	r7, r2
 800c056:	8183      	strh	r3, [r0, #12]
 800c058:	460c      	mov	r4, r1
 800c05a:	46a8      	mov	r8, r5
 800c05c:	4621      	mov	r1, r4
 800c05e:	4630      	mov	r0, r6
 800c060:	3501      	adds	r5, #1
 800c062:	f008 fbb5 	bl	80147d0 <put_memory>
 800c066:	42af      	cmp	r7, r5
 800c068:	60a4      	str	r4, [r4, #8]
 800c06a:	f884 800c 	strb.w	r8, [r4, #12]
 800c06e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c072:	d1f3      	bne.n	800c05c <rmw_uxrce_init_client_memory+0x20>
 800c074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop

0800c07c <rmw_uxrce_init_publisher_memory>:
 800c07c:	b1e2      	cbz	r2, 800c0b8 <rmw_uxrce_init_publisher_memory+0x3c>
 800c07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	7b05      	ldrb	r5, [r0, #12]
 800c084:	4606      	mov	r6, r0
 800c086:	b9ad      	cbnz	r5, 800c0b4 <rmw_uxrce_init_publisher_memory+0x38>
 800c088:	23d8      	movs	r3, #216	@ 0xd8
 800c08a:	e9c0 5500 	strd	r5, r5, [r0]
 800c08e:	6083      	str	r3, [r0, #8]
 800c090:	f240 1301 	movw	r3, #257	@ 0x101
 800c094:	4617      	mov	r7, r2
 800c096:	8183      	strh	r3, [r0, #12]
 800c098:	460c      	mov	r4, r1
 800c09a:	46a8      	mov	r8, r5
 800c09c:	4621      	mov	r1, r4
 800c09e:	4630      	mov	r0, r6
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	f008 fb95 	bl	80147d0 <put_memory>
 800c0a6:	42af      	cmp	r7, r5
 800c0a8:	60a4      	str	r4, [r4, #8]
 800c0aa:	f884 800c 	strb.w	r8, [r4, #12]
 800c0ae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c0b2:	d1f3      	bne.n	800c09c <rmw_uxrce_init_publisher_memory+0x20>
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop

0800c0bc <rmw_uxrce_init_subscription_memory>:
 800c0bc:	b1e2      	cbz	r2, 800c0f8 <rmw_uxrce_init_subscription_memory+0x3c>
 800c0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c2:	7b05      	ldrb	r5, [r0, #12]
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	b9ad      	cbnz	r5, 800c0f4 <rmw_uxrce_init_subscription_memory+0x38>
 800c0c8:	23d8      	movs	r3, #216	@ 0xd8
 800c0ca:	e9c0 5500 	strd	r5, r5, [r0]
 800c0ce:	6083      	str	r3, [r0, #8]
 800c0d0:	f240 1301 	movw	r3, #257	@ 0x101
 800c0d4:	4617      	mov	r7, r2
 800c0d6:	8183      	strh	r3, [r0, #12]
 800c0d8:	460c      	mov	r4, r1
 800c0da:	46a8      	mov	r8, r5
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4630      	mov	r0, r6
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	f008 fb75 	bl	80147d0 <put_memory>
 800c0e6:	42af      	cmp	r7, r5
 800c0e8:	60a4      	str	r4, [r4, #8]
 800c0ea:	f884 800c 	strb.w	r8, [r4, #12]
 800c0ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c0f2:	d1f3      	bne.n	800c0dc <rmw_uxrce_init_subscription_memory+0x20>
 800c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop

0800c0fc <rmw_uxrce_init_node_memory>:
 800c0fc:	b1e2      	cbz	r2, 800c138 <rmw_uxrce_init_node_memory+0x3c>
 800c0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c102:	7b05      	ldrb	r5, [r0, #12]
 800c104:	4606      	mov	r6, r0
 800c106:	b9ad      	cbnz	r5, 800c134 <rmw_uxrce_init_node_memory+0x38>
 800c108:	23a4      	movs	r3, #164	@ 0xa4
 800c10a:	e9c0 5500 	strd	r5, r5, [r0]
 800c10e:	6083      	str	r3, [r0, #8]
 800c110:	f240 1301 	movw	r3, #257	@ 0x101
 800c114:	4617      	mov	r7, r2
 800c116:	8183      	strh	r3, [r0, #12]
 800c118:	460c      	mov	r4, r1
 800c11a:	46a8      	mov	r8, r5
 800c11c:	4621      	mov	r1, r4
 800c11e:	4630      	mov	r0, r6
 800c120:	3501      	adds	r5, #1
 800c122:	f008 fb55 	bl	80147d0 <put_memory>
 800c126:	42af      	cmp	r7, r5
 800c128:	60a4      	str	r4, [r4, #8]
 800c12a:	f884 800c 	strb.w	r8, [r4, #12]
 800c12e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c132:	d1f3      	bne.n	800c11c <rmw_uxrce_init_node_memory+0x20>
 800c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop

0800c13c <rmw_uxrce_init_session_memory>:
 800c13c:	b1ea      	cbz	r2, 800c17a <rmw_uxrce_init_session_memory+0x3e>
 800c13e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c142:	7b05      	ldrb	r5, [r0, #12]
 800c144:	4606      	mov	r6, r0
 800c146:	b9b5      	cbnz	r5, 800c176 <rmw_uxrce_init_session_memory+0x3a>
 800c148:	e9c0 5500 	strd	r5, r5, [r0]
 800c14c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c150:	f240 1301 	movw	r3, #257	@ 0x101
 800c154:	4617      	mov	r7, r2
 800c156:	f8c0 8008 	str.w	r8, [r0, #8]
 800c15a:	460c      	mov	r4, r1
 800c15c:	8183      	strh	r3, [r0, #12]
 800c15e:	46a9      	mov	r9, r5
 800c160:	4621      	mov	r1, r4
 800c162:	4630      	mov	r0, r6
 800c164:	3501      	adds	r5, #1
 800c166:	f008 fb33 	bl	80147d0 <put_memory>
 800c16a:	42af      	cmp	r7, r5
 800c16c:	60a4      	str	r4, [r4, #8]
 800c16e:	f884 900c 	strb.w	r9, [r4, #12]
 800c172:	4444      	add	r4, r8
 800c174:	d1f4      	bne.n	800c160 <rmw_uxrce_init_session_memory+0x24>
 800c176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c17a:	4770      	bx	lr

0800c17c <rmw_uxrce_init_topic_memory>:
 800c17c:	b1e2      	cbz	r2, 800c1b8 <rmw_uxrce_init_topic_memory+0x3c>
 800c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	7b05      	ldrb	r5, [r0, #12]
 800c184:	4606      	mov	r6, r0
 800c186:	b9ad      	cbnz	r5, 800c1b4 <rmw_uxrce_init_topic_memory+0x38>
 800c188:	231c      	movs	r3, #28
 800c18a:	e9c0 5500 	strd	r5, r5, [r0]
 800c18e:	6083      	str	r3, [r0, #8]
 800c190:	f240 1301 	movw	r3, #257	@ 0x101
 800c194:	4617      	mov	r7, r2
 800c196:	8183      	strh	r3, [r0, #12]
 800c198:	460c      	mov	r4, r1
 800c19a:	46a8      	mov	r8, r5
 800c19c:	4621      	mov	r1, r4
 800c19e:	4630      	mov	r0, r6
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	f008 fb15 	bl	80147d0 <put_memory>
 800c1a6:	42af      	cmp	r7, r5
 800c1a8:	60a4      	str	r4, [r4, #8]
 800c1aa:	f884 800c 	strb.w	r8, [r4, #12]
 800c1ae:	f104 041c 	add.w	r4, r4, #28
 800c1b2:	d1f3      	bne.n	800c19c <rmw_uxrce_init_topic_memory+0x20>
 800c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop

0800c1bc <rmw_uxrce_init_static_input_buffer_memory>:
 800c1bc:	b1ea      	cbz	r2, 800c1fa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c2:	7b05      	ldrb	r5, [r0, #12]
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	b9b5      	cbnz	r5, 800c1f6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c1c8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c1cc:	e9c0 5500 	strd	r5, r5, [r0]
 800c1d0:	6083      	str	r3, [r0, #8]
 800c1d2:	f240 1301 	movw	r3, #257	@ 0x101
 800c1d6:	4617      	mov	r7, r2
 800c1d8:	8183      	strh	r3, [r0, #12]
 800c1da:	460c      	mov	r4, r1
 800c1dc:	46a8      	mov	r8, r5
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	3501      	adds	r5, #1
 800c1e4:	f008 faf4 	bl	80147d0 <put_memory>
 800c1e8:	42af      	cmp	r7, r5
 800c1ea:	60a4      	str	r4, [r4, #8]
 800c1ec:	f884 800c 	strb.w	r8, [r4, #12]
 800c1f0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c1f4:	d1f3      	bne.n	800c1de <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fa:	4770      	bx	lr

0800c1fc <rmw_uxrce_init_init_options_impl_memory>:
 800c1fc:	b1e2      	cbz	r2, 800c238 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	7b05      	ldrb	r5, [r0, #12]
 800c204:	4606      	mov	r6, r0
 800c206:	b9ad      	cbnz	r5, 800c234 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c208:	232c      	movs	r3, #44	@ 0x2c
 800c20a:	e9c0 5500 	strd	r5, r5, [r0]
 800c20e:	6083      	str	r3, [r0, #8]
 800c210:	f240 1301 	movw	r3, #257	@ 0x101
 800c214:	4617      	mov	r7, r2
 800c216:	8183      	strh	r3, [r0, #12]
 800c218:	460c      	mov	r4, r1
 800c21a:	46a8      	mov	r8, r5
 800c21c:	4621      	mov	r1, r4
 800c21e:	4630      	mov	r0, r6
 800c220:	3501      	adds	r5, #1
 800c222:	f008 fad5 	bl	80147d0 <put_memory>
 800c226:	42af      	cmp	r7, r5
 800c228:	60a4      	str	r4, [r4, #8]
 800c22a:	f884 800c 	strb.w	r8, [r4, #12]
 800c22e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c232:	d1f3      	bne.n	800c21c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop

0800c23c <rmw_uxrce_init_wait_set_memory>:
 800c23c:	b1e2      	cbz	r2, 800c278 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c242:	7b05      	ldrb	r5, [r0, #12]
 800c244:	4606      	mov	r6, r0
 800c246:	b9ad      	cbnz	r5, 800c274 <rmw_uxrce_init_wait_set_memory+0x38>
 800c248:	231c      	movs	r3, #28
 800c24a:	e9c0 5500 	strd	r5, r5, [r0]
 800c24e:	6083      	str	r3, [r0, #8]
 800c250:	f240 1301 	movw	r3, #257	@ 0x101
 800c254:	4617      	mov	r7, r2
 800c256:	8183      	strh	r3, [r0, #12]
 800c258:	460c      	mov	r4, r1
 800c25a:	46a8      	mov	r8, r5
 800c25c:	4621      	mov	r1, r4
 800c25e:	4630      	mov	r0, r6
 800c260:	3501      	adds	r5, #1
 800c262:	f008 fab5 	bl	80147d0 <put_memory>
 800c266:	42af      	cmp	r7, r5
 800c268:	60a4      	str	r4, [r4, #8]
 800c26a:	f884 800c 	strb.w	r8, [r4, #12]
 800c26e:	f104 041c 	add.w	r4, r4, #28
 800c272:	d1f3      	bne.n	800c25c <rmw_uxrce_init_wait_set_memory+0x20>
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop

0800c27c <rmw_uxrce_init_guard_condition_memory>:
 800c27c:	b1e2      	cbz	r2, 800c2b8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c282:	7b05      	ldrb	r5, [r0, #12]
 800c284:	4606      	mov	r6, r0
 800c286:	b9ad      	cbnz	r5, 800c2b4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c288:	2320      	movs	r3, #32
 800c28a:	e9c0 5500 	strd	r5, r5, [r0]
 800c28e:	6083      	str	r3, [r0, #8]
 800c290:	f240 1301 	movw	r3, #257	@ 0x101
 800c294:	4617      	mov	r7, r2
 800c296:	8183      	strh	r3, [r0, #12]
 800c298:	460c      	mov	r4, r1
 800c29a:	46a8      	mov	r8, r5
 800c29c:	4621      	mov	r1, r4
 800c29e:	4630      	mov	r0, r6
 800c2a0:	3501      	adds	r5, #1
 800c2a2:	f008 fa95 	bl	80147d0 <put_memory>
 800c2a6:	42af      	cmp	r7, r5
 800c2a8:	60a4      	str	r4, [r4, #8]
 800c2aa:	f884 800c 	strb.w	r8, [r4, #12]
 800c2ae:	f104 0420 	add.w	r4, r4, #32
 800c2b2:	d1f3      	bne.n	800c29c <rmw_uxrce_init_guard_condition_memory+0x20>
 800c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop

0800c2bc <rmw_uxrce_fini_session_memory>:
 800c2bc:	4601      	mov	r1, r0
 800c2be:	4801      	ldr	r0, [pc, #4]	@ (800c2c4 <rmw_uxrce_fini_session_memory+0x8>)
 800c2c0:	f008 ba86 	b.w	80147d0 <put_memory>
 800c2c4:	2000ca34 	.word	0x2000ca34

0800c2c8 <rmw_uxrce_fini_node_memory>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	6800      	ldr	r0, [r0, #0]
 800c2ce:	b128      	cbz	r0, 800c2dc <rmw_uxrce_fini_node_memory+0x14>
 800c2d0:	4b07      	ldr	r3, [pc, #28]	@ (800c2f0 <rmw_uxrce_fini_node_memory+0x28>)
 800c2d2:	6819      	ldr	r1, [r3, #0]
 800c2d4:	f7f3 ffa4 	bl	8000220 <strcmp>
 800c2d8:	b940      	cbnz	r0, 800c2ec <rmw_uxrce_fini_node_memory+0x24>
 800c2da:	6020      	str	r0, [r4, #0]
 800c2dc:	6861      	ldr	r1, [r4, #4]
 800c2de:	b129      	cbz	r1, 800c2ec <rmw_uxrce_fini_node_memory+0x24>
 800c2e0:	2500      	movs	r5, #0
 800c2e2:	4804      	ldr	r0, [pc, #16]	@ (800c2f4 <rmw_uxrce_fini_node_memory+0x2c>)
 800c2e4:	610d      	str	r5, [r1, #16]
 800c2e6:	f008 fa73 	bl	80147d0 <put_memory>
 800c2ea:	6065      	str	r5, [r4, #4]
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	bf00      	nop
 800c2f0:	08018948 	.word	0x08018948
 800c2f4:	2000ca04 	.word	0x2000ca04

0800c2f8 <rmw_uxrce_fini_publisher_memory>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	6800      	ldr	r0, [r0, #0]
 800c2fe:	b128      	cbz	r0, 800c30c <rmw_uxrce_fini_publisher_memory+0x14>
 800c300:	4b06      	ldr	r3, [pc, #24]	@ (800c31c <rmw_uxrce_fini_publisher_memory+0x24>)
 800c302:	6819      	ldr	r1, [r3, #0]
 800c304:	f7f3 ff8c 	bl	8000220 <strcmp>
 800c308:	b938      	cbnz	r0, 800c31a <rmw_uxrce_fini_publisher_memory+0x22>
 800c30a:	6020      	str	r0, [r4, #0]
 800c30c:	6861      	ldr	r1, [r4, #4]
 800c30e:	b121      	cbz	r1, 800c31a <rmw_uxrce_fini_publisher_memory+0x22>
 800c310:	4803      	ldr	r0, [pc, #12]	@ (800c320 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c312:	f008 fa5d 	bl	80147d0 <put_memory>
 800c316:	2300      	movs	r3, #0
 800c318:	6063      	str	r3, [r4, #4]
 800c31a:	bd10      	pop	{r4, pc}
 800c31c:	08018948 	.word	0x08018948
 800c320:	2000ca14 	.word	0x2000ca14

0800c324 <rmw_uxrce_fini_subscription_memory>:
 800c324:	b510      	push	{r4, lr}
 800c326:	4604      	mov	r4, r0
 800c328:	6800      	ldr	r0, [r0, #0]
 800c32a:	b128      	cbz	r0, 800c338 <rmw_uxrce_fini_subscription_memory+0x14>
 800c32c:	4b06      	ldr	r3, [pc, #24]	@ (800c348 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c32e:	6819      	ldr	r1, [r3, #0]
 800c330:	f7f3 ff76 	bl	8000220 <strcmp>
 800c334:	b938      	cbnz	r0, 800c346 <rmw_uxrce_fini_subscription_memory+0x22>
 800c336:	6020      	str	r0, [r4, #0]
 800c338:	6861      	ldr	r1, [r4, #4]
 800c33a:	b121      	cbz	r1, 800c346 <rmw_uxrce_fini_subscription_memory+0x22>
 800c33c:	4803      	ldr	r0, [pc, #12]	@ (800c34c <rmw_uxrce_fini_subscription_memory+0x28>)
 800c33e:	f008 fa47 	bl	80147d0 <put_memory>
 800c342:	2300      	movs	r3, #0
 800c344:	6063      	str	r3, [r4, #4]
 800c346:	bd10      	pop	{r4, pc}
 800c348:	08018948 	.word	0x08018948
 800c34c:	2000ca54 	.word	0x2000ca54

0800c350 <rmw_uxrce_fini_service_memory>:
 800c350:	b510      	push	{r4, lr}
 800c352:	4604      	mov	r4, r0
 800c354:	6800      	ldr	r0, [r0, #0]
 800c356:	b128      	cbz	r0, 800c364 <rmw_uxrce_fini_service_memory+0x14>
 800c358:	4b06      	ldr	r3, [pc, #24]	@ (800c374 <rmw_uxrce_fini_service_memory+0x24>)
 800c35a:	6819      	ldr	r1, [r3, #0]
 800c35c:	f7f3 ff60 	bl	8000220 <strcmp>
 800c360:	b938      	cbnz	r0, 800c372 <rmw_uxrce_fini_service_memory+0x22>
 800c362:	6020      	str	r0, [r4, #0]
 800c364:	6861      	ldr	r1, [r4, #4]
 800c366:	b121      	cbz	r1, 800c372 <rmw_uxrce_fini_service_memory+0x22>
 800c368:	4803      	ldr	r0, [pc, #12]	@ (800c378 <rmw_uxrce_fini_service_memory+0x28>)
 800c36a:	f008 fa31 	bl	80147d0 <put_memory>
 800c36e:	2300      	movs	r3, #0
 800c370:	6063      	str	r3, [r4, #4]
 800c372:	bd10      	pop	{r4, pc}
 800c374:	08018948 	.word	0x08018948
 800c378:	2000ca24 	.word	0x2000ca24

0800c37c <rmw_uxrce_fini_client_memory>:
 800c37c:	b510      	push	{r4, lr}
 800c37e:	4604      	mov	r4, r0
 800c380:	6800      	ldr	r0, [r0, #0]
 800c382:	b128      	cbz	r0, 800c390 <rmw_uxrce_fini_client_memory+0x14>
 800c384:	4b06      	ldr	r3, [pc, #24]	@ (800c3a0 <rmw_uxrce_fini_client_memory+0x24>)
 800c386:	6819      	ldr	r1, [r3, #0]
 800c388:	f7f3 ff4a 	bl	8000220 <strcmp>
 800c38c:	b938      	cbnz	r0, 800c39e <rmw_uxrce_fini_client_memory+0x22>
 800c38e:	6020      	str	r0, [r4, #0]
 800c390:	6861      	ldr	r1, [r4, #4]
 800c392:	b121      	cbz	r1, 800c39e <rmw_uxrce_fini_client_memory+0x22>
 800c394:	4803      	ldr	r0, [pc, #12]	@ (800c3a4 <rmw_uxrce_fini_client_memory+0x28>)
 800c396:	f008 fa1b 	bl	80147d0 <put_memory>
 800c39a:	2300      	movs	r3, #0
 800c39c:	6063      	str	r3, [r4, #4]
 800c39e:	bd10      	pop	{r4, pc}
 800c3a0:	08018948 	.word	0x08018948
 800c3a4:	20008134 	.word	0x20008134

0800c3a8 <rmw_uxrce_fini_topic_memory>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4803      	ldr	r0, [pc, #12]	@ (800c3bc <rmw_uxrce_fini_topic_memory+0x14>)
 800c3b0:	f008 fa0e 	bl	80147d0 <put_memory>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	61a3      	str	r3, [r4, #24]
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	bf00      	nop
 800c3bc:	2000ca64 	.word	0x2000ca64

0800c3c0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	b530      	push	{r4, r5, lr}
 800c3c4:	4925      	ldr	r1, [pc, #148]	@ (800c45c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c3c6:	680d      	ldr	r5, [r1, #0]
 800c3c8:	ac03      	add	r4, sp, #12
 800c3ca:	e884 000c 	stmia.w	r4, {r2, r3}
 800c3ce:	461c      	mov	r4, r3
 800c3d0:	2d00      	cmp	r5, #0
 800c3d2:	d041      	beq.n	800c458 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c3d4:	462b      	mov	r3, r5
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c3e0:	4290      	cmp	r0, r2
 800c3e2:	bf08      	it	eq
 800c3e4:	3101      	addeq	r1, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1f6      	bne.n	800c3d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c3ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d029      	beq.n	800c446 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c3f2:	d907      	bls.n	800c404 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d005      	beq.n	800c404 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3fe:	4608      	mov	r0, r1
 800c400:	b002      	add	sp, #8
 800c402:	4770      	bx	lr
 800c404:	b314      	cbz	r4, 800c44c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c406:	428c      	cmp	r4, r1
 800c408:	d820      	bhi.n	800c44c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c40a:	2d00      	cmp	r5, #0
 800c40c:	d0f4      	beq.n	800c3f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c40e:	2100      	movs	r1, #0
 800c410:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c414:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c418:	e002      	b.n	800c420 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c41a:	686d      	ldr	r5, [r5, #4]
 800c41c:	2d00      	cmp	r5, #0
 800c41e:	d0ec      	beq.n	800c3fa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c420:	68ab      	ldr	r3, [r5, #8]
 800c422:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c426:	4290      	cmp	r0, r2
 800c428:	d1f7      	bne.n	800c41a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c42a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c42e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c432:	4562      	cmp	r2, ip
 800c434:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c438:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c43c:	daed      	bge.n	800c41a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c43e:	4694      	mov	ip, r2
 800c440:	461c      	mov	r4, r3
 800c442:	4629      	mov	r1, r5
 800c444:	e7e9      	b.n	800c41a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c446:	b10c      	cbz	r4, 800c44c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c448:	428c      	cmp	r4, r1
 800c44a:	d9d5      	bls.n	800c3f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c450:	4802      	ldr	r0, [pc, #8]	@ (800c45c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c452:	b002      	add	sp, #8
 800c454:	f008 b9ac 	b.w	80147b0 <get_memory>
 800c458:	4629      	mov	r1, r5
 800c45a:	e7c6      	b.n	800c3ea <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c45c:	2000ca44 	.word	0x2000ca44

0800c460 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c460:	4b11      	ldr	r3, [pc, #68]	@ (800c4a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	b530      	push	{r4, r5, lr}
 800c466:	b1e3      	cbz	r3, 800c4a2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c468:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c46c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c470:	2400      	movs	r4, #0
 800c472:	e001      	b.n	800c478 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	b193      	cbz	r3, 800c49e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c478:	689a      	ldr	r2, [r3, #8]
 800c47a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c47e:	4288      	cmp	r0, r1
 800c480:	d1f8      	bne.n	800c474 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c482:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c486:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c48a:	4571      	cmp	r1, lr
 800c48c:	eb72 050c 	sbcs.w	r5, r2, ip
 800c490:	daf0      	bge.n	800c474 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c492:	461c      	mov	r4, r3
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	468e      	mov	lr, r1
 800c498:	4694      	mov	ip, r2
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1ec      	bne.n	800c478 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c49e:	4620      	mov	r0, r4
 800c4a0:	bd30      	pop	{r4, r5, pc}
 800c4a2:	461c      	mov	r4, r3
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	bd30      	pop	{r4, r5, pc}
 800c4a8:	2000ca44 	.word	0x2000ca44
 800c4ac:	00000000 	.word	0x00000000

0800c4b0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	4b3c      	ldr	r3, [pc, #240]	@ (800c5a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c4b6:	ed2d 8b06 	vpush	{d8-d10}
 800c4ba:	681f      	ldr	r7, [r3, #0]
 800c4bc:	b08d      	sub	sp, #52	@ 0x34
 800c4be:	f7ff fd7d 	bl	800bfbc <rmw_uros_epoch_nanos>
 800c4c2:	2f00      	cmp	r7, #0
 800c4c4:	d05d      	beq.n	800c582 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c4c6:	46b8      	mov	r8, r7
 800c4c8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c590 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c4cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c4d0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c598 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c4da:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c5a0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c4de:	4681      	mov	r9, r0
 800c4e0:	468a      	mov	sl, r1
 800c4e2:	ac04      	add	r4, sp, #16
 800c4e4:	d03f      	beq.n	800c566 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c4e6:	2b05      	cmp	r3, #5
 800c4e8:	d044      	beq.n	800c574 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d03b      	beq.n	800c566 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c4ee:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c4f2:	ed8d ab06 	vstr	d10, [sp, #24]
 800c4f6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c4fa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c4fe:	ab08      	add	r3, sp, #32
 800c500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c502:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c506:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c50a:	f007 fe9d 	bl	8014248 <rmw_time_equal>
 800c50e:	b118      	cbz	r0, 800c518 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c510:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c514:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c51c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c520:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c524:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c528:	f007 fee2 	bl	80142f0 <rmw_time_total_nsec>
 800c52c:	1830      	adds	r0, r6, r0
 800c52e:	eb47 0101 	adc.w	r1, r7, r1
 800c532:	4548      	cmp	r0, r9
 800c534:	eb71 030a 	sbcs.w	r3, r1, sl
 800c538:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c53c:	db05      	blt.n	800c54a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c53e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c542:	4591      	cmp	r9, r2
 800c544:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c548:	da03      	bge.n	800c552 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c54a:	4817      	ldr	r0, [pc, #92]	@ (800c5a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c54c:	4641      	mov	r1, r8
 800c54e:	f008 f93f 	bl	80147d0 <put_memory>
 800c552:	f1bb 0f00 	cmp.w	fp, #0
 800c556:	d014      	beq.n	800c582 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c558:	46d8      	mov	r8, fp
 800c55a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c55e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c562:	2b04      	cmp	r3, #4
 800c564:	d1bf      	bne.n	800c4e6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c566:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c56a:	3340      	adds	r3, #64	@ 0x40
 800c56c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c56e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c572:	e7c0      	b.n	800c4f6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c574:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c578:	3348      	adds	r3, #72	@ 0x48
 800c57a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c57c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c580:	e7b9      	b.n	800c4f6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c582:	b00d      	add	sp, #52	@ 0x34
 800c584:	ecbd 8b06 	vpop	{d8-d10}
 800c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58c:	f3af 8000 	nop.w
	...
 800c598:	00000001 	.word	0x00000001
 800c59c:	00000000 	.word	0x00000000
 800c5a0:	0000001e 	.word	0x0000001e
 800c5a4:	00000000 	.word	0x00000000
 800c5a8:	2000ca44 	.word	0x2000ca44

0800c5ac <run_xrce_session>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	788c      	ldrb	r4, [r1, #2]
 800c5b0:	b086      	sub	sp, #24
 800c5b2:	2c01      	cmp	r4, #1
 800c5b4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c5b8:	d00c      	beq.n	800c5d4 <run_xrce_session+0x28>
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	2301      	movs	r3, #1
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	f10d 020e 	add.w	r2, sp, #14
 800c5c4:	f10d 0317 	add.w	r3, sp, #23
 800c5c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c5cc:	f002 f9ca 	bl	800e964 <uxr_run_session_until_all_status>
 800c5d0:	b006      	add	sp, #24
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c5d8:	f001 fdde 	bl	800e198 <uxr_flash_output_streams>
 800c5dc:	4620      	mov	r0, r4
 800c5de:	b006      	add	sp, #24
 800c5e0:	bd10      	pop	{r4, pc}
 800c5e2:	bf00      	nop

0800c5e4 <convert_qos_profile>:
 800c5e4:	7a4a      	ldrb	r2, [r1, #9]
 800c5e6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c5ea:	2a02      	cmp	r2, #2
 800c5ec:	bf18      	it	ne
 800c5ee:	2200      	movne	r2, #0
 800c5f0:	7002      	strb	r2, [r0, #0]
 800c5f2:	780a      	ldrb	r2, [r1, #0]
 800c5f4:	8889      	ldrh	r1, [r1, #4]
 800c5f6:	8081      	strh	r1, [r0, #4]
 800c5f8:	f1ac 0c02 	sub.w	ip, ip, #2
 800c5fc:	f1a2 0202 	sub.w	r2, r2, #2
 800c600:	fabc fc8c 	clz	ip, ip
 800c604:	fab2 f282 	clz	r2, r2
 800c608:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c60c:	0952      	lsrs	r2, r2, #5
 800c60e:	f880 c001 	strb.w	ip, [r0, #1]
 800c612:	7082      	strb	r2, [r0, #2]
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop

0800c618 <generate_type_name>:
 800c618:	b530      	push	{r4, r5, lr}
 800c61a:	2300      	movs	r3, #0
 800c61c:	700b      	strb	r3, [r1, #0]
 800c61e:	6803      	ldr	r3, [r0, #0]
 800c620:	b087      	sub	sp, #28
 800c622:	4614      	mov	r4, r2
 800c624:	b1d3      	cbz	r3, 800c65c <generate_type_name+0x44>
 800c626:	4a0f      	ldr	r2, [pc, #60]	@ (800c664 <generate_type_name+0x4c>)
 800c628:	4615      	mov	r5, r2
 800c62a:	9203      	str	r2, [sp, #12]
 800c62c:	9500      	str	r5, [sp, #0]
 800c62e:	6842      	ldr	r2, [r0, #4]
 800c630:	480d      	ldr	r0, [pc, #52]	@ (800c668 <generate_type_name+0x50>)
 800c632:	9001      	str	r0, [sp, #4]
 800c634:	4608      	mov	r0, r1
 800c636:	490d      	ldr	r1, [pc, #52]	@ (800c66c <generate_type_name+0x54>)
 800c638:	9204      	str	r2, [sp, #16]
 800c63a:	9105      	str	r1, [sp, #20]
 800c63c:	9102      	str	r1, [sp, #8]
 800c63e:	4a0c      	ldr	r2, [pc, #48]	@ (800c670 <generate_type_name+0x58>)
 800c640:	4621      	mov	r1, r4
 800c642:	f00a facf 	bl	8016be4 <sniprintf>
 800c646:	2800      	cmp	r0, #0
 800c648:	db05      	blt.n	800c656 <generate_type_name+0x3e>
 800c64a:	4284      	cmp	r4, r0
 800c64c:	bfd4      	ite	le
 800c64e:	2000      	movle	r0, #0
 800c650:	2001      	movgt	r0, #1
 800c652:	b007      	add	sp, #28
 800c654:	bd30      	pop	{r4, r5, pc}
 800c656:	2000      	movs	r0, #0
 800c658:	b007      	add	sp, #28
 800c65a:	bd30      	pop	{r4, r5, pc}
 800c65c:	4b05      	ldr	r3, [pc, #20]	@ (800c674 <generate_type_name+0x5c>)
 800c65e:	4a01      	ldr	r2, [pc, #4]	@ (800c664 <generate_type_name+0x4c>)
 800c660:	461d      	mov	r5, r3
 800c662:	e7e2      	b.n	800c62a <generate_type_name+0x12>
 800c664:	08017f80 	.word	0x08017f80
 800c668:	08017f98 	.word	0x08017f98
 800c66c:	08017f94 	.word	0x08017f94
 800c670:	08017f84 	.word	0x08017f84
 800c674:	08018720 	.word	0x08018720

0800c678 <generate_topic_name>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	4614      	mov	r4, r2
 800c67e:	9000      	str	r0, [sp, #0]
 800c680:	4b08      	ldr	r3, [pc, #32]	@ (800c6a4 <generate_topic_name+0x2c>)
 800c682:	4a09      	ldr	r2, [pc, #36]	@ (800c6a8 <generate_topic_name+0x30>)
 800c684:	4608      	mov	r0, r1
 800c686:	4621      	mov	r1, r4
 800c688:	f00a faac 	bl	8016be4 <sniprintf>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	db05      	blt.n	800c69c <generate_topic_name+0x24>
 800c690:	4284      	cmp	r4, r0
 800c692:	bfd4      	ite	le
 800c694:	2000      	movle	r0, #0
 800c696:	2001      	movgt	r0, #1
 800c698:	b002      	add	sp, #8
 800c69a:	bd10      	pop	{r4, pc}
 800c69c:	2000      	movs	r0, #0
 800c69e:	b002      	add	sp, #8
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	bf00      	nop
 800c6a4:	08017fa4 	.word	0x08017fa4
 800c6a8:	08017f9c 	.word	0x08017f9c

0800c6ac <is_uxrce_rmw_identifier_valid>:
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	b140      	cbz	r0, 800c6c4 <is_uxrce_rmw_identifier_valid+0x18>
 800c6b2:	f008 f8e5 	bl	8014880 <rmw_get_implementation_identifier>
 800c6b6:	4601      	mov	r1, r0
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f7f3 fdb1 	bl	8000220 <strcmp>
 800c6be:	fab0 f080 	clz	r0, r0
 800c6c2:	0940      	lsrs	r0, r0, #5
 800c6c4:	bd10      	pop	{r4, pc}
 800c6c6:	bf00      	nop

0800c6c8 <get_message_typesupport_handle>:
 800c6c8:	6883      	ldr	r3, [r0, #8]
 800c6ca:	4718      	bx	r3

0800c6cc <get_message_typesupport_handle_function>:
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	6800      	ldr	r0, [r0, #0]
 800c6d2:	f7f3 fda5 	bl	8000220 <strcmp>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	bf0c      	ite	eq
 800c6da:	4620      	moveq	r0, r4
 800c6dc:	2000      	movne	r0, #0
 800c6de:	bd10      	pop	{r4, pc}

0800c6e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c6e0:	4b04      	ldr	r3, [pc, #16]	@ (800c6f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	b10a      	cbz	r2, 800c6ea <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800c6e6:	4803      	ldr	r0, [pc, #12]	@ (800c6f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c6e8:	4770      	bx	lr
 800c6ea:	4a03      	ldr	r2, [pc, #12]	@ (800c6f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800c6ec:	4801      	ldr	r0, [pc, #4]	@ (800c6f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c6ee:	6812      	ldr	r2, [r2, #0]
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	4770      	bx	lr
 800c6f4:	20000034 	.word	0x20000034
 800c6f8:	20000134 	.word	0x20000134

0800c6fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c6fc:	4a02      	ldr	r2, [pc, #8]	@ (800c708 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xc>)
 800c6fe:	4b03      	ldr	r3, [pc, #12]	@ (800c70c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x10>)
 800c700:	6812      	ldr	r2, [r2, #0]
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	20000134 	.word	0x20000134
 800c70c:	20000034 	.word	0x20000034

0800c710 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c710:	4b04      	ldr	r3, [pc, #16]	@ (800c724 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	b10a      	cbz	r2, 800c71a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800c716:	4803      	ldr	r0, [pc, #12]	@ (800c724 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c718:	4770      	bx	lr
 800c71a:	4a03      	ldr	r2, [pc, #12]	@ (800c728 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800c71c:	4801      	ldr	r0, [pc, #4]	@ (800c724 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c71e:	6812      	ldr	r2, [r2, #0]
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	4770      	bx	lr
 800c724:	20000048 	.word	0x20000048
 800c728:	20000134 	.word	0x20000134

0800c72c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c72c:	4a02      	ldr	r2, [pc, #8]	@ (800c738 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xc>)
 800c72e:	4b03      	ldr	r3, [pc, #12]	@ (800c73c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x10>)
 800c730:	6812      	ldr	r2, [r2, #0]
 800c732:	601a      	str	r2, [r3, #0]
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	20000134 	.word	0x20000134
 800c73c:	20000048 	.word	0x20000048

0800c740 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 800c740:	f008 bc80 	b.w	8015044 <std_msgs__msg__Bool__init>

0800c744 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 800c744:	f008 bc82 	b.w	801504c <std_msgs__msg__Bool__fini>

0800c748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c748:	4b04      	ldr	r3, [pc, #16]	@ (800c75c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	b10a      	cbz	r2, 800c752 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800c74e:	4803      	ldr	r0, [pc, #12]	@ (800c75c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c750:	4770      	bx	lr
 800c752:	4a03      	ldr	r2, [pc, #12]	@ (800c760 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800c754:	4801      	ldr	r0, [pc, #4]	@ (800c75c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	4770      	bx	lr
 800c75c:	20000090 	.word	0x20000090
 800c760:	20000138 	.word	0x20000138

0800c764 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_init_function>:
 800c764:	f008 bc74 	b.w	8015050 <std_msgs__msg__UInt16__init>

0800c768 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_fini_function>:
 800c768:	f008 bc76 	b.w	8015058 <std_msgs__msg__UInt16__fini>

0800c76c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c76c:	4b04      	ldr	r3, [pc, #16]	@ (800c780 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	b10a      	cbz	r2, 800c776 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 800c772:	4803      	ldr	r0, [pc, #12]	@ (800c780 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c774:	4770      	bx	lr
 800c776:	4a03      	ldr	r2, [pc, #12]	@ (800c784 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 800c778:	4801      	ldr	r0, [pc, #4]	@ (800c780 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 800c77a:	6812      	ldr	r2, [r2, #0]
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	4770      	bx	lr
 800c780:	200000d8 	.word	0x200000d8
 800c784:	20000138 	.word	0x20000138

0800c788 <_Bool__max_serialized_size>:
 800c788:	b508      	push	{r3, lr}
 800c78a:	2101      	movs	r1, #1
 800c78c:	2000      	movs	r0, #0
 800c78e:	f001 f835 	bl	800d7fc <ucdr_alignment>
 800c792:	3001      	adds	r0, #1
 800c794:	bd08      	pop	{r3, pc}
 800c796:	bf00      	nop

0800c798 <_Bool__cdr_deserialize>:
 800c798:	b109      	cbz	r1, 800c79e <_Bool__cdr_deserialize+0x6>
 800c79a:	f000 b867 	b.w	800c86c <ucdr_deserialize_bool>
 800c79e:	4608      	mov	r0, r1
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop

0800c7a4 <get_serialized_size_std_msgs__msg__Bool>:
 800c7a4:	b138      	cbz	r0, 800c7b6 <get_serialized_size_std_msgs__msg__Bool+0x12>
 800c7a6:	b508      	push	{r3, lr}
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	f001 f825 	bl	800d7fc <ucdr_alignment>
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	bd08      	pop	{r3, pc}
 800c7b6:	4770      	bx	lr

0800c7b8 <_Bool__cdr_serialize>:
 800c7b8:	460a      	mov	r2, r1
 800c7ba:	b118      	cbz	r0, 800c7c4 <_Bool__cdr_serialize+0xc>
 800c7bc:	7801      	ldrb	r1, [r0, #0]
 800c7be:	4610      	mov	r0, r2
 800c7c0:	f000 b83e 	b.w	800c840 <ucdr_serialize_bool>
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop

0800c7c8 <_Bool__get_serialized_size>:
 800c7c8:	b130      	cbz	r0, 800c7d8 <_Bool__get_serialized_size+0x10>
 800c7ca:	b508      	push	{r3, lr}
 800c7cc:	2101      	movs	r1, #1
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	f001 f814 	bl	800d7fc <ucdr_alignment>
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	bd08      	pop	{r3, pc}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop

0800c7dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800c7dc:	4800      	ldr	r0, [pc, #0]	@ (800c7e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 800c7de:	4770      	bx	lr
 800c7e0:	200000e4 	.word	0x200000e4

0800c7e4 <_UInt16__max_serialized_size>:
 800c7e4:	b508      	push	{r3, lr}
 800c7e6:	2102      	movs	r1, #2
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	f001 f807 	bl	800d7fc <ucdr_alignment>
 800c7ee:	3002      	adds	r0, #2
 800c7f0:	bd08      	pop	{r3, pc}
 800c7f2:	bf00      	nop

0800c7f4 <_UInt16__cdr_deserialize>:
 800c7f4:	b109      	cbz	r1, 800c7fa <_UInt16__cdr_deserialize+0x6>
 800c7f6:	f000 b97d 	b.w	800caf4 <ucdr_deserialize_uint16_t>
 800c7fa:	4608      	mov	r0, r1
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop

0800c800 <get_serialized_size_std_msgs__msg__UInt16>:
 800c800:	b138      	cbz	r0, 800c812 <get_serialized_size_std_msgs__msg__UInt16+0x12>
 800c802:	b508      	push	{r3, lr}
 800c804:	460b      	mov	r3, r1
 800c806:	4618      	mov	r0, r3
 800c808:	2102      	movs	r1, #2
 800c80a:	f000 fff7 	bl	800d7fc <ucdr_alignment>
 800c80e:	3002      	adds	r0, #2
 800c810:	bd08      	pop	{r3, pc}
 800c812:	4770      	bx	lr

0800c814 <_UInt16__cdr_serialize>:
 800c814:	460a      	mov	r2, r1
 800c816:	b118      	cbz	r0, 800c820 <_UInt16__cdr_serialize+0xc>
 800c818:	8801      	ldrh	r1, [r0, #0]
 800c81a:	4610      	mov	r0, r2
 800c81c:	f000 b86a 	b.w	800c8f4 <ucdr_serialize_uint16_t>
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop

0800c824 <_UInt16__get_serialized_size>:
 800c824:	b130      	cbz	r0, 800c834 <_UInt16__get_serialized_size+0x10>
 800c826:	b508      	push	{r3, lr}
 800c828:	2102      	movs	r1, #2
 800c82a:	2000      	movs	r0, #0
 800c82c:	f000 ffe6 	bl	800d7fc <ucdr_alignment>
 800c830:	3002      	adds	r0, #2
 800c832:	bd08      	pop	{r3, pc}
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop

0800c838 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 800c838:	4800      	ldr	r0, [pc, #0]	@ (800c83c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x4>)
 800c83a:	4770      	bx	lr
 800c83c:	2000010c 	.word	0x2000010c

0800c840 <ucdr_serialize_bool>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	460d      	mov	r5, r1
 800c844:	2101      	movs	r1, #1
 800c846:	4604      	mov	r4, r0
 800c848:	f000 ff8c 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800c84c:	b148      	cbz	r0, 800c862 <ucdr_serialize_bool+0x22>
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	701d      	strb	r5, [r3, #0]
 800c852:	68a2      	ldr	r2, [r4, #8]
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	2101      	movs	r1, #1
 800c858:	440a      	add	r2, r1
 800c85a:	440b      	add	r3, r1
 800c85c:	60a2      	str	r2, [r4, #8]
 800c85e:	6123      	str	r3, [r4, #16]
 800c860:	7561      	strb	r1, [r4, #21]
 800c862:	7da0      	ldrb	r0, [r4, #22]
 800c864:	f080 0001 	eor.w	r0, r0, #1
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	bf00      	nop

0800c86c <ucdr_deserialize_bool>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	460d      	mov	r5, r1
 800c870:	2101      	movs	r1, #1
 800c872:	4604      	mov	r4, r0
 800c874:	f000 ff76 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800c878:	b160      	cbz	r0, 800c894 <ucdr_deserialize_bool+0x28>
 800c87a:	68a2      	ldr	r2, [r4, #8]
 800c87c:	6923      	ldr	r3, [r4, #16]
 800c87e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c882:	3900      	subs	r1, #0
 800c884:	bf18      	it	ne
 800c886:	2101      	movne	r1, #1
 800c888:	7029      	strb	r1, [r5, #0]
 800c88a:	3301      	adds	r3, #1
 800c88c:	2101      	movs	r1, #1
 800c88e:	60a2      	str	r2, [r4, #8]
 800c890:	6123      	str	r3, [r4, #16]
 800c892:	7561      	strb	r1, [r4, #21]
 800c894:	7da0      	ldrb	r0, [r4, #22]
 800c896:	f080 0001 	eor.w	r0, r0, #1
 800c89a:	bd38      	pop	{r3, r4, r5, pc}

0800c89c <ucdr_serialize_uint8_t>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	460d      	mov	r5, r1
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	f000 ff5e 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800c8a8:	b148      	cbz	r0, 800c8be <ucdr_serialize_uint8_t+0x22>
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	701d      	strb	r5, [r3, #0]
 800c8ae:	68a2      	ldr	r2, [r4, #8]
 800c8b0:	6923      	ldr	r3, [r4, #16]
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	440a      	add	r2, r1
 800c8b6:	440b      	add	r3, r1
 800c8b8:	60a2      	str	r2, [r4, #8]
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	7561      	strb	r1, [r4, #21]
 800c8be:	7da0      	ldrb	r0, [r4, #22]
 800c8c0:	f080 0001 	eor.w	r0, r0, #1
 800c8c4:	bd38      	pop	{r3, r4, r5, pc}
 800c8c6:	bf00      	nop

0800c8c8 <ucdr_deserialize_uint8_t>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	f000 ff48 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800c8d4:	b150      	cbz	r0, 800c8ec <ucdr_deserialize_uint8_t+0x24>
 800c8d6:	68a3      	ldr	r3, [r4, #8]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	702b      	strb	r3, [r5, #0]
 800c8dc:	68a2      	ldr	r2, [r4, #8]
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	440a      	add	r2, r1
 800c8e4:	440b      	add	r3, r1
 800c8e6:	60a2      	str	r2, [r4, #8]
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	7561      	strb	r1, [r4, #21]
 800c8ec:	7da0      	ldrb	r0, [r4, #22]
 800c8ee:	f080 0001 	eor.w	r0, r0, #1
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}

0800c8f4 <ucdr_serialize_uint16_t>:
 800c8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	2102      	movs	r1, #2
 800c8fe:	4604      	mov	r4, r0
 800c900:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c904:	f000 ff82 	bl	800d80c <ucdr_buffer_alignment>
 800c908:	4601      	mov	r1, r0
 800c90a:	4620      	mov	r0, r4
 800c90c:	7d67      	ldrb	r7, [r4, #21]
 800c90e:	f000 ffc1 	bl	800d894 <ucdr_advance_buffer>
 800c912:	2102      	movs	r1, #2
 800c914:	4620      	mov	r0, r4
 800c916:	f000 ff19 	bl	800d74c <ucdr_check_buffer_available_for>
 800c91a:	bb78      	cbnz	r0, 800c97c <ucdr_serialize_uint16_t+0x88>
 800c91c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c920:	42ab      	cmp	r3, r5
 800c922:	d926      	bls.n	800c972 <ucdr_serialize_uint16_t+0x7e>
 800c924:	1b5e      	subs	r6, r3, r5
 800c926:	60a3      	str	r3, [r4, #8]
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	f1c6 0802 	rsb	r8, r6, #2
 800c92e:	4433      	add	r3, r6
 800c930:	6123      	str	r3, [r4, #16]
 800c932:	4641      	mov	r1, r8
 800c934:	4620      	mov	r0, r4
 800c936:	f000 ff15 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d03b      	beq.n	800c9b6 <ucdr_serialize_uint16_t+0xc2>
 800c93e:	7d23      	ldrb	r3, [r4, #20]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d04a      	beq.n	800c9da <ucdr_serialize_uint16_t+0xe6>
 800c944:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c948:	702b      	strb	r3, [r5, #0]
 800c94a:	2e00      	cmp	r6, #0
 800c94c:	d040      	beq.n	800c9d0 <ucdr_serialize_uint16_t+0xdc>
 800c94e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c952:	706b      	strb	r3, [r5, #1]
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	68a2      	ldr	r2, [r4, #8]
 800c958:	7da0      	ldrb	r0, [r4, #22]
 800c95a:	3302      	adds	r3, #2
 800c95c:	1b9e      	subs	r6, r3, r6
 800c95e:	4442      	add	r2, r8
 800c960:	2302      	movs	r3, #2
 800c962:	f080 0001 	eor.w	r0, r0, #1
 800c966:	60a2      	str	r2, [r4, #8]
 800c968:	6126      	str	r6, [r4, #16]
 800c96a:	7563      	strb	r3, [r4, #21]
 800c96c:	b002      	add	sp, #8
 800c96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c972:	2102      	movs	r1, #2
 800c974:	4620      	mov	r0, r4
 800c976:	f000 fef5 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800c97a:	b190      	cbz	r0, 800c9a2 <ucdr_serialize_uint16_t+0xae>
 800c97c:	7d23      	ldrb	r3, [r4, #20]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	68a3      	ldr	r3, [r4, #8]
 800c982:	d014      	beq.n	800c9ae <ucdr_serialize_uint16_t+0xba>
 800c984:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c990:	705a      	strb	r2, [r3, #1]
 800c992:	68a2      	ldr	r2, [r4, #8]
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	3202      	adds	r2, #2
 800c998:	3302      	adds	r3, #2
 800c99a:	2102      	movs	r1, #2
 800c99c:	60a2      	str	r2, [r4, #8]
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	7561      	strb	r1, [r4, #21]
 800c9a2:	7da0      	ldrb	r0, [r4, #22]
 800c9a4:	f080 0001 	eor.w	r0, r0, #1
 800c9a8:	b002      	add	sp, #8
 800c9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c9b2:	801a      	strh	r2, [r3, #0]
 800c9b4:	e7ed      	b.n	800c992 <ucdr_serialize_uint16_t+0x9e>
 800c9b6:	68a2      	ldr	r2, [r4, #8]
 800c9b8:	6923      	ldr	r3, [r4, #16]
 800c9ba:	7da0      	ldrb	r0, [r4, #22]
 800c9bc:	7567      	strb	r7, [r4, #21]
 800c9be:	1b92      	subs	r2, r2, r6
 800c9c0:	1b9b      	subs	r3, r3, r6
 800c9c2:	f080 0001 	eor.w	r0, r0, #1
 800c9c6:	60a2      	str	r2, [r4, #8]
 800c9c8:	6123      	str	r3, [r4, #16]
 800c9ca:	b002      	add	sp, #8
 800c9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d0:	68a3      	ldr	r3, [r4, #8]
 800c9d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c9d6:	701a      	strb	r2, [r3, #0]
 800c9d8:	e7bc      	b.n	800c954 <ucdr_serialize_uint16_t+0x60>
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f10d 0506 	add.w	r5, sp, #6
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	f00a faa1 	bl	8016f2a <memcpy>
 800c9e8:	68a0      	ldr	r0, [r4, #8]
 800c9ea:	4642      	mov	r2, r8
 800c9ec:	19a9      	adds	r1, r5, r6
 800c9ee:	f00a fa9c 	bl	8016f2a <memcpy>
 800c9f2:	e7af      	b.n	800c954 <ucdr_serialize_uint16_t+0x60>

0800c9f4 <ucdr_serialize_endian_uint16_t>:
 800c9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9f8:	b083      	sub	sp, #12
 800c9fa:	460d      	mov	r5, r1
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	4604      	mov	r4, r0
 800ca00:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ca04:	f000 ff02 	bl	800d80c <ucdr_buffer_alignment>
 800ca08:	4601      	mov	r1, r0
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ca10:	f000 ff40 	bl	800d894 <ucdr_advance_buffer>
 800ca14:	2102      	movs	r1, #2
 800ca16:	4620      	mov	r0, r4
 800ca18:	f000 fe98 	bl	800d74c <ucdr_check_buffer_available_for>
 800ca1c:	bb70      	cbnz	r0, 800ca7c <ucdr_serialize_endian_uint16_t+0x88>
 800ca1e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ca22:	42be      	cmp	r6, r7
 800ca24:	d925      	bls.n	800ca72 <ucdr_serialize_endian_uint16_t+0x7e>
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	60a6      	str	r6, [r4, #8]
 800ca2a:	1bf6      	subs	r6, r6, r7
 800ca2c:	4433      	add	r3, r6
 800ca2e:	f1c6 0902 	rsb	r9, r6, #2
 800ca32:	6123      	str	r3, [r4, #16]
 800ca34:	4649      	mov	r1, r9
 800ca36:	4620      	mov	r0, r4
 800ca38:	f000 fe94 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d039      	beq.n	800cab4 <ucdr_serialize_endian_uint16_t+0xc0>
 800ca40:	2d01      	cmp	r5, #1
 800ca42:	d04a      	beq.n	800cada <ucdr_serialize_endian_uint16_t+0xe6>
 800ca44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca48:	703b      	strb	r3, [r7, #0]
 800ca4a:	2e00      	cmp	r6, #0
 800ca4c:	d040      	beq.n	800cad0 <ucdr_serialize_endian_uint16_t+0xdc>
 800ca4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca52:	707b      	strb	r3, [r7, #1]
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	68a2      	ldr	r2, [r4, #8]
 800ca58:	7da0      	ldrb	r0, [r4, #22]
 800ca5a:	3302      	adds	r3, #2
 800ca5c:	444a      	add	r2, r9
 800ca5e:	1b9b      	subs	r3, r3, r6
 800ca60:	2102      	movs	r1, #2
 800ca62:	f080 0001 	eor.w	r0, r0, #1
 800ca66:	60a2      	str	r2, [r4, #8]
 800ca68:	6123      	str	r3, [r4, #16]
 800ca6a:	7561      	strb	r1, [r4, #21]
 800ca6c:	b003      	add	sp, #12
 800ca6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca72:	2102      	movs	r1, #2
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 fe75 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800ca7a:	b188      	cbz	r0, 800caa0 <ucdr_serialize_endian_uint16_t+0xac>
 800ca7c:	2d01      	cmp	r5, #1
 800ca7e:	68a3      	ldr	r3, [r4, #8]
 800ca80:	d014      	beq.n	800caac <ucdr_serialize_endian_uint16_t+0xb8>
 800ca82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca86:	701a      	strb	r2, [r3, #0]
 800ca88:	68a3      	ldr	r3, [r4, #8]
 800ca8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca8e:	705a      	strb	r2, [r3, #1]
 800ca90:	68a2      	ldr	r2, [r4, #8]
 800ca92:	6923      	ldr	r3, [r4, #16]
 800ca94:	3202      	adds	r2, #2
 800ca96:	3302      	adds	r3, #2
 800ca98:	2102      	movs	r1, #2
 800ca9a:	60a2      	str	r2, [r4, #8]
 800ca9c:	6123      	str	r3, [r4, #16]
 800ca9e:	7561      	strb	r1, [r4, #21]
 800caa0:	7da0      	ldrb	r0, [r4, #22]
 800caa2:	f080 0001 	eor.w	r0, r0, #1
 800caa6:	b003      	add	sp, #12
 800caa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cab0:	801a      	strh	r2, [r3, #0]
 800cab2:	e7ed      	b.n	800ca90 <ucdr_serialize_endian_uint16_t+0x9c>
 800cab4:	68a2      	ldr	r2, [r4, #8]
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	7da0      	ldrb	r0, [r4, #22]
 800caba:	f884 8015 	strb.w	r8, [r4, #21]
 800cabe:	1b92      	subs	r2, r2, r6
 800cac0:	1b9b      	subs	r3, r3, r6
 800cac2:	f080 0001 	eor.w	r0, r0, #1
 800cac6:	60a2      	str	r2, [r4, #8]
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	b003      	add	sp, #12
 800cacc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cad0:	68a3      	ldr	r3, [r4, #8]
 800cad2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cad6:	701a      	strb	r2, [r3, #0]
 800cad8:	e7bc      	b.n	800ca54 <ucdr_serialize_endian_uint16_t+0x60>
 800cada:	f10d 0506 	add.w	r5, sp, #6
 800cade:	4629      	mov	r1, r5
 800cae0:	4632      	mov	r2, r6
 800cae2:	4638      	mov	r0, r7
 800cae4:	f00a fa21 	bl	8016f2a <memcpy>
 800cae8:	68a0      	ldr	r0, [r4, #8]
 800caea:	464a      	mov	r2, r9
 800caec:	19a9      	adds	r1, r5, r6
 800caee:	f00a fa1c 	bl	8016f2a <memcpy>
 800caf2:	e7af      	b.n	800ca54 <ucdr_serialize_endian_uint16_t+0x60>

0800caf4 <ucdr_deserialize_uint16_t>:
 800caf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf8:	460d      	mov	r5, r1
 800cafa:	2102      	movs	r1, #2
 800cafc:	4604      	mov	r4, r0
 800cafe:	f000 fe85 	bl	800d80c <ucdr_buffer_alignment>
 800cb02:	4601      	mov	r1, r0
 800cb04:	4620      	mov	r0, r4
 800cb06:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb0a:	f000 fec3 	bl	800d894 <ucdr_advance_buffer>
 800cb0e:	2102      	movs	r1, #2
 800cb10:	4620      	mov	r0, r4
 800cb12:	f000 fe1b 	bl	800d74c <ucdr_check_buffer_available_for>
 800cb16:	bb60      	cbnz	r0, 800cb72 <ucdr_deserialize_uint16_t+0x7e>
 800cb18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb1c:	42be      	cmp	r6, r7
 800cb1e:	d923      	bls.n	800cb68 <ucdr_deserialize_uint16_t+0x74>
 800cb20:	6923      	ldr	r3, [r4, #16]
 800cb22:	60a6      	str	r6, [r4, #8]
 800cb24:	1bf6      	subs	r6, r6, r7
 800cb26:	4433      	add	r3, r6
 800cb28:	f1c6 0902 	rsb	r9, r6, #2
 800cb2c:	6123      	str	r3, [r4, #16]
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 fe17 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d034      	beq.n	800cba4 <ucdr_deserialize_uint16_t+0xb0>
 800cb3a:	7d23      	ldrb	r3, [r4, #20]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d042      	beq.n	800cbc6 <ucdr_deserialize_uint16_t+0xd2>
 800cb40:	787b      	ldrb	r3, [r7, #1]
 800cb42:	702b      	strb	r3, [r5, #0]
 800cb44:	2e00      	cmp	r6, #0
 800cb46:	d03a      	beq.n	800cbbe <ucdr_deserialize_uint16_t+0xca>
 800cb48:	783b      	ldrb	r3, [r7, #0]
 800cb4a:	706b      	strb	r3, [r5, #1]
 800cb4c:	6923      	ldr	r3, [r4, #16]
 800cb4e:	68a2      	ldr	r2, [r4, #8]
 800cb50:	7da0      	ldrb	r0, [r4, #22]
 800cb52:	2102      	movs	r1, #2
 800cb54:	3302      	adds	r3, #2
 800cb56:	444a      	add	r2, r9
 800cb58:	1b9b      	subs	r3, r3, r6
 800cb5a:	7561      	strb	r1, [r4, #21]
 800cb5c:	60a2      	str	r2, [r4, #8]
 800cb5e:	6123      	str	r3, [r4, #16]
 800cb60:	f080 0001 	eor.w	r0, r0, #1
 800cb64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb68:	2102      	movs	r1, #2
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f000 fdfa 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cb70:	b180      	cbz	r0, 800cb94 <ucdr_deserialize_uint16_t+0xa0>
 800cb72:	7d23      	ldrb	r3, [r4, #20]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	68a3      	ldr	r3, [r4, #8]
 800cb78:	d011      	beq.n	800cb9e <ucdr_deserialize_uint16_t+0xaa>
 800cb7a:	785b      	ldrb	r3, [r3, #1]
 800cb7c:	702b      	strb	r3, [r5, #0]
 800cb7e:	68a3      	ldr	r3, [r4, #8]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	706b      	strb	r3, [r5, #1]
 800cb84:	68a2      	ldr	r2, [r4, #8]
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	3202      	adds	r2, #2
 800cb8a:	3302      	adds	r3, #2
 800cb8c:	2102      	movs	r1, #2
 800cb8e:	60a2      	str	r2, [r4, #8]
 800cb90:	6123      	str	r3, [r4, #16]
 800cb92:	7561      	strb	r1, [r4, #21]
 800cb94:	7da0      	ldrb	r0, [r4, #22]
 800cb96:	f080 0001 	eor.w	r0, r0, #1
 800cb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	802b      	strh	r3, [r5, #0]
 800cba2:	e7ef      	b.n	800cb84 <ucdr_deserialize_uint16_t+0x90>
 800cba4:	68a2      	ldr	r2, [r4, #8]
 800cba6:	6923      	ldr	r3, [r4, #16]
 800cba8:	7da0      	ldrb	r0, [r4, #22]
 800cbaa:	f884 8015 	strb.w	r8, [r4, #21]
 800cbae:	1b92      	subs	r2, r2, r6
 800cbb0:	1b9b      	subs	r3, r3, r6
 800cbb2:	60a2      	str	r2, [r4, #8]
 800cbb4:	6123      	str	r3, [r4, #16]
 800cbb6:	f080 0001 	eor.w	r0, r0, #1
 800cbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbbe:	68a3      	ldr	r3, [r4, #8]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	706b      	strb	r3, [r5, #1]
 800cbc4:	e7c2      	b.n	800cb4c <ucdr_deserialize_uint16_t+0x58>
 800cbc6:	4639      	mov	r1, r7
 800cbc8:	4632      	mov	r2, r6
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f00a f9ad 	bl	8016f2a <memcpy>
 800cbd0:	68a1      	ldr	r1, [r4, #8]
 800cbd2:	464a      	mov	r2, r9
 800cbd4:	19a8      	adds	r0, r5, r6
 800cbd6:	f00a f9a8 	bl	8016f2a <memcpy>
 800cbda:	e7b7      	b.n	800cb4c <ucdr_deserialize_uint16_t+0x58>

0800cbdc <ucdr_deserialize_endian_uint16_t>:
 800cbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe0:	460e      	mov	r6, r1
 800cbe2:	2102      	movs	r1, #2
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	4615      	mov	r5, r2
 800cbe8:	f000 fe10 	bl	800d80c <ucdr_buffer_alignment>
 800cbec:	4601      	mov	r1, r0
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cbf4:	f000 fe4e 	bl	800d894 <ucdr_advance_buffer>
 800cbf8:	2102      	movs	r1, #2
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 fda6 	bl	800d74c <ucdr_check_buffer_available_for>
 800cc00:	bb70      	cbnz	r0, 800cc60 <ucdr_deserialize_endian_uint16_t+0x84>
 800cc02:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800cc06:	4547      	cmp	r7, r8
 800cc08:	d925      	bls.n	800cc56 <ucdr_deserialize_endian_uint16_t+0x7a>
 800cc0a:	6923      	ldr	r3, [r4, #16]
 800cc0c:	60a7      	str	r7, [r4, #8]
 800cc0e:	eba7 0708 	sub.w	r7, r7, r8
 800cc12:	443b      	add	r3, r7
 800cc14:	f1c7 0a02 	rsb	sl, r7, #2
 800cc18:	6123      	str	r3, [r4, #16]
 800cc1a:	4651      	mov	r1, sl
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fda1 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d034      	beq.n	800cc90 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cc26:	2e01      	cmp	r6, #1
 800cc28:	d043      	beq.n	800ccb2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800cc2a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cc2e:	702b      	strb	r3, [r5, #0]
 800cc30:	2f00      	cmp	r7, #0
 800cc32:	d03a      	beq.n	800ccaa <ucdr_deserialize_endian_uint16_t+0xce>
 800cc34:	f898 3000 	ldrb.w	r3, [r8]
 800cc38:	706b      	strb	r3, [r5, #1]
 800cc3a:	6923      	ldr	r3, [r4, #16]
 800cc3c:	68a2      	ldr	r2, [r4, #8]
 800cc3e:	7da0      	ldrb	r0, [r4, #22]
 800cc40:	2102      	movs	r1, #2
 800cc42:	3302      	adds	r3, #2
 800cc44:	4452      	add	r2, sl
 800cc46:	1bdb      	subs	r3, r3, r7
 800cc48:	7561      	strb	r1, [r4, #21]
 800cc4a:	60a2      	str	r2, [r4, #8]
 800cc4c:	6123      	str	r3, [r4, #16]
 800cc4e:	f080 0001 	eor.w	r0, r0, #1
 800cc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc56:	2102      	movs	r1, #2
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f000 fd83 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cc5e:	b178      	cbz	r0, 800cc80 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cc60:	2e01      	cmp	r6, #1
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	d011      	beq.n	800cc8a <ucdr_deserialize_endian_uint16_t+0xae>
 800cc66:	785b      	ldrb	r3, [r3, #1]
 800cc68:	702b      	strb	r3, [r5, #0]
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	706b      	strb	r3, [r5, #1]
 800cc70:	68a2      	ldr	r2, [r4, #8]
 800cc72:	6923      	ldr	r3, [r4, #16]
 800cc74:	3202      	adds	r2, #2
 800cc76:	3302      	adds	r3, #2
 800cc78:	2102      	movs	r1, #2
 800cc7a:	60a2      	str	r2, [r4, #8]
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	7561      	strb	r1, [r4, #21]
 800cc80:	7da0      	ldrb	r0, [r4, #22]
 800cc82:	f080 0001 	eor.w	r0, r0, #1
 800cc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	802b      	strh	r3, [r5, #0]
 800cc8e:	e7ef      	b.n	800cc70 <ucdr_deserialize_endian_uint16_t+0x94>
 800cc90:	68a2      	ldr	r2, [r4, #8]
 800cc92:	6923      	ldr	r3, [r4, #16]
 800cc94:	7da0      	ldrb	r0, [r4, #22]
 800cc96:	f884 9015 	strb.w	r9, [r4, #21]
 800cc9a:	1bd2      	subs	r2, r2, r7
 800cc9c:	1bdb      	subs	r3, r3, r7
 800cc9e:	60a2      	str	r2, [r4, #8]
 800cca0:	6123      	str	r3, [r4, #16]
 800cca2:	f080 0001 	eor.w	r0, r0, #1
 800cca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccaa:	68a3      	ldr	r3, [r4, #8]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	706b      	strb	r3, [r5, #1]
 800ccb0:	e7c3      	b.n	800cc3a <ucdr_deserialize_endian_uint16_t+0x5e>
 800ccb2:	4641      	mov	r1, r8
 800ccb4:	463a      	mov	r2, r7
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	f00a f937 	bl	8016f2a <memcpy>
 800ccbc:	68a1      	ldr	r1, [r4, #8]
 800ccbe:	4652      	mov	r2, sl
 800ccc0:	19e8      	adds	r0, r5, r7
 800ccc2:	f00a f932 	bl	8016f2a <memcpy>
 800ccc6:	e7b8      	b.n	800cc3a <ucdr_deserialize_endian_uint16_t+0x5e>

0800ccc8 <ucdr_serialize_uint32_t>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	b082      	sub	sp, #8
 800ccce:	4604      	mov	r4, r0
 800ccd0:	9101      	str	r1, [sp, #4]
 800ccd2:	2104      	movs	r1, #4
 800ccd4:	f000 fd9a 	bl	800d80c <ucdr_buffer_alignment>
 800ccd8:	4601      	mov	r1, r0
 800ccda:	4620      	mov	r0, r4
 800ccdc:	7d67      	ldrb	r7, [r4, #21]
 800ccde:	f000 fdd9 	bl	800d894 <ucdr_advance_buffer>
 800cce2:	2104      	movs	r1, #4
 800cce4:	4620      	mov	r0, r4
 800cce6:	f000 fd31 	bl	800d74c <ucdr_check_buffer_available_for>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d139      	bne.n	800cd62 <ucdr_serialize_uint32_t+0x9a>
 800ccee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ccf2:	42ab      	cmp	r3, r5
 800ccf4:	d930      	bls.n	800cd58 <ucdr_serialize_uint32_t+0x90>
 800ccf6:	1b5e      	subs	r6, r3, r5
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	f1c6 0804 	rsb	r8, r6, #4
 800cd00:	4433      	add	r3, r6
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	4641      	mov	r1, r8
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 fd2c 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d04c      	beq.n	800cdaa <ucdr_serialize_uint32_t+0xe2>
 800cd10:	7d23      	ldrb	r3, [r4, #20]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d063      	beq.n	800cdde <ucdr_serialize_uint32_t+0x116>
 800cd16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd1a:	702b      	strb	r3, [r5, #0]
 800cd1c:	2e00      	cmp	r6, #0
 800cd1e:	d051      	beq.n	800cdc4 <ucdr_serialize_uint32_t+0xfc>
 800cd20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd24:	706b      	strb	r3, [r5, #1]
 800cd26:	2e01      	cmp	r6, #1
 800cd28:	d050      	beq.n	800cdcc <ucdr_serialize_uint32_t+0x104>
 800cd2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cd2e:	70ab      	strb	r3, [r5, #2]
 800cd30:	2e02      	cmp	r6, #2
 800cd32:	d04f      	beq.n	800cdd4 <ucdr_serialize_uint32_t+0x10c>
 800cd34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cd38:	70eb      	strb	r3, [r5, #3]
 800cd3a:	6923      	ldr	r3, [r4, #16]
 800cd3c:	68a2      	ldr	r2, [r4, #8]
 800cd3e:	7da0      	ldrb	r0, [r4, #22]
 800cd40:	3304      	adds	r3, #4
 800cd42:	1b9e      	subs	r6, r3, r6
 800cd44:	4442      	add	r2, r8
 800cd46:	2304      	movs	r3, #4
 800cd48:	f080 0001 	eor.w	r0, r0, #1
 800cd4c:	60a2      	str	r2, [r4, #8]
 800cd4e:	6126      	str	r6, [r4, #16]
 800cd50:	7563      	strb	r3, [r4, #21]
 800cd52:	b002      	add	sp, #8
 800cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd58:	2104      	movs	r1, #4
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 fd02 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cd60:	b1d0      	cbz	r0, 800cd98 <ucdr_serialize_uint32_t+0xd0>
 800cd62:	7d23      	ldrb	r3, [r4, #20]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	68a3      	ldr	r3, [r4, #8]
 800cd68:	d01c      	beq.n	800cda4 <ucdr_serialize_uint32_t+0xdc>
 800cd6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	68a3      	ldr	r3, [r4, #8]
 800cd72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd76:	705a      	strb	r2, [r3, #1]
 800cd78:	68a3      	ldr	r3, [r4, #8]
 800cd7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd7e:	709a      	strb	r2, [r3, #2]
 800cd80:	68a3      	ldr	r3, [r4, #8]
 800cd82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd86:	70da      	strb	r2, [r3, #3]
 800cd88:	68a2      	ldr	r2, [r4, #8]
 800cd8a:	6923      	ldr	r3, [r4, #16]
 800cd8c:	3204      	adds	r2, #4
 800cd8e:	3304      	adds	r3, #4
 800cd90:	2104      	movs	r1, #4
 800cd92:	60a2      	str	r2, [r4, #8]
 800cd94:	6123      	str	r3, [r4, #16]
 800cd96:	7561      	strb	r1, [r4, #21]
 800cd98:	7da0      	ldrb	r0, [r4, #22]
 800cd9a:	f080 0001 	eor.w	r0, r0, #1
 800cd9e:	b002      	add	sp, #8
 800cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda4:	9a01      	ldr	r2, [sp, #4]
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	e7ee      	b.n	800cd88 <ucdr_serialize_uint32_t+0xc0>
 800cdaa:	68a2      	ldr	r2, [r4, #8]
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	7da0      	ldrb	r0, [r4, #22]
 800cdb0:	7567      	strb	r7, [r4, #21]
 800cdb2:	1b92      	subs	r2, r2, r6
 800cdb4:	1b9b      	subs	r3, r3, r6
 800cdb6:	f080 0001 	eor.w	r0, r0, #1
 800cdba:	60a2      	str	r2, [r4, #8]
 800cdbc:	6123      	str	r3, [r4, #16]
 800cdbe:	b002      	add	sp, #8
 800cdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc4:	68a3      	ldr	r3, [r4, #8]
 800cdc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	68a3      	ldr	r3, [r4, #8]
 800cdce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cdd2:	701a      	strb	r2, [r3, #0]
 800cdd4:	68a3      	ldr	r3, [r4, #8]
 800cdd6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cdda:	701a      	strb	r2, [r3, #0]
 800cddc:	e7ad      	b.n	800cd3a <ucdr_serialize_uint32_t+0x72>
 800cdde:	4628      	mov	r0, r5
 800cde0:	ad01      	add	r5, sp, #4
 800cde2:	4629      	mov	r1, r5
 800cde4:	4632      	mov	r2, r6
 800cde6:	f00a f8a0 	bl	8016f2a <memcpy>
 800cdea:	68a0      	ldr	r0, [r4, #8]
 800cdec:	4642      	mov	r2, r8
 800cdee:	19a9      	adds	r1, r5, r6
 800cdf0:	f00a f89b 	bl	8016f2a <memcpy>
 800cdf4:	e7a1      	b.n	800cd3a <ucdr_serialize_uint32_t+0x72>
 800cdf6:	bf00      	nop

0800cdf8 <ucdr_serialize_endian_uint32_t>:
 800cdf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	460d      	mov	r5, r1
 800ce00:	2104      	movs	r1, #4
 800ce02:	4604      	mov	r4, r0
 800ce04:	9201      	str	r2, [sp, #4]
 800ce06:	f000 fd01 	bl	800d80c <ucdr_buffer_alignment>
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ce12:	f000 fd3f 	bl	800d894 <ucdr_advance_buffer>
 800ce16:	2104      	movs	r1, #4
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 fc97 	bl	800d74c <ucdr_check_buffer_available_for>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d138      	bne.n	800ce94 <ucdr_serialize_endian_uint32_t+0x9c>
 800ce22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ce26:	42b7      	cmp	r7, r6
 800ce28:	d92f      	bls.n	800ce8a <ucdr_serialize_endian_uint32_t+0x92>
 800ce2a:	6923      	ldr	r3, [r4, #16]
 800ce2c:	60a7      	str	r7, [r4, #8]
 800ce2e:	1bbf      	subs	r7, r7, r6
 800ce30:	443b      	add	r3, r7
 800ce32:	f1c7 0904 	rsb	r9, r7, #4
 800ce36:	6123      	str	r3, [r4, #16]
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 fc92 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d04a      	beq.n	800ceda <ucdr_serialize_endian_uint32_t+0xe2>
 800ce44:	2d01      	cmp	r5, #1
 800ce46:	d063      	beq.n	800cf10 <ucdr_serialize_endian_uint32_t+0x118>
 800ce48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce4c:	7033      	strb	r3, [r6, #0]
 800ce4e:	2f00      	cmp	r7, #0
 800ce50:	d051      	beq.n	800cef6 <ucdr_serialize_endian_uint32_t+0xfe>
 800ce52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce56:	7073      	strb	r3, [r6, #1]
 800ce58:	2f01      	cmp	r7, #1
 800ce5a:	d050      	beq.n	800cefe <ucdr_serialize_endian_uint32_t+0x106>
 800ce5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce60:	70b3      	strb	r3, [r6, #2]
 800ce62:	2f02      	cmp	r7, #2
 800ce64:	d04f      	beq.n	800cf06 <ucdr_serialize_endian_uint32_t+0x10e>
 800ce66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce6a:	70f3      	strb	r3, [r6, #3]
 800ce6c:	6923      	ldr	r3, [r4, #16]
 800ce6e:	68a2      	ldr	r2, [r4, #8]
 800ce70:	7da0      	ldrb	r0, [r4, #22]
 800ce72:	3304      	adds	r3, #4
 800ce74:	444a      	add	r2, r9
 800ce76:	1bdb      	subs	r3, r3, r7
 800ce78:	2104      	movs	r1, #4
 800ce7a:	f080 0001 	eor.w	r0, r0, #1
 800ce7e:	60a2      	str	r2, [r4, #8]
 800ce80:	6123      	str	r3, [r4, #16]
 800ce82:	7561      	strb	r1, [r4, #21]
 800ce84:	b003      	add	sp, #12
 800ce86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce8a:	2104      	movs	r1, #4
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 fc69 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800ce92:	b1c8      	cbz	r0, 800cec8 <ucdr_serialize_endian_uint32_t+0xd0>
 800ce94:	2d01      	cmp	r5, #1
 800ce96:	68a3      	ldr	r3, [r4, #8]
 800ce98:	d01c      	beq.n	800ced4 <ucdr_serialize_endian_uint32_t+0xdc>
 800ce9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ce9e:	701a      	strb	r2, [r3, #0]
 800cea0:	68a3      	ldr	r3, [r4, #8]
 800cea2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cea6:	705a      	strb	r2, [r3, #1]
 800cea8:	68a3      	ldr	r3, [r4, #8]
 800ceaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ceae:	709a      	strb	r2, [r3, #2]
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ceb6:	70da      	strb	r2, [r3, #3]
 800ceb8:	68a2      	ldr	r2, [r4, #8]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	3204      	adds	r2, #4
 800cebe:	3304      	adds	r3, #4
 800cec0:	2104      	movs	r1, #4
 800cec2:	60a2      	str	r2, [r4, #8]
 800cec4:	6123      	str	r3, [r4, #16]
 800cec6:	7561      	strb	r1, [r4, #21]
 800cec8:	7da0      	ldrb	r0, [r4, #22]
 800ceca:	f080 0001 	eor.w	r0, r0, #1
 800cece:	b003      	add	sp, #12
 800ced0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ced4:	9a01      	ldr	r2, [sp, #4]
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	e7ee      	b.n	800ceb8 <ucdr_serialize_endian_uint32_t+0xc0>
 800ceda:	68a2      	ldr	r2, [r4, #8]
 800cedc:	6923      	ldr	r3, [r4, #16]
 800cede:	7da0      	ldrb	r0, [r4, #22]
 800cee0:	f884 8015 	strb.w	r8, [r4, #21]
 800cee4:	1bd2      	subs	r2, r2, r7
 800cee6:	1bdb      	subs	r3, r3, r7
 800cee8:	f080 0001 	eor.w	r0, r0, #1
 800ceec:	60a2      	str	r2, [r4, #8]
 800ceee:	6123      	str	r3, [r4, #16]
 800cef0:	b003      	add	sp, #12
 800cef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cef6:	68a3      	ldr	r3, [r4, #8]
 800cef8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf04:	701a      	strb	r2, [r3, #0]
 800cf06:	68a3      	ldr	r3, [r4, #8]
 800cf08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf0c:	701a      	strb	r2, [r3, #0]
 800cf0e:	e7ad      	b.n	800ce6c <ucdr_serialize_endian_uint32_t+0x74>
 800cf10:	ad01      	add	r5, sp, #4
 800cf12:	4629      	mov	r1, r5
 800cf14:	463a      	mov	r2, r7
 800cf16:	4630      	mov	r0, r6
 800cf18:	f00a f807 	bl	8016f2a <memcpy>
 800cf1c:	68a0      	ldr	r0, [r4, #8]
 800cf1e:	464a      	mov	r2, r9
 800cf20:	19e9      	adds	r1, r5, r7
 800cf22:	f00a f802 	bl	8016f2a <memcpy>
 800cf26:	e7a1      	b.n	800ce6c <ucdr_serialize_endian_uint32_t+0x74>

0800cf28 <ucdr_deserialize_uint32_t>:
 800cf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	2104      	movs	r1, #4
 800cf30:	4604      	mov	r4, r0
 800cf32:	f000 fc6b 	bl	800d80c <ucdr_buffer_alignment>
 800cf36:	4601      	mov	r1, r0
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cf3e:	f000 fca9 	bl	800d894 <ucdr_advance_buffer>
 800cf42:	2104      	movs	r1, #4
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 fc01 	bl	800d74c <ucdr_check_buffer_available_for>
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d138      	bne.n	800cfc0 <ucdr_deserialize_uint32_t+0x98>
 800cf4e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf52:	42b7      	cmp	r7, r6
 800cf54:	d92f      	bls.n	800cfb6 <ucdr_deserialize_uint32_t+0x8e>
 800cf56:	6923      	ldr	r3, [r4, #16]
 800cf58:	60a7      	str	r7, [r4, #8]
 800cf5a:	1bbf      	subs	r7, r7, r6
 800cf5c:	443b      	add	r3, r7
 800cf5e:	f1c7 0904 	rsb	r9, r7, #4
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	4649      	mov	r1, r9
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fbfc 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d046      	beq.n	800cffe <ucdr_deserialize_uint32_t+0xd6>
 800cf70:	7d23      	ldrb	r3, [r4, #20]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d05c      	beq.n	800d030 <ucdr_deserialize_uint32_t+0x108>
 800cf76:	78f3      	ldrb	r3, [r6, #3]
 800cf78:	702b      	strb	r3, [r5, #0]
 800cf7a:	2f00      	cmp	r7, #0
 800cf7c:	d04c      	beq.n	800d018 <ucdr_deserialize_uint32_t+0xf0>
 800cf7e:	78b3      	ldrb	r3, [r6, #2]
 800cf80:	706b      	strb	r3, [r5, #1]
 800cf82:	2f01      	cmp	r7, #1
 800cf84:	f105 0302 	add.w	r3, r5, #2
 800cf88:	d04a      	beq.n	800d020 <ucdr_deserialize_uint32_t+0xf8>
 800cf8a:	7873      	ldrb	r3, [r6, #1]
 800cf8c:	70ab      	strb	r3, [r5, #2]
 800cf8e:	2f02      	cmp	r7, #2
 800cf90:	f105 0303 	add.w	r3, r5, #3
 800cf94:	d048      	beq.n	800d028 <ucdr_deserialize_uint32_t+0x100>
 800cf96:	7833      	ldrb	r3, [r6, #0]
 800cf98:	70eb      	strb	r3, [r5, #3]
 800cf9a:	6923      	ldr	r3, [r4, #16]
 800cf9c:	68a2      	ldr	r2, [r4, #8]
 800cf9e:	7da0      	ldrb	r0, [r4, #22]
 800cfa0:	2104      	movs	r1, #4
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	444a      	add	r2, r9
 800cfa6:	1bdb      	subs	r3, r3, r7
 800cfa8:	7561      	strb	r1, [r4, #21]
 800cfaa:	60a2      	str	r2, [r4, #8]
 800cfac:	6123      	str	r3, [r4, #16]
 800cfae:	f080 0001 	eor.w	r0, r0, #1
 800cfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb6:	2104      	movs	r1, #4
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fbd3 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800cfbe:	b1b0      	cbz	r0, 800cfee <ucdr_deserialize_uint32_t+0xc6>
 800cfc0:	7d23      	ldrb	r3, [r4, #20]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	68a3      	ldr	r3, [r4, #8]
 800cfc6:	d017      	beq.n	800cff8 <ucdr_deserialize_uint32_t+0xd0>
 800cfc8:	78db      	ldrb	r3, [r3, #3]
 800cfca:	702b      	strb	r3, [r5, #0]
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	789b      	ldrb	r3, [r3, #2]
 800cfd0:	706b      	strb	r3, [r5, #1]
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	785b      	ldrb	r3, [r3, #1]
 800cfd6:	70ab      	strb	r3, [r5, #2]
 800cfd8:	68a3      	ldr	r3, [r4, #8]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	70eb      	strb	r3, [r5, #3]
 800cfde:	68a2      	ldr	r2, [r4, #8]
 800cfe0:	6923      	ldr	r3, [r4, #16]
 800cfe2:	3204      	adds	r2, #4
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	2104      	movs	r1, #4
 800cfe8:	60a2      	str	r2, [r4, #8]
 800cfea:	6123      	str	r3, [r4, #16]
 800cfec:	7561      	strb	r1, [r4, #21]
 800cfee:	7da0      	ldrb	r0, [r4, #22]
 800cff0:	f080 0001 	eor.w	r0, r0, #1
 800cff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	e7ef      	b.n	800cfde <ucdr_deserialize_uint32_t+0xb6>
 800cffe:	68a2      	ldr	r2, [r4, #8]
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	7da0      	ldrb	r0, [r4, #22]
 800d004:	f884 8015 	strb.w	r8, [r4, #21]
 800d008:	1bd2      	subs	r2, r2, r7
 800d00a:	1bdb      	subs	r3, r3, r7
 800d00c:	60a2      	str	r2, [r4, #8]
 800d00e:	6123      	str	r3, [r4, #16]
 800d010:	f080 0001 	eor.w	r0, r0, #1
 800d014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d018:	68a3      	ldr	r3, [r4, #8]
 800d01a:	789b      	ldrb	r3, [r3, #2]
 800d01c:	706b      	strb	r3, [r5, #1]
 800d01e:	1cab      	adds	r3, r5, #2
 800d020:	68a2      	ldr	r2, [r4, #8]
 800d022:	7852      	ldrb	r2, [r2, #1]
 800d024:	f803 2b01 	strb.w	r2, [r3], #1
 800d028:	68a2      	ldr	r2, [r4, #8]
 800d02a:	7812      	ldrb	r2, [r2, #0]
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	e7b4      	b.n	800cf9a <ucdr_deserialize_uint32_t+0x72>
 800d030:	4631      	mov	r1, r6
 800d032:	463a      	mov	r2, r7
 800d034:	4628      	mov	r0, r5
 800d036:	f009 ff78 	bl	8016f2a <memcpy>
 800d03a:	68a1      	ldr	r1, [r4, #8]
 800d03c:	464a      	mov	r2, r9
 800d03e:	19e8      	adds	r0, r5, r7
 800d040:	f009 ff73 	bl	8016f2a <memcpy>
 800d044:	e7a9      	b.n	800cf9a <ucdr_deserialize_uint32_t+0x72>
 800d046:	bf00      	nop

0800d048 <ucdr_deserialize_endian_uint32_t>:
 800d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	460e      	mov	r6, r1
 800d04e:	2104      	movs	r1, #4
 800d050:	4604      	mov	r4, r0
 800d052:	4615      	mov	r5, r2
 800d054:	f000 fbda 	bl	800d80c <ucdr_buffer_alignment>
 800d058:	4601      	mov	r1, r0
 800d05a:	4620      	mov	r0, r4
 800d05c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d060:	f000 fc18 	bl	800d894 <ucdr_advance_buffer>
 800d064:	2104      	movs	r1, #4
 800d066:	4620      	mov	r0, r4
 800d068:	f000 fb70 	bl	800d74c <ucdr_check_buffer_available_for>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d13c      	bne.n	800d0ea <ucdr_deserialize_endian_uint32_t+0xa2>
 800d070:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d074:	42bb      	cmp	r3, r7
 800d076:	d933      	bls.n	800d0e0 <ucdr_deserialize_endian_uint32_t+0x98>
 800d078:	eba3 0807 	sub.w	r8, r3, r7
 800d07c:	60a3      	str	r3, [r4, #8]
 800d07e:	6923      	ldr	r3, [r4, #16]
 800d080:	f1c8 0a04 	rsb	sl, r8, #4
 800d084:	4443      	add	r3, r8
 800d086:	6123      	str	r3, [r4, #16]
 800d088:	4651      	mov	r1, sl
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 fb6a 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d090:	2800      	cmp	r0, #0
 800d092:	d048      	beq.n	800d126 <ucdr_deserialize_endian_uint32_t+0xde>
 800d094:	2e01      	cmp	r6, #1
 800d096:	d061      	beq.n	800d15c <ucdr_deserialize_endian_uint32_t+0x114>
 800d098:	78fb      	ldrb	r3, [r7, #3]
 800d09a:	702b      	strb	r3, [r5, #0]
 800d09c:	f1b8 0f00 	cmp.w	r8, #0
 800d0a0:	d050      	beq.n	800d144 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d0a2:	78bb      	ldrb	r3, [r7, #2]
 800d0a4:	706b      	strb	r3, [r5, #1]
 800d0a6:	f1b8 0f01 	cmp.w	r8, #1
 800d0aa:	f105 0302 	add.w	r3, r5, #2
 800d0ae:	d04d      	beq.n	800d14c <ucdr_deserialize_endian_uint32_t+0x104>
 800d0b0:	787b      	ldrb	r3, [r7, #1]
 800d0b2:	70ab      	strb	r3, [r5, #2]
 800d0b4:	f1b8 0f02 	cmp.w	r8, #2
 800d0b8:	f105 0303 	add.w	r3, r5, #3
 800d0bc:	d04a      	beq.n	800d154 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d0be:	783b      	ldrb	r3, [r7, #0]
 800d0c0:	70eb      	strb	r3, [r5, #3]
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	68a2      	ldr	r2, [r4, #8]
 800d0c6:	7da0      	ldrb	r0, [r4, #22]
 800d0c8:	2104      	movs	r1, #4
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	4452      	add	r2, sl
 800d0ce:	eba3 0308 	sub.w	r3, r3, r8
 800d0d2:	7561      	strb	r1, [r4, #21]
 800d0d4:	60a2      	str	r2, [r4, #8]
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	f080 0001 	eor.w	r0, r0, #1
 800d0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e0:	2104      	movs	r1, #4
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f000 fb3e 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d0e8:	b1a8      	cbz	r0, 800d116 <ucdr_deserialize_endian_uint32_t+0xce>
 800d0ea:	2e01      	cmp	r6, #1
 800d0ec:	68a3      	ldr	r3, [r4, #8]
 800d0ee:	d017      	beq.n	800d120 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d0f0:	78db      	ldrb	r3, [r3, #3]
 800d0f2:	702b      	strb	r3, [r5, #0]
 800d0f4:	68a3      	ldr	r3, [r4, #8]
 800d0f6:	789b      	ldrb	r3, [r3, #2]
 800d0f8:	706b      	strb	r3, [r5, #1]
 800d0fa:	68a3      	ldr	r3, [r4, #8]
 800d0fc:	785b      	ldrb	r3, [r3, #1]
 800d0fe:	70ab      	strb	r3, [r5, #2]
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	70eb      	strb	r3, [r5, #3]
 800d106:	68a2      	ldr	r2, [r4, #8]
 800d108:	6923      	ldr	r3, [r4, #16]
 800d10a:	3204      	adds	r2, #4
 800d10c:	3304      	adds	r3, #4
 800d10e:	2104      	movs	r1, #4
 800d110:	60a2      	str	r2, [r4, #8]
 800d112:	6123      	str	r3, [r4, #16]
 800d114:	7561      	strb	r1, [r4, #21]
 800d116:	7da0      	ldrb	r0, [r4, #22]
 800d118:	f080 0001 	eor.w	r0, r0, #1
 800d11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	602b      	str	r3, [r5, #0]
 800d124:	e7ef      	b.n	800d106 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d126:	68a2      	ldr	r2, [r4, #8]
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	7da0      	ldrb	r0, [r4, #22]
 800d12c:	f884 9015 	strb.w	r9, [r4, #21]
 800d130:	eba2 0208 	sub.w	r2, r2, r8
 800d134:	eba3 0308 	sub.w	r3, r3, r8
 800d138:	60a2      	str	r2, [r4, #8]
 800d13a:	6123      	str	r3, [r4, #16]
 800d13c:	f080 0001 	eor.w	r0, r0, #1
 800d140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d144:	68a3      	ldr	r3, [r4, #8]
 800d146:	789b      	ldrb	r3, [r3, #2]
 800d148:	706b      	strb	r3, [r5, #1]
 800d14a:	1cab      	adds	r3, r5, #2
 800d14c:	68a2      	ldr	r2, [r4, #8]
 800d14e:	7852      	ldrb	r2, [r2, #1]
 800d150:	f803 2b01 	strb.w	r2, [r3], #1
 800d154:	68a2      	ldr	r2, [r4, #8]
 800d156:	7812      	ldrb	r2, [r2, #0]
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	e7b2      	b.n	800d0c2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d15c:	4639      	mov	r1, r7
 800d15e:	4642      	mov	r2, r8
 800d160:	4628      	mov	r0, r5
 800d162:	f009 fee2 	bl	8016f2a <memcpy>
 800d166:	68a1      	ldr	r1, [r4, #8]
 800d168:	4652      	mov	r2, sl
 800d16a:	eb05 0008 	add.w	r0, r5, r8
 800d16e:	f009 fedc 	bl	8016f2a <memcpy>
 800d172:	e7a6      	b.n	800d0c2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d174 <ucdr_serialize_uint64_t>:
 800d174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d178:	2108      	movs	r1, #8
 800d17a:	b082      	sub	sp, #8
 800d17c:	4604      	mov	r4, r0
 800d17e:	e9cd 2300 	strd	r2, r3, [sp]
 800d182:	f000 fb43 	bl	800d80c <ucdr_buffer_alignment>
 800d186:	4601      	mov	r1, r0
 800d188:	4620      	mov	r0, r4
 800d18a:	7d67      	ldrb	r7, [r4, #21]
 800d18c:	f000 fb82 	bl	800d894 <ucdr_advance_buffer>
 800d190:	2108      	movs	r1, #8
 800d192:	4620      	mov	r0, r4
 800d194:	f000 fada 	bl	800d74c <ucdr_check_buffer_available_for>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d14e      	bne.n	800d23a <ucdr_serialize_uint64_t+0xc6>
 800d19c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d1a0:	42ab      	cmp	r3, r5
 800d1a2:	d945      	bls.n	800d230 <ucdr_serialize_uint64_t+0xbc>
 800d1a4:	1b5e      	subs	r6, r3, r5
 800d1a6:	60a3      	str	r3, [r4, #8]
 800d1a8:	6923      	ldr	r3, [r4, #16]
 800d1aa:	f1c6 0808 	rsb	r8, r6, #8
 800d1ae:	4433      	add	r3, r6
 800d1b0:	6123      	str	r3, [r4, #16]
 800d1b2:	4641      	mov	r1, r8
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 fad5 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d074      	beq.n	800d2a8 <ucdr_serialize_uint64_t+0x134>
 800d1be:	7d23      	ldrb	r3, [r4, #20]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	f000 809b 	beq.w	800d2fc <ucdr_serialize_uint64_t+0x188>
 800d1c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d1ca:	702b      	strb	r3, [r5, #0]
 800d1cc:	2e00      	cmp	r6, #0
 800d1ce:	d078      	beq.n	800d2c2 <ucdr_serialize_uint64_t+0x14e>
 800d1d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d1d4:	706b      	strb	r3, [r5, #1]
 800d1d6:	2e01      	cmp	r6, #1
 800d1d8:	d077      	beq.n	800d2ca <ucdr_serialize_uint64_t+0x156>
 800d1da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d1de:	70ab      	strb	r3, [r5, #2]
 800d1e0:	2e02      	cmp	r6, #2
 800d1e2:	d076      	beq.n	800d2d2 <ucdr_serialize_uint64_t+0x15e>
 800d1e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d1e8:	70eb      	strb	r3, [r5, #3]
 800d1ea:	2e03      	cmp	r6, #3
 800d1ec:	d075      	beq.n	800d2da <ucdr_serialize_uint64_t+0x166>
 800d1ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d1f2:	712b      	strb	r3, [r5, #4]
 800d1f4:	2e04      	cmp	r6, #4
 800d1f6:	d074      	beq.n	800d2e2 <ucdr_serialize_uint64_t+0x16e>
 800d1f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d1fc:	716b      	strb	r3, [r5, #5]
 800d1fe:	2e05      	cmp	r6, #5
 800d200:	d073      	beq.n	800d2ea <ucdr_serialize_uint64_t+0x176>
 800d202:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d206:	71ab      	strb	r3, [r5, #6]
 800d208:	2e06      	cmp	r6, #6
 800d20a:	d072      	beq.n	800d2f2 <ucdr_serialize_uint64_t+0x17e>
 800d20c:	f89d 3000 	ldrb.w	r3, [sp]
 800d210:	71eb      	strb	r3, [r5, #7]
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	68a2      	ldr	r2, [r4, #8]
 800d216:	7da0      	ldrb	r0, [r4, #22]
 800d218:	3308      	adds	r3, #8
 800d21a:	1b9e      	subs	r6, r3, r6
 800d21c:	4442      	add	r2, r8
 800d21e:	2308      	movs	r3, #8
 800d220:	f080 0001 	eor.w	r0, r0, #1
 800d224:	60a2      	str	r2, [r4, #8]
 800d226:	6126      	str	r6, [r4, #16]
 800d228:	7563      	strb	r3, [r4, #21]
 800d22a:	b002      	add	sp, #8
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	2108      	movs	r1, #8
 800d232:	4620      	mov	r0, r4
 800d234:	f000 fa96 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d238:	b350      	cbz	r0, 800d290 <ucdr_serialize_uint64_t+0x11c>
 800d23a:	7d23      	ldrb	r3, [r4, #20]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d02d      	beq.n	800d29c <ucdr_serialize_uint64_t+0x128>
 800d240:	68a3      	ldr	r3, [r4, #8]
 800d242:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	68a3      	ldr	r3, [r4, #8]
 800d24a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d24e:	705a      	strb	r2, [r3, #1]
 800d250:	68a3      	ldr	r3, [r4, #8]
 800d252:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d256:	709a      	strb	r2, [r3, #2]
 800d258:	68a3      	ldr	r3, [r4, #8]
 800d25a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d25e:	70da      	strb	r2, [r3, #3]
 800d260:	68a3      	ldr	r3, [r4, #8]
 800d262:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d266:	711a      	strb	r2, [r3, #4]
 800d268:	68a3      	ldr	r3, [r4, #8]
 800d26a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d26e:	715a      	strb	r2, [r3, #5]
 800d270:	68a3      	ldr	r3, [r4, #8]
 800d272:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d276:	719a      	strb	r2, [r3, #6]
 800d278:	68a3      	ldr	r3, [r4, #8]
 800d27a:	f89d 2000 	ldrb.w	r2, [sp]
 800d27e:	71da      	strb	r2, [r3, #7]
 800d280:	68a2      	ldr	r2, [r4, #8]
 800d282:	6923      	ldr	r3, [r4, #16]
 800d284:	3208      	adds	r2, #8
 800d286:	3308      	adds	r3, #8
 800d288:	2108      	movs	r1, #8
 800d28a:	60a2      	str	r2, [r4, #8]
 800d28c:	6123      	str	r3, [r4, #16]
 800d28e:	7561      	strb	r1, [r4, #21]
 800d290:	7da0      	ldrb	r0, [r4, #22]
 800d292:	f080 0001 	eor.w	r0, r0, #1
 800d296:	b002      	add	sp, #8
 800d298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29c:	466b      	mov	r3, sp
 800d29e:	cb03      	ldmia	r3!, {r0, r1}
 800d2a0:	68a3      	ldr	r3, [r4, #8]
 800d2a2:	6018      	str	r0, [r3, #0]
 800d2a4:	6059      	str	r1, [r3, #4]
 800d2a6:	e7eb      	b.n	800d280 <ucdr_serialize_uint64_t+0x10c>
 800d2a8:	68a2      	ldr	r2, [r4, #8]
 800d2aa:	6923      	ldr	r3, [r4, #16]
 800d2ac:	7da0      	ldrb	r0, [r4, #22]
 800d2ae:	7567      	strb	r7, [r4, #21]
 800d2b0:	1b92      	subs	r2, r2, r6
 800d2b2:	1b9b      	subs	r3, r3, r6
 800d2b4:	f080 0001 	eor.w	r0, r0, #1
 800d2b8:	60a2      	str	r2, [r4, #8]
 800d2ba:	6123      	str	r3, [r4, #16]
 800d2bc:	b002      	add	sp, #8
 800d2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c2:	68a3      	ldr	r3, [r4, #8]
 800d2c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2c8:	701a      	strb	r2, [r3, #0]
 800d2ca:	68a3      	ldr	r3, [r4, #8]
 800d2cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d2d0:	701a      	strb	r2, [r3, #0]
 800d2d2:	68a3      	ldr	r3, [r4, #8]
 800d2d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d2d8:	701a      	strb	r2, [r3, #0]
 800d2da:	68a3      	ldr	r3, [r4, #8]
 800d2dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d2e0:	701a      	strb	r2, [r3, #0]
 800d2e2:	68a3      	ldr	r3, [r4, #8]
 800d2e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d2e8:	701a      	strb	r2, [r3, #0]
 800d2ea:	68a3      	ldr	r3, [r4, #8]
 800d2ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d2f0:	701a      	strb	r2, [r3, #0]
 800d2f2:	68a3      	ldr	r3, [r4, #8]
 800d2f4:	f89d 2000 	ldrb.w	r2, [sp]
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	e78a      	b.n	800d212 <ucdr_serialize_uint64_t+0x9e>
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	466d      	mov	r5, sp
 800d300:	4629      	mov	r1, r5
 800d302:	4632      	mov	r2, r6
 800d304:	f009 fe11 	bl	8016f2a <memcpy>
 800d308:	68a0      	ldr	r0, [r4, #8]
 800d30a:	4642      	mov	r2, r8
 800d30c:	19a9      	adds	r1, r5, r6
 800d30e:	f009 fe0c 	bl	8016f2a <memcpy>
 800d312:	e77e      	b.n	800d212 <ucdr_serialize_uint64_t+0x9e>

0800d314 <ucdr_serialize_int16_t>:
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	b082      	sub	sp, #8
 800d31a:	460b      	mov	r3, r1
 800d31c:	2102      	movs	r1, #2
 800d31e:	4604      	mov	r4, r0
 800d320:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d324:	f000 fa72 	bl	800d80c <ucdr_buffer_alignment>
 800d328:	4601      	mov	r1, r0
 800d32a:	4620      	mov	r0, r4
 800d32c:	7d67      	ldrb	r7, [r4, #21]
 800d32e:	f000 fab1 	bl	800d894 <ucdr_advance_buffer>
 800d332:	2102      	movs	r1, #2
 800d334:	4620      	mov	r0, r4
 800d336:	f000 fa09 	bl	800d74c <ucdr_check_buffer_available_for>
 800d33a:	bb78      	cbnz	r0, 800d39c <ucdr_serialize_int16_t+0x88>
 800d33c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d340:	42ab      	cmp	r3, r5
 800d342:	d926      	bls.n	800d392 <ucdr_serialize_int16_t+0x7e>
 800d344:	1b5e      	subs	r6, r3, r5
 800d346:	60a3      	str	r3, [r4, #8]
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	f1c6 0802 	rsb	r8, r6, #2
 800d34e:	4433      	add	r3, r6
 800d350:	6123      	str	r3, [r4, #16]
 800d352:	4641      	mov	r1, r8
 800d354:	4620      	mov	r0, r4
 800d356:	f000 fa05 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d03b      	beq.n	800d3d6 <ucdr_serialize_int16_t+0xc2>
 800d35e:	7d23      	ldrb	r3, [r4, #20]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d04a      	beq.n	800d3fa <ucdr_serialize_int16_t+0xe6>
 800d364:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d368:	702b      	strb	r3, [r5, #0]
 800d36a:	2e00      	cmp	r6, #0
 800d36c:	d040      	beq.n	800d3f0 <ucdr_serialize_int16_t+0xdc>
 800d36e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d372:	706b      	strb	r3, [r5, #1]
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	68a2      	ldr	r2, [r4, #8]
 800d378:	7da0      	ldrb	r0, [r4, #22]
 800d37a:	3302      	adds	r3, #2
 800d37c:	1b9e      	subs	r6, r3, r6
 800d37e:	4442      	add	r2, r8
 800d380:	2302      	movs	r3, #2
 800d382:	f080 0001 	eor.w	r0, r0, #1
 800d386:	60a2      	str	r2, [r4, #8]
 800d388:	6126      	str	r6, [r4, #16]
 800d38a:	7563      	strb	r3, [r4, #21]
 800d38c:	b002      	add	sp, #8
 800d38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d392:	2102      	movs	r1, #2
 800d394:	4620      	mov	r0, r4
 800d396:	f000 f9e5 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d39a:	b190      	cbz	r0, 800d3c2 <ucdr_serialize_int16_t+0xae>
 800d39c:	7d23      	ldrb	r3, [r4, #20]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	68a3      	ldr	r3, [r4, #8]
 800d3a2:	d014      	beq.n	800d3ce <ucdr_serialize_int16_t+0xba>
 800d3a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d3a8:	701a      	strb	r2, [r3, #0]
 800d3aa:	68a3      	ldr	r3, [r4, #8]
 800d3ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3b0:	705a      	strb	r2, [r3, #1]
 800d3b2:	68a2      	ldr	r2, [r4, #8]
 800d3b4:	6923      	ldr	r3, [r4, #16]
 800d3b6:	3202      	adds	r2, #2
 800d3b8:	3302      	adds	r3, #2
 800d3ba:	2102      	movs	r1, #2
 800d3bc:	60a2      	str	r2, [r4, #8]
 800d3be:	6123      	str	r3, [r4, #16]
 800d3c0:	7561      	strb	r1, [r4, #21]
 800d3c2:	7da0      	ldrb	r0, [r4, #22]
 800d3c4:	f080 0001 	eor.w	r0, r0, #1
 800d3c8:	b002      	add	sp, #8
 800d3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d3d2:	801a      	strh	r2, [r3, #0]
 800d3d4:	e7ed      	b.n	800d3b2 <ucdr_serialize_int16_t+0x9e>
 800d3d6:	68a2      	ldr	r2, [r4, #8]
 800d3d8:	6923      	ldr	r3, [r4, #16]
 800d3da:	7da0      	ldrb	r0, [r4, #22]
 800d3dc:	7567      	strb	r7, [r4, #21]
 800d3de:	1b92      	subs	r2, r2, r6
 800d3e0:	1b9b      	subs	r3, r3, r6
 800d3e2:	f080 0001 	eor.w	r0, r0, #1
 800d3e6:	60a2      	str	r2, [r4, #8]
 800d3e8:	6123      	str	r3, [r4, #16]
 800d3ea:	b002      	add	sp, #8
 800d3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f0:	68a3      	ldr	r3, [r4, #8]
 800d3f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3f6:	701a      	strb	r2, [r3, #0]
 800d3f8:	e7bc      	b.n	800d374 <ucdr_serialize_int16_t+0x60>
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f10d 0506 	add.w	r5, sp, #6
 800d400:	4629      	mov	r1, r5
 800d402:	4632      	mov	r2, r6
 800d404:	f009 fd91 	bl	8016f2a <memcpy>
 800d408:	68a0      	ldr	r0, [r4, #8]
 800d40a:	4642      	mov	r2, r8
 800d40c:	19a9      	adds	r1, r5, r6
 800d40e:	f009 fd8c 	bl	8016f2a <memcpy>
 800d412:	e7af      	b.n	800d374 <ucdr_serialize_int16_t+0x60>

0800d414 <ucdr_deserialize_int16_t>:
 800d414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d418:	460d      	mov	r5, r1
 800d41a:	2102      	movs	r1, #2
 800d41c:	4604      	mov	r4, r0
 800d41e:	f000 f9f5 	bl	800d80c <ucdr_buffer_alignment>
 800d422:	4601      	mov	r1, r0
 800d424:	4620      	mov	r0, r4
 800d426:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d42a:	f000 fa33 	bl	800d894 <ucdr_advance_buffer>
 800d42e:	2102      	movs	r1, #2
 800d430:	4620      	mov	r0, r4
 800d432:	f000 f98b 	bl	800d74c <ucdr_check_buffer_available_for>
 800d436:	bb60      	cbnz	r0, 800d492 <ucdr_deserialize_int16_t+0x7e>
 800d438:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d43c:	42be      	cmp	r6, r7
 800d43e:	d923      	bls.n	800d488 <ucdr_deserialize_int16_t+0x74>
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	60a6      	str	r6, [r4, #8]
 800d444:	1bf6      	subs	r6, r6, r7
 800d446:	4433      	add	r3, r6
 800d448:	f1c6 0902 	rsb	r9, r6, #2
 800d44c:	6123      	str	r3, [r4, #16]
 800d44e:	4649      	mov	r1, r9
 800d450:	4620      	mov	r0, r4
 800d452:	f000 f987 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d456:	2800      	cmp	r0, #0
 800d458:	d034      	beq.n	800d4c4 <ucdr_deserialize_int16_t+0xb0>
 800d45a:	7d23      	ldrb	r3, [r4, #20]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d042      	beq.n	800d4e6 <ucdr_deserialize_int16_t+0xd2>
 800d460:	787b      	ldrb	r3, [r7, #1]
 800d462:	702b      	strb	r3, [r5, #0]
 800d464:	2e00      	cmp	r6, #0
 800d466:	d03a      	beq.n	800d4de <ucdr_deserialize_int16_t+0xca>
 800d468:	783b      	ldrb	r3, [r7, #0]
 800d46a:	706b      	strb	r3, [r5, #1]
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	68a2      	ldr	r2, [r4, #8]
 800d470:	7da0      	ldrb	r0, [r4, #22]
 800d472:	2102      	movs	r1, #2
 800d474:	3302      	adds	r3, #2
 800d476:	444a      	add	r2, r9
 800d478:	1b9b      	subs	r3, r3, r6
 800d47a:	7561      	strb	r1, [r4, #21]
 800d47c:	60a2      	str	r2, [r4, #8]
 800d47e:	6123      	str	r3, [r4, #16]
 800d480:	f080 0001 	eor.w	r0, r0, #1
 800d484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d488:	2102      	movs	r1, #2
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 f96a 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d490:	b180      	cbz	r0, 800d4b4 <ucdr_deserialize_int16_t+0xa0>
 800d492:	7d23      	ldrb	r3, [r4, #20]
 800d494:	2b01      	cmp	r3, #1
 800d496:	68a3      	ldr	r3, [r4, #8]
 800d498:	d011      	beq.n	800d4be <ucdr_deserialize_int16_t+0xaa>
 800d49a:	785b      	ldrb	r3, [r3, #1]
 800d49c:	702b      	strb	r3, [r5, #0]
 800d49e:	68a3      	ldr	r3, [r4, #8]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	706b      	strb	r3, [r5, #1]
 800d4a4:	68a2      	ldr	r2, [r4, #8]
 800d4a6:	6923      	ldr	r3, [r4, #16]
 800d4a8:	3202      	adds	r2, #2
 800d4aa:	3302      	adds	r3, #2
 800d4ac:	2102      	movs	r1, #2
 800d4ae:	60a2      	str	r2, [r4, #8]
 800d4b0:	6123      	str	r3, [r4, #16]
 800d4b2:	7561      	strb	r1, [r4, #21]
 800d4b4:	7da0      	ldrb	r0, [r4, #22]
 800d4b6:	f080 0001 	eor.w	r0, r0, #1
 800d4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	802b      	strh	r3, [r5, #0]
 800d4c2:	e7ef      	b.n	800d4a4 <ucdr_deserialize_int16_t+0x90>
 800d4c4:	68a2      	ldr	r2, [r4, #8]
 800d4c6:	6923      	ldr	r3, [r4, #16]
 800d4c8:	7da0      	ldrb	r0, [r4, #22]
 800d4ca:	f884 8015 	strb.w	r8, [r4, #21]
 800d4ce:	1b92      	subs	r2, r2, r6
 800d4d0:	1b9b      	subs	r3, r3, r6
 800d4d2:	60a2      	str	r2, [r4, #8]
 800d4d4:	6123      	str	r3, [r4, #16]
 800d4d6:	f080 0001 	eor.w	r0, r0, #1
 800d4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4de:	68a3      	ldr	r3, [r4, #8]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	706b      	strb	r3, [r5, #1]
 800d4e4:	e7c2      	b.n	800d46c <ucdr_deserialize_int16_t+0x58>
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	4632      	mov	r2, r6
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f009 fd1d 	bl	8016f2a <memcpy>
 800d4f0:	68a1      	ldr	r1, [r4, #8]
 800d4f2:	464a      	mov	r2, r9
 800d4f4:	19a8      	adds	r0, r5, r6
 800d4f6:	f009 fd18 	bl	8016f2a <memcpy>
 800d4fa:	e7b7      	b.n	800d46c <ucdr_deserialize_int16_t+0x58>

0800d4fc <ucdr_serialize_int32_t>:
 800d4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d500:	b082      	sub	sp, #8
 800d502:	4604      	mov	r4, r0
 800d504:	9101      	str	r1, [sp, #4]
 800d506:	2104      	movs	r1, #4
 800d508:	f000 f980 	bl	800d80c <ucdr_buffer_alignment>
 800d50c:	4601      	mov	r1, r0
 800d50e:	4620      	mov	r0, r4
 800d510:	7d67      	ldrb	r7, [r4, #21]
 800d512:	f000 f9bf 	bl	800d894 <ucdr_advance_buffer>
 800d516:	2104      	movs	r1, #4
 800d518:	4620      	mov	r0, r4
 800d51a:	f000 f917 	bl	800d74c <ucdr_check_buffer_available_for>
 800d51e:	2800      	cmp	r0, #0
 800d520:	d139      	bne.n	800d596 <ucdr_serialize_int32_t+0x9a>
 800d522:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d526:	42ab      	cmp	r3, r5
 800d528:	d930      	bls.n	800d58c <ucdr_serialize_int32_t+0x90>
 800d52a:	1b5e      	subs	r6, r3, r5
 800d52c:	60a3      	str	r3, [r4, #8]
 800d52e:	6923      	ldr	r3, [r4, #16]
 800d530:	f1c6 0804 	rsb	r8, r6, #4
 800d534:	4433      	add	r3, r6
 800d536:	6123      	str	r3, [r4, #16]
 800d538:	4641      	mov	r1, r8
 800d53a:	4620      	mov	r0, r4
 800d53c:	f000 f912 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d540:	2800      	cmp	r0, #0
 800d542:	d04c      	beq.n	800d5de <ucdr_serialize_int32_t+0xe2>
 800d544:	7d23      	ldrb	r3, [r4, #20]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d063      	beq.n	800d612 <ucdr_serialize_int32_t+0x116>
 800d54a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d54e:	702b      	strb	r3, [r5, #0]
 800d550:	2e00      	cmp	r6, #0
 800d552:	d051      	beq.n	800d5f8 <ucdr_serialize_int32_t+0xfc>
 800d554:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d558:	706b      	strb	r3, [r5, #1]
 800d55a:	2e01      	cmp	r6, #1
 800d55c:	d050      	beq.n	800d600 <ucdr_serialize_int32_t+0x104>
 800d55e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d562:	70ab      	strb	r3, [r5, #2]
 800d564:	2e02      	cmp	r6, #2
 800d566:	d04f      	beq.n	800d608 <ucdr_serialize_int32_t+0x10c>
 800d568:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d56c:	70eb      	strb	r3, [r5, #3]
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	68a2      	ldr	r2, [r4, #8]
 800d572:	7da0      	ldrb	r0, [r4, #22]
 800d574:	3304      	adds	r3, #4
 800d576:	1b9e      	subs	r6, r3, r6
 800d578:	4442      	add	r2, r8
 800d57a:	2304      	movs	r3, #4
 800d57c:	f080 0001 	eor.w	r0, r0, #1
 800d580:	60a2      	str	r2, [r4, #8]
 800d582:	6126      	str	r6, [r4, #16]
 800d584:	7563      	strb	r3, [r4, #21]
 800d586:	b002      	add	sp, #8
 800d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58c:	2104      	movs	r1, #4
 800d58e:	4620      	mov	r0, r4
 800d590:	f000 f8e8 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d594:	b1d0      	cbz	r0, 800d5cc <ucdr_serialize_int32_t+0xd0>
 800d596:	7d23      	ldrb	r3, [r4, #20]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	68a3      	ldr	r3, [r4, #8]
 800d59c:	d01c      	beq.n	800d5d8 <ucdr_serialize_int32_t+0xdc>
 800d59e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d5a2:	701a      	strb	r2, [r3, #0]
 800d5a4:	68a3      	ldr	r3, [r4, #8]
 800d5a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5aa:	705a      	strb	r2, [r3, #1]
 800d5ac:	68a3      	ldr	r3, [r4, #8]
 800d5ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d5b2:	709a      	strb	r2, [r3, #2]
 800d5b4:	68a3      	ldr	r3, [r4, #8]
 800d5b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d5ba:	70da      	strb	r2, [r3, #3]
 800d5bc:	68a2      	ldr	r2, [r4, #8]
 800d5be:	6923      	ldr	r3, [r4, #16]
 800d5c0:	3204      	adds	r2, #4
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	2104      	movs	r1, #4
 800d5c6:	60a2      	str	r2, [r4, #8]
 800d5c8:	6123      	str	r3, [r4, #16]
 800d5ca:	7561      	strb	r1, [r4, #21]
 800d5cc:	7da0      	ldrb	r0, [r4, #22]
 800d5ce:	f080 0001 	eor.w	r0, r0, #1
 800d5d2:	b002      	add	sp, #8
 800d5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d8:	9a01      	ldr	r2, [sp, #4]
 800d5da:	601a      	str	r2, [r3, #0]
 800d5dc:	e7ee      	b.n	800d5bc <ucdr_serialize_int32_t+0xc0>
 800d5de:	68a2      	ldr	r2, [r4, #8]
 800d5e0:	6923      	ldr	r3, [r4, #16]
 800d5e2:	7da0      	ldrb	r0, [r4, #22]
 800d5e4:	7567      	strb	r7, [r4, #21]
 800d5e6:	1b92      	subs	r2, r2, r6
 800d5e8:	1b9b      	subs	r3, r3, r6
 800d5ea:	f080 0001 	eor.w	r0, r0, #1
 800d5ee:	60a2      	str	r2, [r4, #8]
 800d5f0:	6123      	str	r3, [r4, #16]
 800d5f2:	b002      	add	sp, #8
 800d5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f8:	68a3      	ldr	r3, [r4, #8]
 800d5fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5fe:	701a      	strb	r2, [r3, #0]
 800d600:	68a3      	ldr	r3, [r4, #8]
 800d602:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d606:	701a      	strb	r2, [r3, #0]
 800d608:	68a3      	ldr	r3, [r4, #8]
 800d60a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d60e:	701a      	strb	r2, [r3, #0]
 800d610:	e7ad      	b.n	800d56e <ucdr_serialize_int32_t+0x72>
 800d612:	4628      	mov	r0, r5
 800d614:	ad01      	add	r5, sp, #4
 800d616:	4629      	mov	r1, r5
 800d618:	4632      	mov	r2, r6
 800d61a:	f009 fc86 	bl	8016f2a <memcpy>
 800d61e:	68a0      	ldr	r0, [r4, #8]
 800d620:	4642      	mov	r2, r8
 800d622:	19a9      	adds	r1, r5, r6
 800d624:	f009 fc81 	bl	8016f2a <memcpy>
 800d628:	e7a1      	b.n	800d56e <ucdr_serialize_int32_t+0x72>
 800d62a:	bf00      	nop

0800d62c <ucdr_deserialize_int32_t>:
 800d62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d630:	460d      	mov	r5, r1
 800d632:	2104      	movs	r1, #4
 800d634:	4604      	mov	r4, r0
 800d636:	f000 f8e9 	bl	800d80c <ucdr_buffer_alignment>
 800d63a:	4601      	mov	r1, r0
 800d63c:	4620      	mov	r0, r4
 800d63e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d642:	f000 f927 	bl	800d894 <ucdr_advance_buffer>
 800d646:	2104      	movs	r1, #4
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 f87f 	bl	800d74c <ucdr_check_buffer_available_for>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d138      	bne.n	800d6c4 <ucdr_deserialize_int32_t+0x98>
 800d652:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d656:	42b7      	cmp	r7, r6
 800d658:	d92f      	bls.n	800d6ba <ucdr_deserialize_int32_t+0x8e>
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	60a7      	str	r7, [r4, #8]
 800d65e:	1bbf      	subs	r7, r7, r6
 800d660:	443b      	add	r3, r7
 800d662:	f1c7 0904 	rsb	r9, r7, #4
 800d666:	6123      	str	r3, [r4, #16]
 800d668:	4649      	mov	r1, r9
 800d66a:	4620      	mov	r0, r4
 800d66c:	f000 f87a 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d670:	2800      	cmp	r0, #0
 800d672:	d046      	beq.n	800d702 <ucdr_deserialize_int32_t+0xd6>
 800d674:	7d23      	ldrb	r3, [r4, #20]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d05c      	beq.n	800d734 <ucdr_deserialize_int32_t+0x108>
 800d67a:	78f3      	ldrb	r3, [r6, #3]
 800d67c:	702b      	strb	r3, [r5, #0]
 800d67e:	2f00      	cmp	r7, #0
 800d680:	d04c      	beq.n	800d71c <ucdr_deserialize_int32_t+0xf0>
 800d682:	78b3      	ldrb	r3, [r6, #2]
 800d684:	706b      	strb	r3, [r5, #1]
 800d686:	2f01      	cmp	r7, #1
 800d688:	f105 0302 	add.w	r3, r5, #2
 800d68c:	d04a      	beq.n	800d724 <ucdr_deserialize_int32_t+0xf8>
 800d68e:	7873      	ldrb	r3, [r6, #1]
 800d690:	70ab      	strb	r3, [r5, #2]
 800d692:	2f02      	cmp	r7, #2
 800d694:	f105 0303 	add.w	r3, r5, #3
 800d698:	d048      	beq.n	800d72c <ucdr_deserialize_int32_t+0x100>
 800d69a:	7833      	ldrb	r3, [r6, #0]
 800d69c:	70eb      	strb	r3, [r5, #3]
 800d69e:	6923      	ldr	r3, [r4, #16]
 800d6a0:	68a2      	ldr	r2, [r4, #8]
 800d6a2:	7da0      	ldrb	r0, [r4, #22]
 800d6a4:	2104      	movs	r1, #4
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	444a      	add	r2, r9
 800d6aa:	1bdb      	subs	r3, r3, r7
 800d6ac:	7561      	strb	r1, [r4, #21]
 800d6ae:	60a2      	str	r2, [r4, #8]
 800d6b0:	6123      	str	r3, [r4, #16]
 800d6b2:	f080 0001 	eor.w	r0, r0, #1
 800d6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ba:	2104      	movs	r1, #4
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 f851 	bl	800d764 <ucdr_check_final_buffer_behavior>
 800d6c2:	b1b0      	cbz	r0, 800d6f2 <ucdr_deserialize_int32_t+0xc6>
 800d6c4:	7d23      	ldrb	r3, [r4, #20]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	68a3      	ldr	r3, [r4, #8]
 800d6ca:	d017      	beq.n	800d6fc <ucdr_deserialize_int32_t+0xd0>
 800d6cc:	78db      	ldrb	r3, [r3, #3]
 800d6ce:	702b      	strb	r3, [r5, #0]
 800d6d0:	68a3      	ldr	r3, [r4, #8]
 800d6d2:	789b      	ldrb	r3, [r3, #2]
 800d6d4:	706b      	strb	r3, [r5, #1]
 800d6d6:	68a3      	ldr	r3, [r4, #8]
 800d6d8:	785b      	ldrb	r3, [r3, #1]
 800d6da:	70ab      	strb	r3, [r5, #2]
 800d6dc:	68a3      	ldr	r3, [r4, #8]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	70eb      	strb	r3, [r5, #3]
 800d6e2:	68a2      	ldr	r2, [r4, #8]
 800d6e4:	6923      	ldr	r3, [r4, #16]
 800d6e6:	3204      	adds	r2, #4
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	2104      	movs	r1, #4
 800d6ec:	60a2      	str	r2, [r4, #8]
 800d6ee:	6123      	str	r3, [r4, #16]
 800d6f0:	7561      	strb	r1, [r4, #21]
 800d6f2:	7da0      	ldrb	r0, [r4, #22]
 800d6f4:	f080 0001 	eor.w	r0, r0, #1
 800d6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	602b      	str	r3, [r5, #0]
 800d700:	e7ef      	b.n	800d6e2 <ucdr_deserialize_int32_t+0xb6>
 800d702:	68a2      	ldr	r2, [r4, #8]
 800d704:	6923      	ldr	r3, [r4, #16]
 800d706:	7da0      	ldrb	r0, [r4, #22]
 800d708:	f884 8015 	strb.w	r8, [r4, #21]
 800d70c:	1bd2      	subs	r2, r2, r7
 800d70e:	1bdb      	subs	r3, r3, r7
 800d710:	60a2      	str	r2, [r4, #8]
 800d712:	6123      	str	r3, [r4, #16]
 800d714:	f080 0001 	eor.w	r0, r0, #1
 800d718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d71c:	68a3      	ldr	r3, [r4, #8]
 800d71e:	789b      	ldrb	r3, [r3, #2]
 800d720:	706b      	strb	r3, [r5, #1]
 800d722:	1cab      	adds	r3, r5, #2
 800d724:	68a2      	ldr	r2, [r4, #8]
 800d726:	7852      	ldrb	r2, [r2, #1]
 800d728:	f803 2b01 	strb.w	r2, [r3], #1
 800d72c:	68a2      	ldr	r2, [r4, #8]
 800d72e:	7812      	ldrb	r2, [r2, #0]
 800d730:	701a      	strb	r2, [r3, #0]
 800d732:	e7b4      	b.n	800d69e <ucdr_deserialize_int32_t+0x72>
 800d734:	4631      	mov	r1, r6
 800d736:	463a      	mov	r2, r7
 800d738:	4628      	mov	r0, r5
 800d73a:	f009 fbf6 	bl	8016f2a <memcpy>
 800d73e:	68a1      	ldr	r1, [r4, #8]
 800d740:	464a      	mov	r2, r9
 800d742:	19e8      	adds	r0, r5, r7
 800d744:	f009 fbf1 	bl	8016f2a <memcpy>
 800d748:	e7a9      	b.n	800d69e <ucdr_deserialize_int32_t+0x72>
 800d74a:	bf00      	nop

0800d74c <ucdr_check_buffer_available_for>:
 800d74c:	7d83      	ldrb	r3, [r0, #22]
 800d74e:	b93b      	cbnz	r3, 800d760 <ucdr_check_buffer_available_for+0x14>
 800d750:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d754:	4419      	add	r1, r3
 800d756:	4288      	cmp	r0, r1
 800d758:	bf34      	ite	cc
 800d75a:	2000      	movcc	r0, #0
 800d75c:	2001      	movcs	r0, #1
 800d75e:	4770      	bx	lr
 800d760:	2000      	movs	r0, #0
 800d762:	4770      	bx	lr

0800d764 <ucdr_check_final_buffer_behavior>:
 800d764:	7d83      	ldrb	r3, [r0, #22]
 800d766:	b943      	cbnz	r3, 800d77a <ucdr_check_final_buffer_behavior+0x16>
 800d768:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d76c:	4291      	cmp	r1, r2
 800d76e:	b510      	push	{r4, lr}
 800d770:	4604      	mov	r4, r0
 800d772:	d205      	bcs.n	800d780 <ucdr_check_final_buffer_behavior+0x1c>
 800d774:	2301      	movs	r3, #1
 800d776:	4618      	mov	r0, r3
 800d778:	bd10      	pop	{r4, pc}
 800d77a:	2300      	movs	r3, #0
 800d77c:	4618      	mov	r0, r3
 800d77e:	4770      	bx	lr
 800d780:	6982      	ldr	r2, [r0, #24]
 800d782:	b13a      	cbz	r2, 800d794 <ucdr_check_final_buffer_behavior+0x30>
 800d784:	69c1      	ldr	r1, [r0, #28]
 800d786:	4790      	blx	r2
 800d788:	f080 0301 	eor.w	r3, r0, #1
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	75a0      	strb	r0, [r4, #22]
 800d790:	4618      	mov	r0, r3
 800d792:	bd10      	pop	{r4, pc}
 800d794:	2001      	movs	r0, #1
 800d796:	75a0      	strb	r0, [r4, #22]
 800d798:	e7fa      	b.n	800d790 <ucdr_check_final_buffer_behavior+0x2c>
 800d79a:	bf00      	nop

0800d79c <ucdr_set_on_full_buffer_callback>:
 800d79c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop

0800d7a4 <ucdr_init_buffer_origin_offset_endian>:
 800d7a4:	b410      	push	{r4}
 800d7a6:	9c01      	ldr	r4, [sp, #4]
 800d7a8:	6001      	str	r1, [r0, #0]
 800d7aa:	440a      	add	r2, r1
 800d7ac:	6042      	str	r2, [r0, #4]
 800d7ae:	190a      	adds	r2, r1, r4
 800d7b0:	441c      	add	r4, r3
 800d7b2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d7b6:	6082      	str	r2, [r0, #8]
 800d7b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d7bc:	7503      	strb	r3, [r0, #20]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7c8:	7542      	strb	r2, [r0, #21]
 800d7ca:	7582      	strb	r2, [r0, #22]
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop

0800d7d0 <ucdr_init_buffer_origin_offset>:
 800d7d0:	b510      	push	{r4, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	9c04      	ldr	r4, [sp, #16]
 800d7d6:	9400      	str	r4, [sp, #0]
 800d7d8:	2401      	movs	r4, #1
 800d7da:	9401      	str	r4, [sp, #4]
 800d7dc:	f7ff ffe2 	bl	800d7a4 <ucdr_init_buffer_origin_offset_endian>
 800d7e0:	b002      	add	sp, #8
 800d7e2:	bd10      	pop	{r4, pc}

0800d7e4 <ucdr_init_buffer_origin>:
 800d7e4:	b510      	push	{r4, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	2400      	movs	r4, #0
 800d7ea:	9400      	str	r4, [sp, #0]
 800d7ec:	f7ff fff0 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800d7f0:	b002      	add	sp, #8
 800d7f2:	bd10      	pop	{r4, pc}

0800d7f4 <ucdr_init_buffer>:
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f7ff bff5 	b.w	800d7e4 <ucdr_init_buffer_origin>
 800d7fa:	bf00      	nop

0800d7fc <ucdr_alignment>:
 800d7fc:	fbb0 f3f1 	udiv	r3, r0, r1
 800d800:	fb03 0011 	mls	r0, r3, r1, r0
 800d804:	1a08      	subs	r0, r1, r0
 800d806:	3901      	subs	r1, #1
 800d808:	4008      	ands	r0, r1
 800d80a:	4770      	bx	lr

0800d80c <ucdr_buffer_alignment>:
 800d80c:	7d43      	ldrb	r3, [r0, #21]
 800d80e:	428b      	cmp	r3, r1
 800d810:	d208      	bcs.n	800d824 <ucdr_buffer_alignment+0x18>
 800d812:	6900      	ldr	r0, [r0, #16]
 800d814:	fbb0 f3f1 	udiv	r3, r0, r1
 800d818:	fb01 0013 	mls	r0, r1, r3, r0
 800d81c:	1a08      	subs	r0, r1, r0
 800d81e:	3901      	subs	r1, #1
 800d820:	4008      	ands	r0, r1
 800d822:	4770      	bx	lr
 800d824:	2000      	movs	r0, #0
 800d826:	4770      	bx	lr

0800d828 <ucdr_align_to>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	4604      	mov	r4, r0
 800d82c:	460d      	mov	r5, r1
 800d82e:	f7ff ffed 	bl	800d80c <ucdr_buffer_alignment>
 800d832:	68a3      	ldr	r3, [r4, #8]
 800d834:	6921      	ldr	r1, [r4, #16]
 800d836:	7565      	strb	r5, [r4, #21]
 800d838:	181a      	adds	r2, r3, r0
 800d83a:	6863      	ldr	r3, [r4, #4]
 800d83c:	4293      	cmp	r3, r2
 800d83e:	4408      	add	r0, r1
 800d840:	bf28      	it	cs
 800d842:	4613      	movcs	r3, r2
 800d844:	6120      	str	r0, [r4, #16]
 800d846:	60a3      	str	r3, [r4, #8]
 800d848:	bd38      	pop	{r3, r4, r5, pc}
 800d84a:	bf00      	nop

0800d84c <ucdr_buffer_length>:
 800d84c:	6882      	ldr	r2, [r0, #8]
 800d84e:	6800      	ldr	r0, [r0, #0]
 800d850:	1a10      	subs	r0, r2, r0
 800d852:	4770      	bx	lr

0800d854 <ucdr_buffer_remaining>:
 800d854:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d858:	1a10      	subs	r0, r2, r0
 800d85a:	4770      	bx	lr

0800d85c <ucdr_check_final_buffer_behavior_array>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	7d83      	ldrb	r3, [r0, #22]
 800d860:	b963      	cbnz	r3, 800d87c <ucdr_check_final_buffer_behavior_array+0x20>
 800d862:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d866:	429a      	cmp	r2, r3
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	d308      	bcc.n	800d880 <ucdr_check_final_buffer_behavior_array+0x24>
 800d86e:	b139      	cbz	r1, 800d880 <ucdr_check_final_buffer_behavior_array+0x24>
 800d870:	6983      	ldr	r3, [r0, #24]
 800d872:	b163      	cbz	r3, 800d88e <ucdr_check_final_buffer_behavior_array+0x32>
 800d874:	69c1      	ldr	r1, [r0, #28]
 800d876:	4798      	blx	r3
 800d878:	75a0      	strb	r0, [r4, #22]
 800d87a:	b108      	cbz	r0, 800d880 <ucdr_check_final_buffer_behavior_array+0x24>
 800d87c:	2000      	movs	r0, #0
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	4620      	mov	r0, r4
 800d882:	f7ff ffe7 	bl	800d854 <ucdr_buffer_remaining>
 800d886:	42a8      	cmp	r0, r5
 800d888:	bf28      	it	cs
 800d88a:	4628      	movcs	r0, r5
 800d88c:	bd38      	pop	{r3, r4, r5, pc}
 800d88e:	2301      	movs	r3, #1
 800d890:	7583      	strb	r3, [r0, #22]
 800d892:	e7f3      	b.n	800d87c <ucdr_check_final_buffer_behavior_array+0x20>

0800d894 <ucdr_advance_buffer>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	f7ff ff57 	bl	800d74c <ucdr_check_buffer_available_for>
 800d89e:	b178      	cbz	r0, 800d8c0 <ucdr_advance_buffer+0x2c>
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	68a2      	ldr	r2, [r4, #8]
 800d8a4:	442b      	add	r3, r5
 800d8a6:	6123      	str	r3, [r4, #16]
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	442a      	add	r2, r5
 800d8ac:	7563      	strb	r3, [r4, #21]
 800d8ae:	60a2      	str	r2, [r4, #8]
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
 800d8b2:	68a2      	ldr	r2, [r4, #8]
 800d8b4:	6923      	ldr	r3, [r4, #16]
 800d8b6:	4402      	add	r2, r0
 800d8b8:	4403      	add	r3, r0
 800d8ba:	1a2d      	subs	r5, r5, r0
 800d8bc:	60a2      	str	r2, [r4, #8]
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f7ff ffc9 	bl	800d85c <ucdr_check_final_buffer_behavior_array>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d1f1      	bne.n	800d8b2 <ucdr_advance_buffer+0x1e>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	7563      	strb	r3, [r4, #21]
 800d8d2:	bd38      	pop	{r3, r4, r5, pc}

0800d8d4 <uxr_buffer_delete_entity>:
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	b08e      	sub	sp, #56	@ 0x38
 800d8da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d8de:	2303      	movs	r3, #3
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	2204      	movs	r2, #4
 800d8e4:	ab06      	add	r3, sp, #24
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	9103      	str	r1, [sp, #12]
 800d8ea:	f001 fab7 	bl	800ee5c <uxr_prepare_stream_to_write_submessage>
 800d8ee:	b918      	cbnz	r0, 800d8f8 <uxr_buffer_delete_entity+0x24>
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	b00e      	add	sp, #56	@ 0x38
 800d8f6:	bd10      	pop	{r4, pc}
 800d8f8:	9902      	ldr	r1, [sp, #8]
 800d8fa:	aa05      	add	r2, sp, #20
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f001 fbe3 	bl	800f0c8 <uxr_init_base_object_request>
 800d902:	a905      	add	r1, sp, #20
 800d904:	4604      	mov	r4, r0
 800d906:	a806      	add	r0, sp, #24
 800d908:	f003 f9da 	bl	8010cc0 <uxr_serialize_DELETE_Payload>
 800d90c:	4620      	mov	r0, r4
 800d90e:	b00e      	add	sp, #56	@ 0x38
 800d910:	bd10      	pop	{r4, pc}
 800d912:	bf00      	nop

0800d914 <uxr_common_create_entity>:
 800d914:	b510      	push	{r4, lr}
 800d916:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d91a:	b08c      	sub	sp, #48	@ 0x30
 800d91c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d920:	f1bc 0f01 	cmp.w	ip, #1
 800d924:	bf0c      	ite	eq
 800d926:	f003 0201 	andeq.w	r2, r3, #1
 800d92a:	2200      	movne	r2, #0
 800d92c:	330e      	adds	r3, #14
 800d92e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d932:	9101      	str	r1, [sp, #4]
 800d934:	441a      	add	r2, r3
 800d936:	2301      	movs	r3, #1
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	9903      	ldr	r1, [sp, #12]
 800d93c:	ab04      	add	r3, sp, #16
 800d93e:	b292      	uxth	r2, r2
 800d940:	4604      	mov	r4, r0
 800d942:	f001 fa8b 	bl	800ee5c <uxr_prepare_stream_to_write_submessage>
 800d946:	b918      	cbnz	r0, 800d950 <uxr_common_create_entity+0x3c>
 800d948:	4604      	mov	r4, r0
 800d94a:	4620      	mov	r0, r4
 800d94c:	b00c      	add	sp, #48	@ 0x30
 800d94e:	bd10      	pop	{r4, pc}
 800d950:	9902      	ldr	r1, [sp, #8]
 800d952:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d954:	4620      	mov	r0, r4
 800d956:	f001 fbb7 	bl	800f0c8 <uxr_init_base_object_request>
 800d95a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d95c:	4604      	mov	r4, r0
 800d95e:	a804      	add	r0, sp, #16
 800d960:	f003 f90a 	bl	8010b78 <uxr_serialize_CREATE_Payload>
 800d964:	4620      	mov	r0, r4
 800d966:	b00c      	add	sp, #48	@ 0x30
 800d968:	bd10      	pop	{r4, pc}
 800d96a:	bf00      	nop

0800d96c <uxr_buffer_create_participant_bin>:
 800d96c:	b570      	push	{r4, r5, r6, lr}
 800d96e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d972:	ac11      	add	r4, sp, #68	@ 0x44
 800d974:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d978:	2303      	movs	r3, #3
 800d97a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d97e:	7223      	strb	r3, [r4, #8]
 800d980:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d982:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d986:	2201      	movs	r2, #1
 800d988:	2100      	movs	r1, #0
 800d98a:	4605      	mov	r5, r0
 800d98c:	7122      	strb	r2, [r4, #4]
 800d98e:	f88d 1014 	strb.w	r1, [sp, #20]
 800d992:	b1cb      	cbz	r3, 800d9c8 <uxr_buffer_create_participant_bin+0x5c>
 800d994:	f88d 201c 	strb.w	r2, [sp, #28]
 800d998:	9308      	str	r3, [sp, #32]
 800d99a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d99e:	a915      	add	r1, sp, #84	@ 0x54
 800d9a0:	a809      	add	r0, sp, #36	@ 0x24
 800d9a2:	f7ff ff27 	bl	800d7f4 <ucdr_init_buffer>
 800d9a6:	a905      	add	r1, sp, #20
 800d9a8:	a809      	add	r0, sp, #36	@ 0x24
 800d9aa:	f002 fdb3 	bl	8010514 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d9ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9b0:	9600      	str	r6, [sp, #0]
 800d9b2:	9401      	str	r4, [sp, #4]
 800d9b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d9b8:	60e3      	str	r3, [r4, #12]
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f7ff ffa9 	bl	800d914 <uxr_common_create_entity>
 800d9c2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}
 800d9c8:	f88d 301c 	strb.w	r3, [sp, #28]
 800d9cc:	e7e5      	b.n	800d99a <uxr_buffer_create_participant_bin+0x2e>
 800d9ce:	bf00      	nop

0800d9d0 <uxr_buffer_create_topic_bin>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d9d6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d9da:	9105      	str	r1, [sp, #20]
 800d9dc:	4605      	mov	r5, r0
 800d9de:	a997      	add	r1, sp, #604	@ 0x25c
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d9e8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d9ec:	f000 f9b0 	bl	800dd50 <uxr_object_id_to_raw>
 800d9f0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d9f2:	9306      	str	r3, [sp, #24]
 800d9f4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d9f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d9fe:	2301      	movs	r3, #1
 800da00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da04:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800da08:	a917      	add	r1, sp, #92	@ 0x5c
 800da0a:	2300      	movs	r3, #0
 800da0c:	a80b      	add	r0, sp, #44	@ 0x2c
 800da0e:	f88d 301c 	strb.w	r3, [sp, #28]
 800da12:	f7ff feef 	bl	800d7f4 <ucdr_init_buffer>
 800da16:	a906      	add	r1, sp, #24
 800da18:	a80b      	add	r0, sp, #44	@ 0x2c
 800da1a:	f002 fd9d 	bl	8010558 <uxr_serialize_OBJK_Topic_Binary>
 800da1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da20:	9316      	str	r3, [sp, #88]	@ 0x58
 800da22:	ac13      	add	r4, sp, #76	@ 0x4c
 800da24:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800da28:	9600      	str	r6, [sp, #0]
 800da2a:	9401      	str	r4, [sp, #4]
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	4628      	mov	r0, r5
 800da30:	f7ff ff70 	bl	800d914 <uxr_common_create_entity>
 800da34:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800da38:	bd70      	pop	{r4, r5, r6, pc}
 800da3a:	bf00      	nop

0800da3c <uxr_buffer_create_publisher_bin>:
 800da3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da3e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800da42:	4605      	mov	r5, r0
 800da44:	9105      	str	r1, [sp, #20]
 800da46:	4618      	mov	r0, r3
 800da48:	2603      	movs	r6, #3
 800da4a:	a992      	add	r1, sp, #584	@ 0x248
 800da4c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800da50:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800da54:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800da58:	f000 f97a 	bl	800dd50 <uxr_object_id_to_raw>
 800da5c:	2300      	movs	r3, #0
 800da5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da62:	a912      	add	r1, sp, #72	@ 0x48
 800da64:	a806      	add	r0, sp, #24
 800da66:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800da6a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800da6e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800da72:	f7ff febf 	bl	800d7f4 <ucdr_init_buffer>
 800da76:	a993      	add	r1, sp, #588	@ 0x24c
 800da78:	a806      	add	r0, sp, #24
 800da7a:	f002 fe21 	bl	80106c0 <uxr_serialize_OBJK_Publisher_Binary>
 800da7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da80:	9311      	str	r3, [sp, #68]	@ 0x44
 800da82:	ac0e      	add	r4, sp, #56	@ 0x38
 800da84:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800da88:	9700      	str	r7, [sp, #0]
 800da8a:	9401      	str	r4, [sp, #4]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	4628      	mov	r0, r5
 800da90:	f7ff ff40 	bl	800d914 <uxr_common_create_entity>
 800da94:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800da98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da9a:	bf00      	nop

0800da9c <uxr_buffer_create_datawriter_bin>:
 800da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800daa4:	ac1d      	add	r4, sp, #116	@ 0x74
 800daa6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800daaa:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800daae:	9105      	str	r1, [sp, #20]
 800dab0:	4606      	mov	r6, r0
 800dab2:	a9a1      	add	r1, sp, #644	@ 0x284
 800dab4:	4618      	mov	r0, r3
 800dab6:	2305      	movs	r3, #5
 800dab8:	7123      	strb	r3, [r4, #4]
 800daba:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800dabe:	2703      	movs	r7, #3
 800dac0:	f000 f946 	bl	800dd50 <uxr_object_id_to_raw>
 800dac4:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800dac6:	7227      	strb	r7, [r4, #8]
 800dac8:	a90e      	add	r1, sp, #56	@ 0x38
 800daca:	f000 f941 	bl	800dd50 <uxr_object_id_to_raw>
 800dace:	2300      	movs	r3, #0
 800dad0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800dad4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800dad8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800dadc:	3d00      	subs	r5, #0
 800dade:	bf18      	it	ne
 800dae0:	2501      	movne	r5, #1
 800dae2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800dae6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800daea:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800daee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800daf2:	2301      	movs	r3, #1
 800daf4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800daf8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800dafc:	bb8a      	cbnz	r2, 800db62 <uxr_buffer_create_datawriter_bin+0xc6>
 800dafe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800db02:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800db06:	f04f 0c13 	mov.w	ip, #19
 800db0a:	250b      	movs	r5, #11
 800db0c:	2221      	movs	r2, #33	@ 0x21
 800db0e:	2111      	movs	r1, #17
 800db10:	2009      	movs	r0, #9
 800db12:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800db16:	b923      	cbnz	r3, 800db22 <uxr_buffer_create_datawriter_bin+0x86>
 800db18:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800db1c:	4672      	mov	r2, lr
 800db1e:	4661      	mov	r1, ip
 800db20:	4628      	mov	r0, r5
 800db22:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800db26:	2b01      	cmp	r3, #1
 800db28:	d025      	beq.n	800db76 <uxr_buffer_create_datawriter_bin+0xda>
 800db2a:	2b03      	cmp	r3, #3
 800db2c:	d029      	beq.n	800db82 <uxr_buffer_create_datawriter_bin+0xe6>
 800db2e:	b32b      	cbz	r3, 800db7c <uxr_buffer_create_datawriter_bin+0xe0>
 800db30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db34:	a921      	add	r1, sp, #132	@ 0x84
 800db36:	a806      	add	r0, sp, #24
 800db38:	f7ff fe5c 	bl	800d7f4 <ucdr_init_buffer>
 800db3c:	a90e      	add	r1, sp, #56	@ 0x38
 800db3e:	a806      	add	r0, sp, #24
 800db40:	f002 fe34 	bl	80107ac <uxr_serialize_OBJK_DataWriter_Binary>
 800db44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db46:	f8cd 8000 	str.w	r8, [sp]
 800db4a:	9401      	str	r4, [sp, #4]
 800db4c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800db50:	60e3      	str	r3, [r4, #12]
 800db52:	4630      	mov	r0, r6
 800db54:	b29b      	uxth	r3, r3
 800db56:	f7ff fedd 	bl	800d914 <uxr_common_create_entity>
 800db5a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800db5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db62:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800db66:	f04f 0c12 	mov.w	ip, #18
 800db6a:	250a      	movs	r5, #10
 800db6c:	2220      	movs	r2, #32
 800db6e:	2110      	movs	r1, #16
 800db70:	2008      	movs	r0, #8
 800db72:	2702      	movs	r7, #2
 800db74:	e7cd      	b.n	800db12 <uxr_buffer_create_datawriter_bin+0x76>
 800db76:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800db7a:	e7d9      	b.n	800db30 <uxr_buffer_create_datawriter_bin+0x94>
 800db7c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800db80:	e7d6      	b.n	800db30 <uxr_buffer_create_datawriter_bin+0x94>
 800db82:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800db86:	e7d3      	b.n	800db30 <uxr_buffer_create_datawriter_bin+0x94>

0800db88 <get_custom_error>:
 800db88:	4b01      	ldr	r3, [pc, #4]	@ (800db90 <get_custom_error+0x8>)
 800db8a:	7818      	ldrb	r0, [r3, #0]
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	2000ca84 	.word	0x2000ca84

0800db94 <recv_custom_msg>:
 800db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db98:	4693      	mov	fp, r2
 800db9a:	b089      	sub	sp, #36	@ 0x24
 800db9c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800dba0:	9305      	str	r3, [sp, #20]
 800dba2:	468a      	mov	sl, r1
 800dba4:	2100      	movs	r1, #0
 800dba6:	4604      	mov	r4, r0
 800dba8:	f88d 101e 	strb.w	r1, [sp, #30]
 800dbac:	b322      	cbz	r2, 800dbf8 <recv_custom_msg+0x64>
 800dbae:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800dbb2:	f10d 081f 	add.w	r8, sp, #31
 800dbb6:	af05      	add	r7, sp, #20
 800dbb8:	f10d 061e 	add.w	r6, sp, #30
 800dbbc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800dbc0:	e002      	b.n	800dbc8 <recv_custom_msg+0x34>
 800dbc2:	9b05      	ldr	r3, [sp, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd0f      	ble.n	800dbe8 <recv_custom_msg+0x54>
 800dbc8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800dbcc:	4623      	mov	r3, r4
 800dbce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800dbd2:	e9cd 5600 	strd	r5, r6, [sp]
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	4648      	mov	r0, r9
 800dbda:	f001 fca3 	bl	800f524 <uxr_read_framed_msg>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d0ef      	beq.n	800dbc2 <recv_custom_msg+0x2e>
 800dbe2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800dbe6:	b1b3      	cbz	r3, 800dc16 <recv_custom_msg+0x82>
 800dbe8:	4b0f      	ldr	r3, [pc, #60]	@ (800dc28 <recv_custom_msg+0x94>)
 800dbea:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800dbee:	701a      	strb	r2, [r3, #0]
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	b009      	add	sp, #36	@ 0x24
 800dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf8:	f10d 021f 	add.w	r2, sp, #31
 800dbfc:	9200      	str	r2, [sp, #0]
 800dbfe:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800dc02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc06:	4601      	mov	r1, r0
 800dc08:	47a8      	blx	r5
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d0ec      	beq.n	800dbe8 <recv_custom_msg+0x54>
 800dc0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1e8      	bne.n	800dbe8 <recv_custom_msg+0x54>
 800dc16:	f8cb 0000 	str.w	r0, [fp]
 800dc1a:	2001      	movs	r0, #1
 800dc1c:	f8ca 4000 	str.w	r4, [sl]
 800dc20:	b009      	add	sp, #36	@ 0x24
 800dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc26:	bf00      	nop
 800dc28:	2000ca84 	.word	0x2000ca84

0800dc2c <send_custom_msg>:
 800dc2c:	b530      	push	{r4, r5, lr}
 800dc2e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800dc32:	b087      	sub	sp, #28
 800dc34:	4615      	mov	r5, r2
 800dc36:	b974      	cbnz	r4, 800dc56 <send_custom_msg+0x2a>
 800dc38:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800dc3c:	f10d 0317 	add.w	r3, sp, #23
 800dc40:	47a0      	blx	r4
 800dc42:	b108      	cbz	r0, 800dc48 <send_custom_msg+0x1c>
 800dc44:	42a8      	cmp	r0, r5
 800dc46:	d015      	beq.n	800dc74 <send_custom_msg+0x48>
 800dc48:	4b0c      	ldr	r3, [pc, #48]	@ (800dc7c <send_custom_msg+0x50>)
 800dc4a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800dc4e:	701a      	strb	r2, [r3, #0]
 800dc50:	2000      	movs	r0, #0
 800dc52:	b007      	add	sp, #28
 800dc54:	bd30      	pop	{r4, r5, pc}
 800dc56:	460b      	mov	r3, r1
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f10d 0117 	add.w	r1, sp, #23
 800dc5e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800dc62:	4602      	mov	r2, r0
 800dc64:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800dc68:	9500      	str	r5, [sp, #0]
 800dc6a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800dc6e:	f001 fa61 	bl	800f134 <uxr_write_framed_msg>
 800dc72:	e7e6      	b.n	800dc42 <send_custom_msg+0x16>
 800dc74:	2001      	movs	r0, #1
 800dc76:	b007      	add	sp, #28
 800dc78:	bd30      	pop	{r4, r5, pc}
 800dc7a:	bf00      	nop
 800dc7c:	2000ca84 	.word	0x2000ca84

0800dc80 <uxr_set_custom_transport_callbacks>:
 800dc80:	b410      	push	{r4}
 800dc82:	9c01      	ldr	r4, [sp, #4]
 800dc84:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800dc88:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800dc8c:	9b02      	ldr	r3, [sp, #8]
 800dc8e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800dc92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc96:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800dc9a:	4770      	bx	lr

0800dc9c <uxr_init_custom_transport>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800dca2:	b303      	cbz	r3, 800dce6 <uxr_init_custom_transport+0x4a>
 800dca4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800dca8:	4604      	mov	r4, r0
 800dcaa:	b1e2      	cbz	r2, 800dce6 <uxr_init_custom_transport+0x4a>
 800dcac:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800dcb0:	b1ca      	cbz	r2, 800dce6 <uxr_init_custom_transport+0x4a>
 800dcb2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800dcb6:	b1b2      	cbz	r2, 800dce6 <uxr_init_custom_transport+0x4a>
 800dcb8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800dcbc:	4798      	blx	r3
 800dcbe:	4605      	mov	r5, r0
 800dcc0:	b188      	cbz	r0, 800dce6 <uxr_init_custom_transport+0x4a>
 800dcc2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800dcc6:	b98b      	cbnz	r3, 800dcec <uxr_init_custom_transport+0x50>
 800dcc8:	490b      	ldr	r1, [pc, #44]	@ (800dcf8 <uxr_init_custom_transport+0x5c>)
 800dcca:	4b0c      	ldr	r3, [pc, #48]	@ (800dcfc <uxr_init_custom_transport+0x60>)
 800dccc:	4a0c      	ldr	r2, [pc, #48]	@ (800dd00 <uxr_init_custom_transport+0x64>)
 800dcce:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800dcd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dcd6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800dcda:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800dcde:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800dce2:	4628      	mov	r0, r5
 800dce4:	bd38      	pop	{r3, r4, r5, pc}
 800dce6:	2500      	movs	r5, #0
 800dce8:	4628      	mov	r0, r5
 800dcea:	bd38      	pop	{r3, r4, r5, pc}
 800dcec:	2100      	movs	r1, #0
 800dcee:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800dcf2:	f001 fa19 	bl	800f128 <uxr_init_framing_io>
 800dcf6:	e7e7      	b.n	800dcc8 <uxr_init_custom_transport+0x2c>
 800dcf8:	0800dc2d 	.word	0x0800dc2d
 800dcfc:	0800db95 	.word	0x0800db95
 800dd00:	0800db89 	.word	0x0800db89

0800dd04 <uxr_close_custom_transport>:
 800dd04:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800dd08:	4718      	bx	r3
 800dd0a:	bf00      	nop

0800dd0c <uxr_object_id>:
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f88d 1006 	strb.w	r1, [sp, #6]
 800dd14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dd18:	f360 030f 	bfi	r3, r0, #0, #16
 800dd1c:	f362 431f 	bfi	r3, r2, #16, #16
 800dd20:	4618      	mov	r0, r3
 800dd22:	b002      	add	sp, #8
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop

0800dd28 <uxr_object_id_from_raw>:
 800dd28:	7843      	ldrb	r3, [r0, #1]
 800dd2a:	7801      	ldrb	r1, [r0, #0]
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	f003 020f 	and.w	r2, r3, #15
 800dd32:	f88d 2006 	strb.w	r2, [sp, #6]
 800dd36:	091b      	lsrs	r3, r3, #4
 800dd38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dd3c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800dd40:	2000      	movs	r0, #0
 800dd42:	f363 000f 	bfi	r0, r3, #0, #16
 800dd46:	f362 401f 	bfi	r0, r2, #16, #16
 800dd4a:	b002      	add	sp, #8
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop

0800dd50 <uxr_object_id_to_raw>:
 800dd50:	4602      	mov	r2, r0
 800dd52:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800dd56:	b082      	sub	sp, #8
 800dd58:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800dd5c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800dd60:	f881 c000 	strb.w	ip, [r1]
 800dd64:	7048      	strb	r0, [r1, #1]
 800dd66:	b002      	add	sp, #8
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop

0800dd6c <uxr_buffer_cancel_data>:
 800dd6c:	b510      	push	{r4, lr}
 800dd6e:	b094      	sub	sp, #80	@ 0x50
 800dd70:	2300      	movs	r3, #0
 800dd72:	9202      	str	r2, [sp, #8]
 800dd74:	9205      	str	r2, [sp, #20]
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dd7e:	f88d 301e 	strb.w	r3, [sp, #30]
 800dd82:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800dd86:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800dd8a:	2308      	movs	r3, #8
 800dd8c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	2210      	movs	r2, #16
 800dd94:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd96:	4604      	mov	r4, r0
 800dd98:	9103      	str	r1, [sp, #12]
 800dd9a:	f001 f85f 	bl	800ee5c <uxr_prepare_stream_to_write_submessage>
 800dd9e:	b918      	cbnz	r0, 800dda8 <uxr_buffer_cancel_data+0x3c>
 800dda0:	4604      	mov	r4, r0
 800dda2:	4620      	mov	r0, r4
 800dda4:	b014      	add	sp, #80	@ 0x50
 800dda6:	bd10      	pop	{r4, pc}
 800dda8:	9905      	ldr	r1, [sp, #20]
 800ddaa:	aa06      	add	r2, sp, #24
 800ddac:	4620      	mov	r0, r4
 800ddae:	f001 f98b 	bl	800f0c8 <uxr_init_base_object_request>
 800ddb2:	a906      	add	r1, sp, #24
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	a80c      	add	r0, sp, #48	@ 0x30
 800ddb8:	f003 f82c 	bl	8010e14 <uxr_serialize_READ_DATA_Payload>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	b014      	add	sp, #80	@ 0x50
 800ddc0:	bd10      	pop	{r4, pc}
 800ddc2:	bf00      	nop

0800ddc4 <read_submessage_format>:
 800ddc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddc8:	b095      	sub	sp, #84	@ 0x54
 800ddca:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ddce:	b113      	cbz	r3, 800ddd6 <read_submessage_format+0x12>
 800ddd0:	b015      	add	sp, #84	@ 0x54
 800ddd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	4615      	mov	r5, r2
 800ddda:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ddde:	4607      	mov	r7, r0
 800dde0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800dde2:	9004      	str	r0, [sp, #16]
 800dde4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800dde6:	9005      	str	r0, [sp, #20]
 800dde8:	1a52      	subs	r2, r2, r1
 800ddea:	a80c      	add	r0, sp, #48	@ 0x30
 800ddec:	4699      	mov	r9, r3
 800ddee:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800ddf2:	f7ff fcff 	bl	800d7f4 <ucdr_init_buffer>
 800ddf6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ddfa:	a80c      	add	r0, sp, #48	@ 0x30
 800ddfc:	f7ff fcce 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 800de00:	69e2      	ldr	r2, [r4, #28]
 800de02:	b19a      	cbz	r2, 800de2c <read_submessage_format+0x68>
 800de04:	f1b8 0f07 	cmp.w	r8, #7
 800de08:	f882 9014 	strb.w	r9, [r2, #20]
 800de0c:	d040      	beq.n	800de90 <read_submessage_format+0xcc>
 800de0e:	f1b8 0f08 	cmp.w	r8, #8
 800de12:	d02e      	beq.n	800de72 <read_submessage_format+0xae>
 800de14:	f1b8 0f06 	cmp.w	r8, #6
 800de18:	d011      	beq.n	800de3e <read_submessage_format+0x7a>
 800de1a:	2301      	movs	r3, #1
 800de1c:	7513      	strb	r3, [r2, #20]
 800de1e:	4629      	mov	r1, r5
 800de20:	4620      	mov	r0, r4
 800de22:	f7ff fd37 	bl	800d894 <ucdr_advance_buffer>
 800de26:	b015      	add	sp, #84	@ 0x54
 800de28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de2c:	f1b8 0f07 	cmp.w	r8, #7
 800de30:	d02e      	beq.n	800de90 <read_submessage_format+0xcc>
 800de32:	f1b8 0f08 	cmp.w	r8, #8
 800de36:	d01c      	beq.n	800de72 <read_submessage_format+0xae>
 800de38:	f1b8 0f06 	cmp.w	r8, #6
 800de3c:	d1ef      	bne.n	800de1e <read_submessage_format+0x5a>
 800de3e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800de42:	f1b8 0f00 	cmp.w	r8, #0
 800de46:	d011      	beq.n	800de6c <read_submessage_format+0xa8>
 800de48:	ab0c      	add	r3, sp, #48	@ 0x30
 800de4a:	e9cd 3500 	strd	r3, r5, [sp]
 800de4e:	2306      	movs	r3, #6
 800de50:	f88d 3016 	strb.w	r3, [sp, #22]
 800de54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de58:	9302      	str	r3, [sp, #8]
 800de5a:	4632      	mov	r2, r6
 800de5c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800de60:	4638      	mov	r0, r7
 800de62:	47c0      	blx	r8
 800de64:	2301      	movs	r3, #1
 800de66:	69e2      	ldr	r2, [r4, #28]
 800de68:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800de6c:	2a00      	cmp	r2, #0
 800de6e:	d1d4      	bne.n	800de1a <read_submessage_format+0x56>
 800de70:	e7d5      	b.n	800de1e <read_submessage_format+0x5a>
 800de72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800de76:	2b00      	cmp	r3, #0
 800de78:	d0f8      	beq.n	800de6c <read_submessage_format+0xa8>
 800de7a:	a906      	add	r1, sp, #24
 800de7c:	a80c      	add	r0, sp, #48	@ 0x30
 800de7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800de82:	f003 f89b 	bl	8010fbc <uxr_deserialize_SampleIdentity>
 800de86:	b9a0      	cbnz	r0, 800deb2 <read_submessage_format+0xee>
 800de88:	69e2      	ldr	r2, [r4, #28]
 800de8a:	2a00      	cmp	r2, #0
 800de8c:	d1c5      	bne.n	800de1a <read_submessage_format+0x56>
 800de8e:	e7c6      	b.n	800de1e <read_submessage_format+0x5a>
 800de90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de94:	b13b      	cbz	r3, 800dea6 <read_submessage_format+0xe2>
 800de96:	a906      	add	r1, sp, #24
 800de98:	a80c      	add	r0, sp, #48	@ 0x30
 800de9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800de9e:	f002 fd53 	bl	8010948 <uxr_deserialize_BaseObjectRequest>
 800dea2:	bb60      	cbnz	r0, 800defe <read_submessage_format+0x13a>
 800dea4:	69e2      	ldr	r2, [r4, #28]
 800dea6:	68a3      	ldr	r3, [r4, #8]
 800dea8:	442b      	add	r3, r5
 800deaa:	60a3      	str	r3, [r4, #8]
 800deac:	2a00      	cmp	r2, #0
 800deae:	d1b4      	bne.n	800de1a <read_submessage_format+0x56>
 800deb0:	e7b5      	b.n	800de1e <read_submessage_format+0x5a>
 800deb2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800deb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800deb8:	1a52      	subs	r2, r2, r1
 800deba:	eba8 0803 	sub.w	r8, r8, r3
 800debe:	a80c      	add	r0, sp, #48	@ 0x30
 800dec0:	f7ff fc98 	bl	800d7f4 <ucdr_init_buffer>
 800dec4:	44a8      	add	r8, r5
 800dec6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800deca:	a80c      	add	r0, sp, #48	@ 0x30
 800decc:	f7ff fc66 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 800ded0:	fa1f f888 	uxth.w	r8, r8
 800ded4:	ab0c      	add	r3, sp, #48	@ 0x30
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	f8cd 8004 	str.w	r8, [sp, #4]
 800dedc:	2108      	movs	r1, #8
 800dede:	f88d 1016 	strb.w	r1, [sp, #22]
 800dee2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800dee6:	9102      	str	r1, [sp, #8]
 800dee8:	ab06      	add	r3, sp, #24
 800deea:	4632      	mov	r2, r6
 800deec:	9905      	ldr	r1, [sp, #20]
 800deee:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800def2:	4638      	mov	r0, r7
 800def4:	47b0      	blx	r6
 800def6:	2301      	movs	r3, #1
 800def8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800defc:	e7c4      	b.n	800de88 <read_submessage_format+0xc4>
 800defe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800df02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df04:	1a52      	subs	r2, r2, r1
 800df06:	a80c      	add	r0, sp, #48	@ 0x30
 800df08:	eba8 0803 	sub.w	r8, r8, r3
 800df0c:	f7ff fc72 	bl	800d7f4 <ucdr_init_buffer>
 800df10:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800df14:	a80c      	add	r0, sp, #48	@ 0x30
 800df16:	f7ff fc41 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 800df1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800df22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800df26:	44a8      	add	r8, r5
 800df28:	fa1f f888 	uxth.w	r8, r8
 800df2c:	f8cd 8004 	str.w	r8, [sp, #4]
 800df30:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800df34:	2107      	movs	r1, #7
 800df36:	f88d 1016 	strb.w	r1, [sp, #22]
 800df3a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800df3e:	9102      	str	r1, [sp, #8]
 800df40:	4632      	mov	r2, r6
 800df42:	b29b      	uxth	r3, r3
 800df44:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800df48:	9905      	ldr	r1, [sp, #20]
 800df4a:	4638      	mov	r0, r7
 800df4c:	47b0      	blx	r6
 800df4e:	2301      	movs	r3, #1
 800df50:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800df54:	e7a6      	b.n	800dea4 <read_submessage_format+0xe0>
 800df56:	bf00      	nop

0800df58 <on_get_fragmentation_info>:
 800df58:	b500      	push	{lr}
 800df5a:	b08b      	sub	sp, #44	@ 0x2c
 800df5c:	4601      	mov	r1, r0
 800df5e:	2204      	movs	r2, #4
 800df60:	a802      	add	r0, sp, #8
 800df62:	f7ff fc47 	bl	800d7f4 <ucdr_init_buffer>
 800df66:	f10d 0305 	add.w	r3, sp, #5
 800df6a:	f10d 0206 	add.w	r2, sp, #6
 800df6e:	a901      	add	r1, sp, #4
 800df70:	a802      	add	r0, sp, #8
 800df72:	f001 febd 	bl	800fcf0 <uxr_read_submessage_header>
 800df76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800df7a:	2b0d      	cmp	r3, #13
 800df7c:	d003      	beq.n	800df86 <on_get_fragmentation_info+0x2e>
 800df7e:	2000      	movs	r0, #0
 800df80:	b00b      	add	sp, #44	@ 0x2c
 800df82:	f85d fb04 	ldr.w	pc, [sp], #4
 800df86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800df8a:	f013 0f02 	tst.w	r3, #2
 800df8e:	bf14      	ite	ne
 800df90:	2002      	movne	r0, #2
 800df92:	2001      	moveq	r0, #1
 800df94:	b00b      	add	sp, #44	@ 0x2c
 800df96:	f85d fb04 	ldr.w	pc, [sp], #4
 800df9a:	bf00      	nop

0800df9c <read_submessage_get_info>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	2500      	movs	r5, #0
 800dfa0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800dfaa:	460e      	mov	r6, r1
 800dfac:	a810      	add	r0, sp, #64	@ 0x40
 800dfae:	4629      	mov	r1, r5
 800dfb0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800dfb4:	f008 fef0 	bl	8016d98 <memset>
 800dfb8:	a903      	add	r1, sp, #12
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f002 fe6c 	bl	8010c98 <uxr_deserialize_GET_INFO_Payload>
 800dfc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800dfc4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f001 f875 	bl	800f0b8 <uxr_session_header_offset>
 800dfce:	462b      	mov	r3, r5
 800dfd0:	9000      	str	r0, [sp, #0]
 800dfd2:	220c      	movs	r2, #12
 800dfd4:	a905      	add	r1, sp, #20
 800dfd6:	a808      	add	r0, sp, #32
 800dfd8:	f7ff fbfa 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800dfdc:	a910      	add	r1, sp, #64	@ 0x40
 800dfde:	a808      	add	r0, sp, #32
 800dfe0:	f002 fecc 	bl	8010d7c <uxr_serialize_INFO_Payload>
 800dfe4:	9b08      	ldr	r3, [sp, #32]
 800dfe6:	462a      	mov	r2, r5
 800dfe8:	4629      	mov	r1, r5
 800dfea:	4620      	mov	r0, r4
 800dfec:	f001 f80e 	bl	800f00c <uxr_stamp_session_header>
 800dff0:	a808      	add	r0, sp, #32
 800dff2:	f7ff fc2b 	bl	800d84c <ucdr_buffer_length>
 800dff6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dff8:	4602      	mov	r2, r0
 800dffa:	a905      	add	r1, sp, #20
 800dffc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e000:	47a0      	blx	r4
 800e002:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e006:	bd70      	pop	{r4, r5, r6, pc}

0800e008 <write_submessage_acknack.isra.0>:
 800e008:	b570      	push	{r4, r5, r6, lr}
 800e00a:	b092      	sub	sp, #72	@ 0x48
 800e00c:	4605      	mov	r5, r0
 800e00e:	460e      	mov	r6, r1
 800e010:	4614      	mov	r4, r2
 800e012:	f001 f851 	bl	800f0b8 <uxr_session_header_offset>
 800e016:	a905      	add	r1, sp, #20
 800e018:	9000      	str	r0, [sp, #0]
 800e01a:	2300      	movs	r3, #0
 800e01c:	a80a      	add	r0, sp, #40	@ 0x28
 800e01e:	2211      	movs	r2, #17
 800e020:	f7ff fbd6 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800e024:	2218      	movs	r2, #24
 800e026:	fb02 5404 	mla	r4, r2, r4, r5
 800e02a:	2300      	movs	r3, #0
 800e02c:	2205      	movs	r2, #5
 800e02e:	3450      	adds	r4, #80	@ 0x50
 800e030:	210a      	movs	r1, #10
 800e032:	a80a      	add	r0, sp, #40	@ 0x28
 800e034:	f001 fe42 	bl	800fcbc <uxr_buffer_submessage_header>
 800e038:	a903      	add	r1, sp, #12
 800e03a:	4620      	mov	r0, r4
 800e03c:	f007 fb4c 	bl	80156d8 <uxr_compute_acknack>
 800e040:	ba40      	rev16	r0, r0
 800e042:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e046:	a903      	add	r1, sp, #12
 800e048:	a80a      	add	r0, sp, #40	@ 0x28
 800e04a:	f88d 6010 	strb.w	r6, [sp, #16]
 800e04e:	f002 ff05 	bl	8010e5c <uxr_serialize_ACKNACK_Payload>
 800e052:	2200      	movs	r2, #0
 800e054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e056:	4611      	mov	r1, r2
 800e058:	4628      	mov	r0, r5
 800e05a:	f000 ffd7 	bl	800f00c <uxr_stamp_session_header>
 800e05e:	a80a      	add	r0, sp, #40	@ 0x28
 800e060:	f7ff fbf4 	bl	800d84c <ucdr_buffer_length>
 800e064:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e066:	4602      	mov	r2, r0
 800e068:	a905      	add	r1, sp, #20
 800e06a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e06e:	47a0      	blx	r4
 800e070:	b012      	add	sp, #72	@ 0x48
 800e072:	bd70      	pop	{r4, r5, r6, pc}
 800e074:	0000      	movs	r0, r0
	...

0800e078 <uxr_init_session>:
 800e078:	b510      	push	{r4, lr}
 800e07a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e0b0 <uxr_init_session+0x38>
 800e07e:	2300      	movs	r3, #0
 800e080:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e084:	4604      	mov	r4, r0
 800e086:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e08a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e08e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e092:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e096:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e09a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e09e:	2181      	movs	r1, #129	@ 0x81
 800e0a0:	f000 ff20 	bl	800eee4 <uxr_init_session_info>
 800e0a4:	f104 0008 	add.w	r0, r4, #8
 800e0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0ac:	f001 bd22 	b.w	800faf4 <uxr_init_stream_storage>
	...

0800e0b8 <uxr_set_status_callback>:
 800e0b8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop

0800e0c0 <uxr_set_topic_callback>:
 800e0c0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop

0800e0c8 <uxr_set_request_callback>:
 800e0c8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop

0800e0d0 <uxr_set_reply_callback>:
 800e0d0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e0d4:	4770      	bx	lr
 800e0d6:	bf00      	nop

0800e0d8 <uxr_create_output_best_effort_stream>:
 800e0d8:	b510      	push	{r4, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	e9cd 2100 	strd	r2, r1, [sp]
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	f000 ffe9 	bl	800f0b8 <uxr_session_header_offset>
 800e0e6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	f104 0008 	add.w	r0, r4, #8
 800e0f0:	b004      	add	sp, #16
 800e0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0f6:	f001 bd47 	b.w	800fb88 <uxr_add_output_best_effort_buffer>
 800e0fa:	bf00      	nop

0800e0fc <uxr_create_output_reliable_stream>:
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e104:	4604      	mov	r4, r0
 800e106:	9303      	str	r3, [sp, #12]
 800e108:	f000 ffd6 	bl	800f0b8 <uxr_session_header_offset>
 800e10c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e110:	9000      	str	r0, [sp, #0]
 800e112:	9905      	ldr	r1, [sp, #20]
 800e114:	f104 0008 	add.w	r0, r4, #8
 800e118:	f001 fd4a 	bl	800fbb0 <uxr_add_output_reliable_buffer>
 800e11c:	2200      	movs	r2, #0
 800e11e:	b2c3      	uxtb	r3, r0
 800e120:	f363 0207 	bfi	r2, r3, #0, #8
 800e124:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e128:	f363 220f 	bfi	r2, r3, #8, #8
 800e12c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e130:	f363 4217 	bfi	r2, r3, #16, #8
 800e134:	0e03      	lsrs	r3, r0, #24
 800e136:	f363 621f 	bfi	r2, r3, #24, #8
 800e13a:	4610      	mov	r0, r2
 800e13c:	b008      	add	sp, #32
 800e13e:	bd10      	pop	{r4, pc}

0800e140 <uxr_create_input_best_effort_stream>:
 800e140:	b082      	sub	sp, #8
 800e142:	3008      	adds	r0, #8
 800e144:	b002      	add	sp, #8
 800e146:	f001 bd4d 	b.w	800fbe4 <uxr_add_input_best_effort_buffer>
 800e14a:	bf00      	nop

0800e14c <uxr_create_input_reliable_stream>:
 800e14c:	b510      	push	{r4, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	4c0b      	ldr	r4, [pc, #44]	@ (800e180 <uxr_create_input_reliable_stream+0x34>)
 800e152:	9400      	str	r4, [sp, #0]
 800e154:	3008      	adds	r0, #8
 800e156:	f001 fd5b 	bl	800fc10 <uxr_add_input_reliable_buffer>
 800e15a:	2200      	movs	r2, #0
 800e15c:	b2c3      	uxtb	r3, r0
 800e15e:	f363 0207 	bfi	r2, r3, #0, #8
 800e162:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e166:	f363 220f 	bfi	r2, r3, #8, #8
 800e16a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e16e:	f363 4217 	bfi	r2, r3, #16, #8
 800e172:	0e03      	lsrs	r3, r0, #24
 800e174:	f363 621f 	bfi	r2, r3, #24, #8
 800e178:	4610      	mov	r0, r2
 800e17a:	b004      	add	sp, #16
 800e17c:	bd10      	pop	{r4, pc}
 800e17e:	bf00      	nop
 800e180:	0800df59 	.word	0x0800df59

0800e184 <uxr_epoch_nanos>:
 800e184:	b510      	push	{r4, lr}
 800e186:	4604      	mov	r4, r0
 800e188:	f001 fdf8 	bl	800fd7c <uxr_nanos>
 800e18c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800e190:	1ac0      	subs	r0, r0, r3
 800e192:	eb61 0102 	sbc.w	r1, r1, r2
 800e196:	bd10      	pop	{r4, pc}

0800e198 <uxr_flash_output_streams>:
 800e198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e19c:	7e03      	ldrb	r3, [r0, #24]
 800e19e:	b084      	sub	sp, #16
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d035      	beq.n	800e212 <uxr_flash_output_streams+0x7a>
 800e1a6:	f04f 0900 	mov.w	r9, #0
 800e1aa:	4648      	mov	r0, r9
 800e1ac:	f10d 0802 	add.w	r8, sp, #2
 800e1b0:	af03      	add	r7, sp, #12
 800e1b2:	ae02      	add	r6, sp, #8
 800e1b4:	e006      	b.n	800e1c4 <uxr_flash_output_streams+0x2c>
 800e1b6:	7e23      	ldrb	r3, [r4, #24]
 800e1b8:	f109 0901 	add.w	r9, r9, #1
 800e1bc:	fa5f f089 	uxtb.w	r0, r9
 800e1c0:	4283      	cmp	r3, r0
 800e1c2:	d926      	bls.n	800e212 <uxr_flash_output_streams+0x7a>
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e1cc:	f001 fc3e 	bl	800fa4c <uxr_stream_id>
 800e1d0:	3508      	adds	r5, #8
 800e1d2:	4684      	mov	ip, r0
 800e1d4:	4643      	mov	r3, r8
 800e1d6:	463a      	mov	r2, r7
 800e1d8:	4631      	mov	r1, r6
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f8cd c004 	str.w	ip, [sp, #4]
 800e1e0:	f007 fb00 	bl	80157e4 <uxr_prepare_best_effort_buffer_to_send>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d0e6      	beq.n	800e1b6 <uxr_flash_output_streams+0x1e>
 800e1e8:	9b02      	ldr	r3, [sp, #8]
 800e1ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e1ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f000 ff0a 	bl	800f00c <uxr_stamp_session_header>
 800e1f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e1fa:	9a03      	ldr	r2, [sp, #12]
 800e1fc:	685d      	ldr	r5, [r3, #4]
 800e1fe:	6818      	ldr	r0, [r3, #0]
 800e200:	9902      	ldr	r1, [sp, #8]
 800e202:	47a8      	blx	r5
 800e204:	f109 0901 	add.w	r9, r9, #1
 800e208:	7e23      	ldrb	r3, [r4, #24]
 800e20a:	fa5f f089 	uxtb.w	r0, r9
 800e20e:	4283      	cmp	r3, r0
 800e210:	d8d8      	bhi.n	800e1c4 <uxr_flash_output_streams+0x2c>
 800e212:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e216:	b38b      	cbz	r3, 800e27c <uxr_flash_output_streams+0xe4>
 800e218:	f04f 0900 	mov.w	r9, #0
 800e21c:	f10d 0802 	add.w	r8, sp, #2
 800e220:	af03      	add	r7, sp, #12
 800e222:	ae02      	add	r6, sp, #8
 800e224:	4648      	mov	r0, r9
 800e226:	2201      	movs	r2, #1
 800e228:	2102      	movs	r1, #2
 800e22a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800e22e:	f001 fc0d 	bl	800fa4c <uxr_stream_id>
 800e232:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e236:	3520      	adds	r5, #32
 800e238:	9001      	str	r0, [sp, #4]
 800e23a:	e00d      	b.n	800e258 <uxr_flash_output_streams+0xc0>
 800e23c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e240:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e244:	9b02      	ldr	r3, [sp, #8]
 800e246:	f000 fee1 	bl	800f00c <uxr_stamp_session_header>
 800e24a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e24c:	9a03      	ldr	r2, [sp, #12]
 800e24e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e252:	9902      	ldr	r1, [sp, #8]
 800e254:	6818      	ldr	r0, [r3, #0]
 800e256:	47d0      	blx	sl
 800e258:	4643      	mov	r3, r8
 800e25a:	463a      	mov	r2, r7
 800e25c:	4631      	mov	r1, r6
 800e25e:	4628      	mov	r0, r5
 800e260:	f007 fcde 	bl	8015c20 <uxr_prepare_next_reliable_buffer_to_send>
 800e264:	4603      	mov	r3, r0
 800e266:	4620      	mov	r0, r4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1e7      	bne.n	800e23c <uxr_flash_output_streams+0xa4>
 800e26c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e270:	f109 0901 	add.w	r9, r9, #1
 800e274:	fa5f f089 	uxtb.w	r0, r9
 800e278:	4283      	cmp	r3, r0
 800e27a:	d8d4      	bhi.n	800e226 <uxr_flash_output_streams+0x8e>
 800e27c:	b004      	add	sp, #16
 800e27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e282:	bf00      	nop

0800e284 <read_submessage_info>:
 800e284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e288:	460d      	mov	r5, r1
 800e28a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e28e:	4669      	mov	r1, sp
 800e290:	4607      	mov	r7, r0
 800e292:	4628      	mov	r0, r5
 800e294:	f002 fc0e 	bl	8010ab4 <uxr_deserialize_BaseObjectReply>
 800e298:	a902      	add	r1, sp, #8
 800e29a:	4604      	mov	r4, r0
 800e29c:	4628      	mov	r0, r5
 800e29e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e2a2:	f7fe fae3 	bl	800c86c <ucdr_deserialize_bool>
 800e2a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e2aa:	4004      	ands	r4, r0
 800e2ac:	b2e4      	uxtb	r4, r4
 800e2ae:	b95b      	cbnz	r3, 800e2c8 <read_submessage_info+0x44>
 800e2b0:	a987      	add	r1, sp, #540	@ 0x21c
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f7fe fada 	bl	800c86c <ucdr_deserialize_bool>
 800e2b8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800e2bc:	4606      	mov	r6, r0
 800e2be:	b94b      	cbnz	r3, 800e2d4 <read_submessage_info+0x50>
 800e2c0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c8:	a903      	add	r1, sp, #12
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f002 fa9a 	bl	8010804 <uxr_deserialize_ObjectVariant>
 800e2d0:	4004      	ands	r4, r0
 800e2d2:	e7ed      	b.n	800e2b0 <read_submessage_info+0x2c>
 800e2d4:	a988      	add	r1, sp, #544	@ 0x220
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f7fe faf6 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 800e2dc:	4234      	tst	r4, r6
 800e2de:	d0ef      	beq.n	800e2c0 <read_submessage_info+0x3c>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d0ed      	beq.n	800e2c0 <read_submessage_info+0x3c>
 800e2e4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800e2e8:	2b0d      	cmp	r3, #13
 800e2ea:	d1e9      	bne.n	800e2c0 <read_submessage_info+0x3c>
 800e2ec:	a98a      	add	r1, sp, #552	@ 0x228
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	f7ff f890 	bl	800d414 <ucdr_deserialize_int16_t>
 800e2f4:	b140      	cbz	r0, 800e308 <read_submessage_info+0x84>
 800e2f6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	dd07      	ble.n	800e30e <read_submessage_info+0x8a>
 800e2fe:	f1b8 0f00 	cmp.w	r8, #0
 800e302:	bf14      	ite	ne
 800e304:	2001      	movne	r0, #1
 800e306:	2002      	moveq	r0, #2
 800e308:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800e30c:	e7d8      	b.n	800e2c0 <read_submessage_info+0x3c>
 800e30e:	2000      	movs	r0, #0
 800e310:	e7fa      	b.n	800e308 <read_submessage_info+0x84>
 800e312:	bf00      	nop

0800e314 <read_submessage_list>:
 800e314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e318:	b097      	sub	sp, #92	@ 0x5c
 800e31a:	4ec1      	ldr	r6, [pc, #772]	@ (800e620 <read_submessage_list+0x30c>)
 800e31c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e31e:	4604      	mov	r4, r0
 800e320:	460d      	mov	r5, r1
 800e322:	f04f 0801 	mov.w	r8, #1
 800e326:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e32a:	aa0c      	add	r2, sp, #48	@ 0x30
 800e32c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e330:	4628      	mov	r0, r5
 800e332:	f001 fcdd 	bl	800fcf0 <uxr_read_submessage_header>
 800e336:	2800      	cmp	r0, #0
 800e338:	f000 813e 	beq.w	800e5b8 <read_submessage_list+0x2a4>
 800e33c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800e340:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800e344:	3b02      	subs	r3, #2
 800e346:	2b0d      	cmp	r3, #13
 800e348:	d8ed      	bhi.n	800e326 <read_submessage_list+0x12>
 800e34a:	a101      	add	r1, pc, #4	@ (adr r1, 800e350 <read_submessage_list+0x3c>)
 800e34c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e350:	0800e5af 	.word	0x0800e5af
 800e354:	0800e327 	.word	0x0800e327
 800e358:	0800e59f 	.word	0x0800e59f
 800e35c:	0800e53d 	.word	0x0800e53d
 800e360:	0800e533 	.word	0x0800e533
 800e364:	0800e327 	.word	0x0800e327
 800e368:	0800e327 	.word	0x0800e327
 800e36c:	0800e493 	.word	0x0800e493
 800e370:	0800e423 	.word	0x0800e423
 800e374:	0800e3e3 	.word	0x0800e3e3
 800e378:	0800e327 	.word	0x0800e327
 800e37c:	0800e327 	.word	0x0800e327
 800e380:	0800e327 	.word	0x0800e327
 800e384:	0800e389 	.word	0x0800e389
 800e388:	a910      	add	r1, sp, #64	@ 0x40
 800e38a:	4628      	mov	r0, r5
 800e38c:	f002 fdc4 	bl	8010f18 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e390:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800e394:	f1b9 0f00 	cmp.w	r9, #0
 800e398:	f000 8116 	beq.w	800e5c8 <read_submessage_list+0x2b4>
 800e39c:	f001 fcee 	bl	800fd7c <uxr_nanos>
 800e3a0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	468c      	mov	ip, r1
 800e3ac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e3b0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e3b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e3b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e3b8:	468c      	mov	ip, r1
 800e3ba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e3be:	46e2      	mov	sl, ip
 800e3c0:	46bc      	mov	ip, r7
 800e3c2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e3c6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800e3ca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800e3ce:	e9cd 7100 	strd	r7, r1, [sp]
 800e3d2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e3d6:	9106      	str	r1, [sp, #24]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	47c8      	blx	r9
 800e3dc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800e3e0:	e7a1      	b.n	800e326 <read_submessage_list+0x12>
 800e3e2:	a910      	add	r1, sp, #64	@ 0x40
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f002 fd77 	bl	8010ed8 <uxr_deserialize_HEARTBEAT_Payload>
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e3f0:	f001 fb56 	bl	800faa0 <uxr_stream_id_from_raw>
 800e3f4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e3f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	f104 0008 	add.w	r0, r4, #8
 800e400:	f001 fc3c 	bl	800fc7c <uxr_get_input_reliable_stream>
 800e404:	2800      	cmp	r0, #0
 800e406:	d08e      	beq.n	800e326 <read_submessage_list+0x12>
 800e408:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e40c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e410:	f007 f956 	bl	80156c0 <uxr_process_heartbeat>
 800e414:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e418:	463a      	mov	r2, r7
 800e41a:	4620      	mov	r0, r4
 800e41c:	f7ff fdf4 	bl	800e008 <write_submessage_acknack.isra.0>
 800e420:	e781      	b.n	800e326 <read_submessage_list+0x12>
 800e422:	a910      	add	r1, sp, #64	@ 0x40
 800e424:	4628      	mov	r0, r5
 800e426:	f002 fd2f 	bl	8010e88 <uxr_deserialize_ACKNACK_Payload>
 800e42a:	2100      	movs	r1, #0
 800e42c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e430:	f001 fb36 	bl	800faa0 <uxr_stream_id_from_raw>
 800e434:	900d      	str	r0, [sp, #52]	@ 0x34
 800e436:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e43a:	f104 0008 	add.w	r0, r4, #8
 800e43e:	f001 fc09 	bl	800fc54 <uxr_get_output_reliable_stream>
 800e442:	4607      	mov	r7, r0
 800e444:	2800      	cmp	r0, #0
 800e446:	f43f af6e 	beq.w	800e326 <read_submessage_list+0x12>
 800e44a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800e44e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800e452:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e456:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e45a:	b289      	uxth	r1, r1
 800e45c:	f007 fc8a 	bl	8015d74 <uxr_process_acknack>
 800e460:	4638      	mov	r0, r7
 800e462:	f007 fc47 	bl	8015cf4 <uxr_begin_output_nack_buffer_it>
 800e466:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e46a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e46e:	e006      	b.n	800e47e <read_submessage_list+0x16a>
 800e470:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e472:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e474:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e478:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e47a:	6818      	ldr	r0, [r3, #0]
 800e47c:	47c8      	blx	r9
 800e47e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e482:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e484:	4651      	mov	r1, sl
 800e486:	4638      	mov	r0, r7
 800e488:	f007 fc36 	bl	8015cf8 <uxr_next_reliable_nack_buffer_to_send>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d1ef      	bne.n	800e470 <read_submessage_list+0x15c>
 800e490:	e749      	b.n	800e326 <read_submessage_list+0x12>
 800e492:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e496:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800e49a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e49e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800e4a2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800e4a6:	4651      	mov	r1, sl
 800e4a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e4ac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800e4b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800e4b4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e4be:	f002 fa43 	bl	8010948 <uxr_deserialize_BaseObjectRequest>
 800e4c2:	4650      	mov	r0, sl
 800e4c4:	a90f      	add	r1, sp, #60	@ 0x3c
 800e4c6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e4ca:	f000 fe1b 	bl	800f104 <uxr_parse_base_object_request>
 800e4ce:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800e4d2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e4d4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800e4d8:	9110      	str	r1, [sp, #64]	@ 0x40
 800e4da:	3f04      	subs	r7, #4
 800e4dc:	f009 090e 	and.w	r9, r9, #14
 800e4e0:	b2bf      	uxth	r7, r7
 800e4e2:	f1bb 0f00 	cmp.w	fp, #0
 800e4e6:	d006      	beq.n	800e4f6 <read_submessage_list+0x1e2>
 800e4e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	4652      	mov	r2, sl
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	47d8      	blx	fp
 800e4f6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e4f8:	b16a      	cbz	r2, 800e516 <read_submessage_list+0x202>
 800e4fa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	3802      	subs	r0, #2
 800e500:	e002      	b.n	800e508 <read_submessage_list+0x1f4>
 800e502:	3101      	adds	r1, #1
 800e504:	4291      	cmp	r1, r2
 800e506:	d006      	beq.n	800e516 <read_submessage_list+0x202>
 800e508:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e50c:	4553      	cmp	r3, sl
 800e50e:	d1f8      	bne.n	800e502 <read_submessage_list+0x1ee>
 800e510:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e512:	2200      	movs	r2, #0
 800e514:	545a      	strb	r2, [r3, r1]
 800e516:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e51a:	9102      	str	r1, [sp, #8]
 800e51c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e51e:	9101      	str	r1, [sp, #4]
 800e520:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e522:	9100      	str	r1, [sp, #0]
 800e524:	464b      	mov	r3, r9
 800e526:	463a      	mov	r2, r7
 800e528:	4629      	mov	r1, r5
 800e52a:	4620      	mov	r0, r4
 800e52c:	f7ff fc4a 	bl	800ddc4 <read_submessage_format>
 800e530:	e6f9      	b.n	800e326 <read_submessage_list+0x12>
 800e532:	4629      	mov	r1, r5
 800e534:	4620      	mov	r0, r4
 800e536:	f7ff fea5 	bl	800e284 <read_submessage_info>
 800e53a:	e6f4      	b.n	800e326 <read_submessage_list+0x12>
 800e53c:	2a00      	cmp	r2, #0
 800e53e:	d03e      	beq.n	800e5be <read_submessage_list+0x2aa>
 800e540:	a910      	add	r1, sp, #64	@ 0x40
 800e542:	4628      	mov	r0, r5
 800e544:	f002 fbfc 	bl	8010d40 <uxr_deserialize_STATUS_Payload>
 800e548:	a90e      	add	r1, sp, #56	@ 0x38
 800e54a:	aa0d      	add	r2, sp, #52	@ 0x34
 800e54c:	a810      	add	r0, sp, #64	@ 0x40
 800e54e:	f000 fdd9 	bl	800f104 <uxr_parse_base_object_request>
 800e552:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800e556:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e558:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800e55c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e560:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e562:	f1ba 0f00 	cmp.w	sl, #0
 800e566:	d006      	beq.n	800e576 <read_submessage_list+0x262>
 800e568:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e56c:	9300      	str	r3, [sp, #0]
 800e56e:	463a      	mov	r2, r7
 800e570:	464b      	mov	r3, r9
 800e572:	4620      	mov	r0, r4
 800e574:	47d0      	blx	sl
 800e576:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e578:	2a00      	cmp	r2, #0
 800e57a:	f43f aed4 	beq.w	800e326 <read_submessage_list+0x12>
 800e57e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e580:	2100      	movs	r1, #0
 800e582:	3802      	subs	r0, #2
 800e584:	e003      	b.n	800e58e <read_submessage_list+0x27a>
 800e586:	3101      	adds	r1, #1
 800e588:	4291      	cmp	r1, r2
 800e58a:	f43f aecc 	beq.w	800e326 <read_submessage_list+0x12>
 800e58e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e592:	42bb      	cmp	r3, r7
 800e594:	d1f7      	bne.n	800e586 <read_submessage_list+0x272>
 800e596:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e598:	f803 9001 	strb.w	r9, [r3, r1]
 800e59c:	e6c3      	b.n	800e326 <read_submessage_list+0x12>
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	f47f aec1 	bne.w	800e326 <read_submessage_list+0x12>
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f000 fcf2 	bl	800ef90 <uxr_read_create_session_status>
 800e5ac:	e6bb      	b.n	800e326 <read_submessage_list+0x12>
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7ff fcf3 	bl	800df9c <read_submessage_get_info>
 800e5b6:	e6b6      	b.n	800e326 <read_submessage_list+0x12>
 800e5b8:	b017      	add	sp, #92	@ 0x5c
 800e5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5be:	4629      	mov	r1, r5
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f000 fcf1 	bl	800efa8 <uxr_read_delete_session_status>
 800e5c6:	e6ae      	b.n	800e326 <read_submessage_list+0x12>
 800e5c8:	f001 fbd8 	bl	800fd7c <uxr_nanos>
 800e5cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e5ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e5d0:	464f      	mov	r7, r9
 800e5d2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e5d6:	1812      	adds	r2, r2, r0
 800e5d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e5da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e5dc:	eb47 0101 	adc.w	r1, r7, r1
 800e5e0:	464f      	mov	r7, r9
 800e5e2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e5e6:	463b      	mov	r3, r7
 800e5e8:	4684      	mov	ip, r0
 800e5ea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e5ee:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e5f2:	eb1c 0c00 	adds.w	ip, ip, r0
 800e5f6:	464f      	mov	r7, r9
 800e5f8:	eb43 0307 	adc.w	r3, r3, r7
 800e5fc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e600:	eb61 0303 	sbc.w	r3, r1, r3
 800e604:	0fda      	lsrs	r2, r3, #31
 800e606:	eb12 020c 	adds.w	r2, r2, ip
 800e60a:	f143 0300 	adc.w	r3, r3, #0
 800e60e:	0852      	lsrs	r2, r2, #1
 800e610:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e614:	105b      	asrs	r3, r3, #1
 800e616:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e61a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e61e:	e6dd      	b.n	800e3dc <read_submessage_list+0xc8>
 800e620:	3b9aca00 	.word	0x3b9aca00

0800e624 <listen_message_reliably>:
 800e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e628:	1e0b      	subs	r3, r1, #0
 800e62a:	b09d      	sub	sp, #116	@ 0x74
 800e62c:	bfb8      	it	lt
 800e62e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e632:	4680      	mov	r8, r0
 800e634:	9305      	str	r3, [sp, #20]
 800e636:	f001 fb87 	bl	800fd48 <uxr_millis>
 800e63a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e63e:	4681      	mov	r9, r0
 800e640:	2a00      	cmp	r2, #0
 800e642:	f000 80a1 	beq.w	800e788 <listen_message_reliably+0x164>
 800e646:	2600      	movs	r6, #0
 800e648:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e64c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e650:	9303      	str	r3, [sp, #12]
 800e652:	4630      	mov	r0, r6
 800e654:	460f      	mov	r7, r1
 800e656:	e00f      	b.n	800e678 <listen_message_reliably+0x54>
 800e658:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e65c:	9903      	ldr	r1, [sp, #12]
 800e65e:	455a      	cmp	r2, fp
 800e660:	f106 0601 	add.w	r6, r6, #1
 800e664:	eb73 0101 	sbcs.w	r1, r3, r1
 800e668:	b2f0      	uxtb	r0, r6
 800e66a:	da01      	bge.n	800e670 <listen_message_reliably+0x4c>
 800e66c:	4693      	mov	fp, r2
 800e66e:	9303      	str	r3, [sp, #12]
 800e670:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e674:	4283      	cmp	r3, r0
 800e676:	d960      	bls.n	800e73a <listen_message_reliably+0x116>
 800e678:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e67c:	2102      	movs	r1, #2
 800e67e:	2201      	movs	r2, #1
 800e680:	f001 f9e4 	bl	800fa4c <uxr_stream_id>
 800e684:	00e4      	lsls	r4, r4, #3
 800e686:	f104 0520 	add.w	r5, r4, #32
 800e68a:	4445      	add	r5, r8
 800e68c:	4601      	mov	r1, r0
 800e68e:	463b      	mov	r3, r7
 800e690:	464a      	mov	r2, r9
 800e692:	4628      	mov	r0, r5
 800e694:	9109      	str	r1, [sp, #36]	@ 0x24
 800e696:	f007 fb03 	bl	8015ca0 <uxr_update_output_stream_heartbeat_timestamp>
 800e69a:	eb08 0304 	add.w	r3, r8, r4
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d0da      	beq.n	800e658 <listen_message_reliably+0x34>
 800e6a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e6a6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e6aa:	9304      	str	r3, [sp, #16]
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	f000 fd03 	bl	800f0b8 <uxr_session_header_offset>
 800e6b2:	3501      	adds	r5, #1
 800e6b4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e6b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e6bc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	2211      	movs	r2, #17
 800e6c4:	9000      	str	r0, [sp, #0]
 800e6c6:	a90c      	add	r1, sp, #48	@ 0x30
 800e6c8:	4650      	mov	r0, sl
 800e6ca:	f7ff f881 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	2205      	movs	r2, #5
 800e6d2:	210b      	movs	r1, #11
 800e6d4:	4650      	mov	r0, sl
 800e6d6:	f001 faf1 	bl	800fcbc <uxr_buffer_submessage_header>
 800e6da:	8968      	ldrh	r0, [r5, #10]
 800e6dc:	2101      	movs	r1, #1
 800e6de:	f007 fba1 	bl	8015e24 <uxr_seq_num_add>
 800e6e2:	892b      	ldrh	r3, [r5, #8]
 800e6e4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	9b04      	ldr	r3, [sp, #16]
 800e6ec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e6f0:	a90a      	add	r1, sp, #40	@ 0x28
 800e6f2:	4650      	mov	r0, sl
 800e6f4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e6f8:	f002 fbda 	bl	8010eb0 <uxr_serialize_HEARTBEAT_Payload>
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	4611      	mov	r1, r2
 800e700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e702:	4640      	mov	r0, r8
 800e704:	f000 fc82 	bl	800f00c <uxr_stamp_session_header>
 800e708:	4650      	mov	r0, sl
 800e70a:	f7ff f89f 	bl	800d84c <ucdr_buffer_length>
 800e70e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e712:	4602      	mov	r2, r0
 800e714:	a90c      	add	r1, sp, #48	@ 0x30
 800e716:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e71a:	4444      	add	r4, r8
 800e71c:	47a8      	blx	r5
 800e71e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e722:	9903      	ldr	r1, [sp, #12]
 800e724:	455a      	cmp	r2, fp
 800e726:	f106 0601 	add.w	r6, r6, #1
 800e72a:	eb73 0101 	sbcs.w	r1, r3, r1
 800e72e:	b2f0      	uxtb	r0, r6
 800e730:	db9c      	blt.n	800e66c <listen_message_reliably+0x48>
 800e732:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e736:	4283      	cmp	r3, r0
 800e738:	d89e      	bhi.n	800e678 <listen_message_reliably+0x54>
 800e73a:	9a03      	ldr	r2, [sp, #12]
 800e73c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e740:	429a      	cmp	r2, r3
 800e742:	bf08      	it	eq
 800e744:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e748:	d01e      	beq.n	800e788 <listen_message_reliably+0x164>
 800e74a:	ebab 0309 	sub.w	r3, fp, r9
 800e74e:	9905      	ldr	r1, [sp, #20]
 800e750:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e754:	2b00      	cmp	r3, #0
 800e756:	bf08      	it	eq
 800e758:	2301      	moveq	r3, #1
 800e75a:	4299      	cmp	r1, r3
 800e75c:	bfa8      	it	ge
 800e75e:	4619      	movge	r1, r3
 800e760:	6894      	ldr	r4, [r2, #8]
 800e762:	6810      	ldr	r0, [r2, #0]
 800e764:	4689      	mov	r9, r1
 800e766:	460b      	mov	r3, r1
 800e768:	aa08      	add	r2, sp, #32
 800e76a:	a907      	add	r1, sp, #28
 800e76c:	47a0      	blx	r4
 800e76e:	b968      	cbnz	r0, 800e78c <listen_message_reliably+0x168>
 800e770:	9b05      	ldr	r3, [sp, #20]
 800e772:	eba3 0309 	sub.w	r3, r3, r9
 800e776:	2b00      	cmp	r3, #0
 800e778:	9305      	str	r3, [sp, #20]
 800e77a:	f73f af5c 	bgt.w	800e636 <listen_message_reliably+0x12>
 800e77e:	4604      	mov	r4, r0
 800e780:	4620      	mov	r0, r4
 800e782:	b01d      	add	sp, #116	@ 0x74
 800e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e788:	9b05      	ldr	r3, [sp, #20]
 800e78a:	e7e0      	b.n	800e74e <listen_message_reliably+0x12a>
 800e78c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e790:	4604      	mov	r4, r0
 800e792:	a80c      	add	r0, sp, #48	@ 0x30
 800e794:	f7ff f82e 	bl	800d7f4 <ucdr_init_buffer>
 800e798:	2500      	movs	r5, #0
 800e79a:	f10d 031a 	add.w	r3, sp, #26
 800e79e:	aa06      	add	r2, sp, #24
 800e7a0:	a90c      	add	r1, sp, #48	@ 0x30
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	f88d 5018 	strb.w	r5, [sp, #24]
 800e7a8:	f000 fc44 	bl	800f034 <uxr_read_session_header>
 800e7ac:	b918      	cbnz	r0, 800e7b6 <listen_message_reliably+0x192>
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	b01d      	add	sp, #116	@ 0x74
 800e7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e7bc:	f001 f970 	bl	800faa0 <uxr_stream_id_from_raw>
 800e7c0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e7c4:	2d01      	cmp	r5, #1
 800e7c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e7ca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e7ce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e7d2:	d04b      	beq.n	800e86c <listen_message_reliably+0x248>
 800e7d4:	2d02      	cmp	r5, #2
 800e7d6:	d00f      	beq.n	800e7f8 <listen_message_reliably+0x1d4>
 800e7d8:	2d00      	cmp	r5, #0
 800e7da:	d1e8      	bne.n	800e7ae <listen_message_reliably+0x18a>
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4628      	mov	r0, r5
 800e7e0:	f001 f95e 	bl	800faa0 <uxr_stream_id_from_raw>
 800e7e4:	a90c      	add	r1, sp, #48	@ 0x30
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	4640      	mov	r0, r8
 800e7ea:	920a      	str	r2, [sp, #40]	@ 0x28
 800e7ec:	f7ff fd92 	bl	800e314 <read_submessage_list>
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	b01d      	add	sp, #116	@ 0x74
 800e7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f8:	4631      	mov	r1, r6
 800e7fa:	f108 0008 	add.w	r0, r8, #8
 800e7fe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e802:	f001 fa3b 	bl	800fc7c <uxr_get_input_reliable_stream>
 800e806:	4607      	mov	r7, r0
 800e808:	b338      	cbz	r0, 800e85a <listen_message_reliably+0x236>
 800e80a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e80c:	9203      	str	r2, [sp, #12]
 800e80e:	a80c      	add	r0, sp, #48	@ 0x30
 800e810:	f7ff f820 	bl	800d854 <ucdr_buffer_remaining>
 800e814:	4603      	mov	r3, r0
 800e816:	f10d 0019 	add.w	r0, sp, #25
 800e81a:	9000      	str	r0, [sp, #0]
 800e81c:	9a03      	ldr	r2, [sp, #12]
 800e81e:	4651      	mov	r1, sl
 800e820:	4638      	mov	r0, r7
 800e822:	f006 fe53 	bl	80154cc <uxr_receive_reliable_message>
 800e826:	b1c0      	cbz	r0, 800e85a <listen_message_reliably+0x236>
 800e828:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e82c:	b393      	cbz	r3, 800e894 <listen_message_reliably+0x270>
 800e82e:	ad14      	add	r5, sp, #80	@ 0x50
 800e830:	f04f 0a02 	mov.w	sl, #2
 800e834:	e00a      	b.n	800e84c <listen_message_reliably+0x228>
 800e836:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e83a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e83e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e842:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e844:	4629      	mov	r1, r5
 800e846:	4640      	mov	r0, r8
 800e848:	f7ff fd64 	bl	800e314 <read_submessage_list>
 800e84c:	2204      	movs	r2, #4
 800e84e:	4629      	mov	r1, r5
 800e850:	4638      	mov	r0, r7
 800e852:	f006 febb 	bl	80155cc <uxr_next_input_reliable_buffer_available>
 800e856:	2800      	cmp	r0, #0
 800e858:	d1ed      	bne.n	800e836 <listen_message_reliably+0x212>
 800e85a:	4640      	mov	r0, r8
 800e85c:	4632      	mov	r2, r6
 800e85e:	4649      	mov	r1, r9
 800e860:	f7ff fbd2 	bl	800e008 <write_submessage_acknack.isra.0>
 800e864:	4620      	mov	r0, r4
 800e866:	b01d      	add	sp, #116	@ 0x74
 800e868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86c:	4631      	mov	r1, r6
 800e86e:	f108 0008 	add.w	r0, r8, #8
 800e872:	f001 f9f9 	bl	800fc68 <uxr_get_input_best_effort_stream>
 800e876:	2800      	cmp	r0, #0
 800e878:	d099      	beq.n	800e7ae <listen_message_reliably+0x18a>
 800e87a:	4651      	mov	r1, sl
 800e87c:	f006 fd92 	bl	80153a4 <uxr_receive_best_effort_message>
 800e880:	2800      	cmp	r0, #0
 800e882:	d094      	beq.n	800e7ae <listen_message_reliably+0x18a>
 800e884:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e888:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e88a:	a90c      	add	r1, sp, #48	@ 0x30
 800e88c:	4640      	mov	r0, r8
 800e88e:	f7ff fd41 	bl	800e314 <read_submessage_list>
 800e892:	e78c      	b.n	800e7ae <listen_message_reliably+0x18a>
 800e894:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e898:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e89a:	a90c      	add	r1, sp, #48	@ 0x30
 800e89c:	4640      	mov	r0, r8
 800e89e:	f7ff fd39 	bl	800e314 <read_submessage_list>
 800e8a2:	e7c4      	b.n	800e82e <listen_message_reliably+0x20a>

0800e8a4 <uxr_run_session_timeout>:
 800e8a4:	b570      	push	{r4, r5, r6, lr}
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	460d      	mov	r5, r1
 800e8aa:	f001 fa4d 	bl	800fd48 <uxr_millis>
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f7ff fc71 	bl	800e198 <uxr_flash_output_streams>
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f7ff feb3 	bl	800e624 <listen_message_reliably>
 800e8be:	f001 fa43 	bl	800fd48 <uxr_millis>
 800e8c2:	1b83      	subs	r3, r0, r6
 800e8c4:	1ae9      	subs	r1, r5, r3
 800e8c6:	2900      	cmp	r1, #0
 800e8c8:	dcf6      	bgt.n	800e8b8 <uxr_run_session_timeout+0x14>
 800e8ca:	f104 0008 	add.w	r0, r4, #8
 800e8ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8d2:	f001 b9dd 	b.w	800fc90 <uxr_output_streams_confirmed>
 800e8d6:	bf00      	nop

0800e8d8 <uxr_run_session_until_data>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	4604      	mov	r4, r0
 800e8dc:	460d      	mov	r5, r1
 800e8de:	f001 fa33 	bl	800fd48 <uxr_millis>
 800e8e2:	4606      	mov	r6, r0
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f7ff fc57 	bl	800e198 <uxr_flash_output_streams>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	e005      	b.n	800e900 <uxr_run_session_until_data+0x28>
 800e8f4:	f001 fa28 	bl	800fd48 <uxr_millis>
 800e8f8:	1b83      	subs	r3, r0, r6
 800e8fa:	1ae9      	subs	r1, r5, r3
 800e8fc:	2900      	cmp	r1, #0
 800e8fe:	dd07      	ble.n	800e910 <uxr_run_session_until_data+0x38>
 800e900:	4620      	mov	r0, r4
 800e902:	f7ff fe8f 	bl	800e624 <listen_message_reliably>
 800e906:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d0f2      	beq.n	800e8f4 <uxr_run_session_until_data+0x1c>
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e914:	bd70      	pop	{r4, r5, r6, pc}
 800e916:	bf00      	nop

0800e918 <uxr_run_session_until_confirm_delivery>:
 800e918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e91c:	4606      	mov	r6, r0
 800e91e:	460d      	mov	r5, r1
 800e920:	f001 fa12 	bl	800fd48 <uxr_millis>
 800e924:	4607      	mov	r7, r0
 800e926:	4630      	mov	r0, r6
 800e928:	f7ff fc36 	bl	800e198 <uxr_flash_output_streams>
 800e92c:	2d00      	cmp	r5, #0
 800e92e:	f106 0808 	add.w	r8, r6, #8
 800e932:	bfa8      	it	ge
 800e934:	462c      	movge	r4, r5
 800e936:	da07      	bge.n	800e948 <uxr_run_session_until_confirm_delivery+0x30>
 800e938:	e00e      	b.n	800e958 <uxr_run_session_until_confirm_delivery+0x40>
 800e93a:	f7ff fe73 	bl	800e624 <listen_message_reliably>
 800e93e:	f001 fa03 	bl	800fd48 <uxr_millis>
 800e942:	1bc3      	subs	r3, r0, r7
 800e944:	1aec      	subs	r4, r5, r3
 800e946:	d407      	bmi.n	800e958 <uxr_run_session_until_confirm_delivery+0x40>
 800e948:	4640      	mov	r0, r8
 800e94a:	f001 f9a1 	bl	800fc90 <uxr_output_streams_confirmed>
 800e94e:	4603      	mov	r3, r0
 800e950:	4621      	mov	r1, r4
 800e952:	4630      	mov	r0, r6
 800e954:	2b00      	cmp	r3, #0
 800e956:	d0f0      	beq.n	800e93a <uxr_run_session_until_confirm_delivery+0x22>
 800e958:	4640      	mov	r0, r8
 800e95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e95e:	f001 b997 	b.w	800fc90 <uxr_output_streams_confirmed>
 800e962:	bf00      	nop

0800e964 <uxr_run_session_until_all_status>:
 800e964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e968:	9c08      	ldr	r4, [sp, #32]
 800e96a:	4606      	mov	r6, r0
 800e96c:	460f      	mov	r7, r1
 800e96e:	4691      	mov	r9, r2
 800e970:	461d      	mov	r5, r3
 800e972:	f7ff fc11 	bl	800e198 <uxr_flash_output_streams>
 800e976:	b124      	cbz	r4, 800e982 <uxr_run_session_until_all_status+0x1e>
 800e978:	4622      	mov	r2, r4
 800e97a:	21ff      	movs	r1, #255	@ 0xff
 800e97c:	4628      	mov	r0, r5
 800e97e:	f008 fa0b 	bl	8016d98 <memset>
 800e982:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e986:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e988:	f001 f9de 	bl	800fd48 <uxr_millis>
 800e98c:	3d01      	subs	r5, #1
 800e98e:	f1a9 0902 	sub.w	r9, r9, #2
 800e992:	4680      	mov	r8, r0
 800e994:	4639      	mov	r1, r7
 800e996:	4630      	mov	r0, r6
 800e998:	f7ff fe44 	bl	800e624 <listen_message_reliably>
 800e99c:	f001 f9d4 	bl	800fd48 <uxr_millis>
 800e9a0:	eba0 0008 	sub.w	r0, r0, r8
 800e9a4:	1a39      	subs	r1, r7, r0
 800e9a6:	b344      	cbz	r4, 800e9fa <uxr_run_session_until_all_status+0x96>
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	46ac      	mov	ip, r5
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e002      	b.n	800e9b6 <uxr_run_session_until_all_status+0x52>
 800e9b0:	42a3      	cmp	r3, r4
 800e9b2:	d20d      	bcs.n	800e9d0 <uxr_run_session_until_all_status+0x6c>
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e9ba:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e9be:	d1f7      	bne.n	800e9b0 <uxr_run_session_until_all_status+0x4c>
 800e9c0:	42a3      	cmp	r3, r4
 800e9c2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e9c6:	d213      	bcs.n	800e9f0 <uxr_run_session_until_all_status+0x8c>
 800e9c8:	2a00      	cmp	r2, #0
 800e9ca:	d0f3      	beq.n	800e9b4 <uxr_run_session_until_all_status+0x50>
 800e9cc:	2900      	cmp	r1, #0
 800e9ce:	dce2      	bgt.n	800e996 <uxr_run_session_until_all_status+0x32>
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e9d4:	442c      	add	r4, r5
 800e9d6:	e001      	b.n	800e9dc <uxr_run_session_until_all_status+0x78>
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d812      	bhi.n	800ea02 <uxr_run_session_until_all_status+0x9e>
 800e9dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e9e0:	4284      	cmp	r4, r0
 800e9e2:	d1f9      	bne.n	800e9d8 <uxr_run_session_until_all_status+0x74>
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	bf8c      	ite	hi
 800e9e8:	2000      	movhi	r0, #0
 800e9ea:	2001      	movls	r0, #1
 800e9ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f0:	2900      	cmp	r1, #0
 800e9f2:	dded      	ble.n	800e9d0 <uxr_run_session_until_all_status+0x6c>
 800e9f4:	2a00      	cmp	r2, #0
 800e9f6:	d1ce      	bne.n	800e996 <uxr_run_session_until_all_status+0x32>
 800e9f8:	e7ea      	b.n	800e9d0 <uxr_run_session_until_all_status+0x6c>
 800e9fa:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e9fc:	2001      	movs	r0, #1
 800e9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea02:	2000      	movs	r0, #0
 800ea04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ea08 <uxr_sync_session>:
 800ea08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea0a:	b093      	sub	sp, #76	@ 0x4c
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	460d      	mov	r5, r1
 800ea10:	f000 fb52 	bl	800f0b8 <uxr_session_header_offset>
 800ea14:	2214      	movs	r2, #20
 800ea16:	eb0d 0102 	add.w	r1, sp, r2
 800ea1a:	9000      	str	r0, [sp, #0]
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	a80a      	add	r0, sp, #40	@ 0x28
 800ea20:	f7fe fed6 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800ea24:	2300      	movs	r3, #0
 800ea26:	2208      	movs	r2, #8
 800ea28:	210e      	movs	r1, #14
 800ea2a:	a80a      	add	r0, sp, #40	@ 0x28
 800ea2c:	f001 f946 	bl	800fcbc <uxr_buffer_submessage_header>
 800ea30:	f001 f9a4 	bl	800fd7c <uxr_nanos>
 800ea34:	a31c      	add	r3, pc, #112	@ (adr r3, 800eaa8 <uxr_sync_session+0xa0>)
 800ea36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3a:	460e      	mov	r6, r1
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	f7f1 fc57 	bl	80002f0 <__aeabi_ldivmod>
 800ea42:	4631      	mov	r1, r6
 800ea44:	9003      	str	r0, [sp, #12]
 800ea46:	a318      	add	r3, pc, #96	@ (adr r3, 800eaa8 <uxr_sync_session+0xa0>)
 800ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4c:	4638      	mov	r0, r7
 800ea4e:	f7f1 fc4f 	bl	80002f0 <__aeabi_ldivmod>
 800ea52:	a903      	add	r1, sp, #12
 800ea54:	a80a      	add	r0, sp, #40	@ 0x28
 800ea56:	9204      	str	r2, [sp, #16]
 800ea58:	f002 fa50 	bl	8010efc <uxr_serialize_TIMESTAMP_Payload>
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	4611      	mov	r1, r2
 800ea60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea62:	4620      	mov	r0, r4
 800ea64:	f000 fad2 	bl	800f00c <uxr_stamp_session_header>
 800ea68:	a80a      	add	r0, sp, #40	@ 0x28
 800ea6a:	f7fe feef 	bl	800d84c <ucdr_buffer_length>
 800ea6e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea70:	4602      	mov	r2, r0
 800ea72:	a905      	add	r1, sp, #20
 800ea74:	e9d3 0600 	ldrd	r0, r6, [r3]
 800ea78:	47b0      	blx	r6
 800ea7a:	f001 f965 	bl	800fd48 <uxr_millis>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	4606      	mov	r6, r0
 800ea82:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800ea86:	4629      	mov	r1, r5
 800ea88:	e000      	b.n	800ea8c <uxr_sync_session+0x84>
 800ea8a:	b950      	cbnz	r0, 800eaa2 <uxr_sync_session+0x9a>
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f7ff fdc9 	bl	800e624 <listen_message_reliably>
 800ea92:	f001 f959 	bl	800fd48 <uxr_millis>
 800ea96:	1b83      	subs	r3, r0, r6
 800ea98:	1ae9      	subs	r1, r5, r3
 800ea9a:	2900      	cmp	r1, #0
 800ea9c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800eaa0:	dcf3      	bgt.n	800ea8a <uxr_sync_session+0x82>
 800eaa2:	b013      	add	sp, #76	@ 0x4c
 800eaa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	3b9aca00 	.word	0x3b9aca00
 800eaac:	00000000 	.word	0x00000000

0800eab0 <wait_session_status>:
 800eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab4:	4604      	mov	r4, r0
 800eab6:	b09d      	sub	sp, #116	@ 0x74
 800eab8:	20ff      	movs	r0, #255	@ 0xff
 800eaba:	7160      	strb	r0, [r4, #5]
 800eabc:	9303      	str	r3, [sp, #12]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	f000 80b6 	beq.w	800ec30 <wait_session_status+0x180>
 800eac4:	468a      	mov	sl, r1
 800eac6:	4691      	mov	r9, r2
 800eac8:	f04f 0b00 	mov.w	fp, #0
 800eacc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eace:	464a      	mov	r2, r9
 800ead0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ead4:	4651      	mov	r1, sl
 800ead6:	47a8      	blx	r5
 800ead8:	f001 f936 	bl	800fd48 <uxr_millis>
 800eadc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eae0:	4605      	mov	r5, r0
 800eae2:	e009      	b.n	800eaf8 <wait_session_status+0x48>
 800eae4:	f001 f930 	bl	800fd48 <uxr_millis>
 800eae8:	1b40      	subs	r0, r0, r5
 800eaea:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	dd40      	ble.n	800eb74 <wait_session_status+0xc4>
 800eaf2:	7960      	ldrb	r0, [r4, #5]
 800eaf4:	28ff      	cmp	r0, #255	@ 0xff
 800eaf6:	d145      	bne.n	800eb84 <wait_session_status+0xd4>
 800eaf8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800eafa:	a908      	add	r1, sp, #32
 800eafc:	6896      	ldr	r6, [r2, #8]
 800eafe:	6810      	ldr	r0, [r2, #0]
 800eb00:	aa09      	add	r2, sp, #36	@ 0x24
 800eb02:	47b0      	blx	r6
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d0ed      	beq.n	800eae4 <wait_session_status+0x34>
 800eb08:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800eb0c:	a80c      	add	r0, sp, #48	@ 0x30
 800eb0e:	f7fe fe71 	bl	800d7f4 <ucdr_init_buffer>
 800eb12:	2600      	movs	r6, #0
 800eb14:	f10d 031e 	add.w	r3, sp, #30
 800eb18:	aa07      	add	r2, sp, #28
 800eb1a:	a90c      	add	r1, sp, #48	@ 0x30
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f88d 601c 	strb.w	r6, [sp, #28]
 800eb22:	f000 fa87 	bl	800f034 <uxr_read_session_header>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d0dc      	beq.n	800eae4 <wait_session_status+0x34>
 800eb2a:	4631      	mov	r1, r6
 800eb2c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800eb30:	f000 ffb6 	bl	800faa0 <uxr_stream_id_from_raw>
 800eb34:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800eb38:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800eb3c:	9302      	str	r3, [sp, #8]
 800eb3e:	2f01      	cmp	r7, #1
 800eb40:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800eb44:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800eb48:	d05c      	beq.n	800ec04 <wait_session_status+0x154>
 800eb4a:	2f02      	cmp	r7, #2
 800eb4c:	d020      	beq.n	800eb90 <wait_session_status+0xe0>
 800eb4e:	2f00      	cmp	r7, #0
 800eb50:	d1c8      	bne.n	800eae4 <wait_session_status+0x34>
 800eb52:	4639      	mov	r1, r7
 800eb54:	4638      	mov	r0, r7
 800eb56:	f000 ffa3 	bl	800faa0 <uxr_stream_id_from_raw>
 800eb5a:	a90c      	add	r1, sp, #48	@ 0x30
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800eb60:	4620      	mov	r0, r4
 800eb62:	f7ff fbd7 	bl	800e314 <read_submessage_list>
 800eb66:	f001 f8ef 	bl	800fd48 <uxr_millis>
 800eb6a:	1b40      	subs	r0, r0, r5
 800eb6c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	dcbe      	bgt.n	800eaf2 <wait_session_status+0x42>
 800eb74:	9b03      	ldr	r3, [sp, #12]
 800eb76:	7960      	ldrb	r0, [r4, #5]
 800eb78:	f10b 0b01 	add.w	fp, fp, #1
 800eb7c:	455b      	cmp	r3, fp
 800eb7e:	d001      	beq.n	800eb84 <wait_session_status+0xd4>
 800eb80:	28ff      	cmp	r0, #255	@ 0xff
 800eb82:	d0a3      	beq.n	800eacc <wait_session_status+0x1c>
 800eb84:	38ff      	subs	r0, #255	@ 0xff
 800eb86:	bf18      	it	ne
 800eb88:	2001      	movne	r0, #1
 800eb8a:	b01d      	add	sp, #116	@ 0x74
 800eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb90:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800eb94:	9304      	str	r3, [sp, #16]
 800eb96:	4631      	mov	r1, r6
 800eb98:	f104 0008 	add.w	r0, r4, #8
 800eb9c:	f001 f86e 	bl	800fc7c <uxr_get_input_reliable_stream>
 800eba0:	4680      	mov	r8, r0
 800eba2:	b348      	cbz	r0, 800ebf8 <wait_session_status+0x148>
 800eba4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eba6:	9205      	str	r2, [sp, #20]
 800eba8:	a80c      	add	r0, sp, #48	@ 0x30
 800ebaa:	f7fe fe53 	bl	800d854 <ucdr_buffer_remaining>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f10d 001d 	add.w	r0, sp, #29
 800ebb4:	9000      	str	r0, [sp, #0]
 800ebb6:	9a05      	ldr	r2, [sp, #20]
 800ebb8:	9902      	ldr	r1, [sp, #8]
 800ebba:	4640      	mov	r0, r8
 800ebbc:	f006 fc86 	bl	80154cc <uxr_receive_reliable_message>
 800ebc0:	b1d0      	cbz	r0, 800ebf8 <wait_session_status+0x148>
 800ebc2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d03a      	beq.n	800ec40 <wait_session_status+0x190>
 800ebca:	9f04      	ldr	r7, [sp, #16]
 800ebcc:	e00a      	b.n	800ebe4 <wait_session_status+0x134>
 800ebce:	f04f 0302 	mov.w	r3, #2
 800ebd2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800ebd6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800ebda:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800ebde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ebe0:	f7ff fb98 	bl	800e314 <read_submessage_list>
 800ebe4:	a914      	add	r1, sp, #80	@ 0x50
 800ebe6:	2204      	movs	r2, #4
 800ebe8:	4640      	mov	r0, r8
 800ebea:	f006 fcef 	bl	80155cc <uxr_next_input_reliable_buffer_available>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	a914      	add	r1, sp, #80	@ 0x50
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d1ea      	bne.n	800ebce <wait_session_status+0x11e>
 800ebf8:	9904      	ldr	r1, [sp, #16]
 800ebfa:	4632      	mov	r2, r6
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f7ff fa03 	bl	800e008 <write_submessage_acknack.isra.0>
 800ec02:	e76f      	b.n	800eae4 <wait_session_status+0x34>
 800ec04:	4631      	mov	r1, r6
 800ec06:	f104 0008 	add.w	r0, r4, #8
 800ec0a:	f001 f82d 	bl	800fc68 <uxr_get_input_best_effort_stream>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	f43f af68 	beq.w	800eae4 <wait_session_status+0x34>
 800ec14:	9902      	ldr	r1, [sp, #8]
 800ec16:	f006 fbc5 	bl	80153a4 <uxr_receive_best_effort_message>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	f43f af62 	beq.w	800eae4 <wait_session_status+0x34>
 800ec20:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800ec24:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec26:	a90c      	add	r1, sp, #48	@ 0x30
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f7ff fb73 	bl	800e314 <read_submessage_list>
 800ec2e:	e759      	b.n	800eae4 <wait_session_status+0x34>
 800ec30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec32:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ec36:	47a0      	blx	r4
 800ec38:	2001      	movs	r0, #1
 800ec3a:	b01d      	add	sp, #116	@ 0x74
 800ec3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec40:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800ec44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec46:	a90c      	add	r1, sp, #48	@ 0x30
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f7ff fb63 	bl	800e314 <read_submessage_list>
 800ec4e:	e7bc      	b.n	800ebca <wait_session_status+0x11a>

0800ec50 <uxr_delete_session_retries>:
 800ec50:	b530      	push	{r4, r5, lr}
 800ec52:	b08f      	sub	sp, #60	@ 0x3c
 800ec54:	4604      	mov	r4, r0
 800ec56:	460d      	mov	r5, r1
 800ec58:	f000 fa2e 	bl	800f0b8 <uxr_session_header_offset>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	2210      	movs	r2, #16
 800ec60:	9000      	str	r0, [sp, #0]
 800ec62:	a902      	add	r1, sp, #8
 800ec64:	a806      	add	r0, sp, #24
 800ec66:	f7fe fdb3 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800ec6a:	a906      	add	r1, sp, #24
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 f973 	bl	800ef58 <uxr_buffer_delete_session>
 800ec72:	2200      	movs	r2, #0
 800ec74:	4611      	mov	r1, r2
 800ec76:	9b06      	ldr	r3, [sp, #24]
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f000 f9c7 	bl	800f00c <uxr_stamp_session_header>
 800ec7e:	a806      	add	r0, sp, #24
 800ec80:	f7fe fde4 	bl	800d84c <ucdr_buffer_length>
 800ec84:	462b      	mov	r3, r5
 800ec86:	4602      	mov	r2, r0
 800ec88:	a902      	add	r1, sp, #8
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f7ff ff10 	bl	800eab0 <wait_session_status>
 800ec90:	b118      	cbz	r0, 800ec9a <uxr_delete_session_retries+0x4a>
 800ec92:	7960      	ldrb	r0, [r4, #5]
 800ec94:	fab0 f080 	clz	r0, r0
 800ec98:	0940      	lsrs	r0, r0, #5
 800ec9a:	b00f      	add	sp, #60	@ 0x3c
 800ec9c:	bd30      	pop	{r4, r5, pc}
 800ec9e:	bf00      	nop

0800eca0 <uxr_create_session>:
 800eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca4:	f100 0b08 	add.w	fp, r0, #8
 800eca8:	b0ab      	sub	sp, #172	@ 0xac
 800ecaa:	4604      	mov	r4, r0
 800ecac:	4658      	mov	r0, fp
 800ecae:	f000 ff2b 	bl	800fb08 <uxr_reset_stream_storage>
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f000 fa00 	bl	800f0b8 <uxr_session_header_offset>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	9000      	str	r0, [sp, #0]
 800ecbc:	221c      	movs	r2, #28
 800ecbe:	a90b      	add	r1, sp, #44	@ 0x2c
 800ecc0:	a812      	add	r0, sp, #72	@ 0x48
 800ecc2:	f7fe fd85 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800ecc6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ecc8:	8a1a      	ldrh	r2, [r3, #16]
 800ecca:	3a04      	subs	r2, #4
 800eccc:	b292      	uxth	r2, r2
 800ecce:	a912      	add	r1, sp, #72	@ 0x48
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 f917 	bl	800ef04 <uxr_buffer_create_session>
 800ecd6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 f983 	bl	800efe4 <uxr_stamp_create_session_header>
 800ecde:	a812      	add	r0, sp, #72	@ 0x48
 800ece0:	f7fe fdb4 	bl	800d84c <ucdr_buffer_length>
 800ece4:	23ff      	movs	r3, #255	@ 0xff
 800ece6:	7163      	strb	r3, [r4, #5]
 800ece8:	230a      	movs	r3, #10
 800ecea:	46da      	mov	sl, fp
 800ecec:	9303      	str	r3, [sp, #12]
 800ecee:	4683      	mov	fp, r0
 800ecf0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ecf2:	465a      	mov	r2, fp
 800ecf4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ecf8:	a90b      	add	r1, sp, #44	@ 0x2c
 800ecfa:	47a8      	blx	r5
 800ecfc:	f001 f824 	bl	800fd48 <uxr_millis>
 800ed00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ed04:	4605      	mov	r5, r0
 800ed06:	e009      	b.n	800ed1c <uxr_create_session+0x7c>
 800ed08:	f001 f81e 	bl	800fd48 <uxr_millis>
 800ed0c:	1b40      	subs	r0, r0, r5
 800ed0e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	7962      	ldrb	r2, [r4, #5]
 800ed16:	dd38      	ble.n	800ed8a <uxr_create_session+0xea>
 800ed18:	2aff      	cmp	r2, #255	@ 0xff
 800ed1a:	d13c      	bne.n	800ed96 <uxr_create_session+0xf6>
 800ed1c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800ed1e:	a907      	add	r1, sp, #28
 800ed20:	6896      	ldr	r6, [r2, #8]
 800ed22:	6810      	ldr	r0, [r2, #0]
 800ed24:	aa08      	add	r2, sp, #32
 800ed26:	47b0      	blx	r6
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d0ed      	beq.n	800ed08 <uxr_create_session+0x68>
 800ed2c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ed30:	a81a      	add	r0, sp, #104	@ 0x68
 800ed32:	f7fe fd5f 	bl	800d7f4 <ucdr_init_buffer>
 800ed36:	2600      	movs	r6, #0
 800ed38:	f10d 031a 	add.w	r3, sp, #26
 800ed3c:	aa06      	add	r2, sp, #24
 800ed3e:	a91a      	add	r1, sp, #104	@ 0x68
 800ed40:	4620      	mov	r0, r4
 800ed42:	f88d 6018 	strb.w	r6, [sp, #24]
 800ed46:	f000 f975 	bl	800f034 <uxr_read_session_header>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d0dc      	beq.n	800ed08 <uxr_create_session+0x68>
 800ed4e:	4631      	mov	r1, r6
 800ed50:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ed54:	f000 fea4 	bl	800faa0 <uxr_stream_id_from_raw>
 800ed58:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800ed5c:	2e01      	cmp	r6, #1
 800ed5e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800ed62:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800ed66:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ed6a:	d053      	beq.n	800ee14 <uxr_create_session+0x174>
 800ed6c:	2e02      	cmp	r6, #2
 800ed6e:	d018      	beq.n	800eda2 <uxr_create_session+0x102>
 800ed70:	2e00      	cmp	r6, #0
 800ed72:	d1c9      	bne.n	800ed08 <uxr_create_session+0x68>
 800ed74:	4631      	mov	r1, r6
 800ed76:	4630      	mov	r0, r6
 800ed78:	f000 fe92 	bl	800faa0 <uxr_stream_id_from_raw>
 800ed7c:	a91a      	add	r1, sp, #104	@ 0x68
 800ed7e:	4602      	mov	r2, r0
 800ed80:	900a      	str	r0, [sp, #40]	@ 0x28
 800ed82:	4620      	mov	r0, r4
 800ed84:	f7ff fac6 	bl	800e314 <read_submessage_list>
 800ed88:	e7be      	b.n	800ed08 <uxr_create_session+0x68>
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	9303      	str	r3, [sp, #12]
 800ed90:	d001      	beq.n	800ed96 <uxr_create_session+0xf6>
 800ed92:	2aff      	cmp	r2, #255	@ 0xff
 800ed94:	d0ac      	beq.n	800ecf0 <uxr_create_session+0x50>
 800ed96:	2a00      	cmp	r2, #0
 800ed98:	d051      	beq.n	800ee3e <uxr_create_session+0x19e>
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	b02b      	add	sp, #172	@ 0xac
 800ed9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800eda6:	9304      	str	r3, [sp, #16]
 800eda8:	4639      	mov	r1, r7
 800edaa:	4650      	mov	r0, sl
 800edac:	f000 ff66 	bl	800fc7c <uxr_get_input_reliable_stream>
 800edb0:	4680      	mov	r8, r0
 800edb2:	b348      	cbz	r0, 800ee08 <uxr_create_session+0x168>
 800edb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800edb6:	9205      	str	r2, [sp, #20]
 800edb8:	a81a      	add	r0, sp, #104	@ 0x68
 800edba:	f7fe fd4b 	bl	800d854 <ucdr_buffer_remaining>
 800edbe:	4603      	mov	r3, r0
 800edc0:	f10d 0019 	add.w	r0, sp, #25
 800edc4:	9000      	str	r0, [sp, #0]
 800edc6:	9a05      	ldr	r2, [sp, #20]
 800edc8:	4649      	mov	r1, r9
 800edca:	4640      	mov	r0, r8
 800edcc:	f006 fb7e 	bl	80154cc <uxr_receive_reliable_message>
 800edd0:	b1d0      	cbz	r0, 800ee08 <uxr_create_session+0x168>
 800edd2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d038      	beq.n	800ee4c <uxr_create_session+0x1ac>
 800edda:	9e04      	ldr	r6, [sp, #16]
 800eddc:	e00a      	b.n	800edf4 <uxr_create_session+0x154>
 800edde:	f04f 0302 	mov.w	r3, #2
 800ede2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800ede6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800edea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800edf0:	f7ff fa90 	bl	800e314 <read_submessage_list>
 800edf4:	a922      	add	r1, sp, #136	@ 0x88
 800edf6:	2204      	movs	r2, #4
 800edf8:	4640      	mov	r0, r8
 800edfa:	f006 fbe7 	bl	80155cc <uxr_next_input_reliable_buffer_available>
 800edfe:	4603      	mov	r3, r0
 800ee00:	a922      	add	r1, sp, #136	@ 0x88
 800ee02:	4620      	mov	r0, r4
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1ea      	bne.n	800edde <uxr_create_session+0x13e>
 800ee08:	9904      	ldr	r1, [sp, #16]
 800ee0a:	463a      	mov	r2, r7
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f7ff f8fb 	bl	800e008 <write_submessage_acknack.isra.0>
 800ee12:	e779      	b.n	800ed08 <uxr_create_session+0x68>
 800ee14:	4639      	mov	r1, r7
 800ee16:	4650      	mov	r0, sl
 800ee18:	f000 ff26 	bl	800fc68 <uxr_get_input_best_effort_stream>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	f43f af73 	beq.w	800ed08 <uxr_create_session+0x68>
 800ee22:	4649      	mov	r1, r9
 800ee24:	f006 fabe 	bl	80153a4 <uxr_receive_best_effort_message>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	f43f af6d 	beq.w	800ed08 <uxr_create_session+0x68>
 800ee2e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800ee32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee34:	a91a      	add	r1, sp, #104	@ 0x68
 800ee36:	4620      	mov	r0, r4
 800ee38:	f7ff fa6c 	bl	800e314 <read_submessage_list>
 800ee3c:	e764      	b.n	800ed08 <uxr_create_session+0x68>
 800ee3e:	4650      	mov	r0, sl
 800ee40:	f000 fe62 	bl	800fb08 <uxr_reset_stream_storage>
 800ee44:	2001      	movs	r0, #1
 800ee46:	b02b      	add	sp, #172	@ 0xac
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800ee50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee52:	a91a      	add	r1, sp, #104	@ 0x68
 800ee54:	4620      	mov	r0, r4
 800ee56:	f7ff fa5d 	bl	800e314 <read_submessage_list>
 800ee5a:	e7be      	b.n	800edda <uxr_create_session+0x13a>

0800ee5c <uxr_prepare_stream_to_write_submessage>:
 800ee5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	4682      	mov	sl, r0
 800ee64:	4610      	mov	r0, r2
 800ee66:	4615      	mov	r5, r2
 800ee68:	461e      	mov	r6, r3
 800ee6a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800ee6e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800ee72:	9101      	str	r1, [sp, #4]
 800ee74:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ee78:	f000 ff60 	bl	800fd3c <uxr_submessage_padding>
 800ee7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee80:	f105 0904 	add.w	r9, r5, #4
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	4481      	add	r9, r0
 800ee88:	d01d      	beq.n	800eec6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d116      	bne.n	800eebc <uxr_prepare_stream_to_write_submessage+0x60>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	f10a 0008 	add.w	r0, sl, #8
 800ee94:	f000 fede 	bl	800fc54 <uxr_get_output_reliable_stream>
 800ee98:	4604      	mov	r4, r0
 800ee9a:	b158      	cbz	r0, 800eeb4 <uxr_prepare_stream_to_write_submessage+0x58>
 800ee9c:	4649      	mov	r1, r9
 800ee9e:	4632      	mov	r2, r6
 800eea0:	f006 fd50 	bl	8015944 <uxr_prepare_reliable_buffer_to_write>
 800eea4:	4604      	mov	r4, r0
 800eea6:	b12c      	cbz	r4, 800eeb4 <uxr_prepare_stream_to_write_submessage+0x58>
 800eea8:	4643      	mov	r3, r8
 800eeaa:	b2aa      	uxth	r2, r5
 800eeac:	4639      	mov	r1, r7
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f000 ff04 	bl	800fcbc <uxr_buffer_submessage_header>
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	b002      	add	sp, #8
 800eeb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eebc:	2400      	movs	r4, #0
 800eebe:	4620      	mov	r0, r4
 800eec0:	b002      	add	sp, #8
 800eec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec6:	4621      	mov	r1, r4
 800eec8:	f10a 0008 	add.w	r0, sl, #8
 800eecc:	f000 feba 	bl	800fc44 <uxr_get_output_best_effort_stream>
 800eed0:	4604      	mov	r4, r0
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d0ee      	beq.n	800eeb4 <uxr_prepare_stream_to_write_submessage+0x58>
 800eed6:	4649      	mov	r1, r9
 800eed8:	4632      	mov	r2, r6
 800eeda:	f006 fc63 	bl	80157a4 <uxr_prepare_best_effort_buffer_to_write>
 800eede:	4604      	mov	r4, r0
 800eee0:	e7e1      	b.n	800eea6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800eee2:	bf00      	nop

0800eee4 <uxr_init_session_info>:
 800eee4:	0e13      	lsrs	r3, r2, #24
 800eee6:	7043      	strb	r3, [r0, #1]
 800eee8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800eeec:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800eef0:	7001      	strb	r1, [r0, #0]
 800eef2:	70c3      	strb	r3, [r0, #3]
 800eef4:	2109      	movs	r1, #9
 800eef6:	23ff      	movs	r3, #255	@ 0xff
 800eef8:	f880 c002 	strb.w	ip, [r0, #2]
 800eefc:	7102      	strb	r2, [r0, #4]
 800eefe:	80c1      	strh	r1, [r0, #6]
 800ef00:	7143      	strb	r3, [r0, #5]
 800ef02:	4770      	bx	lr

0800ef04 <uxr_buffer_create_session>:
 800ef04:	b530      	push	{r4, r5, lr}
 800ef06:	b089      	sub	sp, #36	@ 0x24
 800ef08:	2300      	movs	r3, #0
 800ef0a:	4d12      	ldr	r5, [pc, #72]	@ (800ef54 <uxr_buffer_create_session+0x50>)
 800ef0c:	9307      	str	r3, [sp, #28]
 800ef0e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ef12:	2201      	movs	r2, #1
 800ef14:	9301      	str	r3, [sp, #4]
 800ef16:	80c2      	strh	r2, [r0, #6]
 800ef18:	f88d 2004 	strb.w	r2, [sp, #4]
 800ef1c:	682a      	ldr	r2, [r5, #0]
 800ef1e:	9200      	str	r2, [sp, #0]
 800ef20:	88aa      	ldrh	r2, [r5, #4]
 800ef22:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ef26:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800ef2a:	9202      	str	r2, [sp, #8]
 800ef2c:	460c      	mov	r4, r1
 800ef2e:	7802      	ldrb	r2, [r0, #0]
 800ef30:	9303      	str	r3, [sp, #12]
 800ef32:	4619      	mov	r1, r3
 800ef34:	f88d 200c 	strb.w	r2, [sp, #12]
 800ef38:	4620      	mov	r0, r4
 800ef3a:	2210      	movs	r2, #16
 800ef3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ef40:	9306      	str	r3, [sp, #24]
 800ef42:	f000 febb 	bl	800fcbc <uxr_buffer_submessage_header>
 800ef46:	4669      	mov	r1, sp
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f001 fe13 	bl	8010b74 <uxr_serialize_CREATE_CLIENT_Payload>
 800ef4e:	b009      	add	sp, #36	@ 0x24
 800ef50:	bd30      	pop	{r4, r5, pc}
 800ef52:	bf00      	nop
 800ef54:	08017d8c 	.word	0x08017d8c

0800ef58 <uxr_buffer_delete_session>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ef8c <uxr_buffer_delete_session+0x34>)
 800ef5c:	b082      	sub	sp, #8
 800ef5e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800ef62:	f8ad c006 	strh.w	ip, [sp, #6]
 800ef66:	460c      	mov	r4, r1
 800ef68:	2202      	movs	r2, #2
 800ef6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef6e:	80c2      	strh	r2, [r0, #6]
 800ef70:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ef74:	2204      	movs	r2, #4
 800ef76:	2300      	movs	r3, #0
 800ef78:	2103      	movs	r1, #3
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 fe9e 	bl	800fcbc <uxr_buffer_submessage_header>
 800ef80:	a901      	add	r1, sp, #4
 800ef82:	4620      	mov	r0, r4
 800ef84:	f001 fe9c 	bl	8010cc0 <uxr_serialize_DELETE_Payload>
 800ef88:	b002      	add	sp, #8
 800ef8a:	bd10      	pop	{r4, pc}
 800ef8c:	08017d8c 	.word	0x08017d8c

0800ef90 <uxr_read_create_session_status>:
 800ef90:	b510      	push	{r4, lr}
 800ef92:	b088      	sub	sp, #32
 800ef94:	4604      	mov	r4, r0
 800ef96:	4608      	mov	r0, r1
 800ef98:	a901      	add	r1, sp, #4
 800ef9a:	f001 fea1 	bl	8010ce0 <uxr_deserialize_STATUS_AGENT_Payload>
 800ef9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800efa2:	7163      	strb	r3, [r4, #5]
 800efa4:	b008      	add	sp, #32
 800efa6:	bd10      	pop	{r4, pc}

0800efa8 <uxr_read_delete_session_status>:
 800efa8:	b510      	push	{r4, lr}
 800efaa:	4604      	mov	r4, r0
 800efac:	b084      	sub	sp, #16
 800efae:	4608      	mov	r0, r1
 800efb0:	a902      	add	r1, sp, #8
 800efb2:	f001 fec5 	bl	8010d40 <uxr_deserialize_STATUS_Payload>
 800efb6:	88e3      	ldrh	r3, [r4, #6]
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d001      	beq.n	800efc0 <uxr_read_delete_session_status+0x18>
 800efbc:	b004      	add	sp, #16
 800efbe:	bd10      	pop	{r4, pc}
 800efc0:	f10d 000a 	add.w	r0, sp, #10
 800efc4:	f7fe feb0 	bl	800dd28 <uxr_object_id_from_raw>
 800efc8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800efcc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800efd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	bf04      	itt	eq
 800efda:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800efde:	7163      	strbeq	r3, [r4, #5]
 800efe0:	b004      	add	sp, #16
 800efe2:	bd10      	pop	{r4, pc}

0800efe4 <uxr_stamp_create_session_header>:
 800efe4:	b510      	push	{r4, lr}
 800efe6:	2208      	movs	r2, #8
 800efe8:	b08a      	sub	sp, #40	@ 0x28
 800efea:	4604      	mov	r4, r0
 800efec:	eb0d 0002 	add.w	r0, sp, r2
 800eff0:	f7fe fc00 	bl	800d7f4 <ucdr_init_buffer>
 800eff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eff8:	9400      	str	r4, [sp, #0]
 800effa:	2300      	movs	r3, #0
 800effc:	461a      	mov	r2, r3
 800effe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f002:	a802      	add	r0, sp, #8
 800f004:	f001 f854 	bl	80100b0 <uxr_serialize_message_header>
 800f008:	b00a      	add	sp, #40	@ 0x28
 800f00a:	bd10      	pop	{r4, pc}

0800f00c <uxr_stamp_session_header>:
 800f00c:	b530      	push	{r4, r5, lr}
 800f00e:	b08d      	sub	sp, #52	@ 0x34
 800f010:	4604      	mov	r4, r0
 800f012:	460d      	mov	r5, r1
 800f014:	9203      	str	r2, [sp, #12]
 800f016:	4619      	mov	r1, r3
 800f018:	a804      	add	r0, sp, #16
 800f01a:	2208      	movs	r2, #8
 800f01c:	f7fe fbea 	bl	800d7f4 <ucdr_init_buffer>
 800f020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f024:	9b03      	ldr	r3, [sp, #12]
 800f026:	9400      	str	r4, [sp, #0]
 800f028:	462a      	mov	r2, r5
 800f02a:	a804      	add	r0, sp, #16
 800f02c:	f001 f840 	bl	80100b0 <uxr_serialize_message_header>
 800f030:	b00d      	add	sp, #52	@ 0x34
 800f032:	bd30      	pop	{r4, r5, pc}

0800f034 <uxr_read_session_header>:
 800f034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f038:	4607      	mov	r7, r0
 800f03a:	b084      	sub	sp, #16
 800f03c:	4608      	mov	r0, r1
 800f03e:	460c      	mov	r4, r1
 800f040:	4615      	mov	r5, r2
 800f042:	461e      	mov	r6, r3
 800f044:	f7fe fc06 	bl	800d854 <ucdr_buffer_remaining>
 800f048:	2808      	cmp	r0, #8
 800f04a:	d803      	bhi.n	800f054 <uxr_read_session_header+0x20>
 800f04c:	2000      	movs	r0, #0
 800f04e:	b004      	add	sp, #16
 800f050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f054:	f10d 080c 	add.w	r8, sp, #12
 800f058:	4633      	mov	r3, r6
 800f05a:	462a      	mov	r2, r5
 800f05c:	f8cd 8000 	str.w	r8, [sp]
 800f060:	4620      	mov	r0, r4
 800f062:	f10d 010b 	add.w	r1, sp, #11
 800f066:	f001 f841 	bl	80100ec <uxr_deserialize_message_header>
 800f06a:	783a      	ldrb	r2, [r7, #0]
 800f06c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f070:	4293      	cmp	r3, r2
 800f072:	d1eb      	bne.n	800f04c <uxr_read_session_header+0x18>
 800f074:	061b      	lsls	r3, r3, #24
 800f076:	d41c      	bmi.n	800f0b2 <uxr_read_session_header+0x7e>
 800f078:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f07c:	787b      	ldrb	r3, [r7, #1]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d003      	beq.n	800f08a <uxr_read_session_header+0x56>
 800f082:	2001      	movs	r0, #1
 800f084:	f080 0001 	eor.w	r0, r0, #1
 800f088:	e7e1      	b.n	800f04e <uxr_read_session_header+0x1a>
 800f08a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f08e:	78bb      	ldrb	r3, [r7, #2]
 800f090:	429a      	cmp	r2, r3
 800f092:	f107 0102 	add.w	r1, r7, #2
 800f096:	d1f4      	bne.n	800f082 <uxr_read_session_header+0x4e>
 800f098:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f09c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d1ee      	bne.n	800f082 <uxr_read_session_header+0x4e>
 800f0a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f0a8:	784b      	ldrb	r3, [r1, #1]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d1e9      	bne.n	800f082 <uxr_read_session_header+0x4e>
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	e7e8      	b.n	800f084 <uxr_read_session_header+0x50>
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	e7cb      	b.n	800f04e <uxr_read_session_header+0x1a>
 800f0b6:	bf00      	nop

0800f0b8 <uxr_session_header_offset>:
 800f0b8:	f990 3000 	ldrsb.w	r3, [r0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bfac      	ite	ge
 800f0c0:	2008      	movge	r0, #8
 800f0c2:	2004      	movlt	r0, #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop

0800f0c8 <uxr_init_base_object_request>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	88c3      	ldrh	r3, [r0, #6]
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f0d2:	9101      	str	r1, [sp, #4]
 800f0d4:	f1a3 010a 	sub.w	r1, r3, #10
 800f0d8:	b289      	uxth	r1, r1
 800f0da:	42a1      	cmp	r1, r4
 800f0dc:	d80e      	bhi.n	800f0fc <uxr_init_base_object_request+0x34>
 800f0de:	3301      	adds	r3, #1
 800f0e0:	b29c      	uxth	r4, r3
 800f0e2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	80c4      	strh	r4, [r0, #6]
 800f0ea:	9801      	ldr	r0, [sp, #4]
 800f0ec:	7011      	strb	r1, [r2, #0]
 800f0ee:	7053      	strb	r3, [r2, #1]
 800f0f0:	1c91      	adds	r1, r2, #2
 800f0f2:	f7fe fe2d 	bl	800dd50 <uxr_object_id_to_raw>
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	b002      	add	sp, #8
 800f0fa:	bd10      	pop	{r4, pc}
 800f0fc:	230a      	movs	r3, #10
 800f0fe:	2100      	movs	r1, #0
 800f100:	461c      	mov	r4, r3
 800f102:	e7f1      	b.n	800f0e8 <uxr_init_base_object_request+0x20>

0800f104 <uxr_parse_base_object_request>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	4604      	mov	r4, r0
 800f108:	3002      	adds	r0, #2
 800f10a:	460d      	mov	r5, r1
 800f10c:	4616      	mov	r6, r2
 800f10e:	f7fe fe0b 	bl	800dd28 <uxr_object_id_from_raw>
 800f112:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f116:	8028      	strh	r0, [r5, #0]
 800f118:	806b      	strh	r3, [r5, #2]
 800f11a:	7822      	ldrb	r2, [r4, #0]
 800f11c:	7863      	ldrb	r3, [r4, #1]
 800f11e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f122:	8033      	strh	r3, [r6, #0]
 800f124:	bd70      	pop	{r4, r5, r6, pc}
 800f126:	bf00      	nop

0800f128 <uxr_init_framing_io>:
 800f128:	2300      	movs	r3, #0
 800f12a:	7041      	strb	r1, [r0, #1]
 800f12c:	7003      	strb	r3, [r0, #0]
 800f12e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop

0800f134 <uxr_write_framed_msg>:
 800f134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f138:	4617      	mov	r7, r2
 800f13a:	7842      	ldrb	r2, [r0, #1]
 800f13c:	b083      	sub	sp, #12
 800f13e:	460e      	mov	r6, r1
 800f140:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f144:	469a      	mov	sl, r3
 800f146:	2901      	cmp	r1, #1
 800f148:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f14c:	4604      	mov	r4, r0
 800f14e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f152:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f156:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f15a:	f240 8137 	bls.w	800f3cc <uxr_write_framed_msg+0x298>
 800f15e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f162:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f166:	2901      	cmp	r1, #1
 800f168:	f04f 0202 	mov.w	r2, #2
 800f16c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f170:	f240 808f 	bls.w	800f292 <uxr_write_framed_msg+0x15e>
 800f174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f176:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800f17a:	b2dd      	uxtb	r5, r3
 800f17c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f180:	2203      	movs	r2, #3
 800f182:	2901      	cmp	r1, #1
 800f184:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f188:	f240 809a 	bls.w	800f2c0 <uxr_write_framed_msg+0x18c>
 800f18c:	18a1      	adds	r1, r4, r2
 800f18e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f190:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f194:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f198:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f19c:	3201      	adds	r2, #1
 800f19e:	2801      	cmp	r0, #1
 800f1a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f1a4:	f240 80a0 	bls.w	800f2e8 <uxr_write_framed_msg+0x1b4>
 800f1a8:	18a0      	adds	r0, r4, r2
 800f1aa:	3201      	adds	r2, #1
 800f1ac:	b2d2      	uxtb	r2, r2
 800f1ae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f1b2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 80a9 	beq.w	800f30e <uxr_write_framed_msg+0x1da>
 800f1bc:	f04f 0900 	mov.w	r9, #0
 800f1c0:	46c8      	mov	r8, r9
 800f1c2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f1c6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f1ca:	2901      	cmp	r1, #1
 800f1cc:	f240 80c3 	bls.w	800f356 <uxr_write_framed_msg+0x222>
 800f1d0:	2a29      	cmp	r2, #41	@ 0x29
 800f1d2:	f200 809f 	bhi.w	800f314 <uxr_write_framed_msg+0x1e0>
 800f1d6:	18a1      	adds	r1, r4, r2
 800f1d8:	3201      	adds	r2, #1
 800f1da:	b2d2      	uxtb	r2, r2
 800f1dc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800f1e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f1e4:	ea89 0303 	eor.w	r3, r9, r3
 800f1e8:	498c      	ldr	r1, [pc, #560]	@ (800f41c <uxr_write_framed_msg+0x2e8>)
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	f108 0801 	add.w	r8, r8, #1
 800f1f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f1f4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800f1f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1fa:	4543      	cmp	r3, r8
 800f1fc:	d8e1      	bhi.n	800f1c2 <uxr_write_framed_msg+0x8e>
 800f1fe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f202:	fa5f f889 	uxtb.w	r8, r9
 800f206:	9301      	str	r3, [sp, #4]
 800f208:	f04f 0900 	mov.w	r9, #0
 800f20c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800f210:	fa5f f18a 	uxtb.w	r1, sl
 800f214:	2901      	cmp	r1, #1
 800f216:	d921      	bls.n	800f25c <uxr_write_framed_msg+0x128>
 800f218:	2a29      	cmp	r2, #41	@ 0x29
 800f21a:	f240 80af 	bls.w	800f37c <uxr_write_framed_msg+0x248>
 800f21e:	2500      	movs	r5, #0
 800f220:	e000      	b.n	800f224 <uxr_write_framed_msg+0xf0>
 800f222:	b160      	cbz	r0, 800f23e <uxr_write_framed_msg+0x10a>
 800f224:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f228:	1b52      	subs	r2, r2, r5
 800f22a:	465b      	mov	r3, fp
 800f22c:	4421      	add	r1, r4
 800f22e:	4638      	mov	r0, r7
 800f230:	47b0      	blx	r6
 800f232:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f236:	4405      	add	r5, r0
 800f238:	4295      	cmp	r5, r2
 800f23a:	d3f2      	bcc.n	800f222 <uxr_write_framed_msg+0xee>
 800f23c:	d003      	beq.n	800f246 <uxr_write_framed_msg+0x112>
 800f23e:	2000      	movs	r0, #0
 800f240:	b003      	add	sp, #12
 800f242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f246:	fa5f f18a 	uxtb.w	r1, sl
 800f24a:	f04f 0300 	mov.w	r3, #0
 800f24e:	2901      	cmp	r1, #1
 800f250:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f254:	f04f 0200 	mov.w	r2, #0
 800f258:	f200 8090 	bhi.w	800f37c <uxr_write_framed_msg+0x248>
 800f25c:	1c51      	adds	r1, r2, #1
 800f25e:	b2c9      	uxtb	r1, r1
 800f260:	2929      	cmp	r1, #41	@ 0x29
 800f262:	d8dc      	bhi.n	800f21e <uxr_write_framed_msg+0xea>
 800f264:	18a5      	adds	r5, r4, r2
 800f266:	4421      	add	r1, r4
 800f268:	3202      	adds	r2, #2
 800f26a:	f088 0820 	eor.w	r8, r8, #32
 800f26e:	4648      	mov	r0, r9
 800f270:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800f274:	b2d2      	uxtb	r2, r2
 800f276:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800f27a:	f04f 0901 	mov.w	r9, #1
 800f27e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f282:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f286:	2800      	cmp	r0, #0
 800f288:	f040 8085 	bne.w	800f396 <uxr_write_framed_msg+0x262>
 800f28c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f290:	e7bc      	b.n	800f20c <uxr_write_framed_msg+0xd8>
 800f292:	4611      	mov	r1, r2
 800f294:	f04f 0c03 	mov.w	ip, #3
 800f298:	2204      	movs	r2, #4
 800f29a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f29c:	4421      	add	r1, r4
 800f29e:	b2dd      	uxtb	r5, r3
 800f2a0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800f2a4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800f2a8:	44a4      	add	ip, r4
 800f2aa:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f2ae:	f080 0020 	eor.w	r0, r0, #32
 800f2b2:	2901      	cmp	r1, #1
 800f2b4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800f2b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f2bc:	f63f af66 	bhi.w	800f18c <uxr_write_framed_msg+0x58>
 800f2c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2c2:	18a0      	adds	r0, r4, r2
 800f2c4:	f085 0520 	eor.w	r5, r5, #32
 800f2c8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f2cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f2d0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800f2d4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800f2d8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f2dc:	3202      	adds	r2, #2
 800f2de:	2801      	cmp	r0, #1
 800f2e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f2e4:	f63f af60 	bhi.w	800f1a8 <uxr_write_framed_msg+0x74>
 800f2e8:	1c50      	adds	r0, r2, #1
 800f2ea:	18a5      	adds	r5, r4, r2
 800f2ec:	fa54 f080 	uxtab	r0, r4, r0
 800f2f0:	3202      	adds	r2, #2
 800f2f2:	f081 0120 	eor.w	r1, r1, #32
 800f2f6:	b2d2      	uxtb	r2, r2
 800f2f8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f2fc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800f300:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f304:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f47f af57 	bne.w	800f1bc <uxr_write_framed_msg+0x88>
 800f30e:	9301      	str	r3, [sp, #4]
 800f310:	4698      	mov	r8, r3
 800f312:	e779      	b.n	800f208 <uxr_write_framed_msg+0xd4>
 800f314:	2500      	movs	r5, #0
 800f316:	e001      	b.n	800f31c <uxr_write_framed_msg+0x1e8>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d090      	beq.n	800f23e <uxr_write_framed_msg+0x10a>
 800f31c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f320:	1b52      	subs	r2, r2, r5
 800f322:	465b      	mov	r3, fp
 800f324:	4421      	add	r1, r4
 800f326:	4638      	mov	r0, r7
 800f328:	47b0      	blx	r6
 800f32a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f32e:	4405      	add	r5, r0
 800f330:	4295      	cmp	r5, r2
 800f332:	d3f1      	bcc.n	800f318 <uxr_write_framed_msg+0x1e4>
 800f334:	d183      	bne.n	800f23e <uxr_write_framed_msg+0x10a>
 800f336:	f04f 0300 	mov.w	r3, #0
 800f33a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f33e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f340:	4543      	cmp	r3, r8
 800f342:	d964      	bls.n	800f40e <uxr_write_framed_msg+0x2da>
 800f344:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f348:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f34c:	2901      	cmp	r1, #1
 800f34e:	f04f 0200 	mov.w	r2, #0
 800f352:	f63f af3d 	bhi.w	800f1d0 <uxr_write_framed_msg+0x9c>
 800f356:	1c51      	adds	r1, r2, #1
 800f358:	b2c9      	uxtb	r1, r1
 800f35a:	2929      	cmp	r1, #41	@ 0x29
 800f35c:	d8da      	bhi.n	800f314 <uxr_write_framed_msg+0x1e0>
 800f35e:	18a0      	adds	r0, r4, r2
 800f360:	4421      	add	r1, r4
 800f362:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800f366:	3202      	adds	r2, #2
 800f368:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800f36c:	b2d2      	uxtb	r2, r2
 800f36e:	f083 0020 	eor.w	r0, r3, #32
 800f372:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800f376:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f37a:	e733      	b.n	800f1e4 <uxr_write_framed_msg+0xb0>
 800f37c:	18a1      	adds	r1, r4, r2
 800f37e:	3201      	adds	r2, #1
 800f380:	4648      	mov	r0, r9
 800f382:	b2d2      	uxtb	r2, r2
 800f384:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f388:	f04f 0901 	mov.w	r9, #1
 800f38c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f390:	2800      	cmp	r0, #0
 800f392:	f43f af7b 	beq.w	800f28c <uxr_write_framed_msg+0x158>
 800f396:	2500      	movs	r5, #0
 800f398:	e002      	b.n	800f3a0 <uxr_write_framed_msg+0x26c>
 800f39a:	2800      	cmp	r0, #0
 800f39c:	f43f af4f 	beq.w	800f23e <uxr_write_framed_msg+0x10a>
 800f3a0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f3a4:	1b52      	subs	r2, r2, r5
 800f3a6:	465b      	mov	r3, fp
 800f3a8:	4421      	add	r1, r4
 800f3aa:	4638      	mov	r0, r7
 800f3ac:	47b0      	blx	r6
 800f3ae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f3b2:	4405      	add	r5, r0
 800f3b4:	4295      	cmp	r5, r2
 800f3b6:	d3f0      	bcc.n	800f39a <uxr_write_framed_msg+0x266>
 800f3b8:	f47f af41 	bne.w	800f23e <uxr_write_framed_msg+0x10a>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f3c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3c4:	b298      	uxth	r0, r3
 800f3c6:	b003      	add	sp, #12
 800f3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3cc:	217d      	movs	r1, #125	@ 0x7d
 800f3ce:	f082 0220 	eor.w	r2, r2, #32
 800f3d2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800f3d6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f3da:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800f3de:	2901      	cmp	r1, #1
 800f3e0:	f04f 0203 	mov.w	r2, #3
 800f3e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f3e8:	d804      	bhi.n	800f3f4 <uxr_write_framed_msg+0x2c0>
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	f04f 0c04 	mov.w	ip, #4
 800f3f0:	2205      	movs	r2, #5
 800f3f2:	e752      	b.n	800f29a <uxr_write_framed_msg+0x166>
 800f3f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3f6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800f3fa:	b2dd      	uxtb	r5, r3
 800f3fc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f400:	2204      	movs	r2, #4
 800f402:	2901      	cmp	r1, #1
 800f404:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f408:	f63f aec0 	bhi.w	800f18c <uxr_write_framed_msg+0x58>
 800f40c:	e758      	b.n	800f2c0 <uxr_write_framed_msg+0x18c>
 800f40e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f412:	fa5f f889 	uxtb.w	r8, r9
 800f416:	9301      	str	r3, [sp, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	e6f5      	b.n	800f208 <uxr_write_framed_msg+0xd4>
 800f41c:	080181ec 	.word	0x080181ec

0800f420 <uxr_framing_read_transport>:
 800f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f424:	4604      	mov	r4, r0
 800f426:	b083      	sub	sp, #12
 800f428:	461f      	mov	r7, r3
 800f42a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f42e:	4689      	mov	r9, r1
 800f430:	4692      	mov	sl, r2
 800f432:	f000 fc89 	bl	800fd48 <uxr_millis>
 800f436:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f43a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f43e:	42b3      	cmp	r3, r6
 800f440:	4680      	mov	r8, r0
 800f442:	d061      	beq.n	800f508 <uxr_framing_read_transport+0xe8>
 800f444:	d81c      	bhi.n	800f480 <uxr_framing_read_transport+0x60>
 800f446:	1e75      	subs	r5, r6, #1
 800f448:	1aed      	subs	r5, r5, r3
 800f44a:	b2ed      	uxtb	r5, r5
 800f44c:	2600      	movs	r6, #0
 800f44e:	455d      	cmp	r5, fp
 800f450:	d81f      	bhi.n	800f492 <uxr_framing_read_transport+0x72>
 800f452:	19ab      	adds	r3, r5, r6
 800f454:	455b      	cmp	r3, fp
 800f456:	bf84      	itt	hi
 800f458:	ebab 0605 	subhi.w	r6, fp, r5
 800f45c:	b2f6      	uxtbhi	r6, r6
 800f45e:	b9ed      	cbnz	r5, 800f49c <uxr_framing_read_transport+0x7c>
 800f460:	f04f 0b00 	mov.w	fp, #0
 800f464:	f000 fc70 	bl	800fd48 <uxr_millis>
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	eba0 0808 	sub.w	r8, r0, r8
 800f46e:	eba3 0308 	sub.w	r3, r3, r8
 800f472:	4658      	mov	r0, fp
 800f474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f478:	603b      	str	r3, [r7, #0]
 800f47a:	b003      	add	sp, #12
 800f47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f480:	2e00      	cmp	r6, #0
 800f482:	d049      	beq.n	800f518 <uxr_framing_read_transport+0xf8>
 800f484:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800f488:	b2ed      	uxtb	r5, r5
 800f48a:	3e01      	subs	r6, #1
 800f48c:	455d      	cmp	r5, fp
 800f48e:	b2f6      	uxtb	r6, r6
 800f490:	d9df      	bls.n	800f452 <uxr_framing_read_transport+0x32>
 800f492:	fa5f f58b 	uxtb.w	r5, fp
 800f496:	2600      	movs	r6, #0
 800f498:	2d00      	cmp	r5, #0
 800f49a:	d0e1      	beq.n	800f460 <uxr_framing_read_transport+0x40>
 800f49c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f4a0:	3102      	adds	r1, #2
 800f4a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	4421      	add	r1, r4
 800f4aa:	462a      	mov	r2, r5
 800f4ac:	4650      	mov	r0, sl
 800f4ae:	47c8      	blx	r9
 800f4b0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f4b4:	4a1a      	ldr	r2, [pc, #104]	@ (800f520 <uxr_framing_read_transport+0x100>)
 800f4b6:	4403      	add	r3, r0
 800f4b8:	0859      	lsrs	r1, r3, #1
 800f4ba:	fba2 2101 	umull	r2, r1, r2, r1
 800f4be:	0889      	lsrs	r1, r1, #2
 800f4c0:	222a      	movs	r2, #42	@ 0x2a
 800f4c2:	fb02 3111 	mls	r1, r2, r1, r3
 800f4c6:	4683      	mov	fp, r0
 800f4c8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d0c7      	beq.n	800f460 <uxr_framing_read_transport+0x40>
 800f4d0:	42a8      	cmp	r0, r5
 800f4d2:	d1c7      	bne.n	800f464 <uxr_framing_read_transport+0x44>
 800f4d4:	2e00      	cmp	r6, #0
 800f4d6:	d0c5      	beq.n	800f464 <uxr_framing_read_transport+0x44>
 800f4d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	3102      	adds	r1, #2
 800f4de:	4632      	mov	r2, r6
 800f4e0:	4421      	add	r1, r4
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	4650      	mov	r0, sl
 800f4e6:	47c8      	blx	r9
 800f4e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f4ec:	4a0c      	ldr	r2, [pc, #48]	@ (800f520 <uxr_framing_read_transport+0x100>)
 800f4ee:	180b      	adds	r3, r1, r0
 800f4f0:	0859      	lsrs	r1, r3, #1
 800f4f2:	fba2 1201 	umull	r1, r2, r2, r1
 800f4f6:	0892      	lsrs	r2, r2, #2
 800f4f8:	212a      	movs	r1, #42	@ 0x2a
 800f4fa:	fb01 3312 	mls	r3, r1, r2, r3
 800f4fe:	eb00 0b05 	add.w	fp, r0, r5
 800f502:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f506:	e7ad      	b.n	800f464 <uxr_framing_read_transport+0x44>
 800f508:	2600      	movs	r6, #0
 800f50a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f50e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f510:	d9bf      	bls.n	800f492 <uxr_framing_read_transport+0x72>
 800f512:	2102      	movs	r1, #2
 800f514:	2529      	movs	r5, #41	@ 0x29
 800f516:	e7c4      	b.n	800f4a2 <uxr_framing_read_transport+0x82>
 800f518:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f51c:	b2ed      	uxtb	r5, r5
 800f51e:	e796      	b.n	800f44e <uxr_framing_read_transport+0x2e>
 800f520:	30c30c31 	.word	0x30c30c31

0800f524 <uxr_read_framed_msg>:
 800f524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f528:	461e      	mov	r6, r3
 800f52a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800f52e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f532:	429d      	cmp	r5, r3
 800f534:	b083      	sub	sp, #12
 800f536:	4604      	mov	r4, r0
 800f538:	4688      	mov	r8, r1
 800f53a:	4691      	mov	r9, r2
 800f53c:	f000 8188 	beq.w	800f850 <uxr_read_framed_msg+0x32c>
 800f540:	7823      	ldrb	r3, [r4, #0]
 800f542:	4dc1      	ldr	r5, [pc, #772]	@ (800f848 <uxr_read_framed_msg+0x324>)
 800f544:	4fc1      	ldr	r7, [pc, #772]	@ (800f84c <uxr_read_framed_msg+0x328>)
 800f546:	2b07      	cmp	r3, #7
 800f548:	d8fd      	bhi.n	800f546 <uxr_read_framed_msg+0x22>
 800f54a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f54e:	0115      	.short	0x0115
 800f550:	00d600f6 	.word	0x00d600f6
 800f554:	009000b9 	.word	0x009000b9
 800f558:	0030004d 	.word	0x0030004d
 800f55c:	0008      	.short	0x0008
 800f55e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f562:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f566:	4299      	cmp	r1, r3
 800f568:	f000 814a 	beq.w	800f800 <uxr_read_framed_msg+0x2dc>
 800f56c:	18e2      	adds	r2, r4, r3
 800f56e:	7892      	ldrb	r2, [r2, #2]
 800f570:	2a7d      	cmp	r2, #125	@ 0x7d
 800f572:	f000 8199 	beq.w	800f8a8 <uxr_read_framed_msg+0x384>
 800f576:	3301      	adds	r3, #1
 800f578:	0858      	lsrs	r0, r3, #1
 800f57a:	fba5 1000 	umull	r1, r0, r5, r0
 800f57e:	0880      	lsrs	r0, r0, #2
 800f580:	212a      	movs	r1, #42	@ 0x2a
 800f582:	fb01 3310 	mls	r3, r1, r0, r3
 800f586:	2a7e      	cmp	r2, #126	@ 0x7e
 800f588:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f58c:	f000 8252 	beq.w	800fa34 <uxr_read_framed_msg+0x510>
 800f590:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f592:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800f594:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f598:	b29b      	uxth	r3, r3
 800f59a:	2200      	movs	r2, #0
 800f59c:	4299      	cmp	r1, r3
 800f59e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f5a0:	7022      	strb	r2, [r4, #0]
 800f5a2:	f000 8179 	beq.w	800f898 <uxr_read_framed_msg+0x374>
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	b003      	add	sp, #12
 800f5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f5b2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f5b6:	4299      	cmp	r1, r3
 800f5b8:	f000 8131 	beq.w	800f81e <uxr_read_framed_msg+0x2fa>
 800f5bc:	18e2      	adds	r2, r4, r3
 800f5be:	7890      	ldrb	r0, [r2, #2]
 800f5c0:	287d      	cmp	r0, #125	@ 0x7d
 800f5c2:	f000 8190 	beq.w	800f8e6 <uxr_read_framed_msg+0x3c2>
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	085a      	lsrs	r2, r3, #1
 800f5ca:	fba5 1202 	umull	r1, r2, r5, r2
 800f5ce:	0892      	lsrs	r2, r2, #2
 800f5d0:	212a      	movs	r1, #42	@ 0x2a
 800f5d2:	fb01 3312 	mls	r3, r1, r2, r3
 800f5d6:	287e      	cmp	r0, #126	@ 0x7e
 800f5d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f5dc:	f000 821a 	beq.w	800fa14 <uxr_read_framed_msg+0x4f0>
 800f5e0:	2307      	movs	r3, #7
 800f5e2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f5e4:	7023      	strb	r3, [r4, #0]
 800f5e6:	e7ae      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f5e8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f5ea:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f5ee:	459e      	cmp	lr, r3
 800f5f0:	d938      	bls.n	800f664 <uxr_read_framed_msg+0x140>
 800f5f2:	ee07 8a90 	vmov	s15, r8
 800f5f6:	212a      	movs	r1, #42	@ 0x2a
 800f5f8:	e020      	b.n	800f63c <uxr_read_framed_msg+0x118>
 800f5fa:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f5fe:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f602:	f000 80d4 	beq.w	800f7ae <uxr_read_framed_msg+0x28a>
 800f606:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f60a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f60e:	f000 8219 	beq.w	800fa44 <uxr_read_framed_msg+0x520>
 800f612:	f806 c003 	strb.w	ip, [r6, r3]
 800f616:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800f61a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f61c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f620:	ea8a 000c 	eor.w	r0, sl, ip
 800f624:	b2c0      	uxtb	r0, r0
 800f626:	3301      	adds	r3, #1
 800f628:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f632:	4573      	cmp	r3, lr
 800f634:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f636:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f638:	f080 8120 	bcs.w	800f87c <uxr_read_framed_msg+0x358>
 800f63c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f640:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f644:	f100 0c01 	add.w	ip, r0, #1
 800f648:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f64c:	fba5 8202 	umull	r8, r2, r5, r2
 800f650:	0892      	lsrs	r2, r2, #2
 800f652:	4582      	cmp	sl, r0
 800f654:	eb04 0b00 	add.w	fp, r4, r0
 800f658:	fb01 c212 	mls	r2, r1, r2, ip
 800f65c:	d1cd      	bne.n	800f5fa <uxr_read_framed_msg+0xd6>
 800f65e:	ee17 8a90 	vmov	r8, s15
 800f662:	459e      	cmp	lr, r3
 800f664:	f040 8111 	bne.w	800f88a <uxr_read_framed_msg+0x366>
 800f668:	2306      	movs	r3, #6
 800f66a:	7023      	strb	r3, [r4, #0]
 800f66c:	e76b      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f66e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f672:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f676:	4298      	cmp	r0, r3
 800f678:	f000 80c2 	beq.w	800f800 <uxr_read_framed_msg+0x2dc>
 800f67c:	18e2      	adds	r2, r4, r3
 800f67e:	7891      	ldrb	r1, [r2, #2]
 800f680:	297d      	cmp	r1, #125	@ 0x7d
 800f682:	f000 814c 	beq.w	800f91e <uxr_read_framed_msg+0x3fa>
 800f686:	3301      	adds	r3, #1
 800f688:	085a      	lsrs	r2, r3, #1
 800f68a:	fba5 0202 	umull	r0, r2, r5, r2
 800f68e:	0892      	lsrs	r2, r2, #2
 800f690:	202a      	movs	r0, #42	@ 0x2a
 800f692:	fb00 3312 	mls	r3, r0, r2, r3
 800f696:	297e      	cmp	r1, #126	@ 0x7e
 800f698:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f69c:	f000 81ca 	beq.w	800fa34 <uxr_read_framed_msg+0x510>
 800f6a0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f6a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f6a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	428b      	cmp	r3, r1
 800f6ae:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f6b0:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f6b2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f6b4:	f240 80df 	bls.w	800f876 <uxr_read_framed_msg+0x352>
 800f6b8:	7020      	strb	r0, [r4, #0]
 800f6ba:	b003      	add	sp, #12
 800f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f6c4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f6c8:	4299      	cmp	r1, r3
 800f6ca:	f000 80a8 	beq.w	800f81e <uxr_read_framed_msg+0x2fa>
 800f6ce:	18e2      	adds	r2, r4, r3
 800f6d0:	7890      	ldrb	r0, [r2, #2]
 800f6d2:	287d      	cmp	r0, #125	@ 0x7d
 800f6d4:	f000 8164 	beq.w	800f9a0 <uxr_read_framed_msg+0x47c>
 800f6d8:	3301      	adds	r3, #1
 800f6da:	085a      	lsrs	r2, r3, #1
 800f6dc:	fba5 1202 	umull	r1, r2, r5, r2
 800f6e0:	0892      	lsrs	r2, r2, #2
 800f6e2:	212a      	movs	r1, #42	@ 0x2a
 800f6e4:	fb01 3312 	mls	r3, r1, r2, r3
 800f6e8:	287e      	cmp	r0, #126	@ 0x7e
 800f6ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f6ee:	f000 8191 	beq.w	800fa14 <uxr_read_framed_msg+0x4f0>
 800f6f2:	2304      	movs	r3, #4
 800f6f4:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f6f6:	7023      	strb	r3, [r4, #0]
 800f6f8:	e725      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f6fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f6fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f702:	4290      	cmp	r0, r2
 800f704:	f000 80b3 	beq.w	800f86e <uxr_read_framed_msg+0x34a>
 800f708:	18a3      	adds	r3, r4, r2
 800f70a:	7899      	ldrb	r1, [r3, #2]
 800f70c:	297d      	cmp	r1, #125	@ 0x7d
 800f70e:	f000 8164 	beq.w	800f9da <uxr_read_framed_msg+0x4b6>
 800f712:	3201      	adds	r2, #1
 800f714:	0850      	lsrs	r0, r2, #1
 800f716:	fba5 3000 	umull	r3, r0, r5, r0
 800f71a:	0880      	lsrs	r0, r0, #2
 800f71c:	232a      	movs	r3, #42	@ 0x2a
 800f71e:	fb03 2210 	mls	r2, r3, r0, r2
 800f722:	297e      	cmp	r1, #126	@ 0x7e
 800f724:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f728:	f000 8188 	beq.w	800fa3c <uxr_read_framed_msg+0x518>
 800f72c:	7863      	ldrb	r3, [r4, #1]
 800f72e:	428b      	cmp	r3, r1
 800f730:	bf0c      	ite	eq
 800f732:	2303      	moveq	r3, #3
 800f734:	2300      	movne	r3, #0
 800f736:	7023      	strb	r3, [r4, #0]
 800f738:	e705      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f73a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f73e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f742:	2200      	movs	r2, #0
 800f744:	4299      	cmp	r1, r3
 800f746:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f74a:	d06c      	beq.n	800f826 <uxr_read_framed_msg+0x302>
 800f74c:	18e2      	adds	r2, r4, r3
 800f74e:	7890      	ldrb	r0, [r2, #2]
 800f750:	287d      	cmp	r0, #125	@ 0x7d
 800f752:	f000 8101 	beq.w	800f958 <uxr_read_framed_msg+0x434>
 800f756:	3301      	adds	r3, #1
 800f758:	085a      	lsrs	r2, r3, #1
 800f75a:	fba5 1202 	umull	r1, r2, r5, r2
 800f75e:	0892      	lsrs	r2, r2, #2
 800f760:	212a      	movs	r1, #42	@ 0x2a
 800f762:	fb01 3312 	mls	r3, r1, r2, r3
 800f766:	287e      	cmp	r0, #126	@ 0x7e
 800f768:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f76c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f770:	d059      	beq.n	800f826 <uxr_read_framed_msg+0x302>
 800f772:	2302      	movs	r3, #2
 800f774:	7023      	strb	r3, [r4, #0]
 800f776:	e6e6      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f778:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f77c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f780:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800f784:	1c51      	adds	r1, r2, #1
 800f786:	084b      	lsrs	r3, r1, #1
 800f788:	fba5 c303 	umull	ip, r3, r5, r3
 800f78c:	089b      	lsrs	r3, r3, #2
 800f78e:	fb0e 1313 	mls	r3, lr, r3, r1
 800f792:	4592      	cmp	sl, r2
 800f794:	eb04 0002 	add.w	r0, r4, r2
 800f798:	b2da      	uxtb	r2, r3
 800f79a:	f43f af04 	beq.w	800f5a6 <uxr_read_framed_msg+0x82>
 800f79e:	7883      	ldrb	r3, [r0, #2]
 800f7a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f7a4:	2b7e      	cmp	r3, #126	@ 0x7e
 800f7a6:	d1ed      	bne.n	800f784 <uxr_read_framed_msg+0x260>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	7023      	strb	r3, [r4, #0]
 800f7ac:	e6cb      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f7ae:	f100 0c01 	add.w	ip, r0, #1
 800f7b2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f7b6:	fba5 8202 	umull	r8, r2, r5, r2
 800f7ba:	0892      	lsrs	r2, r2, #2
 800f7bc:	fb01 c212 	mls	r2, r1, r2, ip
 800f7c0:	eb04 0c02 	add.w	ip, r4, r2
 800f7c4:	b2d2      	uxtb	r2, r2
 800f7c6:	4592      	cmp	sl, r2
 800f7c8:	f100 0002 	add.w	r0, r0, #2
 800f7cc:	f43f af47 	beq.w	800f65e <uxr_read_framed_msg+0x13a>
 800f7d0:	0842      	lsrs	r2, r0, #1
 800f7d2:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f7d6:	fba5 8202 	umull	r8, r2, r5, r2
 800f7da:	0892      	lsrs	r2, r2, #2
 800f7dc:	fb01 0012 	mls	r0, r1, r2, r0
 800f7e0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800f7e4:	f08a 0c20 	eor.w	ip, sl, #32
 800f7e8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f7ec:	f47f af11 	bne.w	800f612 <uxr_read_framed_msg+0xee>
 800f7f0:	459e      	cmp	lr, r3
 800f7f2:	ee17 8a90 	vmov	r8, s15
 800f7f6:	f43f af37 	beq.w	800f668 <uxr_read_framed_msg+0x144>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	7023      	strb	r3, [r4, #0]
 800f7fe:	e6a2      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	2301      	movs	r3, #1
 800f806:	9301      	str	r3, [sp, #4]
 800f808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f80a:	464a      	mov	r2, r9
 800f80c:	4641      	mov	r1, r8
 800f80e:	4620      	mov	r0, r4
 800f810:	f7ff fe06 	bl	800f420 <uxr_framing_read_transport>
 800f814:	2800      	cmp	r0, #0
 800f816:	f43f aec6 	beq.w	800f5a6 <uxr_read_framed_msg+0x82>
 800f81a:	7823      	ldrb	r3, [r4, #0]
 800f81c:	e693      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f81e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f820:	9300      	str	r3, [sp, #0]
 800f822:	2302      	movs	r3, #2
 800f824:	e7ef      	b.n	800f806 <uxr_read_framed_msg+0x2e2>
 800f826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	2304      	movs	r3, #4
 800f82c:	9301      	str	r3, [sp, #4]
 800f82e:	464a      	mov	r2, r9
 800f830:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f832:	4641      	mov	r1, r8
 800f834:	4620      	mov	r0, r4
 800f836:	f7ff fdf3 	bl	800f420 <uxr_framing_read_transport>
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d1ed      	bne.n	800f81a <uxr_read_framed_msg+0x2f6>
 800f83e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f842:	2b7e      	cmp	r3, #126	@ 0x7e
 800f844:	d0e9      	beq.n	800f81a <uxr_read_framed_msg+0x2f6>
 800f846:	e6ae      	b.n	800f5a6 <uxr_read_framed_msg+0x82>
 800f848:	30c30c31 	.word	0x30c30c31
 800f84c:	080181ec 	.word	0x080181ec
 800f850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	2305      	movs	r3, #5
 800f856:	9301      	str	r3, [sp, #4]
 800f858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f85a:	f7ff fde1 	bl	800f420 <uxr_framing_read_transport>
 800f85e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f862:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f866:	429a      	cmp	r2, r3
 800f868:	f43f ae9d 	beq.w	800f5a6 <uxr_read_framed_msg+0x82>
 800f86c:	e668      	b.n	800f540 <uxr_read_framed_msg+0x1c>
 800f86e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	2303      	movs	r3, #3
 800f874:	e7c7      	b.n	800f806 <uxr_read_framed_msg+0x2e2>
 800f876:	2305      	movs	r3, #5
 800f878:	7023      	strb	r3, [r4, #0]
 800f87a:	e664      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800f87c:	ee17 8a90 	vmov	r8, s15
 800f880:	f43f aef2 	beq.w	800f668 <uxr_read_framed_msg+0x144>
 800f884:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f888:	d08e      	beq.n	800f7a8 <uxr_read_framed_msg+0x284>
 800f88a:	ebae 0303 	sub.w	r3, lr, r3
 800f88e:	3302      	adds	r3, #2
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	e7b7      	b.n	800f808 <uxr_read_framed_msg+0x2e4>
 800f898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f89a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f89e:	7013      	strb	r3, [r2, #0]
 800f8a0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f8a2:	b003      	add	sp, #12
 800f8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a8:	f103 0c01 	add.w	ip, r3, #1
 800f8ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f8b0:	fba5 0202 	umull	r0, r2, r5, r2
 800f8b4:	0892      	lsrs	r2, r2, #2
 800f8b6:	202a      	movs	r0, #42	@ 0x2a
 800f8b8:	fb00 c212 	mls	r2, r0, r2, ip
 800f8bc:	fa5f fc82 	uxtb.w	ip, r2
 800f8c0:	4561      	cmp	r1, ip
 800f8c2:	d09d      	beq.n	800f800 <uxr_read_framed_msg+0x2dc>
 800f8c4:	3302      	adds	r3, #2
 800f8c6:	4422      	add	r2, r4
 800f8c8:	0859      	lsrs	r1, r3, #1
 800f8ca:	7892      	ldrb	r2, [r2, #2]
 800f8cc:	fba5 c101 	umull	ip, r1, r5, r1
 800f8d0:	0889      	lsrs	r1, r1, #2
 800f8d2:	fb00 3311 	mls	r3, r0, r1, r3
 800f8d6:	2a7e      	cmp	r2, #126	@ 0x7e
 800f8d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f8dc:	f000 80aa 	beq.w	800fa34 <uxr_read_framed_msg+0x510>
 800f8e0:	f082 0220 	eor.w	r2, r2, #32
 800f8e4:	e654      	b.n	800f590 <uxr_read_framed_msg+0x6c>
 800f8e6:	1c58      	adds	r0, r3, #1
 800f8e8:	0842      	lsrs	r2, r0, #1
 800f8ea:	fba5 c202 	umull	ip, r2, r5, r2
 800f8ee:	0892      	lsrs	r2, r2, #2
 800f8f0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f8f4:	fb0c 0212 	mls	r2, ip, r2, r0
 800f8f8:	b2d0      	uxtb	r0, r2
 800f8fa:	4281      	cmp	r1, r0
 800f8fc:	d08f      	beq.n	800f81e <uxr_read_framed_msg+0x2fa>
 800f8fe:	4422      	add	r2, r4
 800f900:	3302      	adds	r3, #2
 800f902:	7890      	ldrb	r0, [r2, #2]
 800f904:	085a      	lsrs	r2, r3, #1
 800f906:	fba5 1202 	umull	r1, r2, r5, r2
 800f90a:	0892      	lsrs	r2, r2, #2
 800f90c:	fb0c 3312 	mls	r3, ip, r2, r3
 800f910:	287e      	cmp	r0, #126	@ 0x7e
 800f912:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f916:	d07d      	beq.n	800fa14 <uxr_read_framed_msg+0x4f0>
 800f918:	f080 0020 	eor.w	r0, r0, #32
 800f91c:	e660      	b.n	800f5e0 <uxr_read_framed_msg+0xbc>
 800f91e:	1c59      	adds	r1, r3, #1
 800f920:	084a      	lsrs	r2, r1, #1
 800f922:	fba5 c202 	umull	ip, r2, r5, r2
 800f926:	0892      	lsrs	r2, r2, #2
 800f928:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f92c:	fb0c 1212 	mls	r2, ip, r2, r1
 800f930:	b2d1      	uxtb	r1, r2
 800f932:	4288      	cmp	r0, r1
 800f934:	f43f af64 	beq.w	800f800 <uxr_read_framed_msg+0x2dc>
 800f938:	4422      	add	r2, r4
 800f93a:	3302      	adds	r3, #2
 800f93c:	7891      	ldrb	r1, [r2, #2]
 800f93e:	085a      	lsrs	r2, r3, #1
 800f940:	fba5 0202 	umull	r0, r2, r5, r2
 800f944:	0892      	lsrs	r2, r2, #2
 800f946:	fb0c 3312 	mls	r3, ip, r2, r3
 800f94a:	297e      	cmp	r1, #126	@ 0x7e
 800f94c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f950:	d070      	beq.n	800fa34 <uxr_read_framed_msg+0x510>
 800f952:	f081 0120 	eor.w	r1, r1, #32
 800f956:	e6a3      	b.n	800f6a0 <uxr_read_framed_msg+0x17c>
 800f958:	f103 0c01 	add.w	ip, r3, #1
 800f95c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f960:	fba5 0202 	umull	r0, r2, r5, r2
 800f964:	0892      	lsrs	r2, r2, #2
 800f966:	202a      	movs	r0, #42	@ 0x2a
 800f968:	fb00 c212 	mls	r2, r0, r2, ip
 800f96c:	fa5f fc82 	uxtb.w	ip, r2
 800f970:	4561      	cmp	r1, ip
 800f972:	f43f af58 	beq.w	800f826 <uxr_read_framed_msg+0x302>
 800f976:	4422      	add	r2, r4
 800f978:	3302      	adds	r3, #2
 800f97a:	7891      	ldrb	r1, [r2, #2]
 800f97c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f980:	085a      	lsrs	r2, r3, #1
 800f982:	fba5 c202 	umull	ip, r2, r5, r2
 800f986:	0892      	lsrs	r2, r2, #2
 800f988:	fb00 3312 	mls	r3, r0, r2, r3
 800f98c:	297e      	cmp	r1, #126	@ 0x7e
 800f98e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f992:	f43f af48 	beq.w	800f826 <uxr_read_framed_msg+0x302>
 800f996:	f081 0120 	eor.w	r1, r1, #32
 800f99a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f99e:	e6e8      	b.n	800f772 <uxr_read_framed_msg+0x24e>
 800f9a0:	1c58      	adds	r0, r3, #1
 800f9a2:	0842      	lsrs	r2, r0, #1
 800f9a4:	fba5 c202 	umull	ip, r2, r5, r2
 800f9a8:	0892      	lsrs	r2, r2, #2
 800f9aa:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f9ae:	fb0c 0212 	mls	r2, ip, r2, r0
 800f9b2:	b2d0      	uxtb	r0, r2
 800f9b4:	4281      	cmp	r1, r0
 800f9b6:	f43f af32 	beq.w	800f81e <uxr_read_framed_msg+0x2fa>
 800f9ba:	4422      	add	r2, r4
 800f9bc:	3302      	adds	r3, #2
 800f9be:	7890      	ldrb	r0, [r2, #2]
 800f9c0:	085a      	lsrs	r2, r3, #1
 800f9c2:	fba5 1202 	umull	r1, r2, r5, r2
 800f9c6:	0892      	lsrs	r2, r2, #2
 800f9c8:	fb0c 3312 	mls	r3, ip, r2, r3
 800f9cc:	287e      	cmp	r0, #126	@ 0x7e
 800f9ce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f9d2:	d01f      	beq.n	800fa14 <uxr_read_framed_msg+0x4f0>
 800f9d4:	f080 0020 	eor.w	r0, r0, #32
 800f9d8:	e68b      	b.n	800f6f2 <uxr_read_framed_msg+0x1ce>
 800f9da:	1c51      	adds	r1, r2, #1
 800f9dc:	084b      	lsrs	r3, r1, #1
 800f9de:	fba5 c303 	umull	ip, r3, r5, r3
 800f9e2:	089b      	lsrs	r3, r3, #2
 800f9e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f9e8:	fb0c 1313 	mls	r3, ip, r3, r1
 800f9ec:	b2d9      	uxtb	r1, r3
 800f9ee:	4288      	cmp	r0, r1
 800f9f0:	f43f af3d 	beq.w	800f86e <uxr_read_framed_msg+0x34a>
 800f9f4:	3202      	adds	r2, #2
 800f9f6:	4423      	add	r3, r4
 800f9f8:	0850      	lsrs	r0, r2, #1
 800f9fa:	789b      	ldrb	r3, [r3, #2]
 800f9fc:	fba5 1000 	umull	r1, r0, r5, r0
 800fa00:	0880      	lsrs	r0, r0, #2
 800fa02:	fb0c 2210 	mls	r2, ip, r0, r2
 800fa06:	2b7e      	cmp	r3, #126	@ 0x7e
 800fa08:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fa0c:	d016      	beq.n	800fa3c <uxr_read_framed_msg+0x518>
 800fa0e:	f083 0120 	eor.w	r1, r3, #32
 800fa12:	e68b      	b.n	800f72c <uxr_read_framed_msg+0x208>
 800fa14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	2302      	movs	r3, #2
 800fa1a:	9301      	str	r3, [sp, #4]
 800fa1c:	464a      	mov	r2, r9
 800fa1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa20:	4641      	mov	r1, r8
 800fa22:	4620      	mov	r0, r4
 800fa24:	f7ff fcfc 	bl	800f420 <uxr_framing_read_transport>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	f47f aef6 	bne.w	800f81a <uxr_read_framed_msg+0x2f6>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	7023      	strb	r3, [r4, #0]
 800fa32:	e588      	b.n	800f546 <uxr_read_framed_msg+0x22>
 800fa34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	2301      	movs	r3, #1
 800fa3a:	e7ee      	b.n	800fa1a <uxr_read_framed_msg+0x4f6>
 800fa3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	2303      	movs	r3, #3
 800fa42:	e7ea      	b.n	800fa1a <uxr_read_framed_msg+0x4f6>
 800fa44:	ee17 8a90 	vmov	r8, s15
 800fa48:	e6ae      	b.n	800f7a8 <uxr_read_framed_msg+0x284>
 800fa4a:	bf00      	nop

0800fa4c <uxr_stream_id>:
 800fa4c:	2901      	cmp	r1, #1
 800fa4e:	b082      	sub	sp, #8
 800fa50:	d01d      	beq.n	800fa8e <uxr_stream_id+0x42>
 800fa52:	2902      	cmp	r1, #2
 800fa54:	f04f 0c00 	mov.w	ip, #0
 800fa58:	d01e      	beq.n	800fa98 <uxr_stream_id+0x4c>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f36c 0307 	bfi	r3, ip, #0, #8
 800fa60:	f360 230f 	bfi	r3, r0, #8, #8
 800fa64:	f361 4317 	bfi	r3, r1, #16, #8
 800fa68:	f362 631f 	bfi	r3, r2, #24, #8
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	2000      	movs	r0, #0
 800fa70:	f362 0007 	bfi	r0, r2, #0, #8
 800fa74:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fa78:	f362 200f 	bfi	r0, r2, #8, #8
 800fa7c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa80:	f362 4017 	bfi	r0, r2, #16, #8
 800fa84:	0e1b      	lsrs	r3, r3, #24
 800fa86:	f363 601f 	bfi	r0, r3, #24, #8
 800fa8a:	b002      	add	sp, #8
 800fa8c:	4770      	bx	lr
 800fa8e:	f100 0c01 	add.w	ip, r0, #1
 800fa92:	fa5f fc8c 	uxtb.w	ip, ip
 800fa96:	e7e0      	b.n	800fa5a <uxr_stream_id+0xe>
 800fa98:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800fa9c:	e7dd      	b.n	800fa5a <uxr_stream_id+0xe>
 800fa9e:	bf00      	nop

0800faa0 <uxr_stream_id_from_raw>:
 800faa0:	b082      	sub	sp, #8
 800faa2:	b130      	cbz	r0, 800fab2 <uxr_stream_id_from_raw+0x12>
 800faa4:	0603      	lsls	r3, r0, #24
 800faa6:	d420      	bmi.n	800faea <uxr_stream_id_from_raw+0x4a>
 800faa8:	1e42      	subs	r2, r0, #1
 800faaa:	b2d2      	uxtb	r2, r2
 800faac:	f04f 0c01 	mov.w	ip, #1
 800fab0:	e001      	b.n	800fab6 <uxr_stream_id_from_raw+0x16>
 800fab2:	4684      	mov	ip, r0
 800fab4:	4602      	mov	r2, r0
 800fab6:	2300      	movs	r3, #0
 800fab8:	f360 0307 	bfi	r3, r0, #0, #8
 800fabc:	f362 230f 	bfi	r3, r2, #8, #8
 800fac0:	f36c 4317 	bfi	r3, ip, #16, #8
 800fac4:	f361 631f 	bfi	r3, r1, #24, #8
 800fac8:	b2da      	uxtb	r2, r3
 800faca:	2000      	movs	r0, #0
 800facc:	f362 0007 	bfi	r0, r2, #0, #8
 800fad0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fad4:	f362 200f 	bfi	r0, r2, #8, #8
 800fad8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fadc:	f362 4017 	bfi	r0, r2, #16, #8
 800fae0:	0e1b      	lsrs	r3, r3, #24
 800fae2:	f363 601f 	bfi	r0, r3, #24, #8
 800fae6:	b002      	add	sp, #8
 800fae8:	4770      	bx	lr
 800faea:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800faee:	f04f 0c02 	mov.w	ip, #2
 800faf2:	e7e0      	b.n	800fab6 <uxr_stream_id_from_raw+0x16>

0800faf4 <uxr_init_stream_storage>:
 800faf4:	2300      	movs	r3, #0
 800faf6:	7403      	strb	r3, [r0, #16]
 800faf8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800fafc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800fb00:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop

0800fb08 <uxr_reset_stream_storage>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	7c03      	ldrb	r3, [r0, #16]
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	b153      	cbz	r3, 800fb26 <uxr_reset_stream_storage+0x1e>
 800fb10:	4606      	mov	r6, r0
 800fb12:	2500      	movs	r5, #0
 800fb14:	4630      	mov	r0, r6
 800fb16:	f005 fe3f 	bl	8015798 <uxr_reset_output_best_effort_stream>
 800fb1a:	7c23      	ldrb	r3, [r4, #16]
 800fb1c:	3501      	adds	r5, #1
 800fb1e:	42ab      	cmp	r3, r5
 800fb20:	f106 0610 	add.w	r6, r6, #16
 800fb24:	d8f6      	bhi.n	800fb14 <uxr_reset_stream_storage+0xc>
 800fb26:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fb2a:	b163      	cbz	r3, 800fb46 <uxr_reset_stream_storage+0x3e>
 800fb2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb30:	2500      	movs	r5, #0
 800fb32:	4630      	mov	r0, r6
 800fb34:	f005 fc32 	bl	801539c <uxr_reset_input_best_effort_stream>
 800fb38:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fb3c:	3501      	adds	r5, #1
 800fb3e:	42ab      	cmp	r3, r5
 800fb40:	f106 0602 	add.w	r6, r6, #2
 800fb44:	d8f5      	bhi.n	800fb32 <uxr_reset_stream_storage+0x2a>
 800fb46:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fb4a:	b163      	cbz	r3, 800fb66 <uxr_reset_stream_storage+0x5e>
 800fb4c:	f104 0618 	add.w	r6, r4, #24
 800fb50:	2500      	movs	r5, #0
 800fb52:	4630      	mov	r0, r6
 800fb54:	f005 fecc 	bl	80158f0 <uxr_reset_output_reliable_stream>
 800fb58:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fb5c:	3501      	adds	r5, #1
 800fb5e:	42ab      	cmp	r3, r5
 800fb60:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800fb64:	d8f5      	bhi.n	800fb52 <uxr_reset_stream_storage+0x4a>
 800fb66:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fb6a:	b163      	cbz	r3, 800fb86 <uxr_reset_stream_storage+0x7e>
 800fb6c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800fb70:	2500      	movs	r5, #0
 800fb72:	4630      	mov	r0, r6
 800fb74:	f005 fc86 	bl	8015484 <uxr_reset_input_reliable_stream>
 800fb78:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fb7c:	3501      	adds	r5, #1
 800fb7e:	42ab      	cmp	r3, r5
 800fb80:	f106 0618 	add.w	r6, r6, #24
 800fb84:	d8f5      	bhi.n	800fb72 <uxr_reset_stream_storage+0x6a>
 800fb86:	bd70      	pop	{r4, r5, r6, pc}

0800fb88 <uxr_add_output_best_effort_buffer>:
 800fb88:	b510      	push	{r4, lr}
 800fb8a:	7c04      	ldrb	r4, [r0, #16]
 800fb8c:	f104 0c01 	add.w	ip, r4, #1
 800fb90:	b082      	sub	sp, #8
 800fb92:	f880 c010 	strb.w	ip, [r0, #16]
 800fb96:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800fb9a:	f005 fdf3 	bl	8015784 <uxr_init_output_best_effort_stream>
 800fb9e:	2201      	movs	r2, #1
 800fba0:	4611      	mov	r1, r2
 800fba2:	4620      	mov	r0, r4
 800fba4:	b002      	add	sp, #8
 800fba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbaa:	f7ff bf4f 	b.w	800fa4c <uxr_stream_id>
 800fbae:	bf00      	nop

0800fbb0 <uxr_add_output_reliable_buffer>:
 800fbb0:	b510      	push	{r4, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	4684      	mov	ip, r0
 800fbb6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fbba:	9000      	str	r0, [sp, #0]
 800fbbc:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800fbc0:	2028      	movs	r0, #40	@ 0x28
 800fbc2:	fb00 c004 	mla	r0, r0, r4, ip
 800fbc6:	f104 0e01 	add.w	lr, r4, #1
 800fbca:	3018      	adds	r0, #24
 800fbcc:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800fbd0:	f005 fe56 	bl	8015880 <uxr_init_output_reliable_stream>
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	2102      	movs	r1, #2
 800fbd8:	4620      	mov	r0, r4
 800fbda:	b004      	add	sp, #16
 800fbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbe0:	f7ff bf34 	b.w	800fa4c <uxr_stream_id>

0800fbe4 <uxr_add_input_best_effort_buffer>:
 800fbe4:	b510      	push	{r4, lr}
 800fbe6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800fbea:	4603      	mov	r3, r0
 800fbec:	1c62      	adds	r2, r4, #1
 800fbee:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800fbf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fbfc:	f005 fbca 	bl	8015394 <uxr_init_input_best_effort_stream>
 800fc00:	2200      	movs	r2, #0
 800fc02:	2101      	movs	r1, #1
 800fc04:	4620      	mov	r0, r4
 800fc06:	b002      	add	sp, #8
 800fc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc0c:	f7ff bf1e 	b.w	800fa4c <uxr_stream_id>

0800fc10 <uxr_add_input_reliable_buffer>:
 800fc10:	b510      	push	{r4, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	4684      	mov	ip, r0
 800fc16:	9806      	ldr	r0, [sp, #24]
 800fc18:	9000      	str	r0, [sp, #0]
 800fc1a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800fc1e:	2018      	movs	r0, #24
 800fc20:	fb00 c004 	mla	r0, r0, r4, ip
 800fc24:	f104 0e01 	add.w	lr, r4, #1
 800fc28:	3048      	adds	r0, #72	@ 0x48
 800fc2a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800fc2e:	f005 fbfd 	bl	801542c <uxr_init_input_reliable_stream>
 800fc32:	2200      	movs	r2, #0
 800fc34:	2102      	movs	r1, #2
 800fc36:	4620      	mov	r0, r4
 800fc38:	b004      	add	sp, #16
 800fc3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc3e:	f7ff bf05 	b.w	800fa4c <uxr_stream_id>
 800fc42:	bf00      	nop

0800fc44 <uxr_get_output_best_effort_stream>:
 800fc44:	7c03      	ldrb	r3, [r0, #16]
 800fc46:	428b      	cmp	r3, r1
 800fc48:	bf8c      	ite	hi
 800fc4a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fc4e:	2000      	movls	r0, #0
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop

0800fc54 <uxr_get_output_reliable_stream>:
 800fc54:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fc58:	428b      	cmp	r3, r1
 800fc5a:	bf83      	ittte	hi
 800fc5c:	2328      	movhi	r3, #40	@ 0x28
 800fc5e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fc62:	3018      	addhi	r0, #24
 800fc64:	2000      	movls	r0, #0
 800fc66:	4770      	bx	lr

0800fc68 <uxr_get_input_best_effort_stream>:
 800fc68:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fc6c:	428b      	cmp	r3, r1
 800fc6e:	bf86      	itte	hi
 800fc70:	3121      	addhi	r1, #33	@ 0x21
 800fc72:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800fc76:	2000      	movls	r0, #0
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop

0800fc7c <uxr_get_input_reliable_stream>:
 800fc7c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800fc80:	428b      	cmp	r3, r1
 800fc82:	bf83      	ittte	hi
 800fc84:	2318      	movhi	r3, #24
 800fc86:	fb03 0001 	mlahi	r0, r3, r1, r0
 800fc8a:	3048      	addhi	r0, #72	@ 0x48
 800fc8c:	2000      	movls	r0, #0
 800fc8e:	4770      	bx	lr

0800fc90 <uxr_output_streams_confirmed>:
 800fc90:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fc94:	b183      	cbz	r3, 800fcb8 <uxr_output_streams_confirmed+0x28>
 800fc96:	b570      	push	{r4, r5, r6, lr}
 800fc98:	4606      	mov	r6, r0
 800fc9a:	f100 0518 	add.w	r5, r0, #24
 800fc9e:	2400      	movs	r4, #0
 800fca0:	e001      	b.n	800fca6 <uxr_output_streams_confirmed+0x16>
 800fca2:	3528      	adds	r5, #40	@ 0x28
 800fca4:	b138      	cbz	r0, 800fcb6 <uxr_output_streams_confirmed+0x26>
 800fca6:	4628      	mov	r0, r5
 800fca8:	f006 f892 	bl	8015dd0 <uxr_is_output_up_to_date>
 800fcac:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800fcb0:	3401      	adds	r4, #1
 800fcb2:	42a3      	cmp	r3, r4
 800fcb4:	d8f5      	bhi.n	800fca2 <uxr_output_streams_confirmed+0x12>
 800fcb6:	bd70      	pop	{r4, r5, r6, pc}
 800fcb8:	2001      	movs	r0, #1
 800fcba:	4770      	bx	lr

0800fcbc <uxr_buffer_submessage_header>:
 800fcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	460e      	mov	r6, r1
 800fcc2:	2104      	movs	r1, #4
 800fcc4:	4615      	mov	r5, r2
 800fcc6:	461f      	mov	r7, r3
 800fcc8:	f7fd fdae 	bl	800d828 <ucdr_align_to>
 800fccc:	2301      	movs	r3, #1
 800fcce:	ea47 0203 	orr.w	r2, r7, r3
 800fcd2:	4631      	mov	r1, r6
 800fcd4:	7523      	strb	r3, [r4, #20]
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	462b      	mov	r3, r5
 800fcda:	f000 fa27 	bl	801012c <uxr_serialize_submessage_header>
 800fcde:	4620      	mov	r0, r4
 800fce0:	f7fd fdb8 	bl	800d854 <ucdr_buffer_remaining>
 800fce4:	42a8      	cmp	r0, r5
 800fce6:	bf34      	ite	cc
 800fce8:	2000      	movcc	r0, #0
 800fcea:	2001      	movcs	r0, #1
 800fcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcee:	bf00      	nop

0800fcf0 <uxr_read_submessage_header>:
 800fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	460d      	mov	r5, r1
 800fcf8:	2104      	movs	r1, #4
 800fcfa:	4616      	mov	r6, r2
 800fcfc:	4698      	mov	r8, r3
 800fcfe:	f7fd fd93 	bl	800d828 <ucdr_align_to>
 800fd02:	4620      	mov	r0, r4
 800fd04:	f7fd fda6 	bl	800d854 <ucdr_buffer_remaining>
 800fd08:	2803      	cmp	r0, #3
 800fd0a:	bf8c      	ite	hi
 800fd0c:	2701      	movhi	r7, #1
 800fd0e:	2700      	movls	r7, #0
 800fd10:	d802      	bhi.n	800fd18 <uxr_read_submessage_header+0x28>
 800fd12:	4638      	mov	r0, r7
 800fd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd18:	4633      	mov	r3, r6
 800fd1a:	4642      	mov	r2, r8
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	4629      	mov	r1, r5
 800fd20:	f000 fa18 	bl	8010154 <uxr_deserialize_submessage_header>
 800fd24:	f898 3000 	ldrb.w	r3, [r8]
 800fd28:	f003 0201 	and.w	r2, r3, #1
 800fd2c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fd30:	f888 3000 	strb.w	r3, [r8]
 800fd34:	7522      	strb	r2, [r4, #20]
 800fd36:	4638      	mov	r0, r7
 800fd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd3c <uxr_submessage_padding>:
 800fd3c:	f010 0003 	ands.w	r0, r0, #3
 800fd40:	bf18      	it	ne
 800fd42:	f1c0 0004 	rsbne	r0, r0, #4
 800fd46:	4770      	bx	lr

0800fd48 <uxr_millis>:
 800fd48:	b510      	push	{r4, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	4669      	mov	r1, sp
 800fd4e:	2001      	movs	r0, #1
 800fd50:	f7f1 fd46 	bl	80017e0 <clock_gettime>
 800fd54:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800fd58:	4906      	ldr	r1, [pc, #24]	@ (800fd74 <uxr_millis+0x2c>)
 800fd5a:	fba0 0301 	umull	r0, r3, r0, r1
 800fd5e:	1900      	adds	r0, r0, r4
 800fd60:	fb01 3102 	mla	r1, r1, r2, r3
 800fd64:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800fd68:	4a03      	ldr	r2, [pc, #12]	@ (800fd78 <uxr_millis+0x30>)
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f7f0 fac0 	bl	80002f0 <__aeabi_ldivmod>
 800fd70:	b004      	add	sp, #16
 800fd72:	bd10      	pop	{r4, pc}
 800fd74:	3b9aca00 	.word	0x3b9aca00
 800fd78:	000f4240 	.word	0x000f4240

0800fd7c <uxr_nanos>:
 800fd7c:	b510      	push	{r4, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	4669      	mov	r1, sp
 800fd82:	2001      	movs	r0, #1
 800fd84:	f7f1 fd2c 	bl	80017e0 <clock_gettime>
 800fd88:	4a06      	ldr	r2, [pc, #24]	@ (800fda4 <uxr_nanos+0x28>)
 800fd8a:	9800      	ldr	r0, [sp, #0]
 800fd8c:	9902      	ldr	r1, [sp, #8]
 800fd8e:	9c01      	ldr	r4, [sp, #4]
 800fd90:	fba0 0302 	umull	r0, r3, r0, r2
 800fd94:	1840      	adds	r0, r0, r1
 800fd96:	fb02 3304 	mla	r3, r2, r4, r3
 800fd9a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800fd9e:	b004      	add	sp, #16
 800fda0:	bd10      	pop	{r4, pc}
 800fda2:	bf00      	nop
 800fda4:	3b9aca00 	.word	0x3b9aca00

0800fda8 <on_full_output_buffer_fragmented>:
 800fda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdac:	460c      	mov	r4, r1
 800fdae:	b08a      	sub	sp, #40	@ 0x28
 800fdb0:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800fdb4:	4606      	mov	r6, r0
 800fdb6:	f104 0008 	add.w	r0, r4, #8
 800fdba:	f7ff ff4b 	bl	800fc54 <uxr_get_output_reliable_stream>
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	f006 f810 	bl	8015de4 <get_available_free_slots>
 800fdc4:	b968      	cbnz	r0, 800fde2 <on_full_output_buffer_fragmented+0x3a>
 800fdc6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800fdca:	4620      	mov	r0, r4
 800fdcc:	4798      	blx	r3
 800fdce:	b918      	cbnz	r0, 800fdd8 <on_full_output_buffer_fragmented+0x30>
 800fdd0:	2001      	movs	r0, #1
 800fdd2:	b00a      	add	sp, #40	@ 0x28
 800fdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f006 f803 	bl	8015de4 <get_available_free_slots>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d0f6      	beq.n	800fdd0 <on_full_output_buffer_fragmented+0x28>
 800fde2:	8929      	ldrh	r1, [r5, #8]
 800fde4:	89eb      	ldrh	r3, [r5, #14]
 800fde6:	7b28      	ldrb	r0, [r5, #12]
 800fde8:	686a      	ldr	r2, [r5, #4]
 800fdea:	fbb2 f8f1 	udiv	r8, r2, r1
 800fdee:	fbb3 f2f1 	udiv	r2, r3, r1
 800fdf2:	fb01 3112 	mls	r1, r1, r2, r3
 800fdf6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800fdfa:	b289      	uxth	r1, r1
 800fdfc:	fb08 f101 	mul.w	r1, r8, r1
 800fe00:	30fc      	adds	r0, #252	@ 0xfc
 800fe02:	f1a8 0804 	sub.w	r8, r8, #4
 800fe06:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800fe0a:	4440      	add	r0, r8
 800fe0c:	b287      	uxth	r7, r0
 800fe0e:	1bdb      	subs	r3, r3, r7
 800fe10:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800fe14:	682b      	ldr	r3, [r5, #0]
 800fe16:	3104      	adds	r1, #4
 800fe18:	4419      	add	r1, r3
 800fe1a:	4642      	mov	r2, r8
 800fe1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	a802      	add	r0, sp, #8
 800fe24:	2300      	movs	r3, #0
 800fe26:	f7fd fcd3 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800fe2a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800fe2e:	f102 0308 	add.w	r3, r2, #8
 800fe32:	4543      	cmp	r3, r8
 800fe34:	d928      	bls.n	800fe88 <on_full_output_buffer_fragmented+0xe0>
 800fe36:	463a      	mov	r2, r7
 800fe38:	2300      	movs	r3, #0
 800fe3a:	210d      	movs	r1, #13
 800fe3c:	a802      	add	r0, sp, #8
 800fe3e:	f7ff ff3d 	bl	800fcbc <uxr_buffer_submessage_header>
 800fe42:	8929      	ldrh	r1, [r5, #8]
 800fe44:	89eb      	ldrh	r3, [r5, #14]
 800fe46:	fbb3 f2f1 	udiv	r2, r3, r1
 800fe4a:	fb01 3312 	mls	r3, r1, r2, r3
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	686a      	ldr	r2, [r5, #4]
 800fe52:	fbb2 f2f1 	udiv	r2, r2, r1
 800fe56:	fb02 f303 	mul.w	r3, r2, r3
 800fe5a:	682a      	ldr	r2, [r5, #0]
 800fe5c:	f842 8003 	str.w	r8, [r2, r3]
 800fe60:	89e8      	ldrh	r0, [r5, #14]
 800fe62:	2101      	movs	r1, #1
 800fe64:	f005 ffde 	bl	8015e24 <uxr_seq_num_add>
 800fe68:	9904      	ldr	r1, [sp, #16]
 800fe6a:	9a03      	ldr	r2, [sp, #12]
 800fe6c:	81e8      	strh	r0, [r5, #14]
 800fe6e:	1a52      	subs	r2, r2, r1
 800fe70:	4630      	mov	r0, r6
 800fe72:	f7fd fcbf 	bl	800d7f4 <ucdr_init_buffer>
 800fe76:	4630      	mov	r0, r6
 800fe78:	490f      	ldr	r1, [pc, #60]	@ (800feb8 <on_full_output_buffer_fragmented+0x110>)
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	f7fd fc8e 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 800fe80:	2000      	movs	r0, #0
 800fe82:	b00a      	add	sp, #40	@ 0x28
 800fe84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe88:	b292      	uxth	r2, r2
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	210d      	movs	r1, #13
 800fe8e:	a802      	add	r0, sp, #8
 800fe90:	f7ff ff14 	bl	800fcbc <uxr_buffer_submessage_header>
 800fe94:	8928      	ldrh	r0, [r5, #8]
 800fe96:	89eb      	ldrh	r3, [r5, #14]
 800fe98:	fbb3 f1f0 	udiv	r1, r3, r0
 800fe9c:	fb00 3311 	mls	r3, r0, r1, r3
 800fea0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800fea4:	6869      	ldr	r1, [r5, #4]
 800fea6:	fbb1 f1f0 	udiv	r1, r1, r0
 800feaa:	b29b      	uxth	r3, r3
 800feac:	fb01 f303 	mul.w	r3, r1, r3
 800feb0:	6829      	ldr	r1, [r5, #0]
 800feb2:	3208      	adds	r2, #8
 800feb4:	50ca      	str	r2, [r1, r3]
 800feb6:	e7d3      	b.n	800fe60 <on_full_output_buffer_fragmented+0xb8>
 800feb8:	0800fda9 	.word	0x0800fda9

0800febc <uxr_prepare_output_stream>:
 800febc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800febe:	b087      	sub	sp, #28
 800fec0:	2707      	movs	r7, #7
 800fec2:	9202      	str	r2, [sp, #8]
 800fec4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fec6:	9103      	str	r1, [sp, #12]
 800fec8:	2500      	movs	r5, #0
 800feca:	3204      	adds	r2, #4
 800fecc:	e9cd 7500 	strd	r7, r5, [sp]
 800fed0:	461c      	mov	r4, r3
 800fed2:	4606      	mov	r6, r0
 800fed4:	f7fe ffc2 	bl	800ee5c <uxr_prepare_stream_to_write_submessage>
 800fed8:	f080 0201 	eor.w	r2, r0, #1
 800fedc:	b2d2      	uxtb	r2, r2
 800fede:	75a2      	strb	r2, [r4, #22]
 800fee0:	b112      	cbz	r2, 800fee8 <uxr_prepare_output_stream+0x2c>
 800fee2:	4628      	mov	r0, r5
 800fee4:	b007      	add	sp, #28
 800fee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fee8:	aa05      	add	r2, sp, #20
 800feea:	9902      	ldr	r1, [sp, #8]
 800feec:	4630      	mov	r0, r6
 800feee:	f7ff f8eb 	bl	800f0c8 <uxr_init_base_object_request>
 800fef2:	a905      	add	r1, sp, #20
 800fef4:	4605      	mov	r5, r0
 800fef6:	4620      	mov	r0, r4
 800fef8:	f000 ffa0 	bl	8010e3c <uxr_serialize_WRITE_DATA_Payload_Data>
 800fefc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ff00:	69a6      	ldr	r6, [r4, #24]
 800ff02:	69e7      	ldr	r7, [r4, #28]
 800ff04:	1a52      	subs	r2, r2, r1
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7fd fc74 	bl	800d7f4 <ucdr_init_buffer>
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	463a      	mov	r2, r7
 800ff10:	4631      	mov	r1, r6
 800ff12:	f7fd fc43 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 800ff16:	4628      	mov	r0, r5
 800ff18:	b007      	add	sp, #28
 800ff1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff1c <uxr_prepare_output_stream_fragmented>:
 800ff1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff20:	b091      	sub	sp, #68	@ 0x44
 800ff22:	4605      	mov	r5, r0
 800ff24:	9105      	str	r1, [sp, #20]
 800ff26:	3008      	adds	r0, #8
 800ff28:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800ff2c:	461e      	mov	r6, r3
 800ff2e:	9204      	str	r2, [sp, #16]
 800ff30:	f7ff fe90 	bl	800fc54 <uxr_get_output_reliable_stream>
 800ff34:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	f000 8091 	beq.w	8010060 <uxr_prepare_output_stream_fragmented+0x144>
 800ff3e:	4604      	mov	r4, r0
 800ff40:	2800      	cmp	r0, #0
 800ff42:	f000 808d 	beq.w	8010060 <uxr_prepare_output_stream_fragmented+0x144>
 800ff46:	f005 ff4d 	bl	8015de4 <get_available_free_slots>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	f000 8083 	beq.w	8010056 <uxr_prepare_output_stream_fragmented+0x13a>
 800ff50:	8922      	ldrh	r2, [r4, #8]
 800ff52:	89e7      	ldrh	r7, [r4, #14]
 800ff54:	fbb7 f9f2 	udiv	r9, r7, r2
 800ff58:	fb02 7919 	mls	r9, r2, r9, r7
 800ff5c:	fa1f f989 	uxth.w	r9, r9
 800ff60:	6863      	ldr	r3, [r4, #4]
 800ff62:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	9203      	str	r2, [sp, #12]
 800ff6a:	fb02 f909 	mul.w	r9, r2, r9
 800ff6e:	f109 0904 	add.w	r9, r9, #4
 800ff72:	4499      	add	r9, r3
 800ff74:	7b23      	ldrb	r3, [r4, #12]
 800ff76:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ff7a:	4543      	cmp	r3, r8
 800ff7c:	f1a2 0b04 	sub.w	fp, r2, #4
 800ff80:	d37a      	bcc.n	8010078 <uxr_prepare_output_stream_fragmented+0x15c>
 800ff82:	f1ab 0a04 	sub.w	sl, fp, #4
 800ff86:	ebaa 0a03 	sub.w	sl, sl, r3
 800ff8a:	465a      	mov	r2, fp
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	4649      	mov	r1, r9
 800ff90:	a808      	add	r0, sp, #32
 800ff92:	f8cd 8000 	str.w	r8, [sp]
 800ff96:	f7fd fc1b 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 800ff9a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ff9c:	fa1f fa8a 	uxth.w	sl, sl
 800ffa0:	4652      	mov	r2, sl
 800ffa2:	f103 0a08 	add.w	sl, r3, #8
 800ffa6:	45da      	cmp	sl, fp
 800ffa8:	bf34      	ite	cc
 800ffaa:	2302      	movcc	r3, #2
 800ffac:	2300      	movcs	r3, #0
 800ffae:	210d      	movs	r1, #13
 800ffb0:	a808      	add	r0, sp, #32
 800ffb2:	f7ff fe83 	bl	800fcbc <uxr_buffer_submessage_header>
 800ffb6:	8921      	ldrh	r1, [r4, #8]
 800ffb8:	fbb7 f2f1 	udiv	r2, r7, r1
 800ffbc:	fb01 7212 	mls	r2, r1, r2, r7
 800ffc0:	b292      	uxth	r2, r2
 800ffc2:	6863      	ldr	r3, [r4, #4]
 800ffc4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffc8:	fb02 f303 	mul.w	r3, r2, r3
 800ffcc:	6822      	ldr	r2, [r4, #0]
 800ffce:	4638      	mov	r0, r7
 800ffd0:	f842 b003 	str.w	fp, [r2, r3]
 800ffd4:	2101      	movs	r1, #1
 800ffd6:	f005 ff25 	bl	8015e24 <uxr_seq_num_add>
 800ffda:	9b03      	ldr	r3, [sp, #12]
 800ffdc:	f108 0104 	add.w	r1, r8, #4
 800ffe0:	f1a3 0208 	sub.w	r2, r3, #8
 800ffe4:	eba2 0208 	sub.w	r2, r2, r8
 800ffe8:	4449      	add	r1, r9
 800ffea:	4607      	mov	r7, r0
 800ffec:	4630      	mov	r0, r6
 800ffee:	f7fd fc01 	bl	800d7f4 <ucdr_init_buffer>
 800fff2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fff4:	81e7      	strh	r7, [r4, #14]
 800fff6:	1d1a      	adds	r2, r3, #4
 800fff8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800fffc:	bf28      	it	cs
 800fffe:	2200      	movcs	r2, #0
 8010000:	2300      	movs	r3, #0
 8010002:	b292      	uxth	r2, r2
 8010004:	2107      	movs	r1, #7
 8010006:	4630      	mov	r0, r6
 8010008:	f7ff fe58 	bl	800fcbc <uxr_buffer_submessage_header>
 801000c:	9904      	ldr	r1, [sp, #16]
 801000e:	aa07      	add	r2, sp, #28
 8010010:	4628      	mov	r0, r5
 8010012:	f7ff f859 	bl	800f0c8 <uxr_init_base_object_request>
 8010016:	4604      	mov	r4, r0
 8010018:	b318      	cbz	r0, 8010062 <uxr_prepare_output_stream_fragmented+0x146>
 801001a:	a907      	add	r1, sp, #28
 801001c:	4630      	mov	r0, r6
 801001e:	f000 ff0d 	bl	8010e3c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010022:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010026:	4630      	mov	r0, r6
 8010028:	1a52      	subs	r2, r2, r1
 801002a:	f7fd fbe3 	bl	800d7f4 <ucdr_init_buffer>
 801002e:	9b05      	ldr	r3, [sp, #20]
 8010030:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010034:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010036:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801003a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801003c:	491b      	ldr	r1, [pc, #108]	@ (80100ac <uxr_prepare_output_stream_fragmented+0x190>)
 801003e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010042:	4630      	mov	r0, r6
 8010044:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010048:	462a      	mov	r2, r5
 801004a:	f7fd fba7 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 801004e:	4620      	mov	r0, r4
 8010050:	b011      	add	sp, #68	@ 0x44
 8010052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010056:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010058:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801005a:	4628      	mov	r0, r5
 801005c:	4798      	blx	r3
 801005e:	b920      	cbnz	r0, 801006a <uxr_prepare_output_stream_fragmented+0x14e>
 8010060:	2400      	movs	r4, #0
 8010062:	4620      	mov	r0, r4
 8010064:	b011      	add	sp, #68	@ 0x44
 8010066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006a:	4620      	mov	r0, r4
 801006c:	f005 feba 	bl	8015de4 <get_available_free_slots>
 8010070:	2800      	cmp	r0, #0
 8010072:	f47f af6d 	bne.w	800ff50 <uxr_prepare_output_stream_fragmented+0x34>
 8010076:	e7f3      	b.n	8010060 <uxr_prepare_output_stream_fragmented+0x144>
 8010078:	4638      	mov	r0, r7
 801007a:	2101      	movs	r1, #1
 801007c:	f005 fed2 	bl	8015e24 <uxr_seq_num_add>
 8010080:	8921      	ldrh	r1, [r4, #8]
 8010082:	fbb0 f2f1 	udiv	r2, r0, r1
 8010086:	fb01 0912 	mls	r9, r1, r2, r0
 801008a:	fa1f f289 	uxth.w	r2, r9
 801008e:	6863      	ldr	r3, [r4, #4]
 8010090:	fbb3 f9f1 	udiv	r9, r3, r1
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	fb02 f909 	mul.w	r9, r2, r9
 801009a:	f109 0904 	add.w	r9, r9, #4
 801009e:	4499      	add	r9, r3
 80100a0:	4607      	mov	r7, r0
 80100a2:	7b23      	ldrb	r3, [r4, #12]
 80100a4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80100a8:	e76b      	b.n	800ff82 <uxr_prepare_output_stream_fragmented+0x66>
 80100aa:	bf00      	nop
 80100ac:	0800fda9 	.word	0x0800fda9

080100b0 <uxr_serialize_message_header>:
 80100b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100b2:	b083      	sub	sp, #12
 80100b4:	4616      	mov	r6, r2
 80100b6:	4604      	mov	r4, r0
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	460d      	mov	r5, r1
 80100bc:	9f08      	ldr	r7, [sp, #32]
 80100be:	f7fc fbed 	bl	800c89c <ucdr_serialize_uint8_t>
 80100c2:	4631      	mov	r1, r6
 80100c4:	4620      	mov	r0, r4
 80100c6:	f7fc fbe9 	bl	800c89c <ucdr_serialize_uint8_t>
 80100ca:	9a01      	ldr	r2, [sp, #4]
 80100cc:	2101      	movs	r1, #1
 80100ce:	4620      	mov	r0, r4
 80100d0:	f7fc fc90 	bl	800c9f4 <ucdr_serialize_endian_uint16_t>
 80100d4:	062b      	lsls	r3, r5, #24
 80100d6:	d501      	bpl.n	80100dc <uxr_serialize_message_header+0x2c>
 80100d8:	b003      	add	sp, #12
 80100da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100dc:	2204      	movs	r2, #4
 80100de:	4639      	mov	r1, r7
 80100e0:	4620      	mov	r0, r4
 80100e2:	b003      	add	sp, #12
 80100e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80100e8:	f005 b81c 	b.w	8015124 <ucdr_serialize_array_uint8_t>

080100ec <uxr_deserialize_message_header>:
 80100ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ee:	b083      	sub	sp, #12
 80100f0:	4616      	mov	r6, r2
 80100f2:	4604      	mov	r4, r0
 80100f4:	9301      	str	r3, [sp, #4]
 80100f6:	460d      	mov	r5, r1
 80100f8:	9f08      	ldr	r7, [sp, #32]
 80100fa:	f7fc fbe5 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 80100fe:	4631      	mov	r1, r6
 8010100:	4620      	mov	r0, r4
 8010102:	f7fc fbe1 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010106:	9a01      	ldr	r2, [sp, #4]
 8010108:	2101      	movs	r1, #1
 801010a:	4620      	mov	r0, r4
 801010c:	f7fc fd66 	bl	800cbdc <ucdr_deserialize_endian_uint16_t>
 8010110:	f995 3000 	ldrsb.w	r3, [r5]
 8010114:	2b00      	cmp	r3, #0
 8010116:	da01      	bge.n	801011c <uxr_deserialize_message_header+0x30>
 8010118:	b003      	add	sp, #12
 801011a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801011c:	2204      	movs	r2, #4
 801011e:	4639      	mov	r1, r7
 8010120:	4620      	mov	r0, r4
 8010122:	b003      	add	sp, #12
 8010124:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010128:	f005 b860 	b.w	80151ec <ucdr_deserialize_array_uint8_t>

0801012c <uxr_serialize_submessage_header>:
 801012c:	b530      	push	{r4, r5, lr}
 801012e:	b083      	sub	sp, #12
 8010130:	4615      	mov	r5, r2
 8010132:	4604      	mov	r4, r0
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	f7fc fbb1 	bl	800c89c <ucdr_serialize_uint8_t>
 801013a:	4629      	mov	r1, r5
 801013c:	4620      	mov	r0, r4
 801013e:	f7fc fbad 	bl	800c89c <ucdr_serialize_uint8_t>
 8010142:	9a01      	ldr	r2, [sp, #4]
 8010144:	2101      	movs	r1, #1
 8010146:	4620      	mov	r0, r4
 8010148:	b003      	add	sp, #12
 801014a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801014e:	f7fc bc51 	b.w	800c9f4 <ucdr_serialize_endian_uint16_t>
 8010152:	bf00      	nop

08010154 <uxr_deserialize_submessage_header>:
 8010154:	b530      	push	{r4, r5, lr}
 8010156:	b083      	sub	sp, #12
 8010158:	4615      	mov	r5, r2
 801015a:	4604      	mov	r4, r0
 801015c:	9301      	str	r3, [sp, #4]
 801015e:	f7fc fbb3 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010162:	4629      	mov	r1, r5
 8010164:	4620      	mov	r0, r4
 8010166:	f7fc fbaf 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 801016a:	9a01      	ldr	r2, [sp, #4]
 801016c:	2101      	movs	r1, #1
 801016e:	4620      	mov	r0, r4
 8010170:	b003      	add	sp, #12
 8010172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010176:	f7fc bd31 	b.w	800cbdc <ucdr_deserialize_endian_uint16_t>
 801017a:	bf00      	nop

0801017c <uxr_serialize_CLIENT_Representation>:
 801017c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010180:	2204      	movs	r2, #4
 8010182:	460e      	mov	r6, r1
 8010184:	4605      	mov	r5, r0
 8010186:	f004 ffcd 	bl	8015124 <ucdr_serialize_array_uint8_t>
 801018a:	2202      	movs	r2, #2
 801018c:	4607      	mov	r7, r0
 801018e:	1d31      	adds	r1, r6, #4
 8010190:	4628      	mov	r0, r5
 8010192:	f004 ffc7 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010196:	4038      	ands	r0, r7
 8010198:	2202      	movs	r2, #2
 801019a:	1db1      	adds	r1, r6, #6
 801019c:	b2c7      	uxtb	r7, r0
 801019e:	4628      	mov	r0, r5
 80101a0:	f004 ffc0 	bl	8015124 <ucdr_serialize_array_uint8_t>
 80101a4:	2204      	movs	r2, #4
 80101a6:	4007      	ands	r7, r0
 80101a8:	f106 0108 	add.w	r1, r6, #8
 80101ac:	4628      	mov	r0, r5
 80101ae:	f004 ffb9 	bl	8015124 <ucdr_serialize_array_uint8_t>
 80101b2:	7b31      	ldrb	r1, [r6, #12]
 80101b4:	4007      	ands	r7, r0
 80101b6:	4628      	mov	r0, r5
 80101b8:	f7fc fb70 	bl	800c89c <ucdr_serialize_uint8_t>
 80101bc:	7b71      	ldrb	r1, [r6, #13]
 80101be:	4007      	ands	r7, r0
 80101c0:	4628      	mov	r0, r5
 80101c2:	f7fc fb3d 	bl	800c840 <ucdr_serialize_bool>
 80101c6:	7b73      	ldrb	r3, [r6, #13]
 80101c8:	ea07 0800 	and.w	r8, r7, r0
 80101cc:	b93b      	cbnz	r3, 80101de <uxr_serialize_CLIENT_Representation+0x62>
 80101ce:	8bb1      	ldrh	r1, [r6, #28]
 80101d0:	4628      	mov	r0, r5
 80101d2:	f7fc fb8f 	bl	800c8f4 <ucdr_serialize_uint16_t>
 80101d6:	ea08 0000 	and.w	r0, r8, r0
 80101da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101de:	6931      	ldr	r1, [r6, #16]
 80101e0:	4628      	mov	r0, r5
 80101e2:	f7fc fd71 	bl	800ccc8 <ucdr_serialize_uint32_t>
 80101e6:	6933      	ldr	r3, [r6, #16]
 80101e8:	b1e3      	cbz	r3, 8010224 <uxr_serialize_CLIENT_Representation+0xa8>
 80101ea:	b1c0      	cbz	r0, 801021e <uxr_serialize_CLIENT_Representation+0xa2>
 80101ec:	4637      	mov	r7, r6
 80101ee:	f04f 0900 	mov.w	r9, #0
 80101f2:	e001      	b.n	80101f8 <uxr_serialize_CLIENT_Representation+0x7c>
 80101f4:	3708      	adds	r7, #8
 80101f6:	b194      	cbz	r4, 801021e <uxr_serialize_CLIENT_Representation+0xa2>
 80101f8:	6979      	ldr	r1, [r7, #20]
 80101fa:	4628      	mov	r0, r5
 80101fc:	f005 f8b2 	bl	8015364 <ucdr_serialize_string>
 8010200:	69b9      	ldr	r1, [r7, #24]
 8010202:	4604      	mov	r4, r0
 8010204:	4628      	mov	r0, r5
 8010206:	f005 f8ad 	bl	8015364 <ucdr_serialize_string>
 801020a:	6933      	ldr	r3, [r6, #16]
 801020c:	f109 0901 	add.w	r9, r9, #1
 8010210:	4004      	ands	r4, r0
 8010212:	4599      	cmp	r9, r3
 8010214:	b2e4      	uxtb	r4, r4
 8010216:	d3ed      	bcc.n	80101f4 <uxr_serialize_CLIENT_Representation+0x78>
 8010218:	ea08 0804 	and.w	r8, r8, r4
 801021c:	e7d7      	b.n	80101ce <uxr_serialize_CLIENT_Representation+0x52>
 801021e:	f04f 0800 	mov.w	r8, #0
 8010222:	e7d4      	b.n	80101ce <uxr_serialize_CLIENT_Representation+0x52>
 8010224:	ea08 0800 	and.w	r8, r8, r0
 8010228:	e7d1      	b.n	80101ce <uxr_serialize_CLIENT_Representation+0x52>
 801022a:	bf00      	nop

0801022c <uxr_deserialize_CLIENT_Representation>:
 801022c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010230:	2204      	movs	r2, #4
 8010232:	460c      	mov	r4, r1
 8010234:	4605      	mov	r5, r0
 8010236:	f004 ffd9 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 801023a:	2202      	movs	r2, #2
 801023c:	4607      	mov	r7, r0
 801023e:	1d21      	adds	r1, r4, #4
 8010240:	4628      	mov	r0, r5
 8010242:	f004 ffd3 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010246:	4038      	ands	r0, r7
 8010248:	2202      	movs	r2, #2
 801024a:	1da1      	adds	r1, r4, #6
 801024c:	b2c6      	uxtb	r6, r0
 801024e:	4628      	mov	r0, r5
 8010250:	f004 ffcc 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010254:	2204      	movs	r2, #4
 8010256:	4006      	ands	r6, r0
 8010258:	f104 0108 	add.w	r1, r4, #8
 801025c:	4628      	mov	r0, r5
 801025e:	f004 ffc5 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010262:	f104 010c 	add.w	r1, r4, #12
 8010266:	4006      	ands	r6, r0
 8010268:	4628      	mov	r0, r5
 801026a:	f7fc fb2d 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 801026e:	f104 010d 	add.w	r1, r4, #13
 8010272:	ea06 0700 	and.w	r7, r6, r0
 8010276:	4628      	mov	r0, r5
 8010278:	f7fc faf8 	bl	800c86c <ucdr_deserialize_bool>
 801027c:	7b63      	ldrb	r3, [r4, #13]
 801027e:	4007      	ands	r7, r0
 8010280:	b93b      	cbnz	r3, 8010292 <uxr_deserialize_CLIENT_Representation+0x66>
 8010282:	f104 011c 	add.w	r1, r4, #28
 8010286:	4628      	mov	r0, r5
 8010288:	f7fc fc34 	bl	800caf4 <ucdr_deserialize_uint16_t>
 801028c:	4038      	ands	r0, r7
 801028e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010292:	f104 0110 	add.w	r1, r4, #16
 8010296:	4628      	mov	r0, r5
 8010298:	f7fc fe46 	bl	800cf28 <ucdr_deserialize_uint32_t>
 801029c:	6923      	ldr	r3, [r4, #16]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d903      	bls.n	80102aa <uxr_deserialize_CLIENT_Representation+0x7e>
 80102a2:	2301      	movs	r3, #1
 80102a4:	75ab      	strb	r3, [r5, #22]
 80102a6:	2700      	movs	r7, #0
 80102a8:	e7eb      	b.n	8010282 <uxr_deserialize_CLIENT_Representation+0x56>
 80102aa:	b30b      	cbz	r3, 80102f0 <uxr_deserialize_CLIENT_Representation+0xc4>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d0fa      	beq.n	80102a6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80102b0:	46a0      	mov	r8, r4
 80102b2:	f04f 0900 	mov.w	r9, #0
 80102b6:	e001      	b.n	80102bc <uxr_deserialize_CLIENT_Representation+0x90>
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	d0f4      	beq.n	80102a6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80102bc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80102c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80102c4:	4628      	mov	r0, r5
 80102c6:	f005 f85d 	bl	8015384 <ucdr_deserialize_string>
 80102ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80102ce:	4606      	mov	r6, r0
 80102d0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80102d4:	4628      	mov	r0, r5
 80102d6:	f005 f855 	bl	8015384 <ucdr_deserialize_string>
 80102da:	6923      	ldr	r3, [r4, #16]
 80102dc:	f109 0901 	add.w	r9, r9, #1
 80102e0:	4006      	ands	r6, r0
 80102e2:	4599      	cmp	r9, r3
 80102e4:	f108 0808 	add.w	r8, r8, #8
 80102e8:	b2f6      	uxtb	r6, r6
 80102ea:	d3e5      	bcc.n	80102b8 <uxr_deserialize_CLIENT_Representation+0x8c>
 80102ec:	4037      	ands	r7, r6
 80102ee:	e7c8      	b.n	8010282 <uxr_deserialize_CLIENT_Representation+0x56>
 80102f0:	4007      	ands	r7, r0
 80102f2:	e7c6      	b.n	8010282 <uxr_deserialize_CLIENT_Representation+0x56>

080102f4 <uxr_serialize_AGENT_Representation>:
 80102f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102f8:	2204      	movs	r2, #4
 80102fa:	460f      	mov	r7, r1
 80102fc:	4605      	mov	r5, r0
 80102fe:	f004 ff11 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010302:	2202      	movs	r2, #2
 8010304:	4604      	mov	r4, r0
 8010306:	1d39      	adds	r1, r7, #4
 8010308:	4628      	mov	r0, r5
 801030a:	f004 ff0b 	bl	8015124 <ucdr_serialize_array_uint8_t>
 801030e:	4020      	ands	r0, r4
 8010310:	2202      	movs	r2, #2
 8010312:	1db9      	adds	r1, r7, #6
 8010314:	b2c4      	uxtb	r4, r0
 8010316:	4628      	mov	r0, r5
 8010318:	f004 ff04 	bl	8015124 <ucdr_serialize_array_uint8_t>
 801031c:	7a39      	ldrb	r1, [r7, #8]
 801031e:	4004      	ands	r4, r0
 8010320:	4628      	mov	r0, r5
 8010322:	f7fc fa8d 	bl	800c840 <ucdr_serialize_bool>
 8010326:	7a3b      	ldrb	r3, [r7, #8]
 8010328:	ea00 0804 	and.w	r8, r0, r4
 801032c:	b913      	cbnz	r3, 8010334 <uxr_serialize_AGENT_Representation+0x40>
 801032e:	4640      	mov	r0, r8
 8010330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010334:	68f9      	ldr	r1, [r7, #12]
 8010336:	4628      	mov	r0, r5
 8010338:	f7fc fcc6 	bl	800ccc8 <ucdr_serialize_uint32_t>
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	b303      	cbz	r3, 8010382 <uxr_serialize_AGENT_Representation+0x8e>
 8010340:	b1d0      	cbz	r0, 8010378 <uxr_serialize_AGENT_Representation+0x84>
 8010342:	463e      	mov	r6, r7
 8010344:	f04f 0900 	mov.w	r9, #0
 8010348:	e001      	b.n	801034e <uxr_serialize_AGENT_Representation+0x5a>
 801034a:	3608      	adds	r6, #8
 801034c:	b1a4      	cbz	r4, 8010378 <uxr_serialize_AGENT_Representation+0x84>
 801034e:	6931      	ldr	r1, [r6, #16]
 8010350:	4628      	mov	r0, r5
 8010352:	f005 f807 	bl	8015364 <ucdr_serialize_string>
 8010356:	6971      	ldr	r1, [r6, #20]
 8010358:	4604      	mov	r4, r0
 801035a:	4628      	mov	r0, r5
 801035c:	f005 f802 	bl	8015364 <ucdr_serialize_string>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f109 0901 	add.w	r9, r9, #1
 8010366:	4004      	ands	r4, r0
 8010368:	4599      	cmp	r9, r3
 801036a:	b2e4      	uxtb	r4, r4
 801036c:	d3ed      	bcc.n	801034a <uxr_serialize_AGENT_Representation+0x56>
 801036e:	ea08 0804 	and.w	r8, r8, r4
 8010372:	4640      	mov	r0, r8
 8010374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010378:	f04f 0800 	mov.w	r8, #0
 801037c:	4640      	mov	r0, r8
 801037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010382:	ea08 0800 	and.w	r8, r8, r0
 8010386:	e7d2      	b.n	801032e <uxr_serialize_AGENT_Representation+0x3a>

08010388 <uxr_serialize_DATAWRITER_Representation>:
 8010388:	b570      	push	{r4, r5, r6, lr}
 801038a:	460d      	mov	r5, r1
 801038c:	7809      	ldrb	r1, [r1, #0]
 801038e:	4606      	mov	r6, r0
 8010390:	f7fc fa84 	bl	800c89c <ucdr_serialize_uint8_t>
 8010394:	4604      	mov	r4, r0
 8010396:	b130      	cbz	r0, 80103a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010398:	782b      	ldrb	r3, [r5, #0]
 801039a:	2b02      	cmp	r3, #2
 801039c:	d00c      	beq.n	80103b8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d010      	beq.n	80103c4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d008      	beq.n	80103b8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80103a6:	2202      	movs	r2, #2
 80103a8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80103ac:	4630      	mov	r0, r6
 80103ae:	f004 feb9 	bl	8015124 <ucdr_serialize_array_uint8_t>
 80103b2:	4020      	ands	r0, r4
 80103b4:	b2c0      	uxtb	r0, r0
 80103b6:	bd70      	pop	{r4, r5, r6, pc}
 80103b8:	6869      	ldr	r1, [r5, #4]
 80103ba:	4630      	mov	r0, r6
 80103bc:	f004 ffd2 	bl	8015364 <ucdr_serialize_string>
 80103c0:	4604      	mov	r4, r0
 80103c2:	e7f0      	b.n	80103a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80103c4:	4629      	mov	r1, r5
 80103c6:	4630      	mov	r0, r6
 80103c8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80103cc:	3104      	adds	r1, #4
 80103ce:	f004 ff9d 	bl	801530c <ucdr_serialize_sequence_uint8_t>
 80103d2:	4604      	mov	r4, r0
 80103d4:	e7e7      	b.n	80103a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80103d6:	bf00      	nop

080103d8 <uxr_serialize_ObjectVariant.part.0>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	780b      	ldrb	r3, [r1, #0]
 80103dc:	3b01      	subs	r3, #1
 80103de:	460c      	mov	r4, r1
 80103e0:	4605      	mov	r5, r0
 80103e2:	2b0d      	cmp	r3, #13
 80103e4:	d854      	bhi.n	8010490 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80103e6:	e8df f003 	tbb	[pc, r3]
 80103ea:	0730      	.short	0x0730
 80103ec:	07071b1b 	.word	0x07071b1b
 80103f0:	0c530707 	.word	0x0c530707
 80103f4:	494e0c0c 	.word	0x494e0c0c
 80103f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103fc:	3104      	adds	r1, #4
 80103fe:	f7ff bfc3 	b.w	8010388 <uxr_serialize_DATAWRITER_Representation>
 8010402:	7909      	ldrb	r1, [r1, #4]
 8010404:	f7fc fa4a 	bl	800c89c <ucdr_serialize_uint8_t>
 8010408:	b1e8      	cbz	r0, 8010446 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801040a:	7923      	ldrb	r3, [r4, #4]
 801040c:	2b01      	cmp	r3, #1
 801040e:	d001      	beq.n	8010414 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010410:	2b02      	cmp	r3, #2
 8010412:	d13d      	bne.n	8010490 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010414:	68a1      	ldr	r1, [r4, #8]
 8010416:	4628      	mov	r0, r5
 8010418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801041c:	f004 bfa2 	b.w	8015364 <ucdr_serialize_string>
 8010420:	7909      	ldrb	r1, [r1, #4]
 8010422:	f7fc fa3b 	bl	800c89c <ucdr_serialize_uint8_t>
 8010426:	4606      	mov	r6, r0
 8010428:	b120      	cbz	r0, 8010434 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801042a:	7923      	ldrb	r3, [r4, #4]
 801042c:	2b02      	cmp	r3, #2
 801042e:	d039      	beq.n	80104a4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010430:	2b03      	cmp	r3, #3
 8010432:	d02f      	beq.n	8010494 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010434:	2202      	movs	r2, #2
 8010436:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801043a:	4628      	mov	r0, r5
 801043c:	f004 fe72 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010440:	4030      	ands	r0, r6
 8010442:	b2c0      	uxtb	r0, r0
 8010444:	bd70      	pop	{r4, r5, r6, pc}
 8010446:	2000      	movs	r0, #0
 8010448:	bd70      	pop	{r4, r5, r6, pc}
 801044a:	7909      	ldrb	r1, [r1, #4]
 801044c:	f7fc fa26 	bl	800c89c <ucdr_serialize_uint8_t>
 8010450:	4606      	mov	r6, r0
 8010452:	b158      	cbz	r0, 801046c <uxr_serialize_ObjectVariant.part.0+0x94>
 8010454:	7923      	ldrb	r3, [r4, #4]
 8010456:	2b02      	cmp	r3, #2
 8010458:	d003      	beq.n	8010462 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801045a:	2b03      	cmp	r3, #3
 801045c:	d028      	beq.n	80104b0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801045e:	2b01      	cmp	r3, #1
 8010460:	d104      	bne.n	801046c <uxr_serialize_ObjectVariant.part.0+0x94>
 8010462:	68a1      	ldr	r1, [r4, #8]
 8010464:	4628      	mov	r0, r5
 8010466:	f004 ff7d 	bl	8015364 <ucdr_serialize_string>
 801046a:	4606      	mov	r6, r0
 801046c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010470:	4628      	mov	r0, r5
 8010472:	f7fc ff4f 	bl	800d314 <ucdr_serialize_int16_t>
 8010476:	4030      	ands	r0, r6
 8010478:	b2c0      	uxtb	r0, r0
 801047a:	bd70      	pop	{r4, r5, r6, pc}
 801047c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010480:	3104      	adds	r1, #4
 8010482:	f7ff be7b 	b.w	801017c <uxr_serialize_CLIENT_Representation>
 8010486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801048a:	3104      	adds	r1, #4
 801048c:	f7ff bf32 	b.w	80102f4 <uxr_serialize_AGENT_Representation>
 8010490:	2001      	movs	r0, #1
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	68a2      	ldr	r2, [r4, #8]
 8010496:	f104 010c 	add.w	r1, r4, #12
 801049a:	4628      	mov	r0, r5
 801049c:	f004 ff36 	bl	801530c <ucdr_serialize_sequence_uint8_t>
 80104a0:	4606      	mov	r6, r0
 80104a2:	e7c7      	b.n	8010434 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80104a4:	68a1      	ldr	r1, [r4, #8]
 80104a6:	4628      	mov	r0, r5
 80104a8:	f004 ff5c 	bl	8015364 <ucdr_serialize_string>
 80104ac:	4606      	mov	r6, r0
 80104ae:	e7c1      	b.n	8010434 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80104b0:	68a2      	ldr	r2, [r4, #8]
 80104b2:	f104 010c 	add.w	r1, r4, #12
 80104b6:	4628      	mov	r0, r5
 80104b8:	f004 ff28 	bl	801530c <ucdr_serialize_sequence_uint8_t>
 80104bc:	4606      	mov	r6, r0
 80104be:	e7d5      	b.n	801046c <uxr_serialize_ObjectVariant.part.0+0x94>

080104c0 <uxr_deserialize_DATAWRITER_Representation>:
 80104c0:	b570      	push	{r4, r5, r6, lr}
 80104c2:	4606      	mov	r6, r0
 80104c4:	460d      	mov	r5, r1
 80104c6:	f7fc f9ff 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 80104ca:	4604      	mov	r4, r0
 80104cc:	b130      	cbz	r0, 80104dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80104ce:	782b      	ldrb	r3, [r5, #0]
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	d00c      	beq.n	80104ee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	d012      	beq.n	80104fe <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d008      	beq.n	80104ee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80104dc:	2202      	movs	r2, #2
 80104de:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80104e2:	4630      	mov	r0, r6
 80104e4:	f004 fe82 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 80104e8:	4020      	ands	r0, r4
 80104ea:	b2c0      	uxtb	r0, r0
 80104ec:	bd70      	pop	{r4, r5, r6, pc}
 80104ee:	6869      	ldr	r1, [r5, #4]
 80104f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104f4:	4630      	mov	r0, r6
 80104f6:	f004 ff45 	bl	8015384 <ucdr_deserialize_string>
 80104fa:	4604      	mov	r4, r0
 80104fc:	e7ee      	b.n	80104dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80104fe:	1d2b      	adds	r3, r5, #4
 8010500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010504:	f105 0108 	add.w	r1, r5, #8
 8010508:	4630      	mov	r0, r6
 801050a:	f004 ff11 	bl	8015330 <ucdr_deserialize_sequence_uint8_t>
 801050e:	4604      	mov	r4, r0
 8010510:	e7e4      	b.n	80104dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010512:	bf00      	nop

08010514 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010514:	b570      	push	{r4, r5, r6, lr}
 8010516:	460d      	mov	r5, r1
 8010518:	7809      	ldrb	r1, [r1, #0]
 801051a:	4606      	mov	r6, r0
 801051c:	f7fc f990 	bl	800c840 <ucdr_serialize_bool>
 8010520:	782b      	ldrb	r3, [r5, #0]
 8010522:	4604      	mov	r4, r0
 8010524:	b94b      	cbnz	r3, 801053a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010526:	7a29      	ldrb	r1, [r5, #8]
 8010528:	4630      	mov	r0, r6
 801052a:	f7fc f989 	bl	800c840 <ucdr_serialize_bool>
 801052e:	7a2b      	ldrb	r3, [r5, #8]
 8010530:	4004      	ands	r4, r0
 8010532:	b2e4      	uxtb	r4, r4
 8010534:	b943      	cbnz	r3, 8010548 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010536:	4620      	mov	r0, r4
 8010538:	bd70      	pop	{r4, r5, r6, pc}
 801053a:	6869      	ldr	r1, [r5, #4]
 801053c:	4630      	mov	r0, r6
 801053e:	f004 ff11 	bl	8015364 <ucdr_serialize_string>
 8010542:	4004      	ands	r4, r0
 8010544:	b2e4      	uxtb	r4, r4
 8010546:	e7ee      	b.n	8010526 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010548:	68e9      	ldr	r1, [r5, #12]
 801054a:	4630      	mov	r0, r6
 801054c:	f004 ff0a 	bl	8015364 <ucdr_serialize_string>
 8010550:	4004      	ands	r4, r0
 8010552:	4620      	mov	r0, r4
 8010554:	bd70      	pop	{r4, r5, r6, pc}
 8010556:	bf00      	nop

08010558 <uxr_serialize_OBJK_Topic_Binary>:
 8010558:	b570      	push	{r4, r5, r6, lr}
 801055a:	460d      	mov	r5, r1
 801055c:	6809      	ldr	r1, [r1, #0]
 801055e:	4606      	mov	r6, r0
 8010560:	f004 ff00 	bl	8015364 <ucdr_serialize_string>
 8010564:	7929      	ldrb	r1, [r5, #4]
 8010566:	4604      	mov	r4, r0
 8010568:	4630      	mov	r0, r6
 801056a:	f7fc f969 	bl	800c840 <ucdr_serialize_bool>
 801056e:	792b      	ldrb	r3, [r5, #4]
 8010570:	4004      	ands	r4, r0
 8010572:	b2e4      	uxtb	r4, r4
 8010574:	b943      	cbnz	r3, 8010588 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010576:	7b29      	ldrb	r1, [r5, #12]
 8010578:	4630      	mov	r0, r6
 801057a:	f7fc f961 	bl	800c840 <ucdr_serialize_bool>
 801057e:	7b2b      	ldrb	r3, [r5, #12]
 8010580:	4004      	ands	r4, r0
 8010582:	b93b      	cbnz	r3, 8010594 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010584:	4620      	mov	r0, r4
 8010586:	bd70      	pop	{r4, r5, r6, pc}
 8010588:	68a9      	ldr	r1, [r5, #8]
 801058a:	4630      	mov	r0, r6
 801058c:	f004 feea 	bl	8015364 <ucdr_serialize_string>
 8010590:	4004      	ands	r4, r0
 8010592:	e7f0      	b.n	8010576 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010594:	6929      	ldr	r1, [r5, #16]
 8010596:	4630      	mov	r0, r6
 8010598:	f004 fee4 	bl	8015364 <ucdr_serialize_string>
 801059c:	4004      	ands	r4, r0
 801059e:	b2e4      	uxtb	r4, r4
 80105a0:	4620      	mov	r0, r4
 80105a2:	bd70      	pop	{r4, r5, r6, pc}

080105a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80105a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a8:	460c      	mov	r4, r1
 80105aa:	7809      	ldrb	r1, [r1, #0]
 80105ac:	4606      	mov	r6, r0
 80105ae:	f7fc f947 	bl	800c840 <ucdr_serialize_bool>
 80105b2:	7823      	ldrb	r3, [r4, #0]
 80105b4:	4605      	mov	r5, r0
 80105b6:	b96b      	cbnz	r3, 80105d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80105b8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80105bc:	4630      	mov	r0, r6
 80105be:	f7fc f93f 	bl	800c840 <ucdr_serialize_bool>
 80105c2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80105c6:	4005      	ands	r5, r0
 80105c8:	b2ed      	uxtb	r5, r5
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d169      	bne.n	80106a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80105ce:	4628      	mov	r0, r5
 80105d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d4:	6861      	ldr	r1, [r4, #4]
 80105d6:	4630      	mov	r0, r6
 80105d8:	f7fc fb76 	bl	800ccc8 <ucdr_serialize_uint32_t>
 80105dc:	6863      	ldr	r3, [r4, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d06b      	beq.n	80106ba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d067      	beq.n	80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80105e6:	68a1      	ldr	r1, [r4, #8]
 80105e8:	4630      	mov	r0, r6
 80105ea:	f004 febb 	bl	8015364 <ucdr_serialize_string>
 80105ee:	6863      	ldr	r3, [r4, #4]
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d953      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d05e      	beq.n	80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80105f8:	68e1      	ldr	r1, [r4, #12]
 80105fa:	4630      	mov	r0, r6
 80105fc:	f004 feb2 	bl	8015364 <ucdr_serialize_string>
 8010600:	6863      	ldr	r3, [r4, #4]
 8010602:	2b02      	cmp	r3, #2
 8010604:	d94a      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010606:	2800      	cmp	r0, #0
 8010608:	d055      	beq.n	80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801060a:	6921      	ldr	r1, [r4, #16]
 801060c:	4630      	mov	r0, r6
 801060e:	f004 fea9 	bl	8015364 <ucdr_serialize_string>
 8010612:	6863      	ldr	r3, [r4, #4]
 8010614:	2b03      	cmp	r3, #3
 8010616:	d941      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010618:	2800      	cmp	r0, #0
 801061a:	d04c      	beq.n	80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801061c:	6961      	ldr	r1, [r4, #20]
 801061e:	4630      	mov	r0, r6
 8010620:	f004 fea0 	bl	8015364 <ucdr_serialize_string>
 8010624:	6863      	ldr	r3, [r4, #4]
 8010626:	2b04      	cmp	r3, #4
 8010628:	d938      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801062a:	2800      	cmp	r0, #0
 801062c:	d043      	beq.n	80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801062e:	69a1      	ldr	r1, [r4, #24]
 8010630:	4630      	mov	r0, r6
 8010632:	f004 fe97 	bl	8015364 <ucdr_serialize_string>
 8010636:	6863      	ldr	r3, [r4, #4]
 8010638:	2b05      	cmp	r3, #5
 801063a:	d92f      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801063c:	2800      	cmp	r0, #0
 801063e:	d03a      	beq.n	80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010640:	69e1      	ldr	r1, [r4, #28]
 8010642:	4630      	mov	r0, r6
 8010644:	f004 fe8e 	bl	8015364 <ucdr_serialize_string>
 8010648:	6863      	ldr	r3, [r4, #4]
 801064a:	2b06      	cmp	r3, #6
 801064c:	d926      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801064e:	b390      	cbz	r0, 80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010650:	6a21      	ldr	r1, [r4, #32]
 8010652:	4630      	mov	r0, r6
 8010654:	f004 fe86 	bl	8015364 <ucdr_serialize_string>
 8010658:	6863      	ldr	r3, [r4, #4]
 801065a:	2b07      	cmp	r3, #7
 801065c:	d91e      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801065e:	b350      	cbz	r0, 80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010660:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010662:	4630      	mov	r0, r6
 8010664:	f004 fe7e 	bl	8015364 <ucdr_serialize_string>
 8010668:	6863      	ldr	r3, [r4, #4]
 801066a:	2b08      	cmp	r3, #8
 801066c:	d916      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801066e:	b310      	cbz	r0, 80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010670:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010672:	4630      	mov	r0, r6
 8010674:	f004 fe76 	bl	8015364 <ucdr_serialize_string>
 8010678:	6863      	ldr	r3, [r4, #4]
 801067a:	2b09      	cmp	r3, #9
 801067c:	d90e      	bls.n	801069c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801067e:	b1d0      	cbz	r0, 80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010680:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010684:	2709      	movs	r7, #9
 8010686:	e000      	b.n	801068a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010688:	b1a8      	cbz	r0, 80106b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801068a:	f858 1b04 	ldr.w	r1, [r8], #4
 801068e:	4630      	mov	r0, r6
 8010690:	f004 fe68 	bl	8015364 <ucdr_serialize_string>
 8010694:	6862      	ldr	r2, [r4, #4]
 8010696:	3701      	adds	r7, #1
 8010698:	4297      	cmp	r7, r2
 801069a:	d3f5      	bcc.n	8010688 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801069c:	4005      	ands	r5, r0
 801069e:	b2ed      	uxtb	r5, r5
 80106a0:	e78a      	b.n	80105b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80106a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80106a4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80106a8:	4630      	mov	r0, r6
 80106aa:	f004 fe2f 	bl	801530c <ucdr_serialize_sequence_uint8_t>
 80106ae:	4005      	ands	r5, r0
 80106b0:	4628      	mov	r0, r5
 80106b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106b6:	2500      	movs	r5, #0
 80106b8:	e77e      	b.n	80105b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80106ba:	4028      	ands	r0, r5
 80106bc:	b2c5      	uxtb	r5, r0
 80106be:	e77b      	b.n	80105b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080106c0 <uxr_serialize_OBJK_Publisher_Binary>:
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	460d      	mov	r5, r1
 80106c4:	7809      	ldrb	r1, [r1, #0]
 80106c6:	4606      	mov	r6, r0
 80106c8:	f7fc f8ba 	bl	800c840 <ucdr_serialize_bool>
 80106cc:	782b      	ldrb	r3, [r5, #0]
 80106ce:	4604      	mov	r4, r0
 80106d0:	b94b      	cbnz	r3, 80106e6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80106d2:	7a29      	ldrb	r1, [r5, #8]
 80106d4:	4630      	mov	r0, r6
 80106d6:	f7fc f8b3 	bl	800c840 <ucdr_serialize_bool>
 80106da:	7a2b      	ldrb	r3, [r5, #8]
 80106dc:	4004      	ands	r4, r0
 80106de:	b2e4      	uxtb	r4, r4
 80106e0:	b943      	cbnz	r3, 80106f4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80106e2:	4620      	mov	r0, r4
 80106e4:	bd70      	pop	{r4, r5, r6, pc}
 80106e6:	6869      	ldr	r1, [r5, #4]
 80106e8:	4630      	mov	r0, r6
 80106ea:	f004 fe3b 	bl	8015364 <ucdr_serialize_string>
 80106ee:	4004      	ands	r4, r0
 80106f0:	b2e4      	uxtb	r4, r4
 80106f2:	e7ee      	b.n	80106d2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80106f4:	f105 010c 	add.w	r1, r5, #12
 80106f8:	4630      	mov	r0, r6
 80106fa:	f7ff ff53 	bl	80105a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80106fe:	4004      	ands	r4, r0
 8010700:	4620      	mov	r0, r4
 8010702:	bd70      	pop	{r4, r5, r6, pc}

08010704 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010704:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010708:	4688      	mov	r8, r1
 801070a:	8809      	ldrh	r1, [r1, #0]
 801070c:	4681      	mov	r9, r0
 801070e:	f7fc f8f1 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010712:	f898 1002 	ldrb.w	r1, [r8, #2]
 8010716:	4606      	mov	r6, r0
 8010718:	4648      	mov	r0, r9
 801071a:	f7fc f891 	bl	800c840 <ucdr_serialize_bool>
 801071e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010722:	4006      	ands	r6, r0
 8010724:	b2f5      	uxtb	r5, r6
 8010726:	b9eb      	cbnz	r3, 8010764 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010728:	f898 1006 	ldrb.w	r1, [r8, #6]
 801072c:	4648      	mov	r0, r9
 801072e:	f7fc f887 	bl	800c840 <ucdr_serialize_bool>
 8010732:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010736:	4005      	ands	r5, r0
 8010738:	bb7b      	cbnz	r3, 801079a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801073a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801073e:	4648      	mov	r0, r9
 8010740:	f7fc f87e 	bl	800c840 <ucdr_serialize_bool>
 8010744:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010748:	4005      	ands	r5, r0
 801074a:	b9f3      	cbnz	r3, 801078a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801074c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010750:	4648      	mov	r0, r9
 8010752:	f7fc f875 	bl	800c840 <ucdr_serialize_bool>
 8010756:	f898 3014 	ldrb.w	r3, [r8, #20]
 801075a:	4005      	ands	r5, r0
 801075c:	b94b      	cbnz	r3, 8010772 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801075e:	4628      	mov	r0, r5
 8010760:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010764:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010768:	4648      	mov	r0, r9
 801076a:	f7fc f8c3 	bl	800c8f4 <ucdr_serialize_uint16_t>
 801076e:	4005      	ands	r5, r0
 8010770:	e7da      	b.n	8010728 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010772:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010776:	f108 011c 	add.w	r1, r8, #28
 801077a:	4648      	mov	r0, r9
 801077c:	f004 fdc6 	bl	801530c <ucdr_serialize_sequence_uint8_t>
 8010780:	4028      	ands	r0, r5
 8010782:	b2c5      	uxtb	r5, r0
 8010784:	4628      	mov	r0, r5
 8010786:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801078a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801078e:	4648      	mov	r0, r9
 8010790:	f7fc fa9a 	bl	800ccc8 <ucdr_serialize_uint32_t>
 8010794:	4028      	ands	r0, r5
 8010796:	b2c5      	uxtb	r5, r0
 8010798:	e7d8      	b.n	801074c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801079a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801079e:	4648      	mov	r0, r9
 80107a0:	f7fc fa92 	bl	800ccc8 <ucdr_serialize_uint32_t>
 80107a4:	4028      	ands	r0, r5
 80107a6:	b2c5      	uxtb	r5, r0
 80107a8:	e7c7      	b.n	801073a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80107aa:	bf00      	nop

080107ac <uxr_serialize_OBJK_DataWriter_Binary>:
 80107ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ae:	2202      	movs	r2, #2
 80107b0:	460d      	mov	r5, r1
 80107b2:	4606      	mov	r6, r0
 80107b4:	f004 fcb6 	bl	8015124 <ucdr_serialize_array_uint8_t>
 80107b8:	78a9      	ldrb	r1, [r5, #2]
 80107ba:	4604      	mov	r4, r0
 80107bc:	4630      	mov	r0, r6
 80107be:	f7fc f83f 	bl	800c840 <ucdr_serialize_bool>
 80107c2:	78ab      	ldrb	r3, [r5, #2]
 80107c4:	4004      	ands	r4, r0
 80107c6:	b2e4      	uxtb	r4, r4
 80107c8:	b90b      	cbnz	r3, 80107ce <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80107ca:	4620      	mov	r0, r4
 80107cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ce:	f105 0108 	add.w	r1, r5, #8
 80107d2:	4630      	mov	r0, r6
 80107d4:	f7ff ff96 	bl	8010704 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80107d8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80107dc:	4607      	mov	r7, r0
 80107de:	4630      	mov	r0, r6
 80107e0:	f7fc f82e 	bl	800c840 <ucdr_serialize_bool>
 80107e4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80107e8:	4038      	ands	r0, r7
 80107ea:	b2c7      	uxtb	r7, r0
 80107ec:	b913      	cbnz	r3, 80107f4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80107ee:	403c      	ands	r4, r7
 80107f0:	4620      	mov	r0, r4
 80107f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107f4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80107f8:	4630      	mov	r0, r6
 80107fa:	f7fc fcbb 	bl	800d174 <ucdr_serialize_uint64_t>
 80107fe:	4007      	ands	r7, r0
 8010800:	e7f5      	b.n	80107ee <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010802:	bf00      	nop

08010804 <uxr_deserialize_ObjectVariant>:
 8010804:	b570      	push	{r4, r5, r6, lr}
 8010806:	4605      	mov	r5, r0
 8010808:	460e      	mov	r6, r1
 801080a:	f7fc f85d 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 801080e:	b168      	cbz	r0, 801082c <uxr_deserialize_ObjectVariant+0x28>
 8010810:	7833      	ldrb	r3, [r6, #0]
 8010812:	3b01      	subs	r3, #1
 8010814:	4604      	mov	r4, r0
 8010816:	2b0d      	cmp	r3, #13
 8010818:	d809      	bhi.n	801082e <uxr_deserialize_ObjectVariant+0x2a>
 801081a:	e8df f003 	tbb	[pc, r3]
 801081e:	0a41      	.short	0x0a41
 8010820:	0a0a2323 	.word	0x0a0a2323
 8010824:	10080a0a 	.word	0x10080a0a
 8010828:	565c1010 	.word	0x565c1010
 801082c:	2400      	movs	r4, #0
 801082e:	4620      	mov	r0, r4
 8010830:	bd70      	pop	{r4, r5, r6, pc}
 8010832:	1d31      	adds	r1, r6, #4
 8010834:	4628      	mov	r0, r5
 8010836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801083a:	f7ff be41 	b.w	80104c0 <uxr_deserialize_DATAWRITER_Representation>
 801083e:	1d31      	adds	r1, r6, #4
 8010840:	4628      	mov	r0, r5
 8010842:	f7fc f841 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010846:	2800      	cmp	r0, #0
 8010848:	d0f0      	beq.n	801082c <uxr_deserialize_ObjectVariant+0x28>
 801084a:	7933      	ldrb	r3, [r6, #4]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d001      	beq.n	8010854 <uxr_deserialize_ObjectVariant+0x50>
 8010850:	2b02      	cmp	r3, #2
 8010852:	d1ec      	bne.n	801082e <uxr_deserialize_ObjectVariant+0x2a>
 8010854:	68b1      	ldr	r1, [r6, #8]
 8010856:	4628      	mov	r0, r5
 8010858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801085c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010860:	f004 bd90 	b.w	8015384 <ucdr_deserialize_string>
 8010864:	1d31      	adds	r1, r6, #4
 8010866:	4628      	mov	r0, r5
 8010868:	f7fc f82e 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 801086c:	4604      	mov	r4, r0
 801086e:	b170      	cbz	r0, 801088e <uxr_deserialize_ObjectVariant+0x8a>
 8010870:	7933      	ldrb	r3, [r6, #4]
 8010872:	2b02      	cmp	r3, #2
 8010874:	d04c      	beq.n	8010910 <uxr_deserialize_ObjectVariant+0x10c>
 8010876:	2b03      	cmp	r3, #3
 8010878:	d109      	bne.n	801088e <uxr_deserialize_ObjectVariant+0x8a>
 801087a:	f106 0308 	add.w	r3, r6, #8
 801087e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010882:	f106 010c 	add.w	r1, r6, #12
 8010886:	4628      	mov	r0, r5
 8010888:	f004 fd52 	bl	8015330 <ucdr_deserialize_sequence_uint8_t>
 801088c:	4604      	mov	r4, r0
 801088e:	2202      	movs	r2, #2
 8010890:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010894:	4628      	mov	r0, r5
 8010896:	f004 fca9 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 801089a:	4020      	ands	r0, r4
 801089c:	b2c4      	uxtb	r4, r0
 801089e:	e7c6      	b.n	801082e <uxr_deserialize_ObjectVariant+0x2a>
 80108a0:	1d31      	adds	r1, r6, #4
 80108a2:	4628      	mov	r0, r5
 80108a4:	f7fc f810 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 80108a8:	4604      	mov	r4, r0
 80108aa:	b130      	cbz	r0, 80108ba <uxr_deserialize_ObjectVariant+0xb6>
 80108ac:	7933      	ldrb	r3, [r6, #4]
 80108ae:	2b02      	cmp	r3, #2
 80108b0:	d036      	beq.n	8010920 <uxr_deserialize_ObjectVariant+0x11c>
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	d03c      	beq.n	8010930 <uxr_deserialize_ObjectVariant+0x12c>
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d032      	beq.n	8010920 <uxr_deserialize_ObjectVariant+0x11c>
 80108ba:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80108be:	4628      	mov	r0, r5
 80108c0:	f7fc fda8 	bl	800d414 <ucdr_deserialize_int16_t>
 80108c4:	4020      	ands	r0, r4
 80108c6:	b2c4      	uxtb	r4, r0
 80108c8:	e7b1      	b.n	801082e <uxr_deserialize_ObjectVariant+0x2a>
 80108ca:	1d31      	adds	r1, r6, #4
 80108cc:	4628      	mov	r0, r5
 80108ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108d2:	f7ff bcab 	b.w	801022c <uxr_deserialize_CLIENT_Representation>
 80108d6:	2204      	movs	r2, #4
 80108d8:	18b1      	adds	r1, r6, r2
 80108da:	4628      	mov	r0, r5
 80108dc:	f004 fc86 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 80108e0:	2202      	movs	r2, #2
 80108e2:	f106 0108 	add.w	r1, r6, #8
 80108e6:	4604      	mov	r4, r0
 80108e8:	4628      	mov	r0, r5
 80108ea:	f004 fc7f 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 80108ee:	2202      	movs	r2, #2
 80108f0:	4004      	ands	r4, r0
 80108f2:	f106 010a 	add.w	r1, r6, #10
 80108f6:	4628      	mov	r0, r5
 80108f8:	f004 fc78 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 80108fc:	b2e4      	uxtb	r4, r4
 80108fe:	4603      	mov	r3, r0
 8010900:	f106 010c 	add.w	r1, r6, #12
 8010904:	4628      	mov	r0, r5
 8010906:	401c      	ands	r4, r3
 8010908:	f7fb ffb0 	bl	800c86c <ucdr_deserialize_bool>
 801090c:	4004      	ands	r4, r0
 801090e:	e78e      	b.n	801082e <uxr_deserialize_ObjectVariant+0x2a>
 8010910:	68b1      	ldr	r1, [r6, #8]
 8010912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010916:	4628      	mov	r0, r5
 8010918:	f004 fd34 	bl	8015384 <ucdr_deserialize_string>
 801091c:	4604      	mov	r4, r0
 801091e:	e7b6      	b.n	801088e <uxr_deserialize_ObjectVariant+0x8a>
 8010920:	68b1      	ldr	r1, [r6, #8]
 8010922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010926:	4628      	mov	r0, r5
 8010928:	f004 fd2c 	bl	8015384 <ucdr_deserialize_string>
 801092c:	4604      	mov	r4, r0
 801092e:	e7c4      	b.n	80108ba <uxr_deserialize_ObjectVariant+0xb6>
 8010930:	f106 0308 	add.w	r3, r6, #8
 8010934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010938:	f106 010c 	add.w	r1, r6, #12
 801093c:	4628      	mov	r0, r5
 801093e:	f004 fcf7 	bl	8015330 <ucdr_deserialize_sequence_uint8_t>
 8010942:	4604      	mov	r4, r0
 8010944:	e7b9      	b.n	80108ba <uxr_deserialize_ObjectVariant+0xb6>
 8010946:	bf00      	nop

08010948 <uxr_deserialize_BaseObjectRequest>:
 8010948:	b570      	push	{r4, r5, r6, lr}
 801094a:	2202      	movs	r2, #2
 801094c:	4605      	mov	r5, r0
 801094e:	460e      	mov	r6, r1
 8010950:	f004 fc4c 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010954:	2202      	movs	r2, #2
 8010956:	4604      	mov	r4, r0
 8010958:	18b1      	adds	r1, r6, r2
 801095a:	4628      	mov	r0, r5
 801095c:	f004 fc46 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010960:	4020      	ands	r0, r4
 8010962:	b2c0      	uxtb	r0, r0
 8010964:	bd70      	pop	{r4, r5, r6, pc}
 8010966:	bf00      	nop

08010968 <uxr_serialize_ActivityInfoVariant>:
 8010968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801096c:	460d      	mov	r5, r1
 801096e:	7809      	ldrb	r1, [r1, #0]
 8010970:	4607      	mov	r7, r0
 8010972:	f7fb ff93 	bl	800c89c <ucdr_serialize_uint8_t>
 8010976:	4681      	mov	r9, r0
 8010978:	b138      	cbz	r0, 801098a <uxr_serialize_ActivityInfoVariant+0x22>
 801097a:	782b      	ldrb	r3, [r5, #0]
 801097c:	2b06      	cmp	r3, #6
 801097e:	f000 8082 	beq.w	8010a86 <uxr_serialize_ActivityInfoVariant+0x11e>
 8010982:	2b0d      	cmp	r3, #13
 8010984:	d016      	beq.n	80109b4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8010986:	2b05      	cmp	r3, #5
 8010988:	d002      	beq.n	8010990 <uxr_serialize_ActivityInfoVariant+0x28>
 801098a:	4648      	mov	r0, r9
 801098c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010990:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010994:	4638      	mov	r0, r7
 8010996:	f7fc fcbd 	bl	800d314 <ucdr_serialize_int16_t>
 801099a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801099e:	4681      	mov	r9, r0
 80109a0:	4638      	mov	r0, r7
 80109a2:	f7fc fbe7 	bl	800d174 <ucdr_serialize_uint64_t>
 80109a6:	ea09 0000 	and.w	r0, r9, r0
 80109aa:	fa5f f980 	uxtb.w	r9, r0
 80109ae:	4648      	mov	r0, r9
 80109b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80109b8:	4638      	mov	r0, r7
 80109ba:	f7fc fcab 	bl	800d314 <ucdr_serialize_int16_t>
 80109be:	68e9      	ldr	r1, [r5, #12]
 80109c0:	4681      	mov	r9, r0
 80109c2:	4638      	mov	r0, r7
 80109c4:	f7fc f980 	bl	800ccc8 <ucdr_serialize_uint32_t>
 80109c8:	68eb      	ldr	r3, [r5, #12]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d0eb      	beq.n	80109a6 <uxr_serialize_ActivityInfoVariant+0x3e>
 80109ce:	b320      	cbz	r0, 8010a1a <uxr_serialize_ActivityInfoVariant+0xb2>
 80109d0:	f105 080c 	add.w	r8, r5, #12
 80109d4:	2600      	movs	r6, #0
 80109d6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80109da:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80109de:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80109e2:	4638      	mov	r0, r7
 80109e4:	f7fb ff5a 	bl	800c89c <ucdr_serialize_uint8_t>
 80109e8:	2800      	cmp	r0, #0
 80109ea:	d053      	beq.n	8010a94 <uxr_serialize_ActivityInfoVariant+0x12c>
 80109ec:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80109f0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80109f4:	0074      	lsls	r4, r6, #1
 80109f6:	00c9      	lsls	r1, r1, #3
 80109f8:	2b03      	cmp	r3, #3
 80109fa:	d854      	bhi.n	8010aa6 <uxr_serialize_ActivityInfoVariant+0x13e>
 80109fc:	e8df f003 	tbb	[pc, r3]
 8010a00:	02102132 	.word	0x02102132
 8010a04:	4441      	add	r1, r8
 8010a06:	4638      	mov	r0, r7
 8010a08:	6889      	ldr	r1, [r1, #8]
 8010a0a:	f004 fcab 	bl	8015364 <ucdr_serialize_string>
 8010a0e:	68ea      	ldr	r2, [r5, #12]
 8010a10:	3601      	adds	r6, #1
 8010a12:	4296      	cmp	r6, r2
 8010a14:	d242      	bcs.n	8010a9c <uxr_serialize_ActivityInfoVariant+0x134>
 8010a16:	2800      	cmp	r0, #0
 8010a18:	d1dd      	bne.n	80109d6 <uxr_serialize_ActivityInfoVariant+0x6e>
 8010a1a:	f04f 0900 	mov.w	r9, #0
 8010a1e:	e7b4      	b.n	801098a <uxr_serialize_ActivityInfoVariant+0x22>
 8010a20:	3108      	adds	r1, #8
 8010a22:	4441      	add	r1, r8
 8010a24:	2210      	movs	r2, #16
 8010a26:	4638      	mov	r0, r7
 8010a28:	f004 fb7c 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010a2c:	4434      	add	r4, r6
 8010a2e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a32:	4604      	mov	r4, r0
 8010a34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010a36:	4638      	mov	r0, r7
 8010a38:	f7fc f946 	bl	800ccc8 <ucdr_serialize_uint32_t>
 8010a3c:	4020      	ands	r0, r4
 8010a3e:	b2c0      	uxtb	r0, r0
 8010a40:	e7e5      	b.n	8010a0e <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a42:	3108      	adds	r1, #8
 8010a44:	4441      	add	r1, r8
 8010a46:	2204      	movs	r2, #4
 8010a48:	4638      	mov	r0, r7
 8010a4a:	f004 fb6b 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010a4e:	4434      	add	r4, r6
 8010a50:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a54:	4604      	mov	r4, r0
 8010a56:	8b19      	ldrh	r1, [r3, #24]
 8010a58:	4638      	mov	r0, r7
 8010a5a:	f7fb ff4b 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010a5e:	4020      	ands	r0, r4
 8010a60:	b2c0      	uxtb	r0, r0
 8010a62:	e7d4      	b.n	8010a0e <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a64:	3108      	adds	r1, #8
 8010a66:	4441      	add	r1, r8
 8010a68:	2202      	movs	r2, #2
 8010a6a:	4638      	mov	r0, r7
 8010a6c:	f004 fb5a 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010a70:	4434      	add	r4, r6
 8010a72:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a76:	4604      	mov	r4, r0
 8010a78:	7d99      	ldrb	r1, [r3, #22]
 8010a7a:	4638      	mov	r0, r7
 8010a7c:	f7fb ff0e 	bl	800c89c <ucdr_serialize_uint8_t>
 8010a80:	4020      	ands	r0, r4
 8010a82:	b2c0      	uxtb	r0, r0
 8010a84:	e7c3      	b.n	8010a0e <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a86:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a90:	f7fc bc40 	b.w	800d314 <ucdr_serialize_int16_t>
 8010a94:	68ea      	ldr	r2, [r5, #12]
 8010a96:	3601      	adds	r6, #1
 8010a98:	42b2      	cmp	r2, r6
 8010a9a:	d8be      	bhi.n	8010a1a <uxr_serialize_ActivityInfoVariant+0xb2>
 8010a9c:	ea09 0900 	and.w	r9, r9, r0
 8010aa0:	fa5f f989 	uxtb.w	r9, r9
 8010aa4:	e771      	b.n	801098a <uxr_serialize_ActivityInfoVariant+0x22>
 8010aa6:	68eb      	ldr	r3, [r5, #12]
 8010aa8:	3601      	adds	r6, #1
 8010aaa:	429e      	cmp	r6, r3
 8010aac:	f10a 0a18 	add.w	sl, sl, #24
 8010ab0:	d395      	bcc.n	80109de <uxr_serialize_ActivityInfoVariant+0x76>
 8010ab2:	e76a      	b.n	801098a <uxr_serialize_ActivityInfoVariant+0x22>

08010ab4 <uxr_deserialize_BaseObjectReply>:
 8010ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab8:	2202      	movs	r2, #2
 8010aba:	4606      	mov	r6, r0
 8010abc:	460f      	mov	r7, r1
 8010abe:	f004 fb95 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010ac2:	2202      	movs	r2, #2
 8010ac4:	18b9      	adds	r1, r7, r2
 8010ac6:	4605      	mov	r5, r0
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f004 fb8f 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010ace:	1d39      	adds	r1, r7, #4
 8010ad0:	4680      	mov	r8, r0
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f7fb fef8 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010ad8:	1d79      	adds	r1, r7, #5
 8010ada:	4604      	mov	r4, r0
 8010adc:	4630      	mov	r0, r6
 8010ade:	f7fb fef3 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010ae2:	ea05 0508 	and.w	r5, r5, r8
 8010ae6:	402c      	ands	r4, r5
 8010ae8:	4020      	ands	r0, r4
 8010aea:	b2c0      	uxtb	r0, r0
 8010aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010af0 <uxr_serialize_ReadSpecification>:
 8010af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af4:	460e      	mov	r6, r1
 8010af6:	7809      	ldrb	r1, [r1, #0]
 8010af8:	4607      	mov	r7, r0
 8010afa:	f7fb fecf 	bl	800c89c <ucdr_serialize_uint8_t>
 8010afe:	7871      	ldrb	r1, [r6, #1]
 8010b00:	4604      	mov	r4, r0
 8010b02:	4638      	mov	r0, r7
 8010b04:	f7fb feca 	bl	800c89c <ucdr_serialize_uint8_t>
 8010b08:	78b1      	ldrb	r1, [r6, #2]
 8010b0a:	4004      	ands	r4, r0
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f7fb fe97 	bl	800c840 <ucdr_serialize_bool>
 8010b12:	78b3      	ldrb	r3, [r6, #2]
 8010b14:	b2e4      	uxtb	r4, r4
 8010b16:	4004      	ands	r4, r0
 8010b18:	b94b      	cbnz	r3, 8010b2e <uxr_serialize_ReadSpecification+0x3e>
 8010b1a:	7a31      	ldrb	r1, [r6, #8]
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	f7fb fe8f 	bl	800c840 <ucdr_serialize_bool>
 8010b22:	7a33      	ldrb	r3, [r6, #8]
 8010b24:	4004      	ands	r4, r0
 8010b26:	b943      	cbnz	r3, 8010b3a <uxr_serialize_ReadSpecification+0x4a>
 8010b28:	4620      	mov	r0, r4
 8010b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b2e:	6871      	ldr	r1, [r6, #4]
 8010b30:	4638      	mov	r0, r7
 8010b32:	f004 fc17 	bl	8015364 <ucdr_serialize_string>
 8010b36:	4004      	ands	r4, r0
 8010b38:	e7ef      	b.n	8010b1a <uxr_serialize_ReadSpecification+0x2a>
 8010b3a:	8971      	ldrh	r1, [r6, #10]
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	f7fb fed9 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010b42:	89b1      	ldrh	r1, [r6, #12]
 8010b44:	4605      	mov	r5, r0
 8010b46:	4638      	mov	r0, r7
 8010b48:	f7fb fed4 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010b4c:	89f1      	ldrh	r1, [r6, #14]
 8010b4e:	4005      	ands	r5, r0
 8010b50:	4638      	mov	r0, r7
 8010b52:	f7fb fecf 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010b56:	8a31      	ldrh	r1, [r6, #16]
 8010b58:	4680      	mov	r8, r0
 8010b5a:	4638      	mov	r0, r7
 8010b5c:	f7fb feca 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010b60:	b2ed      	uxtb	r5, r5
 8010b62:	4025      	ands	r5, r4
 8010b64:	ea08 0505 	and.w	r5, r8, r5
 8010b68:	ea00 0405 	and.w	r4, r0, r5
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b72:	bf00      	nop

08010b74 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010b74:	f7ff bb02 	b.w	801017c <uxr_serialize_CLIENT_Representation>

08010b78 <uxr_serialize_CREATE_Payload>:
 8010b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7a:	2202      	movs	r2, #2
 8010b7c:	4607      	mov	r7, r0
 8010b7e:	460e      	mov	r6, r1
 8010b80:	f004 fad0 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010b84:	2202      	movs	r2, #2
 8010b86:	18b1      	adds	r1, r6, r2
 8010b88:	4605      	mov	r5, r0
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	f004 faca 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010b90:	7931      	ldrb	r1, [r6, #4]
 8010b92:	4604      	mov	r4, r0
 8010b94:	4638      	mov	r0, r7
 8010b96:	f7fb fe81 	bl	800c89c <ucdr_serialize_uint8_t>
 8010b9a:	b170      	cbz	r0, 8010bba <uxr_serialize_CREATE_Payload+0x42>
 8010b9c:	7933      	ldrb	r3, [r6, #4]
 8010b9e:	402c      	ands	r4, r5
 8010ba0:	3b01      	subs	r3, #1
 8010ba2:	b2e4      	uxtb	r4, r4
 8010ba4:	2b0d      	cmp	r3, #13
 8010ba6:	d809      	bhi.n	8010bbc <uxr_serialize_CREATE_Payload+0x44>
 8010ba8:	e8df f003 	tbb	[pc, r3]
 8010bac:	23230a4c 	.word	0x23230a4c
 8010bb0:	0a0a0a0a 	.word	0x0a0a0a0a
 8010bb4:	12121208 	.word	0x12121208
 8010bb8:	3e45      	.short	0x3e45
 8010bba:	2400      	movs	r4, #0
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc0:	f106 0108 	add.w	r1, r6, #8
 8010bc4:	4638      	mov	r0, r7
 8010bc6:	f7ff fbdf 	bl	8010388 <uxr_serialize_DATAWRITER_Representation>
 8010bca:	4004      	ands	r4, r0
 8010bcc:	4620      	mov	r0, r4
 8010bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bd0:	7a31      	ldrb	r1, [r6, #8]
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	f7fb fe62 	bl	800c89c <ucdr_serialize_uint8_t>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d0ee      	beq.n	8010bba <uxr_serialize_CREATE_Payload+0x42>
 8010bdc:	7a33      	ldrb	r3, [r6, #8]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d001      	beq.n	8010be6 <uxr_serialize_CREATE_Payload+0x6e>
 8010be2:	2b02      	cmp	r3, #2
 8010be4:	d1ea      	bne.n	8010bbc <uxr_serialize_CREATE_Payload+0x44>
 8010be6:	68f1      	ldr	r1, [r6, #12]
 8010be8:	4638      	mov	r0, r7
 8010bea:	f004 fbbb 	bl	8015364 <ucdr_serialize_string>
 8010bee:	4004      	ands	r4, r0
 8010bf0:	e7e4      	b.n	8010bbc <uxr_serialize_CREATE_Payload+0x44>
 8010bf2:	7a31      	ldrb	r1, [r6, #8]
 8010bf4:	4638      	mov	r0, r7
 8010bf6:	f7fb fe51 	bl	800c89c <ucdr_serialize_uint8_t>
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	b158      	cbz	r0, 8010c16 <uxr_serialize_CREATE_Payload+0x9e>
 8010bfe:	7a33      	ldrb	r3, [r6, #8]
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d034      	beq.n	8010c6e <uxr_serialize_CREATE_Payload+0xf6>
 8010c04:	2b03      	cmp	r3, #3
 8010c06:	d106      	bne.n	8010c16 <uxr_serialize_CREATE_Payload+0x9e>
 8010c08:	68f2      	ldr	r2, [r6, #12]
 8010c0a:	f106 0110 	add.w	r1, r6, #16
 8010c0e:	4638      	mov	r0, r7
 8010c10:	f004 fb7c 	bl	801530c <ucdr_serialize_sequence_uint8_t>
 8010c14:	4605      	mov	r5, r0
 8010c16:	2202      	movs	r2, #2
 8010c18:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	f004 fa81 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010c22:	4028      	ands	r0, r5
 8010c24:	4004      	ands	r4, r0
 8010c26:	e7c9      	b.n	8010bbc <uxr_serialize_CREATE_Payload+0x44>
 8010c28:	f106 0108 	add.w	r1, r6, #8
 8010c2c:	4638      	mov	r0, r7
 8010c2e:	f7ff faa5 	bl	801017c <uxr_serialize_CLIENT_Representation>
 8010c32:	4004      	ands	r4, r0
 8010c34:	e7c2      	b.n	8010bbc <uxr_serialize_CREATE_Payload+0x44>
 8010c36:	f106 0108 	add.w	r1, r6, #8
 8010c3a:	4638      	mov	r0, r7
 8010c3c:	f7ff fb5a 	bl	80102f4 <uxr_serialize_AGENT_Representation>
 8010c40:	4004      	ands	r4, r0
 8010c42:	e7bb      	b.n	8010bbc <uxr_serialize_CREATE_Payload+0x44>
 8010c44:	7a31      	ldrb	r1, [r6, #8]
 8010c46:	4638      	mov	r0, r7
 8010c48:	f7fb fe28 	bl	800c89c <ucdr_serialize_uint8_t>
 8010c4c:	4605      	mov	r5, r0
 8010c4e:	b130      	cbz	r0, 8010c5e <uxr_serialize_CREATE_Payload+0xe6>
 8010c50:	7a33      	ldrb	r3, [r6, #8]
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	d011      	beq.n	8010c7a <uxr_serialize_CREATE_Payload+0x102>
 8010c56:	2b03      	cmp	r3, #3
 8010c58:	d015      	beq.n	8010c86 <uxr_serialize_CREATE_Payload+0x10e>
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d00d      	beq.n	8010c7a <uxr_serialize_CREATE_Payload+0x102>
 8010c5e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8010c62:	4638      	mov	r0, r7
 8010c64:	f7fc fb56 	bl	800d314 <ucdr_serialize_int16_t>
 8010c68:	4028      	ands	r0, r5
 8010c6a:	4004      	ands	r4, r0
 8010c6c:	e7a6      	b.n	8010bbc <uxr_serialize_CREATE_Payload+0x44>
 8010c6e:	68f1      	ldr	r1, [r6, #12]
 8010c70:	4638      	mov	r0, r7
 8010c72:	f004 fb77 	bl	8015364 <ucdr_serialize_string>
 8010c76:	4605      	mov	r5, r0
 8010c78:	e7cd      	b.n	8010c16 <uxr_serialize_CREATE_Payload+0x9e>
 8010c7a:	68f1      	ldr	r1, [r6, #12]
 8010c7c:	4638      	mov	r0, r7
 8010c7e:	f004 fb71 	bl	8015364 <ucdr_serialize_string>
 8010c82:	4605      	mov	r5, r0
 8010c84:	e7eb      	b.n	8010c5e <uxr_serialize_CREATE_Payload+0xe6>
 8010c86:	68f2      	ldr	r2, [r6, #12]
 8010c88:	f106 0110 	add.w	r1, r6, #16
 8010c8c:	4638      	mov	r0, r7
 8010c8e:	f004 fb3d 	bl	801530c <ucdr_serialize_sequence_uint8_t>
 8010c92:	4605      	mov	r5, r0
 8010c94:	e7e3      	b.n	8010c5e <uxr_serialize_CREATE_Payload+0xe6>
 8010c96:	bf00      	nop

08010c98 <uxr_deserialize_GET_INFO_Payload>:
 8010c98:	b570      	push	{r4, r5, r6, lr}
 8010c9a:	2202      	movs	r2, #2
 8010c9c:	4605      	mov	r5, r0
 8010c9e:	460e      	mov	r6, r1
 8010ca0:	f004 faa4 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010ca4:	2202      	movs	r2, #2
 8010ca6:	18b1      	adds	r1, r6, r2
 8010ca8:	4604      	mov	r4, r0
 8010caa:	4628      	mov	r0, r5
 8010cac:	f004 fa9e 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010cb0:	1d31      	adds	r1, r6, #4
 8010cb2:	4004      	ands	r4, r0
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	f7fc f937 	bl	800cf28 <ucdr_deserialize_uint32_t>
 8010cba:	b2e4      	uxtb	r4, r4
 8010cbc:	4020      	ands	r0, r4
 8010cbe:	bd70      	pop	{r4, r5, r6, pc}

08010cc0 <uxr_serialize_DELETE_Payload>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	4605      	mov	r5, r0
 8010cc6:	460e      	mov	r6, r1
 8010cc8:	f004 fa2c 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010ccc:	2202      	movs	r2, #2
 8010cce:	4604      	mov	r4, r0
 8010cd0:	18b1      	adds	r1, r6, r2
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f004 fa26 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010cd8:	4020      	ands	r0, r4
 8010cda:	b2c0      	uxtb	r0, r0
 8010cdc:	bd70      	pop	{r4, r5, r6, pc}
 8010cde:	bf00      	nop

08010ce0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce4:	4605      	mov	r5, r0
 8010ce6:	460e      	mov	r6, r1
 8010ce8:	f7fb fdee 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010cec:	1c71      	adds	r1, r6, #1
 8010cee:	4604      	mov	r4, r0
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f7fb fde9 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010cf6:	2204      	movs	r2, #4
 8010cf8:	18b1      	adds	r1, r6, r2
 8010cfa:	4680      	mov	r8, r0
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f004 fa75 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010d02:	f106 0108 	add.w	r1, r6, #8
 8010d06:	4607      	mov	r7, r0
 8010d08:	2202      	movs	r2, #2
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	f004 fa6e 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010d10:	ea04 0308 	and.w	r3, r4, r8
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	ea03 0407 	and.w	r4, r3, r7
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	4607      	mov	r7, r0
 8010d1e:	f106 010a 	add.w	r1, r6, #10
 8010d22:	4628      	mov	r0, r5
 8010d24:	f004 fa62 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010d28:	f106 010c 	add.w	r1, r6, #12
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	4628      	mov	r0, r5
 8010d30:	461d      	mov	r5, r3
 8010d32:	f7fb fd9b 	bl	800c86c <ucdr_deserialize_bool>
 8010d36:	403c      	ands	r4, r7
 8010d38:	4025      	ands	r5, r4
 8010d3a:	4028      	ands	r0, r5
 8010d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d40 <uxr_deserialize_STATUS_Payload>:
 8010d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d44:	2202      	movs	r2, #2
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f004 fa4f 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010d4e:	2202      	movs	r2, #2
 8010d50:	18b9      	adds	r1, r7, r2
 8010d52:	4605      	mov	r5, r0
 8010d54:	4630      	mov	r0, r6
 8010d56:	f004 fa49 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010d5a:	1d39      	adds	r1, r7, #4
 8010d5c:	4680      	mov	r8, r0
 8010d5e:	4630      	mov	r0, r6
 8010d60:	f7fb fdb2 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010d64:	1d79      	adds	r1, r7, #5
 8010d66:	4604      	mov	r4, r0
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7fb fdad 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010d6e:	ea05 0508 	and.w	r5, r5, r8
 8010d72:	402c      	ands	r4, r5
 8010d74:	4020      	ands	r0, r4
 8010d76:	b2c0      	uxtb	r0, r0
 8010d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d7c <uxr_serialize_INFO_Payload>:
 8010d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d80:	2202      	movs	r2, #2
 8010d82:	460c      	mov	r4, r1
 8010d84:	4605      	mov	r5, r0
 8010d86:	f004 f9cd 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	18a1      	adds	r1, r4, r2
 8010d8e:	4680      	mov	r8, r0
 8010d90:	4628      	mov	r0, r5
 8010d92:	f004 f9c7 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010d96:	7921      	ldrb	r1, [r4, #4]
 8010d98:	4607      	mov	r7, r0
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	f7fb fd7e 	bl	800c89c <ucdr_serialize_uint8_t>
 8010da0:	7961      	ldrb	r1, [r4, #5]
 8010da2:	4606      	mov	r6, r0
 8010da4:	4628      	mov	r0, r5
 8010da6:	f7fb fd79 	bl	800c89c <ucdr_serialize_uint8_t>
 8010daa:	ea08 0807 	and.w	r8, r8, r7
 8010dae:	ea06 0608 	and.w	r6, r6, r8
 8010db2:	4006      	ands	r6, r0
 8010db4:	7a21      	ldrb	r1, [r4, #8]
 8010db6:	4628      	mov	r0, r5
 8010db8:	f7fb fd42 	bl	800c840 <ucdr_serialize_bool>
 8010dbc:	7a23      	ldrb	r3, [r4, #8]
 8010dbe:	b2f7      	uxtb	r7, r6
 8010dc0:	4606      	mov	r6, r0
 8010dc2:	b96b      	cbnz	r3, 8010de0 <uxr_serialize_INFO_Payload+0x64>
 8010dc4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f7fb fd39 	bl	800c840 <ucdr_serialize_bool>
 8010dce:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010dd2:	4030      	ands	r0, r6
 8010dd4:	b2c6      	uxtb	r6, r0
 8010dd6:	b983      	cbnz	r3, 8010dfa <uxr_serialize_INFO_Payload+0x7e>
 8010dd8:	ea06 0007 	and.w	r0, r6, r7
 8010ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010de0:	7b21      	ldrb	r1, [r4, #12]
 8010de2:	4628      	mov	r0, r5
 8010de4:	f7fb fd5a 	bl	800c89c <ucdr_serialize_uint8_t>
 8010de8:	b188      	cbz	r0, 8010e0e <uxr_serialize_INFO_Payload+0x92>
 8010dea:	f104 010c 	add.w	r1, r4, #12
 8010dee:	4628      	mov	r0, r5
 8010df0:	f7ff faf2 	bl	80103d8 <uxr_serialize_ObjectVariant.part.0>
 8010df4:	4030      	ands	r0, r6
 8010df6:	b2c6      	uxtb	r6, r0
 8010df8:	e7e4      	b.n	8010dc4 <uxr_serialize_INFO_Payload+0x48>
 8010dfa:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010dfe:	4628      	mov	r0, r5
 8010e00:	f7ff fdb2 	bl	8010968 <uxr_serialize_ActivityInfoVariant>
 8010e04:	4006      	ands	r6, r0
 8010e06:	ea06 0007 	and.w	r0, r6, r7
 8010e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e0e:	4606      	mov	r6, r0
 8010e10:	e7d8      	b.n	8010dc4 <uxr_serialize_INFO_Payload+0x48>
 8010e12:	bf00      	nop

08010e14 <uxr_serialize_READ_DATA_Payload>:
 8010e14:	b570      	push	{r4, r5, r6, lr}
 8010e16:	2202      	movs	r2, #2
 8010e18:	4605      	mov	r5, r0
 8010e1a:	460e      	mov	r6, r1
 8010e1c:	f004 f982 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010e20:	2202      	movs	r2, #2
 8010e22:	18b1      	adds	r1, r6, r2
 8010e24:	4604      	mov	r4, r0
 8010e26:	4628      	mov	r0, r5
 8010e28:	f004 f97c 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010e2c:	1d31      	adds	r1, r6, #4
 8010e2e:	4004      	ands	r4, r0
 8010e30:	4628      	mov	r0, r5
 8010e32:	f7ff fe5d 	bl	8010af0 <uxr_serialize_ReadSpecification>
 8010e36:	b2e4      	uxtb	r4, r4
 8010e38:	4020      	ands	r0, r4
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}

08010e3c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010e3c:	b570      	push	{r4, r5, r6, lr}
 8010e3e:	2202      	movs	r2, #2
 8010e40:	4605      	mov	r5, r0
 8010e42:	460e      	mov	r6, r1
 8010e44:	f004 f96e 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010e48:	2202      	movs	r2, #2
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	18b1      	adds	r1, r6, r2
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f004 f968 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010e54:	4020      	ands	r0, r4
 8010e56:	b2c0      	uxtb	r0, r0
 8010e58:	bd70      	pop	{r4, r5, r6, pc}
 8010e5a:	bf00      	nop

08010e5c <uxr_serialize_ACKNACK_Payload>:
 8010e5c:	b570      	push	{r4, r5, r6, lr}
 8010e5e:	460c      	mov	r4, r1
 8010e60:	460e      	mov	r6, r1
 8010e62:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010e66:	4605      	mov	r5, r0
 8010e68:	f7fb fd44 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010e6c:	2202      	movs	r2, #2
 8010e6e:	4621      	mov	r1, r4
 8010e70:	4604      	mov	r4, r0
 8010e72:	4628      	mov	r0, r5
 8010e74:	f004 f956 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010e78:	7931      	ldrb	r1, [r6, #4]
 8010e7a:	4004      	ands	r4, r0
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	f7fb fd0d 	bl	800c89c <ucdr_serialize_uint8_t>
 8010e82:	b2e4      	uxtb	r4, r4
 8010e84:	4020      	ands	r0, r4
 8010e86:	bd70      	pop	{r4, r5, r6, pc}

08010e88 <uxr_deserialize_ACKNACK_Payload>:
 8010e88:	b570      	push	{r4, r5, r6, lr}
 8010e8a:	4605      	mov	r5, r0
 8010e8c:	460e      	mov	r6, r1
 8010e8e:	f7fb fe31 	bl	800caf4 <ucdr_deserialize_uint16_t>
 8010e92:	2202      	movs	r2, #2
 8010e94:	18b1      	adds	r1, r6, r2
 8010e96:	4604      	mov	r4, r0
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f004 f9a7 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010e9e:	1d31      	adds	r1, r6, #4
 8010ea0:	4004      	ands	r4, r0
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f7fb fd10 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010ea8:	b2e4      	uxtb	r4, r4
 8010eaa:	4020      	ands	r0, r4
 8010eac:	bd70      	pop	{r4, r5, r6, pc}
 8010eae:	bf00      	nop

08010eb0 <uxr_serialize_HEARTBEAT_Payload>:
 8010eb0:	b570      	push	{r4, r5, r6, lr}
 8010eb2:	460d      	mov	r5, r1
 8010eb4:	8809      	ldrh	r1, [r1, #0]
 8010eb6:	4606      	mov	r6, r0
 8010eb8:	f7fb fd1c 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010ebc:	8869      	ldrh	r1, [r5, #2]
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7fb fd17 	bl	800c8f4 <ucdr_serialize_uint16_t>
 8010ec6:	7929      	ldrb	r1, [r5, #4]
 8010ec8:	4004      	ands	r4, r0
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7fb fce6 	bl	800c89c <ucdr_serialize_uint8_t>
 8010ed0:	b2e4      	uxtb	r4, r4
 8010ed2:	4020      	ands	r0, r4
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
 8010ed6:	bf00      	nop

08010ed8 <uxr_deserialize_HEARTBEAT_Payload>:
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	4605      	mov	r5, r0
 8010edc:	460e      	mov	r6, r1
 8010ede:	f7fb fe09 	bl	800caf4 <ucdr_deserialize_uint16_t>
 8010ee2:	1cb1      	adds	r1, r6, #2
 8010ee4:	4604      	mov	r4, r0
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7fb fe04 	bl	800caf4 <ucdr_deserialize_uint16_t>
 8010eec:	1d31      	adds	r1, r6, #4
 8010eee:	4004      	ands	r4, r0
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f7fb fce9 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010ef6:	b2e4      	uxtb	r4, r4
 8010ef8:	4020      	ands	r0, r4
 8010efa:	bd70      	pop	{r4, r5, r6, pc}

08010efc <uxr_serialize_TIMESTAMP_Payload>:
 8010efc:	b570      	push	{r4, r5, r6, lr}
 8010efe:	460d      	mov	r5, r1
 8010f00:	6809      	ldr	r1, [r1, #0]
 8010f02:	4606      	mov	r6, r0
 8010f04:	f7fc fafa 	bl	800d4fc <ucdr_serialize_int32_t>
 8010f08:	6869      	ldr	r1, [r5, #4]
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f7fb fedb 	bl	800ccc8 <ucdr_serialize_uint32_t>
 8010f12:	4020      	ands	r0, r4
 8010f14:	b2c0      	uxtb	r0, r0
 8010f16:	bd70      	pop	{r4, r5, r6, pc}

08010f18 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1c:	4605      	mov	r5, r0
 8010f1e:	460e      	mov	r6, r1
 8010f20:	f7fc fb84 	bl	800d62c <ucdr_deserialize_int32_t>
 8010f24:	1d31      	adds	r1, r6, #4
 8010f26:	4607      	mov	r7, r0
 8010f28:	4628      	mov	r0, r5
 8010f2a:	f7fb fffd 	bl	800cf28 <ucdr_deserialize_uint32_t>
 8010f2e:	f106 0108 	add.w	r1, r6, #8
 8010f32:	4680      	mov	r8, r0
 8010f34:	4628      	mov	r0, r5
 8010f36:	f7fc fb79 	bl	800d62c <ucdr_deserialize_int32_t>
 8010f3a:	f106 010c 	add.w	r1, r6, #12
 8010f3e:	4604      	mov	r4, r0
 8010f40:	4628      	mov	r0, r5
 8010f42:	f7fb fff1 	bl	800cf28 <ucdr_deserialize_uint32_t>
 8010f46:	ea07 0708 	and.w	r7, r7, r8
 8010f4a:	403c      	ands	r4, r7
 8010f4c:	f106 0110 	add.w	r1, r6, #16
 8010f50:	4004      	ands	r4, r0
 8010f52:	4628      	mov	r0, r5
 8010f54:	f7fc fb6a 	bl	800d62c <ucdr_deserialize_int32_t>
 8010f58:	f106 0114 	add.w	r1, r6, #20
 8010f5c:	4607      	mov	r7, r0
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f7fb ffe2 	bl	800cf28 <ucdr_deserialize_uint32_t>
 8010f64:	b2e4      	uxtb	r4, r4
 8010f66:	403c      	ands	r4, r7
 8010f68:	4020      	ands	r0, r4
 8010f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f6e:	bf00      	nop

08010f70 <uxr_serialize_SampleIdentity>:
 8010f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f74:	220c      	movs	r2, #12
 8010f76:	4604      	mov	r4, r0
 8010f78:	460d      	mov	r5, r1
 8010f7a:	f004 f8d3 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010f7e:	2203      	movs	r2, #3
 8010f80:	f105 010c 	add.w	r1, r5, #12
 8010f84:	4607      	mov	r7, r0
 8010f86:	4620      	mov	r0, r4
 8010f88:	f004 f8cc 	bl	8015124 <ucdr_serialize_array_uint8_t>
 8010f8c:	7be9      	ldrb	r1, [r5, #15]
 8010f8e:	4680      	mov	r8, r0
 8010f90:	4620      	mov	r0, r4
 8010f92:	f7fb fc83 	bl	800c89c <ucdr_serialize_uint8_t>
 8010f96:	6929      	ldr	r1, [r5, #16]
 8010f98:	4606      	mov	r6, r0
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7fc faae 	bl	800d4fc <ucdr_serialize_int32_t>
 8010fa0:	6969      	ldr	r1, [r5, #20]
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	ea07 0708 	and.w	r7, r7, r8
 8010faa:	461c      	mov	r4, r3
 8010fac:	f7fb fe8c 	bl	800ccc8 <ucdr_serialize_uint32_t>
 8010fb0:	403e      	ands	r6, r7
 8010fb2:	4034      	ands	r4, r6
 8010fb4:	4020      	ands	r0, r4
 8010fb6:	b2c0      	uxtb	r0, r0
 8010fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010fbc <uxr_deserialize_SampleIdentity>:
 8010fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc0:	220c      	movs	r2, #12
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	460d      	mov	r5, r1
 8010fc6:	f004 f911 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010fca:	2203      	movs	r2, #3
 8010fcc:	f105 010c 	add.w	r1, r5, #12
 8010fd0:	4607      	mov	r7, r0
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f004 f90a 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8010fd8:	f105 010f 	add.w	r1, r5, #15
 8010fdc:	4680      	mov	r8, r0
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f7fb fc72 	bl	800c8c8 <ucdr_deserialize_uint8_t>
 8010fe4:	f105 0110 	add.w	r1, r5, #16
 8010fe8:	4606      	mov	r6, r0
 8010fea:	4620      	mov	r0, r4
 8010fec:	f7fc fb1e 	bl	800d62c <ucdr_deserialize_int32_t>
 8010ff0:	f105 0114 	add.w	r1, r5, #20
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	ea07 0708 	and.w	r7, r7, r8
 8010ffc:	461c      	mov	r4, r3
 8010ffe:	f7fb ff93 	bl	800cf28 <ucdr_deserialize_uint32_t>
 8011002:	403e      	ands	r6, r7
 8011004:	4034      	ands	r4, r6
 8011006:	4020      	ands	r0, r4
 8011008:	b2c0      	uxtb	r0, r0
 801100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801100e:	bf00      	nop

08011010 <rcl_client_get_rmw_handle>:
 8011010:	b118      	cbz	r0, 801101a <rcl_client_get_rmw_handle+0xa>
 8011012:	6800      	ldr	r0, [r0, #0]
 8011014:	b108      	cbz	r0, 801101a <rcl_client_get_rmw_handle+0xa>
 8011016:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801101a:	4770      	bx	lr

0801101c <rcl_send_request>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	b1e8      	cbz	r0, 801105e <rcl_send_request+0x42>
 8011022:	4604      	mov	r4, r0
 8011024:	6800      	ldr	r0, [r0, #0]
 8011026:	b1d0      	cbz	r0, 801105e <rcl_send_request+0x42>
 8011028:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801102c:	b1bb      	cbz	r3, 801105e <rcl_send_request+0x42>
 801102e:	460e      	mov	r6, r1
 8011030:	b1d1      	cbz	r1, 8011068 <rcl_send_request+0x4c>
 8011032:	4615      	mov	r5, r2
 8011034:	b1c2      	cbz	r2, 8011068 <rcl_send_request+0x4c>
 8011036:	2105      	movs	r1, #5
 8011038:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801103c:	f002 fda4 	bl	8013b88 <__atomic_load_8>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	e9c5 0100 	strd	r0, r1, [r5]
 8011046:	462a      	mov	r2, r5
 8011048:	4631      	mov	r1, r6
 801104a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801104e:	f003 fc8f 	bl	8014970 <rmw_send_request>
 8011052:	4606      	mov	r6, r0
 8011054:	b160      	cbz	r0, 8011070 <rcl_send_request+0x54>
 8011056:	2601      	movs	r6, #1
 8011058:	4630      	mov	r0, r6
 801105a:	b002      	add	sp, #8
 801105c:	bd70      	pop	{r4, r5, r6, pc}
 801105e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011062:	4630      	mov	r0, r6
 8011064:	b002      	add	sp, #8
 8011066:	bd70      	pop	{r4, r5, r6, pc}
 8011068:	260b      	movs	r6, #11
 801106a:	4630      	mov	r0, r6
 801106c:	b002      	add	sp, #8
 801106e:	bd70      	pop	{r4, r5, r6, pc}
 8011070:	6820      	ldr	r0, [r4, #0]
 8011072:	2105      	movs	r1, #5
 8011074:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011078:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801107c:	9100      	str	r1, [sp, #0]
 801107e:	f002 fdef 	bl	8013c60 <__atomic_exchange_8>
 8011082:	4630      	mov	r0, r6
 8011084:	b002      	add	sp, #8
 8011086:	bd70      	pop	{r4, r5, r6, pc}

08011088 <rcl_take_response>:
 8011088:	b570      	push	{r4, r5, r6, lr}
 801108a:	468e      	mov	lr, r1
 801108c:	460c      	mov	r4, r1
 801108e:	4616      	mov	r6, r2
 8011090:	4605      	mov	r5, r0
 8011092:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011096:	b08c      	sub	sp, #48	@ 0x30
 8011098:	f10d 0c18 	add.w	ip, sp, #24
 801109c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80110a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110a8:	b35d      	cbz	r5, 8011102 <rcl_take_response+0x7a>
 80110aa:	682b      	ldr	r3, [r5, #0]
 80110ac:	b34b      	cbz	r3, 8011102 <rcl_take_response+0x7a>
 80110ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80110b2:	b330      	cbz	r0, 8011102 <rcl_take_response+0x7a>
 80110b4:	b346      	cbz	r6, 8011108 <rcl_take_response+0x80>
 80110b6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011110 <rcl_take_response+0x88>
 80110ba:	2300      	movs	r3, #0
 80110bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80110c0:	4632      	mov	r2, r6
 80110c2:	f10d 0307 	add.w	r3, sp, #7
 80110c6:	a902      	add	r1, sp, #8
 80110c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80110d0:	f003 fd56 	bl	8014b80 <rmw_take_response>
 80110d4:	4605      	mov	r5, r0
 80110d6:	b9c8      	cbnz	r0, 801110c <rcl_take_response+0x84>
 80110d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80110dc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80110e0:	2a00      	cmp	r2, #0
 80110e2:	bf08      	it	eq
 80110e4:	461d      	moveq	r5, r3
 80110e6:	f10d 0e18 	add.w	lr, sp, #24
 80110ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110ee:	46a4      	mov	ip, r4
 80110f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80110f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110fc:	4628      	mov	r0, r5
 80110fe:	b00c      	add	sp, #48	@ 0x30
 8011100:	bd70      	pop	{r4, r5, r6, pc}
 8011102:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011106:	e7ee      	b.n	80110e6 <rcl_take_response+0x5e>
 8011108:	250b      	movs	r5, #11
 801110a:	e7ec      	b.n	80110e6 <rcl_take_response+0x5e>
 801110c:	2501      	movs	r5, #1
 801110e:	e7ea      	b.n	80110e6 <rcl_take_response+0x5e>
	...

08011118 <rcl_client_is_valid>:
 8011118:	b130      	cbz	r0, 8011128 <rcl_client_is_valid+0x10>
 801111a:	6800      	ldr	r0, [r0, #0]
 801111c:	b120      	cbz	r0, 8011128 <rcl_client_is_valid+0x10>
 801111e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011122:	3800      	subs	r0, #0
 8011124:	bf18      	it	ne
 8011126:	2001      	movne	r0, #1
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop

0801112c <rcl_convert_rmw_ret_to_rcl_ret>:
 801112c:	280b      	cmp	r0, #11
 801112e:	dc0d      	bgt.n	801114c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011130:	2800      	cmp	r0, #0
 8011132:	db09      	blt.n	8011148 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011134:	280b      	cmp	r0, #11
 8011136:	d807      	bhi.n	8011148 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011138:	e8df f000 	tbb	[pc, r0]
 801113c:	07060607 	.word	0x07060607
 8011140:	06060606 	.word	0x06060606
 8011144:	07070606 	.word	0x07070606
 8011148:	2001      	movs	r0, #1
 801114a:	4770      	bx	lr
 801114c:	28cb      	cmp	r0, #203	@ 0xcb
 801114e:	bf18      	it	ne
 8011150:	2001      	movne	r0, #1
 8011152:	4770      	bx	lr

08011154 <rcl_get_zero_initialized_context>:
 8011154:	4a03      	ldr	r2, [pc, #12]	@ (8011164 <rcl_get_zero_initialized_context+0x10>)
 8011156:	4603      	mov	r3, r0
 8011158:	e892 0003 	ldmia.w	r2, {r0, r1}
 801115c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011160:	4618      	mov	r0, r3
 8011162:	4770      	bx	lr
 8011164:	080183ec 	.word	0x080183ec

08011168 <rcl_context_is_valid>:
 8011168:	b118      	cbz	r0, 8011172 <rcl_context_is_valid+0xa>
 801116a:	6840      	ldr	r0, [r0, #4]
 801116c:	3800      	subs	r0, #0
 801116e:	bf18      	it	ne
 8011170:	2001      	movne	r0, #1
 8011172:	4770      	bx	lr

08011174 <__cleanup_context>:
 8011174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011178:	4606      	mov	r6, r0
 801117a:	6800      	ldr	r0, [r0, #0]
 801117c:	2300      	movs	r3, #0
 801117e:	6073      	str	r3, [r6, #4]
 8011180:	2800      	cmp	r0, #0
 8011182:	d049      	beq.n	8011218 <__cleanup_context+0xa4>
 8011184:	6947      	ldr	r7, [r0, #20]
 8011186:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801118a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801118e:	b137      	cbz	r7, 801119e <__cleanup_context+0x2a>
 8011190:	3014      	adds	r0, #20
 8011192:	f7f8 ffa1 	bl	800a0d8 <rcl_init_options_fini>
 8011196:	4607      	mov	r7, r0
 8011198:	2800      	cmp	r0, #0
 801119a:	d144      	bne.n	8011226 <__cleanup_context+0xb2>
 801119c:	6830      	ldr	r0, [r6, #0]
 801119e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80111a0:	b143      	cbz	r3, 80111b4 <__cleanup_context+0x40>
 80111a2:	3028      	adds	r0, #40	@ 0x28
 80111a4:	f7fa fb64 	bl	800b870 <rmw_context_fini>
 80111a8:	b118      	cbz	r0, 80111b2 <__cleanup_context+0x3e>
 80111aa:	2f00      	cmp	r7, #0
 80111ac:	d03e      	beq.n	801122c <__cleanup_context+0xb8>
 80111ae:	f7fa f897 	bl	800b2e0 <rcutils_reset_error>
 80111b2:	6830      	ldr	r0, [r6, #0]
 80111b4:	6a03      	ldr	r3, [r0, #32]
 80111b6:	b1db      	cbz	r3, 80111f0 <__cleanup_context+0x7c>
 80111b8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80111bc:	2a01      	cmp	r2, #1
 80111be:	f17c 0100 	sbcs.w	r1, ip, #0
 80111c2:	db11      	blt.n	80111e8 <__cleanup_context+0x74>
 80111c4:	2400      	movs	r4, #0
 80111c6:	4625      	mov	r5, r4
 80111c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80111cc:	4649      	mov	r1, r9
 80111ce:	b1b8      	cbz	r0, 8011200 <__cleanup_context+0x8c>
 80111d0:	47c0      	blx	r8
 80111d2:	6833      	ldr	r3, [r6, #0]
 80111d4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80111d8:	3401      	adds	r4, #1
 80111da:	f145 0500 	adc.w	r5, r5, #0
 80111de:	4294      	cmp	r4, r2
 80111e0:	eb75 010c 	sbcs.w	r1, r5, ip
 80111e4:	6a1b      	ldr	r3, [r3, #32]
 80111e6:	dbef      	blt.n	80111c8 <__cleanup_context+0x54>
 80111e8:	4618      	mov	r0, r3
 80111ea:	4649      	mov	r1, r9
 80111ec:	47c0      	blx	r8
 80111ee:	6830      	ldr	r0, [r6, #0]
 80111f0:	4649      	mov	r1, r9
 80111f2:	47c0      	blx	r8
 80111f4:	2300      	movs	r3, #0
 80111f6:	e9c6 3300 	strd	r3, r3, [r6]
 80111fa:	4638      	mov	r0, r7
 80111fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011200:	3401      	adds	r4, #1
 8011202:	f145 0500 	adc.w	r5, r5, #0
 8011206:	4294      	cmp	r4, r2
 8011208:	eb75 010c 	sbcs.w	r1, r5, ip
 801120c:	dbdc      	blt.n	80111c8 <__cleanup_context+0x54>
 801120e:	4618      	mov	r0, r3
 8011210:	4649      	mov	r1, r9
 8011212:	47c0      	blx	r8
 8011214:	6830      	ldr	r0, [r6, #0]
 8011216:	e7eb      	b.n	80111f0 <__cleanup_context+0x7c>
 8011218:	4607      	mov	r7, r0
 801121a:	2300      	movs	r3, #0
 801121c:	e9c6 3300 	strd	r3, r3, [r6]
 8011220:	4638      	mov	r0, r7
 8011222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011226:	f7fa f85b 	bl	800b2e0 <rcutils_reset_error>
 801122a:	e7b7      	b.n	801119c <__cleanup_context+0x28>
 801122c:	f7ff ff7e 	bl	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 8011230:	4607      	mov	r7, r0
 8011232:	e7bc      	b.n	80111ae <__cleanup_context+0x3a>

08011234 <rcl_init>:
 8011234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011238:	1e05      	subs	r5, r0, #0
 801123a:	b09e      	sub	sp, #120	@ 0x78
 801123c:	460e      	mov	r6, r1
 801123e:	4690      	mov	r8, r2
 8011240:	461f      	mov	r7, r3
 8011242:	f340 809c 	ble.w	801137e <rcl_init+0x14a>
 8011246:	2900      	cmp	r1, #0
 8011248:	f000 809c 	beq.w	8011384 <rcl_init+0x150>
 801124c:	f1a1 0e04 	sub.w	lr, r1, #4
 8011250:	f04f 0c00 	mov.w	ip, #0
 8011254:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011258:	f10c 0c01 	add.w	ip, ip, #1
 801125c:	2c00      	cmp	r4, #0
 801125e:	f000 8091 	beq.w	8011384 <rcl_init+0x150>
 8011262:	4565      	cmp	r5, ip
 8011264:	d1f6      	bne.n	8011254 <rcl_init+0x20>
 8011266:	f1b8 0f00 	cmp.w	r8, #0
 801126a:	f000 808b 	beq.w	8011384 <rcl_init+0x150>
 801126e:	f8d8 4000 	ldr.w	r4, [r8]
 8011272:	2c00      	cmp	r4, #0
 8011274:	f000 8086 	beq.w	8011384 <rcl_init+0x150>
 8011278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801127a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801127e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011282:	6823      	ldr	r3, [r4, #0]
 8011284:	f8cc 3000 	str.w	r3, [ip]
 8011288:	a819      	add	r0, sp, #100	@ 0x64
 801128a:	f7fa f803 	bl	800b294 <rcutils_allocator_is_valid>
 801128e:	2800      	cmp	r0, #0
 8011290:	d078      	beq.n	8011384 <rcl_init+0x150>
 8011292:	2f00      	cmp	r7, #0
 8011294:	d076      	beq.n	8011384 <rcl_init+0x150>
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d178      	bne.n	801138e <rcl_init+0x15a>
 801129c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80112a0:	2178      	movs	r1, #120	@ 0x78
 80112a2:	2001      	movs	r0, #1
 80112a4:	4798      	blx	r3
 80112a6:	4604      	mov	r4, r0
 80112a8:	6038      	str	r0, [r7, #0]
 80112aa:	2800      	cmp	r0, #0
 80112ac:	f000 80b6 	beq.w	801141c <rcl_init+0x1e8>
 80112b0:	a802      	add	r0, sp, #8
 80112b2:	f002 ffb9 	bl	8014228 <rmw_get_zero_initialized_context>
 80112b6:	a902      	add	r1, sp, #8
 80112b8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80112bc:	2250      	movs	r2, #80	@ 0x50
 80112be:	ac19      	add	r4, sp, #100	@ 0x64
 80112c0:	f005 fe33 	bl	8016f2a <memcpy>
 80112c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112c6:	f8d7 e000 	ldr.w	lr, [r7]
 80112ca:	46f4      	mov	ip, lr
 80112cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112d0:	6823      	ldr	r3, [r4, #0]
 80112d2:	f8cc 3000 	str.w	r3, [ip]
 80112d6:	f10e 0114 	add.w	r1, lr, #20
 80112da:	4640      	mov	r0, r8
 80112dc:	f7f8 ff26 	bl	800a12c <rcl_init_options_copy>
 80112e0:	4604      	mov	r4, r0
 80112e2:	2800      	cmp	r0, #0
 80112e4:	d144      	bne.n	8011370 <rcl_init+0x13c>
 80112e6:	f8d7 9000 	ldr.w	r9, [r7]
 80112ea:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80112ee:	f8c9 0020 	str.w	r0, [r9, #32]
 80112f2:	f8c9 5018 	str.w	r5, [r9, #24]
 80112f6:	f8c9 801c 	str.w	r8, [r9, #28]
 80112fa:	2d00      	cmp	r5, #0
 80112fc:	d04e      	beq.n	801139c <rcl_init+0x168>
 80112fe:	2e00      	cmp	r6, #0
 8011300:	d04c      	beq.n	801139c <rcl_init+0x168>
 8011302:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011306:	2104      	movs	r1, #4
 8011308:	4628      	mov	r0, r5
 801130a:	4798      	blx	r3
 801130c:	f8c9 0020 	str.w	r0, [r9, #32]
 8011310:	f8d7 9000 	ldr.w	r9, [r7]
 8011314:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011318:	46ca      	mov	sl, r9
 801131a:	b343      	cbz	r3, 801136e <rcl_init+0x13a>
 801131c:	2d01      	cmp	r5, #1
 801131e:	f178 0300 	sbcs.w	r3, r8, #0
 8011322:	db3b      	blt.n	801139c <rcl_init+0x168>
 8011324:	2400      	movs	r4, #0
 8011326:	3e04      	subs	r6, #4
 8011328:	46a1      	mov	r9, r4
 801132a:	e00b      	b.n	8011344 <rcl_init+0x110>
 801132c:	6831      	ldr	r1, [r6, #0]
 801132e:	f005 fdfc 	bl	8016f2a <memcpy>
 8011332:	3401      	adds	r4, #1
 8011334:	f149 0900 	adc.w	r9, r9, #0
 8011338:	45c8      	cmp	r8, r9
 801133a:	bf08      	it	eq
 801133c:	42a5      	cmpeq	r5, r4
 801133e:	d02b      	beq.n	8011398 <rcl_init+0x164>
 8011340:	f8d7 a000 	ldr.w	sl, [r7]
 8011344:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011348:	f7ee ff74 	bl	8000234 <strlen>
 801134c:	1c42      	adds	r2, r0, #1
 801134e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011350:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011352:	f8da a020 	ldr.w	sl, [sl, #32]
 8011356:	9201      	str	r2, [sp, #4]
 8011358:	4610      	mov	r0, r2
 801135a:	4798      	blx	r3
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011362:	6a1b      	ldr	r3, [r3, #32]
 8011364:	9a01      	ldr	r2, [sp, #4]
 8011366:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801136a:	2800      	cmp	r0, #0
 801136c:	d1de      	bne.n	801132c <rcl_init+0xf8>
 801136e:	240a      	movs	r4, #10
 8011370:	4638      	mov	r0, r7
 8011372:	f7ff feff 	bl	8011174 <__cleanup_context>
 8011376:	4620      	mov	r0, r4
 8011378:	b01e      	add	sp, #120	@ 0x78
 801137a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137e:	2900      	cmp	r1, #0
 8011380:	f43f af71 	beq.w	8011266 <rcl_init+0x32>
 8011384:	240b      	movs	r4, #11
 8011386:	4620      	mov	r0, r4
 8011388:	b01e      	add	sp, #120	@ 0x78
 801138a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801138e:	2464      	movs	r4, #100	@ 0x64
 8011390:	4620      	mov	r0, r4
 8011392:	b01e      	add	sp, #120	@ 0x78
 8011394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011398:	f8d7 9000 	ldr.w	r9, [r7]
 801139c:	4926      	ldr	r1, [pc, #152]	@ (8011438 <rcl_init+0x204>)
 801139e:	680b      	ldr	r3, [r1, #0]
 80113a0:	3301      	adds	r3, #1
 80113a2:	d036      	beq.n	8011412 <rcl_init+0x1de>
 80113a4:	600b      	str	r3, [r1, #0]
 80113a6:	461a      	mov	r2, r3
 80113a8:	2400      	movs	r4, #0
 80113aa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80113ae:	607b      	str	r3, [r7, #4]
 80113b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80113b2:	3301      	adds	r3, #1
 80113b4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80113b8:	d034      	beq.n	8011424 <rcl_init+0x1f0>
 80113ba:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80113be:	b93b      	cbnz	r3, 80113d0 <rcl_init+0x19c>
 80113c0:	3030      	adds	r0, #48	@ 0x30
 80113c2:	f000 f83b 	bl	801143c <rcl_get_localhost_only>
 80113c6:	4604      	mov	r4, r0
 80113c8:	2800      	cmp	r0, #0
 80113ca:	d1d1      	bne.n	8011370 <rcl_init+0x13c>
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	6958      	ldr	r0, [r3, #20]
 80113d0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80113d2:	aa18      	add	r2, sp, #96	@ 0x60
 80113d4:	a917      	add	r1, sp, #92	@ 0x5c
 80113d6:	f001 f871 	bl	80124bc <rcl_validate_enclave_name>
 80113da:	4604      	mov	r4, r0
 80113dc:	2800      	cmp	r0, #0
 80113de:	d1c7      	bne.n	8011370 <rcl_init+0x13c>
 80113e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80113e2:	b9eb      	cbnz	r3, 8011420 <rcl_init+0x1ec>
 80113e4:	6839      	ldr	r1, [r7, #0]
 80113e6:	694b      	ldr	r3, [r1, #20]
 80113e8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80113ea:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80113ee:	f000 fb3f 	bl	8011a70 <rcl_get_security_options_from_environment>
 80113f2:	4604      	mov	r4, r0
 80113f4:	2800      	cmp	r0, #0
 80113f6:	d1bb      	bne.n	8011370 <rcl_init+0x13c>
 80113f8:	6839      	ldr	r1, [r7, #0]
 80113fa:	6948      	ldr	r0, [r1, #20]
 80113fc:	3128      	adds	r1, #40	@ 0x28
 80113fe:	3018      	adds	r0, #24
 8011400:	f7fa f900 	bl	800b604 <rmw_init>
 8011404:	4604      	mov	r4, r0
 8011406:	2800      	cmp	r0, #0
 8011408:	d0bd      	beq.n	8011386 <rcl_init+0x152>
 801140a:	f7ff fe8f 	bl	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 801140e:	4604      	mov	r4, r0
 8011410:	e7ae      	b.n	8011370 <rcl_init+0x13c>
 8011412:	2201      	movs	r2, #1
 8011414:	461c      	mov	r4, r3
 8011416:	600a      	str	r2, [r1, #0]
 8011418:	4613      	mov	r3, r2
 801141a:	e7c6      	b.n	80113aa <rcl_init+0x176>
 801141c:	240a      	movs	r4, #10
 801141e:	e7b2      	b.n	8011386 <rcl_init+0x152>
 8011420:	2401      	movs	r4, #1
 8011422:	e7a5      	b.n	8011370 <rcl_init+0x13c>
 8011424:	3024      	adds	r0, #36	@ 0x24
 8011426:	f004 fd1d 	bl	8015e64 <rcl_get_default_domain_id>
 801142a:	4604      	mov	r4, r0
 801142c:	2800      	cmp	r0, #0
 801142e:	d19f      	bne.n	8011370 <rcl_init+0x13c>
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	6958      	ldr	r0, [r3, #20]
 8011434:	e7c1      	b.n	80113ba <rcl_init+0x186>
 8011436:	bf00      	nop
 8011438:	2000ca88 	.word	0x2000ca88

0801143c <rcl_get_localhost_only>:
 801143c:	b510      	push	{r4, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	2300      	movs	r3, #0
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	b1b8      	cbz	r0, 8011476 <rcl_get_localhost_only+0x3a>
 8011446:	4604      	mov	r4, r0
 8011448:	a901      	add	r1, sp, #4
 801144a:	480c      	ldr	r0, [pc, #48]	@ (801147c <rcl_get_localhost_only+0x40>)
 801144c:	f002 fc40 	bl	8013cd0 <rcutils_get_env>
 8011450:	b110      	cbz	r0, 8011458 <rcl_get_localhost_only+0x1c>
 8011452:	2001      	movs	r0, #1
 8011454:	b002      	add	sp, #8
 8011456:	bd10      	pop	{r4, pc}
 8011458:	9b01      	ldr	r3, [sp, #4]
 801145a:	b113      	cbz	r3, 8011462 <rcl_get_localhost_only+0x26>
 801145c:	781a      	ldrb	r2, [r3, #0]
 801145e:	2a31      	cmp	r2, #49	@ 0x31
 8011460:	d004      	beq.n	801146c <rcl_get_localhost_only+0x30>
 8011462:	2302      	movs	r3, #2
 8011464:	2000      	movs	r0, #0
 8011466:	7023      	strb	r3, [r4, #0]
 8011468:	b002      	add	sp, #8
 801146a:	bd10      	pop	{r4, pc}
 801146c:	785b      	ldrb	r3, [r3, #1]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d1f7      	bne.n	8011462 <rcl_get_localhost_only+0x26>
 8011472:	2301      	movs	r3, #1
 8011474:	e7f6      	b.n	8011464 <rcl_get_localhost_only+0x28>
 8011476:	200b      	movs	r0, #11
 8011478:	b002      	add	sp, #8
 801147a:	bd10      	pop	{r4, pc}
 801147c:	080183f4 	.word	0x080183f4

08011480 <rcl_get_zero_initialized_node>:
 8011480:	4a03      	ldr	r2, [pc, #12]	@ (8011490 <rcl_get_zero_initialized_node+0x10>)
 8011482:	4603      	mov	r3, r0
 8011484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011488:	e883 0003 	stmia.w	r3, {r0, r1}
 801148c:	4618      	mov	r0, r3
 801148e:	4770      	bx	lr
 8011490:	08018410 	.word	0x08018410

08011494 <rcl_node_init>:
 8011494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011498:	b0a9      	sub	sp, #164	@ 0xa4
 801149a:	4604      	mov	r4, r0
 801149c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80114a0:	a823      	add	r0, sp, #140	@ 0x8c
 80114a2:	460e      	mov	r6, r1
 80114a4:	4615      	mov	r5, r2
 80114a6:	461f      	mov	r7, r3
 80114a8:	f004 ff50 	bl	801634c <rcl_guard_condition_get_default_options>
 80114ac:	f1b8 0f00 	cmp.w	r8, #0
 80114b0:	f000 80e6 	beq.w	8011680 <rcl_node_init+0x1ec>
 80114b4:	4640      	mov	r0, r8
 80114b6:	f7f9 feed 	bl	800b294 <rcutils_allocator_is_valid>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	f000 80e0 	beq.w	8011680 <rcl_node_init+0x1ec>
 80114c0:	2e00      	cmp	r6, #0
 80114c2:	f000 80dd 	beq.w	8011680 <rcl_node_init+0x1ec>
 80114c6:	2d00      	cmp	r5, #0
 80114c8:	f000 80da 	beq.w	8011680 <rcl_node_init+0x1ec>
 80114cc:	2c00      	cmp	r4, #0
 80114ce:	f000 80d7 	beq.w	8011680 <rcl_node_init+0x1ec>
 80114d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80114d6:	f1b9 0f00 	cmp.w	r9, #0
 80114da:	f040 80fd 	bne.w	80116d8 <rcl_node_init+0x244>
 80114de:	2f00      	cmp	r7, #0
 80114e0:	f000 80ce 	beq.w	8011680 <rcl_node_init+0x1ec>
 80114e4:	4638      	mov	r0, r7
 80114e6:	f7ff fe3f 	bl	8011168 <rcl_context_is_valid>
 80114ea:	4682      	mov	sl, r0
 80114ec:	2800      	cmp	r0, #0
 80114ee:	f000 80cd 	beq.w	801168c <rcl_node_init+0x1f8>
 80114f2:	464a      	mov	r2, r9
 80114f4:	a922      	add	r1, sp, #136	@ 0x88
 80114f6:	4630      	mov	r0, r6
 80114f8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80114fc:	f003 f812 	bl	8014524 <rmw_validate_node_name>
 8011500:	4681      	mov	r9, r0
 8011502:	2800      	cmp	r0, #0
 8011504:	f040 80be 	bne.w	8011684 <rcl_node_init+0x1f0>
 8011508:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801150a:	2800      	cmp	r0, #0
 801150c:	f040 80f0 	bne.w	80116f0 <rcl_node_init+0x25c>
 8011510:	4628      	mov	r0, r5
 8011512:	f7ee fe8f 	bl	8000234 <strlen>
 8011516:	2800      	cmp	r0, #0
 8011518:	f040 80bb 	bne.w	8011692 <rcl_node_init+0x1fe>
 801151c:	4d7c      	ldr	r5, [pc, #496]	@ (8011710 <rcl_node_init+0x27c>)
 801151e:	a922      	add	r1, sp, #136	@ 0x88
 8011520:	2200      	movs	r2, #0
 8011522:	4628      	mov	r0, r5
 8011524:	f002 ffe0 	bl	80144e8 <rmw_validate_namespace>
 8011528:	4681      	mov	r9, r0
 801152a:	2800      	cmp	r0, #0
 801152c:	f040 80aa 	bne.w	8011684 <rcl_node_init+0x1f0>
 8011530:	4682      	mov	sl, r0
 8011532:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011534:	2800      	cmp	r0, #0
 8011536:	f040 80e0 	bne.w	80116fa <rcl_node_init+0x266>
 801153a:	f8d8 3000 	ldr.w	r3, [r8]
 801153e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011542:	2078      	movs	r0, #120	@ 0x78
 8011544:	4798      	blx	r3
 8011546:	4681      	mov	r9, r0
 8011548:	6060      	str	r0, [r4, #4]
 801154a:	2800      	cmp	r0, #0
 801154c:	f000 80ca 	beq.w	80116e4 <rcl_node_init+0x250>
 8011550:	2200      	movs	r2, #0
 8011552:	2300      	movs	r3, #0
 8011554:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011558:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 801155c:	a808      	add	r0, sp, #32
 801155e:	f000 f907 	bl	8011770 <rcl_node_get_default_options>
 8011562:	a908      	add	r1, sp, #32
 8011564:	4648      	mov	r0, r9
 8011566:	2268      	movs	r2, #104	@ 0x68
 8011568:	f005 fcdf 	bl	8016f2a <memcpy>
 801156c:	6861      	ldr	r1, [r4, #4]
 801156e:	6027      	str	r7, [r4, #0]
 8011570:	4640      	mov	r0, r8
 8011572:	f000 f90b 	bl	801178c <rcl_node_options_copy>
 8011576:	2800      	cmp	r0, #0
 8011578:	d158      	bne.n	801162c <rcl_node_init+0x198>
 801157a:	4628      	mov	r0, r5
 801157c:	f7ee fe5a 	bl	8000234 <strlen>
 8011580:	4428      	add	r0, r5
 8011582:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011586:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801158a:	2b2f      	cmp	r3, #47	@ 0x2f
 801158c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	bf0c      	ite	eq
 8011594:	4b5f      	ldreq	r3, [pc, #380]	@ (8011714 <rcl_node_init+0x280>)
 8011596:	4b60      	ldrne	r3, [pc, #384]	@ (8011718 <rcl_node_init+0x284>)
 8011598:	9302      	str	r3, [sp, #8]
 801159a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801159e:	9301      	str	r3, [sp, #4]
 80115a0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80115a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80115a8:	f002 fbba 	bl	8013d20 <rcutils_format_string_limit>
 80115ac:	6823      	ldr	r3, [r4, #0]
 80115ae:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80115b2:	6818      	ldr	r0, [r3, #0]
 80115b4:	4631      	mov	r1, r6
 80115b6:	3028      	adds	r0, #40	@ 0x28
 80115b8:	462a      	mov	r2, r5
 80115ba:	6866      	ldr	r6, [r4, #4]
 80115bc:	f7fa fa04 	bl	800b9c8 <rmw_create_node>
 80115c0:	6863      	ldr	r3, [r4, #4]
 80115c2:	66b0      	str	r0, [r6, #104]	@ 0x68
 80115c4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d032      	beq.n	8011630 <rcl_node_init+0x19c>
 80115ca:	f7fa fa91 	bl	800baf0 <rmw_node_get_graph_guard_condition>
 80115ce:	4681      	mov	r9, r0
 80115d0:	b360      	cbz	r0, 801162c <rcl_node_init+0x198>
 80115d2:	f8d8 3000 	ldr.w	r3, [r8]
 80115d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80115da:	6866      	ldr	r6, [r4, #4]
 80115dc:	2008      	movs	r0, #8
 80115de:	4798      	blx	r3
 80115e0:	6863      	ldr	r3, [r4, #4]
 80115e2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80115e4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80115e8:	f1bb 0f00 	cmp.w	fp, #0
 80115ec:	d020      	beq.n	8011630 <rcl_node_init+0x19c>
 80115ee:	a806      	add	r0, sp, #24
 80115f0:	f004 fdd0 	bl	8016194 <rcl_get_zero_initialized_guard_condition>
 80115f4:	a806      	add	r0, sp, #24
 80115f6:	c803      	ldmia	r0, {r0, r1}
 80115f8:	6863      	ldr	r3, [r4, #4]
 80115fa:	46c4      	mov	ip, r8
 80115fc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011600:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011604:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011608:	ae23      	add	r6, sp, #140	@ 0x8c
 801160a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801160c:	f8dc 3000 	ldr.w	r3, [ip]
 8011610:	6033      	str	r3, [r6, #0]
 8011612:	ab28      	add	r3, sp, #160	@ 0xa0
 8011614:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011618:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801161c:	4649      	mov	r1, r9
 801161e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011620:	463a      	mov	r2, r7
 8011622:	4670      	mov	r0, lr
 8011624:	f004 fe0c 	bl	8016240 <rcl_guard_condition_init_from_rmw>
 8011628:	4681      	mov	r9, r0
 801162a:	b328      	cbz	r0, 8011678 <rcl_node_init+0x1e4>
 801162c:	6863      	ldr	r3, [r4, #4]
 801162e:	b1f3      	cbz	r3, 801166e <rcl_node_init+0x1da>
 8011630:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011632:	b128      	cbz	r0, 8011640 <rcl_node_init+0x1ac>
 8011634:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011638:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801163c:	4798      	blx	r3
 801163e:	6863      	ldr	r3, [r4, #4]
 8011640:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011642:	b110      	cbz	r0, 801164a <rcl_node_init+0x1b6>
 8011644:	f7fa f9d8 	bl	800b9f8 <rmw_destroy_node>
 8011648:	6863      	ldr	r3, [r4, #4]
 801164a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801164c:	b148      	cbz	r0, 8011662 <rcl_node_init+0x1ce>
 801164e:	f004 fe57 	bl	8016300 <rcl_guard_condition_fini>
 8011652:	6863      	ldr	r3, [r4, #4]
 8011654:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011658:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801165a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801165e:	4798      	blx	r3
 8011660:	6863      	ldr	r3, [r4, #4]
 8011662:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011666:	4618      	mov	r0, r3
 8011668:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801166c:	4798      	blx	r3
 801166e:	2300      	movs	r3, #0
 8011670:	e9c4 3300 	strd	r3, r3, [r4]
 8011674:	f04f 0901 	mov.w	r9, #1
 8011678:	f1ba 0f00 	cmp.w	sl, #0
 801167c:	d125      	bne.n	80116ca <rcl_node_init+0x236>
 801167e:	e001      	b.n	8011684 <rcl_node_init+0x1f0>
 8011680:	f04f 090b 	mov.w	r9, #11
 8011684:	4648      	mov	r0, r9
 8011686:	b029      	add	sp, #164	@ 0xa4
 8011688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801168c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011690:	e7f8      	b.n	8011684 <rcl_node_init+0x1f0>
 8011692:	782b      	ldrb	r3, [r5, #0]
 8011694:	2b2f      	cmp	r3, #47	@ 0x2f
 8011696:	f43f af42 	beq.w	801151e <rcl_node_init+0x8a>
 801169a:	9503      	str	r5, [sp, #12]
 801169c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80116a0:	9300      	str	r3, [sp, #0]
 80116a2:	4b1e      	ldr	r3, [pc, #120]	@ (801171c <rcl_node_init+0x288>)
 80116a4:	9302      	str	r3, [sp, #8]
 80116a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80116aa:	9301      	str	r3, [sp, #4]
 80116ac:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80116b0:	f002 fb36 	bl	8013d20 <rcutils_format_string_limit>
 80116b4:	4605      	mov	r5, r0
 80116b6:	b340      	cbz	r0, 801170a <rcl_node_init+0x276>
 80116b8:	2200      	movs	r2, #0
 80116ba:	a922      	add	r1, sp, #136	@ 0x88
 80116bc:	9222      	str	r2, [sp, #136]	@ 0x88
 80116be:	f002 ff13 	bl	80144e8 <rmw_validate_namespace>
 80116c2:	4681      	mov	r9, r0
 80116c4:	2800      	cmp	r0, #0
 80116c6:	f43f af34 	beq.w	8011532 <rcl_node_init+0x9e>
 80116ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80116ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80116d2:	4628      	mov	r0, r5
 80116d4:	4798      	blx	r3
 80116d6:	e7d5      	b.n	8011684 <rcl_node_init+0x1f0>
 80116d8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80116dc:	4648      	mov	r0, r9
 80116de:	b029      	add	sp, #164	@ 0xa4
 80116e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e4:	f04f 090a 	mov.w	r9, #10
 80116e8:	f1ba 0f00 	cmp.w	sl, #0
 80116ec:	d1ed      	bne.n	80116ca <rcl_node_init+0x236>
 80116ee:	e7c9      	b.n	8011684 <rcl_node_init+0x1f0>
 80116f0:	f002 ff6a 	bl	80145c8 <rmw_node_name_validation_result_string>
 80116f4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80116f8:	e7c4      	b.n	8011684 <rcl_node_init+0x1f0>
 80116fa:	f002 ff07 	bl	801450c <rmw_namespace_validation_result_string>
 80116fe:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8011702:	f1ba 0f00 	cmp.w	sl, #0
 8011706:	d1e0      	bne.n	80116ca <rcl_node_init+0x236>
 8011708:	e7bc      	b.n	8011684 <rcl_node_init+0x1f0>
 801170a:	f04f 090a 	mov.w	r9, #10
 801170e:	e7b9      	b.n	8011684 <rcl_node_init+0x1f0>
 8011710:	08017f50 	.word	0x08017f50
 8011714:	08017f9c 	.word	0x08017f9c
 8011718:	08017f54 	.word	0x08017f54
 801171c:	0801840c 	.word	0x0801840c

08011720 <rcl_node_is_valid>:
 8011720:	b130      	cbz	r0, 8011730 <rcl_node_is_valid+0x10>
 8011722:	6843      	ldr	r3, [r0, #4]
 8011724:	b123      	cbz	r3, 8011730 <rcl_node_is_valid+0x10>
 8011726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011728:	b113      	cbz	r3, 8011730 <rcl_node_is_valid+0x10>
 801172a:	6800      	ldr	r0, [r0, #0]
 801172c:	f7ff bd1c 	b.w	8011168 <rcl_context_is_valid>
 8011730:	2000      	movs	r0, #0
 8011732:	4770      	bx	lr

08011734 <rcl_node_get_name>:
 8011734:	b120      	cbz	r0, 8011740 <rcl_node_get_name+0xc>
 8011736:	6840      	ldr	r0, [r0, #4]
 8011738:	b110      	cbz	r0, 8011740 <rcl_node_get_name+0xc>
 801173a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801173c:	b100      	cbz	r0, 8011740 <rcl_node_get_name+0xc>
 801173e:	6880      	ldr	r0, [r0, #8]
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop

08011744 <rcl_node_get_namespace>:
 8011744:	b120      	cbz	r0, 8011750 <rcl_node_get_namespace+0xc>
 8011746:	6840      	ldr	r0, [r0, #4]
 8011748:	b110      	cbz	r0, 8011750 <rcl_node_get_namespace+0xc>
 801174a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801174c:	b100      	cbz	r0, 8011750 <rcl_node_get_namespace+0xc>
 801174e:	68c0      	ldr	r0, [r0, #12]
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop

08011754 <rcl_node_get_options>:
 8011754:	b128      	cbz	r0, 8011762 <rcl_node_get_options+0xe>
 8011756:	6840      	ldr	r0, [r0, #4]
 8011758:	b118      	cbz	r0, 8011762 <rcl_node_get_options+0xe>
 801175a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801175c:	2b00      	cmp	r3, #0
 801175e:	bf08      	it	eq
 8011760:	2000      	moveq	r0, #0
 8011762:	4770      	bx	lr

08011764 <rcl_node_get_rmw_handle>:
 8011764:	b110      	cbz	r0, 801176c <rcl_node_get_rmw_handle+0x8>
 8011766:	6840      	ldr	r0, [r0, #4]
 8011768:	b100      	cbz	r0, 801176c <rcl_node_get_rmw_handle+0x8>
 801176a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop

08011770 <rcl_node_get_default_options>:
 8011770:	b510      	push	{r4, lr}
 8011772:	2268      	movs	r2, #104	@ 0x68
 8011774:	4604      	mov	r4, r0
 8011776:	2100      	movs	r1, #0
 8011778:	f005 fb0e 	bl	8016d98 <memset>
 801177c:	4620      	mov	r0, r4
 801177e:	f7f9 fd7b 	bl	800b278 <rcutils_get_default_allocator>
 8011782:	2301      	movs	r3, #1
 8011784:	7523      	strb	r3, [r4, #20]
 8011786:	4620      	mov	r0, r4
 8011788:	bd10      	pop	{r4, pc}
 801178a:	bf00      	nop

0801178c <rcl_node_options_copy>:
 801178c:	b1d0      	cbz	r0, 80117c4 <rcl_node_options_copy+0x38>
 801178e:	b570      	push	{r4, r5, r6, lr}
 8011790:	460c      	mov	r4, r1
 8011792:	b1a9      	cbz	r1, 80117c0 <rcl_node_options_copy+0x34>
 8011794:	4288      	cmp	r0, r1
 8011796:	4684      	mov	ip, r0
 8011798:	d012      	beq.n	80117c0 <rcl_node_options_copy+0x34>
 801179a:	4605      	mov	r5, r0
 801179c:	8a86      	ldrh	r6, [r0, #20]
 801179e:	468e      	mov	lr, r1
 80117a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80117a6:	682b      	ldr	r3, [r5, #0]
 80117a8:	f8ce 3000 	str.w	r3, [lr]
 80117ac:	f10c 0118 	add.w	r1, ip, #24
 80117b0:	2250      	movs	r2, #80	@ 0x50
 80117b2:	82a6      	strh	r6, [r4, #20]
 80117b4:	f104 0018 	add.w	r0, r4, #24
 80117b8:	f005 fbb7 	bl	8016f2a <memcpy>
 80117bc:	2000      	movs	r0, #0
 80117be:	bd70      	pop	{r4, r5, r6, pc}
 80117c0:	200b      	movs	r0, #11
 80117c2:	bd70      	pop	{r4, r5, r6, pc}
 80117c4:	200b      	movs	r0, #11
 80117c6:	4770      	bx	lr

080117c8 <rcl_node_resolve_name>:
 80117c8:	b082      	sub	sp, #8
 80117ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ce:	b091      	sub	sp, #68	@ 0x44
 80117d0:	ac1a      	add	r4, sp, #104	@ 0x68
 80117d2:	e884 000c 	stmia.w	r4, {r2, r3}
 80117d6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80117da:	2800      	cmp	r0, #0
 80117dc:	d03b      	beq.n	8011856 <rcl_node_resolve_name+0x8e>
 80117de:	460c      	mov	r4, r1
 80117e0:	4605      	mov	r5, r0
 80117e2:	f7ff ffb7 	bl	8011754 <rcl_node_get_options>
 80117e6:	2800      	cmp	r0, #0
 80117e8:	d037      	beq.n	801185a <rcl_node_resolve_name+0x92>
 80117ea:	4628      	mov	r0, r5
 80117ec:	f7ff ffa2 	bl	8011734 <rcl_node_get_name>
 80117f0:	4606      	mov	r6, r0
 80117f2:	4628      	mov	r0, r5
 80117f4:	f7ff ffa6 	bl	8011744 <rcl_node_get_namespace>
 80117f8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80117fc:	4681      	mov	r9, r0
 80117fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011802:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011804:	46ac      	mov	ip, r5
 8011806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801180a:	f8de 3000 	ldr.w	r3, [lr]
 801180e:	f8cc 3000 	str.w	r3, [ip]
 8011812:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011814:	b1fb      	cbz	r3, 8011856 <rcl_node_resolve_name+0x8e>
 8011816:	468a      	mov	sl, r1
 8011818:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801181c:	f002 fbd8 	bl	8013fd0 <rcutils_get_zero_initialized_string_map>
 8011820:	ab10      	add	r3, sp, #64	@ 0x40
 8011822:	9008      	str	r0, [sp, #32]
 8011824:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011828:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801182c:	2100      	movs	r1, #0
 801182e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011832:	a808      	add	r0, sp, #32
 8011834:	f002 fc44 	bl	80140c0 <rcutils_string_map_init>
 8011838:	4607      	mov	r7, r0
 801183a:	b180      	cbz	r0, 801185e <rcl_node_resolve_name+0x96>
 801183c:	f7f9 fd38 	bl	800b2b0 <rcutils_get_error_string>
 8011840:	f7f9 fd4e 	bl	800b2e0 <rcutils_reset_error>
 8011844:	2f0a      	cmp	r7, #10
 8011846:	bf18      	it	ne
 8011848:	2701      	movne	r7, #1
 801184a:	4638      	mov	r0, r7
 801184c:	b011      	add	sp, #68	@ 0x44
 801184e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011852:	b002      	add	sp, #8
 8011854:	4770      	bx	lr
 8011856:	270b      	movs	r7, #11
 8011858:	e7f7      	b.n	801184a <rcl_node_resolve_name+0x82>
 801185a:	2701      	movs	r7, #1
 801185c:	e7f5      	b.n	801184a <rcl_node_resolve_name+0x82>
 801185e:	9009      	str	r0, [sp, #36]	@ 0x24
 8011860:	9007      	str	r0, [sp, #28]
 8011862:	a808      	add	r0, sp, #32
 8011864:	f004 fc90 	bl	8016188 <rcl_get_default_topic_name_substitutions>
 8011868:	4607      	mov	r7, r0
 801186a:	b1a8      	cbz	r0, 8011898 <rcl_node_resolve_name+0xd0>
 801186c:	280a      	cmp	r0, #10
 801186e:	9c07      	ldr	r4, [sp, #28]
 8011870:	d000      	beq.n	8011874 <rcl_node_resolve_name+0xac>
 8011872:	2701      	movs	r7, #1
 8011874:	a808      	add	r0, sp, #32
 8011876:	f002 fc63 	bl	8014140 <rcutils_string_map_fini>
 801187a:	2800      	cmp	r0, #0
 801187c:	d13d      	bne.n	80118fa <rcl_node_resolve_name+0x132>
 801187e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011880:	4659      	mov	r1, fp
 8011882:	47d0      	blx	sl
 8011884:	4659      	mov	r1, fp
 8011886:	4620      	mov	r0, r4
 8011888:	47d0      	blx	sl
 801188a:	f1b8 0f00 	cmp.w	r8, #0
 801188e:	d0dc      	beq.n	801184a <rcl_node_resolve_name+0x82>
 8011890:	2f67      	cmp	r7, #103	@ 0x67
 8011892:	bf08      	it	eq
 8011894:	2768      	moveq	r7, #104	@ 0x68
 8011896:	e7d8      	b.n	801184a <rcl_node_resolve_name+0x82>
 8011898:	ab09      	add	r3, sp, #36	@ 0x24
 801189a:	9305      	str	r3, [sp, #20]
 801189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801189e:	46ec      	mov	ip, sp
 80118a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	f8cc 3000 	str.w	r3, [ip]
 80118aa:	464a      	mov	r2, r9
 80118ac:	4631      	mov	r1, r6
 80118ae:	4620      	mov	r0, r4
 80118b0:	ab08      	add	r3, sp, #32
 80118b2:	f004 fb0b 	bl	8015ecc <rcl_expand_topic_name>
 80118b6:	4607      	mov	r7, r0
 80118b8:	b9b8      	cbnz	r0, 80118ea <rcl_node_resolve_name+0x122>
 80118ba:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80118bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80118be:	4602      	mov	r2, r0
 80118c0:	a90a      	add	r1, sp, #40	@ 0x28
 80118c2:	4620      	mov	r0, r4
 80118c4:	f002 fd4c 	bl	8014360 <rmw_validate_full_topic_name>
 80118c8:	b988      	cbnz	r0, 80118ee <rcl_node_resolve_name+0x126>
 80118ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80118cc:	b9d5      	cbnz	r5, 8011904 <rcl_node_resolve_name+0x13c>
 80118ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80118d0:	a808      	add	r0, sp, #32
 80118d2:	601c      	str	r4, [r3, #0]
 80118d4:	f002 fc34 	bl	8014140 <rcutils_string_map_fini>
 80118d8:	4607      	mov	r7, r0
 80118da:	b1a8      	cbz	r0, 8011908 <rcl_node_resolve_name+0x140>
 80118dc:	f7f9 fce8 	bl	800b2b0 <rcutils_get_error_string>
 80118e0:	462c      	mov	r4, r5
 80118e2:	f7f9 fcfd 	bl	800b2e0 <rcutils_reset_error>
 80118e6:	2701      	movs	r7, #1
 80118e8:	e7c9      	b.n	801187e <rcl_node_resolve_name+0xb6>
 80118ea:	9c07      	ldr	r4, [sp, #28]
 80118ec:	e7c2      	b.n	8011874 <rcl_node_resolve_name+0xac>
 80118ee:	f7f9 fcdf 	bl	800b2b0 <rcutils_get_error_string>
 80118f2:	2701      	movs	r7, #1
 80118f4:	f7f9 fcf4 	bl	800b2e0 <rcutils_reset_error>
 80118f8:	e7bc      	b.n	8011874 <rcl_node_resolve_name+0xac>
 80118fa:	f7f9 fcd9 	bl	800b2b0 <rcutils_get_error_string>
 80118fe:	f7f9 fcef 	bl	800b2e0 <rcutils_reset_error>
 8011902:	e7bc      	b.n	801187e <rcl_node_resolve_name+0xb6>
 8011904:	2767      	movs	r7, #103	@ 0x67
 8011906:	e7b5      	b.n	8011874 <rcl_node_resolve_name+0xac>
 8011908:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801190a:	4659      	mov	r1, fp
 801190c:	47d0      	blx	sl
 801190e:	4659      	mov	r1, fp
 8011910:	4638      	mov	r0, r7
 8011912:	47d0      	blx	sl
 8011914:	e799      	b.n	801184a <rcl_node_resolve_name+0x82>
 8011916:	bf00      	nop

08011918 <exact_match_lookup>:
 8011918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801191a:	f102 0708 	add.w	r7, r2, #8
 801191e:	460b      	mov	r3, r1
 8011920:	4614      	mov	r4, r2
 8011922:	4606      	mov	r6, r0
 8011924:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011928:	b085      	sub	sp, #20
 801192a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801192e:	4618      	mov	r0, r3
 8011930:	4919      	ldr	r1, [pc, #100]	@ (8011998 <exact_match_lookup+0x80>)
 8011932:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011936:	f002 f9e5 	bl	8013d04 <rcutils_join_path>
 801193a:	7833      	ldrb	r3, [r6, #0]
 801193c:	2b2f      	cmp	r3, #47	@ 0x2f
 801193e:	4605      	mov	r5, r0
 8011940:	d023      	beq.n	801198a <exact_match_lookup+0x72>
 8011942:	f104 030c 	add.w	r3, r4, #12
 8011946:	e893 0003 	ldmia.w	r3, {r0, r1}
 801194a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801194e:	1c70      	adds	r0, r6, #1
 8011950:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011954:	f002 f9dc 	bl	8013d10 <rcutils_to_native_path>
 8011958:	4606      	mov	r6, r0
 801195a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801195e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011962:	4631      	mov	r1, r6
 8011964:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011968:	4628      	mov	r0, r5
 801196a:	f002 f9cb 	bl	8013d04 <rcutils_join_path>
 801196e:	6862      	ldr	r2, [r4, #4]
 8011970:	6921      	ldr	r1, [r4, #16]
 8011972:	4603      	mov	r3, r0
 8011974:	4630      	mov	r0, r6
 8011976:	461e      	mov	r6, r3
 8011978:	4790      	blx	r2
 801197a:	4628      	mov	r0, r5
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	6921      	ldr	r1, [r4, #16]
 8011980:	4798      	blx	r3
 8011982:	4635      	mov	r5, r6
 8011984:	4628      	mov	r0, r5
 8011986:	b005      	add	sp, #20
 8011988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801198a:	7873      	ldrb	r3, [r6, #1]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1d8      	bne.n	8011942 <exact_match_lookup+0x2a>
 8011990:	4628      	mov	r0, r5
 8011992:	b005      	add	sp, #20
 8011994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011996:	bf00      	nop
 8011998:	08018454 	.word	0x08018454

0801199c <rcl_get_secure_root>:
 801199c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119a0:	b085      	sub	sp, #20
 80119a2:	b168      	cbz	r0, 80119c0 <rcl_get_secure_root+0x24>
 80119a4:	4607      	mov	r7, r0
 80119a6:	4608      	mov	r0, r1
 80119a8:	460c      	mov	r4, r1
 80119aa:	f7f9 fc73 	bl	800b294 <rcutils_allocator_is_valid>
 80119ae:	b138      	cbz	r0, 80119c0 <rcl_get_secure_root+0x24>
 80119b0:	2300      	movs	r3, #0
 80119b2:	482d      	ldr	r0, [pc, #180]	@ (8011a68 <rcl_get_secure_root+0xcc>)
 80119b4:	9303      	str	r3, [sp, #12]
 80119b6:	a903      	add	r1, sp, #12
 80119b8:	f002 f98a 	bl	8013cd0 <rcutils_get_env>
 80119bc:	4605      	mov	r5, r0
 80119be:	b120      	cbz	r0, 80119ca <rcl_get_secure_root+0x2e>
 80119c0:	2500      	movs	r5, #0
 80119c2:	4628      	mov	r0, r5
 80119c4:	b005      	add	sp, #20
 80119c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119ca:	9b03      	ldr	r3, [sp, #12]
 80119cc:	781a      	ldrb	r2, [r3, #0]
 80119ce:	2a00      	cmp	r2, #0
 80119d0:	d0f6      	beq.n	80119c0 <rcl_get_secure_root+0x24>
 80119d2:	f104 090c 	add.w	r9, r4, #12
 80119d6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80119da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80119de:	4618      	mov	r0, r3
 80119e0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80119e4:	f002 fab6 	bl	8013f54 <rcutils_strdup>
 80119e8:	4680      	mov	r8, r0
 80119ea:	2800      	cmp	r0, #0
 80119ec:	d0e8      	beq.n	80119c0 <rcl_get_secure_root+0x24>
 80119ee:	481f      	ldr	r0, [pc, #124]	@ (8011a6c <rcl_get_secure_root+0xd0>)
 80119f0:	9503      	str	r5, [sp, #12]
 80119f2:	a903      	add	r1, sp, #12
 80119f4:	f002 f96c 	bl	8013cd0 <rcutils_get_env>
 80119f8:	b160      	cbz	r0, 8011a14 <rcl_get_secure_root+0x78>
 80119fa:	2600      	movs	r6, #0
 80119fc:	6863      	ldr	r3, [r4, #4]
 80119fe:	6921      	ldr	r1, [r4, #16]
 8011a00:	4630      	mov	r0, r6
 8011a02:	4798      	blx	r3
 8011a04:	4640      	mov	r0, r8
 8011a06:	6863      	ldr	r3, [r4, #4]
 8011a08:	6921      	ldr	r1, [r4, #16]
 8011a0a:	4798      	blx	r3
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	b005      	add	sp, #20
 8011a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a14:	9b03      	ldr	r3, [sp, #12]
 8011a16:	781e      	ldrb	r6, [r3, #0]
 8011a18:	b1f6      	cbz	r6, 8011a58 <rcl_get_secure_root+0xbc>
 8011a1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011a1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011a22:	4618      	mov	r0, r3
 8011a24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011a28:	f002 fa94 	bl	8013f54 <rcutils_strdup>
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d0e3      	beq.n	80119fa <rcl_get_secure_root+0x5e>
 8011a32:	4622      	mov	r2, r4
 8011a34:	4641      	mov	r1, r8
 8011a36:	f7ff ff6f 	bl	8011918 <exact_match_lookup>
 8011a3a:	4605      	mov	r5, r0
 8011a3c:	2d00      	cmp	r5, #0
 8011a3e:	d0dd      	beq.n	80119fc <rcl_get_secure_root+0x60>
 8011a40:	4628      	mov	r0, r5
 8011a42:	f002 f95d 	bl	8013d00 <rcutils_is_directory>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d1d7      	bne.n	80119fc <rcl_get_secure_root+0x60>
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	6921      	ldr	r1, [r4, #16]
 8011a50:	461d      	mov	r5, r3
 8011a52:	6863      	ldr	r3, [r4, #4]
 8011a54:	4798      	blx	r3
 8011a56:	e7d1      	b.n	80119fc <rcl_get_secure_root+0x60>
 8011a58:	4622      	mov	r2, r4
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	4641      	mov	r1, r8
 8011a5e:	f7ff ff5b 	bl	8011918 <exact_match_lookup>
 8011a62:	4605      	mov	r5, r0
 8011a64:	e7ea      	b.n	8011a3c <rcl_get_secure_root+0xa0>
 8011a66:	bf00      	nop
 8011a68:	08018460 	.word	0x08018460
 8011a6c:	08018478 	.word	0x08018478

08011a70 <rcl_get_security_options_from_environment>:
 8011a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a74:	b082      	sub	sp, #8
 8011a76:	2300      	movs	r3, #0
 8011a78:	4606      	mov	r6, r0
 8011a7a:	460f      	mov	r7, r1
 8011a7c:	4820      	ldr	r0, [pc, #128]	@ (8011b00 <rcl_get_security_options_from_environment+0x90>)
 8011a7e:	9301      	str	r3, [sp, #4]
 8011a80:	a901      	add	r1, sp, #4
 8011a82:	4690      	mov	r8, r2
 8011a84:	f002 f924 	bl	8013cd0 <rcutils_get_env>
 8011a88:	b120      	cbz	r0, 8011a94 <rcl_get_security_options_from_environment+0x24>
 8011a8a:	2501      	movs	r5, #1
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	b002      	add	sp, #8
 8011a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a94:	491b      	ldr	r1, [pc, #108]	@ (8011b04 <rcl_get_security_options_from_environment+0x94>)
 8011a96:	4604      	mov	r4, r0
 8011a98:	9801      	ldr	r0, [sp, #4]
 8011a9a:	f7ee fbc1 	bl	8000220 <strcmp>
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	b9e8      	cbnz	r0, 8011ade <rcl_get_security_options_from_environment+0x6e>
 8011aa2:	9001      	str	r0, [sp, #4]
 8011aa4:	f1b8 0f00 	cmp.w	r8, #0
 8011aa8:	d020      	beq.n	8011aec <rcl_get_security_options_from_environment+0x7c>
 8011aaa:	4817      	ldr	r0, [pc, #92]	@ (8011b08 <rcl_get_security_options_from_environment+0x98>)
 8011aac:	a901      	add	r1, sp, #4
 8011aae:	f002 f90f 	bl	8013cd0 <rcutils_get_env>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	d1e9      	bne.n	8011a8a <rcl_get_security_options_from_environment+0x1a>
 8011ab6:	4915      	ldr	r1, [pc, #84]	@ (8011b0c <rcl_get_security_options_from_environment+0x9c>)
 8011ab8:	9801      	ldr	r0, [sp, #4]
 8011aba:	f7ee fbb1 	bl	8000220 <strcmp>
 8011abe:	fab0 f080 	clz	r0, r0
 8011ac2:	0940      	lsrs	r0, r0, #5
 8011ac4:	f888 0000 	strb.w	r0, [r8]
 8011ac8:	4639      	mov	r1, r7
 8011aca:	4630      	mov	r0, r6
 8011acc:	f7ff ff66 	bl	801199c <rcl_get_secure_root>
 8011ad0:	b170      	cbz	r0, 8011af0 <rcl_get_security_options_from_environment+0x80>
 8011ad2:	f8c8 0004 	str.w	r0, [r8, #4]
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	b002      	add	sp, #8
 8011ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ade:	4625      	mov	r5, r4
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f888 4000 	strb.w	r4, [r8]
 8011ae6:	b002      	add	sp, #8
 8011ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aec:	250b      	movs	r5, #11
 8011aee:	e7cd      	b.n	8011a8c <rcl_get_security_options_from_environment+0x1c>
 8011af0:	f898 5000 	ldrb.w	r5, [r8]
 8011af4:	f1a5 0501 	sub.w	r5, r5, #1
 8011af8:	fab5 f585 	clz	r5, r5
 8011afc:	096d      	lsrs	r5, r5, #5
 8011afe:	e7c5      	b.n	8011a8c <rcl_get_security_options_from_environment+0x1c>
 8011b00:	08018418 	.word	0x08018418
 8011b04:	0801842c 	.word	0x0801842c
 8011b08:	08018434 	.word	0x08018434
 8011b0c:	0801844c 	.word	0x0801844c

08011b10 <rcl_service_get_rmw_handle>:
 8011b10:	b118      	cbz	r0, 8011b1a <rcl_service_get_rmw_handle+0xa>
 8011b12:	6800      	ldr	r0, [r0, #0]
 8011b14:	b108      	cbz	r0, 8011b1a <rcl_service_get_rmw_handle+0xa>
 8011b16:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011b1a:	4770      	bx	lr

08011b1c <rcl_take_request>:
 8011b1c:	b570      	push	{r4, r5, r6, lr}
 8011b1e:	468e      	mov	lr, r1
 8011b20:	460c      	mov	r4, r1
 8011b22:	4616      	mov	r6, r2
 8011b24:	4605      	mov	r5, r0
 8011b26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b2a:	b08c      	sub	sp, #48	@ 0x30
 8011b2c:	f10d 0c18 	add.w	ip, sp, #24
 8011b30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b34:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b38:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b3c:	b30d      	cbz	r5, 8011b82 <rcl_take_request+0x66>
 8011b3e:	682b      	ldr	r3, [r5, #0]
 8011b40:	b1fb      	cbz	r3, 8011b82 <rcl_take_request+0x66>
 8011b42:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011b46:	b1e0      	cbz	r0, 8011b82 <rcl_take_request+0x66>
 8011b48:	b336      	cbz	r6, 8011b98 <rcl_take_request+0x7c>
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b50:	4632      	mov	r2, r6
 8011b52:	f10d 0307 	add.w	r3, sp, #7
 8011b56:	a902      	add	r1, sp, #8
 8011b58:	f002 ff58 	bl	8014a0c <rmw_take_request>
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	b198      	cbz	r0, 8011b88 <rcl_take_request+0x6c>
 8011b60:	280a      	cmp	r0, #10
 8011b62:	bf18      	it	ne
 8011b64:	2501      	movne	r5, #1
 8011b66:	f10d 0e18 	add.w	lr, sp, #24
 8011b6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b6e:	46a4      	mov	ip, r4
 8011b70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b74:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b78:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	b00c      	add	sp, #48	@ 0x30
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8011b86:	e7ee      	b.n	8011b66 <rcl_take_request+0x4a>
 8011b88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b8c:	f240 2359 	movw	r3, #601	@ 0x259
 8011b90:	2a00      	cmp	r2, #0
 8011b92:	bf08      	it	eq
 8011b94:	461d      	moveq	r5, r3
 8011b96:	e7e6      	b.n	8011b66 <rcl_take_request+0x4a>
 8011b98:	250b      	movs	r5, #11
 8011b9a:	e7e4      	b.n	8011b66 <rcl_take_request+0x4a>

08011b9c <rcl_send_response>:
 8011b9c:	b170      	cbz	r0, 8011bbc <rcl_send_response+0x20>
 8011b9e:	6800      	ldr	r0, [r0, #0]
 8011ba0:	b160      	cbz	r0, 8011bbc <rcl_send_response+0x20>
 8011ba2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011ba6:	b148      	cbz	r0, 8011bbc <rcl_send_response+0x20>
 8011ba8:	b159      	cbz	r1, 8011bc2 <rcl_send_response+0x26>
 8011baa:	b510      	push	{r4, lr}
 8011bac:	b15a      	cbz	r2, 8011bc6 <rcl_send_response+0x2a>
 8011bae:	f002 ff8b 	bl	8014ac8 <rmw_send_response>
 8011bb2:	b110      	cbz	r0, 8011bba <rcl_send_response+0x1e>
 8011bb4:	2802      	cmp	r0, #2
 8011bb6:	bf18      	it	ne
 8011bb8:	2001      	movne	r0, #1
 8011bba:	bd10      	pop	{r4, pc}
 8011bbc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011bc0:	4770      	bx	lr
 8011bc2:	200b      	movs	r0, #11
 8011bc4:	4770      	bx	lr
 8011bc6:	200b      	movs	r0, #11
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	bf00      	nop

08011bcc <rcl_service_is_valid>:
 8011bcc:	b130      	cbz	r0, 8011bdc <rcl_service_is_valid+0x10>
 8011bce:	6800      	ldr	r0, [r0, #0]
 8011bd0:	b120      	cbz	r0, 8011bdc <rcl_service_is_valid+0x10>
 8011bd2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011bd6:	3800      	subs	r0, #0
 8011bd8:	bf18      	it	ne
 8011bda:	2001      	movne	r0, #1
 8011bdc:	4770      	bx	lr
 8011bde:	bf00      	nop

08011be0 <rcl_take>:
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d04a      	beq.n	8011c7a <rcl_take+0x9a>
 8011be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be8:	4604      	mov	r4, r0
 8011bea:	6800      	ldr	r0, [r0, #0]
 8011bec:	b0a4      	sub	sp, #144	@ 0x90
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d03b      	beq.n	8011c6a <rcl_take+0x8a>
 8011bf2:	461f      	mov	r7, r3
 8011bf4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d036      	beq.n	8011c6a <rcl_take+0x8a>
 8011bfc:	460e      	mov	r6, r1
 8011bfe:	2900      	cmp	r1, #0
 8011c00:	d039      	beq.n	8011c76 <rcl_take+0x96>
 8011c02:	4615      	mov	r5, r2
 8011c04:	2a00      	cmp	r2, #0
 8011c06:	d03c      	beq.n	8011c82 <rcl_take+0xa2>
 8011c08:	a802      	add	r0, sp, #8
 8011c0a:	f002 fba1 	bl	8014350 <rmw_get_zero_initialized_message_info>
 8011c0e:	f10d 0c08 	add.w	ip, sp, #8
 8011c12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c16:	46ae      	mov	lr, r5
 8011c18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011c1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011c24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011c2c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011c30:	f04f 0800 	mov.w	r8, #0
 8011c34:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011c38:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8011c3c:	6822      	ldr	r2, [r4, #0]
 8011c3e:	462b      	mov	r3, r5
 8011c40:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8011c44:	9700      	str	r7, [sp, #0]
 8011c46:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8011c4a:	4631      	mov	r1, r6
 8011c4c:	f002 ffe2 	bl	8014c14 <rmw_take_with_info>
 8011c50:	4603      	mov	r3, r0
 8011c52:	b9c0      	cbnz	r0, 8011c86 <rcl_take+0xa6>
 8011c54:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8011c58:	f240 1291 	movw	r2, #401	@ 0x191
 8011c5c:	2900      	cmp	r1, #0
 8011c5e:	bf08      	it	eq
 8011c60:	4613      	moveq	r3, r2
 8011c62:	4618      	mov	r0, r3
 8011c64:	b024      	add	sp, #144	@ 0x90
 8011c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c6a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011c6e:	4618      	mov	r0, r3
 8011c70:	b024      	add	sp, #144	@ 0x90
 8011c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c76:	230b      	movs	r3, #11
 8011c78:	e7f3      	b.n	8011c62 <rcl_take+0x82>
 8011c7a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011c7e:	4618      	mov	r0, r3
 8011c80:	4770      	bx	lr
 8011c82:	ad14      	add	r5, sp, #80	@ 0x50
 8011c84:	e7c0      	b.n	8011c08 <rcl_take+0x28>
 8011c86:	f7ff fa51 	bl	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	e7e9      	b.n	8011c62 <rcl_take+0x82>
 8011c8e:	bf00      	nop

08011c90 <rcl_subscription_get_rmw_handle>:
 8011c90:	b118      	cbz	r0, 8011c9a <rcl_subscription_get_rmw_handle+0xa>
 8011c92:	6800      	ldr	r0, [r0, #0]
 8011c94:	b108      	cbz	r0, 8011c9a <rcl_subscription_get_rmw_handle+0xa>
 8011c96:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011c9a:	4770      	bx	lr

08011c9c <rcl_subscription_is_valid>:
 8011c9c:	b130      	cbz	r0, 8011cac <rcl_subscription_is_valid+0x10>
 8011c9e:	6800      	ldr	r0, [r0, #0]
 8011ca0:	b120      	cbz	r0, 8011cac <rcl_subscription_is_valid+0x10>
 8011ca2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011ca6:	3800      	subs	r0, #0
 8011ca8:	bf18      	it	ne
 8011caa:	2001      	movne	r0, #1
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop

08011cb0 <rcl_get_system_time>:
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	f7f9 bb31 	b.w	800b318 <rcutils_system_time_now>
 8011cb6:	bf00      	nop

08011cb8 <rcl_get_steady_time>:
 8011cb8:	4608      	mov	r0, r1
 8011cba:	f7f9 bb55 	b.w	800b368 <rcutils_steady_time_now>
 8011cbe:	bf00      	nop

08011cc0 <rcl_get_ros_time>:
 8011cc0:	7a03      	ldrb	r3, [r0, #8]
 8011cc2:	b510      	push	{r4, lr}
 8011cc4:	460c      	mov	r4, r1
 8011cc6:	b133      	cbz	r3, 8011cd6 <rcl_get_ros_time+0x16>
 8011cc8:	2105      	movs	r1, #5
 8011cca:	f001 ff5d 	bl	8013b88 <__atomic_load_8>
 8011cce:	e9c4 0100 	strd	r0, r1, [r4]
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	bd10      	pop	{r4, pc}
 8011cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cda:	4608      	mov	r0, r1
 8011cdc:	f7f9 bb1c 	b.w	800b318 <rcutils_system_time_now>

08011ce0 <rcl_clock_init>:
 8011ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce2:	4605      	mov	r5, r0
 8011ce4:	4610      	mov	r0, r2
 8011ce6:	4614      	mov	r4, r2
 8011ce8:	460e      	mov	r6, r1
 8011cea:	f7f9 fad3 	bl	800b294 <rcutils_allocator_is_valid>
 8011cee:	b128      	cbz	r0, 8011cfc <rcl_clock_init+0x1c>
 8011cf0:	2d03      	cmp	r5, #3
 8011cf2:	d803      	bhi.n	8011cfc <rcl_clock_init+0x1c>
 8011cf4:	e8df f005 	tbb	[pc, r5]
 8011cf8:	06532e1d 	.word	0x06532e1d
 8011cfc:	f04f 0c0b 	mov.w	ip, #11
 8011d00:	4660      	mov	r0, ip
 8011d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d04:	2e00      	cmp	r6, #0
 8011d06:	d0f9      	beq.n	8011cfc <rcl_clock_init+0x1c>
 8011d08:	2c00      	cmp	r4, #0
 8011d0a:	d0f7      	beq.n	8011cfc <rcl_clock_init+0x1c>
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011d12:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8011dc8 <rcl_clock_init+0xe8>
 8011d16:	6133      	str	r3, [r6, #16]
 8011d18:	f106 0514 	add.w	r5, r6, #20
 8011d1c:	469c      	mov	ip, r3
 8011d1e:	2703      	movs	r7, #3
 8011d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011d24:	6823      	ldr	r3, [r4, #0]
 8011d26:	602b      	str	r3, [r5, #0]
 8011d28:	7037      	strb	r7, [r6, #0]
 8011d2a:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011d2e:	4660      	mov	r0, ip
 8011d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d32:	2e00      	cmp	r6, #0
 8011d34:	d0e2      	beq.n	8011cfc <rcl_clock_init+0x1c>
 8011d36:	2300      	movs	r3, #0
 8011d38:	7033      	strb	r3, [r6, #0]
 8011d3a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011d3e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011d42:	469c      	mov	ip, r3
 8011d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d46:	f106 0514 	add.w	r5, r6, #20
 8011d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011d4c:	6823      	ldr	r3, [r4, #0]
 8011d4e:	602b      	str	r3, [r5, #0]
 8011d50:	4660      	mov	r0, ip
 8011d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d54:	2e00      	cmp	r6, #0
 8011d56:	d0d1      	beq.n	8011cfc <rcl_clock_init+0x1c>
 8011d58:	2c00      	cmp	r4, #0
 8011d5a:	d0cf      	beq.n	8011cfc <rcl_clock_init+0x1c>
 8011d5c:	2700      	movs	r7, #0
 8011d5e:	7037      	strb	r7, [r6, #0]
 8011d60:	46a4      	mov	ip, r4
 8011d62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d66:	f106 0514 	add.w	r5, r6, #20
 8011d6a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011d6e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011d74:	f8dc 3000 	ldr.w	r3, [ip]
 8011d78:	602b      	str	r3, [r5, #0]
 8011d7a:	6921      	ldr	r1, [r4, #16]
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	2010      	movs	r0, #16
 8011d80:	4798      	blx	r3
 8011d82:	6130      	str	r0, [r6, #16]
 8011d84:	b1d0      	cbz	r0, 8011dbc <rcl_clock_init+0xdc>
 8011d86:	2200      	movs	r2, #0
 8011d88:	2300      	movs	r3, #0
 8011d8a:	e9c0 2300 	strd	r2, r3, [r0]
 8011d8e:	2301      	movs	r3, #1
 8011d90:	7207      	strb	r7, [r0, #8]
 8011d92:	4a0c      	ldr	r2, [pc, #48]	@ (8011dc4 <rcl_clock_init+0xe4>)
 8011d94:	7033      	strb	r3, [r6, #0]
 8011d96:	46bc      	mov	ip, r7
 8011d98:	60f2      	str	r2, [r6, #12]
 8011d9a:	4660      	mov	r0, ip
 8011d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d9e:	2e00      	cmp	r6, #0
 8011da0:	d0ac      	beq.n	8011cfc <rcl_clock_init+0x1c>
 8011da2:	2c00      	cmp	r4, #0
 8011da4:	d0aa      	beq.n	8011cfc <rcl_clock_init+0x1c>
 8011da6:	2300      	movs	r3, #0
 8011da8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011dac:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8011dcc <rcl_clock_init+0xec>
 8011db0:	6133      	str	r3, [r6, #16]
 8011db2:	f106 0514 	add.w	r5, r6, #20
 8011db6:	469c      	mov	ip, r3
 8011db8:	2702      	movs	r7, #2
 8011dba:	e7b1      	b.n	8011d20 <rcl_clock_init+0x40>
 8011dbc:	f04f 0c0a 	mov.w	ip, #10
 8011dc0:	e79e      	b.n	8011d00 <rcl_clock_init+0x20>
 8011dc2:	bf00      	nop
 8011dc4:	08011cc1 	.word	0x08011cc1
 8011dc8:	08011cb9 	.word	0x08011cb9
 8011dcc:	08011cb1 	.word	0x08011cb1

08011dd0 <rcl_clock_get_now>:
 8011dd0:	b140      	cbz	r0, 8011de4 <rcl_clock_get_now+0x14>
 8011dd2:	b139      	cbz	r1, 8011de4 <rcl_clock_get_now+0x14>
 8011dd4:	7803      	ldrb	r3, [r0, #0]
 8011dd6:	b11b      	cbz	r3, 8011de0 <rcl_clock_get_now+0x10>
 8011dd8:	68c3      	ldr	r3, [r0, #12]
 8011dda:	b10b      	cbz	r3, 8011de0 <rcl_clock_get_now+0x10>
 8011ddc:	6900      	ldr	r0, [r0, #16]
 8011dde:	4718      	bx	r3
 8011de0:	2001      	movs	r0, #1
 8011de2:	4770      	bx	lr
 8011de4:	200b      	movs	r0, #11
 8011de6:	4770      	bx	lr

08011de8 <rcl_clock_add_jump_callback>:
 8011de8:	b082      	sub	sp, #8
 8011dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dee:	a906      	add	r1, sp, #24
 8011df0:	e881 000c 	stmia.w	r1, {r2, r3}
 8011df4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8011df8:	b320      	cbz	r0, 8011e44 <rcl_clock_add_jump_callback+0x5c>
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	3014      	adds	r0, #20
 8011dfe:	f7f9 fa49 	bl	800b294 <rcutils_allocator_is_valid>
 8011e02:	b1f8      	cbz	r0, 8011e44 <rcl_clock_add_jump_callback+0x5c>
 8011e04:	b1f6      	cbz	r6, 8011e44 <rcl_clock_add_jump_callback+0x5c>
 8011e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	db1b      	blt.n	8011e44 <rcl_clock_add_jump_callback+0x5c>
 8011e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011e10:	2a01      	cmp	r2, #1
 8011e12:	f173 0300 	sbcs.w	r3, r3, #0
 8011e16:	da15      	bge.n	8011e44 <rcl_clock_add_jump_callback+0x5c>
 8011e18:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8011e1c:	2f00      	cmp	r7, #0
 8011e1e:	d042      	beq.n	8011ea6 <rcl_clock_add_jump_callback+0xbe>
 8011e20:	2300      	movs	r3, #0
 8011e22:	4602      	mov	r2, r0
 8011e24:	e003      	b.n	8011e2e <rcl_clock_add_jump_callback+0x46>
 8011e26:	42bb      	cmp	r3, r7
 8011e28:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8011e2c:	d011      	beq.n	8011e52 <rcl_clock_add_jump_callback+0x6a>
 8011e2e:	6811      	ldr	r1, [r2, #0]
 8011e30:	42b1      	cmp	r1, r6
 8011e32:	f103 0301 	add.w	r3, r3, #1
 8011e36:	d1f6      	bne.n	8011e26 <rcl_clock_add_jump_callback+0x3e>
 8011e38:	6a11      	ldr	r1, [r2, #32]
 8011e3a:	42a9      	cmp	r1, r5
 8011e3c:	d1f3      	bne.n	8011e26 <rcl_clock_add_jump_callback+0x3e>
 8011e3e:	f04f 0e01 	mov.w	lr, #1
 8011e42:	e001      	b.n	8011e48 <rcl_clock_add_jump_callback+0x60>
 8011e44:	f04f 0e0b 	mov.w	lr, #11
 8011e48:	4670      	mov	r0, lr
 8011e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e4e:	b002      	add	sp, #8
 8011e50:	4770      	bx	lr
 8011e52:	3301      	adds	r3, #1
 8011e54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011e58:	00d9      	lsls	r1, r3, #3
 8011e5a:	69e3      	ldr	r3, [r4, #28]
 8011e5c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011e5e:	4798      	blx	r3
 8011e60:	b1f0      	cbz	r0, 8011ea0 <rcl_clock_add_jump_callback+0xb8>
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	6060      	str	r0, [r4, #4]
 8011e66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011e6a:	f10d 0c18 	add.w	ip, sp, #24
 8011e6e:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8011e72:	f103 0801 	add.w	r8, r3, #1
 8011e76:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8011e7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011e7e:	f106 0708 	add.w	r7, r6, #8
 8011e82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011e84:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011e88:	f04f 0e00 	mov.w	lr, #0
 8011e8c:	e887 0003 	stmia.w	r7, {r0, r1}
 8011e90:	6235      	str	r5, [r6, #32]
 8011e92:	4670      	mov	r0, lr
 8011e94:	f8c4 8008 	str.w	r8, [r4, #8]
 8011e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e9c:	b002      	add	sp, #8
 8011e9e:	4770      	bx	lr
 8011ea0:	f04f 0e0a 	mov.w	lr, #10
 8011ea4:	e7d0      	b.n	8011e48 <rcl_clock_add_jump_callback+0x60>
 8011ea6:	2128      	movs	r1, #40	@ 0x28
 8011ea8:	e7d7      	b.n	8011e5a <rcl_clock_add_jump_callback+0x72>
 8011eaa:	bf00      	nop

08011eac <rcl_clock_remove_jump_callback>:
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d057      	beq.n	8011f60 <rcl_clock_remove_jump_callback+0xb4>
 8011eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	3014      	adds	r0, #20
 8011eb8:	4688      	mov	r8, r1
 8011eba:	4692      	mov	sl, r2
 8011ebc:	f7f9 f9ea 	bl	800b294 <rcutils_allocator_is_valid>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d03b      	beq.n	8011f3c <rcl_clock_remove_jump_callback+0x90>
 8011ec4:	f1b8 0f00 	cmp.w	r8, #0
 8011ec8:	d038      	beq.n	8011f3c <rcl_clock_remove_jump_callback+0x90>
 8011eca:	68ae      	ldr	r6, [r5, #8]
 8011ecc:	b166      	cbz	r6, 8011ee8 <rcl_clock_remove_jump_callback+0x3c>
 8011ece:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011ed2:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8011ed6:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8011eda:	464c      	mov	r4, r9
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	4543      	cmp	r3, r8
 8011ee0:	d005      	beq.n	8011eee <rcl_clock_remove_jump_callback+0x42>
 8011ee2:	3428      	adds	r4, #40	@ 0x28
 8011ee4:	42a7      	cmp	r7, r4
 8011ee6:	d1f9      	bne.n	8011edc <rcl_clock_remove_jump_callback+0x30>
 8011ee8:	2001      	movs	r0, #1
 8011eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eee:	6a23      	ldr	r3, [r4, #32]
 8011ef0:	3428      	adds	r4, #40	@ 0x28
 8011ef2:	42bc      	cmp	r4, r7
 8011ef4:	d02d      	beq.n	8011f52 <rcl_clock_remove_jump_callback+0xa6>
 8011ef6:	4553      	cmp	r3, sl
 8011ef8:	d1f0      	bne.n	8011edc <rcl_clock_remove_jump_callback+0x30>
 8011efa:	46a6      	mov	lr, r4
 8011efc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f00:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8011f04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f10:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011f14:	3428      	adds	r4, #40	@ 0x28
 8011f16:	42a7      	cmp	r7, r4
 8011f18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011f1c:	d1ed      	bne.n	8011efa <rcl_clock_remove_jump_callback+0x4e>
 8011f1e:	3e01      	subs	r6, #1
 8011f20:	60ae      	str	r6, [r5, #8]
 8011f22:	b176      	cbz	r6, 8011f42 <rcl_clock_remove_jump_callback+0x96>
 8011f24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8011f28:	69eb      	ldr	r3, [r5, #28]
 8011f2a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011f2c:	00f1      	lsls	r1, r6, #3
 8011f2e:	4648      	mov	r0, r9
 8011f30:	4798      	blx	r3
 8011f32:	b1b8      	cbz	r0, 8011f64 <rcl_clock_remove_jump_callback+0xb8>
 8011f34:	6068      	str	r0, [r5, #4]
 8011f36:	2000      	movs	r0, #0
 8011f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f3c:	200b      	movs	r0, #11
 8011f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f42:	4648      	mov	r0, r9
 8011f44:	69ab      	ldr	r3, [r5, #24]
 8011f46:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8011f48:	4798      	blx	r3
 8011f4a:	606e      	str	r6, [r5, #4]
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f52:	4553      	cmp	r3, sl
 8011f54:	d1c8      	bne.n	8011ee8 <rcl_clock_remove_jump_callback+0x3c>
 8011f56:	3e01      	subs	r6, #1
 8011f58:	60ae      	str	r6, [r5, #8]
 8011f5a:	2e00      	cmp	r6, #0
 8011f5c:	d1e2      	bne.n	8011f24 <rcl_clock_remove_jump_callback+0x78>
 8011f5e:	e7f0      	b.n	8011f42 <rcl_clock_remove_jump_callback+0x96>
 8011f60:	200b      	movs	r0, #11
 8011f62:	4770      	bx	lr
 8011f64:	200a      	movs	r0, #10
 8011f66:	e7ea      	b.n	8011f3e <rcl_clock_remove_jump_callback+0x92>

08011f68 <_rcl_timer_time_jump>:
 8011f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	b084      	sub	sp, #16
 8011f70:	4614      	mov	r4, r2
 8011f72:	b131      	cbz	r1, 8011f82 <_rcl_timer_time_jump+0x1a>
 8011f74:	7803      	ldrb	r3, [r0, #0]
 8011f76:	3b02      	subs	r3, #2
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d93f      	bls.n	8011ffc <_rcl_timer_time_jump+0x94>
 8011f7c:	b004      	add	sp, #16
 8011f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f82:	6813      	ldr	r3, [r2, #0]
 8011f84:	a902      	add	r1, sp, #8
 8011f86:	6818      	ldr	r0, [r3, #0]
 8011f88:	f7ff ff22 	bl	8011dd0 <rcl_clock_get_now>
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	d1f5      	bne.n	8011f7c <_rcl_timer_time_jump+0x14>
 8011f90:	6820      	ldr	r0, [r4, #0]
 8011f92:	2105      	movs	r1, #5
 8011f94:	3020      	adds	r0, #32
 8011f96:	f001 fdf7 	bl	8013b88 <__atomic_load_8>
 8011f9a:	6823      	ldr	r3, [r4, #0]
 8011f9c:	4681      	mov	r9, r0
 8011f9e:	4688      	mov	r8, r1
 8011fa0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011fa4:	2105      	movs	r1, #5
 8011fa6:	f001 fdef 	bl	8013b88 <__atomic_load_8>
 8011faa:	4607      	mov	r7, r0
 8011fac:	6820      	ldr	r0, [r4, #0]
 8011fae:	460e      	mov	r6, r1
 8011fb0:	3018      	adds	r0, #24
 8011fb2:	2105      	movs	r1, #5
 8011fb4:	f001 fde8 	bl	8013b88 <__atomic_load_8>
 8011fb8:	782b      	ldrb	r3, [r5, #0]
 8011fba:	9a02      	ldr	r2, [sp, #8]
 8011fbc:	3b02      	subs	r3, #2
 8011fbe:	2b01      	cmp	r3, #1
 8011fc0:	460d      	mov	r5, r1
 8011fc2:	9b03      	ldr	r3, [sp, #12]
 8011fc4:	4682      	mov	sl, r0
 8011fc6:	d937      	bls.n	8012038 <_rcl_timer_time_jump+0xd0>
 8011fc8:	42ba      	cmp	r2, r7
 8011fca:	eb73 0106 	sbcs.w	r1, r3, r6
 8011fce:	da5f      	bge.n	8012090 <_rcl_timer_time_jump+0x128>
 8011fd0:	454a      	cmp	r2, r9
 8011fd2:	eb73 0108 	sbcs.w	r1, r3, r8
 8011fd6:	dad1      	bge.n	8011f7c <_rcl_timer_time_jump+0x14>
 8011fd8:	6820      	ldr	r0, [r4, #0]
 8011fda:	eb1a 0202 	adds.w	r2, sl, r2
 8011fde:	eb43 0305 	adc.w	r3, r3, r5
 8011fe2:	2505      	movs	r5, #5
 8011fe4:	3028      	adds	r0, #40	@ 0x28
 8011fe6:	9500      	str	r5, [sp, #0]
 8011fe8:	f001 fe04 	bl	8013bf4 <__atomic_store_8>
 8011fec:	6820      	ldr	r0, [r4, #0]
 8011fee:	9500      	str	r5, [sp, #0]
 8011ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ff4:	3020      	adds	r0, #32
 8011ff6:	f001 fdfd 	bl	8013bf4 <__atomic_store_8>
 8011ffa:	e7bf      	b.n	8011f7c <_rcl_timer_time_jump+0x14>
 8011ffc:	6813      	ldr	r3, [r2, #0]
 8011ffe:	a902      	add	r1, sp, #8
 8012000:	6818      	ldr	r0, [r3, #0]
 8012002:	f7ff fee5 	bl	8011dd0 <rcl_clock_get_now>
 8012006:	2800      	cmp	r0, #0
 8012008:	d1b8      	bne.n	8011f7c <_rcl_timer_time_jump+0x14>
 801200a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801200e:	4313      	orrs	r3, r2
 8012010:	d0b4      	beq.n	8011f7c <_rcl_timer_time_jump+0x14>
 8012012:	6820      	ldr	r0, [r4, #0]
 8012014:	2105      	movs	r1, #5
 8012016:	3028      	adds	r0, #40	@ 0x28
 8012018:	f001 fdb6 	bl	8013b88 <__atomic_load_8>
 801201c:	9d02      	ldr	r5, [sp, #8]
 801201e:	9b03      	ldr	r3, [sp, #12]
 8012020:	4602      	mov	r2, r0
 8012022:	6820      	ldr	r0, [r4, #0]
 8012024:	1b52      	subs	r2, r2, r5
 8012026:	f04f 0405 	mov.w	r4, #5
 801202a:	9400      	str	r4, [sp, #0]
 801202c:	eb61 0303 	sbc.w	r3, r1, r3
 8012030:	3030      	adds	r0, #48	@ 0x30
 8012032:	f001 fddf 	bl	8013bf4 <__atomic_store_8>
 8012036:	e7a1      	b.n	8011f7c <_rcl_timer_time_jump+0x14>
 8012038:	4313      	orrs	r3, r2
 801203a:	d09f      	beq.n	8011f7c <_rcl_timer_time_jump+0x14>
 801203c:	6820      	ldr	r0, [r4, #0]
 801203e:	f04f 0805 	mov.w	r8, #5
 8012042:	2300      	movs	r3, #0
 8012044:	f8cd 8000 	str.w	r8, [sp]
 8012048:	3030      	adds	r0, #48	@ 0x30
 801204a:	2200      	movs	r2, #0
 801204c:	f001 fe08 	bl	8013c60 <__atomic_exchange_8>
 8012050:	ea51 0300 	orrs.w	r3, r1, r0
 8012054:	4606      	mov	r6, r0
 8012056:	460f      	mov	r7, r1
 8012058:	d090      	beq.n	8011f7c <_rcl_timer_time_jump+0x14>
 801205a:	9a02      	ldr	r2, [sp, #8]
 801205c:	9b03      	ldr	r3, [sp, #12]
 801205e:	f8cd 8000 	str.w	r8, [sp]
 8012062:	1a12      	subs	r2, r2, r0
 8012064:	6820      	ldr	r0, [r4, #0]
 8012066:	eb63 0301 	sbc.w	r3, r3, r1
 801206a:	eb12 020a 	adds.w	r2, r2, sl
 801206e:	eb43 0305 	adc.w	r3, r3, r5
 8012072:	3028      	adds	r0, #40	@ 0x28
 8012074:	f001 fdbe 	bl	8013bf4 <__atomic_store_8>
 8012078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801207c:	f8cd 8000 	str.w	r8, [sp]
 8012080:	6820      	ldr	r0, [r4, #0]
 8012082:	1b92      	subs	r2, r2, r6
 8012084:	eb63 0307 	sbc.w	r3, r3, r7
 8012088:	3020      	adds	r0, #32
 801208a:	f001 fdb3 	bl	8013bf4 <__atomic_store_8>
 801208e:	e775      	b.n	8011f7c <_rcl_timer_time_jump+0x14>
 8012090:	6820      	ldr	r0, [r4, #0]
 8012092:	3008      	adds	r0, #8
 8012094:	f004 f976 	bl	8016384 <rcl_trigger_guard_condition>
 8012098:	e770      	b.n	8011f7c <_rcl_timer_time_jump+0x14>
 801209a:	bf00      	nop

0801209c <rcl_get_zero_initialized_timer>:
 801209c:	4b01      	ldr	r3, [pc, #4]	@ (80120a4 <rcl_get_zero_initialized_timer+0x8>)
 801209e:	6818      	ldr	r0, [r3, #0]
 80120a0:	4770      	bx	lr
 80120a2:	bf00      	nop
 80120a4:	08018498 	.word	0x08018498

080120a8 <rcl_timer_init>:
 80120a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120ac:	b0aa      	sub	sp, #168	@ 0xa8
 80120ae:	4604      	mov	r4, r0
 80120b0:	a835      	add	r0, sp, #212	@ 0xd4
 80120b2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80120b6:	460d      	mov	r5, r1
 80120b8:	4692      	mov	sl, r2
 80120ba:	f7f9 f8eb 	bl	800b294 <rcutils_allocator_is_valid>
 80120be:	2800      	cmp	r0, #0
 80120c0:	d064      	beq.n	801218c <rcl_timer_init+0xe4>
 80120c2:	2c00      	cmp	r4, #0
 80120c4:	d062      	beq.n	801218c <rcl_timer_init+0xe4>
 80120c6:	2d00      	cmp	r5, #0
 80120c8:	d060      	beq.n	801218c <rcl_timer_init+0xe4>
 80120ca:	2f00      	cmp	r7, #0
 80120cc:	db5e      	blt.n	801218c <rcl_timer_init+0xe4>
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	b123      	cbz	r3, 80120dc <rcl_timer_init+0x34>
 80120d2:	2664      	movs	r6, #100	@ 0x64
 80120d4:	4630      	mov	r0, r6
 80120d6:	b02a      	add	sp, #168	@ 0xa8
 80120d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120dc:	a908      	add	r1, sp, #32
 80120de:	4628      	mov	r0, r5
 80120e0:	f7ff fe76 	bl	8011dd0 <rcl_clock_get_now>
 80120e4:	4606      	mov	r6, r0
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d1f4      	bne.n	80120d4 <rcl_timer_init+0x2c>
 80120ea:	ae06      	add	r6, sp, #24
 80120ec:	4630      	mov	r0, r6
 80120ee:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80120f2:	f004 f84f 	bl	8016194 <rcl_get_zero_initialized_guard_condition>
 80120f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80120fa:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80120fe:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012100:	e889 0003 	stmia.w	r9, {r0, r1}
 8012104:	4630      	mov	r0, r6
 8012106:	f004 f921 	bl	801634c <rcl_guard_condition_get_default_options>
 801210a:	ab0d      	add	r3, sp, #52	@ 0x34
 801210c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012110:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012114:	4651      	mov	r1, sl
 8012116:	e896 000c 	ldmia.w	r6, {r2, r3}
 801211a:	4648      	mov	r0, r9
 801211c:	f004 f844 	bl	80161a8 <rcl_guard_condition_init>
 8012120:	4606      	mov	r6, r0
 8012122:	2800      	cmp	r0, #0
 8012124:	d1d6      	bne.n	80120d4 <rcl_timer_init+0x2c>
 8012126:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	2b01      	cmp	r3, #1
 801212c:	d033      	beq.n	8012196 <rcl_timer_init+0xee>
 801212e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012130:	911a      	str	r1, [sp, #104]	@ 0x68
 8012132:	4642      	mov	r2, r8
 8012134:	463b      	mov	r3, r7
 8012136:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801213a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801213e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80121f0 <rcl_timer_init+0x148>
 8012142:	eb12 0008 	adds.w	r0, r2, r8
 8012146:	eb47 0103 	adc.w	r1, r7, r3
 801214a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801214e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012152:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012156:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801215a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801215e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012166:	f8de 3000 	ldr.w	r3, [lr]
 801216a:	f8cc 3000 	str.w	r3, [ip]
 801216e:	f04f 0a00 	mov.w	sl, #0
 8012172:	4619      	mov	r1, r3
 8012174:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012178:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801217a:	2050      	movs	r0, #80	@ 0x50
 801217c:	4798      	blx	r3
 801217e:	6020      	str	r0, [r4, #0]
 8012180:	b358      	cbz	r0, 80121da <rcl_timer_init+0x132>
 8012182:	2250      	movs	r2, #80	@ 0x50
 8012184:	a916      	add	r1, sp, #88	@ 0x58
 8012186:	f004 fed0 	bl	8016f2a <memcpy>
 801218a:	e7a3      	b.n	80120d4 <rcl_timer_init+0x2c>
 801218c:	260b      	movs	r6, #11
 801218e:	4630      	mov	r0, r6
 8012190:	b02a      	add	sp, #168	@ 0xa8
 8012192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012196:	2001      	movs	r0, #1
 8012198:	2100      	movs	r1, #0
 801219a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801219e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80121a6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80121aa:	4a13      	ldr	r2, [pc, #76]	@ (80121f8 <rcl_timer_init+0x150>)
 80121ac:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80121b0:	9405      	str	r4, [sp, #20]
 80121b2:	9204      	str	r2, [sp, #16]
 80121b4:	ab12      	add	r3, sp, #72	@ 0x48
 80121b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80121b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80121bc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80121c0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80121c4:	4628      	mov	r0, r5
 80121c6:	f7ff fe0f 	bl	8011de8 <rcl_clock_add_jump_callback>
 80121ca:	4682      	mov	sl, r0
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d0ae      	beq.n	801212e <rcl_timer_init+0x86>
 80121d0:	4648      	mov	r0, r9
 80121d2:	f004 f895 	bl	8016300 <rcl_guard_condition_fini>
 80121d6:	4656      	mov	r6, sl
 80121d8:	e77c      	b.n	80120d4 <rcl_timer_init+0x2c>
 80121da:	4648      	mov	r0, r9
 80121dc:	f004 f890 	bl	8016300 <rcl_guard_condition_fini>
 80121e0:	4905      	ldr	r1, [pc, #20]	@ (80121f8 <rcl_timer_init+0x150>)
 80121e2:	4622      	mov	r2, r4
 80121e4:	4628      	mov	r0, r5
 80121e6:	f7ff fe61 	bl	8011eac <rcl_clock_remove_jump_callback>
 80121ea:	260a      	movs	r6, #10
 80121ec:	e772      	b.n	80120d4 <rcl_timer_init+0x2c>
 80121ee:	bf00      	nop
	...
 80121f8:	08011f69 	.word	0x08011f69

080121fc <rcl_timer_call>:
 80121fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012200:	b087      	sub	sp, #28
 8012202:	2800      	cmp	r0, #0
 8012204:	d06d      	beq.n	80122e2 <rcl_timer_call+0xe6>
 8012206:	6803      	ldr	r3, [r0, #0]
 8012208:	4604      	mov	r4, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d063      	beq.n	80122d6 <rcl_timer_call+0xda>
 801220e:	f3bf 8f5b 	dmb	ish
 8012212:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012216:	f3bf 8f5b 	dmb	ish
 801221a:	2b00      	cmp	r3, #0
 801221c:	d150      	bne.n	80122c0 <rcl_timer_call+0xc4>
 801221e:	6803      	ldr	r3, [r0, #0]
 8012220:	a904      	add	r1, sp, #16
 8012222:	6818      	ldr	r0, [r3, #0]
 8012224:	f7ff fdd4 	bl	8011dd0 <rcl_clock_get_now>
 8012228:	4605      	mov	r5, r0
 801222a:	2800      	cmp	r0, #0
 801222c:	d14a      	bne.n	80122c4 <rcl_timer_call+0xc8>
 801222e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012232:	2b00      	cmp	r3, #0
 8012234:	db4a      	blt.n	80122cc <rcl_timer_call+0xd0>
 8012236:	6820      	ldr	r0, [r4, #0]
 8012238:	f04f 0a05 	mov.w	sl, #5
 801223c:	f8cd a000 	str.w	sl, [sp]
 8012240:	3020      	adds	r0, #32
 8012242:	f001 fd0d 	bl	8013c60 <__atomic_exchange_8>
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	f3bf 8f5b 	dmb	ish
 801224c:	4680      	mov	r8, r0
 801224e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012252:	f3bf 8f5b 	dmb	ish
 8012256:	6820      	ldr	r0, [r4, #0]
 8012258:	4689      	mov	r9, r1
 801225a:	3028      	adds	r0, #40	@ 0x28
 801225c:	4651      	mov	r1, sl
 801225e:	f001 fc93 	bl	8013b88 <__atomic_load_8>
 8012262:	4606      	mov	r6, r0
 8012264:	6820      	ldr	r0, [r4, #0]
 8012266:	460f      	mov	r7, r1
 8012268:	3018      	adds	r0, #24
 801226a:	4651      	mov	r1, sl
 801226c:	f001 fc8c 	bl	8013b88 <__atomic_load_8>
 8012270:	1836      	adds	r6, r6, r0
 8012272:	4602      	mov	r2, r0
 8012274:	4682      	mov	sl, r0
 8012276:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801227a:	eb47 0701 	adc.w	r7, r7, r1
 801227e:	4286      	cmp	r6, r0
 8012280:	460b      	mov	r3, r1
 8012282:	eb77 010c 	sbcs.w	r1, r7, ip
 8012286:	da04      	bge.n	8012292 <rcl_timer_call+0x96>
 8012288:	ea53 0102 	orrs.w	r1, r3, r2
 801228c:	d12e      	bne.n	80122ec <rcl_timer_call+0xf0>
 801228e:	4606      	mov	r6, r0
 8012290:	4667      	mov	r7, ip
 8012292:	6820      	ldr	r0, [r4, #0]
 8012294:	2105      	movs	r1, #5
 8012296:	4632      	mov	r2, r6
 8012298:	463b      	mov	r3, r7
 801229a:	3028      	adds	r0, #40	@ 0x28
 801229c:	9100      	str	r1, [sp, #0]
 801229e:	f001 fca9 	bl	8013bf4 <__atomic_store_8>
 80122a2:	f1bb 0f00 	cmp.w	fp, #0
 80122a6:	d00d      	beq.n	80122c4 <rcl_timer_call+0xc8>
 80122a8:	9a04      	ldr	r2, [sp, #16]
 80122aa:	9b05      	ldr	r3, [sp, #20]
 80122ac:	ebb2 0208 	subs.w	r2, r2, r8
 80122b0:	4620      	mov	r0, r4
 80122b2:	eb63 0309 	sbc.w	r3, r3, r9
 80122b6:	47d8      	blx	fp
 80122b8:	4628      	mov	r0, r5
 80122ba:	b007      	add	sp, #28
 80122bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c0:	f240 3521 	movw	r5, #801	@ 0x321
 80122c4:	4628      	mov	r0, r5
 80122c6:	b007      	add	sp, #28
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122cc:	2501      	movs	r5, #1
 80122ce:	4628      	mov	r0, r5
 80122d0:	b007      	add	sp, #28
 80122d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80122da:	4628      	mov	r0, r5
 80122dc:	b007      	add	sp, #28
 80122de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122e2:	250b      	movs	r5, #11
 80122e4:	4628      	mov	r0, r5
 80122e6:	b007      	add	sp, #28
 80122e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ec:	1b80      	subs	r0, r0, r6
 80122ee:	eb6c 0107 	sbc.w	r1, ip, r7
 80122f2:	3801      	subs	r0, #1
 80122f4:	f161 0100 	sbc.w	r1, r1, #0
 80122f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80122fc:	f7ed fff8 	bl	80002f0 <__aeabi_ldivmod>
 8012300:	9b02      	ldr	r3, [sp, #8]
 8012302:	3001      	adds	r0, #1
 8012304:	f141 0100 	adc.w	r1, r1, #0
 8012308:	fb00 f303 	mul.w	r3, r0, r3
 801230c:	fb01 330a 	mla	r3, r1, sl, r3
 8012310:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012314:	1986      	adds	r6, r0, r6
 8012316:	4453      	add	r3, sl
 8012318:	eb43 0707 	adc.w	r7, r3, r7
 801231c:	e7b9      	b.n	8012292 <rcl_timer_call+0x96>
 801231e:	bf00      	nop

08012320 <rcl_timer_is_ready>:
 8012320:	b570      	push	{r4, r5, r6, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	b378      	cbz	r0, 8012386 <rcl_timer_is_ready+0x66>
 8012326:	6803      	ldr	r3, [r0, #0]
 8012328:	4604      	mov	r4, r0
 801232a:	b383      	cbz	r3, 801238e <rcl_timer_is_ready+0x6e>
 801232c:	460d      	mov	r5, r1
 801232e:	b351      	cbz	r1, 8012386 <rcl_timer_is_ready+0x66>
 8012330:	f3bf 8f5b 	dmb	ish
 8012334:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012338:	f3bf 8f5b 	dmb	ish
 801233c:	b953      	cbnz	r3, 8012354 <rcl_timer_is_ready+0x34>
 801233e:	6803      	ldr	r3, [r0, #0]
 8012340:	4669      	mov	r1, sp
 8012342:	6818      	ldr	r0, [r3, #0]
 8012344:	f7ff fd44 	bl	8011dd0 <rcl_clock_get_now>
 8012348:	4606      	mov	r6, r0
 801234a:	b140      	cbz	r0, 801235e <rcl_timer_is_ready+0x3e>
 801234c:	f240 3321 	movw	r3, #801	@ 0x321
 8012350:	4298      	cmp	r0, r3
 8012352:	d101      	bne.n	8012358 <rcl_timer_is_ready+0x38>
 8012354:	2600      	movs	r6, #0
 8012356:	702e      	strb	r6, [r5, #0]
 8012358:	4630      	mov	r0, r6
 801235a:	b002      	add	sp, #8
 801235c:	bd70      	pop	{r4, r5, r6, pc}
 801235e:	6820      	ldr	r0, [r4, #0]
 8012360:	2105      	movs	r1, #5
 8012362:	3028      	adds	r0, #40	@ 0x28
 8012364:	f001 fc10 	bl	8013b88 <__atomic_load_8>
 8012368:	9b00      	ldr	r3, [sp, #0]
 801236a:	1ac0      	subs	r0, r0, r3
 801236c:	9b01      	ldr	r3, [sp, #4]
 801236e:	eb61 0103 	sbc.w	r1, r1, r3
 8012372:	2801      	cmp	r0, #1
 8012374:	f171 0300 	sbcs.w	r3, r1, #0
 8012378:	bfb4      	ite	lt
 801237a:	2301      	movlt	r3, #1
 801237c:	2300      	movge	r3, #0
 801237e:	4630      	mov	r0, r6
 8012380:	702b      	strb	r3, [r5, #0]
 8012382:	b002      	add	sp, #8
 8012384:	bd70      	pop	{r4, r5, r6, pc}
 8012386:	260b      	movs	r6, #11
 8012388:	4630      	mov	r0, r6
 801238a:	b002      	add	sp, #8
 801238c:	bd70      	pop	{r4, r5, r6, pc}
 801238e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012392:	e7e1      	b.n	8012358 <rcl_timer_is_ready+0x38>

08012394 <rcl_timer_get_time_until_next_call>:
 8012394:	b570      	push	{r4, r5, r6, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	b330      	cbz	r0, 80123e8 <rcl_timer_get_time_until_next_call+0x54>
 801239a:	6803      	ldr	r3, [r0, #0]
 801239c:	4604      	mov	r4, r0
 801239e:	b33b      	cbz	r3, 80123f0 <rcl_timer_get_time_until_next_call+0x5c>
 80123a0:	460d      	mov	r5, r1
 80123a2:	b309      	cbz	r1, 80123e8 <rcl_timer_get_time_until_next_call+0x54>
 80123a4:	f3bf 8f5b 	dmb	ish
 80123a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80123ac:	f3bf 8f5b 	dmb	ish
 80123b0:	b9ab      	cbnz	r3, 80123de <rcl_timer_get_time_until_next_call+0x4a>
 80123b2:	6803      	ldr	r3, [r0, #0]
 80123b4:	4669      	mov	r1, sp
 80123b6:	6818      	ldr	r0, [r3, #0]
 80123b8:	f7ff fd0a 	bl	8011dd0 <rcl_clock_get_now>
 80123bc:	4606      	mov	r6, r0
 80123be:	b958      	cbnz	r0, 80123d8 <rcl_timer_get_time_until_next_call+0x44>
 80123c0:	6820      	ldr	r0, [r4, #0]
 80123c2:	2105      	movs	r1, #5
 80123c4:	3028      	adds	r0, #40	@ 0x28
 80123c6:	f001 fbdf 	bl	8013b88 <__atomic_load_8>
 80123ca:	9b00      	ldr	r3, [sp, #0]
 80123cc:	1ac0      	subs	r0, r0, r3
 80123ce:	9b01      	ldr	r3, [sp, #4]
 80123d0:	6028      	str	r0, [r5, #0]
 80123d2:	eb61 0103 	sbc.w	r1, r1, r3
 80123d6:	6069      	str	r1, [r5, #4]
 80123d8:	4630      	mov	r0, r6
 80123da:	b002      	add	sp, #8
 80123dc:	bd70      	pop	{r4, r5, r6, pc}
 80123de:	f240 3621 	movw	r6, #801	@ 0x321
 80123e2:	4630      	mov	r0, r6
 80123e4:	b002      	add	sp, #8
 80123e6:	bd70      	pop	{r4, r5, r6, pc}
 80123e8:	260b      	movs	r6, #11
 80123ea:	4630      	mov	r0, r6
 80123ec:	b002      	add	sp, #8
 80123ee:	bd70      	pop	{r4, r5, r6, pc}
 80123f0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80123f4:	e7f0      	b.n	80123d8 <rcl_timer_get_time_until_next_call+0x44>
 80123f6:	bf00      	nop

080123f8 <rcl_timer_get_guard_condition>:
 80123f8:	b130      	cbz	r0, 8012408 <rcl_timer_get_guard_condition+0x10>
 80123fa:	6800      	ldr	r0, [r0, #0]
 80123fc:	b120      	cbz	r0, 8012408 <rcl_timer_get_guard_condition+0x10>
 80123fe:	68c3      	ldr	r3, [r0, #12]
 8012400:	b10b      	cbz	r3, 8012406 <rcl_timer_get_guard_condition+0xe>
 8012402:	3008      	adds	r0, #8
 8012404:	4770      	bx	lr
 8012406:	4618      	mov	r0, r3
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop

0801240c <rcl_validate_enclave_name_with_size>:
 801240c:	b378      	cbz	r0, 801246e <rcl_validate_enclave_name_with_size+0x62>
 801240e:	b570      	push	{r4, r5, r6, lr}
 8012410:	4615      	mov	r5, r2
 8012412:	b0c2      	sub	sp, #264	@ 0x108
 8012414:	b302      	cbz	r2, 8012458 <rcl_validate_enclave_name_with_size+0x4c>
 8012416:	461e      	mov	r6, r3
 8012418:	466a      	mov	r2, sp
 801241a:	ab01      	add	r3, sp, #4
 801241c:	460c      	mov	r4, r1
 801241e:	f002 f815 	bl	801444c <rmw_validate_namespace_with_size>
 8012422:	4684      	mov	ip, r0
 8012424:	b9e8      	cbnz	r0, 8012462 <rcl_validate_enclave_name_with_size+0x56>
 8012426:	9b00      	ldr	r3, [sp, #0]
 8012428:	b923      	cbnz	r3, 8012434 <rcl_validate_enclave_name_with_size+0x28>
 801242a:	2300      	movs	r3, #0
 801242c:	602b      	str	r3, [r5, #0]
 801242e:	4660      	mov	r0, ip
 8012430:	b042      	add	sp, #264	@ 0x108
 8012432:	bd70      	pop	{r4, r5, r6, pc}
 8012434:	2b07      	cmp	r3, #7
 8012436:	d007      	beq.n	8012448 <rcl_validate_enclave_name_with_size+0x3c>
 8012438:	1e5a      	subs	r2, r3, #1
 801243a:	2a05      	cmp	r2, #5
 801243c:	d833      	bhi.n	80124a6 <rcl_validate_enclave_name_with_size+0x9a>
 801243e:	e8df f002 	tbb	[pc, r2]
 8012442:	2c2f      	.short	0x2c2f
 8012444:	1a232629 	.word	0x1a232629
 8012448:	2cff      	cmp	r4, #255	@ 0xff
 801244a:	d9ee      	bls.n	801242a <rcl_validate_enclave_name_with_size+0x1e>
 801244c:	602b      	str	r3, [r5, #0]
 801244e:	2e00      	cmp	r6, #0
 8012450:	d0ed      	beq.n	801242e <rcl_validate_enclave_name_with_size+0x22>
 8012452:	23fe      	movs	r3, #254	@ 0xfe
 8012454:	6033      	str	r3, [r6, #0]
 8012456:	e7ea      	b.n	801242e <rcl_validate_enclave_name_with_size+0x22>
 8012458:	f04f 0c0b 	mov.w	ip, #11
 801245c:	4660      	mov	r0, ip
 801245e:	b042      	add	sp, #264	@ 0x108
 8012460:	bd70      	pop	{r4, r5, r6, pc}
 8012462:	f7fe fe63 	bl	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 8012466:	4684      	mov	ip, r0
 8012468:	4660      	mov	r0, ip
 801246a:	b042      	add	sp, #264	@ 0x108
 801246c:	bd70      	pop	{r4, r5, r6, pc}
 801246e:	f04f 0c0b 	mov.w	ip, #11
 8012472:	4660      	mov	r0, ip
 8012474:	4770      	bx	lr
 8012476:	2306      	movs	r3, #6
 8012478:	602b      	str	r3, [r5, #0]
 801247a:	2e00      	cmp	r6, #0
 801247c:	d0d7      	beq.n	801242e <rcl_validate_enclave_name_with_size+0x22>
 801247e:	9b01      	ldr	r3, [sp, #4]
 8012480:	6033      	str	r3, [r6, #0]
 8012482:	4660      	mov	r0, ip
 8012484:	b042      	add	sp, #264	@ 0x108
 8012486:	bd70      	pop	{r4, r5, r6, pc}
 8012488:	2305      	movs	r3, #5
 801248a:	602b      	str	r3, [r5, #0]
 801248c:	e7f5      	b.n	801247a <rcl_validate_enclave_name_with_size+0x6e>
 801248e:	2304      	movs	r3, #4
 8012490:	602b      	str	r3, [r5, #0]
 8012492:	e7f2      	b.n	801247a <rcl_validate_enclave_name_with_size+0x6e>
 8012494:	2303      	movs	r3, #3
 8012496:	602b      	str	r3, [r5, #0]
 8012498:	e7ef      	b.n	801247a <rcl_validate_enclave_name_with_size+0x6e>
 801249a:	2302      	movs	r3, #2
 801249c:	602b      	str	r3, [r5, #0]
 801249e:	e7ec      	b.n	801247a <rcl_validate_enclave_name_with_size+0x6e>
 80124a0:	2301      	movs	r3, #1
 80124a2:	602b      	str	r3, [r5, #0]
 80124a4:	e7e9      	b.n	801247a <rcl_validate_enclave_name_with_size+0x6e>
 80124a6:	4a04      	ldr	r2, [pc, #16]	@ (80124b8 <rcl_validate_enclave_name_with_size+0xac>)
 80124a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80124ac:	a802      	add	r0, sp, #8
 80124ae:	f001 fd25 	bl	8013efc <rcutils_snprintf>
 80124b2:	f04f 0c01 	mov.w	ip, #1
 80124b6:	e7ba      	b.n	801242e <rcl_validate_enclave_name_with_size+0x22>
 80124b8:	0801849c 	.word	0x0801849c

080124bc <rcl_validate_enclave_name>:
 80124bc:	b168      	cbz	r0, 80124da <rcl_validate_enclave_name+0x1e>
 80124be:	b570      	push	{r4, r5, r6, lr}
 80124c0:	460d      	mov	r5, r1
 80124c2:	4616      	mov	r6, r2
 80124c4:	4604      	mov	r4, r0
 80124c6:	f7ed feb5 	bl	8000234 <strlen>
 80124ca:	4633      	mov	r3, r6
 80124cc:	4601      	mov	r1, r0
 80124ce:	462a      	mov	r2, r5
 80124d0:	4620      	mov	r0, r4
 80124d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124d6:	f7ff bf99 	b.w	801240c <rcl_validate_enclave_name_with_size>
 80124da:	200b      	movs	r0, #11
 80124dc:	4770      	bx	lr
 80124de:	bf00      	nop

080124e0 <rcl_get_zero_initialized_wait_set>:
 80124e0:	b510      	push	{r4, lr}
 80124e2:	4c08      	ldr	r4, [pc, #32]	@ (8012504 <rcl_get_zero_initialized_wait_set+0x24>)
 80124e4:	4686      	mov	lr, r0
 80124e6:	4684      	mov	ip, r0
 80124e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124fa:	6823      	ldr	r3, [r4, #0]
 80124fc:	f8cc 3000 	str.w	r3, [ip]
 8012500:	4670      	mov	r0, lr
 8012502:	bd10      	pop	{r4, pc}
 8012504:	080184fc 	.word	0x080184fc

08012508 <rcl_wait_set_is_valid>:
 8012508:	b118      	cbz	r0, 8012512 <rcl_wait_set_is_valid+0xa>
 801250a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801250c:	3800      	subs	r0, #0
 801250e:	bf18      	it	ne
 8012510:	2001      	movne	r0, #1
 8012512:	4770      	bx	lr

08012514 <rcl_wait_set_fini>:
 8012514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012518:	b082      	sub	sp, #8
 801251a:	2800      	cmp	r0, #0
 801251c:	f000 8095 	beq.w	801264a <rcl_wait_set_fini+0x136>
 8012520:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012522:	4604      	mov	r4, r0
 8012524:	2e00      	cmp	r6, #0
 8012526:	f000 808c 	beq.w	8012642 <rcl_wait_set_fini+0x12e>
 801252a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801252c:	f002 fd48 	bl	8014fc0 <rmw_destroy_wait_set>
 8012530:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012532:	1e06      	subs	r6, r0, #0
 8012534:	bf18      	it	ne
 8012536:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801253a:	2d00      	cmp	r5, #0
 801253c:	f000 8081 	beq.w	8012642 <rcl_wait_set_fini+0x12e>
 8012540:	6820      	ldr	r0, [r4, #0]
 8012542:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012546:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012548:	2700      	movs	r7, #0
 801254a:	6067      	str	r7, [r4, #4]
 801254c:	602f      	str	r7, [r5, #0]
 801254e:	b120      	cbz	r0, 801255a <rcl_wait_set_fini+0x46>
 8012550:	9101      	str	r1, [sp, #4]
 8012552:	47c0      	blx	r8
 8012554:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012556:	9901      	ldr	r1, [sp, #4]
 8012558:	6027      	str	r7, [r4, #0]
 801255a:	68a8      	ldr	r0, [r5, #8]
 801255c:	b120      	cbz	r0, 8012568 <rcl_wait_set_fini+0x54>
 801255e:	47c0      	blx	r8
 8012560:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012562:	2300      	movs	r3, #0
 8012564:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8012568:	68a0      	ldr	r0, [r4, #8]
 801256a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801256c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801256e:	f04f 0800 	mov.w	r8, #0
 8012572:	f8c4 800c 	str.w	r8, [r4, #12]
 8012576:	f8c5 800c 	str.w	r8, [r5, #12]
 801257a:	b128      	cbz	r0, 8012588 <rcl_wait_set_fini+0x74>
 801257c:	47b8      	blx	r7
 801257e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012580:	f8c4 8008 	str.w	r8, [r4, #8]
 8012584:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012586:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012588:	6968      	ldr	r0, [r5, #20]
 801258a:	f04f 0800 	mov.w	r8, #0
 801258e:	f8c5 8010 	str.w	r8, [r5, #16]
 8012592:	b128      	cbz	r0, 80125a0 <rcl_wait_set_fini+0x8c>
 8012594:	47b8      	blx	r7
 8012596:	f8c5 8014 	str.w	r8, [r5, #20]
 801259a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801259c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801259e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80125a0:	6920      	ldr	r0, [r4, #16]
 80125a2:	f04f 0800 	mov.w	r8, #0
 80125a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80125aa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80125ae:	b128      	cbz	r0, 80125bc <rcl_wait_set_fini+0xa8>
 80125b0:	47b8      	blx	r7
 80125b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80125b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80125ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80125bc:	69a0      	ldr	r0, [r4, #24]
 80125be:	f04f 0800 	mov.w	r8, #0
 80125c2:	f8c4 801c 	str.w	r8, [r4, #28]
 80125c6:	f8c5 8018 	str.w	r8, [r5, #24]
 80125ca:	b128      	cbz	r0, 80125d8 <rcl_wait_set_fini+0xc4>
 80125cc:	9101      	str	r1, [sp, #4]
 80125ce:	47b8      	blx	r7
 80125d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125d2:	9901      	ldr	r1, [sp, #4]
 80125d4:	f8c4 8018 	str.w	r8, [r4, #24]
 80125d8:	6a28      	ldr	r0, [r5, #32]
 80125da:	b120      	cbz	r0, 80125e6 <rcl_wait_set_fini+0xd2>
 80125dc:	47b8      	blx	r7
 80125de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125e0:	2300      	movs	r3, #0
 80125e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80125e6:	6a20      	ldr	r0, [r4, #32]
 80125e8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80125ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80125ee:	2700      	movs	r7, #0
 80125f0:	6267      	str	r7, [r4, #36]	@ 0x24
 80125f2:	626f      	str	r7, [r5, #36]	@ 0x24
 80125f4:	b120      	cbz	r0, 8012600 <rcl_wait_set_fini+0xec>
 80125f6:	9101      	str	r1, [sp, #4]
 80125f8:	47c0      	blx	r8
 80125fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80125fc:	9901      	ldr	r1, [sp, #4]
 80125fe:	6227      	str	r7, [r4, #32]
 8012600:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8012602:	b120      	cbz	r0, 801260e <rcl_wait_set_fini+0xfa>
 8012604:	47c0      	blx	r8
 8012606:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012608:	2300      	movs	r3, #0
 801260a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801260e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012610:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012614:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012616:	2700      	movs	r7, #0
 8012618:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801261a:	632f      	str	r7, [r5, #48]	@ 0x30
 801261c:	b120      	cbz	r0, 8012628 <rcl_wait_set_fini+0x114>
 801261e:	9101      	str	r1, [sp, #4]
 8012620:	47c0      	blx	r8
 8012622:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012624:	9901      	ldr	r1, [sp, #4]
 8012626:	62a7      	str	r7, [r4, #40]	@ 0x28
 8012628:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801262a:	b120      	cbz	r0, 8012636 <rcl_wait_set_fini+0x122>
 801262c:	47c0      	blx	r8
 801262e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012630:	2300      	movs	r3, #0
 8012632:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8012636:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8012638:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801263a:	4628      	mov	r0, r5
 801263c:	4798      	blx	r3
 801263e:	2300      	movs	r3, #0
 8012640:	6323      	str	r3, [r4, #48]	@ 0x30
 8012642:	4630      	mov	r0, r6
 8012644:	b002      	add	sp, #8
 8012646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801264a:	260b      	movs	r6, #11
 801264c:	4630      	mov	r0, r6
 801264e:	b002      	add	sp, #8
 8012650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012654 <rcl_wait_set_add_subscription>:
 8012654:	b318      	cbz	r0, 801269e <rcl_wait_set_add_subscription+0x4a>
 8012656:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012658:	b570      	push	{r4, r5, r6, lr}
 801265a:	4604      	mov	r4, r0
 801265c:	b30b      	cbz	r3, 80126a2 <rcl_wait_set_add_subscription+0x4e>
 801265e:	b319      	cbz	r1, 80126a8 <rcl_wait_set_add_subscription+0x54>
 8012660:	681d      	ldr	r5, [r3, #0]
 8012662:	6840      	ldr	r0, [r0, #4]
 8012664:	4285      	cmp	r5, r0
 8012666:	d217      	bcs.n	8012698 <rcl_wait_set_add_subscription+0x44>
 8012668:	6820      	ldr	r0, [r4, #0]
 801266a:	1c6e      	adds	r6, r5, #1
 801266c:	601e      	str	r6, [r3, #0]
 801266e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012672:	b102      	cbz	r2, 8012676 <rcl_wait_set_add_subscription+0x22>
 8012674:	6015      	str	r5, [r2, #0]
 8012676:	4608      	mov	r0, r1
 8012678:	f7ff fb0a 	bl	8011c90 <rcl_subscription_get_rmw_handle>
 801267c:	b150      	cbz	r0, 8012694 <rcl_wait_set_add_subscription+0x40>
 801267e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012680:	6842      	ldr	r2, [r0, #4]
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012688:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801268a:	6853      	ldr	r3, [r2, #4]
 801268c:	3301      	adds	r3, #1
 801268e:	2000      	movs	r0, #0
 8012690:	6053      	str	r3, [r2, #4]
 8012692:	bd70      	pop	{r4, r5, r6, pc}
 8012694:	2001      	movs	r0, #1
 8012696:	bd70      	pop	{r4, r5, r6, pc}
 8012698:	f240 3086 	movw	r0, #902	@ 0x386
 801269c:	bd70      	pop	{r4, r5, r6, pc}
 801269e:	200b      	movs	r0, #11
 80126a0:	4770      	bx	lr
 80126a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80126a6:	bd70      	pop	{r4, r5, r6, pc}
 80126a8:	200b      	movs	r0, #11
 80126aa:	bd70      	pop	{r4, r5, r6, pc}

080126ac <rcl_wait_set_clear>:
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d073      	beq.n	8012798 <rcl_wait_set_clear+0xec>
 80126b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80126b2:	b510      	push	{r4, lr}
 80126b4:	4604      	mov	r4, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d070      	beq.n	801279c <rcl_wait_set_clear+0xf0>
 80126ba:	6800      	ldr	r0, [r0, #0]
 80126bc:	b138      	cbz	r0, 80126ce <rcl_wait_set_clear+0x22>
 80126be:	6862      	ldr	r2, [r4, #4]
 80126c0:	2100      	movs	r1, #0
 80126c2:	0092      	lsls	r2, r2, #2
 80126c4:	f004 fb68 	bl	8016d98 <memset>
 80126c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126ca:	2200      	movs	r2, #0
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	68a0      	ldr	r0, [r4, #8]
 80126d0:	b138      	cbz	r0, 80126e2 <rcl_wait_set_clear+0x36>
 80126d2:	68e2      	ldr	r2, [r4, #12]
 80126d4:	2100      	movs	r1, #0
 80126d6:	0092      	lsls	r2, r2, #2
 80126d8:	f004 fb5e 	bl	8016d98 <memset>
 80126dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126de:	2200      	movs	r2, #0
 80126e0:	60da      	str	r2, [r3, #12]
 80126e2:	69a0      	ldr	r0, [r4, #24]
 80126e4:	b138      	cbz	r0, 80126f6 <rcl_wait_set_clear+0x4a>
 80126e6:	69e2      	ldr	r2, [r4, #28]
 80126e8:	2100      	movs	r1, #0
 80126ea:	0092      	lsls	r2, r2, #2
 80126ec:	f004 fb54 	bl	8016d98 <memset>
 80126f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126f2:	2200      	movs	r2, #0
 80126f4:	619a      	str	r2, [r3, #24]
 80126f6:	6a20      	ldr	r0, [r4, #32]
 80126f8:	b138      	cbz	r0, 801270a <rcl_wait_set_clear+0x5e>
 80126fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80126fc:	2100      	movs	r1, #0
 80126fe:	0092      	lsls	r2, r2, #2
 8012700:	f004 fb4a 	bl	8016d98 <memset>
 8012704:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012706:	2200      	movs	r2, #0
 8012708:	625a      	str	r2, [r3, #36]	@ 0x24
 801270a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801270c:	b138      	cbz	r0, 801271e <rcl_wait_set_clear+0x72>
 801270e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012710:	2100      	movs	r1, #0
 8012712:	0092      	lsls	r2, r2, #2
 8012714:	f004 fb40 	bl	8016d98 <memset>
 8012718:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801271a:	2200      	movs	r2, #0
 801271c:	631a      	str	r2, [r3, #48]	@ 0x30
 801271e:	6920      	ldr	r0, [r4, #16]
 8012720:	b138      	cbz	r0, 8012732 <rcl_wait_set_clear+0x86>
 8012722:	6962      	ldr	r2, [r4, #20]
 8012724:	2100      	movs	r1, #0
 8012726:	0092      	lsls	r2, r2, #2
 8012728:	f004 fb36 	bl	8016d98 <memset>
 801272c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801272e:	2200      	movs	r2, #0
 8012730:	641a      	str	r2, [r3, #64]	@ 0x40
 8012732:	6898      	ldr	r0, [r3, #8]
 8012734:	b138      	cbz	r0, 8012746 <rcl_wait_set_clear+0x9a>
 8012736:	685a      	ldr	r2, [r3, #4]
 8012738:	2100      	movs	r1, #0
 801273a:	0092      	lsls	r2, r2, #2
 801273c:	f004 fb2c 	bl	8016d98 <memset>
 8012740:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012742:	2200      	movs	r2, #0
 8012744:	605a      	str	r2, [r3, #4]
 8012746:	6958      	ldr	r0, [r3, #20]
 8012748:	b138      	cbz	r0, 801275a <rcl_wait_set_clear+0xae>
 801274a:	691a      	ldr	r2, [r3, #16]
 801274c:	2100      	movs	r1, #0
 801274e:	0092      	lsls	r2, r2, #2
 8012750:	f004 fb22 	bl	8016d98 <memset>
 8012754:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012756:	2200      	movs	r2, #0
 8012758:	611a      	str	r2, [r3, #16]
 801275a:	6a18      	ldr	r0, [r3, #32]
 801275c:	b138      	cbz	r0, 801276e <rcl_wait_set_clear+0xc2>
 801275e:	69da      	ldr	r2, [r3, #28]
 8012760:	2100      	movs	r1, #0
 8012762:	0092      	lsls	r2, r2, #2
 8012764:	f004 fb18 	bl	8016d98 <memset>
 8012768:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801276a:	2200      	movs	r2, #0
 801276c:	61da      	str	r2, [r3, #28]
 801276e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012770:	b138      	cbz	r0, 8012782 <rcl_wait_set_clear+0xd6>
 8012772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012774:	2100      	movs	r1, #0
 8012776:	0092      	lsls	r2, r2, #2
 8012778:	f004 fb0e 	bl	8016d98 <memset>
 801277c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801277e:	2200      	movs	r2, #0
 8012780:	629a      	str	r2, [r3, #40]	@ 0x28
 8012782:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012784:	b138      	cbz	r0, 8012796 <rcl_wait_set_clear+0xea>
 8012786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012788:	2100      	movs	r1, #0
 801278a:	0092      	lsls	r2, r2, #2
 801278c:	f004 fb04 	bl	8016d98 <memset>
 8012790:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012792:	2000      	movs	r0, #0
 8012794:	6358      	str	r0, [r3, #52]	@ 0x34
 8012796:	bd10      	pop	{r4, pc}
 8012798:	200b      	movs	r0, #11
 801279a:	4770      	bx	lr
 801279c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80127a0:	bd10      	pop	{r4, pc}
 80127a2:	bf00      	nop

080127a4 <rcl_wait_set_resize>:
 80127a4:	2800      	cmp	r0, #0
 80127a6:	f000 8185 	beq.w	8012ab4 <rcl_wait_set_resize+0x310>
 80127aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80127b0:	b083      	sub	sp, #12
 80127b2:	4605      	mov	r5, r0
 80127b4:	2c00      	cmp	r4, #0
 80127b6:	f000 817f 	beq.w	8012ab8 <rcl_wait_set_resize+0x314>
 80127ba:	f04f 0900 	mov.w	r9, #0
 80127be:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80127c2:	461f      	mov	r7, r3
 80127c4:	4688      	mov	r8, r1
 80127c6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80127ca:	4616      	mov	r6, r2
 80127cc:	f8c0 9004 	str.w	r9, [r0, #4]
 80127d0:	f8c4 9000 	str.w	r9, [r4]
 80127d4:	2900      	cmp	r1, #0
 80127d6:	f000 80bd 	beq.w	8012954 <rcl_wait_set_resize+0x1b0>
 80127da:	008c      	lsls	r4, r1, #2
 80127dc:	6800      	ldr	r0, [r0, #0]
 80127de:	9301      	str	r3, [sp, #4]
 80127e0:	4652      	mov	r2, sl
 80127e2:	4621      	mov	r1, r4
 80127e4:	4798      	blx	r3
 80127e6:	9b01      	ldr	r3, [sp, #4]
 80127e8:	6028      	str	r0, [r5, #0]
 80127ea:	2800      	cmp	r0, #0
 80127ec:	f000 80cb 	beq.w	8012986 <rcl_wait_set_resize+0x1e2>
 80127f0:	4622      	mov	r2, r4
 80127f2:	4649      	mov	r1, r9
 80127f4:	9301      	str	r3, [sp, #4]
 80127f6:	f004 facf 	bl	8016d98 <memset>
 80127fa:	f8c5 8004 	str.w	r8, [r5, #4]
 80127fe:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8012802:	9b01      	ldr	r3, [sp, #4]
 8012804:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012808:	f8c8 9004 	str.w	r9, [r8, #4]
 801280c:	4652      	mov	r2, sl
 801280e:	4621      	mov	r1, r4
 8012810:	4798      	blx	r3
 8012812:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012814:	f8c8 0008 	str.w	r0, [r8, #8]
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	2b00      	cmp	r3, #0
 801281c:	f000 80ac 	beq.w	8012978 <rcl_wait_set_resize+0x1d4>
 8012820:	4622      	mov	r2, r4
 8012822:	4649      	mov	r1, r9
 8012824:	4618      	mov	r0, r3
 8012826:	f004 fab7 	bl	8016d98 <memset>
 801282a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801282c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012830:	f04f 0800 	mov.w	r8, #0
 8012834:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8012838:	f8c5 800c 	str.w	r8, [r5, #12]
 801283c:	f8c4 800c 	str.w	r8, [r4, #12]
 8012840:	2e00      	cmp	r6, #0
 8012842:	f040 80a4 	bne.w	801298e <rcl_wait_set_resize+0x1ea>
 8012846:	68a8      	ldr	r0, [r5, #8]
 8012848:	b128      	cbz	r0, 8012856 <rcl_wait_set_resize+0xb2>
 801284a:	4649      	mov	r1, r9
 801284c:	4790      	blx	r2
 801284e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012850:	60ae      	str	r6, [r5, #8]
 8012852:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012856:	f04f 0800 	mov.w	r8, #0
 801285a:	19f6      	adds	r6, r6, r7
 801285c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012860:	f040 80ac 	bne.w	80129bc <rcl_wait_set_resize+0x218>
 8012864:	6960      	ldr	r0, [r4, #20]
 8012866:	b130      	cbz	r0, 8012876 <rcl_wait_set_resize+0xd2>
 8012868:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801286a:	4649      	mov	r1, r9
 801286c:	4798      	blx	r3
 801286e:	6166      	str	r6, [r4, #20]
 8012870:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012872:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012876:	2600      	movs	r6, #0
 8012878:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801287c:	616e      	str	r6, [r5, #20]
 801287e:	6426      	str	r6, [r4, #64]	@ 0x40
 8012880:	2f00      	cmp	r7, #0
 8012882:	f040 80ad 	bne.w	80129e0 <rcl_wait_set_resize+0x23c>
 8012886:	6928      	ldr	r0, [r5, #16]
 8012888:	b138      	cbz	r0, 801289a <rcl_wait_set_resize+0xf6>
 801288a:	4649      	mov	r1, r9
 801288c:	47d0      	blx	sl
 801288e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012890:	612f      	str	r7, [r5, #16]
 8012892:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012896:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801289a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801289c:	2600      	movs	r6, #0
 801289e:	61ee      	str	r6, [r5, #28]
 80128a0:	61a6      	str	r6, [r4, #24]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	f040 80af 	bne.w	8012a06 <rcl_wait_set_resize+0x262>
 80128a8:	69a8      	ldr	r0, [r5, #24]
 80128aa:	b120      	cbz	r0, 80128b6 <rcl_wait_set_resize+0x112>
 80128ac:	4649      	mov	r1, r9
 80128ae:	47d0      	blx	sl
 80128b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128b4:	61ab      	str	r3, [r5, #24]
 80128b6:	6a20      	ldr	r0, [r4, #32]
 80128b8:	b128      	cbz	r0, 80128c6 <rcl_wait_set_resize+0x122>
 80128ba:	4649      	mov	r1, r9
 80128bc:	47d0      	blx	sl
 80128be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128c0:	2300      	movs	r3, #0
 80128c2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80128c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80128c8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80128ca:	2600      	movs	r6, #0
 80128cc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80128d0:	626e      	str	r6, [r5, #36]	@ 0x24
 80128d2:	6266      	str	r6, [r4, #36]	@ 0x24
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	f000 80b6 	beq.w	8012a46 <rcl_wait_set_resize+0x2a2>
 80128da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80128de:	6a28      	ldr	r0, [r5, #32]
 80128e0:	463a      	mov	r2, r7
 80128e2:	4651      	mov	r1, sl
 80128e4:	47c8      	blx	r9
 80128e6:	6228      	str	r0, [r5, #32]
 80128e8:	2800      	cmp	r0, #0
 80128ea:	d04c      	beq.n	8012986 <rcl_wait_set_resize+0x1e2>
 80128ec:	4652      	mov	r2, sl
 80128ee:	4631      	mov	r1, r6
 80128f0:	f004 fa52 	bl	8016d98 <memset>
 80128f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80128f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80128f8:	626b      	str	r3, [r5, #36]	@ 0x24
 80128fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80128fc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80128fe:	463a      	mov	r2, r7
 8012900:	4651      	mov	r1, sl
 8012902:	47c8      	blx	r9
 8012904:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012906:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8012908:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801290a:	2c00      	cmp	r4, #0
 801290c:	f000 80f0 	beq.w	8012af0 <rcl_wait_set_resize+0x34c>
 8012910:	4620      	mov	r0, r4
 8012912:	4652      	mov	r2, sl
 8012914:	4631      	mov	r1, r6
 8012916:	f004 fa3f 	bl	8016d98 <memset>
 801291a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801291c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801291e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012920:	2600      	movs	r6, #0
 8012922:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012926:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8012928:	6326      	str	r6, [r4, #48]	@ 0x30
 801292a:	2b00      	cmp	r3, #0
 801292c:	f040 809d 	bne.w	8012a6a <rcl_wait_set_resize+0x2c6>
 8012930:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012932:	b120      	cbz	r0, 801293e <rcl_wait_set_resize+0x19a>
 8012934:	4639      	mov	r1, r7
 8012936:	47c0      	blx	r8
 8012938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801293a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801293c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801293e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012940:	b310      	cbz	r0, 8012988 <rcl_wait_set_resize+0x1e4>
 8012942:	4639      	mov	r1, r7
 8012944:	47c0      	blx	r8
 8012946:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012948:	2000      	movs	r0, #0
 801294a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801294e:	b003      	add	sp, #12
 8012950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012954:	6800      	ldr	r0, [r0, #0]
 8012956:	b120      	cbz	r0, 8012962 <rcl_wait_set_resize+0x1be>
 8012958:	4651      	mov	r1, sl
 801295a:	47d8      	blx	fp
 801295c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801295e:	f8c5 8000 	str.w	r8, [r5]
 8012962:	68a0      	ldr	r0, [r4, #8]
 8012964:	2800      	cmp	r0, #0
 8012966:	f43f af61 	beq.w	801282c <rcl_wait_set_resize+0x88>
 801296a:	4651      	mov	r1, sl
 801296c:	47d8      	blx	fp
 801296e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012970:	2300      	movs	r3, #0
 8012972:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8012976:	e759      	b.n	801282c <rcl_wait_set_resize+0x88>
 8012978:	6828      	ldr	r0, [r5, #0]
 801297a:	9301      	str	r3, [sp, #4]
 801297c:	4651      	mov	r1, sl
 801297e:	47d8      	blx	fp
 8012980:	9b01      	ldr	r3, [sp, #4]
 8012982:	e9c5 3300 	strd	r3, r3, [r5]
 8012986:	200a      	movs	r0, #10
 8012988:	b003      	add	sp, #12
 801298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801298e:	00b4      	lsls	r4, r6, #2
 8012990:	68a8      	ldr	r0, [r5, #8]
 8012992:	464a      	mov	r2, r9
 8012994:	4621      	mov	r1, r4
 8012996:	4798      	blx	r3
 8012998:	60a8      	str	r0, [r5, #8]
 801299a:	2800      	cmp	r0, #0
 801299c:	d0f3      	beq.n	8012986 <rcl_wait_set_resize+0x1e2>
 801299e:	4622      	mov	r2, r4
 80129a0:	4641      	mov	r1, r8
 80129a2:	f004 f9f9 	bl	8016d98 <memset>
 80129a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129a8:	60ee      	str	r6, [r5, #12]
 80129aa:	f04f 0800 	mov.w	r8, #0
 80129ae:	19f6      	adds	r6, r6, r7
 80129b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80129b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80129b8:	f43f af54 	beq.w	8012864 <rcl_wait_set_resize+0xc0>
 80129bc:	00b6      	lsls	r6, r6, #2
 80129be:	464a      	mov	r2, r9
 80129c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80129c2:	6960      	ldr	r0, [r4, #20]
 80129c4:	4631      	mov	r1, r6
 80129c6:	4798      	blx	r3
 80129c8:	4681      	mov	r9, r0
 80129ca:	6160      	str	r0, [r4, #20]
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d076      	beq.n	8012abe <rcl_wait_set_resize+0x31a>
 80129d0:	4632      	mov	r2, r6
 80129d2:	4641      	mov	r1, r8
 80129d4:	f004 f9e0 	bl	8016d98 <memset>
 80129d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80129de:	e74a      	b.n	8012876 <rcl_wait_set_resize+0xd2>
 80129e0:	00bc      	lsls	r4, r7, #2
 80129e2:	6928      	ldr	r0, [r5, #16]
 80129e4:	464a      	mov	r2, r9
 80129e6:	4621      	mov	r1, r4
 80129e8:	47c0      	blx	r8
 80129ea:	6128      	str	r0, [r5, #16]
 80129ec:	2800      	cmp	r0, #0
 80129ee:	d0ca      	beq.n	8012986 <rcl_wait_set_resize+0x1e2>
 80129f0:	4622      	mov	r2, r4
 80129f2:	4631      	mov	r1, r6
 80129f4:	f004 f9d0 	bl	8016d98 <memset>
 80129f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129fa:	616f      	str	r7, [r5, #20]
 80129fc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012a00:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012a04:	e749      	b.n	801289a <rcl_wait_set_resize+0xf6>
 8012a06:	009c      	lsls	r4, r3, #2
 8012a08:	69a8      	ldr	r0, [r5, #24]
 8012a0a:	464a      	mov	r2, r9
 8012a0c:	4621      	mov	r1, r4
 8012a0e:	47c0      	blx	r8
 8012a10:	61a8      	str	r0, [r5, #24]
 8012a12:	2800      	cmp	r0, #0
 8012a14:	d0b7      	beq.n	8012986 <rcl_wait_set_resize+0x1e2>
 8012a16:	4622      	mov	r2, r4
 8012a18:	4631      	mov	r1, r6
 8012a1a:	f004 f9bd 	bl	8016d98 <memset>
 8012a1e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8012a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a22:	61eb      	str	r3, [r5, #28]
 8012a24:	6a38      	ldr	r0, [r7, #32]
 8012a26:	61fe      	str	r6, [r7, #28]
 8012a28:	464a      	mov	r2, r9
 8012a2a:	4621      	mov	r1, r4
 8012a2c:	47c0      	blx	r8
 8012a2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a30:	6238      	str	r0, [r7, #32]
 8012a32:	6a1f      	ldr	r7, [r3, #32]
 8012a34:	2f00      	cmp	r7, #0
 8012a36:	d054      	beq.n	8012ae2 <rcl_wait_set_resize+0x33e>
 8012a38:	4622      	mov	r2, r4
 8012a3a:	4631      	mov	r1, r6
 8012a3c:	4638      	mov	r0, r7
 8012a3e:	f004 f9ab 	bl	8016d98 <memset>
 8012a42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a44:	e73f      	b.n	80128c6 <rcl_wait_set_resize+0x122>
 8012a46:	6a28      	ldr	r0, [r5, #32]
 8012a48:	b120      	cbz	r0, 8012a54 <rcl_wait_set_resize+0x2b0>
 8012a4a:	4639      	mov	r1, r7
 8012a4c:	47c0      	blx	r8
 8012a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a52:	622b      	str	r3, [r5, #32]
 8012a54:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012a56:	2800      	cmp	r0, #0
 8012a58:	f43f af60 	beq.w	801291c <rcl_wait_set_resize+0x178>
 8012a5c:	4639      	mov	r1, r7
 8012a5e:	47c0      	blx	r8
 8012a60:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a62:	2300      	movs	r3, #0
 8012a64:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8012a68:	e758      	b.n	801291c <rcl_wait_set_resize+0x178>
 8012a6a:	009c      	lsls	r4, r3, #2
 8012a6c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012a6e:	463a      	mov	r2, r7
 8012a70:	4621      	mov	r1, r4
 8012a72:	47c8      	blx	r9
 8012a74:	62a8      	str	r0, [r5, #40]	@ 0x28
 8012a76:	2800      	cmp	r0, #0
 8012a78:	d085      	beq.n	8012986 <rcl_wait_set_resize+0x1e2>
 8012a7a:	4622      	mov	r2, r4
 8012a7c:	4631      	mov	r1, r6
 8012a7e:	f004 f98b 	bl	8016d98 <memset>
 8012a82:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8012a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a88:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8012a8a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012a8e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8012a92:	463a      	mov	r2, r7
 8012a94:	4621      	mov	r1, r4
 8012a96:	47c8      	blx	r9
 8012a98:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a9a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aa0:	b36b      	cbz	r3, 8012afe <rcl_wait_set_resize+0x35a>
 8012aa2:	4622      	mov	r2, r4
 8012aa4:	4631      	mov	r1, r6
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f004 f976 	bl	8016d98 <memset>
 8012aac:	4630      	mov	r0, r6
 8012aae:	b003      	add	sp, #12
 8012ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab4:	200b      	movs	r0, #11
 8012ab6:	4770      	bx	lr
 8012ab8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012abc:	e764      	b.n	8012988 <rcl_wait_set_resize+0x1e4>
 8012abe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012ac0:	68a8      	ldr	r0, [r5, #8]
 8012ac2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ac6:	4798      	blx	r3
 8012ac8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012aca:	6928      	ldr	r0, [r5, #16]
 8012acc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012ace:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012ad0:	f8c5 900c 	str.w	r9, [r5, #12]
 8012ad4:	f8c5 9008 	str.w	r9, [r5, #8]
 8012ad8:	4790      	blx	r2
 8012ada:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8012ade:	200a      	movs	r0, #10
 8012ae0:	e752      	b.n	8012988 <rcl_wait_set_resize+0x1e4>
 8012ae2:	69a8      	ldr	r0, [r5, #24]
 8012ae4:	4649      	mov	r1, r9
 8012ae6:	47d0      	blx	sl
 8012ae8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8012aec:	200a      	movs	r0, #10
 8012aee:	e74b      	b.n	8012988 <rcl_wait_set_resize+0x1e4>
 8012af0:	6a28      	ldr	r0, [r5, #32]
 8012af2:	4639      	mov	r1, r7
 8012af4:	47c0      	blx	r8
 8012af6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8012afa:	200a      	movs	r0, #10
 8012afc:	e744      	b.n	8012988 <rcl_wait_set_resize+0x1e4>
 8012afe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012b00:	9301      	str	r3, [sp, #4]
 8012b02:	4639      	mov	r1, r7
 8012b04:	47c0      	blx	r8
 8012b06:	9b01      	ldr	r3, [sp, #4]
 8012b08:	200a      	movs	r0, #10
 8012b0a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012b0e:	e73b      	b.n	8012988 <rcl_wait_set_resize+0x1e4>

08012b10 <rcl_wait_set_init>:
 8012b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b14:	b084      	sub	sp, #16
 8012b16:	4604      	mov	r4, r0
 8012b18:	a810      	add	r0, sp, #64	@ 0x40
 8012b1a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8012b1e:	460f      	mov	r7, r1
 8012b20:	4690      	mov	r8, r2
 8012b22:	4699      	mov	r9, r3
 8012b24:	f7f8 fbb6 	bl	800b294 <rcutils_allocator_is_valid>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d06b      	beq.n	8012c04 <rcl_wait_set_init+0xf4>
 8012b2c:	2c00      	cmp	r4, #0
 8012b2e:	d069      	beq.n	8012c04 <rcl_wait_set_init+0xf4>
 8012b30:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012b32:	b125      	cbz	r5, 8012b3e <rcl_wait_set_init+0x2e>
 8012b34:	2564      	movs	r5, #100	@ 0x64
 8012b36:	4628      	mov	r0, r5
 8012b38:	b004      	add	sp, #16
 8012b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b3e:	f1ba 0f00 	cmp.w	sl, #0
 8012b42:	d05f      	beq.n	8012c04 <rcl_wait_set_init+0xf4>
 8012b44:	4650      	mov	r0, sl
 8012b46:	f7fe fb0f 	bl	8011168 <rcl_context_is_valid>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	d067      	beq.n	8012c1e <rcl_wait_set_init+0x10e>
 8012b4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b50:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012b52:	205c      	movs	r0, #92	@ 0x5c
 8012b54:	4798      	blx	r3
 8012b56:	6320      	str	r0, [r4, #48]	@ 0x30
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	d062      	beq.n	8012c22 <rcl_wait_set_init+0x112>
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	225c      	movs	r2, #92	@ 0x5c
 8012b60:	f004 f91a 	bl	8016d98 <memset>
 8012b64:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012b68:	eb03 0e02 	add.w	lr, r3, r2
 8012b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b6e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012b70:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012b74:	449e      	add	lr, r3
 8012b76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b7a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012b7e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012b82:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8012b86:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8012b8a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8012b8e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8012b92:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8012b96:	f8da a000 	ldr.w	sl, [sl]
 8012b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b9c:	44c6      	add	lr, r8
 8012b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8012ba2:	602b      	str	r3, [r5, #0]
 8012ba4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8012ba8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8012bac:	f002 f9fe 	bl	8014fac <rmw_create_wait_set>
 8012bb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012bb2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8012bb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012bb6:	b350      	cbz	r0, 8012c0e <rcl_wait_set_init+0xfe>
 8012bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bba:	9302      	str	r3, [sp, #8]
 8012bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012bbe:	9301      	str	r3, [sp, #4]
 8012bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012bc2:	9300      	str	r3, [sp, #0]
 8012bc4:	4642      	mov	r2, r8
 8012bc6:	464b      	mov	r3, r9
 8012bc8:	4639      	mov	r1, r7
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f7ff fdea 	bl	80127a4 <rcl_wait_set_resize>
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d0af      	beq.n	8012b36 <rcl_wait_set_init+0x26>
 8012bd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012bd8:	bb2b      	cbnz	r3, 8012c26 <rcl_wait_set_init+0x116>
 8012bda:	2600      	movs	r6, #0
 8012bdc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012be0:	9600      	str	r6, [sp, #0]
 8012be2:	4633      	mov	r3, r6
 8012be4:	4632      	mov	r2, r6
 8012be6:	4631      	mov	r1, r6
 8012be8:	4620      	mov	r0, r4
 8012bea:	f7ff fddb 	bl	80127a4 <rcl_wait_set_resize>
 8012bee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	d0a0      	beq.n	8012b36 <rcl_wait_set_init+0x26>
 8012bf4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012bf6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012bf8:	4798      	blx	r3
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	6326      	str	r6, [r4, #48]	@ 0x30
 8012bfe:	b004      	add	sp, #16
 8012c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c04:	250b      	movs	r5, #11
 8012c06:	4628      	mov	r0, r5
 8012c08:	b004      	add	sp, #16
 8012c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0e:	2501      	movs	r5, #1
 8012c10:	f002 f9d6 	bl	8014fc0 <rmw_destroy_wait_set>
 8012c14:	2800      	cmp	r0, #0
 8012c16:	bf18      	it	ne
 8012c18:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8012c1c:	e7dd      	b.n	8012bda <rcl_wait_set_init+0xca>
 8012c1e:	2565      	movs	r5, #101	@ 0x65
 8012c20:	e789      	b.n	8012b36 <rcl_wait_set_init+0x26>
 8012c22:	250a      	movs	r5, #10
 8012c24:	e787      	b.n	8012b36 <rcl_wait_set_init+0x26>
 8012c26:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012c28:	e7f2      	b.n	8012c10 <rcl_wait_set_init+0x100>
 8012c2a:	bf00      	nop

08012c2c <rcl_wait_set_add_guard_condition>:
 8012c2c:	b318      	cbz	r0, 8012c76 <rcl_wait_set_add_guard_condition+0x4a>
 8012c2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c30:	b570      	push	{r4, r5, r6, lr}
 8012c32:	4604      	mov	r4, r0
 8012c34:	b30b      	cbz	r3, 8012c7a <rcl_wait_set_add_guard_condition+0x4e>
 8012c36:	b319      	cbz	r1, 8012c80 <rcl_wait_set_add_guard_condition+0x54>
 8012c38:	68dd      	ldr	r5, [r3, #12]
 8012c3a:	68c0      	ldr	r0, [r0, #12]
 8012c3c:	4285      	cmp	r5, r0
 8012c3e:	d217      	bcs.n	8012c70 <rcl_wait_set_add_guard_condition+0x44>
 8012c40:	68a0      	ldr	r0, [r4, #8]
 8012c42:	1c6e      	adds	r6, r5, #1
 8012c44:	60de      	str	r6, [r3, #12]
 8012c46:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012c4a:	b102      	cbz	r2, 8012c4e <rcl_wait_set_add_guard_condition+0x22>
 8012c4c:	6015      	str	r5, [r2, #0]
 8012c4e:	4608      	mov	r0, r1
 8012c50:	f003 fba8 	bl	80163a4 <rcl_guard_condition_get_rmw_handle>
 8012c54:	b150      	cbz	r0, 8012c6c <rcl_wait_set_add_guard_condition+0x40>
 8012c56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c58:	6842      	ldr	r2, [r0, #4]
 8012c5a:	695b      	ldr	r3, [r3, #20]
 8012c5c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012c62:	6913      	ldr	r3, [r2, #16]
 8012c64:	3301      	adds	r3, #1
 8012c66:	2000      	movs	r0, #0
 8012c68:	6113      	str	r3, [r2, #16]
 8012c6a:	bd70      	pop	{r4, r5, r6, pc}
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	bd70      	pop	{r4, r5, r6, pc}
 8012c70:	f240 3086 	movw	r0, #902	@ 0x386
 8012c74:	bd70      	pop	{r4, r5, r6, pc}
 8012c76:	200b      	movs	r0, #11
 8012c78:	4770      	bx	lr
 8012c7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c7e:	bd70      	pop	{r4, r5, r6, pc}
 8012c80:	200b      	movs	r0, #11
 8012c82:	bd70      	pop	{r4, r5, r6, pc}

08012c84 <rcl_wait_set_add_timer>:
 8012c84:	b328      	cbz	r0, 8012cd2 <rcl_wait_set_add_timer+0x4e>
 8012c86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	b31b      	cbz	r3, 8012cd6 <rcl_wait_set_add_timer+0x52>
 8012c8e:	b329      	cbz	r1, 8012cdc <rcl_wait_set_add_timer+0x58>
 8012c90:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012c92:	6965      	ldr	r5, [r4, #20]
 8012c94:	42a8      	cmp	r0, r5
 8012c96:	d219      	bcs.n	8012ccc <rcl_wait_set_add_timer+0x48>
 8012c98:	6925      	ldr	r5, [r4, #16]
 8012c9a:	1c46      	adds	r6, r0, #1
 8012c9c:	641e      	str	r6, [r3, #64]	@ 0x40
 8012c9e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012ca2:	b102      	cbz	r2, 8012ca6 <rcl_wait_set_add_timer+0x22>
 8012ca4:	6010      	str	r0, [r2, #0]
 8012ca6:	4608      	mov	r0, r1
 8012ca8:	f7ff fba6 	bl	80123f8 <rcl_timer_get_guard_condition>
 8012cac:	b168      	cbz	r0, 8012cca <rcl_wait_set_add_timer+0x46>
 8012cae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012cb0:	68e3      	ldr	r3, [r4, #12]
 8012cb2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	441d      	add	r5, r3
 8012cb8:	f003 fb74 	bl	80163a4 <rcl_guard_condition_get_rmw_handle>
 8012cbc:	b180      	cbz	r0, 8012ce0 <rcl_wait_set_add_timer+0x5c>
 8012cbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012cc0:	6842      	ldr	r2, [r0, #4]
 8012cc2:	695b      	ldr	r3, [r3, #20]
 8012cc4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cc8:	2000      	movs	r0, #0
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	f240 3086 	movw	r0, #902	@ 0x386
 8012cd0:	bd70      	pop	{r4, r5, r6, pc}
 8012cd2:	200b      	movs	r0, #11
 8012cd4:	4770      	bx	lr
 8012cd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012cda:	bd70      	pop	{r4, r5, r6, pc}
 8012cdc:	200b      	movs	r0, #11
 8012cde:	bd70      	pop	{r4, r5, r6, pc}
 8012ce0:	2001      	movs	r0, #1
 8012ce2:	bd70      	pop	{r4, r5, r6, pc}

08012ce4 <rcl_wait_set_add_client>:
 8012ce4:	b318      	cbz	r0, 8012d2e <rcl_wait_set_add_client+0x4a>
 8012ce6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012ce8:	b570      	push	{r4, r5, r6, lr}
 8012cea:	4604      	mov	r4, r0
 8012cec:	b30b      	cbz	r3, 8012d32 <rcl_wait_set_add_client+0x4e>
 8012cee:	b319      	cbz	r1, 8012d38 <rcl_wait_set_add_client+0x54>
 8012cf0:	699d      	ldr	r5, [r3, #24]
 8012cf2:	69c0      	ldr	r0, [r0, #28]
 8012cf4:	4285      	cmp	r5, r0
 8012cf6:	d217      	bcs.n	8012d28 <rcl_wait_set_add_client+0x44>
 8012cf8:	69a0      	ldr	r0, [r4, #24]
 8012cfa:	1c6e      	adds	r6, r5, #1
 8012cfc:	619e      	str	r6, [r3, #24]
 8012cfe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012d02:	b102      	cbz	r2, 8012d06 <rcl_wait_set_add_client+0x22>
 8012d04:	6015      	str	r5, [r2, #0]
 8012d06:	4608      	mov	r0, r1
 8012d08:	f7fe f982 	bl	8011010 <rcl_client_get_rmw_handle>
 8012d0c:	b150      	cbz	r0, 8012d24 <rcl_wait_set_add_client+0x40>
 8012d0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d10:	6842      	ldr	r2, [r0, #4]
 8012d12:	6a1b      	ldr	r3, [r3, #32]
 8012d14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012d1a:	69d3      	ldr	r3, [r2, #28]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	2000      	movs	r0, #0
 8012d20:	61d3      	str	r3, [r2, #28]
 8012d22:	bd70      	pop	{r4, r5, r6, pc}
 8012d24:	2001      	movs	r0, #1
 8012d26:	bd70      	pop	{r4, r5, r6, pc}
 8012d28:	f240 3086 	movw	r0, #902	@ 0x386
 8012d2c:	bd70      	pop	{r4, r5, r6, pc}
 8012d2e:	200b      	movs	r0, #11
 8012d30:	4770      	bx	lr
 8012d32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	200b      	movs	r0, #11
 8012d3a:	bd70      	pop	{r4, r5, r6, pc}

08012d3c <rcl_wait_set_add_service>:
 8012d3c:	b318      	cbz	r0, 8012d86 <rcl_wait_set_add_service+0x4a>
 8012d3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	4604      	mov	r4, r0
 8012d44:	b30b      	cbz	r3, 8012d8a <rcl_wait_set_add_service+0x4e>
 8012d46:	b319      	cbz	r1, 8012d90 <rcl_wait_set_add_service+0x54>
 8012d48:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012d4a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012d4c:	4285      	cmp	r5, r0
 8012d4e:	d217      	bcs.n	8012d80 <rcl_wait_set_add_service+0x44>
 8012d50:	6a20      	ldr	r0, [r4, #32]
 8012d52:	1c6e      	adds	r6, r5, #1
 8012d54:	625e      	str	r6, [r3, #36]	@ 0x24
 8012d56:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012d5a:	b102      	cbz	r2, 8012d5e <rcl_wait_set_add_service+0x22>
 8012d5c:	6015      	str	r5, [r2, #0]
 8012d5e:	4608      	mov	r0, r1
 8012d60:	f7fe fed6 	bl	8011b10 <rcl_service_get_rmw_handle>
 8012d64:	b150      	cbz	r0, 8012d7c <rcl_wait_set_add_service+0x40>
 8012d66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d68:	6842      	ldr	r2, [r0, #4]
 8012d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d70:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012d72:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012d74:	3301      	adds	r3, #1
 8012d76:	2000      	movs	r0, #0
 8012d78:	6293      	str	r3, [r2, #40]	@ 0x28
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}
 8012d7c:	2001      	movs	r0, #1
 8012d7e:	bd70      	pop	{r4, r5, r6, pc}
 8012d80:	f240 3086 	movw	r0, #902	@ 0x386
 8012d84:	bd70      	pop	{r4, r5, r6, pc}
 8012d86:	200b      	movs	r0, #11
 8012d88:	4770      	bx	lr
 8012d8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012d8e:	bd70      	pop	{r4, r5, r6, pc}
 8012d90:	200b      	movs	r0, #11
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
 8012d94:	0000      	movs	r0, r0
	...

08012d98 <rcl_wait>:
 8012d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d9c:	ed2d 8b02 	vpush	{d8}
 8012da0:	b08d      	sub	sp, #52	@ 0x34
 8012da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012da6:	2800      	cmp	r0, #0
 8012da8:	f000 8143 	beq.w	8013032 <rcl_wait+0x29a>
 8012dac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012dae:	4605      	mov	r5, r0
 8012db0:	2e00      	cmp	r6, #0
 8012db2:	f000 8112 	beq.w	8012fda <rcl_wait+0x242>
 8012db6:	6843      	ldr	r3, [r0, #4]
 8012db8:	b983      	cbnz	r3, 8012ddc <rcl_wait+0x44>
 8012dba:	68eb      	ldr	r3, [r5, #12]
 8012dbc:	b973      	cbnz	r3, 8012ddc <rcl_wait+0x44>
 8012dbe:	696b      	ldr	r3, [r5, #20]
 8012dc0:	b963      	cbnz	r3, 8012ddc <rcl_wait+0x44>
 8012dc2:	69eb      	ldr	r3, [r5, #28]
 8012dc4:	b953      	cbnz	r3, 8012ddc <rcl_wait+0x44>
 8012dc6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012dc8:	b943      	cbnz	r3, 8012ddc <rcl_wait+0x44>
 8012dca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012dcc:	b933      	cbnz	r3, 8012ddc <rcl_wait+0x44>
 8012dce:	f240 3085 	movw	r0, #901	@ 0x385
 8012dd2:	b00d      	add	sp, #52	@ 0x34
 8012dd4:	ecbd 8b02 	vpop	{d8}
 8012dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ddc:	9b04      	ldr	r3, [sp, #16]
 8012dde:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	9b05      	ldr	r3, [sp, #20]
 8012de4:	f173 0300 	sbcs.w	r3, r3, #0
 8012de8:	f2c0 80f0 	blt.w	8012fcc <rcl_wait+0x234>
 8012dec:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012df0:	4643      	mov	r3, r8
 8012df2:	2a00      	cmp	r2, #0
 8012df4:	f000 8133 	beq.w	801305e <rcl_wait+0x2c6>
 8012df8:	2400      	movs	r4, #0
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013070 <rcl_wait+0x2d8>
 8012e00:	46a2      	mov	sl, r4
 8012e02:	46a3      	mov	fp, r4
 8012e04:	f240 3921 	movw	r9, #801	@ 0x321
 8012e08:	4632      	mov	r2, r6
 8012e0a:	e014      	b.n	8012e36 <rcl_wait+0x9e>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d1e0      	bne.n	8012dd2 <rcl_wait+0x3a>
 8012e10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012e14:	4542      	cmp	r2, r8
 8012e16:	eb73 0107 	sbcs.w	r1, r3, r7
 8012e1a:	da03      	bge.n	8012e24 <rcl_wait+0x8c>
 8012e1c:	4690      	mov	r8, r2
 8012e1e:	461f      	mov	r7, r3
 8012e20:	f04f 0b01 	mov.w	fp, #1
 8012e24:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012e26:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012e28:	3401      	adds	r4, #1
 8012e2a:	f14a 0a00 	adc.w	sl, sl, #0
 8012e2e:	429c      	cmp	r4, r3
 8012e30:	f17a 0100 	sbcs.w	r1, sl, #0
 8012e34:	d228      	bcs.n	8012e88 <rcl_wait+0xf0>
 8012e36:	6928      	ldr	r0, [r5, #16]
 8012e38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012e3c:	a908      	add	r1, sp, #32
 8012e3e:	00a6      	lsls	r6, r4, #2
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d0f1      	beq.n	8012e28 <rcl_wait+0x90>
 8012e44:	68eb      	ldr	r3, [r5, #12]
 8012e46:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8012e4a:	4423      	add	r3, r4
 8012e4c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012e50:	f1be 0f00 	cmp.w	lr, #0
 8012e54:	d006      	beq.n	8012e64 <rcl_wait+0xcc>
 8012e56:	6913      	ldr	r3, [r2, #16]
 8012e58:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	6113      	str	r3, [r2, #16]
 8012e60:	692b      	ldr	r3, [r5, #16]
 8012e62:	5998      	ldr	r0, [r3, r6]
 8012e64:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012e68:	f7ff fa94 	bl	8012394 <rcl_timer_get_time_until_next_call>
 8012e6c:	4548      	cmp	r0, r9
 8012e6e:	d1cd      	bne.n	8012e0c <rcl_wait+0x74>
 8012e70:	692b      	ldr	r3, [r5, #16]
 8012e72:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012e74:	2100      	movs	r1, #0
 8012e76:	5199      	str	r1, [r3, r6]
 8012e78:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012e7a:	3401      	adds	r4, #1
 8012e7c:	f14a 0a00 	adc.w	sl, sl, #0
 8012e80:	429c      	cmp	r4, r3
 8012e82:	f17a 0100 	sbcs.w	r1, sl, #0
 8012e86:	d3d6      	bcc.n	8012e36 <rcl_wait+0x9e>
 8012e88:	4616      	mov	r6, r2
 8012e8a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	46d9      	mov	r9, fp
 8012e92:	f040 80a9 	bne.w	8012fe8 <rcl_wait+0x250>
 8012e96:	2300      	movs	r3, #0
 8012e98:	2200      	movs	r2, #0
 8012e9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012ea2:	ab08      	add	r3, sp, #32
 8012ea4:	9302      	str	r3, [sp, #8]
 8012ea6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012ea8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8012eac:	e9cd 3200 	strd	r3, r2, [sp]
 8012eb0:	f106 0110 	add.w	r1, r6, #16
 8012eb4:	f106 031c 	add.w	r3, r6, #28
 8012eb8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8012ebc:	1d30      	adds	r0, r6, #4
 8012ebe:	f001 fefd 	bl	8014cbc <rmw_wait>
 8012ec2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012ec6:	4680      	mov	r8, r0
 8012ec8:	b1ca      	cbz	r2, 8012efe <rcl_wait+0x166>
 8012eca:	2400      	movs	r4, #0
 8012ecc:	4627      	mov	r7, r4
 8012ece:	692a      	ldr	r2, [r5, #16]
 8012ed0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012ed4:	f10d 011f 	add.w	r1, sp, #31
 8012ed8:	00a6      	lsls	r6, r4, #2
 8012eda:	b160      	cbz	r0, 8012ef6 <rcl_wait+0x15e>
 8012edc:	f88d 701f 	strb.w	r7, [sp, #31]
 8012ee0:	f7ff fa1e 	bl	8012320 <rcl_timer_is_ready>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	f47f af74 	bne.w	8012dd2 <rcl_wait+0x3a>
 8012eea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012eee:	b90b      	cbnz	r3, 8012ef4 <rcl_wait+0x15c>
 8012ef0:	692a      	ldr	r2, [r5, #16]
 8012ef2:	5193      	str	r3, [r2, r6]
 8012ef4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012ef8:	3401      	adds	r4, #1
 8012efa:	42a2      	cmp	r2, r4
 8012efc:	d8e7      	bhi.n	8012ece <rcl_wait+0x136>
 8012efe:	f038 0002 	bics.w	r0, r8, #2
 8012f02:	f040 8090 	bne.w	8013026 <rcl_wait+0x28e>
 8012f06:	686e      	ldr	r6, [r5, #4]
 8012f08:	4602      	mov	r2, r0
 8012f0a:	b91e      	cbnz	r6, 8012f14 <rcl_wait+0x17c>
 8012f0c:	e00d      	b.n	8012f2a <rcl_wait+0x192>
 8012f0e:	3201      	adds	r2, #1
 8012f10:	42b2      	cmp	r2, r6
 8012f12:	d00a      	beq.n	8012f2a <rcl_wait+0x192>
 8012f14:	6899      	ldr	r1, [r3, #8]
 8012f16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f1a:	2900      	cmp	r1, #0
 8012f1c:	d1f7      	bne.n	8012f0e <rcl_wait+0x176>
 8012f1e:	682c      	ldr	r4, [r5, #0]
 8012f20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f24:	3201      	adds	r2, #1
 8012f26:	42b2      	cmp	r2, r6
 8012f28:	d1f4      	bne.n	8012f14 <rcl_wait+0x17c>
 8012f2a:	68ee      	ldr	r6, [r5, #12]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	b91e      	cbnz	r6, 8012f38 <rcl_wait+0x1a0>
 8012f30:	e00d      	b.n	8012f4e <rcl_wait+0x1b6>
 8012f32:	3201      	adds	r2, #1
 8012f34:	42b2      	cmp	r2, r6
 8012f36:	d00a      	beq.n	8012f4e <rcl_wait+0x1b6>
 8012f38:	6959      	ldr	r1, [r3, #20]
 8012f3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f3e:	2900      	cmp	r1, #0
 8012f40:	d1f7      	bne.n	8012f32 <rcl_wait+0x19a>
 8012f42:	68ac      	ldr	r4, [r5, #8]
 8012f44:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f48:	3201      	adds	r2, #1
 8012f4a:	42b2      	cmp	r2, r6
 8012f4c:	d1f4      	bne.n	8012f38 <rcl_wait+0x1a0>
 8012f4e:	69ee      	ldr	r6, [r5, #28]
 8012f50:	2200      	movs	r2, #0
 8012f52:	b91e      	cbnz	r6, 8012f5c <rcl_wait+0x1c4>
 8012f54:	e00d      	b.n	8012f72 <rcl_wait+0x1da>
 8012f56:	3201      	adds	r2, #1
 8012f58:	42b2      	cmp	r2, r6
 8012f5a:	d00a      	beq.n	8012f72 <rcl_wait+0x1da>
 8012f5c:	6a19      	ldr	r1, [r3, #32]
 8012f5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f62:	2900      	cmp	r1, #0
 8012f64:	d1f7      	bne.n	8012f56 <rcl_wait+0x1be>
 8012f66:	69ac      	ldr	r4, [r5, #24]
 8012f68:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f6c:	3201      	adds	r2, #1
 8012f6e:	42b2      	cmp	r2, r6
 8012f70:	d1f4      	bne.n	8012f5c <rcl_wait+0x1c4>
 8012f72:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8012f74:	2200      	movs	r2, #0
 8012f76:	b91e      	cbnz	r6, 8012f80 <rcl_wait+0x1e8>
 8012f78:	e00d      	b.n	8012f96 <rcl_wait+0x1fe>
 8012f7a:	3201      	adds	r2, #1
 8012f7c:	4296      	cmp	r6, r2
 8012f7e:	d00a      	beq.n	8012f96 <rcl_wait+0x1fe>
 8012f80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012f82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012f86:	2900      	cmp	r1, #0
 8012f88:	d1f7      	bne.n	8012f7a <rcl_wait+0x1e2>
 8012f8a:	6a2c      	ldr	r4, [r5, #32]
 8012f8c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012f90:	3201      	adds	r2, #1
 8012f92:	4296      	cmp	r6, r2
 8012f94:	d1f4      	bne.n	8012f80 <rcl_wait+0x1e8>
 8012f96:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012f98:	2200      	movs	r2, #0
 8012f9a:	b91e      	cbnz	r6, 8012fa4 <rcl_wait+0x20c>
 8012f9c:	e00d      	b.n	8012fba <rcl_wait+0x222>
 8012f9e:	3201      	adds	r2, #1
 8012fa0:	42b2      	cmp	r2, r6
 8012fa2:	d00a      	beq.n	8012fba <rcl_wait+0x222>
 8012fa4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012fa6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012faa:	2900      	cmp	r1, #0
 8012fac:	d1f7      	bne.n	8012f9e <rcl_wait+0x206>
 8012fae:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012fb0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012fb4:	3201      	adds	r2, #1
 8012fb6:	42b2      	cmp	r2, r6
 8012fb8:	d1f4      	bne.n	8012fa4 <rcl_wait+0x20c>
 8012fba:	f1b8 0f02 	cmp.w	r8, #2
 8012fbe:	f47f af08 	bne.w	8012dd2 <rcl_wait+0x3a>
 8012fc2:	464b      	mov	r3, r9
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	bf08      	it	eq
 8012fc8:	2002      	moveq	r0, #2
 8012fca:	e702      	b.n	8012dd2 <rcl_wait+0x3a>
 8012fcc:	2a00      	cmp	r2, #0
 8012fce:	d03a      	beq.n	8013046 <rcl_wait+0x2ae>
 8012fd0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012fd4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012fd8:	e70e      	b.n	8012df8 <rcl_wait+0x60>
 8012fda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012fde:	b00d      	add	sp, #52	@ 0x34
 8012fe0:	ecbd 8b02 	vpop	{d8}
 8012fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe8:	9b04      	ldr	r3, [sp, #16]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	9b05      	ldr	r3, [sp, #20]
 8012fee:	f173 0300 	sbcs.w	r3, r3, #0
 8012ff2:	db24      	blt.n	801303e <rcl_wait+0x2a6>
 8012ff4:	2f00      	cmp	r7, #0
 8012ff6:	bfbc      	itt	lt
 8012ff8:	f04f 0800 	movlt.w	r8, #0
 8012ffc:	4647      	movlt	r7, r8
 8012ffe:	a31e      	add	r3, pc, #120	@ (adr r3, 8013078 <rcl_wait+0x2e0>)
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	4640      	mov	r0, r8
 8013006:	4639      	mov	r1, r7
 8013008:	f7ed f972 	bl	80002f0 <__aeabi_ldivmod>
 801300c:	a31a      	add	r3, pc, #104	@ (adr r3, 8013078 <rcl_wait+0x2e0>)
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013016:	4640      	mov	r0, r8
 8013018:	4639      	mov	r1, r7
 801301a:	f7ed f969 	bl	80002f0 <__aeabi_ldivmod>
 801301e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013022:	ab08      	add	r3, sp, #32
 8013024:	e73e      	b.n	8012ea4 <rcl_wait+0x10c>
 8013026:	2001      	movs	r0, #1
 8013028:	b00d      	add	sp, #52	@ 0x34
 801302a:	ecbd 8b02 	vpop	{d8}
 801302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013032:	200b      	movs	r0, #11
 8013034:	b00d      	add	sp, #52	@ 0x34
 8013036:	ecbd 8b02 	vpop	{d8}
 801303a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801303e:	465b      	mov	r3, fp
 8013040:	2b00      	cmp	r3, #0
 8013042:	d1d7      	bne.n	8012ff4 <rcl_wait+0x25c>
 8013044:	e72e      	b.n	8012ea4 <rcl_wait+0x10c>
 8013046:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801304a:	430b      	orrs	r3, r1
 801304c:	bf08      	it	eq
 801304e:	4691      	moveq	r9, r2
 8013050:	f43f af21 	beq.w	8012e96 <rcl_wait+0xfe>
 8013054:	9b04      	ldr	r3, [sp, #16]
 8013056:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801305a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801305e:	2b01      	cmp	r3, #1
 8013060:	9b05      	ldr	r3, [sp, #20]
 8013062:	f173 0300 	sbcs.w	r3, r3, #0
 8013066:	f04f 0300 	mov.w	r3, #0
 801306a:	4699      	mov	r9, r3
 801306c:	dac2      	bge.n	8012ff4 <rcl_wait+0x25c>
 801306e:	e719      	b.n	8012ea4 <rcl_wait+0x10c>
 8013070:	ffffffff 	.word	0xffffffff
 8013074:	7fffffff 	.word	0x7fffffff
 8013078:	3b9aca00 	.word	0x3b9aca00
 801307c:	00000000 	.word	0x00000000

08013080 <rcl_action_take_goal_response>:
 8013080:	2800      	cmp	r0, #0
 8013082:	d039      	beq.n	80130f8 <rcl_action_take_goal_response+0x78>
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	4604      	mov	r4, r0
 8013088:	6800      	ldr	r0, [r0, #0]
 801308a:	b380      	cbz	r0, 80130ee <rcl_action_take_goal_response+0x6e>
 801308c:	460d      	mov	r5, r1
 801308e:	4616      	mov	r6, r2
 8013090:	f7fe f842 	bl	8011118 <rcl_client_is_valid>
 8013094:	b330      	cbz	r0, 80130e4 <rcl_action_take_goal_response+0x64>
 8013096:	6820      	ldr	r0, [r4, #0]
 8013098:	3004      	adds	r0, #4
 801309a:	f7fe f83d 	bl	8011118 <rcl_client_is_valid>
 801309e:	b308      	cbz	r0, 80130e4 <rcl_action_take_goal_response+0x64>
 80130a0:	6820      	ldr	r0, [r4, #0]
 80130a2:	3008      	adds	r0, #8
 80130a4:	f7fe f838 	bl	8011118 <rcl_client_is_valid>
 80130a8:	b1e0      	cbz	r0, 80130e4 <rcl_action_take_goal_response+0x64>
 80130aa:	6820      	ldr	r0, [r4, #0]
 80130ac:	300c      	adds	r0, #12
 80130ae:	f7fe fdf5 	bl	8011c9c <rcl_subscription_is_valid>
 80130b2:	b1b8      	cbz	r0, 80130e4 <rcl_action_take_goal_response+0x64>
 80130b4:	6820      	ldr	r0, [r4, #0]
 80130b6:	3010      	adds	r0, #16
 80130b8:	f7fe fdf0 	bl	8011c9c <rcl_subscription_is_valid>
 80130bc:	b190      	cbz	r0, 80130e4 <rcl_action_take_goal_response+0x64>
 80130be:	b1cd      	cbz	r5, 80130f4 <rcl_action_take_goal_response+0x74>
 80130c0:	b1c6      	cbz	r6, 80130f4 <rcl_action_take_goal_response+0x74>
 80130c2:	6820      	ldr	r0, [r4, #0]
 80130c4:	4632      	mov	r2, r6
 80130c6:	4629      	mov	r1, r5
 80130c8:	f7fd ffde 	bl	8011088 <rcl_take_response>
 80130cc:	b148      	cbz	r0, 80130e2 <rcl_action_take_goal_response+0x62>
 80130ce:	280a      	cmp	r0, #10
 80130d0:	d007      	beq.n	80130e2 <rcl_action_take_goal_response+0x62>
 80130d2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80130d6:	f640 0337 	movw	r3, #2103	@ 0x837
 80130da:	4290      	cmp	r0, r2
 80130dc:	bf0c      	ite	eq
 80130de:	4618      	moveq	r0, r3
 80130e0:	2001      	movne	r0, #1
 80130e2:	bd70      	pop	{r4, r5, r6, pc}
 80130e4:	f7f8 f8fc 	bl	800b2e0 <rcutils_reset_error>
 80130e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80130ec:	bd70      	pop	{r4, r5, r6, pc}
 80130ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80130f2:	bd70      	pop	{r4, r5, r6, pc}
 80130f4:	200b      	movs	r0, #11
 80130f6:	bd70      	pop	{r4, r5, r6, pc}
 80130f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop

08013100 <rcl_action_send_result_request>:
 8013100:	b390      	cbz	r0, 8013168 <rcl_action_send_result_request+0x68>
 8013102:	b570      	push	{r4, r5, r6, lr}
 8013104:	4604      	mov	r4, r0
 8013106:	6800      	ldr	r0, [r0, #0]
 8013108:	b348      	cbz	r0, 801315e <rcl_action_send_result_request+0x5e>
 801310a:	460d      	mov	r5, r1
 801310c:	4616      	mov	r6, r2
 801310e:	f7fe f803 	bl	8011118 <rcl_client_is_valid>
 8013112:	b1f8      	cbz	r0, 8013154 <rcl_action_send_result_request+0x54>
 8013114:	6820      	ldr	r0, [r4, #0]
 8013116:	3004      	adds	r0, #4
 8013118:	f7fd fffe 	bl	8011118 <rcl_client_is_valid>
 801311c:	b1d0      	cbz	r0, 8013154 <rcl_action_send_result_request+0x54>
 801311e:	6820      	ldr	r0, [r4, #0]
 8013120:	3008      	adds	r0, #8
 8013122:	f7fd fff9 	bl	8011118 <rcl_client_is_valid>
 8013126:	b1a8      	cbz	r0, 8013154 <rcl_action_send_result_request+0x54>
 8013128:	6820      	ldr	r0, [r4, #0]
 801312a:	300c      	adds	r0, #12
 801312c:	f7fe fdb6 	bl	8011c9c <rcl_subscription_is_valid>
 8013130:	b180      	cbz	r0, 8013154 <rcl_action_send_result_request+0x54>
 8013132:	6820      	ldr	r0, [r4, #0]
 8013134:	3010      	adds	r0, #16
 8013136:	f7fe fdb1 	bl	8011c9c <rcl_subscription_is_valid>
 801313a:	b158      	cbz	r0, 8013154 <rcl_action_send_result_request+0x54>
 801313c:	b195      	cbz	r5, 8013164 <rcl_action_send_result_request+0x64>
 801313e:	b18e      	cbz	r6, 8013164 <rcl_action_send_result_request+0x64>
 8013140:	6820      	ldr	r0, [r4, #0]
 8013142:	4632      	mov	r2, r6
 8013144:	4629      	mov	r1, r5
 8013146:	3008      	adds	r0, #8
 8013148:	f7fd ff68 	bl	801101c <rcl_send_request>
 801314c:	3800      	subs	r0, #0
 801314e:	bf18      	it	ne
 8013150:	2001      	movne	r0, #1
 8013152:	bd70      	pop	{r4, r5, r6, pc}
 8013154:	f7f8 f8c4 	bl	800b2e0 <rcutils_reset_error>
 8013158:	f640 0036 	movw	r0, #2102	@ 0x836
 801315c:	bd70      	pop	{r4, r5, r6, pc}
 801315e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013162:	bd70      	pop	{r4, r5, r6, pc}
 8013164:	200b      	movs	r0, #11
 8013166:	bd70      	pop	{r4, r5, r6, pc}
 8013168:	f640 0036 	movw	r0, #2102	@ 0x836
 801316c:	4770      	bx	lr
 801316e:	bf00      	nop

08013170 <rcl_action_take_result_response>:
 8013170:	2800      	cmp	r0, #0
 8013172:	d03a      	beq.n	80131ea <rcl_action_take_result_response+0x7a>
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	6800      	ldr	r0, [r0, #0]
 801317a:	b388      	cbz	r0, 80131e0 <rcl_action_take_result_response+0x70>
 801317c:	460d      	mov	r5, r1
 801317e:	4616      	mov	r6, r2
 8013180:	f7fd ffca 	bl	8011118 <rcl_client_is_valid>
 8013184:	b338      	cbz	r0, 80131d6 <rcl_action_take_result_response+0x66>
 8013186:	6820      	ldr	r0, [r4, #0]
 8013188:	3004      	adds	r0, #4
 801318a:	f7fd ffc5 	bl	8011118 <rcl_client_is_valid>
 801318e:	b310      	cbz	r0, 80131d6 <rcl_action_take_result_response+0x66>
 8013190:	6820      	ldr	r0, [r4, #0]
 8013192:	3008      	adds	r0, #8
 8013194:	f7fd ffc0 	bl	8011118 <rcl_client_is_valid>
 8013198:	b1e8      	cbz	r0, 80131d6 <rcl_action_take_result_response+0x66>
 801319a:	6820      	ldr	r0, [r4, #0]
 801319c:	300c      	adds	r0, #12
 801319e:	f7fe fd7d 	bl	8011c9c <rcl_subscription_is_valid>
 80131a2:	b1c0      	cbz	r0, 80131d6 <rcl_action_take_result_response+0x66>
 80131a4:	6820      	ldr	r0, [r4, #0]
 80131a6:	3010      	adds	r0, #16
 80131a8:	f7fe fd78 	bl	8011c9c <rcl_subscription_is_valid>
 80131ac:	b198      	cbz	r0, 80131d6 <rcl_action_take_result_response+0x66>
 80131ae:	b1d5      	cbz	r5, 80131e6 <rcl_action_take_result_response+0x76>
 80131b0:	b1ce      	cbz	r6, 80131e6 <rcl_action_take_result_response+0x76>
 80131b2:	6820      	ldr	r0, [r4, #0]
 80131b4:	4632      	mov	r2, r6
 80131b6:	4629      	mov	r1, r5
 80131b8:	3008      	adds	r0, #8
 80131ba:	f7fd ff65 	bl	8011088 <rcl_take_response>
 80131be:	b148      	cbz	r0, 80131d4 <rcl_action_take_result_response+0x64>
 80131c0:	280a      	cmp	r0, #10
 80131c2:	d007      	beq.n	80131d4 <rcl_action_take_result_response+0x64>
 80131c4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80131c8:	f640 0337 	movw	r3, #2103	@ 0x837
 80131cc:	4290      	cmp	r0, r2
 80131ce:	bf0c      	ite	eq
 80131d0:	4618      	moveq	r0, r3
 80131d2:	2001      	movne	r0, #1
 80131d4:	bd70      	pop	{r4, r5, r6, pc}
 80131d6:	f7f8 f883 	bl	800b2e0 <rcutils_reset_error>
 80131da:	f640 0036 	movw	r0, #2102	@ 0x836
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80131e4:	bd70      	pop	{r4, r5, r6, pc}
 80131e6:	200b      	movs	r0, #11
 80131e8:	bd70      	pop	{r4, r5, r6, pc}
 80131ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80131ee:	4770      	bx	lr

080131f0 <rcl_action_take_cancel_response>:
 80131f0:	2800      	cmp	r0, #0
 80131f2:	d03a      	beq.n	801326a <rcl_action_take_cancel_response+0x7a>
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	4604      	mov	r4, r0
 80131f8:	6800      	ldr	r0, [r0, #0]
 80131fa:	b388      	cbz	r0, 8013260 <rcl_action_take_cancel_response+0x70>
 80131fc:	460d      	mov	r5, r1
 80131fe:	4616      	mov	r6, r2
 8013200:	f7fd ff8a 	bl	8011118 <rcl_client_is_valid>
 8013204:	b338      	cbz	r0, 8013256 <rcl_action_take_cancel_response+0x66>
 8013206:	6820      	ldr	r0, [r4, #0]
 8013208:	3004      	adds	r0, #4
 801320a:	f7fd ff85 	bl	8011118 <rcl_client_is_valid>
 801320e:	b310      	cbz	r0, 8013256 <rcl_action_take_cancel_response+0x66>
 8013210:	6820      	ldr	r0, [r4, #0]
 8013212:	3008      	adds	r0, #8
 8013214:	f7fd ff80 	bl	8011118 <rcl_client_is_valid>
 8013218:	b1e8      	cbz	r0, 8013256 <rcl_action_take_cancel_response+0x66>
 801321a:	6820      	ldr	r0, [r4, #0]
 801321c:	300c      	adds	r0, #12
 801321e:	f7fe fd3d 	bl	8011c9c <rcl_subscription_is_valid>
 8013222:	b1c0      	cbz	r0, 8013256 <rcl_action_take_cancel_response+0x66>
 8013224:	6820      	ldr	r0, [r4, #0]
 8013226:	3010      	adds	r0, #16
 8013228:	f7fe fd38 	bl	8011c9c <rcl_subscription_is_valid>
 801322c:	b198      	cbz	r0, 8013256 <rcl_action_take_cancel_response+0x66>
 801322e:	b1d5      	cbz	r5, 8013266 <rcl_action_take_cancel_response+0x76>
 8013230:	b1ce      	cbz	r6, 8013266 <rcl_action_take_cancel_response+0x76>
 8013232:	6820      	ldr	r0, [r4, #0]
 8013234:	4632      	mov	r2, r6
 8013236:	4629      	mov	r1, r5
 8013238:	3004      	adds	r0, #4
 801323a:	f7fd ff25 	bl	8011088 <rcl_take_response>
 801323e:	b148      	cbz	r0, 8013254 <rcl_action_take_cancel_response+0x64>
 8013240:	280a      	cmp	r0, #10
 8013242:	d007      	beq.n	8013254 <rcl_action_take_cancel_response+0x64>
 8013244:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013248:	f640 0337 	movw	r3, #2103	@ 0x837
 801324c:	4290      	cmp	r0, r2
 801324e:	bf0c      	ite	eq
 8013250:	4618      	moveq	r0, r3
 8013252:	2001      	movne	r0, #1
 8013254:	bd70      	pop	{r4, r5, r6, pc}
 8013256:	f7f8 f843 	bl	800b2e0 <rcutils_reset_error>
 801325a:	f640 0036 	movw	r0, #2102	@ 0x836
 801325e:	bd70      	pop	{r4, r5, r6, pc}
 8013260:	f640 0036 	movw	r0, #2102	@ 0x836
 8013264:	bd70      	pop	{r4, r5, r6, pc}
 8013266:	200b      	movs	r0, #11
 8013268:	bd70      	pop	{r4, r5, r6, pc}
 801326a:	f640 0036 	movw	r0, #2102	@ 0x836
 801326e:	4770      	bx	lr

08013270 <rcl_action_take_feedback>:
 8013270:	2800      	cmp	r0, #0
 8013272:	d038      	beq.n	80132e6 <rcl_action_take_feedback+0x76>
 8013274:	b530      	push	{r4, r5, lr}
 8013276:	4604      	mov	r4, r0
 8013278:	6800      	ldr	r0, [r0, #0]
 801327a:	b091      	sub	sp, #68	@ 0x44
 801327c:	b378      	cbz	r0, 80132de <rcl_action_take_feedback+0x6e>
 801327e:	460d      	mov	r5, r1
 8013280:	f7fd ff4a 	bl	8011118 <rcl_client_is_valid>
 8013284:	b328      	cbz	r0, 80132d2 <rcl_action_take_feedback+0x62>
 8013286:	6820      	ldr	r0, [r4, #0]
 8013288:	3004      	adds	r0, #4
 801328a:	f7fd ff45 	bl	8011118 <rcl_client_is_valid>
 801328e:	b300      	cbz	r0, 80132d2 <rcl_action_take_feedback+0x62>
 8013290:	6820      	ldr	r0, [r4, #0]
 8013292:	3008      	adds	r0, #8
 8013294:	f7fd ff40 	bl	8011118 <rcl_client_is_valid>
 8013298:	b1d8      	cbz	r0, 80132d2 <rcl_action_take_feedback+0x62>
 801329a:	6820      	ldr	r0, [r4, #0]
 801329c:	300c      	adds	r0, #12
 801329e:	f7fe fcfd 	bl	8011c9c <rcl_subscription_is_valid>
 80132a2:	b1b0      	cbz	r0, 80132d2 <rcl_action_take_feedback+0x62>
 80132a4:	6820      	ldr	r0, [r4, #0]
 80132a6:	3010      	adds	r0, #16
 80132a8:	f7fe fcf8 	bl	8011c9c <rcl_subscription_is_valid>
 80132ac:	b188      	cbz	r0, 80132d2 <rcl_action_take_feedback+0x62>
 80132ae:	b1ed      	cbz	r5, 80132ec <rcl_action_take_feedback+0x7c>
 80132b0:	6820      	ldr	r0, [r4, #0]
 80132b2:	2300      	movs	r3, #0
 80132b4:	466a      	mov	r2, sp
 80132b6:	4629      	mov	r1, r5
 80132b8:	300c      	adds	r0, #12
 80132ba:	f7fe fc91 	bl	8011be0 <rcl_take>
 80132be:	b160      	cbz	r0, 80132da <rcl_action_take_feedback+0x6a>
 80132c0:	f240 1391 	movw	r3, #401	@ 0x191
 80132c4:	4298      	cmp	r0, r3
 80132c6:	d014      	beq.n	80132f2 <rcl_action_take_feedback+0x82>
 80132c8:	280a      	cmp	r0, #10
 80132ca:	bf18      	it	ne
 80132cc:	2001      	movne	r0, #1
 80132ce:	b011      	add	sp, #68	@ 0x44
 80132d0:	bd30      	pop	{r4, r5, pc}
 80132d2:	f7f8 f805 	bl	800b2e0 <rcutils_reset_error>
 80132d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80132da:	b011      	add	sp, #68	@ 0x44
 80132dc:	bd30      	pop	{r4, r5, pc}
 80132de:	f640 0036 	movw	r0, #2102	@ 0x836
 80132e2:	b011      	add	sp, #68	@ 0x44
 80132e4:	bd30      	pop	{r4, r5, pc}
 80132e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80132ea:	4770      	bx	lr
 80132ec:	200b      	movs	r0, #11
 80132ee:	b011      	add	sp, #68	@ 0x44
 80132f0:	bd30      	pop	{r4, r5, pc}
 80132f2:	f640 0037 	movw	r0, #2103	@ 0x837
 80132f6:	e7f0      	b.n	80132da <rcl_action_take_feedback+0x6a>

080132f8 <rcl_action_wait_set_add_action_client>:
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d048      	beq.n	801338e <rcl_action_wait_set_add_action_client+0x96>
 80132fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132fe:	460c      	mov	r4, r1
 8013300:	2900      	cmp	r1, #0
 8013302:	d03c      	beq.n	801337e <rcl_action_wait_set_add_action_client+0x86>
 8013304:	4605      	mov	r5, r0
 8013306:	6808      	ldr	r0, [r1, #0]
 8013308:	2800      	cmp	r0, #0
 801330a:	d038      	beq.n	801337e <rcl_action_wait_set_add_action_client+0x86>
 801330c:	4617      	mov	r7, r2
 801330e:	461e      	mov	r6, r3
 8013310:	f7fd ff02 	bl	8011118 <rcl_client_is_valid>
 8013314:	b3b0      	cbz	r0, 8013384 <rcl_action_wait_set_add_action_client+0x8c>
 8013316:	6820      	ldr	r0, [r4, #0]
 8013318:	3004      	adds	r0, #4
 801331a:	f7fd fefd 	bl	8011118 <rcl_client_is_valid>
 801331e:	b388      	cbz	r0, 8013384 <rcl_action_wait_set_add_action_client+0x8c>
 8013320:	6820      	ldr	r0, [r4, #0]
 8013322:	3008      	adds	r0, #8
 8013324:	f7fd fef8 	bl	8011118 <rcl_client_is_valid>
 8013328:	b360      	cbz	r0, 8013384 <rcl_action_wait_set_add_action_client+0x8c>
 801332a:	6820      	ldr	r0, [r4, #0]
 801332c:	300c      	adds	r0, #12
 801332e:	f7fe fcb5 	bl	8011c9c <rcl_subscription_is_valid>
 8013332:	b338      	cbz	r0, 8013384 <rcl_action_wait_set_add_action_client+0x8c>
 8013334:	6820      	ldr	r0, [r4, #0]
 8013336:	3010      	adds	r0, #16
 8013338:	f7fe fcb0 	bl	8011c9c <rcl_subscription_is_valid>
 801333c:	b310      	cbz	r0, 8013384 <rcl_action_wait_set_add_action_client+0x8c>
 801333e:	6821      	ldr	r1, [r4, #0]
 8013340:	4628      	mov	r0, r5
 8013342:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8013346:	f7ff fccd 	bl	8012ce4 <rcl_wait_set_add_client>
 801334a:	b9b8      	cbnz	r0, 801337c <rcl_action_wait_set_add_action_client+0x84>
 801334c:	6821      	ldr	r1, [r4, #0]
 801334e:	4628      	mov	r0, r5
 8013350:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8013354:	3104      	adds	r1, #4
 8013356:	f7ff fcc5 	bl	8012ce4 <rcl_wait_set_add_client>
 801335a:	b978      	cbnz	r0, 801337c <rcl_action_wait_set_add_action_client+0x84>
 801335c:	6821      	ldr	r1, [r4, #0]
 801335e:	4628      	mov	r0, r5
 8013360:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8013364:	3108      	adds	r1, #8
 8013366:	f7ff fcbd 	bl	8012ce4 <rcl_wait_set_add_client>
 801336a:	b938      	cbnz	r0, 801337c <rcl_action_wait_set_add_action_client+0x84>
 801336c:	6821      	ldr	r1, [r4, #0]
 801336e:	4628      	mov	r0, r5
 8013370:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8013374:	310c      	adds	r1, #12
 8013376:	f7ff f96d 	bl	8012654 <rcl_wait_set_add_subscription>
 801337a:	b158      	cbz	r0, 8013394 <rcl_action_wait_set_add_action_client+0x9c>
 801337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801337e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013384:	f7f7 ffac 	bl	800b2e0 <rcutils_reset_error>
 8013388:	f640 0036 	movw	r0, #2102	@ 0x836
 801338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801338e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013392:	4770      	bx	lr
 8013394:	6821      	ldr	r1, [r4, #0]
 8013396:	4628      	mov	r0, r5
 8013398:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801339c:	3110      	adds	r1, #16
 801339e:	f7ff f959 	bl	8012654 <rcl_wait_set_add_subscription>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	d1ea      	bne.n	801337c <rcl_action_wait_set_add_action_client+0x84>
 80133a6:	b11f      	cbz	r7, 80133b0 <rcl_action_wait_set_add_action_client+0xb8>
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80133ae:	603b      	str	r3, [r7, #0]
 80133b0:	2e00      	cmp	r6, #0
 80133b2:	d0e3      	beq.n	801337c <rcl_action_wait_set_add_action_client+0x84>
 80133b4:	6823      	ldr	r3, [r4, #0]
 80133b6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80133ba:	6033      	str	r3, [r6, #0]
 80133bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133be:	bf00      	nop

080133c0 <rcl_action_client_wait_set_get_entities_ready>:
 80133c0:	2800      	cmp	r0, #0
 80133c2:	f000 808d 	beq.w	80134e0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80133c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ca:	460c      	mov	r4, r1
 80133cc:	2900      	cmp	r1, #0
 80133ce:	d077      	beq.n	80134c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80133d0:	4605      	mov	r5, r0
 80133d2:	6808      	ldr	r0, [r1, #0]
 80133d4:	2800      	cmp	r0, #0
 80133d6:	d073      	beq.n	80134c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80133d8:	4616      	mov	r6, r2
 80133da:	461f      	mov	r7, r3
 80133dc:	f7fd fe9c 	bl	8011118 <rcl_client_is_valid>
 80133e0:	2800      	cmp	r0, #0
 80133e2:	d071      	beq.n	80134c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80133e4:	6820      	ldr	r0, [r4, #0]
 80133e6:	3004      	adds	r0, #4
 80133e8:	f7fd fe96 	bl	8011118 <rcl_client_is_valid>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	d06b      	beq.n	80134c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80133f0:	6820      	ldr	r0, [r4, #0]
 80133f2:	3008      	adds	r0, #8
 80133f4:	f7fd fe90 	bl	8011118 <rcl_client_is_valid>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d065      	beq.n	80134c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80133fc:	6820      	ldr	r0, [r4, #0]
 80133fe:	300c      	adds	r0, #12
 8013400:	f7fe fc4c 	bl	8011c9c <rcl_subscription_is_valid>
 8013404:	2800      	cmp	r0, #0
 8013406:	d05f      	beq.n	80134c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013408:	6820      	ldr	r0, [r4, #0]
 801340a:	3010      	adds	r0, #16
 801340c:	f7fe fc46 	bl	8011c9c <rcl_subscription_is_valid>
 8013410:	2800      	cmp	r0, #0
 8013412:	d059      	beq.n	80134c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013414:	2e00      	cmp	r6, #0
 8013416:	d060      	beq.n	80134da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013418:	2f00      	cmp	r7, #0
 801341a:	d05e      	beq.n	80134da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801341c:	9b06      	ldr	r3, [sp, #24]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d05b      	beq.n	80134da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013422:	9b07      	ldr	r3, [sp, #28]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d058      	beq.n	80134da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013428:	9b08      	ldr	r3, [sp, #32]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d055      	beq.n	80134da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801342e:	6823      	ldr	r3, [r4, #0]
 8013430:	686a      	ldr	r2, [r5, #4]
 8013432:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8013436:	428a      	cmp	r2, r1
 8013438:	d94c      	bls.n	80134d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801343a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801343e:	4282      	cmp	r2, r0
 8013440:	d948      	bls.n	80134d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013442:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8013446:	69ea      	ldr	r2, [r5, #28]
 8013448:	42a2      	cmp	r2, r4
 801344a:	d943      	bls.n	80134d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801344c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8013450:	4562      	cmp	r2, ip
 8013452:	d93f      	bls.n	80134d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013454:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013458:	4572      	cmp	r2, lr
 801345a:	d93b      	bls.n	80134d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801345c:	69aa      	ldr	r2, [r5, #24]
 801345e:	682d      	ldr	r5, [r5, #0]
 8013460:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013464:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013468:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801346c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013470:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8013474:	f103 0c0c 	add.w	ip, r3, #12
 8013478:	eba5 050c 	sub.w	r5, r5, ip
 801347c:	fab5 f585 	clz	r5, r5
 8013480:	096d      	lsrs	r5, r5, #5
 8013482:	7035      	strb	r5, [r6, #0]
 8013484:	f103 0510 	add.w	r5, r3, #16
 8013488:	1b64      	subs	r4, r4, r5
 801348a:	fab4 f484 	clz	r4, r4
 801348e:	0964      	lsrs	r4, r4, #5
 8013490:	703c      	strb	r4, [r7, #0]
 8013492:	eba3 0008 	sub.w	r0, r3, r8
 8013496:	1d1c      	adds	r4, r3, #4
 8013498:	3308      	adds	r3, #8
 801349a:	1ad3      	subs	r3, r2, r3
 801349c:	fab0 f080 	clz	r0, r0
 80134a0:	9a06      	ldr	r2, [sp, #24]
 80134a2:	0940      	lsrs	r0, r0, #5
 80134a4:	1b09      	subs	r1, r1, r4
 80134a6:	7010      	strb	r0, [r2, #0]
 80134a8:	fab1 f181 	clz	r1, r1
 80134ac:	9a07      	ldr	r2, [sp, #28]
 80134ae:	0949      	lsrs	r1, r1, #5
 80134b0:	7011      	strb	r1, [r2, #0]
 80134b2:	fab3 f383 	clz	r3, r3
 80134b6:	9a08      	ldr	r2, [sp, #32]
 80134b8:	095b      	lsrs	r3, r3, #5
 80134ba:	2000      	movs	r0, #0
 80134bc:	7013      	strb	r3, [r2, #0]
 80134be:	e001      	b.n	80134c4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80134c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80134c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c8:	f7f7 ff0a 	bl	800b2e0 <rcutils_reset_error>
 80134cc:	f640 0036 	movw	r0, #2102	@ 0x836
 80134d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d4:	2001      	movs	r0, #1
 80134d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134da:	200b      	movs	r0, #11
 80134dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop

080134e8 <rcl_action_take_goal_request>:
 80134e8:	2800      	cmp	r0, #0
 80134ea:	d039      	beq.n	8013560 <rcl_action_take_goal_request+0x78>
 80134ec:	b570      	push	{r4, r5, r6, lr}
 80134ee:	4604      	mov	r4, r0
 80134f0:	6800      	ldr	r0, [r0, #0]
 80134f2:	b380      	cbz	r0, 8013556 <rcl_action_take_goal_request+0x6e>
 80134f4:	460d      	mov	r5, r1
 80134f6:	4616      	mov	r6, r2
 80134f8:	f7fe fb68 	bl	8011bcc <rcl_service_is_valid>
 80134fc:	b330      	cbz	r0, 801354c <rcl_action_take_goal_request+0x64>
 80134fe:	6820      	ldr	r0, [r4, #0]
 8013500:	3004      	adds	r0, #4
 8013502:	f7fe fb63 	bl	8011bcc <rcl_service_is_valid>
 8013506:	b308      	cbz	r0, 801354c <rcl_action_take_goal_request+0x64>
 8013508:	6820      	ldr	r0, [r4, #0]
 801350a:	3008      	adds	r0, #8
 801350c:	f7fe fb5e 	bl	8011bcc <rcl_service_is_valid>
 8013510:	b1e0      	cbz	r0, 801354c <rcl_action_take_goal_request+0x64>
 8013512:	6820      	ldr	r0, [r4, #0]
 8013514:	300c      	adds	r0, #12
 8013516:	f7f6 ff6b 	bl	800a3f0 <rcl_publisher_is_valid>
 801351a:	b1b8      	cbz	r0, 801354c <rcl_action_take_goal_request+0x64>
 801351c:	6820      	ldr	r0, [r4, #0]
 801351e:	3010      	adds	r0, #16
 8013520:	f7f6 ff66 	bl	800a3f0 <rcl_publisher_is_valid>
 8013524:	b190      	cbz	r0, 801354c <rcl_action_take_goal_request+0x64>
 8013526:	b1cd      	cbz	r5, 801355c <rcl_action_take_goal_request+0x74>
 8013528:	b1c6      	cbz	r6, 801355c <rcl_action_take_goal_request+0x74>
 801352a:	6820      	ldr	r0, [r4, #0]
 801352c:	4632      	mov	r2, r6
 801352e:	4629      	mov	r1, r5
 8013530:	f7fe faf4 	bl	8011b1c <rcl_take_request>
 8013534:	b148      	cbz	r0, 801354a <rcl_action_take_goal_request+0x62>
 8013536:	280a      	cmp	r0, #10
 8013538:	d007      	beq.n	801354a <rcl_action_take_goal_request+0x62>
 801353a:	f240 2259 	movw	r2, #601	@ 0x259
 801353e:	f640 0399 	movw	r3, #2201	@ 0x899
 8013542:	4290      	cmp	r0, r2
 8013544:	bf0c      	ite	eq
 8013546:	4618      	moveq	r0, r3
 8013548:	2001      	movne	r0, #1
 801354a:	bd70      	pop	{r4, r5, r6, pc}
 801354c:	f7f7 fec8 	bl	800b2e0 <rcutils_reset_error>
 8013550:	f640 0098 	movw	r0, #2200	@ 0x898
 8013554:	bd70      	pop	{r4, r5, r6, pc}
 8013556:	f640 0098 	movw	r0, #2200	@ 0x898
 801355a:	bd70      	pop	{r4, r5, r6, pc}
 801355c:	200b      	movs	r0, #11
 801355e:	bd70      	pop	{r4, r5, r6, pc}
 8013560:	f640 0098 	movw	r0, #2200	@ 0x898
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop

08013568 <rcl_action_send_goal_response>:
 8013568:	b390      	cbz	r0, 80135d0 <rcl_action_send_goal_response+0x68>
 801356a:	b570      	push	{r4, r5, r6, lr}
 801356c:	4604      	mov	r4, r0
 801356e:	6800      	ldr	r0, [r0, #0]
 8013570:	b348      	cbz	r0, 80135c6 <rcl_action_send_goal_response+0x5e>
 8013572:	460d      	mov	r5, r1
 8013574:	4616      	mov	r6, r2
 8013576:	f7fe fb29 	bl	8011bcc <rcl_service_is_valid>
 801357a:	b1f8      	cbz	r0, 80135bc <rcl_action_send_goal_response+0x54>
 801357c:	6820      	ldr	r0, [r4, #0]
 801357e:	3004      	adds	r0, #4
 8013580:	f7fe fb24 	bl	8011bcc <rcl_service_is_valid>
 8013584:	b1d0      	cbz	r0, 80135bc <rcl_action_send_goal_response+0x54>
 8013586:	6820      	ldr	r0, [r4, #0]
 8013588:	3008      	adds	r0, #8
 801358a:	f7fe fb1f 	bl	8011bcc <rcl_service_is_valid>
 801358e:	b1a8      	cbz	r0, 80135bc <rcl_action_send_goal_response+0x54>
 8013590:	6820      	ldr	r0, [r4, #0]
 8013592:	300c      	adds	r0, #12
 8013594:	f7f6 ff2c 	bl	800a3f0 <rcl_publisher_is_valid>
 8013598:	b180      	cbz	r0, 80135bc <rcl_action_send_goal_response+0x54>
 801359a:	6820      	ldr	r0, [r4, #0]
 801359c:	3010      	adds	r0, #16
 801359e:	f7f6 ff27 	bl	800a3f0 <rcl_publisher_is_valid>
 80135a2:	b158      	cbz	r0, 80135bc <rcl_action_send_goal_response+0x54>
 80135a4:	b195      	cbz	r5, 80135cc <rcl_action_send_goal_response+0x64>
 80135a6:	b18e      	cbz	r6, 80135cc <rcl_action_send_goal_response+0x64>
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	4632      	mov	r2, r6
 80135ac:	4629      	mov	r1, r5
 80135ae:	f7fe faf5 	bl	8011b9c <rcl_send_response>
 80135b2:	b110      	cbz	r0, 80135ba <rcl_action_send_goal_response+0x52>
 80135b4:	2802      	cmp	r0, #2
 80135b6:	bf18      	it	ne
 80135b8:	2001      	movne	r0, #1
 80135ba:	bd70      	pop	{r4, r5, r6, pc}
 80135bc:	f7f7 fe90 	bl	800b2e0 <rcutils_reset_error>
 80135c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80135c4:	bd70      	pop	{r4, r5, r6, pc}
 80135c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80135ca:	bd70      	pop	{r4, r5, r6, pc}
 80135cc:	200b      	movs	r0, #11
 80135ce:	bd70      	pop	{r4, r5, r6, pc}
 80135d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80135d4:	4770      	bx	lr
 80135d6:	bf00      	nop

080135d8 <rcl_action_take_result_request>:
 80135d8:	2800      	cmp	r0, #0
 80135da:	d03a      	beq.n	8013652 <rcl_action_take_result_request+0x7a>
 80135dc:	b570      	push	{r4, r5, r6, lr}
 80135de:	4604      	mov	r4, r0
 80135e0:	6800      	ldr	r0, [r0, #0]
 80135e2:	b388      	cbz	r0, 8013648 <rcl_action_take_result_request+0x70>
 80135e4:	460d      	mov	r5, r1
 80135e6:	4616      	mov	r6, r2
 80135e8:	f7fe faf0 	bl	8011bcc <rcl_service_is_valid>
 80135ec:	b338      	cbz	r0, 801363e <rcl_action_take_result_request+0x66>
 80135ee:	6820      	ldr	r0, [r4, #0]
 80135f0:	3004      	adds	r0, #4
 80135f2:	f7fe faeb 	bl	8011bcc <rcl_service_is_valid>
 80135f6:	b310      	cbz	r0, 801363e <rcl_action_take_result_request+0x66>
 80135f8:	6820      	ldr	r0, [r4, #0]
 80135fa:	3008      	adds	r0, #8
 80135fc:	f7fe fae6 	bl	8011bcc <rcl_service_is_valid>
 8013600:	b1e8      	cbz	r0, 801363e <rcl_action_take_result_request+0x66>
 8013602:	6820      	ldr	r0, [r4, #0]
 8013604:	300c      	adds	r0, #12
 8013606:	f7f6 fef3 	bl	800a3f0 <rcl_publisher_is_valid>
 801360a:	b1c0      	cbz	r0, 801363e <rcl_action_take_result_request+0x66>
 801360c:	6820      	ldr	r0, [r4, #0]
 801360e:	3010      	adds	r0, #16
 8013610:	f7f6 feee 	bl	800a3f0 <rcl_publisher_is_valid>
 8013614:	b198      	cbz	r0, 801363e <rcl_action_take_result_request+0x66>
 8013616:	b1d5      	cbz	r5, 801364e <rcl_action_take_result_request+0x76>
 8013618:	b1ce      	cbz	r6, 801364e <rcl_action_take_result_request+0x76>
 801361a:	6820      	ldr	r0, [r4, #0]
 801361c:	4632      	mov	r2, r6
 801361e:	4629      	mov	r1, r5
 8013620:	3008      	adds	r0, #8
 8013622:	f7fe fa7b 	bl	8011b1c <rcl_take_request>
 8013626:	b148      	cbz	r0, 801363c <rcl_action_take_result_request+0x64>
 8013628:	280a      	cmp	r0, #10
 801362a:	d007      	beq.n	801363c <rcl_action_take_result_request+0x64>
 801362c:	f240 2259 	movw	r2, #601	@ 0x259
 8013630:	f640 0399 	movw	r3, #2201	@ 0x899
 8013634:	4290      	cmp	r0, r2
 8013636:	bf0c      	ite	eq
 8013638:	4618      	moveq	r0, r3
 801363a:	2001      	movne	r0, #1
 801363c:	bd70      	pop	{r4, r5, r6, pc}
 801363e:	f7f7 fe4f 	bl	800b2e0 <rcutils_reset_error>
 8013642:	f640 0098 	movw	r0, #2200	@ 0x898
 8013646:	bd70      	pop	{r4, r5, r6, pc}
 8013648:	f640 0098 	movw	r0, #2200	@ 0x898
 801364c:	bd70      	pop	{r4, r5, r6, pc}
 801364e:	200b      	movs	r0, #11
 8013650:	bd70      	pop	{r4, r5, r6, pc}
 8013652:	f640 0098 	movw	r0, #2200	@ 0x898
 8013656:	4770      	bx	lr

08013658 <rcl_action_take_cancel_request>:
 8013658:	2800      	cmp	r0, #0
 801365a:	d03a      	beq.n	80136d2 <rcl_action_take_cancel_request+0x7a>
 801365c:	b570      	push	{r4, r5, r6, lr}
 801365e:	4604      	mov	r4, r0
 8013660:	6800      	ldr	r0, [r0, #0]
 8013662:	b388      	cbz	r0, 80136c8 <rcl_action_take_cancel_request+0x70>
 8013664:	460d      	mov	r5, r1
 8013666:	4616      	mov	r6, r2
 8013668:	f7fe fab0 	bl	8011bcc <rcl_service_is_valid>
 801366c:	b338      	cbz	r0, 80136be <rcl_action_take_cancel_request+0x66>
 801366e:	6820      	ldr	r0, [r4, #0]
 8013670:	3004      	adds	r0, #4
 8013672:	f7fe faab 	bl	8011bcc <rcl_service_is_valid>
 8013676:	b310      	cbz	r0, 80136be <rcl_action_take_cancel_request+0x66>
 8013678:	6820      	ldr	r0, [r4, #0]
 801367a:	3008      	adds	r0, #8
 801367c:	f7fe faa6 	bl	8011bcc <rcl_service_is_valid>
 8013680:	b1e8      	cbz	r0, 80136be <rcl_action_take_cancel_request+0x66>
 8013682:	6820      	ldr	r0, [r4, #0]
 8013684:	300c      	adds	r0, #12
 8013686:	f7f6 feb3 	bl	800a3f0 <rcl_publisher_is_valid>
 801368a:	b1c0      	cbz	r0, 80136be <rcl_action_take_cancel_request+0x66>
 801368c:	6820      	ldr	r0, [r4, #0]
 801368e:	3010      	adds	r0, #16
 8013690:	f7f6 feae 	bl	800a3f0 <rcl_publisher_is_valid>
 8013694:	b198      	cbz	r0, 80136be <rcl_action_take_cancel_request+0x66>
 8013696:	b1d5      	cbz	r5, 80136ce <rcl_action_take_cancel_request+0x76>
 8013698:	b1ce      	cbz	r6, 80136ce <rcl_action_take_cancel_request+0x76>
 801369a:	6820      	ldr	r0, [r4, #0]
 801369c:	4632      	mov	r2, r6
 801369e:	4629      	mov	r1, r5
 80136a0:	3004      	adds	r0, #4
 80136a2:	f7fe fa3b 	bl	8011b1c <rcl_take_request>
 80136a6:	b148      	cbz	r0, 80136bc <rcl_action_take_cancel_request+0x64>
 80136a8:	280a      	cmp	r0, #10
 80136aa:	d007      	beq.n	80136bc <rcl_action_take_cancel_request+0x64>
 80136ac:	f240 2259 	movw	r2, #601	@ 0x259
 80136b0:	f640 0399 	movw	r3, #2201	@ 0x899
 80136b4:	4290      	cmp	r0, r2
 80136b6:	bf0c      	ite	eq
 80136b8:	4618      	moveq	r0, r3
 80136ba:	2001      	movne	r0, #1
 80136bc:	bd70      	pop	{r4, r5, r6, pc}
 80136be:	f7f7 fe0f 	bl	800b2e0 <rcutils_reset_error>
 80136c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80136c6:	bd70      	pop	{r4, r5, r6, pc}
 80136c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80136cc:	bd70      	pop	{r4, r5, r6, pc}
 80136ce:	200b      	movs	r0, #11
 80136d0:	bd70      	pop	{r4, r5, r6, pc}
 80136d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80136d6:	4770      	bx	lr

080136d8 <rcl_action_send_cancel_response>:
 80136d8:	b398      	cbz	r0, 8013742 <rcl_action_send_cancel_response+0x6a>
 80136da:	b570      	push	{r4, r5, r6, lr}
 80136dc:	4604      	mov	r4, r0
 80136de:	6800      	ldr	r0, [r0, #0]
 80136e0:	b350      	cbz	r0, 8013738 <rcl_action_send_cancel_response+0x60>
 80136e2:	460d      	mov	r5, r1
 80136e4:	4616      	mov	r6, r2
 80136e6:	f7fe fa71 	bl	8011bcc <rcl_service_is_valid>
 80136ea:	b300      	cbz	r0, 801372e <rcl_action_send_cancel_response+0x56>
 80136ec:	6820      	ldr	r0, [r4, #0]
 80136ee:	3004      	adds	r0, #4
 80136f0:	f7fe fa6c 	bl	8011bcc <rcl_service_is_valid>
 80136f4:	b1d8      	cbz	r0, 801372e <rcl_action_send_cancel_response+0x56>
 80136f6:	6820      	ldr	r0, [r4, #0]
 80136f8:	3008      	adds	r0, #8
 80136fa:	f7fe fa67 	bl	8011bcc <rcl_service_is_valid>
 80136fe:	b1b0      	cbz	r0, 801372e <rcl_action_send_cancel_response+0x56>
 8013700:	6820      	ldr	r0, [r4, #0]
 8013702:	300c      	adds	r0, #12
 8013704:	f7f6 fe74 	bl	800a3f0 <rcl_publisher_is_valid>
 8013708:	b188      	cbz	r0, 801372e <rcl_action_send_cancel_response+0x56>
 801370a:	6820      	ldr	r0, [r4, #0]
 801370c:	3010      	adds	r0, #16
 801370e:	f7f6 fe6f 	bl	800a3f0 <rcl_publisher_is_valid>
 8013712:	b160      	cbz	r0, 801372e <rcl_action_send_cancel_response+0x56>
 8013714:	b19d      	cbz	r5, 801373e <rcl_action_send_cancel_response+0x66>
 8013716:	b196      	cbz	r6, 801373e <rcl_action_send_cancel_response+0x66>
 8013718:	6820      	ldr	r0, [r4, #0]
 801371a:	4632      	mov	r2, r6
 801371c:	4629      	mov	r1, r5
 801371e:	3004      	adds	r0, #4
 8013720:	f7fe fa3c 	bl	8011b9c <rcl_send_response>
 8013724:	b110      	cbz	r0, 801372c <rcl_action_send_cancel_response+0x54>
 8013726:	2802      	cmp	r0, #2
 8013728:	bf18      	it	ne
 801372a:	2001      	movne	r0, #1
 801372c:	bd70      	pop	{r4, r5, r6, pc}
 801372e:	f7f7 fdd7 	bl	800b2e0 <rcutils_reset_error>
 8013732:	f640 0098 	movw	r0, #2200	@ 0x898
 8013736:	bd70      	pop	{r4, r5, r6, pc}
 8013738:	f640 0098 	movw	r0, #2200	@ 0x898
 801373c:	bd70      	pop	{r4, r5, r6, pc}
 801373e:	200b      	movs	r0, #11
 8013740:	bd70      	pop	{r4, r5, r6, pc}
 8013742:	f640 0098 	movw	r0, #2200	@ 0x898
 8013746:	4770      	bx	lr

08013748 <rcl_action_wait_set_add_action_server>:
 8013748:	2800      	cmp	r0, #0
 801374a:	d04d      	beq.n	80137e8 <rcl_action_wait_set_add_action_server+0xa0>
 801374c:	b570      	push	{r4, r5, r6, lr}
 801374e:	460c      	mov	r4, r1
 8013750:	b159      	cbz	r1, 801376a <rcl_action_wait_set_add_action_server+0x22>
 8013752:	4605      	mov	r5, r0
 8013754:	6808      	ldr	r0, [r1, #0]
 8013756:	b140      	cbz	r0, 801376a <rcl_action_wait_set_add_action_server+0x22>
 8013758:	4616      	mov	r6, r2
 801375a:	f7fe fa37 	bl	8011bcc <rcl_service_is_valid>
 801375e:	b120      	cbz	r0, 801376a <rcl_action_wait_set_add_action_server+0x22>
 8013760:	6820      	ldr	r0, [r4, #0]
 8013762:	3004      	adds	r0, #4
 8013764:	f7fe fa32 	bl	8011bcc <rcl_service_is_valid>
 8013768:	b910      	cbnz	r0, 8013770 <rcl_action_wait_set_add_action_server+0x28>
 801376a:	f640 0098 	movw	r0, #2200	@ 0x898
 801376e:	bd70      	pop	{r4, r5, r6, pc}
 8013770:	6820      	ldr	r0, [r4, #0]
 8013772:	3008      	adds	r0, #8
 8013774:	f7fe fa2a 	bl	8011bcc <rcl_service_is_valid>
 8013778:	2800      	cmp	r0, #0
 801377a:	d0f6      	beq.n	801376a <rcl_action_wait_set_add_action_server+0x22>
 801377c:	6820      	ldr	r0, [r4, #0]
 801377e:	300c      	adds	r0, #12
 8013780:	f7f6 fe4e 	bl	800a420 <rcl_publisher_is_valid_except_context>
 8013784:	2800      	cmp	r0, #0
 8013786:	d0f0      	beq.n	801376a <rcl_action_wait_set_add_action_server+0x22>
 8013788:	6820      	ldr	r0, [r4, #0]
 801378a:	3010      	adds	r0, #16
 801378c:	f7f6 fe48 	bl	800a420 <rcl_publisher_is_valid_except_context>
 8013790:	2800      	cmp	r0, #0
 8013792:	d0ea      	beq.n	801376a <rcl_action_wait_set_add_action_server+0x22>
 8013794:	6821      	ldr	r1, [r4, #0]
 8013796:	4628      	mov	r0, r5
 8013798:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801379c:	f7ff face 	bl	8012d3c <rcl_wait_set_add_service>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d1e4      	bne.n	801376e <rcl_action_wait_set_add_action_server+0x26>
 80137a4:	6821      	ldr	r1, [r4, #0]
 80137a6:	4628      	mov	r0, r5
 80137a8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80137ac:	3104      	adds	r1, #4
 80137ae:	f7ff fac5 	bl	8012d3c <rcl_wait_set_add_service>
 80137b2:	2800      	cmp	r0, #0
 80137b4:	d1db      	bne.n	801376e <rcl_action_wait_set_add_action_server+0x26>
 80137b6:	6821      	ldr	r1, [r4, #0]
 80137b8:	4628      	mov	r0, r5
 80137ba:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80137be:	3108      	adds	r1, #8
 80137c0:	f7ff fabc 	bl	8012d3c <rcl_wait_set_add_service>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	d1d2      	bne.n	801376e <rcl_action_wait_set_add_action_server+0x26>
 80137c8:	6821      	ldr	r1, [r4, #0]
 80137ca:	4628      	mov	r0, r5
 80137cc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80137d0:	3114      	adds	r1, #20
 80137d2:	f7ff fa57 	bl	8012c84 <rcl_wait_set_add_timer>
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d1c9      	bne.n	801376e <rcl_action_wait_set_add_action_server+0x26>
 80137da:	2e00      	cmp	r6, #0
 80137dc:	d0c7      	beq.n	801376e <rcl_action_wait_set_add_action_server+0x26>
 80137de:	6823      	ldr	r3, [r4, #0]
 80137e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80137e4:	6033      	str	r3, [r6, #0]
 80137e6:	bd70      	pop	{r4, r5, r6, pc}
 80137e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80137ec:	4770      	bx	lr
 80137ee:	bf00      	nop

080137f0 <rcl_action_server_wait_set_get_entities_ready>:
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d05a      	beq.n	80138aa <rcl_action_server_wait_set_get_entities_ready+0xba>
 80137f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137f6:	460c      	mov	r4, r1
 80137f8:	b161      	cbz	r1, 8013814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80137fa:	4605      	mov	r5, r0
 80137fc:	6808      	ldr	r0, [r1, #0]
 80137fe:	b148      	cbz	r0, 8013814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013800:	4616      	mov	r6, r2
 8013802:	461f      	mov	r7, r3
 8013804:	f7fe f9e2 	bl	8011bcc <rcl_service_is_valid>
 8013808:	b120      	cbz	r0, 8013814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801380a:	6820      	ldr	r0, [r4, #0]
 801380c:	3004      	adds	r0, #4
 801380e:	f7fe f9dd 	bl	8011bcc <rcl_service_is_valid>
 8013812:	b910      	cbnz	r0, 801381a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013814:	f640 0098 	movw	r0, #2200	@ 0x898
 8013818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801381a:	6820      	ldr	r0, [r4, #0]
 801381c:	3008      	adds	r0, #8
 801381e:	f7fe f9d5 	bl	8011bcc <rcl_service_is_valid>
 8013822:	2800      	cmp	r0, #0
 8013824:	d0f6      	beq.n	8013814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013826:	6820      	ldr	r0, [r4, #0]
 8013828:	300c      	adds	r0, #12
 801382a:	f7f6 fdf9 	bl	800a420 <rcl_publisher_is_valid_except_context>
 801382e:	2800      	cmp	r0, #0
 8013830:	d0f0      	beq.n	8013814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013832:	6820      	ldr	r0, [r4, #0]
 8013834:	3010      	adds	r0, #16
 8013836:	f7f6 fdf3 	bl	800a420 <rcl_publisher_is_valid_except_context>
 801383a:	2800      	cmp	r0, #0
 801383c:	d0ea      	beq.n	8013814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801383e:	b3be      	cbz	r6, 80138b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013840:	b3b7      	cbz	r7, 80138b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013842:	9b06      	ldr	r3, [sp, #24]
 8013844:	b3a3      	cbz	r3, 80138b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013846:	9b07      	ldr	r3, [sp, #28]
 8013848:	b393      	cbz	r3, 80138b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801384a:	6821      	ldr	r1, [r4, #0]
 801384c:	692a      	ldr	r2, [r5, #16]
 801384e:	6a2c      	ldr	r4, [r5, #32]
 8013850:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8013854:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8013858:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801385c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8013860:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8013864:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8013868:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801386c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013870:	1a64      	subs	r4, r4, r1
 8013872:	fab4 f484 	clz	r4, r4
 8013876:	0964      	lsrs	r4, r4, #5
 8013878:	7034      	strb	r4, [r6, #0]
 801387a:	1d0c      	adds	r4, r1, #4
 801387c:	1b1b      	subs	r3, r3, r4
 801387e:	fab3 f383 	clz	r3, r3
 8013882:	095b      	lsrs	r3, r3, #5
 8013884:	f101 0408 	add.w	r4, r1, #8
 8013888:	703b      	strb	r3, [r7, #0]
 801388a:	f101 0314 	add.w	r3, r1, #20
 801388e:	1b01      	subs	r1, r0, r4
 8013890:	1ad3      	subs	r3, r2, r3
 8013892:	fab1 f181 	clz	r1, r1
 8013896:	9a06      	ldr	r2, [sp, #24]
 8013898:	0949      	lsrs	r1, r1, #5
 801389a:	7011      	strb	r1, [r2, #0]
 801389c:	fab3 f383 	clz	r3, r3
 80138a0:	9a07      	ldr	r2, [sp, #28]
 80138a2:	095b      	lsrs	r3, r3, #5
 80138a4:	2000      	movs	r0, #0
 80138a6:	7013      	strb	r3, [r2, #0]
 80138a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80138ae:	4770      	bx	lr
 80138b0:	200b      	movs	r0, #11
 80138b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080138b4 <_execute_event_handler>:
 80138b4:	2002      	movs	r0, #2
 80138b6:	4770      	bx	lr

080138b8 <_cancel_goal_event_handler>:
 80138b8:	2003      	movs	r0, #3
 80138ba:	4770      	bx	lr

080138bc <_succeed_event_handler>:
 80138bc:	2004      	movs	r0, #4
 80138be:	4770      	bx	lr

080138c0 <_abort_event_handler>:
 80138c0:	2006      	movs	r0, #6
 80138c2:	4770      	bx	lr

080138c4 <_canceled_event_handler>:
 80138c4:	2005      	movs	r0, #5
 80138c6:	4770      	bx	lr

080138c8 <rcl_action_transition_goal_state>:
 80138c8:	b2c2      	uxtb	r2, r0
 80138ca:	2a06      	cmp	r2, #6
 80138cc:	d80c      	bhi.n	80138e8 <rcl_action_transition_goal_state+0x20>
 80138ce:	2904      	cmp	r1, #4
 80138d0:	d80a      	bhi.n	80138e8 <rcl_action_transition_goal_state+0x20>
 80138d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80138d6:	b410      	push	{r4}
 80138d8:	1853      	adds	r3, r2, r1
 80138da:	4c06      	ldr	r4, [pc, #24]	@ (80138f4 <rcl_action_transition_goal_state+0x2c>)
 80138dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80138e0:	b123      	cbz	r3, 80138ec <rcl_action_transition_goal_state+0x24>
 80138e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138e6:	4718      	bx	r3
 80138e8:	2000      	movs	r0, #0
 80138ea:	4770      	bx	lr
 80138ec:	2000      	movs	r0, #0
 80138ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138f2:	4770      	bx	lr
 80138f4:	08018530 	.word	0x08018530

080138f8 <rcl_action_get_zero_initialized_cancel_response>:
 80138f8:	b510      	push	{r4, lr}
 80138fa:	4c07      	ldr	r4, [pc, #28]	@ (8013918 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80138fc:	4686      	mov	lr, r0
 80138fe:	4684      	mov	ip, r0
 8013900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013902:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013908:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801390c:	6823      	ldr	r3, [r4, #0]
 801390e:	f8cc 3000 	str.w	r3, [ip]
 8013912:	4670      	mov	r0, lr
 8013914:	bd10      	pop	{r4, pc}
 8013916:	bf00      	nop
 8013918:	080185bc 	.word	0x080185bc

0801391c <rclc_action_send_result_request>:
 801391c:	b1d0      	cbz	r0, 8013954 <rclc_action_send_result_request+0x38>
 801391e:	b500      	push	{lr}
 8013920:	4684      	mov	ip, r0
 8013922:	b087      	sub	sp, #28
 8013924:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013928:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801392c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013930:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013934:	f10d 0e08 	add.w	lr, sp, #8
 8013938:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801393c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013940:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8013944:	a902      	add	r1, sp, #8
 8013946:	3010      	adds	r0, #16
 8013948:	f7ff fbda 	bl	8013100 <rcl_action_send_result_request>
 801394c:	b920      	cbnz	r0, 8013958 <rclc_action_send_result_request+0x3c>
 801394e:	b007      	add	sp, #28
 8013950:	f85d fb04 	ldr.w	pc, [sp], #4
 8013954:	200b      	movs	r0, #11
 8013956:	4770      	bx	lr
 8013958:	9001      	str	r0, [sp, #4]
 801395a:	f7f7 fcc1 	bl	800b2e0 <rcutils_reset_error>
 801395e:	9801      	ldr	r0, [sp, #4]
 8013960:	b007      	add	sp, #28
 8013962:	f85d fb04 	ldr.w	pc, [sp], #4
 8013966:	bf00      	nop

08013968 <rclc_action_take_goal_handle>:
 8013968:	b160      	cbz	r0, 8013984 <rclc_action_take_goal_handle+0x1c>
 801396a:	6883      	ldr	r3, [r0, #8]
 801396c:	b143      	cbz	r3, 8013980 <rclc_action_take_goal_handle+0x18>
 801396e:	6819      	ldr	r1, [r3, #0]
 8013970:	6081      	str	r1, [r0, #8]
 8013972:	2200      	movs	r2, #0
 8013974:	721a      	strb	r2, [r3, #8]
 8013976:	68c1      	ldr	r1, [r0, #12]
 8013978:	6019      	str	r1, [r3, #0]
 801397a:	621a      	str	r2, [r3, #32]
 801397c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801397e:	60c3      	str	r3, [r0, #12]
 8013980:	4618      	mov	r0, r3
 8013982:	4770      	bx	lr
 8013984:	4603      	mov	r3, r0
 8013986:	e7fb      	b.n	8013980 <rclc_action_take_goal_handle+0x18>

08013988 <rclc_action_remove_used_goal_handle>:
 8013988:	b180      	cbz	r0, 80139ac <rclc_action_remove_used_goal_handle+0x24>
 801398a:	b179      	cbz	r1, 80139ac <rclc_action_remove_used_goal_handle+0x24>
 801398c:	68c3      	ldr	r3, [r0, #12]
 801398e:	4299      	cmp	r1, r3
 8013990:	d00d      	beq.n	80139ae <rclc_action_remove_used_goal_handle+0x26>
 8013992:	b12b      	cbz	r3, 80139a0 <rclc_action_remove_used_goal_handle+0x18>
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	4291      	cmp	r1, r2
 8013998:	d003      	beq.n	80139a2 <rclc_action_remove_used_goal_handle+0x1a>
 801399a:	4613      	mov	r3, r2
 801399c:	2b00      	cmp	r3, #0
 801399e:	d1f9      	bne.n	8013994 <rclc_action_remove_used_goal_handle+0xc>
 80139a0:	4770      	bx	lr
 80139a2:	680a      	ldr	r2, [r1, #0]
 80139a4:	601a      	str	r2, [r3, #0]
 80139a6:	6883      	ldr	r3, [r0, #8]
 80139a8:	600b      	str	r3, [r1, #0]
 80139aa:	6081      	str	r1, [r0, #8]
 80139ac:	4770      	bx	lr
 80139ae:	680b      	ldr	r3, [r1, #0]
 80139b0:	60c3      	str	r3, [r0, #12]
 80139b2:	e7f8      	b.n	80139a6 <rclc_action_remove_used_goal_handle+0x1e>

080139b4 <rclc_action_find_goal_handle_by_uuid>:
 80139b4:	b538      	push	{r3, r4, r5, lr}
 80139b6:	b180      	cbz	r0, 80139da <rclc_action_find_goal_handle_by_uuid+0x26>
 80139b8:	460d      	mov	r5, r1
 80139ba:	b181      	cbz	r1, 80139de <rclc_action_find_goal_handle_by_uuid+0x2a>
 80139bc:	68c4      	ldr	r4, [r0, #12]
 80139be:	b914      	cbnz	r4, 80139c6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80139c0:	e009      	b.n	80139d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80139c2:	6824      	ldr	r4, [r4, #0]
 80139c4:	b13c      	cbz	r4, 80139d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80139c6:	f104 0009 	add.w	r0, r4, #9
 80139ca:	2210      	movs	r2, #16
 80139cc:	4629      	mov	r1, r5
 80139ce:	f003 f9b9 	bl	8016d44 <memcmp>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	d1f5      	bne.n	80139c2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80139d6:	4620      	mov	r0, r4
 80139d8:	bd38      	pop	{r3, r4, r5, pc}
 80139da:	4604      	mov	r4, r0
 80139dc:	e7fb      	b.n	80139d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80139de:	460c      	mov	r4, r1
 80139e0:	e7f9      	b.n	80139d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80139e2:	bf00      	nop

080139e4 <rclc_action_find_first_handle_by_status>:
 80139e4:	b140      	cbz	r0, 80139f8 <rclc_action_find_first_handle_by_status+0x14>
 80139e6:	68c0      	ldr	r0, [r0, #12]
 80139e8:	b910      	cbnz	r0, 80139f0 <rclc_action_find_first_handle_by_status+0xc>
 80139ea:	e005      	b.n	80139f8 <rclc_action_find_first_handle_by_status+0x14>
 80139ec:	6800      	ldr	r0, [r0, #0]
 80139ee:	b118      	cbz	r0, 80139f8 <rclc_action_find_first_handle_by_status+0x14>
 80139f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80139f4:	428b      	cmp	r3, r1
 80139f6:	d1f9      	bne.n	80139ec <rclc_action_find_first_handle_by_status+0x8>
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop

080139fc <rclc_action_find_first_terminated_handle>:
 80139fc:	b140      	cbz	r0, 8013a10 <rclc_action_find_first_terminated_handle+0x14>
 80139fe:	68c0      	ldr	r0, [r0, #12]
 8013a00:	b910      	cbnz	r0, 8013a08 <rclc_action_find_first_terminated_handle+0xc>
 8013a02:	e005      	b.n	8013a10 <rclc_action_find_first_terminated_handle+0x14>
 8013a04:	6800      	ldr	r0, [r0, #0]
 8013a06:	b118      	cbz	r0, 8013a10 <rclc_action_find_first_terminated_handle+0x14>
 8013a08:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013a0c:	2b03      	cmp	r3, #3
 8013a0e:	ddf9      	ble.n	8013a04 <rclc_action_find_first_terminated_handle+0x8>
 8013a10:	4770      	bx	lr
 8013a12:	bf00      	nop

08013a14 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013a14:	b170      	cbz	r0, 8013a34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013a16:	68c0      	ldr	r0, [r0, #12]
 8013a18:	b160      	cbz	r0, 8013a34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013a1a:	b410      	push	{r4}
 8013a1c:	e001      	b.n	8013a22 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013a1e:	6800      	ldr	r0, [r0, #0]
 8013a20:	b128      	cbz	r0, 8013a2e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013a22:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8013a26:	4299      	cmp	r1, r3
 8013a28:	bf08      	it	eq
 8013a2a:	4294      	cmpeq	r4, r2
 8013a2c:	d1f7      	bne.n	8013a1e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a32:	4770      	bx	lr
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop

08013a38 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013a38:	b170      	cbz	r0, 8013a58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013a3a:	68c0      	ldr	r0, [r0, #12]
 8013a3c:	b160      	cbz	r0, 8013a58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013a3e:	b410      	push	{r4}
 8013a40:	e001      	b.n	8013a46 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8013a42:	6800      	ldr	r0, [r0, #0]
 8013a44:	b128      	cbz	r0, 8013a52 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8013a46:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8013a4a:	4299      	cmp	r1, r3
 8013a4c:	bf08      	it	eq
 8013a4e:	4294      	cmpeq	r4, r2
 8013a50:	d1f7      	bne.n	8013a42 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8013a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a56:	4770      	bx	lr
 8013a58:	4770      	bx	lr
 8013a5a:	bf00      	nop

08013a5c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8013a5c:	b170      	cbz	r0, 8013a7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013a5e:	68c0      	ldr	r0, [r0, #12]
 8013a60:	b160      	cbz	r0, 8013a7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013a62:	b410      	push	{r4}
 8013a64:	e001      	b.n	8013a6a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8013a66:	6800      	ldr	r0, [r0, #0]
 8013a68:	b128      	cbz	r0, 8013a76 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8013a6a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8013a6e:	4299      	cmp	r1, r3
 8013a70:	bf08      	it	eq
 8013a72:	4294      	cmpeq	r4, r2
 8013a74:	d1f7      	bne.n	8013a66 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8013a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a7a:	4770      	bx	lr
 8013a7c:	4770      	bx	lr
 8013a7e:	bf00      	nop

08013a80 <rclc_action_find_first_handle_with_goal_response>:
 8013a80:	b140      	cbz	r0, 8013a94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a82:	68c0      	ldr	r0, [r0, #12]
 8013a84:	b910      	cbnz	r0, 8013a8c <rclc_action_find_first_handle_with_goal_response+0xc>
 8013a86:	e005      	b.n	8013a94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a88:	6800      	ldr	r0, [r0, #0]
 8013a8a:	b118      	cbz	r0, 8013a94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013a8c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d0f9      	beq.n	8013a88 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop

08013a98 <rclc_action_find_first_handle_with_result_response>:
 8013a98:	b140      	cbz	r0, 8013aac <rclc_action_find_first_handle_with_result_response+0x14>
 8013a9a:	68c0      	ldr	r0, [r0, #12]
 8013a9c:	b910      	cbnz	r0, 8013aa4 <rclc_action_find_first_handle_with_result_response+0xc>
 8013a9e:	e005      	b.n	8013aac <rclc_action_find_first_handle_with_result_response+0x14>
 8013aa0:	6800      	ldr	r0, [r0, #0]
 8013aa2:	b118      	cbz	r0, 8013aac <rclc_action_find_first_handle_with_result_response+0x14>
 8013aa4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d0f9      	beq.n	8013aa0 <rclc_action_find_first_handle_with_result_response+0x8>
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop

08013ab0 <rclc_action_server_response_goal_request>:
 8013ab0:	b198      	cbz	r0, 8013ada <rclc_action_server_response_goal_request+0x2a>
 8013ab2:	b510      	push	{r4, lr}
 8013ab4:	6844      	ldr	r4, [r0, #4]
 8013ab6:	b086      	sub	sp, #24
 8013ab8:	2200      	movs	r2, #0
 8013aba:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013abe:	460b      	mov	r3, r1
 8013ac0:	9205      	str	r2, [sp, #20]
 8013ac2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8013ac6:	aa03      	add	r2, sp, #12
 8013ac8:	f104 0010 	add.w	r0, r4, #16
 8013acc:	f88d 300c 	strb.w	r3, [sp, #12]
 8013ad0:	f7ff fd4a 	bl	8013568 <rcl_action_send_goal_response>
 8013ad4:	b918      	cbnz	r0, 8013ade <rclc_action_server_response_goal_request+0x2e>
 8013ad6:	b006      	add	sp, #24
 8013ad8:	bd10      	pop	{r4, pc}
 8013ada:	200b      	movs	r0, #11
 8013adc:	4770      	bx	lr
 8013ade:	9001      	str	r0, [sp, #4]
 8013ae0:	f7f7 fbfe 	bl	800b2e0 <rcutils_reset_error>
 8013ae4:	9801      	ldr	r0, [sp, #4]
 8013ae6:	b006      	add	sp, #24
 8013ae8:	bd10      	pop	{r4, pc}
 8013aea:	bf00      	nop
 8013aec:	0000      	movs	r0, r0
	...

08013af0 <rclc_action_server_goal_cancel_accept>:
 8013af0:	b310      	cbz	r0, 8013b38 <rclc_action_server_goal_cancel_accept+0x48>
 8013af2:	b510      	push	{r4, lr}
 8013af4:	b090      	sub	sp, #64	@ 0x40
 8013af6:	4604      	mov	r4, r0
 8013af8:	a806      	add	r0, sp, #24
 8013afa:	f7ff fefd 	bl	80138f8 <rcl_action_get_zero_initialized_cancel_response>
 8013afe:	2300      	movs	r3, #0
 8013b00:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013b04:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013b08:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013b0c:	f88d 3018 	strb.w	r3, [sp, #24]
 8013b10:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013b14:	f8cd d01c 	str.w	sp, [sp, #28]
 8013b18:	46ec      	mov	ip, sp
 8013b1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b1e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013b40 <rclc_action_server_goal_cancel_accept+0x50>
 8013b22:	6860      	ldr	r0, [r4, #4]
 8013b24:	aa06      	add	r2, sp, #24
 8013b26:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8013b2a:	3010      	adds	r0, #16
 8013b2c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013b30:	f7ff fdd2 	bl	80136d8 <rcl_action_send_cancel_response>
 8013b34:	b010      	add	sp, #64	@ 0x40
 8013b36:	bd10      	pop	{r4, pc}
 8013b38:	200b      	movs	r0, #11
 8013b3a:	4770      	bx	lr
 8013b3c:	f3af 8000 	nop.w
 8013b40:	00000001 	.word	0x00000001
 8013b44:	00000001 	.word	0x00000001

08013b48 <rclc_action_server_goal_cancel_reject>:
 8013b48:	b082      	sub	sp, #8
 8013b4a:	b530      	push	{r4, r5, lr}
 8013b4c:	b08b      	sub	sp, #44	@ 0x2c
 8013b4e:	ac0e      	add	r4, sp, #56	@ 0x38
 8013b50:	e884 000c 	stmia.w	r4, {r2, r3}
 8013b54:	b188      	cbz	r0, 8013b7a <rclc_action_server_goal_cancel_reject+0x32>
 8013b56:	4604      	mov	r4, r0
 8013b58:	a801      	add	r0, sp, #4
 8013b5a:	460d      	mov	r5, r1
 8013b5c:	f7ff fecc 	bl	80138f8 <rcl_action_get_zero_initialized_cancel_response>
 8013b60:	aa01      	add	r2, sp, #4
 8013b62:	a90e      	add	r1, sp, #56	@ 0x38
 8013b64:	f104 0010 	add.w	r0, r4, #16
 8013b68:	f88d 5004 	strb.w	r5, [sp, #4]
 8013b6c:	f7ff fdb4 	bl	80136d8 <rcl_action_send_cancel_response>
 8013b70:	b00b      	add	sp, #44	@ 0x2c
 8013b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b76:	b002      	add	sp, #8
 8013b78:	4770      	bx	lr
 8013b7a:	200b      	movs	r0, #11
 8013b7c:	b00b      	add	sp, #44	@ 0x2c
 8013b7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b82:	b002      	add	sp, #8
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop

08013b88 <__atomic_load_8>:
 8013b88:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013b8c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013b90:	4a15      	ldr	r2, [pc, #84]	@ (8013be8 <__atomic_load_8+0x60>)
 8013b92:	4b16      	ldr	r3, [pc, #88]	@ (8013bec <__atomic_load_8+0x64>)
 8013b94:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013b98:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013b9c:	fb02 f101 	mul.w	r1, r2, r1
 8013ba0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013ba4:	fba3 2301 	umull	r2, r3, r3, r1
 8013ba8:	091b      	lsrs	r3, r3, #4
 8013baa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013bae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013bb2:	b4d0      	push	{r4, r6, r7}
 8013bb4:	4c0e      	ldr	r4, [pc, #56]	@ (8013bf0 <__atomic_load_8+0x68>)
 8013bb6:	1ac9      	subs	r1, r1, r3
 8013bb8:	1862      	adds	r2, r4, r1
 8013bba:	f04f 0c01 	mov.w	ip, #1
 8013bbe:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013bc2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013bc6:	2e00      	cmp	r6, #0
 8013bc8:	d1f9      	bne.n	8013bbe <__atomic_load_8+0x36>
 8013bca:	f3bf 8f5b 	dmb	ish
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d1f4      	bne.n	8013bbe <__atomic_load_8+0x36>
 8013bd4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013bd8:	f3bf 8f5b 	dmb	ish
 8013bdc:	5463      	strb	r3, [r4, r1]
 8013bde:	4630      	mov	r0, r6
 8013be0:	4639      	mov	r1, r7
 8013be2:	bcd0      	pop	{r4, r6, r7}
 8013be4:	4770      	bx	lr
 8013be6:	bf00      	nop
 8013be8:	27d4eb2d 	.word	0x27d4eb2d
 8013bec:	b21642c9 	.word	0xb21642c9
 8013bf0:	2000ca8c 	.word	0x2000ca8c

08013bf4 <__atomic_store_8>:
 8013bf4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013bf8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013bfc:	b570      	push	{r4, r5, r6, lr}
 8013bfe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013c02:	4c14      	ldr	r4, [pc, #80]	@ (8013c54 <__atomic_store_8+0x60>)
 8013c04:	4d14      	ldr	r5, [pc, #80]	@ (8013c58 <__atomic_store_8+0x64>)
 8013c06:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013c0a:	fb04 f101 	mul.w	r1, r4, r1
 8013c0e:	4c13      	ldr	r4, [pc, #76]	@ (8013c5c <__atomic_store_8+0x68>)
 8013c10:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013c14:	fba4 4e01 	umull	r4, lr, r4, r1
 8013c18:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8013c1c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013c20:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013c24:	eba1 0e0e 	sub.w	lr, r1, lr
 8013c28:	eb05 0c0e 	add.w	ip, r5, lr
 8013c2c:	f04f 0401 	mov.w	r4, #1
 8013c30:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013c34:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013c38:	2e00      	cmp	r6, #0
 8013c3a:	d1f9      	bne.n	8013c30 <__atomic_store_8+0x3c>
 8013c3c:	f3bf 8f5b 	dmb	ish
 8013c40:	b2c9      	uxtb	r1, r1
 8013c42:	2900      	cmp	r1, #0
 8013c44:	d1f4      	bne.n	8013c30 <__atomic_store_8+0x3c>
 8013c46:	e9c0 2300 	strd	r2, r3, [r0]
 8013c4a:	f3bf 8f5b 	dmb	ish
 8013c4e:	f805 100e 	strb.w	r1, [r5, lr]
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	27d4eb2d 	.word	0x27d4eb2d
 8013c58:	2000ca8c 	.word	0x2000ca8c
 8013c5c:	b21642c9 	.word	0xb21642c9

08013c60 <__atomic_exchange_8>:
 8013c60:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8013c64:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8013c68:	4916      	ldr	r1, [pc, #88]	@ (8013cc4 <__atomic_exchange_8+0x64>)
 8013c6a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8013c6e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8013c72:	fb01 fc0c 	mul.w	ip, r1, ip
 8013c76:	4914      	ldr	r1, [pc, #80]	@ (8013cc8 <__atomic_exchange_8+0x68>)
 8013c78:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8013c7c:	b570      	push	{r4, r5, r6, lr}
 8013c7e:	4605      	mov	r5, r0
 8013c80:	fba1 010c 	umull	r0, r1, r1, ip
 8013c84:	0909      	lsrs	r1, r1, #4
 8013c86:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013c8a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8013ccc <__atomic_exchange_8+0x6c>)
 8013c90:	ebac 0c01 	sub.w	ip, ip, r1
 8013c94:	eb06 010c 	add.w	r1, r6, ip
 8013c98:	f04f 0e01 	mov.w	lr, #1
 8013c9c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013ca0:	e8c1 ef40 	strexb	r0, lr, [r1]
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d1f9      	bne.n	8013c9c <__atomic_exchange_8+0x3c>
 8013ca8:	f3bf 8f5b 	dmb	ish
 8013cac:	b2e4      	uxtb	r4, r4
 8013cae:	2c00      	cmp	r4, #0
 8013cb0:	d1f4      	bne.n	8013c9c <__atomic_exchange_8+0x3c>
 8013cb2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013cb6:	e9c5 2300 	strd	r2, r3, [r5]
 8013cba:	f3bf 8f5b 	dmb	ish
 8013cbe:	f806 400c 	strb.w	r4, [r6, ip]
 8013cc2:	bd70      	pop	{r4, r5, r6, pc}
 8013cc4:	27d4eb2d 	.word	0x27d4eb2d
 8013cc8:	b21642c9 	.word	0xb21642c9
 8013ccc:	2000ca8c 	.word	0x2000ca8c

08013cd0 <rcutils_get_env>:
 8013cd0:	b168      	cbz	r0, 8013cee <rcutils_get_env+0x1e>
 8013cd2:	b510      	push	{r4, lr}
 8013cd4:	460c      	mov	r4, r1
 8013cd6:	b129      	cbz	r1, 8013ce4 <rcutils_get_env+0x14>
 8013cd8:	f002 fc90 	bl	80165fc <getenv>
 8013cdc:	b120      	cbz	r0, 8013ce8 <rcutils_get_env+0x18>
 8013cde:	6020      	str	r0, [r4, #0]
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	bd10      	pop	{r4, pc}
 8013ce4:	4803      	ldr	r0, [pc, #12]	@ (8013cf4 <rcutils_get_env+0x24>)
 8013ce6:	bd10      	pop	{r4, pc}
 8013ce8:	4b03      	ldr	r3, [pc, #12]	@ (8013cf8 <rcutils_get_env+0x28>)
 8013cea:	6023      	str	r3, [r4, #0]
 8013cec:	bd10      	pop	{r4, pc}
 8013cee:	4803      	ldr	r0, [pc, #12]	@ (8013cfc <rcutils_get_env+0x2c>)
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	080185fc 	.word	0x080185fc
 8013cf8:	08018720 	.word	0x08018720
 8013cfc:	080185e0 	.word	0x080185e0

08013d00 <rcutils_is_directory>:
 8013d00:	2000      	movs	r0, #0
 8013d02:	4770      	bx	lr

08013d04 <rcutils_join_path>:
 8013d04:	b082      	sub	sp, #8
 8013d06:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	b002      	add	sp, #8
 8013d0e:	4770      	bx	lr

08013d10 <rcutils_to_native_path>:
 8013d10:	b084      	sub	sp, #16
 8013d12:	a801      	add	r0, sp, #4
 8013d14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013d18:	b004      	add	sp, #16
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop

08013d20 <rcutils_format_string_limit>:
 8013d20:	b40f      	push	{r0, r1, r2, r3}
 8013d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d24:	b083      	sub	sp, #12
 8013d26:	ac08      	add	r4, sp, #32
 8013d28:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013d2e:	b34e      	cbz	r6, 8013d84 <rcutils_format_string_limit+0x64>
 8013d30:	a808      	add	r0, sp, #32
 8013d32:	f7f7 faaf 	bl	800b294 <rcutils_allocator_is_valid>
 8013d36:	b328      	cbz	r0, 8013d84 <rcutils_format_string_limit+0x64>
 8013d38:	2100      	movs	r1, #0
 8013d3a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013d3c:	4632      	mov	r2, r6
 8013d3e:	4608      	mov	r0, r1
 8013d40:	e9cd 3300 	strd	r3, r3, [sp]
 8013d44:	f000 f8f4 	bl	8013f30 <rcutils_vsnprintf>
 8013d48:	1c43      	adds	r3, r0, #1
 8013d4a:	4605      	mov	r5, r0
 8013d4c:	d01a      	beq.n	8013d84 <rcutils_format_string_limit+0x64>
 8013d4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d52:	1c47      	adds	r7, r0, #1
 8013d54:	429f      	cmp	r7, r3
 8013d56:	bf84      	itt	hi
 8013d58:	461f      	movhi	r7, r3
 8013d5a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8013d5e:	4638      	mov	r0, r7
 8013d60:	9b08      	ldr	r3, [sp, #32]
 8013d62:	4798      	blx	r3
 8013d64:	4604      	mov	r4, r0
 8013d66:	b168      	cbz	r0, 8013d84 <rcutils_format_string_limit+0x64>
 8013d68:	9b01      	ldr	r3, [sp, #4]
 8013d6a:	4632      	mov	r2, r6
 8013d6c:	4639      	mov	r1, r7
 8013d6e:	f000 f8df 	bl	8013f30 <rcutils_vsnprintf>
 8013d72:	2800      	cmp	r0, #0
 8013d74:	db02      	blt.n	8013d7c <rcutils_format_string_limit+0x5c>
 8013d76:	2300      	movs	r3, #0
 8013d78:	5563      	strb	r3, [r4, r5]
 8013d7a:	e004      	b.n	8013d86 <rcutils_format_string_limit+0x66>
 8013d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d7e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d80:	4620      	mov	r0, r4
 8013d82:	4798      	blx	r3
 8013d84:	2400      	movs	r4, #0
 8013d86:	4620      	mov	r0, r4
 8013d88:	b003      	add	sp, #12
 8013d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013d8e:	b004      	add	sp, #16
 8013d90:	4770      	bx	lr
 8013d92:	bf00      	nop

08013d94 <rcutils_repl_str>:
 8013d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d98:	ed2d 8b02 	vpush	{d8}
 8013d9c:	b087      	sub	sp, #28
 8013d9e:	4680      	mov	r8, r0
 8013da0:	4608      	mov	r0, r1
 8013da2:	f8cd 8004 	str.w	r8, [sp, #4]
 8013da6:	ee08 2a10 	vmov	s16, r2
 8013daa:	468a      	mov	sl, r1
 8013dac:	4699      	mov	r9, r3
 8013dae:	f7ec fa41 	bl	8000234 <strlen>
 8013db2:	2600      	movs	r6, #0
 8013db4:	4647      	mov	r7, r8
 8013db6:	9002      	str	r0, [sp, #8]
 8013db8:	46b3      	mov	fp, r6
 8013dba:	2510      	movs	r5, #16
 8013dbc:	46b0      	mov	r8, r6
 8013dbe:	e01d      	b.n	8013dfc <rcutils_repl_str+0x68>
 8013dc0:	f10b 0b01 	add.w	fp, fp, #1
 8013dc4:	455e      	cmp	r6, fp
 8013dc6:	d211      	bcs.n	8013dec <rcutils_repl_str+0x58>
 8013dc8:	442e      	add	r6, r5
 8013dca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013dce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013dd2:	00b1      	lsls	r1, r6, #2
 8013dd4:	4798      	blx	r3
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	f000 8088 	beq.w	8013eec <rcutils_repl_str+0x158>
 8013ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013de0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8013de4:	4680      	mov	r8, r0
 8013de6:	bf28      	it	cs
 8013de8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013dec:	9a01      	ldr	r2, [sp, #4]
 8013dee:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8013df2:	1aa2      	subs	r2, r4, r2
 8013df4:	f843 2c04 	str.w	r2, [r3, #-4]
 8013df8:	9b02      	ldr	r3, [sp, #8]
 8013dfa:	18e7      	adds	r7, r4, r3
 8013dfc:	4651      	mov	r1, sl
 8013dfe:	4638      	mov	r0, r7
 8013e00:	f002 fff1 	bl	8016de6 <strstr>
 8013e04:	4604      	mov	r4, r0
 8013e06:	4640      	mov	r0, r8
 8013e08:	2c00      	cmp	r4, #0
 8013e0a:	d1d9      	bne.n	8013dc0 <rcutils_repl_str+0x2c>
 8013e0c:	46b8      	mov	r8, r7
 8013e0e:	4607      	mov	r7, r0
 8013e10:	4640      	mov	r0, r8
 8013e12:	f7ec fa0f 	bl	8000234 <strlen>
 8013e16:	9b01      	ldr	r3, [sp, #4]
 8013e18:	eba8 0303 	sub.w	r3, r8, r3
 8013e1c:	181c      	adds	r4, r3, r0
 8013e1e:	9404      	str	r4, [sp, #16]
 8013e20:	f1bb 0f00 	cmp.w	fp, #0
 8013e24:	d04a      	beq.n	8013ebc <rcutils_repl_str+0x128>
 8013e26:	ee18 0a10 	vmov	r0, s16
 8013e2a:	f7ec fa03 	bl	8000234 <strlen>
 8013e2e:	9b02      	ldr	r3, [sp, #8]
 8013e30:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013e34:	1ac3      	subs	r3, r0, r3
 8013e36:	fb0b 4303 	mla	r3, fp, r3, r4
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	9305      	str	r3, [sp, #20]
 8013e3e:	4606      	mov	r6, r0
 8013e40:	f8d9 3000 	ldr.w	r3, [r9]
 8013e44:	1c50      	adds	r0, r2, #1
 8013e46:	4798      	blx	r3
 8013e48:	9003      	str	r0, [sp, #12]
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	d04f      	beq.n	8013eee <rcutils_repl_str+0x15a>
 8013e4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013e52:	683a      	ldr	r2, [r7, #0]
 8013e54:	4641      	mov	r1, r8
 8013e56:	f003 f868 	bl	8016f2a <memcpy>
 8013e5a:	683d      	ldr	r5, [r7, #0]
 8013e5c:	9b03      	ldr	r3, [sp, #12]
 8013e5e:	9701      	str	r7, [sp, #4]
 8013e60:	46ba      	mov	sl, r7
 8013e62:	441d      	add	r5, r3
 8013e64:	9f02      	ldr	r7, [sp, #8]
 8013e66:	f8cd 9008 	str.w	r9, [sp, #8]
 8013e6a:	2401      	movs	r4, #1
 8013e6c:	46d1      	mov	r9, sl
 8013e6e:	ee18 aa10 	vmov	sl, s16
 8013e72:	e00a      	b.n	8013e8a <rcutils_repl_str+0xf6>
 8013e74:	f8d9 5000 	ldr.w	r5, [r9]
 8013e78:	1aaa      	subs	r2, r5, r2
 8013e7a:	1885      	adds	r5, r0, r2
 8013e7c:	f003 f855 	bl	8016f2a <memcpy>
 8013e80:	45a3      	cmp	fp, r4
 8013e82:	f104 0201 	add.w	r2, r4, #1
 8013e86:	d935      	bls.n	8013ef4 <rcutils_repl_str+0x160>
 8013e88:	4614      	mov	r4, r2
 8013e8a:	4632      	mov	r2, r6
 8013e8c:	4651      	mov	r1, sl
 8013e8e:	4628      	mov	r0, r5
 8013e90:	f003 f84b 	bl	8016f2a <memcpy>
 8013e94:	f859 2b04 	ldr.w	r2, [r9], #4
 8013e98:	45a3      	cmp	fp, r4
 8013e9a:	443a      	add	r2, r7
 8013e9c:	eb05 0006 	add.w	r0, r5, r6
 8013ea0:	eb08 0102 	add.w	r1, r8, r2
 8013ea4:	d1e6      	bne.n	8013e74 <rcutils_repl_str+0xe0>
 8013ea6:	9b04      	ldr	r3, [sp, #16]
 8013ea8:	1a9a      	subs	r2, r3, r2
 8013eaa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013eae:	f003 f83c 	bl	8016f2a <memcpy>
 8013eb2:	9a03      	ldr	r2, [sp, #12]
 8013eb4:	9905      	ldr	r1, [sp, #20]
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	5453      	strb	r3, [r2, r1]
 8013eba:	e00b      	b.n	8013ed4 <rcutils_repl_str+0x140>
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	f8d9 3000 	ldr.w	r3, [r9]
 8013ec2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013ec6:	3001      	adds	r0, #1
 8013ec8:	4798      	blx	r3
 8013eca:	9003      	str	r0, [sp, #12]
 8013ecc:	b110      	cbz	r0, 8013ed4 <rcutils_repl_str+0x140>
 8013ece:	9901      	ldr	r1, [sp, #4]
 8013ed0:	f003 f823 	bl	8016f1a <strcpy>
 8013ed4:	4638      	mov	r0, r7
 8013ed6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013eda:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013ede:	4798      	blx	r3
 8013ee0:	9803      	ldr	r0, [sp, #12]
 8013ee2:	b007      	add	sp, #28
 8013ee4:	ecbd 8b02 	vpop	{d8}
 8013ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eec:	4647      	mov	r7, r8
 8013eee:	2300      	movs	r3, #0
 8013ef0:	9303      	str	r3, [sp, #12]
 8013ef2:	e7ef      	b.n	8013ed4 <rcutils_repl_str+0x140>
 8013ef4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013ef8:	e7db      	b.n	8013eb2 <rcutils_repl_str+0x11e>
 8013efa:	bf00      	nop

08013efc <rcutils_snprintf>:
 8013efc:	b40c      	push	{r2, r3}
 8013efe:	b530      	push	{r4, r5, lr}
 8013f00:	b083      	sub	sp, #12
 8013f02:	ab06      	add	r3, sp, #24
 8013f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f08:	9301      	str	r3, [sp, #4]
 8013f0a:	b152      	cbz	r2, 8013f22 <rcutils_snprintf+0x26>
 8013f0c:	b138      	cbz	r0, 8013f1e <rcutils_snprintf+0x22>
 8013f0e:	b141      	cbz	r1, 8013f22 <rcutils_snprintf+0x26>
 8013f10:	f002 ff0a 	bl	8016d28 <vsniprintf>
 8013f14:	b003      	add	sp, #12
 8013f16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f1a:	b002      	add	sp, #8
 8013f1c:	4770      	bx	lr
 8013f1e:	2900      	cmp	r1, #0
 8013f20:	d0f6      	beq.n	8013f10 <rcutils_snprintf+0x14>
 8013f22:	f002 ffcd 	bl	8016ec0 <__errno>
 8013f26:	2316      	movs	r3, #22
 8013f28:	6003      	str	r3, [r0, #0]
 8013f2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f2e:	e7f1      	b.n	8013f14 <rcutils_snprintf+0x18>

08013f30 <rcutils_vsnprintf>:
 8013f30:	b570      	push	{r4, r5, r6, lr}
 8013f32:	b13a      	cbz	r2, 8013f44 <rcutils_vsnprintf+0x14>
 8013f34:	b120      	cbz	r0, 8013f40 <rcutils_vsnprintf+0x10>
 8013f36:	b129      	cbz	r1, 8013f44 <rcutils_vsnprintf+0x14>
 8013f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f3c:	f002 bef4 	b.w	8016d28 <vsniprintf>
 8013f40:	2900      	cmp	r1, #0
 8013f42:	d0f9      	beq.n	8013f38 <rcutils_vsnprintf+0x8>
 8013f44:	f002 ffbc 	bl	8016ec0 <__errno>
 8013f48:	2316      	movs	r3, #22
 8013f4a:	6003      	str	r3, [r0, #0]
 8013f4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f50:	bd70      	pop	{r4, r5, r6, pc}
 8013f52:	bf00      	nop

08013f54 <rcutils_strdup>:
 8013f54:	b084      	sub	sp, #16
 8013f56:	b570      	push	{r4, r5, r6, lr}
 8013f58:	b082      	sub	sp, #8
 8013f5a:	ac07      	add	r4, sp, #28
 8013f5c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013f60:	4605      	mov	r5, r0
 8013f62:	b1b0      	cbz	r0, 8013f92 <rcutils_strdup+0x3e>
 8013f64:	f7ec f966 	bl	8000234 <strlen>
 8013f68:	1c42      	adds	r2, r0, #1
 8013f6a:	9b07      	ldr	r3, [sp, #28]
 8013f6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013f6e:	9201      	str	r2, [sp, #4]
 8013f70:	4606      	mov	r6, r0
 8013f72:	4610      	mov	r0, r2
 8013f74:	4798      	blx	r3
 8013f76:	4604      	mov	r4, r0
 8013f78:	b128      	cbz	r0, 8013f86 <rcutils_strdup+0x32>
 8013f7a:	9a01      	ldr	r2, [sp, #4]
 8013f7c:	4629      	mov	r1, r5
 8013f7e:	f002 ffd4 	bl	8016f2a <memcpy>
 8013f82:	2300      	movs	r3, #0
 8013f84:	55a3      	strb	r3, [r4, r6]
 8013f86:	4620      	mov	r0, r4
 8013f88:	b002      	add	sp, #8
 8013f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f8e:	b004      	add	sp, #16
 8013f90:	4770      	bx	lr
 8013f92:	4604      	mov	r4, r0
 8013f94:	e7f7      	b.n	8013f86 <rcutils_strdup+0x32>
 8013f96:	bf00      	nop

08013f98 <rcutils_strndup>:
 8013f98:	b082      	sub	sp, #8
 8013f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f9c:	ac06      	add	r4, sp, #24
 8013f9e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	b188      	cbz	r0, 8013fca <rcutils_strndup+0x32>
 8013fa6:	1c4f      	adds	r7, r1, #1
 8013fa8:	460e      	mov	r6, r1
 8013faa:	4638      	mov	r0, r7
 8013fac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013fae:	4790      	blx	r2
 8013fb0:	4604      	mov	r4, r0
 8013fb2:	b128      	cbz	r0, 8013fc0 <rcutils_strndup+0x28>
 8013fb4:	463a      	mov	r2, r7
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	f002 ffb7 	bl	8016f2a <memcpy>
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	55a3      	strb	r3, [r4, r6]
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013fc6:	b002      	add	sp, #8
 8013fc8:	4770      	bx	lr
 8013fca:	4604      	mov	r4, r0
 8013fcc:	e7f8      	b.n	8013fc0 <rcutils_strndup+0x28>
 8013fce:	bf00      	nop

08013fd0 <rcutils_get_zero_initialized_string_map>:
 8013fd0:	4b01      	ldr	r3, [pc, #4]	@ (8013fd8 <rcutils_get_zero_initialized_string_map+0x8>)
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	6018      	str	r0, [r3, #0]
 8013fd6:	4770      	bx	lr
 8013fd8:	2000caa4 	.word	0x2000caa4

08013fdc <rcutils_string_map_reserve>:
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	d05f      	beq.n	80140a0 <rcutils_string_map_reserve+0xc4>
 8013fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe4:	460c      	mov	r4, r1
 8013fe6:	6801      	ldr	r1, [r0, #0]
 8013fe8:	b082      	sub	sp, #8
 8013fea:	4605      	mov	r5, r0
 8013fec:	b129      	cbz	r1, 8013ffa <rcutils_string_map_reserve+0x1e>
 8013fee:	68cb      	ldr	r3, [r1, #12]
 8013ff0:	42a3      	cmp	r3, r4
 8013ff2:	d906      	bls.n	8014002 <rcutils_string_map_reserve+0x26>
 8013ff4:	461c      	mov	r4, r3
 8013ff6:	2900      	cmp	r1, #0
 8013ff8:	d1f9      	bne.n	8013fee <rcutils_string_map_reserve+0x12>
 8013ffa:	201f      	movs	r0, #31
 8013ffc:	b002      	add	sp, #8
 8013ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014002:	688b      	ldr	r3, [r1, #8]
 8014004:	42a3      	cmp	r3, r4
 8014006:	d047      	beq.n	8014098 <rcutils_string_map_reserve+0xbc>
 8014008:	6a0e      	ldr	r6, [r1, #32]
 801400a:	2c00      	cmp	r4, #0
 801400c:	d034      	beq.n	8014078 <rcutils_string_map_reserve+0x9c>
 801400e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014012:	d243      	bcs.n	801409c <rcutils_string_map_reserve+0xc0>
 8014014:	00a7      	lsls	r7, r4, #2
 8014016:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801401a:	6808      	ldr	r0, [r1, #0]
 801401c:	4632      	mov	r2, r6
 801401e:	4639      	mov	r1, r7
 8014020:	47c0      	blx	r8
 8014022:	2800      	cmp	r0, #0
 8014024:	d03a      	beq.n	801409c <rcutils_string_map_reserve+0xc0>
 8014026:	682b      	ldr	r3, [r5, #0]
 8014028:	4632      	mov	r2, r6
 801402a:	6018      	str	r0, [r3, #0]
 801402c:	4639      	mov	r1, r7
 801402e:	6858      	ldr	r0, [r3, #4]
 8014030:	47c0      	blx	r8
 8014032:	2800      	cmp	r0, #0
 8014034:	d032      	beq.n	801409c <rcutils_string_map_reserve+0xc0>
 8014036:	682d      	ldr	r5, [r5, #0]
 8014038:	68ab      	ldr	r3, [r5, #8]
 801403a:	6068      	str	r0, [r5, #4]
 801403c:	42a3      	cmp	r3, r4
 801403e:	d226      	bcs.n	801408e <rcutils_string_map_reserve+0xb2>
 8014040:	682a      	ldr	r2, [r5, #0]
 8014042:	eb00 0c07 	add.w	ip, r0, r7
 8014046:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801404a:	45e6      	cmp	lr, ip
 801404c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014050:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014054:	d203      	bcs.n	801405e <rcutils_string_map_reserve+0x82>
 8014056:	eb02 0c07 	add.w	ip, r2, r7
 801405a:	4566      	cmp	r6, ip
 801405c:	d322      	bcc.n	80140a4 <rcutils_string_map_reserve+0xc8>
 801405e:	1ae3      	subs	r3, r4, r3
 8014060:	009a      	lsls	r2, r3, #2
 8014062:	4670      	mov	r0, lr
 8014064:	2100      	movs	r1, #0
 8014066:	9201      	str	r2, [sp, #4]
 8014068:	f002 fe96 	bl	8016d98 <memset>
 801406c:	9a01      	ldr	r2, [sp, #4]
 801406e:	2100      	movs	r1, #0
 8014070:	4630      	mov	r0, r6
 8014072:	f002 fe91 	bl	8016d98 <memset>
 8014076:	e00a      	b.n	801408e <rcutils_string_map_reserve+0xb2>
 8014078:	694f      	ldr	r7, [r1, #20]
 801407a:	6808      	ldr	r0, [r1, #0]
 801407c:	4631      	mov	r1, r6
 801407e:	47b8      	blx	r7
 8014080:	682b      	ldr	r3, [r5, #0]
 8014082:	4631      	mov	r1, r6
 8014084:	6858      	ldr	r0, [r3, #4]
 8014086:	601c      	str	r4, [r3, #0]
 8014088:	47b8      	blx	r7
 801408a:	682d      	ldr	r5, [r5, #0]
 801408c:	606c      	str	r4, [r5, #4]
 801408e:	2000      	movs	r0, #0
 8014090:	60ac      	str	r4, [r5, #8]
 8014092:	b002      	add	sp, #8
 8014094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014098:	2000      	movs	r0, #0
 801409a:	e7af      	b.n	8013ffc <rcutils_string_map_reserve+0x20>
 801409c:	200a      	movs	r0, #10
 801409e:	e7ad      	b.n	8013ffc <rcutils_string_map_reserve+0x20>
 80140a0:	200b      	movs	r0, #11
 80140a2:	4770      	bx	lr
 80140a4:	1f0b      	subs	r3, r1, #4
 80140a6:	4418      	add	r0, r3
 80140a8:	4413      	add	r3, r2
 80140aa:	3a04      	subs	r2, #4
 80140ac:	4417      	add	r7, r2
 80140ae:	2200      	movs	r2, #0
 80140b0:	f843 2f04 	str.w	r2, [r3, #4]!
 80140b4:	42bb      	cmp	r3, r7
 80140b6:	f840 2f04 	str.w	r2, [r0, #4]!
 80140ba:	d1f9      	bne.n	80140b0 <rcutils_string_map_reserve+0xd4>
 80140bc:	e7e7      	b.n	801408e <rcutils_string_map_reserve+0xb2>
 80140be:	bf00      	nop

080140c0 <rcutils_string_map_init>:
 80140c0:	b082      	sub	sp, #8
 80140c2:	b570      	push	{r4, r5, r6, lr}
 80140c4:	ac04      	add	r4, sp, #16
 80140c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80140ca:	b380      	cbz	r0, 801412e <rcutils_string_map_init+0x6e>
 80140cc:	6806      	ldr	r6, [r0, #0]
 80140ce:	4604      	mov	r4, r0
 80140d0:	b12e      	cbz	r6, 80140de <rcutils_string_map_init+0x1e>
 80140d2:	251e      	movs	r5, #30
 80140d4:	4628      	mov	r0, r5
 80140d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140da:	b002      	add	sp, #8
 80140dc:	4770      	bx	lr
 80140de:	a804      	add	r0, sp, #16
 80140e0:	460d      	mov	r5, r1
 80140e2:	f7f7 f8d7 	bl	800b294 <rcutils_allocator_is_valid>
 80140e6:	b310      	cbz	r0, 801412e <rcutils_string_map_init+0x6e>
 80140e8:	9b04      	ldr	r3, [sp, #16]
 80140ea:	9908      	ldr	r1, [sp, #32]
 80140ec:	2024      	movs	r0, #36	@ 0x24
 80140ee:	4798      	blx	r3
 80140f0:	6020      	str	r0, [r4, #0]
 80140f2:	b310      	cbz	r0, 801413a <rcutils_string_map_init+0x7a>
 80140f4:	f10d 0e10 	add.w	lr, sp, #16
 80140f8:	e9c0 6600 	strd	r6, r6, [r0]
 80140fc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014100:	f100 0c10 	add.w	ip, r0, #16
 8014104:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014108:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801410c:	f8de 3000 	ldr.w	r3, [lr]
 8014110:	f8cc 3000 	str.w	r3, [ip]
 8014114:	4629      	mov	r1, r5
 8014116:	4620      	mov	r0, r4
 8014118:	f7ff ff60 	bl	8013fdc <rcutils_string_map_reserve>
 801411c:	4605      	mov	r5, r0
 801411e:	2800      	cmp	r0, #0
 8014120:	d0d8      	beq.n	80140d4 <rcutils_string_map_init+0x14>
 8014122:	9b05      	ldr	r3, [sp, #20]
 8014124:	9908      	ldr	r1, [sp, #32]
 8014126:	6820      	ldr	r0, [r4, #0]
 8014128:	4798      	blx	r3
 801412a:	6026      	str	r6, [r4, #0]
 801412c:	e7d2      	b.n	80140d4 <rcutils_string_map_init+0x14>
 801412e:	250b      	movs	r5, #11
 8014130:	4628      	mov	r0, r5
 8014132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014136:	b002      	add	sp, #8
 8014138:	4770      	bx	lr
 801413a:	250a      	movs	r5, #10
 801413c:	e7ca      	b.n	80140d4 <rcutils_string_map_init+0x14>
 801413e:	bf00      	nop

08014140 <rcutils_string_map_fini>:
 8014140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014144:	b082      	sub	sp, #8
 8014146:	2800      	cmp	r0, #0
 8014148:	d03a      	beq.n	80141c0 <rcutils_string_map_fini+0x80>
 801414a:	6804      	ldr	r4, [r0, #0]
 801414c:	4606      	mov	r6, r0
 801414e:	2c00      	cmp	r4, #0
 8014150:	d032      	beq.n	80141b8 <rcutils_string_map_fini+0x78>
 8014152:	68a3      	ldr	r3, [r4, #8]
 8014154:	b32b      	cbz	r3, 80141a2 <rcutils_string_map_fini+0x62>
 8014156:	2500      	movs	r5, #0
 8014158:	6822      	ldr	r2, [r4, #0]
 801415a:	462f      	mov	r7, r5
 801415c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014160:	b1e0      	cbz	r0, 801419c <rcutils_string_map_fini+0x5c>
 8014162:	6a21      	ldr	r1, [r4, #32]
 8014164:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014168:	9101      	str	r1, [sp, #4]
 801416a:	47c0      	blx	r8
 801416c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014170:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014174:	9901      	ldr	r1, [sp, #4]
 8014176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801417a:	47c0      	blx	r8
 801417c:	68e3      	ldr	r3, [r4, #12]
 801417e:	6862      	ldr	r2, [r4, #4]
 8014180:	3b01      	subs	r3, #1
 8014182:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014186:	60e3      	str	r3, [r4, #12]
 8014188:	6834      	ldr	r4, [r6, #0]
 801418a:	68a3      	ldr	r3, [r4, #8]
 801418c:	3501      	adds	r5, #1
 801418e:	429d      	cmp	r5, r3
 8014190:	d207      	bcs.n	80141a2 <rcutils_string_map_fini+0x62>
 8014192:	6822      	ldr	r2, [r4, #0]
 8014194:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014198:	2800      	cmp	r0, #0
 801419a:	d1e2      	bne.n	8014162 <rcutils_string_map_fini+0x22>
 801419c:	3501      	adds	r5, #1
 801419e:	429d      	cmp	r5, r3
 80141a0:	d3dc      	bcc.n	801415c <rcutils_string_map_fini+0x1c>
 80141a2:	2100      	movs	r1, #0
 80141a4:	4630      	mov	r0, r6
 80141a6:	f7ff ff19 	bl	8013fdc <rcutils_string_map_reserve>
 80141aa:	4604      	mov	r4, r0
 80141ac:	b920      	cbnz	r0, 80141b8 <rcutils_string_map_fini+0x78>
 80141ae:	6830      	ldr	r0, [r6, #0]
 80141b0:	6943      	ldr	r3, [r0, #20]
 80141b2:	6a01      	ldr	r1, [r0, #32]
 80141b4:	4798      	blx	r3
 80141b6:	6034      	str	r4, [r6, #0]
 80141b8:	4620      	mov	r0, r4
 80141ba:	b002      	add	sp, #8
 80141bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c0:	240b      	movs	r4, #11
 80141c2:	4620      	mov	r0, r4
 80141c4:	b002      	add	sp, #8
 80141c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ca:	bf00      	nop

080141cc <rcutils_string_map_getn>:
 80141cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d0:	b300      	cbz	r0, 8014214 <rcutils_string_map_getn+0x48>
 80141d2:	6807      	ldr	r7, [r0, #0]
 80141d4:	b1ff      	cbz	r7, 8014216 <rcutils_string_map_getn+0x4a>
 80141d6:	4688      	mov	r8, r1
 80141d8:	b1e1      	cbz	r1, 8014214 <rcutils_string_map_getn+0x48>
 80141da:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80141de:	683e      	ldr	r6, [r7, #0]
 80141e0:	f1ba 0f00 	cmp.w	sl, #0
 80141e4:	d016      	beq.n	8014214 <rcutils_string_map_getn+0x48>
 80141e6:	4691      	mov	r9, r2
 80141e8:	3e04      	subs	r6, #4
 80141ea:	2400      	movs	r4, #0
 80141ec:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80141f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80141f4:	4628      	mov	r0, r5
 80141f6:	3401      	adds	r4, #1
 80141f8:	b155      	cbz	r5, 8014210 <rcutils_string_map_getn+0x44>
 80141fa:	f7ec f81b 	bl	8000234 <strlen>
 80141fe:	4548      	cmp	r0, r9
 8014200:	4602      	mov	r2, r0
 8014202:	4629      	mov	r1, r5
 8014204:	bf38      	it	cc
 8014206:	464a      	movcc	r2, r9
 8014208:	4640      	mov	r0, r8
 801420a:	f002 fdda 	bl	8016dc2 <strncmp>
 801420e:	b128      	cbz	r0, 801421c <rcutils_string_map_getn+0x50>
 8014210:	45a2      	cmp	sl, r4
 8014212:	d1eb      	bne.n	80141ec <rcutils_string_map_getn+0x20>
 8014214:	2700      	movs	r7, #0
 8014216:	4638      	mov	r0, r7
 8014218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f853 700b 	ldr.w	r7, [r3, fp]
 8014222:	4638      	mov	r0, r7
 8014224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014228 <rmw_get_zero_initialized_context>:
 8014228:	b510      	push	{r4, lr}
 801422a:	4604      	mov	r4, r0
 801422c:	3010      	adds	r0, #16
 801422e:	f7f7 f8c3 	bl	800b3b8 <rmw_get_zero_initialized_init_options>
 8014232:	2300      	movs	r3, #0
 8014234:	2000      	movs	r0, #0
 8014236:	2100      	movs	r1, #0
 8014238:	e9c4 0100 	strd	r0, r1, [r4]
 801423c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014240:	60a3      	str	r3, [r4, #8]
 8014242:	4620      	mov	r0, r4
 8014244:	bd10      	pop	{r4, pc}
 8014246:	bf00      	nop

08014248 <rmw_time_equal>:
 8014248:	b4f0      	push	{r4, r5, r6, r7}
 801424a:	b084      	sub	sp, #16
 801424c:	ac04      	add	r4, sp, #16
 801424e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014252:	4603      	mov	r3, r0
 8014254:	4924      	ldr	r1, [pc, #144]	@ (80142e8 <rmw_time_equal+0xa0>)
 8014256:	9e03      	ldr	r6, [sp, #12]
 8014258:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801425c:	2202      	movs	r2, #2
 801425e:	4299      	cmp	r1, r3
 8014260:	41aa      	sbcs	r2, r5
 8014262:	d330      	bcc.n	80142c6 <rmw_time_equal+0x7e>
 8014264:	4c21      	ldr	r4, [pc, #132]	@ (80142ec <rmw_time_equal+0xa4>)
 8014266:	fba3 3204 	umull	r3, r2, r3, r4
 801426a:	fb04 2205 	mla	r2, r4, r5, r2
 801426e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014272:	43dd      	mvns	r5, r3
 8014274:	1a8c      	subs	r4, r1, r2
 8014276:	4285      	cmp	r5, r0
 8014278:	41b4      	sbcs	r4, r6
 801427a:	d332      	bcc.n	80142e2 <rmw_time_equal+0x9a>
 801427c:	eb10 0c03 	adds.w	ip, r0, r3
 8014280:	eb42 0106 	adc.w	r1, r2, r6
 8014284:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014288:	4817      	ldr	r0, [pc, #92]	@ (80142e8 <rmw_time_equal+0xa0>)
 801428a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801428c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801428e:	2202      	movs	r2, #2
 8014290:	4298      	cmp	r0, r3
 8014292:	41b2      	sbcs	r2, r6
 8014294:	d31c      	bcc.n	80142d0 <rmw_time_equal+0x88>
 8014296:	4c15      	ldr	r4, [pc, #84]	@ (80142ec <rmw_time_equal+0xa4>)
 8014298:	fba3 3204 	umull	r3, r2, r3, r4
 801429c:	fb04 2206 	mla	r2, r4, r6, r2
 80142a0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80142a4:	43de      	mvns	r6, r3
 80142a6:	1a84      	subs	r4, r0, r2
 80142a8:	42ae      	cmp	r6, r5
 80142aa:	41bc      	sbcs	r4, r7
 80142ac:	d315      	bcc.n	80142da <rmw_time_equal+0x92>
 80142ae:	195b      	adds	r3, r3, r5
 80142b0:	eb42 0207 	adc.w	r2, r2, r7
 80142b4:	428a      	cmp	r2, r1
 80142b6:	bf08      	it	eq
 80142b8:	4563      	cmpeq	r3, ip
 80142ba:	bf0c      	ite	eq
 80142bc:	2001      	moveq	r0, #1
 80142be:	2000      	movne	r0, #0
 80142c0:	b004      	add	sp, #16
 80142c2:	bcf0      	pop	{r4, r5, r6, r7}
 80142c4:	4770      	bx	lr
 80142c6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80142ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80142ce:	e7d9      	b.n	8014284 <rmw_time_equal+0x3c>
 80142d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142d4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80142d8:	e7ec      	b.n	80142b4 <rmw_time_equal+0x6c>
 80142da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142de:	4602      	mov	r2, r0
 80142e0:	e7e8      	b.n	80142b4 <rmw_time_equal+0x6c>
 80142e2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80142e6:	e7cd      	b.n	8014284 <rmw_time_equal+0x3c>
 80142e8:	25c17d04 	.word	0x25c17d04
 80142ec:	3b9aca00 	.word	0x3b9aca00

080142f0 <rmw_time_total_nsec>:
 80142f0:	b470      	push	{r4, r5, r6}
 80142f2:	b085      	sub	sp, #20
 80142f4:	ac04      	add	r4, sp, #16
 80142f6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80142fa:	4603      	mov	r3, r0
 80142fc:	4912      	ldr	r1, [pc, #72]	@ (8014348 <rmw_time_total_nsec+0x58>)
 80142fe:	9e03      	ldr	r6, [sp, #12]
 8014300:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014304:	2202      	movs	r2, #2
 8014306:	4299      	cmp	r1, r3
 8014308:	41aa      	sbcs	r2, r5
 801430a:	d311      	bcc.n	8014330 <rmw_time_total_nsec+0x40>
 801430c:	4c0f      	ldr	r4, [pc, #60]	@ (801434c <rmw_time_total_nsec+0x5c>)
 801430e:	fba3 3204 	umull	r3, r2, r3, r4
 8014312:	fb04 2205 	mla	r2, r4, r5, r2
 8014316:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801431a:	43dd      	mvns	r5, r3
 801431c:	1a8c      	subs	r4, r1, r2
 801431e:	4285      	cmp	r5, r0
 8014320:	41b4      	sbcs	r4, r6
 8014322:	d30c      	bcc.n	801433e <rmw_time_total_nsec+0x4e>
 8014324:	1818      	adds	r0, r3, r0
 8014326:	eb42 0106 	adc.w	r1, r2, r6
 801432a:	b005      	add	sp, #20
 801432c:	bc70      	pop	{r4, r5, r6}
 801432e:	4770      	bx	lr
 8014330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014334:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014338:	b005      	add	sp, #20
 801433a:	bc70      	pop	{r4, r5, r6}
 801433c:	4770      	bx	lr
 801433e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014342:	b005      	add	sp, #20
 8014344:	bc70      	pop	{r4, r5, r6}
 8014346:	4770      	bx	lr
 8014348:	25c17d04 	.word	0x25c17d04
 801434c:	3b9aca00 	.word	0x3b9aca00

08014350 <rmw_get_zero_initialized_message_info>:
 8014350:	b510      	push	{r4, lr}
 8014352:	2240      	movs	r2, #64	@ 0x40
 8014354:	4604      	mov	r4, r0
 8014356:	2100      	movs	r1, #0
 8014358:	f002 fd1e 	bl	8016d98 <memset>
 801435c:	4620      	mov	r0, r4
 801435e:	bd10      	pop	{r4, pc}

08014360 <rmw_validate_full_topic_name>:
 8014360:	2800      	cmp	r0, #0
 8014362:	d057      	beq.n	8014414 <rmw_validate_full_topic_name+0xb4>
 8014364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014368:	460d      	mov	r5, r1
 801436a:	2900      	cmp	r1, #0
 801436c:	d054      	beq.n	8014418 <rmw_validate_full_topic_name+0xb8>
 801436e:	4616      	mov	r6, r2
 8014370:	4604      	mov	r4, r0
 8014372:	f7eb ff5f 	bl	8000234 <strlen>
 8014376:	b148      	cbz	r0, 801438c <rmw_validate_full_topic_name+0x2c>
 8014378:	7823      	ldrb	r3, [r4, #0]
 801437a:	2b2f      	cmp	r3, #47	@ 0x2f
 801437c:	d00d      	beq.n	801439a <rmw_validate_full_topic_name+0x3a>
 801437e:	2302      	movs	r3, #2
 8014380:	602b      	str	r3, [r5, #0]
 8014382:	b13e      	cbz	r6, 8014394 <rmw_validate_full_topic_name+0x34>
 8014384:	2000      	movs	r0, #0
 8014386:	6030      	str	r0, [r6, #0]
 8014388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801438c:	2301      	movs	r3, #1
 801438e:	602b      	str	r3, [r5, #0]
 8014390:	2e00      	cmp	r6, #0
 8014392:	d1f7      	bne.n	8014384 <rmw_validate_full_topic_name+0x24>
 8014394:	2000      	movs	r0, #0
 8014396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801439a:	1e43      	subs	r3, r0, #1
 801439c:	5ce2      	ldrb	r2, [r4, r3]
 801439e:	2a2f      	cmp	r2, #47	@ 0x2f
 80143a0:	d03c      	beq.n	801441c <rmw_validate_full_topic_name+0xbc>
 80143a2:	1e63      	subs	r3, r4, #1
 80143a4:	eb03 0800 	add.w	r8, r3, r0
 80143a8:	f1c4 0e01 	rsb	lr, r4, #1
 80143ac:	eb0e 0703 	add.w	r7, lr, r3
 80143b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80143b4:	f021 0220 	bic.w	r2, r1, #32
 80143b8:	3a41      	subs	r2, #65	@ 0x41
 80143ba:	2a19      	cmp	r2, #25
 80143bc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80143c0:	d90b      	bls.n	80143da <rmw_validate_full_topic_name+0x7a>
 80143c2:	295f      	cmp	r1, #95	@ 0x5f
 80143c4:	d009      	beq.n	80143da <rmw_validate_full_topic_name+0x7a>
 80143c6:	f1bc 0f0a 	cmp.w	ip, #10
 80143ca:	d906      	bls.n	80143da <rmw_validate_full_topic_name+0x7a>
 80143cc:	2304      	movs	r3, #4
 80143ce:	602b      	str	r3, [r5, #0]
 80143d0:	2e00      	cmp	r6, #0
 80143d2:	d0df      	beq.n	8014394 <rmw_validate_full_topic_name+0x34>
 80143d4:	6037      	str	r7, [r6, #0]
 80143d6:	2000      	movs	r0, #0
 80143d8:	e7d6      	b.n	8014388 <rmw_validate_full_topic_name+0x28>
 80143da:	4543      	cmp	r3, r8
 80143dc:	d1e6      	bne.n	80143ac <rmw_validate_full_topic_name+0x4c>
 80143de:	4f1a      	ldr	r7, [pc, #104]	@ (8014448 <rmw_validate_full_topic_name+0xe8>)
 80143e0:	2301      	movs	r3, #1
 80143e2:	e004      	b.n	80143ee <rmw_validate_full_topic_name+0x8e>
 80143e4:	4298      	cmp	r0, r3
 80143e6:	f104 0401 	add.w	r4, r4, #1
 80143ea:	d91c      	bls.n	8014426 <rmw_validate_full_topic_name+0xc6>
 80143ec:	4613      	mov	r3, r2
 80143ee:	4298      	cmp	r0, r3
 80143f0:	f103 0201 	add.w	r2, r3, #1
 80143f4:	d0f6      	beq.n	80143e4 <rmw_validate_full_topic_name+0x84>
 80143f6:	7821      	ldrb	r1, [r4, #0]
 80143f8:	292f      	cmp	r1, #47	@ 0x2f
 80143fa:	d1f3      	bne.n	80143e4 <rmw_validate_full_topic_name+0x84>
 80143fc:	7861      	ldrb	r1, [r4, #1]
 80143fe:	292f      	cmp	r1, #47	@ 0x2f
 8014400:	d01c      	beq.n	801443c <rmw_validate_full_topic_name+0xdc>
 8014402:	5dc9      	ldrb	r1, [r1, r7]
 8014404:	0749      	lsls	r1, r1, #29
 8014406:	d5ed      	bpl.n	80143e4 <rmw_validate_full_topic_name+0x84>
 8014408:	2206      	movs	r2, #6
 801440a:	602a      	str	r2, [r5, #0]
 801440c:	2e00      	cmp	r6, #0
 801440e:	d0c1      	beq.n	8014394 <rmw_validate_full_topic_name+0x34>
 8014410:	6033      	str	r3, [r6, #0]
 8014412:	e7bf      	b.n	8014394 <rmw_validate_full_topic_name+0x34>
 8014414:	200b      	movs	r0, #11
 8014416:	4770      	bx	lr
 8014418:	200b      	movs	r0, #11
 801441a:	e7b5      	b.n	8014388 <rmw_validate_full_topic_name+0x28>
 801441c:	2203      	movs	r2, #3
 801441e:	602a      	str	r2, [r5, #0]
 8014420:	2e00      	cmp	r6, #0
 8014422:	d1f5      	bne.n	8014410 <rmw_validate_full_topic_name+0xb0>
 8014424:	e7b6      	b.n	8014394 <rmw_validate_full_topic_name+0x34>
 8014426:	28f7      	cmp	r0, #247	@ 0xf7
 8014428:	d802      	bhi.n	8014430 <rmw_validate_full_topic_name+0xd0>
 801442a:	2000      	movs	r0, #0
 801442c:	6028      	str	r0, [r5, #0]
 801442e:	e7ab      	b.n	8014388 <rmw_validate_full_topic_name+0x28>
 8014430:	2307      	movs	r3, #7
 8014432:	602b      	str	r3, [r5, #0]
 8014434:	2e00      	cmp	r6, #0
 8014436:	d0ad      	beq.n	8014394 <rmw_validate_full_topic_name+0x34>
 8014438:	23f6      	movs	r3, #246	@ 0xf6
 801443a:	e7e9      	b.n	8014410 <rmw_validate_full_topic_name+0xb0>
 801443c:	2205      	movs	r2, #5
 801443e:	602a      	str	r2, [r5, #0]
 8014440:	2e00      	cmp	r6, #0
 8014442:	d1e5      	bne.n	8014410 <rmw_validate_full_topic_name+0xb0>
 8014444:	e7a6      	b.n	8014394 <rmw_validate_full_topic_name+0x34>
 8014446:	bf00      	nop
 8014448:	08018a10 	.word	0x08018a10

0801444c <rmw_validate_namespace_with_size>:
 801444c:	b340      	cbz	r0, 80144a0 <rmw_validate_namespace_with_size+0x54>
 801444e:	b570      	push	{r4, r5, r6, lr}
 8014450:	4614      	mov	r4, r2
 8014452:	b0c2      	sub	sp, #264	@ 0x108
 8014454:	b332      	cbz	r2, 80144a4 <rmw_validate_namespace_with_size+0x58>
 8014456:	2901      	cmp	r1, #1
 8014458:	460d      	mov	r5, r1
 801445a:	461e      	mov	r6, r3
 801445c:	d102      	bne.n	8014464 <rmw_validate_namespace_with_size+0x18>
 801445e:	7803      	ldrb	r3, [r0, #0]
 8014460:	2b2f      	cmp	r3, #47	@ 0x2f
 8014462:	d012      	beq.n	801448a <rmw_validate_namespace_with_size+0x3e>
 8014464:	aa01      	add	r2, sp, #4
 8014466:	4669      	mov	r1, sp
 8014468:	f7ff ff7a 	bl	8014360 <rmw_validate_full_topic_name>
 801446c:	b978      	cbnz	r0, 801448e <rmw_validate_namespace_with_size+0x42>
 801446e:	9b00      	ldr	r3, [sp, #0]
 8014470:	b14b      	cbz	r3, 8014486 <rmw_validate_namespace_with_size+0x3a>
 8014472:	2b07      	cmp	r3, #7
 8014474:	d007      	beq.n	8014486 <rmw_validate_namespace_with_size+0x3a>
 8014476:	1e5a      	subs	r2, r3, #1
 8014478:	2a05      	cmp	r2, #5
 801447a:	d82b      	bhi.n	80144d4 <rmw_validate_namespace_with_size+0x88>
 801447c:	e8df f002 	tbb	[pc, r2]
 8014480:	1e212427 	.word	0x1e212427
 8014484:	141b      	.short	0x141b
 8014486:	2df5      	cmp	r5, #245	@ 0xf5
 8014488:	d803      	bhi.n	8014492 <rmw_validate_namespace_with_size+0x46>
 801448a:	2000      	movs	r0, #0
 801448c:	6020      	str	r0, [r4, #0]
 801448e:	b042      	add	sp, #264	@ 0x108
 8014490:	bd70      	pop	{r4, r5, r6, pc}
 8014492:	2307      	movs	r3, #7
 8014494:	6023      	str	r3, [r4, #0]
 8014496:	2e00      	cmp	r6, #0
 8014498:	d0f9      	beq.n	801448e <rmw_validate_namespace_with_size+0x42>
 801449a:	23f4      	movs	r3, #244	@ 0xf4
 801449c:	6033      	str	r3, [r6, #0]
 801449e:	e7f6      	b.n	801448e <rmw_validate_namespace_with_size+0x42>
 80144a0:	200b      	movs	r0, #11
 80144a2:	4770      	bx	lr
 80144a4:	200b      	movs	r0, #11
 80144a6:	e7f2      	b.n	801448e <rmw_validate_namespace_with_size+0x42>
 80144a8:	2306      	movs	r3, #6
 80144aa:	6023      	str	r3, [r4, #0]
 80144ac:	2e00      	cmp	r6, #0
 80144ae:	d0ee      	beq.n	801448e <rmw_validate_namespace_with_size+0x42>
 80144b0:	9b01      	ldr	r3, [sp, #4]
 80144b2:	6033      	str	r3, [r6, #0]
 80144b4:	e7eb      	b.n	801448e <rmw_validate_namespace_with_size+0x42>
 80144b6:	2305      	movs	r3, #5
 80144b8:	6023      	str	r3, [r4, #0]
 80144ba:	e7f7      	b.n	80144ac <rmw_validate_namespace_with_size+0x60>
 80144bc:	2304      	movs	r3, #4
 80144be:	6023      	str	r3, [r4, #0]
 80144c0:	e7f4      	b.n	80144ac <rmw_validate_namespace_with_size+0x60>
 80144c2:	2303      	movs	r3, #3
 80144c4:	6023      	str	r3, [r4, #0]
 80144c6:	e7f1      	b.n	80144ac <rmw_validate_namespace_with_size+0x60>
 80144c8:	2302      	movs	r3, #2
 80144ca:	6023      	str	r3, [r4, #0]
 80144cc:	e7ee      	b.n	80144ac <rmw_validate_namespace_with_size+0x60>
 80144ce:	2301      	movs	r3, #1
 80144d0:	6023      	str	r3, [r4, #0]
 80144d2:	e7eb      	b.n	80144ac <rmw_validate_namespace_with_size+0x60>
 80144d4:	4a03      	ldr	r2, [pc, #12]	@ (80144e4 <rmw_validate_namespace_with_size+0x98>)
 80144d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80144da:	a802      	add	r0, sp, #8
 80144dc:	f7ff fd0e 	bl	8013efc <rcutils_snprintf>
 80144e0:	2001      	movs	r0, #1
 80144e2:	e7d4      	b.n	801448e <rmw_validate_namespace_with_size+0x42>
 80144e4:	08018618 	.word	0x08018618

080144e8 <rmw_validate_namespace>:
 80144e8:	b168      	cbz	r0, 8014506 <rmw_validate_namespace+0x1e>
 80144ea:	b570      	push	{r4, r5, r6, lr}
 80144ec:	460d      	mov	r5, r1
 80144ee:	4616      	mov	r6, r2
 80144f0:	4604      	mov	r4, r0
 80144f2:	f7eb fe9f 	bl	8000234 <strlen>
 80144f6:	4633      	mov	r3, r6
 80144f8:	4601      	mov	r1, r0
 80144fa:	462a      	mov	r2, r5
 80144fc:	4620      	mov	r0, r4
 80144fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014502:	f7ff bfa3 	b.w	801444c <rmw_validate_namespace_with_size>
 8014506:	200b      	movs	r0, #11
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop

0801450c <rmw_namespace_validation_result_string>:
 801450c:	2807      	cmp	r0, #7
 801450e:	bf9a      	itte	ls
 8014510:	4b02      	ldrls	r3, [pc, #8]	@ (801451c <rmw_namespace_validation_result_string+0x10>)
 8014512:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014516:	4802      	ldrhi	r0, [pc, #8]	@ (8014520 <rmw_namespace_validation_result_string+0x14>)
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	08018810 	.word	0x08018810
 8014520:	08018668 	.word	0x08018668

08014524 <rmw_validate_node_name>:
 8014524:	2800      	cmp	r0, #0
 8014526:	d03b      	beq.n	80145a0 <rmw_validate_node_name+0x7c>
 8014528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801452c:	460d      	mov	r5, r1
 801452e:	2900      	cmp	r1, #0
 8014530:	d038      	beq.n	80145a4 <rmw_validate_node_name+0x80>
 8014532:	4616      	mov	r6, r2
 8014534:	4604      	mov	r4, r0
 8014536:	f7eb fe7d 	bl	8000234 <strlen>
 801453a:	b1e0      	cbz	r0, 8014576 <rmw_validate_node_name+0x52>
 801453c:	1e63      	subs	r3, r4, #1
 801453e:	eb03 0800 	add.w	r8, r3, r0
 8014542:	f1c4 0101 	rsb	r1, r4, #1
 8014546:	18cf      	adds	r7, r1, r3
 8014548:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801454c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014550:	f02e 0c20 	bic.w	ip, lr, #32
 8014554:	2a09      	cmp	r2, #9
 8014556:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801455a:	d914      	bls.n	8014586 <rmw_validate_node_name+0x62>
 801455c:	f1bc 0f19 	cmp.w	ip, #25
 8014560:	d911      	bls.n	8014586 <rmw_validate_node_name+0x62>
 8014562:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014566:	d00e      	beq.n	8014586 <rmw_validate_node_name+0x62>
 8014568:	2302      	movs	r3, #2
 801456a:	602b      	str	r3, [r5, #0]
 801456c:	b106      	cbz	r6, 8014570 <rmw_validate_node_name+0x4c>
 801456e:	6037      	str	r7, [r6, #0]
 8014570:	2000      	movs	r0, #0
 8014572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014576:	2301      	movs	r3, #1
 8014578:	602b      	str	r3, [r5, #0]
 801457a:	2e00      	cmp	r6, #0
 801457c:	d0f8      	beq.n	8014570 <rmw_validate_node_name+0x4c>
 801457e:	2000      	movs	r0, #0
 8014580:	6030      	str	r0, [r6, #0]
 8014582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014586:	4543      	cmp	r3, r8
 8014588:	d1dd      	bne.n	8014546 <rmw_validate_node_name+0x22>
 801458a:	7822      	ldrb	r2, [r4, #0]
 801458c:	4b0d      	ldr	r3, [pc, #52]	@ (80145c4 <rmw_validate_node_name+0xa0>)
 801458e:	5cd3      	ldrb	r3, [r2, r3]
 8014590:	f013 0304 	ands.w	r3, r3, #4
 8014594:	d110      	bne.n	80145b8 <rmw_validate_node_name+0x94>
 8014596:	28ff      	cmp	r0, #255	@ 0xff
 8014598:	d806      	bhi.n	80145a8 <rmw_validate_node_name+0x84>
 801459a:	602b      	str	r3, [r5, #0]
 801459c:	4618      	mov	r0, r3
 801459e:	e7e8      	b.n	8014572 <rmw_validate_node_name+0x4e>
 80145a0:	200b      	movs	r0, #11
 80145a2:	4770      	bx	lr
 80145a4:	200b      	movs	r0, #11
 80145a6:	e7e4      	b.n	8014572 <rmw_validate_node_name+0x4e>
 80145a8:	2204      	movs	r2, #4
 80145aa:	602a      	str	r2, [r5, #0]
 80145ac:	2e00      	cmp	r6, #0
 80145ae:	d0df      	beq.n	8014570 <rmw_validate_node_name+0x4c>
 80145b0:	22fe      	movs	r2, #254	@ 0xfe
 80145b2:	6032      	str	r2, [r6, #0]
 80145b4:	4618      	mov	r0, r3
 80145b6:	e7dc      	b.n	8014572 <rmw_validate_node_name+0x4e>
 80145b8:	2303      	movs	r3, #3
 80145ba:	602b      	str	r3, [r5, #0]
 80145bc:	2e00      	cmp	r6, #0
 80145be:	d1de      	bne.n	801457e <rmw_validate_node_name+0x5a>
 80145c0:	e7d6      	b.n	8014570 <rmw_validate_node_name+0x4c>
 80145c2:	bf00      	nop
 80145c4:	08018a10 	.word	0x08018a10

080145c8 <rmw_node_name_validation_result_string>:
 80145c8:	2804      	cmp	r0, #4
 80145ca:	bf9a      	itte	ls
 80145cc:	4b02      	ldrls	r3, [pc, #8]	@ (80145d8 <rmw_node_name_validation_result_string+0x10>)
 80145ce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80145d2:	4802      	ldrhi	r0, [pc, #8]	@ (80145dc <rmw_node_name_validation_result_string+0x14>)
 80145d4:	4770      	bx	lr
 80145d6:	bf00      	nop
 80145d8:	0801891c 	.word	0x0801891c
 80145dc:	08018830 	.word	0x08018830

080145e0 <on_status>:
 80145e0:	b082      	sub	sp, #8
 80145e2:	b002      	add	sp, #8
 80145e4:	4770      	bx	lr
 80145e6:	bf00      	nop

080145e8 <on_topic>:
 80145e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ec:	4a22      	ldr	r2, [pc, #136]	@ (8014678 <on_topic+0x90>)
 80145ee:	b094      	sub	sp, #80	@ 0x50
 80145f0:	6812      	ldr	r2, [r2, #0]
 80145f2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80145f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80145f8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80145fc:	b3c2      	cbz	r2, 8014670 <on_topic+0x88>
 80145fe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8014602:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8014606:	e001      	b.n	801460c <on_topic+0x24>
 8014608:	6852      	ldr	r2, [r2, #4]
 801460a:	b38a      	cbz	r2, 8014670 <on_topic+0x88>
 801460c:	6894      	ldr	r4, [r2, #8]
 801460e:	8aa3      	ldrh	r3, [r4, #20]
 8014610:	428b      	cmp	r3, r1
 8014612:	d1f9      	bne.n	8014608 <on_topic+0x20>
 8014614:	7da3      	ldrb	r3, [r4, #22]
 8014616:	4283      	cmp	r3, r0
 8014618:	d1f6      	bne.n	8014608 <on_topic+0x20>
 801461a:	2248      	movs	r2, #72	@ 0x48
 801461c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014620:	4668      	mov	r0, sp
 8014622:	f002 fc82 	bl	8016f2a <memcpy>
 8014626:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801462a:	cb0c      	ldmia	r3, {r2, r3}
 801462c:	4620      	mov	r0, r4
 801462e:	f7f7 fec7 	bl	800c3c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014632:	4607      	mov	r7, r0
 8014634:	b1e0      	cbz	r0, 8014670 <on_topic+0x88>
 8014636:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801463a:	4632      	mov	r2, r6
 801463c:	4628      	mov	r0, r5
 801463e:	f108 0110 	add.w	r1, r8, #16
 8014642:	f000 fdd3 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 8014646:	b930      	cbnz	r0, 8014656 <on_topic+0x6e>
 8014648:	480c      	ldr	r0, [pc, #48]	@ (801467c <on_topic+0x94>)
 801464a:	4639      	mov	r1, r7
 801464c:	b014      	add	sp, #80	@ 0x50
 801464e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014652:	f000 b8bd 	b.w	80147d0 <put_memory>
 8014656:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801465a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801465e:	f7f7 fcad 	bl	800bfbc <rmw_uros_epoch_nanos>
 8014662:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8014666:	2305      	movs	r3, #5
 8014668:	e942 0102 	strd	r0, r1, [r2, #-8]
 801466c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8014670:	b014      	add	sp, #80	@ 0x50
 8014672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014676:	bf00      	nop
 8014678:	2000ca54 	.word	0x2000ca54
 801467c:	2000ca44 	.word	0x2000ca44

08014680 <on_request>:
 8014680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014684:	4823      	ldr	r0, [pc, #140]	@ (8014714 <on_request+0x94>)
 8014686:	b094      	sub	sp, #80	@ 0x50
 8014688:	6800      	ldr	r0, [r0, #0]
 801468a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801468c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014690:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014692:	2800      	cmp	r0, #0
 8014694:	d03b      	beq.n	801470e <on_request+0x8e>
 8014696:	461d      	mov	r5, r3
 8014698:	e001      	b.n	801469e <on_request+0x1e>
 801469a:	6840      	ldr	r0, [r0, #4]
 801469c:	b3b8      	cbz	r0, 801470e <on_request+0x8e>
 801469e:	6884      	ldr	r4, [r0, #8]
 80146a0:	8b21      	ldrh	r1, [r4, #24]
 80146a2:	4291      	cmp	r1, r2
 80146a4:	d1f9      	bne.n	801469a <on_request+0x1a>
 80146a6:	2248      	movs	r2, #72	@ 0x48
 80146a8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80146ac:	4668      	mov	r0, sp
 80146ae:	f002 fc3c 	bl	8016f2a <memcpy>
 80146b2:	f104 0320 	add.w	r3, r4, #32
 80146b6:	cb0c      	ldmia	r3, {r2, r3}
 80146b8:	4620      	mov	r0, r4
 80146ba:	f7f7 fe81 	bl	800c3c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80146be:	4680      	mov	r8, r0
 80146c0:	b328      	cbz	r0, 801470e <on_request+0x8e>
 80146c2:	4638      	mov	r0, r7
 80146c4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80146c8:	4632      	mov	r2, r6
 80146ca:	f107 0110 	add.w	r1, r7, #16
 80146ce:	f000 fd8d 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 80146d2:	b930      	cbnz	r0, 80146e2 <on_request+0x62>
 80146d4:	4810      	ldr	r0, [pc, #64]	@ (8014718 <on_request+0x98>)
 80146d6:	4641      	mov	r1, r8
 80146d8:	b014      	add	sp, #80	@ 0x50
 80146da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146de:	f000 b877 	b.w	80147d0 <put_memory>
 80146e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80146e4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80146e8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80146ec:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80146f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80146f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80146fc:	f7f7 fc5e 	bl	800bfbc <rmw_uros_epoch_nanos>
 8014700:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014704:	2303      	movs	r3, #3
 8014706:	e942 0102 	strd	r0, r1, [r2, #-8]
 801470a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801470e:	b014      	add	sp, #80	@ 0x50
 8014710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014714:	2000ca24 	.word	0x2000ca24
 8014718:	2000ca44 	.word	0x2000ca44

0801471c <on_reply>:
 801471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	4821      	ldr	r0, [pc, #132]	@ (80147a8 <on_reply+0x8c>)
 8014722:	b094      	sub	sp, #80	@ 0x50
 8014724:	6800      	ldr	r0, [r0, #0]
 8014726:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014728:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801472c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801472e:	b3b8      	cbz	r0, 80147a0 <on_reply+0x84>
 8014730:	461d      	mov	r5, r3
 8014732:	e001      	b.n	8014738 <on_reply+0x1c>
 8014734:	6840      	ldr	r0, [r0, #4]
 8014736:	b398      	cbz	r0, 80147a0 <on_reply+0x84>
 8014738:	6884      	ldr	r4, [r0, #8]
 801473a:	8b21      	ldrh	r1, [r4, #24]
 801473c:	4291      	cmp	r1, r2
 801473e:	d1f9      	bne.n	8014734 <on_reply+0x18>
 8014740:	2248      	movs	r2, #72	@ 0x48
 8014742:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014746:	4668      	mov	r0, sp
 8014748:	f002 fbef 	bl	8016f2a <memcpy>
 801474c:	f104 0320 	add.w	r3, r4, #32
 8014750:	cb0c      	ldmia	r3, {r2, r3}
 8014752:	4620      	mov	r0, r4
 8014754:	f7f7 fe34 	bl	800c3c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014758:	4680      	mov	r8, r0
 801475a:	b308      	cbz	r0, 80147a0 <on_reply+0x84>
 801475c:	4638      	mov	r0, r7
 801475e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014762:	4632      	mov	r2, r6
 8014764:	f107 0110 	add.w	r1, r7, #16
 8014768:	f000 fd40 	bl	80151ec <ucdr_deserialize_array_uint8_t>
 801476c:	b930      	cbnz	r0, 801477c <on_reply+0x60>
 801476e:	480f      	ldr	r0, [pc, #60]	@ (80147ac <on_reply+0x90>)
 8014770:	4641      	mov	r1, r8
 8014772:	b014      	add	sp, #80	@ 0x50
 8014774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014778:	f000 b82a 	b.w	80147d0 <put_memory>
 801477c:	2200      	movs	r2, #0
 801477e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8014782:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8014786:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801478a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801478e:	f7f7 fc15 	bl	800bfbc <rmw_uros_epoch_nanos>
 8014792:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014796:	2304      	movs	r3, #4
 8014798:	e942 0102 	strd	r0, r1, [r2, #-8]
 801479c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80147a0:	b014      	add	sp, #80	@ 0x50
 80147a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a6:	bf00      	nop
 80147a8:	20008134 	.word	0x20008134
 80147ac:	2000ca44 	.word	0x2000ca44

080147b0 <get_memory>:
 80147b0:	4603      	mov	r3, r0
 80147b2:	6840      	ldr	r0, [r0, #4]
 80147b4:	b158      	cbz	r0, 80147ce <get_memory+0x1e>
 80147b6:	6842      	ldr	r2, [r0, #4]
 80147b8:	605a      	str	r2, [r3, #4]
 80147ba:	b10a      	cbz	r2, 80147c0 <get_memory+0x10>
 80147bc:	2100      	movs	r1, #0
 80147be:	6011      	str	r1, [r2, #0]
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	6042      	str	r2, [r0, #4]
 80147c4:	b102      	cbz	r2, 80147c8 <get_memory+0x18>
 80147c6:	6010      	str	r0, [r2, #0]
 80147c8:	2200      	movs	r2, #0
 80147ca:	6002      	str	r2, [r0, #0]
 80147cc:	6018      	str	r0, [r3, #0]
 80147ce:	4770      	bx	lr

080147d0 <put_memory>:
 80147d0:	680b      	ldr	r3, [r1, #0]
 80147d2:	b10b      	cbz	r3, 80147d8 <put_memory+0x8>
 80147d4:	684a      	ldr	r2, [r1, #4]
 80147d6:	605a      	str	r2, [r3, #4]
 80147d8:	684a      	ldr	r2, [r1, #4]
 80147da:	b102      	cbz	r2, 80147de <put_memory+0xe>
 80147dc:	6013      	str	r3, [r2, #0]
 80147de:	6803      	ldr	r3, [r0, #0]
 80147e0:	428b      	cmp	r3, r1
 80147e2:	6843      	ldr	r3, [r0, #4]
 80147e4:	bf08      	it	eq
 80147e6:	6002      	streq	r2, [r0, #0]
 80147e8:	604b      	str	r3, [r1, #4]
 80147ea:	b103      	cbz	r3, 80147ee <put_memory+0x1e>
 80147ec:	6019      	str	r1, [r3, #0]
 80147ee:	2300      	movs	r3, #0
 80147f0:	600b      	str	r3, [r1, #0]
 80147f2:	6041      	str	r1, [r0, #4]
 80147f4:	4770      	bx	lr
 80147f6:	bf00      	nop

080147f8 <rmw_destroy_client>:
 80147f8:	b570      	push	{r4, r5, r6, lr}
 80147fa:	b128      	cbz	r0, 8014808 <rmw_destroy_client+0x10>
 80147fc:	4604      	mov	r4, r0
 80147fe:	6800      	ldr	r0, [r0, #0]
 8014800:	460d      	mov	r5, r1
 8014802:	f7f7 ff53 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 8014806:	b910      	cbnz	r0, 801480e <rmw_destroy_client+0x16>
 8014808:	2401      	movs	r4, #1
 801480a:	4620      	mov	r0, r4
 801480c:	bd70      	pop	{r4, r5, r6, pc}
 801480e:	6863      	ldr	r3, [r4, #4]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d0f9      	beq.n	8014808 <rmw_destroy_client+0x10>
 8014814:	2d00      	cmp	r5, #0
 8014816:	d0f7      	beq.n	8014808 <rmw_destroy_client+0x10>
 8014818:	6828      	ldr	r0, [r5, #0]
 801481a:	f7f7 ff47 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 801481e:	2800      	cmp	r0, #0
 8014820:	d0f2      	beq.n	8014808 <rmw_destroy_client+0x10>
 8014822:	686e      	ldr	r6, [r5, #4]
 8014824:	2e00      	cmp	r6, #0
 8014826:	d0ef      	beq.n	8014808 <rmw_destroy_client+0x10>
 8014828:	6864      	ldr	r4, [r4, #4]
 801482a:	6932      	ldr	r2, [r6, #16]
 801482c:	6920      	ldr	r0, [r4, #16]
 801482e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014832:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014836:	6819      	ldr	r1, [r3, #0]
 8014838:	f7f9 fa98 	bl	800dd6c <uxr_buffer_cancel_data>
 801483c:	4602      	mov	r2, r0
 801483e:	6920      	ldr	r0, [r4, #16]
 8014840:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014844:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014848:	f7f7 feb0 	bl	800c5ac <run_xrce_session>
 801484c:	6920      	ldr	r0, [r4, #16]
 801484e:	6932      	ldr	r2, [r6, #16]
 8014850:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014854:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014858:	6819      	ldr	r1, [r3, #0]
 801485a:	f7f9 f83b 	bl	800d8d4 <uxr_buffer_delete_entity>
 801485e:	4602      	mov	r2, r0
 8014860:	6920      	ldr	r0, [r4, #16]
 8014862:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014866:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801486a:	f7f7 fe9f 	bl	800c5ac <run_xrce_session>
 801486e:	2800      	cmp	r0, #0
 8014870:	4628      	mov	r0, r5
 8014872:	bf14      	ite	ne
 8014874:	2400      	movne	r4, #0
 8014876:	2402      	moveq	r4, #2
 8014878:	f7f7 fd80 	bl	800c37c <rmw_uxrce_fini_client_memory>
 801487c:	e7c5      	b.n	801480a <rmw_destroy_client+0x12>
 801487e:	bf00      	nop

08014880 <rmw_get_implementation_identifier>:
 8014880:	4b01      	ldr	r3, [pc, #4]	@ (8014888 <rmw_get_implementation_identifier+0x8>)
 8014882:	6818      	ldr	r0, [r3, #0]
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop
 8014888:	08018948 	.word	0x08018948

0801488c <create_topic>:
 801488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014890:	4605      	mov	r5, r0
 8014892:	b084      	sub	sp, #16
 8014894:	4822      	ldr	r0, [pc, #136]	@ (8014920 <create_topic+0x94>)
 8014896:	460f      	mov	r7, r1
 8014898:	4616      	mov	r6, r2
 801489a:	f7ff ff89 	bl	80147b0 <get_memory>
 801489e:	4604      	mov	r4, r0
 80148a0:	2800      	cmp	r0, #0
 80148a2:	d039      	beq.n	8014918 <create_topic+0x8c>
 80148a4:	692b      	ldr	r3, [r5, #16]
 80148a6:	6884      	ldr	r4, [r0, #8]
 80148a8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8014928 <create_topic+0x9c>
 80148ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80148b0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80148b4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80148b8:	1c42      	adds	r2, r0, #1
 80148ba:	2102      	movs	r1, #2
 80148bc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80148c0:	f7f9 fa24 	bl	800dd0c <uxr_object_id>
 80148c4:	223c      	movs	r2, #60	@ 0x3c
 80148c6:	6120      	str	r0, [r4, #16]
 80148c8:	4641      	mov	r1, r8
 80148ca:	4638      	mov	r0, r7
 80148cc:	f7f7 fed4 	bl	800c678 <generate_topic_name>
 80148d0:	b1f0      	cbz	r0, 8014910 <create_topic+0x84>
 80148d2:	4f14      	ldr	r7, [pc, #80]	@ (8014924 <create_topic+0x98>)
 80148d4:	4630      	mov	r0, r6
 80148d6:	2264      	movs	r2, #100	@ 0x64
 80148d8:	4639      	mov	r1, r7
 80148da:	f7f7 fe9d 	bl	800c618 <generate_type_name>
 80148de:	b1b8      	cbz	r0, 8014910 <create_topic+0x84>
 80148e0:	6928      	ldr	r0, [r5, #16]
 80148e2:	2306      	movs	r3, #6
 80148e4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80148e8:	f8cd 8000 	str.w	r8, [sp]
 80148ec:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80148f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80148f4:	6811      	ldr	r1, [r2, #0]
 80148f6:	696b      	ldr	r3, [r5, #20]
 80148f8:	6922      	ldr	r2, [r4, #16]
 80148fa:	f7f9 f869 	bl	800d9d0 <uxr_buffer_create_topic_bin>
 80148fe:	4602      	mov	r2, r0
 8014900:	6928      	ldr	r0, [r5, #16]
 8014902:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014906:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801490a:	f7f7 fe4f 	bl	800c5ac <run_xrce_session>
 801490e:	b918      	cbnz	r0, 8014918 <create_topic+0x8c>
 8014910:	4620      	mov	r0, r4
 8014912:	f7f7 fd49 	bl	800c3a8 <rmw_uxrce_fini_topic_memory>
 8014916:	2400      	movs	r4, #0
 8014918:	4620      	mov	r0, r4
 801491a:	b004      	add	sp, #16
 801491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014920:	2000ca64 	.word	0x2000ca64
 8014924:	2000cae4 	.word	0x2000cae4
 8014928:	2000caa8 	.word	0x2000caa8

0801492c <destroy_topic>:
 801492c:	b538      	push	{r3, r4, r5, lr}
 801492e:	6985      	ldr	r5, [r0, #24]
 8014930:	b1d5      	cbz	r5, 8014968 <destroy_topic+0x3c>
 8014932:	4604      	mov	r4, r0
 8014934:	6928      	ldr	r0, [r5, #16]
 8014936:	6922      	ldr	r2, [r4, #16]
 8014938:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801493c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014940:	6819      	ldr	r1, [r3, #0]
 8014942:	f7f8 ffc7 	bl	800d8d4 <uxr_buffer_delete_entity>
 8014946:	4602      	mov	r2, r0
 8014948:	6928      	ldr	r0, [r5, #16]
 801494a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801494e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014952:	f7f7 fe2b 	bl	800c5ac <run_xrce_session>
 8014956:	2800      	cmp	r0, #0
 8014958:	4620      	mov	r0, r4
 801495a:	bf14      	ite	ne
 801495c:	2400      	movne	r4, #0
 801495e:	2402      	moveq	r4, #2
 8014960:	f7f7 fd22 	bl	800c3a8 <rmw_uxrce_fini_topic_memory>
 8014964:	4620      	mov	r0, r4
 8014966:	bd38      	pop	{r3, r4, r5, pc}
 8014968:	2401      	movs	r4, #1
 801496a:	4620      	mov	r0, r4
 801496c:	bd38      	pop	{r3, r4, r5, pc}
 801496e:	bf00      	nop

08014970 <rmw_send_request>:
 8014970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014974:	4604      	mov	r4, r0
 8014976:	6800      	ldr	r0, [r0, #0]
 8014978:	b08b      	sub	sp, #44	@ 0x2c
 801497a:	460e      	mov	r6, r1
 801497c:	4615      	mov	r5, r2
 801497e:	b128      	cbz	r0, 801498c <rmw_send_request+0x1c>
 8014980:	4b21      	ldr	r3, [pc, #132]	@ (8014a08 <rmw_send_request+0x98>)
 8014982:	6819      	ldr	r1, [r3, #0]
 8014984:	f7eb fc4c 	bl	8000220 <strcmp>
 8014988:	2800      	cmp	r0, #0
 801498a:	d139      	bne.n	8014a00 <rmw_send_request+0x90>
 801498c:	6864      	ldr	r4, [r4, #4]
 801498e:	6963      	ldr	r3, [r4, #20]
 8014990:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8014994:	689b      	ldr	r3, [r3, #8]
 8014996:	4798      	blx	r3
 8014998:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801499c:	4630      	mov	r0, r6
 801499e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80149a2:	4798      	blx	r3
 80149a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80149a8:	9000      	str	r0, [sp, #0]
 80149aa:	6922      	ldr	r2, [r4, #16]
 80149ac:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80149ae:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80149b2:	ab02      	add	r3, sp, #8
 80149b4:	f7fb fa82 	bl	800febc <uxr_prepare_output_stream>
 80149b8:	2700      	movs	r7, #0
 80149ba:	6028      	str	r0, [r5, #0]
 80149bc:	606f      	str	r7, [r5, #4]
 80149be:	b198      	cbz	r0, 80149e8 <rmw_send_request+0x78>
 80149c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80149c4:	a902      	add	r1, sp, #8
 80149c6:	4630      	mov	r0, r6
 80149c8:	4798      	blx	r3
 80149ca:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80149ce:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80149d2:	2b01      	cmp	r3, #1
 80149d4:	d00c      	beq.n	80149f0 <rmw_send_request+0x80>
 80149d6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80149d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80149dc:	f7f9 ff9c 	bl	800e918 <uxr_run_session_until_confirm_delivery>
 80149e0:	4638      	mov	r0, r7
 80149e2:	b00b      	add	sp, #44	@ 0x2c
 80149e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149e8:	2001      	movs	r0, #1
 80149ea:	b00b      	add	sp, #44	@ 0x2c
 80149ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80149f4:	f7f9 fbd0 	bl	800e198 <uxr_flash_output_streams>
 80149f8:	4638      	mov	r0, r7
 80149fa:	b00b      	add	sp, #44	@ 0x2c
 80149fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a00:	200c      	movs	r0, #12
 8014a02:	b00b      	add	sp, #44	@ 0x2c
 8014a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a08:	08018948 	.word	0x08018948

08014a0c <rmw_take_request>:
 8014a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a10:	4605      	mov	r5, r0
 8014a12:	6800      	ldr	r0, [r0, #0]
 8014a14:	b089      	sub	sp, #36	@ 0x24
 8014a16:	460c      	mov	r4, r1
 8014a18:	4690      	mov	r8, r2
 8014a1a:	461e      	mov	r6, r3
 8014a1c:	b128      	cbz	r0, 8014a2a <rmw_take_request+0x1e>
 8014a1e:	4b28      	ldr	r3, [pc, #160]	@ (8014ac0 <rmw_take_request+0xb4>)
 8014a20:	6819      	ldr	r1, [r3, #0]
 8014a22:	f7eb fbfd 	bl	8000220 <strcmp>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d146      	bne.n	8014ab8 <rmw_take_request+0xac>
 8014a2a:	b10e      	cbz	r6, 8014a30 <rmw_take_request+0x24>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	7033      	strb	r3, [r6, #0]
 8014a30:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014a34:	f7f7 fd3c 	bl	800c4b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014a38:	4648      	mov	r0, r9
 8014a3a:	f7f7 fd11 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014a3e:	4607      	mov	r7, r0
 8014a40:	b3b0      	cbz	r0, 8014ab0 <rmw_take_request+0xa4>
 8014a42:	6885      	ldr	r5, [r0, #8]
 8014a44:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014a48:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014a4c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014a50:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014a54:	7423      	strb	r3, [r4, #16]
 8014a56:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014a5a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014a5e:	74e2      	strb	r2, [r4, #19]
 8014a60:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014a64:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014a68:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014a6c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014a70:	61e1      	str	r1, [r4, #28]
 8014a72:	6162      	str	r2, [r4, #20]
 8014a74:	61a3      	str	r3, [r4, #24]
 8014a76:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	4798      	blx	r3
 8014a7e:	6844      	ldr	r4, [r0, #4]
 8014a80:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014a84:	f105 0110 	add.w	r1, r5, #16
 8014a88:	4668      	mov	r0, sp
 8014a8a:	f7f8 feb3 	bl	800d7f4 <ucdr_init_buffer>
 8014a8e:	68e3      	ldr	r3, [r4, #12]
 8014a90:	4641      	mov	r1, r8
 8014a92:	4668      	mov	r0, sp
 8014a94:	4798      	blx	r3
 8014a96:	4639      	mov	r1, r7
 8014a98:	4604      	mov	r4, r0
 8014a9a:	480a      	ldr	r0, [pc, #40]	@ (8014ac4 <rmw_take_request+0xb8>)
 8014a9c:	f7ff fe98 	bl	80147d0 <put_memory>
 8014aa0:	b106      	cbz	r6, 8014aa4 <rmw_take_request+0x98>
 8014aa2:	7034      	strb	r4, [r6, #0]
 8014aa4:	f084 0001 	eor.w	r0, r4, #1
 8014aa8:	b2c0      	uxtb	r0, r0
 8014aaa:	b009      	add	sp, #36	@ 0x24
 8014aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ab0:	2001      	movs	r0, #1
 8014ab2:	b009      	add	sp, #36	@ 0x24
 8014ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ab8:	200c      	movs	r0, #12
 8014aba:	b009      	add	sp, #36	@ 0x24
 8014abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ac0:	08018948 	.word	0x08018948
 8014ac4:	2000ca44 	.word	0x2000ca44

08014ac8 <rmw_send_response>:
 8014ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aca:	4605      	mov	r5, r0
 8014acc:	6800      	ldr	r0, [r0, #0]
 8014ace:	b091      	sub	sp, #68	@ 0x44
 8014ad0:	460c      	mov	r4, r1
 8014ad2:	4616      	mov	r6, r2
 8014ad4:	b128      	cbz	r0, 8014ae2 <rmw_send_response+0x1a>
 8014ad6:	4b29      	ldr	r3, [pc, #164]	@ (8014b7c <rmw_send_response+0xb4>)
 8014ad8:	6819      	ldr	r1, [r3, #0]
 8014ada:	f7eb fba1 	bl	8000220 <strcmp>
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	d141      	bne.n	8014b66 <rmw_send_response+0x9e>
 8014ae2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014ae6:	9306      	str	r3, [sp, #24]
 8014ae8:	4623      	mov	r3, r4
 8014aea:	9207      	str	r2, [sp, #28]
 8014aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014af0:	686d      	ldr	r5, [r5, #4]
 8014af2:	789b      	ldrb	r3, [r3, #2]
 8014af4:	68a1      	ldr	r1, [r4, #8]
 8014af6:	f88d 2017 	strb.w	r2, [sp, #23]
 8014afa:	f88d 3016 	strb.w	r3, [sp, #22]
 8014afe:	68e2      	ldr	r2, [r4, #12]
 8014b00:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014b04:	6860      	ldr	r0, [r4, #4]
 8014b06:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b0a:	ab02      	add	r3, sp, #8
 8014b0c:	c307      	stmia	r3!, {r0, r1, r2}
 8014b0e:	696b      	ldr	r3, [r5, #20]
 8014b10:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014b12:	68db      	ldr	r3, [r3, #12]
 8014b14:	4798      	blx	r3
 8014b16:	6844      	ldr	r4, [r0, #4]
 8014b18:	4630      	mov	r0, r6
 8014b1a:	6923      	ldr	r3, [r4, #16]
 8014b1c:	4798      	blx	r3
 8014b1e:	f100 0318 	add.w	r3, r0, #24
 8014b22:	6938      	ldr	r0, [r7, #16]
 8014b24:	9300      	str	r3, [sp, #0]
 8014b26:	692a      	ldr	r2, [r5, #16]
 8014b28:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014b2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b2e:	ab08      	add	r3, sp, #32
 8014b30:	f7fb f9c4 	bl	800febc <uxr_prepare_output_stream>
 8014b34:	b910      	cbnz	r0, 8014b3c <rmw_send_response+0x74>
 8014b36:	2001      	movs	r0, #1
 8014b38:	b011      	add	sp, #68	@ 0x44
 8014b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b3c:	a902      	add	r1, sp, #8
 8014b3e:	a808      	add	r0, sp, #32
 8014b40:	f7fc fa16 	bl	8010f70 <uxr_serialize_SampleIdentity>
 8014b44:	68a3      	ldr	r3, [r4, #8]
 8014b46:	a908      	add	r1, sp, #32
 8014b48:	4630      	mov	r0, r6
 8014b4a:	4798      	blx	r3
 8014b4c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014b50:	6938      	ldr	r0, [r7, #16]
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d00a      	beq.n	8014b6c <rmw_send_response+0xa4>
 8014b56:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014b58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b5c:	f7f9 fedc 	bl	800e918 <uxr_run_session_until_confirm_delivery>
 8014b60:	2000      	movs	r0, #0
 8014b62:	b011      	add	sp, #68	@ 0x44
 8014b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b66:	200c      	movs	r0, #12
 8014b68:	b011      	add	sp, #68	@ 0x44
 8014b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b70:	f7f9 fb12 	bl	800e198 <uxr_flash_output_streams>
 8014b74:	2000      	movs	r0, #0
 8014b76:	b011      	add	sp, #68	@ 0x44
 8014b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	08018948 	.word	0x08018948

08014b80 <rmw_take_response>:
 8014b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b84:	4604      	mov	r4, r0
 8014b86:	6800      	ldr	r0, [r0, #0]
 8014b88:	b088      	sub	sp, #32
 8014b8a:	4688      	mov	r8, r1
 8014b8c:	4617      	mov	r7, r2
 8014b8e:	461d      	mov	r5, r3
 8014b90:	b120      	cbz	r0, 8014b9c <rmw_take_response+0x1c>
 8014b92:	4b1e      	ldr	r3, [pc, #120]	@ (8014c0c <rmw_take_response+0x8c>)
 8014b94:	6819      	ldr	r1, [r3, #0]
 8014b96:	f7eb fb43 	bl	8000220 <strcmp>
 8014b9a:	bb78      	cbnz	r0, 8014bfc <rmw_take_response+0x7c>
 8014b9c:	b10d      	cbz	r5, 8014ba2 <rmw_take_response+0x22>
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	702b      	strb	r3, [r5, #0]
 8014ba2:	6864      	ldr	r4, [r4, #4]
 8014ba4:	f7f7 fc84 	bl	800c4b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014ba8:	4620      	mov	r0, r4
 8014baa:	f7f7 fc59 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014bae:	4606      	mov	r6, r0
 8014bb0:	b340      	cbz	r0, 8014c04 <rmw_take_response+0x84>
 8014bb2:	6963      	ldr	r3, [r4, #20]
 8014bb4:	6884      	ldr	r4, [r0, #8]
 8014bb6:	68db      	ldr	r3, [r3, #12]
 8014bb8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014bbc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014bc0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014bc4:	4798      	blx	r3
 8014bc6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014bca:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014bce:	f104 0110 	add.w	r1, r4, #16
 8014bd2:	4668      	mov	r0, sp
 8014bd4:	f7f8 fe0e 	bl	800d7f4 <ucdr_init_buffer>
 8014bd8:	4639      	mov	r1, r7
 8014bda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014bde:	4668      	mov	r0, sp
 8014be0:	4798      	blx	r3
 8014be2:	4631      	mov	r1, r6
 8014be4:	4604      	mov	r4, r0
 8014be6:	480a      	ldr	r0, [pc, #40]	@ (8014c10 <rmw_take_response+0x90>)
 8014be8:	f7ff fdf2 	bl	80147d0 <put_memory>
 8014bec:	b105      	cbz	r5, 8014bf0 <rmw_take_response+0x70>
 8014bee:	702c      	strb	r4, [r5, #0]
 8014bf0:	f084 0001 	eor.w	r0, r4, #1
 8014bf4:	b2c0      	uxtb	r0, r0
 8014bf6:	b008      	add	sp, #32
 8014bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bfc:	200c      	movs	r0, #12
 8014bfe:	b008      	add	sp, #32
 8014c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c04:	2001      	movs	r0, #1
 8014c06:	b008      	add	sp, #32
 8014c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c0c:	08018948 	.word	0x08018948
 8014c10:	2000ca44 	.word	0x2000ca44

08014c14 <rmw_take_with_info>:
 8014c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c16:	4604      	mov	r4, r0
 8014c18:	6800      	ldr	r0, [r0, #0]
 8014c1a:	b089      	sub	sp, #36	@ 0x24
 8014c1c:	460f      	mov	r7, r1
 8014c1e:	4615      	mov	r5, r2
 8014c20:	b128      	cbz	r0, 8014c2e <rmw_take_with_info+0x1a>
 8014c22:	4b24      	ldr	r3, [pc, #144]	@ (8014cb4 <rmw_take_with_info+0xa0>)
 8014c24:	6819      	ldr	r1, [r3, #0]
 8014c26:	f7eb fafb 	bl	8000220 <strcmp>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	d13e      	bne.n	8014cac <rmw_take_with_info+0x98>
 8014c2e:	b305      	cbz	r5, 8014c72 <rmw_take_with_info+0x5e>
 8014c30:	6864      	ldr	r4, [r4, #4]
 8014c32:	2300      	movs	r3, #0
 8014c34:	702b      	strb	r3, [r5, #0]
 8014c36:	f7f7 fc3b 	bl	800c4b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f7f7 fc10 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014c40:	4606      	mov	r6, r0
 8014c42:	b1f0      	cbz	r0, 8014c82 <rmw_take_with_info+0x6e>
 8014c44:	6881      	ldr	r1, [r0, #8]
 8014c46:	4668      	mov	r0, sp
 8014c48:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014c4c:	3110      	adds	r1, #16
 8014c4e:	f7f8 fdd1 	bl	800d7f4 <ucdr_init_buffer>
 8014c52:	69a3      	ldr	r3, [r4, #24]
 8014c54:	4639      	mov	r1, r7
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	4668      	mov	r0, sp
 8014c5a:	4798      	blx	r3
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	4604      	mov	r4, r0
 8014c60:	4815      	ldr	r0, [pc, #84]	@ (8014cb8 <rmw_take_with_info+0xa4>)
 8014c62:	f7ff fdb5 	bl	80147d0 <put_memory>
 8014c66:	702c      	strb	r4, [r5, #0]
 8014c68:	f084 0001 	eor.w	r0, r4, #1
 8014c6c:	b2c0      	uxtb	r0, r0
 8014c6e:	b009      	add	sp, #36	@ 0x24
 8014c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c72:	6864      	ldr	r4, [r4, #4]
 8014c74:	f7f7 fc1c 	bl	800c4b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014c78:	4620      	mov	r0, r4
 8014c7a:	f7f7 fbf1 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014c7e:	4605      	mov	r5, r0
 8014c80:	b910      	cbnz	r0, 8014c88 <rmw_take_with_info+0x74>
 8014c82:	2001      	movs	r0, #1
 8014c84:	b009      	add	sp, #36	@ 0x24
 8014c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c88:	68a9      	ldr	r1, [r5, #8]
 8014c8a:	4668      	mov	r0, sp
 8014c8c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014c90:	3110      	adds	r1, #16
 8014c92:	f7f8 fdaf 	bl	800d7f4 <ucdr_init_buffer>
 8014c96:	69a3      	ldr	r3, [r4, #24]
 8014c98:	4639      	mov	r1, r7
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	4668      	mov	r0, sp
 8014c9e:	4798      	blx	r3
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	4804      	ldr	r0, [pc, #16]	@ (8014cb8 <rmw_take_with_info+0xa4>)
 8014ca6:	f7ff fd93 	bl	80147d0 <put_memory>
 8014caa:	e7dd      	b.n	8014c68 <rmw_take_with_info+0x54>
 8014cac:	200c      	movs	r0, #12
 8014cae:	b009      	add	sp, #36	@ 0x24
 8014cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	08018948 	.word	0x08018948
 8014cb8:	2000ca44 	.word	0x2000ca44

08014cbc <rmw_wait>:
 8014cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cc0:	b089      	sub	sp, #36	@ 0x24
 8014cc2:	4605      	mov	r5, r0
 8014cc4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8014cc6:	460e      	mov	r6, r1
 8014cc8:	4698      	mov	r8, r3
 8014cca:	4691      	mov	r9, r2
 8014ccc:	2a00      	cmp	r2, #0
 8014cce:	f000 810a 	beq.w	8014ee6 <rmw_wait+0x22a>
 8014cd2:	b16c      	cbz	r4, 8014cf0 <rmw_wait+0x34>
 8014cd4:	4bae      	ldr	r3, [pc, #696]	@ (8014f90 <rmw_wait+0x2d4>)
 8014cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014cd8:	af04      	add	r7, sp, #16
 8014cda:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014cde:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014ce2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014ce6:	f7ff faaf 	bl	8014248 <rmw_time_equal>
 8014cea:	2800      	cmp	r0, #0
 8014cec:	f000 8127 	beq.w	8014f3e <rmw_wait+0x282>
 8014cf0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014cf4:	f7f7 fbdc 	bl	800c4b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014cf8:	4ba6      	ldr	r3, [pc, #664]	@ (8014f94 <rmw_wait+0x2d8>)
 8014cfa:	681c      	ldr	r4, [r3, #0]
 8014cfc:	b14c      	cbz	r4, 8014d12 <rmw_wait+0x56>
 8014cfe:	4623      	mov	r3, r4
 8014d00:	2100      	movs	r1, #0
 8014d02:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014d06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014d0a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d1f7      	bne.n	8014d02 <rmw_wait+0x46>
 8014d12:	f1b9 0f00 	cmp.w	r9, #0
 8014d16:	d011      	beq.n	8014d3c <rmw_wait+0x80>
 8014d18:	f8d9 1000 	ldr.w	r1, [r9]
 8014d1c:	b171      	cbz	r1, 8014d3c <rmw_wait+0x80>
 8014d1e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014d22:	2300      	movs	r3, #0
 8014d24:	2001      	movs	r0, #1
 8014d26:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014d2a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014d2c:	6912      	ldr	r2, [r2, #16]
 8014d2e:	3301      	adds	r3, #1
 8014d30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014d34:	4299      	cmp	r1, r3
 8014d36:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014d3a:	d1f4      	bne.n	8014d26 <rmw_wait+0x6a>
 8014d3c:	f1b8 0f00 	cmp.w	r8, #0
 8014d40:	d011      	beq.n	8014d66 <rmw_wait+0xaa>
 8014d42:	f8d8 1000 	ldr.w	r1, [r8]
 8014d46:	b171      	cbz	r1, 8014d66 <rmw_wait+0xaa>
 8014d48:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	2001      	movs	r0, #1
 8014d50:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014d54:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014d56:	6912      	ldr	r2, [r2, #16]
 8014d58:	3301      	adds	r3, #1
 8014d5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014d5e:	4299      	cmp	r1, r3
 8014d60:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014d64:	d1f4      	bne.n	8014d50 <rmw_wait+0x94>
 8014d66:	b185      	cbz	r5, 8014d8a <rmw_wait+0xce>
 8014d68:	6829      	ldr	r1, [r5, #0]
 8014d6a:	b171      	cbz	r1, 8014d8a <rmw_wait+0xce>
 8014d6c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014d70:	2300      	movs	r3, #0
 8014d72:	2001      	movs	r0, #1
 8014d74:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014d78:	6a12      	ldr	r2, [r2, #32]
 8014d7a:	6912      	ldr	r2, [r2, #16]
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014d82:	4299      	cmp	r1, r3
 8014d84:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014d88:	d1f4      	bne.n	8014d74 <rmw_wait+0xb8>
 8014d8a:	b34c      	cbz	r4, 8014de0 <rmw_wait+0x124>
 8014d8c:	4622      	mov	r2, r4
 8014d8e:	2300      	movs	r3, #0
 8014d90:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014d94:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8014d98:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8014d9c:	440b      	add	r3, r1
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	2a00      	cmp	r2, #0
 8014da2:	d1f5      	bne.n	8014d90 <rmw_wait+0xd4>
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	f000 8084 	beq.w	8014eb2 <rmw_wait+0x1f6>
 8014daa:	1c7a      	adds	r2, r7, #1
 8014dac:	d00d      	beq.n	8014dca <rmw_wait+0x10e>
 8014dae:	ee07 7a90 	vmov	s15, r7
 8014db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014db6:	ee07 3a90 	vmov	s15, r3
 8014dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014dc2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014dc6:	ee17 7a90 	vmov	r7, s15
 8014dca:	68a0      	ldr	r0, [r4, #8]
 8014dcc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014dd0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	f040 8090 	bne.w	8014efa <rmw_wait+0x23e>
 8014dda:	6864      	ldr	r4, [r4, #4]
 8014ddc:	2c00      	cmp	r4, #0
 8014dde:	d1f4      	bne.n	8014dca <rmw_wait+0x10e>
 8014de0:	f1b9 0f00 	cmp.w	r9, #0
 8014de4:	f000 80bc 	beq.w	8014f60 <rmw_wait+0x2a4>
 8014de8:	f8d9 7000 	ldr.w	r7, [r9]
 8014dec:	2f00      	cmp	r7, #0
 8014dee:	f000 808e 	beq.w	8014f0e <rmw_wait+0x252>
 8014df2:	2400      	movs	r4, #0
 8014df4:	4627      	mov	r7, r4
 8014df6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014dfa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014dfe:	f7f7 fb2f 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e02:	2800      	cmp	r0, #0
 8014e04:	d05f      	beq.n	8014ec6 <rmw_wait+0x20a>
 8014e06:	f8d9 3000 	ldr.w	r3, [r9]
 8014e0a:	3401      	adds	r4, #1
 8014e0c:	42a3      	cmp	r3, r4
 8014e0e:	f04f 0701 	mov.w	r7, #1
 8014e12:	d8f0      	bhi.n	8014df6 <rmw_wait+0x13a>
 8014e14:	f1b8 0f00 	cmp.w	r8, #0
 8014e18:	d012      	beq.n	8014e40 <rmw_wait+0x184>
 8014e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8014e1e:	b17b      	cbz	r3, 8014e40 <rmw_wait+0x184>
 8014e20:	2400      	movs	r4, #0
 8014e22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014e26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014e2a:	f7f7 fb19 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	d051      	beq.n	8014ed6 <rmw_wait+0x21a>
 8014e32:	f8d8 3000 	ldr.w	r3, [r8]
 8014e36:	3401      	adds	r4, #1
 8014e38:	42a3      	cmp	r3, r4
 8014e3a:	f04f 0701 	mov.w	r7, #1
 8014e3e:	d8f0      	bhi.n	8014e22 <rmw_wait+0x166>
 8014e40:	b1dd      	cbz	r5, 8014e7a <rmw_wait+0x1be>
 8014e42:	682b      	ldr	r3, [r5, #0]
 8014e44:	b1cb      	cbz	r3, 8014e7a <rmw_wait+0x1be>
 8014e46:	2400      	movs	r4, #0
 8014e48:	686b      	ldr	r3, [r5, #4]
 8014e4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014e4e:	f7f7 fb07 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e52:	b158      	cbz	r0, 8014e6c <rmw_wait+0x1b0>
 8014e54:	682b      	ldr	r3, [r5, #0]
 8014e56:	3401      	adds	r4, #1
 8014e58:	42a3      	cmp	r3, r4
 8014e5a:	d969      	bls.n	8014f30 <rmw_wait+0x274>
 8014e5c:	686b      	ldr	r3, [r5, #4]
 8014e5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014e62:	2701      	movs	r7, #1
 8014e64:	f7f7 fafc 	bl	800c460 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	d1f3      	bne.n	8014e54 <rmw_wait+0x198>
 8014e6c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8014e70:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014e74:	3401      	adds	r4, #1
 8014e76:	42a3      	cmp	r3, r4
 8014e78:	d8e6      	bhi.n	8014e48 <rmw_wait+0x18c>
 8014e7a:	b1a6      	cbz	r6, 8014ea6 <rmw_wait+0x1ea>
 8014e7c:	6834      	ldr	r4, [r6, #0]
 8014e7e:	b194      	cbz	r4, 8014ea6 <rmw_wait+0x1ea>
 8014e80:	2300      	movs	r3, #0
 8014e82:	461d      	mov	r5, r3
 8014e84:	e004      	b.n	8014e90 <rmw_wait+0x1d4>
 8014e86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014e8a:	3301      	adds	r3, #1
 8014e8c:	42a3      	cmp	r3, r4
 8014e8e:	d00a      	beq.n	8014ea6 <rmw_wait+0x1ea>
 8014e90:	6870      	ldr	r0, [r6, #4]
 8014e92:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8014e96:	7c0a      	ldrb	r2, [r1, #16]
 8014e98:	2a00      	cmp	r2, #0
 8014e9a:	d0f4      	beq.n	8014e86 <rmw_wait+0x1ca>
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	42a3      	cmp	r3, r4
 8014ea0:	740d      	strb	r5, [r1, #16]
 8014ea2:	4617      	mov	r7, r2
 8014ea4:	d1f4      	bne.n	8014e90 <rmw_wait+0x1d4>
 8014ea6:	2f00      	cmp	r7, #0
 8014ea8:	d03e      	beq.n	8014f28 <rmw_wait+0x26c>
 8014eaa:	2000      	movs	r0, #0
 8014eac:	b009      	add	sp, #36	@ 0x24
 8014eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eb2:	68a0      	ldr	r0, [r4, #8]
 8014eb4:	2100      	movs	r1, #0
 8014eb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014eba:	f7f9 fcf3 	bl	800e8a4 <uxr_run_session_timeout>
 8014ebe:	6864      	ldr	r4, [r4, #4]
 8014ec0:	2c00      	cmp	r4, #0
 8014ec2:	d1f6      	bne.n	8014eb2 <rmw_wait+0x1f6>
 8014ec4:	e78c      	b.n	8014de0 <rmw_wait+0x124>
 8014ec6:	e9d9 3200 	ldrd	r3, r2, [r9]
 8014eca:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014ece:	3401      	adds	r4, #1
 8014ed0:	42a3      	cmp	r3, r4
 8014ed2:	d890      	bhi.n	8014df6 <rmw_wait+0x13a>
 8014ed4:	e79e      	b.n	8014e14 <rmw_wait+0x158>
 8014ed6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014eda:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014ede:	3401      	adds	r4, #1
 8014ee0:	429c      	cmp	r4, r3
 8014ee2:	d39e      	bcc.n	8014e22 <rmw_wait+0x166>
 8014ee4:	e7ac      	b.n	8014e40 <rmw_wait+0x184>
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	f47f aef3 	bne.w	8014cd2 <rmw_wait+0x16>
 8014eec:	2800      	cmp	r0, #0
 8014eee:	f47f aef0 	bne.w	8014cd2 <rmw_wait+0x16>
 8014ef2:	2900      	cmp	r1, #0
 8014ef4:	f47f aeed 	bne.w	8014cd2 <rmw_wait+0x16>
 8014ef8:	e7d7      	b.n	8014eaa <rmw_wait+0x1ee>
 8014efa:	4639      	mov	r1, r7
 8014efc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f00:	f7f9 fcea 	bl	800e8d8 <uxr_run_session_until_data>
 8014f04:	6864      	ldr	r4, [r4, #4]
 8014f06:	2c00      	cmp	r4, #0
 8014f08:	f47f af5f 	bne.w	8014dca <rmw_wait+0x10e>
 8014f0c:	e768      	b.n	8014de0 <rmw_wait+0x124>
 8014f0e:	f1b8 0f00 	cmp.w	r8, #0
 8014f12:	d032      	beq.n	8014f7a <rmw_wait+0x2be>
 8014f14:	f8d8 3000 	ldr.w	r3, [r8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d181      	bne.n	8014e20 <rmw_wait+0x164>
 8014f1c:	461f      	mov	r7, r3
 8014f1e:	2d00      	cmp	r5, #0
 8014f20:	d18f      	bne.n	8014e42 <rmw_wait+0x186>
 8014f22:	462f      	mov	r7, r5
 8014f24:	2e00      	cmp	r6, #0
 8014f26:	d1a9      	bne.n	8014e7c <rmw_wait+0x1c0>
 8014f28:	2002      	movs	r0, #2
 8014f2a:	b009      	add	sp, #36	@ 0x24
 8014f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f30:	2e00      	cmp	r6, #0
 8014f32:	d0ba      	beq.n	8014eaa <rmw_wait+0x1ee>
 8014f34:	6834      	ldr	r4, [r6, #0]
 8014f36:	2701      	movs	r7, #1
 8014f38:	2c00      	cmp	r4, #0
 8014f3a:	d1a1      	bne.n	8014e80 <rmw_wait+0x1c4>
 8014f3c:	e7b5      	b.n	8014eaa <rmw_wait+0x1ee>
 8014f3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014f42:	f7ff f9d5 	bl	80142f0 <rmw_time_total_nsec>
 8014f46:	2300      	movs	r3, #0
 8014f48:	4a13      	ldr	r2, [pc, #76]	@ (8014f98 <rmw_wait+0x2dc>)
 8014f4a:	f7eb fa21 	bl	8000390 <__aeabi_uldivmod>
 8014f4e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014f52:	f171 0300 	sbcs.w	r3, r1, #0
 8014f56:	4607      	mov	r7, r0
 8014f58:	bfa8      	it	ge
 8014f5a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8014f5e:	e6c9      	b.n	8014cf4 <rmw_wait+0x38>
 8014f60:	f1b8 0f00 	cmp.w	r8, #0
 8014f64:	d009      	beq.n	8014f7a <rmw_wait+0x2be>
 8014f66:	f8d8 3000 	ldr.w	r3, [r8]
 8014f6a:	464f      	mov	r7, r9
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	f47f af57 	bne.w	8014e20 <rmw_wait+0x164>
 8014f72:	2d00      	cmp	r5, #0
 8014f74:	f47f af65 	bne.w	8014e42 <rmw_wait+0x186>
 8014f78:	e7d3      	b.n	8014f22 <rmw_wait+0x266>
 8014f7a:	b17d      	cbz	r5, 8014f9c <rmw_wait+0x2e0>
 8014f7c:	682b      	ldr	r3, [r5, #0]
 8014f7e:	4647      	mov	r7, r8
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	f47f af60 	bne.w	8014e46 <rmw_wait+0x18a>
 8014f86:	2e00      	cmp	r6, #0
 8014f88:	f47f af78 	bne.w	8014e7c <rmw_wait+0x1c0>
 8014f8c:	e7cc      	b.n	8014f28 <rmw_wait+0x26c>
 8014f8e:	bf00      	nop
 8014f90:	08017d98 	.word	0x08017d98
 8014f94:	2000ca34 	.word	0x2000ca34
 8014f98:	000f4240 	.word	0x000f4240
 8014f9c:	2e00      	cmp	r6, #0
 8014f9e:	d0c3      	beq.n	8014f28 <rmw_wait+0x26c>
 8014fa0:	6834      	ldr	r4, [r6, #0]
 8014fa2:	462f      	mov	r7, r5
 8014fa4:	2c00      	cmp	r4, #0
 8014fa6:	f47f af6b 	bne.w	8014e80 <rmw_wait+0x1c4>
 8014faa:	e7bd      	b.n	8014f28 <rmw_wait+0x26c>

08014fac <rmw_create_wait_set>:
 8014fac:	b508      	push	{r3, lr}
 8014fae:	4803      	ldr	r0, [pc, #12]	@ (8014fbc <rmw_create_wait_set+0x10>)
 8014fb0:	f7ff fbfe 	bl	80147b0 <get_memory>
 8014fb4:	b108      	cbz	r0, 8014fba <rmw_create_wait_set+0xe>
 8014fb6:	6880      	ldr	r0, [r0, #8]
 8014fb8:	3010      	adds	r0, #16
 8014fba:	bd08      	pop	{r3, pc}
 8014fbc:	2000ca74 	.word	0x2000ca74

08014fc0 <rmw_destroy_wait_set>:
 8014fc0:	b508      	push	{r3, lr}
 8014fc2:	4b08      	ldr	r3, [pc, #32]	@ (8014fe4 <rmw_destroy_wait_set+0x24>)
 8014fc4:	6819      	ldr	r1, [r3, #0]
 8014fc6:	b911      	cbnz	r1, 8014fce <rmw_destroy_wait_set+0xe>
 8014fc8:	e00a      	b.n	8014fe0 <rmw_destroy_wait_set+0x20>
 8014fca:	6849      	ldr	r1, [r1, #4]
 8014fcc:	b141      	cbz	r1, 8014fe0 <rmw_destroy_wait_set+0x20>
 8014fce:	688b      	ldr	r3, [r1, #8]
 8014fd0:	3310      	adds	r3, #16
 8014fd2:	4298      	cmp	r0, r3
 8014fd4:	d1f9      	bne.n	8014fca <rmw_destroy_wait_set+0xa>
 8014fd6:	4803      	ldr	r0, [pc, #12]	@ (8014fe4 <rmw_destroy_wait_set+0x24>)
 8014fd8:	f7ff fbfa 	bl	80147d0 <put_memory>
 8014fdc:	2000      	movs	r0, #0
 8014fde:	bd08      	pop	{r3, pc}
 8014fe0:	2001      	movs	r0, #1
 8014fe2:	bd08      	pop	{r3, pc}
 8014fe4:	2000ca74 	.word	0x2000ca74

08014fe8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fec:	6805      	ldr	r5, [r0, #0]
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	460e      	mov	r6, r1
 8014ff4:	f7eb f914 	bl	8000220 <strcmp>
 8014ff8:	b1c8      	cbz	r0, 801502e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014ffa:	4b11      	ldr	r3, [pc, #68]	@ (8015040 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	429d      	cmp	r5, r3
 8015000:	d112      	bne.n	8015028 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015002:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015006:	f8d8 4000 	ldr.w	r4, [r8]
 801500a:	b16c      	cbz	r4, 8015028 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801500c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015010:	2700      	movs	r7, #0
 8015012:	3d04      	subs	r5, #4
 8015014:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015018:	4631      	mov	r1, r6
 801501a:	f7eb f901 	bl	8000220 <strcmp>
 801501e:	00bb      	lsls	r3, r7, #2
 8015020:	b140      	cbz	r0, 8015034 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8015022:	3701      	adds	r7, #1
 8015024:	42bc      	cmp	r4, r7
 8015026:	d1f5      	bne.n	8015014 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015028:	2000      	movs	r0, #0
 801502a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801502e:	4620      	mov	r0, r4
 8015030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015034:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801503c:	58d3      	ldr	r3, [r2, r3]
 801503e:	4718      	bx	r3
 8015040:	20000134 	.word	0x20000134

08015044 <std_msgs__msg__Bool__init>:
 8015044:	3800      	subs	r0, #0
 8015046:	bf18      	it	ne
 8015048:	2001      	movne	r0, #1
 801504a:	4770      	bx	lr

0801504c <std_msgs__msg__Bool__fini>:
 801504c:	4770      	bx	lr
 801504e:	bf00      	nop

08015050 <std_msgs__msg__UInt16__init>:
 8015050:	3800      	subs	r0, #0
 8015052:	bf18      	it	ne
 8015054:	2001      	movne	r0, #1
 8015056:	4770      	bx	lr

08015058 <std_msgs__msg__UInt16__fini>:
 8015058:	4770      	bx	lr
 801505a:	bf00      	nop

0801505c <ucdr_serialize_endian_array_char>:
 801505c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015060:	4619      	mov	r1, r3
 8015062:	461f      	mov	r7, r3
 8015064:	4605      	mov	r5, r0
 8015066:	4690      	mov	r8, r2
 8015068:	f7f8 fb70 	bl	800d74c <ucdr_check_buffer_available_for>
 801506c:	b9e0      	cbnz	r0, 80150a8 <ucdr_serialize_endian_array_char+0x4c>
 801506e:	463e      	mov	r6, r7
 8015070:	e009      	b.n	8015086 <ucdr_serialize_endian_array_char+0x2a>
 8015072:	68a8      	ldr	r0, [r5, #8]
 8015074:	f001 ff59 	bl	8016f2a <memcpy>
 8015078:	68ab      	ldr	r3, [r5, #8]
 801507a:	6928      	ldr	r0, [r5, #16]
 801507c:	4423      	add	r3, r4
 801507e:	4420      	add	r0, r4
 8015080:	1b36      	subs	r6, r6, r4
 8015082:	60ab      	str	r3, [r5, #8]
 8015084:	6128      	str	r0, [r5, #16]
 8015086:	4631      	mov	r1, r6
 8015088:	2201      	movs	r2, #1
 801508a:	4628      	mov	r0, r5
 801508c:	f7f8 fbe6 	bl	800d85c <ucdr_check_final_buffer_behavior_array>
 8015090:	1bb9      	subs	r1, r7, r6
 8015092:	4441      	add	r1, r8
 8015094:	4604      	mov	r4, r0
 8015096:	4602      	mov	r2, r0
 8015098:	2800      	cmp	r0, #0
 801509a:	d1ea      	bne.n	8015072 <ucdr_serialize_endian_array_char+0x16>
 801509c:	2301      	movs	r3, #1
 801509e:	7da8      	ldrb	r0, [r5, #22]
 80150a0:	756b      	strb	r3, [r5, #21]
 80150a2:	4058      	eors	r0, r3
 80150a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a8:	463a      	mov	r2, r7
 80150aa:	68a8      	ldr	r0, [r5, #8]
 80150ac:	4641      	mov	r1, r8
 80150ae:	f001 ff3c 	bl	8016f2a <memcpy>
 80150b2:	68aa      	ldr	r2, [r5, #8]
 80150b4:	692b      	ldr	r3, [r5, #16]
 80150b6:	443a      	add	r2, r7
 80150b8:	443b      	add	r3, r7
 80150ba:	60aa      	str	r2, [r5, #8]
 80150bc:	612b      	str	r3, [r5, #16]
 80150be:	e7ed      	b.n	801509c <ucdr_serialize_endian_array_char+0x40>

080150c0 <ucdr_deserialize_endian_array_char>:
 80150c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c4:	4619      	mov	r1, r3
 80150c6:	461f      	mov	r7, r3
 80150c8:	4605      	mov	r5, r0
 80150ca:	4690      	mov	r8, r2
 80150cc:	f7f8 fb3e 	bl	800d74c <ucdr_check_buffer_available_for>
 80150d0:	b9e0      	cbnz	r0, 801510c <ucdr_deserialize_endian_array_char+0x4c>
 80150d2:	463e      	mov	r6, r7
 80150d4:	e009      	b.n	80150ea <ucdr_deserialize_endian_array_char+0x2a>
 80150d6:	68a9      	ldr	r1, [r5, #8]
 80150d8:	f001 ff27 	bl	8016f2a <memcpy>
 80150dc:	68ab      	ldr	r3, [r5, #8]
 80150de:	6928      	ldr	r0, [r5, #16]
 80150e0:	4423      	add	r3, r4
 80150e2:	4420      	add	r0, r4
 80150e4:	1b36      	subs	r6, r6, r4
 80150e6:	60ab      	str	r3, [r5, #8]
 80150e8:	6128      	str	r0, [r5, #16]
 80150ea:	2201      	movs	r2, #1
 80150ec:	4631      	mov	r1, r6
 80150ee:	4628      	mov	r0, r5
 80150f0:	f7f8 fbb4 	bl	800d85c <ucdr_check_final_buffer_behavior_array>
 80150f4:	4604      	mov	r4, r0
 80150f6:	1bb8      	subs	r0, r7, r6
 80150f8:	4440      	add	r0, r8
 80150fa:	4622      	mov	r2, r4
 80150fc:	2c00      	cmp	r4, #0
 80150fe:	d1ea      	bne.n	80150d6 <ucdr_deserialize_endian_array_char+0x16>
 8015100:	2301      	movs	r3, #1
 8015102:	7da8      	ldrb	r0, [r5, #22]
 8015104:	756b      	strb	r3, [r5, #21]
 8015106:	4058      	eors	r0, r3
 8015108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801510c:	463a      	mov	r2, r7
 801510e:	68a9      	ldr	r1, [r5, #8]
 8015110:	4640      	mov	r0, r8
 8015112:	f001 ff0a 	bl	8016f2a <memcpy>
 8015116:	68aa      	ldr	r2, [r5, #8]
 8015118:	692b      	ldr	r3, [r5, #16]
 801511a:	443a      	add	r2, r7
 801511c:	443b      	add	r3, r7
 801511e:	60aa      	str	r2, [r5, #8]
 8015120:	612b      	str	r3, [r5, #16]
 8015122:	e7ed      	b.n	8015100 <ucdr_deserialize_endian_array_char+0x40>

08015124 <ucdr_serialize_array_uint8_t>:
 8015124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015128:	4688      	mov	r8, r1
 801512a:	4611      	mov	r1, r2
 801512c:	4617      	mov	r7, r2
 801512e:	4605      	mov	r5, r0
 8015130:	f7f8 fb0c 	bl	800d74c <ucdr_check_buffer_available_for>
 8015134:	b9e0      	cbnz	r0, 8015170 <ucdr_serialize_array_uint8_t+0x4c>
 8015136:	463e      	mov	r6, r7
 8015138:	e009      	b.n	801514e <ucdr_serialize_array_uint8_t+0x2a>
 801513a:	68a8      	ldr	r0, [r5, #8]
 801513c:	f001 fef5 	bl	8016f2a <memcpy>
 8015140:	68aa      	ldr	r2, [r5, #8]
 8015142:	692b      	ldr	r3, [r5, #16]
 8015144:	4422      	add	r2, r4
 8015146:	4423      	add	r3, r4
 8015148:	1b36      	subs	r6, r6, r4
 801514a:	60aa      	str	r2, [r5, #8]
 801514c:	612b      	str	r3, [r5, #16]
 801514e:	4631      	mov	r1, r6
 8015150:	2201      	movs	r2, #1
 8015152:	4628      	mov	r0, r5
 8015154:	f7f8 fb82 	bl	800d85c <ucdr_check_final_buffer_behavior_array>
 8015158:	1bb9      	subs	r1, r7, r6
 801515a:	4441      	add	r1, r8
 801515c:	4604      	mov	r4, r0
 801515e:	4602      	mov	r2, r0
 8015160:	2800      	cmp	r0, #0
 8015162:	d1ea      	bne.n	801513a <ucdr_serialize_array_uint8_t+0x16>
 8015164:	2301      	movs	r3, #1
 8015166:	7da8      	ldrb	r0, [r5, #22]
 8015168:	756b      	strb	r3, [r5, #21]
 801516a:	4058      	eors	r0, r3
 801516c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015170:	463a      	mov	r2, r7
 8015172:	68a8      	ldr	r0, [r5, #8]
 8015174:	4641      	mov	r1, r8
 8015176:	f001 fed8 	bl	8016f2a <memcpy>
 801517a:	68aa      	ldr	r2, [r5, #8]
 801517c:	692b      	ldr	r3, [r5, #16]
 801517e:	443a      	add	r2, r7
 8015180:	443b      	add	r3, r7
 8015182:	60aa      	str	r2, [r5, #8]
 8015184:	612b      	str	r3, [r5, #16]
 8015186:	e7ed      	b.n	8015164 <ucdr_serialize_array_uint8_t+0x40>

08015188 <ucdr_serialize_endian_array_uint8_t>:
 8015188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801518c:	4619      	mov	r1, r3
 801518e:	461f      	mov	r7, r3
 8015190:	4605      	mov	r5, r0
 8015192:	4690      	mov	r8, r2
 8015194:	f7f8 fada 	bl	800d74c <ucdr_check_buffer_available_for>
 8015198:	b9e0      	cbnz	r0, 80151d4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801519a:	463e      	mov	r6, r7
 801519c:	e009      	b.n	80151b2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801519e:	68a8      	ldr	r0, [r5, #8]
 80151a0:	f001 fec3 	bl	8016f2a <memcpy>
 80151a4:	68ab      	ldr	r3, [r5, #8]
 80151a6:	6928      	ldr	r0, [r5, #16]
 80151a8:	4423      	add	r3, r4
 80151aa:	4420      	add	r0, r4
 80151ac:	1b36      	subs	r6, r6, r4
 80151ae:	60ab      	str	r3, [r5, #8]
 80151b0:	6128      	str	r0, [r5, #16]
 80151b2:	4631      	mov	r1, r6
 80151b4:	2201      	movs	r2, #1
 80151b6:	4628      	mov	r0, r5
 80151b8:	f7f8 fb50 	bl	800d85c <ucdr_check_final_buffer_behavior_array>
 80151bc:	1bb9      	subs	r1, r7, r6
 80151be:	4441      	add	r1, r8
 80151c0:	4604      	mov	r4, r0
 80151c2:	4602      	mov	r2, r0
 80151c4:	2800      	cmp	r0, #0
 80151c6:	d1ea      	bne.n	801519e <ucdr_serialize_endian_array_uint8_t+0x16>
 80151c8:	2301      	movs	r3, #1
 80151ca:	7da8      	ldrb	r0, [r5, #22]
 80151cc:	756b      	strb	r3, [r5, #21]
 80151ce:	4058      	eors	r0, r3
 80151d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d4:	463a      	mov	r2, r7
 80151d6:	68a8      	ldr	r0, [r5, #8]
 80151d8:	4641      	mov	r1, r8
 80151da:	f001 fea6 	bl	8016f2a <memcpy>
 80151de:	68aa      	ldr	r2, [r5, #8]
 80151e0:	692b      	ldr	r3, [r5, #16]
 80151e2:	443a      	add	r2, r7
 80151e4:	443b      	add	r3, r7
 80151e6:	60aa      	str	r2, [r5, #8]
 80151e8:	612b      	str	r3, [r5, #16]
 80151ea:	e7ed      	b.n	80151c8 <ucdr_serialize_endian_array_uint8_t+0x40>

080151ec <ucdr_deserialize_array_uint8_t>:
 80151ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f0:	4688      	mov	r8, r1
 80151f2:	4611      	mov	r1, r2
 80151f4:	4617      	mov	r7, r2
 80151f6:	4605      	mov	r5, r0
 80151f8:	f7f8 faa8 	bl	800d74c <ucdr_check_buffer_available_for>
 80151fc:	b9e0      	cbnz	r0, 8015238 <ucdr_deserialize_array_uint8_t+0x4c>
 80151fe:	463e      	mov	r6, r7
 8015200:	e009      	b.n	8015216 <ucdr_deserialize_array_uint8_t+0x2a>
 8015202:	68a9      	ldr	r1, [r5, #8]
 8015204:	f001 fe91 	bl	8016f2a <memcpy>
 8015208:	68aa      	ldr	r2, [r5, #8]
 801520a:	692b      	ldr	r3, [r5, #16]
 801520c:	4422      	add	r2, r4
 801520e:	4423      	add	r3, r4
 8015210:	1b36      	subs	r6, r6, r4
 8015212:	60aa      	str	r2, [r5, #8]
 8015214:	612b      	str	r3, [r5, #16]
 8015216:	2201      	movs	r2, #1
 8015218:	4631      	mov	r1, r6
 801521a:	4628      	mov	r0, r5
 801521c:	f7f8 fb1e 	bl	800d85c <ucdr_check_final_buffer_behavior_array>
 8015220:	4604      	mov	r4, r0
 8015222:	1bb8      	subs	r0, r7, r6
 8015224:	4440      	add	r0, r8
 8015226:	4622      	mov	r2, r4
 8015228:	2c00      	cmp	r4, #0
 801522a:	d1ea      	bne.n	8015202 <ucdr_deserialize_array_uint8_t+0x16>
 801522c:	2301      	movs	r3, #1
 801522e:	7da8      	ldrb	r0, [r5, #22]
 8015230:	756b      	strb	r3, [r5, #21]
 8015232:	4058      	eors	r0, r3
 8015234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015238:	463a      	mov	r2, r7
 801523a:	68a9      	ldr	r1, [r5, #8]
 801523c:	4640      	mov	r0, r8
 801523e:	f001 fe74 	bl	8016f2a <memcpy>
 8015242:	68aa      	ldr	r2, [r5, #8]
 8015244:	692b      	ldr	r3, [r5, #16]
 8015246:	443a      	add	r2, r7
 8015248:	443b      	add	r3, r7
 801524a:	60aa      	str	r2, [r5, #8]
 801524c:	612b      	str	r3, [r5, #16]
 801524e:	e7ed      	b.n	801522c <ucdr_deserialize_array_uint8_t+0x40>

08015250 <ucdr_deserialize_endian_array_uint8_t>:
 8015250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015254:	4619      	mov	r1, r3
 8015256:	461f      	mov	r7, r3
 8015258:	4605      	mov	r5, r0
 801525a:	4690      	mov	r8, r2
 801525c:	f7f8 fa76 	bl	800d74c <ucdr_check_buffer_available_for>
 8015260:	b9e0      	cbnz	r0, 801529c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015262:	463e      	mov	r6, r7
 8015264:	e009      	b.n	801527a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015266:	68a9      	ldr	r1, [r5, #8]
 8015268:	f001 fe5f 	bl	8016f2a <memcpy>
 801526c:	68ab      	ldr	r3, [r5, #8]
 801526e:	6928      	ldr	r0, [r5, #16]
 8015270:	4423      	add	r3, r4
 8015272:	4420      	add	r0, r4
 8015274:	1b36      	subs	r6, r6, r4
 8015276:	60ab      	str	r3, [r5, #8]
 8015278:	6128      	str	r0, [r5, #16]
 801527a:	2201      	movs	r2, #1
 801527c:	4631      	mov	r1, r6
 801527e:	4628      	mov	r0, r5
 8015280:	f7f8 faec 	bl	800d85c <ucdr_check_final_buffer_behavior_array>
 8015284:	4604      	mov	r4, r0
 8015286:	1bb8      	subs	r0, r7, r6
 8015288:	4440      	add	r0, r8
 801528a:	4622      	mov	r2, r4
 801528c:	2c00      	cmp	r4, #0
 801528e:	d1ea      	bne.n	8015266 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015290:	2301      	movs	r3, #1
 8015292:	7da8      	ldrb	r0, [r5, #22]
 8015294:	756b      	strb	r3, [r5, #21]
 8015296:	4058      	eors	r0, r3
 8015298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801529c:	463a      	mov	r2, r7
 801529e:	68a9      	ldr	r1, [r5, #8]
 80152a0:	4640      	mov	r0, r8
 80152a2:	f001 fe42 	bl	8016f2a <memcpy>
 80152a6:	68aa      	ldr	r2, [r5, #8]
 80152a8:	692b      	ldr	r3, [r5, #16]
 80152aa:	443a      	add	r2, r7
 80152ac:	443b      	add	r3, r7
 80152ae:	60aa      	str	r2, [r5, #8]
 80152b0:	612b      	str	r3, [r5, #16]
 80152b2:	e7ed      	b.n	8015290 <ucdr_deserialize_endian_array_uint8_t+0x40>

080152b4 <ucdr_serialize_sequence_char>:
 80152b4:	b570      	push	{r4, r5, r6, lr}
 80152b6:	4615      	mov	r5, r2
 80152b8:	460e      	mov	r6, r1
 80152ba:	7d01      	ldrb	r1, [r0, #20]
 80152bc:	4604      	mov	r4, r0
 80152be:	f7f7 fd9b 	bl	800cdf8 <ucdr_serialize_endian_uint32_t>
 80152c2:	b90d      	cbnz	r5, 80152c8 <ucdr_serialize_sequence_char+0x14>
 80152c4:	2001      	movs	r0, #1
 80152c6:	bd70      	pop	{r4, r5, r6, pc}
 80152c8:	7d21      	ldrb	r1, [r4, #20]
 80152ca:	462b      	mov	r3, r5
 80152cc:	4632      	mov	r2, r6
 80152ce:	4620      	mov	r0, r4
 80152d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152d4:	f7ff bec2 	b.w	801505c <ucdr_serialize_endian_array_char>

080152d8 <ucdr_deserialize_sequence_char>:
 80152d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152dc:	461d      	mov	r5, r3
 80152de:	4616      	mov	r6, r2
 80152e0:	460f      	mov	r7, r1
 80152e2:	461a      	mov	r2, r3
 80152e4:	7d01      	ldrb	r1, [r0, #20]
 80152e6:	4604      	mov	r4, r0
 80152e8:	f7f7 feae 	bl	800d048 <ucdr_deserialize_endian_uint32_t>
 80152ec:	682b      	ldr	r3, [r5, #0]
 80152ee:	429e      	cmp	r6, r3
 80152f0:	bf3c      	itt	cc
 80152f2:	2201      	movcc	r2, #1
 80152f4:	75a2      	strbcc	r2, [r4, #22]
 80152f6:	b913      	cbnz	r3, 80152fe <ucdr_deserialize_sequence_char+0x26>
 80152f8:	2001      	movs	r0, #1
 80152fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152fe:	7d21      	ldrb	r1, [r4, #20]
 8015300:	463a      	mov	r2, r7
 8015302:	4620      	mov	r0, r4
 8015304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015308:	f7ff beda 	b.w	80150c0 <ucdr_deserialize_endian_array_char>

0801530c <ucdr_serialize_sequence_uint8_t>:
 801530c:	b570      	push	{r4, r5, r6, lr}
 801530e:	4615      	mov	r5, r2
 8015310:	460e      	mov	r6, r1
 8015312:	7d01      	ldrb	r1, [r0, #20]
 8015314:	4604      	mov	r4, r0
 8015316:	f7f7 fd6f 	bl	800cdf8 <ucdr_serialize_endian_uint32_t>
 801531a:	b90d      	cbnz	r5, 8015320 <ucdr_serialize_sequence_uint8_t+0x14>
 801531c:	2001      	movs	r0, #1
 801531e:	bd70      	pop	{r4, r5, r6, pc}
 8015320:	7d21      	ldrb	r1, [r4, #20]
 8015322:	462b      	mov	r3, r5
 8015324:	4632      	mov	r2, r6
 8015326:	4620      	mov	r0, r4
 8015328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801532c:	f7ff bf2c 	b.w	8015188 <ucdr_serialize_endian_array_uint8_t>

08015330 <ucdr_deserialize_sequence_uint8_t>:
 8015330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015334:	461d      	mov	r5, r3
 8015336:	4616      	mov	r6, r2
 8015338:	460f      	mov	r7, r1
 801533a:	461a      	mov	r2, r3
 801533c:	7d01      	ldrb	r1, [r0, #20]
 801533e:	4604      	mov	r4, r0
 8015340:	f7f7 fe82 	bl	800d048 <ucdr_deserialize_endian_uint32_t>
 8015344:	682b      	ldr	r3, [r5, #0]
 8015346:	429e      	cmp	r6, r3
 8015348:	bf3c      	itt	cc
 801534a:	2201      	movcc	r2, #1
 801534c:	75a2      	strbcc	r2, [r4, #22]
 801534e:	b913      	cbnz	r3, 8015356 <ucdr_deserialize_sequence_uint8_t+0x26>
 8015350:	2001      	movs	r0, #1
 8015352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015356:	7d21      	ldrb	r1, [r4, #20]
 8015358:	463a      	mov	r2, r7
 801535a:	4620      	mov	r0, r4
 801535c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015360:	f7ff bf76 	b.w	8015250 <ucdr_deserialize_endian_array_uint8_t>

08015364 <ucdr_serialize_string>:
 8015364:	b510      	push	{r4, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	4604      	mov	r4, r0
 801536a:	4608      	mov	r0, r1
 801536c:	9101      	str	r1, [sp, #4]
 801536e:	f7ea ff61 	bl	8000234 <strlen>
 8015372:	9901      	ldr	r1, [sp, #4]
 8015374:	1c42      	adds	r2, r0, #1
 8015376:	4620      	mov	r0, r4
 8015378:	b002      	add	sp, #8
 801537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801537e:	f7ff bf99 	b.w	80152b4 <ucdr_serialize_sequence_char>
 8015382:	bf00      	nop

08015384 <ucdr_deserialize_string>:
 8015384:	b500      	push	{lr}
 8015386:	b083      	sub	sp, #12
 8015388:	ab01      	add	r3, sp, #4
 801538a:	f7ff ffa5 	bl	80152d8 <ucdr_deserialize_sequence_char>
 801538e:	b003      	add	sp, #12
 8015390:	f85d fb04 	ldr.w	pc, [sp], #4

08015394 <uxr_init_input_best_effort_stream>:
 8015394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015398:	8003      	strh	r3, [r0, #0]
 801539a:	4770      	bx	lr

0801539c <uxr_reset_input_best_effort_stream>:
 801539c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80153a0:	8003      	strh	r3, [r0, #0]
 80153a2:	4770      	bx	lr

080153a4 <uxr_receive_best_effort_message>:
 80153a4:	b538      	push	{r3, r4, r5, lr}
 80153a6:	4604      	mov	r4, r0
 80153a8:	8800      	ldrh	r0, [r0, #0]
 80153aa:	460d      	mov	r5, r1
 80153ac:	f000 fd42 	bl	8015e34 <uxr_seq_num_cmp>
 80153b0:	4603      	mov	r3, r0
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80153b8:	bfb8      	it	lt
 80153ba:	8025      	strhlt	r5, [r4, #0]
 80153bc:	bd38      	pop	{r3, r4, r5, pc}
 80153be:	bf00      	nop

080153c0 <on_full_input_buffer>:
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	4605      	mov	r5, r0
 80153c4:	460c      	mov	r4, r1
 80153c6:	682b      	ldr	r3, [r5, #0]
 80153c8:	6809      	ldr	r1, [r1, #0]
 80153ca:	8920      	ldrh	r0, [r4, #8]
 80153cc:	6862      	ldr	r2, [r4, #4]
 80153ce:	fbb2 f2f0 	udiv	r2, r2, r0
 80153d2:	eba3 0c01 	sub.w	ip, r3, r1
 80153d6:	fbbc fcf2 	udiv	ip, ip, r2
 80153da:	f10c 0c01 	add.w	ip, ip, #1
 80153de:	fa1f f38c 	uxth.w	r3, ip
 80153e2:	fbb3 f6f0 	udiv	r6, r3, r0
 80153e6:	fb00 3316 	mls	r3, r0, r6, r3
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	fb02 f303 	mul.w	r3, r2, r3
 80153f0:	1d18      	adds	r0, r3, #4
 80153f2:	4408      	add	r0, r1
 80153f4:	7d26      	ldrb	r6, [r4, #20]
 80153f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80153fa:	b116      	cbz	r6, 8015402 <on_full_input_buffer+0x42>
 80153fc:	2600      	movs	r6, #0
 80153fe:	f840 6c04 	str.w	r6, [r0, #-4]
 8015402:	2a03      	cmp	r2, #3
 8015404:	d801      	bhi.n	801540a <on_full_input_buffer+0x4a>
 8015406:	2001      	movs	r0, #1
 8015408:	bd70      	pop	{r4, r5, r6, pc}
 801540a:	3308      	adds	r3, #8
 801540c:	4419      	add	r1, r3
 801540e:	4628      	mov	r0, r5
 8015410:	692b      	ldr	r3, [r5, #16]
 8015412:	3a04      	subs	r2, #4
 8015414:	f7f8 f9e6 	bl	800d7e4 <ucdr_init_buffer_origin>
 8015418:	4628      	mov	r0, r5
 801541a:	4903      	ldr	r1, [pc, #12]	@ (8015428 <on_full_input_buffer+0x68>)
 801541c:	4622      	mov	r2, r4
 801541e:	f7f8 f9bd 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 8015422:	2000      	movs	r0, #0
 8015424:	bd70      	pop	{r4, r5, r6, pc}
 8015426:	bf00      	nop
 8015428:	080153c1 	.word	0x080153c1

0801542c <uxr_init_input_reliable_stream>:
 801542c:	b500      	push	{lr}
 801542e:	e9c0 1200 	strd	r1, r2, [r0]
 8015432:	f04f 0e00 	mov.w	lr, #0
 8015436:	9a01      	ldr	r2, [sp, #4]
 8015438:	8103      	strh	r3, [r0, #8]
 801543a:	6102      	str	r2, [r0, #16]
 801543c:	f880 e014 	strb.w	lr, [r0, #20]
 8015440:	b1d3      	cbz	r3, 8015478 <uxr_init_input_reliable_stream+0x4c>
 8015442:	f8c1 e000 	str.w	lr, [r1]
 8015446:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801544a:	f1bc 0f01 	cmp.w	ip, #1
 801544e:	d913      	bls.n	8015478 <uxr_init_input_reliable_stream+0x4c>
 8015450:	2301      	movs	r3, #1
 8015452:	fbb3 f1fc 	udiv	r1, r3, ip
 8015456:	fb0c 3111 	mls	r1, ip, r1, r3
 801545a:	b289      	uxth	r1, r1
 801545c:	6842      	ldr	r2, [r0, #4]
 801545e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015462:	fb01 f202 	mul.w	r2, r1, r2
 8015466:	6801      	ldr	r1, [r0, #0]
 8015468:	f841 e002 	str.w	lr, [r1, r2]
 801546c:	3301      	adds	r3, #1
 801546e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015472:	b29b      	uxth	r3, r3
 8015474:	459c      	cmp	ip, r3
 8015476:	d8ec      	bhi.n	8015452 <uxr_init_input_reliable_stream+0x26>
 8015478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801547c:	60c3      	str	r3, [r0, #12]
 801547e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015482:	bf00      	nop

08015484 <uxr_reset_input_reliable_stream>:
 8015484:	8901      	ldrh	r1, [r0, #8]
 8015486:	b1e9      	cbz	r1, 80154c4 <uxr_reset_input_reliable_stream+0x40>
 8015488:	f04f 0c00 	mov.w	ip, #0
 801548c:	b500      	push	{lr}
 801548e:	4663      	mov	r3, ip
 8015490:	46e6      	mov	lr, ip
 8015492:	fbb3 f2f1 	udiv	r2, r3, r1
 8015496:	fb01 3312 	mls	r3, r1, r2, r3
 801549a:	b29b      	uxth	r3, r3
 801549c:	6842      	ldr	r2, [r0, #4]
 801549e:	fbb2 f2f1 	udiv	r2, r2, r1
 80154a2:	fb02 f303 	mul.w	r3, r2, r3
 80154a6:	6802      	ldr	r2, [r0, #0]
 80154a8:	f842 e003 	str.w	lr, [r2, r3]
 80154ac:	f10c 0c01 	add.w	ip, ip, #1
 80154b0:	8901      	ldrh	r1, [r0, #8]
 80154b2:	fa1f f38c 	uxth.w	r3, ip
 80154b6:	4299      	cmp	r1, r3
 80154b8:	d8eb      	bhi.n	8015492 <uxr_reset_input_reliable_stream+0xe>
 80154ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80154be:	60c3      	str	r3, [r0, #12]
 80154c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80154c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80154c8:	60c3      	str	r3, [r0, #12]
 80154ca:	4770      	bx	lr

080154cc <uxr_receive_reliable_message>:
 80154cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154d0:	4604      	mov	r4, r0
 80154d2:	460d      	mov	r5, r1
 80154d4:	8901      	ldrh	r1, [r0, #8]
 80154d6:	8980      	ldrh	r0, [r0, #12]
 80154d8:	4690      	mov	r8, r2
 80154da:	461f      	mov	r7, r3
 80154dc:	f000 fca2 	bl	8015e24 <uxr_seq_num_add>
 80154e0:	4629      	mov	r1, r5
 80154e2:	4606      	mov	r6, r0
 80154e4:	89a0      	ldrh	r0, [r4, #12]
 80154e6:	f000 fca5 	bl	8015e34 <uxr_seq_num_cmp>
 80154ea:	2800      	cmp	r0, #0
 80154ec:	db0a      	blt.n	8015504 <uxr_receive_reliable_message+0x38>
 80154ee:	2600      	movs	r6, #0
 80154f0:	89e0      	ldrh	r0, [r4, #14]
 80154f2:	4629      	mov	r1, r5
 80154f4:	f000 fc9e 	bl	8015e34 <uxr_seq_num_cmp>
 80154f8:	2800      	cmp	r0, #0
 80154fa:	da00      	bge.n	80154fe <uxr_receive_reliable_message+0x32>
 80154fc:	81e5      	strh	r5, [r4, #14]
 80154fe:	4630      	mov	r0, r6
 8015500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015504:	4630      	mov	r0, r6
 8015506:	4629      	mov	r1, r5
 8015508:	f000 fc94 	bl	8015e34 <uxr_seq_num_cmp>
 801550c:	2800      	cmp	r0, #0
 801550e:	dbee      	blt.n	80154ee <uxr_receive_reliable_message+0x22>
 8015510:	6923      	ldr	r3, [r4, #16]
 8015512:	4640      	mov	r0, r8
 8015514:	4798      	blx	r3
 8015516:	2101      	movs	r1, #1
 8015518:	4681      	mov	r9, r0
 801551a:	89a0      	ldrh	r0, [r4, #12]
 801551c:	f000 fc82 	bl	8015e24 <uxr_seq_num_add>
 8015520:	f1b9 0f00 	cmp.w	r9, #0
 8015524:	d101      	bne.n	801552a <uxr_receive_reliable_message+0x5e>
 8015526:	4285      	cmp	r5, r0
 8015528:	d047      	beq.n	80155ba <uxr_receive_reliable_message+0xee>
 801552a:	8922      	ldrh	r2, [r4, #8]
 801552c:	fbb5 f0f2 	udiv	r0, r5, r2
 8015530:	fb02 5010 	mls	r0, r2, r0, r5
 8015534:	b280      	uxth	r0, r0
 8015536:	6863      	ldr	r3, [r4, #4]
 8015538:	fbb3 f3f2 	udiv	r3, r3, r2
 801553c:	fb00 f303 	mul.w	r3, r0, r3
 8015540:	6820      	ldr	r0, [r4, #0]
 8015542:	3304      	adds	r3, #4
 8015544:	4418      	add	r0, r3
 8015546:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d1cf      	bne.n	80154ee <uxr_receive_reliable_message+0x22>
 801554e:	4641      	mov	r1, r8
 8015550:	463a      	mov	r2, r7
 8015552:	f001 fcea 	bl	8016f2a <memcpy>
 8015556:	8921      	ldrh	r1, [r4, #8]
 8015558:	fbb5 f2f1 	udiv	r2, r5, r1
 801555c:	fb01 5212 	mls	r2, r1, r2, r5
 8015560:	b292      	uxth	r2, r2
 8015562:	6863      	ldr	r3, [r4, #4]
 8015564:	fbb3 f3f1 	udiv	r3, r3, r1
 8015568:	fb02 f303 	mul.w	r3, r2, r3
 801556c:	6822      	ldr	r2, [r4, #0]
 801556e:	50d7      	str	r7, [r2, r3]
 8015570:	9a08      	ldr	r2, [sp, #32]
 8015572:	2301      	movs	r3, #1
 8015574:	7013      	strb	r3, [r2, #0]
 8015576:	f1b9 0f00 	cmp.w	r9, #0
 801557a:	d0b8      	beq.n	80154ee <uxr_receive_reliable_message+0x22>
 801557c:	89a6      	ldrh	r6, [r4, #12]
 801557e:	4630      	mov	r0, r6
 8015580:	2101      	movs	r1, #1
 8015582:	f000 fc4f 	bl	8015e24 <uxr_seq_num_add>
 8015586:	8922      	ldrh	r2, [r4, #8]
 8015588:	6863      	ldr	r3, [r4, #4]
 801558a:	fbb3 f3f2 	udiv	r3, r3, r2
 801558e:	4606      	mov	r6, r0
 8015590:	fbb0 f0f2 	udiv	r0, r0, r2
 8015594:	fb02 6010 	mls	r0, r2, r0, r6
 8015598:	b280      	uxth	r0, r0
 801559a:	fb00 f303 	mul.w	r3, r0, r3
 801559e:	6820      	ldr	r0, [r4, #0]
 80155a0:	3304      	adds	r3, #4
 80155a2:	4418      	add	r0, r3
 80155a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d0a0      	beq.n	80154ee <uxr_receive_reliable_message+0x22>
 80155ac:	6923      	ldr	r3, [r4, #16]
 80155ae:	4798      	blx	r3
 80155b0:	2802      	cmp	r0, #2
 80155b2:	d008      	beq.n	80155c6 <uxr_receive_reliable_message+0xfa>
 80155b4:	2801      	cmp	r0, #1
 80155b6:	d0e2      	beq.n	801557e <uxr_receive_reliable_message+0xb2>
 80155b8:	e799      	b.n	80154ee <uxr_receive_reliable_message+0x22>
 80155ba:	9b08      	ldr	r3, [sp, #32]
 80155bc:	81a5      	strh	r5, [r4, #12]
 80155be:	2601      	movs	r6, #1
 80155c0:	f883 9000 	strb.w	r9, [r3]
 80155c4:	e794      	b.n	80154f0 <uxr_receive_reliable_message+0x24>
 80155c6:	2601      	movs	r6, #1
 80155c8:	e792      	b.n	80154f0 <uxr_receive_reliable_message+0x24>
 80155ca:	bf00      	nop

080155cc <uxr_next_input_reliable_buffer_available>:
 80155cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d0:	4604      	mov	r4, r0
 80155d2:	460f      	mov	r7, r1
 80155d4:	8980      	ldrh	r0, [r0, #12]
 80155d6:	2101      	movs	r1, #1
 80155d8:	4690      	mov	r8, r2
 80155da:	f000 fc23 	bl	8015e24 <uxr_seq_num_add>
 80155de:	8922      	ldrh	r2, [r4, #8]
 80155e0:	fbb0 f6f2 	udiv	r6, r0, r2
 80155e4:	fb02 0616 	mls	r6, r2, r6, r0
 80155e8:	b2b6      	uxth	r6, r6
 80155ea:	6863      	ldr	r3, [r4, #4]
 80155ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80155f0:	fb06 f303 	mul.w	r3, r6, r3
 80155f4:	6826      	ldr	r6, [r4, #0]
 80155f6:	3304      	adds	r3, #4
 80155f8:	441e      	add	r6, r3
 80155fa:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80155fe:	f1b9 0f00 	cmp.w	r9, #0
 8015602:	d023      	beq.n	801564c <uxr_next_input_reliable_buffer_available+0x80>
 8015604:	6923      	ldr	r3, [r4, #16]
 8015606:	4605      	mov	r5, r0
 8015608:	4630      	mov	r0, r6
 801560a:	4798      	blx	r3
 801560c:	4682      	mov	sl, r0
 801560e:	b300      	cbz	r0, 8015652 <uxr_next_input_reliable_buffer_available+0x86>
 8015610:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015614:	2101      	movs	r1, #1
 8015616:	4650      	mov	r0, sl
 8015618:	f000 fc04 	bl	8015e24 <uxr_seq_num_add>
 801561c:	8921      	ldrh	r1, [r4, #8]
 801561e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015622:	4682      	mov	sl, r0
 8015624:	fb01 0212 	mls	r2, r1, r2, r0
 8015628:	e9d4 0300 	ldrd	r0, r3, [r4]
 801562c:	b292      	uxth	r2, r2
 801562e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015632:	fb02 f303 	mul.w	r3, r2, r3
 8015636:	3304      	adds	r3, #4
 8015638:	4418      	add	r0, r3
 801563a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801563e:	b12b      	cbz	r3, 801564c <uxr_next_input_reliable_buffer_available+0x80>
 8015640:	6923      	ldr	r3, [r4, #16]
 8015642:	4798      	blx	r3
 8015644:	2802      	cmp	r0, #2
 8015646:	d01b      	beq.n	8015680 <uxr_next_input_reliable_buffer_available+0xb4>
 8015648:	2801      	cmp	r0, #1
 801564a:	d0e3      	beq.n	8015614 <uxr_next_input_reliable_buffer_available+0x48>
 801564c:	2000      	movs	r0, #0
 801564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015652:	464a      	mov	r2, r9
 8015654:	4631      	mov	r1, r6
 8015656:	4638      	mov	r0, r7
 8015658:	f7f8 f8cc 	bl	800d7f4 <ucdr_init_buffer>
 801565c:	8921      	ldrh	r1, [r4, #8]
 801565e:	fbb5 f2f1 	udiv	r2, r5, r1
 8015662:	fb01 5212 	mls	r2, r1, r2, r5
 8015666:	b292      	uxth	r2, r2
 8015668:	6863      	ldr	r3, [r4, #4]
 801566a:	fbb3 f3f1 	udiv	r3, r3, r1
 801566e:	fb02 f303 	mul.w	r3, r2, r3
 8015672:	6822      	ldr	r2, [r4, #0]
 8015674:	f842 a003 	str.w	sl, [r2, r3]
 8015678:	2001      	movs	r0, #1
 801567a:	81a5      	strh	r5, [r4, #12]
 801567c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015680:	8920      	ldrh	r0, [r4, #8]
 8015682:	fbb5 f3f0 	udiv	r3, r5, r0
 8015686:	fb00 5513 	mls	r5, r0, r3, r5
 801568a:	b2ad      	uxth	r5, r5
 801568c:	6863      	ldr	r3, [r4, #4]
 801568e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015692:	fb03 f505 	mul.w	r5, r3, r5
 8015696:	6823      	ldr	r3, [r4, #0]
 8015698:	2000      	movs	r0, #0
 801569a:	5158      	str	r0, [r3, r5]
 801569c:	eb06 0108 	add.w	r1, r6, r8
 80156a0:	eba9 0208 	sub.w	r2, r9, r8
 80156a4:	4638      	mov	r0, r7
 80156a6:	f7f8 f8a5 	bl	800d7f4 <ucdr_init_buffer>
 80156aa:	4638      	mov	r0, r7
 80156ac:	4903      	ldr	r1, [pc, #12]	@ (80156bc <uxr_next_input_reliable_buffer_available+0xf0>)
 80156ae:	4622      	mov	r2, r4
 80156b0:	f7f8 f874 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 80156b4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80156b8:	2001      	movs	r0, #1
 80156ba:	e7c8      	b.n	801564e <uxr_next_input_reliable_buffer_available+0x82>
 80156bc:	080153c1 	.word	0x080153c1

080156c0 <uxr_process_heartbeat>:
 80156c0:	b538      	push	{r3, r4, r5, lr}
 80156c2:	4611      	mov	r1, r2
 80156c4:	4604      	mov	r4, r0
 80156c6:	89c0      	ldrh	r0, [r0, #14]
 80156c8:	4615      	mov	r5, r2
 80156ca:	f000 fbb3 	bl	8015e34 <uxr_seq_num_cmp>
 80156ce:	2800      	cmp	r0, #0
 80156d0:	bfb8      	it	lt
 80156d2:	81e5      	strhlt	r5, [r4, #14]
 80156d4:	bd38      	pop	{r3, r4, r5, pc}
 80156d6:	bf00      	nop

080156d8 <uxr_compute_acknack>:
 80156d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156dc:	8903      	ldrh	r3, [r0, #8]
 80156de:	8985      	ldrh	r5, [r0, #12]
 80156e0:	4604      	mov	r4, r0
 80156e2:	460e      	mov	r6, r1
 80156e4:	b1d3      	cbz	r3, 801571c <uxr_compute_acknack+0x44>
 80156e6:	4628      	mov	r0, r5
 80156e8:	2701      	movs	r7, #1
 80156ea:	e003      	b.n	80156f4 <uxr_compute_acknack+0x1c>
 80156ec:	4567      	cmp	r7, ip
 80156ee:	d215      	bcs.n	801571c <uxr_compute_acknack+0x44>
 80156f0:	89a0      	ldrh	r0, [r4, #12]
 80156f2:	3701      	adds	r7, #1
 80156f4:	b2b9      	uxth	r1, r7
 80156f6:	f000 fb95 	bl	8015e24 <uxr_seq_num_add>
 80156fa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80156fe:	fbb0 f3fc 	udiv	r3, r0, ip
 8015702:	fb0c 0313 	mls	r3, ip, r3, r0
 8015706:	b29a      	uxth	r2, r3
 8015708:	e9d4 1300 	ldrd	r1, r3, [r4]
 801570c:	fbb3 f3fc 	udiv	r3, r3, ip
 8015710:	fb02 f303 	mul.w	r3, r2, r3
 8015714:	58cb      	ldr	r3, [r1, r3]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d1e8      	bne.n	80156ec <uxr_compute_acknack+0x14>
 801571a:	4605      	mov	r5, r0
 801571c:	8035      	strh	r5, [r6, #0]
 801571e:	2101      	movs	r1, #1
 8015720:	4628      	mov	r0, r5
 8015722:	89e7      	ldrh	r7, [r4, #14]
 8015724:	f000 fb82 	bl	8015e2c <uxr_seq_num_sub>
 8015728:	4601      	mov	r1, r0
 801572a:	4638      	mov	r0, r7
 801572c:	f000 fb7e 	bl	8015e2c <uxr_seq_num_sub>
 8015730:	4605      	mov	r5, r0
 8015732:	b318      	cbz	r0, 801577c <uxr_compute_acknack+0xa4>
 8015734:	f04f 0900 	mov.w	r9, #0
 8015738:	464f      	mov	r7, r9
 801573a:	f04f 0801 	mov.w	r8, #1
 801573e:	fa1f f189 	uxth.w	r1, r9
 8015742:	8830      	ldrh	r0, [r6, #0]
 8015744:	f000 fb6e 	bl	8015e24 <uxr_seq_num_add>
 8015748:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801574c:	fbb0 f3fc 	udiv	r3, r0, ip
 8015750:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015754:	fb03 001c 	mls	r0, r3, ip, r0
 8015758:	b283      	uxth	r3, r0
 801575a:	fbb2 f2fc 	udiv	r2, r2, ip
 801575e:	fb02 f303 	mul.w	r3, r2, r3
 8015762:	fa08 f209 	lsl.w	r2, r8, r9
 8015766:	58cb      	ldr	r3, [r1, r3]
 8015768:	f109 0901 	add.w	r9, r9, #1
 801576c:	b90b      	cbnz	r3, 8015772 <uxr_compute_acknack+0x9a>
 801576e:	4317      	orrs	r7, r2
 8015770:	b2bf      	uxth	r7, r7
 8015772:	454d      	cmp	r5, r9
 8015774:	d1e3      	bne.n	801573e <uxr_compute_acknack+0x66>
 8015776:	4638      	mov	r0, r7
 8015778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801577c:	4607      	mov	r7, r0
 801577e:	4638      	mov	r0, r7
 8015780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015784 <uxr_init_output_best_effort_stream>:
 8015784:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015788:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801578c:	6001      	str	r1, [r0, #0]
 801578e:	7303      	strb	r3, [r0, #12]
 8015790:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015794:	4770      	bx	lr
 8015796:	bf00      	nop

08015798 <uxr_reset_output_best_effort_stream>:
 8015798:	7b02      	ldrb	r2, [r0, #12]
 801579a:	6042      	str	r2, [r0, #4]
 801579c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157a0:	81c3      	strh	r3, [r0, #14]
 80157a2:	4770      	bx	lr

080157a4 <uxr_prepare_best_effort_buffer_to_write>:
 80157a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157a6:	4604      	mov	r4, r0
 80157a8:	b083      	sub	sp, #12
 80157aa:	6840      	ldr	r0, [r0, #4]
 80157ac:	460d      	mov	r5, r1
 80157ae:	4616      	mov	r6, r2
 80157b0:	f7fa fac4 	bl	800fd3c <uxr_submessage_padding>
 80157b4:	6863      	ldr	r3, [r4, #4]
 80157b6:	4418      	add	r0, r3
 80157b8:	68a3      	ldr	r3, [r4, #8]
 80157ba:	1942      	adds	r2, r0, r5
 80157bc:	4293      	cmp	r3, r2
 80157be:	bf2c      	ite	cs
 80157c0:	2701      	movcs	r7, #1
 80157c2:	2700      	movcc	r7, #0
 80157c4:	d202      	bcs.n	80157cc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80157c6:	4638      	mov	r0, r7
 80157c8:	b003      	add	sp, #12
 80157ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157cc:	9000      	str	r0, [sp, #0]
 80157ce:	6821      	ldr	r1, [r4, #0]
 80157d0:	4630      	mov	r0, r6
 80157d2:	2300      	movs	r3, #0
 80157d4:	f7f7 fffc 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 80157d8:	6861      	ldr	r1, [r4, #4]
 80157da:	4638      	mov	r0, r7
 80157dc:	4429      	add	r1, r5
 80157de:	6061      	str	r1, [r4, #4]
 80157e0:	b003      	add	sp, #12
 80157e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157e4 <uxr_prepare_best_effort_buffer_to_send>:
 80157e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e8:	4604      	mov	r4, r0
 80157ea:	461d      	mov	r5, r3
 80157ec:	6840      	ldr	r0, [r0, #4]
 80157ee:	7b23      	ldrb	r3, [r4, #12]
 80157f0:	4298      	cmp	r0, r3
 80157f2:	bf8c      	ite	hi
 80157f4:	2601      	movhi	r6, #1
 80157f6:	2600      	movls	r6, #0
 80157f8:	d802      	bhi.n	8015800 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80157fa:	4630      	mov	r0, r6
 80157fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015800:	4688      	mov	r8, r1
 8015802:	89e0      	ldrh	r0, [r4, #14]
 8015804:	2101      	movs	r1, #1
 8015806:	4617      	mov	r7, r2
 8015808:	f000 fb0c 	bl	8015e24 <uxr_seq_num_add>
 801580c:	6823      	ldr	r3, [r4, #0]
 801580e:	81e0      	strh	r0, [r4, #14]
 8015810:	8028      	strh	r0, [r5, #0]
 8015812:	f8c8 3000 	str.w	r3, [r8]
 8015816:	6863      	ldr	r3, [r4, #4]
 8015818:	603b      	str	r3, [r7, #0]
 801581a:	7b23      	ldrb	r3, [r4, #12]
 801581c:	6063      	str	r3, [r4, #4]
 801581e:	4630      	mov	r0, r6
 8015820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015824 <on_full_output_buffer>:
 8015824:	b538      	push	{r3, r4, r5, lr}
 8015826:	6802      	ldr	r2, [r0, #0]
 8015828:	460c      	mov	r4, r1
 801582a:	6809      	ldr	r1, [r1, #0]
 801582c:	8923      	ldrh	r3, [r4, #8]
 801582e:	eba2 0c01 	sub.w	ip, r2, r1
 8015832:	6862      	ldr	r2, [r4, #4]
 8015834:	fbb2 f2f3 	udiv	r2, r2, r3
 8015838:	fbbc fcf2 	udiv	ip, ip, r2
 801583c:	f10c 0c01 	add.w	ip, ip, #1
 8015840:	fa1f fc8c 	uxth.w	ip, ip
 8015844:	fbbc fef3 	udiv	lr, ip, r3
 8015848:	fb03 c31e 	mls	r3, r3, lr, ip
 801584c:	b29b      	uxth	r3, r3
 801584e:	fb02 f303 	mul.w	r3, r2, r3
 8015852:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015856:	58ca      	ldr	r2, [r1, r3]
 8015858:	4463      	add	r3, ip
 801585a:	eba2 020c 	sub.w	r2, r2, ip
 801585e:	3308      	adds	r3, #8
 8015860:	4605      	mov	r5, r0
 8015862:	4419      	add	r1, r3
 8015864:	3a04      	subs	r2, #4
 8015866:	6903      	ldr	r3, [r0, #16]
 8015868:	f7f7 ffbc 	bl	800d7e4 <ucdr_init_buffer_origin>
 801586c:	4628      	mov	r0, r5
 801586e:	4903      	ldr	r1, [pc, #12]	@ (801587c <on_full_output_buffer+0x58>)
 8015870:	4622      	mov	r2, r4
 8015872:	f7f7 ff93 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 8015876:	2000      	movs	r0, #0
 8015878:	bd38      	pop	{r3, r4, r5, pc}
 801587a:	bf00      	nop
 801587c:	08015825 	.word	0x08015825

08015880 <uxr_init_output_reliable_stream>:
 8015880:	b410      	push	{r4}
 8015882:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015886:	8103      	strh	r3, [r0, #8]
 8015888:	e9c0 1200 	strd	r1, r2, [r0]
 801588c:	f880 c00c 	strb.w	ip, [r0, #12]
 8015890:	b1d3      	cbz	r3, 80158c8 <uxr_init_output_reliable_stream+0x48>
 8015892:	f8c1 c000 	str.w	ip, [r1]
 8015896:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801589a:	f1bc 0f01 	cmp.w	ip, #1
 801589e:	d913      	bls.n	80158c8 <uxr_init_output_reliable_stream+0x48>
 80158a0:	2301      	movs	r3, #1
 80158a2:	fbb3 f1fc 	udiv	r1, r3, ip
 80158a6:	fb0c 3111 	mls	r1, ip, r1, r3
 80158aa:	b289      	uxth	r1, r1
 80158ac:	6842      	ldr	r2, [r0, #4]
 80158ae:	6804      	ldr	r4, [r0, #0]
 80158b0:	fbb2 f2fc 	udiv	r2, r2, ip
 80158b4:	fb01 f202 	mul.w	r2, r1, r2
 80158b8:	7b01      	ldrb	r1, [r0, #12]
 80158ba:	50a1      	str	r1, [r4, r2]
 80158bc:	3301      	adds	r3, #1
 80158be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	459c      	cmp	ip, r3
 80158c6:	d8ec      	bhi.n	80158a2 <uxr_init_output_reliable_stream+0x22>
 80158c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80158cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158d0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80158d4:	4905      	ldr	r1, [pc, #20]	@ (80158ec <uxr_init_output_reliable_stream+0x6c>)
 80158d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158da:	f8c0 100e 	str.w	r1, [r0, #14]
 80158de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158e2:	2300      	movs	r3, #0
 80158e4:	8242      	strh	r2, [r0, #18]
 80158e6:	8403      	strh	r3, [r0, #32]
 80158e8:	4770      	bx	lr
 80158ea:	bf00      	nop
 80158ec:	ffff0000 	.word	0xffff0000

080158f0 <uxr_reset_output_reliable_stream>:
 80158f0:	8901      	ldrh	r1, [r0, #8]
 80158f2:	b1b1      	cbz	r1, 8015922 <uxr_reset_output_reliable_stream+0x32>
 80158f4:	f04f 0c00 	mov.w	ip, #0
 80158f8:	4663      	mov	r3, ip
 80158fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80158fe:	fb01 3312 	mls	r3, r1, r2, r3
 8015902:	b29b      	uxth	r3, r3
 8015904:	6842      	ldr	r2, [r0, #4]
 8015906:	fbb2 f2f1 	udiv	r2, r2, r1
 801590a:	6801      	ldr	r1, [r0, #0]
 801590c:	fb02 f303 	mul.w	r3, r2, r3
 8015910:	7b02      	ldrb	r2, [r0, #12]
 8015912:	50ca      	str	r2, [r1, r3]
 8015914:	f10c 0c01 	add.w	ip, ip, #1
 8015918:	8901      	ldrh	r1, [r0, #8]
 801591a:	fa1f f38c 	uxth.w	r3, ip
 801591e:	4299      	cmp	r1, r3
 8015920:	d8eb      	bhi.n	80158fa <uxr_reset_output_reliable_stream+0xa>
 8015922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015926:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801592a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801592e:	4904      	ldr	r1, [pc, #16]	@ (8015940 <uxr_reset_output_reliable_stream+0x50>)
 8015930:	f8c0 100e 	str.w	r1, [r0, #14]
 8015934:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015938:	2300      	movs	r3, #0
 801593a:	8242      	strh	r2, [r0, #18]
 801593c:	8403      	strh	r3, [r0, #32]
 801593e:	4770      	bx	lr
 8015940:	ffff0000 	.word	0xffff0000

08015944 <uxr_prepare_reliable_buffer_to_write>:
 8015944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015948:	4604      	mov	r4, r0
 801594a:	b091      	sub	sp, #68	@ 0x44
 801594c:	8900      	ldrh	r0, [r0, #8]
 801594e:	89e6      	ldrh	r6, [r4, #14]
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	9204      	str	r2, [sp, #16]
 8015954:	fbb6 f2f0 	udiv	r2, r6, r0
 8015958:	fb00 6212 	mls	r2, r0, r2, r6
 801595c:	b292      	uxth	r2, r2
 801595e:	6865      	ldr	r5, [r4, #4]
 8015960:	fbb5 f5f0 	udiv	r5, r5, r0
 8015964:	fb05 3202 	mla	r2, r5, r2, r3
 8015968:	3204      	adds	r2, #4
 801596a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801596e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015972:	9203      	str	r2, [sp, #12]
 8015974:	468b      	mov	fp, r1
 8015976:	1f2f      	subs	r7, r5, #4
 8015978:	2800      	cmp	r0, #0
 801597a:	f000 814c 	beq.w	8015c16 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801597e:	f04f 0c00 	mov.w	ip, #0
 8015982:	46e2      	mov	sl, ip
 8015984:	4661      	mov	r1, ip
 8015986:	fbb1 f2f0 	udiv	r2, r1, r0
 801598a:	fb00 1212 	mls	r2, r0, r2, r1
 801598e:	b292      	uxth	r2, r2
 8015990:	fb05 f202 	mul.w	r2, r5, r2
 8015994:	f10c 0c01 	add.w	ip, ip, #1
 8015998:	589a      	ldr	r2, [r3, r2]
 801599a:	454a      	cmp	r2, r9
 801599c:	bf08      	it	eq
 801599e:	f10a 0a01 	addeq.w	sl, sl, #1
 80159a2:	fa1f f18c 	uxth.w	r1, ip
 80159a6:	bf08      	it	eq
 80159a8:	fa1f fa8a 	uxtheq.w	sl, sl
 80159ac:	4281      	cmp	r1, r0
 80159ae:	d3ea      	bcc.n	8015986 <uxr_prepare_reliable_buffer_to_write+0x42>
 80159b0:	4640      	mov	r0, r8
 80159b2:	2104      	movs	r1, #4
 80159b4:	f8cd a014 	str.w	sl, [sp, #20]
 80159b8:	f7f7 ff20 	bl	800d7fc <ucdr_alignment>
 80159bc:	4480      	add	r8, r0
 80159be:	eb08 020b 	add.w	r2, r8, fp
 80159c2:	42ba      	cmp	r2, r7
 80159c4:	f240 80cd 	bls.w	8015b62 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80159c8:	7b22      	ldrb	r2, [r4, #12]
 80159ca:	445a      	add	r2, fp
 80159cc:	42ba      	cmp	r2, r7
 80159ce:	f240 80b5 	bls.w	8015b3c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80159d2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80159d6:	33fc      	adds	r3, #252	@ 0xfc
 80159d8:	b2ba      	uxth	r2, r7
 80159da:	4413      	add	r3, r2
 80159dc:	b29b      	uxth	r3, r3
 80159de:	fb0a f903 	mul.w	r9, sl, r3
 80159e2:	45d9      	cmp	r9, fp
 80159e4:	9305      	str	r3, [sp, #20]
 80159e6:	9306      	str	r3, [sp, #24]
 80159e8:	f0c0 80b7 	bcc.w	8015b5a <uxr_prepare_reliable_buffer_to_write+0x216>
 80159ec:	f108 0304 	add.w	r3, r8, #4
 80159f0:	42bb      	cmp	r3, r7
 80159f2:	f080 80db 	bcs.w	8015bac <uxr_prepare_reliable_buffer_to_write+0x268>
 80159f6:	f1a2 0904 	sub.w	r9, r2, #4
 80159fa:	eba9 0908 	sub.w	r9, r9, r8
 80159fe:	9b05      	ldr	r3, [sp, #20]
 8015a00:	fa1f f989 	uxth.w	r9, r9
 8015a04:	ebab 0b09 	sub.w	fp, fp, r9
 8015a08:	fbbb f2f3 	udiv	r2, fp, r3
 8015a0c:	fb03 b312 	mls	r3, r3, r2, fp
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	f000 80c8 	beq.w	8015ba6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015a16:	3201      	adds	r2, #1
 8015a18:	b292      	uxth	r2, r2
 8015a1a:	9306      	str	r3, [sp, #24]
 8015a1c:	4552      	cmp	r2, sl
 8015a1e:	f200 809c 	bhi.w	8015b5a <uxr_prepare_reliable_buffer_to_write+0x216>
 8015a22:	f10d 0b20 	add.w	fp, sp, #32
 8015a26:	2a00      	cmp	r2, #0
 8015a28:	d042      	beq.n	8015ab0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8015a2a:	f8cd 801c 	str.w	r8, [sp, #28]
 8015a2e:	f04f 0a00 	mov.w	sl, #0
 8015a32:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015a36:	9505      	str	r5, [sp, #20]
 8015a38:	f10d 0b20 	add.w	fp, sp, #32
 8015a3c:	4615      	mov	r5, r2
 8015a3e:	e000      	b.n	8015a42 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015a40:	46c1      	mov	r9, r8
 8015a42:	8920      	ldrh	r0, [r4, #8]
 8015a44:	fbb6 f2f0 	udiv	r2, r6, r0
 8015a48:	fb00 6112 	mls	r1, r0, r2, r6
 8015a4c:	b28a      	uxth	r2, r1
 8015a4e:	6863      	ldr	r3, [r4, #4]
 8015a50:	fbb3 f1f0 	udiv	r1, r3, r0
 8015a54:	6823      	ldr	r3, [r4, #0]
 8015a56:	fb02 f101 	mul.w	r1, r2, r1
 8015a5a:	3104      	adds	r1, #4
 8015a5c:	4419      	add	r1, r3
 8015a5e:	4658      	mov	r0, fp
 8015a60:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015a64:	9200      	str	r2, [sp, #0]
 8015a66:	2300      	movs	r3, #0
 8015a68:	463a      	mov	r2, r7
 8015a6a:	f7f7 feb1 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 8015a6e:	464a      	mov	r2, r9
 8015a70:	2300      	movs	r3, #0
 8015a72:	210d      	movs	r1, #13
 8015a74:	4658      	mov	r0, fp
 8015a76:	f7fa f921 	bl	800fcbc <uxr_buffer_submessage_header>
 8015a7a:	8921      	ldrh	r1, [r4, #8]
 8015a7c:	fbb6 f2f1 	udiv	r2, r6, r1
 8015a80:	fb01 6212 	mls	r2, r1, r2, r6
 8015a84:	b292      	uxth	r2, r2
 8015a86:	6863      	ldr	r3, [r4, #4]
 8015a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a8c:	fb02 f303 	mul.w	r3, r2, r3
 8015a90:	6822      	ldr	r2, [r4, #0]
 8015a92:	4630      	mov	r0, r6
 8015a94:	50d7      	str	r7, [r2, r3]
 8015a96:	2101      	movs	r1, #1
 8015a98:	f000 f9c4 	bl	8015e24 <uxr_seq_num_add>
 8015a9c:	f10a 0a01 	add.w	sl, sl, #1
 8015aa0:	fa1f f38a 	uxth.w	r3, sl
 8015aa4:	429d      	cmp	r5, r3
 8015aa6:	4606      	mov	r6, r0
 8015aa8:	d8ca      	bhi.n	8015a40 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015aaa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015aae:	9d05      	ldr	r5, [sp, #20]
 8015ab0:	8920      	ldrh	r0, [r4, #8]
 8015ab2:	fbb6 f3f0 	udiv	r3, r6, r0
 8015ab6:	fb00 6313 	mls	r3, r0, r3, r6
 8015aba:	b299      	uxth	r1, r3
 8015abc:	6863      	ldr	r3, [r4, #4]
 8015abe:	fbb3 f3f0 	udiv	r3, r3, r0
 8015ac2:	fb01 f303 	mul.w	r3, r1, r3
 8015ac6:	6821      	ldr	r1, [r4, #0]
 8015ac8:	3304      	adds	r3, #4
 8015aca:	4419      	add	r1, r3
 8015acc:	463a      	mov	r2, r7
 8015ace:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015ad2:	9000      	str	r0, [sp, #0]
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	4658      	mov	r0, fp
 8015ad8:	f7f7 fe7a 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 8015adc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015ae0:	4658      	mov	r0, fp
 8015ae2:	fa1f f289 	uxth.w	r2, r9
 8015ae6:	2302      	movs	r3, #2
 8015ae8:	210d      	movs	r1, #13
 8015aea:	f7fa f8e7 	bl	800fcbc <uxr_buffer_submessage_header>
 8015aee:	9b03      	ldr	r3, [sp, #12]
 8015af0:	8927      	ldrh	r7, [r4, #8]
 8015af2:	7b20      	ldrb	r0, [r4, #12]
 8015af4:	f108 0104 	add.w	r1, r8, #4
 8015af8:	440b      	add	r3, r1
 8015afa:	4619      	mov	r1, r3
 8015afc:	fbb6 f3f7 	udiv	r3, r6, r7
 8015b00:	fb07 6313 	mls	r3, r7, r3, r6
 8015b04:	f1a5 0208 	sub.w	r2, r5, #8
 8015b08:	b29d      	uxth	r5, r3
 8015b0a:	3004      	adds	r0, #4
 8015b0c:	6863      	ldr	r3, [r4, #4]
 8015b0e:	fbb3 f3f7 	udiv	r3, r3, r7
 8015b12:	fb05 f303 	mul.w	r3, r5, r3
 8015b16:	6825      	ldr	r5, [r4, #0]
 8015b18:	4448      	add	r0, r9
 8015b1a:	50e8      	str	r0, [r5, r3]
 8015b1c:	9d04      	ldr	r5, [sp, #16]
 8015b1e:	eba2 0208 	sub.w	r2, r2, r8
 8015b22:	4628      	mov	r0, r5
 8015b24:	f7f7 fe66 	bl	800d7f4 <ucdr_init_buffer>
 8015b28:	4628      	mov	r0, r5
 8015b2a:	493c      	ldr	r1, [pc, #240]	@ (8015c1c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015b2c:	4622      	mov	r2, r4
 8015b2e:	f7f7 fe35 	bl	800d79c <ucdr_set_on_full_buffer_callback>
 8015b32:	2001      	movs	r0, #1
 8015b34:	81e6      	strh	r6, [r4, #14]
 8015b36:	b011      	add	sp, #68	@ 0x44
 8015b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b3c:	2101      	movs	r1, #1
 8015b3e:	89e0      	ldrh	r0, [r4, #14]
 8015b40:	f000 f970 	bl	8015e24 <uxr_seq_num_add>
 8015b44:	8921      	ldrh	r1, [r4, #8]
 8015b46:	4605      	mov	r5, r0
 8015b48:	8a60      	ldrh	r0, [r4, #18]
 8015b4a:	f000 f96b 	bl	8015e24 <uxr_seq_num_add>
 8015b4e:	4601      	mov	r1, r0
 8015b50:	4628      	mov	r0, r5
 8015b52:	f000 f96f 	bl	8015e34 <uxr_seq_num_cmp>
 8015b56:	2800      	cmp	r0, #0
 8015b58:	dd42      	ble.n	8015be0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015b5a:	2000      	movs	r0, #0
 8015b5c:	b011      	add	sp, #68	@ 0x44
 8015b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b62:	8921      	ldrh	r1, [r4, #8]
 8015b64:	8a60      	ldrh	r0, [r4, #18]
 8015b66:	9205      	str	r2, [sp, #20]
 8015b68:	f000 f95c 	bl	8015e24 <uxr_seq_num_add>
 8015b6c:	4601      	mov	r1, r0
 8015b6e:	4630      	mov	r0, r6
 8015b70:	f000 f960 	bl	8015e34 <uxr_seq_num_cmp>
 8015b74:	2800      	cmp	r0, #0
 8015b76:	9a05      	ldr	r2, [sp, #20]
 8015b78:	dcef      	bgt.n	8015b5a <uxr_prepare_reliable_buffer_to_write+0x216>
 8015b7a:	8927      	ldrh	r7, [r4, #8]
 8015b7c:	fbb6 f3f7 	udiv	r3, r6, r7
 8015b80:	fb07 6313 	mls	r3, r7, r3, r6
 8015b84:	b29d      	uxth	r5, r3
 8015b86:	6863      	ldr	r3, [r4, #4]
 8015b88:	6824      	ldr	r4, [r4, #0]
 8015b8a:	fbb3 f3f7 	udiv	r3, r3, r7
 8015b8e:	fb05 f303 	mul.w	r3, r5, r3
 8015b92:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015b96:	50e2      	str	r2, [r4, r3]
 8015b98:	2300      	movs	r3, #0
 8015b9a:	f8cd 8000 	str.w	r8, [sp]
 8015b9e:	f7f7 fe17 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 8015ba2:	2001      	movs	r0, #1
 8015ba4:	e7da      	b.n	8015b5c <uxr_prepare_reliable_buffer_to_write+0x218>
 8015ba6:	b293      	uxth	r3, r2
 8015ba8:	461a      	mov	r2, r3
 8015baa:	e737      	b.n	8015a1c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015bac:	4630      	mov	r0, r6
 8015bae:	2101      	movs	r1, #1
 8015bb0:	9207      	str	r2, [sp, #28]
 8015bb2:	f000 f937 	bl	8015e24 <uxr_seq_num_add>
 8015bb6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015bba:	fbb0 f1fc 	udiv	r1, r0, ip
 8015bbe:	fb0c 0111 	mls	r1, ip, r1, r0
 8015bc2:	4606      	mov	r6, r0
 8015bc4:	b288      	uxth	r0, r1
 8015bc6:	6863      	ldr	r3, [r4, #4]
 8015bc8:	fbb3 f1fc 	udiv	r1, r3, ip
 8015bcc:	6823      	ldr	r3, [r4, #0]
 8015bce:	9a07      	ldr	r2, [sp, #28]
 8015bd0:	fb00 f101 	mul.w	r1, r0, r1
 8015bd4:	3104      	adds	r1, #4
 8015bd6:	440b      	add	r3, r1
 8015bd8:	9303      	str	r3, [sp, #12]
 8015bda:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8015bde:	e70a      	b.n	80159f6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015be0:	8921      	ldrh	r1, [r4, #8]
 8015be2:	fbb5 f3f1 	udiv	r3, r5, r1
 8015be6:	fb01 5313 	mls	r3, r1, r3, r5
 8015bea:	b29a      	uxth	r2, r3
 8015bec:	6863      	ldr	r3, [r4, #4]
 8015bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8015bf2:	6821      	ldr	r1, [r4, #0]
 8015bf4:	9804      	ldr	r0, [sp, #16]
 8015bf6:	fb02 f303 	mul.w	r3, r2, r3
 8015bfa:	3304      	adds	r3, #4
 8015bfc:	7b22      	ldrb	r2, [r4, #12]
 8015bfe:	4419      	add	r1, r3
 8015c00:	445a      	add	r2, fp
 8015c02:	f841 2c04 	str.w	r2, [r1, #-4]
 8015c06:	7b23      	ldrb	r3, [r4, #12]
 8015c08:	9300      	str	r3, [sp, #0]
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	f7f7 fde0 	bl	800d7d0 <ucdr_init_buffer_origin_offset>
 8015c10:	81e5      	strh	r5, [r4, #14]
 8015c12:	2001      	movs	r0, #1
 8015c14:	e7a2      	b.n	8015b5c <uxr_prepare_reliable_buffer_to_write+0x218>
 8015c16:	4682      	mov	sl, r0
 8015c18:	e6ca      	b.n	80159b0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015c1a:	bf00      	nop
 8015c1c:	08015825 	.word	0x08015825

08015c20 <uxr_prepare_next_reliable_buffer_to_send>:
 8015c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c22:	4604      	mov	r4, r0
 8015c24:	460f      	mov	r7, r1
 8015c26:	8a00      	ldrh	r0, [r0, #16]
 8015c28:	2101      	movs	r1, #1
 8015c2a:	4616      	mov	r6, r2
 8015c2c:	461d      	mov	r5, r3
 8015c2e:	f000 f8f9 	bl	8015e24 <uxr_seq_num_add>
 8015c32:	8028      	strh	r0, [r5, #0]
 8015c34:	8922      	ldrh	r2, [r4, #8]
 8015c36:	fbb0 f3f2 	udiv	r3, r0, r2
 8015c3a:	fb02 0c13 	mls	ip, r2, r3, r0
 8015c3e:	fa1f fc8c 	uxth.w	ip, ip
 8015c42:	6863      	ldr	r3, [r4, #4]
 8015c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c48:	fb0c fc03 	mul.w	ip, ip, r3
 8015c4c:	6823      	ldr	r3, [r4, #0]
 8015c4e:	89e1      	ldrh	r1, [r4, #14]
 8015c50:	f10c 0c04 	add.w	ip, ip, #4
 8015c54:	4463      	add	r3, ip
 8015c56:	603b      	str	r3, [r7, #0]
 8015c58:	6823      	ldr	r3, [r4, #0]
 8015c5a:	449c      	add	ip, r3
 8015c5c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015c60:	6033      	str	r3, [r6, #0]
 8015c62:	f000 f8e7 	bl	8015e34 <uxr_seq_num_cmp>
 8015c66:	2800      	cmp	r0, #0
 8015c68:	dd01      	ble.n	8015c6e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015c6a:	2000      	movs	r0, #0
 8015c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c6e:	7b23      	ldrb	r3, [r4, #12]
 8015c70:	6832      	ldr	r2, [r6, #0]
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d9f9      	bls.n	8015c6a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015c76:	8a61      	ldrh	r1, [r4, #18]
 8015c78:	8a20      	ldrh	r0, [r4, #16]
 8015c7a:	f000 f8d7 	bl	8015e2c <uxr_seq_num_sub>
 8015c7e:	8923      	ldrh	r3, [r4, #8]
 8015c80:	4283      	cmp	r3, r0
 8015c82:	d0f2      	beq.n	8015c6a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015c84:	8828      	ldrh	r0, [r5, #0]
 8015c86:	89e3      	ldrh	r3, [r4, #14]
 8015c88:	8220      	strh	r0, [r4, #16]
 8015c8a:	4298      	cmp	r0, r3
 8015c8c:	d001      	beq.n	8015c92 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015c8e:	2001      	movs	r0, #1
 8015c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c92:	2101      	movs	r1, #1
 8015c94:	f000 f8c6 	bl	8015e24 <uxr_seq_num_add>
 8015c98:	81e0      	strh	r0, [r4, #14]
 8015c9a:	2001      	movs	r0, #1
 8015c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c9e:	bf00      	nop

08015ca0 <uxr_update_output_stream_heartbeat_timestamp>:
 8015ca0:	b570      	push	{r4, r5, r6, lr}
 8015ca2:	8a01      	ldrh	r1, [r0, #16]
 8015ca4:	4604      	mov	r4, r0
 8015ca6:	8a40      	ldrh	r0, [r0, #18]
 8015ca8:	4615      	mov	r5, r2
 8015caa:	461e      	mov	r6, r3
 8015cac:	f000 f8c2 	bl	8015e34 <uxr_seq_num_cmp>
 8015cb0:	2800      	cmp	r0, #0
 8015cb2:	db07      	blt.n	8015cc4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015cb8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015cbc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	bd70      	pop	{r4, r5, r6, pc}
 8015cc4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015cc8:	b940      	cbnz	r0, 8015cdc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	f884 3020 	strb.w	r3, [r4, #32]
 8015cd0:	3564      	adds	r5, #100	@ 0x64
 8015cd2:	f146 0600 	adc.w	r6, r6, #0
 8015cd6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015cda:	bd70      	pop	{r4, r5, r6, pc}
 8015cdc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015ce0:	4295      	cmp	r5, r2
 8015ce2:	eb76 0303 	sbcs.w	r3, r6, r3
 8015ce6:	bfa5      	ittet	ge
 8015ce8:	3001      	addge	r0, #1
 8015cea:	f884 0020 	strbge.w	r0, [r4, #32]
 8015cee:	2000      	movlt	r0, #0
 8015cf0:	2001      	movge	r0, #1
 8015cf2:	e7ed      	b.n	8015cd0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015cf4 <uxr_begin_output_nack_buffer_it>:
 8015cf4:	8a40      	ldrh	r0, [r0, #18]
 8015cf6:	4770      	bx	lr

08015cf8 <uxr_next_reliable_nack_buffer_to_send>:
 8015cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cfc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015d00:	b082      	sub	sp, #8
 8015d02:	f1b8 0f00 	cmp.w	r8, #0
 8015d06:	d011      	beq.n	8015d2c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015d08:	4604      	mov	r4, r0
 8015d0a:	8818      	ldrh	r0, [r3, #0]
 8015d0c:	460e      	mov	r6, r1
 8015d0e:	4617      	mov	r7, r2
 8015d10:	461d      	mov	r5, r3
 8015d12:	2101      	movs	r1, #1
 8015d14:	f000 f886 	bl	8015e24 <uxr_seq_num_add>
 8015d18:	8028      	strh	r0, [r5, #0]
 8015d1a:	8a21      	ldrh	r1, [r4, #16]
 8015d1c:	f000 f88a 	bl	8015e34 <uxr_seq_num_cmp>
 8015d20:	2800      	cmp	r0, #0
 8015d22:	dd07      	ble.n	8015d34 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015d24:	f04f 0800 	mov.w	r8, #0
 8015d28:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015d2c:	4640      	mov	r0, r8
 8015d2e:	b002      	add	sp, #8
 8015d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d34:	8921      	ldrh	r1, [r4, #8]
 8015d36:	8828      	ldrh	r0, [r5, #0]
 8015d38:	6823      	ldr	r3, [r4, #0]
 8015d3a:	fbb0 f2f1 	udiv	r2, r0, r1
 8015d3e:	fb01 0c12 	mls	ip, r1, r2, r0
 8015d42:	fa1f f28c 	uxth.w	r2, ip
 8015d46:	9301      	str	r3, [sp, #4]
 8015d48:	6863      	ldr	r3, [r4, #4]
 8015d4a:	fbb3 fcf1 	udiv	ip, r3, r1
 8015d4e:	9b01      	ldr	r3, [sp, #4]
 8015d50:	fb02 fc0c 	mul.w	ip, r2, ip
 8015d54:	f10c 0c04 	add.w	ip, ip, #4
 8015d58:	4463      	add	r3, ip
 8015d5a:	6033      	str	r3, [r6, #0]
 8015d5c:	6823      	ldr	r3, [r4, #0]
 8015d5e:	4463      	add	r3, ip
 8015d60:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015d64:	603b      	str	r3, [r7, #0]
 8015d66:	7b22      	ldrb	r2, [r4, #12]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d0d2      	beq.n	8015d12 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015d6c:	4640      	mov	r0, r8
 8015d6e:	b002      	add	sp, #8
 8015d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d74 <uxr_process_acknack>:
 8015d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d76:	4604      	mov	r4, r0
 8015d78:	460e      	mov	r6, r1
 8015d7a:	4610      	mov	r0, r2
 8015d7c:	2101      	movs	r1, #1
 8015d7e:	f000 f855 	bl	8015e2c <uxr_seq_num_sub>
 8015d82:	8a61      	ldrh	r1, [r4, #18]
 8015d84:	f000 f852 	bl	8015e2c <uxr_seq_num_sub>
 8015d88:	b1c0      	cbz	r0, 8015dbc <uxr_process_acknack+0x48>
 8015d8a:	4605      	mov	r5, r0
 8015d8c:	2700      	movs	r7, #0
 8015d8e:	2101      	movs	r1, #1
 8015d90:	8a60      	ldrh	r0, [r4, #18]
 8015d92:	f000 f847 	bl	8015e24 <uxr_seq_num_add>
 8015d96:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015d9a:	fbb0 f1fc 	udiv	r1, r0, ip
 8015d9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015da2:	fb0c 0111 	mls	r1, ip, r1, r0
 8015da6:	b289      	uxth	r1, r1
 8015da8:	3701      	adds	r7, #1
 8015daa:	fbb3 f3fc 	udiv	r3, r3, ip
 8015dae:	fb01 f303 	mul.w	r3, r1, r3
 8015db2:	42bd      	cmp	r5, r7
 8015db4:	7b21      	ldrb	r1, [r4, #12]
 8015db6:	8260      	strh	r0, [r4, #18]
 8015db8:	50d1      	str	r1, [r2, r3]
 8015dba:	d1e8      	bne.n	8015d8e <uxr_process_acknack+0x1a>
 8015dbc:	3e00      	subs	r6, #0
 8015dbe:	f04f 0300 	mov.w	r3, #0
 8015dc2:	bf18      	it	ne
 8015dc4:	2601      	movne	r6, #1
 8015dc6:	f884 3020 	strb.w	r3, [r4, #32]
 8015dca:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015dd0 <uxr_is_output_up_to_date>:
 8015dd0:	8a01      	ldrh	r1, [r0, #16]
 8015dd2:	8a40      	ldrh	r0, [r0, #18]
 8015dd4:	b508      	push	{r3, lr}
 8015dd6:	f000 f82d 	bl	8015e34 <uxr_seq_num_cmp>
 8015dda:	fab0 f080 	clz	r0, r0
 8015dde:	0940      	lsrs	r0, r0, #5
 8015de0:	bd08      	pop	{r3, pc}
 8015de2:	bf00      	nop

08015de4 <get_available_free_slots>:
 8015de4:	8902      	ldrh	r2, [r0, #8]
 8015de6:	b1da      	cbz	r2, 8015e20 <get_available_free_slots+0x3c>
 8015de8:	b530      	push	{r4, r5, lr}
 8015dea:	2100      	movs	r1, #0
 8015dec:	6843      	ldr	r3, [r0, #4]
 8015dee:	6805      	ldr	r5, [r0, #0]
 8015df0:	7b04      	ldrb	r4, [r0, #12]
 8015df2:	fbb3 fef2 	udiv	lr, r3, r2
 8015df6:	4608      	mov	r0, r1
 8015df8:	460b      	mov	r3, r1
 8015dfa:	fbb3 fcf2 	udiv	ip, r3, r2
 8015dfe:	fb02 331c 	mls	r3, r2, ip, r3
 8015e02:	b29b      	uxth	r3, r3
 8015e04:	fb0e f303 	mul.w	r3, lr, r3
 8015e08:	3101      	adds	r1, #1
 8015e0a:	f855 c003 	ldr.w	ip, [r5, r3]
 8015e0e:	4564      	cmp	r4, ip
 8015e10:	bf08      	it	eq
 8015e12:	3001      	addeq	r0, #1
 8015e14:	b28b      	uxth	r3, r1
 8015e16:	bf08      	it	eq
 8015e18:	b280      	uxtheq	r0, r0
 8015e1a:	4293      	cmp	r3, r2
 8015e1c:	d3ed      	bcc.n	8015dfa <get_available_free_slots+0x16>
 8015e1e:	bd30      	pop	{r4, r5, pc}
 8015e20:	4610      	mov	r0, r2
 8015e22:	4770      	bx	lr

08015e24 <uxr_seq_num_add>:
 8015e24:	4408      	add	r0, r1
 8015e26:	b280      	uxth	r0, r0
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop

08015e2c <uxr_seq_num_sub>:
 8015e2c:	1a40      	subs	r0, r0, r1
 8015e2e:	b280      	uxth	r0, r0
 8015e30:	4770      	bx	lr
 8015e32:	bf00      	nop

08015e34 <uxr_seq_num_cmp>:
 8015e34:	4288      	cmp	r0, r1
 8015e36:	d011      	beq.n	8015e5c <uxr_seq_num_cmp+0x28>
 8015e38:	d309      	bcc.n	8015e4e <uxr_seq_num_cmp+0x1a>
 8015e3a:	4288      	cmp	r0, r1
 8015e3c:	d910      	bls.n	8015e60 <uxr_seq_num_cmp+0x2c>
 8015e3e:	1a40      	subs	r0, r0, r1
 8015e40:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015e44:	bfd4      	ite	le
 8015e46:	2001      	movle	r0, #1
 8015e48:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015e4c:	4770      	bx	lr
 8015e4e:	1a0b      	subs	r3, r1, r0
 8015e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015e54:	daf1      	bge.n	8015e3a <uxr_seq_num_cmp+0x6>
 8015e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e5a:	4770      	bx	lr
 8015e5c:	2000      	movs	r0, #0
 8015e5e:	4770      	bx	lr
 8015e60:	2001      	movs	r0, #1
 8015e62:	4770      	bx	lr

08015e64 <rcl_get_default_domain_id>:
 8015e64:	b530      	push	{r4, r5, lr}
 8015e66:	b083      	sub	sp, #12
 8015e68:	2300      	movs	r3, #0
 8015e6a:	9300      	str	r3, [sp, #0]
 8015e6c:	b1d0      	cbz	r0, 8015ea4 <rcl_get_default_domain_id+0x40>
 8015e6e:	4604      	mov	r4, r0
 8015e70:	4669      	mov	r1, sp
 8015e72:	4815      	ldr	r0, [pc, #84]	@ (8015ec8 <rcl_get_default_domain_id+0x64>)
 8015e74:	f7fd ff2c 	bl	8013cd0 <rcutils_get_env>
 8015e78:	4602      	mov	r2, r0
 8015e7a:	b110      	cbz	r0, 8015e82 <rcl_get_default_domain_id+0x1e>
 8015e7c:	2001      	movs	r0, #1
 8015e7e:	b003      	add	sp, #12
 8015e80:	bd30      	pop	{r4, r5, pc}
 8015e82:	9b00      	ldr	r3, [sp, #0]
 8015e84:	b18b      	cbz	r3, 8015eaa <rcl_get_default_domain_id+0x46>
 8015e86:	7818      	ldrb	r0, [r3, #0]
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d0f8      	beq.n	8015e7e <rcl_get_default_domain_id+0x1a>
 8015e8c:	a901      	add	r1, sp, #4
 8015e8e:	4618      	mov	r0, r3
 8015e90:	9201      	str	r2, [sp, #4]
 8015e92:	f000 fdc9 	bl	8016a28 <strtoul>
 8015e96:	4605      	mov	r5, r0
 8015e98:	b150      	cbz	r0, 8015eb0 <rcl_get_default_domain_id+0x4c>
 8015e9a:	1c43      	adds	r3, r0, #1
 8015e9c:	d00d      	beq.n	8015eba <rcl_get_default_domain_id+0x56>
 8015e9e:	6025      	str	r5, [r4, #0]
 8015ea0:	2000      	movs	r0, #0
 8015ea2:	e7ec      	b.n	8015e7e <rcl_get_default_domain_id+0x1a>
 8015ea4:	200b      	movs	r0, #11
 8015ea6:	b003      	add	sp, #12
 8015ea8:	bd30      	pop	{r4, r5, pc}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	b003      	add	sp, #12
 8015eae:	bd30      	pop	{r4, r5, pc}
 8015eb0:	9b01      	ldr	r3, [sp, #4]
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d0f2      	beq.n	8015e9e <rcl_get_default_domain_id+0x3a>
 8015eb8:	e7e0      	b.n	8015e7c <rcl_get_default_domain_id+0x18>
 8015eba:	f001 f801 	bl	8016ec0 <__errno>
 8015ebe:	6803      	ldr	r3, [r0, #0]
 8015ec0:	2b22      	cmp	r3, #34	@ 0x22
 8015ec2:	d1ec      	bne.n	8015e9e <rcl_get_default_domain_id+0x3a>
 8015ec4:	e7da      	b.n	8015e7c <rcl_get_default_domain_id+0x18>
 8015ec6:	bf00      	nop
 8015ec8:	08018964 	.word	0x08018964

08015ecc <rcl_expand_topic_name>:
 8015ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed0:	b08b      	sub	sp, #44	@ 0x2c
 8015ed2:	9306      	str	r3, [sp, #24]
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	f000 80ad 	beq.w	8016034 <rcl_expand_topic_name+0x168>
 8015eda:	460e      	mov	r6, r1
 8015edc:	2900      	cmp	r1, #0
 8015ede:	f000 80a9 	beq.w	8016034 <rcl_expand_topic_name+0x168>
 8015ee2:	4617      	mov	r7, r2
 8015ee4:	2a00      	cmp	r2, #0
 8015ee6:	f000 80a5 	beq.w	8016034 <rcl_expand_topic_name+0x168>
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	f000 80a2 	beq.w	8016034 <rcl_expand_topic_name+0x168>
 8015ef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	f000 809e 	beq.w	8016034 <rcl_expand_topic_name+0x168>
 8015ef8:	2200      	movs	r2, #0
 8015efa:	a909      	add	r1, sp, #36	@ 0x24
 8015efc:	4680      	mov	r8, r0
 8015efe:	f000 fa57 	bl	80163b0 <rcl_validate_topic_name>
 8015f02:	4604      	mov	r4, r0
 8015f04:	2800      	cmp	r0, #0
 8015f06:	f040 8096 	bne.w	8016036 <rcl_expand_topic_name+0x16a>
 8015f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	f040 809a 	bne.w	8016046 <rcl_expand_topic_name+0x17a>
 8015f12:	4602      	mov	r2, r0
 8015f14:	a909      	add	r1, sp, #36	@ 0x24
 8015f16:	4630      	mov	r0, r6
 8015f18:	f7fe fb04 	bl	8014524 <rmw_validate_node_name>
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	f040 808e 	bne.w	801603e <rcl_expand_topic_name+0x172>
 8015f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f24:	2a00      	cmp	r2, #0
 8015f26:	f040 8093 	bne.w	8016050 <rcl_expand_topic_name+0x184>
 8015f2a:	a909      	add	r1, sp, #36	@ 0x24
 8015f2c:	4638      	mov	r0, r7
 8015f2e:	f7fe fadb 	bl	80144e8 <rmw_validate_namespace>
 8015f32:	2800      	cmp	r0, #0
 8015f34:	f040 8083 	bne.w	801603e <rcl_expand_topic_name+0x172>
 8015f38:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015f3a:	2c00      	cmp	r4, #0
 8015f3c:	f040 80ed 	bne.w	801611a <rcl_expand_topic_name+0x24e>
 8015f40:	217b      	movs	r1, #123	@ 0x7b
 8015f42:	4640      	mov	r0, r8
 8015f44:	f000 ff30 	bl	8016da8 <strchr>
 8015f48:	f898 3000 	ldrb.w	r3, [r8]
 8015f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8015f4e:	4605      	mov	r5, r0
 8015f50:	f000 809e 	beq.w	8016090 <rcl_expand_topic_name+0x1c4>
 8015f54:	2b7e      	cmp	r3, #126	@ 0x7e
 8015f56:	f040 80a2 	bne.w	801609e <rcl_expand_topic_name+0x1d2>
 8015f5a:	4638      	mov	r0, r7
 8015f5c:	f7ea f96a 	bl	8000234 <strlen>
 8015f60:	4a82      	ldr	r2, [pc, #520]	@ (801616c <rcl_expand_topic_name+0x2a0>)
 8015f62:	4b83      	ldr	r3, [pc, #524]	@ (8016170 <rcl_expand_topic_name+0x2a4>)
 8015f64:	2801      	cmp	r0, #1
 8015f66:	bf18      	it	ne
 8015f68:	4613      	movne	r3, r2
 8015f6a:	9302      	str	r3, [sp, #8]
 8015f6c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015f6e:	9300      	str	r3, [sp, #0]
 8015f70:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015f74:	f108 0301 	add.w	r3, r8, #1
 8015f78:	9305      	str	r3, [sp, #20]
 8015f7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015f7e:	9301      	str	r3, [sp, #4]
 8015f80:	ab14      	add	r3, sp, #80	@ 0x50
 8015f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f84:	f7fd fecc 	bl	8013d20 <rcutils_format_string_limit>
 8015f88:	4682      	mov	sl, r0
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	f000 80c7 	beq.w	801611e <rcl_expand_topic_name+0x252>
 8015f90:	2d00      	cmp	r5, #0
 8015f92:	f000 80a2 	beq.w	80160da <rcl_expand_topic_name+0x20e>
 8015f96:	217b      	movs	r1, #123	@ 0x7b
 8015f98:	f000 ff06 	bl	8016da8 <strchr>
 8015f9c:	46d1      	mov	r9, sl
 8015f9e:	4605      	mov	r5, r0
 8015fa0:	9407      	str	r4, [sp, #28]
 8015fa2:	46d3      	mov	fp, sl
 8015fa4:	464c      	mov	r4, r9
 8015fa6:	2d00      	cmp	r5, #0
 8015fa8:	f000 80be 	beq.w	8016128 <rcl_expand_topic_name+0x25c>
 8015fac:	217d      	movs	r1, #125	@ 0x7d
 8015fae:	4620      	mov	r0, r4
 8015fb0:	f000 fefa 	bl	8016da8 <strchr>
 8015fb4:	eba0 0905 	sub.w	r9, r0, r5
 8015fb8:	f109 0a01 	add.w	sl, r9, #1
 8015fbc:	486d      	ldr	r0, [pc, #436]	@ (8016174 <rcl_expand_topic_name+0x2a8>)
 8015fbe:	4652      	mov	r2, sl
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	f000 fefe 	bl	8016dc2 <strncmp>
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d067      	beq.n	801609a <rcl_expand_topic_name+0x1ce>
 8015fca:	486b      	ldr	r0, [pc, #428]	@ (8016178 <rcl_expand_topic_name+0x2ac>)
 8015fcc:	4652      	mov	r2, sl
 8015fce:	4629      	mov	r1, r5
 8015fd0:	f000 fef7 	bl	8016dc2 <strncmp>
 8015fd4:	b130      	cbz	r0, 8015fe4 <rcl_expand_topic_name+0x118>
 8015fd6:	4869      	ldr	r0, [pc, #420]	@ (801617c <rcl_expand_topic_name+0x2b0>)
 8015fd8:	4652      	mov	r2, sl
 8015fda:	4629      	mov	r1, r5
 8015fdc:	f000 fef1 	bl	8016dc2 <strncmp>
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	d137      	bne.n	8016054 <rcl_expand_topic_name+0x188>
 8015fe4:	46b9      	mov	r9, r7
 8015fe6:	ab16      	add	r3, sp, #88	@ 0x58
 8015fe8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015fec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015ff0:	ab14      	add	r3, sp, #80	@ 0x50
 8015ff2:	4628      	mov	r0, r5
 8015ff4:	cb0c      	ldmia	r3, {r2, r3}
 8015ff6:	4651      	mov	r1, sl
 8015ff8:	f7fd ffce 	bl	8013f98 <rcutils_strndup>
 8015ffc:	4605      	mov	r5, r0
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f000 809c 	beq.w	801613c <rcl_expand_topic_name+0x270>
 8016004:	464a      	mov	r2, r9
 8016006:	4620      	mov	r0, r4
 8016008:	ab14      	add	r3, sp, #80	@ 0x50
 801600a:	4629      	mov	r1, r5
 801600c:	f7fd fec2 	bl	8013d94 <rcutils_repl_str>
 8016010:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016012:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016014:	4604      	mov	r4, r0
 8016016:	4628      	mov	r0, r5
 8016018:	4798      	blx	r3
 801601a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801601c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801601e:	4658      	mov	r0, fp
 8016020:	4798      	blx	r3
 8016022:	2c00      	cmp	r4, #0
 8016024:	d07b      	beq.n	801611e <rcl_expand_topic_name+0x252>
 8016026:	217b      	movs	r1, #123	@ 0x7b
 8016028:	4620      	mov	r0, r4
 801602a:	f000 febd 	bl	8016da8 <strchr>
 801602e:	46a3      	mov	fp, r4
 8016030:	4605      	mov	r5, r0
 8016032:	e7b8      	b.n	8015fa6 <rcl_expand_topic_name+0xda>
 8016034:	240b      	movs	r4, #11
 8016036:	4620      	mov	r0, r4
 8016038:	b00b      	add	sp, #44	@ 0x2c
 801603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801603e:	f7fb f875 	bl	801112c <rcl_convert_rmw_ret_to_rcl_ret>
 8016042:	4604      	mov	r4, r0
 8016044:	e7f7      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 8016046:	2467      	movs	r4, #103	@ 0x67
 8016048:	4620      	mov	r0, r4
 801604a:	b00b      	add	sp, #44	@ 0x2c
 801604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016050:	24c9      	movs	r4, #201	@ 0xc9
 8016052:	e7f0      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 8016054:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016058:	9806      	ldr	r0, [sp, #24]
 801605a:	1c69      	adds	r1, r5, #1
 801605c:	f7fe f8b6 	bl	80141cc <rcutils_string_map_getn>
 8016060:	4681      	mov	r9, r0
 8016062:	2800      	cmp	r0, #0
 8016064:	d1bf      	bne.n	8015fe6 <rcl_expand_topic_name+0x11a>
 8016066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016068:	aa16      	add	r2, sp, #88	@ 0x58
 801606a:	6018      	str	r0, [r3, #0]
 801606c:	ca07      	ldmia	r2, {r0, r1, r2}
 801606e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016072:	ab14      	add	r3, sp, #80	@ 0x50
 8016074:	cb0c      	ldmia	r3, {r2, r3}
 8016076:	4651      	mov	r1, sl
 8016078:	4628      	mov	r0, r5
 801607a:	f7fd ff8d 	bl	8013f98 <rcutils_strndup>
 801607e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016080:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016082:	4798      	blx	r3
 8016084:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016086:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016088:	4658      	mov	r0, fp
 801608a:	2469      	movs	r4, #105	@ 0x69
 801608c:	4798      	blx	r3
 801608e:	e7d2      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 8016090:	2800      	cmp	r0, #0
 8016092:	d05b      	beq.n	801614c <rcl_expand_topic_name+0x280>
 8016094:	46c1      	mov	r9, r8
 8016096:	46a2      	mov	sl, r4
 8016098:	e782      	b.n	8015fa0 <rcl_expand_topic_name+0xd4>
 801609a:	46b1      	mov	r9, r6
 801609c:	e7a3      	b.n	8015fe6 <rcl_expand_topic_name+0x11a>
 801609e:	2800      	cmp	r0, #0
 80160a0:	d1f8      	bne.n	8016094 <rcl_expand_topic_name+0x1c8>
 80160a2:	4638      	mov	r0, r7
 80160a4:	f7ea f8c6 	bl	8000234 <strlen>
 80160a8:	4a35      	ldr	r2, [pc, #212]	@ (8016180 <rcl_expand_topic_name+0x2b4>)
 80160aa:	4b36      	ldr	r3, [pc, #216]	@ (8016184 <rcl_expand_topic_name+0x2b8>)
 80160ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80160b0:	2801      	cmp	r0, #1
 80160b2:	bf18      	it	ne
 80160b4:	4613      	movne	r3, r2
 80160b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80160ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80160be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80160c0:	9703      	str	r7, [sp, #12]
 80160c2:	9200      	str	r2, [sp, #0]
 80160c4:	ab14      	add	r3, sp, #80	@ 0x50
 80160c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80160c8:	f7fd fe2a 	bl	8013d20 <rcutils_format_string_limit>
 80160cc:	4682      	mov	sl, r0
 80160ce:	4653      	mov	r3, sl
 80160d0:	b32b      	cbz	r3, 801611e <rcl_expand_topic_name+0x252>
 80160d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80160d4:	f8c3 a000 	str.w	sl, [r3]
 80160d8:	e7ad      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 80160da:	f89a 3000 	ldrb.w	r3, [sl]
 80160de:	2b2f      	cmp	r3, #47	@ 0x2f
 80160e0:	d0f7      	beq.n	80160d2 <rcl_expand_topic_name+0x206>
 80160e2:	4638      	mov	r0, r7
 80160e4:	f7ea f8a6 	bl	8000234 <strlen>
 80160e8:	4a25      	ldr	r2, [pc, #148]	@ (8016180 <rcl_expand_topic_name+0x2b4>)
 80160ea:	4b26      	ldr	r3, [pc, #152]	@ (8016184 <rcl_expand_topic_name+0x2b8>)
 80160ec:	f8cd a010 	str.w	sl, [sp, #16]
 80160f0:	2801      	cmp	r0, #1
 80160f2:	bf18      	it	ne
 80160f4:	4613      	movne	r3, r2
 80160f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80160fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80160fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016100:	9703      	str	r7, [sp, #12]
 8016102:	9200      	str	r2, [sp, #0]
 8016104:	ab14      	add	r3, sp, #80	@ 0x50
 8016106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016108:	f7fd fe0a 	bl	8013d20 <rcutils_format_string_limit>
 801610c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801610e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016110:	4605      	mov	r5, r0
 8016112:	4650      	mov	r0, sl
 8016114:	4798      	blx	r3
 8016116:	46aa      	mov	sl, r5
 8016118:	e7d9      	b.n	80160ce <rcl_expand_topic_name+0x202>
 801611a:	24ca      	movs	r4, #202	@ 0xca
 801611c:	e78b      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 801611e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016120:	2300      	movs	r3, #0
 8016122:	6013      	str	r3, [r2, #0]
 8016124:	240a      	movs	r4, #10
 8016126:	e786      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 8016128:	465b      	mov	r3, fp
 801612a:	9c07      	ldr	r4, [sp, #28]
 801612c:	46da      	mov	sl, fp
 801612e:	2b00      	cmp	r3, #0
 8016130:	d1d3      	bne.n	80160da <rcl_expand_topic_name+0x20e>
 8016132:	f898 3000 	ldrb.w	r3, [r8]
 8016136:	2b2f      	cmp	r3, #47	@ 0x2f
 8016138:	d0cb      	beq.n	80160d2 <rcl_expand_topic_name+0x206>
 801613a:	e7b2      	b.n	80160a2 <rcl_expand_topic_name+0x1d6>
 801613c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016140:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016142:	6015      	str	r5, [r2, #0]
 8016144:	4658      	mov	r0, fp
 8016146:	4798      	blx	r3
 8016148:	240a      	movs	r4, #10
 801614a:	e774      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 801614c:	ab17      	add	r3, sp, #92	@ 0x5c
 801614e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016152:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016156:	ab14      	add	r3, sp, #80	@ 0x50
 8016158:	cb0e      	ldmia	r3, {r1, r2, r3}
 801615a:	4640      	mov	r0, r8
 801615c:	f7fd fefa 	bl	8013f54 <rcutils_strdup>
 8016160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016162:	2800      	cmp	r0, #0
 8016164:	6018      	str	r0, [r3, #0]
 8016166:	bf08      	it	eq
 8016168:	240a      	moveq	r4, #10
 801616a:	e764      	b.n	8016036 <rcl_expand_topic_name+0x16a>
 801616c:	08018974 	.word	0x08018974
 8016170:	08017f8c 	.word	0x08017f8c
 8016174:	0801897c 	.word	0x0801897c
 8016178:	08018984 	.word	0x08018984
 801617c:	0801898c 	.word	0x0801898c
 8016180:	08017f54 	.word	0x08017f54
 8016184:	08017f9c 	.word	0x08017f9c

08016188 <rcl_get_default_topic_name_substitutions>:
 8016188:	2800      	cmp	r0, #0
 801618a:	bf0c      	ite	eq
 801618c:	200b      	moveq	r0, #11
 801618e:	2000      	movne	r0, #0
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop

08016194 <rcl_get_zero_initialized_guard_condition>:
 8016194:	4a03      	ldr	r2, [pc, #12]	@ (80161a4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016196:	4603      	mov	r3, r0
 8016198:	e892 0003 	ldmia.w	r2, {r0, r1}
 801619c:	e883 0003 	stmia.w	r3, {r0, r1}
 80161a0:	4618      	mov	r0, r3
 80161a2:	4770      	bx	lr
 80161a4:	08018998 	.word	0x08018998

080161a8 <rcl_guard_condition_init>:
 80161a8:	b082      	sub	sp, #8
 80161aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ac:	b087      	sub	sp, #28
 80161ae:	ac0c      	add	r4, sp, #48	@ 0x30
 80161b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80161b4:	46a6      	mov	lr, r4
 80161b6:	460d      	mov	r5, r1
 80161b8:	4604      	mov	r4, r0
 80161ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80161be:	f10d 0c04 	add.w	ip, sp, #4
 80161c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161c6:	f8de 3000 	ldr.w	r3, [lr]
 80161ca:	f8cc 3000 	str.w	r3, [ip]
 80161ce:	a801      	add	r0, sp, #4
 80161d0:	f7f5 f860 	bl	800b294 <rcutils_allocator_is_valid>
 80161d4:	b338      	cbz	r0, 8016226 <rcl_guard_condition_init+0x7e>
 80161d6:	b334      	cbz	r4, 8016226 <rcl_guard_condition_init+0x7e>
 80161d8:	6866      	ldr	r6, [r4, #4]
 80161da:	b9ee      	cbnz	r6, 8016218 <rcl_guard_condition_init+0x70>
 80161dc:	b31d      	cbz	r5, 8016226 <rcl_guard_condition_init+0x7e>
 80161de:	4628      	mov	r0, r5
 80161e0:	f7fa ffc2 	bl	8011168 <rcl_context_is_valid>
 80161e4:	b308      	cbz	r0, 801622a <rcl_guard_condition_init+0x82>
 80161e6:	9b01      	ldr	r3, [sp, #4]
 80161e8:	9905      	ldr	r1, [sp, #20]
 80161ea:	201c      	movs	r0, #28
 80161ec:	4798      	blx	r3
 80161ee:	4607      	mov	r7, r0
 80161f0:	6060      	str	r0, [r4, #4]
 80161f2:	b310      	cbz	r0, 801623a <rcl_guard_condition_init+0x92>
 80161f4:	6828      	ldr	r0, [r5, #0]
 80161f6:	3028      	adds	r0, #40	@ 0x28
 80161f8:	f000 f9ac 	bl	8016554 <rmw_create_guard_condition>
 80161fc:	6038      	str	r0, [r7, #0]
 80161fe:	6860      	ldr	r0, [r4, #4]
 8016200:	6805      	ldr	r5, [r0, #0]
 8016202:	b1a5      	cbz	r5, 801622e <rcl_guard_condition_init+0x86>
 8016204:	2301      	movs	r3, #1
 8016206:	ac01      	add	r4, sp, #4
 8016208:	7103      	strb	r3, [r0, #4]
 801620a:	f100 0708 	add.w	r7, r0, #8
 801620e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016210:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016212:	6823      	ldr	r3, [r4, #0]
 8016214:	603b      	str	r3, [r7, #0]
 8016216:	e000      	b.n	801621a <rcl_guard_condition_init+0x72>
 8016218:	2664      	movs	r6, #100	@ 0x64
 801621a:	4630      	mov	r0, r6
 801621c:	b007      	add	sp, #28
 801621e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016222:	b002      	add	sp, #8
 8016224:	4770      	bx	lr
 8016226:	260b      	movs	r6, #11
 8016228:	e7f7      	b.n	801621a <rcl_guard_condition_init+0x72>
 801622a:	2665      	movs	r6, #101	@ 0x65
 801622c:	e7f5      	b.n	801621a <rcl_guard_condition_init+0x72>
 801622e:	9b02      	ldr	r3, [sp, #8]
 8016230:	9905      	ldr	r1, [sp, #20]
 8016232:	4798      	blx	r3
 8016234:	2601      	movs	r6, #1
 8016236:	6065      	str	r5, [r4, #4]
 8016238:	e7ef      	b.n	801621a <rcl_guard_condition_init+0x72>
 801623a:	260a      	movs	r6, #10
 801623c:	e7ed      	b.n	801621a <rcl_guard_condition_init+0x72>
 801623e:	bf00      	nop

08016240 <rcl_guard_condition_init_from_rmw>:
 8016240:	b082      	sub	sp, #8
 8016242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016246:	b086      	sub	sp, #24
 8016248:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801624c:	4604      	mov	r4, r0
 801624e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016252:	460e      	mov	r6, r1
 8016254:	4617      	mov	r7, r2
 8016256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801625a:	f10d 0e04 	add.w	lr, sp, #4
 801625e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016262:	f8dc 3000 	ldr.w	r3, [ip]
 8016266:	f8ce 3000 	str.w	r3, [lr]
 801626a:	a801      	add	r0, sp, #4
 801626c:	f7f5 f812 	bl	800b294 <rcutils_allocator_is_valid>
 8016270:	b350      	cbz	r0, 80162c8 <rcl_guard_condition_init_from_rmw+0x88>
 8016272:	b34c      	cbz	r4, 80162c8 <rcl_guard_condition_init_from_rmw+0x88>
 8016274:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016278:	f1b8 0f00 	cmp.w	r8, #0
 801627c:	d11e      	bne.n	80162bc <rcl_guard_condition_init_from_rmw+0x7c>
 801627e:	b31f      	cbz	r7, 80162c8 <rcl_guard_condition_init_from_rmw+0x88>
 8016280:	4638      	mov	r0, r7
 8016282:	f7fa ff71 	bl	8011168 <rcl_context_is_valid>
 8016286:	b328      	cbz	r0, 80162d4 <rcl_guard_condition_init_from_rmw+0x94>
 8016288:	9b01      	ldr	r3, [sp, #4]
 801628a:	9905      	ldr	r1, [sp, #20]
 801628c:	201c      	movs	r0, #28
 801628e:	4798      	blx	r3
 8016290:	4605      	mov	r5, r0
 8016292:	6060      	str	r0, [r4, #4]
 8016294:	b358      	cbz	r0, 80162ee <rcl_guard_condition_init_from_rmw+0xae>
 8016296:	b1fe      	cbz	r6, 80162d8 <rcl_guard_condition_init_from_rmw+0x98>
 8016298:	6006      	str	r6, [r0, #0]
 801629a:	f880 8004 	strb.w	r8, [r0, #4]
 801629e:	ac01      	add	r4, sp, #4
 80162a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162a2:	f105 0c08 	add.w	ip, r5, #8
 80162a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	f8cc 3000 	str.w	r3, [ip]
 80162b0:	2000      	movs	r0, #0
 80162b2:	b006      	add	sp, #24
 80162b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162b8:	b002      	add	sp, #8
 80162ba:	4770      	bx	lr
 80162bc:	2064      	movs	r0, #100	@ 0x64
 80162be:	b006      	add	sp, #24
 80162c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162c4:	b002      	add	sp, #8
 80162c6:	4770      	bx	lr
 80162c8:	200b      	movs	r0, #11
 80162ca:	b006      	add	sp, #24
 80162cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162d0:	b002      	add	sp, #8
 80162d2:	4770      	bx	lr
 80162d4:	2065      	movs	r0, #101	@ 0x65
 80162d6:	e7f2      	b.n	80162be <rcl_guard_condition_init_from_rmw+0x7e>
 80162d8:	6838      	ldr	r0, [r7, #0]
 80162da:	3028      	adds	r0, #40	@ 0x28
 80162dc:	f000 f93a 	bl	8016554 <rmw_create_guard_condition>
 80162e0:	6028      	str	r0, [r5, #0]
 80162e2:	6865      	ldr	r5, [r4, #4]
 80162e4:	682e      	ldr	r6, [r5, #0]
 80162e6:	b126      	cbz	r6, 80162f2 <rcl_guard_condition_init_from_rmw+0xb2>
 80162e8:	2301      	movs	r3, #1
 80162ea:	712b      	strb	r3, [r5, #4]
 80162ec:	e7d7      	b.n	801629e <rcl_guard_condition_init_from_rmw+0x5e>
 80162ee:	200a      	movs	r0, #10
 80162f0:	e7e5      	b.n	80162be <rcl_guard_condition_init_from_rmw+0x7e>
 80162f2:	4628      	mov	r0, r5
 80162f4:	9b02      	ldr	r3, [sp, #8]
 80162f6:	9905      	ldr	r1, [sp, #20]
 80162f8:	4798      	blx	r3
 80162fa:	6066      	str	r6, [r4, #4]
 80162fc:	2001      	movs	r0, #1
 80162fe:	e7de      	b.n	80162be <rcl_guard_condition_init_from_rmw+0x7e>

08016300 <rcl_guard_condition_fini>:
 8016300:	b570      	push	{r4, r5, r6, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	b1f0      	cbz	r0, 8016344 <rcl_guard_condition_fini+0x44>
 8016306:	6843      	ldr	r3, [r0, #4]
 8016308:	4604      	mov	r4, r0
 801630a:	b163      	cbz	r3, 8016326 <rcl_guard_condition_fini+0x26>
 801630c:	6818      	ldr	r0, [r3, #0]
 801630e:	68de      	ldr	r6, [r3, #12]
 8016310:	6999      	ldr	r1, [r3, #24]
 8016312:	b160      	cbz	r0, 801632e <rcl_guard_condition_fini+0x2e>
 8016314:	791d      	ldrb	r5, [r3, #4]
 8016316:	b965      	cbnz	r5, 8016332 <rcl_guard_condition_fini+0x32>
 8016318:	4618      	mov	r0, r3
 801631a:	47b0      	blx	r6
 801631c:	2300      	movs	r3, #0
 801631e:	4628      	mov	r0, r5
 8016320:	6063      	str	r3, [r4, #4]
 8016322:	b002      	add	sp, #8
 8016324:	bd70      	pop	{r4, r5, r6, pc}
 8016326:	461d      	mov	r5, r3
 8016328:	4628      	mov	r0, r5
 801632a:	b002      	add	sp, #8
 801632c:	bd70      	pop	{r4, r5, r6, pc}
 801632e:	4605      	mov	r5, r0
 8016330:	e7f2      	b.n	8016318 <rcl_guard_condition_fini+0x18>
 8016332:	9101      	str	r1, [sp, #4]
 8016334:	f000 f922 	bl	801657c <rmw_destroy_guard_condition>
 8016338:	1e05      	subs	r5, r0, #0
 801633a:	6863      	ldr	r3, [r4, #4]
 801633c:	9901      	ldr	r1, [sp, #4]
 801633e:	bf18      	it	ne
 8016340:	2501      	movne	r5, #1
 8016342:	e7e9      	b.n	8016318 <rcl_guard_condition_fini+0x18>
 8016344:	250b      	movs	r5, #11
 8016346:	4628      	mov	r0, r5
 8016348:	b002      	add	sp, #8
 801634a:	bd70      	pop	{r4, r5, r6, pc}

0801634c <rcl_guard_condition_get_default_options>:
 801634c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801634e:	b087      	sub	sp, #28
 8016350:	4606      	mov	r6, r0
 8016352:	4668      	mov	r0, sp
 8016354:	f7f4 ff90 	bl	800b278 <rcutils_get_default_allocator>
 8016358:	4b09      	ldr	r3, [pc, #36]	@ (8016380 <rcl_guard_condition_get_default_options+0x34>)
 801635a:	46ee      	mov	lr, sp
 801635c:	469c      	mov	ip, r3
 801635e:	461d      	mov	r5, r3
 8016360:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016364:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801636a:	4634      	mov	r4, r6
 801636c:	f8de 7000 	ldr.w	r7, [lr]
 8016370:	f8cc 7000 	str.w	r7, [ip]
 8016374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016376:	4630      	mov	r0, r6
 8016378:	6027      	str	r7, [r4, #0]
 801637a:	b007      	add	sp, #28
 801637c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801637e:	bf00      	nop
 8016380:	2000cb48 	.word	0x2000cb48

08016384 <rcl_trigger_guard_condition>:
 8016384:	b148      	cbz	r0, 801639a <rcl_trigger_guard_condition+0x16>
 8016386:	b508      	push	{r3, lr}
 8016388:	6843      	ldr	r3, [r0, #4]
 801638a:	b143      	cbz	r3, 801639e <rcl_trigger_guard_condition+0x1a>
 801638c:	6818      	ldr	r0, [r3, #0]
 801638e:	f000 f909 	bl	80165a4 <rmw_trigger_guard_condition>
 8016392:	3800      	subs	r0, #0
 8016394:	bf18      	it	ne
 8016396:	2001      	movne	r0, #1
 8016398:	bd08      	pop	{r3, pc}
 801639a:	200b      	movs	r0, #11
 801639c:	4770      	bx	lr
 801639e:	200b      	movs	r0, #11
 80163a0:	bd08      	pop	{r3, pc}
 80163a2:	bf00      	nop

080163a4 <rcl_guard_condition_get_rmw_handle>:
 80163a4:	b110      	cbz	r0, 80163ac <rcl_guard_condition_get_rmw_handle+0x8>
 80163a6:	6840      	ldr	r0, [r0, #4]
 80163a8:	b100      	cbz	r0, 80163ac <rcl_guard_condition_get_rmw_handle+0x8>
 80163aa:	6800      	ldr	r0, [r0, #0]
 80163ac:	4770      	bx	lr
 80163ae:	bf00      	nop

080163b0 <rcl_validate_topic_name>:
 80163b0:	2800      	cmp	r0, #0
 80163b2:	d07a      	beq.n	80164aa <rcl_validate_topic_name+0xfa>
 80163b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163b8:	460e      	mov	r6, r1
 80163ba:	2900      	cmp	r1, #0
 80163bc:	d07c      	beq.n	80164b8 <rcl_validate_topic_name+0x108>
 80163be:	4617      	mov	r7, r2
 80163c0:	4605      	mov	r5, r0
 80163c2:	f7e9 ff37 	bl	8000234 <strlen>
 80163c6:	b1b0      	cbz	r0, 80163f6 <rcl_validate_topic_name+0x46>
 80163c8:	f895 9000 	ldrb.w	r9, [r5]
 80163cc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016550 <rcl_validate_topic_name+0x1a0>
 80163d0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80163d4:	f013 0304 	ands.w	r3, r3, #4
 80163d8:	d169      	bne.n	80164ae <rcl_validate_topic_name+0xfe>
 80163da:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80163de:	f815 2008 	ldrb.w	r2, [r5, r8]
 80163e2:	2a2f      	cmp	r2, #47	@ 0x2f
 80163e4:	d10e      	bne.n	8016404 <rcl_validate_topic_name+0x54>
 80163e6:	2202      	movs	r2, #2
 80163e8:	6032      	str	r2, [r6, #0]
 80163ea:	b36f      	cbz	r7, 8016448 <rcl_validate_topic_name+0x98>
 80163ec:	f8c7 8000 	str.w	r8, [r7]
 80163f0:	4618      	mov	r0, r3
 80163f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f6:	2301      	movs	r3, #1
 80163f8:	6033      	str	r3, [r6, #0]
 80163fa:	b32f      	cbz	r7, 8016448 <rcl_validate_topic_name+0x98>
 80163fc:	2000      	movs	r0, #0
 80163fe:	6038      	str	r0, [r7, #0]
 8016400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016404:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016408:	461c      	mov	r4, r3
 801640a:	4619      	mov	r1, r3
 801640c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016410:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016414:	f1be 0f09 	cmp.w	lr, #9
 8016418:	d919      	bls.n	801644e <rcl_validate_topic_name+0x9e>
 801641a:	f022 0e20 	bic.w	lr, r2, #32
 801641e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016422:	f1be 0f19 	cmp.w	lr, #25
 8016426:	d912      	bls.n	801644e <rcl_validate_topic_name+0x9e>
 8016428:	2a5f      	cmp	r2, #95	@ 0x5f
 801642a:	d019      	beq.n	8016460 <rcl_validate_topic_name+0xb0>
 801642c:	2a2f      	cmp	r2, #47	@ 0x2f
 801642e:	d051      	beq.n	80164d4 <rcl_validate_topic_name+0x124>
 8016430:	2a7e      	cmp	r2, #126	@ 0x7e
 8016432:	d048      	beq.n	80164c6 <rcl_validate_topic_name+0x116>
 8016434:	2a7b      	cmp	r2, #123	@ 0x7b
 8016436:	d054      	beq.n	80164e2 <rcl_validate_topic_name+0x132>
 8016438:	2a7d      	cmp	r2, #125	@ 0x7d
 801643a:	d161      	bne.n	8016500 <rcl_validate_topic_name+0x150>
 801643c:	2c00      	cmp	r4, #0
 801643e:	d155      	bne.n	80164ec <rcl_validate_topic_name+0x13c>
 8016440:	2305      	movs	r3, #5
 8016442:	6033      	str	r3, [r6, #0]
 8016444:	b107      	cbz	r7, 8016448 <rcl_validate_topic_name+0x98>
 8016446:	6039      	str	r1, [r7, #0]
 8016448:	2000      	movs	r0, #0
 801644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801644e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016452:	0752      	lsls	r2, r2, #29
 8016454:	d504      	bpl.n	8016460 <rcl_validate_topic_name+0xb0>
 8016456:	b11c      	cbz	r4, 8016460 <rcl_validate_topic_name+0xb0>
 8016458:	b111      	cbz	r1, 8016460 <rcl_validate_topic_name+0xb0>
 801645a:	1e4a      	subs	r2, r1, #1
 801645c:	429a      	cmp	r2, r3
 801645e:	d02d      	beq.n	80164bc <rcl_validate_topic_name+0x10c>
 8016460:	3101      	adds	r1, #1
 8016462:	4288      	cmp	r0, r1
 8016464:	d1d2      	bne.n	801640c <rcl_validate_topic_name+0x5c>
 8016466:	2c00      	cmp	r4, #0
 8016468:	d145      	bne.n	80164f6 <rcl_validate_topic_name+0x146>
 801646a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801646e:	d04f      	beq.n	8016510 <rcl_validate_topic_name+0x160>
 8016470:	4620      	mov	r0, r4
 8016472:	2301      	movs	r3, #1
 8016474:	e006      	b.n	8016484 <rcl_validate_topic_name+0xd4>
 8016476:	428b      	cmp	r3, r1
 8016478:	f105 0501 	add.w	r5, r5, #1
 801647c:	f103 0201 	add.w	r2, r3, #1
 8016480:	d236      	bcs.n	80164f0 <rcl_validate_topic_name+0x140>
 8016482:	4613      	mov	r3, r2
 8016484:	4580      	cmp	r8, r0
 8016486:	f100 0001 	add.w	r0, r0, #1
 801648a:	d0f4      	beq.n	8016476 <rcl_validate_topic_name+0xc6>
 801648c:	782a      	ldrb	r2, [r5, #0]
 801648e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016490:	d1f1      	bne.n	8016476 <rcl_validate_topic_name+0xc6>
 8016492:	786a      	ldrb	r2, [r5, #1]
 8016494:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016498:	0754      	lsls	r4, r2, #29
 801649a:	d5ec      	bpl.n	8016476 <rcl_validate_topic_name+0xc6>
 801649c:	2204      	movs	r2, #4
 801649e:	6032      	str	r2, [r6, #0]
 80164a0:	2f00      	cmp	r7, #0
 80164a2:	d0d1      	beq.n	8016448 <rcl_validate_topic_name+0x98>
 80164a4:	603b      	str	r3, [r7, #0]
 80164a6:	2000      	movs	r0, #0
 80164a8:	e7aa      	b.n	8016400 <rcl_validate_topic_name+0x50>
 80164aa:	200b      	movs	r0, #11
 80164ac:	4770      	bx	lr
 80164ae:	2304      	movs	r3, #4
 80164b0:	6033      	str	r3, [r6, #0]
 80164b2:	2f00      	cmp	r7, #0
 80164b4:	d1a2      	bne.n	80163fc <rcl_validate_topic_name+0x4c>
 80164b6:	e7c7      	b.n	8016448 <rcl_validate_topic_name+0x98>
 80164b8:	200b      	movs	r0, #11
 80164ba:	e7a1      	b.n	8016400 <rcl_validate_topic_name+0x50>
 80164bc:	2309      	movs	r3, #9
 80164be:	6033      	str	r3, [r6, #0]
 80164c0:	2f00      	cmp	r7, #0
 80164c2:	d1c0      	bne.n	8016446 <rcl_validate_topic_name+0x96>
 80164c4:	e7c0      	b.n	8016448 <rcl_validate_topic_name+0x98>
 80164c6:	2900      	cmp	r1, #0
 80164c8:	d0ca      	beq.n	8016460 <rcl_validate_topic_name+0xb0>
 80164ca:	2306      	movs	r3, #6
 80164cc:	6033      	str	r3, [r6, #0]
 80164ce:	2f00      	cmp	r7, #0
 80164d0:	d1b9      	bne.n	8016446 <rcl_validate_topic_name+0x96>
 80164d2:	e7b9      	b.n	8016448 <rcl_validate_topic_name+0x98>
 80164d4:	2c00      	cmp	r4, #0
 80164d6:	d0c3      	beq.n	8016460 <rcl_validate_topic_name+0xb0>
 80164d8:	2308      	movs	r3, #8
 80164da:	6033      	str	r3, [r6, #0]
 80164dc:	2f00      	cmp	r7, #0
 80164de:	d1b2      	bne.n	8016446 <rcl_validate_topic_name+0x96>
 80164e0:	e7b2      	b.n	8016448 <rcl_validate_topic_name+0x98>
 80164e2:	2c00      	cmp	r4, #0
 80164e4:	d1f8      	bne.n	80164d8 <rcl_validate_topic_name+0x128>
 80164e6:	460b      	mov	r3, r1
 80164e8:	2401      	movs	r4, #1
 80164ea:	e7b9      	b.n	8016460 <rcl_validate_topic_name+0xb0>
 80164ec:	2400      	movs	r4, #0
 80164ee:	e7b7      	b.n	8016460 <rcl_validate_topic_name+0xb0>
 80164f0:	2000      	movs	r0, #0
 80164f2:	6030      	str	r0, [r6, #0]
 80164f4:	e784      	b.n	8016400 <rcl_validate_topic_name+0x50>
 80164f6:	2205      	movs	r2, #5
 80164f8:	6032      	str	r2, [r6, #0]
 80164fa:	2f00      	cmp	r7, #0
 80164fc:	d1d2      	bne.n	80164a4 <rcl_validate_topic_name+0xf4>
 80164fe:	e7a3      	b.n	8016448 <rcl_validate_topic_name+0x98>
 8016500:	2c00      	cmp	r4, #0
 8016502:	bf14      	ite	ne
 8016504:	2308      	movne	r3, #8
 8016506:	2303      	moveq	r3, #3
 8016508:	6033      	str	r3, [r6, #0]
 801650a:	2f00      	cmp	r7, #0
 801650c:	d19b      	bne.n	8016446 <rcl_validate_topic_name+0x96>
 801650e:	e79b      	b.n	8016448 <rcl_validate_topic_name+0x98>
 8016510:	2301      	movs	r3, #1
 8016512:	e00a      	b.n	801652a <rcl_validate_topic_name+0x17a>
 8016514:	2c01      	cmp	r4, #1
 8016516:	d013      	beq.n	8016540 <rcl_validate_topic_name+0x190>
 8016518:	4299      	cmp	r1, r3
 801651a:	f104 0401 	add.w	r4, r4, #1
 801651e:	f105 0501 	add.w	r5, r5, #1
 8016522:	f103 0201 	add.w	r2, r3, #1
 8016526:	d9e3      	bls.n	80164f0 <rcl_validate_topic_name+0x140>
 8016528:	4613      	mov	r3, r2
 801652a:	45a0      	cmp	r8, r4
 801652c:	d0f4      	beq.n	8016518 <rcl_validate_topic_name+0x168>
 801652e:	782a      	ldrb	r2, [r5, #0]
 8016530:	2a2f      	cmp	r2, #47	@ 0x2f
 8016532:	d1ef      	bne.n	8016514 <rcl_validate_topic_name+0x164>
 8016534:	786a      	ldrb	r2, [r5, #1]
 8016536:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801653a:	0752      	lsls	r2, r2, #29
 801653c:	d5ec      	bpl.n	8016518 <rcl_validate_topic_name+0x168>
 801653e:	e7ad      	b.n	801649c <rcl_validate_topic_name+0xec>
 8016540:	2307      	movs	r3, #7
 8016542:	6033      	str	r3, [r6, #0]
 8016544:	2f00      	cmp	r7, #0
 8016546:	f43f af7f 	beq.w	8016448 <rcl_validate_topic_name+0x98>
 801654a:	603c      	str	r4, [r7, #0]
 801654c:	2000      	movs	r0, #0
 801654e:	e757      	b.n	8016400 <rcl_validate_topic_name+0x50>
 8016550:	08018a10 	.word	0x08018a10

08016554 <rmw_create_guard_condition>:
 8016554:	b538      	push	{r3, r4, r5, lr}
 8016556:	4605      	mov	r5, r0
 8016558:	4807      	ldr	r0, [pc, #28]	@ (8016578 <rmw_create_guard_condition+0x24>)
 801655a:	f7fe f929 	bl	80147b0 <get_memory>
 801655e:	b148      	cbz	r0, 8016574 <rmw_create_guard_condition+0x20>
 8016560:	6884      	ldr	r4, [r0, #8]
 8016562:	2300      	movs	r3, #0
 8016564:	7423      	strb	r3, [r4, #16]
 8016566:	61e5      	str	r5, [r4, #28]
 8016568:	f7fe f98a 	bl	8014880 <rmw_get_implementation_identifier>
 801656c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016570:	f104 0014 	add.w	r0, r4, #20
 8016574:	bd38      	pop	{r3, r4, r5, pc}
 8016576:	bf00      	nop
 8016578:	2000c9e4 	.word	0x2000c9e4

0801657c <rmw_destroy_guard_condition>:
 801657c:	b508      	push	{r3, lr}
 801657e:	4b08      	ldr	r3, [pc, #32]	@ (80165a0 <rmw_destroy_guard_condition+0x24>)
 8016580:	6819      	ldr	r1, [r3, #0]
 8016582:	b911      	cbnz	r1, 801658a <rmw_destroy_guard_condition+0xe>
 8016584:	e00a      	b.n	801659c <rmw_destroy_guard_condition+0x20>
 8016586:	6849      	ldr	r1, [r1, #4]
 8016588:	b141      	cbz	r1, 801659c <rmw_destroy_guard_condition+0x20>
 801658a:	688b      	ldr	r3, [r1, #8]
 801658c:	3314      	adds	r3, #20
 801658e:	4298      	cmp	r0, r3
 8016590:	d1f9      	bne.n	8016586 <rmw_destroy_guard_condition+0xa>
 8016592:	4803      	ldr	r0, [pc, #12]	@ (80165a0 <rmw_destroy_guard_condition+0x24>)
 8016594:	f7fe f91c 	bl	80147d0 <put_memory>
 8016598:	2000      	movs	r0, #0
 801659a:	bd08      	pop	{r3, pc}
 801659c:	2001      	movs	r0, #1
 801659e:	bd08      	pop	{r3, pc}
 80165a0:	2000c9e4 	.word	0x2000c9e4

080165a4 <rmw_trigger_guard_condition>:
 80165a4:	b160      	cbz	r0, 80165c0 <rmw_trigger_guard_condition+0x1c>
 80165a6:	b510      	push	{r4, lr}
 80165a8:	4604      	mov	r4, r0
 80165aa:	6800      	ldr	r0, [r0, #0]
 80165ac:	f7f6 f87e 	bl	800c6ac <is_uxrce_rmw_identifier_valid>
 80165b0:	b908      	cbnz	r0, 80165b6 <rmw_trigger_guard_condition+0x12>
 80165b2:	2001      	movs	r0, #1
 80165b4:	bd10      	pop	{r4, pc}
 80165b6:	6863      	ldr	r3, [r4, #4]
 80165b8:	2201      	movs	r2, #1
 80165ba:	741a      	strb	r2, [r3, #16]
 80165bc:	2000      	movs	r0, #0
 80165be:	bd10      	pop	{r4, pc}
 80165c0:	2001      	movs	r0, #1
 80165c2:	4770      	bx	lr

080165c4 <calloc>:
 80165c4:	4b02      	ldr	r3, [pc, #8]	@ (80165d0 <calloc+0xc>)
 80165c6:	460a      	mov	r2, r1
 80165c8:	4601      	mov	r1, r0
 80165ca:	6818      	ldr	r0, [r3, #0]
 80165cc:	f000 b802 	b.w	80165d4 <_calloc_r>
 80165d0:	20000148 	.word	0x20000148

080165d4 <_calloc_r>:
 80165d4:	b570      	push	{r4, r5, r6, lr}
 80165d6:	fba1 5402 	umull	r5, r4, r1, r2
 80165da:	b93c      	cbnz	r4, 80165ec <_calloc_r+0x18>
 80165dc:	4629      	mov	r1, r5
 80165de:	f000 f887 	bl	80166f0 <_malloc_r>
 80165e2:	4606      	mov	r6, r0
 80165e4:	b928      	cbnz	r0, 80165f2 <_calloc_r+0x1e>
 80165e6:	2600      	movs	r6, #0
 80165e8:	4630      	mov	r0, r6
 80165ea:	bd70      	pop	{r4, r5, r6, pc}
 80165ec:	220c      	movs	r2, #12
 80165ee:	6002      	str	r2, [r0, #0]
 80165f0:	e7f9      	b.n	80165e6 <_calloc_r+0x12>
 80165f2:	462a      	mov	r2, r5
 80165f4:	4621      	mov	r1, r4
 80165f6:	f000 fbcf 	bl	8016d98 <memset>
 80165fa:	e7f5      	b.n	80165e8 <_calloc_r+0x14>

080165fc <getenv>:
 80165fc:	b507      	push	{r0, r1, r2, lr}
 80165fe:	4b04      	ldr	r3, [pc, #16]	@ (8016610 <getenv+0x14>)
 8016600:	4601      	mov	r1, r0
 8016602:	aa01      	add	r2, sp, #4
 8016604:	6818      	ldr	r0, [r3, #0]
 8016606:	f000 f805 	bl	8016614 <_findenv_r>
 801660a:	b003      	add	sp, #12
 801660c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016610:	20000148 	.word	0x20000148

08016614 <_findenv_r>:
 8016614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016618:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016688 <_findenv_r+0x74>
 801661c:	4606      	mov	r6, r0
 801661e:	4689      	mov	r9, r1
 8016620:	4617      	mov	r7, r2
 8016622:	f000 fcaf 	bl	8016f84 <__env_lock>
 8016626:	f8da 4000 	ldr.w	r4, [sl]
 801662a:	b134      	cbz	r4, 801663a <_findenv_r+0x26>
 801662c:	464b      	mov	r3, r9
 801662e:	4698      	mov	r8, r3
 8016630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016634:	b13a      	cbz	r2, 8016646 <_findenv_r+0x32>
 8016636:	2a3d      	cmp	r2, #61	@ 0x3d
 8016638:	d1f9      	bne.n	801662e <_findenv_r+0x1a>
 801663a:	4630      	mov	r0, r6
 801663c:	f000 fca8 	bl	8016f90 <__env_unlock>
 8016640:	2000      	movs	r0, #0
 8016642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016646:	eba8 0809 	sub.w	r8, r8, r9
 801664a:	46a3      	mov	fp, r4
 801664c:	f854 0b04 	ldr.w	r0, [r4], #4
 8016650:	2800      	cmp	r0, #0
 8016652:	d0f2      	beq.n	801663a <_findenv_r+0x26>
 8016654:	4642      	mov	r2, r8
 8016656:	4649      	mov	r1, r9
 8016658:	f000 fbb3 	bl	8016dc2 <strncmp>
 801665c:	2800      	cmp	r0, #0
 801665e:	d1f4      	bne.n	801664a <_findenv_r+0x36>
 8016660:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016664:	eb03 0508 	add.w	r5, r3, r8
 8016668:	f813 3008 	ldrb.w	r3, [r3, r8]
 801666c:	2b3d      	cmp	r3, #61	@ 0x3d
 801666e:	d1ec      	bne.n	801664a <_findenv_r+0x36>
 8016670:	f8da 3000 	ldr.w	r3, [sl]
 8016674:	ebab 0303 	sub.w	r3, fp, r3
 8016678:	109b      	asrs	r3, r3, #2
 801667a:	4630      	mov	r0, r6
 801667c:	603b      	str	r3, [r7, #0]
 801667e:	f000 fc87 	bl	8016f90 <__env_unlock>
 8016682:	1c68      	adds	r0, r5, #1
 8016684:	e7dd      	b.n	8016642 <_findenv_r+0x2e>
 8016686:	bf00      	nop
 8016688:	20000004 	.word	0x20000004

0801668c <malloc>:
 801668c:	4b02      	ldr	r3, [pc, #8]	@ (8016698 <malloc+0xc>)
 801668e:	4601      	mov	r1, r0
 8016690:	6818      	ldr	r0, [r3, #0]
 8016692:	f000 b82d 	b.w	80166f0 <_malloc_r>
 8016696:	bf00      	nop
 8016698:	20000148 	.word	0x20000148

0801669c <free>:
 801669c:	4b02      	ldr	r3, [pc, #8]	@ (80166a8 <free+0xc>)
 801669e:	4601      	mov	r1, r0
 80166a0:	6818      	ldr	r0, [r3, #0]
 80166a2:	f000 bc7b 	b.w	8016f9c <_free_r>
 80166a6:	bf00      	nop
 80166a8:	20000148 	.word	0x20000148

080166ac <sbrk_aligned>:
 80166ac:	b570      	push	{r4, r5, r6, lr}
 80166ae:	4e0f      	ldr	r6, [pc, #60]	@ (80166ec <sbrk_aligned+0x40>)
 80166b0:	460c      	mov	r4, r1
 80166b2:	6831      	ldr	r1, [r6, #0]
 80166b4:	4605      	mov	r5, r0
 80166b6:	b911      	cbnz	r1, 80166be <sbrk_aligned+0x12>
 80166b8:	f000 fbe0 	bl	8016e7c <_sbrk_r>
 80166bc:	6030      	str	r0, [r6, #0]
 80166be:	4621      	mov	r1, r4
 80166c0:	4628      	mov	r0, r5
 80166c2:	f000 fbdb 	bl	8016e7c <_sbrk_r>
 80166c6:	1c43      	adds	r3, r0, #1
 80166c8:	d103      	bne.n	80166d2 <sbrk_aligned+0x26>
 80166ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80166ce:	4620      	mov	r0, r4
 80166d0:	bd70      	pop	{r4, r5, r6, pc}
 80166d2:	1cc4      	adds	r4, r0, #3
 80166d4:	f024 0403 	bic.w	r4, r4, #3
 80166d8:	42a0      	cmp	r0, r4
 80166da:	d0f8      	beq.n	80166ce <sbrk_aligned+0x22>
 80166dc:	1a21      	subs	r1, r4, r0
 80166de:	4628      	mov	r0, r5
 80166e0:	f000 fbcc 	bl	8016e7c <_sbrk_r>
 80166e4:	3001      	adds	r0, #1
 80166e6:	d1f2      	bne.n	80166ce <sbrk_aligned+0x22>
 80166e8:	e7ef      	b.n	80166ca <sbrk_aligned+0x1e>
 80166ea:	bf00      	nop
 80166ec:	2000cb5c 	.word	0x2000cb5c

080166f0 <_malloc_r>:
 80166f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166f4:	1ccd      	adds	r5, r1, #3
 80166f6:	f025 0503 	bic.w	r5, r5, #3
 80166fa:	3508      	adds	r5, #8
 80166fc:	2d0c      	cmp	r5, #12
 80166fe:	bf38      	it	cc
 8016700:	250c      	movcc	r5, #12
 8016702:	2d00      	cmp	r5, #0
 8016704:	4606      	mov	r6, r0
 8016706:	db01      	blt.n	801670c <_malloc_r+0x1c>
 8016708:	42a9      	cmp	r1, r5
 801670a:	d904      	bls.n	8016716 <_malloc_r+0x26>
 801670c:	230c      	movs	r3, #12
 801670e:	6033      	str	r3, [r6, #0]
 8016710:	2000      	movs	r0, #0
 8016712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80167ec <_malloc_r+0xfc>
 801671a:	f000 f869 	bl	80167f0 <__malloc_lock>
 801671e:	f8d8 3000 	ldr.w	r3, [r8]
 8016722:	461c      	mov	r4, r3
 8016724:	bb44      	cbnz	r4, 8016778 <_malloc_r+0x88>
 8016726:	4629      	mov	r1, r5
 8016728:	4630      	mov	r0, r6
 801672a:	f7ff ffbf 	bl	80166ac <sbrk_aligned>
 801672e:	1c43      	adds	r3, r0, #1
 8016730:	4604      	mov	r4, r0
 8016732:	d158      	bne.n	80167e6 <_malloc_r+0xf6>
 8016734:	f8d8 4000 	ldr.w	r4, [r8]
 8016738:	4627      	mov	r7, r4
 801673a:	2f00      	cmp	r7, #0
 801673c:	d143      	bne.n	80167c6 <_malloc_r+0xd6>
 801673e:	2c00      	cmp	r4, #0
 8016740:	d04b      	beq.n	80167da <_malloc_r+0xea>
 8016742:	6823      	ldr	r3, [r4, #0]
 8016744:	4639      	mov	r1, r7
 8016746:	4630      	mov	r0, r6
 8016748:	eb04 0903 	add.w	r9, r4, r3
 801674c:	f000 fb96 	bl	8016e7c <_sbrk_r>
 8016750:	4581      	cmp	r9, r0
 8016752:	d142      	bne.n	80167da <_malloc_r+0xea>
 8016754:	6821      	ldr	r1, [r4, #0]
 8016756:	1a6d      	subs	r5, r5, r1
 8016758:	4629      	mov	r1, r5
 801675a:	4630      	mov	r0, r6
 801675c:	f7ff ffa6 	bl	80166ac <sbrk_aligned>
 8016760:	3001      	adds	r0, #1
 8016762:	d03a      	beq.n	80167da <_malloc_r+0xea>
 8016764:	6823      	ldr	r3, [r4, #0]
 8016766:	442b      	add	r3, r5
 8016768:	6023      	str	r3, [r4, #0]
 801676a:	f8d8 3000 	ldr.w	r3, [r8]
 801676e:	685a      	ldr	r2, [r3, #4]
 8016770:	bb62      	cbnz	r2, 80167cc <_malloc_r+0xdc>
 8016772:	f8c8 7000 	str.w	r7, [r8]
 8016776:	e00f      	b.n	8016798 <_malloc_r+0xa8>
 8016778:	6822      	ldr	r2, [r4, #0]
 801677a:	1b52      	subs	r2, r2, r5
 801677c:	d420      	bmi.n	80167c0 <_malloc_r+0xd0>
 801677e:	2a0b      	cmp	r2, #11
 8016780:	d917      	bls.n	80167b2 <_malloc_r+0xc2>
 8016782:	1961      	adds	r1, r4, r5
 8016784:	42a3      	cmp	r3, r4
 8016786:	6025      	str	r5, [r4, #0]
 8016788:	bf18      	it	ne
 801678a:	6059      	strne	r1, [r3, #4]
 801678c:	6863      	ldr	r3, [r4, #4]
 801678e:	bf08      	it	eq
 8016790:	f8c8 1000 	streq.w	r1, [r8]
 8016794:	5162      	str	r2, [r4, r5]
 8016796:	604b      	str	r3, [r1, #4]
 8016798:	4630      	mov	r0, r6
 801679a:	f000 f82f 	bl	80167fc <__malloc_unlock>
 801679e:	f104 000b 	add.w	r0, r4, #11
 80167a2:	1d23      	adds	r3, r4, #4
 80167a4:	f020 0007 	bic.w	r0, r0, #7
 80167a8:	1ac2      	subs	r2, r0, r3
 80167aa:	bf1c      	itt	ne
 80167ac:	1a1b      	subne	r3, r3, r0
 80167ae:	50a3      	strne	r3, [r4, r2]
 80167b0:	e7af      	b.n	8016712 <_malloc_r+0x22>
 80167b2:	6862      	ldr	r2, [r4, #4]
 80167b4:	42a3      	cmp	r3, r4
 80167b6:	bf0c      	ite	eq
 80167b8:	f8c8 2000 	streq.w	r2, [r8]
 80167bc:	605a      	strne	r2, [r3, #4]
 80167be:	e7eb      	b.n	8016798 <_malloc_r+0xa8>
 80167c0:	4623      	mov	r3, r4
 80167c2:	6864      	ldr	r4, [r4, #4]
 80167c4:	e7ae      	b.n	8016724 <_malloc_r+0x34>
 80167c6:	463c      	mov	r4, r7
 80167c8:	687f      	ldr	r7, [r7, #4]
 80167ca:	e7b6      	b.n	801673a <_malloc_r+0x4a>
 80167cc:	461a      	mov	r2, r3
 80167ce:	685b      	ldr	r3, [r3, #4]
 80167d0:	42a3      	cmp	r3, r4
 80167d2:	d1fb      	bne.n	80167cc <_malloc_r+0xdc>
 80167d4:	2300      	movs	r3, #0
 80167d6:	6053      	str	r3, [r2, #4]
 80167d8:	e7de      	b.n	8016798 <_malloc_r+0xa8>
 80167da:	230c      	movs	r3, #12
 80167dc:	6033      	str	r3, [r6, #0]
 80167de:	4630      	mov	r0, r6
 80167e0:	f000 f80c 	bl	80167fc <__malloc_unlock>
 80167e4:	e794      	b.n	8016710 <_malloc_r+0x20>
 80167e6:	6005      	str	r5, [r0, #0]
 80167e8:	e7d6      	b.n	8016798 <_malloc_r+0xa8>
 80167ea:	bf00      	nop
 80167ec:	2000cb60 	.word	0x2000cb60

080167f0 <__malloc_lock>:
 80167f0:	4801      	ldr	r0, [pc, #4]	@ (80167f8 <__malloc_lock+0x8>)
 80167f2:	f000 bb90 	b.w	8016f16 <__retarget_lock_acquire_recursive>
 80167f6:	bf00      	nop
 80167f8:	2000cca5 	.word	0x2000cca5

080167fc <__malloc_unlock>:
 80167fc:	4801      	ldr	r0, [pc, #4]	@ (8016804 <__malloc_unlock+0x8>)
 80167fe:	f000 bb8b 	b.w	8016f18 <__retarget_lock_release_recursive>
 8016802:	bf00      	nop
 8016804:	2000cca5 	.word	0x2000cca5

08016808 <srand>:
 8016808:	b538      	push	{r3, r4, r5, lr}
 801680a:	4b10      	ldr	r3, [pc, #64]	@ (801684c <srand+0x44>)
 801680c:	681d      	ldr	r5, [r3, #0]
 801680e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016810:	4604      	mov	r4, r0
 8016812:	b9b3      	cbnz	r3, 8016842 <srand+0x3a>
 8016814:	2018      	movs	r0, #24
 8016816:	f7ff ff39 	bl	801668c <malloc>
 801681a:	4602      	mov	r2, r0
 801681c:	6328      	str	r0, [r5, #48]	@ 0x30
 801681e:	b920      	cbnz	r0, 801682a <srand+0x22>
 8016820:	4b0b      	ldr	r3, [pc, #44]	@ (8016850 <srand+0x48>)
 8016822:	480c      	ldr	r0, [pc, #48]	@ (8016854 <srand+0x4c>)
 8016824:	2146      	movs	r1, #70	@ 0x46
 8016826:	f000 fb8f 	bl	8016f48 <__assert_func>
 801682a:	490b      	ldr	r1, [pc, #44]	@ (8016858 <srand+0x50>)
 801682c:	4b0b      	ldr	r3, [pc, #44]	@ (801685c <srand+0x54>)
 801682e:	e9c0 1300 	strd	r1, r3, [r0]
 8016832:	4b0b      	ldr	r3, [pc, #44]	@ (8016860 <srand+0x58>)
 8016834:	6083      	str	r3, [r0, #8]
 8016836:	230b      	movs	r3, #11
 8016838:	8183      	strh	r3, [r0, #12]
 801683a:	2100      	movs	r1, #0
 801683c:	2001      	movs	r0, #1
 801683e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016842:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016844:	2200      	movs	r2, #0
 8016846:	611c      	str	r4, [r3, #16]
 8016848:	615a      	str	r2, [r3, #20]
 801684a:	bd38      	pop	{r3, r4, r5, pc}
 801684c:	20000148 	.word	0x20000148
 8016850:	080189a0 	.word	0x080189a0
 8016854:	080189b7 	.word	0x080189b7
 8016858:	abcd330e 	.word	0xabcd330e
 801685c:	e66d1234 	.word	0xe66d1234
 8016860:	0005deec 	.word	0x0005deec

08016864 <rand>:
 8016864:	4b16      	ldr	r3, [pc, #88]	@ (80168c0 <rand+0x5c>)
 8016866:	b510      	push	{r4, lr}
 8016868:	681c      	ldr	r4, [r3, #0]
 801686a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801686c:	b9b3      	cbnz	r3, 801689c <rand+0x38>
 801686e:	2018      	movs	r0, #24
 8016870:	f7ff ff0c 	bl	801668c <malloc>
 8016874:	4602      	mov	r2, r0
 8016876:	6320      	str	r0, [r4, #48]	@ 0x30
 8016878:	b920      	cbnz	r0, 8016884 <rand+0x20>
 801687a:	4b12      	ldr	r3, [pc, #72]	@ (80168c4 <rand+0x60>)
 801687c:	4812      	ldr	r0, [pc, #72]	@ (80168c8 <rand+0x64>)
 801687e:	2152      	movs	r1, #82	@ 0x52
 8016880:	f000 fb62 	bl	8016f48 <__assert_func>
 8016884:	4911      	ldr	r1, [pc, #68]	@ (80168cc <rand+0x68>)
 8016886:	4b12      	ldr	r3, [pc, #72]	@ (80168d0 <rand+0x6c>)
 8016888:	e9c0 1300 	strd	r1, r3, [r0]
 801688c:	4b11      	ldr	r3, [pc, #68]	@ (80168d4 <rand+0x70>)
 801688e:	6083      	str	r3, [r0, #8]
 8016890:	230b      	movs	r3, #11
 8016892:	8183      	strh	r3, [r0, #12]
 8016894:	2100      	movs	r1, #0
 8016896:	2001      	movs	r0, #1
 8016898:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801689c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801689e:	480e      	ldr	r0, [pc, #56]	@ (80168d8 <rand+0x74>)
 80168a0:	690b      	ldr	r3, [r1, #16]
 80168a2:	694c      	ldr	r4, [r1, #20]
 80168a4:	4a0d      	ldr	r2, [pc, #52]	@ (80168dc <rand+0x78>)
 80168a6:	4358      	muls	r0, r3
 80168a8:	fb02 0004 	mla	r0, r2, r4, r0
 80168ac:	fba3 3202 	umull	r3, r2, r3, r2
 80168b0:	3301      	adds	r3, #1
 80168b2:	eb40 0002 	adc.w	r0, r0, r2
 80168b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80168ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80168be:	bd10      	pop	{r4, pc}
 80168c0:	20000148 	.word	0x20000148
 80168c4:	080189a0 	.word	0x080189a0
 80168c8:	080189b7 	.word	0x080189b7
 80168cc:	abcd330e 	.word	0xabcd330e
 80168d0:	e66d1234 	.word	0xe66d1234
 80168d4:	0005deec 	.word	0x0005deec
 80168d8:	5851f42d 	.word	0x5851f42d
 80168dc:	4c957f2d 	.word	0x4c957f2d

080168e0 <realloc>:
 80168e0:	4b02      	ldr	r3, [pc, #8]	@ (80168ec <realloc+0xc>)
 80168e2:	460a      	mov	r2, r1
 80168e4:	4601      	mov	r1, r0
 80168e6:	6818      	ldr	r0, [r3, #0]
 80168e8:	f000 b802 	b.w	80168f0 <_realloc_r>
 80168ec:	20000148 	.word	0x20000148

080168f0 <_realloc_r>:
 80168f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f4:	4680      	mov	r8, r0
 80168f6:	4615      	mov	r5, r2
 80168f8:	460c      	mov	r4, r1
 80168fa:	b921      	cbnz	r1, 8016906 <_realloc_r+0x16>
 80168fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016900:	4611      	mov	r1, r2
 8016902:	f7ff bef5 	b.w	80166f0 <_malloc_r>
 8016906:	b92a      	cbnz	r2, 8016914 <_realloc_r+0x24>
 8016908:	f000 fb48 	bl	8016f9c <_free_r>
 801690c:	2400      	movs	r4, #0
 801690e:	4620      	mov	r0, r4
 8016910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016914:	f000 fb8c 	bl	8017030 <_malloc_usable_size_r>
 8016918:	4285      	cmp	r5, r0
 801691a:	4606      	mov	r6, r0
 801691c:	d802      	bhi.n	8016924 <_realloc_r+0x34>
 801691e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016922:	d8f4      	bhi.n	801690e <_realloc_r+0x1e>
 8016924:	4629      	mov	r1, r5
 8016926:	4640      	mov	r0, r8
 8016928:	f7ff fee2 	bl	80166f0 <_malloc_r>
 801692c:	4607      	mov	r7, r0
 801692e:	2800      	cmp	r0, #0
 8016930:	d0ec      	beq.n	801690c <_realloc_r+0x1c>
 8016932:	42b5      	cmp	r5, r6
 8016934:	462a      	mov	r2, r5
 8016936:	4621      	mov	r1, r4
 8016938:	bf28      	it	cs
 801693a:	4632      	movcs	r2, r6
 801693c:	f000 faf5 	bl	8016f2a <memcpy>
 8016940:	4621      	mov	r1, r4
 8016942:	4640      	mov	r0, r8
 8016944:	f000 fb2a 	bl	8016f9c <_free_r>
 8016948:	463c      	mov	r4, r7
 801694a:	e7e0      	b.n	801690e <_realloc_r+0x1e>

0801694c <_strtoul_l.constprop.0>:
 801694c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016950:	4e34      	ldr	r6, [pc, #208]	@ (8016a24 <_strtoul_l.constprop.0+0xd8>)
 8016952:	4686      	mov	lr, r0
 8016954:	460d      	mov	r5, r1
 8016956:	4628      	mov	r0, r5
 8016958:	f815 4b01 	ldrb.w	r4, [r5], #1
 801695c:	5d37      	ldrb	r7, [r6, r4]
 801695e:	f017 0708 	ands.w	r7, r7, #8
 8016962:	d1f8      	bne.n	8016956 <_strtoul_l.constprop.0+0xa>
 8016964:	2c2d      	cmp	r4, #45	@ 0x2d
 8016966:	d12f      	bne.n	80169c8 <_strtoul_l.constprop.0+0x7c>
 8016968:	782c      	ldrb	r4, [r5, #0]
 801696a:	2701      	movs	r7, #1
 801696c:	1c85      	adds	r5, r0, #2
 801696e:	f033 0010 	bics.w	r0, r3, #16
 8016972:	d109      	bne.n	8016988 <_strtoul_l.constprop.0+0x3c>
 8016974:	2c30      	cmp	r4, #48	@ 0x30
 8016976:	d12c      	bne.n	80169d2 <_strtoul_l.constprop.0+0x86>
 8016978:	7828      	ldrb	r0, [r5, #0]
 801697a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801697e:	2858      	cmp	r0, #88	@ 0x58
 8016980:	d127      	bne.n	80169d2 <_strtoul_l.constprop.0+0x86>
 8016982:	786c      	ldrb	r4, [r5, #1]
 8016984:	2310      	movs	r3, #16
 8016986:	3502      	adds	r5, #2
 8016988:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801698c:	2600      	movs	r6, #0
 801698e:	fbb8 f8f3 	udiv	r8, r8, r3
 8016992:	fb03 f908 	mul.w	r9, r3, r8
 8016996:	ea6f 0909 	mvn.w	r9, r9
 801699a:	4630      	mov	r0, r6
 801699c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80169a0:	f1bc 0f09 	cmp.w	ip, #9
 80169a4:	d81c      	bhi.n	80169e0 <_strtoul_l.constprop.0+0x94>
 80169a6:	4664      	mov	r4, ip
 80169a8:	42a3      	cmp	r3, r4
 80169aa:	dd2a      	ble.n	8016a02 <_strtoul_l.constprop.0+0xb6>
 80169ac:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80169b0:	d007      	beq.n	80169c2 <_strtoul_l.constprop.0+0x76>
 80169b2:	4580      	cmp	r8, r0
 80169b4:	d322      	bcc.n	80169fc <_strtoul_l.constprop.0+0xb0>
 80169b6:	d101      	bne.n	80169bc <_strtoul_l.constprop.0+0x70>
 80169b8:	45a1      	cmp	r9, r4
 80169ba:	db1f      	blt.n	80169fc <_strtoul_l.constprop.0+0xb0>
 80169bc:	fb00 4003 	mla	r0, r0, r3, r4
 80169c0:	2601      	movs	r6, #1
 80169c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80169c6:	e7e9      	b.n	801699c <_strtoul_l.constprop.0+0x50>
 80169c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80169ca:	bf04      	itt	eq
 80169cc:	782c      	ldrbeq	r4, [r5, #0]
 80169ce:	1c85      	addeq	r5, r0, #2
 80169d0:	e7cd      	b.n	801696e <_strtoul_l.constprop.0+0x22>
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d1d8      	bne.n	8016988 <_strtoul_l.constprop.0+0x3c>
 80169d6:	2c30      	cmp	r4, #48	@ 0x30
 80169d8:	bf0c      	ite	eq
 80169da:	2308      	moveq	r3, #8
 80169dc:	230a      	movne	r3, #10
 80169de:	e7d3      	b.n	8016988 <_strtoul_l.constprop.0+0x3c>
 80169e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80169e4:	f1bc 0f19 	cmp.w	ip, #25
 80169e8:	d801      	bhi.n	80169ee <_strtoul_l.constprop.0+0xa2>
 80169ea:	3c37      	subs	r4, #55	@ 0x37
 80169ec:	e7dc      	b.n	80169a8 <_strtoul_l.constprop.0+0x5c>
 80169ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80169f2:	f1bc 0f19 	cmp.w	ip, #25
 80169f6:	d804      	bhi.n	8016a02 <_strtoul_l.constprop.0+0xb6>
 80169f8:	3c57      	subs	r4, #87	@ 0x57
 80169fa:	e7d5      	b.n	80169a8 <_strtoul_l.constprop.0+0x5c>
 80169fc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016a00:	e7df      	b.n	80169c2 <_strtoul_l.constprop.0+0x76>
 8016a02:	1c73      	adds	r3, r6, #1
 8016a04:	d106      	bne.n	8016a14 <_strtoul_l.constprop.0+0xc8>
 8016a06:	2322      	movs	r3, #34	@ 0x22
 8016a08:	f8ce 3000 	str.w	r3, [lr]
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	b932      	cbnz	r2, 8016a1e <_strtoul_l.constprop.0+0xd2>
 8016a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a14:	b107      	cbz	r7, 8016a18 <_strtoul_l.constprop.0+0xcc>
 8016a16:	4240      	negs	r0, r0
 8016a18:	2a00      	cmp	r2, #0
 8016a1a:	d0f9      	beq.n	8016a10 <_strtoul_l.constprop.0+0xc4>
 8016a1c:	b106      	cbz	r6, 8016a20 <_strtoul_l.constprop.0+0xd4>
 8016a1e:	1e69      	subs	r1, r5, #1
 8016a20:	6011      	str	r1, [r2, #0]
 8016a22:	e7f5      	b.n	8016a10 <_strtoul_l.constprop.0+0xc4>
 8016a24:	08018a10 	.word	0x08018a10

08016a28 <strtoul>:
 8016a28:	4613      	mov	r3, r2
 8016a2a:	460a      	mov	r2, r1
 8016a2c:	4601      	mov	r1, r0
 8016a2e:	4802      	ldr	r0, [pc, #8]	@ (8016a38 <strtoul+0x10>)
 8016a30:	6800      	ldr	r0, [r0, #0]
 8016a32:	f7ff bf8b 	b.w	801694c <_strtoul_l.constprop.0>
 8016a36:	bf00      	nop
 8016a38:	20000148 	.word	0x20000148

08016a3c <std>:
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	b510      	push	{r4, lr}
 8016a40:	4604      	mov	r4, r0
 8016a42:	e9c0 3300 	strd	r3, r3, [r0]
 8016a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a4a:	6083      	str	r3, [r0, #8]
 8016a4c:	8181      	strh	r1, [r0, #12]
 8016a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016a50:	81c2      	strh	r2, [r0, #14]
 8016a52:	6183      	str	r3, [r0, #24]
 8016a54:	4619      	mov	r1, r3
 8016a56:	2208      	movs	r2, #8
 8016a58:	305c      	adds	r0, #92	@ 0x5c
 8016a5a:	f000 f99d 	bl	8016d98 <memset>
 8016a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8016a94 <std+0x58>)
 8016a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8016a62:	4b0d      	ldr	r3, [pc, #52]	@ (8016a98 <std+0x5c>)
 8016a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016a66:	4b0d      	ldr	r3, [pc, #52]	@ (8016a9c <std+0x60>)
 8016a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8016aa0 <std+0x64>)
 8016a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8016a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8016aa4 <std+0x68>)
 8016a70:	6224      	str	r4, [r4, #32]
 8016a72:	429c      	cmp	r4, r3
 8016a74:	d006      	beq.n	8016a84 <std+0x48>
 8016a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016a7a:	4294      	cmp	r4, r2
 8016a7c:	d002      	beq.n	8016a84 <std+0x48>
 8016a7e:	33d0      	adds	r3, #208	@ 0xd0
 8016a80:	429c      	cmp	r4, r3
 8016a82:	d105      	bne.n	8016a90 <std+0x54>
 8016a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a8c:	f000 ba42 	b.w	8016f14 <__retarget_lock_init_recursive>
 8016a90:	bd10      	pop	{r4, pc}
 8016a92:	bf00      	nop
 8016a94:	08016c4d 	.word	0x08016c4d
 8016a98:	08016c6f 	.word	0x08016c6f
 8016a9c:	08016ca7 	.word	0x08016ca7
 8016aa0:	08016ccb 	.word	0x08016ccb
 8016aa4:	2000cb64 	.word	0x2000cb64

08016aa8 <stdio_exit_handler>:
 8016aa8:	4a02      	ldr	r2, [pc, #8]	@ (8016ab4 <stdio_exit_handler+0xc>)
 8016aaa:	4903      	ldr	r1, [pc, #12]	@ (8016ab8 <stdio_exit_handler+0x10>)
 8016aac:	4803      	ldr	r0, [pc, #12]	@ (8016abc <stdio_exit_handler+0x14>)
 8016aae:	f000 b869 	b.w	8016b84 <_fwalk_sglue>
 8016ab2:	bf00      	nop
 8016ab4:	2000013c 	.word	0x2000013c
 8016ab8:	08017999 	.word	0x08017999
 8016abc:	2000014c 	.word	0x2000014c

08016ac0 <cleanup_stdio>:
 8016ac0:	6841      	ldr	r1, [r0, #4]
 8016ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8016af4 <cleanup_stdio+0x34>)
 8016ac4:	4299      	cmp	r1, r3
 8016ac6:	b510      	push	{r4, lr}
 8016ac8:	4604      	mov	r4, r0
 8016aca:	d001      	beq.n	8016ad0 <cleanup_stdio+0x10>
 8016acc:	f000 ff64 	bl	8017998 <_fflush_r>
 8016ad0:	68a1      	ldr	r1, [r4, #8]
 8016ad2:	4b09      	ldr	r3, [pc, #36]	@ (8016af8 <cleanup_stdio+0x38>)
 8016ad4:	4299      	cmp	r1, r3
 8016ad6:	d002      	beq.n	8016ade <cleanup_stdio+0x1e>
 8016ad8:	4620      	mov	r0, r4
 8016ada:	f000 ff5d 	bl	8017998 <_fflush_r>
 8016ade:	68e1      	ldr	r1, [r4, #12]
 8016ae0:	4b06      	ldr	r3, [pc, #24]	@ (8016afc <cleanup_stdio+0x3c>)
 8016ae2:	4299      	cmp	r1, r3
 8016ae4:	d004      	beq.n	8016af0 <cleanup_stdio+0x30>
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aec:	f000 bf54 	b.w	8017998 <_fflush_r>
 8016af0:	bd10      	pop	{r4, pc}
 8016af2:	bf00      	nop
 8016af4:	2000cb64 	.word	0x2000cb64
 8016af8:	2000cbcc 	.word	0x2000cbcc
 8016afc:	2000cc34 	.word	0x2000cc34

08016b00 <global_stdio_init.part.0>:
 8016b00:	b510      	push	{r4, lr}
 8016b02:	4b0b      	ldr	r3, [pc, #44]	@ (8016b30 <global_stdio_init.part.0+0x30>)
 8016b04:	4c0b      	ldr	r4, [pc, #44]	@ (8016b34 <global_stdio_init.part.0+0x34>)
 8016b06:	4a0c      	ldr	r2, [pc, #48]	@ (8016b38 <global_stdio_init.part.0+0x38>)
 8016b08:	601a      	str	r2, [r3, #0]
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	2104      	movs	r1, #4
 8016b10:	f7ff ff94 	bl	8016a3c <std>
 8016b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016b18:	2201      	movs	r2, #1
 8016b1a:	2109      	movs	r1, #9
 8016b1c:	f7ff ff8e 	bl	8016a3c <std>
 8016b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016b24:	2202      	movs	r2, #2
 8016b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b2a:	2112      	movs	r1, #18
 8016b2c:	f7ff bf86 	b.w	8016a3c <std>
 8016b30:	2000cc9c 	.word	0x2000cc9c
 8016b34:	2000cb64 	.word	0x2000cb64
 8016b38:	08016aa9 	.word	0x08016aa9

08016b3c <__sfp_lock_acquire>:
 8016b3c:	4801      	ldr	r0, [pc, #4]	@ (8016b44 <__sfp_lock_acquire+0x8>)
 8016b3e:	f000 b9ea 	b.w	8016f16 <__retarget_lock_acquire_recursive>
 8016b42:	bf00      	nop
 8016b44:	2000cca6 	.word	0x2000cca6

08016b48 <__sfp_lock_release>:
 8016b48:	4801      	ldr	r0, [pc, #4]	@ (8016b50 <__sfp_lock_release+0x8>)
 8016b4a:	f000 b9e5 	b.w	8016f18 <__retarget_lock_release_recursive>
 8016b4e:	bf00      	nop
 8016b50:	2000cca6 	.word	0x2000cca6

08016b54 <__sinit>:
 8016b54:	b510      	push	{r4, lr}
 8016b56:	4604      	mov	r4, r0
 8016b58:	f7ff fff0 	bl	8016b3c <__sfp_lock_acquire>
 8016b5c:	6a23      	ldr	r3, [r4, #32]
 8016b5e:	b11b      	cbz	r3, 8016b68 <__sinit+0x14>
 8016b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b64:	f7ff bff0 	b.w	8016b48 <__sfp_lock_release>
 8016b68:	4b04      	ldr	r3, [pc, #16]	@ (8016b7c <__sinit+0x28>)
 8016b6a:	6223      	str	r3, [r4, #32]
 8016b6c:	4b04      	ldr	r3, [pc, #16]	@ (8016b80 <__sinit+0x2c>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d1f5      	bne.n	8016b60 <__sinit+0xc>
 8016b74:	f7ff ffc4 	bl	8016b00 <global_stdio_init.part.0>
 8016b78:	e7f2      	b.n	8016b60 <__sinit+0xc>
 8016b7a:	bf00      	nop
 8016b7c:	08016ac1 	.word	0x08016ac1
 8016b80:	2000cc9c 	.word	0x2000cc9c

08016b84 <_fwalk_sglue>:
 8016b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b88:	4607      	mov	r7, r0
 8016b8a:	4688      	mov	r8, r1
 8016b8c:	4614      	mov	r4, r2
 8016b8e:	2600      	movs	r6, #0
 8016b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b94:	f1b9 0901 	subs.w	r9, r9, #1
 8016b98:	d505      	bpl.n	8016ba6 <_fwalk_sglue+0x22>
 8016b9a:	6824      	ldr	r4, [r4, #0]
 8016b9c:	2c00      	cmp	r4, #0
 8016b9e:	d1f7      	bne.n	8016b90 <_fwalk_sglue+0xc>
 8016ba0:	4630      	mov	r0, r6
 8016ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ba6:	89ab      	ldrh	r3, [r5, #12]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d907      	bls.n	8016bbc <_fwalk_sglue+0x38>
 8016bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	d003      	beq.n	8016bbc <_fwalk_sglue+0x38>
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	4638      	mov	r0, r7
 8016bb8:	47c0      	blx	r8
 8016bba:	4306      	orrs	r6, r0
 8016bbc:	3568      	adds	r5, #104	@ 0x68
 8016bbe:	e7e9      	b.n	8016b94 <_fwalk_sglue+0x10>

08016bc0 <iprintf>:
 8016bc0:	b40f      	push	{r0, r1, r2, r3}
 8016bc2:	b507      	push	{r0, r1, r2, lr}
 8016bc4:	4906      	ldr	r1, [pc, #24]	@ (8016be0 <iprintf+0x20>)
 8016bc6:	ab04      	add	r3, sp, #16
 8016bc8:	6808      	ldr	r0, [r1, #0]
 8016bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bce:	6881      	ldr	r1, [r0, #8]
 8016bd0:	9301      	str	r3, [sp, #4]
 8016bd2:	f000 fbb7 	bl	8017344 <_vfiprintf_r>
 8016bd6:	b003      	add	sp, #12
 8016bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016bdc:	b004      	add	sp, #16
 8016bde:	4770      	bx	lr
 8016be0:	20000148 	.word	0x20000148

08016be4 <sniprintf>:
 8016be4:	b40c      	push	{r2, r3}
 8016be6:	b530      	push	{r4, r5, lr}
 8016be8:	4b17      	ldr	r3, [pc, #92]	@ (8016c48 <sniprintf+0x64>)
 8016bea:	1e0c      	subs	r4, r1, #0
 8016bec:	681d      	ldr	r5, [r3, #0]
 8016bee:	b09d      	sub	sp, #116	@ 0x74
 8016bf0:	da08      	bge.n	8016c04 <sniprintf+0x20>
 8016bf2:	238b      	movs	r3, #139	@ 0x8b
 8016bf4:	602b      	str	r3, [r5, #0]
 8016bf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016bfa:	b01d      	add	sp, #116	@ 0x74
 8016bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c00:	b002      	add	sp, #8
 8016c02:	4770      	bx	lr
 8016c04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016c08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c0c:	bf14      	ite	ne
 8016c0e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016c12:	4623      	moveq	r3, r4
 8016c14:	9304      	str	r3, [sp, #16]
 8016c16:	9307      	str	r3, [sp, #28]
 8016c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c1c:	9002      	str	r0, [sp, #8]
 8016c1e:	9006      	str	r0, [sp, #24]
 8016c20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016c26:	ab21      	add	r3, sp, #132	@ 0x84
 8016c28:	a902      	add	r1, sp, #8
 8016c2a:	4628      	mov	r0, r5
 8016c2c:	9301      	str	r3, [sp, #4]
 8016c2e:	f000 fa63 	bl	80170f8 <_svfiprintf_r>
 8016c32:	1c43      	adds	r3, r0, #1
 8016c34:	bfbc      	itt	lt
 8016c36:	238b      	movlt	r3, #139	@ 0x8b
 8016c38:	602b      	strlt	r3, [r5, #0]
 8016c3a:	2c00      	cmp	r4, #0
 8016c3c:	d0dd      	beq.n	8016bfa <sniprintf+0x16>
 8016c3e:	9b02      	ldr	r3, [sp, #8]
 8016c40:	2200      	movs	r2, #0
 8016c42:	701a      	strb	r2, [r3, #0]
 8016c44:	e7d9      	b.n	8016bfa <sniprintf+0x16>
 8016c46:	bf00      	nop
 8016c48:	20000148 	.word	0x20000148

08016c4c <__sread>:
 8016c4c:	b510      	push	{r4, lr}
 8016c4e:	460c      	mov	r4, r1
 8016c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c54:	f000 f900 	bl	8016e58 <_read_r>
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	bfab      	itete	ge
 8016c5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8016c60:	181b      	addge	r3, r3, r0
 8016c62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016c66:	bfac      	ite	ge
 8016c68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016c6a:	81a3      	strhlt	r3, [r4, #12]
 8016c6c:	bd10      	pop	{r4, pc}

08016c6e <__swrite>:
 8016c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c72:	461f      	mov	r7, r3
 8016c74:	898b      	ldrh	r3, [r1, #12]
 8016c76:	05db      	lsls	r3, r3, #23
 8016c78:	4605      	mov	r5, r0
 8016c7a:	460c      	mov	r4, r1
 8016c7c:	4616      	mov	r6, r2
 8016c7e:	d505      	bpl.n	8016c8c <__swrite+0x1e>
 8016c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c84:	2302      	movs	r3, #2
 8016c86:	2200      	movs	r2, #0
 8016c88:	f000 f8d4 	bl	8016e34 <_lseek_r>
 8016c8c:	89a3      	ldrh	r3, [r4, #12]
 8016c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c96:	81a3      	strh	r3, [r4, #12]
 8016c98:	4632      	mov	r2, r6
 8016c9a:	463b      	mov	r3, r7
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca2:	f000 b8fb 	b.w	8016e9c <_write_r>

08016ca6 <__sseek>:
 8016ca6:	b510      	push	{r4, lr}
 8016ca8:	460c      	mov	r4, r1
 8016caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cae:	f000 f8c1 	bl	8016e34 <_lseek_r>
 8016cb2:	1c43      	adds	r3, r0, #1
 8016cb4:	89a3      	ldrh	r3, [r4, #12]
 8016cb6:	bf15      	itete	ne
 8016cb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016cba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016cbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016cc2:	81a3      	strheq	r3, [r4, #12]
 8016cc4:	bf18      	it	ne
 8016cc6:	81a3      	strhne	r3, [r4, #12]
 8016cc8:	bd10      	pop	{r4, pc}

08016cca <__sclose>:
 8016cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cce:	f000 b8a1 	b.w	8016e14 <_close_r>

08016cd2 <_vsniprintf_r>:
 8016cd2:	b530      	push	{r4, r5, lr}
 8016cd4:	4614      	mov	r4, r2
 8016cd6:	2c00      	cmp	r4, #0
 8016cd8:	b09b      	sub	sp, #108	@ 0x6c
 8016cda:	4605      	mov	r5, r0
 8016cdc:	461a      	mov	r2, r3
 8016cde:	da05      	bge.n	8016cec <_vsniprintf_r+0x1a>
 8016ce0:	238b      	movs	r3, #139	@ 0x8b
 8016ce2:	6003      	str	r3, [r0, #0]
 8016ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ce8:	b01b      	add	sp, #108	@ 0x6c
 8016cea:	bd30      	pop	{r4, r5, pc}
 8016cec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016cf0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016cf4:	bf14      	ite	ne
 8016cf6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016cfa:	4623      	moveq	r3, r4
 8016cfc:	9302      	str	r3, [sp, #8]
 8016cfe:	9305      	str	r3, [sp, #20]
 8016d00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016d04:	9100      	str	r1, [sp, #0]
 8016d06:	9104      	str	r1, [sp, #16]
 8016d08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016d0c:	4669      	mov	r1, sp
 8016d0e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016d10:	f000 f9f2 	bl	80170f8 <_svfiprintf_r>
 8016d14:	1c43      	adds	r3, r0, #1
 8016d16:	bfbc      	itt	lt
 8016d18:	238b      	movlt	r3, #139	@ 0x8b
 8016d1a:	602b      	strlt	r3, [r5, #0]
 8016d1c:	2c00      	cmp	r4, #0
 8016d1e:	d0e3      	beq.n	8016ce8 <_vsniprintf_r+0x16>
 8016d20:	9b00      	ldr	r3, [sp, #0]
 8016d22:	2200      	movs	r2, #0
 8016d24:	701a      	strb	r2, [r3, #0]
 8016d26:	e7df      	b.n	8016ce8 <_vsniprintf_r+0x16>

08016d28 <vsniprintf>:
 8016d28:	b507      	push	{r0, r1, r2, lr}
 8016d2a:	9300      	str	r3, [sp, #0]
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	460a      	mov	r2, r1
 8016d30:	4601      	mov	r1, r0
 8016d32:	4803      	ldr	r0, [pc, #12]	@ (8016d40 <vsniprintf+0x18>)
 8016d34:	6800      	ldr	r0, [r0, #0]
 8016d36:	f7ff ffcc 	bl	8016cd2 <_vsniprintf_r>
 8016d3a:	b003      	add	sp, #12
 8016d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d40:	20000148 	.word	0x20000148

08016d44 <memcmp>:
 8016d44:	b510      	push	{r4, lr}
 8016d46:	3901      	subs	r1, #1
 8016d48:	4402      	add	r2, r0
 8016d4a:	4290      	cmp	r0, r2
 8016d4c:	d101      	bne.n	8016d52 <memcmp+0xe>
 8016d4e:	2000      	movs	r0, #0
 8016d50:	e005      	b.n	8016d5e <memcmp+0x1a>
 8016d52:	7803      	ldrb	r3, [r0, #0]
 8016d54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016d58:	42a3      	cmp	r3, r4
 8016d5a:	d001      	beq.n	8016d60 <memcmp+0x1c>
 8016d5c:	1b18      	subs	r0, r3, r4
 8016d5e:	bd10      	pop	{r4, pc}
 8016d60:	3001      	adds	r0, #1
 8016d62:	e7f2      	b.n	8016d4a <memcmp+0x6>

08016d64 <memmove>:
 8016d64:	4288      	cmp	r0, r1
 8016d66:	b510      	push	{r4, lr}
 8016d68:	eb01 0402 	add.w	r4, r1, r2
 8016d6c:	d902      	bls.n	8016d74 <memmove+0x10>
 8016d6e:	4284      	cmp	r4, r0
 8016d70:	4623      	mov	r3, r4
 8016d72:	d807      	bhi.n	8016d84 <memmove+0x20>
 8016d74:	1e43      	subs	r3, r0, #1
 8016d76:	42a1      	cmp	r1, r4
 8016d78:	d008      	beq.n	8016d8c <memmove+0x28>
 8016d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d82:	e7f8      	b.n	8016d76 <memmove+0x12>
 8016d84:	4402      	add	r2, r0
 8016d86:	4601      	mov	r1, r0
 8016d88:	428a      	cmp	r2, r1
 8016d8a:	d100      	bne.n	8016d8e <memmove+0x2a>
 8016d8c:	bd10      	pop	{r4, pc}
 8016d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d96:	e7f7      	b.n	8016d88 <memmove+0x24>

08016d98 <memset>:
 8016d98:	4402      	add	r2, r0
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	4293      	cmp	r3, r2
 8016d9e:	d100      	bne.n	8016da2 <memset+0xa>
 8016da0:	4770      	bx	lr
 8016da2:	f803 1b01 	strb.w	r1, [r3], #1
 8016da6:	e7f9      	b.n	8016d9c <memset+0x4>

08016da8 <strchr>:
 8016da8:	b2c9      	uxtb	r1, r1
 8016daa:	4603      	mov	r3, r0
 8016dac:	4618      	mov	r0, r3
 8016dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016db2:	b112      	cbz	r2, 8016dba <strchr+0x12>
 8016db4:	428a      	cmp	r2, r1
 8016db6:	d1f9      	bne.n	8016dac <strchr+0x4>
 8016db8:	4770      	bx	lr
 8016dba:	2900      	cmp	r1, #0
 8016dbc:	bf18      	it	ne
 8016dbe:	2000      	movne	r0, #0
 8016dc0:	4770      	bx	lr

08016dc2 <strncmp>:
 8016dc2:	b510      	push	{r4, lr}
 8016dc4:	b16a      	cbz	r2, 8016de2 <strncmp+0x20>
 8016dc6:	3901      	subs	r1, #1
 8016dc8:	1884      	adds	r4, r0, r2
 8016dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d103      	bne.n	8016dde <strncmp+0x1c>
 8016dd6:	42a0      	cmp	r0, r4
 8016dd8:	d001      	beq.n	8016dde <strncmp+0x1c>
 8016dda:	2a00      	cmp	r2, #0
 8016ddc:	d1f5      	bne.n	8016dca <strncmp+0x8>
 8016dde:	1ad0      	subs	r0, r2, r3
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	4610      	mov	r0, r2
 8016de4:	e7fc      	b.n	8016de0 <strncmp+0x1e>

08016de6 <strstr>:
 8016de6:	780a      	ldrb	r2, [r1, #0]
 8016de8:	b570      	push	{r4, r5, r6, lr}
 8016dea:	b96a      	cbnz	r2, 8016e08 <strstr+0x22>
 8016dec:	bd70      	pop	{r4, r5, r6, pc}
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d109      	bne.n	8016e06 <strstr+0x20>
 8016df2:	460c      	mov	r4, r1
 8016df4:	4605      	mov	r5, r0
 8016df6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d0f6      	beq.n	8016dec <strstr+0x6>
 8016dfe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016e02:	429e      	cmp	r6, r3
 8016e04:	d0f7      	beq.n	8016df6 <strstr+0x10>
 8016e06:	3001      	adds	r0, #1
 8016e08:	7803      	ldrb	r3, [r0, #0]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d1ef      	bne.n	8016dee <strstr+0x8>
 8016e0e:	4618      	mov	r0, r3
 8016e10:	e7ec      	b.n	8016dec <strstr+0x6>
	...

08016e14 <_close_r>:
 8016e14:	b538      	push	{r3, r4, r5, lr}
 8016e16:	4d06      	ldr	r5, [pc, #24]	@ (8016e30 <_close_r+0x1c>)
 8016e18:	2300      	movs	r3, #0
 8016e1a:	4604      	mov	r4, r0
 8016e1c:	4608      	mov	r0, r1
 8016e1e:	602b      	str	r3, [r5, #0]
 8016e20:	f7ea fe3e 	bl	8001aa0 <_close>
 8016e24:	1c43      	adds	r3, r0, #1
 8016e26:	d102      	bne.n	8016e2e <_close_r+0x1a>
 8016e28:	682b      	ldr	r3, [r5, #0]
 8016e2a:	b103      	cbz	r3, 8016e2e <_close_r+0x1a>
 8016e2c:	6023      	str	r3, [r4, #0]
 8016e2e:	bd38      	pop	{r3, r4, r5, pc}
 8016e30:	2000cca0 	.word	0x2000cca0

08016e34 <_lseek_r>:
 8016e34:	b538      	push	{r3, r4, r5, lr}
 8016e36:	4d07      	ldr	r5, [pc, #28]	@ (8016e54 <_lseek_r+0x20>)
 8016e38:	4604      	mov	r4, r0
 8016e3a:	4608      	mov	r0, r1
 8016e3c:	4611      	mov	r1, r2
 8016e3e:	2200      	movs	r2, #0
 8016e40:	602a      	str	r2, [r5, #0]
 8016e42:	461a      	mov	r2, r3
 8016e44:	f7ea fe53 	bl	8001aee <_lseek>
 8016e48:	1c43      	adds	r3, r0, #1
 8016e4a:	d102      	bne.n	8016e52 <_lseek_r+0x1e>
 8016e4c:	682b      	ldr	r3, [r5, #0]
 8016e4e:	b103      	cbz	r3, 8016e52 <_lseek_r+0x1e>
 8016e50:	6023      	str	r3, [r4, #0]
 8016e52:	bd38      	pop	{r3, r4, r5, pc}
 8016e54:	2000cca0 	.word	0x2000cca0

08016e58 <_read_r>:
 8016e58:	b538      	push	{r3, r4, r5, lr}
 8016e5a:	4d07      	ldr	r5, [pc, #28]	@ (8016e78 <_read_r+0x20>)
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	4608      	mov	r0, r1
 8016e60:	4611      	mov	r1, r2
 8016e62:	2200      	movs	r2, #0
 8016e64:	602a      	str	r2, [r5, #0]
 8016e66:	461a      	mov	r2, r3
 8016e68:	f7ea fde1 	bl	8001a2e <_read>
 8016e6c:	1c43      	adds	r3, r0, #1
 8016e6e:	d102      	bne.n	8016e76 <_read_r+0x1e>
 8016e70:	682b      	ldr	r3, [r5, #0]
 8016e72:	b103      	cbz	r3, 8016e76 <_read_r+0x1e>
 8016e74:	6023      	str	r3, [r4, #0]
 8016e76:	bd38      	pop	{r3, r4, r5, pc}
 8016e78:	2000cca0 	.word	0x2000cca0

08016e7c <_sbrk_r>:
 8016e7c:	b538      	push	{r3, r4, r5, lr}
 8016e7e:	4d06      	ldr	r5, [pc, #24]	@ (8016e98 <_sbrk_r+0x1c>)
 8016e80:	2300      	movs	r3, #0
 8016e82:	4604      	mov	r4, r0
 8016e84:	4608      	mov	r0, r1
 8016e86:	602b      	str	r3, [r5, #0]
 8016e88:	f7ea fe3e 	bl	8001b08 <_sbrk>
 8016e8c:	1c43      	adds	r3, r0, #1
 8016e8e:	d102      	bne.n	8016e96 <_sbrk_r+0x1a>
 8016e90:	682b      	ldr	r3, [r5, #0]
 8016e92:	b103      	cbz	r3, 8016e96 <_sbrk_r+0x1a>
 8016e94:	6023      	str	r3, [r4, #0]
 8016e96:	bd38      	pop	{r3, r4, r5, pc}
 8016e98:	2000cca0 	.word	0x2000cca0

08016e9c <_write_r>:
 8016e9c:	b538      	push	{r3, r4, r5, lr}
 8016e9e:	4d07      	ldr	r5, [pc, #28]	@ (8016ebc <_write_r+0x20>)
 8016ea0:	4604      	mov	r4, r0
 8016ea2:	4608      	mov	r0, r1
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	602a      	str	r2, [r5, #0]
 8016eaa:	461a      	mov	r2, r3
 8016eac:	f7ea fddc 	bl	8001a68 <_write>
 8016eb0:	1c43      	adds	r3, r0, #1
 8016eb2:	d102      	bne.n	8016eba <_write_r+0x1e>
 8016eb4:	682b      	ldr	r3, [r5, #0]
 8016eb6:	b103      	cbz	r3, 8016eba <_write_r+0x1e>
 8016eb8:	6023      	str	r3, [r4, #0]
 8016eba:	bd38      	pop	{r3, r4, r5, pc}
 8016ebc:	2000cca0 	.word	0x2000cca0

08016ec0 <__errno>:
 8016ec0:	4b01      	ldr	r3, [pc, #4]	@ (8016ec8 <__errno+0x8>)
 8016ec2:	6818      	ldr	r0, [r3, #0]
 8016ec4:	4770      	bx	lr
 8016ec6:	bf00      	nop
 8016ec8:	20000148 	.word	0x20000148

08016ecc <__libc_init_array>:
 8016ecc:	b570      	push	{r4, r5, r6, lr}
 8016ece:	4d0d      	ldr	r5, [pc, #52]	@ (8016f04 <__libc_init_array+0x38>)
 8016ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8016f08 <__libc_init_array+0x3c>)
 8016ed2:	1b64      	subs	r4, r4, r5
 8016ed4:	10a4      	asrs	r4, r4, #2
 8016ed6:	2600      	movs	r6, #0
 8016ed8:	42a6      	cmp	r6, r4
 8016eda:	d109      	bne.n	8016ef0 <__libc_init_array+0x24>
 8016edc:	4d0b      	ldr	r5, [pc, #44]	@ (8016f0c <__libc_init_array+0x40>)
 8016ede:	4c0c      	ldr	r4, [pc, #48]	@ (8016f10 <__libc_init_array+0x44>)
 8016ee0:	f000 fef8 	bl	8017cd4 <_init>
 8016ee4:	1b64      	subs	r4, r4, r5
 8016ee6:	10a4      	asrs	r4, r4, #2
 8016ee8:	2600      	movs	r6, #0
 8016eea:	42a6      	cmp	r6, r4
 8016eec:	d105      	bne.n	8016efa <__libc_init_array+0x2e>
 8016eee:	bd70      	pop	{r4, r5, r6, pc}
 8016ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ef4:	4798      	blx	r3
 8016ef6:	3601      	adds	r6, #1
 8016ef8:	e7ee      	b.n	8016ed8 <__libc_init_array+0xc>
 8016efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8016efe:	4798      	blx	r3
 8016f00:	3601      	adds	r6, #1
 8016f02:	e7f2      	b.n	8016eea <__libc_init_array+0x1e>
 8016f04:	08018b88 	.word	0x08018b88
 8016f08:	08018b88 	.word	0x08018b88
 8016f0c:	08018b88 	.word	0x08018b88
 8016f10:	08018b94 	.word	0x08018b94

08016f14 <__retarget_lock_init_recursive>:
 8016f14:	4770      	bx	lr

08016f16 <__retarget_lock_acquire_recursive>:
 8016f16:	4770      	bx	lr

08016f18 <__retarget_lock_release_recursive>:
 8016f18:	4770      	bx	lr

08016f1a <strcpy>:
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f20:	f803 2b01 	strb.w	r2, [r3], #1
 8016f24:	2a00      	cmp	r2, #0
 8016f26:	d1f9      	bne.n	8016f1c <strcpy+0x2>
 8016f28:	4770      	bx	lr

08016f2a <memcpy>:
 8016f2a:	440a      	add	r2, r1
 8016f2c:	4291      	cmp	r1, r2
 8016f2e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016f32:	d100      	bne.n	8016f36 <memcpy+0xc>
 8016f34:	4770      	bx	lr
 8016f36:	b510      	push	{r4, lr}
 8016f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f40:	4291      	cmp	r1, r2
 8016f42:	d1f9      	bne.n	8016f38 <memcpy+0xe>
 8016f44:	bd10      	pop	{r4, pc}
	...

08016f48 <__assert_func>:
 8016f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f4a:	4614      	mov	r4, r2
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	4b09      	ldr	r3, [pc, #36]	@ (8016f74 <__assert_func+0x2c>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	4605      	mov	r5, r0
 8016f54:	68d8      	ldr	r0, [r3, #12]
 8016f56:	b954      	cbnz	r4, 8016f6e <__assert_func+0x26>
 8016f58:	4b07      	ldr	r3, [pc, #28]	@ (8016f78 <__assert_func+0x30>)
 8016f5a:	461c      	mov	r4, r3
 8016f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f60:	9100      	str	r1, [sp, #0]
 8016f62:	462b      	mov	r3, r5
 8016f64:	4905      	ldr	r1, [pc, #20]	@ (8016f7c <__assert_func+0x34>)
 8016f66:	f000 fd3f 	bl	80179e8 <fiprintf>
 8016f6a:	f000 fde3 	bl	8017b34 <abort>
 8016f6e:	4b04      	ldr	r3, [pc, #16]	@ (8016f80 <__assert_func+0x38>)
 8016f70:	e7f4      	b.n	8016f5c <__assert_func+0x14>
 8016f72:	bf00      	nop
 8016f74:	20000148 	.word	0x20000148
 8016f78:	08018b4b 	.word	0x08018b4b
 8016f7c:	08018b1d 	.word	0x08018b1d
 8016f80:	08018b10 	.word	0x08018b10

08016f84 <__env_lock>:
 8016f84:	4801      	ldr	r0, [pc, #4]	@ (8016f8c <__env_lock+0x8>)
 8016f86:	f7ff bfc6 	b.w	8016f16 <__retarget_lock_acquire_recursive>
 8016f8a:	bf00      	nop
 8016f8c:	2000cca4 	.word	0x2000cca4

08016f90 <__env_unlock>:
 8016f90:	4801      	ldr	r0, [pc, #4]	@ (8016f98 <__env_unlock+0x8>)
 8016f92:	f7ff bfc1 	b.w	8016f18 <__retarget_lock_release_recursive>
 8016f96:	bf00      	nop
 8016f98:	2000cca4 	.word	0x2000cca4

08016f9c <_free_r>:
 8016f9c:	b538      	push	{r3, r4, r5, lr}
 8016f9e:	4605      	mov	r5, r0
 8016fa0:	2900      	cmp	r1, #0
 8016fa2:	d041      	beq.n	8017028 <_free_r+0x8c>
 8016fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fa8:	1f0c      	subs	r4, r1, #4
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	bfb8      	it	lt
 8016fae:	18e4      	addlt	r4, r4, r3
 8016fb0:	f7ff fc1e 	bl	80167f0 <__malloc_lock>
 8016fb4:	4a1d      	ldr	r2, [pc, #116]	@ (801702c <_free_r+0x90>)
 8016fb6:	6813      	ldr	r3, [r2, #0]
 8016fb8:	b933      	cbnz	r3, 8016fc8 <_free_r+0x2c>
 8016fba:	6063      	str	r3, [r4, #4]
 8016fbc:	6014      	str	r4, [r2, #0]
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fc4:	f7ff bc1a 	b.w	80167fc <__malloc_unlock>
 8016fc8:	42a3      	cmp	r3, r4
 8016fca:	d908      	bls.n	8016fde <_free_r+0x42>
 8016fcc:	6820      	ldr	r0, [r4, #0]
 8016fce:	1821      	adds	r1, r4, r0
 8016fd0:	428b      	cmp	r3, r1
 8016fd2:	bf01      	itttt	eq
 8016fd4:	6819      	ldreq	r1, [r3, #0]
 8016fd6:	685b      	ldreq	r3, [r3, #4]
 8016fd8:	1809      	addeq	r1, r1, r0
 8016fda:	6021      	streq	r1, [r4, #0]
 8016fdc:	e7ed      	b.n	8016fba <_free_r+0x1e>
 8016fde:	461a      	mov	r2, r3
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	b10b      	cbz	r3, 8016fe8 <_free_r+0x4c>
 8016fe4:	42a3      	cmp	r3, r4
 8016fe6:	d9fa      	bls.n	8016fde <_free_r+0x42>
 8016fe8:	6811      	ldr	r1, [r2, #0]
 8016fea:	1850      	adds	r0, r2, r1
 8016fec:	42a0      	cmp	r0, r4
 8016fee:	d10b      	bne.n	8017008 <_free_r+0x6c>
 8016ff0:	6820      	ldr	r0, [r4, #0]
 8016ff2:	4401      	add	r1, r0
 8016ff4:	1850      	adds	r0, r2, r1
 8016ff6:	4283      	cmp	r3, r0
 8016ff8:	6011      	str	r1, [r2, #0]
 8016ffa:	d1e0      	bne.n	8016fbe <_free_r+0x22>
 8016ffc:	6818      	ldr	r0, [r3, #0]
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	6053      	str	r3, [r2, #4]
 8017002:	4408      	add	r0, r1
 8017004:	6010      	str	r0, [r2, #0]
 8017006:	e7da      	b.n	8016fbe <_free_r+0x22>
 8017008:	d902      	bls.n	8017010 <_free_r+0x74>
 801700a:	230c      	movs	r3, #12
 801700c:	602b      	str	r3, [r5, #0]
 801700e:	e7d6      	b.n	8016fbe <_free_r+0x22>
 8017010:	6820      	ldr	r0, [r4, #0]
 8017012:	1821      	adds	r1, r4, r0
 8017014:	428b      	cmp	r3, r1
 8017016:	bf04      	itt	eq
 8017018:	6819      	ldreq	r1, [r3, #0]
 801701a:	685b      	ldreq	r3, [r3, #4]
 801701c:	6063      	str	r3, [r4, #4]
 801701e:	bf04      	itt	eq
 8017020:	1809      	addeq	r1, r1, r0
 8017022:	6021      	streq	r1, [r4, #0]
 8017024:	6054      	str	r4, [r2, #4]
 8017026:	e7ca      	b.n	8016fbe <_free_r+0x22>
 8017028:	bd38      	pop	{r3, r4, r5, pc}
 801702a:	bf00      	nop
 801702c:	2000cb60 	.word	0x2000cb60

08017030 <_malloc_usable_size_r>:
 8017030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017034:	1f18      	subs	r0, r3, #4
 8017036:	2b00      	cmp	r3, #0
 8017038:	bfbc      	itt	lt
 801703a:	580b      	ldrlt	r3, [r1, r0]
 801703c:	18c0      	addlt	r0, r0, r3
 801703e:	4770      	bx	lr

08017040 <__ssputs_r>:
 8017040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017044:	688e      	ldr	r6, [r1, #8]
 8017046:	461f      	mov	r7, r3
 8017048:	42be      	cmp	r6, r7
 801704a:	680b      	ldr	r3, [r1, #0]
 801704c:	4682      	mov	sl, r0
 801704e:	460c      	mov	r4, r1
 8017050:	4690      	mov	r8, r2
 8017052:	d82d      	bhi.n	80170b0 <__ssputs_r+0x70>
 8017054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017058:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801705c:	d026      	beq.n	80170ac <__ssputs_r+0x6c>
 801705e:	6965      	ldr	r5, [r4, #20]
 8017060:	6909      	ldr	r1, [r1, #16]
 8017062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017066:	eba3 0901 	sub.w	r9, r3, r1
 801706a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801706e:	1c7b      	adds	r3, r7, #1
 8017070:	444b      	add	r3, r9
 8017072:	106d      	asrs	r5, r5, #1
 8017074:	429d      	cmp	r5, r3
 8017076:	bf38      	it	cc
 8017078:	461d      	movcc	r5, r3
 801707a:	0553      	lsls	r3, r2, #21
 801707c:	d527      	bpl.n	80170ce <__ssputs_r+0x8e>
 801707e:	4629      	mov	r1, r5
 8017080:	f7ff fb36 	bl	80166f0 <_malloc_r>
 8017084:	4606      	mov	r6, r0
 8017086:	b360      	cbz	r0, 80170e2 <__ssputs_r+0xa2>
 8017088:	6921      	ldr	r1, [r4, #16]
 801708a:	464a      	mov	r2, r9
 801708c:	f7ff ff4d 	bl	8016f2a <memcpy>
 8017090:	89a3      	ldrh	r3, [r4, #12]
 8017092:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801709a:	81a3      	strh	r3, [r4, #12]
 801709c:	6126      	str	r6, [r4, #16]
 801709e:	6165      	str	r5, [r4, #20]
 80170a0:	444e      	add	r6, r9
 80170a2:	eba5 0509 	sub.w	r5, r5, r9
 80170a6:	6026      	str	r6, [r4, #0]
 80170a8:	60a5      	str	r5, [r4, #8]
 80170aa:	463e      	mov	r6, r7
 80170ac:	42be      	cmp	r6, r7
 80170ae:	d900      	bls.n	80170b2 <__ssputs_r+0x72>
 80170b0:	463e      	mov	r6, r7
 80170b2:	6820      	ldr	r0, [r4, #0]
 80170b4:	4632      	mov	r2, r6
 80170b6:	4641      	mov	r1, r8
 80170b8:	f7ff fe54 	bl	8016d64 <memmove>
 80170bc:	68a3      	ldr	r3, [r4, #8]
 80170be:	1b9b      	subs	r3, r3, r6
 80170c0:	60a3      	str	r3, [r4, #8]
 80170c2:	6823      	ldr	r3, [r4, #0]
 80170c4:	4433      	add	r3, r6
 80170c6:	6023      	str	r3, [r4, #0]
 80170c8:	2000      	movs	r0, #0
 80170ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170ce:	462a      	mov	r2, r5
 80170d0:	f7ff fc0e 	bl	80168f0 <_realloc_r>
 80170d4:	4606      	mov	r6, r0
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d1e0      	bne.n	801709c <__ssputs_r+0x5c>
 80170da:	6921      	ldr	r1, [r4, #16]
 80170dc:	4650      	mov	r0, sl
 80170de:	f7ff ff5d 	bl	8016f9c <_free_r>
 80170e2:	230c      	movs	r3, #12
 80170e4:	f8ca 3000 	str.w	r3, [sl]
 80170e8:	89a3      	ldrh	r3, [r4, #12]
 80170ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170ee:	81a3      	strh	r3, [r4, #12]
 80170f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170f4:	e7e9      	b.n	80170ca <__ssputs_r+0x8a>
	...

080170f8 <_svfiprintf_r>:
 80170f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170fc:	4698      	mov	r8, r3
 80170fe:	898b      	ldrh	r3, [r1, #12]
 8017100:	061b      	lsls	r3, r3, #24
 8017102:	b09d      	sub	sp, #116	@ 0x74
 8017104:	4607      	mov	r7, r0
 8017106:	460d      	mov	r5, r1
 8017108:	4614      	mov	r4, r2
 801710a:	d510      	bpl.n	801712e <_svfiprintf_r+0x36>
 801710c:	690b      	ldr	r3, [r1, #16]
 801710e:	b973      	cbnz	r3, 801712e <_svfiprintf_r+0x36>
 8017110:	2140      	movs	r1, #64	@ 0x40
 8017112:	f7ff faed 	bl	80166f0 <_malloc_r>
 8017116:	6028      	str	r0, [r5, #0]
 8017118:	6128      	str	r0, [r5, #16]
 801711a:	b930      	cbnz	r0, 801712a <_svfiprintf_r+0x32>
 801711c:	230c      	movs	r3, #12
 801711e:	603b      	str	r3, [r7, #0]
 8017120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017124:	b01d      	add	sp, #116	@ 0x74
 8017126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801712a:	2340      	movs	r3, #64	@ 0x40
 801712c:	616b      	str	r3, [r5, #20]
 801712e:	2300      	movs	r3, #0
 8017130:	9309      	str	r3, [sp, #36]	@ 0x24
 8017132:	2320      	movs	r3, #32
 8017134:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017138:	f8cd 800c 	str.w	r8, [sp, #12]
 801713c:	2330      	movs	r3, #48	@ 0x30
 801713e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80172dc <_svfiprintf_r+0x1e4>
 8017142:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017146:	f04f 0901 	mov.w	r9, #1
 801714a:	4623      	mov	r3, r4
 801714c:	469a      	mov	sl, r3
 801714e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017152:	b10a      	cbz	r2, 8017158 <_svfiprintf_r+0x60>
 8017154:	2a25      	cmp	r2, #37	@ 0x25
 8017156:	d1f9      	bne.n	801714c <_svfiprintf_r+0x54>
 8017158:	ebba 0b04 	subs.w	fp, sl, r4
 801715c:	d00b      	beq.n	8017176 <_svfiprintf_r+0x7e>
 801715e:	465b      	mov	r3, fp
 8017160:	4622      	mov	r2, r4
 8017162:	4629      	mov	r1, r5
 8017164:	4638      	mov	r0, r7
 8017166:	f7ff ff6b 	bl	8017040 <__ssputs_r>
 801716a:	3001      	adds	r0, #1
 801716c:	f000 80a7 	beq.w	80172be <_svfiprintf_r+0x1c6>
 8017170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017172:	445a      	add	r2, fp
 8017174:	9209      	str	r2, [sp, #36]	@ 0x24
 8017176:	f89a 3000 	ldrb.w	r3, [sl]
 801717a:	2b00      	cmp	r3, #0
 801717c:	f000 809f 	beq.w	80172be <_svfiprintf_r+0x1c6>
 8017180:	2300      	movs	r3, #0
 8017182:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801718a:	f10a 0a01 	add.w	sl, sl, #1
 801718e:	9304      	str	r3, [sp, #16]
 8017190:	9307      	str	r3, [sp, #28]
 8017192:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017196:	931a      	str	r3, [sp, #104]	@ 0x68
 8017198:	4654      	mov	r4, sl
 801719a:	2205      	movs	r2, #5
 801719c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171a0:	484e      	ldr	r0, [pc, #312]	@ (80172dc <_svfiprintf_r+0x1e4>)
 80171a2:	f7e9 f855 	bl	8000250 <memchr>
 80171a6:	9a04      	ldr	r2, [sp, #16]
 80171a8:	b9d8      	cbnz	r0, 80171e2 <_svfiprintf_r+0xea>
 80171aa:	06d0      	lsls	r0, r2, #27
 80171ac:	bf44      	itt	mi
 80171ae:	2320      	movmi	r3, #32
 80171b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171b4:	0711      	lsls	r1, r2, #28
 80171b6:	bf44      	itt	mi
 80171b8:	232b      	movmi	r3, #43	@ 0x2b
 80171ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171be:	f89a 3000 	ldrb.w	r3, [sl]
 80171c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80171c4:	d015      	beq.n	80171f2 <_svfiprintf_r+0xfa>
 80171c6:	9a07      	ldr	r2, [sp, #28]
 80171c8:	4654      	mov	r4, sl
 80171ca:	2000      	movs	r0, #0
 80171cc:	f04f 0c0a 	mov.w	ip, #10
 80171d0:	4621      	mov	r1, r4
 80171d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171d6:	3b30      	subs	r3, #48	@ 0x30
 80171d8:	2b09      	cmp	r3, #9
 80171da:	d94b      	bls.n	8017274 <_svfiprintf_r+0x17c>
 80171dc:	b1b0      	cbz	r0, 801720c <_svfiprintf_r+0x114>
 80171de:	9207      	str	r2, [sp, #28]
 80171e0:	e014      	b.n	801720c <_svfiprintf_r+0x114>
 80171e2:	eba0 0308 	sub.w	r3, r0, r8
 80171e6:	fa09 f303 	lsl.w	r3, r9, r3
 80171ea:	4313      	orrs	r3, r2
 80171ec:	9304      	str	r3, [sp, #16]
 80171ee:	46a2      	mov	sl, r4
 80171f0:	e7d2      	b.n	8017198 <_svfiprintf_r+0xa0>
 80171f2:	9b03      	ldr	r3, [sp, #12]
 80171f4:	1d19      	adds	r1, r3, #4
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	9103      	str	r1, [sp, #12]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	bfbb      	ittet	lt
 80171fe:	425b      	neglt	r3, r3
 8017200:	f042 0202 	orrlt.w	r2, r2, #2
 8017204:	9307      	strge	r3, [sp, #28]
 8017206:	9307      	strlt	r3, [sp, #28]
 8017208:	bfb8      	it	lt
 801720a:	9204      	strlt	r2, [sp, #16]
 801720c:	7823      	ldrb	r3, [r4, #0]
 801720e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017210:	d10a      	bne.n	8017228 <_svfiprintf_r+0x130>
 8017212:	7863      	ldrb	r3, [r4, #1]
 8017214:	2b2a      	cmp	r3, #42	@ 0x2a
 8017216:	d132      	bne.n	801727e <_svfiprintf_r+0x186>
 8017218:	9b03      	ldr	r3, [sp, #12]
 801721a:	1d1a      	adds	r2, r3, #4
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	9203      	str	r2, [sp, #12]
 8017220:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017224:	3402      	adds	r4, #2
 8017226:	9305      	str	r3, [sp, #20]
 8017228:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80172ec <_svfiprintf_r+0x1f4>
 801722c:	7821      	ldrb	r1, [r4, #0]
 801722e:	2203      	movs	r2, #3
 8017230:	4650      	mov	r0, sl
 8017232:	f7e9 f80d 	bl	8000250 <memchr>
 8017236:	b138      	cbz	r0, 8017248 <_svfiprintf_r+0x150>
 8017238:	9b04      	ldr	r3, [sp, #16]
 801723a:	eba0 000a 	sub.w	r0, r0, sl
 801723e:	2240      	movs	r2, #64	@ 0x40
 8017240:	4082      	lsls	r2, r0
 8017242:	4313      	orrs	r3, r2
 8017244:	3401      	adds	r4, #1
 8017246:	9304      	str	r3, [sp, #16]
 8017248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801724c:	4824      	ldr	r0, [pc, #144]	@ (80172e0 <_svfiprintf_r+0x1e8>)
 801724e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017252:	2206      	movs	r2, #6
 8017254:	f7e8 fffc 	bl	8000250 <memchr>
 8017258:	2800      	cmp	r0, #0
 801725a:	d036      	beq.n	80172ca <_svfiprintf_r+0x1d2>
 801725c:	4b21      	ldr	r3, [pc, #132]	@ (80172e4 <_svfiprintf_r+0x1ec>)
 801725e:	bb1b      	cbnz	r3, 80172a8 <_svfiprintf_r+0x1b0>
 8017260:	9b03      	ldr	r3, [sp, #12]
 8017262:	3307      	adds	r3, #7
 8017264:	f023 0307 	bic.w	r3, r3, #7
 8017268:	3308      	adds	r3, #8
 801726a:	9303      	str	r3, [sp, #12]
 801726c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801726e:	4433      	add	r3, r6
 8017270:	9309      	str	r3, [sp, #36]	@ 0x24
 8017272:	e76a      	b.n	801714a <_svfiprintf_r+0x52>
 8017274:	fb0c 3202 	mla	r2, ip, r2, r3
 8017278:	460c      	mov	r4, r1
 801727a:	2001      	movs	r0, #1
 801727c:	e7a8      	b.n	80171d0 <_svfiprintf_r+0xd8>
 801727e:	2300      	movs	r3, #0
 8017280:	3401      	adds	r4, #1
 8017282:	9305      	str	r3, [sp, #20]
 8017284:	4619      	mov	r1, r3
 8017286:	f04f 0c0a 	mov.w	ip, #10
 801728a:	4620      	mov	r0, r4
 801728c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017290:	3a30      	subs	r2, #48	@ 0x30
 8017292:	2a09      	cmp	r2, #9
 8017294:	d903      	bls.n	801729e <_svfiprintf_r+0x1a6>
 8017296:	2b00      	cmp	r3, #0
 8017298:	d0c6      	beq.n	8017228 <_svfiprintf_r+0x130>
 801729a:	9105      	str	r1, [sp, #20]
 801729c:	e7c4      	b.n	8017228 <_svfiprintf_r+0x130>
 801729e:	fb0c 2101 	mla	r1, ip, r1, r2
 80172a2:	4604      	mov	r4, r0
 80172a4:	2301      	movs	r3, #1
 80172a6:	e7f0      	b.n	801728a <_svfiprintf_r+0x192>
 80172a8:	ab03      	add	r3, sp, #12
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	462a      	mov	r2, r5
 80172ae:	4b0e      	ldr	r3, [pc, #56]	@ (80172e8 <_svfiprintf_r+0x1f0>)
 80172b0:	a904      	add	r1, sp, #16
 80172b2:	4638      	mov	r0, r7
 80172b4:	f3af 8000 	nop.w
 80172b8:	1c42      	adds	r2, r0, #1
 80172ba:	4606      	mov	r6, r0
 80172bc:	d1d6      	bne.n	801726c <_svfiprintf_r+0x174>
 80172be:	89ab      	ldrh	r3, [r5, #12]
 80172c0:	065b      	lsls	r3, r3, #25
 80172c2:	f53f af2d 	bmi.w	8017120 <_svfiprintf_r+0x28>
 80172c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172c8:	e72c      	b.n	8017124 <_svfiprintf_r+0x2c>
 80172ca:	ab03      	add	r3, sp, #12
 80172cc:	9300      	str	r3, [sp, #0]
 80172ce:	462a      	mov	r2, r5
 80172d0:	4b05      	ldr	r3, [pc, #20]	@ (80172e8 <_svfiprintf_r+0x1f0>)
 80172d2:	a904      	add	r1, sp, #16
 80172d4:	4638      	mov	r0, r7
 80172d6:	f000 f9bb 	bl	8017650 <_printf_i>
 80172da:	e7ed      	b.n	80172b8 <_svfiprintf_r+0x1c0>
 80172dc:	08018b4c 	.word	0x08018b4c
 80172e0:	08018b56 	.word	0x08018b56
 80172e4:	00000000 	.word	0x00000000
 80172e8:	08017041 	.word	0x08017041
 80172ec:	08018b52 	.word	0x08018b52

080172f0 <__sfputc_r>:
 80172f0:	6893      	ldr	r3, [r2, #8]
 80172f2:	3b01      	subs	r3, #1
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	b410      	push	{r4}
 80172f8:	6093      	str	r3, [r2, #8]
 80172fa:	da08      	bge.n	801730e <__sfputc_r+0x1e>
 80172fc:	6994      	ldr	r4, [r2, #24]
 80172fe:	42a3      	cmp	r3, r4
 8017300:	db01      	blt.n	8017306 <__sfputc_r+0x16>
 8017302:	290a      	cmp	r1, #10
 8017304:	d103      	bne.n	801730e <__sfputc_r+0x1e>
 8017306:	f85d 4b04 	ldr.w	r4, [sp], #4
 801730a:	f000 bb7f 	b.w	8017a0c <__swbuf_r>
 801730e:	6813      	ldr	r3, [r2, #0]
 8017310:	1c58      	adds	r0, r3, #1
 8017312:	6010      	str	r0, [r2, #0]
 8017314:	7019      	strb	r1, [r3, #0]
 8017316:	4608      	mov	r0, r1
 8017318:	f85d 4b04 	ldr.w	r4, [sp], #4
 801731c:	4770      	bx	lr

0801731e <__sfputs_r>:
 801731e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017320:	4606      	mov	r6, r0
 8017322:	460f      	mov	r7, r1
 8017324:	4614      	mov	r4, r2
 8017326:	18d5      	adds	r5, r2, r3
 8017328:	42ac      	cmp	r4, r5
 801732a:	d101      	bne.n	8017330 <__sfputs_r+0x12>
 801732c:	2000      	movs	r0, #0
 801732e:	e007      	b.n	8017340 <__sfputs_r+0x22>
 8017330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017334:	463a      	mov	r2, r7
 8017336:	4630      	mov	r0, r6
 8017338:	f7ff ffda 	bl	80172f0 <__sfputc_r>
 801733c:	1c43      	adds	r3, r0, #1
 801733e:	d1f3      	bne.n	8017328 <__sfputs_r+0xa>
 8017340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017344 <_vfiprintf_r>:
 8017344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017348:	460d      	mov	r5, r1
 801734a:	b09d      	sub	sp, #116	@ 0x74
 801734c:	4614      	mov	r4, r2
 801734e:	4698      	mov	r8, r3
 8017350:	4606      	mov	r6, r0
 8017352:	b118      	cbz	r0, 801735c <_vfiprintf_r+0x18>
 8017354:	6a03      	ldr	r3, [r0, #32]
 8017356:	b90b      	cbnz	r3, 801735c <_vfiprintf_r+0x18>
 8017358:	f7ff fbfc 	bl	8016b54 <__sinit>
 801735c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801735e:	07d9      	lsls	r1, r3, #31
 8017360:	d405      	bmi.n	801736e <_vfiprintf_r+0x2a>
 8017362:	89ab      	ldrh	r3, [r5, #12]
 8017364:	059a      	lsls	r2, r3, #22
 8017366:	d402      	bmi.n	801736e <_vfiprintf_r+0x2a>
 8017368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801736a:	f7ff fdd4 	bl	8016f16 <__retarget_lock_acquire_recursive>
 801736e:	89ab      	ldrh	r3, [r5, #12]
 8017370:	071b      	lsls	r3, r3, #28
 8017372:	d501      	bpl.n	8017378 <_vfiprintf_r+0x34>
 8017374:	692b      	ldr	r3, [r5, #16]
 8017376:	b99b      	cbnz	r3, 80173a0 <_vfiprintf_r+0x5c>
 8017378:	4629      	mov	r1, r5
 801737a:	4630      	mov	r0, r6
 801737c:	f000 fb84 	bl	8017a88 <__swsetup_r>
 8017380:	b170      	cbz	r0, 80173a0 <_vfiprintf_r+0x5c>
 8017382:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017384:	07dc      	lsls	r4, r3, #31
 8017386:	d504      	bpl.n	8017392 <_vfiprintf_r+0x4e>
 8017388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801738c:	b01d      	add	sp, #116	@ 0x74
 801738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017392:	89ab      	ldrh	r3, [r5, #12]
 8017394:	0598      	lsls	r0, r3, #22
 8017396:	d4f7      	bmi.n	8017388 <_vfiprintf_r+0x44>
 8017398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801739a:	f7ff fdbd 	bl	8016f18 <__retarget_lock_release_recursive>
 801739e:	e7f3      	b.n	8017388 <_vfiprintf_r+0x44>
 80173a0:	2300      	movs	r3, #0
 80173a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80173a4:	2320      	movs	r3, #32
 80173a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80173aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80173ae:	2330      	movs	r3, #48	@ 0x30
 80173b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017560 <_vfiprintf_r+0x21c>
 80173b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80173b8:	f04f 0901 	mov.w	r9, #1
 80173bc:	4623      	mov	r3, r4
 80173be:	469a      	mov	sl, r3
 80173c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173c4:	b10a      	cbz	r2, 80173ca <_vfiprintf_r+0x86>
 80173c6:	2a25      	cmp	r2, #37	@ 0x25
 80173c8:	d1f9      	bne.n	80173be <_vfiprintf_r+0x7a>
 80173ca:	ebba 0b04 	subs.w	fp, sl, r4
 80173ce:	d00b      	beq.n	80173e8 <_vfiprintf_r+0xa4>
 80173d0:	465b      	mov	r3, fp
 80173d2:	4622      	mov	r2, r4
 80173d4:	4629      	mov	r1, r5
 80173d6:	4630      	mov	r0, r6
 80173d8:	f7ff ffa1 	bl	801731e <__sfputs_r>
 80173dc:	3001      	adds	r0, #1
 80173de:	f000 80a7 	beq.w	8017530 <_vfiprintf_r+0x1ec>
 80173e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80173e4:	445a      	add	r2, fp
 80173e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80173e8:	f89a 3000 	ldrb.w	r3, [sl]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	f000 809f 	beq.w	8017530 <_vfiprintf_r+0x1ec>
 80173f2:	2300      	movs	r3, #0
 80173f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80173f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173fc:	f10a 0a01 	add.w	sl, sl, #1
 8017400:	9304      	str	r3, [sp, #16]
 8017402:	9307      	str	r3, [sp, #28]
 8017404:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017408:	931a      	str	r3, [sp, #104]	@ 0x68
 801740a:	4654      	mov	r4, sl
 801740c:	2205      	movs	r2, #5
 801740e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017412:	4853      	ldr	r0, [pc, #332]	@ (8017560 <_vfiprintf_r+0x21c>)
 8017414:	f7e8 ff1c 	bl	8000250 <memchr>
 8017418:	9a04      	ldr	r2, [sp, #16]
 801741a:	b9d8      	cbnz	r0, 8017454 <_vfiprintf_r+0x110>
 801741c:	06d1      	lsls	r1, r2, #27
 801741e:	bf44      	itt	mi
 8017420:	2320      	movmi	r3, #32
 8017422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017426:	0713      	lsls	r3, r2, #28
 8017428:	bf44      	itt	mi
 801742a:	232b      	movmi	r3, #43	@ 0x2b
 801742c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017430:	f89a 3000 	ldrb.w	r3, [sl]
 8017434:	2b2a      	cmp	r3, #42	@ 0x2a
 8017436:	d015      	beq.n	8017464 <_vfiprintf_r+0x120>
 8017438:	9a07      	ldr	r2, [sp, #28]
 801743a:	4654      	mov	r4, sl
 801743c:	2000      	movs	r0, #0
 801743e:	f04f 0c0a 	mov.w	ip, #10
 8017442:	4621      	mov	r1, r4
 8017444:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017448:	3b30      	subs	r3, #48	@ 0x30
 801744a:	2b09      	cmp	r3, #9
 801744c:	d94b      	bls.n	80174e6 <_vfiprintf_r+0x1a2>
 801744e:	b1b0      	cbz	r0, 801747e <_vfiprintf_r+0x13a>
 8017450:	9207      	str	r2, [sp, #28]
 8017452:	e014      	b.n	801747e <_vfiprintf_r+0x13a>
 8017454:	eba0 0308 	sub.w	r3, r0, r8
 8017458:	fa09 f303 	lsl.w	r3, r9, r3
 801745c:	4313      	orrs	r3, r2
 801745e:	9304      	str	r3, [sp, #16]
 8017460:	46a2      	mov	sl, r4
 8017462:	e7d2      	b.n	801740a <_vfiprintf_r+0xc6>
 8017464:	9b03      	ldr	r3, [sp, #12]
 8017466:	1d19      	adds	r1, r3, #4
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	9103      	str	r1, [sp, #12]
 801746c:	2b00      	cmp	r3, #0
 801746e:	bfbb      	ittet	lt
 8017470:	425b      	neglt	r3, r3
 8017472:	f042 0202 	orrlt.w	r2, r2, #2
 8017476:	9307      	strge	r3, [sp, #28]
 8017478:	9307      	strlt	r3, [sp, #28]
 801747a:	bfb8      	it	lt
 801747c:	9204      	strlt	r2, [sp, #16]
 801747e:	7823      	ldrb	r3, [r4, #0]
 8017480:	2b2e      	cmp	r3, #46	@ 0x2e
 8017482:	d10a      	bne.n	801749a <_vfiprintf_r+0x156>
 8017484:	7863      	ldrb	r3, [r4, #1]
 8017486:	2b2a      	cmp	r3, #42	@ 0x2a
 8017488:	d132      	bne.n	80174f0 <_vfiprintf_r+0x1ac>
 801748a:	9b03      	ldr	r3, [sp, #12]
 801748c:	1d1a      	adds	r2, r3, #4
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	9203      	str	r2, [sp, #12]
 8017492:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017496:	3402      	adds	r4, #2
 8017498:	9305      	str	r3, [sp, #20]
 801749a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017570 <_vfiprintf_r+0x22c>
 801749e:	7821      	ldrb	r1, [r4, #0]
 80174a0:	2203      	movs	r2, #3
 80174a2:	4650      	mov	r0, sl
 80174a4:	f7e8 fed4 	bl	8000250 <memchr>
 80174a8:	b138      	cbz	r0, 80174ba <_vfiprintf_r+0x176>
 80174aa:	9b04      	ldr	r3, [sp, #16]
 80174ac:	eba0 000a 	sub.w	r0, r0, sl
 80174b0:	2240      	movs	r2, #64	@ 0x40
 80174b2:	4082      	lsls	r2, r0
 80174b4:	4313      	orrs	r3, r2
 80174b6:	3401      	adds	r4, #1
 80174b8:	9304      	str	r3, [sp, #16]
 80174ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174be:	4829      	ldr	r0, [pc, #164]	@ (8017564 <_vfiprintf_r+0x220>)
 80174c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80174c4:	2206      	movs	r2, #6
 80174c6:	f7e8 fec3 	bl	8000250 <memchr>
 80174ca:	2800      	cmp	r0, #0
 80174cc:	d03f      	beq.n	801754e <_vfiprintf_r+0x20a>
 80174ce:	4b26      	ldr	r3, [pc, #152]	@ (8017568 <_vfiprintf_r+0x224>)
 80174d0:	bb1b      	cbnz	r3, 801751a <_vfiprintf_r+0x1d6>
 80174d2:	9b03      	ldr	r3, [sp, #12]
 80174d4:	3307      	adds	r3, #7
 80174d6:	f023 0307 	bic.w	r3, r3, #7
 80174da:	3308      	adds	r3, #8
 80174dc:	9303      	str	r3, [sp, #12]
 80174de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174e0:	443b      	add	r3, r7
 80174e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80174e4:	e76a      	b.n	80173bc <_vfiprintf_r+0x78>
 80174e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80174ea:	460c      	mov	r4, r1
 80174ec:	2001      	movs	r0, #1
 80174ee:	e7a8      	b.n	8017442 <_vfiprintf_r+0xfe>
 80174f0:	2300      	movs	r3, #0
 80174f2:	3401      	adds	r4, #1
 80174f4:	9305      	str	r3, [sp, #20]
 80174f6:	4619      	mov	r1, r3
 80174f8:	f04f 0c0a 	mov.w	ip, #10
 80174fc:	4620      	mov	r0, r4
 80174fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017502:	3a30      	subs	r2, #48	@ 0x30
 8017504:	2a09      	cmp	r2, #9
 8017506:	d903      	bls.n	8017510 <_vfiprintf_r+0x1cc>
 8017508:	2b00      	cmp	r3, #0
 801750a:	d0c6      	beq.n	801749a <_vfiprintf_r+0x156>
 801750c:	9105      	str	r1, [sp, #20]
 801750e:	e7c4      	b.n	801749a <_vfiprintf_r+0x156>
 8017510:	fb0c 2101 	mla	r1, ip, r1, r2
 8017514:	4604      	mov	r4, r0
 8017516:	2301      	movs	r3, #1
 8017518:	e7f0      	b.n	80174fc <_vfiprintf_r+0x1b8>
 801751a:	ab03      	add	r3, sp, #12
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	462a      	mov	r2, r5
 8017520:	4b12      	ldr	r3, [pc, #72]	@ (801756c <_vfiprintf_r+0x228>)
 8017522:	a904      	add	r1, sp, #16
 8017524:	4630      	mov	r0, r6
 8017526:	f3af 8000 	nop.w
 801752a:	4607      	mov	r7, r0
 801752c:	1c78      	adds	r0, r7, #1
 801752e:	d1d6      	bne.n	80174de <_vfiprintf_r+0x19a>
 8017530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017532:	07d9      	lsls	r1, r3, #31
 8017534:	d405      	bmi.n	8017542 <_vfiprintf_r+0x1fe>
 8017536:	89ab      	ldrh	r3, [r5, #12]
 8017538:	059a      	lsls	r2, r3, #22
 801753a:	d402      	bmi.n	8017542 <_vfiprintf_r+0x1fe>
 801753c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801753e:	f7ff fceb 	bl	8016f18 <__retarget_lock_release_recursive>
 8017542:	89ab      	ldrh	r3, [r5, #12]
 8017544:	065b      	lsls	r3, r3, #25
 8017546:	f53f af1f 	bmi.w	8017388 <_vfiprintf_r+0x44>
 801754a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801754c:	e71e      	b.n	801738c <_vfiprintf_r+0x48>
 801754e:	ab03      	add	r3, sp, #12
 8017550:	9300      	str	r3, [sp, #0]
 8017552:	462a      	mov	r2, r5
 8017554:	4b05      	ldr	r3, [pc, #20]	@ (801756c <_vfiprintf_r+0x228>)
 8017556:	a904      	add	r1, sp, #16
 8017558:	4630      	mov	r0, r6
 801755a:	f000 f879 	bl	8017650 <_printf_i>
 801755e:	e7e4      	b.n	801752a <_vfiprintf_r+0x1e6>
 8017560:	08018b4c 	.word	0x08018b4c
 8017564:	08018b56 	.word	0x08018b56
 8017568:	00000000 	.word	0x00000000
 801756c:	0801731f 	.word	0x0801731f
 8017570:	08018b52 	.word	0x08018b52

08017574 <_printf_common>:
 8017574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017578:	4616      	mov	r6, r2
 801757a:	4698      	mov	r8, r3
 801757c:	688a      	ldr	r2, [r1, #8]
 801757e:	690b      	ldr	r3, [r1, #16]
 8017580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017584:	4293      	cmp	r3, r2
 8017586:	bfb8      	it	lt
 8017588:	4613      	movlt	r3, r2
 801758a:	6033      	str	r3, [r6, #0]
 801758c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017590:	4607      	mov	r7, r0
 8017592:	460c      	mov	r4, r1
 8017594:	b10a      	cbz	r2, 801759a <_printf_common+0x26>
 8017596:	3301      	adds	r3, #1
 8017598:	6033      	str	r3, [r6, #0]
 801759a:	6823      	ldr	r3, [r4, #0]
 801759c:	0699      	lsls	r1, r3, #26
 801759e:	bf42      	ittt	mi
 80175a0:	6833      	ldrmi	r3, [r6, #0]
 80175a2:	3302      	addmi	r3, #2
 80175a4:	6033      	strmi	r3, [r6, #0]
 80175a6:	6825      	ldr	r5, [r4, #0]
 80175a8:	f015 0506 	ands.w	r5, r5, #6
 80175ac:	d106      	bne.n	80175bc <_printf_common+0x48>
 80175ae:	f104 0a19 	add.w	sl, r4, #25
 80175b2:	68e3      	ldr	r3, [r4, #12]
 80175b4:	6832      	ldr	r2, [r6, #0]
 80175b6:	1a9b      	subs	r3, r3, r2
 80175b8:	42ab      	cmp	r3, r5
 80175ba:	dc26      	bgt.n	801760a <_printf_common+0x96>
 80175bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80175c0:	6822      	ldr	r2, [r4, #0]
 80175c2:	3b00      	subs	r3, #0
 80175c4:	bf18      	it	ne
 80175c6:	2301      	movne	r3, #1
 80175c8:	0692      	lsls	r2, r2, #26
 80175ca:	d42b      	bmi.n	8017624 <_printf_common+0xb0>
 80175cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80175d0:	4641      	mov	r1, r8
 80175d2:	4638      	mov	r0, r7
 80175d4:	47c8      	blx	r9
 80175d6:	3001      	adds	r0, #1
 80175d8:	d01e      	beq.n	8017618 <_printf_common+0xa4>
 80175da:	6823      	ldr	r3, [r4, #0]
 80175dc:	6922      	ldr	r2, [r4, #16]
 80175de:	f003 0306 	and.w	r3, r3, #6
 80175e2:	2b04      	cmp	r3, #4
 80175e4:	bf02      	ittt	eq
 80175e6:	68e5      	ldreq	r5, [r4, #12]
 80175e8:	6833      	ldreq	r3, [r6, #0]
 80175ea:	1aed      	subeq	r5, r5, r3
 80175ec:	68a3      	ldr	r3, [r4, #8]
 80175ee:	bf0c      	ite	eq
 80175f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175f4:	2500      	movne	r5, #0
 80175f6:	4293      	cmp	r3, r2
 80175f8:	bfc4      	itt	gt
 80175fa:	1a9b      	subgt	r3, r3, r2
 80175fc:	18ed      	addgt	r5, r5, r3
 80175fe:	2600      	movs	r6, #0
 8017600:	341a      	adds	r4, #26
 8017602:	42b5      	cmp	r5, r6
 8017604:	d11a      	bne.n	801763c <_printf_common+0xc8>
 8017606:	2000      	movs	r0, #0
 8017608:	e008      	b.n	801761c <_printf_common+0xa8>
 801760a:	2301      	movs	r3, #1
 801760c:	4652      	mov	r2, sl
 801760e:	4641      	mov	r1, r8
 8017610:	4638      	mov	r0, r7
 8017612:	47c8      	blx	r9
 8017614:	3001      	adds	r0, #1
 8017616:	d103      	bne.n	8017620 <_printf_common+0xac>
 8017618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017620:	3501      	adds	r5, #1
 8017622:	e7c6      	b.n	80175b2 <_printf_common+0x3e>
 8017624:	18e1      	adds	r1, r4, r3
 8017626:	1c5a      	adds	r2, r3, #1
 8017628:	2030      	movs	r0, #48	@ 0x30
 801762a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801762e:	4422      	add	r2, r4
 8017630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017638:	3302      	adds	r3, #2
 801763a:	e7c7      	b.n	80175cc <_printf_common+0x58>
 801763c:	2301      	movs	r3, #1
 801763e:	4622      	mov	r2, r4
 8017640:	4641      	mov	r1, r8
 8017642:	4638      	mov	r0, r7
 8017644:	47c8      	blx	r9
 8017646:	3001      	adds	r0, #1
 8017648:	d0e6      	beq.n	8017618 <_printf_common+0xa4>
 801764a:	3601      	adds	r6, #1
 801764c:	e7d9      	b.n	8017602 <_printf_common+0x8e>
	...

08017650 <_printf_i>:
 8017650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017654:	7e0f      	ldrb	r7, [r1, #24]
 8017656:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017658:	2f78      	cmp	r7, #120	@ 0x78
 801765a:	4691      	mov	r9, r2
 801765c:	4680      	mov	r8, r0
 801765e:	460c      	mov	r4, r1
 8017660:	469a      	mov	sl, r3
 8017662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017666:	d807      	bhi.n	8017678 <_printf_i+0x28>
 8017668:	2f62      	cmp	r7, #98	@ 0x62
 801766a:	d80a      	bhi.n	8017682 <_printf_i+0x32>
 801766c:	2f00      	cmp	r7, #0
 801766e:	f000 80d2 	beq.w	8017816 <_printf_i+0x1c6>
 8017672:	2f58      	cmp	r7, #88	@ 0x58
 8017674:	f000 80b9 	beq.w	80177ea <_printf_i+0x19a>
 8017678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801767c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017680:	e03a      	b.n	80176f8 <_printf_i+0xa8>
 8017682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017686:	2b15      	cmp	r3, #21
 8017688:	d8f6      	bhi.n	8017678 <_printf_i+0x28>
 801768a:	a101      	add	r1, pc, #4	@ (adr r1, 8017690 <_printf_i+0x40>)
 801768c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017690:	080176e9 	.word	0x080176e9
 8017694:	080176fd 	.word	0x080176fd
 8017698:	08017679 	.word	0x08017679
 801769c:	08017679 	.word	0x08017679
 80176a0:	08017679 	.word	0x08017679
 80176a4:	08017679 	.word	0x08017679
 80176a8:	080176fd 	.word	0x080176fd
 80176ac:	08017679 	.word	0x08017679
 80176b0:	08017679 	.word	0x08017679
 80176b4:	08017679 	.word	0x08017679
 80176b8:	08017679 	.word	0x08017679
 80176bc:	080177fd 	.word	0x080177fd
 80176c0:	08017727 	.word	0x08017727
 80176c4:	080177b7 	.word	0x080177b7
 80176c8:	08017679 	.word	0x08017679
 80176cc:	08017679 	.word	0x08017679
 80176d0:	0801781f 	.word	0x0801781f
 80176d4:	08017679 	.word	0x08017679
 80176d8:	08017727 	.word	0x08017727
 80176dc:	08017679 	.word	0x08017679
 80176e0:	08017679 	.word	0x08017679
 80176e4:	080177bf 	.word	0x080177bf
 80176e8:	6833      	ldr	r3, [r6, #0]
 80176ea:	1d1a      	adds	r2, r3, #4
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	6032      	str	r2, [r6, #0]
 80176f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80176f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80176f8:	2301      	movs	r3, #1
 80176fa:	e09d      	b.n	8017838 <_printf_i+0x1e8>
 80176fc:	6833      	ldr	r3, [r6, #0]
 80176fe:	6820      	ldr	r0, [r4, #0]
 8017700:	1d19      	adds	r1, r3, #4
 8017702:	6031      	str	r1, [r6, #0]
 8017704:	0606      	lsls	r6, r0, #24
 8017706:	d501      	bpl.n	801770c <_printf_i+0xbc>
 8017708:	681d      	ldr	r5, [r3, #0]
 801770a:	e003      	b.n	8017714 <_printf_i+0xc4>
 801770c:	0645      	lsls	r5, r0, #25
 801770e:	d5fb      	bpl.n	8017708 <_printf_i+0xb8>
 8017710:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017714:	2d00      	cmp	r5, #0
 8017716:	da03      	bge.n	8017720 <_printf_i+0xd0>
 8017718:	232d      	movs	r3, #45	@ 0x2d
 801771a:	426d      	negs	r5, r5
 801771c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017720:	4859      	ldr	r0, [pc, #356]	@ (8017888 <_printf_i+0x238>)
 8017722:	230a      	movs	r3, #10
 8017724:	e011      	b.n	801774a <_printf_i+0xfa>
 8017726:	6821      	ldr	r1, [r4, #0]
 8017728:	6833      	ldr	r3, [r6, #0]
 801772a:	0608      	lsls	r0, r1, #24
 801772c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017730:	d402      	bmi.n	8017738 <_printf_i+0xe8>
 8017732:	0649      	lsls	r1, r1, #25
 8017734:	bf48      	it	mi
 8017736:	b2ad      	uxthmi	r5, r5
 8017738:	2f6f      	cmp	r7, #111	@ 0x6f
 801773a:	4853      	ldr	r0, [pc, #332]	@ (8017888 <_printf_i+0x238>)
 801773c:	6033      	str	r3, [r6, #0]
 801773e:	bf14      	ite	ne
 8017740:	230a      	movne	r3, #10
 8017742:	2308      	moveq	r3, #8
 8017744:	2100      	movs	r1, #0
 8017746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801774a:	6866      	ldr	r6, [r4, #4]
 801774c:	60a6      	str	r6, [r4, #8]
 801774e:	2e00      	cmp	r6, #0
 8017750:	bfa2      	ittt	ge
 8017752:	6821      	ldrge	r1, [r4, #0]
 8017754:	f021 0104 	bicge.w	r1, r1, #4
 8017758:	6021      	strge	r1, [r4, #0]
 801775a:	b90d      	cbnz	r5, 8017760 <_printf_i+0x110>
 801775c:	2e00      	cmp	r6, #0
 801775e:	d04b      	beq.n	80177f8 <_printf_i+0x1a8>
 8017760:	4616      	mov	r6, r2
 8017762:	fbb5 f1f3 	udiv	r1, r5, r3
 8017766:	fb03 5711 	mls	r7, r3, r1, r5
 801776a:	5dc7      	ldrb	r7, [r0, r7]
 801776c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017770:	462f      	mov	r7, r5
 8017772:	42bb      	cmp	r3, r7
 8017774:	460d      	mov	r5, r1
 8017776:	d9f4      	bls.n	8017762 <_printf_i+0x112>
 8017778:	2b08      	cmp	r3, #8
 801777a:	d10b      	bne.n	8017794 <_printf_i+0x144>
 801777c:	6823      	ldr	r3, [r4, #0]
 801777e:	07df      	lsls	r7, r3, #31
 8017780:	d508      	bpl.n	8017794 <_printf_i+0x144>
 8017782:	6923      	ldr	r3, [r4, #16]
 8017784:	6861      	ldr	r1, [r4, #4]
 8017786:	4299      	cmp	r1, r3
 8017788:	bfde      	ittt	le
 801778a:	2330      	movle	r3, #48	@ 0x30
 801778c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017790:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017794:	1b92      	subs	r2, r2, r6
 8017796:	6122      	str	r2, [r4, #16]
 8017798:	f8cd a000 	str.w	sl, [sp]
 801779c:	464b      	mov	r3, r9
 801779e:	aa03      	add	r2, sp, #12
 80177a0:	4621      	mov	r1, r4
 80177a2:	4640      	mov	r0, r8
 80177a4:	f7ff fee6 	bl	8017574 <_printf_common>
 80177a8:	3001      	adds	r0, #1
 80177aa:	d14a      	bne.n	8017842 <_printf_i+0x1f2>
 80177ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80177b0:	b004      	add	sp, #16
 80177b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177b6:	6823      	ldr	r3, [r4, #0]
 80177b8:	f043 0320 	orr.w	r3, r3, #32
 80177bc:	6023      	str	r3, [r4, #0]
 80177be:	4833      	ldr	r0, [pc, #204]	@ (801788c <_printf_i+0x23c>)
 80177c0:	2778      	movs	r7, #120	@ 0x78
 80177c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80177c6:	6823      	ldr	r3, [r4, #0]
 80177c8:	6831      	ldr	r1, [r6, #0]
 80177ca:	061f      	lsls	r7, r3, #24
 80177cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80177d0:	d402      	bmi.n	80177d8 <_printf_i+0x188>
 80177d2:	065f      	lsls	r7, r3, #25
 80177d4:	bf48      	it	mi
 80177d6:	b2ad      	uxthmi	r5, r5
 80177d8:	6031      	str	r1, [r6, #0]
 80177da:	07d9      	lsls	r1, r3, #31
 80177dc:	bf44      	itt	mi
 80177de:	f043 0320 	orrmi.w	r3, r3, #32
 80177e2:	6023      	strmi	r3, [r4, #0]
 80177e4:	b11d      	cbz	r5, 80177ee <_printf_i+0x19e>
 80177e6:	2310      	movs	r3, #16
 80177e8:	e7ac      	b.n	8017744 <_printf_i+0xf4>
 80177ea:	4827      	ldr	r0, [pc, #156]	@ (8017888 <_printf_i+0x238>)
 80177ec:	e7e9      	b.n	80177c2 <_printf_i+0x172>
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	f023 0320 	bic.w	r3, r3, #32
 80177f4:	6023      	str	r3, [r4, #0]
 80177f6:	e7f6      	b.n	80177e6 <_printf_i+0x196>
 80177f8:	4616      	mov	r6, r2
 80177fa:	e7bd      	b.n	8017778 <_printf_i+0x128>
 80177fc:	6833      	ldr	r3, [r6, #0]
 80177fe:	6825      	ldr	r5, [r4, #0]
 8017800:	6961      	ldr	r1, [r4, #20]
 8017802:	1d18      	adds	r0, r3, #4
 8017804:	6030      	str	r0, [r6, #0]
 8017806:	062e      	lsls	r6, r5, #24
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	d501      	bpl.n	8017810 <_printf_i+0x1c0>
 801780c:	6019      	str	r1, [r3, #0]
 801780e:	e002      	b.n	8017816 <_printf_i+0x1c6>
 8017810:	0668      	lsls	r0, r5, #25
 8017812:	d5fb      	bpl.n	801780c <_printf_i+0x1bc>
 8017814:	8019      	strh	r1, [r3, #0]
 8017816:	2300      	movs	r3, #0
 8017818:	6123      	str	r3, [r4, #16]
 801781a:	4616      	mov	r6, r2
 801781c:	e7bc      	b.n	8017798 <_printf_i+0x148>
 801781e:	6833      	ldr	r3, [r6, #0]
 8017820:	1d1a      	adds	r2, r3, #4
 8017822:	6032      	str	r2, [r6, #0]
 8017824:	681e      	ldr	r6, [r3, #0]
 8017826:	6862      	ldr	r2, [r4, #4]
 8017828:	2100      	movs	r1, #0
 801782a:	4630      	mov	r0, r6
 801782c:	f7e8 fd10 	bl	8000250 <memchr>
 8017830:	b108      	cbz	r0, 8017836 <_printf_i+0x1e6>
 8017832:	1b80      	subs	r0, r0, r6
 8017834:	6060      	str	r0, [r4, #4]
 8017836:	6863      	ldr	r3, [r4, #4]
 8017838:	6123      	str	r3, [r4, #16]
 801783a:	2300      	movs	r3, #0
 801783c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017840:	e7aa      	b.n	8017798 <_printf_i+0x148>
 8017842:	6923      	ldr	r3, [r4, #16]
 8017844:	4632      	mov	r2, r6
 8017846:	4649      	mov	r1, r9
 8017848:	4640      	mov	r0, r8
 801784a:	47d0      	blx	sl
 801784c:	3001      	adds	r0, #1
 801784e:	d0ad      	beq.n	80177ac <_printf_i+0x15c>
 8017850:	6823      	ldr	r3, [r4, #0]
 8017852:	079b      	lsls	r3, r3, #30
 8017854:	d413      	bmi.n	801787e <_printf_i+0x22e>
 8017856:	68e0      	ldr	r0, [r4, #12]
 8017858:	9b03      	ldr	r3, [sp, #12]
 801785a:	4298      	cmp	r0, r3
 801785c:	bfb8      	it	lt
 801785e:	4618      	movlt	r0, r3
 8017860:	e7a6      	b.n	80177b0 <_printf_i+0x160>
 8017862:	2301      	movs	r3, #1
 8017864:	4632      	mov	r2, r6
 8017866:	4649      	mov	r1, r9
 8017868:	4640      	mov	r0, r8
 801786a:	47d0      	blx	sl
 801786c:	3001      	adds	r0, #1
 801786e:	d09d      	beq.n	80177ac <_printf_i+0x15c>
 8017870:	3501      	adds	r5, #1
 8017872:	68e3      	ldr	r3, [r4, #12]
 8017874:	9903      	ldr	r1, [sp, #12]
 8017876:	1a5b      	subs	r3, r3, r1
 8017878:	42ab      	cmp	r3, r5
 801787a:	dcf2      	bgt.n	8017862 <_printf_i+0x212>
 801787c:	e7eb      	b.n	8017856 <_printf_i+0x206>
 801787e:	2500      	movs	r5, #0
 8017880:	f104 0619 	add.w	r6, r4, #25
 8017884:	e7f5      	b.n	8017872 <_printf_i+0x222>
 8017886:	bf00      	nop
 8017888:	08018b5d 	.word	0x08018b5d
 801788c:	08018b6e 	.word	0x08018b6e

08017890 <__sflush_r>:
 8017890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017898:	0716      	lsls	r6, r2, #28
 801789a:	4605      	mov	r5, r0
 801789c:	460c      	mov	r4, r1
 801789e:	d454      	bmi.n	801794a <__sflush_r+0xba>
 80178a0:	684b      	ldr	r3, [r1, #4]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	dc02      	bgt.n	80178ac <__sflush_r+0x1c>
 80178a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	dd48      	ble.n	801793e <__sflush_r+0xae>
 80178ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80178ae:	2e00      	cmp	r6, #0
 80178b0:	d045      	beq.n	801793e <__sflush_r+0xae>
 80178b2:	2300      	movs	r3, #0
 80178b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80178b8:	682f      	ldr	r7, [r5, #0]
 80178ba:	6a21      	ldr	r1, [r4, #32]
 80178bc:	602b      	str	r3, [r5, #0]
 80178be:	d030      	beq.n	8017922 <__sflush_r+0x92>
 80178c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80178c2:	89a3      	ldrh	r3, [r4, #12]
 80178c4:	0759      	lsls	r1, r3, #29
 80178c6:	d505      	bpl.n	80178d4 <__sflush_r+0x44>
 80178c8:	6863      	ldr	r3, [r4, #4]
 80178ca:	1ad2      	subs	r2, r2, r3
 80178cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80178ce:	b10b      	cbz	r3, 80178d4 <__sflush_r+0x44>
 80178d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80178d2:	1ad2      	subs	r2, r2, r3
 80178d4:	2300      	movs	r3, #0
 80178d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80178d8:	6a21      	ldr	r1, [r4, #32]
 80178da:	4628      	mov	r0, r5
 80178dc:	47b0      	blx	r6
 80178de:	1c43      	adds	r3, r0, #1
 80178e0:	89a3      	ldrh	r3, [r4, #12]
 80178e2:	d106      	bne.n	80178f2 <__sflush_r+0x62>
 80178e4:	6829      	ldr	r1, [r5, #0]
 80178e6:	291d      	cmp	r1, #29
 80178e8:	d82b      	bhi.n	8017942 <__sflush_r+0xb2>
 80178ea:	4a2a      	ldr	r2, [pc, #168]	@ (8017994 <__sflush_r+0x104>)
 80178ec:	410a      	asrs	r2, r1
 80178ee:	07d6      	lsls	r6, r2, #31
 80178f0:	d427      	bmi.n	8017942 <__sflush_r+0xb2>
 80178f2:	2200      	movs	r2, #0
 80178f4:	6062      	str	r2, [r4, #4]
 80178f6:	04d9      	lsls	r1, r3, #19
 80178f8:	6922      	ldr	r2, [r4, #16]
 80178fa:	6022      	str	r2, [r4, #0]
 80178fc:	d504      	bpl.n	8017908 <__sflush_r+0x78>
 80178fe:	1c42      	adds	r2, r0, #1
 8017900:	d101      	bne.n	8017906 <__sflush_r+0x76>
 8017902:	682b      	ldr	r3, [r5, #0]
 8017904:	b903      	cbnz	r3, 8017908 <__sflush_r+0x78>
 8017906:	6560      	str	r0, [r4, #84]	@ 0x54
 8017908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801790a:	602f      	str	r7, [r5, #0]
 801790c:	b1b9      	cbz	r1, 801793e <__sflush_r+0xae>
 801790e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017912:	4299      	cmp	r1, r3
 8017914:	d002      	beq.n	801791c <__sflush_r+0x8c>
 8017916:	4628      	mov	r0, r5
 8017918:	f7ff fb40 	bl	8016f9c <_free_r>
 801791c:	2300      	movs	r3, #0
 801791e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017920:	e00d      	b.n	801793e <__sflush_r+0xae>
 8017922:	2301      	movs	r3, #1
 8017924:	4628      	mov	r0, r5
 8017926:	47b0      	blx	r6
 8017928:	4602      	mov	r2, r0
 801792a:	1c50      	adds	r0, r2, #1
 801792c:	d1c9      	bne.n	80178c2 <__sflush_r+0x32>
 801792e:	682b      	ldr	r3, [r5, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d0c6      	beq.n	80178c2 <__sflush_r+0x32>
 8017934:	2b1d      	cmp	r3, #29
 8017936:	d001      	beq.n	801793c <__sflush_r+0xac>
 8017938:	2b16      	cmp	r3, #22
 801793a:	d11e      	bne.n	801797a <__sflush_r+0xea>
 801793c:	602f      	str	r7, [r5, #0]
 801793e:	2000      	movs	r0, #0
 8017940:	e022      	b.n	8017988 <__sflush_r+0xf8>
 8017942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017946:	b21b      	sxth	r3, r3
 8017948:	e01b      	b.n	8017982 <__sflush_r+0xf2>
 801794a:	690f      	ldr	r7, [r1, #16]
 801794c:	2f00      	cmp	r7, #0
 801794e:	d0f6      	beq.n	801793e <__sflush_r+0xae>
 8017950:	0793      	lsls	r3, r2, #30
 8017952:	680e      	ldr	r6, [r1, #0]
 8017954:	bf08      	it	eq
 8017956:	694b      	ldreq	r3, [r1, #20]
 8017958:	600f      	str	r7, [r1, #0]
 801795a:	bf18      	it	ne
 801795c:	2300      	movne	r3, #0
 801795e:	eba6 0807 	sub.w	r8, r6, r7
 8017962:	608b      	str	r3, [r1, #8]
 8017964:	f1b8 0f00 	cmp.w	r8, #0
 8017968:	dde9      	ble.n	801793e <__sflush_r+0xae>
 801796a:	6a21      	ldr	r1, [r4, #32]
 801796c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801796e:	4643      	mov	r3, r8
 8017970:	463a      	mov	r2, r7
 8017972:	4628      	mov	r0, r5
 8017974:	47b0      	blx	r6
 8017976:	2800      	cmp	r0, #0
 8017978:	dc08      	bgt.n	801798c <__sflush_r+0xfc>
 801797a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801797e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017982:	81a3      	strh	r3, [r4, #12]
 8017984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801798c:	4407      	add	r7, r0
 801798e:	eba8 0800 	sub.w	r8, r8, r0
 8017992:	e7e7      	b.n	8017964 <__sflush_r+0xd4>
 8017994:	dfbffffe 	.word	0xdfbffffe

08017998 <_fflush_r>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	690b      	ldr	r3, [r1, #16]
 801799c:	4605      	mov	r5, r0
 801799e:	460c      	mov	r4, r1
 80179a0:	b913      	cbnz	r3, 80179a8 <_fflush_r+0x10>
 80179a2:	2500      	movs	r5, #0
 80179a4:	4628      	mov	r0, r5
 80179a6:	bd38      	pop	{r3, r4, r5, pc}
 80179a8:	b118      	cbz	r0, 80179b2 <_fflush_r+0x1a>
 80179aa:	6a03      	ldr	r3, [r0, #32]
 80179ac:	b90b      	cbnz	r3, 80179b2 <_fflush_r+0x1a>
 80179ae:	f7ff f8d1 	bl	8016b54 <__sinit>
 80179b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d0f3      	beq.n	80179a2 <_fflush_r+0xa>
 80179ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80179bc:	07d0      	lsls	r0, r2, #31
 80179be:	d404      	bmi.n	80179ca <_fflush_r+0x32>
 80179c0:	0599      	lsls	r1, r3, #22
 80179c2:	d402      	bmi.n	80179ca <_fflush_r+0x32>
 80179c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80179c6:	f7ff faa6 	bl	8016f16 <__retarget_lock_acquire_recursive>
 80179ca:	4628      	mov	r0, r5
 80179cc:	4621      	mov	r1, r4
 80179ce:	f7ff ff5f 	bl	8017890 <__sflush_r>
 80179d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80179d4:	07da      	lsls	r2, r3, #31
 80179d6:	4605      	mov	r5, r0
 80179d8:	d4e4      	bmi.n	80179a4 <_fflush_r+0xc>
 80179da:	89a3      	ldrh	r3, [r4, #12]
 80179dc:	059b      	lsls	r3, r3, #22
 80179de:	d4e1      	bmi.n	80179a4 <_fflush_r+0xc>
 80179e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80179e2:	f7ff fa99 	bl	8016f18 <__retarget_lock_release_recursive>
 80179e6:	e7dd      	b.n	80179a4 <_fflush_r+0xc>

080179e8 <fiprintf>:
 80179e8:	b40e      	push	{r1, r2, r3}
 80179ea:	b503      	push	{r0, r1, lr}
 80179ec:	4601      	mov	r1, r0
 80179ee:	ab03      	add	r3, sp, #12
 80179f0:	4805      	ldr	r0, [pc, #20]	@ (8017a08 <fiprintf+0x20>)
 80179f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80179f6:	6800      	ldr	r0, [r0, #0]
 80179f8:	9301      	str	r3, [sp, #4]
 80179fa:	f7ff fca3 	bl	8017344 <_vfiprintf_r>
 80179fe:	b002      	add	sp, #8
 8017a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a04:	b003      	add	sp, #12
 8017a06:	4770      	bx	lr
 8017a08:	20000148 	.word	0x20000148

08017a0c <__swbuf_r>:
 8017a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a0e:	460e      	mov	r6, r1
 8017a10:	4614      	mov	r4, r2
 8017a12:	4605      	mov	r5, r0
 8017a14:	b118      	cbz	r0, 8017a1e <__swbuf_r+0x12>
 8017a16:	6a03      	ldr	r3, [r0, #32]
 8017a18:	b90b      	cbnz	r3, 8017a1e <__swbuf_r+0x12>
 8017a1a:	f7ff f89b 	bl	8016b54 <__sinit>
 8017a1e:	69a3      	ldr	r3, [r4, #24]
 8017a20:	60a3      	str	r3, [r4, #8]
 8017a22:	89a3      	ldrh	r3, [r4, #12]
 8017a24:	071a      	lsls	r2, r3, #28
 8017a26:	d501      	bpl.n	8017a2c <__swbuf_r+0x20>
 8017a28:	6923      	ldr	r3, [r4, #16]
 8017a2a:	b943      	cbnz	r3, 8017a3e <__swbuf_r+0x32>
 8017a2c:	4621      	mov	r1, r4
 8017a2e:	4628      	mov	r0, r5
 8017a30:	f000 f82a 	bl	8017a88 <__swsetup_r>
 8017a34:	b118      	cbz	r0, 8017a3e <__swbuf_r+0x32>
 8017a36:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017a3a:	4638      	mov	r0, r7
 8017a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a3e:	6823      	ldr	r3, [r4, #0]
 8017a40:	6922      	ldr	r2, [r4, #16]
 8017a42:	1a98      	subs	r0, r3, r2
 8017a44:	6963      	ldr	r3, [r4, #20]
 8017a46:	b2f6      	uxtb	r6, r6
 8017a48:	4283      	cmp	r3, r0
 8017a4a:	4637      	mov	r7, r6
 8017a4c:	dc05      	bgt.n	8017a5a <__swbuf_r+0x4e>
 8017a4e:	4621      	mov	r1, r4
 8017a50:	4628      	mov	r0, r5
 8017a52:	f7ff ffa1 	bl	8017998 <_fflush_r>
 8017a56:	2800      	cmp	r0, #0
 8017a58:	d1ed      	bne.n	8017a36 <__swbuf_r+0x2a>
 8017a5a:	68a3      	ldr	r3, [r4, #8]
 8017a5c:	3b01      	subs	r3, #1
 8017a5e:	60a3      	str	r3, [r4, #8]
 8017a60:	6823      	ldr	r3, [r4, #0]
 8017a62:	1c5a      	adds	r2, r3, #1
 8017a64:	6022      	str	r2, [r4, #0]
 8017a66:	701e      	strb	r6, [r3, #0]
 8017a68:	6962      	ldr	r2, [r4, #20]
 8017a6a:	1c43      	adds	r3, r0, #1
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	d004      	beq.n	8017a7a <__swbuf_r+0x6e>
 8017a70:	89a3      	ldrh	r3, [r4, #12]
 8017a72:	07db      	lsls	r3, r3, #31
 8017a74:	d5e1      	bpl.n	8017a3a <__swbuf_r+0x2e>
 8017a76:	2e0a      	cmp	r6, #10
 8017a78:	d1df      	bne.n	8017a3a <__swbuf_r+0x2e>
 8017a7a:	4621      	mov	r1, r4
 8017a7c:	4628      	mov	r0, r5
 8017a7e:	f7ff ff8b 	bl	8017998 <_fflush_r>
 8017a82:	2800      	cmp	r0, #0
 8017a84:	d0d9      	beq.n	8017a3a <__swbuf_r+0x2e>
 8017a86:	e7d6      	b.n	8017a36 <__swbuf_r+0x2a>

08017a88 <__swsetup_r>:
 8017a88:	b538      	push	{r3, r4, r5, lr}
 8017a8a:	4b29      	ldr	r3, [pc, #164]	@ (8017b30 <__swsetup_r+0xa8>)
 8017a8c:	4605      	mov	r5, r0
 8017a8e:	6818      	ldr	r0, [r3, #0]
 8017a90:	460c      	mov	r4, r1
 8017a92:	b118      	cbz	r0, 8017a9c <__swsetup_r+0x14>
 8017a94:	6a03      	ldr	r3, [r0, #32]
 8017a96:	b90b      	cbnz	r3, 8017a9c <__swsetup_r+0x14>
 8017a98:	f7ff f85c 	bl	8016b54 <__sinit>
 8017a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aa0:	0719      	lsls	r1, r3, #28
 8017aa2:	d422      	bmi.n	8017aea <__swsetup_r+0x62>
 8017aa4:	06da      	lsls	r2, r3, #27
 8017aa6:	d407      	bmi.n	8017ab8 <__swsetup_r+0x30>
 8017aa8:	2209      	movs	r2, #9
 8017aaa:	602a      	str	r2, [r5, #0]
 8017aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ab0:	81a3      	strh	r3, [r4, #12]
 8017ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ab6:	e033      	b.n	8017b20 <__swsetup_r+0x98>
 8017ab8:	0758      	lsls	r0, r3, #29
 8017aba:	d512      	bpl.n	8017ae2 <__swsetup_r+0x5a>
 8017abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017abe:	b141      	cbz	r1, 8017ad2 <__swsetup_r+0x4a>
 8017ac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ac4:	4299      	cmp	r1, r3
 8017ac6:	d002      	beq.n	8017ace <__swsetup_r+0x46>
 8017ac8:	4628      	mov	r0, r5
 8017aca:	f7ff fa67 	bl	8016f9c <_free_r>
 8017ace:	2300      	movs	r3, #0
 8017ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8017ad2:	89a3      	ldrh	r3, [r4, #12]
 8017ad4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017ad8:	81a3      	strh	r3, [r4, #12]
 8017ada:	2300      	movs	r3, #0
 8017adc:	6063      	str	r3, [r4, #4]
 8017ade:	6923      	ldr	r3, [r4, #16]
 8017ae0:	6023      	str	r3, [r4, #0]
 8017ae2:	89a3      	ldrh	r3, [r4, #12]
 8017ae4:	f043 0308 	orr.w	r3, r3, #8
 8017ae8:	81a3      	strh	r3, [r4, #12]
 8017aea:	6923      	ldr	r3, [r4, #16]
 8017aec:	b94b      	cbnz	r3, 8017b02 <__swsetup_r+0x7a>
 8017aee:	89a3      	ldrh	r3, [r4, #12]
 8017af0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017af8:	d003      	beq.n	8017b02 <__swsetup_r+0x7a>
 8017afa:	4621      	mov	r1, r4
 8017afc:	4628      	mov	r0, r5
 8017afe:	f000 f846 	bl	8017b8e <__smakebuf_r>
 8017b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b06:	f013 0201 	ands.w	r2, r3, #1
 8017b0a:	d00a      	beq.n	8017b22 <__swsetup_r+0x9a>
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	60a2      	str	r2, [r4, #8]
 8017b10:	6962      	ldr	r2, [r4, #20]
 8017b12:	4252      	negs	r2, r2
 8017b14:	61a2      	str	r2, [r4, #24]
 8017b16:	6922      	ldr	r2, [r4, #16]
 8017b18:	b942      	cbnz	r2, 8017b2c <__swsetup_r+0xa4>
 8017b1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017b1e:	d1c5      	bne.n	8017aac <__swsetup_r+0x24>
 8017b20:	bd38      	pop	{r3, r4, r5, pc}
 8017b22:	0799      	lsls	r1, r3, #30
 8017b24:	bf58      	it	pl
 8017b26:	6962      	ldrpl	r2, [r4, #20]
 8017b28:	60a2      	str	r2, [r4, #8]
 8017b2a:	e7f4      	b.n	8017b16 <__swsetup_r+0x8e>
 8017b2c:	2000      	movs	r0, #0
 8017b2e:	e7f7      	b.n	8017b20 <__swsetup_r+0x98>
 8017b30:	20000148 	.word	0x20000148

08017b34 <abort>:
 8017b34:	b508      	push	{r3, lr}
 8017b36:	2006      	movs	r0, #6
 8017b38:	f000 f88e 	bl	8017c58 <raise>
 8017b3c:	2001      	movs	r0, #1
 8017b3e:	f7e9 ff6b 	bl	8001a18 <_exit>

08017b42 <__swhatbuf_r>:
 8017b42:	b570      	push	{r4, r5, r6, lr}
 8017b44:	460c      	mov	r4, r1
 8017b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b4a:	2900      	cmp	r1, #0
 8017b4c:	b096      	sub	sp, #88	@ 0x58
 8017b4e:	4615      	mov	r5, r2
 8017b50:	461e      	mov	r6, r3
 8017b52:	da0d      	bge.n	8017b70 <__swhatbuf_r+0x2e>
 8017b54:	89a3      	ldrh	r3, [r4, #12]
 8017b56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017b5a:	f04f 0100 	mov.w	r1, #0
 8017b5e:	bf14      	ite	ne
 8017b60:	2340      	movne	r3, #64	@ 0x40
 8017b62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017b66:	2000      	movs	r0, #0
 8017b68:	6031      	str	r1, [r6, #0]
 8017b6a:	602b      	str	r3, [r5, #0]
 8017b6c:	b016      	add	sp, #88	@ 0x58
 8017b6e:	bd70      	pop	{r4, r5, r6, pc}
 8017b70:	466a      	mov	r2, sp
 8017b72:	f000 f879 	bl	8017c68 <_fstat_r>
 8017b76:	2800      	cmp	r0, #0
 8017b78:	dbec      	blt.n	8017b54 <__swhatbuf_r+0x12>
 8017b7a:	9901      	ldr	r1, [sp, #4]
 8017b7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017b80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017b84:	4259      	negs	r1, r3
 8017b86:	4159      	adcs	r1, r3
 8017b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017b8c:	e7eb      	b.n	8017b66 <__swhatbuf_r+0x24>

08017b8e <__smakebuf_r>:
 8017b8e:	898b      	ldrh	r3, [r1, #12]
 8017b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b92:	079d      	lsls	r5, r3, #30
 8017b94:	4606      	mov	r6, r0
 8017b96:	460c      	mov	r4, r1
 8017b98:	d507      	bpl.n	8017baa <__smakebuf_r+0x1c>
 8017b9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017b9e:	6023      	str	r3, [r4, #0]
 8017ba0:	6123      	str	r3, [r4, #16]
 8017ba2:	2301      	movs	r3, #1
 8017ba4:	6163      	str	r3, [r4, #20]
 8017ba6:	b003      	add	sp, #12
 8017ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017baa:	ab01      	add	r3, sp, #4
 8017bac:	466a      	mov	r2, sp
 8017bae:	f7ff ffc8 	bl	8017b42 <__swhatbuf_r>
 8017bb2:	9f00      	ldr	r7, [sp, #0]
 8017bb4:	4605      	mov	r5, r0
 8017bb6:	4639      	mov	r1, r7
 8017bb8:	4630      	mov	r0, r6
 8017bba:	f7fe fd99 	bl	80166f0 <_malloc_r>
 8017bbe:	b948      	cbnz	r0, 8017bd4 <__smakebuf_r+0x46>
 8017bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bc4:	059a      	lsls	r2, r3, #22
 8017bc6:	d4ee      	bmi.n	8017ba6 <__smakebuf_r+0x18>
 8017bc8:	f023 0303 	bic.w	r3, r3, #3
 8017bcc:	f043 0302 	orr.w	r3, r3, #2
 8017bd0:	81a3      	strh	r3, [r4, #12]
 8017bd2:	e7e2      	b.n	8017b9a <__smakebuf_r+0xc>
 8017bd4:	89a3      	ldrh	r3, [r4, #12]
 8017bd6:	6020      	str	r0, [r4, #0]
 8017bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017bdc:	81a3      	strh	r3, [r4, #12]
 8017bde:	9b01      	ldr	r3, [sp, #4]
 8017be0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017be4:	b15b      	cbz	r3, 8017bfe <__smakebuf_r+0x70>
 8017be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bea:	4630      	mov	r0, r6
 8017bec:	f000 f84e 	bl	8017c8c <_isatty_r>
 8017bf0:	b128      	cbz	r0, 8017bfe <__smakebuf_r+0x70>
 8017bf2:	89a3      	ldrh	r3, [r4, #12]
 8017bf4:	f023 0303 	bic.w	r3, r3, #3
 8017bf8:	f043 0301 	orr.w	r3, r3, #1
 8017bfc:	81a3      	strh	r3, [r4, #12]
 8017bfe:	89a3      	ldrh	r3, [r4, #12]
 8017c00:	431d      	orrs	r5, r3
 8017c02:	81a5      	strh	r5, [r4, #12]
 8017c04:	e7cf      	b.n	8017ba6 <__smakebuf_r+0x18>

08017c06 <_raise_r>:
 8017c06:	291f      	cmp	r1, #31
 8017c08:	b538      	push	{r3, r4, r5, lr}
 8017c0a:	4605      	mov	r5, r0
 8017c0c:	460c      	mov	r4, r1
 8017c0e:	d904      	bls.n	8017c1a <_raise_r+0x14>
 8017c10:	2316      	movs	r3, #22
 8017c12:	6003      	str	r3, [r0, #0]
 8017c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c18:	bd38      	pop	{r3, r4, r5, pc}
 8017c1a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017c1c:	b112      	cbz	r2, 8017c24 <_raise_r+0x1e>
 8017c1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c22:	b94b      	cbnz	r3, 8017c38 <_raise_r+0x32>
 8017c24:	4628      	mov	r0, r5
 8017c26:	f000 f853 	bl	8017cd0 <_getpid_r>
 8017c2a:	4622      	mov	r2, r4
 8017c2c:	4601      	mov	r1, r0
 8017c2e:	4628      	mov	r0, r5
 8017c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c34:	f000 b83a 	b.w	8017cac <_kill_r>
 8017c38:	2b01      	cmp	r3, #1
 8017c3a:	d00a      	beq.n	8017c52 <_raise_r+0x4c>
 8017c3c:	1c59      	adds	r1, r3, #1
 8017c3e:	d103      	bne.n	8017c48 <_raise_r+0x42>
 8017c40:	2316      	movs	r3, #22
 8017c42:	6003      	str	r3, [r0, #0]
 8017c44:	2001      	movs	r0, #1
 8017c46:	e7e7      	b.n	8017c18 <_raise_r+0x12>
 8017c48:	2100      	movs	r1, #0
 8017c4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017c4e:	4620      	mov	r0, r4
 8017c50:	4798      	blx	r3
 8017c52:	2000      	movs	r0, #0
 8017c54:	e7e0      	b.n	8017c18 <_raise_r+0x12>
	...

08017c58 <raise>:
 8017c58:	4b02      	ldr	r3, [pc, #8]	@ (8017c64 <raise+0xc>)
 8017c5a:	4601      	mov	r1, r0
 8017c5c:	6818      	ldr	r0, [r3, #0]
 8017c5e:	f7ff bfd2 	b.w	8017c06 <_raise_r>
 8017c62:	bf00      	nop
 8017c64:	20000148 	.word	0x20000148

08017c68 <_fstat_r>:
 8017c68:	b538      	push	{r3, r4, r5, lr}
 8017c6a:	4d07      	ldr	r5, [pc, #28]	@ (8017c88 <_fstat_r+0x20>)
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	4604      	mov	r4, r0
 8017c70:	4608      	mov	r0, r1
 8017c72:	4611      	mov	r1, r2
 8017c74:	602b      	str	r3, [r5, #0]
 8017c76:	f7e9 ff1f 	bl	8001ab8 <_fstat>
 8017c7a:	1c43      	adds	r3, r0, #1
 8017c7c:	d102      	bne.n	8017c84 <_fstat_r+0x1c>
 8017c7e:	682b      	ldr	r3, [r5, #0]
 8017c80:	b103      	cbz	r3, 8017c84 <_fstat_r+0x1c>
 8017c82:	6023      	str	r3, [r4, #0]
 8017c84:	bd38      	pop	{r3, r4, r5, pc}
 8017c86:	bf00      	nop
 8017c88:	2000cca0 	.word	0x2000cca0

08017c8c <_isatty_r>:
 8017c8c:	b538      	push	{r3, r4, r5, lr}
 8017c8e:	4d06      	ldr	r5, [pc, #24]	@ (8017ca8 <_isatty_r+0x1c>)
 8017c90:	2300      	movs	r3, #0
 8017c92:	4604      	mov	r4, r0
 8017c94:	4608      	mov	r0, r1
 8017c96:	602b      	str	r3, [r5, #0]
 8017c98:	f7e9 ff1e 	bl	8001ad8 <_isatty>
 8017c9c:	1c43      	adds	r3, r0, #1
 8017c9e:	d102      	bne.n	8017ca6 <_isatty_r+0x1a>
 8017ca0:	682b      	ldr	r3, [r5, #0]
 8017ca2:	b103      	cbz	r3, 8017ca6 <_isatty_r+0x1a>
 8017ca4:	6023      	str	r3, [r4, #0]
 8017ca6:	bd38      	pop	{r3, r4, r5, pc}
 8017ca8:	2000cca0 	.word	0x2000cca0

08017cac <_kill_r>:
 8017cac:	b538      	push	{r3, r4, r5, lr}
 8017cae:	4d07      	ldr	r5, [pc, #28]	@ (8017ccc <_kill_r+0x20>)
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	4608      	mov	r0, r1
 8017cb6:	4611      	mov	r1, r2
 8017cb8:	602b      	str	r3, [r5, #0]
 8017cba:	f7e9 fe9d 	bl	80019f8 <_kill>
 8017cbe:	1c43      	adds	r3, r0, #1
 8017cc0:	d102      	bne.n	8017cc8 <_kill_r+0x1c>
 8017cc2:	682b      	ldr	r3, [r5, #0]
 8017cc4:	b103      	cbz	r3, 8017cc8 <_kill_r+0x1c>
 8017cc6:	6023      	str	r3, [r4, #0]
 8017cc8:	bd38      	pop	{r3, r4, r5, pc}
 8017cca:	bf00      	nop
 8017ccc:	2000cca0 	.word	0x2000cca0

08017cd0 <_getpid_r>:
 8017cd0:	f7e9 be8a 	b.w	80019e8 <_getpid>

08017cd4 <_init>:
 8017cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cd6:	bf00      	nop
 8017cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cda:	bc08      	pop	{r3}
 8017cdc:	469e      	mov	lr, r3
 8017cde:	4770      	bx	lr

08017ce0 <_fini>:
 8017ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce2:	bf00      	nop
 8017ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ce6:	bc08      	pop	{r3}
 8017ce8:	469e      	mov	lr, r3
 8017cea:	4770      	bx	lr
